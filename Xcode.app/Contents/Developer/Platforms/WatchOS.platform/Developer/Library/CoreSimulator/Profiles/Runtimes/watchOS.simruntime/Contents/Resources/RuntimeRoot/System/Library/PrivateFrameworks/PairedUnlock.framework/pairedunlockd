kPURemoteDeviceState_Version
kPURemoteDeviceState_PasscodeSet
kPURemoteDeviceState_PasscodeLocked
kPURemoteDeviceState_UnlockOnly
kPURemoteDeviceState_WristDetectEnabled
version = %@, passcodeSet = %@, isUnlockOnly = %@, isPasscodeLocked = %@, wristDetectEnabled = %@
supportsSecureCoding
TB,R
version
TI,N,V_version
passcodeSet
TB,N,GhasPasscodeSet,V_passcodeSet
passcodeLocked
TB,N,GisPasscodeLocked,V_passcodeLocked
unlockOnly
TB,N,GisUnlockOnly,V_unlockOnly
wristDetectEnabled
TB,N,GisWristDetectEnabled,V_wristDetectEnabled
v4@?0
com.apple.PairedUnlock
pairedunlock
DisableWristDetection
com.apple.pairedunlock.removed-lockout
connection
delegate
%@-%@
com.apple.paired-unlock
hash
TI,R
superclass
T#,R
description
T@"NSString",R,C
debugDescription
Unlock manager connection interrupted
Unlock manager connection INVALIDATED
PairedUnlock connection failed to check in, error = %@!
v8@?0@"NSError"4
v12@?0@"PURemoteDeviceState"4@"NSError"8
com.apple.nanosystemsettings
simple-passcode
remoteDeviceRemoveLockoutHandler
T@?,C,N,V_remoteDeviceRemoveLockoutHandler
T@"<PUConnectionDelegate>",W,V_delegate
T@"PUConnection",W,N,V_connection
com.apple.pairedunlock
CSLDeviceLockFailedAttempts
CSLDeviceLockInLockout
/var/mobile/Library/Carousel/LockoutStateJournal.plist
LockoutStateJournal.plist
/var/mobile/Library/PairedUnlock/
com.apple.pairedunlock.lockjournal
T@"<PUUserAuthenticationModelDelegate>",W,N
temporarilyBlocked
TB,R,N,GisTemporarilyBlocked
permanentlyBlocked
TB,R,N,GisPermanentlyBlocked
timeUntilUnblockedSinceReferenceDate
Td,R,N
T@"<PUUserAuthenticationModelDelegate>",W,N,V_delegate
erase-data-enabled
PUDefaultKeyBlockedForPasscode
PUDefaultKeyNumberOfFailedPasscodeAttempts
PUDefaultKeyDeviceLockPendingWipe
PUDefaultKeyUnblockTimeIntervalSinceReferenceDate
PUDefaultKeyDeviceLockBlockStateGeneration
pendingWipe
blockedForPasscode
numberOfFailedPasscodeAttempts
unblockTimeSinceReferenceDate
blockStateGeneration
T@"NSNumber",&,D,N
IsUnlockOnly
ShouldDisableOnlyRemoteUnlock
com.apple.pairedunlock.handlermanagement
com.apple.pairedunlock.ids
com.apple.private.alloy.pairedunlock
error
v12@?0B4@"NSError"8
Requested
FAILED to request
 (%@)
v20@?0B4@"NSError"8@"NSString"12@"NSString"16
c5l_%@
v8@?0@4
com.apple.Carousel
keyStore
T@"PUKeyStore",&,N,V_keyStore
responseHandlers
T@"NSMutableDictionary",&,N,V_responseHandlers
errorHandlers
T@"NSMutableDictionary",&,N,V_errorHandlers
handlerManagementQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_handlerManagementQueue
T@"<PUPeerDelegate>",N,V_delegate
unlockEnabled
TB,N,GisUnlockEnabled,V_unlockEnabled
PairedUnlock
passcode
%@ %@
hasPasscode
isLocked
isUnlockOnly
isWristDetectionEnabled
TB,N,V_hasPasscode
TB,N,V_isLocked
TB,N,V_isUnlockOnly
hasIsWristDetectionEnabled
TB,N
TB,N,V_isWristDetectionEnabled
actionID
passcodeType
TI,N,V_actionID
hasPasscodeType
TI,N,V_passcodeType
messageID
success
errorData
passcodeState
TI,N,V_messageID
TB,N,V_success
hasErrorData
TB,R,N
T@"NSData",&,N,V_errorData
hasPasscodeState
T@"PUProtoPasscodeState",&,N,V_passcodeState
shouldNotify
TB,N,V_shouldNotify
only supported on watch
CSLDisableWristDetectionChangedNotification
cannot change wrist detect setting if the device is locked
cannot disable wrist detection when unlock only
cannot disable wrist detection, required by configuration
HasSEP
com.apple.pairedsync.nanoprefsyncdfirst
com.apple.pairedsync.nanoprefsyncd
com.apple.carousel.pairedunlockd.syncobserver
T@"<PUPairedSyncObserverDelegate>",R,N,V_delegate
queue
T@"NSObject<OS_dispatch_queue>",R,N,V_queue
activities
T@"NSArray",R,N,V_activities
InLockout
com.apple.pairedunlock.userauthentication
com.apple.pairedunlock.auth.access
passcodeEntryForUnlockDidBegin
passcodeEntryForUnlockDidCancel
passcodeUnlockDidSucceed
passcodeUnlockDidFailWithError
getBlockStateWithReply
clearBlockedState
ShouldNotifyNextUnlock
v8@?0i4
com.apple.pairedunlock.passcode-actions
com.apple.notifyd.matching
v8@?0@"NSObject<OS_xpc_object>"4
peer
T@"PUPeer",R,N,V_peer
connections
T@"NSMutableSet",R,N,V_connections
setting up signal handler for %@
class
isKindOfClass:
hash
hasPasscodeSet
isUnlockOnly
isPasscodeLocked
isWristDetectEnabled
numberWithUnsignedInt:
numberWithBool:
stringWithFormat:
init
decodeIntegerForKey:
decodeBoolForKey:
encodeInteger:forKey:
encodeBool:forKey:
supportsSecureCoding
encodeWithCoder:
initWithCoder:
isEqual:
description
version
setVersion:
setPasscodeSet:
setPasscodeLocked:
setUnlockOnly:
setWristDetectEnabled:
_passcodeSet
_passcodeLocked
_unlockOnly
_wristDetectEnabled
_version
queueNameWithSuffix:
alloc
initWithConnection:
initWithDelegate:
UTF8String
invalidate
dealloc
initWithMachServiceName:options:
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
superclass
debugDescription
checkIn
pairForUnlockWithPasscode:
unpairForUnlock
enableOnlyRemoteUnlockWithPasscode:
disableOnlyRemoteUnlock
requestRemoteDeviceRemoteAction:type:
requestRemoteDeviceUnlockNotification
requestRemoteDeviceRemoveLockout
didCompleteRemoteAction:error:
queryRemoteDeviceState:
requestDeviceSetWristDetectionDisabled:completion:
interfaceWithProtocol:
setRemoteObjectInterface:
didPairForUnlock:error:
didUnpairForUnlock:error:
didEnableOnlyRemoteUnlock:error:
didDisableOnlyRemoteUnlock:error:
remoteDeviceDidCompleteRemoteAction:remoteDeviceState:error:
remoteDeviceDidUnlock
remoteDeviceDidRemoveLockout:error:
didGetRemoteDeviceState:error:
setExportedInterface:
setExportedObject:
setInterruptionHandler:
setServerConnection:
setInvalidationHandler:
resume
remoteObjectProxyWithErrorHandler:
serverConnection
remoteObjectProxy
copy
setRemoteDeviceRemoveLockoutHandler:
delegate
unlockConnection:didPairForUnlock:error:
delegateIfRespondsToSelector:
unlockConnection:didUnpairForUnlock:error:
unlockConnection:didEnableOnlyRemoteUnlock:error:
unlockConnection:didDisableOnlyRemoteUnlock:error:
unlockConnection:remoteDeviceDidCompleteRemoteAction:remoteDeviceState:error:
unlockConnectionRemoteDeviceDidUnlock:
unlockConnection:remoteDeviceDidNotifyState:
remoteDeviceRemoveLockoutHandler
sharedConnection
unlockScreenTypeWithOutSimplePasscodeType:
isPasscodeSet
setWithObject:
synchronizeUserDefaultsDomain:keys:
syncPasscodeState
requestRemoteDeviceRemoveLockout:
getRemoteDeviceState:
.cxx_destruct
setDelegate:
_serverConnection
_serverConnectionQueue
_delegateQueue
_unlockClient
_delegate
_remoteDeviceRemoveLockoutHandler
connection
setConnection:
_connection
dictionaryWithObjects:forKeys:count:
errorWithDomain:code:userInfo:
errorWithCode:description:
stringByAppendingPathComponent:
distantPast
timeIntervalSinceReferenceDate
_loadLockControllerDefaultsJournalIfNecessary
_persistentStateQueue_updateBlockTimeAndPendingWipe
_persistentStateQueue_loadLockState
_persistentStateQueue_cancelSpeculativeFailureCharge
_persistentStateQueue_clearBlockedState
deviceLockStateMayHaveChangedForModel:
_persistentStateQueue_beginSpeculativeFailureCharge
_persistentStateQueue_unlockSucceeded
_persistentStateQueue_unlockFailedWithError:
synchronizeDefaults
_evaluatePendingWipe
timeUntilUnblockedSinceReferenceDate
_persistentStateQueue_evaluatePendingWipe
numberOfFailedPasscodeAttempts
intValue
_persistentStateQueue_shouldWipeDeviceOrBlockForSeconds:withFailureCount:
setPendingWipe:
_persistentStateQueue_shouldPermanentlyBlockOrSetUnblockTimeForSecondsToBlock:
setBlockedForPasscode:
effectiveBoolValueForSetting:
valueForFeature:
_isDeviceWipePreferenceEnabled
_persistentStateQueue_getMaxFailureCount
_secondsToBlockForNumberOfFailedAttempts:
numberWithInt:
setNumberOfFailedPasscodeAttempts:
updateLockControllerDefaultsWithBlock:journaled:
_loadLockControllerDefaults:
callStackSymbols
deviceLockModelRequestsDeviceWipe:
pendingWipe
boolValue
blockedForPasscode
_journaledDefaultsAndTypes
count
initWithCapacity:
countByEnumeratingWithState:objects:count:
deviceLockDefaultForKey:
setObject:forKey:
objectForKeyedSubscript:
setDeviceLockDefault:forKey:
blockStateGeneration
longLongValue
dictionaryWithContentsOfFile:
bs_safeObjectForKey:ofType:
_loadLockControllerDefaultsJournalFromOldJournal:
_copyLockControllerDefaults
defaultManager
fileExistsAtPath:
createDirectoryAtPath:withIntermediateDirectories:attributes:error:
writeToFile:atomically:
setAttributes:ofItemAtPath:error:
numberWithLongLong:
setBlockStateGeneration:
_updateLockControllerDefaultsJournal
performPasswordTest:
notePasscodeEntryBegan
notePasscodeEntryCancelled
notePasscodeUnlockSucceeded
notePasscodeUnlockFailedWithError:
synchronize
isTemporarilyBlocked
isPermanentlyBlocked
clearBlockedState
refreshBlockedState
noteNewMkbDeviceLockStateInfo:options:
persistentStateQueue
_securityDefaults
_journalPath
_persistentStateQueue
_speculativePasscodeFailureChargeOutstanding
_originalDefaultsForRollback
_pendingWipe
_permanentlyBlocked
_unblockTime
_originalUnblockTime
_refreshStateAndNotify:
_refreshStateForMkbState:notify:
_initWithDomain:
stringWithUTF8String:
_bindProperty:withDefaultKey:toDefaultValue:options:
_store
objectForKey:
removeObjectForKey:
_bindAndRegisterDefaults
devices
isDefaultPairedDevice
defaultPairedDevice
initWithService:
addDelegate:queue:
productVersion
didCompleteRequest:
setProtobufAction:forIncomingRequestsOfType:
setProtobufAction:forIncomingResponsesOfType:
getPasscodeState:
didGetPasscodeState:
didUnlock:
startRemoteAction:
disableOnlyRemoteUnlock:
removeLockout:
setShouldNotifyNextUnlock:
setObject:forKeyedSubscript:
errorHandlerForRequest:
removeErrorHandlerForRequest:
isConnected
toProtobuf
setPasscodeState:
setMessageID:
setSuccess:
data
initForWritingWithMutableData:
setRequiresSecureCoding:
encodeObject:forKey:
finishEncoding
setErrorData:
_sendResponse:toRequestID:data:error:
_sendRequest:data:reliably:expectResponse:handler:error:
initWithProtobufData:type:isResponse:
numberWithUnsignedShort:
setResponseHandler:forRequestMessageID:
_sendProtobuf:reliably:expectsResponse:responseIdentifier:error:
dictionary
sendProtobuf:toDestinations:priority:options:identifier:error:
initWithData:
context
outgoingResponseIdentifier
errorData
initForReadingFromData:error:
decodeObjectOfClass:forKey:
messageID
responseHandlerForRequestMessageID:
passcodeState
_convertRemotePasscodeStateToRemoteDeviceState:
removeResponseHandlerForRequestMessageID:
isLocked
unlockDeviceWithPasscode:outError:
sharedUnlockManager
_notifyPairResult:error:handler:
enableUnlockWithDevice:fromKey:withPasscode:completionHandler:
setActionID:
setPasscodeType:
setShouldNotify:
disableUnlockWithDevice:
setErrorHandler:forRequest:
setWristDetectionDisabled:completion:
wristDetectDisabledPreference
isWristDetectionDisabled
_notifyCurrentStateReliably:completionHandler:
dataWithBytesNoCopy:length:
_passcodeStringFromPasscodeData:
length
numberWithUnsignedInteger:
changePasscodeFrom:to:outError:
storePasscodeBlob:withLabel:
_createAndStoreNewPasscodeWithCurrentPasscode:
completeEnableOnlyRemoteUnlockWithPasscode:completionHandler:
isPasscodeModificationAllowed
enableWristDetectBeforeEnableOnlyRemoteUnlockWithPasscode:completionHandler:
base64EncodedStringWithOptions:
getPasscodeBlobWithLabel:
_retrieveUnlockOnlyPasscode
deletePasscodeBlobWithLabel:
_logProtobuf:
actionID
_sendResultOfMessage:requestID:success:error:
hasSEP
passcodeType
setOffWristEnabled:withContext:
peer:remoteDeviceRequestsRemoteAction:type:existingPasscode:completionHandler:
disableOnlyRemoteUnlockWithCompletionHandler:
removeItemAtPath:error:
peerRemoteDeviceDidUnlock:
shouldNotify
peer:wantsNotificationOfNextUnlock:
hasPasscode
hasIsWristDetectionEnabled
isWristDetectionEnabled
initWithDomain:
boolForKey:
_convertToRemoteDeviceState:
incomingResponseIdentifier
peer:didNotifyRemoteState:error:
_logResponse:
peer:didPairForUnlock:error:
service:account:incomingMessage:fromID:context:
service:account:incomingData:fromID:context:
service:account:incomingUnhandledProtobuf:fromID:context:
service:account:incomingResourceAtURL:fromID:context:
service:account:incomingResourceAtURL:metadata:fromID:context:
service:activeAccountsChanged:
service:devicesChanged:
service:nearbyDevicesChanged:
service:connectedDevicesChanged:
service:account:identifier:didSendWithSuccess:error:
service:account:identifier:didSendWithSuccess:error:context:
service:account:identifier:sentBytes:totalBytes:
service:account:identifier:hasBeenDeliveredWithContext:
service:account:identifier:fromID:hasBeenDeliveredWithContext:
service:account:inviteReceivedForSession:fromID:
service:account:inviteReceivedForSession:fromID:withOptions:
service:account:inviteReceivedForSession:fromID:withContext:
service:account:receivedGroupSessionParticipantUpdate:
serviceSpaceDidBecomeAvailable:
serviceAllowedTrafficClassifiersDidReset:
service:didSwitchActivePairedDevice:acknowledgementBlock:
pairedDeviceVersion
setPairedDeviceVersion:
pairForUnlockWithPasscode:completionHandler:
requestRemoteDeviceRemoteAction:type:completionHandler:
requestRemoteDeviceDisableOnlyRemoteUnlock
unpairForUnlockWithCompletionHandler:
resetDeviceWristDetectionSetting:
notifyCurrentState
enableOnlyRemoteUnlockWithPasscode:completionHandler:
notifyThisDeviceDidUnlock
isUnlockEnabled
setUnlockEnabled:
keyStore
setKeyStore:
responseHandlers
setResponseHandlers:
errorHandlers
setErrorHandlers:
handlerManagementQueue
setHandlerManagementQueue:
_service
_idsQueue
_pairedDeviceVersion
_unlockEnabled
_keyStore
_responseHandlers
_errorHandlers
_handlerManagementQueue
_attributesForPasscodeBlobWithLabel:
newKeyWithLabel:allowAccessWhenLocked:
storeEncryptionKey:withLabel:allowAccessWhenLocked:
hasKeyWithLabel:isPublic:
deleteKeyWithLabel:
decryptBlob:withKeyLabel:
encryptBlob:withKeyLabel:
getEncryptionKeyWithLabel:
bytes
dataWithBytes:length:
dictionaryRepresentation
allocWithZone:
copyWithZone:
setIsWristDetectionEnabled:
setHasIsWristDetectionEnabled:
readFrom:
writeTo:
copyTo:
mergeFrom:
setHasPasscode:
setIsLocked:
setIsUnlockOnly:
_hasPasscode
_isLocked
_isUnlockOnly
_isWristDetectionEnabled
_has
setHasPasscodeType:
hasPasscodeType
_actionID
_passcodeType
hasErrorData
hasPasscodeState
success
_errorData
_messageID
_passcodeState
_success
_shouldNotify
unlockScreenType
isSettingLockedDownByRestrictions:
_setOffWristPreference:
setOffWristEnabledSSE:completion:
arrayWithObjects:count:
sharedSyncSessionState
addSyncClientObserver:forActivity:
syncStateForActivity:
syncState
syncSessionType
numberWithInteger:
_activitiesComplete
syncObserverRequestsWristDetectionReset:
syncClientActivity:didChangeToSyncState:
activities
queue
_activities
_queue
initWithMachServiceName:
passcodeEntryForUnlockDidBegin
passcodeEntryForUnlockDidCancel
passcodeUnlockDidSucceed
passcodeUnlockDidFailWithError:
getBlockStateWithReply:
blockStateMayHaveChangedToTemporarilyBlocked:permanentlyBlocked:timeUntilUnblockedSinceReferenceDate:
_removeClientConnection:
lock
addObject:
unlock
removeObject:
currentConnection
valueForEntitlement:
_hasEntitlement
sharedInstance
getDevices
objectAtIndexedSubscript:
unpairWithDevice:shouldObliterate:operationHasBegun:
synchronizeNanoDomain:keys:
listener:shouldAcceptNewConnection:
_listener
_authenticationModel
_clientConnections
_connectionsLock
_accessQueue
_handleWristStateChange:
setChangeHandler:
getWristState:
requestRemoteAction:type:existingPasscode:completion:
_removeConnection:
processIdentifier
connections
profileConnectionDidReceiveRestrictionChangedNotification:userInfo:
profileConnectionDidReceivePasscodeChangedNotification:userInfo:
profileConnectionDidReceivePasscodePolicyChangedNotification:userInfo:
profileConnectionDidReceiveProfileListChangedNotification:userInfo:
profileConnectionDidReceiveEffectiveSettingsChangedNotification:userInfo:
profileConnectionDidReceiveDefaultsChangedNotification:userInfo:
profileConnectionDidReceiveAppWhitelistChangedNotification:userInfo:
_handlePasscodeRemoval
gizmoWantsNotificationOnNextUnlock
setGizmoWantsNotificationOnNextUnlock:
peer
_onWristMonitor
_requestRemoteActionHandler
_actionServerConnection
_peer
_connections
currentRunLoop
integerValue
PURemoteDeviceState
NSSecureCoding
NSCoding
PUUnlockServer
NSObject
PUUnlockClient
PUConnection
PUConnectionUnlockClient
PUError
PUUserAuthenticationJournal
PUUserAuthenticationModel
PUUserAuthenticationSEP
PUSecurityDefaults
DefaultDevice
PUPeer
IDSServiceDelegate
PUKeyStore
PUProtoPasscodeState
NSCopying
PUProtoDidUnlock
PUProtoGetPasscodeState
PUProtoStartRemoteAction
PUProtoRemoveLockout
PUProtoRequestCompleted
PUProtoRequestDisableOnlyRemoteUnlock
PUProtoSetShouldNotifyNextUnlock
PUPasscodeState
PUPairedSyncObserver
PSYSyncClientStateObserver
CSLSUserAuthenticationServerProtocol
CSLSUserAuthenticationClientProtocol
PUUserAuthenticationServer
NSXPCListenerDelegate
PUUserAuthenticationModelDelegate
PURemoteActionServerExportedInterface
PUServer
PUPeerDelegate
MCProfileConnectionObserver
PUPairedSyncObserverDelegate
B8@0:4
v12@0:4@8
@12@0:4@8
v12@0:4@"NSCoder"8
@12@0:4@"NSCoder"8
B12@0:4@8
I8@0:4
@8@0:4
v12@0:4I8
v12@0:4B8
#8@0:4
@12@0:4:8
@16@0:4:8@12
@20@0:4:8@12@16
B12@0:4#8
B12@0:4:8
Vv8@0:4
^{_NSZone=}8@0:4
B12@0:4@"Protocol"8
@"NSString"8@0:4
v8@0:4
v16@0:4i8i12
v16@0:4B8@12
v12@0:4@?8
v16@0:4B8@?12
v12@0:4@"NSString"8
v16@0:4B8@"NSError"12
v12@0:4@?<v@?@"PURemoteDeviceState"@"NSError">8
v16@0:4B8@?<v@?@"NSError">12
v20@0:4B8@12@16
v16@0:4@8@12
v20@0:4B8@"PURemoteDeviceState"12@"NSError"16
v16@0:4@"PURemoteDeviceState"8@"NSError"12
r*12@0:4@8
@?8@0:4
@"NSXPCConnection"
@"NSObject<OS_dispatch_queue>"
@"PUConnectionUnlockClient"
@"<PUConnectionDelegate>"
@"PUConnection"
@16@0:4I8@12
i12@0:4i8
d8@0:4
v12@0:4@?<v@?^B>8
v12@0:4@"NSError"8
@"<PUUserAuthenticationModelDelegate>"8@0:4
v12@0:4@"<PUUserAuthenticationModelDelegate>"8
v16@0:4@"NSDictionary"8@"NSDictionary"12
i8@0:4
B16@0:4^i8i12
B12@0:4i8
@16@0:4@?8B12
@"PUSecurityDefaults"
@"NSString"
@"NSDictionary"
@"<PUUserAuthenticationModelDelegate>"
v16@0:4@8B12
v28@0:4@8@12@16@20@24
v32@0:4@8@12@16@20@24@28
v28@0:4@8@12@16B20@24
v32@0:4@8@12@16B20@24@28
v28@0:4@8@12@16i20i24
v24@0:4@8@12@16@20
v20@0:4@8@12@16
v20@0:4@8@12@?16
v28@0:4@"IDSService"8@"IDSAccount"12@"NSDictionary"16@"NSString"20@"IDSMessageContext"24
v28@0:4@"IDSService"8@"IDSAccount"12@"NSData"16@"NSString"20@"IDSMessageContext"24
v28@0:4@"IDSService"8@"IDSAccount"12@"IDSProtobuf"16@"NSString"20@"IDSMessageContext"24
v28@0:4@"IDSService"8@"IDSAccount"12@"NSURL"16@"NSString"20@"IDSMessageContext"24
v32@0:4@"IDSService"8@"IDSAccount"12@"NSURL"16@"NSDictionary"20@"NSString"24@"IDSMessageContext"28
v16@0:4@"IDSService"8@"NSSet"12
v16@0:4@"IDSService"8@"NSArray"12
v28@0:4@"IDSService"8@"IDSAccount"12@"NSString"16B20@"NSError"24
v32@0:4@"IDSService"8@"IDSAccount"12@"NSString"16B20@"NSError"24@"IDSMessageContext"28
v28@0:4@"IDSService"8@"IDSAccount"12@"NSString"16i20i24
v24@0:4@"IDSService"8@"IDSAccount"12@"NSString"16@20
v28@0:4@"IDSService"8@"IDSAccount"12@"NSString"16@"NSString"20@24
v24@0:4@"IDSService"8@"IDSAccount"12@"IDSSession"16@"NSString"20
v28@0:4@"IDSService"8@"IDSAccount"12@"IDSSession"16@"NSString"20@"NSDictionary"24
v28@0:4@"IDSService"8@"IDSAccount"12@"IDSSession"16@"NSString"20@"NSData"24
v20@0:4@"IDSService"8@"IDSAccount"12@"IDSGroupSessionParticipantUpdate"16
v12@0:4@"IDSService"8
v20@0:4@"IDSService"8@"IDSDevice"12@?<v@?>16
@?12@0:4@8
v16@0:4@?8@12
v24@0:4S8@12B16@20
@32@0:4S8@12B16B20@?24^@28
v24@0:4S8@12@16^@20
@28@0:4@8B12B16@20^@24
v16@0:4@8@?12
v20@0:4i8i12@?16
v20@0:4B8@12@?16
@"IDSService"
@"<PUPeerDelegate>"
@"PUKeyStore"
@"NSMutableDictionary"
@16@0:4@8B12
v20@0:4@8@12B16
B16@0:4@8B12
@16@0:4@8@12
B16@0:4@8@12
@12@0:4^{_NSZone=}8
{?="isWristDetectionEnabled"b1}
{?="passcodeType"b1}
@"NSData"
@"PUProtoPasscodeState"
@16@0:4B8@12
v16@0:4@8i12
v16@0:4@"NSString"8i12
@"NSArray"
@"<PUPairedSyncObserverDelegate>"
v12@0:4@?<v@?BBd>8
v24@0:4B8B12d16
B16@0:4@"NSXPCListener"8@"NSXPCConnection"12
v12@0:4@"<PUUserAuthenticationModel>"8
@"NSXPCListener"
@"<PUUserAuthenticationModel>"
@"NSMutableSet"
@"NSLock"
v24@0:4i8i12@16@?20
v24@0:4i8i12@"NSString"16@?<v@?B@"NSError">20
v20@0:4@8B12@16
v28@0:4@8i12i16@20@?24
v20@0:4@"PUPeer"8B12@"NSError"16
v12@0:4@"PUPeer"8
v20@0:4@"PUPeer"8@"PURemoteDeviceState"12@"NSError"16
v28@0:4@"PUPeer"8i12i16@"NSString"20@?<v@?@"PURemoteDeviceState"@"NSError">24
v16@0:4@"PUPeer"8B12
v16@0:4@"MCProfileConnection"8@"NSDictionary"12
v12@0:4@"PUPairedSyncObserver"8
v12@0:4i8
@"CSLSOnWristMonitor"
@"PUPeer"
connection requestDeviceSetWristDetectionDisabled: %@
PUUserAuthenticationJournal notePasscodeEntryBegan
PUUserAuthenticationJournal notePasscodeEntryCancelled
PUUserAuthenticationJournal notePasscodeUnlockSucceeded
PUUserAuthenticationJournal notePasscodeUnlockFailedWithError
Updating block time
Beginning speculative charge. Has failure charge outstanding=%s
set failed passcode attempts %d (secondsToBlock=%d)
Canceling speculative charge
Unlock succeeded. Reverting speculative charge
Unlock failed.  Not reverting speculative charge
A passcode attempt failed without a corresponding speculative failure charge. Callstack %@
Wiping device
Loading lock state. pendingWipe=%s permanentlyBlocked=%s
Clearing lock state.
Loading journal key %@ found object %@ of type %@ but expected type %@. Aborting journal loading.
journalGeneration = %lld defaultsGeneration = %lld. Updating defaults from journal
Importing old journal
failed attempts = %@
in lockout = %@
paired device version = %{public}@, %{public}@
Incoming unhandled protobuf: <%@>
Send of message with id:%@ FAILED with error: %@
Connected devices changed, connected = %@, devices = %@
Sending result of message %i (%@) as RESPONSE
Sending result of message %i (%@) as REQUEST
Send protobuf FAILED with error %@
Sent protobuf SUCCEEDED: <%@> with ID: %@
Received protobuf: <%@> with identifier: %@
Calling response handler for message of type %i
Missing handler for message of type %i!
Starting unlock pair
Attempted to pair with incorrect passcode
Attempted to pair while passcode locked
%@ notification of next unlock%@
%@ disabling only remote unlock%@
peer requestDeviceSetWristDetectionDisabled:%@, error: %@
wristDetectDisabled preference has changed to = %@
wristDetectDisabled preference has not changed = %@
Generated random passcode of length %@.
Successfully changed to random passcode; storing
Successfully stored random passcode
FAILED to store new passcode! Bailing back to old one
FAILED to change passcode back! SOMETHING IS HORRIBLY WRONG
FAILED to change passcode
FAILED to generate random passcode
Unlock pairing succeeded; notifying other device of new state
ERROR notifying paired device that we
re in only-remote-unlock mode: %@
Unlock pairing with new passcode FAILED (%@), bailing back to the old one
Successfully changed passcode back. You are now at least no worse off than you were.
FAILED to change passcode back! SOMETHING IS EVEN MORE HORRIBLY WRONG.
replacing empty passcode
enableUnlockWithDevice returned success %@ %@ in state %@
Resetting passcode state = %@
could not enable wrist detection %{public}@
wrist detection enabled by user
wrist detection already enabled
ERROR notifying paired device that we
re out of only-remote-unlock mode: %@
FAILED to change passcode back!
FAILED to find passcode entry in keychain!
Sending repsonse protobuf: <%@>
remote action %@ complete, error = %@
remote action %@ complete
wrist detection enabled
on new hardware, not putting up passcode screen for disabling the wrist detect
wrist detection disabled
wrist detection prepared, putting up passcode screen for unlock pairing
enabled wrist detection, error %@
unlock pairing requested %@
wrist detection enabled prior to unlock pairing or device without SEP
Failed to remove existing passcode: %@
putting up passcode screen
Got request to disable only remote unlock; currently unlocked, so starting that now
Disabled only remote unlock
FAILED to disable unly remote unlock: %@
Got request to disable only remote unlock; currently locked, so waiting until next unlock to do so
Wrist detect setting wasn't returned from remote device
successfully paired for unlocking
failed to pair for unlocking: %@
setting wrist detection disabled to %@
couldn't set wrist detection disabled to %@, error %@
calling SEP to set wrist detection disabled to %@
observing activity %@
sync activity %@ changed to %@
sync complete, resetting sync wrist detect setting
self = %p - %s (model = %p)
self = %p - %s isTemporarilyBlocked=%s, isPermanentlyBlocked=%s, timeUntilUnblockedSinceReferenceDate=%.2f
self = %p - %s no reply block
self = %p - %s
notify device state change: isTemporarilyBlocked=%s, isPermanentlyBlocked=%s, timeUntilUnblockedSinceReferenceDate=%.2f
Wrist state changed! Unlocking is %@
Not unpairing now; will do so when watch next connects
Server got new connection
Server connection invalidated!
received connection %@
_connections (%@) = %@
Server lost connection %@ to PID %d
Remote device requested passcode action %li
Client connection checked in
could not restore wrist detection setting %@
SIGTERM has been received, exiting...
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>com.apple.BTServer.allowQuickRSSIRead</key>
<true/>
<key>com.apple.keystore.device</key>
<true/>
<key>com.apple.managedconfiguration.profiled-access</key>
<true/>
<key>com.apple.nano.nanoregistry.pairunpairobliterate</key>
<true/>
<key>com.apple.private.applesse.allow</key>
<true/>
<key>com.apple.private.ids.messaging</key>
<array>
<string>com.apple.private.alloy.pairedunlock</string>
</array>
<key>com.apple.private.ids.messaging.urgent-priority</key>
<array>
<string>com.apple.private.alloy.pairedunlock</string>
</array>
<key>com.apple.private.sharing.unlock-manager</key>
<true/>
<key>keychain-access-groups</key>
<array>
<string>com.apple.paired-unlock</string>
</array>
</dict>
</plist>
zPLR
zPLR
zPLR
zPLR
