_kIDSServerBagFinishedLoadingNotification
bagURL
T@"NSURL",R
apsEnvironmentName
T@"NSString",R
allowSelfSignedCertificates
TB,R
allowUnsignedBags
isLoaded
isLoading
isInDebilitatedMode
isServerAvailable
FTMessageDeliveryNoResultCodeError
FTMessageDelivery
Service
Delivery
Should retry!
Warning
IDSFoundation
Failed retrying message: %@
com.apple.imagent.http-delivery
FaceTime
Network state changed
push
IDSRegistrationMessage
auth
x-auth-user-id
Warning, missing %@ to add to %s
dictionary
x-auth-user-id%@
userAgent
T@"NSString",C,V_userAgent
protocolVersion
T@"NSNumber",C
hasQueuedItems
busy
retryInAirplaneMode
TB,V_retryInAirplaneMode
logToRegistration
TB,V_logToRegistration
currentMessage
T@"IDSBaseMessage",R
queuedMessages
T@"NSArray",R
allMessages
maxMessageSize
Ti,R
maxLargeMessageSize
maxConcurrentMessages
TI,V_maxConcurrentMessages
x-%@-cert%@
x-%@-nonce%@
x-%@-sig%@
_queue
T@"NSMutableArray",&,V_queue
_addDates
T@"NSMutableArray",&,V_addDates
topMessage
count
messages
delegate
T@"<FTMessageQueueDelegate>",W,V_delegate
apns-webtunnel-blacklisted-topics
com.apple.registration
forceReversePushIDQuery
WebTunnel
Device can not use WiFI for delivery, Forcing HTTP to allow Forced Cellular
Message topic (%@) is in the list of blacklisted topics (%@)
We do not meet the version requirements for web tunnel ID queries
This query is not important enough to perform a web tunnel ID query
We are in backoff mode 
Server gave us 0 quota to use this feature
Deiceroll Was %ld
Deiceroll Sucesss, dual query will be performed
Deiceroll failed
DualDeliveryBackOffDate
We have a cached vale for server backoff mode
Back off End Date is %@
Back off Interval is in the past, we are good to go
Back off Interval is in the future, we are in backoff
com.apple.identityservicesd
Incoming request to send a dualMode message %@
Dequeing message if needed
Message Allow Dual Delivery
Server says yes for APS delivery, lets go ahead and use that
Not allowed to use APS delivery, using HTTP
%@=%@
v16@?0@4@8^B12
Web Tunnel Response got %ld
Web Tunnel Query was successful; passing along the completion information
Unknown Error, Falling back to HTTP
v4@?0
v20@?0@"IDSBaseMessage"4@"NSError"8i12@"NSDictionary"16
hash
TI,R
superclass
T#,R
description
T@"NSString",R,C
debugDescription
T@"NSString",C,N
apns-ids-query-min-version
Server Bag provided us with %d Web Tunnel Version
Server Bag has no value for Min Version, using the default: %f
apns-ids-query-percentage
Server Bag provided us with %d Web Tunnel Percentage
Server Bag has no value for percentage, using the default: %f percentage
apns-ids-query-wait-time
Server Bag provided us with a wait time interval of %f 
Server Bag has no value for wait time interval , using the default: %f interval
APSErrorDomain
ApplePushService
sigs
push-token
auth-token
name
version
flags
Nonce
bag-key
Appending %d length header for %@ segment
Appending %d bytes for %@ segment
Appending no bytes for %@ segment
query-string
body
Signature input is %d bytes (%@)
Unknown digest type provided as input to digest generation function -- returning empty digest { digestType: %ld }
No digest generated { signatureInputDataLength: %lu, digestType: %ld }
Failed signing nonce: %@   with error: %d
Succeeded verifying signature for: %@   with error: %d
Failed verifying signature for: %@   with error: %d
Nonce: %@    Signed: %@   Result: %d
_FTDataFromBase64String
T@"NSData",R,N
_FTDataFromHexString
1.2.11
__kFaceTimeDeviceRegistrationStateChangedNotification
__kFaceTimeDeviceRegistrationCapabilityChangedNotification
__kFaceTimeDeviceCapabilityChangedNotification
__kFaceTimeDeviceSIMInsertedNotification
__kFaceTimeDeviceSIMRemovedNotification
__kFaceTimeDeviceRestictionsChangedNotification
__kFTCTRegistrationStatusCanRegisterKey
__kFTCTRegistrationStatusPhoneNumberKey
__kFTCTRegistrationStatusIMSIKey
__kFTCTRegistrationStatusPLMNKey
__kFTCTRegistrationStatusChangedNotification
com.apple.facetime
ForceMakeBeforeBreak
Unnamed Device
%@,%@,%@
PKCanMakePayments
PassKitCore
hw.cpufamily
isTelephonyDevice
TB,R,N
faceTimeAvailable
faceTimeBlocked
faceTimeSupported
callingAvailable
callingBlocked
callingSupported
multiwayAvailable
multiwayBlocked
multiwaySupported
nonWifiFaceTimeAvailable
nonWifiCallingAvailable
iMessageAvailable
iMessageBlocked
iMessageSupported
identityServicesSupported
madridAvailable
madridBlocked
madridSupported
conferencingEnabled
conferencingBlocked
conferencingAllowed
commCenterDead
TB,R,N,V_commCenterDead
accountModificationRestricted
isInMultiUserMode
wantsBreakBeforeMake
isC2KEquipment
supportsSimultaneousVoiceAndDataRightNow
wantsForcedCellularQueries
TB,R,N,V_wantsForcedCellularQueries
supportsAppleIDIdentification
supportsApplePay
supportsHandoff
TB,R,N,V_supportsHandoff
supportsTethering
TB,R,N,V_supportsTethering
supportsSMS
TB,R,N,V_supportsSMS
supportsMMS
TB,R,N,V_supportsMMS
supportsWiFi
TB,R,N,V_supportsWiFi
supportsCellularData
TB,R,N,V_supportsCellularData
supportsWLAN
TB,R,N,V_supportsWLAN
supportsNonWiFiFaceTime
TB,R,N,V_supportsNonWiFiFaceTime
supportsNonWiFiCalling
mmsConfigured
TB,R,N,V_mmsConfigured
supportsFrontFacingCamera
TB,R,N,V_supportsFrontCamera
supportsBackFacingCamera
TB,R,N,V_supportsBackCamera
supportsFunCam
isGreenTea
TB,R,N,V_isGreenTea
telephonyCapabilities
T@"NSDictionary",R,N
deviceName
T@"NSString",R,N
deviceColor
enclosureColor
deviceIDPrefix
deviceTypeIDPrefix
deviceRegionInfo
model
userAgentString
productName
productVersion
productBuildVersion
productOSVersion
deviceInformationString
performanceClass
Ti,R,N
deviceType
registrationSupported
supportsSMSIdentification
SIMInserted
CTNetworkInformation
telephoneNumber
lowRAMDevice
FTErrorDomain
FTServicesSuppressServiceErrorDialogsPropertyKey
FTSelectedPNRSubscriptionChangedDistributedNotification
<%@: %p phoneNumber: %@, dualSIMCapability: %ld, selectedContext: %@, subsriptionInfo: %@, activeSubscriptionInfo: %@>
subscriptionInfo
T@"CTXPCServiceSubscriptionInfo",&,N,V_subscriptionInfo
activeSubscriptionInfo
T@"CTXPCContexts",&,N,V_activeSubscriptionInfo
selectedContext
T@"CTXPCServiceSubscriptionContext",&,N,V_selectedContext
phoneNumber
T@"NSString",&,N,V_phoneNumber
dualSIMCapability
Ti,N,V_dualSIMCapability
com.apple.carrier
allowAnyNetwork
validNetworkEnabled
validNetworkActive
validNetworkReachable
wiFiActiveAndReachable
willSearchForNetwork
dataActiveAndReachable
networkEnabled
networkActive
networkReachable
enableCriticalReliability
TB,N
FTServiceStatusDidChangeNotification
FTServiceStatusNotifyRegister
v16@?0i4Q8
supportedServicesToken
Ti,N,V_supportedServicesToken
supportedServicesFlags
TQ,V_supportedServicesFlags
blockPost
TB,N,V_blockPost
faceTimeAudioSupported
faceTimeMultiwaySupported
serviceStatus
T@"FTServiceStatus",R,N,V_serviceStatus
SCNetworkReachabilityCreateWithName
SystemConfiguration
SCNetworkReachabilityCreateWithAddress
localWiFiStatusForFlags
networkStatusForFlags
/BuildRoot/Library/Caches/com.apple.xbs/Sources/IdentityServices_Sim/IdentityServices-1171.94.2/FTServices/Device Support/FTEmbeddedReachability.m
<Unknown File>
connectionRequired called with NULL reachabilityRef
SCNetworkReachabilityGetFlags
currentNetworkStatus called with NULL reachabilityRef
EmbeddedReachability
x-apple-apns-dual-mode-delivery-type
application/x-apple-plist
com.apple.ids
x-test-opts
Web Tunnel Message Completed With Respone Headers %@
messageRequestUUID
T@"NSString",C,N,V_messageRequestUUID
messageURL
T@"NSString",C,N,V_messageURL
messageRequestBodyData
T@"NSData",C,N,V_messageRequestBodyData
messageRequestBodyDictionary
T@"NSDictionary",C,N,V_messageRequestBodyDictionary
messageHeaders
T@"NSMutableDictionary",C,N,V_messageHeaders
maximumResponseSize
T@"NSNumber",C,N,V_maximumResponseSize
userAgentOverride
T@"NSString",C,N,V_userAgentOverride
responseBodyData
T@"NSData",C,N,V_responseBodyData
responseBodyDictionary
T@"NSDictionary",C,N,V_responseBodyDictionary
responseHeaders
T@"NSDictionary",C,N,V_responseHeaders
responseCode
T@"NSNumber",C,N,V_responseCode
responseStatus
T@"NSNumber",C,N,V_responseStatus
disableIDSTranslation
TB,N,V_disableIDSTranslation
anisette-headers-global-timeout
anisette-headers-lenient-timeout
AKAppleIDSession
AuthKit
com.apple.ids.ftauthkitmanager
AuthKit - gathering headers
AuthKit - handling response
AuthKit - shouldRetry: %@
requireIDSHost
forceCellularIfPossible
alwaysForceCellular
bundleIdentifierForDataUsage
T@"NSString",&
shouldUsePipelining
concurrentConnections
disableKeepAlive
keepAliveWifi
keepAliveCell
shouldReturnTimingData
request
T@"NSURLRequest",&
block
T@?,C
d16@?0i4d8
Cannot send message: Empty URL requested for message: %@, forcing a bag load
 Query parameters: %@
 Query string: %@
Generated final URL: %@
POST
Headers
       User Agent: %@
FaceTime.Verbose
%@ %@
            Agent: %@
Accept-Language
gzip
accept-encoding
user-agent
content-encoding
content-type
content-length
       %@: %@
anisette-headers-disabled
MessageDelivery
anisette headers are required for messageType %@ but disabled by the server bag anisette-headers-disabled
v8@?0@"NSDictionary"4
v8@?0@?<v@?>4
************* Couldn't gather Anisette headers %@ *************
v8@?0B4
Exception processing result: %@   for message: %@
error = %@
Created URL Request: %@  from URL: %@
Delivering message to URL: %@
(Not Loggable)
MessageDelivery-oversized
Message body: %@
Force cellular: %@
x-bag-refresh
X-Apple-Splunk-Hint
Registration
Connection failed with error: %@
FTMessageDelivery failed! (HTTP Status Code: %d) Error (%@:%d): %@ %@
... no error, ignoring...
Response
  headers: %@
  status code: %d
status
retry-interval
current-timestamp-ms
message
sent dictionary: %@
         result: %@
    status code: %d
v24@?0@"NSURLResponse"4i8@"NSData"12@"NSError"16@"NSDictionary"20
do-http-pipelining
max-concurrent-connections
do-http-keep-alive
http-keep-alive-idle-timeout-wifi-millis
http-keep-alive-idle-timeout-cell-millis
Failing message, empty url request
v8@?0@"NSURLRequest"4
Cancelling message delivery! invalid message!
Cancelling message delivery! Missing keys: %@
Message timed out, but we're going to wait for CFNetwork: %@
Queue timed out delivery for message: %@
Cancelling message in the queue: %@
We're out of airplane mode, and we have a pending retry
_CFNetworkCopyPreferredLanguageCode
CFNetwork
Using server bag anisetteHeaderLenientTimeout: %f second(s)
Using server bag anisetteHeaderGlobalTimeout: %f second(s)
md-retry-start-interval
md-retry-attempts
APSOutgoingMessage
APSConnection
Created APSConnection: %p  (Max size: %d  Environment: %@)
Cannot map Message: %@   no ID!
none
Mapping messageID: %@  message: %@   APSMessage: %@   timeout: %f  timeoutSelector: %@
No timer specified for message ID: %@
Missing APS Message for message ID: %@
Missing FTMessage for message ID: %@
Missing body for message ID: %@
_clearMapForMessageID: %@
  => Message ignores max retry count set on server bag. Keep retrying (current retires %d). Has received courier ack? %@
  => Message retried too many times (%d), not retrying anymore. Has received courier ack? %@
Noting message failed: %@   (Request ID: %@  Retries: %d  Retry Allowed: %@  Wants Retry: %@)
  => Will retry message: %@ in %f seconds
Informing delegate about message %@ with resultCode %ld
Noting message success: %@   (Request ID: %@   %d remaining)
Noting message ack'd: %@   (Request ID: %@   %d remaining)
   => Setting ack timeout time, this will use APS retries
Message has used %ld retries, Retry timeout time with multiplier will be %f
   => Setting send timeout time: %f
Noting message sent: %@   (Request ID: %@  Remaining: %d  Attempt: %d)
Sent outgoing message: %@ to command: %@   (Request ID: %@   Connection: %@)
Could not generate APSMessage for message: %@
Timed out waiting for server ack for message: %@   (Request ID: %@)
Timed out waiting for server response for message: %@   (Request ID: %@)
Missing message for retry!  (timer: %@   messageID: %@)
Starting retry for message: %@   (Request ID: %@)
v16@?0@4I8^B12
Enabling required topics: %@
  => Skipping, already enabled
Cannot send message: Empty topic requested for message: %@
Building URL request with topic: %@  bagKey: %@
Body: %@
Final delivery payload: %@
Message sent as non-binary push. This is never expected and probably points to memory corruption.
Sending message: %@ as binary push
invalidating: %@
Requesting async send: %@
Created APSOutgoingMessage body: %@
Delivering message to command: %@
CommandID
MessageIdentifier
GUIDTRACE
OUTGOING-APS_DELIVERY:%@ SERVICE:%@
FaceTimeDelivery
Message body: %@ [guid: %@]
MessageGUID
IDS OutgoingPushSent
Failing message, empty message
Nothing left in queue, done
Server bag is not loaded, waiting for it
 => Server is available
 => Starting load
 => Already loading
 => Server not available
 => Server bag not needed, proceeding
We're already busy, not pulling from queue
Removed message: %@   apsMessage: %@
Message: %@ not in queue.   Current message: %@
Adding message to the queue: %@
  Busy delivering: %@
Server bag loaded
received response dictionary: %@
Response Headers: %@
no message found, map reads: %@
Topic
IDS IncomingPushReceived
Received an unknown object for kBodyIDKey
Error decompressing body: %@  (Data: %@)
received response code: %@  response body: %@
  Found internal status code of: %@
Exception processing status code from result body: %@   for message: %@
  This Message Wants Multiple responses
  This Message responds to receiving updates for multipleMessages
 More To Come, Not done yet
  Last message Has Been acknowledged
Server ACK'd outgoing message: %@      (Request ID: %@)
   message: %@ wants response: %@
message delivery failed {error: %@, allowRetry: %@}
FTMessageDelivery failed! Error (%@:%d): %@ %@
APSConnection %@  gave me a connection size of: %d  which doesn't pass our sanity size of: %ld   ignoring
APSConnection %@  gave me a connection large size of: %d  which doesn't pass our sanity size of: %ld   ignoring
Server Bag provided us with %d retries
Server Bag has no value for retries, using the default: %ld retries
Server Bag provided us with a retry interval of %f 
Server Bag has no value for interval , using the default: %f interval
%@:b
Passed in bogus info to FTIDSMessage (%@:%@:%@:%@)
retry-count
x-push-token
x-protocol-version
x-id-self-uri
pushPrivateKey
T^{__SecKey=},N,V_pushKey
pushPublicKey
T^{__SecKey=},N,V_pushPublicKey
pushCertificate
T@"NSData",C,N,V_pushCert
pushToken
T@"NSData",C,N,V_pushToken
selfURI
T@"NSString",C,N,V_selfURI
certDataArray
T@"NSMutableArray",C,N,V_certDataArray
publicKeyArray
T@"NSMutableArray",C,N,V_publicKeyArray
privateKeyArray
T@"NSMutableArray",C,N,V_privateKeyArray
userIDArray
T@"NSMutableArray",C,N,V_userIDArray
identityPrivateKey
T^{__SecKey=},N,V_identityKey
identityPublicKey
T^{__SecKey=},N,V_identityPublicKey
IDCertificate
T@"NSData",C,N,V_identityCert
wantsIDSProtocolVersion
__kFTEntitlementStatusChangedNotification
faceTimeNonWiFiEntitled
registrationState
_nonWifiFaceTimeEntitled
cellularFaceTimeEnabled
selectedPhoneNumberRegistrationSubscriptionLabel
selectedPhoneNumberRegistrationSubscriptionNumber
T@"NSNumber",R,C,N
isDeviceInDualPhoneIdentityMode
subregions
iso-2
label
base-phone-number
[FTRegion] Label: %@   ISO: %@    BaseNumber: %@  Region ID: %@
_dictionary
T@"NSDictionary",&,V_dictionary
_parentRegion
T@"FTRegion",&,V_parentRegion
isoCode
regionID
basePhoneNumber
parentRegion
T@"FTRegion",R
subRegions
T@"NSArray",R,V_subRegions
__kFTRegionListFinishedLoadingNotification
com.apple.facetime-region-query
RegionSupport
Succeeded loading region information
RegionSupport.Verbose
   Region info: %@
   Loaded region: %@
Failed querying regions: %@  code: %ld
delivery
T@"FTMessageDelivery",&,V_delivery
regions
T@"NSArray",&,V_regions
vc-profile-get-region-metadata
accept-language
language
T@"NSString",C,V_language
responseRegionInformation
T@"NSDictionary",C,V_responseRegionInformation
ds-session-token-grace-period
bundleRef
profile-id
profileID
self-handle
handles
com.apple.imcore
originalUsername
alert
ACAccountStore
Accounts
B8@?0@"ACAccount"4
v12@?0B4@"NSError"8
v12@?0@"ACAccountType"4@"NSError"8
v8@?0@"IMUserNotification"4
ACAccount
v12@?0i4@"NSError"8
v12@?0@"ACAccount"4@"NSError"8
ACAccountCredential
The password for \U201C%@\U201D needs to be updated.
FTSLocalizable
FaceTime/iMessage Apple ID alert body: The password for this Apple ID needs to be updated. arg1:username 
iMessage
Calling
AARenewShouldPostFollowUp
__ksPasswordPromptUserNotificationIdentifier
iCloud
Password alert title: iCloud
%@ Password
DaemonCoreLocalizable
Alert title: %@ password (arg: service name)
Password
Text label: password
Log In
Button title: login
Cancel
%@ Login
Alert title:login (arg: service name)
Login ID:
Text label: loginid
Password:
Forgot Password\U2026
Button title: Forgot Password button
Remember this password in my keychain
Remember password
Messages can\U2019t log in to %@ because your login ID or password is incorrect.
Alert message:badpasslogin (arg:account name)
Please enter your password for %@.
Alert message:login (arg:account name)
FTPasswordManager
-[FTPasswordManager acAccountWithProfileID:username:accountStore:]
ACAccountTypeIdentifierIdentityServices
(nil auth token)
(empty auth token)
%@...
(short auth token)
Multiway
com.apple
kACRenewCredentialsShouldForceKey
kACRenewCredentialsReasonStringKey
kACRenewCredentialsAppleIDServiceTypeKey
kACRenewCredentialsProxiedAppBundleIDKey
kACRenewCredentialsShouldAvoidUIKey
/System/Library/PrivateFrameworks/IMDaemonCore.framework
FT URL  Message Completed With Respone Headers %@
requestType
TI,N,V_requestType
requestURL
T@"NSURL",C,N,V_requestURL
requestHeaders
T@"NSDictionary",C,N,V_requestHeaders
requestStringParams
T@"NSDictionary",C,N,V_requestStringParams
requestBody
T@"NSData",C,N,V_requestBody
responseBody
T@"NSData",C,N,V_responseBody
responseStatusCode
T@"NSNumber",C,N,V_responseStatusCode
timingData
T@"NSDictionary",C,N,V_timingData
sharedInstanceForBagType:
alloc
initWithBagType:
isLoaded
startBagLoad
_sharedInstanceForType:
init
defaultCenter
removeObserver:
dealloc
forceBagLoad
isLoading
_cachedBag
_bag
bagURL
apsEnvironmentName
allowSelfSignedCertificates
allowUnsignedBags
isInDebilitatedMode
objectForKey:
urlWithKey:
isServerAvailable
sharedInstance
_sharedInstance
_type
class
setDelegate:
networkStateChanged
addObserver:selector:name:object:
removeObserver:name:object:
_clearRetryTimer
removeAllMessages
errorWithDomain:code:userInfo:
_errorForTDMessageDeliveryStatus:userInfo:
domain
code
completionBlock
messages
topMessage
queuedMessages
count
invalidate
logToRegistration
registration
retryCount
integerValue
numberWithInt:
setRetryCount:
_sendMessageAsynchronously:error:
_retryTimerHit:
initWithTimeInterval:name:shouldWake:target:selector:userInfo:
maxMessageSize
bagKey
pushToken
pushCertificate
pushPublicKey
pushPrivateKey
serverTimestamp
IDCertificate
identityPublicKey
identityPrivateKey
signingSession
isInitializedForSigning
headersBySigningData:error:
nonce
addEntriesFromDictionary:
certDataArray
date
timeIntervalSince1970
serverTimestampReceivedDate
doubleValue
numberWithDouble:
setServerTimestamp:
dateWithTimeIntervalSince1970:
isKindOfClass:
userIDArray
objectAtIndex:
publicKeyArray
privateKeyArray
allKeys
stringWithFormat:
HTTPMessageDeliveryClass
APNSMessageDeliveryClass
queue:hitTimeoutForMessage:
protocolVersion
setProtocolVersion:
_informDelegateAboutMessage:error:result:resultCode:
currentMessage
allMessages
busy
hasQueuedItems
_queue
cancelMessage:
sendMessage:
_setRetryTimer:
maxLargeMessageSize
_signMessage:useDataSignatures:body:queryString:intoDictionary:
.cxx_destruct
userAgent
setUserAgent:
setLogToRegistration:
maxConcurrentMessages
setMaxConcurrentMessages:
retryInAirplaneMode
setRetryInAirplaneMode:
_retries
_userAgent
_maxConcurrentMessages
_retryInAirplaneMode
_logToRegistration
_timer
_FTStringFromBaseData
_timeoutHit
cancelPreviousPerformRequestsWithTarget:selector:object:
_clearTimeout
delegate
timeIntervalSinceNow
timeout
performSelector:withObject:afterDelay:
removeAllObjects
removeObjectAtIndex:
_setTimeout
addObject:
insertObject:atIndex:
dequeueTopMessage
addMessage:
addMessageAtHeadOfQueue:
removeMessage:
set_queue:
_addDates
set_addDates:
_delegate
alwaysForceCellular
topic
containsObject:
importanceLevel
_isInBackoffMode
_randomPercentageChanceForDualDelivery
dateWithTimeIntervalSinceReferenceDate:
dateByAddingTimeInterval:
earlierDate:
timeIntervalSinceReferenceDate
dequeueMessageIfNeeded
allowDualDelivery
_shouldUseDualDeliveryForMessage:
setHasAttemptedAPSDelivery:
handleTranslationAndDeliveryOnAPS:
initWithMessage:
setTimeout:
wantsIDSServer
setDisableIDSTranslation:
messageBodyDataOverride
setMessageRequestBodyData:
messageBodyUsingCache
dataWithPropertyList:format:options:error:
_FTCopyGzippedData
URLOverride
additionalQueryStringParameters
length
appendString:
appendFormat:
enumerateKeysAndObjectsUsingBlock:
absoluteString
stringByAppendingFormat:
URLWithString:
setMessageURL:
underlyingService
setTopic:
setUserAgentOverride:
wantsIDSSignatures
wantsBodySignature
additionalMessageHeaders
setMessageHeaders:
handleResponseDictionary:
responseBodyData
handleResponseBody:
responseHeaders
handleResponseHeaders:
responseCode
handleResponseStatus:
setDeliveryMechanism:
sentByteCount
setSentByteCount:
receivedByteCount
setReceivedByteCount:
requestStart
setRequestStart:
requestEnd
setRequestEnd:
responseReceived
setResponseReceived:
_enterBackOffMode
setCompletionBlock:
hasAttemptedAPSDelivery
isEqual:
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
description
debugDescription
initWithPreferedType:
_httpDelivery
_apsDelivery
_dualModeQueue
_userAgentString
intValue
isEqualToString:
_FTDataFromBase64String
numberWithInteger:
numberWithUnsignedInteger:
countByEnumeratingWithState:objects:count:
isC2KEquipment
dataWithBytes:length:
appendData:
dataUsingEncoding:
appendBytes:length:
SHA1Data
SHA256Data
bytes
_FZIDType
_IDFromFZIDType:
_stripFZIDPrefix
localizedCaseInsensitiveCompare:
_FZBestGuessFZIDType
_URIFromFZIDType:
lowercaseString
base64EncodedStringWithOptions:
_FTFilteredArrayForAPS
_FTFilteredDictionaryForAPS
_URIsFromIDs
_IDsFromURIs
setObject:forKey:
initWithBase64EncodedString:options:
data
getCharacters:
dataWithBytesNoCopy:length:freeWhenDone:
_FTDataFromHexString
initWithLength:
increaseLengthBy:
mutableBytes
setLength:
_updateCapabilities
_updateManagedConfigurationSettings
_registerForServiceStatusNotifications
_registerForCarrierNotifications
_registerForCapabilityNotifications
_registerForLockdownNotifications
_registerForManagedConfigurationNotifications
_unregisterForManagedConfigurationNotifications
_unregisterForCommCenterReadyNotifications
_unregisterForServiceStatusNotifications
__mainThreadPostNotificationName:object:
madridSupported
madridBlocked
callingSupported
callingBlocked
multiwaySupported
multiwayBlocked
faceTimeBlocked
madridAvailable
conferencingEnabled
conferencingBlocked
conferencingAllowed
supportsNonWiFiFaceTime
faceTimeSupported
iMessageSupported
supportsAppleIDIdentification
model
_initializeSIMInsertedCachedValue
__stringByStrippingControlCharacters
isDeviceInDualPhoneIdentityMode
isSelectedPhoneNumberRegistrationSubscriptionContext:
_handlePotentialPhoneNumberRegistrationStateChanged
_handleCarrierSettingsChanged
_invalidateValuesCachedForSelectedPhoneNumberRegistration
registrationState
isEqualToDictionary:
__mainThreadPostNotificationName:object:userInfo:
isTelephonyDevice
userAgentString
productName
productVersion
productBuildVersion
deviceInformationString
isActivated
_lockdownStateChanged:
faceTimeNonWiFiEntitled
nonWifiAvailableForBundleId:
cellularDataEnabledForBundleId:
allowAnyNetwork
nonWifiFaceTimeAvailable
_enoughPowerToSupportEffects
lowRAMDevice
deviceType
carrierBundleChange:
operatorBundleChange:
simStatusDidChange:status:
simLockSaveRequestDidComplete:success:
simPinEntryErrorDidOccur:status:
simPukEntryErrorDidOccur:status:
simPinChangeRequestDidComplete:success:
pnrRequestSent:pnrReqData:
pnrResponseReceived:pnrRspData:
pnrReadyStateNotification:regState:
_serviceStatus
_forceWWANQueriesCarrierBundleValue
_wantsForcedCellularQueries
_registerForCommCenterReadyNotifications
_registerForInternalCoreTelephonyNotifications
callingAvailable
multiwayAvailable
iMessageAvailable
iMessageBlocked
faceTimeAvailable
identityServicesSupported
supportsNonWiFiCalling
registrationSupported
accountModificationRestricted
deviceIDPrefix
deviceTypeIDPrefix
telephonyCapabilities
supportsSimultaneousVoiceAndDataRightNow
SIMInserted
wantsBreakBeforeMake
deviceRegionInfo
deviceName
deviceColor
enclosureColor
isInDualPhoneIdentityMode
phoneNumberChanged:
_handleSIMStatusChangedToStatus:
noteSelectedPhoneNumberRegistrationSubscriptionDidChange
CTNetworkInformation
_updateCTNetworkDictionary:key:withTelephonyNetworkValue:telephonyError:
supportsSMSIdentification
_legacy_supportsSMSIdentification
telephoneNumber
productOSVersion
performanceClass
wifiAllowedForBundleId:
nonBluetoothAvailableForBundleId:
nonWifiCallingAvailable
isInMultiUserMode
supportsApplePay
memorySize
supportsFunCam
isGreenTea
supportsHandoff
supportsTethering
supportsFrontFacingCamera
supportsBackFacingCamera
supportsWLAN
supportsWiFi
supportsCellularData
supportsSMS
supportsMMS
mmsConfigured
wantsForcedCellularQueries
commCenterDead
_number
_blockPost
_supportsFrontCamera
_supportsBackCamera
_supportsiMessage
_supportsSMS
_supportsMMS
_mmsConfigured
_supportsApplePayState
_supportsHandoff
_supportsTethering
_supportsFT
_supportsFTA
_supportsFTMW
_supportsWiFi
_supportsWLAN
_supportsNonWiFiFaceTime
_supportsCellularData
_simBecameNotReady
_simInserted
_isPNRSupportedCachedValue
_faceTimeBlocked
_iMessageBlocked
_accountModificationRestricted
_isGreenTea
_performanceClass
_coreTelephonyClient
_selectedPNRSubscription
_commCenterDead
phoneNumber
dualSIMCapability
selectedContext
subscriptionInfo
activeSubscriptionInfo
setSubscriptionInfo:
setActiveSubscriptionInfo:
setSelectedContext:
setPhoneNumber:
setDualSIMCapability:
_subscriptionInfo
_activeSubscriptionInfo
_selectedContext
_phoneNumber
_dualSIMCapability
hasPrefix:
characterSetWithCharactersInString:
stringByRemovingCharactersFromSet:
rangeOfString:
_protected_invalidateCache
_protected_reevaluateCacheIfNeededAndPersistUpdate:
selectedPhoneNumberRegistrationSubscriptionLabel
slotID
labelID
_isInDualPhoneIdentityModeBasedOnCapability:
_doesSubscriptionInfoContainMultipleLabels:
subscriptions
firstObject
_doesSubscriptionInfoContainMultipleUniqueLabels:
setIsDeviceInDualPhoneIdentityMode:
isPhoneNumber:equivalentToExistingPhoneNumber:
subscriptionInfoDidChange
phoneNumberAvailable:
activeSubscriptionsDidChange
dualSimCapabilityDidChange
_distributed_invalidateCache
invalidateCache
selectedPhoneNumberRegistrationSubscriptionWithError:
persistSelectedPhoneNumberRegistrationSubscriptionIfNeeded
selectedRegistrationPhoneNumberWithError:
setSelectedPhoneNumberRegistrationSubscriptionNumber:
_isIdentityFallbackProhibitedForDeviceBasedOnCapability:subscriptionInfo:
_reevaluateCachedSubscriptionWithError:
_reevaluateCachedActiveSubscriptionWithError:
_reevaluateDualIdentityModeWithSubscriptionInfo:
_subscriptionFromAvailableSubscriptions:matchingSelectedLabel:
_firstPresentSubscriptionFromAvailableSubscriptions:
_reevaluateCachedSelectedPhoneNumberRegistrationWithSubscription:activeContexts:fallbackProhibited:persistUpdate:error:
_reevaluateCachedSelectedPhoneNumberWithContext:error:
selectedPhoneNumberRegistrationRegistrationCarrierBundleValueForKey:ofType:withFallbackValue:
_legacy_carrierBundleValueForKey:ofType:
isPhoneNumberEmergencyNumber:
_legacy_isPhoneNumberEmergencyNumber:
validNetworkEnabledForBundleId:
validNetworkActiveForBundleId:
validNetworkReachable
validNetworkReachableForBundleId:
reachabilityForInternetConnection
currentReachabilityStatus
willSearchForNetworkForBundleId:
_clearReliabilityTimeoutInterval
validNetworkEnabled
validNetworkActive
wiFiActiveAndReachable
willSearchForNetwork
dataActiveAndReachable
networkEnabled
networkActive
networkReachable
enableCriticalReliability
_setReliabilityTimeoutInterval
_reallySetCriticalReliability:
_tryToEnableReliability
setEnableCriticalReliability:
_enableCriticalReliability
_criticalReliabilityEnabledState
initPrivate
_addObservers
_reload
_removeObservers
supportedServicesFlags
_noCache_supportedServicesFlags
setSupportedServicesFlags:
blockPost
setSupportedServicesToken:
supportedServicesToken
faceTimeAudioSupported
faceTimeMultiwaySupported
setBlockPost:
_supportedServicesFlags
_supportedServicesToken
serviceStatus
UTF8String
reachabilityWithAddress:
stringWithUTF8String:
currentHandler
handleFailureInMethod:object:file:lineNumber:description:
localWiFiStatusForFlags:
networkStatusForFlags:
reachabilityWithHostName:
reachabilityForLocalWiFi
connectionRequired
localWiFiRef
reachabilityRef
setWantsResponse:
setWantsIntegerUniqueIDs:
UUID
UUIDString
setMessageRequestUUID:
copyWithZone:
messageRequestUUID
messageURL
messageRequestBodyData
messageRequestBodyDictionary
setMessageRequestBodyDictionary:
messageHeaders
responseBodyDictionary
setResponseBodyDictionary:
setResponseBodyData:
setResponseHeaders:
setResponseCode:
responseStatus
setResponseStatus:
disableIDSTranslation
userAgentOverride
mutableCopy
removeObjectForKey:
initWithInt:
stringValue
setValue:forKey:
messageBody
isIDSMessage
_numberForKey:
_dictionaryForKey:
_dataForKey:
wantsBinaryPush
wantsCompressedBody
isWebTunnelMessage
wantsIDSProtocolVersion
additionalMessageHeadersForOutgoingPush
maximumResponseSize
setMaximumResponseSize:
_messageRequestUUID
_messageURL
_messageRequestBodyData
_messageRequestBodyDictionary
_messageHeaders
_maximumResponseSize
_responseBodyDictionary
_responseBodyData
_responseHeaders
_responseCode
_responseStatus
_disableIDSTranslation
_userAgentOverride
initWithIdentifier:
appleIDHeadersForRequest:
handleResponse:forRequest:shouldRetry:
anisetteHeadersForRequest:completionBlockQueue:completionBlock:
handleResponse:forRequest:completionBlock:
_akAppleIDSession
load
cancel
requireIDSHost
setRequireIDSHost:
forceCellularIfPossible
setForceCellularIfPossible:
setAlwaysForceCellular:
bundleIdentifierForDataUsage
setBundleIdentifierForDataUsage:
shouldUsePipelining
setShouldUsePipelining:
concurrentConnections
setConcurrentConnections:
disableKeepAlive
setDisableKeepAlive:
keepAliveWifi
setKeepAliveWifi:
keepAliveCell
setKeepAliveCell:
shouldReturnTimingData
setShouldReturnTimingData:
request
setRequest:
block
setBlock:
remoteURLConnection
initWithIDSServerBag:iMessageServerBag:remoteConnectionFactory:retryBackoffProvider:
_serverBagLoaded:
requestWithURL:cachePolicy:timeoutInterval:
wantsHTTPGet
setHTTPMethod:
setHTTPBody:
httpDoNotDecodeData
_CFURLRequest
setHTTPShouldHandleCookies:
setValue:forHTTPHeaderField:
isInternalInstall
additionalInternalHeaders
boolValue
anisetteHeadersTimeout
_dequeueIfNeeded
wantsSignature
_FTDecompressData
propertyListWithData:options:format:error:
_cleanupURLConnection
localizedDescription
payloadCanBeLogged
forceCellular
messageDelivery_oversized
warning
allHeaderFields
FTMessageDelivery_oversized
userInfo
wantsCFNetworkTimeout
wantsManagedRetries
_tryRetryMessageWithTimeInterval:
_informDelegatesOfMessage:result:resultCode:error:
statusCode
setTimingData:
_processResultData:forMessage:error:
setServerTimestampReceivedDate:
dataUsageBundleIdentifier
_notifyDelegateAboutError:
_urlRequestWithURL:andData:message:missingAnisetteHeaders:completionBlock:
_updateWiFiAssertions
isValidMessage
hasRequiredKeys:
wantsExtraTimeoutRetry
timeoutRetries
maxTimeoutRetries
setTimeoutRetries:
_setUsingOutgoingPush:
setTimeSent:
sendMessageAtTopOfTheQueue:
_remoteConnectionFactory
_remoteConnection
_pendingRetryAfterAirplaneMode
_retryTimeAfterAirplaneMode
_retryBackoffProvider
_idsServerBag
_iMessageServerBag
allowsServerProvidedLenientAnisetteTimeout
array
_setEnabledTopics:
_updateTopics
initWithEnvironmentName:queue:
messageSize
initWithAPSConnection:
cancelOutgoingMessage:
setEnabledTopics:ignoredTopics:opportunisticTopics:
uniqueIDString
_invalidateTimerForMessageID:
scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:
_messageCompletelyTimedOut:
_invalidateDeathTimerForMessageID:
allKeysForObject:
allValues
_currentMessages
addObjectsFromArray:
__imFirstObject
_apsOutgoingMessageForFTMessage:
_messageForAPSOutgoingMessage:
_fillMessageParameters:ftMessage:
_retryCountForMessage:
ignoreMaxRetryCount
hasReceivedPushAck
logFailureInfo
wantsCustomRetryInterval
customRetryInterval
setHasReceivedPushAck:
_messageNeedsRetry:
_setMapForMessage:apsMessage:messageBody:timeoutTime:timeoutSelector:retries:
_notifyDelegateAboutError:resultCode:forMessage:
_clearMapForMessageID:
wantsAPSRetries
highPriority
_messageACKTimedOut:
_messageSendTimedOut:
payloadLength
_apsMessageForMessage:body:
_noteMessageSent:ftMessage:body:
sendOutgoingMessage:
_noteMessageFailed:ftMessage:allowRetry:error:
_bodyForMessage:
_sendMessage:ftMessage:
enumerateObjectsUsingBlock:
allObjects
_requiredTopics
isEqualToArray:
wantsHTTPHeaders
wantsUserAgentInHeaders
userAgentHeaderString
nonStandardMessageHeadersForOutgoingPush
wantsBagKey
command
dictionary
wantsIntegerUniqueIDs
uniqueID
numberWithUnsignedLongLong:
_apsMessageBodyForMessage:
processInfo
processName
initWithTopic:userInfo:
setPayloadFormat:
setIdentifier:
apsdCheckpointTrace
setCheckpointTrace:
setCritical:
setPriority:
_powerLogEvent:dictionary:
copy
_noteMessageSucceeded:ftMessage:error:result:resultCode:
dictionaryWithObjectsAndKeys:
responseCommand
initWithServerResponseDictionary:
wantsMultipleResponses
noteResponseForToken:
expectingMoreResponses
_isBusyWithMessage:
wantsResponse
checkpointTrace
setApsdCheckpointTrace:
deliveryAcknowledgementBlock
_noteMessageACKd:ftMessage:
largeMessageSize
connection:didReceivePublicToken:
connection:didReceiveToken:forTopic:identifier:
connection:didReceiveIncomingMessage:
connection:didReceiveMessageForTopic:userInfo:
connection:didSendOutgoingMessage:
connection:didFailToSendOutgoingMessage:error:
connection:didChangeConnectedStatus:
connectionDidReconnect:
_currentAPSMessages
_currentTimers
connection
_connection
_APSOutgoingMessageClass
_enabledTopics
_ftMessageMap
_startDateMap
_bodyMap
_apsMessageMap
_timerMap
_deathTimerMap
_retriesMap
substringToIndex:
hasSuffix:
replaceObjectAtIndex:withObject:
lastObject
setPushPrivateKey:
setPushPublicKey:
setIdentityPrivateKey:
setIdentityPublicKey:
setPushCertificate:
setIDCertificate:
setPushToken:
selfURI
setSelfURI:
setPublicKeyArray:
setPrivateKeyArray:
setUserIDArray:
setCertDataArray:
_usingOutgoingPush
addAuthUserID:certificate:privateKey:publicKey:
retryCountKey
_pushCert
_identityKey
_identityCert
_identityPublicKey
_pushKey
_pushPublicKey
_pushToken
_selfURI
_certDataArray
_publicKeyArray
_privateKeyArray
_userIDArray
_serverTimestamp
_serverTimestampReceivedDate
_setupCTServerConnection
_nonWifiFaceTimeEntitled
_rawEntitlementValue
_entitlementStatusChanged
_updateEntitlementStatusUsingCTEntitlementsInfo:
_registerForCTEntitlementNotifications
_unregisterForCTEntitlementNotifications
_cleanupMachInfo
_reconnectCTServerConnectionIfNecessary
_disconnectCTServerConnection
_adequateInternalOrCarrierInstall
cellularFaceTimeEnabled
nonBluetoothAllowedForBundleId:
setCellularFaceTimeEnabled:
setAllowAnyNetwork:
setSelectedPhoneNumberRegistrationSubscriptionLabel:
selectedPhoneNumberRegistrationSubscriptionNumber
_initWithDictionary:
_setParentRegion:
makeObjectsPerformSelector:withObject:
regionID
subRegions
label
isoCode
basePhoneNumber
parentRegion
regionWithID:
_dictionary
set_dictionary:
_parentRegion
set_parentRegion:
_subRegions
_buildMessageDeliveryIfNeeded
setLanguage:
responseRegionInformation
setRegions:
regions
startLoading
flushRegions
regionForID:
delivery
setDelivery:
_regions
_delivery
language
setResponseRegionInformation:
requiredKeys
_language
_responseRegionInformation
initWithUserNotificationCenter:
accountTypeWithAccountTypeIdentifier:
accountsWithAccountType:
username
_findIDSAccountInStore:withCriteria:
credential
password
_accountWithUsername:inStore:
isEqualToIgnoringCase:
_profileIDForUsername:inStore:
_accountWithProfileID:username:inStore:
_accountWithUsernameAlias:inStore:
_accountWithProfileIDMatchingUser:inStore:
setUsername:
saveVerifiedAccount:withCompletionHandler:
accountTypeWithIdentifier:completion:
accountPropertyForKey:
setAccountProperty:forKey:
removeAccount:withCompletionHandler:
stringGUID
_accountBasedOnProfileID:orUsername:inStore:
credentialForAccount:
accountType
identifier
token
_keychainPasswordForUsername:service:
removeObject:
accountProperties
_keychainAuthTokenForUsername:service:
_loginUserNotificationForService:user:isForBadPassword:showForgetPassword:shouldRememberPassword:
responseInformation
response
addUserNotification:listener:completionHandler:
requestAuthTokenForProfileID:username:service:badPassword:showForgotPassword:failIfNotSilent:outRequestID:completionBlock:
initWithAccountType:
reload
setCredential:
_accountOptionsDictForRenewCredentialsForService:username:shouldFailIfNotSilent:
renewCredentialsForAccount:options:completion:
verifyCredentialsForAccount:withHandler:
setPassword:
credentialWithPassword:
_setKeychainPassword:forUsername:service:
setAuthTokenForProfileID:username:service:authToken:selfHandle:accountStatus:outRequestID:completionBlock:
authTokenGracePeriod
isAuthTokenReceiptTime:withinGracePeriod:
setToken:
setAuthenticated:
isAuthenticated
_setKeychainAuthToken:forUsername:service:
bundleForClass:
numberWithBool:
removeNotificationsForServiceIdentifier:
stringByRemovingWhitespace
arrayWithObjects:
userNotificationWithIdentifier:timeout:alertLevel:displayFlags:displayInformation:
fetchPasswordForProfileID:username:service:outRequestID:completionBlock:
fetchAuthTokenForProfileID:username:service:outRequestID:completionBlock:
requestPasswordForUsername:service:badPassword:showForgotPassword:shouldRememberPassword:outRequestID:completionBlock:
requestAuthTokenForProfileID:username:service:badPassword:showForgotPassword:outRequestID:completionBlock:
setPasswordForProfileID:username:service:password:outRequestID:completionBlock:
setAuthTokenForProfileID:username:service:authToken:selfHandle:outRequestID:completionBlock:
removeAuthTokenAllowingGracePeriodForProfileID:username:
setHandlesForProfileID:username:service:handles:
cancelRequestID:serviceIdentifier:
acAccountWithProfileID:username:accountStore:
profileIDForACAccount:
cleanUpAccountsWithUsername:orProfileID:basedOnInUseUsernames:profileIDs:completionBlock:
cleanUpAccountsBasedOnInUseUsernames:profileIDs:completionBlock:
performCleanUpWithCompletion:
updatePreviousUsername:toNewUsername:
supportsAuthTokenRequests
_findIDSAccountsInStore:withCriteria:
_runningQueries
_accountStore
_userNotificationCenter
bundleWithPath:
setURLOverride:
setImportanceLevel:
setHttpDoNotDecodeData:
requestType
setRequestType:
requestURL
setRequestURL:
requestHeaders
setRequestHeaders:
requestStringParams
setRequestStringParams:
responseBody
setResponseBody:
responseStatusCode
setResponseStatusCode:
requestBody
initWithURL:type:headers:stringParams:body:
setRequestBody:
timingData
_requestType
_requestURL
_requestHeaders
_requestStringParams
_requestBody
_responseBody
_responseStatusCode
_timingData
FTServerBag
FTMessageDelivery
FTMessageQueueDelegate
FTMessageQueue
FTMessageDelivery_DualMode
FTMessageDeliveryProtocol
NSObject
FTAPSOutgoingMessage_Additions
FaceTimeStringAdditions
CompressionAdditions
FTDeviceSupport
CoreTelephonyClientCarrierBundleDelegate
CoreTelephonyClientSubscriberDelegate
CoreTelephonyClientPNRDelegate
FTSelectedPNRSubscriptionCache
FTSelectedPNRSubscription
FTNetworkSupport
FTServiceStatus
FTiMessageStatus
FTEmbeddedReachability
IDSWebTunnelRequestMessage
FTAuthKitManager
FTMessageDelivery_HTTP
FTMessageDeliveryRemoteURLConnection
FTMessageDeliveryRemoteURLConnectionFactory
FTMessageDelivery_APS
APSConnectionDelegate
FTIDSMessage
NSCopying
FTEntitlementSupport
FTUserConfiguration
FTRegion
FTRegionSupport
FTGetRegionMetadataMessage
FTPasswordManager
FTURLRequestMessage
@8@0:4
@12@0:4i8
v8@0:4
B8@0:4
@12@0:4@8
#8@0:4
@16@0:4i8@12
v16@0:4@8@12
v16@0:4@"FTMessageQueue"8@"IDSBaseMessage"12
v12@0:4@8
v24@0:4@8@12@16i20
B16@0:4@8^@12
B12@0:4@8
v16@0:4d8
i8@0:4
v28@0:4@8B12@16@20@24
v12@0:4B8
I8@0:4
v12@0:4I8
@"FTMessageQueue"
@"NSString"
@"IMTimer"
@"NSMutableArray"
@"<FTMessageQueueDelegate>"
@12@0:4:8
@16@0:4:8@12
@20@0:4:8@12@16
B12@0:4#8
B12@0:4:8
Vv8@0:4
^{_NSZone=}8@0:4
B12@0:4@"Protocol"8
@"NSString"8@0:4
B12@0:4@"IDSBaseMessage"8
v12@0:4@"IDSBaseMessage"8
v12@0:4@"NSString"8
@"IDSBaseMessage"8@0:4
@"NSArray"8@0:4
@"FTMessageDelivery"
v12@0:4@"CTXPCServiceSubscriptionContext"8
v16@0:4@8B12
v16@0:4@"CTXPCServiceSubscriptionContext"8@"NSString"12
v16@0:4@"CTXPCServiceSubscriptionContext"8B12
v16@0:4@"CTXPCServiceSubscriptionContext"8@"CTPNRRequestSentInfo"12
v16@0:4@"CTXPCServiceSubscriptionContext"8@"NSDictionary"12
v24@0:4@8@12@16@20
q8@0:4
@"CoreTelephonyClient"
@"FTSelectedPNRSubscription"
v12@0:4i8
@"CTXPCServiceSubscriptionInfo"
@"CTXPCContexts"
@"CTXPCServiceSubscriptionContext"
B16@0:4@8@12
@12@0:4B8
@12@0:4^@8
B12@0:4i8
B16@0:4i8@12
@16@0:4@8@12
@28@0:4@8@12B16B20^@24
@16@0:4@8^@12
@20@0:4@8#12@16
@16@0:4@8#12
Q8@0:4
v16@0:4Q8
@"FTServiceStatus"
@12@0:4r^{sockaddr_in=CCS{in_addr=I}[8c]}8
i12@0:4I8
^{__SCNetworkReachability=}
@12@0:4^{_NSZone=}8
@"NSData"
@"NSDictionary"
@"NSMutableDictionary"
@"NSNumber"
v20@0:4@8@12@?16
@"AKAppleIDSession"
@"NSObject<OS_dispatch_queue>"
@?8@0:4
v12@0:4@?8
@"NSURLRequest"8@0:4
v12@0:4@"NSURLRequest"8
@?<v@?@"NSURLResponse"i@"NSData"@"NSError"@"NSDictionary">8@0:4
v12@0:4@?<v@?@"NSURLResponse"i@"NSData"@"NSError"@"NSDictionary">8
@"<FTMessageDeliveryRemoteURLConnection>"8@0:4
@24@0:4@8@12@16@?20
v28@0:4@8@12@16^B20@?24
@20@0:4@8@12^@16
v24@0:4@8@12i16@20
B16@0:4d8
@"<FTMessageDeliveryRemoteURLConnectionFactory>"
@"<FTMessageDeliveryRemoteURLConnection>"
@"IDSServerBag"
v20@0:4@8@12@16
v16@0:4@"APSConnection"8@"NSData"12
v24@0:4@"APSConnection"8@"NSData"12@"NSString"16@"NSString"20
v16@0:4@"APSConnection"8@"APSIncomingMessage"12
v20@0:4@"APSConnection"8@"NSString"12@"NSDictionary"16
v16@0:4@"APSConnection"8@"APSOutgoingMessage"12
v20@0:4@"APSConnection"8@"APSOutgoingMessage"12@"NSError"16
v16@0:4@"APSConnection"8B12
v12@0:4@"APSConnection"8
v36@0:4@8@12@16d20:28@32
i12@0:4@8
B16@0:4^@8^@12
v24@0:4@8@12B16@20
v28@0:4@8@12@16@20i24
v20@0:4@8i12@16
@"<FTMessageDeliveryAPSConnection>"
v12@0:4^{__SecKey=}8
v24@0:4@8@12^{__SecKey=}16^{__SecKey=}20
^{__SecKey=}8@0:4
^{__SecKey=}
v12@0:4^{__CFDictionary=}8
@"NSArray"
@"FTRegion"
@28@0:4@8@12B16B20B24
v28@0:4@8@12@16^@20@?24
v36@0:4@8@12B16B20B24^@28@?32
v36@0:4@8@12@16B20B24^@28@?32
v40@0:4@8@12@16B20B24B28^@32@?36
v32@0:4@8@12@16@20^@24@?28
v36@0:4@8@12@16@20@24^@28@?32
v40@0:4@8@12@16@20@24@28^@32@?36
B24@0:4d8d16
@20@0:4@8@12@16
v28@0:4@8@12@16@20@?24
v28@0:4@"NSString"8@"NSString"12@"NSString"16^@20@?<v@?@"NSString"@"NSString"@"NSString"@"NSString"@"NSString"@"NSString"@"NSDictionary"@"NSNumber">24
v36@0:4@"NSString"8@"NSString"12B16B20B24^@28@?<v@?@"NSString"@"NSString"@"NSString"@"NSString"@"NSString"@"NSString"@"NSDictionary"BBB>32
v36@0:4@"NSString"8@"NSString"12@"NSString"16B20B24^@28@?<v@?@"NSString"@"NSString"@"NSString"@"NSString"@"NSString"@"NSString"@"NSDictionary"@"NSNumber"BBB>32
v40@0:4@"NSString"8@"NSString"12@"NSString"16B20B24B28^@32@?<v@?@"NSString"@"NSString"@"NSString"@"NSString"@"NSString"@"NSString"@"NSDictionary"@"NSNumber"BBB>36
v32@0:4@"NSString"8@"NSString"12@"NSString"16@"NSString"20^@24@?<v@?@"NSString"@"NSString"@"NSString"B>28
v36@0:4@"NSString"8@"NSString"12@"NSString"16@"NSString"20@"NSString"24^@28@?<v@?@"NSString"@"NSString"@"NSString"B>32
v40@0:4@"NSString"8@"NSString"12@"NSString"16@"NSString"20@"NSString"24@"NSNumber"28^@32@?<v@?@"NSString"@"NSString"@"NSString"B>36
v16@0:4@"NSString"8@"NSString"12
v24@0:4@"NSString"8@"NSString"12@"NSString"16@"NSArray"20
@"ACAccount"20@0:4@"NSString"8@"NSString"12@"ACAccountStore"16
@"NSString"12@0:4@"ACAccount"8
v28@0:4@"NSString"8@"NSString"12@"NSArray"16@"NSArray"20@?<v@?B>24
v20@0:4@"NSArray"8@"NSArray"12@?<v@?B>16
v12@0:4@?<v@?B>8
@16@0:4@8@?12
d8@0:4
@20@0:4@8@12B16
@"NSMutableSet"
@"ACAccountStore"
@"IMUserNotificationCenter"
@28@0:4@8I12@16@20@24
@"NSURL"
@@(#)PROGRAM:FTServices  PROJECT:FaceTime Services-
Should retry!
...Should retry
Failed retrying message: %@
...Failed retrying
Network state changed
Failed to sign message {message: %@, signingSession: %@, error: %@}
Timestamp received %@, delta %f servertimestamp %@ newServerTimestamp %@
Signing message: %@
   Single signing for: %@
   result dictionary: %@
   Multiple signatures for: %@
   adding userID: %@
Setting timeout for %f seconds from now  (Message: %@)
Queue timeout hit for message: %@
Device can not use WiFI for delivery, Forcing HTTP to allow Forced Cellular
Message topic (%@) is in the list of blacklisted topics (%@)
We do not meet the version requirements for web tunnel ID queries
This query is not important enough to perform a web tunnel ID query
We are in backoff mode 
Server gave us 0 quota to use this feature
Deiceroll Was %ld
Deiceroll Sucesss, dual query will be performed
Deiceroll failed
We have a cached vale for server backoff mode
Back off End Date is %@
Back off Interval is in the past, we are good to go
Back off Interval is in the future, we are in backoff
Incoming request to send a dualMode message %@
Dequeing message if needed
Message Allow Dual Delivery
Server says yes for APS delivery, lets go ahead and use that
Not allowed to use APS delivery, using HTTP
Web Tunnel Response got %ld
Web Tunnel Query was successful; passing along the completion information
Unknown Error, Falling back to HTTP
Server Bag provided us with %d Web Tunnel Version
Server Bag has no value for Min Version, using the default: %f
Server Bag provided us with %d Web Tunnel Percentage
Server Bag has no value for percentage, using the default: %f percentage
Server Bag provided us with a wait time interval of %f 
Server Bag has no value for wait time interval , using the default: %f interval
Appending %d length header for %@ segment
Appending %d bytes for %@ segment
Appending no bytes for %@ segment
Signature input is %d bytes (%@)
Unknown digest type provided as input to digest generation function -- returning empty digest { digestType: %ld }
No digest generated { signatureInputDataLength: %lu, digestType: %ld }
Failed signing nonce: %@   with error: %d
Succeeded verifying signature for: %@   with error: %d
Failed verifying signature for: %@   with error: %d
Nonce: %@    Signed: %@   Result: %d
Setting CoreTelephonyClient delegate to start receiving notifications { self: %@, coreTelephonyClient: %@ }
FTA isn't allowed, disabled
FTA isn't allowed, managed profile doesn't allow it
FTMW isn't allowed, disabled
FTMW isn't allowed, managed profile doesn't allow it
Conferencing isn't allowed, disabled
Conferencing isn't allowed, managed profile doesn't allow it
Received phone number registration ready state change callback { state: %@, context: %@ }
Received phone number changed delegate callback { context: %@ }
Phone number registration state changed -- posting notification { notification: %@, state: %@ } 
No change to phone number registration state -- not posting notification { lastState: %@, state: %@ }
Returning telephony network information { networkInformation: %@ }
Error reading telephony network information { key: %@, value: %@, error: %@ }
No value found for telephony network key { key: %@ }
Lockdown became activated, let's notify
Registering %@ for lockdown changes
Determined whether phone numbers are equivalent { phoneNumber: %@, existingPhoneNumber: %@, equivalent: %@ }
Subscription info did change -- clearing cached selected phone number registration subscription
Phone number changed -- clearing cached selected phone number registration subscription { context: %@ }
Phone number became available -- clearing cached selected phone number registration subscription { context: %@ }
Active subscriptions did change -- clearing cached selected phone number registration subscription
Dual SIM capability did change -- clearing cached selected phone number registration subscription
Posting distributed notification to invalidate selected phone number subscription caches in other processes
Determined if provided subscription context is selected IDS phone number subscription context { context: %@, selectedContext: %@, persistedLabel: %@, isMatching: %@ }
Determined if device is in dual phone identity mode { isDualIdentity: %@, dualSIMCapability: %ld, isDeviceInDualPhoneIdentityMode: %@ }
Determined that device has entered dual identity mode { subscriptionInfo: %@ }
Found carrier bundle value in defaults { key: %@, value: %@ }
Unexpected type loading carrier bundle value from defaults { key: %@, expectedClass: %@, foundClass: %@ }
No value found in carrier bundle defaults for provided key { key: %@ }
Updating supported service status { iMessageSupported: %@, faceTimeAudioSupported: %@, faceTimeMultiwaySupported: %@, supportedServicesFlags: %llu }
Reachability Flag Status: %c%c %c%c%c%c%c%c%c %s
Web Tunnel Message Completed With Respone Headers %@
AuthKit - gathering headers
AuthKit - received headers, count: %lu
AuthKit - handling response
AuthKit - shouldRetry: %@
Cannot send message: Empty URL requested for message: %@, forcing a bag load
 Query parameters: %@
 Query string: %@
Generated final URL: %@
Building URL request with URL: %@
Headers
       User Agent: %@
            Agent: %@
       %@: %@
anisette headers are required for messageType %@ but disabled by the server bag anisette-headers-disabled
************* Couldn't gather Anisette headers for %@ *************
************* Couldn't gather Anisette headers %@ *************
Exception processing result: %@   for message: %@
Requesting async send: %@
error = %@
Created URL Request: %@  from URL: %@
Delivering message to URL: %@
Message body: %@
Force cellular: %@
**** Server sent status code header codes to refresh the bag, reloading IDS and iMessage bags ****
**** Server sent status code header codes to refresh the bag (Interval: %d), reloading IDS and iMessage bags ****
  * Sending refresh, we're outside our interval: %d  (Last date: %@)
  * Not refreshing, we're still inside our interval: %d (Laste date: %@)
Finished URL request: %@
Response: %p
Response headers: %@
           Response: %@
       Replied Code: %d
 Result Data Length: %d
              Error: %@
Connection failed with error: %@
FTMessageDelivery failed! (HTTP Status Code: %d) Error (%@:%d): %@ %@
... this was a remote loader crash
... no error, ignoring...
... IDS message failed sending
... IDS message timed out
... we're done here, code: %d
... we should retry this
... not going to retry, we're done
  headers: %@
  status code: %d
Result status code: %d
SplunkHint: %{public}@
ServerErrorDetail: %{public}@
Server requested retry with delay, will retry after %f seconds
Setting server timestamp %@
Kicked off server retry
Unable to retry this message any further
sent dictionary: %@
         result: %@
    status code: %d
Failing message, empty url request
Failing message, empty url request for URL: %@
Nothing left in queue, done
Server bag is not loaded, waiting for it
 => Server is available
 => Starting load
 => Already loading
 => Server not available
Message not being delivered, invalid message
Cancelling message delivery! invalid message!
Message not being delivered, missing some required keys: %@
Cancelling message delivery! Missing keys: %@
Cleaning out url connection
Should retry, already tried: %d times
Retrying - trying again in %f seconds
Gave up, too many attempts
Message timed out, but we're going to wait for CFNetwork: %@
Message timed out, but we want extra timeout retries (%d/%d): %@
Queue timed out delivery for message: %@
Cancelling message in the queue: %@
Adding message to the queue: %@
  Busy delivering: %@  (%@)
Server bag loaded
We're out of airplane mode, and we have a pending retry
Using server bag anisetteHeaderLenientTimeout: %f second(s)
Using server bag anisetteHeaderGlobalTimeout: %f second(s)
Created APSConnection: %p  (Max size: %d  Environment: %@)
Cannot map Message: %@   no ID!
Mapping messageID: %@  message: %@   APSMessage: %@   timeout: %f  timeoutSelector: %@
No timer specified for message ID: %@
Missing APS Message for message ID: %@
Missing FTMessage for message ID: %@
Missing body for message ID: %@
_clearMapForMessageID: %@
  => Message ignores max retry count set on server bag. Keep retrying (current retires %d). Has received courier ack? %@
  => Message retried too many times (%d), not retrying anymore. Has received courier ack? %@
Noting message failed: %@   (Request ID: %@  Retries: %d  Retry Allowed: %@  Wants Retry: %@)
  => Will retry message: %@ in %f seconds
Informing delegate about message %@ with resultCode %ld
Noting message success: %@   (Request ID: %@   %d remaining)
Noting message ack'd: %@   (Request ID: %@   %d remaining)
   => Setting ack timeout time, this will use APS retries
Message has used %ld retries, Retry timeout time with multiplier will be %f
   => Setting send timeout time: %f
Noting message sent: %@   (Request ID: %@  Remaining: %d  Attempt: %d)
Sent outgoing message: %@ to command: %@   (Request ID: %@   Connection: %@)
Could not generate APSMessage for message: %@
Timed out waiting for server ack for message: %@   (Request ID: %@)
Timed out waiting for server response for message: %@   (Request ID: %@)
Missing message for retry!  (timer: %@   messageID: %@)
Starting retry for message: %@   (Request ID: %@)
Enabling required topics: %@
  => Skipping, already enabled
Cannot send message: Empty topic requested for message: %@
Building URL request with topic: %@  bagKey: %@
Body: %@
Final delivery payload: %@
Sending message: %@ as binary push
invalidating: %@
Created APSOutgoingMessage body: %@
Delivering message to command: %@
OUTGOING-APS_DELIVERY:%@ SERVICE:%@
Message body: %@ [guid: %@]
Failing message, empty message
APS dequeue message
 => Server bag not needed, proceeding
We're already busy, not pulling from queue
Removed message: %@   apsMessage: %@
Message: %@ not in queue.   Current message: %@
  Busy delivering: %@
Response Headers: %@
no message found, map reads: %@
received response dictionary: %@
Received an unknown object for kBodyIDKey
Error decompressing body: %@  (Data: %@)
received response code: %@  response body: %@
  Found internal status code of: %@
Exception processing status code from result body: %@   for message: %@
  This Message Wants Multiple responses
  This Message responds to receiving updates for multipleMessages
 More To Come, Not done yet
  Last message Has Been acknowledged
Server ACK'd outgoing message: %@      (Request ID: %@)
   message: %@ wants response: %@
message delivery failed {error: %@, allowRetry: %@}
FTMessageDelivery failed! Error (%@:%d): %@ %@
APSConnection %@  gave me a connection size of: %d  which doesn't pass our sanity size of: %ld   ignoring
APSConnection %@  gave me a connection large size of: %d  which doesn't pass our sanity size of: %ld   ignoring
Server Bag provided us with %d retries
Server Bag has no value for retries, using the default: %ld retries
Server Bag provided us with a retry interval of %f 
Server Bag has no value for interval , using the default: %f interval
Passed in bogus info to FTIDSMessage (%@:%@:%@:%@)
This device does not support non WiFi facetime, thus we're not entitled
Returning default entitlement of YES
Posting notification for entitlement status changed
 Cleaning up mach bits
Succeeded loading region information
   Region info: %@
   Loaded region: %@
Failed querying regions: %@  code: %ld
Checking keychain with prefixed username %@
Account: %@
            username: %@
          profile ID: %@
               token: %@
vetted email handles: %@
Searching for profileID %@
Didn't find an authenticated account with a DSID; attempting to fall back to an unauthenticated match that has a password
Didn't find a DISD match with a password; attempting to fall back to an unauthenticated DISD and username match
Didn't find an unauthenticated DISD and username match; attempting to fall back to an unauthenticated DSID match
Didn't find a DSID match!
Couldn't match based on any known DSID of %@; attempting to fall back to a username match
Couldn't find a username match for %@; attempting to search aliases of known accounts
Didn't find any matching account!
Didn't find profileID %@; attempting to use username %@
Updating username on accounts { previousUsername: %@, newUsername: %@ }
Updating username on accounts { accountsToUpdate : %@ }
Save completed (%@) with error: %@
Failed saving account %@ with error: %@
Failed to request account type from identifier { typeIdentifierIDS: %@, accountType: %@, accountTypeError: %@ }
Performing clean-up on accounts
Found candidate account for clean-up { account : %@ }
Requesting save of cleaned-up accounts { accountsToSave : %@ }
Saving account { account: %@ }
Save completed { account: %@, success: %@, error: %@ }
Cleaning up accounts {username: %@, profileID: %@, inUseUsernames: %@, inUseProfileIDs: %@ }
Requesting deletion of accounts { accountsToDelete : %@ }
Deleting unused account { account: %@ }
Delete completed { account: %@, success: %@, error: %@ }
Cleaning up unused accounts { usernames : %@, profileIDs : %@ }
Checking if account should be deleted { account: %@ }
Password manager fetch password
Fetching password for profileID: %@ username: %@ service: %@
  Found account: %@
  Credential: %@
         => Type: %@
     => Username: %@
     => Password: %@
   => Auth Token: %@
   => Profile ID: %@
      => Self ID: %@
Did not find an account to use! No password fetched.
Password manager fetch auth token
Fetching auth token for profileID: %@ username: %@ service: %@
Did not find an account to use! No auth token fetched.
Password manager request password
Requesting password for username: %@  service: %@
Handle user notification complete: %@:%@
Password manager request auth token
Requesting auth token for profileID: %@ username: %@ service: %@ failIfNotSilent: %@
No account found, created new account: %@
Adding and saving account
Getting new auth token for account: %@
Failed renewing account %@ with error: %@
Renewal complete for: %@  service: %@ account: %@  renewResult: %ld  error: %@
  => Cancelled, bailing
*** Empty profile ID handed back during token gathering, please file a radar
*** Account: %@
Requesting verification for account: %@
Completed verify credentials
Verification complete for: %@  service: %@ account: %@  error: %@
Failed verifying account %@ with error: %@
*** No error reported for account verification, but verified account is nil, please file a radar (input: %@  output: %@)
*** No account found to use for renewal, please file a radar (input: %@  output: %@)
   Verification failed with error: %@, starting renew for service: %@
Verification succeeded for account: %@
     => Token: %@
    => SelfID: %@
*** Account properties: %@
Checking the current status of the account {foundAccount: %@, status: %@, properties: %@}
Not requesting renewal for a Managed AppleID account
Requesting renewal for account: %@  service: %@
Password manager set password
Setting password for profileID: %@ username: %@ service: %@
Using account: %@
Updated credential: %@
Creating credential: %@
Assigning credential: %@
Saving account
Checked auth token receipt date against grace period {isAuthTokenWithinGracePeriod: %@, authTokenReceiptTime: %f, gracePeriod: %f, now: %f, delta: %f}
Removing auth token using grace period for profileID: %@ username: %@
No account found for auth token removal -- ignoring request
Auth token receipt date falls outside of grace period -- removing auth token {authTokenReceiptTime: %@}
Updating credential %@
Saving account: %@
      Authenticated: %@
Auth token receipt date falls within grace period -- skipping removal {authTokenReceiptTime: %@}
Password manager set auth token
Setting auth token for profileID: %@ username: %@ service: %@  (%@)
Updated auth token receipt time {receiptTime: %f}
Setting profile ID on account: %@
Setting self handle on account: %@
Setting handles dictionary for profileID: %@ username: %@ service: %@  (%@)
Verification Options Dictionary Contains: %@
%@ - %s: invalid arguments!
FT URL  Message Completed With Respone Headers %@
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
