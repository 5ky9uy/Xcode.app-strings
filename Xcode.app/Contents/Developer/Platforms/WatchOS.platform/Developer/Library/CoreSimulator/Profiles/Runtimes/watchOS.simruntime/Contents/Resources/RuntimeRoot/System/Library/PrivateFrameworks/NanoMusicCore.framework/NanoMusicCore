MusicEQPresetName
MusicSoundCheckEnabledSetting
com.apple.mobileipod-prefsChanged
SpeakerRouteEnabled
StageDemoMode
v4@?0
com.apple.mobileipod
PerformingBatchNMCPrefsUpdate
76,8194
76,8198
76,8197
76,8195
76,8201
%u,%u
<%@:%p name: %@, address: %@, type: %@, connected: %@>
hasSystemRoute
TB,N,V_hasSystemRoute
name
T@"NSString",R,C,N
address
type
Ti,R,N
routeType
connected
TB,R,N,GisConnected
NMCBluetoothAudioDeviceTypeUnknown
NMCBluetoothAudioDeviceTypeHeadset
NMCBluetoothAudioDeviceTypeHandsFree
NMCBluetoothAudioDeviceTypeSpeaker
NMCBluetoothAudioDeviceTypeHeadphones
NMCBluetoothAudioDeviceTypeCarStereo
NMCBluetoothAudioDeviceTypeHiFiStereo
NMCBluetoothAudioDeviceTypeA2DP
com.apple.NanoMusic.telemetry
com.apple.NanoMusic.launched
com.apple.NanoMusic.localMusicSelected
com.apple.NanoMusic.viewedAlbums
com.apple.NanoMusic.viewedArtists
com.apple.NanoMusic.viewedSongs
NMCCloudAvailabilityDidChangeNotification
v8@?0@"NMRCloudAvailabilityMessage"4
hash
TI,R
superclass
T#,R
description
T@"NSString",R,C
debugDescription
v8@?0B4
valid
TB,R,N,GisValid
hasSystemRoute: %@
, isPicked: %@
, isSystemSpeaker: %@
, isW1Route: %@
bluetoothDevice: %@
, isConnected: %@
<%@:%p name: %@, %@, %@>
systemRoute
T@"MPAVRoute",&,N,V_systemRoute
bluetoothDevice
T@"NMCBluetoothAudioDevice",&,N,V_bluetoothDevice
cachedPicked
TB,N,V_cachedPicked
picked
TB,R,N,GisPicked
systemSpeaker
TB,R,N,GisSystemSpeaker
playerResponseItem
T@"MPCPlayerResponseItem",W,N
playerResponse
T@"MPCPlayerResponse",R,N,V_playerResponse
request
T@"NMCPlaybackQueueRequest",C,N,V_request
responseHandler
T@?,C,N,V_responseHandler
playerRequest
T@"MPCPlayerRequest",&,N,V_playerRequest
T@"MPCPlayerResponse",R,N
%@:%@:%@
v8@?0@"MPIdentifierSet"4
pptIdentifier
T@"NSString",R,N
_identifiers
T@"MPIdentifierSet",R,N
NMCNowPlayingObserverNowPlayingInfoDidChangeLocallyNotification
NMCNowPlayingObserverNowPlayingPlaybackStateDidChangeLocallyNotification
nowPlayingInfo
T@"NSDictionary",R,N,V_nowPlayingInfo
com.apple.NanoMusicCore.NMCConnectivityManager
CONNECTED
DISCONNECTED
v8@?0@"NSError"4
-[NMCMediaPlayerModelPlaybackController performMediaRemoteCommand:options:completionHandler:]_block_invoke
com.apple.NanoMusicCore.ClearPlaybackQueue
v8@?0i4
v16@?0I4^{__CFDictionary=}8@?<v@?^{__CFArray=}>12
AutomaticallyPauseWhenTakenOffWrist
MusicAllowsCellularData
NanoMusic fallback playback request
sharedController
T@"NMCMediaPlayerModelPlaybackController",R,N
wantsRadioSupport
TB,N,V_wantsRadioSupport
wantsDefaultMusicFallbackPlaybackIntent
TB,N,V_wantsDefaultMusicFallbackPlaybackIntent
nowPlayingController
T@"NMRNowPlayingController",&,N,V_nowPlayingController
/bfa1LxXd7G1WqHujpjsdA
-[MPCPlayerResponse(NanoMusicCore) nmc_commandRequestWithMediaRemoteCommand:options:]
NMCPairedBluetoothAudioDeviceFailedToConnectNotification
NMCPairedBluetoothAudioDevicesChangedNotification
NMCSystemAudioRouteFailedToConnectNotification
NMCSystemAudioRoutesChangedNotification
NMCVirtualAudioRoutesDidChangeNotification
NMCVirtualAudioRouteUserInfoKey
virtualAudioRoutes
T@"NSArray",C,N,V_virtualAudioRoutes
systemAudioRoutes
T@"NSArray",C,N,V_systemAudioRoutes
pickedVirtualAudioRoute
T@"NMCVirtualAudioRoute",&,N,V_pickedVirtualAudioRoute
hasPickedVirtualAudioRoute
TB,N,V_hasPickedVirtualAudioRoute
hasAvailableW1Route
TB,N,V_hasAvailableW1Route
Audio/Video
com.apple.NanoMusic.NMCAudioRoutingManager
com.apple.NanoMusicCore.NMCAudioRoutingManager.RoutePicking
v8@?0@"NSNotification"4
v8@?0@"NSArray"4
i12@?0@"NMCVirtualAudioRoute"4@"NMCVirtualAudioRoute"8
v16@?0@"NMCVirtualAudioRoute"4I8^B12
paired
not paired!
disconnected
available
unavailable
enabled
disabled
bluetoothAvailableAndEnabled
TB,N,GisBluetoothAvailableAndEnabled,V_bluetoothAvailableAndEnabled
audioCategory
T@"NSString",C,D,N
routingControllerName
speakerRouteEnabled
TB,N,GisSpeakerRouteEnabled,V_speakerRouteEnabled
pairedBluetoothAudioDevices
T@"NSArray",R,C,N
T@"NMCVirtualAudioRoute",R,N
TB,R,N
NanoMusicCore
NanoMediaRemote
NanoAudioControl
NanoMusicSync
NanoMediaUI
NanoMediaTool
NanoMusicSync-Oversize
com.apple.nanomusic
newWasSubscriberLastCheck
NMCSubscriptionStatusDidChangeNotification
NMCSubscriptionManagerCloudMusicLibraryEnabledStateDidChangeNotification
com.apple.NanoMusicCore.NMCSubscriptionManager
subscriber
TB,R,N,GisSubscriber
cloudMusicLibraryEnabled
TB,R,N,GisCloudMusicLibraryEnabled
-[NMCWiFiManager applicationDidBecomeActive:]
-[NMCWiFiManager applicationDidEnterBackground:]
-[NMCWiFiManager originObserver:didUpdateNowPlayingInfoForOrigin:]
-[NMCWiFiManager originObserver:didUpdateElapsedTimeForOrigin:]
-[NMCWiFiManager originObserver:didUpdatePlaybackStateForOrigin:]
PreferWiFiOverMagnet
PreferWifiOverMagnetTimeoutInSeconds
NSURLSessionProxyWiFiToken
directWiFiAssertionTimer
T@"NSObject<OS_dispatch_source>",&,N,V_directWiFiAssertionTimer
holdingWiFiAssertion
TB,N,V_holdingWiFiAssertion
TB,N,V_enabled
wifiTimerLengthInSeconds
TI,N,V_wifiTimerLengthInSeconds
com.apple.rootrobot
configuration
minimal
PPTDevice
NMCDefaults initialized.
Failed to acquire task assertion for task with name %@.
Task assertion with name %@ was invalidated.
Timed out while waiting to acquire task assertion with name %@.
[NMCConnectivityManager] Connectivity state changed from %@ to %@.
[NMCConnectivityManager] We were connected but now we're not.  Waiting %d seconds to see if things clear up...
[NMCConnectivityManager] Nope, still not connected
[NMCConnectivityManager] All good after waiting!
-addPlaybackIntent:withOptions:completion: failed with error: %@
%s command request %@ failed with error: %@
Clearing playback queue...
Cleared playback queue with error: %@
Registering media remote command handler block.
Received media remote command: %u
Creating playbackEngine to handle media remote command: %u
Unregistering media remote command handler block.
On-Wrist state changed %@
Device was taken off-wrist, pausing music.
Failed to execute request: %@ with error: %@
On-Wrist state is %@
Playback did fail due to activation failure with error %@
Playback did pause for lease end
Playback error %@
Cellular Error: Cellular not supported
Cellular Error: Cellular data settings not enabled
Cellular Error: No ctServerConnection
Cellular Error: No cellular policy. Defaulting to NO
Cellular Error: can use cellular exists %x can use cellular %x
%s ignoring MRMediaRemoteCommand: %d
[Routing] Dectivating audio session.
[Routing] Did attempt to pick W1 route.
[Routing] Will attempt to pick W1 route.
[Routing] Could not set shared AVAudioSession category due to error: %@.
[Routing] Activating audio session, enabling CM to pick W1 route.
[Routing] CM failed to pick W1 route.
[Routing] Attempting to pick system route %@.
[Routing] Failed to pick system route %@ due to %@.
[Routing] Attempting to connect to a Bluetooth device that doesn't currently have a system route %@.
[Routing] Force reloading available audio routes from MediaRemote.
[Routing] Removing virtual route: %@
[Routing] (MPAVRoute) Created virtual route for MPAVRoute: %@
[Routing] (MPAVRoute) Updated virtual route for MPAVRoute: %@
[Routing] (Bluetooth) Created virtual route for device: %@.
[Routing] (Bluetooth) Updated virtual route for device %@.
[Routing] Virtual routes updated: %@
[Routing] (MPAVRoute) Available routes did change.
[Routing] (MPAVRoute) Picked routes did change: %@.
[Routing] (MPAVRoute) Failed to pick system route with error: %@
[Routing] (MPAVRoute) System routes with category (%@) updated to %@
[Routing] (MPAVRoute) Skipped updating for invalid route %@
[Routing] (MPAVRoute) Pending route now has system route, trying to pick %@.
[Routing] (MPAVRoute) Route does not exists, removing %@
[Routing] (Bluetooth) Device %@ discovered; adding the the list.
[Routing] (Bluetooth) Device %@ removed but is still either paired or connected; ignoring.
[Routing] (Bluetooth) Device %@ removed.
[Routing] (Bluetooth) Device %@ unpaired.
[Routing] (Bluetooth) Audio device %@ connected.
[Routing] (Bluetooth) Device %@ (%@) failed to connect (%@), but we're ignoring the error per <rdar://problem/19657430>.
[Routing] (Bluetooth) Device %@ (%@) failed to connect (%@).
[Routing] (Bluetooth) Device %@ disconnected (currently %@).
[Routing] (Bluetooth) Failed to disconnect from device %@ (%@).
[Routing] (Bluetooth) Connection status changed to %@.
[Routing] (Bluetooth) Device paired status changed.
[Routing] (Bluetooth) Bluetooth became %@ and %@.
[Routing] (Bluetooth) Refreshing paired bluetooth devices list!
[Routing] (Bluetooth) Bluetooth device does not exist, removing %@
Apple Music subscription status: %lu
iCloud Music Library authenticated: %d
[WiFiManager] %s
[WiFiManager] Functionality disabled
[WiFiManager] playback rate > 0.0, reschedule disabling Wi-Fi assertion
[WiFiManager] the application is active, reschedule disabling Wi-Fi assertion
[WiFiManager] scheduling disabling Wi-Fi assertion
[WiFiManager] Disabling Wi-Fi assertion fired
[WiFiManager] Enabling Wi-Fi
[WiFiManager] Already enabled
[WiFiManager] Disabling Wi-Fi
countByEnumeratingWithState:objects:count:
objectForKey:
boolValue
eqPresetForName:
typeForAVController
numberWithBool:
currentThread
threadDictionary
setObject:forKeyedSubscript:
removeObjectForKey:
dictionaryWithObjects:forKeys:count:
valueForKey:
defaultCenter
postNotificationName:object:
init
name
copy
address
type
vendorId
productId
stringWithFormat:
isEqualToString:
connected
connect
routeSubtype
routeUID
_addressMatchesRouteUID:
class
isConnected
isKindOfClass:
rangeOfString:
initWithDevice:
routeType
matchesSystemRoute:
description
isEqual:
.cxx_destruct
hasSystemRoute
setHasSystemRoute:
_device
_hasSystemRoute
launched
localMusicSelected
displayedAlbums
displayedArtists
displayedSongs
_queue
_fetchCompanionCloudAvailability
dealloc
_handleCloudAvailabilityMessage:
hasProperNetworkConditionsToPlayMedia
canShowCloudMusic
sharedController
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
debugDescription
hasProperNetworkConditionsToShowCloudMedia
isCellularDataRestrictedForMusic
shouldProhibitMusicActionForCurrentNetworkConditions
isCellularDataRestrictedForVideos
shouldProhibitVideosActionForCurrentNetworkConditions
isCellularDataRestrictedForStoreApps
shouldProhibitStoreAppsActionForCurrentNetworkConditions
canShowCloudDownloadButtons
canShowCloudVideo
isCellularDataRestricted
shouldProhibitActionsForCurrentNetworkConditions
_hasProperNetworkConditionsToPlayMedia
_canShowCloudMusic
setWithObject:
initWithObject:keyPaths:options:handler:
addObserver:forKeyPath:options:context:
removeObserver:forKeyPath:context:
observeValueForKeyPath:ofObject:change:context:
initWithObject:keyPath:options:handler:
_object
_keyPaths
_handler
alloc
initWithPID:flags:reason:name:withHandler:
setInvalidationHandler:
invalidate
_cancelInvalidationTimer
dateWithTimeIntervalSinceNow:
initWithFireDate:interval:target:selector:userInfo:repeats:
mainRunLoop
addTimer:forMode:
valid
initWithName:
invalidateAfterDelay:
isValid
_name
_acquired
_invalidationTimer
_processAssertion
replacePlaybackQueueWithIntent:preventingAutomaticPlayback:completionHandler:
performMediaRemoteCommand:completionHandler:
clearPlaybackQueueWithCompletionHandler:
mediaPlaybackCorePlaybackIntent
nmc_applicationPlayerPath
getRemotePlaybackQueueRepresentationWithPlayerPath:completion:
replacePlaybackQueueWhilePreventingAutomaticPlayback:completionHandler:
resumePlayback
getCompanionPlaybackQueueRepresentationWithCompletionHandler:
getRemotePlaybackQueueRepresentationWithCompletionHandler:
startPlaybackWithCompletionHandler:
routeName
length
_bluetoothDeviceName
isPicked
isSystemSpeaker
systemRoute
routeTypeFromMPAVRoute:
isAirpodsRoute
isPowerbeatsRoute
isBeatsSoloRoute
isBeatsStudioRoute
isBeatsXRoute
isCarplayRoute
isAppleTVRoute
isHomePodRoute
isW1Route
stringByAppendingFormat:
isEqualToVirtualAudioRoute:
setSystemRoute:
bluetoothDevice
setBluetoothDevice:
cachedPicked
setCachedPicked:
_cachedPicked
_systemRoute
_bluetoothDevice
playerResponseItem
setPlayerResponseItem:
tracklist
items
numberOfSections
sectionAtIndex:
metadataObject
numberOfItemsInSection:
itemAtIndexPath:
sectionIndexTitles
optionalSectionIndexTitlesRange
indexOfSectionForSectionIndexTitleAtIndex:
hasSameContentAsDataSource:
initWithPlayerResponse:
playerResponse
_playerResponse
playerRequest
setRequest:
setDelegate:
beginAutomaticResponseLoading
initWithRequest:
_setRequestResponseController:
response
initWithDataSource:
setResults:
finishWithError:
controller:defersResponseReplacement:
controller:shouldRetryFailedRequestWithError:
willBeginLoadingRequestForController:
didFinishLoadingRequestForController:
execute
request
responseHandler
setResponseHandler:
_requestResponseController
_request
_responseHandler
setQualityOfService:
mainBundle
bundleIdentifier
pathWithRoute:bundleID:playerID:
setPlayerPath:
setTracklistRange:
copyWithZone:
newOperationWithResponseHandler:
setPlayerRequest:
_playerRequest
_handleResponseDidInvalidateNotification:
addObserver:selector:name:object:
removeObserver:
object
_invalidate
nmc_localPlayerPath
title
album
artist
itemPersistentID
itemCompanionPersistentID
storeAdamID
longLongValue
setDeviceLibraryPersistentID:
setStoreAdamID:
setSyncID:
setStoreSubscriptionAdamID:
initWithBlock:
pptIdentifier
_identifiers
_avItemDurationDidChangeNotification:
_avItemIsExplicitDidChangeNotification:
_avItemTitlesDidChangeNotification:
_registerForNotificationsForPlaybackController:
_setNeedsNowPlayingInfoUpdate
_unregisterForNotificationsForPlaybackController:
removeObserver:name:object:
currentItem
userInfo
postNotificationName:object:userInfo:
arrayWithObjects:count:
setWithArray:
date
currentTime
numberWithDouble:
durationIfAvailable
durationOfCurrentItemIfAvailable
rate
displayOverridePlaybackState
state
numberWithFloat:
persistentID
numberWithUnsignedLongLong:
mediaItem
_nowPlayingInfoPropertiesToFetch
valuesForProperties:
objectForKeyedSubscript:
unsignedLongLongValue
numberWithLongLong:
activeRepeatType
activeShuffleType
numberWithInt:
_nowPlayingInfoForItem:
_setNowPlayingInfo:
isMainThread
_playbackErrorNotification:
_playbackStateDidChangeNotification:
_updateNowPlayingInfoForNotification:
initWithPlaybackController:
clearNowPlayingInfo
nowPlayingInfo
_playbackController
_nowPlayingInfo
_needsNowPlayingInfoUpdate
weakObjectsHashTable
sharedInstance
addObserver:
status
_updateConnectivityState
containsObject:
addObject:
removeObject:
_notifyObserversForConnectedState
manager:connectivityDidChange:
sharedManager
connectionStatusDidChange:
wifiSignalStrengthBarsDidChange:
registrationStatusDidChange:
cellularSignalStrengthBarsDidChange:
lastKnownCountryCodeDidChange:
simActiveDidChange:
_connectionStatus
_connectionStatusQueue
_observers
_connected
_waitingForReconnect
_configureForStageDemoModeIfNeeded
setDisablePlaybackStateValidation:
setNowPlayingController:
_setupPlaybackEngineIfNecessary
_registerMediaRemoteCommandHandlerIfNeeded
prepareLocalOriginObserverForNewPlaybackIntent
setPreventAutomaticPlayback:
setFallbackPlaybackIntent:
resetCommand
replaceWithPlaybackIntent:
performRequest:completion:
clear
performMediaRemoteCommand:options:completionHandler:
nmc_commandRequestWithMediaRemoteCommand:options:
setSystemMusicApplication:
numberWithInteger:
_unregisterMediaRemoteCommandHandlerIfNeeded
infoDictionary
initWithPlayerID:
isSystemMusicApplication
isSpeakerRouteEnabled
setAudioSessionCategory:
_configureLocalOriginObserverAndCommandHandler
_configureDefaultFallbackPlaybackIntentIfNeededWithPlaybackEngine:
becomeActive
start
standardUserDefaults
boolForKey:
pause
setChangeHandler:
getWristState:
domain
code
_playbackErrorFromError:
playbackControllerDidPauseForLeaseEnd:
playbackController:didFailToActivateWithError:resolution:
_playbackErrorTypeFromTopLevelError:
playbackController:didFailToPlayItem:error:errorType:
localOrigin
initWithPlayerPath:options:
setOriginObserver:forOrigin:
setOriginCommandHandler:forOrigin:
wantsDefaultMusicFallbackPlaybackIntent
setLabel:
kindWithVariants:
setItemKind:
setFilteringOptions:
setShuffleMode:
setTracklistToken:
setTracklistSource:
engineDidPauseForLeaseEnd:
engine:didPauseForLeaseEndWithError:
engine:prepareForActivationWithCompletion:
engine:didFailToActivateWithError:resolution:
engine:didFailToPlayFirstItem:withError:
engine:didFailToPlayItem:withError:
engine:requiresAuthorizationToPlayItem:authorizationHandler:
setupPlaybackEngine
prepareToHandleMediaRemoteCommands
addErrorHandler:
removeErrorHandler:
preparePlaybackWithIntent:completionHandler:
startPlaybackWithIntent:completionHandler:
wantsRadioSupport
setWantsRadioSupport:
setWantsDefaultMusicFallbackPlaybackIntent:
nowPlayingController
_playbackEngine
_mediaRemoteCommandObserver
_errorHandlers
_systemMusicApplication
_onWristMonitor
_shouldPauseNextTimeOffWrist
_wifiManager
_wantsRadioSupport
_wantsDefaultMusicFallbackPlaybackIntent
_nowPlayingController
deviceSupportsCellularData
isEnabled
deviceSupportsMediaStreaming
play
stop
changeItemCommand
nextItem
previousItem
doubleValue
playingItem
seekCommand
jumpByInterval:
beginSeekWithDirection:
floatValue
playbackRateCommand
setPlaybackRate:
likeCommand
changeValue:
dislikeCommand
wishlistCommand
value
integerValue
repeatCommand
setRepeatType:
shuffleCommand
setShuffleType:
virtualAudioRoutes
setVirtualAudioRoutes:
pickedVirtualAudioRoute
setPickedVirtualAudioRoute:
systemAudioRoutes
setSystemAudioRoutes:
hasPickedVirtualAudioRoute
setHasPickedVirtualAudioRoute:
hasAvailableW1Route
setHasAvailableW1Route:
_hasPickedVirtualAudioRoute
_hasAvailableW1Route
_virtualAudioRoutes
_pickedVirtualAudioRoute
_systemAudioRoutes
setAudioCategory:
setRoutingControllerName:
beginObservingAudioRoutes
_updateSpeakerRouteEnabled
array
_registerForBluetoothManagerNotifications
_refreshBluetoothDevices
setDiscoveryMode:
_performBlockAfterFetchingAvailableRoutesIgnoringCache:withCompletion:
allValues
fetchAudioRoutesInfoIgnoringCache:withCompletion:
attemptToPickW1RouteWithAudioSession:options:completionHandler:
setActive:withOptions:error:
setCategory:error:
mainQueue
addObserverForName:object:queue:usingBlock:
_cancelPickRouteTimeout
selectRoute:operation:completion:
_beginPickRouteTimeoutWithRoute:
setCategory:
category
setName:
availableRoutes
_updateSystemAudioRoutesWithRoutes:
w1Route
fetchAvailableRoutesWithCompletionHandler:
count
compare:
indexOfObject:inSortedRange:options:usingComparator:
_indexOfVirtualAudioRoute:forInsertion:
insertObject:atIndex:
removeObjectAtIndex:
_existingVirtualAudioRouteForMPAVRoute:
_addVirtualAudioRoute:
_existingVirtualAudioRouteForBluetoothAudioDevice:
audioCategory
initWithCapacity:
_createOrUpdateVirtualAudioRouteForMPAVRoute:
_removeVirtualAudioRoute:
enumerateObjectsUsingBlock:
_postSystemAudioRoutesChangedNotification
_postVirtualAudioRoutesChangedNotification
_bluetoothAvailabilityChangedNotification:
_bluetoothPowerChangedNotification:
_bluetoothDeviceDiscoveredNotification:
_bluetoothDeviceRemovedNotification:
_bluetoothDeviceUnpairedNotification:
_bluetoothDeviceConnectSuccessNotification:
_bluetoothDeviceConnectFailedNotification:
_bluetoothDeviceDisconnectSuccessNotification:
_bluetoothDeviceDisconnectFailedNotification:
_bluetoothConnectionStatusChangedNotification:
_bluetoothDevicePairedStatusChangedNotification:
_handleBluetoothAvailabilityChange
_setNeedsRefreshingBluetoothDevices
paired
connectingDevices
available
enabled
pairedDevices
allKeys
_createOrUpdateVirtualAudioRouteForBluetoothAudioDevice:
isEqualToSet:
_postPairedBluetoothAudioDevicesChangedNotification
setSpeakerRouteEnabled:
routingControllerAvailableRoutesDidChange:
routingController:didFailToPickRouteWithError:
routingController:pickedRoutesDidChange:
routingController:pickedRouteDidChange:
routingController:shouldHijackRoute:completion:
routingController:volumeControlAvailabilityDidChange:
routingControllerExternalScreenTypeDidChange:
routingControllerDidPauseFromActiveRouteChange:
pairedBluetoothAudioDevices
fetchAudioRoutesInfoWithCompletion:
attemptToPickW1RouteWithCompletionHandler:
pickVirtualAudioRoute:
routingControllerName
isBluetoothAvailableAndEnabled
setBluetoothAvailableAndEnabled:
_pairedBluetoothDevices
_routingController
_pendingVirtualRouteChangeNotification
_pendingPairedBluetoothAudioDeviceChangeNotification
_pendingSystemAudioRoutesChangedNotification
_pendingPickedRoutesStateDidChangeNotification
_hasFetchedInitialAvailableRoutes
_availableRoutesFetchGroup
_routePickingGroup
_routePickingQueue
_pickRouteTimer
_pendingPickingRoute
_bluetoothNotificationTimer
_bluetoothAvailableAndEnabled
_speakerRouteEnabled
isServiceSupported:
_updateAppleMusicSubscriptionStatus
_updateCloudMusicLibraryEnabledStatus
_handleSubscriptionStatusDidChangeNotification:
companionDeviceActiveStoreAccountIsSubscriber
setValue:forKey:
subscriptionStatus
_handleUserIdentityStoreDidChangeNotification:
defaultIdentityStore
isAuthenticatedWithCompletionHandler:
isSubscriber
preloadAppleMusicSubscriptionStatus
isCloudMusicLibraryEnabled
preloadCloudMusicLibraryEnabledStatus
_cloudClient
_cloudMusicLibraryEnabled
_subscriptionManager
_subscriber
_readDefaults
_enableWiFiAssertionIfNeeded
applicationDidBecomeActive:
applicationDidEnterBackground:
_removeWoWClient
endObservingOrigins
removeObserverDelegate:
addObserverDelegate:
beginObservingOrigins
_disableWiFiAssertionWhenNeeded
setEnabled:
setWifiTimerLengthInSeconds:
_addWoWClient
_scheduleDisablingWiFiAssertion
activeNowPlayingOrigin
nowPlayingStateForOrigin:
playbackRate
sharedApplication
applicationState
directWiFiAssertionTimer
setDirectWiFiAssertionTimer:
wifiTimerLengthInSeconds
holdingWiFiAssertion
addWoWClient:
addWiFiAutoAssociationClientToken:
setHoldingWiFiAssertion:
removeWoWClient:
removeWiFiAutoAssociationClientToken:
originObserver:didUpdateNowPlayingInfoForOrigin:
originObserver:didUpdateNowPlayingApplicationBundleIdentifierForOrigin:
originObserver:didUpdatePlaybackStateForOrigin:
originObserver:didUpdateSupportedCommandsForOrigin:
originObserver:didUpdateElapsedTimeForOrigin:
originObserver:didUpdateTimestampForOrigin:
originObserver:didUpdatePlaybackQueueForOrigin:
_holdingWiFiAssertion
_enabled
_directWiFiAssertionTimer
_wifiTimerLengthInSeconds
isRunningInStoreDemoMode
initWithSuiteName:
stringForKey:
NMCBluetoothAudioDevice
NMCTelemetry
NMCCloudAvailabilityController
HSCloudAvailability
NSObject
NMCKeyValueObserver
NMCTaskAssertion
NMCMediaPlayerModelPlaybackIntent
NMCPlayerPlaybackIntent
NMCVirtualAudioRoute
NMCPlaybackQueueRequest
NMCPlaybackQueueResponseDataSource
MPLazySectionedCollectionDataSource
NMCPlaybackQueueRequestOperation
MPRequestResponseControllerDelegate
NMCPlaybackQueueResponse
NanoMusicCore
NMCNowPlayingObserver
NMCConnectivityManager
CSLSConnectionStatusObserver
NMCMediaPlayerModelPlaybackController
MPCPlaybackEngineDelegate
NMCFeatureSupport
NMCAudioRoutesInfo
NMCAudioRoutingManager
MPAVRoutingControllerDelegate
NMCSubscriptionManager
NMCWiFiManager
NMROriginObserverDelegate
@12@0:4@8
@8@0:4
i8@0:4
B8@0:4
v8@0:4
B12@0:4@8
v12@0:4B8
@"BluetoothDevice"
@"NSObject<OS_dispatch_queue>"
#8@0:4
@12@0:4:8
@16@0:4:8@12
@20@0:4:8@12@16
B12@0:4#8
B12@0:4:8
Vv8@0:4
I8@0:4
^{_NSZone=}8@0:4
B12@0:4@"Protocol"8
@"NSString"8@0:4
v12@0:4@8
@24@0:4@8@12I16@?20
v24@0:4@8@12@16^v20
@"NSObject"
@"NSSet"
v16@0:4d8
@"NSString"
@"NSTimer"
@"BKSProcessAssertion"
v16@0:4B8@?12
v12@0:4@?8
v16@0:4B8@?<v@?@"NSError">12
v12@0:4@?<v@?@"MPRemotePlaybackQueue"@"NSError">8
v12@0:4@?<v@?@"NSError">8
i12@0:4@8
@"MPAVRoute"
@"NMCBluetoothAudioDevice"
@12@0:4I8
I12@0:4I8
{_NSRange=II}8@0:4
i12@0:4i8
@12@0:4@"NSIndexPath"8
@"NSArray"8@0:4
B12@0:4@"<MPLazySectionedCollectionDataSource>"8
@"MPCPlayerResponse"
v16@0:4@8@?12
B16@0:4@8@12
v16@0:4@"MPRequestResponseController"8@?<v@?>12
B16@0:4@"MPRequestResponseController"8@"NSError"12
v12@0:4@"MPRequestResponseController"8
@?8@0:4
@"MPRequestResponseController"
@"NMCPlaybackQueueRequest"
@12@0:4^{_NSZone=}8
@12@0:4@?8
@"MPCPlayerRequest"
@"MPAVController"
@"NSDictionary"
v12@0:4I8
v12@0:4i8
v12@0:4l8
v12@0:4@"NSString"8
@"NSHashTable"
v16@0:4@8@12
v20@0:4@8@12@?16
v20@0:4@8@12@16
v12@0:4@"MPCPlaybackEngine"8
v16@0:4@"MPCPlaybackEngine"8@"NSError"12
v16@0:4@"MPCPlaybackEngine"8@?<v@?B@"NSError">12
v20@0:4@"MPCPlaybackEngine"8@"NSError"12@?<v@?B>16
v20@0:4@"MPCPlaybackEngine"8@"MPAVItem"12@"NSError"16
v20@0:4@"MPCPlaybackEngine"8@"MPAVItem"12@?<v@?B@"NSError">16
v20@0:4@8B12@?16
v16@0:4I8@?12
v20@0:4I8@12@?16
@"MPCPlaybackEngine"
@"CSLSOnWristMonitor"
@"NMCWiFiManager"
@"NMRNowPlayingController"
@16@0:4I8@12
@"NSArray"
@"NMCVirtualAudioRoute"
v16@0:4@8B12
v12@0:4@"MPAVRoutingController"8
v16@0:4@"MPAVRoutingController"8@"NSError"12
v16@0:4@"MPAVRoutingController"8@"NSArray"12
v16@0:4@"MPAVRoutingController"8@"MPAVRoute"12
v20@0:4@"MPAVRoutingController"8@"MPAVRoute"12@?<v@?B>16
v16@0:4@"MPAVRoutingController"8B12
v20@0:4@8I12@?16
I16@0:4@8B12
@"NSMutableDictionary"
@"MPAVRoutingController"
@"NSMutableArray"
@"NSObject<OS_dispatch_group>"
@"NSObject<OS_dispatch_source>"
@"HSCloudClient"
@"NMSSubscriptionManager"
v16@0:4@8@"NMROrigin"12
zPLR
zPLR
zPLR
zPLR
zPLR
