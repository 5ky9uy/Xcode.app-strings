MusicEQPresetName
AudioBookSpeedSetting
MusicRepeatSetting
MusicShuffleSetting
MusicLibraryViewMode
MusicSoundCheckEnabledSetting
com.apple.mobileipod-prefsChanged
PlaybackSource
SpeakerRouteEnabled
PlaybackSourceWatchdogDeadline
StageDemoMode
_NMCDefaultValue
v4@?0
com.apple.mobileipod
PerformingBatchNMCPrefsUpdate
Local
Normal
Slower
Faster
Songs
Albums
Remote
Artists
v16@?0@"NSString"4@"NSNumber"8^B12
NMCMediaPlayerLegacyPlayerDidSetPlaybackQueueNotification
v8@?0i4
v8@?0B4
v8@?0@"NMCAudioRoutesInfo"4
hash
TI,R
superclass
T#,R
description
T@"NSString",R,C
debugDescription
Unknown
76,8194
76,8198
76,8197
76,8195
76,8201
%u,%u
<%@:%p name: %@, address: %@, type: %@, connected: %@>
hasSystemRoute
TB,N,V_hasSystemRoute
name
T@"NSString",R,C,N
address
type
Ti,R,N
routeType
connected
TB,R,N,GisConnected
NMCBluetoothAudioDeviceTypeUnknown
NMCBluetoothAudioDeviceTypeHeadset
NMCBluetoothAudioDeviceTypeHandsFree
NMCBluetoothAudioDeviceTypeSpeaker
NMCBluetoothAudioDeviceTypeHeadphones
NMCBluetoothAudioDeviceTypeCarStereo
NMCBluetoothAudioDeviceTypeHiFiStereo
NMCBluetoothAudioDeviceTypeA2DP
NMCPlaybackSourceDidChangeNotification
NMCLocalPlaybackIdleTimerDidTimeoutNotification
com.apple.NanoMusicCore.NMCPlaybackSourceManager
playbackSource
Ti,N
localPlaybackIdleTimeoutTimerEnabled
TB,N,GisLocalPlaybackIdleTimeoutTimerEnabled
NMCPlaybackSourceLocal
NMCPlaybackSourceRemote
processTerminationDeferred
TB,N,GisProcessTerminationDeferred,V_processTerminationDeferred
localPlaybackIdleTimeoutDeadline
T@"NSDate",C,N
started
TB,N,GisStarted,V_started
com.apple.NanoMusic.telemetry
com.apple.NanoMusic.launched
com.apple.NanoMusic.localMusicSelected
com.apple.NanoMusic.viewedAlbums
com.apple.NanoMusic.viewedArtists
com.apple.NanoMusic.viewedSongs
NMCCloudAvailabilityDidChangeNotification
v8@?0@"NMRCloudAvailabilityMessage"4
valid
TB,R,N,GisValid
hasSystemRoute: %@
, isPicked: %@
, isSystemSpeaker: %@
, isW1Route: %@
bluetoothDevice: %@
, isConnected: %@
<%@:%p name: %@, %@, %@>
systemRoute
T@"MPAVRoute",&,N,V_systemRoute
bluetoothDevice
T@"NMCBluetoothAudioDevice",&,N,V_bluetoothDevice
cachedPicked
TB,N,V_cachedPicked
picked
TB,R,N,GisPicked
systemSpeaker
TB,R,N,GisSystemSpeaker
%@:%@:%@
v8@?0@"MPIdentifierSet"4
pptIdentifier
T@"NSString",R,N
_identifiers
T@"MPIdentifierSet",R,N
NMCLibraryViewModeDidChange
libraryViewMode
Ti,N,V_libraryViewMode
NMCNowPlayingObserverNowPlayingInfoDidChangeLocallyNotification
NMCNowPlayingObserverNowPlayingPlaybackStateDidChangeLocallyNotification
nowPlayingInfo
T@"NSDictionary",R,N,V_nowPlayingInfo
com.apple.NanoMusicCore.NMCConnectivityManager
com.apple.private.alloy.audiocontrol.music
CONNECTED
DISCONNECTED
NMCMediaPlayerModelPlaybackControllerCurrentItemPlaybackStateDidChangeNotification
com.apple.NanoMusicCore.ClearPlaybackQueue
v8@?0@"NSError"4
v16@?0I4^{__CFDictionary=}8@?<v@?^{__CFArray=}>12
AutomaticallyPauseWhenTakenOffWrist
MusicAllowsCellularData
v8@?0@"NSDictionary"4
currentItem
state
NanoMusic fallback playback request
v12@?0@"MPCPlayerItemContainer"4@"NSError"8
wantsRadioSupport
TB,N,V_wantsRadioSupport
wantsDefaultMusicFallbackPlaybackIntent
TB,N,V_wantsDefaultMusicFallbackPlaybackIntent
nowPlayingController
T@"NMRNowPlayingController",&,N,V_nowPlayingController
player
T@"MPCMediaPlayerLegacyPlayer",R,N
origin
T@"NMROrigin",R,N
T@"NMROrigin",R,N,V_origin
containerType
containerIdentifier
v8@?0@"MPModelObject"4
NMCPairedBluetoothAudioDeviceFailedToConnectNotification
NMCPairedBluetoothAudioDevicesChangedNotification
NMCSystemAudioRouteFailedToConnectNotification
NMCSystemAudioRoutesChangedNotification
NMCVirtualAudioRoutesDidChangeNotification
NMCVirtualAudioRouteUserInfoKey
virtualAudioRoutes
T@"NSArray",C,N,V_virtualAudioRoutes
systemAudioRoutes
T@"NSArray",C,N,V_systemAudioRoutes
pickedVirtualAudioRoute
T@"NMCVirtualAudioRoute",&,N,V_pickedVirtualAudioRoute
hasPickedVirtualAudioRoute
TB,N,V_hasPickedVirtualAudioRoute
hasAvailableW1Route
TB,N,V_hasAvailableW1Route
Audio/Video
com.apple.NanoMusic.NMCAudioRoutingManager
com.apple.NanoMusicCore.NMCAudioRoutingManager.RoutePicking
v8@?0@"NSNotification"4
v8@?0@"NSArray"4
i12@?0@"NMCVirtualAudioRoute"4@"NMCVirtualAudioRoute"8
v16@?0@"NMCVirtualAudioRoute"4I8^B12
paired
not paired!
disconnected
available
unavailable
enabled
disabled
bluetoothAvailableAndEnabled
TB,N,GisBluetoothAvailableAndEnabled,V_bluetoothAvailableAndEnabled
audioCategory
T@"NSString",C,D,N
routingControllerName
speakerRouteEnabled
TB,N,GisSpeakerRouteEnabled,V_speakerRouteEnabled
pairedBluetoothAudioDevices
T@"NSArray",R,C,N
T@"NMCVirtualAudioRoute",R,N
TB,R,N
NanoMusicCore
NanoMediaRemote
NanoAudioControl
NanoMusicSync
NanoMediaUI
com.apple.nanomusic
localizedRating
directors.name
newWasSubscriberLastCheck
NMCSubscriptionStatusDidChangeNotification
NMCSubscriptionManagerCloudMusicLibraryEnabledStateDidChangeNotification
com.apple.NanoMusicCore.NMCSubscriptionManager
subscriber
TB,R,N,GisSubscriber
cloudMusicLibraryEnabled
TB,R,N,GisCloudMusicLibraryEnabled
-[NMCWiFiManager applicationDidBecomeActive:]
-[NMCWiFiManager applicationDidEnterBackground:]
-[NMCWiFiManager originObserver:didUpdateNowPlayingInfoForOrigin:]
-[NMCWiFiManager originObserver:didUpdateElapsedTimeForOrigin:]
-[NMCWiFiManager originObserver:didUpdatePlaybackStateForOrigin:]
PreferWiFiOverMagnet
PreferWifiOverMagnetTimeoutInSeconds
NSURLSessionProxyWiFiToken
directWiFiAssertionTimer
T@"NSObject<OS_dispatch_source>",&,N,V_directWiFiAssertionTimer
holdingWiFiAssertion
TB,N,V_holdingWiFiAssertion
TB,N,V_enabled
wifiTimerLengthInSeconds
TI,N,V_wifiTimerLengthInSeconds
Block
ScheduledDate
v16@?0@"NSDictionary"4I8^B12
com.apple.NanoMusic.playback-command
AVController
T@"NMCAVController",R,N,G_AVController
existingAVController
T@"NMCAVController",R,N,G_existingAVController
playbackCommandTaskIdentifier
TI,N,G_playbackCommandTaskIdentifier,S_setPlaybackCommandTaskIdentifier:,V_playbackCommandTaskIdentifier
queueFeeder
T@"MPQueueFeeder",R,N
canSeekForwards
currentTime
Td,N
T@"MPAVItem",R,N
currentMediaQuery
T@"MPMediaQuery",R,N
T@"NSDictionary",R,C,N
playbackState
mediaRemotePlaybackState
TI,R,N
repeatType
shuffleType
com.apple.rootrobot
configuration
minimal
PPTDevice
NMCDefaults initialized.
NMCMediaPlayerLegacyPlayer received command event: %@ (appState: %tu, playerState: %tu)
NMCMediaPlayerLegacyPlayer succesfully performed command event: %@
Already in interrupted or playing state. Handling command event directly: %@
Will ensure a route is picked before handling the command event: %@
Already picked a route. Handling command event directly: %@
Have not picked a route, but W1 route available. Attempt to pick W1 route.
Successfully picked W1 route. Handling the command event: %@
Failed to pick W1 route. Dropping the command event: %@
NMCMediaPlayerLegacyPlayer has no available audio routes. Dropping remote command event: %@
Handling command event directly: %@
InsertIntoPlaybackQueue failed. Could not create playback context.
InsertIntoPlaybackQueue failed. Inserting context: %@ is not supported.
InsertIntoPlaybackQueue failed. Inserting a nil playback queue.
Play queue verification failed with error: %@
SetPlaybackQueue failed. Could not create playback context.
SetPlaybackQueue failed. Reloading context: %@ is not supported.
Successfully set playback queue: %@
NanoMusic is now responding to MediaRemote commands
Could not set audio session category due to error: %@.
Playback is paused because not able to play this item %@ in state %ld with route %@.
Playback was interrupted by %@ (%@).
Playback interruption by %@ (%@) ended with interruption status %@.
Playback source is the same (%@), skipping.
Changing playback source from %@ to %@
[SourceWatchdog] Pushing out local audio source idle timer until %@.
[SourceWatchdog] Local playback source idle timer fired.
[SourceWatchdog] Starting local playback source watchdog with current source of NMCPlaybackSourceLocal and existing deadline %@.
[SourceWatchdog] Starting local playback source watchdog with current source of NMCPlaybackSourceRemote.
[SourceWatchdog] Stopping watchdog.
Failed to acquire task assertion for task with name %@.
Task assertion with name %@ was invalidated.
Timed out while waiting to acquire task assertion with name %@.
[NMCConnectivityManager] Connectivity state changed from %@ to %@.
[NMCConnectivityManager] We were connected but now we're not.  Waiting %d seconds to see if things clear up...
[NMCConnectivityManager] Nope, still not connected
[NMCConnectivityManager] All good after waiting!
Clearing playback queue...
Cleared playback queue with error: %@
Registering media remote command handler block.
Received media remote command: %u
Creating player to handle media remote command: %u
Unregistering media remote command handler block.
On-Wrist state changed %@
Device was taken off-wrist, pausing music.
On-Wrist state is %@
Playback error %@
Playback did pause for lease end
MPCMediaPlayerLegacyPlayer handling notification: %@
Setting media player AVAudioSessionMediaPlayerOnly category to: %@
Could not set media player AVAudioSessionMediaPlayerOnly category due to error: %@.
-[MPCMediaPlayerLegacyPlayer addPlaybackIntent:withOptions:completion:] failed with error: %@
NMROriginLocalObserver dispatched command with (handlerReturnStatuses: %ld).
NMROriginLocalObserver not able to handle command: %d
Cellular Error: Cellular not supported
Cellular Error: Cellular data settings not enabled
Cellular Error: No ctServerConnection
Cellular Error: No cellular policy. Defaulting to NO
Cellular Error: can use cellular exists %x can use cellular %x
Could not find media query for queue: %@
Could not create playback context for queue: %@
Not supported to create tracklist request for playback queue with container type: %@
[Routing] Dectivating audio session.
[Routing] Did attempt to pick W1 route.
[Routing] Will attempt to pick W1 route.
[Routing] Could not set shared AVAudioSession category due to error: %@.
[Routing] Activating audio session, enabling CM to pick W1 route.
[Routing] CM failed to pick W1 route.
[Routing] Attempting to pick system route %@.
[Routing] Attempting to connect to a Bluetooth device that doesn't currently have a system route %@.
[Routing] Force reloading available audio routes from MediaRemote.
[Routing] Removing virtual route: %@
[Routing] (MPAVRoute) Created virtual route for MPAVRoute: %@
[Routing] (MPAVRoute) Updated virtual route for MPAVRoute: %@
[Routing] (Bluetooth) Created virtual route for device: %@.
[Routing] (Bluetooth) Updated virtual route for device %@.
[Routing] Virtual routes updated: %@
[Routing] (MPAVRoute) Failed to pick system route with error: %@
[Routing] (MPAVRoute) System routes with category (%@) updated to %@
[Routing] (MPAVRoute) Skipped updating for invalid route %@
[Routing] (MPAVRoute) Pending route now has system route, trying to pick %@.
[Routing] (MPAVRoute) Route does not exists, removing %@
[Routing] (Bluetooth) Device %@ discovered; adding the the list.
[Routing] (Bluetooth) Device %@ removed but is still either paired or connected; ignoring.
[Routing] (Bluetooth) Device %@ removed.
[Routing] (Bluetooth) Device %@ unpaired.
[Routing] (Bluetooth) Audio device %@ connected.
[Routing] (Bluetooth) Device %@ (%@) failed to connect (%@), but we're ignoring the error per <rdar://problem/19657430>.
[Routing] (Bluetooth) Device %@ (%@) failed to connect (%@).
[Routing] (Bluetooth) Device %@ disconnected (currently %@).
[Routing] (Bluetooth) Failed to disconnect from device %@ (%@).
[Routing] (Bluetooth) Connection status changed to %@.
[Routing] (Bluetooth) Device paired status changed.
[Routing] (Bluetooth) Bluetooth became %@ and %@.
[Routing] (Bluetooth) Removed device: %@
Apple Music subscription status: %lu
iCloud Music Library authenticated: %d
[WiFiManager] %s
[WiFiManager] Functionality disabled
[WiFiManager] playback rate > 0.0, reschedule disabling Wi-Fi assertion
[WiFiManager] the application is active, reschedule disabling Wi-Fi assertion
[WiFiManager] scheduling disabling Wi-Fi assertion
[WiFiManager] Disabling Wi-Fi assertion fired
[WiFiManager] Enabling Wi-Fi
[WiFiManager] Already enabled
[WiFiManager] Disabling Wi-Fi
A picked route became available; invoking deferred playback action.
A picked route didn't become available in time; dropping the playback action to the floor.
There's no picked route; waiting for 5s for a picked route to appear.
countByEnumeratingWithState:objects:count:
objectForKey:
boolValue
eqPresetForName:
typeForAVController
currentThread
threadDictionary
numberWithBool:
setObject:forKeyedSubscript:
removeObjectForKey:
dictionaryWithObjects:forKeys:count:
valueForKey:
defaultCenter
postNotificationName:object:
objectForKeyedSubscript:
integerValue
numberWithInteger:
enumerateKeysAndObjectsUsingBlock:
filterPredicates
alloc
initWithFilterPredicates:
predicateWithValue:forProperty:
addFilterPredicate:
nmc_queryWithUnsyncedItemFilterPredicate
applicationState
state
class
isKindOfClass:
performCommandEvent:completion:
command
mediaRemoteCommandType
sharedManager
hasPickedVirtualAudioRoute
isSpeakerRouteEnabled
hasAvailableW1Route
attemptToPickW1RouteWithCompletionHandler:
fetchAudioRoutesInfoIgnoringCache:withCompletion:
init
_registerPlayerNotifications
_beginRespondingToMediaRemoteCommands
_unregisterPlayerNotifications
_stopRespondingToMediaRemoteCommands
dealloc
_playbackController
playbackState
setPlaybackSource:ignoreCurrentSource:
beginOrTogglePlayback
pause
endPlayback
contentItemID
_AVController
_playlistManager
currentIndex
_indexForStringIdentifier:
changePlaybackIndexBy:deltaType:
isRequestingDefermentToPlaybackQueuePosition
changePlaybackIndexBy:deltaType:ignoreElapsedTime:
type
beginSeek:
endSeek
currentItem
durationIfAvailable
currentTime
interval
setCurrentTime:
playbackRate
seekAlbum:
seekPlaylist:
shuffleType
setShuffleType:
applyShuffleSettings
repeatType
positionTime
isNegative
setLikedState:
_updateSupportedCommandsForItem:
playbackQueue
createPlaybackContext
insertionPosition
isRequestingImmediatePlayback
disableQueueModifications
preventsHardQueueModificationsForItem:
addPlaybackContext:toHardQueueWithInsertionType:
verifyWithError:
userInfo
reloadQueueWithPlaybackContext:
object
_updateChangeRepeatModeCommand
_updateChangeShuffleModeCommand
sharedController
_registerPublicCommands
_registerPrivateCommands
_existingAVController
_updateChangeRepeatModeCommandWithRepeatType:
_updateChangeShuffleModeCommandWithShuffleType:
_unregisterAllCommands
sharedCommandCenter
pauseCommand
_handlePauseCommand:
addTarget:action:
playCommand
_handlePlayCommand:
stopCommand
_handleStopCommand:
togglePlayPauseCommand
_handleTogglePlayPauseCommand:
nextTrackCommand
_handleNextTrackCommand:
previousTrackCommand
_handlePreviousTrackCommand:
seekForwardCommand
_handleSeekForwardCommand:
seekBackwardCommand
_handleSeekBackwardCommand:
numberWithDouble:
arrayWithObjects:count:
skipForwardCommand
_handleSkipForwardCommand:
setPreferredIntervals:
setEnabled:
skipBackwardCommand
_handleSkipBackwardCommand:
changePlaybackRateCommand
_handleChangePlaybackRateCommand:
specialSeekForwardCommand
_handleSpecialSeekForwardCommand:
specialSeekBackwardCommand
_handleSpecialSeekBackwardCommand:
advanceShuffleModeCommand
_handleAdvanceShuffleModeCommand:
advanceRepeatModeCommand
_handleAdvanceRepeatModeCommand:
changeRepeatModeCommand
_handleChangeRepeatModeCommand:
changeShuffleModeCommand
_handleChangeShuffleModeCommand:
changePlaybackPositionCommand
_handleChangePlaybackPositionCommand:
addNowPlayingItemToLibraryCommand
_handleAddToLibraryCommand:
likeCommand
_handleLikeCommand:
dislikeCommand
_handleDislikeCommand:
insertIntoPlaybackQueueCommand
_handleInsertIntoPlaybackQueue:
setPlaybackQueueCommand
_handleSetPlaybackQueueCommand:
_AVControllerItemChangedNotification:
addObserver:selector:name:object:
_AVControllerShuffleTypeChangedNotification:
_AVControllerRepeatTypeChangedNotification:
_AVControllerPlaybackStateChangedNotification:
removeTarget:
removeObserver:name:object:
queueFeeder
supportsRewindAndFastForward15Seconds
canSkipItem:
canSeekForwards
canSkipToPreviousItem
setActive:
likedState
setPresentationStyle:
setCurrentRepeatType:
setCurrentShuffleType:
_handleDefaultsDidChangeNotification
.cxx_destruct
_updateDefaults
avPlayer
setAllowsExternalPlayback:shouldIgnorePlaybackQueueTransactions:
_updateWantsVolumeChangesWhenPausedOrInactive
_registerPlaybackQueueDataSource
_unregisterPlaybackQueueDataSource
_connectAVPlayer
_playerAVAudioSession
setCategory:error:
songsQuery
initWithQuery:
reloadWithPlaybackContext:
playWithOptions:
launched
playbackSource
localMusicSelected
beginPlayback
togglePlaybackWithOptions:
currentMediaQuery
items
count
albumsQuery
currentMediaItem
objectAtIndex:
indexOfObject:
valueForProperty:
unsignedLongLongValue
setPlaybackIndex:
predicateForProperty:
value
initWithPersistentID:
playlistsQuery
collections
persistentID
numberWithUnsignedLongLong:
_nowplayingContentItemForIndex:
_nowplayingContentItemIdentifierForIndex:
invalidatePlaybackQueue
setPlaybackQueueDataSource:
_handlePlaybackQueueChangedNotification
postNotificationName:object:userInfo:
_setWantsVolumeChangesWhenPausedOrInactive:
_canPlayItem:
pickedVirtualAudioRoute
updateForSoundCheckDefaultsChange
setRepeatType:
applyRepeatSettings
sharedAVController
isEqual:
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
description
debugDescription
nowPlayingInfoCenter:contentItemIDForOffset:
nowPlayingInfoCenter:contentItemForID:
nowPlayingInfoCenter:artworkForContentItem:size:completion:
nowPlayingInfoCenter:lyricsForContentItem:completion:
nowPlayingInfoCenter:infoForContentItem:completion:
nowPlayingInfoCenter:availableLanguageOptionsForContentItem:completion:
nowPlayingInfoCenter:currentLanguageOptionsForContentItem:completion:
nowPlayingInfoCenter:contentItemIDsFromOffset:toOffset:nowPlayingIndex:
nowPlayingInfoCenter:childContentItemIDAtIndex:ofItem:
contentItemForOffset:
contentItemIdentifierForOffset:
_expectedAssetTypesForPlaybackMode:
_postMPAVControllerItemReadyToPlayNotificationWithItem:
_postMPAVControllerSizeDidChangeNotificationWithItem:
embeddedDataTimesForItem:
_pauseIfUnableToPlay
_defaultsDidChangeNotification
_soundCheckEnabled
isMainThread
componentsSeparatedByString:
lastObject
stringByReplacingOccurrencesOfString:withString:
intValue
initWithBytes:length:encoding:
lastPathComponent
name
copy
address
vendorId
productId
stringWithFormat:
isEqualToString:
connected
connect
routeSubtype
routeUID
_addressMatchesRouteUID:
isConnected
rangeOfString:
initWithDevice:
routeType
matchesSystemRoute:
hasSystemRoute
setHasSystemRoute:
_device
_hasSystemRoute
watchdog
start
stop
isStarted
isTimerActive
setPlaybackSource:
setLocalPlaybackIdleTimeoutTimerEnabled:
isLocalPlaybackIdleTimeoutTimerEnabled
isLocalPlaybackIdleTimeoutTimerExpired
_accessQueue
_playbackSource
invalidate
timeIntervalSinceNow
_localPlaybackSourceTimeoutTimerFired:
scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:
setProcessTerminationDeferred:
setLocalPlaybackIdleTimeoutDeadline:
dateWithTimeIntervalSinceNow:
_localPlaybackIdleTimeoutDeadlineDidChange:
localPlaybackIdleTimeoutDeadline
_playbackSourceDidChange
_localPlaybackStateDidChange:
isProcessTerminationDeferred
setStarted:
_started
_localPlaybackSourceTimeoutTimer
_processTerminationDeferred
displayedAlbums
displayedArtists
displayedSongs
_queue
mediaItem
mediaLibrary
errorResolverForItem:
indexOfItemWithIdentifier:
mediaItemAtIndex:
_playbackInfoPropertiesToFetch
valuesForProperties:
dictionary
playbackInfoForIdentifier:
addEntriesFromDictionary:
doubleValue
realRepeatType
realShuffleType
setWithArray:
itemClass
_fetchCompanionCloudAvailability
_handleCloudAvailabilityMessage:
hasProperNetworkConditionsToPlayMedia
canShowCloudMusic
hasProperNetworkConditionsToShowCloudMedia
isCellularDataRestrictedForMusic
shouldProhibitMusicActionForCurrentNetworkConditions
isCellularDataRestrictedForVideos
shouldProhibitVideosActionForCurrentNetworkConditions
isCellularDataRestrictedForStoreApps
shouldProhibitStoreAppsActionForCurrentNetworkConditions
canShowCloudDownloadButtons
canShowCloudVideo
isCellularDataRestricted
shouldProhibitActionsForCurrentNetworkConditions
_hasProperNetworkConditionsToPlayMedia
_canShowCloudMusic
setWithObject:
initWithObject:keyPaths:options:handler:
addObserver:forKeyPath:options:context:
removeObserver:forKeyPath:context:
observeValueForKeyPath:ofObject:change:context:
initWithObject:keyPath:options:handler:
_object
_keyPaths
_handler
initWithPID:flags:reason:name:withHandler:
setInvalidationHandler:
_cancelInvalidationTimer
initWithFireDate:interval:target:selector:userInfo:repeats:
mainRunLoop
addTimer:forMode:
valid
initWithName:
invalidateAfterDelay:
isValid
_name
_acquired
_invalidationTimer
_processAssertion
routeName
length
_bluetoothDeviceName
isPicked
isSystemSpeaker
systemRoute
routeTypeFromMPAVRoute:
isAirpodsRoute
isPowerbeatsRoute
isBeatsSoloRoute
isBeatsStudioRoute
isBeatsXRoute
isCarplayRoute
isAppleTVRoute
isHomePodRoute
stringByAppendingFormat:
isEqualToVirtualAudioRoute:
setSystemRoute:
bluetoothDevice
setBluetoothDevice:
cachedPicked
setCachedPicked:
_cachedPicked
_systemRoute
_bluetoothDevice
initWithPlayerItem:
flushNowPlayingCaches
applyVolumeNormalizationWithSoundCheckEnabled:forQueuedItems:currentQuery:
setupPlaybackInfo
playerItem
floatValue
setVolumeAdjustment:
applyVolumeNormalizationForQueuedItems:
defaultPlaybackRate
hasDisplayableText
customAVEQPreset
_newTimeMarkersForChapterType:
title
album
artist
itemPersistentID
itemCompanionPersistentID
storeAdamID
longLongValue
setDeviceLibraryPersistentID:
setStoreAdamID:
setSyncID:
setStoreSubscriptionAdamID:
initWithBlock:
pptIdentifier
_identifiers
setLibraryViewMode:
libraryViewMode
_libraryViewMode
_avItemDurationDidChangeNotification:
_avItemIsExplicitDidChangeNotification:
_avItemTitlesDidChangeNotification:
_registerForNotificationsForPlaybackController:
_setNeedsNowPlayingInfoUpdate
_unregisterForNotificationsForPlaybackController:
date
durationOfCurrentItemIfAvailable
rate
displayOverridePlaybackState
numberWithFloat:
_nowPlayingInfoPropertiesToFetch
numberWithLongLong:
activeRepeatType
activeShuffleType
numberWithInt:
_nowPlayingInfoForItem:
_setNowPlayingInfo:
_playbackErrorNotification:
_playbackStateDidChangeNotification:
_updateNowPlayingInfoForNotification:
initWithPlaybackController:
clearNowPlayingInfo
nowPlayingInfo
_nowPlayingInfo
_needsNowPlayingInfoUpdate
weakObjectsHashTable
initWithService:
addDelegate:queue:
_updateConnectivityState
containsObject:
addObject:
removeObject:
devices
isDefaultPairedDevice
_defaultPairedDevice
_notifyObserversForConnectedState
manager:connectivityDidChange:
service:account:incomingMessage:fromID:context:
service:account:incomingData:fromID:context:
service:account:incomingUnhandledProtobuf:fromID:context:
service:account:incomingResourceAtURL:fromID:context:
service:account:incomingResourceAtURL:metadata:fromID:context:
service:activeAccountsChanged:
service:devicesChanged:
service:nearbyDevicesChanged:
service:connectedDevicesChanged:
service:account:identifier:didSendWithSuccess:error:
service:account:identifier:didSendWithSuccess:error:context:
service:account:identifier:hasBeenDeliveredWithContext:
service:account:inviteReceivedForSession:fromID:
service:account:inviteReceivedForSession:fromID:withOptions:
service:account:inviteReceivedForSession:fromID:withContext:
serviceSpaceDidBecomeAvailable:
serviceAllowedTrafficClassifiersDidReset:
service:didSwitchActivePairedDevice:acknowledgementBlock:
addObserver:
removeObserver:
_idsService
_idsDispatchQueue
_observers
_connected
_waitingForReconnect
_configureForStageDemoModeIfNeeded
setNowPlayingController:
_registerMediaRemoteCommandHandlerIfNeeded
_addPlaybackIntentWithIntentProvider:playImmediately:completionHandler:
performMediaRemoteCommand:options:completionHandler:
player
commandCenter
mpCommandForMRCommand:
eventWithCommand:mediaRemoteType:options:
clearPlaybackQueueWithCompletion:
_unregisterMediaRemoteCommandHandlerIfNeeded
wantsRadioSupport
initWithOptions:
_configureCurrentItemPlaybackStateObserversWithPlayer:
_configureAudioSessionWithPlayer:
_configureLocalOriginObserverAndCommandHandlerWithPlayer:
_configureDefaultFallbackPlaybackIntentIfNeededWithPlayer:
registerPlaybackErrorObserver:
initWithSystemPlayer:
_handleServerDiedNotification:
standardUserDefaults
boolForKey:
avController
setChangeHandler:
getWristState:
domain
code
_playbackErrorFromError:
_playbackErrorTypeFromTopLevelError:
playbackController:didFailToPlayItem:error:errorType:
playbackControllerDidPauseForLeaseEnd:
localOrigin
initWithOrigin:player:
setOriginObserver:forOrigin:
setOriginCommandHandler:forOrigin:
wantsDefaultMusicFallbackPlaybackIntent
setLabel:
kindWithVariants:
setItemKind:
setFilteringOptions:
setRequest:
setShuffleMode:
setTracklistToken:
setTracklistSource:
setFallbackPlaybackIntent:
playbackIntent
addPlaybackIntent:withOptions:completion:
player:didFailToPlayItem:error:
player:didFailToPlayFirstItem:error:
playerDidPauseForLeaseEnd:
prepareToHandleMediaRemoteCommands
preparePlaybackWithIntentProvider:completionHandler:
performMediaRemoteCommand:completionHandler:
startPlaybackWithIntentProvider:completionHandler:
clearPlaybackQueueWithCompletionHandler:
addErrorHandler:
removeErrorHandler:
setWantsRadioSupport:
setWantsDefaultMusicFallbackPlaybackIntent:
nowPlayingController
_mediaRemoteCommandObserver
_player
_mediaRemoteMuxer
_onWristMonitor
_shouldPauseNextTimeOffWrist
_playerCurrentItemObserver
_playerStateObserver
_wifiManager
_errorHandlers
_wantsRadioSupport
_wantsDefaultMusicFallbackPlaybackIntent
_nowPlayingController
sendMediaRemoteCommand:options:launchApp:
origin
_origin
deviceSupportsCellularData
isEnabled
mainBundle
bundleIdentifier
createTracklistRequest
createPlaybackContextWithCompletion:
mediaQuery
firstItem
setStartIndex:
setShouldStartPlayback:
firstTrackIdentifier
setStartItemIdentifiers:
_createTracklistRequestFromContainerIdentifier
_createTracklistRequestFromTrackIdentifiers
kindWithKinds:
emptyPropertySet
initWithProperties:relationships:
initWithIdentifiers:block:
setItemProperties:
setScopedContainers:
trackIdentifiers
arrayWithCapacity:
setAllowedItemIdentifiers:
identifiers
deviceLibraryPersistentID
arrayWithObject:
createMediaRemotePlaybackQueueWithOptions:shuffleMode:
virtualAudioRoutes
setVirtualAudioRoutes:
setPickedVirtualAudioRoute:
systemAudioRoutes
setSystemAudioRoutes:
setHasPickedVirtualAudioRoute:
setHasAvailableW1Route:
_hasPickedVirtualAudioRoute
_hasAvailableW1Route
_virtualAudioRoutes
_pickedVirtualAudioRoute
_systemAudioRoutes
setAudioCategory:
setRoutingControllerName:
beginObservingAudioRoutes
_updateSpeakerRouteEnabled
array
_registerForBluetoothManagerNotifications
_refreshBluetoothDevices
setDelegate:
setDiscoveryMode:
_performBlockAfterFetchingAvailableRoutesIgnoringCache:withCompletion:
allValues
sharedInstance
setActive:error:
mainQueue
addObserverForName:object:queue:usingBlock:
_cancelPickRouteTimeout
pickRoute:
_beginPickRouteTimeoutWithRoute:
setCategory:
category
setName:
availableRoutes
_updateSystemAudioRoutesWithRoutes:
w1Route
fetchAvailableRoutesWithCompletionHandler:
compare:
indexOfObject:inSortedRange:options:usingComparator:
_indexOfVirtualAudioRoute:forInsertion:
insertObject:atIndex:
removeObjectAtIndex:
_existingVirtualAudioRouteForMPAVRoute:
_addVirtualAudioRoute:
_existingVirtualAudioRouteForBluetoothAudioDevice:
audioCategory
initWithCapacity:
_createOrUpdateVirtualAudioRouteForMPAVRoute:
_removeVirtualAudioRoute:
enumerateObjectsUsingBlock:
_postSystemAudioRoutesChangedNotification
_postVirtualAudioRoutesChangedNotification
_bluetoothAvailabilityChangedNotification:
_bluetoothPowerChangedNotification:
_bluetoothDeviceDiscoveredNotification:
_bluetoothDeviceRemovedNotification:
_bluetoothDeviceUnpairedNotification:
_bluetoothDeviceConnectSuccessNotification:
_bluetoothDeviceConnectFailedNotification:
_bluetoothDeviceDisconnectSuccessNotification:
_bluetoothDeviceDisconnectFailedNotification:
_bluetoothConnectionStatusChangedNotification:
_bluetoothDevicePairedStatusChangedNotification:
_handleBluetoothAvailabilityChange
_addBluetoothDevice:
paired
connectingDevices
_removeBluetoothDevice:
available
enabled
pairedDevices
setObject:forKey:
_postPairedBluetoothAudioDevicesChangedNotification
_createOrUpdateVirtualAudioRouteForBluetoothAudioDevice:
setSpeakerRouteEnabled:
routingControllerAvailableRoutesDidChange:
routingController:didFailToPickRouteWithError:
routingController:pickedRoutesDidChange:
routingController:pickedRouteDidChange:
routingController:volumeControlAvailabilityDidChange:
routingControllerExternalScreenTypeDidChange:
routingControllerDidPauseFromActiveRouteChange:
pairedBluetoothAudioDevices
fetchAudioRoutesInfoWithCompletion:
pickVirtualAudioRoute:
routingControllerName
isBluetoothAvailableAndEnabled
setBluetoothAvailableAndEnabled:
_pairedBluetoothDevices
_routingController
_pendingVirtualRouteChangeNotification
_pendingPairedBluetoothAudioDeviceChangeNotification
_pendingSystemAudioRoutesChangedNotification
_pendingPickedRoutesStateDidChangeNotification
_hasFetchedInitialAvailableRoutes
_availableRoutesFetchGroup
_routePickingGroup
_routePickingQueue
_pickRouteTimer
_pendingPickingRoute
_bluetoothAvailableAndEnabled
_speakerRouteEnabled
isServiceSupported:
queueFeederClass
initWithIdentifier:
mainTitle
setTitle:
setSubtitle:
albumTitle
setAlbumName:
setTrackArtistName:
albumArtist
setAlbumArtistName:
artwork
setArtwork:
releaseDate
setReleaseDate:
playCount
setPlayCount:
setSeasonNumber:
setEpisodeNumber:
durationIsValid
durationFromExternalMetadata
setDuration:
setLocalizedContentRating:
valueForKeyPath:
componentsJoinedByString:
setDirectorName:
isExplicitTrack
setExplicitItem:
nowPlayingContentItemWithStringIdentifier:
_updateAppleMusicSubscriptionStatus
_updateCloudMusicLibraryEnabledStatus
_handleSubscriptionStatusDidChangeNotification:
companionDeviceActiveStoreAccountIsSubscriber
setValue:forKey:
subscriptionStatus
isAuthenticatedWithCompletionHandler:
isSubscriber
preloadAppleMusicSubscriptionStatus
isCloudMusicLibraryEnabled
preloadCloudMusicLibraryEnabledStatus
_cloudClient
_cloudMusicLibraryEnabled
_subscriptionManager
_subscriber
_readDefaults
_enableWiFiAssertionIfNeeded
applicationDidBecomeActive:
applicationDidEnterBackground:
_removeWoWClient
endObservingOrigins
removeObserverDelegate:
addObserverDelegate:
beginObservingOrigins
_disableWiFiAssertionWhenNeeded
setWifiTimerLengthInSeconds:
_addWoWClient
_scheduleDisablingWiFiAssertion
activeNowPlayingOrigin
nowPlayingStateForOrigin:
sharedApplication
directWiFiAssertionTimer
setDirectWiFiAssertionTimer:
wifiTimerLengthInSeconds
holdingWiFiAssertion
addWoWClient:
addWiFiAutoAssociationClientToken:
setHoldingWiFiAssertion:
removeWoWClient:
removeWiFiAutoAssociationClientToken:
originObserver:didUpdateNowPlayingInfoForOrigin:
originObserver:didUpdateNowPlayingApplicationBundleIdentifierForOrigin:
originObserver:didUpdatePlaybackStateForOrigin:
originObserver:didUpdateSupportedCommandsForOrigin:
originObserver:didUpdateElapsedTimeForOrigin:
originObserver:didUpdateTimestampForOrigin:
originObserver:didUpdatePlaybackQueueForOrigin:
_holdingWiFiAssertion
_enabled
_directWiFiAssertionTimer
_wifiTimerLengthInSeconds
_configureSharedAVSystemControllerAttributes
feeder
_createNowPlayingObserverIfNecessary
performAfterPickedRouteBecomesAvailable:
setVolumeAudioCategory:
setVolumeValue:
sharedAVSystemController
setAttribute:forKey:error:
timeIntervalSinceDate:
enumerateObjectsWithOptions:usingBlock:
_virtualAudioRoutesDidChangeNotification:
mediaRemotePlaybackState
_playbackCommandTaskIdentifier
_setPlaybackCommandTaskIdentifier:
_deferredPlaybackActions
_nowPlayingObserver
_observingVirtualAudioRouteChangeNotifications
_playbackTaskAssertion
isRunningInStoreDemoMode
initWithSuiteName:
stringForKey:
NMCAdditions
NMCMediaPlayerLegacyPlayer
NMCMediaRemoteCommandController
NMCAVController
MPNowPlayingPlaybackQueueDataSource
NSObject
NMCBluetoothAudioDevice
NMCPlaybackSourceManager
_NMCLocalPlaybackIdleTimeoutWatchdog
NMCTelemetry
NMCQueryQueueFeeder
NMCCloudAvailabilityController
HSCloudAvailability
NMCKeyValueObserver
NMCTaskAssertion
NMCVirtualAudioRoute
NMCQueryNowPlayingItem
NanoMusicCore
NMCLibraryViewManager
NMCNowPlayingObserver
NMCConnectivityManager
IDSServiceDelegate
NMCMediaPlayerModelPlaybackController
MPCPlayerPlaybackErrorObserving
NMCMediaPlayerCommandHandler
NMROriginCommandHandler
NMCAudioRoutesInfo
NMCAudioRoutingManager
MPAVRoutingControllerDelegate
NMCQueryPlaybackContext
NMCSubscriptionManager
NMCWiFiManager
NMROriginObserverDelegate
NMCPlaybackController
@8@0:4
v16@0:4@8@?12
v8@0:4
i12@0:4@8
v12@0:4@8
v12@0:4i8
@"NMCPlaybackController"
B12@0:4@8
#8@0:4
@12@0:4:8
@16@0:4:8@12
@20@0:4:8@12@16
B8@0:4
B12@0:4#8
B12@0:4:8
Vv8@0:4
I8@0:4
^{_NSZone=}8@0:4
B12@0:4@"Protocol"8
@"NSString"8@0:4
@16@0:4@8i12
@16@0:4@8@12
@28@0:4@8@12{CGSize=ff}16@?24
@20@0:4@8@12@?16
@24@0:4@8i12i16^i20
@20@0:4@8i12@16
@12@0:4i8
@"NSString"16@0:4@"MPNowPlayingInfoCenter"8i12
@"MPNowPlayingContentItem"16@0:4@"MPNowPlayingInfoCenter"8@"NSString"12
@"NSProgress"28@0:4@"MPNowPlayingInfoCenter"8@"MPNowPlayingContentItem"12{CGSize=ff}16@?<v@?@"UIImage"@"NSError">24
@"NSProgress"20@0:4@"MPNowPlayingInfoCenter"8@"MPNowPlayingContentItem"12@?<v@?@"MPNowPlayingInfoLyricsItem"@"NSError">16
@"NSProgress"20@0:4@"MPNowPlayingInfoCenter"8@"MPNowPlayingContentItem"12@?<v@?@"NSString"@"NSError">16
@"NSProgress"20@0:4@"MPNowPlayingInfoCenter"8@"MPNowPlayingContentItem"12@?<v@?@"NSArray"@"NSError">16
@"NSArray"24@0:4@"MPNowPlayingInfoCenter"8i12i16^i20
@"NSString"20@0:4@"MPNowPlayingInfoCenter"8i12@"MPNowPlayingContentItem"16
@"MPNowPlayingContentItem"12@0:4i8
@12@0:4@8
i8@0:4
v12@0:4B8
@"BluetoothDevice"
v16@0:4i8B12
@"NSObject<OS_dispatch_queue>"
@"NSTimer"
@24@0:4@8@12I16@?20
v24@0:4@8@12@16^v20
@"NSObject"
@"NSSet"
v16@0:4d8
@"NSString"
@"BKSProcessAssertion"
@"MPAVRoute"
@"NMCBluetoothAudioDevice"
f8@0:4
@"MPAVController"
@"NSDictionary"
v28@0:4@8@12@16@20@24
v32@0:4@8@12@16@20@24@28
v16@0:4@8@12
v28@0:4@8@12@16B20@24
v32@0:4@8@12@16B20@24@28
v24@0:4@8@12@16@20
v20@0:4@8@12@?16
v28@0:4@"IDSService"8@"IDSAccount"12@"NSDictionary"16@"NSString"20@"IDSMessageContext"24
v28@0:4@"IDSService"8@"IDSAccount"12@"NSData"16@"NSString"20@"IDSMessageContext"24
v28@0:4@"IDSService"8@"IDSAccount"12@"IDSProtobuf"16@"NSString"20@"IDSMessageContext"24
v28@0:4@"IDSService"8@"IDSAccount"12@"NSURL"16@"NSString"20@"IDSMessageContext"24
v32@0:4@"IDSService"8@"IDSAccount"12@"NSURL"16@"NSDictionary"20@"NSString"24@"IDSMessageContext"28
v16@0:4@"IDSService"8@"NSSet"12
v16@0:4@"IDSService"8@"NSArray"12
v28@0:4@"IDSService"8@"IDSAccount"12@"NSString"16B20@"NSError"24
v32@0:4@"IDSService"8@"IDSAccount"12@"NSString"16B20@"NSError"24@"IDSMessageContext"28
v24@0:4@"IDSService"8@"IDSAccount"12@"NSString"16@20
v24@0:4@"IDSService"8@"IDSAccount"12@"IDSSession"16@"NSString"20
v28@0:4@"IDSService"8@"IDSAccount"12@"IDSSession"16@"NSString"20@"NSDictionary"24
v28@0:4@"IDSService"8@"IDSAccount"12@"IDSSession"16@"NSString"20@"NSData"24
v12@0:4@"IDSService"8
v20@0:4@"IDSService"8@"IDSDevice"12@?<v@?>16
@"IDSService"
@"NSHashTable"
v20@0:4@8@12@16
v20@0:4@"MPCPlayer"8@"MPCPlayerItem"12@"NSError"16
v12@0:4@"MPCPlayer"8
v16@0:4I8@?12
v20@0:4I8@12@?16
v12@0:4@?8
v20@0:4@8B12@?16
@"MPCMediaPlayerLegacyPlayer"
@"MPCMediaRemoteMuxer"
@"CSLSOnWristMonitor"
@"NMCKeyValueObserver"
@"NMCWiFiManager"
@"NMRNowPlayingController"
v20@0:4I8@12B16
v20@0:4I8@"NSDictionary"12B16
@"NMROrigin"8@0:4
@"MPCPlayer"
@"NMROrigin"
^{_MRSystemAppPlaybackQueue=}16@0:4I8i12
@"NSArray"
@"NMCVirtualAudioRoute"
v16@0:4@8B12
v12@0:4@"MPAVRoutingController"8
v16@0:4@"MPAVRoutingController"8@"NSError"12
v16@0:4@"MPAVRoutingController"8@"NSArray"12
v16@0:4@"MPAVRoutingController"8@"MPAVRoute"12
v16@0:4@"MPAVRoutingController"8B12
v16@0:4B8@?12
I16@0:4@8B12
@"NSMutableDictionary"
@"MPAVRoutingController"
@"NSMutableArray"
@"NSObject<OS_dispatch_group>"
@"NSObject<OS_dispatch_source>"
@"HSCloudClient"
@"NMSSubscriptionManager"
v16@0:4@8@"NMROrigin"12
v12@0:4I8
d8@0:4
v16@0:4i8i12
v20@0:4i8i12B16
@"NMCAVController"
@"NMCNowPlayingObserver"
@"NMCTaskAssertion"
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
