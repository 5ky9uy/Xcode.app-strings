applicationProxyForIdentifier:
groupContainerURLs
objectForKey:
path
dataContainerURL
initWithUserDefaultsDomain:containerPath:
init
synchronize
allKeys
setWithArray:
class
serializeObject:error:
unserializeObject:error:
initWithUserDefaultsDomain:container:appGroupContainer:
synchronizeForReading
synchronizeForWriting
setObject:forKey:
copyKeyList
serializedObjectForKey:error:
.cxx_destruct
domain
setDomain:
type
setType:
container
setContainer:
appGroupContainer
setAppGroupContainer:
containerPath
setContainerPath:
hasChangesToWrite
setHasChangesToWrite:
_hasChangesToWrite
_domain
_type
_container
_appGroupContainer
_containerPath
stringByStandardizingPath
_openDBAtPath:
dealloc
countByEnumeratingWithState:objects:count:
setMessageType:forMessageID:
getMessageType:forMessageID:
removeMessageFromMessageTypeTable:
objectForKeyedSubscript:
setObject:forKeyedSubscript:
addObject:
enumerateKeysAndObjectsUsingBlock:
isEqual:
fileSystemRepresentation
copy
_getSchemaVersion
initWithPath:
sentSettingsSyncMessage:forDomain:keys:cloudEnabled:
untrackSettingsSyncMessagesForDomain:keys:cloudEnabled:
sentSettingsBackupMessage:forContainer:domain:keys:
untrackSettingsBackupMessageForContainer:domain:keys:
sentFileBackupMessage:forFileAtPath:
untrackFileBackupMessageForFileAtPath:
messageWasDelivered:
messageWasPurged:
getSettingsSyncDataForMessage:handler:
getSettingsBackupDataForMessage:handler:
getFileBackupDataForMessage:handler:
stashSettingsSyncData:forDomain:key:isTwoWaySync:timestamp:
getStashedSettingsSyncDataWithHandler:
flushStashedSettingsSyncData
purgePendingOutgoingMessages
setPath:
version
setDb:
getMessageTypeForMessageID
setGetMessageTypeForMessageID:
setMessageTypeForMessageID
setSetMessageTypeForMessageID:
setMessageIDForSettingSync
setSetMessageIDForSettingSync:
setMessageIDForSettingBackup
setSetMessageIDForSettingBackup:
setMessageIDForFileBackup
setSetMessageIDForFileBackup:
untrackSettingsSyncMessage
setUntrackSettingsSyncMessage:
untrackSettingsBackupMessage
setUntrackSettingsBackupMessage:
untrackFileBackupMessage
setUntrackFileBackupMessage:
untrackSettingsSyncForMessageID
setUntrackSettingsSyncForMessageID:
untrackSettingsBackupForMessageID
setUntrackSettingsBackupForMessageID:
untrackFileBackupForMessageID
setUntrackFileBackupForMessageID:
removeMessageFromMessageTypeTable
setRemoveMessageFromMessageTypeTable:
setNullMessageIDForSettingSync
setSetNullMessageIDForSettingSync:
setNullMessageIDForSettingBackup
setSetNullMessageIDForSettingBackup:
setNullMessageIDForFileBackup
setSetNullMessageIDForFileBackup:
getSettingsSyncForMessageID
setGetSettingsSyncForMessageID:
getSettingsBackupForMessageID
setGetSettingsBackupForMessageID:
getFileBackupForMessageID
setGetFileBackupForMessageID:
getSettingsSyncWithNullMessageID
setGetSettingsSyncWithNullMessageID:
getSettingsBackupWithNullMessageID
setGetSettingsBackupWithNullMessageID:
getFileBackupWithNullMessageID
setGetFileBackupWithNullMessageID:
stashSettingsSyncData
setStashSettingsSyncData:
getStashedSettingSyncData
setGetStashedSettingSyncData:
flushStashedSettingSyncData
setFlushStashedSettingSyncData:
purgeMessageTypeTable
setPurgeMessageTypeTable:
purgeSettingsSyncTable
setPurgeSettingsSyncTable:
purgeSettingsBackupTable
setPurgeSettingsBackupTable:
purgeFileBackupTable
setPurgeFileBackupTable:
_path
_version
_getMessageTypeForMessageID
_setMessageTypeForMessageID
_setMessageIDForSettingSync
_setMessageIDForSettingBackup
_setMessageIDForFileBackup
_untrackSettingsSyncMessage
_untrackSettingsBackupMessage
_untrackFileBackupMessage
_untrackSettingsSyncForMessageID
_untrackSettingsBackupForMessageID
_untrackFileBackupForMessageID
_removeMessageFromMessageTypeTable
_setNullMessageIDForSettingSync
_setNullMessageIDForSettingBackup
_setNullMessageIDForFileBackup
_getSettingsSyncForMessageID
_getSettingsBackupForMessageID
_getFileBackupForMessageID
_getSettingsSyncWithNullMessageID
_getSettingsBackupWithNullMessageID
_getFileBackupWithNullMessageID
_stashSettingsSyncData
_getStashedSettingSyncData
_flushStashedSettingSyncData
_purgeMessageTypeTable
_purgeSettingsSyncTable
_purgeSettingsBackupTable
_purgeFileBackupTable
UTF8String
stringWithUTF8String:
bytes
length
dataWithBytes:length:
stringWithFormat:
description
setKey:
twoWaySync
setTwoWaySync:
isPrefix
setIsPrefix:
isCloudEnabled
setIsCloudEnabled:
_twoWaySync
_isPrefix
_isCloudEnabled
_key
keys
setKeys:
keyPrefixes
setKeyPrefixes:
_keys
_keyPrefixes
notificationNames
setNotificationNames:
_notificationNames
domains
setDomains:
_domains
defaultManager
stringByAppendingPathComponent:
fileExistsAtPath:isDirectory:
contentsOfDirectoryAtPath:error:
predicateWithFormat:
filteredArrayUsingPredicate:
alloc
isKindOfClass:
objectForInfoDictionaryKey:
count
arrayWithObject:
boolValue
isEqualToString:
unionSet:
stringByAppendingString:
backupableUserDefaultDomainForContainer:domain:
loadSettingsBundles
backupableUserDefaultKeyForContainer:domain:key:
syncedUserDefaults
setSyncedUserDefaults:
whitelisedUserDefaults
setWhitelisedUserDefaults:
backupableUserDefaultContainers
setBackupableUserDefaultContainers:
backupableFiles
setBackupableFiles:
backupableDirectories
setBackupableDirectories:
_syncedUserDefaults
_whitelisedUserDefaults
_backupableUserDefaultContainers
_backupableFiles
_backupableDirectories
processInfo
environment
dataWithContentsOfFile:options:error:
unarchiveObjectOfClasses:withData:
unarchivedObjectOfClasses:fromData:error:
numberWithUnsignedInteger:
archivedDataWithRootObject:requiringSecureCoding:error:
unarchiveObjectOfClasses:withFile:
archiveObject:
dictionaryRepresentation
dictionary
numberWithBool:
setValue:
allocWithZone:
copyWithZone:
isMemberOfClass:
hash
hasValue
setHasTwoWaySync:
hasTwoWaySync
readFrom:
writeTo:
copyTo:
mergeFrom:
value
_value
_has
defaultCenter
_registryChanged:
addObserver:selector:name:object:
sharedInstance
waitForActivePairedDevice
checkInWithNanoRegistryIfNeeded
isPaired
createDirectoryIfNeeded:
objectAtIndexedSubscript:
initWithDomain:
firstObject
name
forceCheckInWithNanoRegistry
getActivePairedDevice
valueForProperty:
fileExistsAtPath:
dictionaryWithObjects:forKeys:count:
createDirectoryAtPath:withIntermediateDirectories:attributes:error:
startMonitoringPairingEventsWithQueue:
blockUntilPaired
pairingID
pairingDataStore
pairingDevice
perGizmoCacheDirectoryPath
globalCacheDirectoryPath
domainAccessor
databasePath
queue
pairedDevice
setPairedDevice:
hasCheckedInWithNanoRegistry
setHasCheckedInWithNanoRegistry:
setPairingID:
setPairingDataStore:
setDomainAccessor:
setPerGizmoCacheDirectoryPath:
setGlobalCacheDirectoryPath:
setDatabasePath:
_hasCheckedInWithNanoRegistry
_queue
_pairedDevice
_pairingID
_pairingDataStore
_domainAccessor
_perGizmoCacheDirectoryPath
_globalCacheDirectoryPath
_databasePath
setFileURL:
hasFileURL
fileURL
_fileURL
setKind:
setFeature:
setSetting:
setRestriction:
setUserSettingsAndRestrictions:
hasKind
hasFeature
hasSetting
hasRestriction
hasUserSettingsAndRestrictions
kind
feature
setting
restriction
userSettingsAndRestrictions
_feature
_kind
_restriction
_setting
_userSettingsAndRestrictions
initWithMachServiceName:
setDelegate:
initWithService:
handleUserDefaultsMsg:
setProtobufAction:forIncomingRequestsOfType:
handleManagedConfigurationMsg:
handleUserDefaultsBackupMsg:
resume
addDelegate:queue:
handlePairedDeviceChangedVersionNotification
checkIfShouldPerformFirstLaunchIntoNewBuildTasks
resendMessagesForMessageID:
checkPairedDeviceChangedVersion
boolForKey:
null
hasPrefix:
sendSettingsInDomain:keys:isInitialSync:cloudEnabled:
containsObject:
hasPerformedInitialSync
systemBuildVersion
stringForKey:
startSyncIsInitialSync:syncType:
sendMessageData:messageType:queueOneIdentifier:identifier:urgentPriorityOverride:cloudEnabled:
initWithProtobufData:type:isResponse:
maxSendTimeout
numberWithDouble:
mutableCopy
idsService
setWithObject:
sendProtobuf:toDestinations:priority:options:identifier:error:
code
purgeRetryDelay
endTransaction
beginTransaction
sendSettingsBackupInDomain:keys:container:isInitialSync:
minusSet:
backupFileAtPath:
intValue
handleFileBackupMessage:resourceURL:
context
outgoingResponseIdentifier
data
initWithData:
handleUnserializedUserDefaultsMsg:
hasTimestamp
timestamp
readCacheFromDiskForDomain:isPerGizmo:
doubleValue
timeIntervalSinceReferenceDate
compare:
writeCache:toDiskForDomain:isPerGizmo:
managedConfigurationSettings
logManagedConfigurationDictionary:
validateIncomingManagedConfigurationDictionary:
sharedConnection
setParametersForSettingsByType:
applyRestrictionDictionary:clientType:clientUUID:localizedClientDescription:localizedWarningMessage:outRestrictionChanged:outEffectiveSettingsChanged:outError:
checkIfFileIsWhitelistedAsBackupable:
stringByDeletingLastPathComponent
removeItemAtURL:error:
moveItemAtURL:toURL:error:
setResourceValue:forKey:error:
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
superclass
debugDescription
synchronizeUserDefaultsDomain:keys:container:appGroupContainer:cloudEnabled:
backupUserDefaultsDomain:keys:container:
backupFileAtPath:withCompletionHandler:
interfaceWithProtocol:
arrayWithObjects:count:
setClasses:forSelector:argumentIndex:ofReply:
setExportedInterface:
setExportedObject:
setInvalidationHandler:
setInterruptionHandler:
cachePathForDomain:isPerGizmo:
dataWithContentsOfFile:
propertyListWithData:options:format:error:
deleteCacheForDomain:isPerGizmo:
dataWithPropertyList:format:options:error:
writeToFile:options:error:
removeItemAtPath:error:
setTimestamp:
queueOneIdentifierForUserDefaultsMsg:
updateCacheForDomain:keys:twoWaySyncTimestamp:isPerGizmo:
allObjects
sortedArrayUsingSelector:
initWithString:
appendString:
queueOneIdentifierForUserDefaultsBackupMsg:
sendMessageData:messageType:queueOneIdentifier:identifier:cloudEnabled:
appendFormat:
addKey:
fileURLWithPath:isDirectory:
standardizedURL
getResourceValue:forKey:error:
queueOneIdentifierForFileBackupMsg:
numberWithInt:
sendResourceAtURL:metadata:toDestinations:priority:options:identifier:error:
sendSetting:keys:messageIdentifier:messageData:cloudEnabled:
isManagedConfigurationSettingWhitelistedForKind:feature:
service:account:incomingMessage:fromID:context:
service:account:incomingData:fromID:context:
service:account:incomingUnhandledProtobuf:fromID:context:
service:account:incomingResourceAtURL:fromID:context:
service:account:incomingResourceAtURL:metadata:fromID:context:
service:activeAccountsChanged:
service:devicesChanged:
service:nearbyDevicesChanged:
service:connectedDevicesChanged:
service:account:identifier:didSendWithSuccess:error:
service:account:identifier:didSendWithSuccess:error:context:
service:account:identifier:sentBytes:totalBytes:
service:account:identifier:hasBeenDeliveredWithContext:
service:account:identifier:fromID:hasBeenDeliveredWithContext:
service:account:inviteReceivedForSession:fromID:
service:account:inviteReceivedForSession:fromID:withOptions:
service:account:inviteReceivedForSession:fromID:withContext:
service:account:receivedGroupSessionParticipantUpdate:
service:account:receivedGroupSessionParticipantDataUpdate:
serviceSpaceDidBecomeAvailable:
serviceAllowedTrafficClassifiersDidReset:
service:didSwitchActivePairedDevice:acknowledgementBlock:
listener:shouldAcceptNewConnection:
initDomainKeysToSyncFirstIfNeeded
shouldSyncFirstPerGizmoDomain:withKey:
applyStashedSettingsSyncMessages
workQueue
setWorkQueue:
settings
setSettings:
xpcListener
setXpcListener:
setIdsService:
deviceRegistry
setDeviceRegistry:
database
setDatabase:
purgeTimer
setPurgeTimer:
_workQueue
_settings
_xpcListener
_idsService
_deviceRegistry
_database
_purgeTimer
removeAllObjects
objectAtIndex:
initWithCapacity:
keysCount
clearKeys
keyAtIndex:
keyType
setHasTimestamp:
_timestamp
currentRunLoop
hasContainer
Could not resolve containerPath for container (%@)
Synchronized user defaults domain (%@) for containerPath: (%@); ret: (%d).
Synchronized user defaults domain (%@); ret: (%d).
Read containerized user default <%@, %@> for containerPath: (%@); value: (%@)
Read user default <%@, %@>; value: (%@)
Written containerized user default <%@, %@> for containerPath: (%@); value: (%@)
Written user default <%@, %@>; value: (%@)
Failed to serialized value (%@) with error: %@ 
Failed to unserialized data (%@) with error: %@
SQL Error: (%d) %s
Error fetching schema version: %d (%s)
Error opening SQLite3 DB at (%@): (%d) %s
I/O error: ACCESS
I/O error: BLOCKED
I/O error: CHECKRESERVEDLOCK
I/O error: CLOSE
I/O error: DELETE
I/O error: DIR_CLOSE
I/O error: DIR_FSYNC
I/O error: FSTAT
I/O error: FSYNC
I/O error: LOCK
I/O error: NOMEM
I/O error: RDLOCK
I/O error: READ
I/O error: SEEK
I/O error: SHMLOCK
I/O error: SHMMAP
I/O error: SHMOPEN
I/O error: SHMSIZE
I/O error: SHORT_READ
I/O error: TRUNCATE
I/O error: UNLOCK
I/O error: WRITE
sqlite3_exec(%s) Error: (%d) %s
%@ '%@': %@
%@ '%@':
Bundle directory (%@) does not exist
Bundle directory (%@) is not a directory
Bundle directory (%@) could not be open
Unable to read bundle: %@
Malformed bundle plist for bundle: %@. %@
Missing %@ or %@ entry for bundle: %@.
Key %@ already syncing in domain %@ for bundle %@.
Cannot overwrite existing container %@ with %@ for whitelisted <%@, %@> in bundle %@.
Action %@ not supported in bundle (%@).
backupableUserDefaultContainers: (%@)
backupableFiles: (%@)
backupableDirectories: (%@)
Error (%@) reading data from (%@)
Error (%@) unarchiving expected classes (%@) with (%@) bytes data
Error (%@) archiving (%@)
Received notification: (%@)
NanoRegistry returned paired device: (%@)
Failed to create directory (%@) with error: (%@)
Launching; "NanoPreferencesSyncDaemon_Sim-220" "1165"
Received notification: %s
Received unexepectedly NULL notification
Received unexpected non-dictionary type event: (%@)
isInitialSync: (%d) syncType: (%@)
Detected first launch after pairing; Local build version: (%@)
Detected local device update; Current build version: (%@); Previous: (%@)
Skipping Paired Device Version change check. Not paired.
lastRegisteredPairedDeviceBuildVersion: (%@); pairedDeviceBuildVersion: (%@)
Skipping Paired Device Version change check. Has not performed initial sync yet.
Successfully sent message with identifier: (%@)
Failed sending message with error: (%@)
service: (%@), account: (%@), identifier: (%@), success: (%d), error: (%@)
Message (%@) failed to be delivered with error: (%@)
Purge Timer fired!
messageID: (%@)
Failed re-sending settings backup for container (%@), domain (%@), keys (%@).
Failed re-sending file backup (%@) for identifier (%@)!
service: (%@); account: (%@); incomingResourceAtURL: (%@); metadata: (%@); fromID: (%@); context: (%@)
nil messageType. metadata: (%@)
Un-handled message type: (%@)
idsProtobuf: (%p); outgoingResponseIdentifier: (%@)
Could not parse incoming data
Handling User Defaults message for domain: (%@); hasTimestamp: (%d); timestamp: (%f)
Domain (%@) not whitelisted; dropping incoming message
Key (%@) in domain (%@) not whitelisted; dropping incoming message
Received User Defaults value for <%@, %@>: (%@)
Discarding cached timestamp for <%@, %@> since it is set to the future; cached: (%f); current: (%f)
Discarding incoming setting for <%@, %@>, local value is more recent
Local expects <%@, %@> to be 2-way-synced, but remote doesn't
Skipping key (%@) since incoming value is un-changed
Posting (%@) for domain (%@)
Kind: (%@)
Feature: (%@); Value: (%@)
No feature whitelisted for kind (%@). Discarding incoming features (%@).
MC Feature (%@, %@) not whitelisted; Skipping.
Incoming userSettingsAndRestrictions is not an array! (%@)
Incoming setting MC user settings:
Incoming setting MC restrictions:
Applying updated MC user settings
Applying updated MC restrictions
Failed to apply ManagedConfiguration restrictions (%@): %@
Handling User Defaults Backup message for container: (%@); domain: (%@)
Domain (%@) in container (%@) not restore-able
Failed to instantiate setting accessor for domain: (%@); container: (%@)
Message has key: (%@); Serialized value: (%lu bytes)
<%@, %@> is not whitelisted for restore
Posting (%@)
Handling file backup message for path: (%@); Temporary URL: (%@)
Restoring file at (%@) with file at temporary location (%@)
File does not exist at temporary location (%@)!!!!!!
Failed to create parent directory (%@) with error: (%@)
Failed to remove existing file at restore path (%@) with error: (%@)
Failed to restore file from temporary location (%@) to (%@) with error: (%@)
Failed to set protection for file (%@) with error (%@); result: (%d) 
listener: (%p); connection: (%p)
Connection invalidated: (%p)
Failed to resolve cache path for domain: (%@); isPerGizmo: (%d)
Reading cache for domain: (%@); isPerGizmo: (%d)
Failed to unserialized domain cache (%@) %@
Read cache: (%@)
Writing cache for domain: (%@); isPerGizmo: (%d)
Cache to be written: (%@)
Failed to serialize updated domain cache dictionary (%@) with error: (%@)
Failed to write updated domain cache (%@) with error: (%@)
Deleting cache for domain: (%@); isPerGizmo: (%d)
Cache for domain (%@) does not exist.
Failed to delete cache for domain: %@
Key (%@) is not a String.
Domain (%@) in container (%@) not whitelisted for backups
<%@, %@> is not backup-able
File path (%@) is not backup-able
File path should not be nil
File URL (%@) should not be nil
File (%@) is a directory
Failed to retrieve file protection for file URL: (%@) with error: (%@); result: (%d)
File at URL (%@) has unsupported protection (%@) for file backup purposes
Failed sending resource with error: (%@)
Successfully sent resource; identifier: (%@)
domain: (%@); keys: (%@); container: (%@); appGroupContainer: (%@); cloudEnabled: (%d)
Domain (%@) should not be nil, and keys (%@) should not be nil or empty.
Container should not be nil when specifing an app group container (%@) for domain (%@) and keys (%@).
domain: (%@); keys: (%@); container: (%@)
filePath: (%@); completionHandler: (%p)
NPSSettingAccessor
NPSDatabase
UserDefaultsKey
UserDefaultsDomain
WhitelistedUserDefaultsKey
WhitelistedUserDefaultsDomain
BackupableUserDefaultsKey
BackupableUserDefaultsDomain
BackupableUserDefaultsContainer
NPSSettings
NPSKeyedArchiverUtil
NPSUserDefaultsMsgKey
NSCopying
NPSDeviceRegistry
NPSFileBackupMsg
NPSManagedConfigurationMsg
NPSGizmoServerProtocol
NPSServerProtocol
NSObject
NPSServer
IDSServiceDelegate
NSXPCListenerDelegate
NPSUserDefaultsMsg
NPSUserDefaultsBackupMsgKey
NPSUserDefaultsBackupMsg
@16@0:4@8^@12
@20@0:4@8@12@16
@16@0:4@8@12
B8@0:4
@12@0:4@8
v16@0:4@8@12
@8@0:4
v8@0:4
v12@0:4@8
i8@0:4
v12@0:4i8
v12@0:4B8
@"NSString"
B16@0:4i8@12
B16@0:4^i8@12
B12@0:4@8
v24@0:4@8@12@16B20
v20@0:4@8@12B16
v24@0:4@8@12@16@20
v20@0:4@8@12@16
v16@0:4@8@?12
v32@0:4@8@12@16B20d24
v12@0:4@?8
I8@0:4
^{sqlite3=}8@0:4
v12@0:4^{sqlite3=}8
^{sqlite3_stmt=}8@0:4
v12@0:4^{sqlite3_stmt=}8
^{sqlite3=}
^{sqlite3_stmt=}
@"NSMutableDictionary"
@"NSMutableSet"
@"BackupableUserDefaultsDomain"
@"BackupableUserDefaultsContainer"
@12@0:4^{_NSZone=}8
@"NSData"
{?="twoWaySync"b1}
@"NSObject<OS_dispatch_queue>"
@"NRDevice"
@"NSUUID"
@"NPSDomainAccessor"
#8@0:4
@12@0:4:8
@16@0:4:8@12
@20@0:4:8@12@16
B12@0:4#8
B12@0:4:8
Vv8@0:4
^{_NSZone=}8@0:4
B12@0:4@"Protocol"8
@"NSString"8@0:4
v28@0:4@8@12@16@20B24
v28@0:4@"NSString"8@"NSSet"12@"NSString"16@"NSString"20B24
v20@0:4@"NSString"8@"NSSet"12@"NSString"16
v16@0:4@"NSString"8@?<v@?>12
d8@0:4
q8@0:4
v12@0:4^{NSDictionary=#}8
^{NSDictionary=#}12@0:4^{NSDictionary=#}8
B16@0:4@8@12
v28@0:4@8@12@16@20@24
v32@0:4@8@12@16@20@24@28
v28@0:4@8@12@16B20@24
v32@0:4@8@12@16B20@24@28
v28@0:4@8@12@16i20i24
v20@0:4@8@12@?16
v28@0:4@"IDSService"8@"IDSAccount"12@"NSDictionary"16@"NSString"20@"IDSMessageContext"24
v28@0:4@"IDSService"8@"IDSAccount"12@"NSData"16@"NSString"20@"IDSMessageContext"24
v28@0:4@"IDSService"8@"IDSAccount"12@"IDSProtobuf"16@"NSString"20@"IDSMessageContext"24
v28@0:4@"IDSService"8@"IDSAccount"12@"NSURL"16@"NSString"20@"IDSMessageContext"24
v32@0:4@"IDSService"8@"IDSAccount"12@"NSURL"16@"NSDictionary"20@"NSString"24@"IDSMessageContext"28
v16@0:4@"IDSService"8@"NSSet"12
v16@0:4@"IDSService"8@"NSArray"12
v28@0:4@"IDSService"8@"IDSAccount"12@"NSString"16B20@"NSError"24
v32@0:4@"IDSService"8@"IDSAccount"12@"NSString"16B20@"NSError"24@"IDSMessageContext"28
v28@0:4@"IDSService"8@"IDSAccount"12@"NSString"16i20i24
v24@0:4@"IDSService"8@"IDSAccount"12@"NSString"16@20
v28@0:4@"IDSService"8@"IDSAccount"12@"NSString"16@"NSString"20@24
v24@0:4@"IDSService"8@"IDSAccount"12@"IDSSession"16@"NSString"20
v28@0:4@"IDSService"8@"IDSAccount"12@"IDSSession"16@"NSString"20@"NSDictionary"24
v28@0:4@"IDSService"8@"IDSAccount"12@"IDSSession"16@"NSString"20@"NSData"24
v20@0:4@"IDSService"8@"IDSAccount"12@"IDSGroupSessionParticipantUpdate"16
v12@0:4@"IDSService"8
v20@0:4@"IDSService"8@"IDSDevice"12@?<v@?>16
B16@0:4@"NSXPCListener"8@"NSXPCConnection"12
v16@0:4B8I12
@28@0:4@8i12@16^@20B24
@32@0:4@8i12@16^@20B24B28
@16@0:4@8B12
B20@0:4@8@12B16
B16@0:4@8B12
@28@0:4@8@12^@16^@20B24
@24@0:4@8@12@16B20
v24@0:4@8@12B16B20
@"NPSSettings"
@"NSXPCListener"
@"IDSService"
@"NPSDeviceRegistry"
@"NPSDatabase"
@"NSObject<OS_dispatch_source>"
v16@0:4d8
@12@0:4I8
@"NSMutableArray"
{?="timestamp"b1}
hasChangesToWrite
TB,N,V_hasChangesToWrite
domain
T@"NSString",&,N,V_domain
type
Ti,N,V_type
container
T@"NSString",&,N,V_container
appGroupContainer
T@"NSString",&,N,V_appGroupContainer
containerPath
T@"NSString",&,N,V_containerPath
(nil)
BEGIN EXCLUSIVE TRANSACTION
ROLLBACK TRANSACTION
COMMIT TRANSACTION
v16@?0@"NSString"4@"NSSet"8^B12
v16@?0@"NSString"4@"NSDictionary"8^B12
meta
SELECT COUNT(*) FROM meta
Unknown Error
PRAGMA journal_mode=WAL;
CREATE TABLE IF NOT EXISTS meta (version INTEGER PRIMARY KEY AUTOINCREMENT, tstamp REAL)
CREATE TABLE IF NOT EXISTS sync_msgs (domain TEXT NOT NULL, key TEXT NOT NULL, messageID TEXT, PRIMARY KEY(domain, key))
CREATE TABLE IF NOT EXISTS backup_msgs (container TEXT NOT NULL DEFAULT (''), domain TEXT NOT NULL, key TEXT NOT NULL, messageID TEXT, PRIMARY KEY(container, domain, key))
CREATE TABLE IF NOT EXISTS msgs_type (messageID TEXT NOT NULL PRIMARY KEY, type INTEGER NOT NULL)
CREATE INDEX sync_msgs_messageID_idx ON sync_msgs (messageID ASC)
CREATE INDEX backup_msgs_messageID_idx ON backup_msgs (messageID ASC)
INSERT INTO meta (tstamp) VALUES (datetime('now'))
CREATE TABLE IF NOT EXISTS file_backup_msgs (path TEXT NOT NULL, messageID TEXT, PRIMARY KEY(path))
CREATE INDEX file_backup_msgs_messageID_idx ON file_backup_msgs (messageID ASC)
CREATE TABLE IF NOT EXISTS stashed_sync_msgs (domain TEXT NOT NULL, key TEXT NOT NULL, data BLOB, two_way_sync INTEGER, timestamp DOUBLE, PRIMARY KEY(domain, key))
ALTER TABLE sync_msgs ADD COLUMN cloudEnabled INTEGER
SELECT type FROM msgs_type WHERE messageID=?
INSERT INTO msgs_type (messageID, type) VALUES (?, ?)
INSERT OR REPLACE INTO sync_msgs (domain, key, messageID, cloudEnabled) VALUES (?, ?, ?, ?)
INSERT OR REPLACE INTO backup_msgs (container, domain, key, messageID) VALUES (?, ?, ?, ?)
INSERT OR REPLACE INTO file_backup_msgs (path, messageID) VALUES (?, ?)
DELETE FROM sync_msgs WHERE domain=? AND key=? AND cloudEnabled=?
DELETE FROM backup_msgs WHERE container=? AND domain=? AND key=?
DELETE FROM file_backup_msgs WHERE path=?
DELETE FROM sync_msgs WHERE messageID=?
DELETE FROM backup_msgs WHERE messageID=?
DELETE FROM file_backup_msgs WHERE messageID=?
DELETE FROM msgs_type WHERE messageID=?
UPDATE sync_msgs SET messageID=NULL WHERE messageID=?
UPDATE backup_msgs SET messageID=NULL WHERE messageID=?
UPDATE file_backup_msgs SET messageID=NULL WHERE messageID=?
SELECT domain, key, cloudEnabled FROM sync_msgs WHERE messageID=?
SELECT container, domain, key FROM backup_msgs WHERE messageID=?
SELECT path FROM file_backup_msgs WHERE messageID=?
SELECT domain, key, cloudEnabled FROM sync_msgs WHERE messageID IS NULL
SELECT container, domain, key FROM backup_msgs WHERE messageID IS NULL
SELECT path FROM file_backup_msgs WHERE messageID IS NULL
INSERT OR REPLACE INTO stashed_sync_msgs (domain, key, data) VALUES (?, ?, ?)
SELECT domain, key, data, two_way_sync, timestamp FROM stashed_sync_msgs
DELETE FROM stashed_sync_msgs
DELETE FROM msgs_type
DELETE FROM sync_msgs
DELETE FROM backup_msgs
DELETE FROM file_backup_msgs
path
T@"NSString",&,N,V_path
T^{sqlite3=},N,V_db
getMessageTypeForMessageID
T^{sqlite3_stmt=},N,V_getMessageTypeForMessageID
setMessageTypeForMessageID
T^{sqlite3_stmt=},N,V_setMessageTypeForMessageID
setMessageIDForSettingSync
T^{sqlite3_stmt=},N,V_setMessageIDForSettingSync
setMessageIDForSettingBackup
T^{sqlite3_stmt=},N,V_setMessageIDForSettingBackup
setMessageIDForFileBackup
T^{sqlite3_stmt=},N,V_setMessageIDForFileBackup
untrackSettingsSyncMessage
T^{sqlite3_stmt=},N,V_untrackSettingsSyncMessage
untrackSettingsBackupMessage
T^{sqlite3_stmt=},N,V_untrackSettingsBackupMessage
untrackFileBackupMessage
T^{sqlite3_stmt=},N,V_untrackFileBackupMessage
untrackSettingsSyncForMessageID
T^{sqlite3_stmt=},N,V_untrackSettingsSyncForMessageID
untrackSettingsBackupForMessageID
T^{sqlite3_stmt=},N,V_untrackSettingsBackupForMessageID
untrackFileBackupForMessageID
T^{sqlite3_stmt=},N,V_untrackFileBackupForMessageID
removeMessageFromMessageTypeTable
T^{sqlite3_stmt=},N,V_removeMessageFromMessageTypeTable
setNullMessageIDForSettingSync
T^{sqlite3_stmt=},N,V_setNullMessageIDForSettingSync
setNullMessageIDForSettingBackup
T^{sqlite3_stmt=},N,V_setNullMessageIDForSettingBackup
setNullMessageIDForFileBackup
T^{sqlite3_stmt=},N,V_setNullMessageIDForFileBackup
getSettingsSyncForMessageID
T^{sqlite3_stmt=},N,V_getSettingsSyncForMessageID
getSettingsBackupForMessageID
T^{sqlite3_stmt=},N,V_getSettingsBackupForMessageID
getFileBackupForMessageID
T^{sqlite3_stmt=},N,V_getFileBackupForMessageID
getSettingsSyncWithNullMessageID
T^{sqlite3_stmt=},N,V_getSettingsSyncWithNullMessageID
getSettingsBackupWithNullMessageID
T^{sqlite3_stmt=},N,V_getSettingsBackupWithNullMessageID
getFileBackupWithNullMessageID
T^{sqlite3_stmt=},N,V_getFileBackupWithNullMessageID
stashSettingsSyncData
T^{sqlite3_stmt=},N,V_stashSettingsSyncData
getStashedSettingSyncData
T^{sqlite3_stmt=},N,V_getStashedSettingSyncData
flushStashedSettingSyncData
T^{sqlite3_stmt=},N,V_flushStashedSettingSyncData
purgeMessageTypeTable
T^{sqlite3_stmt=},N,V_purgeMessageTypeTable
purgeSettingsSyncTable
T^{sqlite3_stmt=},N,V_purgeSettingsSyncTable
purgeSettingsBackupTable
T^{sqlite3_stmt=},N,V_purgeSettingsBackupTable
purgeFileBackupTable
T^{sqlite3_stmt=},N,V_purgeFileBackupTable
version
TI,R,N,V_version
System/Library/PreferencesSyncBundles
NPSDomains
NPSAction
NPSDefaultsDomain
NPSDefaultsKeys
NPSDefaultsKeyPrefixes
NPSChangeNotificationName
NPSContainer
NPSAppGroupContainer
NPSCloudEnabled
OneWaySync
TwoWaySync
Whitelist
Backup
NPSFileBackup
NPSFilePaths
NPSDirectoryPaths
<%@: %p key = "%@" twoWaySync = %d
%@%@>
T@"NSString",&,N,V_key
twoWaySync
TB,N,V_twoWaySync
isPrefix
TB,N,V_isPrefix
isCloudEnabled
TB,N,V_isCloudEnabled
<%@: %p domain = "%@" _keys = "%@"
keys
T@"NSMutableDictionary",&,N,V_keys
keyPrefixes
T@"NSMutableDictionary",&,N,V_keyPrefixes
<%@: %p key = "%@" notificationNames = "%@" twoWaySync = %d
notificationNames
T@"NSMutableSet",&,N,V_notificationNames
T@"BackupableUserDefaultsDomain",W,N,V_domain
T@"BackupableUserDefaultsContainer",W,N,V_container
domains
T@"NSMutableDictionary",&,N,V_domains
self ENDSWITH '.bundle'
B24@?0@"NSBundle"4@"NSString"8B12@"<NSObject>"16#20
Key %@ not found when expected.
Item in container for key %@ expected to be of type %@.
Key %@ expected to be of type %@.
v16@?0@"NSString"4B8@"NSString"12
syncedUserDefaults
T@"NSMutableDictionary",&,N,V_syncedUserDefaults
whitelisedUserDefaults
T@"NSMutableDictionary",&,N,V_whitelisedUserDefaults
backupableUserDefaultContainers
T@"NSMutableDictionary",&,N,V_backupableUserDefaultContainers
backupableFiles
T@"NSMutableSet",&,N,V_backupableFiles
backupableDirectories
T@"NSMutableSet",&,N,V_backupableDirectories
SIMULATOR_ROOT
%@ %@
value
-[NPSUserDefaultsMsgKey writeTo:]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/NanoPreferencesSyncDaemon_Sim/NanoPreferencesSync-220/nanoprefsyncd-shared/Protocols/NPSUserDefaultsMsgKey.m
nil != self->_key
hasValue
TB,R,N
T@"NSData",&,N,V_value
hasTwoWaySync
TB,N
NanoPreferencesSync
Cache/
database.db
-[NPSDeviceRegistry startMonitoringPairingEventsWithQueue:]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/NanoPreferencesSyncDaemon_Sim/NanoPreferencesSync-220/nanoprefsyncd-shared/NPSDeviceRegistry.m
queue
v4@?0
hasCheckedInWithNanoRegistry
TB,N,V_hasCheckedInWithNanoRegistry
pairedDevice
T@"NRDevice",&,N,V_pairedDevice
pairingID
T@"NSUUID",&,N,V_pairingID
pairingDataStore
T@"NSString",&,N,V_pairingDataStore
domainAccessor
T@"NPSDomainAccessor",&,N,V_domainAccessor
perGizmoCacheDirectoryPath
T@"NSString",&,N,V_perGizmoCacheDirectoryPath
globalCacheDirectoryPath
T@"NSString",&,N,V_globalCacheDirectoryPath
databasePath
T@"NSString",&,N,V_databasePath
T@"NSObject<OS_dispatch_queue>",R,N,V_queue
paired
TB,R,N,GisPaired
fileURL
hasFileURL
T@"NSData",&,N,V_fileURL
kind
feature
setting
restriction
userSettingsAndRestrictions
hasKind
T@"NSString",&,N,V_kind
hasFeature
T@"NSString",&,N,V_feature
hasSetting
T@"NSData",&,N,V_setting
hasRestriction
T@"NSData",&,N,V_restriction
hasUserSettingsAndRestrictions
T@"NSData",&,N,V_userSettingsAndRestrictions
com.apple.nanoprefsync
com.apple.private.alloy.preferencessync
content
UserDefaults/
UserDefaultsBackup/
FileBackup/
local-device-build-version
paired-device-build-version
timestamp
com.apple.nanoprefsync.workQueue
com.apple.notifyd.matching
Notification
v8@?0@"NSObject<OS_xpc_object>"4
v8@?0@"NSString"4
v12@?0@"NSString"4@"UserDefaultsKey"8
v16@?0@"NSString"4@"UserDefaultsKey"8^B12
v16@?0@"NSString"4@"NSMutableDictionary"8^B12
v16@?0@"NSString"4@"UserDefaultsDomain"8^B12
MessageSendTimeout
PurgeRetryDelay
v16@?0@"NSString"4@"NSSet"8B12
v16@?0@"NSString"4@"NSString"8@"NSSet"12
v16@?0@"NSString"4@"WhitelistedUserDefaultsKey"8^B12
hash
TI,R
superclass
T#,R
description
T@"NSString",R,C
debugDescription
%@|%@
v28@?0@"NSString"4@"NSString"8@"NSData"12B16d20
workQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_workQueue
settings
T@"NPSSettings",&,N,V_settings
xpcListener
T@"NSXPCListener",&,N,V_xpcListener
idsService
T@"IDSService",&,N,V_idsService
deviceRegistry
T@"NPSDeviceRegistry",&,N,V_deviceRegistry
database
T@"NPSDatabase",&,N,V_database
purgeTimer
T@"NSObject<OS_dispatch_source>",&,N,V_purgeTimer
-[NPSUserDefaultsMsg writeTo:]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/NanoPreferencesSyncDaemon_Sim/NanoPreferencesSync-220/nanoprefsyncd-shared/Protocols/NPSUserDefaultsMsg.m
nil != self->_domain
hasTimestamp
Td,N,V_timestamp
T@"NSMutableArray",&,N,V_keys
-[NPSUserDefaultsBackupMsgKey writeTo:]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/NanoPreferencesSyncDaemon_Sim/NanoPreferencesSync-220/nanoprefsyncd-shared/Protocols/NPSUserDefaultsBackupMsgKey.m
-[NPSUserDefaultsBackupMsg writeTo:]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/NanoPreferencesSyncDaemon_Sim/NanoPreferencesSync-220/nanoprefsyncd-shared/Protocols/NPSUserDefaultsBackupMsg.m
hasContainer
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>com.apple.managedconfiguration.profiled-access</key>
<true/>
<key>com.apple.private.ids.messaging</key>
<array>
<string>com.apple.private.alloy.preferencessync</string>
</array>
<key>com.apple.private.ignore-preferences-size-limits</key>
<true/>
<key>keychain-access-groups</key>
<array>
<string>apple</string>
<string>com.apple.certificates</string>
<string>com.apple.identities</string>
</array>
</dict>
</plist>
zPLR
