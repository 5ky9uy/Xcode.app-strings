alloc
_initWithHour:minute:
_initWithTime:
hour
minute
init
class
isKindOfClass:
stringWithFormat:
decodeIntegerForKey:
encodeInteger:forKey:
defaultStartTime
defaultEndTime
supportsSecureCoding
copyWithZone:
mutableCopyWithZone:
encodeWithCoder:
initWithCoder:
hash
isEqual:
description
_hour
_minute
setHour:
setMinute:
copy
UUID
startDate
details
decodeObjectOfClass:forKey:
initWithUUID:startDate:details:
encodeObject:forKey:
.cxx_destruct
_UUID
_startDate
_details
_initWithSettings:
interruptionBehaviorSetting
_initWithInterruptionBehaviorSetting:
_interruptionBehaviorSetting
setInterruptionBehaviorSetting:
interruptionBehavior
setInterruptionBehavior:
_init
containsDate:
endDate
compare:
dateInterval
initWithDateInterval:
isActiveForDate:
lifetimeType
_dateInterval
_initWithPeriod:
startTime
endTime
_initWithStartTime:endTime:
_startTime
_endTime
setStartTime:
setEndTime:
assertion
reason
initWithAssertion:reason:
_assertion
_reason
previousState
state
initWithPreviousState:state:reason:
_previousState
_state
date
initWithStartDate:duration:
lifetimeWithDateInterval:
sharedInstance
initWithEventUniqueID:occurrenceDate:onlyDuringEvent:
doesNotRecognizeSelector:
lifetimeWithDuration:
lifetimeWithCurrentLocation
lifetimeUntilEndOfCalendarEventWithUniqueID:occurrenceDate:
lifetimeWithCalendarEventUniqueID:occurrenceDate:
lifetimeForUserRequest
initWithClientIdentifier:auditUUID:timestamp:
timestamp
clientIdentifier
auditUUID
decodeInt64ForKey:
encodeInt64:forKey:
detailsRepresentingNowWithClientIdentifier:
debugDescription
_clientIdentifier
_auditUUID
_timestamp
eventUniqueID
occurrenceDate
isOnlyDuringEvent
decodeBoolForKey:
encodeBool:forKey:
_onlyDuringEvent
_eventUniqueID
_occurrenceDate
dateComponents
mapTableWithKeyOptions:valueOptions:
objectForKey:
_initWithClientIdentifier:
setObject:forKey:
resolveBehaviorForEventDetails:requestDetails:completionHandler:
initialize
serviceForClientIdentifier:
resolveBehaviorForEventDetails:error:
eventDetails
interruptionSuppression
initWithEventDetails:interruptionSuppression:
_eventDetails
_interruptionSuppression
isActive
willSuppressInterruptions
activeModeAssertionMetadata
setWithObjects:
decodeObjectOfClasses:forKey:
initWithActive:willSuppressInterruptions:activeModeAssertionMetadata:
_active
_willSuppressInterruptions
_activeModeAssertionMetadata
countByEnumeratingWithState:objects:count:
modeIdentifier
addObject:
allObjects
activeModeIdentifiers
immediateBypassEventSourceType
immediateBypassCNGroupIdentifier
repeatEventSourceBehaviorEnabledSetting
_initWithImmediateBypassEventSourceType:immediateBypassCNGroupIdentifier:repeatEventSourceBehaviorEnabledSetting:
_immediateBypassEventSourceType
_immediateBypassCNGroupIdentifier
_repeatEventSourceBehaviorEnabledSetting
setImmediateBypassEventSourceType:
setImmediateBypassCNGroupIdentifier:
setRepeatEventSourceBehaviorEnabledSetting:
hashTableWithOptions:
addEventListener:
queryStateWithRequestDetails:completionHandler:
_queue_registerForStateUpdatesIfRequired
removeObject:
_handleLostXPCConnection
stateService:didReceiveDoNotDisturbStateUpdate:
count
registerForStateUpdatesWithRequestDetails:completionHandler:
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
superclass
didReceiveConnectionInterruptedEventForRemoteService:
didReceiveConnectionInvalidatedEventForRemoteService:
remoteService:didReceiveDoNotDisturbStateUpdate:
remoteService:didReceiveModeAssertionInvalidation:
remoteService:didReceiveUpdatedBehaviorSettings:
remoteService:didReceiveUpdatedPhoneCallBypassSettings:
remoteService:didReceiveUpdatedScheduleSettings:
queryCurrentStateWithError:
addStateUpdateListener:withCompletionHandler:
removeStateUpdateListener:
_queue
_calloutQueue
_stateUpdateListeners
_registeredForUpdates
addStateUpdateListener:error:
removeStateUpdateListener:error:
_initWithDetails:
identifier
source
shouldAlwaysInterrupt
_initWithIdentifier:source:shouldAlwaysInterrupt:
UUIDString
_identifier
_source
_shouldAlwaysInterrupt
setIdentifier:
setSource:
setShouldAlwaysInterrupt:
dnds_privacyObfuscatedString
awakeAfterUsingCoder:
bundleWithPath:
dnd_locationBundle
scheduleEnabledSetting
timePeriod
bedtimeBehaviorEnabledSetting
initWithScheduleEnabledSetting:timePeriod:bedtimeBehaviorEnabledSetting:
_scheduleEnabledSetting
_timePeriod
_bedtimeBehaviorEnabledSetting
setScheduleEnabledSetting:
setTimePeriod:
setBedtimeBehaviorEnabledSetting:
userRequestedAssertionDetailsWithIdentifier:modeIdentifier:lifetime:
initWithIdentifier:modeIdentifier:lifetime:userRequested:syncSuppressionOptions:
lifetime
isUserRequested
syncSuppressionOptions
_lifetimeClasses
detailsWithIdentifier:modeIdentifier:lifetime:
_userRequested
_modeIdentifier
_lifetime
_syncSuppressionOptions
_initWithValue:type:
sourceWithDestinationIdentifier:
value
type
sourceWithCNContactIdentifier:
sourceWithPhoneNumber:
_value
_type
takeModeAssertionWithDetails:requestDetails:completionHandler:
_handleModeAssertionInvalidation:
invalidateActiveModeAssertionWithRequestDetails:completionHandler:
getActiveModeAssertionWithRequestDetails:completionHandler:
invalidateAllActiveModeAssertionsWithRequestDetails:completionHandler:
_queue_registerForAssertionUpdatesIfRequired
_handleLostXPCConnectionWithRetry:
containsObject:
modeAssertionService:didReceiveModeAssertionInvalidation:
registerForAssertionUpdatesWithRequestDetails:completionHandler:
_invalidateAllAssertionsWithReason:
takeModeAssertionWithDetails:error:
invalidateActiveModeAssertionWithError:
activeModeAssertionWithError:
invalidateAllActiveModeAssertionsWithError:
addAssertionUpdateListener:withCompletionHandler:
removeAssertionUpdateListener:
_assertionUpdateListeners
_activeAssertions
addAssertionUpdateListener:error:
removeAssertionUpdateListener:error:
activeDateInterval
initWithModeIdentifier:userRequested:lifetimeType:activeDateInterval:
_lifetimeType
_activeDateInterval
initWithMachServiceName:options:
setExportedInterface:
setExportedObject:
setRemoteObjectInterface:
_handleRemoteConnectionInterrupted
setInterruptionHandler:
_handleRemoteConnectionInvalidated
setInvalidationHandler:
resume
synchronousRemoteObjectProxyWithErrorHandler:
isEqualToString:
getBehaviorSettingsWithRequestDetails:completionHandler:
setBehaviorSettings:withRequestDetails:completionHandler:
getPhoneCallBypassSettingsWithRequestDetails:completionHandler:
setPhoneCallBypassSettings:withRequestDetails:completionHandler:
getScheduleSettingsWithRequestDetails:completionHandler:
setScheduleSettings:withRequestDetails:completionHandler:
registerForSettingsUpdatesWithRequestDetails:completionHandler:
deliverModeAssertionInvalidation:forClientIdentifier:
deliverStateUpdate:
deliverUpdatedBehaviorSettings:
deliverUpdatedPhoneCallBypassSettings:
deliverUpdatedScheduleSettings:
removeEventListener:
_connection
_eventListeners
interfaceWithProtocol:
_queue_registerForSettingsUpdatesIfRequired
settingsService:didReceiveUpdatedBehaviorSettings:
settingsService:didReceiveUpdatedPhoneCallBypassSettings:
settingsService:didReceiveUpdatedScheduleSettings:
behaviorSettingsReturningError:
setBehaviorSettings:error:
phoneCallBypassSettingsReturningError:
setPhoneCallBypassSettings:error:
scheduleSettingsReturningError:
setScheduleSettings:error:
addSettingsUpdateListener:withCompletionHandler:
removeSettingsUpdateListener:
_settingsUpdateListeners
setBehaviorSettings:returningError:
setPhoneCallBypassSettings:returningError:
setScheduleSettings:returningError:
addSettingsUpdateListener:error:
removeSettingsUpdateListener:error:
<%@: %p; hour: %lu; minute: %lu>
hour
minute
supportsSecureCoding
TB,R
TI,R,N,V_hour
TI,R,N,V_minute
TI,D,N
Lifetime expired
User changed state
Override ended by client
Override replaced by client
Server unresponsive
<unknown>
<none>
local devices
<%@: %p; UUID: %@; startDate: %@; details: %@>
UUID
startDate
details
T@"NSUUID",R,C,N,V_UUID
T@"NSDate",R,C,N,V_startDate
T@"DNDModeAssertionDetails",R,C,N,V_details
<%@: %p; interruptionBehaviorSetting: %@>
interruptionBehaviorSetting
TI,R,N,V_interruptionBehaviorSetting
interruptionBehavior
TI,R,D,N
v4@?0
com.apple.donotdisturb
BehaviorResolution
ModeAssertion
RemoteConnection
Settings
State
default
disabled
enabled
<invalid>
none
silence
delay delivery
<%@: %p; dateInterval: %@>
dateInterval
T@"NSDateInterval",R,C,N,V_dateInterval
<%@: %p; startTime: %@; endTime: %@>
startTime
endTime
T@"DNDScheduleTime",R,C,N,V_startTime
T@"DNDScheduleTime",R,C,N,V_endTime
T@"DNDScheduleTime",C,D,N
<%@: %p; assertion: %@; reason: %@>
assertion
reason
T@"DNDModeAssertion",R,C,N,V_assertion
TI,R,N,V_reason
<%@: %p; previousState: %@; state: %@; reason: %@>
previousState
state
T@"DNDState",R,C,N,V_previousState
T@"DNDState",R,C,N,V_state
lifetimeType
favorite
contact
contact from group
%@:%@
<%@: %p; clientIdentifier: '%@'; auditUUID: %@; timestamp: %llu>
clientIdentifier
auditUUID
timestamp
T@"NSString",R,C,N,V_clientIdentifier
T@"NSUUID",R,C,N,V_auditUUID
TQ,R,N,V_timestamp
<%@: %p; eventUniqueID: '%@'; occurrenceDate: %@; onlyDuringEvent: %@>
eventUniqueID
occurrenceDate
onlyDuringEvent
T@"NSString",R,C,N,V_eventUniqueID
T@"NSDate",R,C,N,V_occurrenceDate
TB,R,N,GisOnlyDuringEvent,V_onlyDuringEvent
calendar event
date interval
location
never interrupt
interrupt when unlocked
com.apple.donotdisturb.DNDEventBehaviorResolutionService.service.lock
v12@?0@"DNDClientEventBehavior"4@"NSError"8
user action
client action
lifetime
system state
<%@: %p; eventDetails: %@; interruptionSuppression: %@>
eventDetails
interruptionSuppression
T@"DNDClientEventDetails",R,C,N,V_eventDetails
TI,R,N,V_interruptionSuppression
<%@: %p; active: %@; willSuppressInterruptions: %@; activeModeAssertionMetadata: %@>
active
willSuppressInterruptions
activeModeAssertionMetadata
TB,R,N,V_willSuppressInterruptions
T@"NSArray",R,C,N,V_activeModeAssertionMetadata
TB,R,N,GisActive,V_active
activeModeIdentifiers
T@"NSArray",R,C,D,N
<%@: %p; immediateBypassEventSourceType: %@; immediateBypassCNGroupIdentifier: '%@'; repeatEventSourceBehaviorEnabledSetting: %@>
immediateBypassEventSourceType
immediateBypassCNGroupIdentifier
repeatEventSourceBehaviorEnabledSetting
TI,R,N,V_immediateBypassEventSourceType
T@"NSString",R,C,N,V_immediateBypassCNGroupIdentifier
TI,R,N,V_repeatEventSourceBehaviorEnabledSetting
T@"NSString",C,D,N
com.apple.donotdisturb.mode.default
com.apple.donotdisturb.DNDStateService.service.lock
com.apple.donotdisturb.StateService
com.apple.donotdisturb.StateService.call-out
v12@?0@"DNDState"4@"NSError"8
v12@?0B4@"NSError"8
hash
TI,R
superclass
T#,R
description
T@"NSString",R,C
debugDescription
T@"NSString",R,C,N
<%@: %p; identifier: '%@'; source: %@; shouldAlwaysInterrupt: %@>
identifier
source
shouldAlwaysInterrupt
T@"NSString",R,C,N,V_identifier
T@"DNDClientEventSource",R,C,N,V_source
TB,R,N,V_shouldAlwaysInterrupt
T@"DNDClientEventSource",C,D,N
TB,D,N
<%@: %p>
/System/Library/LocationBundles/DoNotDisturb.bundle
<%@: %p; scheduleEnabledSetting: %@; timePeriod: %@; bedtimeBehaviorEnabledSetting: %@>
scheduleEnabledSetting
timePeriod
bedtimeBehaviorEnabledSetting
TI,R,N,V_scheduleEnabledSetting
T@"DNDScheduleTimePeriod",R,C,N,V_timePeriod
TI,R,N,V_bedtimeBehaviorEnabledSetting
T@"DNDScheduleTimePeriod",C,D,N
<%@: %p; identifier: '%@'; modeIdentifier: '%@'; lifetime: %@; userRequested: %@; syncOptions: %@>
modeIdentifier
userRequested
syncSuppressionOptions
TB,R,N,GisUserRequested,V_userRequested
TI,R,N,V_syncSuppressionOptions
T@"NSString",R,C,N,V_modeIdentifier
T@"DNDModeAssertionLifetime",R,C,N,V_lifetime
<%@: %p; value: '%@'; type: %@>
value
type
TI,R,N,V_type
T@"NSString",R,C,N,V_value
CNContact Identifier
Destination Identifier
com.apple.donotdisturb.ModeAssertionService.service.lock
com.apple.donotdisturb.ModeAssertionService
com.apple.donotdisturb.ModeAssertionService.call-out
v16@?0@"DNDModeAssertion"4@"DNDModeAssertionInvalidation"8@"NSError"12
v12@?0@"DNDModeAssertionInvalidation"4@"NSError"8
v12@?0@"DNDModeAssertion"4@"NSError"8
<%@: %p; modeIdentifier: '%@'; userRequested: %@; lifetimeType: %@; activeDateInterval: %@>
activeDateInterval
TI,R,N,V_lifetimeType
T@"NSDateInterval",R,C,N,V_activeDateInterval
v8@?0@"NSError"4
v12@?0@"DNDBehaviorSettings"4@"NSError"8
v12@?0@"DNDBypassSettings"4@"NSError"8
v12@?0@"DNDScheduleSettings"4@"NSError"8
com.apple.donotdisturb.service
com.apple.donotdisturb.SettingsService
com.apple.donotdisturb.SettingsService.call-out
DNDScheduleTime
NSCopying
NSMutableCopying
NSSecureCoding
NSCoding
DNDMutableScheduleTime
DNDModeAssertion
DNDBehaviorSettings
DNDMutableBehaviorSettings
Deprecated
DNDModeAssertionDateIntervalLifetime
DNDScheduleTimePeriod
DNDMutableScheduleTimePeriod
DNDModeAssertionInvalidation
DNDStateUpdate
DNDModeAssertionLifetime
DNDRequestDetails
DNDModeAssertionCalendarEventLifetime
DateComponents
DNDEventBehaviorResolutionService
DNDClientEventBehavior
DNDState
DNDBypassSettings
DNDMutableBypassSettings
DNDStateService
DNDRemoteServiceConnectionEventListener
NSObject
DeprecatedUpdateListener
DNDClientEventDetails
DNDMutableClientEventDetails
DoNotDisturb
DNDModeAssertionLocationLifetime
DNDModeAssertionUserRequestedLifetime
DNDScheduleSettings
DNDMutableScheduleSettings
DNDModeAssertionDetails
DNDClientEventSource
DNDModeAssertionService
DNDStateModeAssertionMetadata
DNDRemoteServiceConnection
DNDRemoteServiceClientProtocol
DNDRemoteServiceClientModeAssertionProtocol
DNDRemoteServiceClientStateProtocol
DNDRemoteServiceClientSettingsProtocol
DNDRemoteServiceServerProtocol
DNDRemoteServiceServerBehaviorResolutionProtocol
DNDRemoteServiceServerModeAssertionProtocol
DNDRemoteServiceServerStateProtocol
DNDRemoteServiceServerSettingsProtocol
DNDSettingsService
@8@0:4
B8@0:4
@12@0:4^{_NSZone=}8
v12@0:4@8
@12@0:4@8
v12@0:4@"NSCoder"8
@12@0:4@"NSCoder"8
@16@0:4I8I12
I8@0:4
B12@0:4@8
v12@0:4I8
@20@0:4@8@12@16
v8@0:4
@"NSUUID"
@"NSDate"
@"DNDModeAssertionDetails"
@12@0:4I8
@"NSDateInterval"
@16@0:4@8@12
@"DNDScheduleTime"
@16@0:4@8I12
@"DNDModeAssertion"
@20@0:4@8@12I16
@"DNDState"
@16@0:4d8
@24@0:4@8@12Q16
Q8@0:4
@"NSString"
@20@0:4@8@12B16
@16@0:4@8^@12
@"DNDClientEventDetails"
@20@0:4B8B12@16
@"NSArray"
@20@0:4I8@12I16
#8@0:4
@12@0:4:8
@16@0:4:8@12
@20@0:4:8@12@16
B12@0:4#8
B12@0:4:8
Vv8@0:4
^{_NSZone=}8@0:4
B12@0:4@"Protocol"8
@"NSString"8@0:4
v16@0:4@8@12
v12@0:4@"DNDRemoteServiceConnection"8
v16@0:4@"DNDRemoteServiceConnection"8@"DNDStateUpdate"12
v16@0:4@"DNDRemoteServiceConnection"8@"DNDModeAssertionInvalidation"12
v16@0:4@"DNDRemoteServiceConnection"8@"DNDBehaviorSettings"12
v16@0:4@"DNDRemoteServiceConnection"8@"DNDBypassSettings"12
v16@0:4@"DNDRemoteServiceConnection"8@"DNDScheduleSettings"12
@12@0:4^@8
v16@0:4@8@?12
@"NSObject<OS_dispatch_queue>"
@"NSHashTable"
B16@0:4@8^@12
@"DNDClientEventSource"
v12@0:4B8
@"DNDScheduleTimePeriod"
@28@0:4@8@12@16B20I24
@"DNDModeAssertionLifetime"
B12@0:4^@8
@"NSMutableSet"
@24@0:4@8B12I16@20
v16@0:4@"DNDModeAssertionInvalidation"8@"NSString"12
v12@0:4@"DNDStateUpdate"8
v12@0:4@"DNDBehaviorSettings"8
v12@0:4@"DNDBypassSettings"8
v12@0:4@"DNDScheduleSettings"8
v20@0:4@8@12@?16
v20@0:4@"DNDClientEventDetails"8@"DNDRequestDetails"12@?<v@?@"DNDClientEventBehavior"@"NSError">16
v20@0:4@"DNDModeAssertionDetails"8@"DNDRequestDetails"12@?<v@?@"DNDModeAssertion"@"DNDModeAssertionInvalidation"@"NSError">16
v16@0:4@"DNDRequestDetails"8@?<v@?@"DNDModeAssertionInvalidation"@"NSError">12
v16@0:4@"DNDRequestDetails"8@?<v@?@"DNDModeAssertion"@"NSError">12
v16@0:4@"DNDRequestDetails"8@?<v@?B@"NSError">12
v16@0:4@"DNDRequestDetails"8@?<v@?@"DNDState"@"NSError">12
v16@0:4@"DNDRequestDetails"8@?<v@?@"DNDBehaviorSettings"@"NSError">12
v20@0:4@"DNDBehaviorSettings"8@"DNDRequestDetails"12@?<v@?B@"NSError">16
v16@0:4@"DNDRequestDetails"8@?<v@?@"DNDBypassSettings"@"NSError">12
v20@0:4@"DNDBypassSettings"8@"DNDRequestDetails"12@?<v@?B@"NSError">16
v16@0:4@"DNDRequestDetails"8@?<v@?@"DNDScheduleSettings"@"NSError">12
v20@0:4@"DNDScheduleSettings"8@"DNDRequestDetails"12@?<v@?B@"NSError">16
@"NSXPCConnection"
@(#)PROGRAM:DoNotDisturb  PROJECT:DoNotDisturb-1
com.apple.donotdisturb.DNDEventBehaviorResolutionService.resolveEvent
[%{public}@] Resolving behavior for event, details=%{public}@
[%{public}@] Error when resolving behavior, error='%{public}@'
[%{public}@] Resolved event, details=%{public}@ behavior=%{public}@
com.apple.donotdisturb.DNDStateService.queryCurrentState
[%{public}@] Processing state request
[%{public}@] Error when getting state, error='%{public}@'
[%{public}@] Got current state, state=%{public}@
com.apple.donotdisturb.DNDStateService.addStateUpdateListener
Adding state update listener: listener=%{public}@
Registered for state updates: listener=%{public}@
Did not register for state updates, will remove listener: listener=%{public}@
com.apple.donotdisturb.DNDStateService.removeStateUpdateListener
Removing state update listener: listener=%{public}@
Remote service interrupted: service=%{public}@
Remote service invalidated: service=%{public}@
com.apple.donotdisturb.DNDStateService.registerForStateUpdates
[%{public}@] Registering state update listener
[%{public}@] Error when registering state update listener, error='%{public}@'
SERIOUS ERROR: We lost our XPC connection to DND server and could not reconnect
com.apple.donotdisturb.DNDModeAssertionService.takeModeAssertion
[%{public}@] Taking mode assertion, details='%{public}@'
[%{public}@] Error when taking mode assertion, error='%{public}@'
[%{public}@] Took mode assertion, assertion=%{public}@
com.apple.donotdisturb.DNDModeAssertionService.invalidateActiveModeAssertion
[%{public}@] Invalidating active mode assertion
[%{public}@] Error when invalidating mode assertion, error='%{public}@'
[%{public}@] Invalidated mode assertion, invalidation=%{public}@
com.apple.donotdisturb.DNDModeAssertionService.activeModeAssertion
[%{public}@] Getting active mode assertion
[%{public}@] Error when requesting state override, error='%{public}@'
[%{public}@] Got mode assertion, assertion=%{public}@
com.apple.donotdisturb.DNDModeAssertionService.invalidateAllActiveModeAssertions
[%{public}@] Invalidating all active mode assertions
[%{public}@] Error when invalidating all active mode assertions, error='%{public}@'
[%{public}@] Invalidated all active mode assertions, success=%{BOOL}u
com.apple.donotdisturb.DNDModeAssertionService.addAssertionUpdateListener
[%{public}@] Adding assertion update listener: listener=%{public}@
[%{public}@]Registered for assertion updates: listener=%{public}@
[%{public}@] Did not register for assertion updates, will remove listener: listener=%{public}@
com.apple.donotdisturb.DNDModeAssertionService.removeAssertionUpdateListener
[%{public}@] Removing assertion update listener: listener=%{public}@
[%{public}@] Remote service interrupted: service=%{public}@
[%{public}@] Remote service invalidated: service=%{public}@
[%{public}@] Remote service got assertion invalidation: service=%{public}@, invalidation=%{public}@
[%{public}@] Will deliver assertion invalidation to listener: invalidation=%{public}@, listener=%{public}@
[%{public}@] Got assertion invalidation for assertion we don't think is active, will not deliver: invalidation=%{public}@
com.apple.donotdisturb.DNDModeAssertionService.registerForAssertionUpdates
[%{public}@] Registering assertion update listener
[%{public}@] Error when registering assertion update listener, error='%{public}@'
[%{public}@]  SERIOUS ERROR: We lost our XPC connection to DND server and could not reconnect
Remote service connection got assertion invalidation: invalidation=%{public}@, clientIdentifer=%{public}@
XPC connection was interrupted: connection=%p
XPC connection was invalidated, cannot recover: connection=%p
com.apple.donotdisturb.DNDSettingsService.behaviorSettings
[%{public}@] Error when getting behavior settings, error='%{public}@'
[%{public}@] Got behavior settings, settings=%{public}@
com.apple.donotdisturb.DNDSettingsService.setBehaviorSettings
[%{public}@] Set behavior settings, settings=%{public}@
[%{public}@] Error setting behavior settings, settings=%{public}@, error='%{public}@'
com.apple.donotdisturb.DNDSettingsService.bypassSettings
[%{public}@] Error when getting bypass settings, error='%{public}@'
[%{public}@] Got bypass settings, settings=%{public}@
com.apple.donotdisturb.DNDSettingsService.setBypassSettings
[%{public}@] Set bypass settings, settings=%{public}@
[%{public}@] Error setting bypass settings, settings=%{public}@, error='%{public}@'
com.apple.donotdisturb.DNDSettingsService.scheduleSettings
[%{public}@] Error when getting schedule settings, error='%{public}@'
[%{public}@] Got schedule settings, settings=%{public}@
com.apple.donotdisturb.DNDSettingsService.setScheduleSettings
[%{public}@] Set schedule settings, settings=%{public}@
[%{public}@] Error setting schedule settings, settings=%{public}@, error='%{public}@'
com.apple.donotdisturb.DNDSettingsService.addSettingsUpdateListener
Adding settings update listener: listener=%{public}@
Registered for settings updates: listener=%{public}@
Did not register for settings updates, will remove listener: listener=%{public}@
com.apple.donotdisturb.DNDSettingsService.removeSettingsUpdateListener
Removing settings update listener: listener=%{public}@
com.apple.donotdisturb.DNDSettingsService.registerForSettingsUpdates
[%{public}@] Registering settings update listener
[%{public}@] Error when registering settings update listener, error='%{public}@'
zPLR
zPLR
zPLR
zPLR
zPLR
