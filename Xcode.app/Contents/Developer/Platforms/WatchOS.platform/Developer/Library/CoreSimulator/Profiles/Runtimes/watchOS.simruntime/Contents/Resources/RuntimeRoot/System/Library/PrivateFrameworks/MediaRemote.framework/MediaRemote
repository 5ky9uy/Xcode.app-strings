MbP?
dealloc
stringWithFormat:
exceptionWithName:reason:userInfo:
raise
description
dictionaryRepresentation
dictionary
setObject:forKey:
numberWithFloat:
timeIntervalsCount
clearTimeIntervals
timeIntervalsAtIndex:
addTimeIntervals:
class
allocWithZone:
init
isMemberOfClass:
copyWithZone:
timeIntervals
setTimeIntervals:count:
setThumbnailsWidth:
setHasThumbnailsWidth:
hasThumbnailsWidth
setThumbnailsHeight:
setHasThumbnailsHeight:
hasThumbnailsHeight
readFrom:
writeTo:
copyTo:
isEqual:
hash
mergeFrom:
thumbnailsWidth
thumbnailsHeight
_timeIntervals
_thumbnailsHeight
_thumbnailsWidth
_has
removeAllObjects
alloc
addObject:
count
objectAtIndex:
numberWithInt:
numberWithBool:
numberWithDouble:
addContentItemIdentifiers:
countByEnumeratingWithState:objects:count:
setContext:
setRequestID:
contentItemIdentifiersCount
clearContentItemIdentifiers
contentItemIdentifiersAtIndex:
setPlayerPath:
setLabel:
contentItemIdentifiersType
setLocation:
setHasLocation:
hasLocation
setLength:
setHasLength:
hasLength
setIncludeMetadata:
setHasIncludeMetadata:
hasIncludeMetadata
setArtworkWidth:
setHasArtworkWidth:
hasArtworkWidth
setArtworkHeight:
setHasArtworkHeight:
hasArtworkHeight
setIncludeLyrics:
setHasIncludeLyrics:
hasIncludeLyrics
setIncludeSections:
setHasIncludeSections:
hasIncludeSections
setIncludeInfo:
setHasIncludeInfo:
hasIncludeInfo
setIncludeLanguageOptions:
setHasIncludeLanguageOptions:
hasIncludeLanguageOptions
hasContext
hasRequestID
setReturnContentItemAssetsInUserCompletion:
setHasReturnContentItemAssetsInUserCompletion:
hasReturnContentItemAssetsInUserCompletion
hasPlayerPath
setCachingPolicy:
setHasCachingPolicy:
hasCachingPolicy
hasLabel
setIsLegacyNowPlayingInfoRequest:
setHasIsLegacyNowPlayingInfoRequest:
hasIsLegacyNowPlayingInfoRequest
.cxx_destruct
location
length
includeMetadata
artworkWidth
artworkHeight
includeLyrics
includeSections
includeInfo
includeLanguageOptions
context
requestID
contentItemIdentifiers
setContentItemIdentifiers:
returnContentItemAssetsInUserCompletion
playerPath
cachingPolicy
label
isLegacyNowPlayingInfoRequest
_artworkHeight
_artworkWidth
_cachingPolicy
_contentItemIdentifiers
_context
_label
_length
_location
_playerPath
_requestID
_includeInfo
_includeLanguageOptions
_includeLyrics
_includeMetadata
_includeSections
_isLegacyNowPlayingInfoRequest
_returnContentItemAssetsInUserCompletion
numberWithUnsignedLongLong:
setProperties:
setControllerID:
setHasControllerID:
hasControllerID
hasProperties
controllerID
properties
_controllerID
_properties
setNowPlayingUpdates:
setArtworkUpdates:
setVolumeUpdates:
setKeyboardUpdates:
setOutputDeviceUpdates:
setUnderlyingCodableMessage:
underlyingCodableMessage
nowPlayingUpdates
artworkUpdates
volumeUpdates
keyboardUpdates
outputDeviceUpdates
initWithNowPlayingUpdates:artworkUpdates:volumeUpdates:keyboardUpdates:outputDeviceUpdates:
type
setToken:
setStartTime:
setHasStartTime:
hasStartTime
setEndTime:
setHasEndTime:
hasEndTime
hasToken
startTime
endTime
token
_endTime
_startTime
_token
setBuffer:
setTime:
hasBuffer
hasTime
setGain:
setHasGain:
hasGain
buffer
time
gain
_gain
_buffer
_time
setPairingFlags:
device
initWithRole:device:
open
removePeer
updatePeer
updateMediaRemotePairedDevice:
pairedPeerDevices
mediaRemotePairedDevices
isEqualToString:
enumerateKeysAndObjectsUsingBlock:
pairingManager
setInvalidationHandler:
setInterruptionHandler:
_createPeerDeviceFromPairedPeer:
getPairedPeersWithOptions:completion:
invalidate
info
objectForKey:
setUniqueIdentifier:
identifier
UUIDString
name
model
initWithUUIDString:
setIdentifier:
setName:
setModel:
peerIdentifier
mutableCopy
setInfo:
savePairedPeer:options:completion:
removePairedPeer:options:completion:
systemPairingAvailable
globalPairingQueue
setDispatchQueue:
initializePairingSession:
shouldRetry
shouldAutoRetryPairingExchange:
addPeer
pairedPeerDevice
pairedPeerFromPeerDevice:
initWithMaxLowPriorityMessagesAllowed:
allValues
initWithUnderlyingCodableMessage:error:
UUID
copy
_dataForMessage:
initWithMessage:createDataBlock:
push:
peek
delegate
data
readPosition
messageQueue:processData:atReadPosition:
setReadPosition:
isFinished
message
messageQueue:didSendMessage:
flush
messageQueue:didPurgeMessage:
removeObjectForKey:
setIsReply:
isReply
datasource
messageQueue:dataForMessage:
setDatasource:
setDelegate:
enqueueMessage:reply:queue:
reply:
_serialQueue
_datasource
_delegate
_pendingMessageQueue
_pendingReplyQueue
canPurge
_data
_message
_dataBlock
_readPosition
messagePurgedCallbacks
invokeWithObject:
priority
_purge
stringWithUTF8String:
currentHandler
handleFailureInMethod:object:file:lineNumber:description:
removeObject:
firstObject
removeObjectAtIndex:
_messages
_lowPriorityMessagesCount
_maxLowPriorityMessagesAllowed
setOutputDeviceUID:
hasOutputDeviceUID
outputDeviceUID
_outputDeviceUID
initWithContextType:addingDeviceUIDs:removingDeviceUIDs:settingDeviceUIDs:
setOutputContextType:
setAddingOutputDeviceUIDs:
setRemovingOutputDeviceUIDs:
setSettingOutputDeviceUIDs:
outputContextType
addingOutputDeviceUIDs
removingOutputDeviceUIDs
settingOutputDeviceUIDs
addDevicesRequestMessageWithContextType:outputDeviceUIDs:
removeDevicesRequestMessageWithContextType:outputDeviceUIDs:
setDevicesRequestMessageWithContextType:outputDeviceUIDs:
contextType
descriptor
addOutputDevices:
outputDevices
initWithCapacity:
initWithDescriptor:
initWithOutputDevices:
_outputDevices
setOutputDeviceUIDs:
outputDeviceUIDs
initWithOutputDeviceUIDs:
numberWithUnsignedLong:
dictionaryWithObjects:forKeys:count:
unsignedLongValue
setNumberStyle:
numberFromString:
setRequest:
nowPlayingInfo
setArtworkDataDigest:
artworkDataDigest
supportedCommands
setSupportedCommands:
playbackQueue
setNowPlayingInfo:
setDisplayName:
displayName
setDisplayID:
displayID
setPlaybackQueue:
initWithData:
setPlaybackState:
playbackState
setPlaybackQueueCapabilities:
playbackQueueCapabilities
request
setPlaybackStateTimestamp:
initWithSettings:
initWithFormat:packetCapacity:maximumPacketSize:
initWithFormatSettings:packetCapacity:maximumPacketSize:
formatSettings
_formatSettings
packetCapacity
packetCount
setPacketCount:
packetDescriptions
setRoute:
hasRoute
inputType
setInputType:
setHasInputType:
hasInputType
inputTypeAsString:
StringAsInputType:
route
_inputType
_route
addSupportedCommand:
supportedCommandsCount
clearSupportedCommands
supportedCommandAtIndex:
supportedCommandType
_supportedCommands
initWithNowPlayingState:
state
setState:
initWithConnectionState:
encryptionType
setHiliteMode:
hiliteMode
initWithHiliteMode:
setClient:
client
initWithClient:
initWithPlayerPath:
addContentItems:
contentItems
initWithContentItems:forPlayerPath:
hasNowPlayingInfo
hasSupportedCommands
hasPlaybackQueue
hasDisplayID
hasDisplayName
setHasPlaybackState:
hasPlaybackState
playbackStateAsString:
StringAsPlaybackState:
hasPlaybackQueueCapabilities
hasRequest
setHasPlaybackStateTimestamp:
hasPlaybackStateTimestamp
playbackStateTimestamp
_playbackStateTimestamp
_displayID
_displayName
_nowPlayingInfo
_playbackQueue
_playbackQueueCapabilities
_playbackState
_request
sharedAVSystemController
setAttribute:forKey:error:
sharedManager
localOriginClient
setCanBeNowPlayingApp:
isOverrideApp
setIsOverrideApp:
originClientForOrigin:
setActiveNowPlayingClient:
clientForPlayerPath:
setActivePlayer:
date
timeIntervalSinceReferenceDate
handleFailureInFunction:file:lineNumber:description:
updateClient:
playerClientForPlayerPath:
updatePlayer:
sharedServiceClient
workerQueue
playerClientRequestsForPlayerPath:
handlePlaybackStateRequestWithCompletion:
initWithTimeIntervalSinceReferenceDate:
updatePlaybackState:date:
isLocal
numberWithUnsignedInt:
setObject:forKeyedSubscript:
notificationClient
dispatchNotification:userInfo:object:
registerForNowPlayingNotificationsWithQueue:
unregisterForNowPlayingNotifications
registerForNowPlayingNotificationsWithQueue:force:
nowPlayingNotifications
allObjects
clientCallbacks
setVideoThumbnailsCallback:
setAudioAmplitudeSamplesCallback:
addCharacteristics:
setLanguageTag:
characteristicsCount
clearCharacteristics
characteristicsAtIndex:
characteristicsType
setType:
setHasType:
hasType
hasLanguageTag
hasIdentifier
languageTag
characteristics
setCharacteristics:
_characteristics
_identifier
_languageTag
_type
setImageData:
imageData
numberWithLongLong:
setAlbum:
setArtist:
setTitle:
setRadioStationHash:
setRadioStationName:
hasAlbum
hasArtist
setDuration:
setHasDuration:
hasDuration
setElapsedTime:
setHasElapsedTime:
hasElapsedTime
setPlaybackRate:
setHasPlaybackRate:
hasPlaybackRate
repeatMode
setRepeatMode:
setHasRepeatMode:
hasRepeatMode
repeatModeAsString:
StringAsRepeatMode:
shuffleMode
setShuffleMode:
setHasShuffleMode:
hasShuffleMode
shuffleModeAsString:
StringAsShuffleMode:
setTimestamp:
setHasTimestamp:
hasTimestamp
hasTitle
setHasUniqueIdentifier:
hasUniqueIdentifier
setIsExplicitTrack:
setHasIsExplicitTrack:
hasIsExplicitTrack
setIsMusicApp:
setHasIsMusicApp:
hasIsMusicApp
setRadioStationIdentifier:
setHasRadioStationIdentifier:
hasRadioStationIdentifier
hasRadioStationHash
hasRadioStationName
hasArtworkDataDigest
setIsAlwaysLive:
setHasIsAlwaysLive:
hasIsAlwaysLive
setIsAdvertisement:
setHasIsAdvertisement:
hasIsAdvertisement
album
artist
duration
elapsedTime
playbackRate
timestamp
title
uniqueIdentifier
isExplicitTrack
isMusicApp
radioStationIdentifier
radioStationHash
radioStationName
isAlwaysLive
isAdvertisement
_duration
_elapsedTime
_radioStationIdentifier
_timestamp
_uniqueIdentifier
_album
_artist
_artworkDataDigest
_playbackRate
_radioStationHash
_radioStationName
_repeatMode
_shuffleMode
_title
_isAdvertisement
_isAlwaysLive
_isExplicitTrack
_isMusicApp
setSampleRate:
setHasSampleRate:
hasSampleRate
sampleRate
_sampleRate
setOptions:
setSenderAppDisplayID:
setDestinationAppDisplayID:
setRemoteControlInterfaceID:
setAppOptions:
command
setCommand:
setHasCommand:
hasCommand
commandAsString:
StringAsCommand:
hasOptions
setOriginUID:
setHasOriginUID:
hasOriginUID
hasSenderAppDisplayID
hasDestinationAppDisplayID
setDestinationAppProcessID:
setHasDestinationAppProcessID:
hasDestinationAppProcessID
hasRemoteControlInterfaceID
hasAppOptions
options
originUID
senderAppDisplayID
destinationAppDisplayID
destinationAppProcessID
remoteControlInterfaceID
appOptions
_destinationAppProcessID
_appOptions
_command
_destinationAppDisplayID
_options
_originUID
_remoteControlInterfaceID
_senderAppDisplayID
hasButtons
hasMotion
initWithGameControllerEvent:controllerID:
event
shouldLog
_priority
initWithGameControllerProperties:controllerID:
initWithProperties:
initWithControllerID:
setInputModeFlags:
inputModeFlags
initWithInputMode:
inputMode
addAvailableLanguageOptions:
addCurrentLanguageOptions:
addSections:
setMetadata:
setArtworkData:
availableLanguageOptionsCount
clearAvailableLanguageOptions
availableLanguageOptionsAtIndex:
currentLanguageOptionsCount
clearCurrentLanguageOptions
currentLanguageOptionsAtIndex:
setLyrics:
sectionsCount
clearSections
sectionsAtIndex:
setParentIdentifier:
setAncestorIdentifier:
setQueueIdentifier:
setRequestIdentifier:
availableLanguageOptionsType
currentLanguageOptionsType
sectionsType
hasMetadata
hasArtworkData
hasInfo
hasLyrics
hasParentIdentifier
hasAncestorIdentifier
hasQueueIdentifier
hasRequestIdentifier
setArtworkDataWidth:
setHasArtworkDataWidth:
hasArtworkDataWidth
setArtworkDataHeight:
setHasArtworkDataHeight:
hasArtworkDataHeight
metadata
artworkData
availableLanguageOptions
setAvailableLanguageOptions:
currentLanguageOptions
setCurrentLanguageOptions:
lyrics
sections
setSections:
parentIdentifier
ancestorIdentifier
queueIdentifier
requestIdentifier
artworkDataWidth
artworkDataHeight
_ancestorIdentifier
_artworkData
_artworkDataHeight
_artworkDataWidth
_availableLanguageOptions
_currentLanguageOptions
_info
_lyrics
_metadata
_parentIdentifier
_queueIdentifier
_requestIdentifier
_sections
setRequestByRange:
setRequestByIdentifiers:
requestByRange
requestByIdentifiers
requestByRequest
setLaunchApplication:
setHasLaunchApplication:
hasLaunchApplication
launchApplication
_launchApplication
initWithDesignatedGroupLeader:outputDevices:
localDeviceUID
initWithOutputContext:
defaultCenter
_outputContextDevicesDidChangeNotification:
addObserver:selector:name:object:
_reloadOutputDevicesFromContext
initWithOutputContext:wantsUpdates:
removeObserver:
decodeObjectOfClass:forKey:
createOutputContextWithUniqueIdentifier:
encodeObject:forKey:
setEndpoint:
scheduleEndpointOutputDevicesDidChangeNotification
addOutputDevices:withCallbackQueue:block:
_localizeOutputDevices:withReplyQueue:completion:
removeOutputDevices:withCallbackQueue:block:
setOutputDevices:withCallbackQueue:block:
setVolume:outputDeviceUID:
volumeForOutputDeviceUID:
volumeControlCapabilitiesForOutputDeviceUID:
postNotificationName:object:userInfo:
arrayWithObject:
initWithOutputDeviceUIDs:outputDeviceGroupID:features:
array
beginSearchWithTimeout:completion:
setOutputDevices:
supportsSecureCoding
encodeWithCoder:
initWithCoder:
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
superclass
debugDescription
outputContextDataSource:didAddOutputDevice:
outputContextDataSource:didRemoveOutputDevice:
outputContextDataSource:outputDevice:didChangeVolume:
outputContextDataSource:outputDevice:didChangeVolumeControlCapabilities:
connectionType
isProxyGroupPlayer
canModifyGroupMembership
addOutputDevices:withReplyQueue:completion:
removeOutputDevices:withReplyQueue:completion:
setOutputDevices:withReplyQueue:completion:
setOutputDeviceVolume:outputDevice:queue:completion:
outputDeviceVolume:queue:completion:
volumeControlCapabilitiesForOutputDevice:queue:completion:
removeOutputDeviceFromParentGroup:queue:completion:
_outputContext
_outputContextController
setHasState:
hasState
stateAsString:
StringAsState:
_state
setRouteUID:
hasRouteUID
routeUID
_routeUID
setVolume:
setHasVolume:
hasVolume
volume
_volume
setCapabilities:
setEndpointUID:
hasCapabilities
hasEndpointUID
capabilities
endpointUID
_capabilities
_endpointUID
setEvent:
setVirtualDeviceID:
setHasVirtualDeviceID:
hasVirtualDeviceID
hasEvent
virtualDeviceID
_virtualDeviceID
_event
isLocalDevice
groupID
deviceType
deviceSubtype
canAccessRemoteAssets
isRemoteControllable
canRelayCommunicationChannel
supportsBufferedAirPlay
isGroupable
isDeviceGroupable
isGroupLeader
groupContainsGroupLeader
isAirPlayReceiverSessionActive
parentGroupContainsDiscoverableLeader
parentGroupIdentifier
canAccessAppleMusic
canAccessiCloudMusicLibrary
canPlayEncryptedProgressiveDownloadAssets
canFetchMediaDataFromSender
presentsOptimizedUserInterfaceWhenPlayingFetchedAudioOnlyAssets
isAddedToHomeKit
logicalDeviceID
setLogicalDeviceID:
setGroupID:
modelID
setModelID:
MACAddress
setMacAddress:
setCanAccessRemoteAssets:
setCanAccessAppleMusic:
setCanAccessiCloudMusicLibrary:
setCanPlayEncryptedProgressiveDownloadAssets:
setCanFetchMediaDataFromSender:
setPresentsOptimizedUserInterfaceWhenPlayingFetchedAudioOnlyAssets:
setIsRemoteControllable:
setCanRelayCommunicationChannel:
setSupportsBufferedAirPlay:
setIsGroupLeader:
setGroupContainsGroupLeader:
setIsAirPlayReceiverSessionActive:
setParentGroupContainsDiscoverableLeader:
setParentGroupIdentifier:
setIsGroupable:
setIsDeviceGroupable:
setIsProxyGroupPlayer:
setDeviceType:
setDeviceSubType:
setIsAddedToHomeKit:
volumeCapabilities
setVolumeCapabilities:
isVolumeControlAvailable
setIsVolumeControlAvailable:
modelSpecificInfo
setModelSpecificInfoData:
hasBatteryLevel
batteryLevel
setBatteryLevel:
setIsLocalDevice:
supportsExternalScreen
setSupportsExternalScreen:
requiresAuthorization
setRequiresAuthorization:
sourceInfo
routingContextUID
setRoutingContextUID:
multipleBuiltInDevices
setMultipleBuiltInDevices:
setSourceInfo:
arrayWithCapacity:
componentsJoinedByString:
localDeviceLocalizedName
capabilitiesDescription
composedTypeDescription
roleDescription
jsonEncodableDictionaryRepresentation
firmwareVersion
playingPairedDeviceName
supportsRapport
isPickedOnPairedDevice
endpoint
_canAccessRemoteAssets
_canAccessAppleMusic
_canAccessiCloudMusicLibrary
_canPlayEncryptedProgressiveDownloadAssets
_canFetchMediaDataFromSender
_presentsOptimizedUserInterfaceWhenPlayingFetchedAudioOnlyAssets
_remoteControllable
_groupLeader
_groupContainsGroupLeader
_airPlayReceiverSessionActive
_groupable
_proxyGroupPlayer
_canRelayCommunicationChannel
_supportsBufferedAirPlay
_supportsRapport
_isAddedToHomeKit
_deviceGroupable
_pickedOnPairedDevice
_hasBatteryLevel
_localDevice
_supportsExternalScreen
_requiresAuthorization
_parentGroupContainsDiscoverableLeader
_volumeControlAvailable
_name
_uid
_modelID
_firmwareVersion
_groupID
_logicalDeviceID
_MACAddress
_modelSpecificInfo
_playingPairedDeviceName
_deviceType
_deviceSubtype
_batteryLevel
_parentGroupIdentifier
_sourceInfo
_endpoint
_onqueue_clearCachedAVOutputDeviceProperties
identifyingMACAddress
modelSpecificInformation
_playingPairedDeviceNameForAVOutputDevice:
canBeGroupLeader
canBeGrouped
participatesInGroupPlayback
isInUseByPairedDevice
deviceSubType
sharedLocalDevice
deviceFeatures
supportsVolumeControl
canSetVolume
sharedAudioPresentationContext
_isOutputDevice:belongToOutputContext:
pairedDevicesConnectedToOutputDevice:
isPlaying
initWithAVOutputDevice:sourceInfo:
avOutputDevice
setAVOutputDevice:
_accessSerialQueue
_avOutputDevice
_overrideGroupID
modelSpecificInfoData
setWithObject:
initWithRoutingContextUID:multipleBuiltInDevices:
initWithFormat:
macAddress
hasVolumeCapabilities
initWithSkeleton:
_protobuf
deviceID
decodeIntegerForKey:
decodeBoolForKey:
encodeInteger:forKey:
encodeBool:forKey:
_copyWithZone:usingConcreteClass:
mutableCopyWithZone:
hostName
hostPort
deviceInfo
supportedMessages
paired
usingSystemPairing
_hostName
_hostPort
_supportedMessages
_deviceInfo
_paired
_usingSystemPairing
setHostName:
setHostPort:
setSupportedMessages:
setDeviceInfo:
setPaired:
setUsingSystemPairing:
setRegisteredCallbacks:
setNotifications:
getExternalDeviceMetadataWithCompletion:
getCustomOriginDataWithCompletion:
getConnectionStateWithCompletion:
connectWithOptions:
disconnect:
unpair
outputDeviceVolume:withCompletion:
setOutputDeviceVolume:forOutputDevice:withCompletion:
outputDeviceVolumeControlCapabilities:withCompletion:
modifyOutputContextOfType:addingDeviceUIDs:removingDeviceUIDs:settingDeviceUIDs:completion:
sendCustomData:withName:
pingWithTimeout:callback:
sendButtonEventWithUsagePage:usage:down:
interfaceWithProtocol:
hostedExternalDeviceConnectionStateDidChange:withError:
hostedExternalDeviceNameDidChange:
hostedExternalDeviceDidReceiveCustomData:withName:
hostedExternalDeviceVolumeDidChange:forEndpointWithIdentifier:forOutputDeviceWithIdentifier:
hostedExternalDeviceEndpointDidChange:
hostedExternalDeviceVolumeCapabilitiesDidChange:forEndpointWithIdentifier:forOutputDeviceWithIdentifier:
_init
initWithListenerEndpoint:
serviceInterface
setRemoteObjectInterface:
clientInterface
setExportedInterface:
exportedInterface
protocol
weakProxyWithObject:protocol:
setExportedObject:
resume
_handleDeviceInfoDidChange:
_updateHostedDeviceDesiredNotifications
_hostedExternalDeviceConnection
_onSerialQueue_synchronousLoadExternalDeviceMetadataIfNecessary
synchronousRemoteObjectProxyWithErrorHandler:
userInfo
_remoteObjectProxyWithErrorHandler:
remoteObjectProxy
setConnectionStateCallback:
setConnectionStateCallbackQueue:
_updateHostedDeviceDesiredCallbacks
setNameCallback:
setNameCallbackQueue:
setCustomDataCallback:
setCustomDataCallbackQueue:
setVolumeCallback:
setVolumeCallbackQueue:
connectionStateCallback
connectionStateCallbackQueue
_notificationSerialQueue
nameCallbackQueue
nameCallback
customDataCallbackQueue
customDataCallback
volumeCallbackQueue
volumeCallback
setDistantExternalDevice:
remoteObjectProxyWithErrorHandler:
initWithExternalDeviceListenerEndpoint:
listenerEndpoint
isValid
port
wantsNowPlayingNotifications
setWantsNowPlayingNotifications:
wantsVolumeNotifications
setWantsVolumeNotifications:
wantsOutputDeviceNotifications
setWantsOutputDeviceNotifications:
connectionState
isPaired
isUsingSystemPairing
customOrigin
setPairingCallback:withQueue:
setConnectionStateCallback:withQueue:
setNameCallback:withQueue:
setPairingAllowedCallback:withQueue:
setCustomDataCallback:withQueue:
setVolumeCallback:withQueue:
setOutputDeviceVolume:outputDeviceUID:queue:completion:
outputDeviceVolumeControlCapabilities:queue:completion:
modifyOutputContextOfType:addingDeviceUIDs:removingDeviceUIDs:settingDeviceUIDs:withReplyQueue:completion:
ping:callback:withQueue:
sendButtonEvent:
hasEverAttemptedToConnect
_externalDeviceMetadata
_callbacks
_deviceNotifications
_connectionState
_customOrigin
_hasEverAttemptedToConnect
_connectionStateCallback
_connectionStateCallbackQueue
_nameCallback
_nameCallbackQueue
_customDataCallback
_customDataCallbackQueue
_volumeCallback
_volumeCallbackQueue
setSubtitle:
setAlbumName:
setTrackArtistName:
setAlbumArtistName:
setDirectorName:
setLocalizedContentRating:
setCollectionIdentifier:
setProfileIdentifier:
setArtworkMIMEType:
setAssetURLString:
setComposer:
setGenre:
setContentIdentifier:
setRadioStationString:
setPurchaseInfoData:
setAppMetricsData:
setSeriesName:
setNowPlayingInfoData:
setUserInfoData:
setArtworkURL:
setLyricsURL:
setDeviceSpecificUserInfoData:
setCollectionInfoData:
setServiceIdentifier:
setCurrentPlaybackDateData:
setArtworkIdentifier:
setArtworkURLTemplatesData:
hasSubtitle
setIsContainer:
setHasIsContainer:
hasIsContainer
setIsPlayable:
setHasIsPlayable:
hasIsPlayable
setPlaybackProgress:
setHasPlaybackProgress:
hasPlaybackProgress
hasAlbumName
hasTrackArtistName
hasAlbumArtistName
hasDirectorName
setSeasonNumber:
setHasSeasonNumber:
hasSeasonNumber
setEpisodeNumber:
setHasEpisodeNumber:
hasEpisodeNumber
setReleaseDate:
setHasReleaseDate:
hasReleaseDate
setPlayCount:
setHasPlayCount:
hasPlayCount
hasLocalizedContentRating
setIsExplicitItem:
setHasIsExplicitItem:
hasIsExplicitItem
setPlaylistType:
setHasPlaylistType:
hasPlaylistType
setRadioStationType:
setHasRadioStationType:
hasRadioStationType
setArtworkAvailable:
setHasArtworkAvailable:
hasArtworkAvailable
setInfoAvailable:
setHasInfoAvailable:
hasInfoAvailable
setLanguageOptionsAvailable:
setHasLanguageOptionsAvailable:
hasLanguageOptionsAvailable
setNumberOfSections:
setHasNumberOfSections:
hasNumberOfSections
setLyricsAvailable:
setHasLyricsAvailable:
hasLyricsAvailable
setEditingStyleFlags:
setHasEditingStyleFlags:
hasEditingStyleFlags
setIsStreamingContent:
setHasIsStreamingContent:
hasIsStreamingContent
setIsCurrentlyPlaying:
setHasIsCurrentlyPlaying:
hasIsCurrentlyPlaying
hasCollectionIdentifier
hasProfileIdentifier
hasArtworkMIMEType
hasAssetURLString
hasComposer
setDiscNumber:
setHasDiscNumber:
hasDiscNumber
hasGenre
setChapterCount:
setHasChapterCount:
hasChapterCount
setTotalDiscCount:
setHasTotalDiscCount:
hasTotalDiscCount
setTotalTrackCount:
setHasTotalTrackCount:
hasTotalTrackCount
setTrackNumber:
setHasTrackNumber:
hasTrackNumber
hasContentIdentifier
setIsSharable:
setHasIsSharable:
hasIsSharable
setIsLiked:
setHasIsLiked:
hasIsLiked
setIsInWishList:
setHasIsInWishList:
hasIsInWishList
hasRadioStationString
setITunesStoreIdentifier:
setHasITunesStoreIdentifier:
hasITunesStoreIdentifier
setITunesStoreSubscriptionIdentifier:
setHasITunesStoreSubscriptionIdentifier:
hasITunesStoreSubscriptionIdentifier
setITunesStoreArtistIdentifier:
setHasITunesStoreArtistIdentifier:
hasITunesStoreArtistIdentifier
setITunesStoreAlbumIdentifier:
setHasITunesStoreAlbumIdentifier:
hasITunesStoreAlbumIdentifier
hasPurchaseInfoData
setDefaultPlaybackRate:
setHasDefaultPlaybackRate:
hasDefaultPlaybackRate
setDownloadState:
setHasDownloadState:
hasDownloadState
setDownloadProgress:
setHasDownloadProgress:
hasDownloadProgress
hasAppMetricsData
hasSeriesName
setMediaType:
setHasMediaType:
hasMediaType
setMediaSubType:
setHasMediaSubType:
hasMediaSubType
hasNowPlayingInfoData
hasUserInfoData
setIsSteerable:
setHasIsSteerable:
hasIsSteerable
hasArtworkURL
hasLyricsURL
hasDeviceSpecificUserInfoData
hasCollectionInfoData
setElapsedTimeTimestamp:
setHasElapsedTimeTimestamp:
hasElapsedTimeTimestamp
setInferredTimestamp:
setHasInferredTimestamp:
hasInferredTimestamp
hasServiceIdentifier
setArtworkDataWidthDeprecated:
setHasArtworkDataWidthDeprecated:
hasArtworkDataWidthDeprecated
setArtworkDataHeightDeprecated:
setHasArtworkDataHeightDeprecated:
hasArtworkDataHeightDeprecated
hasCurrentPlaybackDateData
hasArtworkIdentifier
setIsLoading:
setHasIsLoading:
hasIsLoading
hasArtworkURLTemplatesData
setLegacyUniqueIdentifier:
setHasLegacyUniqueIdentifier:
hasLegacyUniqueIdentifier
setEpisodeType:
setHasEpisodeType:
hasEpisodeType
subtitle
isContainer
isPlayable
playbackProgress
albumName
trackArtistName
albumArtistName
directorName
seasonNumber
episodeNumber
releaseDate
playCount
localizedContentRating
isExplicitItem
playlistType
radioStationType
artworkAvailable
infoAvailable
languageOptionsAvailable
numberOfSections
lyricsAvailable
editingStyleFlags
isStreamingContent
isCurrentlyPlaying
collectionIdentifier
profileIdentifier
artworkMIMEType
assetURLString
composer
discNumber
genre
chapterCount
totalDiscCount
totalTrackCount
trackNumber
contentIdentifier
isSharable
isLiked
isInWishList
radioStationString
iTunesStoreIdentifier
iTunesStoreSubscriptionIdentifier
iTunesStoreArtistIdentifier
iTunesStoreAlbumIdentifier
purchaseInfoData
defaultPlaybackRate
downloadState
downloadProgress
appMetricsData
seriesName
mediaType
mediaSubType
nowPlayingInfoData
userInfoData
isSteerable
artworkURL
lyricsURL
deviceSpecificUserInfoData
collectionInfoData
elapsedTimeTimestamp
inferredTimestamp
serviceIdentifier
artworkDataWidthDeprecated
artworkDataHeightDeprecated
currentPlaybackDateData
artworkIdentifier
isLoading
artworkURLTemplatesData
legacyUniqueIdentifier
episodeType
_elapsedTimeTimestamp
_iTunesStoreAlbumIdentifier
_iTunesStoreArtistIdentifier
_iTunesStoreIdentifier
_iTunesStoreSubscriptionIdentifier
_inferredTimestamp
_legacyUniqueIdentifier
_releaseDate
_albumArtistName
_albumName
_appMetricsData
_artworkDataHeightDeprecated
_artworkDataWidthDeprecated
_artworkIdentifier
_artworkMIMEType
_artworkURL
_artworkURLTemplatesData
_assetURLString
_chapterCount
_collectionIdentifier
_collectionInfoData
_composer
_contentIdentifier
_currentPlaybackDateData
_defaultPlaybackRate
_deviceSpecificUserInfoData
_directorName
_discNumber
_downloadProgress
_downloadState
_editingStyleFlags
_episodeNumber
_episodeType
_genre
_localizedContentRating
_lyricsURL
_mediaSubType
_mediaType
_nowPlayingInfoData
_numberOfSections
_playCount
_playbackProgress
_playlistType
_profileIdentifier
_purchaseInfoData
_radioStationString
_radioStationType
_seasonNumber
_seriesName
_serviceIdentifier
_subtitle
_totalDiscCount
_totalTrackCount
_trackArtistName
_trackNumber
_userInfoData
_artworkAvailable
_infoAvailable
_isContainer
_isCurrentlyPlaying
_isExplicitItem
_isInWishList
_isLiked
_isLoading
_isPlayable
_isSharable
_isSteerable
_isStreamingContent
_languageOptionsAvailable
_lyricsAvailable
setDiagnosticInfo:
setDateGenerated:
setHasDateGenerated:
hasDateGenerated
hasDiagnosticInfo
dateGenerated
diagnosticInfo
_dateGenerated
_diagnosticInfo
setLastSupportedMessageType:
mainBundle
bundleIdentifier
setApplicationBundleIdentifier:
infoDictionary
objectForKeyedSubscript:
setApplicationBundleVersion:
processInfo
processName
_lastSupportedMessageType
initWithLastSupportedMessageType:
hasLastSupportedMessageType
lastSupportedMessageType
_lastSupportedMessageTypeBeforeSupportedMessagesWereAddedToDeviceInfo
initWithDeviceInfo:
supportedProtocolMessages
_supportedProtocolMessages
password
securityType
setPassword:
setSecurityType:
addHandlerReturnStatusData:
handlerReturnStatusCount
clearHandlerReturnStatus
handlerReturnStatusAtIndex:
addHandlerReturnStatus:
handlerReturnStatusDatasCount
clearHandlerReturnStatusDatas
handlerReturnStatusDataAtIndex:
setCommandID:
handlerReturnStatusDataType
sendError
setSendError:
setHasSendError:
hasSendError
sendErrorAsString:
StringAsSendError:
handlerReturnStatus
setHandlerReturnStatus:count:
handlerReturnStatusAsString:
StringAsHandlerReturnStatus:
hasCommandID
handlerReturnStatusDatas
setHandlerReturnStatusDatas:
commandID
_handlerReturnStatus
_commandID
_handlerReturnStatusDatas
_sendError
mrXPCConnection
setMrXPCConnection:
connection
setConnection:
connectionQueue
setConnectionQueue:
clientCallbackQueue
setClientCallbackQueue:
clientCallbackPriorityQueue
setClientCallbackPriorityQueue:
browsableContentQueue
setBrowsableContentQueue:
voiceInputQueue
setVoiceInputQueue:
televisionQueue
setTelevisionQueue:
agentQueue
setAgentQueue:
isRunning
setIsRunning:
clientModule
browsableContentEndpoint
voiceRecordingEndpoint
televisionEndpoint
agentEndpoint
_isRunning
_mrXPCConnection
_connection
_connectionQueue
_clientCallbackQueue
_clientCallbackPriorityQueue
_browsableContentQueue
_voiceInputQueue
_televisionQueue
_agentQueue
initWithConnection:queue:
setMessageHandler:
dataWithBytesNoCopy:length:freeWhenDone:
propertyListWithData:options:format:error:
bytes
dataWithPropertyList:format:options:error:
protobufData
protocolMessageWithProtobufData:
dictionaryWithCapacity:
null
timeIntervalSinceDate:
UTF8String
initWithVolume:outputDeviceUID:
initWithVolume:
addSupportedFormats:
supportedFormatsCount
clearSupportedFormats
supportedFormatsAtIndex:
setDefaultFormat:
supportedFormatsType
hasDefaultFormat
supportedFormats
setSupportedFormats:
defaultFormat
_defaultFormat
_supportedFormats
addPacketDescriptions:
setFormatSettings:
setContents:
packetDescriptionsCount
clearPacketDescriptions
packetDescriptionsAtIndex:
packetDescriptionsType
hasFormatSettings
setPacketCapacity:
setHasPacketCapacity:
hasPacketCapacity
setMaximumPacketSize:
setHasMaximumPacketSize:
hasMaximumPacketSize
setHasPacketCount:
hasPacketCount
hasContents
maximumPacketSize
contents
setPacketDescriptions:
_maximumPacketSize
_packetCapacity
_packetCount
_contents
_packetDescriptions
hasRoutingContextUID
setHasMultipleBuiltInDevices:
hasMultipleBuiltInDevices
_routingContextUID
_multipleBuiltInDevices
substringToIndex:
uppercaseString
stringByReplacingCharactersInRange:withString:
valueForKey:
methodForSelector:
mr_valueForPotentiallyUndefinedKey:
setValue:forKey:
setDictionaryKeyToProtobufKeyMapping:
createDictionaryFromProtobuf:
createProtobufFromDictionary:
dictionaryKeyToProtobufKeyMapping
protobufClass
setProtobufClass:
dictionaryValueToProtobufValueTransformer
setDictionaryValueToProtobufValueTransformer:
protobufValueToDictionaryValueTransformer
setProtobufValueToDictionaryValueTransformer:
_protobufKeyToDictionaryKeyMapping
_dictionaryKeyToProtobufKeyMapping
_protobufClass
_dictionaryValueToProtobufValueTransformer
_protobufValueToDictionaryValueTransformer
setHasRequestByRange:
hasRequestByRange
setHasRequestByIdentifiers:
hasRequestByIdentifiers
setRequestByRequest:
setHasRequestByRequest:
hasRequestByRequest
_requestByIdentifiers
_requestByRange
_requestByRequest
unsignedIntValue
addDeviceIDs:
setErrorCode:
deviceIDsCount
deviceIDsAtIndex:
errorCode
initWithDeviceIDs:errorCode:
deviceIDs
protobuf
setDescriptor:
initWithProtobuf:
_descriptor
setDeviceID:
initWithDeviceID:errorCode:
initWithRecordingState:
setDataBlock:
_initializeDataIfNecessary
dataBlock
initWithBuffer:time:gain:
isAirPlaying
volumeControlCapabilities
outputDeviceForUID:
notifyOutputDeviceAdded:
notifyOutputDeviceRemoved:
notifyVolumeDidChange:outputDevice:
notifyVolumeCapabilitiesDidChange:outputDevice:
_volumeControlCapabilities
_reevaluateMasterVolumeControlCapabilities
_reevaluateMasterVolume
removeOutputDevices:
_calculateMasterVolume
_calculateMasterVolumeCapabilities
initWithUniqueIdentifier:
updateOutputDevices:
removeAllOutputDevices
updateVolume:outputDeviceUID:
updateVolumeControlCapabilities:outputDeviceUID:
_masterVolume
_masterVolumeControlCapabilities
_inititalizeVolume
_registerNotifications
_onSerialQueue_localOutputDevice
_onSerialQueue_isLocalOutputDevice:
callStackSymbols
floatValue
setLocalVolume:
intValue
setLocalVolumeControlCapabilities:
_onSerialQueue_reevaluateMasterVolume
_onSerialQueue_reevaluateMasterVolumeControlCapabilities
_onSerialQueue_calculateMasterVolume
_onSerialQueue_calculateMasterVolumeCapabilities
setHasIsVolumeControlAvailable:
_handleLocalDeviceVolumeDidChangeNotification:
_handleLocalDeviceVolumeControlCapabilitiesDidChangeNotification:
_handleOutputDeviceVolumeDidChangeNotification:
_handleOutputDeviceVolumeControlCapabilitiesDidChangeNotification:
_handleOutputDeviceAddedNotification:
_handleOutputDeviceRemovedNotification:
localVolume
localVolumeControlCapabilities
_localVolumeInitialized
_localVolumeControlCapabilitiesInitialized
_outputDeviceVolume
_localVolume
_localVolumeControlCapabilities
initWithURL:
appendData:
initWithFileAtPath:
dataWithContentsOfFile:
hasBytesAvailable
notifyDelegateOfStreamEvent:
_onSerialQueue_handleDataReceived:
getBytes:length:
subdataWithRange:
setData:
mutableBytes
streamStatus
_onRunLoop_notifyDelegateOfStreamEvent:
performBlock:
stream:handleEvent:
close
scheduleInRunLoop:forMode:
removeFromRunLoop:forMode:
propertyForKey:
setProperty:forKey:
streamError
read:maxLength:
getBuffer:length:
handleDataReceived:
handleStreamDisconnect
_status
_scheduledRunLoop
_preBuffer
initToMemory
initWithURL:append:
initToBuffer:capacity:
initToFileAtPath:append:
hasSpaceAvailable
sharedAudioPresentationOutputContext
initWithAVOutputContext:type:
sharedSystemAudioContext
sharedSystemScreenContext
outputContextForID:
_reloadOutputDevicesForInitialLoad:
_initializeAVFNotificationForwarding
_unregisterNotifications
_scheduleOutputContextDevicesDidChangeNotification
setOutputDevices:withPassword:callbackQueue:block:
arrayWithObjects:count:
boolValue
callbackWithQueue:block:
replaceModificationWithDevices:callback:
_commitModification:
addModificationWithDevices:callback:
removeModificationWithDevices:callback:
providesControlForAllVolumeFeatures
_notificationQueue
_clearAnyCompletedModifications
_handleOutputDeviceDidChangeNotification:
_handleOutputDevicesDidChangeNotification:
_handleDiscoverySessionOutputDevicesDidChangeNotification:
_outputContextChangeInitiatedNotification:
_handleOutputDeviceCanSetVolumeDidChangeNotification:
_handleOutputDeviceSupportsVolumeDidChangeNotification:
object
setWithArray:
objectsPassingTest:
anyObject
modificationType
addObjectsFromArray:
minusSet:
callback
isEqualToSet:
_contextSupportsMultipleDevices
status
setOutputDevice:options:completionHandler:
_pendingModifications
valid
isSubsetOfSet:
intersectsSet:
removeObjectsInArray:
supportsMultipleOutputDevices
postNotificationName:object:
_sharedOutputContextFromType:
_scheduleOutputContextDeviceDidChangeNotification
addObserverForName:object:queue:usingBlock:
localDevice
attemptLogicalDeviceRecovery
removeAllOutputDevicesWithCallbackQueue:block:
avOutputContext
_outputDeviceSourceInfo
_isVolumeControlAvailable
_attemptingLogicalDeviceRecovery
_postOutputDeviceChangedScheduled
_postOutputDevicesChangedScheduled
_handleOutputDeviceChangedScheduled
_handleOutputDevicesChangedScheduled
_handleDiscoverySessionOutputDevicesChangedScheduled
_avOutputContext
initWithType:devices:callback:
queue
_timerSource
_valid
_modificationType
_callback
_password
iTunesAudioContext
contextID
unsignedIntegerValue
setDeviceIdentifier:
deviceIdentifier
initWithErrorCode:deviceIdentifier:
addPackets:
setPackets:
initWithData:forKey:
packets
initWithName:packets:playerPath:
initWithPlaybackQueue:forPlayerPath:
_packets
initWithBytes:length:
setX:
setY:
setZ:
setW:
hasData
getBytes:range:
gravity
userAcceleration
attitude
rotation
setGravity:
setUserAcceleration:
setAttitude:
setRotation:
setDPadX:
dPadX
setDPadY:
dPadY
setA:
setB:
setLeftShoulder:
leftShoulder
setRightShoulder:
rightShoulder
setLeftThumbstickX:
leftThumbstickX
setLeftThumbstickY:
leftThumbstickY
setRightThumbstickX:
rightThumbstickX
setRightThumbstickY:
rightThumbstickY
setLeftTrigger:
leftTrigger
setRightTrigger:
rightTrigger
setPause:
pause
setTouchDown:
touchDown
setMotion:
setButtons:
setDigitizer:
setButtonAUpDelay:
setPlayerIndex:
playerIndex
buttonAUpDelay
setProfile:
profile
setSupportsExtendedMotion:
supportsExtendedMotion
setVendorName:
vendorName
service
setInputMode:
stringWithString:
appendString:
weakObjectsPointerArray
allDevices
addPointer:
setCount:
deviceWithIdentifier:
registerDevice:
clearDevices
_devicesPointerArray
hasClient
_client
addOutputDeviceUIDs:
outputDeviceUIDsCount
clearOutputDeviceUIDs
outputDeviceUIDsAtIndex:
outputDeviceUIDsType
_outputDeviceUIDs
setPairingData:
hasPairingData
setStatus:
setHasStatus:
hasStatus
setIsRetrying:
setHasIsRetrying:
hasIsRetrying
setIsUsingSystemPairing:
setHasIsUsingSystemPairing:
hasIsUsingSystemPairing
pairingData
isRetrying
_pairingData
_isRetrying
_isUsingSystemPairing
outputDevicesCount
clearOutputDevices
outputDevicesAtIndex:
setDesignatedGroupLeader:
setInstanceIdentifier:
outputDevicesType
hasName
hasDesignatedGroupLeader
setIsLocalEndpoint:
setHasIsLocalEndpoint:
hasIsLocalEndpoint
hasInstanceIdentifier
setHasIsProxyGroupPlayer:
hasIsProxyGroupPlayer
setConnectionType:
setHasConnectionType:
hasConnectionType
connectionTypeAsString:
StringAsConnectionType:
setCanModifyGroupMembership:
setHasCanModifyGroupMembership:
hasCanModifyGroupMembership
designatedGroupLeader
isLocalEndpoint
instanceIdentifier
_connectionType
_designatedGroupLeader
_instanceIdentifier
_canModifyGroupMembership
_isLocalEndpoint
_isProxyGroupPlayer
setObject:
setProtocol:
selector
invokeWithTarget:
forwardInvocation:
methodSignatureForSelector:
signatureWithObjCTypes:
_object
_protocol
setResponse:
hasResponse
response
_response
setKey:
hasKey
_key
setText:
hasText
actionType
setActionType:
setHasActionType:
hasActionType
actionTypeAsString:
StringAsActionType:
text
_actionType
_text
initWithTransport:
_callClientGameControllerInputModeCallback
clientConnection
voiceRecordingState
setVoiceRecordingState:
_callClientRecordingStateCallback
_callCientHiliteModeCallback
setGameControllerInputModeCallback:
setGameControllerInputModeCallbackQueue:
setGameControllerPropertiesCallback:
setGameControllerPropertiesCallbackQueue:
setTextInputCallback:
setTextInputCallbackQueue:
sendClientUpdatesConfigMessage
setRtiCallback:
setRtiCallbackQueue:
setRecordingStateCallback:
setRecordingStateCallbackQueue:
setHiliteModeCallback:
setHiliteModeCallbackQueue:
setGameControllerInputMode:
_handleKeyboardMessage:
_handleRemoteTextInputMessage:
_callClientGameControllerPropertiesCallback:controller:
_handleHiliteModeMessage:
clientConnection:didReceiveMessage:
textInputCallback
rtiCallback
wantsNowPlayingArtworkNotifications
errorForCurrentState
initWithDeviceDescriptor:
error
sendMessage:queue:reply:
isSupported:
initWithTouchEvent:virtualDeviceID:
sendMessage:
initWithHIDEvent:
cryptoSession
decryptedTextUsingCryptoSession:
attributes
initWithText:attributes:
_sendTextInputMessageWithActionType:text:
payloadWithData:
setPayloadDelegate:
handleTextActionPayload:
setRtiSourceSession:
hasDigitizer
digitizer
motion
initWithActionType:text:
setIsCallingClientCallback:
setEditing:
_callClientTextInputCallback:type:
version
initWithVersion:data:
_callClientRTICallback:
setGameControllerInputModeCallback:withQueue:
setGameControllerPropertiesCallback:withQueue:
setTextEditingCallback:withQueue:
setRTICallback:withQueue:
setVoiceRecordingStateCallback:withQueue:
setHiliteModeCallback:withQueue:
currentClientUpdatesConfigMessage
registerTouchDeviceWithDescriptor:replyQueue:completion:
sendTouchEvent:toVirtualDeviceWithID:
sendHIDEvent:
getTextEditingSessionWithReplyQueue:completion:
insertTextIntoActiveTextEditingSessionWithText:
setTextOnActiveTextEditingSessionWithText:
deleteBackwardInActiveTextEditingSession
clearActiveTextEditingSessionData
getRTISessionWithReplyQueue:completion:
registerGameControllerWithProperties:queue:completion:
unregisterGameController:
sendGameControllerEvent:controllerID:
registerVoiceInputDeviceWithDescriptor:replyQueue:completion:
processVoiceInputAudioDataForDeviceID:withBuffer:time:gain:
exitHiliteMode
wake
gameControllerInputModeCallback
gameControllerInputMode
gameControllerInputModeCallbackQueue
gameControllerPropertiesCallback
gameControllerPropertiesCallbackQueue
recordingStateCallback
recordingStateCallbackQueue
textInputCallbackQueue
rtiCallbackQueue
rtiSourceSession
hiliteModeCallback
hiliteModeCallbackQueue
_hiliteMode
_gameControllerInputModeCallback
_gameControllerInputMode
_gameControllerInputModeCallbackQueue
_gameControllerPropertiesCallback
_gameControllerPropertiesCallbackQueue
_recordingStateCallback
_recordingStateCallbackQueue
_textInputCallback
_textInputCallbackQueue
_rtiCallback
_rtiCallbackQueue
_rtiSourceSession
_hiliteModeCallback
_hiliteModeCallbackQueue
initWithOutputDeviceUID:
initWithVolume:endpointUID:outputDeviceUID:
initWithCapabilities:
initWithCapabilities:endpointUID:outputDeviceUID:
setVolumeControlAvailable:
hasVolumeControlAvailable
volumeControlAvailable
setAbsolute:
setHasAbsolute:
hasAbsolute
setIntegratedDisplay:
setHasIntegratedDisplay:
hasIntegratedDisplay
setScreenSizeWidth:
setHasScreenSizeWidth:
hasScreenSizeWidth
setScreenSizeHeight:
setHasScreenSizeHeight:
hasScreenSizeHeight
absolute
integratedDisplay
screenSizeWidth
screenSizeHeight
_screenSizeHeight
_screenSizeWidth
_absolute
_integratedDisplay
subscriptionController
augmentCommandOptions:forCommand:
timeIntervalSinceNow
processPlayerPathInvalidationHandlersWithInvalidOrigin:
removeCommandHandlerBlockForKey:
addCommandHandlerBlock:forKey:
setHardwareRemoteBehavior:
setCommandCallback:
handleSupportedCommandsRequestWithCompletion:
setReceivesSupportedCommandsNotifications:
processIdentifier
contentItemIdentifierForOffset:
contentItemsCount
clearContentItems
contentItemsAtIndex:
contentItemsType
setContentItems:
_contentItems
_initializeDiscoverySession
setDiscoveryMode:
_handleOutputContextDidChangeNotification
_reevaluateEndpoint
discoverySessionWithEndpointFeatures:
_handleEndpointsDidChange:
addEndpointsChangedCallback:
removeObserver:name:object:
sharedLocalEndpointForRoutingContextWithUID:
_endpointContainingOutputDevice:
localizedName
discoveredEndpoints
setEndpointChangedCallback:
endpointChangedCallback
begin
_discoverySession
_endpoints
_endpointChangedCallback
_didBegin
raise:format:
initWithDomain:code:userInfo:
pairedDevices
handlePairingExchangeData:completion:
handlePairingFailureWithStatus:
encryptData:withError:
decryptData:withError:
deleteIdentityWithError:
role
_device
_role
getDevicePresenceDetectedWithCompletion:
getDiscoveryModeWithCompletion:
setDiscoveryMode:withCompletion:
getAvailableEndpointsWithCompletion:
getAvailableOutputDevicesWithCompletion:
setWithObjects:
setClasses:forSelector:argumentIndex:ofReply:
availableEndpointsDidChange:
availableOutputDevicesDidChange:
_initializeHostedRoutingConnectionWithCompletion:
_reloadHostedRoutingServiceDiscoveryMode
_hostedRoutingConnection
distantEndpoints
distantOutputDevices
_reloadAvailableDistantEndpoints
_reloadAvailableDistantOutputDevices
_reloadAvailableDistantEndpointsWithEndpoints:
_reloadAvailableDistantOutputDevicesWithOutputDevices:
externalDevice
endpointsChangedCallbacks
outputDevicesChangedCallbacks
initWithEndpointFeatures:
endpointFeatures
discoveryMode
devicePresenceDetected
availableEndpoints
availableOutputDevices
setHostedRoutingSessionConnection:
setDistantEndpoints:
setDistantOutputDevices:
hostedRoutingSessionConnection
distantExternalDevices
setDistantExternalDevices:
_endpointFeatures
_discoveryMode
_distantEndpoints
_distantOutputDevices
_serviceResetNotifyToken
_hostedRoutingConnectionDidInitialize
_hostedRoutingSessionConnection
_distantExternalDevices
setWantsNowPlayingArtworkNotifications:
_localDeviceInfoDidChangeNotification:
_transportDeviceInfoDidChangeNotification:
_contentItemUpdatedNotification:
_handleDeviceInfoChange:oldDevice:
_cleanUpWithReason:
transport
hostname
dataWithBytes:length:
initWithKey:data:
_onSerialQueue_registerOriginCallbacks
_updateNowPlayingInfo
setNowPlayingItem:
setNowPlayingArtwork:
_callClientConnectionStateCallback:previousConnectionState:error:
activate
currentRunLoop
setPairingCallback:
setPairingCallbackQueue:
setPairingAllowedCallback:
setPairingAllowedCallbackQueue:
setOutputDevicesUpdatedCallback:
setOutputDevicesUpdatedCallbackQueue:
setOutputDevicesRemovedCallback:
setOutputDevicesRemovedCallbackQueue:
setVolumeControlCapabilitiesCallback:
setVolumeControlCapabilitiesCallbackQueue:
initWithButtonEvent:
_cleanUpStreamsWithReason:
_onWorkerQueue_initializeConnectionWithOptions:
_onWorkerQueue_loadDeviceInfo
requiresCustomPairing
_onWorkerQueue_openSecuritySession
_onWorkerQueue_setupCustomOrigin
_onWorkerQueue_syncClientState
setConnectionState:error:
_onWorkerQueue_connectWithOptions:isRetry:
_onSerialQueue_prepareToConnectWithOptions:
reset
domain
code
_onWorkerQueue_disconnect:
_onSerialQueue_prepareToDisconnect:
initWithDeallocHandler:
disarm
initWithTimeout:interruptionHandler:
streamsAreValid
sendClientUpdatesConfigMessageWithCompletion:
_handleCryptoPairingMessage:
_handleSetStateMessage:
_handleNotificationMessage:
_handleSetArtworkMessage:
_handleTransactionMessage:
_handleDeviceInfoUpdateMessage:
_handleSetConnectionStateMessage:
_handleGenericMessage:
_handleSetNowPlayingClientMessage:
_handleSetNowPlayingPlayerMessage:
_handleRemoveClientMessage:
_handleRemovePlayerMessage:
_handleUpdateClientMessage:
_handleUpdateContentItemsMessage:
_handleUpdateContentItemArtworkMessage:
_handleUpdatePlayerMessage:
_handlePromptForRouteAuthorizationMessage:
_handlePresentRouteAuthorizationStatusMessage:
_handleVolumeDidChangeMessage:
_handleVolumeControlCapabilitiesDidChangeMessage:
_handleLegacyVolumeControlCapabilitiesDidChangeMessage:
_handleOutputDevicesUpdatedMessage:
_handleOutputDevicesRemovedMessage:
bluetoothAddress
setShouldUseSystemAuthenticationPrompt:
getInputStream:outputStream:
runLoop
initWithInputStream:outputStream:runLoop:
setCryptoEnabled:
setClientConnection:
setCustomOrigin:
currentSettings
externalDeviceTimeoutDuration
hasExchangedMessage
initWithPairingData:status:isRetrying:isUsingSystemPairing:state:
setDataExchangeBlock:
_callClientPairingCallback:
setPromptForSetupCodeBlock:
setExchangeCompleteBlock:
setCryptoSession:
closeAllStreams
_handleRemoteCommand:withOptions:playerPath:completion:
_handlePlaybackQueueRequest:forPlayer:completion:
initWithEvent:
_handleLegacyPlaybackQueueRequestWithCompletion:
initWithRequest:forPlayerPath:
_handlePlaybackQueueResponse:completion:
veirfyConnectionStatusAndMaybeDisconnect:
sendMessage:timeout:queue:reply:
_createPlaybackQueue:
standardCredentials
characterCount
initWithCommand:options:playerPath:
results
_handleSetStateMessageModern:
_handleSetStateMessageLegacy:
_handleNotificationMessageModern:
_handleNotificationMessageLegacy:
notification
_callOutputDevicesUpdatedCallbackWithOutputDevices:
_callOutputDevicesRemovedCallbackWithOutputDeviceUIDs:
_callVolumeCallback:outputDeviceUID:
_callVolumeControlCapabilitiesCallback:outputDeviceUID:
sendTransaction:withPackets:
initWithDevice:
_callClientNameCallback
_callClientAllowsPairingCallback
reply
_callClientCustomDataCallback:name:
replyWithMessage:
nowPlayingItem
clientDidDisconnect:
nowPlayingArtwork
setOutputDevicesUpdatedCallback:withQueue:
setOutputDevicesRemovedCallback:withQueue:
setVolumeControlCapabilitiesCallback:withQueue:
removeFromParentGroup:queue:completion:
connectionRecoveryBehavior
setConnectionRecoveryBehavior:
isCallingClientCallback
pairingCallback
pairingCallbackQueue
pairingAllowedCallback
pairingAllowedCallbackQueue
outputDevicesUpdatedCallback
outputDevicesUpdatedCallbackQueue
outputDevicesRemovedCallback
outputDevicesRemovedCallbackQueue
volumeControlCapabilitiesCallback
volumeControlCapabilitiesCallbackQueue
outputContextCallbackQueue
setOutputContextCallbackQueue:
setRunLoop:
_workerQueue
_runLoopThread
_wantsNowPlayingNotifications
_wantsNowPlayingArtworkNotifications
_wantsVolumeNotifications
_wantsOutputDeviceNotifications
_connectionStateTimestamp
_connectionOptions
_cachedServerDisconnectError
_reconnectionAttemptCount
_forceReconnectOnConnectionFailure
_disconnecting
_isClientSyncActive
_transaction
_isCallingClientCallback
_clientConnection
_nowPlayingArtwork
_nowPlayingItem
_transport
_connectionRecoveryBehavior
_pairingCallback
_pairingCallbackQueue
_pairingAllowedCallback
_pairingAllowedCallbackQueue
_outputDevicesUpdatedCallback
_outputDevicesUpdatedCallbackQueue
_outputDevicesRemovedCallback
_outputDevicesRemovedCallbackQueue
_volumeControlCapabilitiesCallback
_volumeControlCapabilitiesCallbackQueue
_outputContextCallbackQueue
_runLoop
setHasVolumeControlAvailable:
setHasVolumeCapabilities:
_volumeCapabilities
setReport:
hasReport
report
_report
serializationDate
_serializationDate
setPrompt:
setInputTraits:
hasPrompt
hasInputTraits
prompt
inputTraits
_inputTraits
_prompt
setHasNowPlayingUpdates:
hasNowPlayingUpdates
setHasArtworkUpdates:
hasArtworkUpdates
setHasVolumeUpdates:
hasVolumeUpdates
setHasKeyboardUpdates:
hasKeyboardUpdates
setHasOutputDeviceUpdates:
hasOutputDeviceUpdates
_artworkUpdates
_keyboardUpdates
_nowPlayingUpdates
_outputDeviceUpdates
_volumeUpdates
write
updateWithValue:
defaultManager
createFileAtPath:contents:attributes:
writeToFile:atomically:encoding:error:
initWithPath:
addMessage:data:
_path
_entries
numberWithUnsignedInteger:
setAvg:
setMin:
setMax:
total
setTotal:
values
setValues:
_avg
_min
_max
_total
_values
initWithRoute:inputType:
initWithResponse:
initWithRoute:status:
setPhase:
setFinger:
phase
finger
URLWithString:
host
longLongValue
setHasName:
hasPackets
externalDeviceListenerEndpoint
initWithUTF8String:
_setEndpoint:
setExternalDeviceListenerEndpoint:
origin
player
setOrigin:
restoreNowPlayingClientState
initWithOrigin:
nowPlayingClients
nowPlayingClientRequestsForPlayerPath:
existingNowPlayingClientRequestsForPlayerPath:
removeClient:
setTransactionCallback:forName:
transactionCallbackForName:
handleDeviceInfoRequestWithCompletion:
_nowPlayingClients
_transactionCallbacks
_deviceInfoCompletions
_origin
playerClients
nowPlayingPlayerClientRequestsForPlayerPath:
existingNowPlayingPlayerClientRequestsForPlayerPath:
removePlayer:
_playerClients
setHasX:
hasX
setHasY:
hasY
setHasTouchDown:
hasTouchDown
_touchDown
addAddingOutputDeviceUID:
addRemovingOutputDeviceUID:
addSettingOutputDeviceUID:
addingOutputDeviceUIDsCount
clearAddingOutputDeviceUIDs
addingOutputDeviceUIDAtIndex:
removingOutputDeviceUIDsCount
clearRemovingOutputDeviceUIDs
removingOutputDeviceUIDAtIndex:
settingOutputDeviceUIDsCount
clearSettingOutputDeviceUIDs
settingOutputDeviceUIDAtIndex:
addingOutputDeviceUIDType
removingOutputDeviceUIDType
settingOutputDeviceUIDType
setHasOutputContextType:
hasOutputContextType
outputContextTypeAsString:
StringAsOutputContextType:
_addingOutputDeviceUIDs
_outputContextType
_removingOutputDeviceUIDs
_settingOutputDeviceUIDs
setHidEventData:
hidEventData
buttonEvent
openInState:
_handlePairingFailureWithError:
setInputKey:
setInputNonce:
setOutputKey:
setOutputNonce:
_onQueuePerformPairingExchangeWithInputData:error:
_onQueueInitializePairingSessionWithState:
pairingSession:didPrepareExchangeData:
shouldAutoRetry
retry
errorWithDomain:code:userInfo:
initWithLength:
appendBytes:length:
extendedPeerInfo
stringWithCString:encoding:
_createPeerDeviceFromPeer:
_createDeviceFromPeer:
passcode
pairingSession:showSetupCode:
pairingSessionHideSetupCode:
pairingSession:promptForSetupCodeWithDelay:completion:
_delegateDidEnterPasscode:
_handlePairingCompleteWithError:
pairingSession:didCompleteExchangeWithError:
dataWithBytesNoCopy:length:
_handleSetupExchangeComplete
_onQueueDeriveEncryptionKeys
_generateSetupCodeWithMaximumLength:
_displaySetupCode:
_hideSetupCode
_promptForSetupCodeWithDelay:
pairingFlags
inputKey
inputNonce
outputKey
outputNonce
_credentials
_pairingSession
_pairingDelegate
_queue
_hasExchangedMessage
_pairingFlags
_inputKey
_inputNonce
_outputKey
_outputNonce
getCString:maxLength:encoding:
containsObject:
MR_isEqualToNowPlayingInfo:
resolvedPlayerPath
setResolvedPlayerPath:
hasSendingPlaybackQueueTransaction
sendingPlaybackQueueTransaction
setSendingPlaybackQueueTransaction:
containsString:
objectAtIndexedSubscript:
stringByAppendingFormat:
hasPlaybackQueueCallbacks
initWithImageData:mimeType:
addEntriesFromDictionary:
hasReceivedCommandRecently
requestForSubscribedContentItemIdentifier:
initWithIdentifier:publicKey:privateKey:
publicKey
privateKey
_publicKey
_privateKey
integerValue
recordingState
setRecordingState:
initWithDeviceID:
_deviceID
_recordingState
setJpegData:
hasJpegData
jpegData
_jpegData
_registerCallbacks
addCustomXPCHandler:forKey:
removeCustomXPCHandler:
messageHandler
invalidationHandler
_customXpcHandlers
_messageHandler
_invalidationHandler
_parseBuffer:
_parseTimestamp:
_parseGain:
setFormatSettingsPlistData:
setStartOffset:
setVariableFramesInPacket:
setDataByteSize:
formatSettingsPlistData
dataByteSize
startOffset
variableFramesInPacket
setPlaybackQueueCallback:
setPlaybackQueueTransactionCallback:
setFirstCallback:
setLastCallback:
addCallback:
createPlaybackQueueForRequestCallbacks
createItemForOffsetCallbacks
createChildItemCallbacks
metadataCallbacks
languageOptionsCallbacks
infoCallbacks
lyricsCallbacks
artworkCallbacks
removeCallback:
setPairingDelegate:
setShowSetupCodeBlock:
setHideSetupCodeBlock:
_useSystemPairing
_openSecuritySessionInState:useSystemPairing:completion:
setPairingSession:
useExternalDeviceSystemPairing
pairingSession
pairingDelegate
initWithMediaRemoteService:
initWithServiceClient:
setPlaybackQueueDispatchQueue:
registerCallbacks
_onQueue_setActivePlayerPath:
enumerateObjectsUsingBlock:
removeOrigin:
fetchPickableRoutesForCategory:completion:
_callInvalidationHandler:
processPlayerPathInvalidationHandlersWithBlock:
_onQueue_processPlayerPathInvalidationHandlersWithBlock:
offsetForIdentifier:
registeredOrigins
setActivePlayerPath:
activePlayerPath
registerOrigin:withDeviceInfo:completion:
unregisterOrigin:withCompletion:
unregisterAllOriginsWithCompletion:
isOriginRegistered:
fetchPickableRoutesWithCategory:completion:
addPlayerPathInvalidationHandler:
removeInvalidationHandler:
_processPlayerPathInvalidationHandlersWithBlock:
playbackQueueDispatchQueue
_registeredOrigins
_routingClientController
_activePlayerPath
_notifyRestoreClientStateForLaunch
_preparedBundleID
_playerPathInvalidationHandlers
_notificationService
_service
_notificationClient
_playbackQueueDispatchQueue
originClientForPlayerPath:
commandCallback
activePlayer
preProcessCommand:options:
commandHandlerBlocks
receiveTransaction:fromMessage:
videoThumbnailsCallback
audioAmplitudeSamplesCallback
endLyricsEventCallback
beginLyricsEventCallback
setUserData:
hasUserData
userData
_userData
setUsagePage:
setUsage:
setButtonDown:
usagePage
usage
buttonDown
setLocalizedName:
externalDeviceQueue
setExternalDeviceQueue:
distantGroupLeader
setDistantGroupLeader:
distantExternalDevice
_localizedName
_externalDeviceQueue
_distantGroupLeader
_distantExternalDevice
_externalDeviceListenerEndpoint
setHasHiliteMode:
hasHiliteMode
addSupportedCustomQueueIdentifier:
preferredIntervalsCount
clearPreferredIntervals
preferredIntervalAtIndex:
addPreferredInterval:
setLocalizedTitle:
supportedRatesCount
clearSupportedRates
supportedRateAtIndex:
addSupportedRate:
setLocalizedShortTitle:
supportedPlaybackQueueTypesCount
clearSupportedPlaybackQueueTypes
supportedPlaybackQueueTypeAtIndex:
addSupportedPlaybackQueueType:
supportedCustomQueueIdentifiersCount
clearSupportedCustomQueueIdentifiers
supportedCustomQueueIdentifierAtIndex:
supportedInsertionPositionsCount
clearSupportedInsertionPositions
supportedInsertionPositionsAtIndex:
addSupportedInsertionPositions:
supportedCustomQueueIdentifierType
setEnabled:
setHasEnabled:
hasEnabled
setActive:
setHasActive:
hasActive
preferredIntervals
setPreferredIntervals:count:
hasLocalizedTitle
hasLocalizedShortTitle
setMinimumRating:
setHasMinimumRating:
hasMinimumRating
setMaximumRating:
setHasMaximumRating:
hasMaximumRating
supportedRates
setSupportedRates:count:
setPresentationStyle:
setHasPresentationStyle:
hasPresentationStyle
setSkipInterval:
setHasSkipInterval:
hasSkipInterval
setNumAvailableSkips:
setHasNumAvailableSkips:
hasNumAvailableSkips
setSkipFrequency:
setHasSkipFrequency:
hasSkipFrequency
setCanScrub:
setHasCanScrub:
hasCanScrub
supportedPlaybackQueueTypes
setSupportedPlaybackQueueTypes:count:
supportedInsertionPositions
setSupportedInsertionPositions:count:
setSupportsSharedQueue:
setHasSupportsSharedQueue:
hasSupportsSharedQueue
setUpNextItemCount:
setHasUpNextItemCount:
hasUpNextItemCount
setPreferredPlaybackRate:
setHasPreferredPlaybackRate:
hasPreferredPlaybackRate
enabled
active
localizedTitle
localizedShortTitle
minimumRating
maximumRating
presentationStyle
skipInterval
numAvailableSkips
skipFrequency
canScrub
supportedCustomQueueIdentifiers
setSupportedCustomQueueIdentifiers:
supportsSharedQueue
upNextItemCount
preferredPlaybackRate
_preferredIntervals
_supportedInsertionPositions
_supportedPlaybackQueueTypes
_supportedRates
_canScrub
_localizedShortTitle
_localizedTitle
_maximumRating
_minimumRating
_numAvailableSkips
_preferredPlaybackRate
_presentationStyle
_skipFrequency
_skipInterval
_supportedCustomQueueIdentifiers
_upNextItemCount
_active
_enabled
_supportsSharedQueue
setHasUsagePage:
hasUsagePage
setHasUsage:
hasUsage
setHasButtonDown:
hasButtonDown
_usage
_usagePage
_buttonDown
bundleWithIdentifier:
localizations
preferredLanguages
preferredLocalizationsFromArray:forPreferences:
pathForResource:ofType:inDirectory:forLocalization:
initWithContentsOfFile:
localizedStringForKey:value:table:
setDeviceInfoDeprecated:
typeAsString:
StringAsType:
setHasIdentifier:
hasDeviceInfoDeprecated
deviceInfoDeprecated
_deviceInfoDeprecated
setAttributes:
setEncryptedTextCyphertext:
hasAttributes
hasEncryptedTextCyphertext
encryptedTextCyphertext
_attributes
_encryptedTextCyphertext
setFirmwareVersion:
hasGroupID
hasModelID
hasMacAddress
setHasCanAccessRemoteAssets:
hasCanAccessRemoteAssets
setHasIsRemoteControllable:
hasIsRemoteControllable
setHasIsGroupLeader:
hasIsGroupLeader
setHasIsGroupable:
hasIsGroupable
setHasDeviceType:
hasDeviceType
deviceTypeAsString:
StringAsDeviceType:
setHasDeviceSubType:
hasDeviceSubType
deviceSubTypeAsString:
StringAsDeviceSubType:
hasModelSpecificInfoData
setHasBatteryLevel:
setHasIsLocalDevice:
hasIsLocalDevice
setHasSupportsExternalScreen:
hasSupportsExternalScreen
setHasRequiresAuthorization:
hasRequiresAuthorization
setShouldForceRemoteControlabillity:
setHasShouldForceRemoteControlabillity:
hasShouldForceRemoteControlabillity
hasSourceInfo
setHasIsDeviceGroupable:
hasIsDeviceGroupable
setHasCanRelayCommunicationChannel:
hasCanRelayCommunicationChannel
hasLogicalDeviceID
hasFirmwareVersion
hasIsVolumeControlAvailable
setHasCanAccessAppleMusic:
hasCanAccessAppleMusic
setHasCanAccessiCloudMusicLibrary:
hasCanAccessiCloudMusicLibrary
setHasGroupContainsGroupLeader:
hasGroupContainsGroupLeader
setHasSupportsBufferedAirPlay:
hasSupportsBufferedAirPlay
setHasCanPlayEncryptedProgressiveDownloadAssets:
hasCanPlayEncryptedProgressiveDownloadAssets
setHasCanFetchMediaDataFromSender:
hasCanFetchMediaDataFromSender
setHasPresentsOptimizedUserInterfaceWhenPlayingFetchedAudioOnlyAssets:
hasPresentsOptimizedUserInterfaceWhenPlayingFetchedAudioOnlyAssets
setHasIsAirPlayReceiverSessionActive:
hasIsAirPlayReceiverSessionActive
hasParentGroupIdentifier
setHasParentGroupContainsDiscoverableLeader:
hasParentGroupContainsDiscoverableLeader
setHasIsAddedToHomeKit:
hasIsAddedToHomeKit
shouldForceRemoteControlabillity
_deviceSubType
_macAddress
_modelSpecificInfoData
_isAirPlayReceiverSessionActive
_isDeviceGroupable
_isGroupLeader
_isGroupable
_isLocalDevice
_isRemoteControllable
_shouldForceRemoteControlabillity
setAuthenticationToken:
setSendCommandMessage:
setSendCommandResultMessage:
setGetStateMessage:
setSetStateMessage:
setSetArtworkMessage:
setRegisterHIDDeviceMessage:
setRegisterHIDDeviceResultMessage:
setSendHIDEventMessage:
setSendHIDReportMessage:
setSendVirtualTouchEventMessage:
setNotificationMessage:
setContentItemsChangedNotificationMessage:
setDeviceInfoMessage:
setClientUpdatesConfigMessage:
setMasterVolumeControlCapabilitiesDidChangeMessage:
setGameController:
setRegisterGameController:
setRegisterGameControllerResponse:
setUnregisterGameController:
setRegisterForGameControllerEvents:
setKeyboardMessage:
setGetKeyboardMessage:
setTextInputMessage:
setGetVoiceInputDevicesMessage:
setGetVoiceInputDevicesResponseMessage:
setRegisterVoiceInputDeviceMessage:
setRegisterVoiceInputDeviceResponseMessage:
setSetRecordingStateMessage:
setSendVoiceInputMessage:
setPlaybackQueueRequest:
setTransactionPackets:
setCryptoPairingMessage:
setGameControllerProperties:
setReadyStateMessage:
setConnectionState:
setSendButtonEventMessage:
setSetHiliteModeMessage:
setWakeDeviceMessage:
setGenericMessage:
setSendPackedVirtualTouchEventMessage:
setSendLyricsEventMessage:
setSetNowPlayingClientMessage:
setSetNowPlayingPlayerMessage:
setModifyOutputContextRequestMessage:
setGetVolumeMessage:
setGetVolumeResultMessage:
setSetVolumeMessage:
setVolumeDidChangeMessage:
setRemoveClientMessage:
setRemovePlayerMessage:
setUpdateClientMessage:
setUpdateContentItemMessage:
setUpdateContentItemArtworkMessage:
setUpdatePlayerMessage:
setPromptForRouteAuthorizationMessage:
setPromptForRouteAuthorizationResponseMessage:
setPresentRouteAuthorizationStatusMessage:
setGetVolumeControlCapabilitiesMessage:
setGetVolumeControlCapabilitiesResultMessage:
setVolumeControlCapabilitiesDidChangeMessage:
setUpdateOutputDevicesMessage:
setRemoveOutputDevicesMessage:
setRemoteTextInputMessage:
setGetRemoteTextInputSessionMessage:
hasAuthenticationToken
setHasErrorCode:
hasErrorCode
hasSendCommandMessage
hasSendCommandResultMessage
hasGetStateMessage
hasSetStateMessage
hasSetArtworkMessage
hasRegisterHIDDeviceMessage
hasRegisterHIDDeviceResultMessage
hasSendHIDEventMessage
hasSendHIDReportMessage
hasSendVirtualTouchEventMessage
hasNotificationMessage
hasContentItemsChangedNotificationMessage
hasDeviceInfoMessage
hasClientUpdatesConfigMessage
hasMasterVolumeControlCapabilitiesDidChangeMessage
hasGameController
hasRegisterGameController
hasRegisterGameControllerResponse
hasUnregisterGameController
hasRegisterForGameControllerEvents
hasKeyboardMessage
hasGetKeyboardMessage
hasTextInputMessage
hasGetVoiceInputDevicesMessage
hasGetVoiceInputDevicesResponseMessage
hasRegisterVoiceInputDeviceMessage
hasRegisterVoiceInputDeviceResponseMessage
hasSetRecordingStateMessage
hasSendVoiceInputMessage
hasPlaybackQueueRequest
hasTransactionPackets
hasCryptoPairingMessage
hasGameControllerProperties
hasReadyStateMessage
hasConnectionState
hasSendButtonEventMessage
hasSetHiliteModeMessage
hasWakeDeviceMessage
hasGenericMessage
hasSendPackedVirtualTouchEventMessage
hasSendLyricsEventMessage
hasSetNowPlayingClientMessage
hasSetNowPlayingPlayerMessage
hasModifyOutputContextRequestMessage
hasGetVolumeMessage
hasGetVolumeResultMessage
hasSetVolumeMessage
hasVolumeDidChangeMessage
hasRemoveClientMessage
hasRemovePlayerMessage
hasUpdateClientMessage
hasUpdateContentItemMessage
hasUpdateContentItemArtworkMessage
hasUpdatePlayerMessage
hasPromptForRouteAuthorizationMessage
hasPromptForRouteAuthorizationResponseMessage
hasPresentRouteAuthorizationStatusMessage
hasGetVolumeControlCapabilitiesMessage
hasGetVolumeControlCapabilitiesResultMessage
hasVolumeControlCapabilitiesDidChangeMessage
hasUpdateOutputDevicesMessage
hasRemoveOutputDevicesMessage
hasRemoteTextInputMessage
hasGetRemoteTextInputSessionMessage
authenticationToken
sendCommandMessage
sendCommandResultMessage
getStateMessage
setStateMessage
setArtworkMessage
registerHIDDeviceMessage
registerHIDDeviceResultMessage
sendHIDEventMessage
sendHIDReportMessage
sendVirtualTouchEventMessage
notificationMessage
contentItemsChangedNotificationMessage
deviceInfoMessage
clientUpdatesConfigMessage
masterVolumeControlCapabilitiesDidChangeMessage
gameController
registerGameController
registerGameControllerResponse
unregisterGameController
registerForGameControllerEvents
keyboardMessage
getKeyboardMessage
textInputMessage
getVoiceInputDevicesMessage
getVoiceInputDevicesResponseMessage
registerVoiceInputDeviceMessage
registerVoiceInputDeviceResponseMessage
setRecordingStateMessage
sendVoiceInputMessage
playbackQueueRequest
transactionPackets
cryptoPairingMessage
gameControllerProperties
readyStateMessage
sendButtonEventMessage
setHiliteModeMessage
wakeDeviceMessage
genericMessage
sendPackedVirtualTouchEventMessage
sendLyricsEventMessage
setNowPlayingClientMessage
setNowPlayingPlayerMessage
modifyOutputContextRequestMessage
getVolumeMessage
getVolumeResultMessage
setVolumeMessage
volumeDidChangeMessage
removeClientMessage
removePlayerMessage
updateClientMessage
updateContentItemMessage
updateContentItemArtworkMessage
updatePlayerMessage
promptForRouteAuthorizationMessage
promptForRouteAuthorizationResponseMessage
presentRouteAuthorizationStatusMessage
getVolumeControlCapabilitiesMessage
getVolumeControlCapabilitiesResultMessage
volumeControlCapabilitiesDidChangeMessage
updateOutputDevicesMessage
removeOutputDevicesMessage
remoteTextInputMessage
getRemoteTextInputSessionMessage
_authenticationToken
_clientUpdatesConfigMessage
_contentItemsChangedNotificationMessage
_cryptoPairingMessage
_deviceInfoMessage
_errorCode
_gameController
_gameControllerProperties
_genericMessage
_getKeyboardMessage
_getRemoteTextInputSessionMessage
_getStateMessage
_getVoiceInputDevicesMessage
_getVoiceInputDevicesResponseMessage
_getVolumeControlCapabilitiesMessage
_getVolumeControlCapabilitiesResultMessage
_getVolumeMessage
_getVolumeResultMessage
_keyboardMessage
_masterVolumeControlCapabilitiesDidChangeMessage
_modifyOutputContextRequestMessage
_notificationMessage
_playbackQueueRequest
_presentRouteAuthorizationStatusMessage
_promptForRouteAuthorizationMessage
_promptForRouteAuthorizationResponseMessage
_readyStateMessage
_registerForGameControllerEvents
_registerGameController
_registerGameControllerResponse
_registerHIDDeviceMessage
_registerHIDDeviceResultMessage
_registerVoiceInputDeviceMessage
_registerVoiceInputDeviceResponseMessage
_remoteTextInputMessage
_removeClientMessage
_removeOutputDevicesMessage
_removePlayerMessage
_sendButtonEventMessage
_sendCommandMessage
_sendCommandResultMessage
_sendHIDEventMessage
_sendHIDReportMessage
_sendLyricsEventMessage
_sendPackedVirtualTouchEventMessage
_sendVirtualTouchEventMessage
_sendVoiceInputMessage
_setArtworkMessage
_setHiliteModeMessage
_setNowPlayingClientMessage
_setNowPlayingPlayerMessage
_setRecordingStateMessage
_setStateMessage
_setVolumeMessage
_textInputMessage
_transactionPackets
_unregisterGameController
_updateClientMessage
_updateContentItemArtworkMessage
_updateContentItemMessage
_updateOutputDevicesMessage
_updatePlayerMessage
_volumeControlCapabilitiesDidChangeMessage
_volumeDidChangeMessage
_wakeDeviceMessage
hasDescriptor
setHasPhase:
hasPhase
phaseAsString:
StringAsPhase:
setHasFinger:
hasFinger
_finger
_phase
addBundleIdentifierHierarchy:
setBundleIdentifier:
setParentApplicationBundleIdentifier:
setTintColor:
bundleIdentifierHierarchysCount
clearBundleIdentifierHierarchys
bundleIdentifierHierarchyAtIndex:
bundleIdentifierHierarchyType
setProcessIdentifier:
setHasProcessIdentifier:
hasProcessIdentifier
hasBundleIdentifier
hasParentApplicationBundleIdentifier
setProcessUserIdentifier:
setHasProcessUserIdentifier:
hasProcessUserIdentifier
nowPlayingVisibility
setNowPlayingVisibility:
setHasNowPlayingVisibility:
hasNowPlayingVisibility
nowPlayingVisibilityAsString:
StringAsNowPlayingVisibility:
hasTintColor
setIsEmptyDeprecated:
setHasIsEmptyDeprecated:
hasIsEmptyDeprecated
parentApplicationBundleIdentifier
processUserIdentifier
tintColor
bundleIdentifierHierarchys
setBundleIdentifierHierarchys:
isEmptyDeprecated
_bundleIdentifier
_bundleIdentifierHierarchys
_nowPlayingVisibility
_parentApplicationBundleIdentifier
_processIdentifier
_processUserIdentifier
_tintColor
_isEmptyDeprecated
initWithArray:
postNotification:userInfo:object:
_postNotification:userInfo:object:withHandler:
isRegisteredForNowPlayingNotifications
notificationQueue
receivesExternalScreenTypeChangedNotifications
setReceivesExternalScreenTypeChangedNotifications:
receivesSupportedCommandsNotifications
receivesRoutesChangedNotifications
setReceivesRoutesChangedNotifications:
receivesVolumeControlNotifications
setReceivesVolumeControlNotifications:
receivesOriginChangedNotifications
setReceivesOriginChangedNotifications:
receivesPlaybackErrorNotifications
setReceivesPlaybackErrorNotifications:
receivesVoiceInputRecordingStateNotifications
setReceivesVoiceInputRecordingStateNotifications:
_registeredNowPlayingObservers
_customNotificationsQueue
_nowPlayingNotifications
_routesChangedNotifications
_volumeControlNotifications
_externalScreenNotifications
_originNotifications
_supportedCommandsNotifications
_voiceInputNotifications
_errorNotifications
_receivesExternalScreenTypeChangedNotifications
_receivesSupportedCommandsNotifications
_receivesRoutesChangedNotifications
_receivesVolumeControlNotifications
_receivesOriginChangedNotifications
_receivesPlaybackErrorNotifications
_receivesVoiceInputRecordingStateNotifications
initWithNotification:userInfo:queue:
xpcMessage
setXpcMessage:
_notification
_userInfo
_xpcMessage
initWithSuiteName:
_boolValueForKey:usingDefaultValue:
integerForKey:
_doubleValueForKey:usingDefaultValue:
_integerValueForKey:usingDefaultValue:
arrayForKey:
takelockScreenAssertion
boolForKey:
doubleForKey:
usePeerToPeerExternalDeviceConnections
useNoDelayOptionForExternalDeviceSockets
useDebugAVRouteWithoutVolumeControl
shouldInitializeTelevisionBonjourService
shouldInitializeGenericBonjourService
shouldInitializeRapportService
shouldLogPairingSetupCode
shouldLogArtwork
hasExternalDeviceSocketQOSLevelSet
externalDeviceSocketQOSLevel
externalDeviceNowPlayingInfoCoalesceDuration
externalDeviceNowPlayingInfoArtworkCoalesceDuration
externalDeviceDisconnectWaitDuration
externalDeviceDisconnectSleepDuration
externalDeviceSleepAssertionOnClientConnectDuration
bluetoothDeviceResumeDuration
broadcastCommandWaitDuration
airPlayOutputContextInitTimeoutDuration
maxTransactionMemorySize
transactionWaitDurationOnOutOfMemory
transactionWaitDurationOnXpcSend
transactionWaitDurationOnNetworkSend
useSystemAudioContextForAirPlayTransport
useGenericTransportForHostedEndpoints
connectedClientPIDs
setConnectedClientPIDs:
nowPlayingApplicationTimeout
computeNowPlayingApplication
needNowPlayingForegroundState
useProactiveEndpoint
connectToEndpointWhenBeginsPlayback
connectToAllEndpointsWhenAnyEndpointBeginsPlayback
connectToUserSelectedEndpoint
discoverEndpointTimeoutInterval
useDeviceLockStateToRestoreDeferredPlayerPaths
deviceRecentlyUsedInterval
mediaRecentlyPlayedInterval
endpointRecentlyUserSelectedInterval
_removeValueForKey:
isExternalDevicePairingAllowed
setExternalDevicePairingAllowed:
_userDefaults
_externalDevicePairingAllowed
addRequest:
addPlaybackQueueCompletion:forRequest:
subscribeToPlaybackQueue:forRequest:
removePlaybackQueueCompletionForRequest:
enqueuePlaybackQueueRequest:completion:
nowPlayingContentItem
stringByAppendingString:
hasPassword
setHasSecurityType:
hasSecurityType
securityTypeAsString:
StringAsSecurityType:
_securityType
setHasPlayerIndex:
hasPlayerIndex
hasVendorName
setHasButtonAUpDelay:
hasButtonAUpDelay
setHasProfile:
hasProfile
profileAsString:
StringAsProfile:
setHasSupportsExtendedMotion:
hasSupportsExtendedMotion
_buttonAUpDelay
_playerIndex
_profile
_vendorName
_supportsExtendedMotion
initWithItem:request:
setItem:
item
_item
setHasStartOffset:
hasStartOffset
setHasVariableFramesInPacket:
hasVariableFramesInPacket
setHasDataByteSize:
hasDataByteSize
_startOffset
_dataByteSize
_variableFramesInPacket
setIncludesPeerToPeer:
endDiscovery
searchForServicesOfType:inDomain:
stop
mainRunLoop
startMonitoring
resolveWithTimeout:
externalDeviceController:didRemoveDevice:
stopMonitoring
createDeviceInfoFromNetService:
initWithNetService:
setRequiresCustomPairing:
externalDeviceClass
setNetService:
_isManagedConfigIDAllowed:
externalDeviceController:didDiscoverDevice:
dictionaryFromTXTRecordData:
createDeviceInfoFromTXTRecord:
updateDeviceInfoWithTXTRecord:
netServiceBrowserWillSearch:
netServiceBrowserDidStopSearch:
netServiceBrowser:didNotSearch:
netServiceBrowser:didFindDomain:moreComing:
netServiceBrowser:didFindService:moreComing:
netServiceBrowser:didRemoveDomain:moreComing:
netServiceBrowser:didRemoveService:moreComing:
netServiceWillPublish:
netServiceDidPublish:
netService:didNotPublish:
netServiceWillResolve:
netServiceDidResolveAddress:
netService:didNotResolve:
netServiceDidStop:
netService:didUpdateTXTRecordData:
netService:didAcceptConnectionWithInputStream:outputStream:
initWithBonjourServiceType:
beginDiscovery
bonjourServiceType
isDiscovering
_serviceBrowser
_discoveredDevices
_resolvingServices
_monitoringServices
_discovering
_bonjourServiceType
shouldUseSystemAuthenticationPrompt
_requiresCustomPairing
TXTRecordData
dataUsingEncoding:
initWithData:encoding:
netService
_netService
_unregisterNotificationsForOutputContext:
_destroyRemoteControlContext
_onQueue_initializeOutputContext
initWithOutputContext:connectionType:
isChannelOpen
_onQueue_resetStreams
_onQueue_createRemoteControlContextWithID:
cancellationReason
addOutputDevice:options:completionHandler:
_registerNotificationsForOutputContext:
removeOutputDevice:
outputContextForControllingOutputDeviceGroupWithID:options:
initWithOutputDevice:avOutputDevice:connectionType:
outputDevice
_error
_inputStream
_outputStream
_useSystemAuthenticationPrompt
_outputDevice
setHasDeviceIdentifier:
hasDeviceIdentifier
_deviceIdentifier
existingOriginClientRequestsForPlayerPath:
_processNeedsNonPlayerPathBasedNotificationsForBackwardCompatabilitySupport
_shouldPostNotifications
_processActivePlayerPathChanges:
_processActiveOriginChanges:
_processOriginChanges:
removeOriginRequests:
_notificationFired:originNotification:nowPlayingNotification:
_processActiveApplicationChanges:
_processApplicationChanges:
_notificationFired:playerPathNotifcation:originNotification:nowPlayingNotification:
_processActivePlayerChanges:
_processPlayerChanges:
existingPlayerClientRequestsForPlayerPath:
updateContentItems:
hasRequest:
updateContentItemArtwork:
originClientRequestsForPlayerPath:
_handleActiveOriginDidChangeNotification:
_handleOriginDidRegisterNotification:
_handleOriginDidUnregisterNotification:
_handleVolumeControlCapabilitiesDidChangeNotification:
_handleVolumeDidChangeNotification:
_handleDeviceInfoDidChangeNotification:
_handleActiveApplicationDidChangeNotification:
_handleApplicationDidRegisterNotification:
_handleApplicationDidUnregisterNotification:
_handleAnyApplicationIsPlayingDidChangeNotification:
_handleApplicationClientStateDidChangeNotification:
_handleApplicationDisplayNameDidChangeNotification:
_handleApplicationDidForegroundNotification:
_handleActivePlayerDidChangeNotification:
_handlePlayerDidRegisterNotification:
_handlePlayerDidUnregisterNotification:
_handlePlayerPlaybackQueueDidChangeNotification:
_handlePlayerContentItemsDidChangeNotification:
_handlePlayerContentItemArtworkDidChangeNotification:
_handlePlayerSupportedCommandsDidChangeNotification:
_handlePlayerNowPlayingInfoDidChangeNotification:
_handlePlayerPlaybackStateDidChangeNotification:
_handlePlayerIsPlayingDidChangeNotification:
_handlePlayerStateDidChangeNotification:
_handleActiveSystemEndpointDidChangeNotification:
_serviceClient
valueForKeyPath:
mr_isEqualToOutputDevicesArray:
setHasZ:
hasZ
setHasW:
hasW
initWithCallbackBlock:queue:
callbackBlock
_callbackBlock
discoveryCallback
setDiscoveryCallback:
removalCallback
setRemovalCallback:
_discoveryCallback
_removalCallback
setVersion:
setHasVersion:
hasVersion
_version
addOutputDevicesChangedCallback:
removeEndpointsChangedCallback:
removeOutputDevicesChangedCallback:
alwaysAllowUpdates
setAlwaysAllowUpdates:
_endpointsChangedCallbacks
_outputDevicesChangedCallbacks
_alwaysAllowUpdates
targetAudioSessionID
setTargetAudioSessionID:
addMessage:
messages
localizedModelName
systemBuildVersion
applicationBundleIdentifier
applicationBundleVersion
systemMediaApplication
setSystemMediaApplication:
setLocalReceiverPairingIdentity:
localReceiverPairingIdentity
groupUID
groupName
managedConfigDeviceID
setManagedConfigDeviceID:
protocolVersion
deviceClass
tightSyncUID
tightlySyncedGroup
allowsPairing
supportsSystemPairing
supportsACL
setSharedQueueVersion:
hasSharedQueueVersion
sharedQueueVersion
connected
setLocalizedModelName:
setSystemBuildVersion:
setProtocolVersion:
setDeviceClass:
setTightSyncUID:
setTightlySyncedGroup:
setGroupUID:
setGroupName:
setAllowsPairing:
setSupportsSystemPairing:
setSupportsACL:
setConnected:
setBluetoothAddress:
logicalDeviceCount
setLogicalDeviceCount:
setGroupedDevices:
groupedDevices
setIsAirplayActive:
isAirplayActive
setByAddingObject:
initWithFirst:second:
currentProtocolVersion
sharedConnection
effectiveBoolValueForSetting:
writeToFile:options:error:
deviceUID
setPacketData:
hasPacketData
setTotalLength:
setHasTotalLength:
hasTotalLength
setTotalWritePosition:
setHasTotalWritePosition:
hasTotalWritePosition
packetData
totalLength
totalWritePosition
_totalLength
_totalWritePosition
_packetData
setRevision:
hasRevision
revision
_revision
_pickableRoutesDidChangeNotification:
_cacheFetchedPickableRoutes:forCategory:
_flushPendingCompletionHandlersWithPickableRoutes:forCategory:
mediaRemoteService
_mediaRemoteService
_pendingCompletionHandlersForCategories
_cachedRoutesForCategories
hasFormatSettingsPlistData
_formatSettingsPlistData
setSourceID:
setSystemAppPlaybackQueueData:
setContextID:
setStationURL:
setContentItemID:
setLanguageOption:
setPlaybackQueueContext:
setInsertAfterContentItemID:
setNowPlayingContentItemID:
setSenderID:
setRemoteControlInterface:
hasSourceID
setExternalPlayerCommand:
setHasExternalPlayerCommand:
hasExternalPlayerCommand
setRating:
setHasRating:
hasRating
setNegative:
setHasNegative:
hasNegative
setPlaybackPosition:
setHasPlaybackPosition:
hasPlaybackPosition
hasContextID
setTrackID:
setHasTrackID:
hasTrackID
setRadioStationID:
setHasRadioStationID:
hasRadioStationID
hasSystemAppPlaybackQueueData
sendOptions
setSendOptions:
setHasSendOptions:
hasSendOptions
sendOptionsAsString:
StringAsSendOptions:
setRequestDefermentToPlaybackQueuePosition:
setHasRequestDefermentToPlaybackQueuePosition:
hasRequestDefermentToPlaybackQueuePosition
setShouldOverrideManuallyCuratedQueue:
setHasShouldOverrideManuallyCuratedQueue:
hasShouldOverrideManuallyCuratedQueue
hasStationURL
setShouldBeginRadioPlayback:
setHasShouldBeginRadioPlayback:
hasShouldBeginRadioPlayback
setPlaybackQueueInsertionPosition:
setHasPlaybackQueueInsertionPosition:
hasPlaybackQueueInsertionPosition
hasContentItemID
setPlaybackQueueOffset:
setHasPlaybackQueueOffset:
hasPlaybackQueueOffset
setPlaybackQueueDestinationOffset:
setHasPlaybackQueueDestinationOffset:
hasPlaybackQueueDestinationOffset
hasLanguageOption
hasPlaybackQueueContext
hasInsertAfterContentItemID
hasNowPlayingContentItemID
replaceIntent
setReplaceIntent:
setHasReplaceIntent:
hasReplaceIntent
replaceIntentAsString:
StringAsReplaceIntent:
hasSenderID
hasRemoteControlInterface
sourceID
externalPlayerCommand
rating
negative
playbackPosition
trackID
radioStationID
systemAppPlaybackQueueData
requestDefermentToPlaybackQueuePosition
shouldOverrideManuallyCuratedQueue
stationURL
shouldBeginRadioPlayback
playbackQueueInsertionPosition
contentItemID
playbackQueueOffset
playbackQueueDestinationOffset
languageOption
playbackQueueContext
insertAfterContentItemID
nowPlayingContentItemID
senderID
remoteControlInterface
_playbackPosition
_radioStationID
_trackID
_contentItemID
_contextID
_insertAfterContentItemID
_languageOption
_nowPlayingContentItemID
_playbackQueueContext
_playbackQueueDestinationOffset
_playbackQueueInsertionPosition
_playbackQueueOffset
_rating
_remoteControlInterface
_replaceIntent
_sendOptions
_senderID
_sourceID
_stationURL
_systemAppPlaybackQueueData
_externalPlayerCommand
_negative
_requestDefermentToPlaybackQueuePosition
_shouldBeginRadioPlayback
_shouldOverrideManuallyCuratedQueue
initWithCommandID:sendError:results:
_results
enumerateFilteredContentItemsBySubscriptionsForContentItems:block:
clearCachedContentItemArtworkForItems:
filteredContentItemsBySubscriptionsForContentItems:
updateCacheWithContentItems:
cacheContentItemChangesForPendingRequests:
pairingSession:promptForSetupCodeWithCompletion:
dataExchangeBlock
showSetupCodeBlock
hideSetupCodeBlock
promptForSetupCodeBlock
exchangeCompleteBlock
_dataExchangeBlock
_showSetupCodeBlock
_hideSetupCodeBlock
_promptForSetupCodeBlock
_exchangeCompleteBlock
statusAsString:
StringAsStatus:
string
applicationProxyForIdentifier:
entitlementValuesForKeys:
appendFormat:
pathWithComponents:
createDirectoryAtPath:withIntermediateDirectories:attributes:error:
stringByAppendingPathComponent:
stringByReplacingOccurrencesOfString:withString:
initWithBytesNoCopy:length:encoding:freeWhenDone:
weakObjectsHashTable
addNotification:
addUserInfo:
addPlayerPath:
notificationsCount
clearNotifications
notificationAtIndex:
userInfosCount
clearUserInfos
userInfoAtIndex:
playerPathsCount
clearPlayerPaths
playerPathAtIndex:
notificationType
userInfoType
playerPathType
notifications
userInfos
setUserInfos:
playerPaths
setPlayerPaths:
_notifications
_playerPaths
_userInfos
actualLength
isReadComplete
initWithPackets:
writeComplete
setWriteLength:
isWriteComplete
isComplete
writeLength
writePosition
_writeLength
_writePosition
sortUsingComparator:
mergePacket:
_currentLength
isEmpty
packetize:packageSize:completion:
unpacketize:completion:
_outgoingPackets
_incomingPackets
_begin
_processMessage:
transactionDidEnd:
initWithName:playerPath:packets:delegate:
_packetizer
initWithName:playerPath:
packetsFromMessage:completion:
customDictionaryRepresentation
initialize
doubleValue
dateWithTimeIntervalSinceReferenceDate:
initWithNotification:
initWithArtworkData:
messageSentCallbacks
setError:
_protobufData
_replied
_messageSentCallbacks
_messagePurgedCallbacks
_isReply
_underlyingCodableMessage
packetsCount
clearPackets
packetsAtIndex:
packetsType
addGroupedDevices:
groupedDevicesCount
clearGroupedDevices
groupedDevicesAtIndex:
groupedDevicesType
hasLocalizedModelName
hasSystemBuildVersion
hasApplicationBundleIdentifier
hasApplicationBundleVersion
setHasProtocolVersion:
hasProtocolVersion
setHasLastSupportedMessageType:
setHasSupportsSystemPairing:
hasSupportsSystemPairing
setHasAllowsPairing:
hasAllowsPairing
setHasConnected:
hasConnected
hasSystemMediaApplication
setHasSupportsACL:
hasSupportsACL
hasBluetoothAddress
setHasSharedQueueVersion:
hasLocalReceiverPairingIdentity
hasManagedConfigDeviceID
setHasDeviceClass:
hasDeviceClass
deviceClassAsString:
StringAsDeviceClass:
setHasLogicalDeviceCount:
hasLogicalDeviceCount
setHasTightlySyncedGroup:
hasTightlySyncedGroup
hasTightSyncUID
hasGroupUID
hasGroupName
setHasIsAirplayActive:
hasIsAirplayActive
_protocolVersion
_applicationBundleIdentifier
_applicationBundleVersion
_bluetoothAddress
_deviceClass
_groupName
_groupUID
_groupedDevices
_localReceiverPairingIdentity
_localizedModelName
_logicalDeviceCount
_managedConfigDeviceID
_sharedQueueVersion
_systemBuildVersion
_systemMediaApplication
_tightSyncUID
_allowsPairing
_connected
_isAirplayActive
_supportsACL
_supportsSystemPairing
_tightlySyncedGroup
isAbsolute
isIntegratedDisplay
screenSize
setDeviceDescriptor:
deviceDescriptor
setScreenSize:
_deviceDescriptor
setInvalidatationTimestamp:
testAndSetCoalescingInvalidations
unsetCoalescingInvalidations
initWithObjects:
allowsKeyedCoding
encodeInt32:forKey:
decodeInt32ForKey:
decodeObjectOfClasses:forKey:
failWithError:
allowEmptySelection
defaultLanguageOption
languageOptions
setAllowEmptySelection:
setDefaultLanguageOption:
setLanguageOptions:
arrayWithObjects:
setByAddingObjectsFromArray:
addLanguageOptions:
hasHidEventData
_hidEventData
pINEntrySeparatorIndexesCount
clearPINEntrySeparatorIndexes
pINEntrySeparatorIndexesAtIndex:
addPINEntrySeparatorIndexes:
autocapitalizationType
setAutocapitalizationType:
setHasAutocapitalizationType:
hasAutocapitalizationType
autocapitalizationTypeAsString:
StringAsAutocapitalizationType:
keyboardType
setKeyboardType:
setHasKeyboardType:
hasKeyboardType
keyboardTypeAsString:
StringAsKeyboardType:
returnKeyType
setReturnKeyType:
setHasReturnKeyType:
hasReturnKeyType
returnKeyTypeAsString:
StringAsReturnKeyType:
setAutocorrection:
setHasAutocorrection:
hasAutocorrection
setSpellchecking:
setHasSpellchecking:
hasSpellchecking
setEnablesReturnKeyAutomatically:
setHasEnablesReturnKeyAutomatically:
hasEnablesReturnKeyAutomatically
setSecureTextEntry:
setHasSecureTextEntry:
hasSecureTextEntry
setValidTextRangeLocation:
setHasValidTextRangeLocation:
hasValidTextRangeLocation
setValidTextRangeLength:
setHasValidTextRangeLength:
hasValidTextRangeLength
pINEntrySeparatorIndexes
setPINEntrySeparatorIndexes:count:
autocorrection
spellchecking
enablesReturnKeyAutomatically
secureTextEntry
validTextRangeLocation
validTextRangeLength
_pINEntrySeparatorIndexes
_validTextRangeLength
_validTextRangeLocation
_autocapitalizationType
_keyboardType
_returnKeyType
_autocorrection
_enablesReturnKeyAutomatically
_secureTextEntry
_spellchecking
playbackQueueTransactionCallback
playbackQueueCallback
_onQueue_capabilities
registerNowPlayingInfoCallbacks:
registerNowPlayingInfoAssetCallbacks:
registerNowPlayingInfoArtworkAssetCallback:
copyImageData
longValue
mimeType
initWithPlayerPath:queue:
setBeginLyricsEventCallback:
setEndLyricsEventCallback:
registerNowPlayingInfoBackedPlaybackQueueDataSourceCallbacks
_createPlaybackQueueForRequestCallbacks
_createItemForOffsetCallbacks
_createChildItemCallbacks
_metadataCallbacks
_languageOptionsCallbacks
_infoCallbacks
_lyricsCallbacks
_artworkCallbacks
_beginLyricsEventCallback
_endLyricsEventCallback
_videoThumbnailsCallback
_audioAmplitudeSamplesCallback
_commandHandlerBlocks
_createItemToken
_metadataToken
_languageToken
_artworkToken
green
blue
alpha
setRed:
setGreen:
setBlue:
setAlpha:
setAudioSessionType:
audioSessionType
hasAudioSessionType
setPlayer:
initWithPlayerPath:queue:invalidationCallback:
customDescription
bundleProxyForIdentifier:
bundleURL
bundleWithURL:
arrayWithArray:
numberWithLong:
setMaxConcurrentOperationCount:
_callAllCompletionHandlersWithError:
waitUntilAllOperationsAreFinished
localizedCaseInsensitiveCompare:
sortUsingSelector:
_externalDeviceConnectionStateDidChangeNotification:
addOperationWithBlock:
_requestSharedAudioPresentationOutputContextModificationWithAddingDevices:removingDevices:settingDevices:replyQueue:completion:
connectToExternalDeviceWithCompletion:
outputDevicesMatchingPredicate:
isEqualToOrderedSet:
scheduledTimerWithTimeInterval:repeats:block:
auxiliarySession
setCategory:error:
opaqueSessionID
discoverySession
setReturnPartialResults:
_modifyOutputDevices:inGroup:queue:modifyDevices:completion:
logicalOutputDeviceCount
shortDescription
containsOutputDevice:
outputDeviceUIDsMatchingPredicate:
effectivelyEqual:
setProxyGroupPlayer:
_pendingConnectionHandlers
_connectionHandlerOperationQueue
_registeredForConnectionStateDidChangeNotifications
_connectionTimeoutTimer
_outputDevicesDidChangeNotificationScheduled
_removeRequestID:
second
first
keyForObject:
initWithCapacity:falsePositiveTolerance:
restoreStateFromController:
removeRequest:
requestForContentItemIdentifier:
_requestFilters
_requests
_offsets
_handlePlayerPathRemovedNotification:
_handleApplicationRemovedNotification:
_handleOriginRemovedNotification:
dictionaryKeyWithPlayerPath:
allKeys
initWithQueue:
subscriptionControllerForPlayerPath:
_controllers
setHasInputModeFlags:
hasInputModeFlags
inputModeFlagsAsString:
StringAsInputModeFlags:
_inputModeFlags
setHasDPadX:
hasDPadX
setHasDPadY:
hasDPadY
setHasA:
hasA
setHasB:
hasB
setHasLeftShoulder:
hasLeftShoulder
setHasRightShoulder:
hasRightShoulder
setHasLeftThumbstickX:
hasLeftThumbstickX
setHasLeftThumbstickY:
hasLeftThumbstickY
setHasRightThumbstickX:
hasRightThumbstickX
setHasRightThumbstickY:
hasRightThumbstickY
setHasLeftTrigger:
hasLeftTrigger
setHasRightTrigger:
hasRightTrigger
setHasPause:
hasPause
_dPadX
_dPadY
_leftShoulder
_leftThumbstickX
_leftThumbstickY
_leftTrigger
_pause
_rightShoulder
_rightThumbstickX
_rightThumbstickY
_rightTrigger
_registerDefaultCallbacks
_handleEnqueuedPlaybackQueueRequest:completion:
updatePlaybackQueue:
archivedDataWithRootObject:requiringSecureCoding:error:
_transactionDestintationForName:
_handleTransactionPackets:packets:completion:
transactionCallbacksForName:
addTransactionCallback:forName:
_responseQueue
_playbackQueueCompletions
_supportedCommandsCompletions
_playbackStateCompletions
_transactions
_enquedNowPlayingInfoRequests
_enquedNowPlayingInfoAssetRequests
_subscriptionController
isEqualToData:
_imageData
_mimeType
_registerMediaServerNotifications
_unregisterMediaServerNotifications
sharedInstance
canBeNowPlayingApp
_avSessionMediaServicesResetNotification:
applicationPickedRoutes
setApplicationPickedRoutes:
setRouteDiscoveryMode:
routeDiscoveryMode
activeNowPlayingClient
setActivity:
activity
existingNowPlayingClientForPlayerPath:
nowPlayingClientForPlayerPath:
hardwareRemoteBehavior
_canBeNowPlayingApp
_canBeNowPlayingAppTimestamp
_isOverrideApp
_routeDiscoveryMode
_applicationPickedRoutes
_inputMode
_activity
_playbackQueueCallback
_playbackQueueTransactionCallback
_capabilitiesCallback
_commandCallback
_activeNowPlayingClient
_hardwareRemoteBehavior
nowPlayingPlayerClientForPlayerPath:
_activePlayer
hasPrefix:
stringValue
itemMetadata
currentPlaybackDate
setCurrentPlaybackDate:
assetURL
setAssetURL:
artworkURLTemplates
setArtworkURLTemplates:
appMetrics
setAppMetrics:
collectionInfo
setCollectionInfo:
_BoolValue
setUserInfo:
deviceSpecificUserInfo
setDeviceSpecificUserInfo:
_initWithData:
absoluteString
_assetURL
_appMetrics
_collectionInfo
_currentPlaybackDate
_deviceSpecificUserInfo
_artworkURLTemplates
hasCurrentLanguageOptions
hasAvailableLanguageOptions
sharedClient
setRecordingStateCallback:forDeviceID:
_recordingStateChangedNotification:
_deviceIDToCallbackMap
initWithMachServiceName:options:
invokeEventsForController:beacuseElement:
eventForController:element:
sendEventBlock
send
setLastDownEvent:
lastDownEvent
controllerID:setValue:forElement:
setSendEventBlock:
defaultGameControllerDaemonProxy
replyConnectedHosts:
_openConnection
addEmulatedControllerWithProperties:
removeEmulatedController:
controllerID:setValue:forElement:withUpDelay:
controllerID:setDigitizerX:digitizerY:withTimeStamp:touchDown:
controllerID:setArrayValueX:y:z:w:forElement:
_delayEvent:setValue:forElement:withUpDelay:
addController:
removeController:
controllerWithUDID:setData:
controllerWithUDID:setValue:forElement:
microControllerWithDigitizerX:withY:withTimeStamp:touchDown:
microControllerWithUDID:setDigitizerX:digitizerY:withTimeStamp:touchDown:
_delayedEvents
_events
_sendEventBlock
_lastDownEvent
updateCacheWithPlaybackQueue:
_onQueue_nowPlayingContentItem
compare:
sortedArrayUsingSelector:
reverseObjectEnumerator
preProcessChangePlaybackRateCommandWithOptions:
_onQueue_sendTransaction:withPackets:
invalidatationTimestamp
testAndSetCoalescingRequests
unsetCoalescingRequests
updateCacheWithItem:
beginSendingTransactions
endSendingTransactions
addPendingRequest:
startCachingContentItemUpdatesForItem:forPendingRequest:
updatePlaybackQueueWithCachedUpdates:forPendingRequest:
_playbackStateDate
_lastReceivedCommandDate
_coalescingInvalidations
_coalescingRequests
_triggerInvalidation
_invalidatationTimestamp
_coelscingTransactionPackets
_transactionSources
_cachedContentItemUpdates
_clientCallbacks
_openStream:
_closeStream:
_clientSupportsMessage:
_sendMessage:queue:reply:
_stream:handleEvent:
_setQOSPropertiesOnStream:
increaseLengthBy:
_parseMessageData:
_flush
_disconnectClient
decryptData:error:
sharedLogger
logMessage:client:protocolMessage:
_preProcessMessage:data:
_notifyDelegateClientDidRecieveMessage:
write:maxLength:
invoke
encryptDataForMessage:
createHeader:
processData:
_adjustTimestamp:
_notifyDelegateClientDidDisconnect
parser:didParseMessage:
inputStream
outputStream
_parser
_messageQueue
_disconnected
_firstClientNanoseconds
_firstDeviceTicks
setExternalDevice:
serialQueue
setSerialQueue:
_externalDevice
clearDeviceIDs
setDeviceIDs:count:
_deviceIDs
initWithState:encryptedTextCyphertext:attributes:
encryptedMessageWithState:text:attributes:usingCryptoSession:
setController:
controller
gameController:propertiesDidChange:
sendGameControllerEvent:
_handleGameControllerDidChange:
_remote
_controller
setUserProvided:
setHasUserProvided:
hasUserProvided
userProvided
_userProvided
registeredToNowPlayingUpdates
setRegisteredToNowPlayingUpdates:
registeredToVolumeUpdates
setRegisteredToVolumeUpdates:
registeredKeyboardUpdates
setRegisteredKeyboardUpdates:
registeredToOutputDeviceUpdates
setRegisteredToOutputDeviceUpdates:
cryptoEnabled
_registeredToNowPlayingUpdates
_registeredToVolumeUpdates
_registeredKeyboardUpdates
_registeredToOutputDeviceUpdates
_cryptoEnabled
_voiceRecordingState
_cryptoSession
languageOptionsCount
clearLanguageOptions
languageOptionsAtIndex:
languageOptionsType
setHasAllowEmptySelection:
hasAllowEmptySelection
hasDefaultLanguageOption
_defaultLanguageOption
_languageOptions
_allowEmptySelection
setHasDeviceID:
hasDeviceID
setHasRecordingState:
hasRecordingState
recordingStateAsString:
StringAsRecordingState:
existingOriginClientForPlayerPath:
clientRequestsForPlayerPath:
existingClientRequestsForPlayerPath:
existingClientForPlayerPath:
_originClients
_originClientRequests
setHasRed:
hasRed
setHasGreen:
hasGreen
setHasBlue:
hasBlue
setHasAlpha:
hasAlpha
_alpha
_blue
_green
_red
block
callbacks
initWithObjectsAndKeys:
initWithPairingData:status:
setHasAudioSessionType:
audioSessionTypeAsString:
StringAsAudioSessionType:
_audioSessionType
_screenSize
initWithTitle:prompt:
isEditing
_editing
_discoverySessionEndpointsChangedCallback:
_discoverySessionOutputDevicesChangedCallback:
_onQueue_cancelSearch
beginSearchWithTimeout:endpointsCompletion:
setCallback:
setUnanimousEndpoint:
_onQueue_concludeSearch
cancelSearch
_onQueue_timeoutTimerFired
_processSearchLoop
_onQueue_updateCachedOutputDevices:endpoints:
pairWithFirst:second:
mr_containsObjectUsingWeakMatching:
unanimousEndpoint
shouldWaitForUnanimousEndpoints
_onQueue_endSearch
matchingOutputDeviceUIDs
matchingOutputDeviceGroupID
setDiscoverySession:
useWeakMatching
setUseWeakMatching:
returnPartialResults
matchingLogicalDeviceIDs
setMatchingLogicalDeviceIDs:
matchingOutputDeviceUIDsSet
setMatchingOutputDeviceUIDsSet:
setMatchingOutputDeviceGroupID:
discoverySessionCallbackToken
setDiscoverySessionCallbackToken:
timeoutTimer
setTimeoutTimer:
callbackSyncQueue
setCallbackSyncQueue:
searchInProgress
setSearchInProgress:
setShouldWaitForUnanimousEndpoints:
matchingDevicesFound
setMatchingDevicesFound:
matchingEndpointsFound
setMatchingEndpointsFound:
setAvailableOutputDevices:
setAvailableEndpoints:
updatesReceived
setUpdatesReceived:
lastProcessedOutputDevices
setLastProcessedOutputDevices:
lastProcessedEndpoints
setLastProcessedEndpoints:
_timeoutTimerTimeout
_localMatchingDevicesFound
_useWeakMatching
_returnPartialResults
_searchInProgress
_shouldWaitForUnanimousEndpoints
_matchingLogicalDeviceIDs
_matchingOutputDeviceUIDsSet
_matchingOutputDeviceGroupID
_discoverySessionCallbackToken
_timeoutTimer
_callbackSyncQueue
_matchingDevicesFound
_matchingEndpointsFound
_unanimousEndpoint
_availableOutputDevices
_availableEndpoints
_lastProcessedOutputDevices
_lastProcessedEndpoints
_updatesReceived
buttons
_buttons
_digitizer
_motion
hasDataBlock
addContentItem:
contentItemAtIndex:
contentItemType
hasResolvedPlayerPath
setHasSendingPlaybackQueueTransaction:
_resolvedPlayerPath
_sendingPlaybackQueueTransaction
hasImageData
setHasTime:
initWithDeviceFeatures:
_availableOutputDevicesDidChangeNotification:
_scheduleAvailableEndpointsAndOutputDevicesReload
_onQueue_reloadAvailableOutputDevices
targetAudioSession
retrieveSessionWithID:
setTargetAudioSession:
indexesOfObjectsPassingTest:
_calloutQueue
_avDiscoverySession
_targetAudioSessionID
_scheduledAvailableEndpointsAndOutputDevicesReload
_airplayActiveNotificationToken
_isLocalDeviceBeingAirplayedTo
communicationChannelDelegate
setCommunicationChannelDelegate:
outputContextOutgoingCommunicationChannelDidBecomeAvailable:
outputContext:didReceiveData:fromCommunicationChannel:
outputContext:didCloseCommunicationChannel:
outputContext
openCommunicationChannelWithOptions:error:
_outputContextDidCloseCommunicationChannelNotification:
sendData:completionHandler:
initWithCommunicationChannel:
communicationChannel
channelIsOpen
setChannelIsOpen:
_communicationChannel
_channelOpen
_channelIsOpen
encodeInt:forKey:
decodeIntForKey:
initWithPrimaryAppDisplayID:secondaryAppDisplayID:
primaryApplicationDisplayID
secondaryApplicationDisplayID
creatorProcessID
_primaryApplicationDisplayID
_secondaryApplicationDisplayID
_creatorProcessID
setPrimaryApplicationDisplayID:
setSecondaryApplicationDisplayID:
hasDeviceDescriptor
hasOrigin
hasPlayer
_player
hasGravity
hasUserAcceleration
hasAttitude
hasRotation
_attitude
_gravity
_rotation
_userAcceleration
setCharacterCount:
_randomPasscode
setPasscode:
_characterCount
_passcode
setShouldLog:
setBool:forKey:
_shouldLog
idx (%tu) is out of range (%tu)
%@ %@
timeIntervals
thumbnailsWidth
thumbnailsHeight
timeIntervalsCount
TI,R,N
T^d,R,N
hasThumbnailsWidth
TB,N
Tf,N,V_thumbnailsWidth
hasThumbnailsHeight
Tf,N,V_thumbnailsHeight
location
length
includeMetadata
artworkWidth
artworkHeight
includeLyrics
includeSections
includeInfo
includeLanguageOptions
context
requestID
contentItemIdentifiers
returnContentItemAssetsInUserCompletion
playerPath
cachingPolicy
label
isLegacyNowPlayingInfoRequest
hasLocation
Ti,N,V_location
hasLength
Ti,N,V_length
hasIncludeMetadata
TB,N,V_includeMetadata
hasArtworkWidth
Td,N,V_artworkWidth
hasArtworkHeight
Td,N,V_artworkHeight
hasIncludeLyrics
TB,N,V_includeLyrics
hasIncludeSections
TB,N,V_includeSections
hasIncludeInfo
TB,N,V_includeInfo
hasIncludeLanguageOptions
TB,N,V_includeLanguageOptions
hasContext
TB,R,N
T@"_MRPlaybackQueueContextProtobuf",&,N,V_context
hasRequestID
T@"NSString",&,N,V_requestID
T@"NSMutableArray",&,N,V_contentItemIdentifiers
hasReturnContentItemAssetsInUserCompletion
TB,N,V_returnContentItemAssetsInUserCompletion
hasPlayerPath
T@"_MRNowPlayingPlayerPathProtobuf",&,N,V_playerPath
hasCachingPolicy
Ti,N,V_cachingPolicy
hasLabel
T@"NSString",&,N,V_label
hasIsLegacyNowPlayingInfoRequest
TB,N,V_isLegacyNowPlayingInfoRequest
controllerID
properties
hasControllerID
TQ,N,V_controllerID
hasProperties
T@"_MRGameControllerPropertiesProtobuf",&,N,V_properties
nowPlayingUpdates
artworkUpdates
volumeUpdates
keyboardUpdates
outputDeviceUpdates
startTime
endTime
token
hasStartTime
Td,N,V_startTime
hasEndTime
Td,N,V_endTime
hasToken
T@"_MRLyricsTokenProtobuf",&,N,V_token
buffer
time
gain
hasBuffer
T@"_MRAudioBufferProtobuf",&,N,V_buffer
hasTime
T@"_MRAudioTimeProtobuf",&,N,V_time
hasGain
Td,N,V_gain
Cannot remove peer, No device available
Cannot update peer, No device available
v16@?0@"NSString"4@8^B12
v4@?0
v12@?0@"NSArray"4@"NSError"8
CUPairedPeer
CoreUtils
CUPairingManager Invalidation
CUPairingManager Interuption
v8@?0@"NSError"4
Does not have required entitlements
CUPairingManager
com.apple.MediaRemote.MRCoreUtilsSystemPairingSession.GlobalQueue
@"NSData"8@?0@"MRProtocolMessage"4
datasource
T@"<MRProtocolMessageQueueDataSource>",W,N
delegate
T@"<MRProtocolMessageQueueDelegate>",W,N
data
T@"NSData",R,N
message
T@"MRProtocolMessage",R,N
readPosition
Ti,N,V_readPosition
finished
TB,R,N,GisFinished
canPurge
/BuildRoot/Library/Caches/com.apple.xbs/Sources/MediaRemote_Sim/MediaRemote-4016.520.2/MediaRemote/Framework/ExternalDevice/MRProtocolMessageQueue.m
<Unknown File>
Removing unfinished message. This is bad
B8@?0I4
outputDeviceUID
hasOutputDeviceUID
T@"NSString",&,N,V_outputDeviceUID
<%@:%p type=%@, addingDevices=%@, removingDevices=%@ settingDevices=%@>
contextType
addingOutputDeviceUIDs
T@"NSArray",R,N
removingOutputDeviceUIDs
settingOutputDeviceUIDs
outputDevices
outputDeviceUIDs
Unknown
SharedAudioPresentation
SharedSystemAudio
SharedSystemScreen
iTunesAudio
Auxiliary
(unknown: %i)
v8@?0^v4
I8@?0I4
v12@?0^{__CFArray=}4^{__CFError=}8
v12@?0^{__CFDictionary=}4^v8
v8@?0I4
v12@?0^v4^{__CFError=}8
v12@?0L4^{__CFError=}8
AVAudioFormat
AVFoundation
AVAudioCompressedBuffer
T@"AVAudioCompressedBuffer",R,N,V_buffer
formatSettings
T@"NSDictionary",R,N,V_formatSettings
route
inputType
hasRoute
T@"_MRAVOutputDeviceDescriptorProtobuf",&,N,V_route
hasInputType
Ti,N,V_inputType
None
Alphabet
Number
Email
Connections
Discovery
_MRLogForCategory
/BuildRoot/Library/Caches/com.apple.xbs/Sources/MediaRemote_Sim/MediaRemote-4016.520.2/MediaRemote/Framework/Utility/MRLog.m
category < MRLoggingCategoryCOUNT
MediaRemote
NowPlaying
RemoteControl
ExternalDevice
Television
AudioInputPlugin
Assertion
com.apple.amp.mediaremote
supportedCommand
supportedCommands
T@"NSMutableArray",&,N,V_supportedCommands
state
T@"_MRSetStateMessageProtobuf",R,N
hiliteMode
client
T@"_MRNowPlayingClientProtobuf",R,N
T@"_MRNowPlayingPlayerPathProtobuf",R,N
contentItems
nowPlayingInfo
playbackQueue
displayID
displayName
playbackState
playbackQueueCapabilities
request
playbackStateTimestamp
hasNowPlayingInfo
T@"_MRNowPlayingInfoProtobuf",&,N,V_nowPlayingInfo
hasSupportedCommands
T@"_MRSupportedCommandsProtobuf",&,N,V_supportedCommands
hasPlaybackQueue
T@"_MRPlaybackQueueProtobuf",&,N,V_playbackQueue
hasDisplayID
T@"NSString",&,N,V_displayID
hasDisplayName
T@"NSString",&,N,V_displayName
hasPlaybackState
Ti,N,V_playbackState
hasPlaybackQueueCapabilities
T@"_MRPlaybackQueueCapabilitiesProtobuf",&,N,V_playbackQueueCapabilities
hasRequest
T@"_MRPlaybackQueueRequestProtobuf",&,N,V_request
hasPlaybackStateTimestamp
Td,N,V_playbackStateTimestamp
Playing
Paused
Stopped
Interrupted
Seeking
MRMediaRemoteMediaTypeMusic
MRMediaRemoteMediaTypePodcast
MRMediaRemoteMediaTypeAudioBook
MRMediaRemoteMediaTypeITunesU
kMRMediaRemoteMediaTypeITunesRadio
kMRMediaRemoteNowPlayingInfoTypeAudio
kMRMediaRemoteNowPlayingInfoTypeVideo
kMRMediaRemoteNowPlayingInfoDidChangeNotification
kMRMediaRemoteOriginNowPlayingInfoDidChangeNotification
kMRMediaRemotePlayerNowPlayingInfoDidChangeNotification
_MRMediaRemotePlayerNowPlayingInfoDidChangeNotification
kMRMediaRemoteNowPlayingApplicationDidChangeNotification
kMRMediaRemoteOriginNowPlayingApplicationDidChangeNotification
_MRMediaRemoteOriginNowPlayingApplicationDidChangeNotification
kMRMediaRemoteNowPlayingApplicationDisplayNameDidChangeNotification
kMRMediaRemoteOriginNowPlayingApplicationDisplayNameDidChangeNotification
kMRMediaRemoteApplicationDisplayNameDidChangeNotification
_MRMediaRemoteApplicationDisplayNameDidChangeNotification
kMRMediaRemoteNowPlayingApplicationIsPlayingDidChangeNotification
kMRMediaRemoteOriginNowPlayingApplicationIsPlayingDidChangeNotification
kMRMediaRemotePlayerIsPlayingDidChangeNotification
_MRMediaRemotePlayerIsPlayingDidChangeNotification
kMRMediaRemoteNowPlayingApplicationPlaybackStateDidChangeNotification
kMRMediaRemoteOriginNowPlayingApplicationPlaybackStateDidChangeNotification
_kMRMediaRemotePlayerPlaybackStateDidChangeNotification
_MRMediaRemotePlayerPlaybackStateDidChangeNotification
kMRMediaRemoteAnyApplicationIsPlayingDidChangeNotification
kMRMediaRemoteOriginAnyApplicationIsPlayingDidChangeNotification
_MRMediaRemoteOriginAnyApplicationIsPlayingDidChangeNotification
kMRMediaRemoteNowPlayingPlayerDidChange
kMRMediaRemoteOriginNowPlayingPlayerDidChange
kMRMediaRemoteActivePlayerDidChange
_MRMediaRemoteActivePlayerDidChange
kMRMediaRemoteNowPlayingApplicationDidRegisterCanBeNowPlaying
kMRMediaRemoteNowPlayingApplicationDidUnregisterCanBeNowPlaying
kMRMediaRemoteNowPlayingApplicationDidRegister
_MRMediaRemoteNowPlayingApplicationDidRegister
kMRMediaRemoteNowPlayingApplicationDidUnregister
_MRMediaRemoteNowPlayingApplicationDidUnregister
kMRMediaRemoteNowPlayingApplicationClientStateDidChange
kMRMediaRemoteOriginNowPlayingApplicationClientStateDidChange
kMRMediaRemoteApplicationClientStateDidChange
_MRMediaRemoteApplicationClientStateDidChange
kMRMediaRemoteNowPlayingPlayerStateDidChange
kMRMediaRemoteOriginNowPlayingPlayerStateDidChange
kMRMediaRemotePlayerStateDidChange
_MRMediaRemotePlayerStateDidChange
kMRMediaRemoteNowPlayingPlayerDidRegister
_MRMediaRemoteNowPlayingPlayerDidRegister
kMRMediaRemoteNowPlayingPlayerDidUnregister
_MRMediaRemoteNowPlayingPlayerDidUnregister
kMRMediaRemoteNowPlayingApplicationDidForegroundNotification
kMRMediaRemoteOriginNowPlayingApplicationDidForegroundNotification
kMRMediaRemoteApplicationDidForeground
_MRMediaRemoteApplicationDidForegroundNotification
kMRMediaRemoteElectedPlayerDidChangeNotification
kMRMediaRemoteNowPlayingApplicationDisplayNameUserInfoKey
kMRMediaRemoteAnyApplicationIsPlayingUserInfoKey
kMRMediaRemoteNowPlayingApplicationIsPlayingUserInfoKey
kMRMediaRemoteNowPlayingApplicationPIDUserInfoKey
kMRMediaRemotePlaybackStateUserInfoKey
kMRMediaRemoteApplicationForegroundUserInfoKey
kMRMediaRemoteElectedPlayerReasonUserInfoKey
kMRMediaRemoteNowPlayingInfoAlbum
kMRMediaRemoteNowPlayingInfoAlbumiTunesStoreAdamIdentifier
kMRMediaRemoteNowPlayingInfoPlaylistGlobalIdentifier
kMRMediaRemoteNowPlayingInfoArtist
kMRMediaRemoteNowPlayingInfoArtistiTunesStoreAdamIdentifier
kMRMediaRemoteNowPlayingInfoArtworkData
kMRMediaRemoteNowPlayingInfoArtworkIdentifier
kMRMediaRemoteNowPlayingInfoArtworkMIMEType
kMRMediaRemoteNowPlayingInfoAssetURL
kMRMediaRemoteNowPlayingInfoAvailableLanguageOptionsData
kMRMediaRemoteNowPlayingInfoChapterNumber
kMRMediaRemoteNowPlayingInfoComposer
kMRMediaRemoteNowPlayingInfoCollectionIdentifier
kMRMediaRemoteNowPlayingInfoCollectionInfo
kMRMediaRemoteNowPlayingInfoCurrentLanguageOptionsData
kMRMediaRemoteNowPlayingInfoDefaultPlaybackRate
kMRMediaRemoteNowPlayingInfoDiscNumber
kMRMediaRemoteNowPlayingInfoDownloadProgress
kMRMediaRemoteNowPlayingInfoDownloadState
kMRMediaRemoteNowPlayingInfoDuration
kMRMediaRemoteNowPlayingInfoElapsedTime
kMRMediaRemoteNowPlayingInfoExternalContentIdentifier
kMRMediaRemoteNowPlayingInfoGenre
kMRMediaRemoteNowPlayingInfoIsAdvertisement
kMRMediaRemoteNowPlayingInfoIsAlwaysLive
kMRMediaRemoteNowPlayingInfoIsBanned
kMRMediaRemoteNowPlayingInfoIsExplicitTrack
kMRMediaRemoteNowPlayingCollectionInfoKeyTitle
kMRMediaRemoteNowPlayingCollectionInfoKeyIdentifiers
kMRMediaRemoteNowPlayingCollectionInfoKeyCollectionType
kMRMediaRemoteNowPlayingCollectionInfoCollectionTypePlaylist
kMRMediaRemoteNowPlayingCollectionInfoCollectionTypeAlbum
kMRMediaRemoteNowPlayingCollectionInfoCollectionTypeRadio
kMRMediaRemoteNowPlayingInfoIsInWishList
kMRMediaRemoteNowPlayingInfoIsLiked
kMRMediaRemoteNowPlayingInfoIsMusicApp
kMRMediaRemoteNowPlayingInfoIsSharable
kMRMediaRemoteNowPlayingInfoIsVideosApp
kMRMediaRemoteNowPlayingInfoMediaType
kMRMediaRemoteNowPlayingInfoPlaybackRate
kMRMediaRemoteNowPlayingInfoProhibitsSkip
kMRMediaRemoteNowPlayingInfoPurchaseInfoData
kMRMediaRemoteNowPlayingInfoQueueIndex
kMRMediaRemoteNowPlayingInfoRadioStationHash
kMRMediaRemoteNowPlayingInfoRadioStationIdentifier
kMRMediaRemoteNowPlayingInfoRadioStationName
kMRMediaRemoteNowPlayingInfoRadioStationStringIdentifier
kMRMediaRemoteNowPlayingInfoRepeatMode
kMRMediaRemoteNowPlayingInfoShuffleMode
kMRMediaRemoteNowPlayingInfoStartTime
kMRMediaRemoteNowPlayingInfoTimestamp
kMRMediaRemoteNowPlayingInfoTitle
kMRMediaRemoteNowPlayingInfoTotalChapterCount
kMRMediaRemoteNowPlayingInfoTotalDiscCount
kMRMediaRemoteNowPlayingInfoTotalQueueCount
kMRMediaRemoteNowPlayingInfoTotalTrackCount
kMRMediaRemoteNowPlayingInfoTrackNumber
kMRMediaRemoteNowPlayingInfoUniqueIdentifier
kMRMediaRemoteNowPlayingInfoiTunesStoreIdentifier
kMRMediaRemoteNowPlayingInfoiTunesStoreSubscriptionAdamIdentifier
kMRMediaRemoteNowPlayingInfoExternalProfileIdentifier
kMRMediaRemoteNowPlayingInfoServiceIdentifier
kMRMediaRemoteNowPlayingInfoPlaybackProgress
kMRMediaRemoteNowPlayingInfoAppMetrics
kMRMediaRemoteNowPlayingInfoIsSteerable
kMRMediaRemoteNowPlayingInfoContentItemIdentifier
kMRMediaRemoteNowPlayingInfoCurrentPlaybackDate
kMRMediaRemoteNowPlayingInfoArtworkURL
kMRMediaRemoteNowPlayingInfoCalculatedElapsedTime
kMRMediaRemoteIsImplicitNotification
kMRMediaRemoteNowPlayingInfoClientPropertiesData
kMRMediaRemoteNowPlayingExternalTouchBarInvocationNotification
com.apple.MediaRemote.nowPlayingApplicationIsPlayingDidChange
kMRMediaRemoteNowPlayingInfoSupportsIsBanned
kMRMediaRemoteNowPlayingInfoSupportsFastForward15Seconds
kMRMediaRemoteNowPlayingInfoSupportsIsLiked
kMRMediaRemoteNowPlayingInfoSupportsRewind15Seconds
kMRMediaRemoteNowPlayingInfoSupportsWishlisting
kMRMediaRemoteMediaTypeImage
kMRMediaRemoteMediaTypeAudio
kMRMediaRemoteMediaTypeVideo
clientProperties
void MRMediaRemoteSetClientProperties(MRNowPlayingClientRef, MROriginRef, __strong dispatch_queue_t, void (^__strong)(CFErrorRef))
<Unknown Function>
/BuildRoot/Library/Caches/com.apple.xbs/Sources/MediaRemote_Sim/MediaRemote-4016.520.2/MediaRemote/Framework/NowPlaying/MRNowPlaying.m
Invalid parameter not satisfying: %@
void MRMediaRemoteUpdateClientProperties(MRNowPlayingClientRef, MROriginRef, __strong dispatch_queue_t, void (^__strong)(CFErrorRef))
AlwaysVisible
NeverVisible
VisibleWhenBackgrounded
Undefined
void MRMediaRemoteSetPlayerProperties(MRNowPlayingPlayerPathRef, __strong dispatch_queue_t, void (^__strong)(CFErrorRef))
MRNowPlayingPlayerPathGetPlayer(i_playerPath)
void MRMediaRemoteUpdatePlayerProperties(MRNowPlayingPlayerPathRef, __strong dispatch_queue_t, void (^__strong)(CFErrorRef))
v8@?0@"_MRNowPlayingPlayerPathProtobuf"4
v12@?0I4@"NSError"8
v8@?0^{__CFError=}4
AVSystemController
/System/Library/PrivateFrameworks/Celestial.framework/Celestial
AVSystemController_CanBeNowPlayingAppAttribute
type
languageTag
characteristics
identifier
hasType
Ti,N,V_type
hasLanguageTag
T@"NSString",&,N,V_languageTag
T@"NSMutableArray",&,N,V_characteristics
hasIdentifier
T@"NSString",&,N,V_identifier
album
artist
duration
elapsedTime
playbackRate
repeatMode
shuffleMode
timestamp
title
uniqueIdentifier
isExplicitTrack
isMusicApp
radioStationIdentifier
radioStationHash
radioStationName
artworkDataDigest
isAlwaysLive
isAdvertisement
hasAlbum
T@"NSString",&,N,V_album
hasArtist
T@"NSString",&,N,V_artist
hasDuration
Td,N,V_duration
hasElapsedTime
Td,N,V_elapsedTime
hasPlaybackRate
Tf,N,V_playbackRate
hasRepeatMode
Ti,N,V_repeatMode
hasShuffleMode
Ti,N,V_shuffleMode
hasTimestamp
Td,N,V_timestamp
hasTitle
T@"NSString",&,N,V_title
hasUniqueIdentifier
TQ,N,V_uniqueIdentifier
hasIsExplicitTrack
TB,N,V_isExplicitTrack
hasIsMusicApp
TB,N,V_isMusicApp
hasRadioStationIdentifier
Tq,N,V_radioStationIdentifier
hasRadioStationHash
T@"NSString",&,N,V_radioStationHash
hasRadioStationName
T@"NSString",&,N,V_radioStationName
hasArtworkDataDigest
T@"NSData",&,N,V_artworkDataDigest
hasIsAlwaysLive
TB,N,V_isAlwaysLive
hasIsAdvertisement
TB,N,V_isAdvertisement
Albums
Songs
sampleRate
hasSampleRate
Td,N,V_sampleRate
command
options
originUID
senderAppDisplayID
destinationAppDisplayID
destinationAppProcessID
remoteControlInterfaceID
appOptions
hasCommand
Ti,N,V_command
hasOptions
T@"_MRCommandOptionsProtobuf",&,N,V_options
hasOriginUID
Ti,N,V_originUID
hasSenderAppDisplayID
T@"NSString",&,N,V_senderAppDisplayID
hasDestinationAppDisplayID
T@"NSString",&,N,V_destinationAppDisplayID
hasDestinationAppProcessID
Tq,N,V_destinationAppProcessID
hasRemoteControlInterfaceID
T@"NSString",&,N,V_remoteControlInterfaceID
hasAppOptions
T@"_MRReceivedCommandAppOptionsProtobuf",&,N,V_appOptions
Play
Pause
TogglePlayPause
Stop
NextTrack
PreviousTrack
AdvanceShuffleMode
AdvanceRepeatMode
BeginFastForward
EndFastForward
BeginRewind
EndRewind
Rewind15Seconds
FastForward15Seconds
Rewind30Seconds
FastForward30Seconds
SkipForward
SkipBackward
ChangePlaybackRate
RateTrack
LikeTrack
DislikeTrack
BookmarkTrack
SeekToPlaybackPosition
ChangeRepeatMode
ChangeShuffleMode
EnableLanguageOption
DisableLanguageOption
NextChapter
PreviousChapter
NextAlbum
PreviousAlbum
NextPlaylist
PreviousPlaylist
BanTrack
AddTrackToWishList
RemoveTrackFromWishList
NextInContext
PreviousInContext
ResetPlaybackTimeout
SetPlaybackQueue
AddNowPlayingItemToLibrary
CreateRadioStation
AddItemToLibrary
InsertIntoPlaybackQueue
ReorderPlaybackQueue
RemoveFromPlaybackQueue
PlayItemInPlaybackQueue
PrepareForSetQueue
event
T@"_MRGameControllerMessageProtobuf",R,N
TQ,R,N
T@"_MRGameControllerPropertiesProtobuf",R,N
inputMode
metadata
artworkData
info
availableLanguageOptions
currentLanguageOptions
lyrics
sections
parentIdentifier
ancestorIdentifier
queueIdentifier
requestIdentifier
artworkDataWidth
artworkDataHeight
hasMetadata
T@"_MRContentItemMetadataProtobuf",&,N,V_metadata
hasArtworkData
T@"NSData",&,N,V_artworkData
hasInfo
T@"NSString",&,N,V_info
T@"NSMutableArray",&,N,V_availableLanguageOptions
T@"NSMutableArray",&,N,V_currentLanguageOptions
hasLyrics
T@"_MRLyricsItemProtobuf",&,N,V_lyrics
T@"NSMutableArray",&,N,V_sections
hasParentIdentifier
T@"NSString",&,N,V_parentIdentifier
hasAncestorIdentifier
T@"NSString",&,N,V_ancestorIdentifier
hasQueueIdentifier
T@"NSString",&,N,V_queueIdentifier
hasRequestIdentifier
T@"NSString",&,N,V_requestIdentifier
hasArtworkDataWidth
Ti,N,V_artworkDataWidth
hasArtworkDataHeight
Ti,N,V_artworkDataHeight
kMRPlaybackQueueCapabilitiesUserInfoKey
launchApplication
hasLaunchApplication
TB,N,V_launchApplication
outputContextUID
v8@?0@"NSArray"4
v16@?0@"NSArray"4@"MRAVEndpoint"8@"NSError"12
v8@?0^{__CFString=}4
supportsSecureCoding
TB,R
hash
TI,R
superclass
T#,R
description
T@"NSString",R,C
debugDescription
T@"NSArray",C,N
hasState
Ti,N,V_state
Recording
NotRecording
routeUID
hasRouteUID
T@"NSString",&,N,V_routeUID
volume
hasVolume
Tf,N,V_volume
capabilities
endpointUID
hasCapabilities
T@"_MRVolumeControlAvailabilityProtobuf",&,N,V_capabilities
hasEndpointUID
T@"NSString",&,N,V_endpointUID
virtualDeviceID
hasVirtualDeviceID
TQ,N,V_virtualDeviceID
hasEvent
T@"_MRVirtualTouchEventProtobuf",&,N,V_event
LOCAL
<%@:%p %s"%@" uid="%@" group_id="%@" type=%@ subtype=%@%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s>
(local) 
 remote-assets
 remote-controllable
 relayable
 airplay2
 groupable
 device-groupable
 group-leader
 group-contains-leader
 airplay-receiving
parent-group-discoverable-leader
parent-group-id
 proxy
 music
 iCML
 enc-prog-dl-assets
 fetch-sender-media-data
 opt-audio-ui
 is-added-to-home-kit
groupable
discoverable-leader
remote-controllable
relayable
music
iCML
remote-assets
discoverable-parent-leader
proxy
leader
receiver
none
name
group-id
subtype
buffered-airplay
group-leader
airplay-receiving
is-added-to-home-kit
T@"NSString",R,N,V_name
T@"NSString",R,N,V_uid
modelID
T@"NSString",R,N,V_modelID
firmwareVersion
T@"NSString",R,N,V_firmwareVersion
groupID
T@"NSString",C,N,V_groupID
logicalDeviceID
T@"NSString",R,N,V_logicalDeviceID
MACAddress
T@"NSData",R,N,V_MACAddress
modelSpecificInfo
T@"NSDictionary",R,N,V_modelSpecificInfo
playingPairedDeviceName
T@"NSString",R,N,V_playingPairedDeviceName
canAccessRemoteAssets
TB,R,N,V_canAccessRemoteAssets
canAccessAppleMusic
TB,R,N,V_canAccessAppleMusic
canAccessiCloudMusicLibrary
TB,R,N,V_canAccessiCloudMusicLibrary
canPlayEncryptedProgressiveDownloadAssets
TB,R,N,V_canPlayEncryptedProgressiveDownloadAssets
canFetchMediaDataFromSender
TB,R,N,V_canFetchMediaDataFromSender
presentsOptimizedUserInterfaceWhenPlayingFetchedAudioOnlyAssets
TB,R,N,V_presentsOptimizedUserInterfaceWhenPlayingFetchedAudioOnlyAssets
remoteControllable
TB,R,N,GisRemoteControllable,V_remoteControllable
groupLeader
TB,R,N,GisGroupLeader,V_groupLeader
groupContainsGroupLeader
TB,R,N,V_groupContainsGroupLeader
airPlayReceiverSessionActive
TB,R,N,GisAirPlayReceiverSessionActive,V_airPlayReceiverSessionActive
TB,R,N,GisGroupable,V_groupable
proxyGroupPlayer
TB,R,N,GisProxyGroupPlayer,V_proxyGroupPlayer
canRelayCommunicationChannel
TB,R,N,V_canRelayCommunicationChannel
supportsBufferedAirPlay
TB,R,N,V_supportsBufferedAirPlay
supportsRapport
TB,R,N,V_supportsRapport
isAddedToHomeKit
TB,R,N,V_isAddedToHomeKit
deviceGroupable
TB,R,N,GisDeviceGroupable,V_deviceGroupable
pickedOnPairedDevice
TB,R,N,GisPickedOnPairedDevice,V_pickedOnPairedDevice
deviceType
TI,R,N,V_deviceType
deviceSubtype
TI,R,N,V_deviceSubtype
batteryLevel
Tf,R,N,V_batteryLevel
hasBatteryLevel
TB,R,N,V_hasBatteryLevel
localDevice
TB,R,N,GisLocalDevice,V_localDevice
supportsExternalScreen
TB,R,N,V_supportsExternalScreen
requiresAuthorization
TB,R,N,V_requiresAuthorization
parentGroupContainsDiscoverableLeader
TB,R,N,V_parentGroupContainsDiscoverableLeader
parentGroupIdentifier
T@"NSString",C,N,V_parentGroupIdentifier
volumeControlAvailable
TB,R,N,GisVolumeControlAvailable,V_volumeControlAvailable
volumeCapabilities
sourceInfo
T@"MRAVOutputDeviceSourceInfo",R,N,V_sourceInfo
endpoint
T@"MRAVEndpoint",W,N,V_endpoint
descriptor
T@"_MRAVOutputDeviceDescriptorProtobuf",R,N
capabilitiesDescription
T@"NSString",R,N
composedTypeDescription
roleDescription
jsonEncodableDictionaryRepresentation
T@"NSDictionary",R,N
/BuildRoot/Library/Caches/com.apple.xbs/Sources/MediaRemote_Sim/MediaRemote-4016.520.2/MediaRemote/Framework/Advanced Routing/MRAVOutputDevice.m
avOutputDevice
com.apple.mediaremote.MRAVOutputDevice
T@"AVOutputDevice",&,N,SsetAVOutputDevice:
T@"MRAVOutputDeviceSourceInfo",&,N
protobuf
%@, volume = %lf, volume capabilities = %@
AirPlay
Bluetooth
CarPlay
BuiltIn
Wired
Default
Speaker
Headphones
Headset
Receiver
LineOut
DisplayPort
HDMI
LowEnergy
SPDIF
HomePod
AppleTV
AVOutputDevice
/System/Library/Frameworks/AVFoundation.framework/AVFoundation
AVPairedDevice
hostName
hostPort
supportedMessages
paired
usingSystemPairing
deviceInfoData
T@"NSString",R,N,V_hostName
Ti,R,N,V_hostPort
deviceInfo
T@"_MRDeviceInfoMessageProtobuf",R,N,V_deviceInfo
T@"MRSupportedProtocolMessages",R,N,V_supportedMessages
TB,R,N,V_paired
TB,R,N,V_usingSystemPairing
T@"NSString",C,D,N
Ti,D,N
T@"MRSupportedProtocolMessages",&,D,N
T@"_MRDeviceInfoMessageProtobuf",&,D,N
TB,D,N
v12@?0@"NSData"4@"NSError"8
v12@?0f4@"NSError"8
com.apple.MediaRemote.MRDistantExternalDevice.NotificationQueue
v12@?0@"MRAVDistantExternalDeviceMetadata"4@"NSError"8
connectionStateCallback
T@?,C,N,V_connectionStateCallback
connectionStateCallbackQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_connectionStateCallbackQueue
nameCallback
T@?,C,N,V_nameCallback
nameCallbackQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_nameCallbackQueue
customDataCallback
T@?,C,N,V_customDataCallback
customDataCallbackQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_customDataCallbackQueue
volumeCallback
T@?,C,N,V_volumeCallback
volumeCallbackQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_volumeCallbackQueue
listenerEndpoint
T@"NSXPCListenerEndpoint",R,N
hasEverAttemptedToConnect
TB,R,N,V_hasEverAttemptedToConnect
Pairing
Name
PairingAllowed
CustomData
Volume
OutputContext
(%@)
(None)
subtitle
isContainer
isPlayable
playbackProgress
albumName
trackArtistName
albumArtistName
directorName
seasonNumber
episodeNumber
releaseDate
playCount
localizedContentRating
isExplicitItem
playlistType
radioStationType
artworkAvailable
infoAvailable
languageOptionsAvailable
numberOfSections
lyricsAvailable
editingStyleFlags
isStreamingContent
isCurrentlyPlaying
collectionIdentifier
profileIdentifier
artworkMIMEType
assetURLString
composer
discNumber
genre
chapterCount
totalDiscCount
totalTrackCount
trackNumber
contentIdentifier
isSharable
isLiked
isInWishList
radioStationString
iTunesStoreIdentifier
iTunesStoreSubscriptionIdentifier
iTunesStoreArtistIdentifier
iTunesStoreAlbumIdentifier
purchaseInfoData
defaultPlaybackRate
downloadState
downloadProgress
appMetricsData
seriesName
mediaType
mediaSubType
nowPlayingInfoData
userInfoData
isSteerable
artworkURL
lyricsURL
deviceSpecificUserInfoData
collectionInfoData
elapsedTimeTimestamp
inferredTimestamp
serviceIdentifier
artworkDataWidthDeprecated
artworkDataHeightDeprecated
currentPlaybackDateData
artworkIdentifier
isLoading
artworkURLTemplatesData
legacyUniqueIdentifier
episodeType
hasSubtitle
T@"NSString",&,N,V_subtitle
hasIsContainer
TB,N,V_isContainer
hasIsPlayable
TB,N,V_isPlayable
hasPlaybackProgress
Tf,N,V_playbackProgress
hasAlbumName
T@"NSString",&,N,V_albumName
hasTrackArtistName
T@"NSString",&,N,V_trackArtistName
hasAlbumArtistName
T@"NSString",&,N,V_albumArtistName
hasDirectorName
T@"NSString",&,N,V_directorName
hasSeasonNumber
Ti,N,V_seasonNumber
hasEpisodeNumber
Ti,N,V_episodeNumber
hasReleaseDate
Td,N,V_releaseDate
hasPlayCount
Ti,N,V_playCount
hasLocalizedContentRating
T@"NSString",&,N,V_localizedContentRating
hasIsExplicitItem
TB,N,V_isExplicitItem
hasPlaylistType
Ti,N,V_playlistType
hasRadioStationType
Ti,N,V_radioStationType
hasArtworkAvailable
TB,N,V_artworkAvailable
hasInfoAvailable
TB,N,V_infoAvailable
hasLanguageOptionsAvailable
TB,N,V_languageOptionsAvailable
hasNumberOfSections
Ti,N,V_numberOfSections
hasLyricsAvailable
TB,N,V_lyricsAvailable
hasEditingStyleFlags
Ti,N,V_editingStyleFlags
hasIsStreamingContent
TB,N,V_isStreamingContent
hasIsCurrentlyPlaying
TB,N,V_isCurrentlyPlaying
hasCollectionIdentifier
T@"NSString",&,N,V_collectionIdentifier
hasProfileIdentifier
T@"NSString",&,N,V_profileIdentifier
hasArtworkMIMEType
T@"NSString",&,N,V_artworkMIMEType
hasAssetURLString
T@"NSString",&,N,V_assetURLString
hasComposer
T@"NSString",&,N,V_composer
hasDiscNumber
Ti,N,V_discNumber
hasGenre
T@"NSString",&,N,V_genre
hasChapterCount
Ti,N,V_chapterCount
hasTotalDiscCount
Ti,N,V_totalDiscCount
hasTotalTrackCount
Ti,N,V_totalTrackCount
hasTrackNumber
Ti,N,V_trackNumber
hasContentIdentifier
T@"NSString",&,N,V_contentIdentifier
hasIsSharable
TB,N,V_isSharable
hasIsLiked
TB,N,V_isLiked
hasIsInWishList
TB,N,V_isInWishList
hasRadioStationString
T@"NSString",&,N,V_radioStationString
hasITunesStoreIdentifier
Tq,N,V_iTunesStoreIdentifier
hasITunesStoreSubscriptionIdentifier
Tq,N,V_iTunesStoreSubscriptionIdentifier
hasITunesStoreArtistIdentifier
Tq,N,V_iTunesStoreArtistIdentifier
hasITunesStoreAlbumIdentifier
Tq,N,V_iTunesStoreAlbumIdentifier
hasPurchaseInfoData
T@"NSData",&,N,V_purchaseInfoData
hasDefaultPlaybackRate
Tf,N,V_defaultPlaybackRate
hasDownloadState
Ti,N,V_downloadState
hasDownloadProgress
Tf,N,V_downloadProgress
hasAppMetricsData
T@"NSData",&,N,V_appMetricsData
hasSeriesName
T@"NSString",&,N,V_seriesName
hasMediaType
Ti,N,V_mediaType
hasMediaSubType
Ti,N,V_mediaSubType
hasNowPlayingInfoData
T@"NSData",&,N,V_nowPlayingInfoData
hasUserInfoData
T@"NSData",&,N,V_userInfoData
hasIsSteerable
TB,N,V_isSteerable
hasArtworkURL
T@"NSString",&,N,V_artworkURL
hasLyricsURL
T@"NSString",&,N,V_lyricsURL
hasDeviceSpecificUserInfoData
T@"NSData",&,N,V_deviceSpecificUserInfoData
hasCollectionInfoData
T@"NSData",&,N,V_collectionInfoData
hasElapsedTimeTimestamp
Td,N,V_elapsedTimeTimestamp
hasInferredTimestamp
Td,N,V_inferredTimestamp
hasServiceIdentifier
T@"NSString",&,N,V_serviceIdentifier
hasArtworkDataWidthDeprecated
Ti,N,V_artworkDataWidthDeprecated
hasArtworkDataHeightDeprecated
Ti,N,V_artworkDataHeightDeprecated
hasCurrentPlaybackDateData
T@"NSData",&,N,V_currentPlaybackDateData
hasArtworkIdentifier
T@"NSString",&,N,V_artworkIdentifier
hasIsLoading
TB,N,V_isLoading
hasArtworkURLTemplatesData
T@"NSData",&,N,V_artworkURLTemplatesData
hasLegacyUniqueIdentifier
Tq,N,V_legacyUniqueIdentifier
hasEpisodeType
Ti,N,V_episodeType
dateGenerated
diagnosticInfo
hasDateGenerated
Td,N,V_dateGenerated
hasDiagnosticInfo
T@"NSString",&,N,V_diagnosticInfo
TVRemoteConnectionService
com.apple.tvremotecore.xpc
T@"_MRDeviceInfoMessageProtobuf",R,N
supportedProtocolMessages
T@"MRSupportedProtocolMessages",R,N
sendError
handlerReturnStatus
handlerReturnStatusData
commandID
hasSendError
Ti,N,V_sendError
handlerReturnStatusCount
T^i,R,N
handlerReturnStatusDatas
T@"NSMutableArray",&,N,V_handlerReturnStatusDatas
hasCommandID
T@"NSString",&,N,V_commandID
ApplicationNotFound
ConnectionFailed
Ignored
CouldNotLaunchApplication
TimedOut
OriginDoesNotExist
InvalidOptions
NoCommandHandlers
Success
NoSuchContent
CommandFailed
NoActionableNowPlayingItem
DeviceNotFound
UIKitLegacy
SkipAdProhibited
QueueIsUserCurated
UserModifiedQueueDisable
UserQueueModificationNotSupportedForCurrentItem
SubscriptionRequiredForSharedQueue
mrXPCConnection
T@"MRXPCConnection",&,N,V_mrXPCConnection
connection
T@"NSObject<OS_xpc_object>",&,N,V_connection
connectionQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_connectionQueue
clientCallbackQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_clientCallbackQueue
clientCallbackPriorityQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_clientCallbackPriorityQueue
browsableContentQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_browsableContentQueue
voiceInputQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_voiceInputQueue
televisionQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_televisionQueue
agentQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_agentQueue
isRunning
TB,N,V_isRunning
kMRMediaRemoteFrameworkErrorDomain
com.apple.MRMediaRemote.didLaunch
com.apple.MediaRemote.connectionQueue
com.apple.MediaRemote.clientCallbackPriorityQueue
com.apple.MediaRemote.clientCallbackQueue
com.apple.MediaRemote.browsableContentQueue
com.apple.MediaRemote.voiceInputQueue
com.apple.mediaremoted.xpc
MRXPC_MESSAGE_ID_KEY
v8@?0@"NSObject<OS_xpc_object>"4
MRXPC_VOICE_RECORDING_ENDPOINT_AVAILABLE_KEY
MRXPC_TELEVISION_ENDPOINT_AVAILABLE_KEY
MRXPC_AGENT_ENDPOINT_AVAILABLE_KEY
MRXPC_COMMAND_SEND_ERROR_KEY
MRXPC_COMMAND_STATUSES_DATA_KEY
@8@?0@"NSData"4
MRXPC_MEDIA_CONTROLS_CONFIGURATION_KEY
MRXPC_MEDIA_CONTROLS_XPC_ENDPOINT_KEY
MRXPC_MEDIA_CONTROLS_ROUTE_UID_KEY
MRXPC_MEDIA_CONTROLS_CENTER_KEY
MRXPC_NOWPLAYING_APP_ENABLED_KEY
MRXPC_TIMESTAMP
MRXPC_NOWPLAYING_APP_OVERRIDE_ENABLED_KEY
MRXPC_ERROR_CODE_KEY
MRXPC_NOWPLAYING_DISPLAYID_KEY
MRXPC_PLAYBACK_QUEUE_REQUESTS_DATA
MRXPC_LYRICS_EVENT_DATA
MRXPC_PLAYBACK_STATE_KEY
MRXPC_APP_IS_PLAYING_KEY
MRXPC_SOURCE_ID_KEY
MRXPC_AUDIO_AMPLITUDE_SAMPLES_COUNT_KEY
MRXPC_AUDIO_AMPLITUDE_ARRAY_DATA_KEY
MRXPC_HARDWARE_REMOTE_BEHAVIOR_KEY
MRXPC_ROUTE_DISCOVERY_MODE_KEY
MRXPC_ROUTE_CATEGORY_KEY
MRXPC_ROUTES_DATA_KEY
MRXPC_ROUTE_OPTIONS_KEY
MRXPC_ROUTE_PASSWORD_KEY
MRXPC_ROUTE_DESCRIPTION_DATA_KEY
MRXPC_ROUTE_UID_KEY
MRXPC_ROUTE_VOLUME_CONTROL_CAPABILITIES_KEY
MRXPC_ROUTE_EXTERNAL_SCREEN_TYPE_KEY
MRXPC_ROUTE_NAME_KEY
MRXPC_PAIRING_IDENTITY_STRING_KEY
MRXPC_AIRPLAY_SEC_SETTINGS_DATA_KEY
MRXPC_PROTOBUF_DATA_KEY
MRXPC_IS_GROUP_LEADER_KEY
MRXPC_AIRPLAY_LEADER_TYPE
MRXPC_VOLUME_VALUE_KEY
MRXPC_VOLUME_OPTIONS_KEY
MRXPC_GAMECONTROLLER_INPUT_MODE_KEY
MRXPC_PAIRED_EXTERNAL_DEVICES_DATA
MRXPC_PAIRED_EXTERNAL_DEVICE
MRXPC_EXTERNAL_DEVICE_LOGGING_KEY
MRXPC_CUSTOM_DATA_NAME_KEY
MRXPC_CUSTOM_DATA_KEY
MRXPC_OUTPUT_DEVICE_UID_ARRAY_DATA_KEY
MRXPC_ROUTE_OPERATION
MRXPC_APP_INSTALLED_KEY
MRXPC_VOICE_INPUT_DEVICES_DATA_KEY
MRXPC_VOICE_INPUT_DESCRIPTOR_DATA_KEY
MRXPC_VOICE_INPUT_DEVICE_ID_KEY
MRXPC_VOICE_DATA_PROTOBUF_DATA_KEY
MRXPC_VOICE_RECORDING_STATE
MRXPC_AGENT_CALL_ID_KEY
MRXPC_NOTIFICATION_NAME_KEY
MRXPC_NOTIFICATION_USERINFO_DATA_KEY
MRXPC_NOTIFICATION_DELAY
MRXPC_BUNDLE_ID_KEY
MRXPC_INDEXPATH_DATA_KEY
MRXPC_CONTENT_NOW_PLAYING_IDENTIFIERS_KEY
MRXPC_CONTENT_SUPPORTS_PLAYBACK_PROGRESS_KEY
MRXPC_CONTENT_CHILD_ITEMS_COUNT_KEY
MRXPC_RANGE_BEGIN_KEY
MRXPC_RANGE_LENGTH_KEY
MRXPC_CONTENT_API_MASK_KEY
MRXPC_BUNDLE_ID_ARRAY_DATA_KEY
MRXPC_CONTENT_IDENTIFIERS
MRXPC_CONTENT_CHILD_ITEMS_DATA_KEY
v16@?0^v4B8^{__CFError=}12
MRXPC_TRANSACTION_NAME
MRXPC_COMMAND_KEY
MRXPC_COMMAND_OPTIONS_KEY
v12@?0I4^{__CFArray=}8
MRXPC_AGENT_NUMBER_ACTIVE_CALLS_KEY
MRXPC_APPLICATION_ACTIVITY_DATA_KEY
Tf,R,N
supportedFormats
defaultFormat
T@"NSMutableArray",&,N,V_supportedFormats
hasDefaultFormat
T@"_MRAudioFormatSettingsProtobuf",&,N,V_defaultFormat
packetCapacity
maximumPacketSize
packetCount
contents
packetDescriptions
hasFormatSettings
T@"_MRAudioFormatSettingsProtobuf",&,N,V_formatSettings
hasPacketCapacity
Tq,N,V_packetCapacity
hasMaximumPacketSize
Tq,N,V_maximumPacketSize
hasPacketCount
Tq,N,V_packetCount
hasContents
T@"NSData",&,N,V_contents
T@"NSMutableArray",&,N,V_packetDescriptions
routingContextUID
multipleBuiltInDevices
hasRoutingContextUID
T@"NSString",&,N,V_routingContextUID
hasMultipleBuiltInDevices
TB,N,V_multipleBuiltInDevices
has%@
@4@?0
v16@?0@"NSString"4@"NSString"8^B12
dictionaryKeyToProtobufKeyMapping
T@"NSDictionary",C,N,V_dictionaryKeyToProtobufKeyMapping
protobufClass
T#,&,N,V_protobufClass
dictionaryValueToProtobufValueTransformer
T@?,C,N,V_dictionaryValueToProtobufValueTransformer
protobufValueToDictionaryValueTransformer
T@?,C,N,V_protobufValueToDictionaryValueTransformer
requestByRange
requestByIdentifiers
requestByRequest
hasRequestByRange
TB,N,V_requestByRange
hasRequestByIdentifiers
TB,N,V_requestByIdentifiers
hasRequestByRequest
TB,N,V_requestByRequest
deviceIDs
errorCode
Tl,R,N
T@"MRVirtualVoiceInputDeviceDescriptor",R,N
deviceID
T@"MRAudioBuffer",R,N
T{?=dd},R,N
%@ %p {
  isAirPlaying = %@
  volume = %f
  volume capabilities = %@
  outputDevices = %@
/BuildRoot/Library/Caches/com.apple.xbs/Sources/MediaRemote_Sim/MediaRemote-4016.520.2/MediaRemote/Framework/Advanced Routing/MROutputContextDataSource.m
outputDevice
T@"<MROutputContextDataSourceDelegate>",W,N,V_delegate
Tf,R,N,V_volume
isAirPlaying
volumeControlCapabilities
TI,R,N,V_volumeControlCapabilities
T@"NSArray",R,N,V_outputDevices
T@"NSString",R,N,V_uniqueIdentifier
comn.apple.MediaRemote.MROutputContextController.serialQueue
 outputContextSupportsVolumeControl = %@, localVolume = %lf, local volume capabilities = %@
v8@?0f4
localVolume
Tf,N,V_localVolume
localVolumeControlCapabilities
TI,N,V_localVolumeControlCapabilities
localDeviceUID
kMRAVOutputContextDevicesDidChangeNotification
kMRAVOutputContextIdentifierUserInfoKey
kMRAVOutputContextOutputDeviceIdentifierUserInfoKey
MRAVOutputContextDidAddOutputDeviceNotification
MRAVOutputContextDidRemoveOutputDeviceNotification
MRAVOutputContextOutputDevicesDidChangeNotification
MRAVOutputContextVolumeControlCapabilitiesDidChangeNotification
MRAVOutputContextVolumeDidChangeNotification
MRAVOutputContextOutputDeviceUserInfoKey
MRAVOutputContextVolumeUserInfoKey
MRAVOutputContextVolumeControlCapabilitiesUserInfoKey
+[MRAVOutputContext sharedAudioPresentationContext]_block_invoke
+[MRAVOutputContext sharedSystemAudioContext]_block_invoke
+[MRAVOutputContext sharedSystemScreenContext]_block_invoke
/BuildRoot/Library/Caches/com.apple.xbs/Sources/MediaRemote_Sim/MediaRemote-4016.520.2/MediaRemote/Framework/Advanced Routing/MRAVOutputContext.m
outputContext
<%@: %p type=%@ avOutputContext=%@>
com.apple.avfoundation.allows-set-output-device
B12@?0@"MRAVConcreteOutputDevice"4^B8
Resetting output context
v8@?0^{__CFArray=}4
v8@?0@"AVOutputContextDestinationChange"4
com.apple.MRAVOutputContext.notificationQueue
@"MRAVOutputContext"8@?0@"NSNotification"4
v8@?0@"NSNotification"4
TI,R,N,V_type
avOutputContext
T@"AVOutputContext",R,N,V_avOutputContext
TB,R,N,GisVolumeControlAvailable
supportsVolumeControl
Tf,N
modificationType
TI,R,N,V_modificationType
callback
T@"MSVCallback",R,N,V_callback
valid
TB,R,N,V_valid
password
T@"NSString",C,N,V_password
MRAVOutputContextCreateiTunesAudioContext
void MRAVOutputContextSetOutputDevice(MRAVOutputContextRef, MRAVOutputDeviceRef, __strong dispatch_queue_t, void (^__strong)(CFErrorRef))
output contexts are incompatible with output devices from a remote control discoverer
void MRAVOutputContextSetOutputDeviceWithPassword(MRAVOutputContextRef, MRAVOutputDeviceRef, CFStringRef, __strong dispatch_queue_t, void (^__strong)(CFErrorRef))
void MRAVOutputContextAddOutputDevice(MRAVOutputContextRef, MRAVOutputDeviceRef, __strong dispatch_queue_t, void (^__strong)(CFErrorRef))
void MRAVOutputContextRemoveOutputDevice(MRAVOutputContextRef, MRAVOutputDeviceRef, __strong dispatch_queue_t, void (^__strong)(CFErrorRef))
AVOutputContext
AVOutputContextOutputDeviceDidChangeNotification
AVOutputContextOutputDevicesDidChangeNotification
AVOutputDeviceDiscoverySessionAvailableOutputDevicesDidChangeNotification
AVOutputContextDestinationChangeInitiatedNotification
AVOutputDeviceVolumeDidChangeNotification
AVOutputDeviceCanSetVolumeDidChangeNotification
AVOutputContextProvidesControlForAllVolumeFeaturesDidChangeNotification
AVOutputContextSetOutputDevicePasswordKey
AVOutputContextSetOutputDeviceCancelIfAuthRequiredKey
AVOutputContextTypeSharedSystemAudio
AVOutputContextTypeSharedSystemScreen
AVOutputContextTypeSharedAudioPresentation
deviceIdentifier
packets
MRGameControllerInputModeNone |
MRGameControllerInputModeCaptureMotion |
MRGameControllerInputModeCaptureButtons |
MRGameControllerInputModeCaptureDigitizer
MRGameControllerPlayerIndex1
MRGameControllerPlayerIndex2
MRGameControllerPlayerIndex3
MRGameControllerPlayerIndex4
MRGameControllerPlayerIndexUnset
MRGameControllerEventNone
MRGameControllerEventMotion
MRGameControllerEventButtons
MRGameControllerEventButtonsExtended
MRGameControllerEventDigitizer
Unknown Event: Did you remember to use the event initializers?
Game Controller Event: {
Buttons: {
buttonA:%lf
buttonX:%lf
buttonPause:%lf
Extended Buttons: {
dpadX:%lf
dpadY:%lf
buttonB:%lf
buttonY:%lf
leftShoulder:%lf
rightShoulder:%lf
leftThumbstickX:%lf
leftThumbstickY:%lf
rightThumbstickX:%lf
rightThumbstickY:%lf
leftTrigger:%lf
rightTrigger:%lf
Digitizer: { 
x: %lf 
y: %lf 
touchDown: %@ 
true
false
Motion: {
Gravity: %@ 
UserAcceleration: %@
Acceleration: {
x:%lf y:%lf z:%lf
allDevices
hasClient
T@"_MRNowPlayingClientProtobuf",&,N,V_client
T@"NSMutableArray",&,N,V_outputDeviceUIDs
<%@:%p routingContextUID = %@, multipleBuiltIn = %s>
T@"NSString",R,N,V_routingContextUID
TB,R,N,V_multipleBuiltInDevices
MRVolumeControlCapabilitiesNone
MRVolumeControlCapabilitiesRelative
MRVolumeControlCapabilitiesAbsolute
pairingData
status
isRetrying
isUsingSystemPairing
hasPairingData
T@"NSData",&,N,V_pairingData
hasStatus
Ti,N,V_status
hasIsRetrying
TB,N,V_isRetrying
hasIsUsingSystemPairing
TB,N,V_isUsingSystemPairing
designatedGroupLeader
isLocalEndpoint
instanceIdentifier
isProxyGroupPlayer
connectionType
canModifyGroupMembership
hasName
T@"NSString",&,N,V_name
T@"NSString",&,N,V_uniqueIdentifier
T@"NSMutableArray",&,N,V_outputDevices
hasDesignatedGroupLeader
T@"_MRAVOutputDeviceDescriptorProtobuf",&,N,V_designatedGroupLeader
hasIsLocalEndpoint
TB,N,V_isLocalEndpoint
hasInstanceIdentifier
T@"NSString",&,N,V_instanceIdentifier
hasIsProxyGroupPlayer
TB,N,V_isProxyGroupPlayer
hasConnectionType
Ti,N,V_connectionType
hasCanModifyGroupMembership
TB,N,V_canModifyGroupMembership
Local
Direct
Relay
AirPlaySender
object
T@,W,N,V_object
protocol
T@"Protocol",&,N,V_protocol
response
hasResponse
T@"NSString",&,N,V_response
hasKey
T@"NSString",&,N,V_key
hasData
T@"NSData",&,N,V_data
text
actionType
hasText
T@"NSString",&,N,V_text
hasActionType
Ti,N,V_actionType
Insert
Delete
Clear
kMRMediaRemoteErrorTelevisionPairingLockOutDelayUserInfoKey
com.apple.MediaRemote.MRTelevisionDevice.SerialQueue
v8@?0@"MRProtocolMessage"4
/BuildRoot/Library/Caches/com.apple.xbs/Sources/MediaRemote_Sim/MediaRemote-4016.520.2/MediaRemote/Framework/ExternalDevice/AppleTV/MRTelevision.m
incorrect reply
gameControllerInputModeCallback
T@?,C,N,V_gameControllerInputModeCallback
gameControllerInputMode
TI,N,V_gameControllerInputMode
gameControllerInputModeCallbackQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_gameControllerInputModeCallbackQueue
gameControllerPropertiesCallback
T@?,C,N,V_gameControllerPropertiesCallback
gameControllerPropertiesCallbackQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_gameControllerPropertiesCallbackQueue
recordingStateCallback
T@?,C,N,V_recordingStateCallback
recordingStateCallbackQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_recordingStateCallbackQueue
textInputCallback
T@?,C,N,V_textInputCallback
textInputCallbackQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_textInputCallbackQueue
rtiCallback
T@?,C,N,V_rtiCallback
rtiCallbackQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_rtiCallbackQueue
rtiSourceSession
T@"RTIInputSystemSourceSession",&,N,V_rtiSourceSession
hiliteModeCallback
T@?,C,N,V_hiliteModeCallback
hiliteModeCallbackQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_hiliteModeCallbackQueue
TB,R,N,V_hiliteMode
v12@?0^{__CFString=}4B8
v16@?0{?=II}4@?<v@?^{__CFString=}B>12
void MRTelevisionSetHiliteModeCallback(MRExternalDeviceRef, __strong dispatch_queue_t, __strong MRTelevisionHiliteModeCallback)
device
invalid object passed to %s
void MRTelevisionRequestHiliteModeExit(MRExternalDeviceRef)
_Bool MRTelevisionGetHiliteMode(MRExternalDeviceRef)
void MRTelevisionWake(MRExternalDeviceRef)
void MRTelevisionRegisterVirtualTouchDevice(MRExternalDeviceRef, MRVirtualTouchDeviceDescriptorRef, __strong dispatch_queue_t, __strong MRTelevisionTouchDeviceIDCallback)
replyQ
completion
v16@?0Q4@"NSError"12
void MRTelevisionSendVirtualTouchEvent(MRExternalDeviceRef, MRHIDTouchEvent, MRVirtualTouchDeviceID)
void MRTelevisionSendHIDEvent(MRExternalDeviceRef, IOHIDEventRef)
void MRTelevisionGetCurrentTextEditingSession(MRExternalDeviceRef, __strong dispatch_queue_t, void (^__strong)(MRTextEditingSessionRef, CFErrorRef))
v12@?0@"MRTextEditingSession"4@"NSError"8
void MRTelevisionSetTextEditingCallback(MRExternalDeviceRef, __strong dispatch_queue_t, __strong MRTelevisionTextInputCallback)
void MRTelevisionTextEditingInsert(MRExternalDeviceRef, MRTextEditingSessionRef, CFStringRef)
void MRTelevisionTextEditingSetText(MRExternalDeviceRef, MRTextEditingSessionRef, CFStringRef)
void MRTelevisionTextEditingDeleteBackward(MRExternalDeviceRef, MRTextEditingSessionRef)
void MRTelevisionTextEditingClearText(MRExternalDeviceRef, MRTextEditingSessionRef)
void MRTelevisionGetCurrentRTISourceSession(MRExternalDeviceRef, __strong dispatch_queue_t, void (^__strong)(MRRTIInputSystemSourceSessionRef, CFErrorRef))
v12@?0@"RTIInputSystemSourceSession"4@"NSError"8
void MRTelevisionSetRTICallback(MRExternalDeviceRef, __strong dispatch_queue_t, __strong MRTelevisionRTICallback)
void MRTelevisionRegisterGameController(MRExternalDeviceRef, MRGameControllerProfile, __strong dispatch_queue_t, __strong MRTelevisionGameControllerIDCallback)
void MRTelevisionRegisterGameControllerWithProperties(MRExternalDeviceRef, MRGameControllerPropertiesRef, __strong dispatch_queue_t, __strong MRTelevisionGameControllerIDCallback)
void MRTelevisionUnregisterGameController(MRExternalDeviceRef, MRGameControllerID)
void MRTelevisionSetGameControllerInputModeCallback(MRExternalDeviceRef, __strong dispatch_queue_t, __strong MRTelevisionGameControllerInputModeCallback)
void MRTelevisionSetGameControllerPropertiesCallback(MRExternalDeviceRef, __strong dispatch_queue_t, __strong MRTelevisionGameControllerPropertiesCallback)
void MRTelevisionSendGameControllerEvent(MRExternalDeviceRef, MRGameControllerEvent, MRGameControllerID)
void MRTelevisionSendGameControllerEventV2(MRExternalDeviceRef, MRGameControllerEventRef, MRGameControllerID)
invalid MRExternalDeviceRef object passed to %s
invalid MRGameControllerEventRef object passed to %s
MRGameControllerInputMode MRTelevisionGetGameControllerInputMode(MRExternalDeviceRef)
void MRTelevisionRegisterVirtualVoiceInputDevice(MRExternalDeviceRef, MRVirtualVoiceInputDeviceDescriptorRef, __strong dispatch_queue_t, void (^__strong)(MRVirtualVoiceInputDeviceID, CFErrorRef))
void MRTelevisionSetVoiceRecordingStateCallback(MRExternalDeviceRef, __strong dispatch_queue_t, __strong MRTelevisionRecordingStateCallback)
MRVoiceRecordingState MRTelevisionGetVoiceRecordingState(MRExternalDeviceRef)
void MRTelevisionProcessVirtualVoiceInputAudioData(MRExternalDeviceRef, MRVirtualVoiceInputDeviceID, MRAudioBufferRef, MRAudioTime, float)
absolute
integratedDisplay
screenSizeWidth
screenSizeHeight
hasAbsolute
TB,N,V_absolute
hasIntegratedDisplay
TB,N,V_integratedDisplay
hasScreenSizeWidth
Tf,N,V_screenSizeWidth
hasScreenSizeHeight
Tf,N,V_screenSizeHeight
JUST_GOT_SPLASH_BEATS!
kMRMediaRemoteOptionSourceID
kMRMediaRemoteOptionMediaType
kMRMediaRemoteOptionIsExternalPlayerCommand
kMRMediaRemoteOptionSkipInterval
kMRMediaRemoteOptionPlaybackRate
kMRMediaRemoteOptionRating
kMRMediaRemoteOptionIsNegative
kMRMediaRemoteOptionPlaybackPosition
kMRMediaRemoteOptionRepeatMode
kMRMediaRemoteOptionShuffleMode
kMRMediaRemoteOptionSendOptionsNumber
kMRMediaRemoteOptionContextID
kMRMediaRemoteOptionDestinationAppDisplayID
kMRMediaRemoteOptionTrackID
kMRMediaRemoteOptionContentItemID
kMRMediaRemoteOptionPlaybackQueueOffset
kMRMediaRemoteOptionNowPlayingContentItemID
kMRMediaRemoteOptionStationID
kMRMediaRemoteOptionStationHash
kMRMediaRemoteOptionStationURL
kMRMediaRemoteOptionShouldBeginRadioPlayback
kMRMediaRemoteOptionSystemAppPlaybackQueueData
kMRMediaRemoteOptionRequestDefermentToPlaybackQueuePosition
kMRMediaRemoteOptionPlaybackQueueInsertionPosition
kMRMediaRemoteOptionInsertAfterContentItemID
kMRMediaRemoteOptionPlaybackQueueDestinationOffset
kMRMediaRemoteOptionBookmarkiTunesDestination
kMRMediaRemoteOptionAffiliateIdentifier
kMRMediaRemoteOptionLanguageOptionData
kMRMediaRemoteOptionChangeLanguageOptionSetting
kMRMediaRemoteOptionRemoteControlInterfaceIdentifier
kMRMediaRemoteOptionCommandBroadcasted
kMRMediaRemoteOptionInterruptionEvent
kMRMediaRemoteOptionPredefinedPlaybackRate
kMRMediaRemoteOptionPlaybackProgress
kMRMediaRemoteOptionDisableImplicitAppLaunchBehaviors
kMRMediaRemoteOptionDisableFallbackContent
kMRMediaRemoteOptionCommandType
kMRMediaRemoteOptionCommandID
kMRMediaRemoteOptionSenderID
kMRMediaRemoteMediaControlsConfigurationKey
kMRMediaRemoteMediaControlsLanguageOptionsRouteUIDKey
kMRMediaRemoteMediaControlsLanguageOptionsCenterKey
kMRMediaRemoteSupportedCommandsDidChangeNotification
kMRMediaRemoteOriginSupportedCommandsDidChangeNotification
kMRMediaRemotePlayerSupportedCommandsDidChangeNotification
_MRMediaRemotePlayerSupportedCommandsDidChangeNotification
kMRMediaRemoteSystemAppDidSkipTrackNotification
com.apple.mediaremote.applicationDidReportPlaybackError
_MRMediaRemoteSupportedCommandsDataUserInfoKey
%@%@
Broadcast
v16@?0I4^{__CFDictionary=}8@?<v@?^{__CFArray=}>12
%08x
v20@?0^v4I8^{__CFDictionary=}12@?<v@?I^{__CFArray=}>16
<Unrecognized Command>
ToggleRecord
ChangePlaybackRateCommand
SetRepeatMode
SetShuffleMode
Menu
Select
UpArrow
DownArrow
BacklightOff
BuyTrack
BuyAlbum
PreOrderAlbum
CancelDownload
PresentUpNext
SetSleepTimer
PresentSharingOptions
UserModifiedQueueDisabled
CommandIgnored
InvalidCommandOptions
<Unknown>
ForegroundReceiver
com.apple.music.playbackqueue.tracklist
com.apple.music.playbackqueue.radio
com.apple.mediaplayer.playbackcontext
Command = <%@>, %@, commandID = <%@>, remote control interface = <%@>, appOptions = <%@>, options = <%@>
not included
SenderDevice = <%@>, SenderBundleIdentifier = <%@>, SenderPID = <%d>
com.apple.MRMediaRemote.elapsedTimeDidChange
v8@?0i4
com.apple.MRMediaRemote.playbackSpeedDidChange
com.apple.MRMediaRemote.repeatModeDidChange
com.apple.MRMediaRemote.shuffleModeDidChange
T@"NSMutableArray",&,N,V_contentItems
endpointChangedCallback
T@?,C,N
T@"NSString",R,N,V_outputDeviceUID
T@"MRAVEndpoint",R,N,V_endpoint
use %@ instead
%s is abstract
-[MRCryptoPairingSession isPaired]
-[MRCryptoPairingSession isValid]
-[MRCryptoPairingSession pairedDevices]
-[MRCryptoPairingSession open]
-[MRCryptoPairingSession close]
-[MRCryptoPairingSession removePeer]
-[MRCryptoPairingSession updatePeer]
-[MRCryptoPairingSession handlePairingExchangeData:completion:]
-[MRCryptoPairingSession handlePairingFailureWithStatus:]
-[MRCryptoPairingSession encryptData:withError:]
-[MRCryptoPairingSession decryptData:withError:]
-[MRCryptoPairingSession deleteIdentityWithError:]
T@"_MRDeviceInfoMessageProtobuf",R,N,V_device
role
TI,R,N,V_role
TB,R,N,GisValid
TB,R,N,GisPaired
pairedDevices
T@"<MRCryptoPairingSessionDelegate>",W,N,V_delegate
v12@?0B4@"NSError"8
hostedRoutingSessionConnection
T@"NSXPCConnection",&,N,V_hostedRoutingSessionConnection
distantEndpoints
T@"NSArray",&,N
distantOutputDevices
distantExternalDevices
T@"NSMutableDictionary",&,N,V_distantExternalDevices
kMRExternalDeviceEndpointDidChangeNotification
kMRExternalDeviceEndpointUserInfoKeyEndpoint
kMRCredentialRequirementTypeUserInfoKey
kMRCredentialRequirementCharacterCountUserInfoKey
kMRTelevisionRemoteNowPlayingArtworkChanged
kMRMediaRemoteErrorExternalDevicePairingLockOutDelayUserInfoKey
kMRExternalDeviceConnectionStateDidChangeNotification
kMRExternalDeviceConnectionStateUserInfoKey
-[MRExternalDevice name]
-[MRExternalDevice hostName]
-[MRExternalDevice port]
-[MRExternalDevice customOrigin]
-[MRExternalDevice deviceInfo]
-[MRExternalDevice supportedMessages]
-[MRExternalDevice wantsNowPlayingNotifications]
-[MRExternalDevice setWantsNowPlayingNotifications:]
-[MRExternalDevice wantsNowPlayingArtworkNotifications]
-[MRExternalDevice setWantsNowPlayingArtworkNotifications:]
-[MRExternalDevice wantsVolumeNotifications]
-[MRExternalDevice setWantsVolumeNotifications:]
-[MRExternalDevice wantsOutputDeviceNotifications]
-[MRExternalDevice setWantsOutputDeviceNotifications:]
-[MRExternalDevice isPaired]
-[MRExternalDevice isUsingSystemPairing]
-[MRExternalDevice connectWithOptions:]
-[MRExternalDevice disconnect:]
-[MRExternalDevice unpair]
-[MRExternalDevice setPairingCallback:withQueue:]
-[MRExternalDevice setConnectionStateCallback:withQueue:]
-[MRExternalDevice setNameCallback:withQueue:]
-[MRExternalDevice setPairingAllowedCallback:withQueue:]
-[MRExternalDevice setCustomDataCallback:withQueue:]
-[MRExternalDevice setVolumeCallback:withQueue:]
-[MRExternalDevice outputDeviceVolume:queue:completion:]
-[MRExternalDevice setOutputDeviceVolume:outputDeviceUID:queue:completion:]
-[MRExternalDevice outputDeviceVolumeControlCapabilities:queue:completion:]
-[MRExternalDevice modifyOutputContextOfType:addingDeviceUIDs:removingDeviceUIDs:settingDeviceUIDs:withReplyQueue:completion:]
-[MRExternalDevice sendButtonEvent:]
-[MRExternalDevice sendCustomData:withName:]
-[MRExternalDevice ping:callback:withQueue:]
-[MRExternalDevice errorForCurrentState]
-[MRExternalDevice currentClientUpdatesConfigMessage]
-[MRExternalDevice sendClientUpdatesConfigMessage]
port
Ti,R,N
customOrigin
T@"_MROriginProtobuf",R,N
wantsNowPlayingNotifications
wantsNowPlayingArtworkNotifications
wantsVolumeNotifications
wantsOutputDeviceNotifications
TB,R,N,GisValid,V_valid
connectionState
TI,R,N,V_connectionState
TB,N,GisUsingSystemPairing,V_usingSystemPairing
com.apple.MediaRemote.MRExternalDevice.SerialQueue
com.apple.MediaRemote.MRExternalDevice.WorkerQueue
com.apple.MediaRemote.MRExternalDevice.NotificationQueue
<%@:%p "%@" transport=%@>
@"NSError"4@?0
retry
reason
/BuildRoot/Library/Caches/com.apple.xbs/Sources/MediaRemote_Sim/MediaRemote-4016.520.2/MediaRemote/Framework/ExternalDevice/MRExternalDevice.m
Ping Completion Not Called
Ping Reply Not Called
v16@?0^{__CFError=}4d8
incorrect reply type
!_clientConnection
com.apple.mediaremote.MRExternalDevice/%@(%@)
v12@?0C4^v8
-[MRTransportExternalDevice _onWorkerQueue_openSecuritySession]_block_invoke
Type mismatch: %@ is not a %@
v12@?0@"MRCryptoPairingSession"4@"NSData"8
v20@?0@"MRCryptoPairingSession"4d8@?<v@?@"NSString">16
v12@?0@"MRCryptoPairingSession"4@"NSError"8
v12@?0I4@"NSArray"8
v16@?0^v4^v8@?<v@?^vB^{__CFError=}>12
v12@?0^v4^v8
event = <playbackQueueRequest>, request = <%@>, error = <%@>
-[MRTransportExternalDevice _handlePlaybackQueueResponse:completion:]
Type mismatch, expecting %@ found %@
event = <%@>, command = <%@>, error = <%@>
clientConnection
T@"MRExternalClientConnection",&,N,V_clientConnection
T@"_MROriginProtobuf",&,N,V_customOrigin
T@"_MRDeviceInfoMessageProtobuf",&,N,V_deviceInfo
nowPlayingArtwork
T@"NSData",&,N,V_nowPlayingArtwork
T@"NSDictionary",&,N,V_nowPlayingInfo
nowPlayingItem
T@"_MRContentItemProtobuf",&,N,V_nowPlayingItem
pairingCallback
T@?,C,N,V_pairingCallback
pairingCallbackQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_pairingCallbackQueue
pairingAllowedCallback
T@?,C,N,V_pairingAllowedCallback
pairingAllowedCallbackQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_pairingAllowedCallbackQueue
outputDevicesUpdatedCallback
T@?,C,N,V_outputDevicesUpdatedCallback
outputDevicesUpdatedCallbackQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_outputDevicesUpdatedCallbackQueue
outputDevicesRemovedCallback
T@?,C,N,V_outputDevicesRemovedCallback
outputDevicesRemovedCallbackQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_outputDevicesRemovedCallbackQueue
volumeControlCapabilitiesCallback
T@?,C,N,V_volumeControlCapabilitiesCallback
volumeControlCapabilitiesCallbackQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_volumeControlCapabilitiesCallbackQueue
outputContextCallbackQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_outputContextCallbackQueue
runLoop
T@"NSRunLoop",&,N,V_runLoop
transport
T@"MRExternalDeviceTransport",R,N,V_transport
connectionRecoveryBehavior
Ti,N,V_connectionRecoveryBehavior
isCallingClientCallback
TB,N,V_isCallingClientCallback
CFStringRef MRExternalDeviceCopyUniqueIdentifier(MRExternalDeviceRef)
CFStringRef MRExternalDeviceCopyName(MRExternalDeviceRef)
CFStringRef MRExternalDeviceCopyHostName(MRExternalDeviceRef)
CFStringRef MRExternalDeviceCopySystemBuildVersion(MRExternalDeviceRef)
int64_t MRExternalDeviceGetNetworkPort(MRExternalDeviceRef)
MRPairedDeviceRef MRExternalDeviceCopyDeviceInfo(MRExternalDeviceRef)
void MRExternalDeviceSetNameCallback(MRExternalDeviceRef, __strong dispatch_queue_t, __strong MRExternalDeviceNameCallback)
void MRExternalDeviceSetName(MRExternalDeviceRef, CFStringRef)
invalid external device type specified for SetName
MROriginRef MRExternalDeviceCopyCustomOrigin(MRExternalDeviceRef)
void MRExternalDeviceSetWantsNowPlayingUpdates(MRExternalDeviceRef, _Bool)
void MRExternalDeviceSetWantsNowPlayingArtworkUpdates(MRExternalDeviceRef, _Bool)
void MRExternalDeviceSetWantsVolumeUpdates(MRExternalDeviceRef, _Bool)
void MRExternalDeviceSetWantsOutputDeviceUpdates(MRExternalDeviceRef, _Bool)
void MRExternalDeviceGetOutputDeviceUIDVolume(MRExternalDeviceRef, CFStringRef, __strong dispatch_queue_t, __strong MRExternalDeviceGetVolumeCallback)
void MRExternalDeviceSetOutputDeviceUIDVolume(MRExternalDeviceRef, CFStringRef, float, __strong dispatch_queue_t, __strong MRExternalDeviceSetVolumeCallback)
void MRExternalDeviceSetVolumeChangedCallback(MRExternalDeviceRef, __strong dispatch_queue_t, __strong MRExternalDeviceVolumeCallback)
void MRExternalDeviceSendButtonEvent(MRExternalDeviceRef, MRHIDButtonEvent)
_Bool MRExternalDeviceIsConnected(MRExternalDeviceRef)
void MRExternalDeviceConnect(MRExternalDeviceRef)
void MRExternalDeviceConnectEx(MRExternalDeviceRef, MRExternalDeviceConnectOptions)
void MRExternalDeviceDisconnect(MRExternalDeviceRef)
MRExternalDeviceConnectionState MRExternalDeviceGetConnectionState(MRExternalDeviceRef)
void MRExternalDeviceSetConnectionStateCallback(MRExternalDeviceRef, __strong dispatch_queue_t, __strong MRExternalDeviceConnectionStateCallback)
void MRExternalDeviceSetPairingCallback(MRExternalDeviceRef, __strong dispatch_queue_t, __strong MRExternalDevicePairingCallback)
_Bool MRExternalDeviceIsPairingAllowed(MRExternalDeviceRef)
void MRExternalDeviceSetPairingAllowedCallback(MRExternalDeviceRef, __strong dispatch_queue_t, __strong MRExternalDevicePairingAllowedCallback)
_Bool MRExternalDeviceIsPaired(MRExternalDeviceRef)
void MRExternalDeviceUnpair(MRExternalDeviceRef)
void MRExternalDeviceGetPairedDevices(void (^__strong)(CFArrayRef))
void MRExternalDeviceDeletePairedDevice(CFStringRef)
void MRExternalDeviceRequestOutputContextModification(MRExternalDeviceRef, MRAVOutputContextType, CFArrayRef, CFArrayRef, CFArrayRef, __strong dispatch_queue_t, void (^__strong)(CFErrorRef))
void MRExternalDeviceSetCustomDataCallback(MRExternalDeviceRef, __strong dispatch_queue_t, __strong MRExternalDeviceCustomDataCallback)
void MRExternalDeviceSendCustomData(MRExternalDeviceRef, CFStringRef, CFDataRef)
void MRExternalDevicePing(MRExternalDeviceRef, CFTimeInterval, __strong dispatch_queue_t, __strong MRExternalDevicePingCallback)
Connecting
Connected
Disconnected
(EnableSystemAuthenticationPrompt)
CURunLoopThread
/System/Library/PrivateFrameworks/CoreUtils.framework/CoreUtils
unknown
dealloc
reconnection
disconnect
T@"_MRLyricsEventProtobuf",&,N,V_event
hasVolumeControlAvailable
TB,N,V_volumeControlAvailable
hasVolumeCapabilities
Ti,N,V_volumeCapabilities
report
T@"NSString",&,N,V_virtualDeviceID
hasReport
T@"NSData",&,N,V_report
serializationDate
T@"NSDate",R,N,V_serializationDate
prompt
inputTraits
hasPrompt
T@"NSString",&,N,V_prompt
hasInputTraits
T@"_MRTextInputTraitsProtobuf",&,N,V_inputTraits
hasNowPlayingUpdates
TB,N,V_nowPlayingUpdates
hasArtworkUpdates
TB,N,V_artworkUpdates
hasVolumeUpdates
TB,N,V_volumeUpdates
hasKeyboardUpdates
TB,N,V_keyboardUpdates
hasOutputDeviceUpdates
TB,N,V_outputDeviceUpdates
Type: %@ Entry: %@
v16@?0@"NSString"4@"MRExternalDeviceMessageMetricsEntry"8^B12
Max: %lu
 Min: %lu
 Avg: %lu
 Total: %lu
 Values: %@
TI,N,V_avg
TI,N,V_min
TI,N,V_max
total
TI,N,V_total
values
T@"NSMutableArray",&,N,V_values
T@"MRAVOutputDevice",R,N
T{_MRHIDTouchEvent=(_MRHIDPoint={?=ff}[2f])IQI},R,N
<Message Type: %@
Timestamp: %llu
Error: %@
Identifier: %@
Type: %lul
Priority: %lul
Message: x: %u y: %u phase: %u deviceID: %u finger: %u
mediaremoteuti
library
multiverse
store
%@://%@/%@
%llu
TQ,N,V_name
hasPackets
T@"_MRTransactionPacketsProtobuf",&,N,V_packets
MRXPC_NOWPLAYING_PLAYBACK_QUEUE_KEY
MRXPC_NOWPLAYING_PLAYBACK_QUEUE_REQUEST_KEY
MRXPC_NOWPLAYING_PLAYBACK_QUEUE_CAPABILITIES_KEY
@"NSData"8@?0@4
MRAddDistantEndpointToXPCMessage
/BuildRoot/Library/Caches/com.apple.xbs/Sources/MediaRemote_Sim/MediaRemote-4016.520.2/MediaRemote/Framework/Utility/MRSerializationUtility.m
[(__bridge MRAVEndpoint *)endpoint isKindOfClass:[MRAVDistantEndpoint class]]
MRXPC_DISTANT_ENDPOINT_METADATA_KEY
MRXPC_EXTERNAL_DEVICE_LISTENER_KEY
MRXPC_CLIENT_ERROR_DATA_KEY
MRXPC_ORIGIN_DATA_KEY
MRXPC_AVAILABLE_ORIGINS_DATA_KEY
MRXPC_NOWPLAYING_CLIENT_DATA_KEY
MRXPC_NOWPLAYING_PLAYER_DATA_KEY
MRXPC_NOWPLAYING_PLAYER_PATH_DATA_KEY
MRXPC_COMMAND_INFO_ARRAY_DATA_KEY
MRXPC_VIDEO_THUMBNAILS_REQ_DATA_KEY
MRXPC_VIDEO_THUMBNAILS_ARRAY_DATA_KEY
MRXPC_NOWPLAYING_STATE_DATA_KEY
MRXPC_TRANSACTION_COMING
MRXPC_DIAGNOSTIC_DATA_KEY
^v8@?0^{__CFData=}4
MRXPC_NOWPLAYING_CLIENT_ARRAY_DATA_KEY
MRXPC_NOWPLAYING_PLAYER_ARRAY_DATA_KEY
MRXPC_COLOR_DATA_KEY
v16@?0@4@8^B12
    origin = %@
    deviceInfo = %@
    volumeCapabilities = %@
    nowPlayingClients = %@
    transactionCallbacks = %@
/BuildRoot/Library/Caches/com.apple.xbs/Sources/MediaRemote_Sim/MediaRemote-4016.520.2/MediaRemote/Framework/Core/MRNowPlayingOriginClientRequests.m
v12@?0@"_MRDeviceInfoMessageProtobuf"4@"NSError"8
origin
T@"_MROriginProtobuf",R,N,V_origin
T@"_MRNowPlayingPlayerPathProtobuf",R,N,V_playerPath
T@"_MRDeviceInfoMessageProtobuf",C,N
TI,N
-[MRNowPlayingClientRequests initWithClient:]
client.bundleIdentifier
client.processIdentifier
    client = %@
    playerClients = %@
T@"_MRNowPlayingClientProtobuf",R,N,V_client
nowPlayingClients
T@"NSArray",R,N,V_nowPlayingClients
touchDown
hasX
Td,N,V_x
hasY
Td,N,V_y
hasTouchDown
TB,N,V_touchDown
TQ,N,V_timestamp
outputContextType
addingOutputDeviceUID
removingOutputDeviceUID
settingOutputDeviceUID
hasOutputContextType
Ti,N,V_outputContextType
T@"NSMutableArray",&,N,V_addingOutputDeviceUIDs
T@"NSMutableArray",&,N,V_removingOutputDeviceUIDs
T@"NSMutableArray",&,N,V_settingOutputDeviceUIDs
/BuildRoot/Library/Caches/com.apple.xbs/Sources/MediaRemote_Sim/MediaRemote-4016.520.2/MediaRemote/Framework/ProtocolMessages/MRLegacySendHIDEventMessage.m
<Message Type: %@
Timestamp: %llu
Error: %@
Identifier: %@
Type: %lu
Priority: %lu
Message: %@
buttonEvent
T{_MRHIDButtonEvent=IIB},R,N
chacha20_poly1305_encrypt_all_64x64
Session not open
Encrypted data has an invalid length
chacha20_poly1305_decrypt_all_64x64
PairingSessionDeleteIdentity
PairingSessionSetKeychainInfo
com.apple.MediaRemote.pairing
Media Remote Pairing Identity
Paired TV Remote Peer
Cannot add peer, No device available
Cannot update peer, No pairing session available
PairingSessionCopyPeerIdentifier
Cannot add peer, No peer Identifier available
PairingSessionUpdatePeerInfo
PairingSessionDeletePeer
Could not find peer
PairingSessionSetFlags
PairingSessionCopyPeers
Pairing Session Delay
Pairing Session NULL setup code
v8@?0@"NSString"4
PairingSessionCreate
com.apple.RemoteControl
PairingSessionSetACL
No pairing session
PairingSessionExchange
PairingSessionSetSetupCode
Failed to set setup code on pairing session (OSStatus = %d)
Pairing Session is not available
MediaRemote-Read-Encryption-Key
MediaRemote-Write-Encryption-Key
PairingSessionDeriveKey
MediaRemote-Salt
inputKey
T@"NSData",&,N,V_inputKey
inputNonce
T@"NSMutableData",&,N,V_inputNonce
outputKey
T@"NSData",&,N,V_outputKey
outputNonce
T@"NSMutableData",&,N,V_outputNonce
pairedPeerDevice
pairedPeerDevices
mediaRemotePairedDevices
T@"NSMutableDictionary",R,N
peerIdentifier
TI,R,N,V_state
hasExchangedMessage
TB,R,N,V_hasExchangedMessage
pairingFlags
TI,N,V_pairingFlags
OSStatus _MRCUPSShowSetupCodeCallback(PairingFlags, char *, size_t, void *)
/BuildRoot/Library/Caches/com.apple.xbs/Sources/MediaRemote_Sim/MediaRemote-4016.520.2/MediaRemote/Framework/Cryptography/MRCoreUtilsPairingSession.m
NULL context
void _MRCUPSHideSetupCodeCallback(void *)
OSStatus _MRCUPSPromptForSetupCodeCallback(PairingFlags, int32_t, void *)
_kMRPlaybackQueueRequestIDUserInfoKey
NULL
nanomediaremotelinkagent
MRContentItemRef MRPlaybackQueueGetContentItemAtOffset(MRPlaybackQueueRef, CFIndex)
/BuildRoot/Library/Caches/com.apple.xbs/Sources/MediaRemote_Sim/MediaRemote-4016.520.2/MediaRemote/Framework/NowPlaying/Playback Queue/MRPlaybackQueue.m
Attempting to set non-range based playbackQueue
contentItem
SharedQueue not supported
Cached ContentItem is empty
artworkWidth %ld > %ld
artworkHeight %ld > %ld
artwork dimensions both -1
no artwork in item
has no info
has no lyrics
has no languageOptions
has no sections
B12@?0^v4^v8
kMRMediaRemoteNowPlayingPlaybackQueueDidChangeNotification
kMRMediaRemoteNowPlayingInfoArtworkDataWidth
kMRMediaRemoteNowPlayingInfoArtworkDataHeight
image/jpeg
T@"NSString",R,N,V_identifier
publicKey
T@"NSData",R,N,V_publicKey
privateKey
T@"NSData",R,N,V_privateKey
PQso
PQri
MRSystemAppPlaybackQueueDestroy
/BuildRoot/Library/Caches/com.apple.xbs/Sources/MediaRemote_Sim/MediaRemote-4016.520.2/MediaRemote/Framework/RemoteControl/MRRemotePlaybackQueue.m
queue
queryData: %p, shuffleMode: %@, repeatMode: %@
stationID: %lld
stationStringID: %@
shuffleMode: %@, trackIDs: %@
seedTrack: %@
identifier: %@ data: <%ld>
Empty Queue
<MRSystemAppPlaybackQueue %p, type: %@, %@>
MRSystemAppPlaybackQueueGetType
MRSystemAppPlaybackQueueIsRequestingImmediatePlayback
MRSystemAppPlaybackQueueSetIsRequestingImmediatePlayback
MRSystemAppPlaybackQueueGetSiriRecommendationIdentifier
MRSystemAppPlaybackQueueSetSiriRecommendationIdentifier
MRSystemAppPlaybackQueueGetSiriAssetInfo
MRSystemAppPlaybackQueueSetSiriAssetInfo
MRSystemAppPlaybackQueueGetSiriWHAMetricsInfo
MRSystemAppPlaybackQueueSetSiriWHAMetricsInfo
MRSystemAppPlaybackQueueGetReplaceIntent
MRSystemAppPlaybackQueueSetReplaceIntent
MRSystemAppPlaybackQueueGetUserInfo
MRSystemAppPlaybackQueueSetUserInfo
MRSystemAppPlaybackQueueGetLocalQueryData
queue->type == MRSystemAppPlaybackQueueTypeLocalMediaQuery
MRSystemAppPlaybackQueueSetLocalQueryData
MRSystemAppPlaybackQueueGetLocalQueryFirstItemMultiverseIDData
MRSystemAppPlaybackQueueSetLocalQueryFirstItemMultiverseIDData
MRSystemAppPlaybackQueueGetLocalQueryFirstItemPID
MRSystemAppPlaybackQueueSetLocalQueryFirstItemPID
MRSystemAppPlaybackQueueGetLocalQueryShuffleMode
MRSystemAppPlaybackQueueSetLocalQueryShuffleMode
MRSystemAppPlaybackQueueGetLocalQueryRepeatMode
MRSystemAppPlaybackQueueSetLocalQueryRepeatMode
MRSystemAppPlaybackQueueSetRadioStationIDType
queue->type == MRSystemAppPlaybackQueueTypeRadioStation
MRSystemAppPlaybackQueueGetRadioStationIntegerPID
MRSystemAppPlaybackQueueSetRadioStationIntegerPID
queue->radioStationQueue.stationIDType == MRSystemAppRadioStationIDTypeIntegerPID
MRSystemAppPlaybackQueueSetRadioStationStringIdentifier
queue->radioStationQueue.stationIDType == MRSystemAppRadioStationIDTypeStationStringID
MRSystemAppPlaybackQueueCopyGenericTrackIdentifiers
_MRSystemAppPlaybackQueueTypeIsTracklistType(queue->type)
MRSystemAppPlaybackQueueSetGenericTrackIdentifiers
MRSystemAppPlaybackQueueGetFirstItemGenericTrackIdentifier
MRSystemAppPlaybackQueueSetFirstItemGenericTrackIdentifier
MRSystemAppPlaybackQueueGetTracklistShuffleMode
MRSystemAppPlaybackQueueSetTracklistShuffleMode
MRSystemAppPlaybackQueueGetTracklistRepeatMode
MRSystemAppPlaybackQueueSetTracklistRepeatMode
MRSystemAppPlaybackQueueGetTracklistCollectionIdentifierSetData
MRSystemAppPlaybackQueueSetTracklistCollectionIdentifierSetData
MRSystemAppPlaybackQueueCopyGeniusSeedTrack
queue->type == MRSystemAppPlaybackQueueTypeGenius
MRSystemAppPlaybackQueueSetGeniusSeedTrack
MRSystemAppPlaybackQueueCopyCustomDataIdentifier
queue->type == MRSystemAppPlaybackQueueTypeCustom
MRSystemAppPlaybackQueueSetCustomDataIdentifier
MRSystemAppPlaybackQueueCopyCustomData
MRSystemAppPlaybackQueueSetCustomData
head
tail
last
specified
PQty
PQip
PQui
PQsr
PQai
PQwm
PQqd
PQmv
PQfi
PQsm
PQrm
PQsy
PQsi
PQss
PQst
PQfg
PQts
PQtr
PQis
PQgs
PQci
PQcd
bplist
LocalMediaQuery
RadioStation
iTunesStoreTracklist
QuickPlay
GenericTracklist
Genius
Empty
<%@ %p %u, recordingState=%@, descriptor=%@>
TI,R,N,V_deviceID
T@"MRVirtualVoiceInputDeviceDescriptor",C,N,V_descriptor
recordingState
TI,N,V_recordingState
jpegData
hasJpegData
T@"NSData",&,N,V_jpegData
-[MRXPCConnection initWithConnection:queue:]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/MediaRemote_Sim/MediaRemote-4016.520.2/MediaRemote/Framework/Service/MRXPCConnection.m
com.apple.mediaremote.MRXPCConnection
-[MRXPCConnection addCustomXPCHandler:forKey:]_block_invoke
A custom xpc handler already exists with key %@
MRXPC_MESSAGE_CUSTOM_ID_KEY
T@"NSObject<OS_xpc_object>",R,N,V_connection
messageHandler
T@?,C,N,V_messageHandler
invalidationHandler
T@?,C,N,V_invalidationHandler
/BuildRoot/Library/Caches/com.apple.xbs/Sources/MediaRemote_Sim/MediaRemote-4016.520.2/MediaRemote/Framework/VoiceInput/MRAudioDataBlock.m
invalid buffer size for decoding voice input message (%lu > (%lu * %lu))
packet descriptions exceed maximum packet capacity (%lu > %lu)
T@"MRAudioBuffer",R,N,V_buffer
T{?=dd},R,N,V_time
Tf,R,N,V_gain
T@"_MRAudioDataBlockProtobuf",R,N
T@"MRAudioBuffer",&,D,N
T{?=dd},D,N
Tf,D,N
v12@?0@"MRCryptoPairingSession"4@"NSString"8
v8@?0@"MRCryptoPairingSession"4
pairingSession
T@"MRCoreUtilsPairingSession",&,N,V_pairingSession
pairingDelegate
T@"MRCryptoPairingSessionBlockDelegate",&,N,V_pairingDelegate
TB,R,N,GisUsingSystemPairing
com.apple.MediaRemote
com.apple.MediaRemote.MRMediaRemoteServiceClient
com.apple.MediaRemote.PlaybackQueue.serialQueue
-[MRMediaRemoteServiceClient registerOrigin:withDeviceInfo:completion:]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/MediaRemote_Sim/MediaRemote-4016.520.2/MediaRemote/Framework/Service/MRMediaRemoteServiceClient.m
v16@?0@"_MROriginProtobuf"4I8^B12
v8@?0l4
B8@?0^v4
v16@?0@"NSUUID"4@"MRNowPlayingPlayerPathInvalidationHandler"8^B12
-[MRMediaRemoteServiceClient _callInvalidationHandler:]
service
T@"MRMediaRemoteService",R,N,V_service
notificationClient
T@"MRNotificationClient",R,N,V_notificationClient
registeredOrigins
workerQueue
T@"NSObject<OS_dispatch_queue>",R,N
playbackQueueDispatchQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_playbackQueueDispatchQueue
activePlayerPath
T@"_MRNowPlayingPlayerPathProtobuf",&,N
com.apple.MediaRemote.serviceClientRemoteCommandCallback
@"NSArray"8@?0@"NSArray"4
void _MRServiceClientTransactionCallback(MRNowPlayingPlayerPathRef, MRTransactionName, __strong xpc_object_t)
playerClient
userData
hasUserData
T@"NSData",&,N,V_userData
com.apple.mediaremote.distantEndpoint/externalDeviceQueue
externalDeviceListenerEndpoint
externalDeviceQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_externalDeviceQueue
T@"NSArray",C,N,V_distantOutputDevices
distantGroupLeader
T@"MRAVDistantOutputDevice",&,N,V_distantGroupLeader
distantExternalDevice
T@"MRDistantExternalDevice",&,N,V_distantExternalDevice
T@"NSXPCListenerEndpoint",&,N,V_externalDeviceListenerEndpoint
hasHiliteMode
TB,N,V_hiliteMode
enabled
active
preferredInterval
localizedTitle
localizedShortTitle
minimumRating
maximumRating
supportedRate
presentationStyle
skipInterval
numAvailableSkips
skipFrequency
canScrub
supportedPlaybackQueueType
supportedCustomQueueIdentifier
supportedInsertionPositions
supportsSharedQueue
upNextItemCount
preferredPlaybackRate
hasEnabled
TB,N,V_enabled
hasActive
TB,N,V_active
preferredIntervalsCount
preferredIntervals
hasLocalizedTitle
T@"NSString",&,N,V_localizedTitle
hasLocalizedShortTitle
T@"NSString",&,N,V_localizedShortTitle
hasMinimumRating
Tf,N,V_minimumRating
hasMaximumRating
Tf,N,V_maximumRating
supportedRatesCount
supportedRates
T^f,R,N
hasPresentationStyle
Ti,N,V_presentationStyle
hasSkipInterval
Ti,N,V_skipInterval
hasNumAvailableSkips
Ti,N,V_numAvailableSkips
hasSkipFrequency
Ti,N,V_skipFrequency
hasCanScrub
Ti,N,V_canScrub
supportedPlaybackQueueTypesCount
supportedPlaybackQueueTypes
supportedCustomQueueIdentifiers
T@"NSMutableArray",&,N,V_supportedCustomQueueIdentifiers
supportedInsertionPositionsCount
hasSupportsSharedQueue
TB,N,V_supportsSharedQueue
hasUpNextItemCount
Ti,N,V_upNextItemCount
hasPreferredPlaybackRate
Tf,N,V_preferredPlaybackRate
usagePage
usage
buttonDown
hasUsagePage
TI,N,V_usagePage
hasUsage
TI,N,V_usage
hasButtonDown
TB,N,V_buttonDown
strings
deviceInfoDeprecated
Ti,N,V_identifier
hasDeviceInfoDeprecated
T@"_MRDeviceInfoMessageProtobuf",&,N,V_deviceInfoDeprecated
Custom
attributes
encryptedTextCyphertext
hasAttributes
T@"_MRTextEditingAttributesProtobuf",&,N,V_attributes
hasEncryptedTextCyphertext
T@"NSData",&,N,V_encryptedTextCyphertext
NotEditing
DidBeginEditing
Editing
TextDidChange
DidEndEditing
Response
<MRColor:%p red = %f, green = %f, blue = %f, alpha = %f>
T@"_MRPlaybackQueueRequestProtobuf",R,N
macAddress
isRemoteControllable
isGroupLeader
isGroupable
deviceSubType
modelSpecificInfoData
isLocalDevice
shouldForceRemoteControlabillity
isDeviceGroupable
isVolumeControlAvailable
isAirPlayReceiverSessionActive
hasGroupID
T@"NSString",&,N,V_groupID
hasModelID
T@"NSString",&,N,V_modelID
hasMacAddress
T@"NSData",&,N,V_macAddress
hasCanAccessRemoteAssets
TB,N,V_canAccessRemoteAssets
hasIsRemoteControllable
TB,N,V_isRemoteControllable
hasIsGroupLeader
TB,N,V_isGroupLeader
hasIsGroupable
TB,N,V_isGroupable
hasDeviceType
Ti,N,V_deviceType
hasDeviceSubType
Ti,N,V_deviceSubType
hasModelSpecificInfoData
T@"NSData",&,N,V_modelSpecificInfoData
Tf,N,V_batteryLevel
hasIsLocalDevice
TB,N,V_isLocalDevice
hasSupportsExternalScreen
TB,N,V_supportsExternalScreen
hasRequiresAuthorization
TB,N,V_requiresAuthorization
hasShouldForceRemoteControlabillity
TB,N,V_shouldForceRemoteControlabillity
hasSourceInfo
T@"_MRAVOutputDeviceSourceInfoProtobuf",&,N,V_sourceInfo
hasIsDeviceGroupable
TB,N,V_isDeviceGroupable
hasCanRelayCommunicationChannel
TB,N,V_canRelayCommunicationChannel
hasLogicalDeviceID
T@"NSString",&,N,V_logicalDeviceID
hasFirmwareVersion
T@"NSString",&,N,V_firmwareVersion
hasIsVolumeControlAvailable
TB,N,V_isVolumeControlAvailable
hasCanAccessAppleMusic
TB,N,V_canAccessAppleMusic
hasCanAccessiCloudMusicLibrary
TB,N,V_canAccessiCloudMusicLibrary
hasGroupContainsGroupLeader
TB,N,V_groupContainsGroupLeader
hasSupportsBufferedAirPlay
TB,N,V_supportsBufferedAirPlay
hasCanPlayEncryptedProgressiveDownloadAssets
TB,N,V_canPlayEncryptedProgressiveDownloadAssets
hasCanFetchMediaDataFromSender
TB,N,V_canFetchMediaDataFromSender
hasPresentsOptimizedUserInterfaceWhenPlayingFetchedAudioOnlyAssets
TB,N,V_presentsOptimizedUserInterfaceWhenPlayingFetchedAudioOnlyAssets
hasIsAirPlayReceiverSessionActive
TB,N,V_isAirPlayReceiverSessionActive
hasParentGroupIdentifier
T@"NSString",&,N,V_parentGroupIdentifier
hasParentGroupContainsDiscoverableLeader
TB,N,V_parentGroupContainsDiscoverableLeader
hasIsAddedToHomeKit
TB,N,V_isAddedToHomeKit
authenticationToken
sendCommandMessage
sendCommandResultMessage
getStateMessage
setStateMessage
setArtworkMessage
registerHIDDeviceMessage
registerHIDDeviceResultMessage
sendHIDEventMessage
sendHIDReportMessage
sendVirtualTouchEventMessage
notificationMessage
contentItemsChangedNotificationMessage
deviceInfoMessage
clientUpdatesConfigMessage
masterVolumeControlCapabilitiesDidChangeMessage
gameController
registerGameController
registerGameControllerResponse
unregisterGameController
registerForGameControllerEvents
keyboardMessage
getKeyboardMessage
textInputMessage
getVoiceInputDevicesMessage
getVoiceInputDevicesResponseMessage
registerVoiceInputDeviceMessage
registerVoiceInputDeviceResponseMessage
setRecordingStateMessage
sendVoiceInputMessage
playbackQueueRequest
transactionPackets
cryptoPairingMessage
gameControllerProperties
readyStateMessage
sendButtonEventMessage
setHiliteModeMessage
wakeDeviceMessage
genericMessage
sendPackedVirtualTouchEventMessage
sendLyricsEventMessage
setNowPlayingClientMessage
setNowPlayingPlayerMessage
modifyOutputContextRequestMessage
getVolumeMessage
getVolumeResultMessage
setVolumeMessage
volumeDidChangeMessage
removeClientMessage
removePlayerMessage
updateClientMessage
updateContentItemMessage
updateContentItemArtworkMessage
updatePlayerMessage
promptForRouteAuthorizationMessage
promptForRouteAuthorizationResponseMessage
presentRouteAuthorizationStatusMessage
getVolumeControlCapabilitiesMessage
getVolumeControlCapabilitiesResultMessage
volumeControlCapabilitiesDidChangeMessage
updateOutputDevicesMessage
removeOutputDevicesMessage
remoteTextInputMessage
getRemoteTextInputSessionMessage
hasAuthenticationToken
T@"NSString",&,N,V_authenticationToken
hasErrorCode
TI,N,V_errorCode
hasSendCommandMessage
T@"_MRSendCommandMessageProtobuf",&,N,V_sendCommandMessage
hasSendCommandResultMessage
T@"_MRSendCommandResultMessageProtobuf",&,N,V_sendCommandResultMessage
hasGetStateMessage
T@"_MRGetStateMessageProtobuf",&,N,V_getStateMessage
hasSetStateMessage
T@"_MRSetStateMessageProtobuf",&,N,V_setStateMessage
hasSetArtworkMessage
T@"_MRSetArtworkMessageProtobuf",&,N,V_setArtworkMessage
hasRegisterHIDDeviceMessage
T@"_MRRegisterHIDDeviceMessageProtobuf",&,N,V_registerHIDDeviceMessage
hasRegisterHIDDeviceResultMessage
T@"_MRRegisterHIDDeviceResultMessageProtobuf",&,N,V_registerHIDDeviceResultMessage
hasSendHIDEventMessage
T@"_MRSendHIDEventMessageProtobuf",&,N,V_sendHIDEventMessage
hasSendHIDReportMessage
T@"_MRSendHIDReportMessageProtobuf",&,N,V_sendHIDReportMessage
hasSendVirtualTouchEventMessage
T@"_MRSendVirtualTouchEventMessageProtobuf",&,N,V_sendVirtualTouchEventMessage
hasNotificationMessage
T@"_MRNotificationMessageProtobuf",&,N,V_notificationMessage
hasContentItemsChangedNotificationMessage
T@"_MRPlaybackQueueProtobuf",&,N,V_contentItemsChangedNotificationMessage
hasDeviceInfoMessage
T@"_MRDeviceInfoMessageProtobuf",&,N,V_deviceInfoMessage
hasClientUpdatesConfigMessage
T@"_MRClientUpdatesConfigurationProtobuf",&,N,V_clientUpdatesConfigMessage
hasMasterVolumeControlCapabilitiesDidChangeMessage
T@"_MRVolumeControlAvailabilityProtobuf",&,N,V_masterVolumeControlCapabilitiesDidChangeMessage
hasGameController
T@"_MRGameControllerMessageProtobuf",&,N,V_gameController
hasRegisterGameController
T@"_MRRegisterGameControllerMessageProtobuf",&,N,V_registerGameController
hasRegisterGameControllerResponse
T@"_MRRegisterGameControllerResponseMessageProtobuf",&,N,V_registerGameControllerResponse
hasUnregisterGameController
T@"_MRUnregisterGameControllerMessageProtobuf",&,N,V_unregisterGameController
hasRegisterForGameControllerEvents
T@"_MRRegisterForGameControllerEventsMessageProtobuf",&,N,V_registerForGameControllerEvents
hasKeyboardMessage
T@"_MRKeyboardMessageProtobuf",&,N,V_keyboardMessage
hasGetKeyboardMessage
T@"_MRGetKeyboardSessionProtobuf",&,N,V_getKeyboardMessage
hasTextInputMessage
T@"_MRTextInputMessageProtobuf",&,N,V_textInputMessage
hasGetVoiceInputDevicesMessage
T@"_MRGetVoiceInputDevicesMessageProtobuf",&,N,V_getVoiceInputDevicesMessage
hasGetVoiceInputDevicesResponseMessage
T@"_MRGetVoiceInputDevicesResponseMessageProtobuf",&,N,V_getVoiceInputDevicesResponseMessage
hasRegisterVoiceInputDeviceMessage
T@"_MRRegisterVoiceInputDeviceMessageProtobuf",&,N,V_registerVoiceInputDeviceMessage
hasRegisterVoiceInputDeviceResponseMessage
T@"_MRRegisterVoiceInputDeviceResponseMessageProtobuf",&,N,V_registerVoiceInputDeviceResponseMessage
hasSetRecordingStateMessage
T@"_MRSetRecordingStateMessageProtobuf",&,N,V_setRecordingStateMessage
hasSendVoiceInputMessage
T@"_MRSendVoiceInputMessageProtobuf",&,N,V_sendVoiceInputMessage
hasPlaybackQueueRequest
T@"_MRPlaybackQueueRequestProtobuf",&,N,V_playbackQueueRequest
hasTransactionPackets
T@"_MRTransactionMessageProtobuf",&,N,V_transactionPackets
hasCryptoPairingMessage
T@"_MRCryptoPairingMessageProtobuf",&,N,V_cryptoPairingMessage
hasGameControllerProperties
T@"_MRGameControllerPropertiesMessageProtobuf",&,N,V_gameControllerProperties
hasReadyStateMessage
T@"_MRSetReadyStateMessageProtobuf",&,N,V_readyStateMessage
hasConnectionState
T@"_MRSetConnectionStateMessageProtobuf",&,N,V_connectionState
hasSendButtonEventMessage
T@"_MRSendButtonEventMessageProtobuf",&,N,V_sendButtonEventMessage
hasSetHiliteModeMessage
T@"_MRSetHiliteModeMessageProtobuf",&,N,V_setHiliteModeMessage
hasWakeDeviceMessage
T@"_MRWakeDeviceMessageProtobuf",&,N,V_wakeDeviceMessage
hasGenericMessage
T@"_MRGenericMessageProtobuf",&,N,V_genericMessage
hasSendPackedVirtualTouchEventMessage
T@"_MRSendPackedVirtualTouchEventMessageProtobuf",&,N,V_sendPackedVirtualTouchEventMessage
hasSendLyricsEventMessage
T@"_MRSendLyricsEventMessageProtobuf",&,N,V_sendLyricsEventMessage
hasSetNowPlayingClientMessage
T@"_MRSetNowPlayingClientMessageProtobuf",&,N,V_setNowPlayingClientMessage
hasSetNowPlayingPlayerMessage
T@"_MRSetNowPlayingPlayerMessageProtobuf",&,N,V_setNowPlayingPlayerMessage
hasModifyOutputContextRequestMessage
T@"_MRAVModifyOutputContextRequestProtobuf",&,N,V_modifyOutputContextRequestMessage
hasGetVolumeMessage
T@"_MRGetVolumeMessageProtobuf",&,N,V_getVolumeMessage
hasGetVolumeResultMessage
T@"_MRGetVolumeResultMessageProtobuf",&,N,V_getVolumeResultMessage
hasSetVolumeMessage
T@"_MRSetVolumeMessageProtobuf",&,N,V_setVolumeMessage
hasVolumeDidChangeMessage
T@"_MRVolumeDidChangeMessageProtobuf",&,N,V_volumeDidChangeMessage
hasRemoveClientMessage
T@"_MRRemoveClientMessageProtobuf",&,N,V_removeClientMessage
hasRemovePlayerMessage
T@"_MRRemovePlayerMessageProtobuf",&,N,V_removePlayerMessage
hasUpdateClientMessage
T@"_MRUpdateClientMessageProtobuf",&,N,V_updateClientMessage
hasUpdateContentItemMessage
T@"_MRUpdateContentItemMessageProtobuf",&,N,V_updateContentItemMessage
hasUpdateContentItemArtworkMessage
T@"_MRUpdateContentItemArtworkMessageProtobuf",&,N,V_updateContentItemArtworkMessage
hasUpdatePlayerMessage
T@"_MRUpdatePlayerMessageProtobuf",&,N,V_updatePlayerMessage
hasPromptForRouteAuthorizationMessage
T@"_MRPromptForRouteAuthorizationMessageProtobuf",&,N,V_promptForRouteAuthorizationMessage
hasPromptForRouteAuthorizationResponseMessage
T@"_MRPromptForRouteAuthorizationResponseMessageProtobuf",&,N,V_promptForRouteAuthorizationResponseMessage
hasPresentRouteAuthorizationStatusMessage
T@"_MRPresentRouteAuthorizationStatusMessageProtobuf",&,N,V_presentRouteAuthorizationStatusMessage
hasGetVolumeControlCapabilitiesMessage
T@"_MRGetVolumeControlCapabilitiesMessageProtobuf",&,N,V_getVolumeControlCapabilitiesMessage
hasGetVolumeControlCapabilitiesResultMessage
T@"_MRGetVolumeControlCapabilitiesResultMessageProtobuf",&,N,V_getVolumeControlCapabilitiesResultMessage
hasVolumeControlCapabilitiesDidChangeMessage
T@"_MRVolumeControlCapabilitiesDidChangeMessageProtobuf",&,N,V_volumeControlCapabilitiesDidChangeMessage
hasUpdateOutputDevicesMessage
T@"_MRUpdateOutputDevicesMessageProtobuf",&,N,V_updateOutputDevicesMessage
hasRemoveOutputDevicesMessage
T@"_MRRemoveOutputDevicesMessageProtobuf",&,N,V_removeOutputDevicesMessage
hasRemoteTextInputMessage
T@"_MRRemoteTextInputMessageProtobuf",&,N,V_remoteTextInputMessage
hasGetRemoteTextInputSessionMessage
T@"_MRGetRemoteTextInputSessionProtobuf",&,N,V_getRemoteTextInputSessionMessage
SendCommand
SendCommandResult
GetState
SetState
SetArtwork
RegisterHIDDevice
RegisterHIDDeviceResult
SendHIDEvent
SendHIDReport
SendVirtualTouchEvent
Notification
ContentItemsChangedNotification
DeviceInfo
ClientUpdatesConfiguration
VolumeControlAvailabilityNotification
GameController
RegisterGameController
RegisterGameControllerResponse
UnregisterGameController
RegisterForGameControllerEvents
Keyboard
GetKeyboardSession
TextInput
GetVoiceInputDevices
GetVoiceInputDevicesResponse
RegisterVoiceInputDevice
RegisterVoiceInputDeviceResponse
SetVoiceInputRecordingState
SendVoiceInput
GetPlaybackQueue
Transaction
CryptoPairing
GameControllerProperties
SetReadyStateMessage
DeviceInfoUpdate
SetDisconnectingStateMessage
SendButtonEvent
SetHiliteMode
WakeDevice
GenericMessage
SendPackedVirtualTouchEvent
SendLyricsEvent
PlaybackQueueCapabilitiesRequest
ModifyOutputContextRequest
GetVolume
GetVolumeResult
SetVolume
RemoteTextInput
GetRemoteTextInputSession
hasDescriptor
T@"_MRVoiceInputDeviceDescriptorProtobuf",&,N,V_descriptor
phase
finger
hasPhase
Ti,N,V_phase
hasFinger
Ti,N,V_finger
Began
Moved
Stationary
Ended
Cancelled
processIdentifier
bundleIdentifier
parentApplicationBundleIdentifier
processUserIdentifier
nowPlayingVisibility
tintColor
bundleIdentifierHierarchy
isEmptyDeprecated
hasProcessIdentifier
Ti,N,V_processIdentifier
hasBundleIdentifier
T@"NSString",&,N,V_bundleIdentifier
hasParentApplicationBundleIdentifier
T@"NSString",&,N,V_parentApplicationBundleIdentifier
hasProcessUserIdentifier
Ti,N,V_processUserIdentifier
hasNowPlayingVisibility
Ti,N,V_nowPlayingVisibility
hasTintColor
T@"_MRColorProtobuf",&,N,V_tintColor
bundleIdentifierHierarchys
T@"NSMutableArray",&,N,V_bundleIdentifierHierarchys
hasIsEmptyDeprecated
TB,N,V_isEmptyDeprecated
com.apple.MediaRemote.MRNotificationClient.serialQueue
com.apple.MediaRemote.MRNotificationClient.notificationQueue
com.apple.MediaRemote.MRNotificationClient/nowPlayingNotifications
v16@?0@"NSString"4@"NSDictionary"8@12
notificationQueue
registeredForNowPlayingNotifications
TB,R,N,GisRegisteredForNowPlayingNotifications
receivesExternalScreenTypeChangedNotifications
TB,N,V_receivesExternalScreenTypeChangedNotifications
receivesSupportedCommandsNotifications
TB,N,V_receivesSupportedCommandsNotifications
receivesRoutesChangedNotifications
TB,N,V_receivesRoutesChangedNotifications
receivesVolumeControlNotifications
TB,N,V_receivesVolumeControlNotifications
receivesOriginChangedNotifications
TB,N,V_receivesOriginChangedNotifications
receivesPlaybackErrorNotifications
TB,N,V_receivesPlaybackErrorNotifications
receivesVoiceInputRecordingStateNotifications
TB,N,V_receivesVoiceInputRecordingStateNotifications
notification
T@"NSString",R,N,V_notification
userInfo
T@"NSDictionary",R,N,V_userInfo
T@"NSObject<OS_dispatch_queue>",R,N,V_queue
xpcMessage
T@"NSObject<OS_xpc_object>",&,N,V_xpcMessage
MRExternalDeviceIncludePeerToPeer
MRExternalDeviceUseNoDelayOptionForExternalDeviceSockets
MRExternalDeviceSocketsQOSLevel
kMRSettingsExternalDeviceTimeoutSecondsDurationDefaultsKey
kMRSettingsExternalDeviceNowPlayingInfoCoalesceDurationDefaultsKey
kMRSettingsExternalDeviceNowPlayingInfoArtworkCoalesceDurationDefaultsKey
kMRSettingsExternalDeviceDisconnectWaitDurationDefaultsKey
kMRSettingsExternalDeviceDisconnectSleepDurationDefaultsKey
kMRSettingsExternalDeviceSleepAssertionOnClientConnectDurationDefaultsKey
kMRSettingsBluetoothDeviceResumeDurationDefaultsKey
kMRSettingsBroadcastCommandWaitDurationDefaultsKey
AirPlayContextInitTimeoutDuration_v2
kMRSettingsExternalDeviceSystemPairingDefaultsKey
UseDebugAVRouteWithoutVolumeControl
kMRSettingsMaxTransactionSizeDefaultsKey
kMRSettingsWaitDurationOnOutOfMemoryDefaultsKey
kMRSettingsWaitDurationOnNetworkSendDefaultsKey
kMRSettingsWaitDurationOnXpcSendDefaultsKey
ShouldInitializeTVBonjourService
ShouldInitializeGenericBonjourService
UseSystemAudioContextForAirPlayTransport
UseGenericTransportForHostedEndpoints
ShouldInitializeRapportService
LogPairingSetupCode
LogArtwork
kMRSettingsConnectedClientPIDS
TVExperience
com.apple.mediaremote
NowPlayingApplicationTimeout
DeviceClassNumber
ConnectToEndpointWhenBeginsPlayback
ConnectToAllEndpointsWhenAnyEndpointBeginsPlayback
ConnectToUserSelectedEndpoint
DiscoverEndpointTimeoutInterval
UseDeviceLockStateToRestoreDeferredPlayerPaths
DeviceRecentlyUsedInterval
MediaRecentlyPlayedInterval
EndpointRecentlyUserSelectedInterval
usePeerToPeerExternalDeviceConnections
useNoDelayOptionForExternalDeviceSockets
useDebugAVRouteWithoutVolumeControl
shouldInitializeTelevisionBonjourService
shouldInitializeGenericBonjourService
shouldInitializeRapportService
shouldLogPairingSetupCode
shouldLogArtwork
hasExternalDeviceSocketQOSLevelSet
externalDeviceSocketQOSLevel
externalDevicePairingAllowed
TB,N,GisExternalDevicePairingAllowed,V_externalDevicePairingAllowed
externalDeviceTimeoutDuration
Td,R,N
externalDeviceNowPlayingInfoCoalesceDuration
externalDeviceNowPlayingInfoArtworkCoalesceDuration
externalDeviceDisconnectWaitDuration
externalDeviceDisconnectSleepDuration
externalDeviceSleepAssertionOnClientConnectDuration
bluetoothDeviceResumeDuration
broadcastCommandWaitDuration
airPlayOutputContextInitTimeoutDuration
useExternalDeviceSystemPairing
maxTransactionMemorySize
transactionWaitDurationOnOutOfMemory
transactionWaitDurationOnXpcSend
transactionWaitDurationOnNetworkSend
useSystemAudioContextForAirPlayTransport
useGenericTransportForHostedEndpoints
connectedClientPIDs
computeNowPlayingApplication
nowPlayingApplicationTimeout
takelockScreenAssertion
useProactiveEndpoint
connectToEndpointWhenBeginsPlayback
connectToAllEndpointsWhenAnyEndpointBeginsPlayback
connectToUserSelectedEndpoint
discoverEndpointTimeoutInterval
needNowPlayingForegroundState
useDeviceLockStateToRestoreDeferredPlayerPaths
deviceRecentlyUsedInterval
mediaRecentlyPlayedInterval
endpointRecentlyUserSelectedInterval
kMRNowPlayingPlaybackQueueChangedNotification
kMROriginNowPlayingPlaybackQueueChangedNotification
kMRPlayerPlaybackQueueChangedNotification
_kMRNowPlayingPlaybackQueueChangedNotification
kMRPlaybackQueueContentItemsChangedNotification
kMROriginPlaybackQueueContentItemsChangedNotification
kMRPlayerPlaybackQueueContentItemsChangedNotification
_MRPlayerPlaybackQueueContentItemsChangedNotification
kMRPlaybackQueueContentItemArtworkChangedNotification
kMROriginPlaybackQueueContentItemArtworkChangedNotification
kMRPlayerPlaybackQueueContentItemArtworkChangedNotification
_MRPlayerPlaybackQueueContentItemArtworkChangedNotification
kMRPlaybackQueueCapabilitiesChangedNotification
void _MRRequestPlaybackQueue(MRPlaybackQueueRequestRef, MRNowPlayingPlayerClientRequests *__strong, __strong MRPlaybackQueueRequestCallbackCompletion)
/BuildRoot/Library/Caches/com.apple.xbs/Sources/MediaRemote_Sim/MediaRemote-4016.520.2/MediaRemote/Framework/NowPlaying/Playback Queue/MRPlaybackQueueRequestResponse.m
i_request
clientState
void _MRResolveAndRequestPlaybackQueue(_MRPlaybackQueueRequestProtobuf *__strong, _MRNowPlayingPlayerPathProtobuf *__strong, __strong MRPlaybackQueueRequestCallbackCompletion)
%@-%d
void MRMediaRemoteSetPlaybackQueue(MRNowPlayingPlayerPathRef, MRPlaybackQueueRef, __strong dispatch_queue_t, void (^__strong)(CFErrorRef))
void _onQueue_MRMediaRemotePushPlaybackQueue(_MRPlaybackQueueProtobuf *__strong, _MRContentItemProtobuf *__strong, MRNowPlayingPlayerClient *__strong)
PlaybackQueueInvalidation
securityType
hasPassword
T@"NSString",&,N,V_password
hasSecurityType
Ti,N,V_securityType
NoneForInfraWiFi
PINFirstTime
PINEveryTime
Password
playerIndex
vendorName
buttonAUpDelay
profile
supportsExtendedMotion
hasPlayerIndex
TI,N,V_playerIndex
hasVendorName
T@"NSString",&,N,V_vendorName
hasButtonAUpDelay
Ti,N,V_buttonAUpDelay
hasProfile
Ti,N,V_profile
hasSupportsExtendedMotion
TB,N,V_supportsExtendedMotion
B239
Extended
-[MRContentItemRequest initWithItem:request:]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/MediaRemote_Sim/MediaRemote-4016.520.2/MediaRemote/Framework/Core/MRContentItemRequest.m
item
-[MRContentItemRequest initWithCoder:]
itemData
_item
requestData
_request
<%@:%p {
  request = %@  item = %@}
T@"_MRContentItemProtobuf",&,N,V_item
startOffset
variableFramesInPacket
dataByteSize
hasStartOffset
Tq,N,V_startOffset
hasVariableFramesInPacket
TI,N,V_variableFramesInPacket
hasDataByteSize
TI,N,V_dataByteSize
_mediaremotetv._tcp.
_mediaremote._tcp.
UniqueIdentifier
ModelName
SystemBuildVersion
AllowPairing
BluetoothAddress
LocalAirPlayReceiverPairingIdentity
/BuildRoot/Library/Caches/com.apple.xbs/Sources/MediaRemote_Sim/MediaRemote-4016.520.2/MediaRemote/Framework/ExternalDevice/MRExternalDeviceController.m
bonjourServiceType
local
com.apple.TVRemote
T@"<MRExternalDeviceControllerDelegate>",W,N,V_delegate
T@"NSString",R,N,V_bonjourServiceType
discovering
TB,R,N,GisDiscovering,V_discovering
MRExternalDeviceTransportDeviceInfoDidChangeNotification
OldDeviceInfo
NewDeviceInfo
-[MRExternalDeviceTransport deviceInfo]
-[MRExternalDeviceTransport name]
-[MRExternalDeviceTransport hostname]
-[MRExternalDeviceTransport port]
-[MRExternalDeviceTransport shouldUseSystemAuthenticationPrompt]
-[MRExternalDeviceTransport setShouldUseSystemAuthenticationPrompt:]
-[MRExternalDeviceTransport error]
-[MRExternalDeviceTransport getInputStream:outputStream:]
-[MRExternalDeviceTransport reset]
hostname
requiresCustomPairing
TB,R,N,V_requiresCustomPairing
shouldUseSystemAuthenticationPrompt
error
T@"NSError",R,N
Tl,R,N,V_connectionType
<%@:%p netService = %@>
netService
T@"NSNetService",&,N,V_netService
/BuildRoot/Library/Caches/com.apple.xbs/Sources/MediaRemote_Sim/MediaRemote-4016.520.2/MediaRemote/Framework/ExternalDevice/MRExternalDeviceTransport.m
com.apple.mediaremote.externalDeviceTransport/serialQueue
<%@: %p outputContext=%@ state=%@ connectionType=%@>
(all)
AVOutputContextDeviceGroupControlOptionCancelAddDeviceIfAuthRequired
T@"MRAVOutputDevice",R,N,V_outputDevice
T@"AVOutputDevice",R,N,V_avOutputDevice
InProgress
Completed
Failed
Uninitialized
InitializingOutputContext
InitializingIOStreams
Initialized
hasDeviceIdentifier
TI,N,V_deviceIdentifier
TVRemote
nanomediaremoted
Tf,N,V_x
Tf,N,V_y
hasZ
Tf,N,V_z
hasW
Tf,N,V_w
/BuildRoot/Library/Caches/com.apple.xbs/Sources/MediaRemote_Sim/MediaRemote-4016.520.2/MediaRemote/Framework/ExternalDevice/AppleTV/MRTelevisionController.m
callbackBlock
T@?,R,N,V_callbackBlock
Got a non-television device from a television bonjour service.
discoveryCallback
T@"_MRTelevisionControllerBlockCallback",&,N,V_discoveryCallback
removalCallback
T@"_MRTelevisionControllerBlockCallback",&,N,V_removalCallback
version
hasVersion
TQ,N,V_version
endpointFeatures
TI,R,D,N
devicePresenceDetected
TB,R,D,N
availableEndpoints
T@"NSArray",R,D,N
availableOutputDevices
discoveryMode
TI,D,N
alwaysAllowUpdates
TB,N,V_alwaysAllowUpdates
targetAudioSessionID
endpointsChangedCallbacks
outputDevicesChangedCallbacks
kMRTelevisionServicePairedDevicesDidChangeNotification
kMRTelevisionServiceIsPairingAllowedDidChangeNotification
MediaRemote_ExtendedInfo
MediaRemote_PeerIdentifier
MediaRemote_PeerName
com.apple.mediaremote.televisionService
messages
kMRActiveDeviceInfoDidChangeNotification
kMRDeviceInfoDidChangeNotification
kMRPairedDeviceUserInfoKey
kMRPreviousPairedDeviceUserInfoKey
kMRPairedDeviceUserInfoDataKey
kMRPreviousPairedDeviceUserInfoDataKey
_MRDeviceInfoDidChangeNotification
void MRPairedDeviceMerge(MRPairedDeviceRef, MRPairedDeviceRef)
/BuildRoot/Library/Caches/com.apple.xbs/Sources/MediaRemote_Sim/MediaRemote-4016.520.2/MediaRemote/Framework/Core/MRPairedDevice.m
v8@?0@"_MROriginProtobuf"4
deviceInfo:<%@
/GL:%s
/PGP:%s
___________________________________________________
DeviceInfo changed from
 %@ 
Fields Added:
Fields Removed: 
Fields Changed: 
deviceUID
MCProfileConnection
/System/Library/PrivateFrameworks/ManagedConfiguration.framework/ManagedConfiguration
MCFeatureRemoteAppPairingAllowed
packetData
totalLength
totalWritePosition
T@"_MRTransactionKeyProtobuf",&,N,V_key
hasPacketData
T@"NSData",&,N,V_packetData
hasTotalLength
TQ,N,V_totalLength
hasTotalWritePosition
TQ,N,V_totalWritePosition
revision
hasRevision
T@"NSString",&,N,V_revision
MRAVRoutingActiveCategoryName
/BuildRoot/Library/Caches/com.apple.xbs/Sources/MediaRemote_Sim/MediaRemote-4016.520.2/MediaRemote/Framework/AirPlay/MRAVRoutingClientController.m
mediaRemoteService
T@"MRMediaRemoteService",R,N,V_mediaRemoteService
formatSettingsPlistData
hasFormatSettingsPlistData
T@"NSData",&,N,V_formatSettingsPlistData
sourceID
externalPlayerCommand
rating
negative
playbackPosition
contextID
trackID
radioStationID
systemAppPlaybackQueueData
sendOptions
requestDefermentToPlaybackQueuePosition
shouldOverrideManuallyCuratedQueue
stationURL
shouldBeginRadioPlayback
playbackQueueInsertionPosition
contentItemID
playbackQueueOffset
playbackQueueDestinationOffset
languageOption
playbackQueueContext
insertAfterContentItemID
nowPlayingContentItemID
replaceIntent
senderID
remoteControlInterface
hasSourceID
T@"NSString",&,N,V_sourceID
T@"NSString",&,N,V_mediaType
hasExternalPlayerCommand
TB,N,V_externalPlayerCommand
Tf,N,V_skipInterval
hasRating
Tf,N,V_rating
hasNegative
TB,N,V_negative
hasPlaybackPosition
Td,N,V_playbackPosition
hasContextID
T@"NSString",&,N,V_contextID
hasTrackID
TQ,N,V_trackID
hasRadioStationID
Tq,N,V_radioStationID
hasSystemAppPlaybackQueueData
T@"NSData",&,N,V_systemAppPlaybackQueueData
hasSendOptions
Ti,N,V_sendOptions
hasRequestDefermentToPlaybackQueuePosition
TB,N,V_requestDefermentToPlaybackQueuePosition
hasShouldOverrideManuallyCuratedQueue
TB,N,V_shouldOverrideManuallyCuratedQueue
hasStationURL
T@"NSString",&,N,V_stationURL
hasShouldBeginRadioPlayback
TB,N,V_shouldBeginRadioPlayback
hasPlaybackQueueInsertionPosition
Ti,N,V_playbackQueueInsertionPosition
hasContentItemID
T@"NSString",&,N,V_contentItemID
hasPlaybackQueueOffset
Ti,N,V_playbackQueueOffset
hasPlaybackQueueDestinationOffset
Ti,N,V_playbackQueueDestinationOffset
hasLanguageOption
T@"NSData",&,N,V_languageOption
hasPlaybackQueueContext
T@"NSData",&,N,V_playbackQueueContext
hasInsertAfterContentItemID
T@"NSString",&,N,V_insertAfterContentItemID
hasNowPlayingContentItemID
T@"NSString",&,N,V_nowPlayingContentItemID
hasReplaceIntent
Ti,N,V_replaceIntent
hasSenderID
T@"NSString",&,N,V_senderID
hasRemoteControlInterface
T@"NSString",&,N,V_remoteControlInterface
LaunchApplication
NonDestructive
ClearUpNext
KeepUpNext
results
v16@?0@"_MRContentItemProtobuf"4@"_MRPlaybackQueueRequestProtobuf"8^B12
void _onQueue_MRMediaRemoteSendContentItemArtworkUpdatedNotification(NSArray<_MRContentItemProtobuf *> *__strong, _MRNowPlayingPlayerPathProtobuf *__strong)
/BuildRoot/Library/Caches/com.apple.xbs/Sources/MediaRemote_Sim/MediaRemote-4016.520.2/MediaRemote/Framework/NowPlaying/Playback Queue/PlaybackQueueDataSource/MRPlaybackQueueDataSourceContentItemChanges.m
Attempting to use unresolved Player Path
dataExchangeBlock
T@?,C,N,V_dataExchangeBlock
showSetupCodeBlock
T@?,C,N,V_showSetupCodeBlock
hideSetupCodeBlock
T@?,C,N,V_hideSetupCodeBlock
promptForSetupCodeBlock
T@?,C,N,V_promptForSetupCodeBlock
exchangeCompleteBlock
T@?,C,N,V_exchangeCompleteBlock
AuthenticationRequired
AuthenticationFailed
Busy
OutOfRange
UnknownError
NotConnected
kMRMediaRemoteCommandInfoPreferredIntervalsKey
kMRMediaRemoteCommandInfoIsActiveKey
kMRMediaRemoteCommandInfoLocalizedTitleKey
kMRMediaRemoteCommandInfoLocalizedShortTitleKey
kMRMediaRemoteCommandInfoMinimumRatingKey
kMRMediaRemoteCommandInfoMaximumRatingKey
kMRMediaRemoteCommandInfoSupportedPlaybackRates
kMRMediaRemoteCommandInfoPreferredPlaybackRate
kMRMediaRemoteCommandInfoPresentationStyleKey
kMRMediaRemoteCommandInfoCanBeControlledByScrubbingKey
kMRMediaRemoteCommandInfoSupportedInsertionPositions
kMRMediaRemoteCommandInfoPreservesShuffleModeKey
kMRMediaRemoteCommandInfoPreservesRepeatModeKey
kMRMediaRemoteCommandInfoSupportedShuffleModes
kMRMediaRemoteCommandInfoSupportedRepeatModes
kMRMediaRemoteCommandInfoPurchaseCommandState
kMRMediaRemoteCommandInfoRepeatMode
kMRMediaRemoteCommandInfoShuffleMode
kMRMediaRemoteCommandInfoNumberOfAvailableSkips
kMRMediaRemoteCommandInfoSkipFrequency
kMRMediaRemoteCommandInfoSkipInterval
kMRMediaRemoteCommandInfoPlaybackQueueType
kMRMediaRemoteCommandInfoSpecializedQueues
kMRMediaRemoteCommandInfoSupportedPlaybackQueueTypes
kMRMediaRemoteCommandInfoSupportedCustomPlaybackQueueIdentifiers
kMRMediaRemoteCommandInfoSupportsSharedQueue
kMRMediaRemoteCommandInfoUpNextItemCount
kCommandInfoCommandKey
kCommandInfoEnabledKey
kCommandInfoOptionsKey
MRMediaRemoteCommandInfo
<MRMediaRemoteCommandInfo: %p, %@, enabled = %d, options = %@>
_kMRErrorRepErrorCodeKey
_kMRErrorRepErrorDomainKey
_kMRErrorRepErrorUserInfoKey
com.apple.mobileipod
SiriShouldRouteCommandsToLegacyMusicApplication
mediaremoted
<null>
v16@?0@4I8^B12
Unknown Error
No Error
Invalid Operation
Operation not permitted
Client does not exist
Origin does not exist
Unsupported operation
Failed to set picked route
Failed to register custom origin
Failed to remove custom origin
The application activity does not exist
The app has not setup a browsable content endpoint
The requested browsable content API is not supported by the application.
The notfication has not been whitelisted by the server.
Operation requires a client callback to have been registered.
Operation requires a client data source to have been registered.
Requested data is out of date and should be requested again
The device's enforced volume limit has been exceeded. The system will ignore the volume adjustment until overridden.
Volume value is out of range (must be between 0.0 and 1.0, where 1.0 is the loudest).
Volume is already at the maximum value.
Volume is already muted.
Voice input endpoint does not exist.
The voice input device is not registered or does not exist.
Encryption failure.
Endpoint does not exist.
Failed to connect to remote device.
Authentication token is invalid.
Recording session is already in progress on this device.
The device is not currently recording.
The client has disconnected.
The server has disconnected.
The connection has been cancelled by the client.
Pairing functionality is locked due to security reasons.
The client's operating system version is too old.
The client's application version is too old.
The device is not paired
The pin pairing dialog was removed by the user before pairing occoured
The pin pairing dialog was removed by a timeout before pairing occoured
The connection timedout
Pairing with this device is blocked
The device is going to sleep
The client's application cancelled the operation.
The operation timed out.
The specified player path object was invalid. (No Now Playing Client?)
Adding or removing devices from the AV output context has failed.
Could not find the specified now playing player
The specified content item does not exist.
The specified offset is invalid.
The specified output context is invalid.
One or more specified output devices are not groupable.
The specified output context does not support adding more than one output device.
Could not find the specified now playing client
Endpoint volume control is only possible if the endpoint is picked or remote controllable.
Output device volume control is only possible if the endpoint is picked or remote controllable.
Connection blocked by server.
MRAVEndpoint was deallocated while waiting for device to connect.
Coder must support key-value coding
Could not find the given outputDevice
Output context modification caused a device to no longer be a proxy group player.
Output context modification caused a device to become a proxy group player.
Output context modification requested no topology change.
<NSCFDictionary %p {
%@ = %@
Library
MediaRemoteTelevisionDeviceInfoIdentifier.plist
%@...%@:%lu bytes
%02d:%02d:%02d (%lf)
@%#*+=-:. 
%@ %p {
        
    
FallbackIdentifier-%d
DiscoveryDebugEnabled
com.apple.mediaremote.MRUtility/registeredTransactionsQueue
notifications
T@"NSMutableArray",&,N,V_notifications
userInfos
T@"NSMutableArray",&,N,V_userInfos
playerPaths
T@"NSMutableArray",&,N,V_playerPaths
/BuildRoot/Library/Caches/com.apple.xbs/Sources/MediaRemote_Sim/MediaRemote-4016.520.2/MediaRemote/Framework/Core/MRTransaction.m
Required Info for Transaction Packet Not Available
Appending packets with different properties
Write Position: %lu greater than data length %lu
Next Write Pos: %lu greater than data length %lu
Key = %@, Identifier = %@, TotalLength = %lu, ActualLength = %lu,
Total Write Position: %lu greater than total length %lu
Write Position %lu + Write Length %lu greater than data length %lu
Length and Postion will cause overflow
T@"NSData",R,N,V_data
T@"_MRTransactionKeyProtobuf",R,N,V_key
T@"_MRTransactionPacketProtobuf",R,N
writeLength
TI,N,V_writeLength
writePosition
TI,R,N,V_writePosition
actualLength
TI,R,N,V_totalLength
TI,R,N,V_totalWritePosition
readComplete
TB,R,N,GisReadComplete
writeComplete
TB,R,N,GisWriteComplete
Current Length greater than total length
Duplicate total write positions %ld
i12@?0@"MRTransactionPacket"4@"MRTransactionPacket"8
MRXPC_TRANSACTION_DATA_REQUESTED_SIZE
requested size is 0
MRXPC_TRANSACTION_DATA
MRXPC_TRANSACTION_ENDED
v12@?0@"NSArray"4B8
TQ,R,N,V_name
com.apple.MediaRemote.transactionDestinationQueue
-[MRTransactionDestination packetsFromMessage:completion:]
ContentItemChangedSTART
ContentItemMetadataChanged
ContentItemInfoChanged
ContentItemLyricsChanged
ContentItemLanguageOptionsChanged
ContentItemSectionsChanged
ContentItemArtworkChanged
ContentItemChangedEND
PlaybackQueueRequest
@16@?0@"NSDictionary"4@"NSString"8@12
@16@?0@"PBCodable"4@"NSString"8@12
<Message Type: %@ Timestamp: %llu Error: %@ Identifier: %@
Message: %@
/BuildRoot/Library/Caches/com.apple.xbs/Sources/MediaRemote_Sim/MediaRemote-4016.520.2/MediaRemote/Framework/ProtocolMessages/MRProtocolMessage.m
Message does not have a valid type. Did you forget to implement the type method?
underlyingCodableMessage
T@"PBCodable",&,N,V_underlyingCodableMessage
T@"NSString",C,N,V_identifier
T@"NSError",C,N,V_error
T@"MRProtocolClientConnection",W,N,V_clientConnection
isReply
TB,N,V_isReply
protobufData
encryptionType
priority
shouldLog
messageSentCallbacks
T@"MSVMultiCallback",R,N
messagePurgedCallbacks
lastSupportedMessageType
TI,R,N,V_lastSupportedMessageType
T@"NSMutableArray",&,N,V_packets
localizedModelName
systemBuildVersion
applicationBundleIdentifier
applicationBundleVersion
protocolVersion
supportsSystemPairing
allowsPairing
connected
systemMediaApplication
supportsACL
bluetoothAddress
sharedQueueVersion
localReceiverPairingIdentity
managedConfigDeviceID
deviceClass
logicalDeviceCount
tightlySyncedGroup
tightSyncUID
groupUID
groupName
groupedDevices
isAirplayActive
hasLocalizedModelName
T@"NSString",&,N,V_localizedModelName
hasSystemBuildVersion
T@"NSString",&,N,V_systemBuildVersion
hasApplicationBundleIdentifier
T@"NSString",&,N,V_applicationBundleIdentifier
hasApplicationBundleVersion
T@"NSString",&,N,V_applicationBundleVersion
hasProtocolVersion
TQ,N,V_protocolVersion
hasLastSupportedMessageType
TI,N,V_lastSupportedMessageType
hasSupportsSystemPairing
TB,N,V_supportsSystemPairing
hasAllowsPairing
TB,N,V_allowsPairing
hasConnected
TB,N,V_connected
hasSystemMediaApplication
T@"NSString",&,N,V_systemMediaApplication
hasSupportsACL
TB,N,V_supportsACL
hasBluetoothAddress
T@"NSData",&,N,V_bluetoothAddress
hasSharedQueueVersion
TI,N,V_sharedQueueVersion
hasLocalReceiverPairingIdentity
T@"NSString",&,N,V_localReceiverPairingIdentity
hasManagedConfigDeviceID
T@"NSString",&,N,V_managedConfigDeviceID
hasDeviceClass
Ti,N,V_deviceClass
hasLogicalDeviceCount
TI,N,V_logicalDeviceCount
hasTightlySyncedGroup
TB,N,V_tightlySyncedGroup
hasTightSyncUID
T@"NSString",&,N,V_tightSyncUID
hasGroupUID
T@"NSString",&,N,V_groupUID
hasGroupName
T@"NSString",&,N,V_groupName
T@"NSMutableArray",&,N,V_groupedDevices
hasIsAirplayActive
TB,N,V_isAirplayActive
Invalid
iPhone
iPod
iPad
iFPGA
Watch
Accessory
Bridge
deviceDescriptor
T@"MRVirtualTouchDeviceDescriptor",R,C,N
void MRMediaRemotePlaybackQueueDataSourceInvalidateWithPlaybackQueueForPlayer(MRPlaybackQueueRef, MRNowPlayingPlayerRef)
/BuildRoot/Library/Caches/com.apple.xbs/Sources/MediaRemote_Sim/MediaRemote-4016.520.2/MediaRemote/Framework/NowPlaying/Playback Queue/PlaybackQueueDataSource/MRPlaybackQueueDataSourceInvalidation.m
T@"_MRLyricsEventProtobuf",R,N
(System Media Application)
com.apple.NanoMusic
com.apple.TVMusic
com.apple.Music
com.apple.iTunes
public.main-program-content
public.auxiliary-content
public.subtitles.forced-only
public.accessibility.transcribes-spoken-dialog
public.accessibility.describes-music-and-sound
public.accessibility.describes-video
public.easy-to-read
public.translation
public.translation.dubbed
public.translation.voice-over
kMRLanguageOptionLanguageTag
kMRLanguageOptionType
KMRLanguageOptionCharacteristics
kMRLanguageOptionDefaultSelection
kMRLanguageOptionAllowEmptySelection
kMRLanguageOptions
kMRLanguageOptionDisplayName
kMRLanguageOptionIdentifier
__AUTO__
coder must support key-value coding
MRLanguageOptionTypeAudible
MRLanguageOptionTypeLegible
hidEventData
hasHidEventData
T@"NSData",&,N,V_hidEventData
autocapitalizationType
keyboardType
returnKeyType
autocorrection
spellchecking
enablesReturnKeyAutomatically
secureTextEntry
validTextRangeLocation
validTextRangeLength
PINEntrySeparatorIndexes
hasAutocapitalizationType
Ti,N,V_autocapitalizationType
hasKeyboardType
Ti,N,V_keyboardType
hasReturnKeyType
Ti,N,V_returnKeyType
hasAutocorrection
TB,N,V_autocorrection
hasSpellchecking
TB,N,V_spellchecking
hasEnablesReturnKeyAutomatically
TB,N,V_enablesReturnKeyAutomatically
hasSecureTextEntry
TB,N,V_secureTextEntry
hasValidTextRangeLocation
TQ,N,V_validTextRangeLocation
hasValidTextRangeLength
TQ,N,V_validTextRangeLength
pINEntrySeparatorIndexesCount
pINEntrySeparatorIndexes
T^Q,R,N
Words
Sentences
AllCharacters
ASCIICapable
NumbersAndPunctuation
NumberPad
PhonePad
NamePhonePad
EmailAddress
DecimalPad
Twitter
WebSearch
PasscodePad
Google
Join
Next
Route
Search
Send
Yahoo
Done
EmergencyCall
Continue
-[MRNowPlayingPlayerClientCallbacks initWithPlayerPath:queue:]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/MediaRemote_Sim/MediaRemote-4016.520.2/MediaRemote/Framework/Core/MRNowPlayingPlayerClientCallbacks.m
com.apple.MediaRemote.PlaybackQueueNowPlayingInfo.serialQueue
^v8@?0l4
v16@?0^v4^v8@?<v@?^{__CFError=}>12
hasPlaybackQueueCallbacks
TL,R,N
createPlaybackQueueForRequestCallbacks
T@"MSVMultiCallback",R,N,V_createPlaybackQueueForRequestCallbacks
createItemForOffsetCallbacks
T@"MSVMultiCallback",R,N,V_createItemForOffsetCallbacks
createChildItemCallbacks
T@"MSVMultiCallback",R,N,V_createChildItemCallbacks
metadataCallbacks
T@"MSVMultiCallback",R,N,V_metadataCallbacks
languageOptionsCallbacks
T@"MSVMultiCallback",R,N,V_languageOptionsCallbacks
infoCallbacks
T@"MSVMultiCallback",R,N,V_infoCallbacks
lyricsCallbacks
T@"MSVMultiCallback",R,N,V_lyricsCallbacks
artworkCallbacks
T@"MSVMultiCallback",R,N,V_artworkCallbacks
beginLyricsEventCallback
endLyricsEventCallback
commandHandlerBlocks
T@"NSArray",R,C,N
videoThumbnailsCallback
audioAmplitudeSamplesCallback
kMRMediaRemoteActiveSystemEndpointDidChangeNotification
_kMRMediaRemoteActiveSystemEndpointDidChangeNotification
kMRMediaRemoteActiveEndpointTypeUserInfoKey
kMRMediaRemoteActiveEndpointChangeTypeUserInfoKey
kMRMediaRemoteActiveEndpointReasonUserInfoKey
Update
UserSelected
Proactive
Immediate
Deferrable
%@%@ActiveEndpoint because %@
ResolveActiveEndpoint
v12@?0@"MRAVEndpoint"4@"NSError"8
Could not discover %@ after %lf seconds
kMRNowPlayingClientDataUserInfoKey
kMRNowPlayingClientUserInfoKey
kMRNowPlayingPlayerUserInfoKey
kMRNowPlayingPlayerDataUserInfoKey
kMRNowPlayingPlayerPathUserInfoKey
kMRNowPlayingPlayerPathDataUserInfoKey
kMRActiveNowPlayingPlayerPathUserInfoKey
kMRActiveNowPlayingPlayerPathDataUserInfoKey
kMROriginActiveNowPlayingPlayerPathUserInfoKey
kMROriginActiveNowPlayingPlayerPathDataUserInfoKey
CFDataRef MRNowPlayingClientCreateExternalRepresentation(MRNowPlayingClientRef)
/BuildRoot/Library/Caches/com.apple.xbs/Sources/MediaRemote_Sim/MediaRemote-4016.520.2/MediaRemote/Framework/NowPlaying/MRNowPlayingPlayerPath.m
MRNowPlayingClientRef MRNowPlayingClientCopy(MRNowPlayingClientRef)
pid_t MRNowPlayingClientGetProcessIdentifier(MRNowPlayingClientRef)
MRNowPlayingClientRef MRNowPlayingClientCreateSkeletonFrom(MRNowPlayingClientRef)
void MRNowPlayingClientSetProcessIdentifier(MRNowPlayingClientRef, pid_t)
CFStringRef MRNowPlayingClientGetBundleIdentifier(MRNowPlayingClientRef)
void MRNowPlayingClientSetBundleIdentifier(MRNowPlayingClientRef, CFStringRef)
CFStringRef MRNowPlayingClientGetParentAppBundleIdentifier(MRNowPlayingClientRef)
void MRNowPlayingClientSetParentAppBundleIdentifier(MRNowPlayingClientRef, CFStringRef)
uid_t MRNowPlayingClientGetUserIdentifier(MRNowPlayingClientRef)
void MRNowPlayingClientSetUserIdentifier(MRNowPlayingClientRef, uid_t)
MRNowPlayingClientVisibility MRNowPlayingClientGetNowPlayingVisibility(MRNowPlayingClientRef)
void MRNowPlayingClientSetNowPlayingVisibility(MRNowPlayingClientRef, MRNowPlayingClientVisibility)
MRColor MRNowPlayingClientGetTintColor(MRNowPlayingClientRef)
void MRNowPlayingClientSetTintColor(MRNowPlayingClientRef, MRColor)
CFArrayRef MRNowPlayingClientCopyBundleIdentifierHierarchy(MRNowPlayingClientRef)
CFArrayRef MRNowPlayingClientCopyBundleIdentifierExtendedHierarchy(MRNowPlayingClientRef)
void MRNowPlayingClientAppendBundleIdentifier(MRNowPlayingClientRef, CFStringRef)
_Bool MRNowPlayingClientGetHasAuxillaryProperties(MRNowPlayingClientRef)
Boolean MRNowPlayingClientEqualToClient(MRNowPlayingClientRef, MRNowPlayingClientRef)
void MRNowPlayingClientMerge(MRNowPlayingClientRef, MRNowPlayingClientRef)
MRNowPlayingPlayerRef MRNowPlayingPlayerCopy(MRNowPlayingPlayerRef)
MRNowPlayingPlayerRef MRNowPlayingPlayerCreateSkeletonFrom(MRNowPlayingClientRef)
void MRNowPlayingPlayerSetIdentifier(MRNowPlayingPlayerRef, CFStringRef)
void MRNowPlayingPlayerSetDisplayName(MRNowPlayingPlayerRef, CFStringRef)
void MRNowPlayingPlayerSetAudioSessionType(MRNowPlayingPlayerRef, MRNowPlayingPlayerAudioSessionType)
CFStringRef MRNowPlayingPlayerGetIdentifier(MRNowPlayingPlayerRef)
CFStringRef MRNowPlayingPlayerGetDisplayName(MRNowPlayingPlayerRef)
MRNowPlayingPlayerAudioSessionType MRNowPlayingPlayerGetAudioSessionType(MRNowPlayingPlayerRef)
LongForm
Independent
_Bool MRNowPlayingPlayerGetHasAuxillaryProperties(MRNowPlayingPlayerRef)
Boolean MRNowPlayingPlayerEqualToPlayer(MRNowPlayingPlayerRef, MRNowPlayingPlayerRef)
void MRNowPlayingPlayerMerge(MRNowPlayingPlayerRef, MRNowPlayingPlayerRef)
MRNowPlayingPlayerPathRef MRNowPlayingPlayerPathCopy(MRNowPlayingPlayerPathRef)
MRNowPlayingPlayerPathRef MRNowPlayingPlayerPathCreateSkeletonFrom(MRNowPlayingPlayerPathRef)
MROriginRef MRNowPlayingPlayerPathGetOrigin(MRNowPlayingPlayerPathRef)
MRNowPlayingClientRef MRNowPlayingPlayerPathGetClient(MRNowPlayingPlayerPathRef)
MRNowPlayingPlayerRef MRNowPlayingPlayerPathGetPlayer(MRNowPlayingPlayerPathRef)
void MRNowPlayingPlayerPathSetOrigin(MRNowPlayingPlayerPathRef, MROriginRef)
void MRNowPlayingPlayerPathSetClient(MRNowPlayingPlayerPathRef, MRNowPlayingClientRef)
void MRNowPlayingPlayerPathSetPlayer(MRNowPlayingPlayerPathRef, MRNowPlayingPlayerRef)
CFDataRef MRNowPlayingPlayerPathCreateExternalRepresentation(MRNowPlayingPlayerPathRef)
Boolean MRNowPlayingPlayerPathEqualToPlayerPath(MRNowPlayingPlayerPathRef, MRNowPlayingPlayerPathRef)
_Bool MRNowPlayingPlayerPathClientEqualToPlayerPathClient(MRNowPlayingPlayerPathRef, MRNowPlayingPlayerPathRef)
_Bool MRNowPlayingPlayerPathGetIsResolved(MRNowPlayingPlayerPathRef)
_Bool MRNowPlayingPlayerPathIsLocal(MRNowPlayingPlayerPathRef)
void MRMediaRemoteNowPlayingGetResolvedPlayerPathIsLocal(MRNowPlayingPlayerPathRef, __strong dispatch_queue_t, void (^__strong)(MRNowPlayingPlayerPathRef, _Bool))
NULL playerPath cannot be 'resolved'
_Bool MRMediaRemoteNowPlayingGetResolvedPlayerPathIsLocalSync(MRNowPlayingPlayerPathRef, MRNowPlayingPlayerPathRef *)
v12@?0^v4B8
CFErrorRef MRMediaRemoteNowPlayingPlayerPathCreateError(MRNowPlayingPlayerPathRef)
CFStringRef MRNowPlayingPlayerPathCopyStringRepresentation(MRNowPlayingPlayerRef)
 (%@)
origin-%@-%d/client-%@/player-%@
MRNowPlayingPlayerPathRef MRNowPlayingPlayerPathResolveExternalDevicePlayerPath(MRNowPlayingPlayerPathRef, MROriginRef)
MRNowPlayingPlayerPathRef MRNowPlayingPlayerPathResolveLocalPlayerPath(MRNowPlayingPlayerRef)
MediaRemote-DefaultPlayer
Default Player
v12@?0@"_MRNowPlayingPlayerPathProtobuf"4@"NSError"8
void MRMediaRemoteNowPlayingResolvePlayerPath(MRNowPlayingPlayerPathRef, __strong dispatch_queue_t, void (^__strong)(MRNowPlayingPlayerPathRef, CFErrorRef))_block_invoke
Non-resolved activePlayerPath cached
T@?,R,N,V_callback
isLocal
point = {%f, %f}
phase = %@
timestamp = %llu
finger = %u
usagePage = %u
usage = %u
down = %s
kMRMediaRemoteApplicationFinishedLoadingContentNotification
kMRMediaRemoteApplicationInvalidatedBrowsableContentDataSourceNotification
kMRMediaRemoteBrowsableContentNowPlayingIdentifiersUpdatedNotification
kMRMediaRemoteContentItemsUpdatedNotification
kMRMediaRemoteApplicationInitiatedPlaybackOfContentItemNotification
kMRMediaRemoteBrowsableContentErrorLocalizedDescriptionKey
kMRMediaRemoteBrowsableContentErrorCodeKey
kMRMediaRemoteBrowsableContentErrorDomainKey
kMRMediaRemoteIndexPathDataUserInfoKey
kMRMediaRemoteBrowsableContentBundleIdentifierUserInfoKey
kMRMediaRemoteBrowsableContentEndpointChangedNotification
kMRMediaRemoteBrowsableContentAPIChangedNotification
Boolean MRMediaRemoteApplicationSupportsBrowsableContent(CFStringRef)
/BuildRoot/Library/Caches/com.apple.xbs/Sources/MediaRemote_Sim/MediaRemote-4016.520.2/MediaRemote/Framework/BrowsableContent/MRBrowsableContent.m
bundleID
com.apple.developer.playable-content
UIBrowsableContentSupportsSectionedBrowsing
UIBrowsableContentSupportsImmediatePlayback
v8@?0B4
v12@?0Q4
BeginLoadingContent
PlaybackProgress
ContentFetching
InitiatePlayback
InitializePlaybackQueue
ContextChanges
kMRAVEndpointExternalDeviceInvalidatedNotification
kMRAVEndpointOutputDevicesDidChangeNotification
_MRAVEndpointNameUserInfoKey
_MRAVEndpointOutputDeviceNameUserInfoKey
kMRAVEndpointVolumeDidChangeNotification
kMRAVEndpointVolumeControlCapabilitiesDidChangeNotification
kMRAVEndpointIdentifierUserInfoKey
kMRAVEndpointOutputDeviceIdentifierUserInfoKey
kMRAVEndpointVolumeUserInfoKey
kMRAVEndpointVolumeControlCapabilitiesUserInfoKey
com.apple.MRAVEndpoint.sharedLocalEndpointSerialQueue
SYSTEM
com.apple.MediaRemote.MRAVEndpoint.connectionState.serialOperationQueue
<%@:%p (%@) uid="%@" outputDevices = %@>
ROUTE_NAME_ARROW_FORMAT
ROUTE_NAMES_CONCAT_DELIMITER
<%@: %p (%@) uid="%@" leader="%@">
output-devices
com.apple.MediaRemote.MRAVEndpoint.NotificationQueue
-[MRAVEndpoint removeOutputDeviceFromParentGroup:queue:completion:]_block_invoke
/BuildRoot/Library/Caches/com.apple.xbs/Sources/MediaRemote_Sim/MediaRemote-4016.520.2/MediaRemote/Framework/Advanced Routing/MRAVEndpoint.m
externalDevice
v12@?0@"NSArray"4@"NSMutableArray"8
v8@?0@"NSTimer"4
localizedName
T@"NSString",&,N,V_localizedName
logicalOutputDeviceCount
T@"MRExternalDevice",R,N
TB,N,GisProxyGroupPlayer,V_proxyGroupPlayer
T@"_MRAVEndpointDescriptorProtobuf",R,N
shortDescription
localEndpoint
TB,R,N,GisLocalEndpoint
v12@?0@"MRAVEndpoint"4@"NSArray"8
v16@?0^{__CFArray=}4^v8^{__CFError=}12
v8@?0L4
direct://%@
relay://%@/%@
airplay://%@
AVAudioSession
AVAudioSessionCategoryPlayback
com.apple.MediaRemote.MRPlaybackQueueClient/serialQueue
<%@: %p playerPath=%@>
requestFilters
requests
offsets
/BuildRoot/Library/Caches/com.apple.xbs/Sources/MediaRemote_Sim/MediaRemote-4016.520.2/MediaRemote/Framework/Core/MRPlaybackQueueClient.m
Unexpected class attempting to restore controller: %@
Attempting to restore state for unrelated player path: %@
v16@?0@"_MRContentItemProtobuf"4I8^B12
<%@ %p: playerPath=%@
inputModeFlags
hasInputModeFlags
Ti,N,V_inputModeFlags
Motion
Buttons
Digitizer
dPadX
dPadY
leftShoulder
rightShoulder
leftThumbstickX
leftThumbstickY
rightThumbstickX
rightThumbstickY
leftTrigger
rightTrigger
pause
hasDPadX
Tf,N,V_dPadX
hasDPadY
Tf,N,V_dPadY
hasA
Tf,N,V_a
hasB
Tf,N,V_b
hasLeftShoulder
Tf,N,V_leftShoulder
hasRightShoulder
Tf,N,V_rightShoulder
hasLeftThumbstickX
Tf,N,V_leftThumbstickX
hasLeftThumbstickY
Tf,N,V_leftThumbstickY
hasRightThumbstickX
Tf,N,V_rightThumbstickX
hasRightThumbstickY
Tf,N,V_rightThumbstickY
hasLeftTrigger
Tf,N,V_leftTrigger
hasRightTrigger
Tf,N,V_rightTrigger
hasPause
Tf,N,V_pause
/BuildRoot/Library/Caches/com.apple.xbs/Sources/MediaRemote_Sim/MediaRemote-4016.520.2/MediaRemote/Framework/Core/MRNowPlayingPlayerClientRequests.m
Trying to instantiate an unresolved MRNowPlayingPlayerClientRequests %@
com.apple.MRNowPlayingPlayerClientRequests.response
    playerPath = %@
    playbackQueue = %@
    transactionCallbacks = %@
    playbackQueueCompletions = %@
    transactions = %@
    enquedNowPlayingInfoRequests = %@
    enquedNowPlayingInfoAssetRequests = %@
    supportedCommandsCompletions = %@
-[MRNowPlayingPlayerClientRequests receiveTransaction:fromMessage:]
transaction
v12@?0@"NSArray"4@?<v@?l>8
-[MRNowPlayingPlayerClientRequests _handleTransactionPackets:packets:completion:]
originClientState
v20@?0@"MRTransactionDestination"4@"NSArray"8@"_MRNowPlayingPlayerPathProtobuf"12@?<v@?l>16
subscriptionController
T@"MRPlaybackQueueSubscriptionController",R,N,V_subscriptionController
T@"_MRPlaybackQueueProtobuf",C,N
%@:%p %@
imageData
T@"NSData",R,C,N,V_imageData
mimeType
T@"NSString",R,C,N,V_mimeType
Origin: %@ Clients: %@
    origin = %@
    deviceInfo = %@
    canBeNowPlayingApp = %@
    canBeNowPlayingAppTimestamp = %lf
    isOverrideApp = %@
    routeDiscoveryMode = %@
    applicationPickedRoutes = %@
    inputMode = %@
    volumeCapabilities = %@
    playbackQueueCallback = %@
    playbackQueueTransactionCallback = %@
    capabilitiesCallback = %@
    commandCallback = %@
    beginLyricsEventCallback = %@
    endLyricsEventCallback = %@
    activity = %@
    activeNowPlayingClient = %@
    nowPlayingClients = %@
canBeNowPlayingApp
isOverrideApp
hardwareRemoteBehavior
TI,N,V_hardwareRemoteBehavior
routeDiscoveryMode
applicationPickedRoutes
activity
T@"MRApplicationActivity",&,N
T@"_MRDeviceInfoMessageProtobuf",&,N
playbackQueueCallback
playbackQueueTransactionCallback
commandCallback
activeNowPlayingClient
T@"_MRNowPlayingClientProtobuf",&,N,V_activeNowPlayingClient
-[MRNowPlayingClient initWithPlayerPath:]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/MediaRemote_Sim/MediaRemote-4016.520.2/MediaRemote/Framework/Core/MRNowPlayingOriginClient.m
_playerPath
MRNowPlayingClientGetBundleIdentifier(client)
MRNowPlayingClientGetProcessIdentifier(client)
com.apple.MRNowPlayingClient
Client: %@ Players: %@
    playerPath = %@
    client = %@
    activePlayer = %@
    playerClients = %@
T@"_MRNowPlayingClientProtobuf",&,N
activePlayer
T@"_MRNowPlayingPlayerPathProtobuf",&,N,V_activePlayer
playerClients
AVAudioSessionMediaServicesWereResetNotification
MRGenericMessageSetNameKey
kMRMediaRemoteUpdatedContentItemsUserInfoKey
kMRMediaRemoteUpdatedNowPlayingIdentifiersInfoKey
kMRMediaRemoteUpdatedContentItemsDataUserInfoKey
custom:
void MRContentItemSetTitle(MRContentItemRef, CFStringRef)
/BuildRoot/Library/Caches/com.apple.xbs/Sources/MediaRemote_Sim/MediaRemote-4016.520.2/MediaRemote/Framework/BrowsableContent/MRContentItem.m
B12@?0@"_MRContentItemProtobuf"4^v8
void MRContentItemSetSubtitle(MRContentItemRef, CFStringRef)
void MRContentItemSetAlbumName(MRContentItemRef, CFStringRef)
void MRContentItemSetTrackArtistName(MRContentItemRef, CFStringRef)
void MRContentItemSetAlbumArtistName(MRContentItemRef, CFStringRef)
void MRContentItemSetSeriesName(MRContentItemRef, CFStringRef)
void MRContentItemSetDirectorName(MRContentItemRef, CFStringRef)
void MRContentItemSetComposer(MRContentItemRef, CFStringRef)
void MRContentItemSetGenre(MRContentItemRef, CFStringRef)
void MRContentItemSetLocalizedContentRating(MRContentItemRef, CFStringRef)
void MRContentItemSetArtworkIdentifier(MRContentItemRef, CFStringRef)
void MRContentItemSetArtworkMIMEType(MRContentItemRef, CFStringRef)
void MRContentItemSetArtworkURL(MRContentItemRef, CFStringRef)
void MRContentItemSetLyricsURL(MRContentItemRef, CFStringRef)
void MRContentItemSetRadioStationName(MRContentItemRef, CFStringRef)
void MRContentItemSetRadioStationString(MRContentItemRef, CFStringRef)
void MRContentItemSetCollectionIdentifier(MRContentItemRef, CFStringRef)
void MRContentItemSetContentIdentifier(MRContentItemRef, CFStringRef)
void MRContentItemSetServiceIdentifier(MRContentItemRef, CFStringRef)
void MRContentItemSetProfileIdentifier(MRContentItemRef, CFStringRef)
MRContentItemRef MRContentItemCreate(CFAllocatorRef, CFStringRef)
item:<%@
/CalculatedPlaybackPosition: %lf
/PlaybackRate: %lf
/ArtworkData: %@
void MRContentItemMerge(MRContentItemRef, MRContentItemRef)
Trying to Merge incompatible ContentItems %@ != %@
com.apple.mediaremote.contentItemQueue
<failed to decode userInfoData>
<failed to decode appMetricsData>
appMetrics
<failed to decode nowPlayingInfoData>
<failed to decode collectionInfoData>
collectionInfo
<failed to decode currentPlaybackDateData>
custom: currentPlaybackDate
<failed to decode deviceSpecificUserInfoData>
deviceSpecificUserInfo
<failed to decode artworkURLTemplatesData>
artworkURLTemplates
custom: delta
-[MRContentItemMetadata customDictionaryRepresentation]_block_invoke
custom: remainingTime
custom: calculatedElapsedTime
__playbackRate
assetURL
T@"NSURL",C,N
T@"NSDictionary",C,N
currentPlaybackDate
T@"NSDate",C,N
T@"NSArray",C,N,V_artworkURLTemplates
artwork
itemMetadata
T@"MRContentItemMetadata",R,N
hasCurrentLanguageOptions
hasAvailableLanguageOptions
kMRVirtualVoiceInputDeviceIDUserInfoKey
kMRVirtualVoiceInputRecordingStateUserInfoKey
kMRVirtualVoiceInputRecordingStateDidChangeNotification
com.apple.MRVVIClient
com.apple.GameController.gamecontrollerd
v16@?0@"NSNumber"4@"MRGameControllerDelayedEvent"8^B12
lastDownEvent
TQ,N,V_lastDownEvent
sendEventBlock
T@?,C,N,V_sendEventBlock
kMRGameControllerDaemonProxyInterrupted
kMRGameControllerDaemonProxyGameControllerDidChangeNotification
kMRGameControllerDaemonProxyGameControllerPropertiesUserInfoKey
/BuildRoot/Library/Caches/com.apple.xbs/Sources/MediaRemote_Sim/MediaRemote-4016.520.2/MediaRemote/Framework/Core/MRNowPlayingPlayerClient.m
Trying to instantiate an unresolved MRNowPlayingPlayerClient %@
f8@?0i4
@"NSNumber"4@?0
@"NSArray"4@?0
f12@?0@"NSNumber"4@"NSArray"8
v16@?0@"NSNumber"4@"NSArray"8^B12
-[MRNowPlayingPlayerClient addPendingRequest:]
-[MRNowPlayingPlayerClient addPendingRequest:]_block_invoke
Already contains a pending request matching this requestID
-[MRNowPlayingPlayerClient startCachingContentItemUpdatesForItem:forPendingRequest:]
v16@?0@"NSString"4@"NSMutableArray"8^B12
-[MRNowPlayingPlayerClient updatePlaybackQueueWithCachedUpdates:forPendingRequest:]
-[MRNowPlayingPlayerClient updatePlaybackQueueWithCachedUpdates:forPendingRequest:]_block_invoke
Cannot find a pending request matching this requestID
PlayerPath: %@ Supported Commands: %@ PlaybackQueue %@
    playerPath = %@
    supportedCommands = %@
    nowPlayingInfo = %@
    nowPlayingArtwork = %@
    playbackState = %@
    playbackStateDate= %@
    playbackQueue = %@
    capabilities = %ld
    coalescingInvalidations = %@
    coalescingRequests = %@
    triggerInvalidation = %@
    invalidatationTimestamp = %lf
    coelscingTransactionPackets = %@
    transactionSources = %@
    cachedContentItemUpdates = %@
T@"MRNowPlayingArtwork",&,N
invalidatationTimestamp
Td,N
T@"_MRPlaybackQueueProtobuf",&,N
TL,N
nowPlayingContentItem
T@"_MRContentItemProtobuf",R,N
hasReceivedCommandRecently
clientCallbacks
T@"MRNowPlayingPlayerClientCallbacks",R,N,V_clientCallbacks
/BuildRoot/Library/Caches/com.apple.xbs/Sources/MediaRemote_Sim/MediaRemote-4016.520.2/MediaRemote/Framework/ExternalDevice/MRProtocolClientConnection.m
Reply was deallocated
InputStream
OutputStream
Message Received From
Message Sent To
Message Purged For
SocketSetQoS
inputStream
T@"NSInputStream",R,N,V_inputStream
outputStream
T@"NSOutputStream",R,N,V_outputStream
T@"MRSupportedProtocolMessages",&,N,V_supportedMessages
streamsAreValid
T@"<MRProtocolClientConnectionDelegate>",W,N,V_delegate
/BuildRoot/Library/Caches/com.apple.xbs/Sources/MediaRemote_Sim/MediaRemote-4016.520.2/MediaRemote/Framework/Advanced Routing/Internal/MRAVConcreteEndpoint.m
Attempted to initialize an endpoint with an empty array of output devices
serialQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_serialQueue
T@"MRTransportExternalDevice",&,N
deviceIDsCount
T^I,R,N
T@"MRTextEditingAttributes",R,N
MRPlaybackQueueRequestRef MRPlaybackQueueRequestCopy(MRPlaybackQueueRequestRef)
/BuildRoot/Library/Caches/com.apple.xbs/Sources/MediaRemote_Sim/MediaRemote-4016.520.2/MediaRemote/Framework/NowPlaying/Playback Queue/MRPlaybackQueueRequest.m
MRPlaybackQueueRequestRef MRPlaybackQueueRequestCopyWithRange(MRPlaybackQueueRequestRef, CFRange)
MRPlaybackQueueRequestRef MRPlaybackQueueRequestCopyWithCurrentState(MRPlaybackQueueRequestRef, CFRange, CFArrayRef)
MRPlaybackQueueRequestRef MRPlaybackQueueRequestCreateMergedRequest(MRPlaybackQueueRequestRef, MRPlaybackQueueRequestRef)
void MRPlaybackQueueRequestSetIncludeInfo(MRPlaybackQueueRequestRef, _Bool)
void MRPlaybackQueueRequestSetIncludeLanguageOptions(MRPlaybackQueueRequestRef, _Bool)
void MRPlaybackQueueRequestSetIncludeArtwork(MRPlaybackQueueRequestRef, double, double)
CFStringRef MRPlaybackQueueRequestGetRequestID(MRPlaybackQueueRequestRef)
void MRPlaybackQueueRequestSetRequestID(MRPlaybackQueueRequestRef, CFStringRef)
CFStringRef MRPlaybackQueueRequestCopyDescription(MRPlaybackQueueRef)
Async 
/A%lfx%lf
/R[%d:%d]
/IDs (%ld): %@
void MRPlaybackQueueRequestSetLabel(MRPlaybackQueueRequestRef, CFStringRef)
CFStringRef MRPlaybackQueueRequestGetLabel(MRPlaybackQueueRequestRef)
CFArrayRef MRPlaybackQueueRequestGetRequestedIdentifiers(MRPlaybackQueueRequestRef)
CFRange MRPlaybackQueueRequestGetRange(MRPlaybackQueueRequestRef)
_Bool MRPlaybackQueueRequestRangeContainsNowPlayingItem(MRPlaybackQueueRequestRef)
_Bool MRPlaybackQueueRequestGetIncludeMetadata(MRPlaybackQueueRequestRef)
_Bool MRPlaybackQueueRequestGetIncludeLyrics(MRPlaybackQueueRequestRef)
_Bool MRPlaybackQueueRequestGetIncludeSections(MRPlaybackQueueRequestRef)
_Bool MRPlaybackQueueRequestGetIncludeInfo(MRPlaybackQueueRequestRef)
_Bool MRPlaybackQueueRequestGetIncludeLanguageOptions(MRPlaybackQueueRequestRef)
_Bool MRPlaybackQueueRequestGetIncludeArtwork(MRPlaybackQueueRequestRef)
double MRPlaybackQueueRequestGetArtworkWidth(MRPlaybackQueueRequestRef)
double MRPlaybackQueueRequestGetArtworkHeight(MRPlaybackQueueRequestRef)
_Bool MRPlaybackQueueRequestShouldRequestItem(MRPlaybackQueueRequestRef)
_Bool MRPlaybackQueueRequestShouldRequestItemNotConsideringMetadata(MRPlaybackQueueRequestRef)
_Bool MRPlaybackQueueRequestContainsNonDefaultAssets(MRPlaybackQueueRequestRef)
MRPlaybackQueueRequestRef MRPlaybackQueueRequestCreateSkeletonFrom(MRPlaybackQueueRequestRef)
CFDataRef MRPlaybackQueueRequestCreateExternalRepresentation(MRPlaybackQueueRequestRef)
_Bool MRPlaybackQueueRequestHasRange(MRPlaybackQueueRequestRef)
void MRPlaybackQueueRequestMerge(MRPlaybackQueueRequestRef, MRPlaybackQueueRequestRef)
BOOL MRPlaybackQueueRequestMatch(MRPlaybackQueueRequestRef, MRPlaybackQueueRequestRef)
BOOL MRPlaybackQueueRequestIsExactMatch(MRPlaybackQueueRequestRef, MRPlaybackQueueRequestRef)
MRMediaRemoteCachingPolicy MRPlaybackQueueRequestGetCachingPolicy(MRPlaybackQueueRequestRef)
void MRPlaybackQueueRequestSetCachingPolicy(MRPlaybackQueueRequestRef, MRMediaRemoteCachingPolicy)
void MRPlaybackQueueRequestSetIsLegacyNowPlayingInfoRequest(MRPlaybackQueueRequestRef, _Bool)
_Bool MRPlaybackQueueRequestGetIsLegacyNowPlayingInfoRequest(MRPlaybackQueueRequestRef)
MRPlaybackQueueRequestRef MRPlaybackQueueRequestCreateAssetsFrom(MRPlaybackQueueRequestRef)
public.jpeg
image/png
public.png
controller
T@"NSObject",&,N,V_controller
Ti,R,N,V_profile
Td,N,V_buttonAUpDelay
T@"<MREmulatedGameControllerDelegate>",W,N,V_delegate
userProvided
T@"NSString",&,N,V_lyrics
hasUserProvided
TB,N,V_userProvided
registeredToNowPlayingUpdates
TB,N,V_registeredToNowPlayingUpdates
registeredToVolumeUpdates
TB,N,V_registeredToVolumeUpdates
registeredKeyboardUpdates
TB,N,V_registeredKeyboardUpdates
registeredToOutputDeviceUpdates
TB,N,V_registeredToOutputDeviceUpdates
voiceRecordingState
TI,N,V_voiceRecordingState
cryptoSession
T@"MRCryptoPairingSession",&,N,V_cryptoSession
cryptoEnabled
TB,N,V_cryptoEnabled
allowEmptySelection
defaultLanguageOption
languageOptions
hasAllowEmptySelection
TB,N,V_allowEmptySelection
hasDefaultLanguageOption
T@"_MRLanguageOptionProtobuf",&,N,V_defaultLanguageOption
T@"NSMutableArray",&,N,V_languageOptions
hasDeviceID
TI,N,V_deviceID
hasRecordingState
Ti,N,V_recordingState
com.apple.MediaRemote.MRNowPlayingOriginClientManager
    originClients = %@
    originClientRequests = %@
-[MRNowPlayingOriginClientManager existingOriginClientForPlayerPath:]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/MediaRemote_Sim/MediaRemote-4016.520.2/MediaRemote/Framework/Core/MRNowPlayingOriginClientManager.m
-[MRNowPlayingOriginClientManager originClientForPlayerPath:]
-[MRNowPlayingOriginClientManager removeOrigin:]
-[MRNowPlayingOriginClientManager removeOriginRequests:]
-[MRNowPlayingOriginClientManager removeClient:]
MRNowPlayingPlayerPathGetClient((__bridge MRNowPlayingPlayerPathRef)playerPath)
MRNowPlayingPlayerPathGetOrigin((__bridge MRNowPlayingPlayerPathRef)playerPath)
-[MRNowPlayingOriginClientManager removePlayer:]
green
blue
alpha
hasRed
Tf,N,V_red
hasGreen
Tf,N,V_green
hasBlue
Tf,N,V_blue
hasAlpha
Tf,N,V_alpha
void _onClientQueue_MRInvokeClientCallback(MRNowPlayingPlayerClient *__strong, __strong MRPlaybackQueueDataSourceContentItemAssetCallback, _MRPlaybackQueueRequestProtobuf *__strong, _MRContentItemProtobuf *__strong, __strong dispatch_queue_t, __strong MRPlaybackQueueDataSourceContentItemAssetCallbackCompletion)
/BuildRoot/Library/Caches/com.apple.xbs/Sources/MediaRemote_Sim/MediaRemote-4016.520.2/MediaRemote/Framework/Service/MRPlaybackQueueServiceClient.m
void _onClientQueue_MRInvokeClientCallback(MRNowPlayingPlayerClient *__strong, __strong MRPlaybackQueueDataSourceContentItemAssetCallback, _MRPlaybackQueueRequestProtobuf *__strong, _MRContentItemProtobuf *__strong, __strong dispatch_queue_t, __strong MRPlaybackQueueDataSourceContentItemAssetCallbackCompletion)_block_invoke
PlaybackQueue request %@ for item %@ datasource callback completion was not called. This is a bug in client code
void _onQueue_MRInvokeClientCallbacks(MRNowPlayingPlayerClient *__strong, NSArray<MSVCallback *> *__strong, _MRPlaybackQueueRequestProtobuf *__strong, _MRContentItemProtobuf *__strong, _Bool, __strong dispatch_queue_t, __strong MRPlaybackQueueDataSourceContentItemAssetCallbackCompletion)
void MRInvokeClientCallbacks(MRNowPlayingPlayerClient *__strong, NSArray<MSVCallback *> *__strong, _MRPlaybackQueueRequestProtobuf *__strong, _MRContentItemProtobuf *__strong, _Bool, __strong dispatch_group_t)
group
void _onQueue_MRInvokeClientAssetCallbacks(MRNowPlayingPlayerClient *__strong, _MRPlaybackQueueRequestProtobuf *__strong, _MRContentItemProtobuf *__strong, __strong dispatch_group_t)
void MRInvokeClientAssetCallbacks(MRNowPlayingPlayerClient *__strong, _MRPlaybackQueueRequestProtobuf *__strong, _MRContentItemProtobuf *__strong, __strong dispatch_group_t)
NSArray<_MRContentItemProtobuf *> *_onClientQueue_MRCreateSectionsForRequest(MRNowPlayingPlayerClient *__strong, __strong MRPlaybackQueueDataSourceCreateChildContentItemCallback, _MRPlaybackQueueRequestProtobuf *__strong, _MRContentItemProtobuf *__strong)
NSArray<_MRContentItemProtobuf *> *_onQueue_MRCreateSectionsForRequest(MRNowPlayingPlayerClient *__strong, NSArray<MSVCallback *> *__strong, _MRPlaybackQueueRequestProtobuf *__strong, _MRContentItemProtobuf *__strong)
_MRPlaybackQueueProtobuf *_onQueue_MRCreatePlaybackQueueForRequest(_MRPlaybackQueueRequestProtobuf *__strong, NSArray<MSVCallback *> *__strong)
_MRPlaybackQueueProtobuf *_onClientQueue_MRCreatePlaybackQueueForOffset(CFRange, __strong MRPlaybackQueueDataSourceCreateContentItemCallback)
_MRPlaybackQueueProtobuf *_onQueue_MRCreatePlaybackQueueForOffset(_MRPlaybackQueueRequestProtobuf *__strong, NSArray<MSVCallback *> *__strong)
_MRPlaybackQueueProtobuf *_onQueue_MRCreatePlaybackQueueForIdentifier(_MRPlaybackQueueRequestProtobuf *__strong)
void _onQueue_MRLoadContentItemAssets(MRNowPlayingPlayerClient *__strong, _MRPlaybackQueueRequestProtobuf *__strong, NSArray<id> *__strong, __strong dispatch_group_t)
void _MRLoadContentItemAssets(MRNowPlayingPlayerClient *__strong, _MRPlaybackQueueRequestProtobuf *__strong, _MRPlaybackQueueProtobuf *__strong, NSError *__strong, __strong MRPlaybackQueueRequestCallbackCompletion)
void _onQueue_MRHandlePlaybackQueueRequest(MRNowPlayingPlayerClient *__strong, _MRNowPlayingPlayerPathProtobuf *__strong, _MRPlaybackQueueRequestProtobuf *__strong, __strong MRPlaybackQueueRequestCallbackCompletion)
void _MRHandlePlaybackQueueRequest(_MRNowPlayingPlayerPathProtobuf *__strong, _MRPlaybackQueueRequestProtobuf *__strong, __strong MRPlaybackQueueRequestTransactionCallbackCompletion)
void MRServiceClientPlaybackQueueRequestCallback(MRNowPlayingPlayerPathRef, MRPlaybackQueueRequestRef, __strong MRPlaybackQueueRequestTransactionCallbackCompletion)
void _onQueue_MRSendContentItemTransactionForPlayer(NSArray<_MRContentItemProtobuf *> *__strong, _MRPlaybackQueueRequestProtobuf *__strong, _MRNowPlayingPlayerPathProtobuf *__strong)
void _MRSendContentItemTransactionForPlayer(_MRPlaybackQueueProtobuf *__strong, _MRPlaybackQueueRequestProtobuf *__strong, _MRNowPlayingPlayerPathProtobuf *__strong)
void _onQueue_MRSendPlaybackQueueTransactionForPlayer(_MRPlaybackQueueProtobuf *__strong, _MRPlaybackQueueRequestProtobuf *__strong, _MRNowPlayingPlayerPathProtobuf *__strong)
void _MRSendPlaybackQueueTransactionForPlayer(_MRPlaybackQueueProtobuf *__strong, _MRPlaybackQueueRequestProtobuf *__strong, _MRNowPlayingPlayerPathProtobuf *__strong)
void MRServiceClientPlaybackQueueRequestWithTransactionCallback(MRNowPlayingPlayerPathRef, MRPlaybackQueueRequestRef, __strong MRPlaybackQueueRequestTransactionCallbackCompletion)
retrying
TB,R,N,GisRetrying
audioSessionType
hasAudioSessionType
Ti,N,V_audioSessionType
MRDiagnosticRef MRDiagnosticCreate(CFDateRef, CFStringRef)
/BuildRoot/Library/Caches/com.apple.xbs/Sources/MediaRemote_Sim/MediaRemote-4016.520.2/MediaRemote/Framework/Core/MRDiagnostic.m
date
TB,R,N,GisAbsolute,V_absolute
TB,R,N,GisIntegratedDisplay,V_integratedDisplay
screenSize
T(_MRHIDSize={?=ff}[2f]),R,N,V_screenSize
TB,D,N,GisAbsolute
TB,D,N,GisIntegratedDisplay
T(_MRHIDSize={?=ff}[2f]),D,N
kMRMediaRemoteApplicationDidReportPlaybackErrorNotification
kMRMediaRemotePlaybackErrorApplicationUserInfoKey
kMRMediaRemotePlaybackErrorUserInfoKey
kMRMediaRemotePlaybackErrorReasonUserInfoKey
_kMRMediaRemotePlaybackErrorDataUserInfoKey
com.apple.LegacyMusic
<%@ %p "%@" secure=%@>
T@"NSString",R,N,V_title
T@"NSString",R,N,V_prompt
T{_MRTextInputTraits=IIIII{?=ii}BB[10l]I},R,N,V_inputTraits
T{_MRTextInputTraits=IIIII{?=ii}BB[10l]I},D,N
<%@ %p text="%@", attribs=%@>
TI,R,N,V_uniqueIdentifier
T@"NSString",R,N,V_text
editing
TB,R,N,GisEditing,V_editing
T@"MRTextEditingAttributes",R,N,V_attributes
TB,D,N,GisEditing
T@"MRTextEditingAttributes",&,D,N
com.apple.MediaRemote.MRAVReconnaissanceSession
callbackSyncQueue
v20@?0@"NSArray"4@"NSArray"8@"MRAVEndpoint"12@"NSError"16
matchingOutputDeviceUIDsSet
T@"NSSet",&,N,V_matchingOutputDeviceUIDsSet
matchingOutputDeviceGroupID
T@"NSString",&,N,V_matchingOutputDeviceGroupID
discoverySession
T@"MRAVRoutingDiscoverySession",&,N,V_discoverySession
discoverySessionCallbackToken
T@,&,N,V_discoverySessionCallbackToken
T@?,C,N,V_callback
timeoutTimer
T@"NSObject<OS_dispatch_source>",&,N,V_timeoutTimer
T@"NSObject<OS_dispatch_queue>",&,N,V_callbackSyncQueue
searchInProgress
TB,N,V_searchInProgress
shouldWaitForUnanimousEndpoints
TB,N,V_shouldWaitForUnanimousEndpoints
matchingDevicesFound
T@"NSMutableSet",&,N,V_matchingDevicesFound
matchingEndpointsFound
T@"NSMutableArray",&,N,V_matchingEndpointsFound
unanimousEndpoint
T@"MRAVEndpoint",&,N,V_unanimousEndpoint
T@"NSArray",&,N,V_availableOutputDevices
T@"NSArray",&,N,V_availableEndpoints
updatesReceived
TQ,N,V_updatesReceived
lastProcessedOutputDevices
T@"NSArray",&,N,V_lastProcessedOutputDevices
lastProcessedEndpoints
T@"NSArray",&,N,V_lastProcessedEndpoints
matchingOutputDeviceUIDs
TI,R,N,V_endpointFeatures
useWeakMatching
TB,N,V_useWeakMatching
returnPartialResults
TB,N,V_returnPartialResults
matchingLogicalDeviceIDs
T@"NSArray",C,N,V_matchingLogicalDeviceIDs
motion
buttons
digitizer
hasMotion
T@"_MRGameControllerMotionProtobuf",&,N,V_motion
hasButtons
T@"_MRGameControllerButtonsProtobuf",&,N,V_buttons
hasDigitizer
T@"_MRGameControllerDigitizerProtobuf",&,N,V_digitizer
dataBlock
hasDataBlock
T@"_MRAudioDataBlockProtobuf",&,N,V_dataBlock
kMRMediaRemoteExternalScreenTypeDidChangeNotification
kMRMediaRemotePickableRoutesDidChangeNotification
kMRMediaRemoteRouteStatusDidChangeNotification
kMRMediaRemotePickedRouteVolumeDidChangeNotification
kMRMediaRemotePickedRouteVolumeControlAvailabilityDidChangeNotification
kMRMediaRemoteWillPresentRouteAuthenticationPromptNotification
_MPMediaRemotePickedRouteVolumeControlAvailabilityDidChangeNotification
_MPMediaRemotePickedRouteVolumeDidChangeNotification
kMRMediaRemoteRouteDescriptionUserInfoKey
kMRMediaRemoteExternalScreenTypeUserInfoKey
kMRMediaRemoteRouteStatusUserInfoKey
kMRMediaRemoteRouteIsLocalDeviceRouteKey
kMRMediaRemotePickedRouteVolumeUserInfoKey
kMRMediaRemotePickedRouteVolumeControlAvailabilityUserInfoKey
kMRMediaRemotePickedRouteVolumeControlCapabilitiesUserInfoKey
queue must be non-nil
handler must be non-nil
void MRMediaRemoteGetSavedAVRoutePassword(CFStringRef, __strong dispatch_queue_t, void (^__strong)(CFStringRef))
/BuildRoot/Library/Caches/com.apple.xbs/Sources/MediaRemote_Sim/MediaRemote-4016.520.2/MediaRemote/Framework/AirPlay/MRAVRouting.m
mediaPlaybackVolume
setMediaPlaybackVolume
adjustMediaPlaybackVolume
Disabled
Presence Scan
Infra-only Detailed Scan
Detailed Scan
IgnoreIncorrectPassword
resolvedPlayerPath
sendingPlaybackQueueTransaction
hasResolvedPlayerPath
T@"_MRNowPlayingPlayerPathProtobuf",&,N,V_resolvedPlayerPath
hasSendingPlaybackQueueTransaction
TB,N,V_sendingPlaybackQueueTransaction
hasImageData
T@"NSData",&,N,V_imageData
Td,N,V_time
%s.calloutQueue
com.apple.airplay.active
B16@?0@"AVOutputDevice"4I8^B12
AVOutputDeviceDiscoverySession
MRAVIOStreamOutputContextDidCloseCommunicationChannelNotification
/BuildRoot/Library/Caches/com.apple.xbs/Sources/MediaRemote_Sim/MediaRemote-4016.520.2/MediaRemote/Framework/Advanced Routing/Internal/MRAVIOStream.m
OutputContext already has a communication channel delegate
%@ is invalid. use %@
<%@:%p outputContext = %@>
T@"AVOutputContext",R,N,V_outputContext
MRAVIOStreamErrorDomain
Cannot open any type of comm channel for output devices %@
channel
channelIsOpen
TB,N,V_channelIsOpen
communicationChannel
T@"AVOutputContextCommunicationChannel",R,N,V_communicationChannel
channelOpen
TB,R,N,GisChannelOpen,V_channelOpen
AVOutputContextCommunicationChannelControlTypeDirect
AVOutputContextCommunicationChannelControlTypeRelayed
AVOutputContextCommunicationChannelOptionControlType
kMRApplicationActivityHasBegunNotification
kMRApplicationActivityHasEndedNotification
kMRApplicationActivityStatusDidChangeNotification
kMRApplicationActivityUserInfoKey
kMRApplicationActivityUserInfoDataKey
<%@ %p id=%@, primary=%@, secondary=%@, status=%@, creatorPID=%d>
primaryApplicationDisplayID
secondaryApplicationDisplayID
creatorProcessID
T@"NSUUID",R,N,V_uniqueIdentifier
T@"NSString",R,N,V_primaryApplicationDisplayID
T@"NSString",R,N,V_secondaryApplicationDisplayID
Ti,R,N,V_status
Ti,R,N,V_creatorProcessID
Initializing
hasDeviceDescriptor
T@"_MRVirtualTouchDeviceDescriptorProtobuf",&,N,V_deviceDescriptor
player
hasOrigin
T@"_MROriginProtobuf",&,N,V_origin
hasPlayer
T@"_MRNowPlayingPlayerProtobuf",&,N,V_player
gravity
userAcceleration
attitude
rotation
hasGravity
T@"_MRGameControllerAccelerationProtobuf",&,N,V_gravity
hasUserAcceleration
T@"_MRGameControllerAccelerationProtobuf",&,N,V_userAcceleration
hasAttitude
T@"_MRGameControllerAccelerationProtobuf",&,N,V_attitude
hasRotation
T@"_MRGameControllerAccelerationProtobuf",&,N,V_rotation
kMRMediaRemoteAvailableOriginsDidChangeNotification
kMRMediaRemoteActiveOriginDidChangeNotification
_MRMediaRemoteActiveOriginDidChangeNotification
kMRMediaRemoteOriginDidRegisterNotification
_MRMediaRemoteOriginDidRegisterNotification
kMRMediaRemoteOriginDidUnregisterNotification
_MRMediaRemoteOriginDidUnregisterNotification
kMRMediaRemoteOriginUserInfoKey
kMRMediaRemoteOriginDataUserInfoKey
MROriginRef MROriginCopy(MROriginRef)
/BuildRoot/Library/Caches/com.apple.xbs/Sources/MediaRemote_Sim/MediaRemote-4016.520.2/MediaRemote/Framework/Core/MROrigin.m
MROriginRef MROriginCreateSkeletonFrom(MROriginRef)
Boolean MROriginEqualToOrigin(MROriginRef, MROriginRef)
CFStringRef MROriginGetDisplayName(MROriginRef)
MROriginType MROriginGetOriginType(MROriginRef)
int32_t MROriginGetUniqueIdentifier(MROriginRef)
Boolean MROriginIsLocalOrigin(MROriginRef)
v12@?0C4@"_MROriginProtobuf"8
MRPairedDeviceRef MROriginGetDeviceInfo(MROriginRef)
CFDataRef _MROriginCreateExternalRepresentation(CFAllocatorRef, MROriginRef)
MROriginRef _MROriginCreateFromExternalRepresentation(CFAllocatorRef, CFDataRef)
%.1u
TI,N,V_type
characterCount
TI,N,V_characterCount
passcode
T@"NSString",C,N,V_passcode
MRProtocolMessageLogging
TB,N,V_shouldLog
<%@:%p, supportedFormats = %@, defaultFormat = %@>
T@"NSArray",R,N,V_supportedFormats
T@"NSDictionary",R,N,V_defaultFormat
T@"_MRVoiceInputDeviceDescriptorProtobuf",R,N
T@"NSArray",C,D,N
T@"NSDictionary",C,D,N
void MRVirtualVoiceInputDeviceDescriptorSetSupportedFormats(MRVirtualVoiceInputDeviceDescriptorRef, CFArrayRef)
/BuildRoot/Library/Caches/com.apple.xbs/Sources/MediaRemote_Sim/MediaRemote-4016.520.2/MediaRemote/Framework/VoiceInput/MRVirtualVoiceInputDeviceDescriptor.m
unsupported type
void MRVirtualVoiceInputDeviceDescriptorSetDefaultAudioFormat(MRVirtualVoiceInputDeviceDescriptorRef, CFDictionaryRef)
_MRVideoThumbnailRequestProtobuf
NSCopying
_MRPlaybackQueueRequestProtobuf
_MRGameControllerPropertiesMessageProtobuf
MRClientUpdatesConfigMessage
_MRLyricsEventProtobuf
_MRAudioDataBlockProtobuf
MRCoreUtilsSystemPairingSession
MRProtocolMessageQueue
MRMessageData
MRPendingMessageQueue
_MRSetNowPlayingPlayerMessageProtobuf
_MRGetVolumeControlCapabilitiesMessageProtobuf
MRModifyOutputContextRequestMessage
MRUpdateOutputDevicesMessage
MRRemoveOutputDevicesMessage
MRRemoveFromParentGroupMessage
MRAudioBuffer
_MRPromptForRouteAuthorizationMessageProtobuf
_MRSupportedCommandsProtobuf
MRSetStateMessage
MRSetReadyStateMessage
MRSetConnectionStateMessage
MRSetHiliteModeMessage
MRWakeDeviceMessage
MRSetNowPlayingClientMessage
MRSetNowPlayingPlayerMessage
MRRemoveClientMessage
MRRemovePlayerMessage
MRUpdateClientMessage
MRUpdatePlayerMessage
MRUpdateContentItemMessage
MRUpdateContentItemArtworkMessage
_MRSetStateMessageProtobuf
_MRLanguageOptionProtobuf
_MRNowPlayingInfoProtobuf
_MRAudioTimeProtobuf
_MRReceivedCommandProtobuf
MRGameControllerMessage
MRGameControllerPropertiesMessage
MRRegisterGameControllerMessage
MRRegisterGameControllerResponseMessage
MRUnregisterGameControllerMessage
MRRegisterForGameControllerEventsMessage
_MRGetKeyboardSessionProtobuf
_MRContentItemProtobuf
_MRReceivedCommandAppOptionsProtobuf
MRAVLocalEndpoint
NSSecureCoding
NSCoding
MROutputContextDataSourceDelegate
NSObject
_MRSetRecordingStateMessageProtobuf
_MRAVRouteQueryProtobuf
_MRGetVolumeResultMessageProtobuf
_MRVolumeControlCapabilitiesDidChangeMessageProtobuf
_MRSendVirtualTouchEventMessageProtobuf
MRAVOutputDevice
MRAVConcreteOutputDevice
MRAVDistantOutputDevice
MRAVLocalOutputDevice
MRAVDistantExternalDeviceMetadata
NSMutableCopying
MRAVMutableDistantExternalDeviceMetadata
MRAVDistantExternalDeviceServiceProtocol
MRAVDistantExternalDeviceClientProtocol
MRDistantExternalDevice
_MRContentItemMetadataProtobuf
c!T$!
_MRDiagnosticProtobuf
MRDeviceInfoMessage
MRDeviceInfoUpdateMessage
_MRSendCommandResultMessageProtobuf
MRMediaRemoteService
MRSetVolumeMessage
MRGetKeyboardSessionMessage
_MRGetStateMessageProtobuf
_MRVoiceInputDeviceDescriptorProtobuf
_MRAudioBufferProtobuf
_MRAVOutputDeviceSourceInfoProtobuf
MRAdditions
MRProtobufSerialization
_MRPlaybackQueueCapabilitiesProtobuf
MRGetVoiceInputDevicesMessage
MRGetVoiceInputDevicesResponseMessage
MRRegisterVoiceInputDeviceMessage
MRRegisterVoiceInputDeviceResponseMessage
MRSetRecordingStateMessage
MRSendVoiceInputMessage
MROutputContextDataSource
MRExternalOutputContextDataSource
MROutputContextController
MRAVBufferedInputStream
MRAVBufferedOutputStream
MRAVOutputContext
MRAVOutputContextModification
MRRegisterHIDDeviceResultMessage
MRTransactionMessage
MRExternalDeviceManager
_MRRemoveClientMessageProtobuf
_MRRemoveOutputDevicesMessageProtobuf
MRAVOutputDeviceSourceInfo
_MRCryptoPairingMessageProtobuf
_MRAVEndpointDescriptorProtobuf
MRWeakProxy
_MRPromptForRouteAuthorizationResponseMessageProtobuf
_MRGenericMessageProtobuf
_MRTextInputMessageProtobuf
MRTelevisionDevice
RTIInputSystemPayloadDelegate
MRGetVolumeMessage
MRGetVolumeResultMessage
MRVolumeDidChangeMessage
MRGetVolumeControlCapabilitiesMessage
MRGetVolumeControlCapabilitiesResultMessage
MRLegacyVolumeControlCapabilitiesDidChangeMessage
MRVolumeControlCapabilitiesDidChangeMessage
_MRVirtualTouchDeviceDescriptorProtobuf
_MRUpdateContentItemMessageProtobuf
MRAVEndpointObserver
MRCryptoPairingSession
MRAVDistantRoutingDiscoveryServiceProtocol
MRAVDistantRoutingDiscoveryClientProtocol
MRAVDistantRoutingDiscoverySession
MRExternalDevice
MRTransportExternalDevice
MRProtocolClientConnectionDelegate
_MRRemovePlayerMessageProtobuf
_MRSendLyricsEventMessageProtobuf
_MRVolumeControlAvailabilityProtobuf
_MRSendCommandMessageProtobuf
_MRSendHIDReportMessageProtobuf
MRSendCommandMessage
_MRTextEditingAttributesProtobuf
_MRClientUpdatesConfigurationProtobuf
MRExternalDeviceMessageMetrics
MRExternalDeviceMessageMetricsEntry
_MRUpdateContentItemArtworkMessageProtobuf
MRPromptForRouteAuthorizationMessage
MRPromptForRouteAuthorizationResponseMessage
MRPresentRouteAuthorizationStatusMessage
MRSendVirtualTouchEventMessage
MRSendPackedVirtualTouchEventMessage
_MRTransactionMessageProtobuf
MRSerializationAdditions
MRNowPlayingOriginClientRequests
MRNowPlayingClientState
MRNowPlayingClientRequests
_MRGameControllerDigitizerProtobuf
_MRAVModifyOutputContextRequestProtobuf
MRLegacySendHIDEventMessage
MRCoreUtilsPairingSession
MRMediaRemoteAdditions
MRCryptoPairingIdentity
MRVirtualVoiceInputDevice
_MRSetArtworkMessageProtobuf
MRXPCConnection
MRAudioDataBlock
MRMutableAudioDataBlock
MRExternalDevicePairingSession
MRMediaRemoteServiceClient
_MRLyricsTokenProtobuf
MRSendButtonEventMessage
MRAVDistantEndpoint
_MRSetHiliteModeMessageProtobuf
_MRCommandInfoProtobuf
_MRSendButtonEventMessageProtobuf
MRGetRemoteTextInputSessionMessage
_MROriginProtobuf
_MRKeyboardMessageProtobuf
MRPlaybackQueueRequestMessage
_MRAVOutputDeviceDescriptorProtobuf
_MRMediaRemoteMessageProtobuf
_MRRegisterVoiceInputDeviceMessageProtobuf
_MRVirtualTouchEventProtobuf
_MRRegisterGameControllerMessageProtobuf
_MRNowPlayingClientProtobuf
MRNotificationClient
MRNotification
MRUserSettings
_MRAVAirPlaySecuritySettingsProtobuf
_MRGameControllerPropertiesProtobuf
MRContentItemRequest
_MRSendPackedVirtualTouchEventMessageProtobuf
_MRAudioStreamPacketDescriptionProtobuf
MRExternalDeviceController
NSNetServiceBrowserDelegate
NSNetServiceDelegate
MRExternalDeviceTransport
MRNetServiceTransport
MRAVOutputContextTransport
_MRRegisterHIDDeviceResultMessageProtobuf
MRNotificationServiceClient
MRAVAdditions
_MRUpdatePlayerMessageProtobuf
_MRGameControllerAccelerationProtobuf
_MRVolumeDidChangeMessageProtobuf
_MRTelevisionControllerBlockCallback
MRTelevisionController
MRExternalDeviceControllerDelegate
_MRSetReadyStateMessageProtobuf
_MRRemoteTextInputMessageProtobuf
MRAVRoutingDiscoverySession
MRCompositeMessage
_MRTransactionPacketProtobuf
_MRPlaybackQueueContextProtobuf
_MRGetVolumeControlCapabilitiesResultMessageProtobuf
_MRSetConnectionStateMessageProtobuf
_MRGetRemoteTextInputSessionProtobuf
MRAVRoutingClientController
_MRAudioFormatSettingsProtobuf
_MRCommandOptionsProtobuf
MRSendCommandResultMessage
MRCryptoPairingSessionBlockDelegate
MRCryptoPairingSessionDelegate
_MRPresentRouteAuthorizationStatusMessageProtobuf
_MRGetVolumeMessageProtobuf
_MRNotificationMessageProtobuf
MRTransactionPacket
MRTransactionPacketAccumulator
MRTransactionPacketizer
MRTransactionSource
MRTransactionDestination
MRTransactionPacketAdditions
MRNotificationMessage
MRSetArtworkMessage
MRProtocolMessage
MRSupportedProtocolMessages
_MRUpdateClientMessageProtobuf
_MRTransactionPacketsProtobuf
_MRDeviceInfoMessageProtobuf
MRRegisterHIDDeviceMessage
MRSendLyricsEventMessage
MRLanguageOption
MRLanguageOptionGroup
_MRSendHIDEventMessageProtobuf
MRRemoteTextInputMessage
_MRTextInputTraitsProtobuf
MRNowPlayingPlayerClientCallbacks
MRNowPlayingPlayerPathInvalidationHandler
MRPlayerPathAdditions_Private
MRPlayerPathAdditions
_MRRegisterGameControllerResponseMessageProtobuf
MRAVEndpoint
MRPlaybackQueueSubscriptionController
MRPlaybackQueueClient
MRPlayerPathDictionaryKey
_MRRegisterForGameControllerEventsMessageProtobuf
_MRGameControllerButtonsProtobuf
MRNowPlayingPlayerClientRequests
MRNowPlayingArtwork
MRNowPlayingArtworkImage
MRNowPlayingOriginClient
MRNowPlayingClient
MRGenericMessage
MRContentItemMetadataAdditions
MRContentItemMetadata
MRContentItemAdditions
MRContentItem
MRVVIClient
MRGameControllerDaemonProxy
GameControllerDaemonListener
GameControllerDaemonControllerListener
GameControllerDaemonRequestListener
MRGameControllerDelayedEvents
MRGameControllerDelayedEvent
MRNowPlayingPlayerClient
MRTransactionSourceDelegate
MRProtocolClientConnection
NSStreamDelegate
MSVMessageParserDelegate
MRProtocolMessageQueueDelegate
MRProtocolMessageQueueDataSource
MRAVConcreteEndpoint
_MRGetVoiceInputDevicesResponseMessageProtobuf
MRKeyboardMessage
MRPlaybackQueueRequestAdditions
_MRWakeDeviceMessageProtobuf
MREmulatedGameController
_MRLyricsItemProtobuf
MRExternalClientConnection
MRTextInputMessage
_MRLanguageOptionGroupProtobuf
_MRSetVolumeMessageProtobuf
_MRVoiceInputDevice
MRNowPlayingOriginClientManager
_MRColorProtobuf
_MRRegisterVoiceInputDeviceResponseMessageProtobuf
_MRUpdateOutputDevicesMessageProtobuf
_MRSetNowPlayingClientMessageProtobuf
MRCryptoPairingMessage
_MRGetVoiceInputDevicesMessageProtobuf
_MRNowPlayingPlayerProtobuf
_MRUnregisterGameControllerMessageProtobuf
MRVirtualTouchDeviceDescriptor
MRMutableVirtualTouchDeviceDescriptor
MRTextEditingAttributes
MRMutableTextEditingAttributes
MRTextEditingSession
MRMutableTextEditingSession
MRAVReconnaissanceSession
MRAVReconnaissanceSessionAdditions
_MRGameControllerMessageProtobuf
_MRSendVoiceInputMessageProtobuf
_MRPlaybackQueueProtobuf
_MRVideoThumbnailProtobuf
MRAVConcreteRoutingDiscoverySession
MRAVInputStream
AVOutputContextCommunicationChannelDelegate
MRAVOutputStream
MRApplicationActivity
MRMutableApplicationActivity
_MRRegisterHIDDeviceMessageProtobuf
_MRTransactionKeyProtobuf
_MRNowPlayingPlayerPathProtobuf
_MRGameControllerMotionProtobuf
MROriginAdditions
MRPasscodeCredentials
MRProtocolMessageLogger
MRVirtualVoiceInputDeviceDescriptor
MRMutableVirtualVoiceInputDeviceDescriptor
@12@0:4^{_NSZone=}8
v8@0:4
I8@0:4
^d8@0:4
v16@0:4d8
d12@0:4I8
v16@0:4^d8I12
v12@0:4f8
v12@0:4B8
B8@0:4
@8@0:4
B12@0:4@8
v12@0:4@8
f8@0:4
{?="list"^d"count"I"size"I}
{?="thumbnailsHeight"b1"thumbnailsWidth"b1}
#8@0:4
v12@0:4i8
@12@0:4I8
i8@0:4
d8@0:4
@"NSMutableArray"
@"_MRPlaybackQueueContextProtobuf"
@"NSString"
@"_MRNowPlayingPlayerPathProtobuf"
{?="artworkHeight"b1"artworkWidth"b1"cachingPolicy"b1"length"b1"location"b1"includeInfo"b1"includeLanguageOptions"b1"includeLyrics"b1"includeMetadata"b1"includeSections"b1"isLegacyNowPlayingInfoRequest"b1"returnContentItemAssetsInUserCompletion"b1}
v16@0:4Q8
Q8@0:4
@"_MRGameControllerPropertiesProtobuf"
{?="controllerID"b1}
@28@0:4B8B12B16B20B24
@"_MRLyricsTokenProtobuf"
{?="endTime"b1"startTime"b1}
@"_MRAudioBufferProtobuf"
@"_MRAudioTimeProtobuf"
{?="gain"b1}
@12@0:4^{PairingSessionPrivate=}8
^{NSMutableDictionary=#}8@0:4
^v12@0:4@8
@12@0:4^v8
@12@0:4@8
v20@0:4@8@?12@16
@"NSObject<OS_dispatch_queue>"
@"<MRProtocolMessageQueueDataSource>"
@"<MRProtocolMessageQueueDelegate>"
@"MRPendingMessageQueue"
@"NSMutableDictionary"
@16@0:4@8@?12
@"NSData"
@"MRProtocolMessage"
@16@0:4I8@12
@24@0:4I8@12@16@20
@"NSArray"
@20@0:4@8L12L16
@"AVAudioCompressedBuffer"
@"NSDictionary"
@12@0:4i8
i12@0:4@8
@"_MRAVOutputDeviceDescriptorProtobuf"
{?="inputType"b1}
@12@0:4B8
@16@0:4@8@12
@"_MRNowPlayingInfoProtobuf"
@"_MRPlaybackQueueProtobuf"
@"_MRPlaybackQueueCapabilitiesProtobuf"
@"_MRPlaybackQueueRequestProtobuf"
@"_MRSupportedCommandsProtobuf"
{?="playbackStateTimestamp"b1"playbackState"b1}
{?="type"b1}
v16@0:4q8
q8@0:4
{?="duration"b1"elapsedTime"b1"radioStationIdentifier"b1"timestamp"b1"uniqueIdentifier"b1"playbackRate"b1"repeatMode"b1"shuffleMode"b1"isAdvertisement"b1"isAlwaysLive"b1"isExplicitTrack"b1"isMusicApp"b1}
{?="sampleRate"b1"timestamp"b1}
@"_MRReceivedCommandAppOptionsProtobuf"
@"_MRCommandOptionsProtobuf"
{?="destinationAppProcessID"b1"command"b1"originUID"b1}
@20@0:4@8Q12
@16@0:4Q8
@"_MRLyricsItemProtobuf"
@"_MRContentItemMetadataProtobuf"
{?="artworkDataHeight"b1"artworkDataWidth"b1}
{?="launchApplication"b1}
v12@0:4@"NSCoder"8
@12@0:4@"NSCoder"8
@12@0:4:8
@16@0:4:8@12
@20@0:4:8@12@16
B12@0:4#8
B12@0:4:8
Vv8@0:4
^{_NSZone=}8@0:4
B12@0:4@"Protocol"8
@"NSString"8@0:4
v16@0:4@8@12
v20@0:4@8@12f16
v20@0:4@8@12I16
v16@0:4@"MROutputContextDataSource"8@"MRAVOutputDevice"12
v20@0:4@"MROutputContextDataSource"8@"MRAVOutputDevice"12f16
v20@0:4@"MROutputContextDataSource"8@"MRAVOutputDevice"12I16
@16@0:4@8B12
l8@0:4
v20@0:4@8@12@?16
v24@0:4f8@12@16@?20
@"MRAVOutputContext"
@"MROutputContextController"
{?="state"b1}
{?="volume"b1}
@"_MRVolumeControlAvailabilityProtobuf"
@"_MRVirtualTouchEventProtobuf"
{?="virtualDeviceID"b1}
@"MRAVOutputDeviceSourceInfo"
@"MRAVEndpoint"
B16@0:4@8@12
@"AVOutputDevice"
@16@0:4^{_NSZone=}8#12
@"MRSupportedProtocolMessages"
@"_MRDeviceInfoMessageProtobuf"
v12@0:4I8
v12@0:4@?8
v16@0:4@8@?12
v20@0:4f8@12@?16
v28@0:4I8@12@16@20@?24
v20@0:4d8@?16
v20@0:4I8I12B16
v12@0:4@?<v@?@"MRAVDistantExternalDeviceMetadata"@"NSError">8
v12@0:4@?<v@?@"NSData"@"NSError">8
v12@0:4@?<v@?I@"NSError">8
v12@0:4@"NSError"8
v16@0:4@"NSString"8@?<v@?f@"NSError">12
v20@0:4f8@"NSString"12@?<v@?@"NSError">16
v16@0:4@"NSString"8@?<v@?I@"NSError">12
v28@0:4I8@"NSArray"12@"NSArray"16@"NSArray"20@?<v@?@"NSError">24
v16@0:4@"NSData"8@"NSString"12
v20@0:4d8@?<v@?@"NSError">16
v16@0:4I8@12
v20@0:4f8@12@16
v20@0:4I8@12@16
v16@0:4I8@"NSError"12
v12@0:4@"NSString"8
v20@0:4f8@"NSString"12@"NSString"16
v12@0:4@"MRAVDistantEndpoint"8
v20@0:4I8@"NSString"12@"NSString"16
v16@0:4@?8@12
v32@0:4I8@12@16@20@24@?28
v24@0:4d8@?16@20
v20@0:4{_MRHIDButtonEvent=IIB}8
@12@0:4@?8
@?8@0:4
@"MRAVDistantExternalDeviceMetadata"
@"NSXPCConnection"
@"_MROriginProtobuf"
{?="duration"b1"elapsedTime"b1"elapsedTimeTimestamp"b1"iTunesStoreAlbumIdentifier"b1"iTunesStoreArtistIdentifier"b1"iTunesStoreIdentifier"b1"iTunesStoreSubscriptionIdentifier"b1"inferredTimestamp"b1"legacyUniqueIdentifier"b1"radioStationIdentifier"b1"releaseDate"b1"startTime"b1"artworkDataHeightDeprecated"b1"artworkDataWidthDeprecated"b1"chapterCount"b1"defaultPlaybackRate"b1"discNumber"b1"downloadProgress"b1"downloadState"b1"editingStyleFlags"b1"episodeNumber"b1"episodeType"b1"mediaSubType"b1"mediaType"b1"numberOfSections"b1"playCount"b1"playbackProgress"b1"playbackRate"b1"playlistType"b1"radioStationType"b1"seasonNumber"b1"totalDiscCount"b1"totalTrackCount"b1"trackNumber"b1"artworkAvailable"b1"infoAvailable"b1"isAlwaysLive"b1"isContainer"b1"isCurrentlyPlaying"b1"isExplicitItem"b1"isInWishList"b1"isLiked"b1"isLoading"b1"isPlayable"b1"isSharable"b1"isSteerable"b1"isStreamingContent"b1"languageOptionsAvailable"b1"lyricsAvailable"b1}
{?="dateGenerated"b1}
^i8@0:4
i12@0:4I8
v16@0:4^i8I12
{?="list"^i"count"I"size"I}
{?="sendError"b1}
r^{?=^?^?^?^?^?^?^?^?^?^v}
r^{?=^v^?^?^?^?^?^?^?}
r^{?=^v^?^?^?}
r^{?=^v@?}
r^{?=^v^?}
@"MRXPCConnection"
@"NSObject<OS_xpc_object>"
@12@0:4f8
@16@0:4f8@12
@"_MRAudioFormatSettingsProtobuf"
{?="maximumPacketSize"b1"packetCapacity"b1"packetCount"b1}
{?="multipleBuiltInDevices"b1}
v12@0:4#8
{?="requestByIdentifiers"b1"requestByRange"b1"requestByRequest"b1}
@16@0:4@8l12
@"MRVirtualVoiceInputDeviceDescriptor"
@16@0:4I8l12
@32@0:4@8{?=dd}12f28
{?=dd}8@0:4
@"MRAudioDataBlock"
v16@0:4f8@12
@"<MROutputContextDataSourceDelegate>"
f12@0:4@8
I12@0:4@8
i16@0:4*8I12
B16@0:4^*8^I12
@"<NSStreamDelegate>"
@"NSRunLoop"
@"NSMutableData"
@16@0:4*8I12
@16@0:4@8I12
v24@0:4@8@12@16@?20
@"AVOutputContext"
@20@0:4I8@12@16
@"NSObject<OS_dispatch_source>"
@"MSVCallback"
@20@0:4l8Q12
@24@0:4Q8@16@20
@"NSPointerArray"
@"_MRNowPlayingClientProtobuf"
{?="state"b1"status"b1"isRetrying"b1"isUsingSystemPairing"b1}
{?="connectionType"b1"canModifyGroupMembership"b1"isLocalEndpoint"b1"isProxyGroupPlayer"b1}
@"Protocol"
{?="timestamp"b1"actionType"b1}
v12@0:4@"RTIDataPayload"8
v40@0:4{_MRHIDTouchEvent=(_MRHIDPoint={?=ff}[2f])IQI}8Q32
v12@0:4^{__IOHIDEvent=}8
v20@0:4@8Q12
v36@0:4I8@12{?=dd}16f32
v16@0:4@8I12
@"RTIInputSystemSourceSession"
@20@0:4f8@12@16
{?="screenSizeHeight"b1"screenSizeWidth"b1"absolute"b1"integratedDisplay"b1}
@"MRAVRoutingDiscoverySession"
v12@0:4l8
@16@0:4@8^@12
B12@0:4^@8
@"<MRCryptoPairingSessionDelegate>"
v16@0:4I8@?12
v12@0:4@?<v@?B@"NSError">8
v16@0:4I8@?<v@?@"NSError">12
v12@0:4@?<v@?@"NSArray"@"NSError">8
v12@0:4@"NSArray"8
v16@0:4@"MRProtocolClientConnection"8@"MRProtocolMessage"12
v12@0:4@"MRProtocolClientConnection"8
v16@0:4I8B12
v20@0:4^v8^v12@?16
v20@0:4I8I12@16
v24@0:4I8@12^v16@?20
@"CURunLoopThread"
@"NSDate"
@"NSObject<OS_os_transaction>"
@"MRExternalClientConnection"
@"_MRContentItemProtobuf"
@"MRExternalDeviceTransport"
@"_MRLyricsEventProtobuf"
{?="volumeCapabilities"b1"volumeControlAvailable"b1}
{?="command"b1}
@"_MRTextInputTraitsProtobuf"
{?="artworkUpdates"b1"keyboardUpdates"b1"nowPlayingUpdates"b1"outputDeviceUpdates"b1"volumeUpdates"b1}
@16@0:4@8i12
@"MRAVOutputDevice"
@40@0:4{_MRHIDTouchEvent=(_MRHIDPoint={?=ff}[2f])IQI}8Q32
{_MRHIDTouchEvent=(_MRHIDPoint={?=ff}[2f])IQI}8@0:4
@"_MRTransactionPacketsProtobuf"
{?="name"b1}
v20@0:4@?8Q12
@?16@0:4Q8
{?="timestamp"b1"x"b1"y"b1"touchDown"b1}
{?="outputContextType"b1}
@12@0:4^{__IOHIDEvent=}8
{_MRHIDButtonEvent=IIB}8@0:4
^{__IOHIDEvent=}
l12@0:4@8
l16@0:4d8
@"MRPasscodeCredentials"
^{PairingSessionPrivate=}
{?="context"^v"showSetupCode_f"^?"hideSetupCode_f"^?"promptForSetupCode_f"^?"copyIdentity_f"^?"findPeer_f"^?"savePeer_f"^?"resumeRequest_f"^?"resumeResponse_f"^?}
@20@0:4@8@12@16
@"MRAudioBuffer"
{?="timestamp"d"sampleRate"d}
v24@0:4{?=dd}8
v20@0:4I8B12@?16
@"MRCoreUtilsPairingSession"
@"MRCryptoPairingSessionBlockDelegate"
@"MRAVRoutingClientController"
@"MRNotificationServiceClient"
@"MRMediaRemoteService"
@"MRNotificationClient"
@20@0:4{_MRHIDButtonEvent=IIB}8
@"MRAVDistantOutputDevice"
@"MRDistantExternalDevice"
@"NSXPCListenerEndpoint"
{?="hiliteMode"b1}
^f8@0:4
f12@0:4I8
v16@0:4^f8I12
{?="list"^f"count"I"size"I}
{?="canScrub"b1"command"b1"maximumRating"b1"minimumRating"b1"numAvailableSkips"b1"preferredPlaybackRate"b1"presentationStyle"b1"repeatMode"b1"shuffleMode"b1"skipFrequency"b1"skipInterval"b1"upNextItemCount"b1"active"b1"enabled"b1"supportsSharedQueue"b1}
{?="usage"b1"usagePage"b1"buttonDown"b1}
{?="identifier"b1"type"b1}
@"_MRTextEditingAttributesProtobuf"
@"_MRAVOutputDeviceSourceInfoProtobuf"
{?="batteryLevel"b1"deviceSubType"b1"deviceType"b1"volume"b1"volumeCapabilities"b1"canAccessAppleMusic"b1"canAccessRemoteAssets"b1"canAccessiCloudMusicLibrary"b1"canFetchMediaDataFromSender"b1"canPlayEncryptedProgressiveDownloadAssets"b1"canRelayCommunicationChannel"b1"groupContainsGroupLeader"b1"isAddedToHomeKit"b1"isAirPlayReceiverSessionActive"b1"isDeviceGroupable"b1"isGroupLeader"b1"isGroupable"b1"isLocalDevice"b1"isProxyGroupPlayer"b1"isRemoteControllable"b1"isVolumeControlAvailable"b1"parentGroupContainsDiscoverableLeader"b1"presentsOptimizedUserInterfaceWhenPlayingFetchedAudioOnlyAssets"b1"requiresAuthorization"b1"shouldForceRemoteControlabillity"b1"supportsBufferedAirPlay"b1"supportsExternalScreen"b1}
@"_MRClientUpdatesConfigurationProtobuf"
@"_MRSetConnectionStateMessageProtobuf"
@"_MRCryptoPairingMessageProtobuf"
@"_MRGameControllerMessageProtobuf"
@"_MRGameControllerPropertiesMessageProtobuf"
@"_MRGenericMessageProtobuf"
@"_MRGetKeyboardSessionProtobuf"
@"_MRGetRemoteTextInputSessionProtobuf"
@"_MRGetStateMessageProtobuf"
@"_MRGetVoiceInputDevicesMessageProtobuf"
@"_MRGetVoiceInputDevicesResponseMessageProtobuf"
@"_MRGetVolumeControlCapabilitiesMessageProtobuf"
@"_MRGetVolumeControlCapabilitiesResultMessageProtobuf"
@"_MRGetVolumeMessageProtobuf"
@"_MRGetVolumeResultMessageProtobuf"
@"_MRKeyboardMessageProtobuf"
@"_MRAVModifyOutputContextRequestProtobuf"
@"_MRNotificationMessageProtobuf"
@"_MRPresentRouteAuthorizationStatusMessageProtobuf"
@"_MRPromptForRouteAuthorizationMessageProtobuf"
@"_MRPromptForRouteAuthorizationResponseMessageProtobuf"
@"_MRSetReadyStateMessageProtobuf"
@"_MRRegisterForGameControllerEventsMessageProtobuf"
@"_MRRegisterGameControllerMessageProtobuf"
@"_MRRegisterGameControllerResponseMessageProtobuf"
@"_MRRegisterHIDDeviceMessageProtobuf"
@"_MRRegisterHIDDeviceResultMessageProtobuf"
@"_MRRegisterVoiceInputDeviceMessageProtobuf"
@"_MRRegisterVoiceInputDeviceResponseMessageProtobuf"
@"_MRRemoteTextInputMessageProtobuf"
@"_MRRemoveClientMessageProtobuf"
@"_MRRemoveOutputDevicesMessageProtobuf"
@"_MRRemovePlayerMessageProtobuf"
@"_MRSendButtonEventMessageProtobuf"
@"_MRSendCommandMessageProtobuf"
@"_MRSendCommandResultMessageProtobuf"
@"_MRSendHIDEventMessageProtobuf"
@"_MRSendHIDReportMessageProtobuf"
@"_MRSendLyricsEventMessageProtobuf"
@"_MRSendPackedVirtualTouchEventMessageProtobuf"
@"_MRSendVirtualTouchEventMessageProtobuf"
@"_MRSendVoiceInputMessageProtobuf"
@"_MRSetArtworkMessageProtobuf"
@"_MRSetHiliteModeMessageProtobuf"
@"_MRSetNowPlayingClientMessageProtobuf"
@"_MRSetNowPlayingPlayerMessageProtobuf"
@"_MRSetRecordingStateMessageProtobuf"
@"_MRSetStateMessageProtobuf"
@"_MRSetVolumeMessageProtobuf"
@"_MRTextInputMessageProtobuf"
@"_MRTransactionMessageProtobuf"
@"_MRUnregisterGameControllerMessageProtobuf"
@"_MRUpdateClientMessageProtobuf"
@"_MRUpdateContentItemArtworkMessageProtobuf"
@"_MRUpdateContentItemMessageProtobuf"
@"_MRUpdateOutputDevicesMessageProtobuf"
@"_MRUpdatePlayerMessageProtobuf"
@"_MRVolumeControlCapabilitiesDidChangeMessageProtobuf"
@"_MRVolumeDidChangeMessageProtobuf"
@"_MRWakeDeviceMessageProtobuf"
{?="timestamp"b1"errorCode"b1"type"b1}
@"_MRVoiceInputDeviceDescriptorProtobuf"
{?="x"b1"y"b1"finger"b1"phase"b1}
@"_MRColorProtobuf"
{?="nowPlayingVisibility"b1"processIdentifier"b1"processUserIdentifier"b1"isEmptyDeprecated"b1}
v16@0:4@8B12
v20@0:4@8@12@16
B20@0:4@8@12@16
B24@0:4@8@12@16@?20
@"NSOrderedSet"
B16@0:4@8B12
d20@0:4@8d12
i16@0:4@8i12
@"NSUserDefaults"
{?="securityType"b1}
{?="buttonAUpDelay"b1"playerIndex"b1"profile"b1"supportsExtendedMotion"b1}
{?="startOffset"b1"dataByteSize"b1"variableFramesInPacket"b1}
v20@0:4@8@12B16
v12@0:4@"NSNetServiceBrowser"8
v16@0:4@"NSNetServiceBrowser"8@"NSDictionary"12
v20@0:4@"NSNetServiceBrowser"8@"NSString"12B16
v20@0:4@"NSNetServiceBrowser"8@"NSNetService"12B16
v12@0:4@"NSNetService"8
v16@0:4@"NSNetService"8@"NSDictionary"12
v16@0:4@"NSNetService"8@"NSData"12
v20@0:4@"NSNetService"8@"NSInputStream"12@"NSOutputStream"16
@"NSNetServiceBrowser"
@"NSMutableSet"
@"<MRExternalDeviceControllerDelegate>"
B16@0:4^@8^@12
@"NSNetService"
@20@0:4@8@12l16
@"NSError"
@"MRAVInputStream"
@"MRAVOutputStream"
{?="deviceIdentifier"b1"errorCode"b1}
v24@0:4@8@12@16@20
@"MRMediaRemoteServiceClient"
{?="w"b1"x"b1"y"b1"z"b1}
@16@0:4@?8@12
v16@0:4@"MRExternalDeviceController"8@"MRTransportExternalDevice"12
@"_MRTelevisionControllerBlockCallback"
{?="timestamp"b1"version"b1}
^{NSMutableDictionary=#}
@"_MRTransactionKeyProtobuf"
{?="totalLength"b1"totalWritePosition"b1}
{?="playbackPosition"b1"radioStationID"b1"trackID"b1"playbackQueueDestinationOffset"b1"playbackQueueInsertionPosition"b1"playbackQueueOffset"b1"playbackRate"b1"rating"b1"repeatMode"b1"replaceIntent"b1"sendOptions"b1"shuffleMode"b1"skipInterval"b1"externalPlayerCommand"b1"negative"b1"requestDefermentToPlaybackQueuePosition"b1"shouldBeginRadioPlayback"b1"shouldOverrideManuallyCuratedQueue"b1}
@20@0:4@8I12@16
v24@0:4@8d12@?20
v16@0:4@"MRCryptoPairingSession"8@"NSData"12
v16@0:4@"MRCryptoPairingSession"8@"NSString"12
v12@0:4@"MRCryptoPairingSession"8
v24@0:4@"MRCryptoPairingSession"8d12@?<v@?@"NSString">20
v16@0:4@"MRCryptoPairingSession"8@"NSError"12
{?="status"b1}
@16@0:4@8^{_MRTransactionKeyProtobuf=#@@}12
^{_MRTransactionKeyProtobuf=#@@}8@0:4
^{_MRTransactionKeyProtobuf=#@@}
@"NSMutableOrderedSet"
v20@0:4@8I12@?16
@28@0:4Q8@16@20@24
@"MRTransactionPacketizer"
@"<MRTransactionSourceDelegate>"
@20@0:4Q8@16
@"MSVMultiCallback"
@"PBCodable"
@"MRProtocolClientConnection"
B12@0:4I8
{?="protocolVersion"b1"deviceClass"b1"lastSupportedMessageType"b1"logicalDeviceCount"b1"sharedQueueVersion"b1"allowsPairing"b1"connected"b1"isAirplayActive"b1"isGroupLeader"b1"isProxyGroupPlayer"b1"supportsACL"b1"supportsExtendedMotion"b1"supportsSharedQueue"b1"supportsSystemPairing"b1"tightlySyncedGroup"b1}
@"MRVirtualTouchDeviceDescriptor"
^Q8@0:4
Q12@0:4I8
v16@0:4^Q8I12
{?="list"^Q"count"I"size"I}
{?="validTextRangeLength"b1"validTextRangeLocation"b1"autocapitalizationType"b1"keyboardType"b1"returnKeyType"b1"autocorrection"b1"enablesReturnKeyAutomatically"b1"secureTextEntry"b1"spellchecking"b1}
L8@0:4
@20@0:4@8@12@?16
v28@0:4@8@12@16@?20@?24
v28@0:4@8@12@16@20@?24
@"NSOperationQueue"
@"NSTimer"
@12@0:4l8
@12@0:4^{NSString=#}8
@"MSVMutableBidirectionalDictionary"
{?="inputModeFlags"b1}
{?="a"b1"b"b1"dPadX"b1"dPadY"b1"leftShoulder"b1"leftThumbstickX"b1"leftThumbstickY"b1"leftTrigger"b1"pause"b1"rightShoulder"b1"rightThumbstickX"b1"rightThumbstickY"b1"rightTrigger"b1"x"b1"y"b1}
v20@0:4Q8@16
@"MRPlaybackQueueSubscriptionController"
@"MRApplicationActivity"
@"NSURL"
v16@0:4@?8I12
^{NSObject=#}12@0:4@8
v12@0:4^{NSObject=#}8
v28@0:4I8f12i16d20
v20@0:4I8f12i16
v32@0:4I8f12f16Q20B28
v32@0:4I8f12f16f20f24i28
B28@0:4I8f12i16d20
v28@0:4f8f12Q16B24
@"MRGameControllerDelayedEvents"
@20@0:4Q8i16
v20@0:4Q8i16
v12@0:4@"MRTransactionSource"8
v12@0:4L8
@"MRNowPlayingArtwork"
@"MRNowPlayingPlayerClientCallbacks"
v16@0:4@"NSStream"8I12
v16@0:4@"MSVMessageParser"8@"NSData"12
I20@0:4@8@12i16
I20@0:4@"MRProtocolMessageQueue"8@"NSData"12i16
v16@0:4@"MRProtocolMessageQueue"8@"MRProtocolMessage"12
@"NSData"16@0:4@"MRProtocolMessageQueue"8@"MRProtocolMessage"12
v28@0:4@8d12@20@?24
@"MSVMessageParser"
@"MRProtocolMessageQueue"
@"NSInputStream"
@"NSOutputStream"
@"<MRProtocolClientConnectionDelegate>"
@"MRTransportExternalDevice"
^I8@0:4
I12@0:4I8
v16@0:4^I8I12
{?="list"^I"count"I"size"I}
{?="errorCode"b1}
@"MRTextEditingAttributes"
^{NSObject=#}8@0:4
@"MRGameControllerDaemonProxy"
@"<MREmulatedGameControllerDelegate>"
^{NSObject=#}
{?="userProvided"b1}
@"MRCryptoPairingSession"
@"_MRLanguageOptionProtobuf"
{?="allowEmptySelection"b1}
{?="deviceID"b1"recordingState"b1}
{?="alpha"b1"blue"b1"green"b1"red"b1}
{?="deviceID"b1"errorCode"b1}
@28@0:4@8l12B16B20I24
{?="audioSessionType"b1}
(_MRHIDSize={?=ff}[2f])8@0:4
(_MRHIDSize=""{?="width"f"height"f}"data"[2f])
v16@0:4(_MRHIDSize={?=ff}[2f])8
{_MRTextInputTraits=IIIII{?=ii}BB[10l]I}8@0:4
{_MRTextInputTraits="autocapitalizationType"I"autocorrectionType"I"spellcheckingType"I"keyboardType"I"returnKeyType"I"validTextRange"{?="location"i"length"i}"enablesReturnKeyAutomatically"B"secureTextEntry"B"PINEntrySeparatorIndexes"[10l]"PINEntrySeparatorIndexesCount"I}
v84@0:4{_MRTextInputTraits=IIIII{?=ii}BB[10l]I}8
@20@0:4@8@12I16
@"NSSet"
@"_MRGameControllerButtonsProtobuf"
@"_MRGameControllerDigitizerProtobuf"
@"_MRGameControllerMotionProtobuf"
@"_MRAudioDataBlockProtobuf"
{?="location"b1"sendingPlaybackQueueTransaction"b1}
{?="time"b1}
@"AVOutputDeviceDiscoverySession"
v12@0:4@"AVOutputContext"8
v20@0:4@"AVOutputContext"8@"NSData"12@"AVOutputContextCommunicationChannel"16
v16@0:4@"AVOutputContext"8@"AVOutputContextCommunicationChannel"12
i16@0:4r*8I12
@"AVOutputContextCommunicationChannel"
@"NSUUID"
@"_MRVirtualTouchDeviceDescriptorProtobuf"
@"_MRNowPlayingPlayerProtobuf"
@"_MRGameControllerAccelerationProtobuf"
[CryptoPairingSession(CoreUtils-System)] Pairing Device %@
[CryptoPairingSession(CoreUtils-System)] Unpairing Device %@
[CryptoPairingSession(CoreUtils-System)] Pairing Manager not available due to lacking entitlements
WARNING: Unexpected type for now playing key %{public}@ (is %{public}@, should be %{public}@). Removing from now playing info dictionary.
Request: %{public}@ %{public}@ for %{public}@
Response: %{public}@ %{public}@ returned <%{public}@> with error <%{public}@> for %{public}@ in %.4lf seconds
Request: %{public}@ %{public}@ for %{public}@ is short-circuiting because local
Failed to get device info for local silent primary state.
Completed recon session: %{public}@
[MRAVLocalEndpoint] Local endpoint %{public}@ is reloading output devices from context %{public}@
[AVOutputDevice] Setting %{public}@(%{public}@) volume to %lf
Hosted external device connection invalidated.
Hosted external device connection interrupted.
Distant external device %{public}@ failed to fetch connection state: %{public}@
Distant external device %{public}@ failed to fetch custom origin data: %{public}@
Attempted to call -connect on a distant external device that is no longer valid: %{public}@
Client called disconnect on shared connection, ignoring...
Hosted external device connection for distant device %{public}@ state did change to %{public}@ with error %{public}@
Hosted external device connection for distant device %{public}@ name did change to "%{public}@"
Hosted external device connection for distant device %{public}@ did receive %llu bytes of custom data for name %{public}@
Hosted external device connection for distant device %{public}@ volume did change to %f for endpoint with ID %{public}@ for output device with ID %{public}@
Loading external device metadata for distant external device %{public}@
Distant external device %{public}@ failed to load external device metadata: %{public}@
No client-side XPC message destination routed for message with ID %lu.
MediaRemote server disconnected.
Warning: Tried to stop a service that isn't running.
Setting television endpoint
Setting %lu supported commands %@ for path %{public}@
Setting playbackQueueCapabilities %ld for PlayerPath %@
Setting nowPlayingClient %{public}@
Removing client %{public}@
Removing nowPlayingPlayer %{public}@ 
Didn't receive any pickable routes from the reply.
Error while requesting to load browsable content: %@
Client XPC message with ID %lu not handled.
No client module registered to receive message: %@
Could not parse notification from xpc message
Client-side browsable content message with ID %lu not handled.
No browsable content endpoint registered to receive message: %@
WARNING: Client endpoint returned nil when requesting now playing identifiers
Client endpoint returned nil when requesting child content items.
Voice recording client message %lu not handled
No voice recording endpoint registered to receive message: %@
Television client message %lu not handled
No television endpoint registered to receive message: %@
No callback for television custom data
Agent client message %lu not handled
No agent endpoint registered to receive message: %@
Reestasblishing recording endpoint.
Reestasblishing television endpoint.
Reestasblishing agent endpoint.
MediaRemote reply error: %s
Encountered unknown protobuf key (%@) while converting to a dictionary; skipping.
[MROutputContextDataSource] OutputDevice %{public}@ (%{public}@) added to outputContext %{public}@
[MROutputContextDataSource] OutputDevice %{public}@ (%{public}@) removed from outputContext %{public}@
[MROutputContextDataSource] OutputDevice %{public}@ (%{public}@) OutputContext %{public}@ volume changed to %f
[MROutputContextDataSource] Endpoint %{public}@ volume changed to %f
[MROutputContextDataSource] OutputDevice %{public}@ (%{public}@) OutputContext %{public}@ volume control capabilities changed to %{public}@
[MROutputContextDataSource] Endpoint %{public}@ volume control capabilities changed to %{public}@
[MROutputContextDataSource] Attempting to get volume on outputDevice %{public}@ with error %{public}@
[MROutputContextDataSource] Attempting to get master volume with error %{public}@
[MROutputContextDataSource] Attempting to get capabilities on outputDevice %{public}@ with error %{public}@
[MROutputContextDataSource] Attempting to get master volume capabilities with error %{public}@
[MROutputContextDataSource] Setting volume to %f for %{public}@ %{public}@
[MROutputContextDataSource] Attempting to set volume on outputDevice %{public}@ with error %{public}@
[MROutputContextDataSource] Attempting to set master volume with error %{public}@
[MROutputContextDataSource] Set Local Volume <%f>
[MROutputContextDataSource] Set Local Volume Control Capabilities <%@>
[MROutputContextDataSource] Initializing volume with %f
[MROutputContextDataSource] Initializing volume control capabilities with %@
[AVOutputContext] WARNING: AVF context unavailable for %{public}s
[AVOutputContext] WARNING: AVF context unavailable for %{public}@
[AVOutputContext] Requesting to set output device(s) %{public}@ on context: %{public}@
[AVOutputContext] Missing entitlement needed to modify output context. Operation will likley not work. <%@>
[AVOutputContext] Requesting to add output device(s) %{public}@ to context: %{public}@
[AVOutputContext] One or more devices are not groupable, cannot add output devices to context: %{public}@
[AVOutputContext] Requesting to remove output device(s) %{public}@ from context: %{public}@
[AVOutputContext] Requesting to remove all output devices from context: %{public}@
[AVOutputContext] Setting %{public}@ volume to %f
[AVOutputContext] Received output device did change notification: %{public}@ for context: %{public}@
[AVOutputContext] Updated output device (context=%p): %{public}@
[AVOutputContext] Received output devices did change notification: %{public}@ for context: %{public}@
[AVOutputContext] Updated output devices (context=%p): %{public}@
[AVOutputContext] Received discovery session output devices did change notification: %{public}@ for context: %{public}@
[AVOutputContext] Updated discovery session output devices (context=%p): %{public}@
[AVOutputContext] Received output context change initiated notification: %{public}@ for context: %{public}@
[AVOutputContext] Updating output devices to (context=%p): %{public}@
[AVOutputContext] Existing devices in context %{public}@ : %{public}@
[AVOutputContext] Will pause now playing app and set presentation context devices to system audio context devices.
[AVOutputContext] Missing entitlement or empty audio context , output context will be set to empty.
[AVOutputContext] Setting %llu output devices on context: %{public}@
[AVOutputContext] Output context modification failed. Output context doesn't support multiple devices: %{public}@
[AVOutputContext] Output context modification failed. Attempted to group multiple devices where at least one is not groupable on context: %{public}@
[AVOutputContext] Notifying clients that output device did change for context: %{public}@
[AVOutputContext] Notifying clients that output devices did change for context: %{public}@
[AVOutputContext] WARNING: AVF context unavailable for %s
Unknown MRGameControllerEventType: %ld
Received Register HID Device result with error %{public}@ and identifier: %@
Error registering HID device. %{public}@
Error fetching text editing session. %{public}@
Received Register Game Controller response with controllerID: %llu
Error registering Game Controller device. %{public}@
Connection error while sending voice input data. %{public}@
Connection error while sending wake message. %{public}@
Error sending text input message. %{public}@
Calling Client Registered Game Controller Input Mode Callback: %ld
Calling Client Registered Game Controller Properties Callback
Calling Client Registered Recording State Callback: %ld
Calling Client Registered Text Input Callback: %ld
Calling Client Registered hilite mode Callback with %@
Unknown callback event for keyboard message: %{public}@
Calling Client Registered Remote Text Input Callback
WHAPRO: Sending %@ Command with Timestamp: %@
WHAPRO: SetPlaybackQueue took %f seconds
Command %{public}@ missing source position option(s): %{public}@ | %{public}@ | %{public}@
Command %{public}@ missing source position option(s): %{public}@ | %{public}@
Command %{public}@ missing source position option(s): %{public}@
Command %{public}@ sender sepecified %@ = %@ which is no longer the now playing item.
Command %{public}@ sender sepecified %@ = %@. Now Playing Item = %@. Ignoring command
Got elapsed time change.
Registered for elapsed time changes.
Unregistered for elapsed time changes.
Got playback speed change.
Registered for playback speed changes.
Unregistered for playback speed changes.
Got repeat mode change.
Registered for repeat mode changes.
Unregistered for repeat mode changes
Got shuffle mode change.
Registered for shuffle mode changes.
Unregistered for shuffle mode changes
[MRAVEndpointObserver] Begin Observing %@
[MRAVEndpointObserver] End Observing %@
[MRAVEndpointObserver] Endpoint for outputDevice <%@> changed from <%@> (<%{public}@>) to <%@> (<%{public}@>)
[DistantDiscoverySession] Failed to retrieve endpoint availability state: %{public}@
[DistantDiscoverySession] Hosted routing connection invalidated, attemping to reconnect...
[DistantDiscoverySession] Hosted routing connection interrupted, invalidating...
[DistantDiscoverySession] Reloading discovery mode for distant session %{public}@ to %{public}@
[DistantDiscoverySession] Error setting discovery mode on hosted routing session. %{public}@
[DistantDiscoverySession] Error fetching distant endpoints from hosted routing session: %{public}@
[DistantDiscoverySession] Error fetching distant output devices from hosted routing session: %{public}@
WHAPRO: ConnectionState changed from %@ to %@ in %f seconds
Failed to initialize IO streams using transport: %{public}@
Error loading device info for device %{public}@. %{public}@
Error opening security session for device %{public}@. %{public}@
Failed to register custom origin for device %{public}@. %{public}@
Skipping custom origin registration for device %{public}@ because one is already registered: %{public}@
Exiting connection attempt due to disconnection request for %@{public}. %{public}@
Connection requested to device %{public}@...
Connect called on device %{public}@ with authentication prompt option set when it wasn't set before. Forcing reconnect on failure...
Attempting to connect to device %@ but we are already in connection state %{public}@. Ignoring connection attempt...
Connecting to device %{public}@...
Device disconnect called with error: %{public}@ for external device: %{public}@
Attempting to reconnect to external device %{public}@ (retry %llu out of %llu)
Not attempting reconnect of external device %{public}@ (error = %{public}@, recovery behavior = %{public}s, attempt count = %llu)
Connection error while sending custom data message. %{public}@
Connection error while sending ping message. %{public}@
Error setting volume %@
Error getting volume %@
Error getting volume control capablities %@
Error getting removing from parent group %@
Unknown message attempting to be handled
External device server disconnected: %{public}@
Requesting IO streams from transport %{public}@ with options %{public}@
Transport successfully created IO streams. input: %{public}@ output:%{public}@
Transport failed creating IO streams. input: %{public}@ output:%{public}@ error:%{public}@
initializeConnection for %{public}@ took %f seconds
Registering custom origin ID %u "%{public}@"...
Successfully registered custom origin: %@
Failed to register custom origin.
Received device info: %{public}@
Error fetching device info
Error fetching device info. %{public}@
LoadDeviceInfo for %{public}@ took %f seconds
No Connection for data exchange callback.
Session mismatch for data exchange callback %@ %@
No Connection for prompt setup callback
Session mismatch for prompt setup callback %@ %@
Pairing session locked out for %lf
No Connection for exchange complete callback.
Error with pairing session exchange. %@ %{public}@
Opening cryptography session %{public}@...
OpenSecuritySession for %{public}@ took %f seconds
WHAPRO: SyncClientState for %{public}@ took %f seconds
External device stream cleanup called for device %{public}@ with reason: %{public}@
External device cleanup called for device %{public}@ with reason: %{public}@
Connection error while sending begin lyrics event message. %{public}@
<%{public}@> connectionState changed from %{public}@ to %{public}@ with error: %{public}@
<%{public}@> Calling pairingCallback
Calling Client Registered Pairing Callback
Calling Client Registered Name Callback with %@
Calling Client Registered pairing allowed Callback with %@
Calling Client Registered custom data Callback
<%{public}@> Volume did change to %lf for outputDevice: <%{public}@>
Received command %{public}@ for path %{public}@
Processing %lld bytes of crypto pairing data
Failed to handle crypto pairing data. %@
Handling pairing failure with OSStatus = %d
ERROR: Received crypto pairing message without an active pairing session
deviceInfo changed to %@
Decode Error: could not decode %{public}@
Encode Error: could not encode %{public}@
Removing %{public}@ for key %{public}@ for notification user info
[CryptoPairingSession(CoreUtils)] Failed to handle pairing exchange. %{public}@
[CryptoPairingSession(CoreUtils)] Error while encrypting data: %{public}@
[CryptoPairingSession(CoreUtils)] Error while decrypting data: %{public}@
[CryptoPairingSession(CoreUtils)] Error initializing pairing session during identity deletion. %{public}@
[CryptoPairingSession(CoreUtils)] Error deleting identity. %{public}@
[CryptoPairingSession(CoreUtils)] Error initializing pairing session. %{public}@
[CryptoPairingSession(CoreUtils)] Failed to begin pairing exchange. %{public}@
[CryptoPairingSession(CoreUtils)] Pairing device %@...
Duplicate record found for identifier %s dumping pairing
[CryptoPairingSession(CoreUtils)] Unpairing device %@
[CryptoPairingSession(CoreUtils)] Updating Peer %@
[CryptoPairingSession(CoreUtils)] Error updating peer (OSStatus = %d)
[CryptoPairingSession(CoreUtils)] Found empty extended info entry, removing it
[CryptoPairingSession(CoreUtils)] Could not delete empty entry with status %lu
[CryptoPairingSession(CoreUtils)] Requesting delegate to prompt for setup code with delay = %f
[CryptoPairingSession(CoreUtils)] Error initializing pairing session (OSStatus = %d)
[CryptoPairingSession(CoreUtils)] Pairing flags are: %u
[CryptoPairingSession(CoreUtils)] Enabling ACL for device: %{public}@
[CryptoPairingSession(CoreUtils)] Failed to resume pairing process after setting setup code. %{public}@
[CryptoPairingSession(CoreUtils)] Exchange complete. Proceeding to verify step.
[CryptoPairingSession(CoreUtils)] Failed to record successfully paired peer
[CryptoPairingSession(CoreUtils)] Error initializing verify session. %{public}@
[CryptoPairingSession(CoreUtils)] Failed to prepare data for verify exchange. %@
[CryptoPairingSession(CoreUtils)] Verify complete. Deriving encryption keys.
[CryptoPairingSession(CoreUtils)] Failed to derive input key (OSStatus = %d)
[CryptoPairingSession(CoreUtils)] Failed to derive output key (OSStatus = %d)
[CryptoPairingSession(CoreUtils)] Successfully derived encryption keys.
Cache Miss: Request: %{public}@ %{public}@ for %{public}@ %{public}@
[NowPlayingInfo] Ignoring nowPlayingInfo update because playback queue callbacks are set
[NowPlayingInfo] Received sourceClient %{public}@ from nowPlayingInfo at path %{public}@
[NowPlayingInfo] Setting identical nowPlayingInfo, skipping update.
[NowPlayingInfo] Clearing nowPlayingInfo
Message %{public}@ did not have a registred custom xpc handler
[CryptoPairingSession(MRExternalDevicePairingSession)] Unpairing Device %@
[CryptoPairingSession(MRExternalDevicePairingSession)] Opening Security Session in State = %ld usingSystemPairing = %s
[CryptoPairingSession(MRExternalDevicePairingSession)] System pairing success.
[CryptoPairingSession(MRExternalDevicePairingSession)] Legacy pairing success.
Ping acknowledged by daemon in %f seconds.
Unable to ping daemon: %{public}@
Setting cached activePlayerPath %{public}@ -> %{public}@
Removing cached activePlayerPath %{public}@
Error code %ld while registering custom origin
Error code %ld while removing custom origin
Calling PlayerPathInvalidationHandler %{public}@
Command options do not have requried source position parameters to perform command
'%@':%@ -> '%@':%@
Command options do not have requried destination position parameters to perform command
Sender specified %@ = %@ which is no longer the now playing item.
Sender specified %@ = %@. Now Playing Item = %@. Ignoring command
Got %{public}@ for path %{public}@
Resolved playerPath to %{public}@ for command %{public}@
Received lyrics event %@ for PlayerPath %@
%lu clients have now registered for Now Playing Notifications
Posting Notification %{public}@
PlaybackQueue request %{public}@ waiting for transaction...
Request: %{public}@ %{public}@ for %{public}@ is short-circuiting because cache
PlaybackQueueInvalidation: Client API misuse: InvalidatingPlaybackQueue instead of ContentItemChange. Sending additional contentItemChange
PlaybackQueueInvalidation: NowPlayingItem for path %{public}@ changed from
 %{public}@
 -> 
%{public}@
PlaybackQueueInvalidation: requesting playback queue for path %{public}@
Configuring external device net service browser with includesPeerToPeer = %@
Beginning network service search for %{public}@...
Stopping network service search for %{public}@
Found service %{public}@
Removing service %{public}@
Resolved service %{public}@
TXTRecord data did change for service %{public}@
Checking if device with managedConfigDeviceID, %{public}@, allowed
Device with managedConfigDeviceID, %{public}@, allowed: %d
decoded txtData: %@
[MRExternalDeviceTransport] Reusing input stream %{public}@ of external device: %{public}@
[MRExternalDeviceTransport] Reusing output stream %{public}@ of external device: %{public}@
[MRExternalDeviceTransport] Output context %{public}@ did invalidate. Discarding streams.
[MRExternalDeviceTransport] <%{public}@: %p> Initializing output context using output device: %{public}@
[MRExternalDeviceTransport] <%{public}@: %p> Attempting to add more than one device to remote control context (this may not work as expected), existing devices: %{public}@
[MRExternalDeviceTransport] <%{public}@: %p> Remote control context modification cancelled. Reason: %{public}@
[MRExternalDeviceTransport] <%{public}@: %p> Timed out waiting to add output output devices to context: %{public}@
[MRExternalDeviceTransport] <%{public}@: %p> Successfully initialized remote control output context %{public}@
[MRExternalDeviceTransport] <%{public}@: %p> Failed to initialize remote control context with status: %{public}@
[MRExternalDeviceTransport] <%{public}@: %p> Output context already has all the devices we want to use.
[%s] Resetting transport %{public}@
[MRExternalDeviceTransport] Observing remote control context: %{public}@
[MRExternalDeviceTransport] Stopping observation of remote control context: %{public}@
[MRExternalDeviceTransport] Destroying remote control context: %{public}@ -- devices: %{public}@
Whitelisting Process for non-playerPath based notifications
Posted Active Now Playing Notification %{public}@ for path %{public}@
Warning: Unknown device network ID
unable to get an output device identifier, device will not be added to protobuf's grouped devices: %{public}@
deviceInfo file exists but is empty, creating new deviceID
Failed to create deviceInfo file %@: %@
Failed to create deviceInfo file %@
Created deviceInfo: %{public}@
Sending short circuted contentItemChangeArtwork for path %{public}@ %{public}@
Sending contentItemChangeArtwork for path %{public}@ %{public}@
Sending short circuted contentItemChange for path %{public}@ %{public}@
Sending contentItemChange for path %{public}@ %{public}@
Attempting to send contentItemChange for path %{public}@ %{public}@
[MRTransactionSource] Source %@ received interrupted/invalid connection to query
[MRTransactionSource] Source %@ could not extract connection
[MRTransactionSource] Source %@ could not extract reply
[MRTransactionSource] %@ sending end signal with packets %@
[MRTransactionSource] %@ sending packets: %@
[MRTransactionDestination] %@ could not extract connection
[MRTransactionDestination] %@ could not extract reply
[MRTransactionDestination] %@ received interrupted/invalid connection
[MRTransactionDestination] %@ received %@ for playerPath %@
Could not send reply because the message was not expecting a reply: %{public}@ 
Could not send reply message because there is no client %{public}@ 
PlaybackQueueInvalidation: MRMediaRemotePlaybackQueueDataSourceInvalidateForPlayer %@
MRLanguageOptionsCreateFromExternalRepresentation: Expecting  CFDataRef but instead found CFArrayRef of CFDataRef. Please fix by using 'MRLanguageOptionsCreateExternalRepresentation' to serialize any CFArrayRef of MRLanguageOptionRefs
MRLanguageOptionsCreateFromExternalRepresentation: After deserializing was expecting an CFArrayRef of MRLanguageOptionRef but instead found CFArrayRef of CFDataRef. Please fix by using 'MRLanguageOptionsCreateExternalRepresentation' to serialize any CFArrayRef of MRLanguageOptionRefs
MRLanguageOptionGroupsCreateFromExternalRepresentation: Expecting  CFDataRef but instead found CFArrayRef of CFDataRef. Please fix by using 'MRLanguageOptionGroupsCreateExternalRepresentation' to serialize any CFArrayRef of MRLanguageOptionGroupRefs
MRLanguageOptionGroupsCreateFromExternalRepresentation: After deserializing was expecting CFDataRef but instead found CFArrayRef of CFDataRef. Please fix by using 'MRLanguageOptionGroupsCreateExternalRepresentation' to serialize any CFArrayRef of MRLanguageOptionGroupRefs
Falling back to %{public}@ for system app since none specified in deviceInfo
Added invalidation handler for path %{public}@ with observer %{public}@
[AVEndpoint] Connecting to external device %{public}@...
[AVEndpoint] Cannot connect to external device. This endpoint doesn't have a usable pipe.
[AVEndpoint] Failed to connect to external device: %{public}@
[AVEndpoint] Successfully connected to external device.
[AVEndpoint] Failed to select playback category on auxiliary context. %{public}@
[AVEndpoint] Retrieved device ID: %@
[AVEndpoint] Retrieved group ID: %@
[AVEndpoint] Processing modification as a local modification.
[AVEndpoint] Processing modification by searching network for group leader.
[AVEndpoint] Processing modification by searching network for pilot device and it's group leader.
[AVEndpoint] Decided on endpoint: %{public}@
[AVEndpoint] Error occurred while discovering group leader: %{public}@
[AVEndpoint] Error occurred while discovering devices %{public}@: %{public}@
[AVEndpoint] Requested to add devices %{public}@ in group %{public}@
[AVEndpoint] Output device add of %{public}@ to %{public}@ failed with error: %{public}@
[AVEndpoint] Output devices %{public}@ added to %{public}@: %{public}@
[AVEndpoint] Output device set of %{public}@ to %{public}@ failed with error: %{public}@
[AVEndpoint] Output devices %{public}@ set to %{public}@: %{public}@
[AVEndpoint] Requested to remove devices %{public}@ in group %{public}@
[AVEndpoint] Output device remove of %{public}@ from %{public}@ failed with error: %{public}@
[AVEndpoint] Output devices %{public}@ removed from %{public}@: %{public}@
[AVEndpoint] Requested to move devices %{public}@ in group %{public}@
[AVEndpoint] Output device set of %{public}@ to %{public}@ completed
Unable to search for group leader: %{public}@
[MRPlaybackQueueClient] No ContentItem in playback queue with provided '%@':%@ for command <%@>
[MRNowPlayingPlayerClientRequests] UpdatingCache: playbackState %{public}@
[MRNowPlayingPlayerClientRequests] UpdatingCache: supportedCommands %{public}@
[MRNowPlayingPlayerClientRequests] %{public}@ UpdatingCache: playbackQueue %{public}@
[MRNowPlayingPlayerClientRequests] %{public}@ UpdatingCache: contentItem %{public}@
[MRNowPlayingPlayerClientRequests] %{public}@ UpdatingCache: clearing contentItemArtwork for %{public}@
Timed out getting playback queue for now playing request: %{public}@
Could not deserialize contentItem in %{public}@ for playerPath %{public}@
Removing MRNowPlayingOriginClient for origin: %{public}@
AVAudioSessionMediaServicesWereReset notification received -- restoring now playing app eligibility state
Updating active player from %{public}@ -> %{public}@ for path %{public}@
MRContentItemSetAvailableLanguageOptions: Expecting a CFArrayRef of MRLanguageOptionGroupRefs but instead found a CFArrayRef of CFDataRef. Please fix.
MRContentItemSetCurrentLanguageOptions: Expecting a CFArrayRef of MRLanguageOptionRefs but instead found a CFArrayRef of CFDataRef. Please fix.
Attempting to Merge a ContentItem with itself %@
[GameControllerDaemonProxy] invalidated connection to com.apple.GameController.gamecontrollerd
[GameControllerDaemonProxy] interrupted connection to com.apple.GameController.gamecontrollerd
[GameControllerDaemonProxy] Premptive Delayed event
[GameControllerDaemonProxy] Delayed event initiated
[GameControllerDaemonProxy] Sending delayed event
[ProtocolClientConnection] Dealloc
[ProtocolClientConnection] Received previously timedout reply %@
[ProtocolConnection] Received raw data of length: %lld
[ProtocolClientConnection] %@ Error: %@
[ProtocolClientConnection] Stream ended. Disconnecting...
[ProtocolClientConnection] Crypto Error. Disconnecting...
[ProtocolClientConnection] Unknown message received
[ProtocolConnection] Wrote %ld bytes to socket
[ProtocolClientConnection] Disconneting due to Exception %@ in parser
[ProtocolClientConnection] Failed to set socket QOS (errno = %d)
[ProtocolConnection] Successfully set socket QOS to %d.
[ProtocolClientConnection] Failed to set QOS properties on stream %@. No native socket was retrievable.
[ProtocolConnection] Successfully set _kCFStreamSocketSetNoDelay = %@
[ProtocolClientConnection] Failed to set _kCFStreamSocketSetNoDelay property.
PROFILE: resizing image from %lfx%lf -> %lfx%lf took %lf seconds
[EmulatedGameController] Cannot create GameControllerDaemonProxy
[EmulatedGameController] Cannot create emulated controller
[ExternalClientConnection] Trying to send unencrypted message that requires encryptions. Killing message
Sending Lyrics Event: %@ for PlayerPath %@
[MRPlaybackQueueServiceClient] After completion playbackQueueRequest %{public}@ responded to asset request with item %{public}@
[MRPlaybackQueueServiceClient] playbackQueueRequest %{public}@ requesting assets for item %{public}@
[MRPlaybackQueueServiceClient] playbackQueueRequest %{public}@ responded to asset request with error %{public}@
[MRPlaybackQueueServiceClient] playbackQueueRequest %{public}@ requesting child item of %{public}@
[MRPlaybackQueueServiceClient] Received playbackQueueRequest %{public}@ for path %{public}@
[MRPlaybackQueueServiceClient] Responded to playbackQueueRequest %{public}@ for path %{public}@ with %{public}@
[MRPlaybackQueueServiceClient] Responded to playbackQueueRequest %{public}@ for path %{public}@ with error %{public}@
Sending contentItem transaction %{public}@ for path %{public}@
Sending playbackQueue transaction %{public}@ for path %{public}@
Attempting to setAppPlaybackQueue with an empty queue. Did you mean to send a MRSystemAppPlaybackQueueTypeEmpty?
WHAPRO: Discovery found %@ in %f seconds
[ReconnaissanceSession] Beginning search with timeout %f
[ReconnaissanceSession] Session timed out after %f seconds with %llu updates
[ReconnaissanceSession] Last endpoints:
[ReconnaissanceSession] Last output devices:
[ReconnaissanceSession] %{public}@
[ReconnaissanceSession] Matching devices found: %{public}@
[ReconnaissanceSession] Matching UIDs set: %{public}@
[ReconnaissanceSession] Matching Logical Device IDs set: %{public}@
[ReconnaissanceSession] Unanimous endpoint: %{public}@
[ReconnaissanceSession] Unanimous endpoint connection type: %{public}@
[ReconnaissanceSession] Endpoint features: %u
[ReconnaissanceSession] Unanimous endpoint should wait: %{BOOL}u
[ReconnaissanceSession] Cancelling search for session %{public}@
[ReconnaissanceSession] Successfully found matching output devices: %{public}@
[AVDiscoverySession] Received airplay active notification: %llu
[AVDiscoverySession] Failed to register for airplay active events. Status = %u
[AVDiscoverySession] Current airplay active state = %d
[AVDiscoverySession] Failed to get current airplay active state. Status = %u
[AVDiscoverySession] No audio session found for ID %u
[AVIOStream] InputStream received %llu bytes from communication channel: %{public}@
[AVIOStream] Output context %{public}@ closed communication channel: %{public}@
[AVIOStream] Requesting to open communication channel using output context %{public}@ (%{public}@) and options %{public}@
[AVIOStream] Successfully opened communication channel %{public}@ for output stream %{public}@
[AVIOStream] Failed to open communication channel for output stream %{public}@ (error = %{public}@)
[AVIOStream] OutputStream writing %llu bytes to communication channel: %{public}@
[AVIOStream] Error sending data through channel: %{public}@
[AVIOStream] Channel not available for output context %{public}@
[AVIOStream] Received notification about output context closing communication channel for output stream: %{public}@
Setting active origin: %@
Timedout Getting DeviceInfo for origin %{public}@. If you see this too much please use 'MRMediaRemoteGetDeviceInfo' instead
[%@ <%@>]: %@
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
