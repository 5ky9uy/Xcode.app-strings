%@hy
%Dhy
%Hhy
%Lhy
%Phy
%Thy
%Xhy
%\hy
%`hy
%dhy
%hhy
%lhy
%phy
%thy
%xhy
%|hy
%iy
% iy
%$iy
%(iy
%,iy
%0iy
%4iy
%8iy
%<iy
%@iy
%Diy
%Hiy
%Liy
%Piy
%Tiy
%Xiy
%\iy
%`iy
%diy
%hiy
%liy
%piy
%tiy
%xiy
%|iy
%jy
% jy
%$jy
%(jy
%,jy
%0jy
%4jy
%8jy
%<jy
%@jy
%Djy
%Hjy
%Ljy
%Pjy
%Tjy
%Xjy
%\jy
%`jy
%djy
%hjy
%ljy
%pjy
%tjy
%xjy
%|jy
%ky
% ky
%$ky
%(ky
%,ky
%0ky
%4ky
%8ky
%<ky
%@ky
%Dky
%Hky
%Lky
%Pky
%Tky
%Xky
%\ky
%`ky
%dky
%hky
%lky
%pky
%tky
%xky
%|ky
%ly
% ly
%$ly
%(ly
%,ly
%0ly
%4ly
%8ly
%<ly
%@ly
%Dly
%Hly
%Lly
%Ply
%Tly
%Xly
%\ly
%`ly
%dly
%hly
%lly
%ply
%tly
%xly
%|ly
%my
% my
%$my
%(my
%,my
%0my
%4my
%8my
%<my
%@my
%Dmy
%Hmy
%Lmy
%Pmy
%Tmy
%Xmy
%\my
%`my
%dmy
%hmy
%lmy
%pmy
%tmy
%xmy
%|my
%ny
% ny
%$ny
%(ny
%,ny
%0ny
%4ny
%8ny
%<ny
%@ny
%Dny
%Hny
%Lny
%Pny
%Tny
%Xny
%\ny
%`ny
%dny
%hny
%lny
%pny
%tny
%xny
%|ny
%oy
% oy
%$oy
%(oy
%,oy
%0oy
%4oy
%8oy
%<oy
%@oy
%Doy
%Hoy
%Loy
%Poy
%Toy
%Xoy
%\oy
%`oy
%doy
%hoy
%loy
%poy
%toy
%xoy
%|oy
%py
% py
%$py
%(py
%,py
%0py
%4py
%8py
%<py
%@py
%Dpy
%Hpy
%Lpy
%Ppy
%Tpy
%Xpy
%\py
%`py
%dpy
%hpy
%lpy
%ppy
%tpy
%xpy
%|py
%qy
% qy
%$qy
%(qy
%,qy
%0qy
%4qy
%8qy
%<qy
%@qy
%Dqy
%Hqy
%Lqy
%Pqy
%Tqy
%Xqy
%\qy
%`qy
%dqy
%hqy
%lqy
%pqy
%tqy
%xqy
%|qy
%ry
% ry
%$ry
%(ry
%,ry
%0ry
%4ry
%8ry
%<ry
%@ry
%Dry
%Hry
%Lry
%Pry
%Try
%Xry
%\ry
%`ry
%dry
%hry
%lry
%pry
%try
%xry
%|ry
%sy
% sy
%$sy
%(sy
%,sy
%0sy
%4sy
%8sy
%<sy
%@sy
%Dsy
%Hsy
%Lsy
%Psy
%Tsy
%Xsy
%\sy
%`sy
%dsy
%hsy
%lsy
%psy
%tsy
%xsy
%|sy
c=9b
;ff&@
@ffF@
5?ff
@fff?
.:?/
|?^tQ
333?
=>=h/?
B33s?
C<@t
?gf6?
p?VU
X7@o
ffffff
A333333
3o0/
?UUUUUU
?UUUUUU
.@ffffff
?ffffff
MbP?
`?3U0*
?333333
m0_TA
Mb ?
yE>UUUUUU
?333333
33s=
?^8U)zj?@
THA9
nwQB
#WQfT"
Q?D5
so]J
_Dud
4)tdW
Ymv1
Il&<
W?)\O?
?fff?
F@UUUUUU
L=33s?
333?
>333?
UUUUUU
L>33
L=33
333?333?
E?fff?
XBKBKBKBKBKBKBKBKI2I2I2I2I2I2I2I2
>fff?fff?fff?fff?
[R?
p^X?
.u?
.u?
.u?
.?\!L?
.u?
sfk?
.u?
.u?
.u?
.u?
l\k?
.u?
.u?
.u?
.u?
.u?
L?0e
.?Z)L
.u?
c?5^
c?5^
c?5^
c?5^
.?k+v>
.?k+v>
.?k+v>
 n;^
Qkkbal
i]Wb
9a&g
MGiI
wn>Jj
#.zf
+o*7
images/arrow.png
gPSQ
774Pp
+&!///&~U
& `b
!sUMNN^MRR
:]M5
+f!S
P6q{t
oN2R
E`lu
;M<e
di`EOX
!0I,
}df=9
}WvF
@sBx
)0js
8=uX$
s#"|~HJ
Jx:8j
tI~G
`ExX
C^DZ
t>;7
vLt<E
P&R7>
(Nft
lhUE
[rTt
o+R'PO
<]q-
1"gdq
hvJ/
{u#'
a{4F
98(5
'R{C
qPT$
p&{#
@tqv
f39T]
55f8a
_6E(-w
$5(33;
VDgK
6sz<
#80a@#
5"vr
Xy&29
^Dh k}4
7OlC
icb'
Q;t0
bgQ
~^'X
it=5
h"9k
EYig
<hTk
N^dI
$8_!
;MWx
cGIeA
8ksu
Z-&v
'%,Bs
sM/L
y3I)}e{
\~9!N
H`^Z
XS2*
W2ye
$A'=
XM$I
^neuc
v@x>
~s.2.
?s/O
\zX>
D)q|
58'A
UEcS
='K'_
M;{9
~/j+
.":x:
?M.}
7_)m
r+`dI
'I_&w
$)Cq
q.Kx~j
[f|S
e%b$
sAV'f
0rDTt
>kPWQ
T{6R
;}{*
XG )
;y[3^
dPcSa
-<9b
~t(%O
W$)6b_~}
,IPF
|[CS
wgE6
c0|:
u_/j
ttm]
({ g+
,7!T
SWlK)'
{[Mqz
v/+%A
moR7
ix<(_
"_~a
v3-e
-ixQ
|3"4
&Z?2
8Pm~
o836
c38*}
<oKUK
<=jD
7__p
aZ3JQkK
qEG@
XMVN$
P-,e
dfg6
!F0W
m/vY
Ie%h
/bXw
h8SuFN&:2
t6f t
gL!|
p_di
images/border_full.png
%+0Y
Yk*hpl
images/eow_pattern_b.png
>&TN
6Yp;
.nbd
X[2T
-\gr
Ie8C
YfxX
:LD#
")%Y
*E!]Q
$f9=-t8I2
poles/northpole/0/0/map_0_0_0.c3b
map_0_0_0.lstUT
w"Qux
northpole.jpgUT
w"Qux
PJhJ
c`bfaa
7oP
1JiP
{OIq
Q3VV
{[,
JB'jf
{ TA
mCO+
_5'UD
!eP\;`
x#$_
<1?'r+K
dC9"2
6`wf
pT=g
C)1\+r
>n4&TD
7v7e
qC~T
a81x${*t
|$Eu3
qB<L
JUd%T
~8JV
`7Jz
J6]z4W
{){Kt
#EN|
XT8shsQ
r](1u
i>I]
_;g;
bjl$
S5d)
d)uGzA
1JkEY;
F"(u
"<:3
&qIX
)6yf
=XTJ
:4j.
k )}
22k6
y/g"l
@%.9XATeBY'TIE
:,-*
(HTb
Wn&~
-Z{l-uT
;h9P8
j;pO
rO+T
>)r{
:u)
rYk
xqgR2=X
^7w
NSb|
ni<04
5tH<
=g[;`
tkJ*
VCl%
qaS\ A
dnQ<c
L.Cb
Iv(X
E:^o
!au_
>?d=k
[uAZJ
e$p7P
ZtNys
Z`Q o
GYPo
E[%h
X,z:
>K3C
v8m{X
Tw$7
&mQM
4yc~}
P{nC
d_KccM
j**y!l.GJ
IH)?
.fv:
/hZ=
yDmm5>
L&uv
r[,B>
|O-Z
Tmi8
$l"of-{
QAiEO
m9SB
u!)sM_'
yR+1r
EI:Jw
ZXpz=;3N@
D@rl~g
X#tH4
OigR
$lWn@`
,y.4
(tK^
IYE~
cUuA
hv1n
9MCQI
$uXBK
y>K?
+oovH.
~#VE`
+*B?\
'v{r
|dt~
R*&SV
Hm@@
;$?f
.+hNT~
(#DS
eebpX
7x)5
hMgs
3zO0
UKYKu@N
ov&,
-+M6?c
)rY>
+"n2
JKMo
5l-W
Yk=:
>~%
gp&0
/tnY
<s~d+
},,
Tc.H
}H`9z
yeJB
kg;<
7+WE
Iq;S
)|c;
@<_FaDms
kxa!
|nQ5
NwUs
W9s!
?hd`|2
YIvRh
afLp
qg62l?(U*
ZpLG
 v!N
N=S/H2
u8R6y%0
qz+t]f
;3x[
Y1mK+
J^~[
sBMj
KrR 
wf,;k
|V20
|,V5
7a>-|/tv_s
Zk,u
Q"~W:
<J[6+
y#x'$
e]d]
0G1x
#m0N
W|h'
-C?IU)
Moxg
L"v(
:H}Ws"&o
)CJZ
U$;#
O`a[M
2O(E
Pq1:
y*pQ
Vm/@J$x
:2`?Y
w|v3\
'nZ0 
0MsR
 n"Y?T
6Lr*2
l?2,
q46
;Z8<M
GJ]*
>2H{Ni>
p6S?lj
Z-8Y
RuZ;z
1(.
Mhf
g68I
[p6p,
{2d|<
gf@=4
Ze$p
{AJ=
x6)A
/NPB?
$Z*
)b`]2#t
8>(;b
e:3rg
GaO|
+kZ6
{ ia
+uXu
h_(E
)Ky/
xb,q
YV',
}l|_
u;>H
+)Kh
;mQW
^|]t
m6^ m
RZC(rL}Q-
HAy\
R),N
(&fj
,l o
9N.O
YGC^~P
2Os)
k1#?
33%Ta
:~b|
\z3M
~|>Me
|4)n
:|[ 
~<c/*=
MhtZ
oq:>~
gA,,
>w?B
tzM\
$+QJ
ouu 
Y-R,
!rnO
E|a+
K0|V
gqtO
Ye<*
~a];
9:n'5
631V
,$MMn
sHbR
">3u
!uqKMj
5OT_@
B`&i
U`t%
#Rg"
},#R
z0'`7
m04vz;
Me"v
a+m-
"B50
``wR
_&3~
Lag/
noT'
jbM6
{.KO
|h5k
tS71^
^~_[^
-d|s
7.D9
s;\K
NrI%
-mPc
kpDlY
BlZID
cDo*
%BD>x
o;qy
xE)
]e<)
4K-'
]F<2
7/W={
r&n5
9!{_
(q=kQj
,4Kj
D o<
F|"1
qc'jb
P1v@
y?j^
;keZJ
bQ0G
9XY!
c8vA*b
*7a'%
$ndb
J`nz
JY6b
( 7^j`P,
rJ`\
|nu[1
XJ^e
-=#j
8hIa
NX[r
m)n=0
[Fz$b
Q"~M
;!iG
&?tmm
PVO
R+hU
fz6D
-P0\
J679
d`!=
uFL0
EXCq
]FIh
pT'^
>-W"
8(_p
;FapG
4RCCv
:|le
e]&}
*^$
i?^/
/8{U
^KVH(
Tn9^I
l1,x
%8ds
iW|]
XR{nQ
_g:W
=e;Y
-tk
pU Q
C},D
wX'o0
ZU"K
KB7z
EXZd
4#+~
eP!`
u~1w
NjO 
*nX9
A5*=
PL| 
&dr^
]~YLj
k>.q
C!7+K54
%>x2
EB^>
ay s
b.H`<
}^1mD&4}
$[mX
6UG?_t
"(G.
ZML+{_
U5m9
zVOr
s*wgb
j/qP
N7ve
T-W!
Wh7x
Zn=y
;n1M
-Om9
:C3J+
FLg=
Q9.)
'1vR%
y#zf
R^VFgZk@@
+x1`4f4
^=|^
M4@i+
'.mU
q+~i
KQTct
9DU<p9
m1J]
Ny')
A\?:
"uPER
K_}0
},l
[KwAiRs
 cI-S
||ob
? 7F
ipj%H
ht{"
?a(K
<RCZn
4};C
{Ep]
&FsP
s[JCq
Gn-D
2oy?6/,l`
>}A%
3m8!
A=o}dhF
8+Q>
[6!o
VG%s[
{c.>
FJ>K0
\]kG
QGf$
0)qgok)
v];E
7!+Ym
6=b&U
1ZD_
Emo3
l9?k
sB6`
/L<]S
}&}d
;?a5
Jw]Y
p*93
h|A
p(>"
,~hL
]1^x
#vvrDd
j>`x$
j0lqD
<TPUY
wz/gCjD
X9:zMD
]%Zz
9s>75Zc
9"GPU
R6*}
\a(-
n)>r
j,evE
s\|T
lq`s
lbw&
dcIiVa
Lm3G
Y!+a
a\8y 
)6-s
"Fk7cv
#.T4
7p!vD
e%x9
tk`A
jXoa
Isd-(
h;7u
e$T\
ky.U
a&QG
wf-y
Dg5E>
aA ./
<',>A
B>"n
!ylv
NM]+
8d9n[+
&!;L
2:1%
7+!t
1`OF
r+Cd
{cO>N
HU/0
":\O
x];U
[zb5
*j+o6
zNl57y
2w]k=
F;3#a
&F|F
.y<d
fQb|
HHAS
`<[:
Z[dv
.KbSU/5
9h#+
su>Qf
l^2
{J d
2#mTC
Yz7I
?n-+
gGB\j
nHLP.r
3zR)
5O2N
rCB7
~%o(
i|Cbv|
%e$>d
8t_=
tV)8[=
1CDI
{])]
J8/C
s'M.
+RdP\K
@iZ(
6#ml
K@CV
m^F>
JW1:
sRU*
D^LY
f%w)se
G!ph
+]):
UV<O
Puj]k
bE`
$_^,
+M%e
D8(@
yTdW
<<1pn
@eId
cBf~
N` '
1rF6
WV+,y7Ov~
ZPuP
l5hc
k\T'
%1dyq
/LE{FW/
j*\^
u*TZab
=+r#4{`
l'H 
)V^_!
xn:C
&8&%
COQ(
OKZH"
+64l
Sw[>
=s;G
S6j0
=}6.
Q16D
gYOc2gB2tI
{~eX
;?|V
D]uW{[
6Y'@
X1*QxV'=\L5N
426sz
,OiFI
<_a\
GPw
Qu;y
*4f8
Lr *
K5l4
)o;M
+A~>TP
oF+l
G'1*T1
*%Q[Ek
Nyn7
K gK
DZhM
gE0@z
LJU`
k\%%(1
zlt
e&Nk
gV:/
'*S16
wma5
C!9~
)DadSF
!hbE
Q2}U
|5G6
n.59
c2^*{
nH0.
elf+
864W
5B2<.
+bb-Q
r$CL
o<#v
`^:5
 o\f
"^&;+
Gv/|8g
%m/:
~!,o}
kHfu
Wj{ = 
hp9C#
-,Y{+
O_3:2
S-2/XV(
W9-,
nH@VE_nH.
q{p$1l
1H4'
\IraJ
o;$:
Ykz7
>hW7
-ko>
U3.3
e1I)/
Hti"
a`~M
W$!c
7LnT
#!>}
\hc2we
K#!w
Yb8M
fnkU
ss!J
+d!j
[g':
!Qz(<
giDuq
06OLK
/%:f
/Rxk
EC{^
l}wO
)0=}
N,Z|
HS]z
{:!6
z8)EE
2UyN:
@&;:
Ht|Tx
R] !
ktKk
jDIbvu
Z.LT
 Vp9
69,;
8C/E
RI!W
m tnuCB
:cF8
 oV&
0[-2
PQsO
[D-z:|l
^o(XS
p>-q
+OfO
zC"l%
88]n
yM"ZM
.eXK9
t)ho
k}33
QMCz(
CW$h#
L=M{
i(1&j
42:L
jK0^
SAV7
|7&j~
U:~B 
*s]c
31O@
<aa1
I1K0
L+c+
^$AyV0@-
~+3X
}#S]
P[Rn
G$[^
/,W3
!0n[
S8/?
@]iqp
3[yt
Mf9z1
ZWHQh-
i)xst
~%MMi
is^W
WA2_-NJ
}4_(:
zJ^E
Ss7#
-0g?3%
bXv!=
e-]|
8Wb k
t8k';Di
J=m:
sn$D
2Le:
f<.H
r<3YD:C|'
ly7QO6
k%FN
'##yJw
qy`H
Z}v~
8x\MH
`X=p
Z-*&
nH~V<r
Q5o4Q
JVWZ
}'j"@q)
acT
H!uD
ZK{6
T,?/e
?,o%
{BuI
5[Y[nD
I1nN
Z0\q
<6WN
iYUpo
X!P\
^p_B
G!MA
6S60
>]sD
iApgoui
I0:
x=+Ti
+"Rr
!r_3
k)r$
uIe:
B*Tm9
:B x
x)z+
9=4
q5&
[r!%
&}7$m
]t9g
9)]@dfj
wRFg
v&b@yO
b}yn2
bG^IK?
#jKr
:MZZ;
W_|.
/y}EY
+!.@N/
Flhh
g_f_&
[rG?[
);BB]Y
G-L)
A#g]_bm>
KNAx
WX#b
9sA=
'}e?}
P*e
3?D3
Fu=(y
n_md
e=FY
+X%u
aDQ&
2xi9
0MLU
C'e]
aM'n
$qE@R
lSR^
T-y_
d4]Q svM
L'^r
C)1l?
lTt&
[miut
euGk
.@@H
r1gl
\lJk~mV
+iQs$x
Z9I[
d[J(
/04uS
[p8^
nWBZ
Ub6)
!)[T=.
\%7#
YZRg
iJ8i!
*W/=e
S.ux
-e?P
1UmJ
l-`i
`=!w{
=K~n
+\mCr
MDDqn
3<WM
 "C|F
Asep/
;zwi
|S[_<
X0`n
jci8
Ffc-,
Iz>5
/W4-"7
R/P)
/I,&}
9sAN
$y,#
BU~^
=p5m
1~fN
i\kw=
K-1n
59yy
@iyX
:gkHH
H+yZ{
/l&Z
%296PlH
#<V=
AI{y
Oy+S
KB'3!
WZrt
Agf[8e9~
KyO=
b^B=
u<2%
,E"My
>~yR
^a1B
k4T1
?vui$U
tEds
)+L1
45Eu
kw7TQ
Nb=C
}^@El
3s!<
e`Hb
d]db
?8GT
=ENa
a3E]j
p5ZE
C:\)
Oh*O
l%F5Dk
QoKA
m$r2
+]TB
"CoK
`wT'
.gL4
z%v?Q
++,V1
Wwjp+W
yrMq
UdP3
dfr%
jF[7
|\d8)
BbwT
zWie0
S^\-
1Pz2l
Nk1b 
U=?b!
q?7k
`V)>
C5(7
QK\e
m&%]e+
O&nL
(ce9
?/5I
w|TG
E3#[.L>!
.)b;
<Nix
{=b)
p-17[
+ddT
x[%v
kA!0
VLlc
:Dn-
2N;z
6m?;1
BsX[
^jzoT
BJWB
F:Z17
@/Py
`'v>:
SLtU
kf7g
\RSP
$D!^M
GMl7"
)WC<\
5,0z/
kSe]wYdW
e%N')Z
i1pjd
\(PduaTlX
9VWw0
MY7g
1Zvq
n(en;
Y.#f
;2<h2*
6m4
>kmK
JuE]
&Awwy(
,(e5
Qrc*s
-pA~
.S6L
O2#*y
G^G~
e2Dv
1T5cn
u}_%
~[VD
~/_m
6a2<& 
/O7C
j!1}
4%$X
bBt?
a'g,Q-
Y\+e
GRcS
vk3;J
l^)V
t]rz'%@
TM!1
;K%
w:P_
CrVo
 %G{
?~(q"i]J
pho8TAP
(jeJYm
6M3l
zC'p
<b"=
!1c_
wffaAN
8DY/
3<j
1BSg%
h$&5
W2(V
/QYy
,NB+m
wpTK!D<ylh
c:yl
uJff*7
7^Iqe
,5*A]n
rC$m
BTYis
XXNY
tN="5
\`i?
O:\6
(>)+
e|Iqp
9@p\
0a[/
d-Mg
cALJ`
Ynm_
C|^D
d0L;P
ib8;<
;G:E
v>wi
SsuF
T:S\
rx];q
a.=/{DH
&r\ 5
8?hHCs
wCLc
YI.{
]zFp
.s4/
hZl5FLtVF
KH{R9
R$v`
AoST
XGH%
#Jm/
g>IT
+2ZC
0e4+,
r1k
J,,|5
)hY8)
!6V7Y~
$yi1
4N4H
h1{v/l
<v||L*VtD92
r;NfN
a5~v
3^f=
ZjY'
6Jia
fm,-
uOTj
b=4\
~s}\
!go[A
wq f
3kM
`3I|XV:tMl
p^fWx
S>/F
+(uBj
)@0'
$:2k
;oO*%
}|J[
\hmR
6UW 
z,xT
|]Mi(
\>c#
tuo
XXIk"k
cx't
;h{?
cHTq
Lnv~
_0?km
IzH&
BK`K
N`X J
&!`/
*yi+
XYp=b
=J.Y
U^s3"y
884d
vOuL%
!Q#;!w*
Inl}0
ltmhY,~
bd'=Cs
-+4!
e<hU
eF6*Kq
}XVhqX
f|"~T
ozvp
u:^
T_q+
F"-Bb!M
0Ml{
A^cs
'fw*
?R|lu
J($/
2)_V
A-Q:l-1
.Jls
sYON7VI
>t4tMn
%9Bj
jkM*
})w[
tT?`V
v;k&EJA
/(K=e
`'uE
zI|v
1!8<
BV5Ww+
~"ird
[a|m*
DJ{M
>/ypB
x"#xZ
M3.o
sGp
6=[a
cj2_wK
c}/"
8}9$
^rBJ
nJWu
]U7H
v&grd
]71.
S\i A
)3G_k
4O1S
7f[")
~mxV
:#]`/
8E u
f>\-
i"0R
7u4r
<a(WM
y<'C
6+eG
KSLc
_Km>
7uoY
7[DD
g8*_
V{g`"
WF!sn.+
\`o/l
+7M[(
;4|p
~KBd
y|4Qx
gUm-
\CQI
"5@34
v4oe
}]{7
~<@$
C?vj>Y]
1$q,
uHGV
i/*?[
]{Fx
}{EHq
T*s}H
pR&:
Ac&C
?H@cv
K"M&
m22'
-p^f
gt0>8
=$t@
B>Cv
$?Ag#cE
_VB7
~'O$
pU-WfA
EiY9t
DU{`|
PhM`j~
wPd/p>W
j>"3
%/=-pO
kqGd
;;)?/f
hQO}}
!2AJ
B,QX
P7e/p&
u}mr
?FrM1&
K7s!
+jo"@
J{M]
|wZo
YQfG
Z56;J
_/T<
"8_
'K3dt
 CA~c?
"#?-
5j9M
$bV[*{1C
/-+<
@bw+
C7x
91?.!
h-}O
5TEP)
'dJ)
<)uK1|
>*mw
6WH1
o#q1
or}#
$o)W
ZU9
H?k>
sIMA
4g.<
Y%H=Q
SFdF[
R.!t
F+Cw
)l;JQ
wn3H7.
9jSD|
 9|a
VdjC
*nH1
E6)b$m
n"uLu_
U*v|q
CJA 
;|N|
8$5(w4
'_y=
xVr?
<g_,
pEvXc
k;+9*
'2w>
j{=5
Y{%p
*Dio
rEu5
sy)09
~~MP%g
Oz;>#
?oFx
|sZi|
:F[E
{p'VA
)knr
{<> 
\*{N
+3wm
b=w{
KB~}
J>ZCNg
iskD9^
5<Rp
_>:(
**G0
yOI%1
q{D"
1/z:
@-Xw
b/es
QJ7>';0
az}:
U)vK:En5
iq5F5
I]f\Uk
g51e03N
,sYy
/R2+#
V98z'
cw-|
CAqU|
O2Fvx
| m4
}-Ai?
-SKGw
5@\P
|SY{
]Av
$"cA
}l!\
W:d8
gU-"n4
MDDf7.
^(d{=.
h!k%`]
=F7k
.cAU`
y2&(e
|`$bU
g|o[
!l}n
v!{J
Kl3Y
&Qm8p*
mfUL5
IOhzq
`jQm
wodc
-RNL
tOwk
g?m 
A\3H
l2>0;
m/Q7q
L`Oj
gju;
!tWE-x(Fi
PFRg
xlEJ
cM\ 
oKDf
q=R[
'%sfiP
04ft$
pxr3m.
[hQ@
cQae
q9vr
"NDN
v!o)
].1s~w
yq0XO
?yB#
z'f\
M7F%*
gs8N3+
x\X3
R(C@
s$61.
}Y7D
(-ry
@"aG
TqBw
U{z)U
[\3s
La|s
,Rx__
L\J5
*@4\
i8$T
M |K1
"$wd}
|VTJ~
,X=7
q:mA
z+oh
'y. Y
JTEz
z\3%
'Ca'
dauZ
UIuG
+y8D%
-T*/
^5\(v
~H((
map_0_0_0.c3mUT
w"Qux
|w\T
m/>W
#<b
^cK%
M/%Ky
,)wJ
]f!y
5D0h
hH~;$
aL:b@^5S
 g}a
;n>`k
nFpt
hvqm
}An84
i4aF
Sg?u
551j
\}x&|1
7d09
7d({)\=
{"]9X
g&L
@ZYm
WO~6<C]
V[`u
/G!s
9y>T
{NO`
;2}Y
6DC-3
y:L+`
0k*es
x?s1
,9Mi\
q]0/Z
EUN*
<8#s
6SrN!
mb5d
G}Bl
R8&]
kRrW
jN,d
pmm$%{_
2E42
|Q_X
E;+Y
/C^=
|8f:3
*]0$r
pjBk
1/<l
o?O9E
IIG,
etXip<
sq+O
%qk%
TMuu
 ?w{
Ho0{I
<rQF5
~E,W
aOBm
C}au
J2@|
kMGmk
~V{Y
d o:O
231N#!
PA0P}
4tBy;
9F.h
pCXn
7<'oa
!l7~
PMD\
kfAO
v/4.
kq_>
m_xb
`}yk
+pMN/
b?*[q
_O#J
(UC6H
IjXg
u1_z
l0Ws
>2Qm
iZta|
Eqx-
8|51[
(tY#?
38c4
Rn!^
VH?1
XHa~
44FS
;Cq|C
;zc8s{
$e;?Rc
T@mOe
=Z{~
DqsWa
I+7Kfj
hR6|
5.P?
[~xo
O5 b
G=:.q$
u ?o
xiJ^
x0g=_
#<x?
?F>O7
eGb4
Nt*|
*gB@
7_@n
:qvu?
D]D9
9X|N
(m]M
o"Ny
Y-Cll
8+ ?i
_410i
*Mbv
!xEi
28W+F
CTLV
~@+U
o-G|42
!4'E
#cP>
R@!},
KoK~
f0.s#
npM3
V*d
e)% 5
w9?3-C9
C !6
o%*bA
C#|
&P9^
:9n=
m-` 
92@eM;
9oK$
Dib#
2HVKf
L233333
H4Zn
W'5HMDNB
4!MI3
&mH[
cOX/x
Faeo2
xg1^O%K
=@Na
IjBs
3MO)u
A=i&
BCiN
8-AKbF5S
Ui5Z
<w|G
~5]C
.P}8e
#;q1
=?kd
22dA|
**wA.W
efzm^
Bn,?
X&XA
P)X +
yXUxeX5xeYuC
k"wqP
/2Wd
`lJf
fd&*
!Pu%t
]]\Y
2r^a-p
1q'~
.d">#
_0to!XRH
;C_C
y04(
[L6B
RUX 
k@9/^
0,!{
B%xk
l/xt
tX'>
Po(_
E;GV
=Pk88WC
<m6C
{n*4
~38/b
oP1X
s!QH
z7QT
DxEEy
{K~"
J|#N
}upu
n5Ew
|uD_
6yDF
L3Efb
eb+r
 ;/B
1?vn
>;^ih1
;-nB
{/>@
d<t.C
ViXvp
`eds
QPs4"%
!r2rt@
Rh.v
A jNu
V`hM;
9Ts^^@=
G{._
#?`?
vK'x
j(pG
IOS&
tIf1
7D=I
eoQy
X4sb
=X~V
 S$33
Xixy
*!G)
UXeD
8x5Q
TI<k
}X[#{;
{#z;
,iFF 
G"jsx=
f&jm
Be)l)2
>V|Bm
GLrg
GtWx
xYd*
UxeTT
yy5x
byMTU
LMQG3X<o
;#Gc
'_Cz
!C[xK
|&rt
2p/E
,boD
Zvr+
KPd 
@N&$rf
x^4bk
PdA
TRTB
!s>Q
EKxI
b"V7
chS`
PKo1ULG5
s@0@
eb)x
;`~t
o_xg@
nx^r
`?%~
#g&YT
u&"O.x
(YEV
LFmee-0
^Nyd
r08Z`,
"W!jW9
o3x
uJ~D
Pa.S.
pjsY{
Se/[*.
zn)Q4
;GNX
8=(2
>vKx0
)w-~
5'-9Z
8N.rJp=y
6mq&
wv|;v
G8v["
3; a
nyWv
[csN
wu-p
Zk9\1
by0r
-4}s\
rd_9
9zrj
=w$.
-+&4
TXu:uT
,)CBm
qetkK
1(C}
,}[]
O]=g
urZ[
!OcK
7.%4
!y,^
7j_R
?9lC
cRg[
%%rYJ
+'';f
Wx8&
N6>f
/wfQ\
^5"nl
{c;p
t$n@
Ul1(
Xwm#1
2ggB
g#"C
$-Qu%m^
_M'(
&3U-
4Sq>
h0\14
s\b'
ZKF6Ws
EtSk
kjqjN
e>YZ
x2Sq
Tl%kfR
C1,.zZ
RkoE/Q
eu|(
C_?
>m3;D
LP~r
^jNR
>LplI
+v4\
.dR:
VK&
Wq&$WTs
5'UcJ
/iyK
epSl
ai1+
;<gH
|qWT.
4<s7N}?l
W1k
?Q1
tVk}
_Q5L
)?s;
VisVl
'>Rq2
HOv>
3jNi
]U&T
))X1
Kik=
g#"T
}/X@
V9QI
;!oi
\j~Rl
7|W[qN)
>mh3@
b6/?\
LSkG
m*.SkS'
_H{
V?7h
v<.q
(nQJ
Wi2?
nUo[
zV5g
}j~J
d,kS<
t\1\
J|rFi
OLZD
?M47
1c?f
i.?7
El.n
[A?-
yr[O
Kjm'~7
>ZD[
}^-dz:
Zior
$mKN
orh=<2h
_WWs
K{s4J+
_{[(@
mvko
k)czj
MEsh
~~\J
5Kvm
l{Zk
Zj%w
Z!-{/W
w|:-
 c|3
UpbF
]:ZG
]5/h
I_ml
Vzs-
Olh<
,3</
PcMN
"H4V
f%bvyR
+aVeR
X<iD
`Fo2
p|1YB
,'+0.'+
K%VX*"l"6b
qD8AN
3V|%
}G$5QF
4;bd
Js"JN
af1Z
k[c]
3;cns
#B?:
]t7u
d/u%
7"#Z
8=AOb<
Nc<C
9}A_
XN#O.
`[h$
`:uA
b:oa
a:iQ
a/Ah6
3!h:Q()
geQ8
*2gg
b (
k]d-
UB_
`X76
pXK6
6`W{
X]\c
mQA<
Mp=T
GPp+{
n\'w
?c)`l
5w/0
jF@O
|)$/
yad-
Uyv^
Eymd*
Aoh0
I#0e
yShR
73Tin
o,V$
#]G
9Pr.
3_a(
L;5w
i>4\
!.r)>
AVgq
1j;i
."PC
?X4*
%=EA
KaxEDQA
DFQJ
:H=D
Y[!k
hmdm
,MD7
5*|M2
*|@>
IPj0(+
k-FB
?H;(8
O8Qg
X'84
`Y$l
KO}A
qg7'
CAWy
%"^8
!0!C
X#hI(T
0t*D
OUaZ
hqTRH&@
Igd-.
((K#z
B2/^W
X@VG
!_uhX
`EecX
9T-+[
z5}QKm
"sm9
MiK(
'b:#w-:
t.*^
_gd^
QoGT
^{oz
+hWQ
`<!'@
M~78~@
?IaJgz$
<jz&
M/P_v
L7Qgv
BMvz
r!CI
K N%
j#ReV
Y]T_
x5XKx
z$"SY
!Oe6
F"_+
'2Td
FM3PSY2
04aK
l0jX
"PlG
3xs_~
3_nBl?
xYyz
;![4
K#j0/
lYyEd
y5d,
k w 
"J,o
q+Xa
]QAU>
S^;
G _S>
^|6r
uPk,_
&xsP
h<Ea
U_A|
O<G6
0d.*"PG1Q
oWMI
iL[3Z
*jFm
XBbKb=
EA@'\_
I\`;
Vfwy
`]g^^
MTK/C
WP!j
[KN/
g]T7H
|C4A_
6qoT
FY8n
{}XG`=
c,Y&KYr3E
2Q1MZ'yZ
,/j^cBS
w9}T
,+nV+
b/?V^
:9luF
=__]
N;'r]I
-Gti
(j*a"
AU!u
1bj5
Y#b%$d%t`
gkX9d
(ga@0Lb
kA@|
poles/northpole/0/0/map_0_0_0.c3h
c%\5"n$
6GM*xd
GDVw
6;jb
%V+>
fgprp
aPguA
v`wx
8'o}
4;7ta
?9eSg
(h[&Uv
)l,=
o]ZFu
7MTc
[]5-
W=cG
qSo?
q2fw
_e|~
-_jc
b1I+-
d%e6?
UGU$
+E{!j|.
.BACfn
t1O$
4q@,
xAZg9/t
+&R_
vxMP
aKX2
5|1D
_"Tvl
Wj\|
xfANL
>VaK
2l;9W5
"=XUj
wm)L
Rp;D
zeUui
z4}G
nK@F
mZk{
hCS:2
q&"O
Q+`E
7am`6
'8Q/
ADh9~
qCE5@/q
Xdo:
w'Su
cv||
pE~F
98Ne
6j_%K
\>tx
F:^Z
c~<X
ncWB
9X;|9
){`,
A-,N
<2WL3V
dpcaGX
:3P[
~X{($
A5!b
ew;G<
pM^8
DUj4\j
m0X%
/}]7;X
poles/southpole/0/0/map_0_0_0.c3b
map_0_0_0.c3mUT
P:x"Qux
JJR(
.oco
X1}w
XmvZeV/~1
Sxqd/:
S{nt
]4;n
][sY
P(R{M
nWgl
znT%
}.Vv
4drMzrW
VlhX6
Ute/x
$=lo=-
=3LOvf:
3&_3`rm
yV;6g
!:r,
gESs
#Tl
l*)?L|A"
.*2e
:sMm
m\l[
W:Yn
71>GD
sCNweu
c?jD3
EI"M
EO?3
fGq'
q[kD
dD$;
%!uL
\^(7+
m=#b
:ZW0s
=v}Q
ey(=
Y&`zgr
_dX5
{w80/'
HFsV
wDSJ
["MT_
z|}-
h_&;V
yk],
mcf 
C$N'
.w7g&
b}v_w
.lByj
C/6{
MC2a
4\2&x1
F)9h
kw\.
5|.~
Wa Wo
XjgT
_yX
t[y~
VnK@?0p5
YGV#[|
;`l$
<It
|oe'i
:s[_
v%@,7
{tN*
!'rN
gis_
WdUA
dGz>
coAg]
6X'y|
s]M9
07K-,wo
Ybn"N
&Fc;;K
2,O\
sp}S7c
h^O!
CkK}
^'4T
-9D2
"W'[
uZrs
Bp,(
?yJuf'
,pN|
wVQEk
\z~U2
zK|!
;c[5
B-fE`;!
v>%Et
S|?z
i~N{s
y2ZQ5xN
Iax^
a_<g
 ?O<
mZ'b
c4b*
rv&>
yq`G]
i<w]b
(Bg(M
a,[lC0=
]-p}u
Gw,_
=cvb
Y$Kk
n0`c
9rE 
uk@'
l=]:
$yi=
{Cc#
mn#A=?
['F}
.NCC
Eha\
>JP6p
}ThU
E(#-
BPJ]4
X6Hp
@SlS
_12zw
w$ n|
Dau/
y~AzQ&
EU5Z
9v4ZU
2d*Q
$TpI
JMO@
J;J[],
Mo3ji
3zRv
1uei>R
[Sd~""
-G76
F(|Fr
S[>
fQ'j
4rL7
]d[z
@1fV
]1MF
qR=)
@_D}
}`;j
my-#
G^KH8
[x-o
Jl#|
mo-
{H<!
_L<#J
myKFd;^K
SH7r*
r^g6
/r3om
g]B~
WHMN].QVCu
okH-
rJrmyKFr
L5 sA
?M7`
"Kg<
};Dk
C;f(F
s*rN
>Tof
&o`
,f=Pl
ld63[
3; [
/A.b
<dN0
lQD/
"gIX%
xA<Yo0
\m)u
2l0P
Zl;p
z@]_
FBW@E
v)"/C
z?V{?t;
01B2X
!&mm
^d/!
#d}y
p1p-
V\kT
pH27
FcMFqc
8n<d=
FTf5
vXjmv
1B2PK
AEOqgQ
VX')
e@.P&0S
xs~;g
\@MvS
CT!D
@M/P
a]E-
U !|U 
F=PO
j'Tn
H{pM
zAruu
HTy<
lxME
P~.d
'`5V
{M]GEwAn
Vk`A
<mES
jaF;
*x r1
nBED
_5OW
G[uo
LE7Z
<Tt>d
]5AX-
dXAt(
V(FC
uD>-
X`m@
-E;h{
kX\T
;$P,+
E__l
BG"^;
lIt{
#j7Hwd
<m =
F!gGq
RTb)
Wa/t
DwTu5
a^;q;0
.HA]
.C_AS
)C\B
BR)h7`w
Oii,8M
$/d7
R $@
c&y"v9
z#s*Z
*jWM
s"ZoX
4Vj*-F
Di!v
j1_Z
vC[k
FJK1
UJ@[
&aO5
?AJE
?C_G
KL:m
4c*2
TGn7
Nl5h/&
QK3}
I'@wg&
`&C/
df!z
hLZ@
Bf7b
9#B$
8lH5
VT+*
4cGh
z<j1
~31o&f
#`-a
cl>d
fmcOi
YT4[
ZsO 
}9`,
h.\WG
o6j1
Pn>d0
Rn97
wKfp+
6n;d
{3c<
n!\B
&06A
$z'H0z'
J|]T
>X;;_
m4K=
D^=k
g#b*d6
vZ|1
k3nh
^=ql'
5bv@
6[;A9
v~S=
nhg'MB
p[;1y
|[x-X
bq0.&
FtOhJ
XN;EXZ=
Es05
5D{1
a~Y1
s@qVd
/`PO#m
;d,,}
$H5%
GD/)
/}7
bD#V
T_;kSY;a
p h#-
OYSAf
~]z%
IYjv
.*-S+
c:}t
dU<~F-
lZV}
jlp%
D~4
W8`J
9dpMS
N3%_
tS>O)
d<uf
g4lf
oN7=m}A
Y`L;
c!:@
z"^Y9
*c>L1
O.sI
v2M_
yd.v*g
B)= 
>cF*
GI?_"
+oGf+o
45.wh
`Le7
S~~>
U<zoVzl
Fs3ZL8kZ
svsP
fu#kZ
u6>m9Ri
|%6`
SI%r
8Ayp
*)C')
+~UKg
p<cO
ht?%
ORB><L/t
rvKq
l/{<}
&S\x
xQFY
[t<R}
G)-N
{Yi[qA
1EJ+
2&~X
]t@tF
=?E8|1
?MiK
:^):98bPj
uJ!>EmFk
R,blB1
{2*,
XDoa
=\3[
wyY8
&7[G
&Fm)Z>B
F~3}X
FE>/7.
X"bx
Ybzx
}HRD
=r&F<
"rj
<RZd
t#u8
 sCF
y1|)
Bj1b
>L&|
)41K
JH$1
M76[h
<oXmK~
z8l<
sk~m
#q^OJ%
SS|H
{Ci@
^Vk
4zeri
ed|g
dAr2
%RR.>
A2n5
wYi$u
=d|g
Nj[>o
_]`<
DbN(0~
5lIm
V3'>U
B0,{
^zjN
Lb~{]
'}?e
B)2d
Vk8$
k1#o
{ffj
OT"y
&87w
s=W`
u'x:>hO8
72>,
K >!
grhG
+g4.
[_V?W
d<yz?
khI}<
==q0
`(>;
k5??\
U/gh>c
bK}|z
-#t.a
h}<h
14k4
mB'mn
`Pk2sq
w>^F
uar/b7
/w=o
r<2U
3OyS
?HhD
3|rF
`hlhE
=RYw
J)"+
3YRC
O/&E
%q5H
>RsW
kjxL
E?W0
lIfy
!h}e
Zv@?/
zG?W
K5kUL7
&un\L 
Kr}{
,P\e
R^.uo
u$V?
_jQB
heO|
F?C{
{ybW
WrF}
\.N+
zy>*
xAjU-9
:|=
`z0*(
W%|]
}e^^5
*Bj~
c$b/h[
=2w\
XA-1%>
;WI#8
o%\fkK
`x6,w<
VV'>
'q>O
k?YD
&2~%|
oluG
;1bxM
FLH)
~?Z/O
Dree
s_WS
*/}I
s*"3a
?89j
r#6D
,//,
]GyF@
9yF!y
nhFp
[I>{
{UyJ
d9sfG
/TD>
Q]~x
d9ykV5
%dqVI
*/.[D^
$/jo.
G*&O
rpiN
QrFu3
npXTL
ywqJn
N_3
nos+8
X|k8
PyQmy
znxQ
`3P.
PFI9
3pg{
,m+g
9H>`
ed_9
2t-[F
n;RH>
r9qT
Xl.w3
e4=`E5M
VL.W
}=Rl
_M~h:f
dQIN~vr
%eEYS
QE([
*J9cF1
TYD)K
T%xV
xzR5
P*3j"O
dj85
xl"5
~S<-
NG`<
EGcF]
nB7E
$bFO
 z0=
m4fN
z&~
^B/E
Vh+*
E;M3
9Z`.
J]Fu
%f%m
]ptb^
jZb~
x0Gh
hWM_
x-PT
Gav}H$z
LSXM
0}`%0}
!W22
iqj<3
yg1k
$PmC
&\{
*fa]
\{0r
gBg"
`=)v
1goa%~A
b?26
7oM9
2vG5^b
#zGV
2DAG
Nb'C&"[7
pv:vK
jHwv
Zwv-x
`w&I
mcbgbsbk
tuFP
oAfpb
JlEV
Tr o
W~w*6
D`d"%
YYEI
j[Fu`X
DFQ_4
fuD{tm
3x3+
YLuf
{=,7
j1z&
@e6R
b!z!
dzN<#
\'^b
px#~
y"~R
.oEjjc
l`r2
:`]|
SK6"z#j
|Z"-
9'XI
f"''qr2g
}1Y,!
dkm%
-D/f
.p.y
uT^!
Iu\u[z
*"~q
P)U*
oiTVNfS
`NV|8
r`yU
&T&=
mTS_
':6XS
gW?5
xj>BM
F/V1
"`wS
2b/G
j=9oP
8n<w
#"=f]QOXW
3<?'
oUlj
wl7!y/V
XitZ
ft3`
J`J]
$t3S
T%9+;
JDOO
E~aK
o;V5
,7+u
T -/
]uer
lEo#
n1r.buSw
{|~ 
6t+a}
.UoN
Imb"
I^An
M-t'
r3`g0
dG~aB
M+2n
LwtG
aWr+A
q&,g
jbO7k81
j6cM6[
Pp<u
Dd$z
D=jN
k.`]
ACxU
aTe<
qBSx5S
41CQB1
%}p#z
vX_u
V,<$
|v*>
D`V/E(
4^!/
U!jj
^O;k=
%o1x
cv~8
sY+"
)fg;
7%rV
zDmk
%V+x
&!g
x\jg w
{Orf
}&Z0{
t[vt|>}
'J2t
]Od`5 F&
S[-Ew
6X4f
MD1d
t;k5Ylf
j'fYV=
C\Gv
D:c'v
D<eo
'v9o
Lb'`
H4t$
?D*8
/"2xKd
Xyd^YQ
fx)*
)`Q_
v`79
}d_9M
:'fqr6
\'w"
a8,E
V%Wal
T{8TD
lGxi0}
R}Us
/AOy
75LMU
D[`;n
wP=T
Kx?xJ
#uE=
~Vil
W_PA
m&V8
Gy]BW R
SYXD
K7VU
Omto
E:]/
Ay<
r~=rU
%K(d
Ll*c
MutyS
ul?\
86'N3
luL7
!vs3
If9;
pf,V
wr{m
SZ)B
map_0_0_0.lstUT
P:x"Qux
@\/:2
southpole.jpgUT
P:x"Qux
cbBkh
8L\\&&&!
KH"$
)c7I
gLT5
"J2>
rm`I}
<%MI$
DW +
FU6A
gQs|
@9w$@D
zAJJ4uPa=yS
kf2n~V
>|cj
5cly
|3n>
H 2Nz
9o12
jSe=Yy&
p;D"N
74j<
z96A
p+1217
5"~3
\.yY
){grO1
e|gA
b[Pf
xv<q
4xr~
>3# 
M7|_
=Y]v/X
j'"=
<;j98
H/ER
/E/F
$r5j
y\db
{-Tq
>ZHO
c kI
6Q)p
'r(4
k:|u6RV
u~iK
}4 8
{,OT[I
,(S#
\_~q
}j"9
J*J
dyV3
= U %
r{3oy
0?gV
s/\H
pkfUxF
2`N}S
vOUW
u^Lm 
jJk"
j%A8
!)2S
K(/IE/B
ILY0
C'W.5k
4h"oJ
2%K^T
 63P
I}u:
! "z
J!e6
Wsw>
b3|X
xq"GTW
rQ{Hs
m<DG
.KcFCY
mW{X
7U,"b,
1sTL
LIx@
v'.`N5
`3c3
2\h
dx,K#
7h"O3I
)|Va
[yf'
b2Bz
CL $<Np
BzK\
od?\
2h qX
(Ac 
AP\/q
$`Z
,z&Y'
+h^_
X4$>,`*[p5A
33Eo
SyJ)
{)UO
@lv-
z,DK
HW*T$rIh
}kkU
vLn"
Q^}Co
VxI7
NE"f4^5R
cN<gE~
V;Ew
`&-d-(
&4g0m^
OmBW
 vb#S
#gI}
DrEr
[]"g$
A&s[Q
?w%V
>sy%
+8-J
9#!r
|A8e
!5:+
@*S<d
|y^H
H`(j
(La8
|W=M
27o\
i-JD
u&OAzCP
sh/
Y#Vckz
w_}=#
j}ER
kfg?v
=xg]ZZ
kJ-8
iYGQ
`aP-0`K8s
TUY2!
]O_,Y
3OIa
`OyE
;}&);4%
'3&'a
@-~z
Iy\3
+z}L
o$`\
{Qy=
0HXe
~m4f
\\G?<
y5w*zRxrGE
nYL8
;x{f;
`\b|
,af"3LA
bE"g
J^o|
x:I'B<
!r`."
liv^25
|-!O@
LXKTi
4/ Z
RgdE
pSkJ2
>2t!
Sz)I
=w>t)
=h9O-vRn
/?uK
LOk7u
%HpwzoL
+QZ0
Z*a(6w*t
xf/:
&(Rq
qV3B
?6elB
6+Mn
GCwQ
LV2 
\ay7
 =2#
'-JsdhV
 mBy
iTXh
>2Jdl
z:Q;
c0+/w|E
qg!x/
KFNx;C
nC'niyV
!t^(
7[g:
C|z&8
9C8Z
baLn
Nzu-
hWsE
`+:S
Pgzi
R>$o?G
>5/#w?
W]F.
Bayw
zNGkm
z15e\I
L&I^x
Cc+m'
O3^[\kt
st^=I
~zUxQ
gXje
Vo56"k
jH$]8(
)wWM
|ntVosz
$'Sm
93GX
YiS$>
FYKC
xlt'
D7n:Bd@
-Px30 
0=6@AD
1e:%j;PU
"ws
}u@/E
v#_*
t:o;
8S/K 
dp<\
hUJzXP
e4E=D
X#\0h
BhsfQ
20oF
7G<f
[;;C
:>?xE
r&fO1w
k{JJ$
K]Yg
g/<T
NU^c
|,y>
+e04
&$Ccz
U[~J(
a^(\I
,~Qp
-/hE
VFV2
v'dPX
! 4$
=6wF
gzC,t9
t}2U
)#5F
6eG_
 -C|
3-R,`@
>w5e
!/8G
7goQ
F1.-
^@NR
o\g0
%yyD
;;x+
tNj-A
iB,^E
]Uj6
Ew!=%
hGhl
crCd
Z0%^
UJ1,
F>EI0|y
($,]
+/dw
IuUd
tIze
/B4i
'gPeN
xR^8
NpUC
TZ[4X
3m5o
CkYh
;-W(
3u#T
3|;7
WvM
.I!g6
@)SFF
pVe6
^yjp?
USOVZ
8K\*
Te*0
$OI'h\
,P~I
fbi?
6VV'
E'3I
/AT!jU
0UL"
h %*
$U/:]
K)t$[G
edJz
xafq
+vqQ8
ck*O
 6CB
1a7AO
z>X.e;c
v:naJ
7q{Z
BOov
1Im^
`XZ9
^[k 
DmQk
978B
Q=F8K\=
:WOe
EZs/
b^}Wa@
=aCP
idyg
+t^[
*<y(!
*y"B
AlUx
.yY;f~V
=5^Q
2TIW
&al@
jIf3
_^;>
L*z&
 -Z:s
:'bSy
ShO:
xDSRE
0/a
YA2e
g4@X@>
c4vV
b7nx
@?-wc
a9Vi
o^qE
dsyE
Z"4U
Tpns
 o'#
O{jz
Mir.
.zhS
";Nq
c@@J/GL
v.oB$
L#J6
BT=P
Ll_[
U@mF1
$o@pAU
Ou#3
)j)Mt
A8T>T
Mvej
{wZ:R
,{A]=w
u6(qI
5)9p
MBy"
9fY>
7j&db
sBsW
|ztW
N~9Y
TL]7
_\3T
~t!)O
&I^Kr
K<}Z
b( Ve
}\,k
~W!v
*u1t(
{qO>
1'zAp
|>xF+<
6y*:
:#PX
M(D44
L*.7
yr;_9
%j+QM
{N^l
k2^|
J?Bq]
}]{[f
EEV6
R~R|VBKJ
HSB ed
4:f,
ZPMelZ
F<fk
c`qg
gUZ8c<(n
^3}]
.|P(
W?7,
AZ8o
((%t
{T$0
6B;X
v/LM=
a+Nc
:HR=b
hIqDH
+:">
!L$m
` #]
rE:@9<
e9TZ
IE`]7'S
QB;~U
~K_n [
 v\/
*~H
4,g/
Oa=B
(vEs
PH/$
wSzJId
0B8hVM*L^
=)U)%
SV1C
EWZ;,
c+ZRi
I^f3)
2WYXS
Xr4T,
0\m#
E#b)
"5_Y^Y
*?42
vXoBC
ea=x
,8M9
r(sA
i3`xk
3v7U
^*]z
|!"
!|pY
"B 4-Z
,?I;
m"*F6
Cv}F
"hHX
D>M&
1ZbcAC
&FPz
<AsE\
4t#QA
EV;z
rUoGB
{C|1kes
qocs
e>B"O
S3lkzdq
Ep+au!
MZ\j
U{y
{ Ni
"}7M
SOu,{
U.%4
lhrn
-tr[PD
+|$w
ch<>
;rg
5sZO(
xpi<
XB~L
xh2]H
h`)X|B4)
+A;W
FQ:d
9@ U>
ZDNN,=e
y\Rb
m8jBXid
"[R[
xy-W
H7+]
|J@^
p(!Z
Fnq]
$:!Z=
:g\k
(;{GU
Lhq^v
/ck\
&T c
*0NSH
}/U=^
!"d)
a]Pq
B.n
(d0]
etyW@\
!)LRJyg_
]062Y
2hFC
-(_Lh
~/sd&
g: Bl
X:[;9=
Io]?
0S4t
bz<E~
@ke.
\iH6
Y<NLjXd
]V4
8*ud/
Dp $i
\~1WS
muZj
3;B.
AR[dT
1 mf
UCg'
r 0.
^RPU2
:$MY=
wP9t
k~yF
OiHS
a6:
/.t5
^+4S
}u%Q
E2P>
zPr}gJ
tZ3y
QK;ugy#
j'QQ
<h<d
_<[J[
 t}r
Z`)^
)s"r
N^PEO2c
gEl9"M
G!FB
P14$
\=y'
QEk6\
LYE\
1:}{
K+ij
z=)nX
i-"!
{^o(3M
9l(~C
%;A@3
ZY(f
>xmB
m|+';
@&4L0
zhht
{7CM
pxhj
aZUF
:|`d6
VL\^+
:/_d
I_T|'
NO4#
847<
9}G|y
ydgF
"f]%
LO*Ct8
APPl
18x8
:R@%
iPo?}
vYR/
pOv[
1Jtt
@S)G
B[6x
l*H!
?Kb,
-x'`
Bu;WMTm"
=23S
Wh?-,
}?}[\>m
T`|Te\!
{7$|
O%w:H"
cxl:?
I'R/W/0
k8->
9WWGI
[%Ot
OQb1~
t^xJ
7=1&L
,"wi
7@#[
Cq"V
7:YO
A%)q
X=iJ
P_^9a/
'u@0
b.-B
Ku{)@Y,5
BY*:
$>]k
(nc'
y]4m
"r_0
t |M%g
Z\'[/
!sAy
!G_0
E.C>
]gg.
d,9~
j}ss<
%-1u
m(0P4
wbP}
]xy=bI7
S4SF
;-f0
M0$>^
eEPf
oj?I
HJY\
C6-E
w#[7
+>|/
9;q3z
x[Cq
-w-2y
WRq{
DsKZ
&`=M
ylvo
gM'hO
,~4]7
Zyd8
: uB
,[9o~3h.
m1]vZ(gB:
cnB^
NT;
O|i'g3
NzO`~
mxGm
<*S\
jqm'
q|[l
j%L{
hV8w
N9M7
I*WK
Ny1u0&
%d>y
x+cy
e6[[
S{g]
"v`3F
(h#Bp"P
9z)8
!.{D
Pr_g
G|w$M
hPkV>6
5N]V
"f#b
*0mX
yDOc{vW^
{+$J4.
_fdh`|
xKcOq
]S+G
$MUFC
.$js
/~k1
O],r
(Ot^
A?2]
bTg]
mESHK b
?,e~
Ebf<
.#Z=a
0u=^
?6T
X7|5
X3YK
USC5
,CNeh
`=ma^|
iHes
DSO1
uy9`EV
1HiBbB
<~||q
%IgdT
,(ZN]
pMd~
_4,)]&
C\6
8x$V
=^#q
BXKs
1{^n
t+{'C
CcZ&PTsb
rijY
|< J
-HZu!
9`Zj
1aT(4
#gd0]
7*a9
2? o
kVh_
W!)o4*,-
b(]`a
dmp^
v~iL
j-m^
R`p-
I&t^
I i.%
P%zQB
_<z'
paU=g
/)h7
raU;
|lPD
ZdSG
i,hW
;^eJ
n6 l
X2Fv 
e9>l;
6)cf4W
Xj~
bQ)E^
IrF#
/,.3
=<|p
+V?6h
</]"
q9gR
bfS@
ol.S
KL=o
l)7w_
KBlR
Vbi,
.H6w
,zS[}k
Ro&b
#_9r/G
lW7'
(X:i4Xj
xDTb
"?%AisC
=9YAwS
r"!v
A5'FN
T+$)
s|H?
Mr'{
3l+M
`/k3Sb
vRd
dfPZ
K]-r>~v
xr#l
3YT..N8
kTX`
qg+.m
$W}#
5]Xu
l6A*
uKKR
tOwa
unf#
|&?\
5!s-
]=z7
^=[A
y%g-
wzSy
!,8.
sCdN
g?-y
5VeJ
  1F8
>"Hs*
UxQ?
b{{{
P\\v
Up0~
%T,k
eS^r
2X2G{
qg8 
L0czq
i|A1M
xnRg
Kf=Lf
r'.l
<&^Hp
i4(&
rh(N
O"}Uf
U2%Y#CtJ
ddgS<:WS
\nV*
#bz-r
<\v-
b}m_
Uzkg/P
9"uf
8\zMJ
PEo,;
_')|
zwE-
lHQf5
kTl)!
8[}'
]fMZ
"Z} 6
Ff!3DW
IE7b@\
JWs:ll
io.X
WW`cB)
W|Bo
S+[t
WHMp
\710
aRELA9?
jfow
*IW*
wsu6>L
`?)9
Ih^X
1*^X8
6A(0
g3{q
^(t*O5
($u
MNCt
^E*5Y6
wcEZ
L,HFj&T
T90[3
^m5S
_kW~^
@oh^
C(v"
]~mw,
CuW"
~LJFW
EAfn
rp>.d
Vrh?.
7WRVZ
 P6&
vc+]
'vvZx
3v$X(
,=[)
q4oi\
8(n+k
1B/%
7/1X
&Ss_@R(oe
X,zT
m}-c
ULiyE
!=a.G
H+#h
mH)(
F-DHL
HM[)
NP~LHV,
wT9,)
 HKLd
fG\*"
l8^s
&](|-x
Kf*.4
}1Un
B+KW
hM7hi<@
b3PHQZ
>t }
Y%U<
fml1=
]S.`
.:`2
7x^*
LR>U
_ui~d
C>u5
&"_,
&9k6
mC&!
gIN`M<
+xRO83
JhGN
:fn=
$uMB
QNnh
m.#,6
yDW5
]zsu
>?=c
VN!78
+#C_gK
[[Ob
&aCV%
w1H2
%TFCv
bWF'
tHPWx
.4I*
8RrU^
.,Bd
+W<.D
+h]e
ykg g
b\bP
jJQig
L^6`
.Lhw
6iHK
nXU+
h8!9
ZR~R1
snpi
@6hQ(o+
qjj(O
ei7p
ar35C
*;4t
'[[JX
Q)Ho
Y_g
gXk6
{:`B
^\/
2Nf-
2xFQ
rv3*^1R
_q*K
^<YD`
3+a+4
CCB?
Rr#d
5y$w
%fF[`dY@
.=JU
 z)**
;K7[C
U-  
_pmI
@+K}
m_|9V
&Y\b
w,0w?
lvO{d
/>N?7
P_\cU
%=.U8
j(g7
81:=Sn{
ts{Z
e:+"
wqa7(
"#.5
3/LPYl
qkVVoY
wmV6d
TCUs
kq=t^
rOLUY
T/5%
$&&v
e_|?
IU$(
1"BBqM
0~cI
&p$%
*#yc>
K/L 
%HHF_
DM1E|
DP@w##
B<e'
W<Y
FLb`
yKi2
5sL9
;.`?{
C"H)
otTg
;}Mp
VF{J
9u]JM
`Gn:
+Z8c?
[LkgE2
<+*-o
`sK=
BhrR
YUUO
;gOS2
8f{S<N
Wy8t
@[=}
uX?]D<
$hW:5
TVP0
t_qx
(r>z
2{[y!
R7*w
3&zK
 9H
>fPF
&[i#W
\&/4mF
;zf@/3J
UFYUU
{%sX_
TC6FS*)
_cFd
&T6[
M4TX
#j-0
t;6x
1z~1;Y
/~H7
GJ/1=<
=TH;
hEKS
!5rt
^\:]
:>[y@
hgvN
edR5
gw>_+
C31m
vqvn~
~_dgC
n;"dC\
A{7(T
NwTS!:
uTf\->
x:}u
08 "5V
&04u9z
*.*i
8[\S
<QR)
#S2X
w>cZ
Vg?T
F6xI
SsHhQUU
6P]kM/
5g\]x
6}Ud?*
HxPT6
BlnC5
eJ-R
:q}~
dAnu
a}2
]]m 
~$UL
Cw`*
[L:
wYBJZ:
NYr%
\@@B@R
7s~3
p[HH
bfxW)U%e
(^va
;MhP>P
/iG2@
P=f'
.6n>
hgKpyR
y8v
k6$WQ
PLZD
@oO>
W\_m
g<~x
j lJ
,sRe
=jmS
C__c)(
nj ;
B9=}
)d|k
d8&uL$
A!7THe
UGku
]5',>
y@2jX
)kO%
%wL-L
4tB+
?_ux
J5]:
rb@IZ
3jjZ
poles/southpole/0/0/map_0_0_0.c3h
)"  
!*"*J
 HhI
-998
:/m: i
wCcs
:{8:E%
RWm"9xT
rP0Jx
=wGd-a8!c
z-iF
V2f0gJ
MQ|9FH
iHsHD
`,:
e7Ph
$Lbi
Wh2 
cUyH
oTL)0
vMM)
!36)
mftH
^keX
( gV
<4`
q,7=
h7*>
R5+4
-F}f;
\Y-sK
8cTi
2!e#
1$:.
I,,Mm
+3}(
LjC2ur
V2;-
9F#'
v"&m 
:BvoL#[
WqPH
LM^Y
ytmC
Voi"7
,*=!':|7`
r{4E
.8UvP
#R5o
[0n1{ 
TM.|
AY5_
lWYU
ZIT\.
Zx'"
u!G|
8ud/
Yqm#2D[
jde;
%xW2H6
g9Cc
L14R.
M/Ul
1@FH'
-wM3
w_>M
klym
?8m 
ar#<]
d0l#;K
6A l
6Jg<Ri+
wazoQ
,(m.A
|h,|Nct
]GK\
sky/stars.bin4
4T"Z
+n1=
i;I<R
2_Oo);F
q}.l
WN,C[
s`O&
O-Kf
{ohs
3Cg5
$;MD
U#l)
D:MB
.P7^
{fZvP
9030
Q_IN
(,.qF
P/LM
G&7A
s4Wgq
IBI,
3ay}
,v3E
>tk7LO
`Wyv
1OHw
r2X~
kEB-WP
EmDK[
|~`
ulP
VY0Z
s^ zs
%F{g
Ipo#xOFZ
AMQ!C
P_kl
matA
a0-Q@
|M2a{
6`;|p}
VPV8
}z7<
y2Ep
MBbo
3$hg%
4Z!/
5vu0
e <<
e>p/
6Q{/
=fO6
yCS+
Ncgf
\%xn"
+vN
haB}
e|xs
o&b^
[cG8x
B>w%
?@nD
sJG-
uGs
E/\}
DT y
K-Yz
P?z/Ef
'AJC
]Rd
O~0Z
+k=p
g)C}u
l2C-
Vi:c'2;
1:S
7v1._2
\v+
sN2;!
<s,%
l8v:
MIxT
b%t}
Cp^0
c3F%
b}Nq
I`GwC
v>GZ
K4A~
g/Zb
bB~l
u/3I
^1?W
>zyu4l
|&:9
L/c4
<~v
eGX3E
`GC%
>;9c
$)S
PiF}J*
 Y~~
__kb
+w'P
BWH=bv
3se;aC
cnx0
{31?
J0WV
>q|>
0Ui)
2xpS
nn.v
FWy."IB
DB-ez
;5i'
*s?W
}qy'9t
vSd 
XK>5
LPD;
Q(z`O
D[s>
J?Eo
spm!0
)8'P
x}<:
c2te
;UG}
;Wc3
-OC6$
p=x!:
0vS1C
R{>uKf'
v/I{2
npea
B3j&
BUBm
1Qpe
`>fa.
}&U=
f{d)
"q\{y
B.a',
j9vf|+
XE'B]
^mtsn
{@bd
!7`E
qxv
SO5,
y*vBw
r$>/
N)a~
Q(G/
)(Z/
mFHx
p<Os
BcU"
|H]5
~E6v
0tsEo
QB''%
a<JH%#d
+D{I*3#
TeJr
:@zk
o*ZFu
(NOs
elyN"X_
c621
U#Ev
6q<?q5
)(q4
UN|gp
xfW[:
&lbs^
7P8!P
G"D<
\pCnR4;
1{~}
2fSz"!o2{
Z2XL
Xs"Y
itrW
0C2['
R=_'
Xz?J
gY k
*?#i
PD~\ Fy
[Cis|
Nq<{
B>\w.u
_hUO6V
\dm)
b<O;
{7VQ
-W2)
rEntu0
\]{~-
<ot[F
Y7r4
X0OA
8Qk<
|}hx
'Ti={(qS
c2vU
e9W'c
|}3X
/pVKg
VO@&
OoJ-W
,raO
{ ?/
D:h:
ky~k
 g;[)yz
`^Vo
yN[^F
Db:g
wk6R
Np4lKYU
Z$f ?
7SP?9
gQ_g
ZL6o
ur!r2l!
4]PT
Qc3z
l`s,
sWsj
y[.[
Cpgxz
?}7#
Np6-
ZJC^.
SSS7
EQ@X
1xXC'
,)plA
cCC3
7x#/
|j^3
|.yv!
y^2M
hwJ-
O44f++v
yVq8Gf
N{^@
B^}[D
_V{
jTMk
`OWl
EBWj
WL/'
AI18
boLf
}VDgk
KMRr
<r\kx
MO.}
uC1[
RMm0
I3Q`0
d<X(/A3c
K>&R\
q;vi
g)C}
V:=D
=rlC
PrE f
O;gD
<O09
x~4:
<rk]
2S)m
4Lfc
m8KA
E>>>
h6qq!
pn|.`
Wv'#/[w
BD<gYz
le~
#)]{
.\@#
'dG2s
rssU
J:fW*
46r*vE
Wx)F
CNd2k
vwMcs
azY/
mNYoM
NV[-
,}lR
YMK3z
~f<w
&rSU
#SSN
(Ay:f
b6qK1
]arkoq<
|^C+
Up<{
k)0^
;#+"
D8sw
}T1k
HV6N
Z,^
lXC4[
Egf\
t~p<w
_6Sh
;W@lY
c]7\
tcqv5
RsXR
}{7:
#4pC
3tj](
M>VQ}
%p.d
j?#oW#
va#)
UQ'(4
t|J f
/Kv"
I`YfM
9jV'
.wqR
Fp>T
+8C]
\zn3-3
#iS%
eN ?
Scn+:
jL}%}
h5XG
-a,mB8
Vwf5
8B_7LC
ig%B{h
P(*mm%
ssh!
em:O
Up.l
BY]q
c\vQ
q%v$
A~pe
\^L
[B&W.!
E.]B
s0{e
z 5}U
f1fO
]lq$
kzqM
T:v(
JvWm?f
@j#x
[,eh
99-
-fuTa
)m8:
sAk?
-4bA
XRbX<
we)Et=C~M
8PVg
zZ6X
NKa(
 m)Q
};>qn
Ja[g)
Vg+%v
zg&XU
cEk1{
1zO3
xMf{
?)aO
|h@&
Owavc
vHk&w
tlAgC
"1{V
cHWQ
w{;z
/IvLn
q<?j, 
tm/]
[M#&
a6nt
B(Bw
wO( 
_=SY
@n\WH
.AIf
@2p.
.+Oj+V2
I}e7
<_y/
YB.)
|(FN
_qZ>
zq%ut
;kXF%f
'yM1t
7}8Nn"d
f1r8vx}
!_cv
e}*j
Yz`+}
UozP
cpLL
OtA.u
Q5*?Q
hZ#;)%
mXF'Sl
XE*w
2s1{$
){he
YmsmvN-
S/fk
Gn1U
rlHm
'E`V)
G(."
K(R'
,'YO
|gEc
etNV
FR{/rZ
`m)y
)|.o_;
=8A$
syE<=
:0'-
zb~'Sj
%x]$V
idab
{[xn
&{f?
z8SsM
|J|1
#Wl
c'gJ/
lVj"
hEv$
AiJ$W
Nph@
?oL+m
FoJW
7chJ
>8-g
q'I|o
m"1k
>*4!
LC\x
gD's\6
1v)C
VT5&
&R=vF
._3G
Uel|C
Fiv"
j{+t&,
7e3M
Rt:5
_u!Zo
@CnM
1^4F7^
fL}a*
)r0&
Fy(c
_,<h
%Up^
W:qL
)8qR
~;l-N5
t'JZ
-;v
?ga"
<rk)E
=j8K8w
|L)s
((ig
mK'e
XG&[ 
*JYo
 Gp7
4nO<z
6&5m>f+RSI
hgfi
nLYC
O;Dr
3XDv;
'Elv
dg#|
E{$1
};z=yM+
}'mn
o\:I
sjB:}
(cx)
3W-;
%dc=
'Q<
/c0{
8+KD
osFn>R
et,d
g##w
~upXl
58g}
ANS"
47T"7tid
*.Xx
ur8l
<+yZ
S/qW
"?RoH
I,a'
}^j'
Ypj4
{>;XG-&k
|v'IN
3GkH2I
"zD1
{n}_;
zJ/r
4/.
MtX%
0W?Ao
vM2v
/kN*
m=&R+
r<g|Vd
r9fk~
JpZ2(U:
BZoa
`t*f
gCV%
[j}?
CZx^o
C^/7
_V?E~
o*#C_R
TIzj
CSJQ*
eM[w
=|XH
9X7ye%
'~^.
cT5k=z
u,y65 
~~s"
rcZ]
R+H`
gpj;
lCYt
j8AA
NE8r
\8v0
D|^hL
gh ?
Md"~5
.:WKo
+W!_
M"^nu
'%p"
eZLC
V8JJ!4=
|OZ;i
i8YG
:{T"I
8Mw}
;<Wr
.6v#
}O|l
%+jl
gO8cF
,M0{
4*j,
M^9$
C3Zdv
*)8)
-8qG7p
Y?69o"
jF41iwp
inKi
L<E?
mMKj,
M,nK"
*w=M
5$c?
+Vtj
D<}S?Z
BOV 
/?_I
q8;U
|H>=q
n1rc-e
=m^l
I8WTR
Vtqng
6.Xk
v6w'
n|lA
yJr7
2u;)X
c#(i`
*hEy*f
P`|D
rHi{
c[2-U
XLr>
rz~}
~bo5
nI!_xP
f+f+
+ymi
wc6f
f/bS
joRbk
L&41
y-qpwT3
o|.&
[<r=
+^&
=y^G
q"V))
Z^Gy/
HeA3
azo0
Trb.
>+'_
q'~8
 8il
w|z)=
G"/h
[iHj)
c(4\
SXK^
_v!o<fmV
^BOM
ys>q
HgR[w
YA^iZ
IfpN
yg:X
_z,<*
hU\'r
qlf$
2sc'
<p]&
^S8w
sd*X|@=i
;fo_-c{d
t*]&
4q}0fO-
|t'#
`*]-
x3/^
TrYy
5FT1}
]]lq
YFOJ
x_Z#}37
+9rp
RA%m,
O7nW`?
lEnS
<bH
7`xu0
r)3T
r0ra
Xa})I
u$Xf
W=[C
;RJU]s
<z~E
@vB-)
~u&}
3$uh
6r,9
cIx*
Sj}I
sji@
=I2y6r
0zF-4'
Y)oq
[#_5t
rvXc
YuFO
ak=h
*x#1
)I|1
U$;B
]NPZG.
}~_U
p~Mwe
0+kv
xRx=
#j/8
]6{+szQ
'y.;
XFg1
8<E>
FnF1p
|OIB
lSM3z
oZ> [
>m4Y
.5M`
WBSt
O,>Ce{
U4<F
!BVYp
&wm#f
Z-d,l
WL>D
~c1[c
{8W@E
*;06
_kI,%
30u5-
0W|3O(
c&;$
(&Q3
Wg-=
6N\Lq
'wug
 Z:-
"V{W
:nJ3
)%W7
l|d_
<Ay/'
]Xkk
TB%*I
i+)D
>}X/
<s#2/
<3Od/
/+C?
x)f{
6kV^
z:~!
Aa<<
w.8A
=@ME
IRtl
dCO<XL
Y94*
2$;\
md*
#{}C
]R(L
)Qe#
T;F&n:
^U4Z
88|K 
J:n:
%cZ1
*#iX
Bx&)
O_0rv
EJZN
/FNA
"&Fc
qzja
~R'`
lS8I
}Ql&_n
r-]M
$>Ki2
<!s&](
0rq2
1U_Z
k=5i
Kz=+
r-X~
5rb_
fo-c
[({Q
G-Bh
R1n6
l-jo
<g\N
uT`R
RGa$j
4Gd%
ph'}
|8W'
HbI)
=Z44*
xgm#]
C}vV
(xn|j
}4aT:2
m%<F
\T^NW
V"Syv%
1qtm
S]F=O
gA&E
H5v&6
9:<t
gr9v
Tsp?
4K;%
~S^G
}s~.-
5ROW
s(i.
yixv
OOmC\
vzbl
S1O\r=
d8XA;
wNF
:z:8
ns%<
Stx_
%GM%{
rwF*
/,1<
&{%<im[
#<Ko
pc=2
bLNY
:(1q
hrwI
h y6
)Dg@7k
f\_E.
]XcAO
}?\P;
3}G39U.
8J?y
zR8=
<r?6
F6Ou
f}<u
F@?TZ
4@/f
B?[6
5khp
Ohi!
u\MK
{Szgw
>dU4
f;bgA3
k<)1
I]72
n.#Woc
g)y`
|y~I
y,TH
VV`?~+
8>d4
~)4-
EN?d
]oZ#E
"<1~
Mxn[
'`-aym
,NhOcf
 75s
rgwR"
m,j-
;|jH
pgz3
;r%?
6=PJ
d^ X
Iu9)
 *}&
MV3\
!jU?
Z*U
m(-x-XD
^A/%
[5xP
+bIT
dJ.g^
PGNa
!{</
>q{~
2%^ 
y<--5A_
1Udz
m)%d
2W5h
_4e"
B_=:
K;I3
d&)4
Mk)x
R }]8
-x>vvR
JRhN3x
xJ><cW
u-tK
Lq~h
3E.'Y
-w7
=|1MI
g<eh
=(i;
j=-T*
S+`C
AE9s
W{E&
t;S[
images/arrow.pngPK
images/border_full.pngPK
images/eow_pattern_b.pngPK
poles/northpole/0/0/map_0_0_0.c3bPK
poles/northpole/0/0/map_0_0_0.c3hPK
poles/southpole/0/0/map_0_0_0.c3bPK
3jjZ
poles/southpole/0/0/map_0_0_0.c3hPK
sky/stars.binPK
//animatableTexture_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec2 position;
  highp vec2 texcoord;
struct Transform {
  highp mat4 modelViewProjectionMatrix;
struct VertexOut {
  highp vec2 texcoord;
attribute highp vec2 vertexInput_position;
attribute highp vec2 vertexInput_texcoord;
uniform Transform view;
varying highp vec2 v_texcoord;
void main ()
  VertexOut outputValue_1;
  VertexIn vertexInput_2;
  vertexInput_2.position = vertexInput_position;
  vertexInput_2.texcoord = vertexInput_texcoord;
  outputValue_1.texcoord = vertexInput_2.texcoord;
  highp vec4 tmpvar_3;
  tmpvar_3.zw = vec2(0.0, 1.0);
  tmpvar_3.xy = vertexInput_2.position;
  gl_Position = (view.modelViewProjectionMatrix * tmpvar_3);
  v_texcoord = outputValue_1.texcoord;
//animatableTexture_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
struct Variant {
  highp float textureWeight;
varying highp vec2 v_texcoord;
uniform Variant variant;
uniform sampler2D textureMap;
uniform sampler2D variantTextureMap;
void main ()
  lowp vec4 tmpvar_1;
  tmpvar_1 = texture2D (textureMap, v_texcoord);
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (variantTextureMap, v_texcoord);
  highp vec4 tmpvar_3;
  tmpvar_3 = vec4((1.0 - variant.textureWeight));
  highp vec4 tmpvar_4;
  tmpvar_4 = vec4(variant.textureWeight);
  gl_FragColor = ((tmpvar_3 * tmpvar_1) + (tmpvar_4 * tmpvar_2));
//animatedTexturedGroundCover_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec2 vertex_pos;
  highp vec2 texture2D;
struct View {
  highp mat4 modelViewProjectionMatrix;
  highp float tilePerPoint;
struct VertexOut {
  highp vec2 texture2D;
attribute highp vec2 vertex_attributes_vertex_pos;
attribute highp vec2 vertex_attributes_texture;
uniform View view;
varying highp vec2 v_texture;
void main ()
  VertexOut outputValue_1;
  VertexIn vertex_attributes_2;
  vertex_attributes_2.vertex_pos = vertex_attributes_vertex_pos;
  vertex_attributes_2.texture2D = vertex_attributes_texture;
  highp vec4 tmpvar_3;
  tmpvar_3.zw = vec2(0.0, 1.0);
  tmpvar_3.xy = vertex_attributes_2.vertex_pos;
  gl_Position = (view.modelViewProjectionMatrix * tmpvar_3);
  outputValue_1.texture2D = vertex_attributes_2.texture2D;
  v_texture = outputValue_1.texture2D;
//animatedTexturedGroundCover_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
struct Variation {
  highp float textureVariation;
varying highp vec2 v_texture;
uniform Variation variation;
uniform sampler2D landSamplerA;
uniform sampler2D landSamplerB;
void main ()
  mediump vec3 landRGB_1;
  mediump vec4 landVariant_2;
  mediump vec4 land_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (landSamplerA, v_texture);
  land_3 = tmpvar_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (landSamplerB, v_texture);
  landVariant_2 = tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = ((vec3((1.0 - variation.textureVariation)) * land_3.xyz) + (vec3(variation.textureVariation) * landVariant_2.xyz));
  landRGB_1 = tmpvar_6;
  mediump vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = landRGB_1;
  gl_FragColor = tmpvar_7;
//buildingFacadeDepth_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec4 vertexAndTexture;
  highp vec4 normalAndStyleIndex;
struct View {
  highp mat4 modelViewProjectionMatrix;
  highp float tilePerPoint;
struct Scale {
  highp float scale;
  highp vec3 tileOrigin;
  highp vec3 tileSize;
attribute highp vec4 vertex_input_vertexAndTexture;
attribute highp vec4 vertex_input_normalAndStyleIndex;
uniform View view;
uniform Scale scale;
void main ()
  VertexIn vertex_input_1;
  vertex_input_1.vertexAndTexture = vertex_input_vertexAndTexture;
  vertex_input_1.normalAndStyleIndex = vertex_input_normalAndStyleIndex;
  highp vec3 tmpvar_2;
  tmpvar_2 = (scale.tileOrigin + (scale.tileSize * vertex_input_1.vertexAndTexture.xyz));
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xy = tmpvar_2.xy;
  tmpvar_3.z = (tmpvar_2.z * scale.scale);
  gl_Position = (view.modelViewProjectionMatrix * tmpvar_3);
//buildingFacadeDepth_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
void main ()
  gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);
//buildingFlat_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec4 vertexAndStyleIndex;
struct View {
  highp mat4 modelViewProjectionMatrix;
  highp float tilePerPoint;
struct Building {
  highp vec4 color[8];
  highp vec3 origin;
  highp vec3 size;
struct VertexOut {
  lowp vec4 color;
attribute highp vec4 vertex_input_vertexAndStyleIndex;
uniform View view;
uniform Building building;
varying lowp vec4 v_color;
void main ()
  VertexOut outputValue_1;
  VertexIn vertex_input_2;
  vertex_input_2.vertexAndStyleIndex = vertex_input_vertexAndStyleIndex;
  highp int tmpvar_3;
  tmpvar_3 = int((vertex_input_2.vertexAndStyleIndex.w * 256.0));
  highp vec3 tmpvar_4;
  tmpvar_4 = (building.origin + (building.size * vertex_input_2.vertexAndStyleIndex.xyz));
  highp vec4 tmpvar_5;
  tmpvar_5.zw = vec2(0.0, 1.0);
  tmpvar_5.xy = tmpvar_4.xy;
  highp vec4 tmpvar_6;
  tmpvar_6 = building.color[tmpvar_3];
  outputValue_1.color = tmpvar_6;
  gl_Position = (view.modelViewProjectionMatrix * tmpvar_5);
  gl_Position.z = ((1.0 - (2.0 * tmpvar_4.z)) * gl_Position.w);
  v_color = outputValue_1.color;
//buildingFlat_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
varying lowp vec4 v_color;
void main ()
  gl_FragColor = v_color;
//buildingFlatStroke_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec4 vertexAndStyleIndex;
  highp vec4 offsetAndTexture;
struct View {
  highp mat4 modelViewProjectionMatrix;
  highp float tilePerPoint;
struct Building {
  highp vec4 polygonColor[8];
  highp vec4 strokeColor[8];
  highp float lineWidth[8];
  highp float offsetScale;
  highp vec3 tileOrigin;
  highp vec3 tileSize;
struct VertexOut {
  lowp vec4 strokeColor;
  lowp vec4 polygonColor;
  highp float strokeTexture;
attribute highp vec4 vertex_input_vertexAndStyleIndex;
attribute highp vec4 vertex_input_offsetAndTexture;
uniform View view;
uniform Building building;
varying lowp vec4 v_strokeColor;
varying lowp vec4 v_polygonColor;
varying highp float v_strokeTexture;
void main ()
  VertexOut outputValue_1;
  VertexIn vertex_input_2;
  vertex_input_2.vertexAndStyleIndex = vertex_input_vertexAndStyleIndex;
  vertex_input_2.offsetAndTexture = vertex_input_offsetAndTexture;
  highp int tmpvar_3;
  tmpvar_3 = int((65535.0 * vertex_input_2.vertexAndStyleIndex.w));
  highp vec4 tmpvar_4;
  tmpvar_4 = building.strokeColor[tmpvar_3];
  outputValue_1.strokeColor = tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = building.polygonColor[tmpvar_3];
  outputValue_1.polygonColor = tmpvar_5;
  outputValue_1.strokeTexture = vertex_input_2.offsetAndTexture.z;
  highp vec3 tmpvar_6;
  tmpvar_6 = (building.tileOrigin + (vertex_input_2.vertexAndStyleIndex.xyz * building.tileSize));
  highp vec4 tmpvar_7;
  tmpvar_7.zw = vec2(0.0, 1.0);
  tmpvar_7.xy = (tmpvar_6.xy + ((vertex_input_2.offsetAndTexture.xy * vec2(building.offsetScale)) * vec2(building.lineWidth[tmpvar_3])));
  gl_Position = (view.modelViewProjectionMatrix * tmpvar_7);
  gl_Position.z = ((1.0 - (2.0 * tmpvar_6.z)) * gl_Position.w);
  v_strokeColor = outputValue_1.strokeColor;
  v_polygonColor = outputValue_1.polygonColor;
  v_strokeTexture = outputValue_1.strokeTexture;
//buildingFlatStroke_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
varying lowp vec4 v_strokeColor;
varying lowp vec4 v_polygonColor;
varying highp float v_strokeTexture;
uniform sampler2D alphaTexture;
void main ()
  lowp float polygonTextureCoord_1;
  highp vec2 tmpvar_2;
  tmpvar_2.y = 0.0;
  tmpvar_2.x = v_strokeTexture;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (alphaTexture, tmpvar_2);
  highp float tmpvar_4;
  tmpvar_4 = clamp (v_strokeTexture, 0.0, 1.0);
  polygonTextureCoord_1 = tmpvar_4;
  lowp vec4 tmpvar_5;
  tmpvar_5.xyz = mix (v_strokeColor.xyz, v_polygonColor.xyz, polygonTextureCoord_1);
  tmpvar_5.w = ((tmpvar_3.x + (polygonTextureCoord_1 * 
    (1.0 - tmpvar_3.x)
  )) * v_strokeColor.w);
  gl_FragColor = tmpvar_5;
//buildingPointyRoofDepth_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec4 vertexAndStyleIndex;
  highp vec4 normalAndIsFacade;
struct View {
  highp mat4 modelViewProjectionMatrix;
  highp float tilePerPoint;
struct Scale {
  highp float scale;
  highp vec3 tileOrigin;
  highp vec3 tileSize;
attribute highp vec4 vertex_input_vertexAndStyleIndex;
attribute highp vec4 vertex_input_normalAndIsFacade;
uniform View view;
uniform Scale scale;
void main ()
  VertexIn vertex_input_1;
  vertex_input_1.vertexAndStyleIndex = vertex_input_vertexAndStyleIndex;
  vertex_input_1.normalAndIsFacade = vertex_input_normalAndIsFacade;
  highp vec3 tmpvar_2;
  tmpvar_2 = (scale.tileOrigin + (scale.tileSize * vertex_input_1.vertexAndStyleIndex.xyz));
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xy = tmpvar_2.xy;
  tmpvar_3.z = (tmpvar_2.z * scale.scale);
  gl_Position = (view.modelViewProjectionMatrix * tmpvar_3);
//buildingPointyRoofDepth_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
void main ()
  gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);
//buildingShadow_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec2 position;
  highp vec2 texcoord;
struct View {
  highp mat4 modelViewProjectionMatrix;
  highp float tilePerPoint;
struct VertexOut {
  highp vec2 texture2D;
attribute highp vec2 vertex_input_position;
attribute highp vec2 vertex_input_texcoord;
uniform View view;
varying highp vec2 v_texture;
void main ()
  VertexOut outputValue_1;
  VertexIn vertex_input_2;
  vertex_input_2.position = vertex_input_position;
  vertex_input_2.texcoord = vertex_input_texcoord;
  highp vec4 tmpvar_3;
  tmpvar_3.zw = vec2(0.0, 1.0);
  tmpvar_3.x = vertex_input_2.position.x;
  tmpvar_3.y = vertex_input_2.position.y;
  gl_Position = (view.modelViewProjectionMatrix * tmpvar_3);
  outputValue_1.texture2D = vertex_input_2.texcoord;
  v_texture = outputValue_1.texture2D;
//buildingShadow_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
struct Shadow {
  highp float brightness;
  highp vec4 color;
varying highp vec2 v_texture;
uniform Shadow shadow;
uniform sampler2D textureSampler;
void main ()
  lowp vec4 tmpvar_1;
  tmpvar_1 = texture2D (textureSampler, v_texture).xxxx;
  highp vec4 tmpvar_2;
  tmpvar_2 = (shadow.color * tmpvar_1);
  gl_FragColor = tmpvar_2;
//buildingTopDepth_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec4 vertexAndStyleIndex;
struct View {
  highp mat4 modelViewProjectionMatrix;
  highp float tilePerPoint;
struct Scale {
  highp float scale;
  highp vec3 tileOrigin;
  highp vec3 tileSize;
attribute highp vec4 vertex_input_vertexAndStyleIndex;
uniform View view;
uniform Scale scale;
void main ()
  highp vec3 v_1;
  VertexIn vertex_input_2;
  vertex_input_2.vertexAndStyleIndex = vertex_input_vertexAndStyleIndex;
  highp vec3 tmpvar_3;
  tmpvar_3 = (scale.tileOrigin + (scale.tileSize * vertex_input_2.vertexAndStyleIndex.xyz));
  v_1.xy = tmpvar_3.xy;
  v_1.z = (tmpvar_3.z * scale.scale);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = v_1;
  gl_Position = (view.modelViewProjectionMatrix * tmpvar_4);
//buildingTopDepth_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
void main ()
  gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);
//clut_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec2 position;
  highp vec2 texcoord;
struct View {
  highp mat4 modelViewProjectionMatrix;
  highp float tilePerPoint;
struct VertexOut {
  highp vec2 texcoord;
attribute highp vec2 vertexInput_position;
attribute highp vec2 vertexInput_texcoord;
uniform View view;
varying highp vec2 v_texcoord;
void main ()
  VertexOut outputValue_1;
  VertexIn vertexInput_2;
  vertexInput_2.position = vertexInput_position;
  vertexInput_2.texcoord = vertexInput_texcoord;
  outputValue_1.texcoord = vertexInput_2.texcoord;
  highp vec4 tmpvar_3;
  tmpvar_3.zw = vec2(0.0, 1.0);
  tmpvar_3.xy = vertexInput_2.position;
  gl_Position = (view.modelViewProjectionMatrix * tmpvar_3);
  v_texcoord = outputValue_1.texcoord;
//clut_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
struct Variation {
  highp float variation;
varying highp vec2 v_texcoord;
uniform Variation variation;
uniform sampler2D textureMap;
uniform sampler2D clutMap;
void main ()
  lowp vec4 o_color_1;
  lowp vec4 clutColor_2;
  mediump vec2 tB_3;
  mediump vec2 t_4;
  mediump vec4 color_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (textureMap, v_texcoord);
  color_5 = tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_7 = ((color_5.xy * vec2(0.9375, 0.9375)) + vec2(0.03125, 0.03125));
  t_4.y = tmpvar_7.y;
  t_4.x = (tmpvar_7.x * 0.0625);
  mediump float tmpvar_8;
  tmpvar_8 = floor(color_5.z);
  mediump vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8;
  tmpvar_9.y = (tmpvar_8 + 1.0);
  tB_3 = (tmpvar_9 * vec2(0.9375, 0.9375));
  mediump vec2 tmpvar_10;
  tmpvar_10 = (t_4.xx + tB_3);
  mediump vec4 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = t_4.y;
  tmpvar_11.z = tmpvar_10.y;
  tmpvar_11.w = t_4.y;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (clutMap, tmpvar_11.xy);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (clutMap, tmpvar_11.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = mix (tmpvar_12, tmpvar_13, ((color_5.z * 0.9375) - tB_3.x));
  clutColor_2 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = mix (color_5, clutColor_2, variation.variation);
  o_color_1 = tmpvar_15;
  gl_FragColor = o_color_1;
//colorGlyphWithNormalHalo_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec2 position;
  highp vec2 texture2D;
  highp vec2 alphaAndHaloSizeInPixels;
  mediump vec4 color;
  mediump vec4 haloColor;
struct View {
  highp mat4 matrix;
struct VertexOut {
  highp vec2 texture2D;
  lowp vec4 color;
  lowp vec4 haloColor;
  highp float alpha;
  highp float haloSizeInPixels;
attribute highp vec2 vertex_attributes_position;
attribute highp vec2 vertex_attributes_texture;
attribute highp vec2 vertex_attributes_alphaAndHaloSizeInPixels;
attribute mediump vec4 vertex_attributes_color;
attribute mediump vec4 vertex_attributes_haloColor;
uniform View view;
varying highp vec2 v_texture;
varying lowp vec4 v_color;
varying lowp vec4 v_haloColor;
varying highp float v_alpha;
varying highp float v_haloSizeInPixels;
void main ()
  VertexIn vertex_attributes_1;
  vertex_attributes_1.position = vertex_attributes_position;
  vertex_attributes_1.texture2D = vertex_attributes_texture;
  vertex_attributes_1.alphaAndHaloSizeInPixels = vertex_attributes_alphaAndHaloSizeInPixels;
  vertex_attributes_1.color = vertex_attributes_color;
  vertex_attributes_1.haloColor = vertex_attributes_haloColor;
  VertexOut outputValue_2;
  highp float tmpvar_3;
  tmpvar_3 = (vertex_attributes_1.alphaAndHaloSizeInPixels.x / 65535.0);
  highp vec4 tmpvar_4;
  tmpvar_4.zw = vec2(0.0, 1.0);
  tmpvar_4.x = vertex_attributes_1.position.x;
  tmpvar_4.y = vertex_attributes_1.position.y;
  outputValue_2.texture2D = vertex_attributes_1.texture2D;
  highp vec4 tmpvar_5;
  tmpvar_5.x = vertex_attributes_1.color.x;
  tmpvar_5.y = vertex_attributes_1.color.y;
  tmpvar_5.z = vertex_attributes_1.color.z;
  tmpvar_5.w = (vertex_attributes_1.color.w * tmpvar_3);
  outputValue_2.color = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.x = vertex_attributes_1.haloColor.x;
  tmpvar_6.y = vertex_attributes_1.haloColor.y;
  tmpvar_6.z = vertex_attributes_1.haloColor.z;
  tmpvar_6.w = (vertex_attributes_1.haloColor.w * tmpvar_3);
  outputValue_2.haloColor = tmpvar_6;
  outputValue_2.haloSizeInPixels = ((vertex_attributes_1.alphaAndHaloSizeInPixels.y - 32767.5) * 0.01);
  gl_Position = (view.matrix * tmpvar_4);
  v_texture = outputValue_2.texture2D;
  v_color = outputValue_2.color;
  v_haloColor = outputValue_2.haloColor;
  v_alpha = outputValue_2.alpha;
  v_haloSizeInPixels = outputValue_2.haloSizeInPixels;
//colorGlyphWithNormalHalo_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
struct Channel {
  highp int channel;
varying highp vec2 v_texture;
varying lowp vec4 v_color;
varying lowp vec4 v_haloColor;
varying highp float v_alpha;
varying highp float v_haloSizeInPixels;
uniform Channel channel;
uniform sampler2D textureAtlas;
void main ()
  mediump vec4 mask_1;
  lowp vec4 out_color_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (textureAtlas, v_texture);
  mask_1 = tmpvar_3;
  if ((channel.channel == 0)) {
    out_color_2 = vec4(0.0, 0.0, 0.0, 0.0);
  } else {
    out_color_2 = mask_1;
  };
  gl_FragColor = out_color_2;
//colorGlyphWithOuterHalo_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec2 position;
  highp vec2 texture2D;
  highp vec2 alphaAndHaloSizeInPixels;
  mediump vec4 color;
  mediump vec4 haloColor;
struct View {
  highp mat4 matrix;
struct VertexOut {
  highp vec2 texture2D;
  lowp vec4 color;
  lowp vec4 haloColor;
  highp float alpha;
  highp float haloSizeInPixels;
attribute highp vec2 vertex_attributes_position;
attribute highp vec2 vertex_attributes_texture;
attribute highp vec2 vertex_attributes_alphaAndHaloSizeInPixels;
attribute mediump vec4 vertex_attributes_color;
attribute mediump vec4 vertex_attributes_haloColor;
uniform View view;
varying highp vec2 v_texture;
varying lowp vec4 v_color;
varying lowp vec4 v_haloColor;
varying highp float v_alpha;
varying highp float v_haloSizeInPixels;
void main ()
  VertexIn vertex_attributes_1;
  vertex_attributes_1.position = vertex_attributes_position;
  vertex_attributes_1.texture2D = vertex_attributes_texture;
  vertex_attributes_1.alphaAndHaloSizeInPixels = vertex_attributes_alphaAndHaloSizeInPixels;
  vertex_attributes_1.color = vertex_attributes_color;
  vertex_attributes_1.haloColor = vertex_attributes_haloColor;
  VertexOut outputValue_2;
  highp float tmpvar_3;
  tmpvar_3 = (vertex_attributes_1.alphaAndHaloSizeInPixels.x / 65535.0);
  highp vec4 tmpvar_4;
  tmpvar_4.zw = vec2(0.0, 1.0);
  tmpvar_4.x = vertex_attributes_1.position.x;
  tmpvar_4.y = vertex_attributes_1.position.y;
  outputValue_2.texture2D = vertex_attributes_1.texture2D;
  highp vec4 tmpvar_5;
  tmpvar_5.x = vertex_attributes_1.color.x;
  tmpvar_5.y = vertex_attributes_1.color.y;
  tmpvar_5.z = vertex_attributes_1.color.z;
  tmpvar_5.w = (vertex_attributes_1.color.w * tmpvar_3);
  outputValue_2.color = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.x = vertex_attributes_1.haloColor.x;
  tmpvar_6.y = vertex_attributes_1.haloColor.y;
  tmpvar_6.z = vertex_attributes_1.haloColor.z;
  tmpvar_6.w = (vertex_attributes_1.haloColor.w * tmpvar_3);
  outputValue_2.haloColor = tmpvar_6;
  outputValue_2.haloSizeInPixels = ((vertex_attributes_1.alphaAndHaloSizeInPixels.y - 32767.5) * 0.01);
  gl_Position = (view.matrix * tmpvar_4);
  v_texture = outputValue_2.texture2D;
  v_color = outputValue_2.color;
  v_haloColor = outputValue_2.haloColor;
  v_alpha = outputValue_2.alpha;
  v_haloSizeInPixels = outputValue_2.haloSizeInPixels;
//colorGlyphWithOuterHalo_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
struct Channel {
  highp int channel;
varying highp vec2 v_texture;
varying lowp vec4 v_color;
varying lowp vec4 v_haloColor;
varying highp float v_alpha;
varying highp float v_haloSizeInPixels;
uniform Channel channel;
uniform sampler2D textureAtlas;
void main ()
  mediump vec4 mask_1;
  lowp vec4 out_color_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (textureAtlas, v_texture);
  mask_1 = tmpvar_3;
  if ((channel.channel == 0)) {
    out_color_2 = vec4(0.0, 0.0, 0.0, 0.0);
  } else {
    out_color_2 = mask_1;
  };
  gl_FragColor = out_color_2;
//debug_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec3 position;
struct View {
  highp mat4 modelViewProjection;
attribute highp vec3 vertexInput_position;
uniform View view;
void main ()
  VertexIn vertexInput_1;
  vertexInput_1.position = vertexInput_position;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = vertexInput_1.position;
  gl_Position = (view.modelViewProjection * tmpvar_2);
//debug_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
struct Style {
  highp vec4 color;
uniform Style style;
void main ()
  highp vec4 tmpvar_1;
  tmpvar_1 = style.color;
  gl_FragColor = tmpvar_1;
//debugPoints_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec3 position;
struct View {
  highp mat4 modelViewProjection;
  highp float pointsize;
  highp vec4 color;
attribute highp vec3 vertexInput_position;
uniform View view;
void main ()
  VertexIn vertexInput_1;
  vertexInput_1.position = vertexInput_position;
  gl_PointSize = view.pointsize;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = vertexInput_1.position;
  gl_Position = (view.modelViewProjection * tmpvar_2);
//debugPoints_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
struct View {
  highp mat4 modelViewProjection;
  highp float pointsize;
  highp vec4 color;
uniform View view;
void main ()
  highp vec4 tmpvar_1;
  tmpvar_1 = view.color;
  gl_FragColor = tmpvar_1;
//diffuseBuilding_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec4 vertexAndTexture;
  highp vec4 normalAndStyleIndex;
struct View {
  highp mat4 modelViewProjectionMatrix;
  highp float tilePerPoint;
struct Scale {
  highp float scale;
  highp vec3 tileOrigin;
  highp vec3 tileSize;
struct Style {
  highp vec4 color[8];
  highp vec4 alternateColor[8];
  highp vec2 shininessAndSpecularity[8];
  highp float textureCoordScale[8];
  highp float textureLightness;
  highp float brightness;
  highp vec3 cameraPositionInTileSpace;
  highp float fogFactor;
struct Gradient {
  highp vec2 equation[8];
struct Lighting {
  highp vec4 lightDirection[3];
  highp vec4 lightColor[3];
  highp vec4 lightSpecularColor;
  highp vec4 ambientLightColor;
struct VertexOut {
  highp float fogCoordinate;
  lowp vec4 fogColor;
  lowp vec4 unlitColor;
  lowp vec4 diffuseColor;
  highp vec3 normal;
  highp vec3 position;
  highp vec2 texture2D;
  lowp float gradient;
  highp float shininess;
  highp float specularity;
  highp vec3 clipPosition;
attribute highp vec4 vertex_input_vertexAndTexture;
attribute highp vec4 vertex_input_normalAndStyleIndex;
uniform View view;
uniform Scale scale;
uniform Style style;
uniform Gradient gradient;
uniform Lighting lighting;
varying highp float v_fogCoordinate;
varying lowp vec4 v_fogColor;
varying lowp vec4 v_unlitColor;
varying lowp vec4 v_diffuseColor;
varying highp vec3 v_normal;
varying highp vec3 v_position;
varying highp vec2 v_texture;
varying lowp float v_gradient;
varying highp float v_shininess;
varying highp float v_specularity;
varying highp vec3 v_clipPosition;
void main ()
  VertexIn vertex_input_1;
  vertex_input_1.vertexAndTexture = vertex_input_vertexAndTexture;
  vertex_input_1.normalAndStyleIndex = vertex_input_normalAndStyleIndex;
  VertexOut outputValue_2;
  highp int tmpvar_3;
  tmpvar_3 = int((vertex_input_1.normalAndStyleIndex.w * 127.5));
  outputValue_2.normal = vertex_input_1.normalAndStyleIndex.xyz;
  highp vec4 tmpvar_4;
  tmpvar_4 = style.color[tmpvar_3];
  outputValue_2.unlitColor = tmpvar_4;
  outputValue_2.shininess = style.shininessAndSpecularity[tmpvar_3].x;
  outputValue_2.specularity = style.shininessAndSpecularity[tmpvar_3].y;
  outputValue_2.position = (scale.tileOrigin + (scale.tileSize * vertex_input_1.vertexAndTexture.xyz));
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xy = outputValue_2.position.xy;
  tmpvar_5.z = (outputValue_2.position.z * scale.scale);
  gl_Position = (view.modelViewProjectionMatrix * tmpvar_5);
  outputValue_2.clipPosition = (gl_Position.xyz / gl_Position.www);
  highp vec3 normal_6;
  normal_6 = outputValue_2.normal;
  lowp vec3 lightContributions_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = lighting.ambientLightColor.xyz;
  lightContributions_7 = tmpvar_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = (vec3(clamp (dot (lighting.lightDirection[0].xyz, normal_6), 0.0, 1.0)) * lighting.lightColor[0].xyz);
  lightContributions_7 = (lightContributions_7 + tmpvar_9);
  highp vec3 tmpvar_10;
  tmpvar_10 = (vec3(clamp (dot (lighting.lightDirection[1].xyz, normal_6), 0.0, 1.0)) * lighting.lightColor[1].xyz);
  lightContributions_7 = (lightContributions_7 + tmpvar_10);
  highp vec3 tmpvar_11;
  tmpvar_11 = (vec3(clamp (dot (lighting.lightDirection[2].xyz, normal_6), 0.0, 1.0)) * lighting.lightColor[2].xyz);
  lightContributions_7 = (lightContributions_7 + tmpvar_11);
  lowp vec4 tmpvar_12;
  tmpvar_12.xyz = (outputValue_2.unlitColor.xyz * lightContributions_7);
  tmpvar_12.w = outputValue_2.unlitColor.w;
  outputValue_2.diffuseColor = tmpvar_12;
  highp float tmpvar_13;
  highp vec2 gradient_14;
  gradient_14 = gradient.equation[tmpvar_3];
  tmpvar_13 = ((gradient_14.x * outputValue_2.position.z) + gradient_14.y);
  outputValue_2.gradient = tmpvar_13;
  highp float tmpvar_15;
  tmpvar_15 = floor((vertex_input_1.vertexAndTexture.w * 256.0));
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_15;
  tmpvar_16.y = floor(((
    (vertex_input_1.vertexAndTexture.w * 256.0)
   - tmpvar_15) * 256.0));
  outputValue_2.texture2D = floor((tmpvar_16 * vec2(style.textureCoordScale[tmpvar_3])));
  v_fogCoordinate = outputValue_2.fogCoordinate;
  v_fogColor = outputValue_2.fogColor;
  v_unlitColor = outputValue_2.unlitColor;
  v_diffuseColor = outputValue_2.diffuseColor;
  v_normal = outputValue_2.normal;
  v_position = outputValue_2.position;
  v_texture = outputValue_2.texture2D;
  v_gradient = outputValue_2.gradient;
  v_shininess = outputValue_2.shininess;
  v_specularity = outputValue_2.specularity;
  v_clipPosition = outputValue_2.clipPosition;
//diffuseBuilding_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
struct Scale {
  highp float scale;
  highp vec3 tileOrigin;
  highp vec3 tileSize;
struct Style {
  highp vec4 color[8];
  highp vec4 alternateColor[8];
  highp vec2 shininessAndSpecularity[8];
  highp float textureCoordScale[8];
  highp float textureLightness;
  highp float brightness;
  highp vec3 cameraPositionInTileSpace;
  highp float fogFactor;
struct Fade {
  highp vec2 fadeEquation;
  highp float alphaFactor;
varying highp float v_fogCoordinate;
varying lowp vec4 v_fogColor;
varying lowp vec4 v_unlitColor;
varying lowp vec4 v_diffuseColor;
varying highp vec3 v_normal;
varying highp vec3 v_position;
varying highp vec2 v_texture;
varying lowp float v_gradient;
varying highp float v_shininess;
varying highp float v_specularity;
varying highp vec3 v_clipPosition;
uniform Scale scale;
uniform Style style;
uniform Fade fade;
uniform sampler2D textureSampler;
void main ()
  lowp float styleBrightness_1;
  styleBrightness_1 = style.brightness;
  lowp float scale_2;
  scale_2 = scale.scale;
  highp vec2 tmpvar_3;
  tmpvar_3 = fade.fadeEquation;
  lowp vec4 texturedColor_4;
  lowp vec4 textureColor_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (textureSampler, v_texture);
  mediump vec4 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  textureColor_5 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8.xyz = (v_diffuseColor.xyz * vec3(mix (1.0, (
    min (v_gradient, 0.9799805)
   * styleBrightness_1), scale_2)));
  tmpvar_8.w = v_diffuseColor.w;
  lowp vec4 tmpvar_9;
  tmpvar_9 = (mix (v_unlitColor, tmpvar_8, scale_2) * textureColor_5);
  texturedColor_4.xyz = tmpvar_9.xyz;
  lowp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = clamp (((v_clipPosition.y * tmpvar_3.x) + tmpvar_3.y), fade.alphaFactor, 1.0);
  tmpvar_10 = tmpvar_11;
  texturedColor_4.w = (tmpvar_9.w * tmpvar_10);
  gl_FragColor = texturedColor_4;
//diffuseBuildingPointyRoof_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec4 vertexAndStyleIndex;
  highp vec4 normalAndIsFacade;
struct Skyfog {
  highp vec4 fogSlope;
  highp float fogOffset;
  highp float screenHeight;
  highp float skyOffset;
  highp vec4 skyBottomColor;
  highp vec4 skyTopColor;
struct View {
  highp mat4 modelViewProjectionMatrix;
  highp float tilePerPoint;
struct Scale {
  highp float scale;
  highp vec3 tileOrigin;
  highp vec3 tileSize;
struct Style {
  highp vec4 color[8];
  highp vec4 alternateColor[8];
  highp vec2 shininessAndSpecularity[8];
  highp float textureCoordScale[8];
  highp float textureLightness;
  highp float brightness;
  highp vec3 cameraPositionInTileSpace;
  highp float fogFactor;
struct Gradient {
  highp vec2 equation[8];
struct Lighting {
  highp vec4 lightDirection[3];
  highp vec4 lightColor[3];
  highp vec4 lightSpecularColor;
  highp vec4 ambientLightColor;
struct VertexOut {
  highp float fogCoordinate;
  lowp vec4 fogColor;
  lowp vec4 unlitColor;
  lowp vec4 diffuseColor;
  highp vec3 normal;
  highp vec3 position;
  highp vec2 texture2D;
  lowp float gradient;
  highp float shininess;
  highp float specularity;
  highp vec3 clipPosition;
attribute highp vec4 vertex_input_vertexAndStyleIndex;
attribute highp vec4 vertex_input_normalAndIsFacade;
uniform Skyfog skyfog;
uniform View view;
uniform Scale scale;
uniform Style style;
uniform Gradient gradient;
uniform Lighting lighting;
varying highp float v_fogCoordinate;
varying lowp vec4 v_fogColor;
varying lowp vec4 v_unlitColor;
varying lowp vec4 v_diffuseColor;
varying highp vec3 v_normal;
varying highp vec3 v_position;
varying highp vec2 v_texture;
varying lowp float v_gradient;
varying highp float v_shininess;
varying highp float v_specularity;
varying highp vec3 v_clipPosition;
void main ()
  VertexOut outputValue_1;
  VertexIn vertex_input_2;
  vertex_input_2.vertexAndStyleIndex = vertex_input_vertexAndStyleIndex;
  vertex_input_2.normalAndIsFacade = vertex_input_normalAndIsFacade;
  VertexOut outputValue_3;
  lowp float isFacade_4;
  highp int tmpvar_5;
  tmpvar_5 = int((65535.0 * vertex_input_2.vertexAndStyleIndex.w));
  highp float tmpvar_6;
  tmpvar_6 = vertex_input_2.normalAndIsFacade.w;
  isFacade_4 = tmpvar_6;
  outputValue_3.normal = vertex_input_2.normalAndIsFacade.xyz;
  highp vec4 tmpvar_7;
  tmpvar_7 = mix (style.alternateColor[tmpvar_5], style.color[tmpvar_5], isFacade_4);
  outputValue_3.unlitColor = tmpvar_7;
  outputValue_3.shininess = style.shininessAndSpecularity[tmpvar_5].x;
  outputValue_3.specularity = style.shininessAndSpecularity[tmpvar_5].y;
  outputValue_3.position = (scale.tileOrigin + (scale.tileSize * vertex_input_2.vertexAndStyleIndex.xyz));
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xy = outputValue_3.position.xy;
  tmpvar_8.z = (outputValue_3.position.z * scale.scale);
  gl_Position = (view.modelViewProjectionMatrix * tmpvar_8);
  highp vec3 normal_9;
  normal_9 = outputValue_3.normal;
  lowp vec3 lightContributions_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = lighting.ambientLightColor.xyz;
  lightContributions_10 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = (vec3(clamp (dot (lighting.lightDirection[0].xyz, normal_9), 0.0, 1.0)) * lighting.lightColor[0].xyz);
  lightContributions_10 = (lightContributions_10 + tmpvar_12);
  highp vec3 tmpvar_13;
  tmpvar_13 = (vec3(clamp (dot (lighting.lightDirection[1].xyz, normal_9), 0.0, 1.0)) * lighting.lightColor[1].xyz);
  lightContributions_10 = (lightContributions_10 + tmpvar_13);
  highp vec3 tmpvar_14;
  tmpvar_14 = (vec3(clamp (dot (lighting.lightDirection[2].xyz, normal_9), 0.0, 1.0)) * lighting.lightColor[2].xyz);
  lightContributions_10 = (lightContributions_10 + tmpvar_14);
  lowp vec4 tmpvar_15;
  tmpvar_15.xyz = (outputValue_3.unlitColor.xyz * lightContributions_10);
  tmpvar_15.w = outputValue_3.unlitColor.w;
  outputValue_3.diffuseColor = tmpvar_15;
  highp float tmpvar_16;
  highp vec2 gradient_17;
  gradient_17 = gradient.equation[tmpvar_5];
  tmpvar_16 = ((gradient_17.x * outputValue_3.position.z) + gradient_17.y);
  outputValue_3.gradient = tmpvar_16;
  outputValue_3.texture2D = vec2(0.0, 0.0);
  outputValue_1 = outputValue_3;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = outputValue_3.position;
  outputValue_1.fogCoordinate = (style.fogFactor * (dot (skyfog.fogSlope, tmpvar_18) + skyfog.fogOffset));
  lowp vec4 tmpvar_19;
  highp vec4 tmpvar_20;
  tmpvar_20 = mix (skyfog.skyBottomColor, skyfog.skyTopColor, clamp ((
    ((0.5 + ((0.5 * gl_Position.y) / gl_Position.w)) - skyfog.skyOffset)
   * 10.0), 0.0, 1.0));
  tmpvar_19 = tmpvar_20;
  outputValue_1.fogColor = tmpvar_19;
  v_fogCoordinate = outputValue_1.fogCoordinate;
  v_fogColor = outputValue_1.fogColor;
  v_unlitColor = outputValue_1.unlitColor;
  v_diffuseColor = outputValue_1.diffuseColor;
  v_normal = outputValue_1.normal;
  v_position = outputValue_1.position;
  v_texture = outputValue_1.texture2D;
  v_gradient = outputValue_1.gradient;
  v_shininess = outputValue_1.shininess;
  v_specularity = outputValue_1.specularity;
  v_clipPosition = outputValue_1.clipPosition;
//diffuseBuildingPointyRoof_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
struct Scale {
  highp float scale;
  highp vec3 tileOrigin;
  highp vec3 tileSize;
struct Style {
  highp vec4 color[8];
  highp vec4 alternateColor[8];
  highp vec2 shininessAndSpecularity[8];
  highp float textureCoordScale[8];
  highp float textureLightness;
  highp float brightness;
  highp vec3 cameraPositionInTileSpace;
  highp float fogFactor;
struct Fade {
  highp vec2 fadeEquation;
  highp float alphaFactor;
varying highp float v_fogCoordinate;
varying lowp vec4 v_fogColor;
varying lowp vec4 v_unlitColor;
varying lowp vec4 v_diffuseColor;
varying highp vec3 v_normal;
varying highp vec3 v_position;
varying highp vec2 v_texture;
varying lowp float v_gradient;
varying highp float v_shininess;
varying highp float v_specularity;
varying highp vec3 v_clipPosition;
uniform Scale scale;
uniform Style style;
uniform Fade fade;
void main ()
  lowp float styleBrightness_1;
  styleBrightness_1 = style.brightness;
  lowp float scale_2;
  scale_2 = scale.scale;
  highp vec2 tmpvar_3;
  tmpvar_3 = fade.fadeEquation;
  lowp vec4 combinedColor_4;
  lowp vec4 tmpvar_5;
  tmpvar_5.xyz = (v_diffuseColor.xyz * vec3(mix (1.0, (
    min (v_gradient, 0.9799805)
   * styleBrightness_1), scale_2)));
  tmpvar_5.w = v_diffuseColor.w;
  lowp vec4 tmpvar_6;
  tmpvar_6 = mix (v_unlitColor, tmpvar_5, scale_2);
  combinedColor_4.xyz = tmpvar_6.xyz;
  lowp float tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = clamp (((v_clipPosition.y * tmpvar_3.x) + tmpvar_3.y), fade.alphaFactor, 1.0);
  tmpvar_7 = tmpvar_8;
  combinedColor_4.w = (tmpvar_6.w * tmpvar_7);
  lowp vec4 color_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = mix (combinedColor_4, v_fogColor, clamp (v_fogCoordinate, 0.0, 1.0));
  color_9 = tmpvar_10;
  gl_FragColor = color_9;
//diffuseBuildingTop_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec4 vertexAndStyleIndex;
struct View {
  highp mat4 modelViewProjectionMatrix;
  highp float tilePerPoint;
struct Scale {
  highp float scale;
  highp vec3 tileOrigin;
  highp vec3 tileSize;
struct Style {
  highp vec4 color[8];
  highp vec4 alternateColor[8];
  highp vec2 shininessAndSpecularity[8];
  highp float textureCoordScale[8];
  highp float textureLightness;
  highp float brightness;
  highp vec3 cameraPositionInTileSpace;
  highp float fogFactor;
struct Gradient {
  highp vec2 equation[8];
struct Lighting {
  highp vec4 lightDirection[3];
  highp vec4 lightColor[3];
  highp vec4 lightSpecularColor;
  highp vec4 ambientLightColor;
struct VertexOut {
  highp float fogCoordinate;
  lowp vec4 fogColor;
  lowp vec4 unlitColor;
  lowp vec4 diffuseColor;
  highp vec3 normal;
  highp vec3 position;
  highp vec2 texture2D;
  lowp float gradient;
  highp float shininess;
  highp float specularity;
  highp vec3 clipPosition;
attribute highp vec4 vertex_input_vertexAndStyleIndex;
uniform View view;
uniform Scale scale;
uniform Style style;
uniform Gradient gradient;
uniform Lighting lighting;
varying highp float v_fogCoordinate;
varying lowp vec4 v_fogColor;
varying lowp vec4 v_unlitColor;
varying lowp vec4 v_diffuseColor;
varying highp vec3 v_normal;
varying highp vec3 v_position;
varying highp vec2 v_texture;
varying lowp float v_gradient;
varying highp float v_shininess;
varying highp float v_specularity;
varying highp vec3 v_clipPosition;
void main ()
  VertexIn vertex_input_1;
  vertex_input_1.vertexAndStyleIndex = vertex_input_vertexAndStyleIndex;
  VertexOut outputValue_2;
  highp int tmpvar_3;
  tmpvar_3 = int((vertex_input_1.vertexAndStyleIndex.w * 256.0));
  highp vec4 tmpvar_4;
  tmpvar_4 = style.color[tmpvar_3];
  outputValue_2.unlitColor = tmpvar_4;
  outputValue_2.shininess = style.shininessAndSpecularity[tmpvar_3].x;
  outputValue_2.specularity = style.shininessAndSpecularity[tmpvar_3].y;
  outputValue_2.normal = vec3(0.0, 0.0, 1.0);
  outputValue_2.position = (scale.tileOrigin + (scale.tileSize * vertex_input_1.vertexAndStyleIndex.xyz));
  outputValue_2.position.z = (outputValue_2.position.z * scale.scale);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = outputValue_2.position;
  gl_Position = (view.modelViewProjectionMatrix * tmpvar_5);
  outputValue_2.clipPosition = (gl_Position.xyz / gl_Position.www);
  lowp vec3 lightContributions_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = lighting.ambientLightColor.xyz;
  lightContributions_6 = tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = (vec3(clamp (lighting.lightDirection[0].z, 0.0, 1.0)) * lighting.lightColor[0].xyz);
  lightContributions_6 = (lightContributions_6 + tmpvar_8);
  highp vec3 tmpvar_9;
  tmpvar_9 = (vec3(clamp (lighting.lightDirection[1].z, 0.0, 1.0)) * lighting.lightColor[1].xyz);
  lightContributions_6 = (lightContributions_6 + tmpvar_9);
  highp vec3 tmpvar_10;
  tmpvar_10 = (vec3(clamp (lighting.lightDirection[2].z, 0.0, 1.0)) * lighting.lightColor[2].xyz);
  lightContributions_6 = (lightContributions_6 + tmpvar_10);
  lowp vec4 tmpvar_11;
  tmpvar_11.xyz = (outputValue_2.unlitColor.xyz * lightContributions_6);
  tmpvar_11.w = outputValue_2.unlitColor.w;
  outputValue_2.diffuseColor = tmpvar_11;
  if ((outputValue_2.position.z < 1e-08)) {
    highp float tmpvar_12;
    tmpvar_12 = mix (0.935, 1.0, scale.scale);
    outputValue_2.gradient = tmpvar_12;
  } else {
    highp float tmpvar_13;
    highp vec2 gradient_14;
    gradient_14 = gradient.equation[tmpvar_3];
    tmpvar_13 = ((gradient_14.x * outputValue_2.position.z) + gradient_14.y);
    outputValue_2.gradient = tmpvar_13;
  };
  outputValue_2.texture2D = vertex_input_1.vertexAndStyleIndex.xy;
  v_fogCoordinate = outputValue_2.fogCoordinate;
  v_fogColor = outputValue_2.fogColor;
  v_unlitColor = outputValue_2.unlitColor;
  v_diffuseColor = outputValue_2.diffuseColor;
  v_normal = outputValue_2.normal;
  v_position = outputValue_2.position;
  v_texture = outputValue_2.texture2D;
  v_gradient = outputValue_2.gradient;
  v_shininess = outputValue_2.shininess;
  v_specularity = outputValue_2.specularity;
  v_clipPosition = outputValue_2.clipPosition;
//diffuseBuildingTop_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
struct Style {
  highp vec4 color[8];
  highp vec4 alternateColor[8];
  highp vec2 shininessAndSpecularity[8];
  highp float textureCoordScale[8];
  highp float textureLightness;
  highp float brightness;
  highp vec3 cameraPositionInTileSpace;
  highp float fogFactor;
struct Scale {
  highp float scale;
  highp vec3 tileOrigin;
  highp vec3 tileSize;
struct Fade {
  highp vec2 fadeEquation;
  highp float alphaFactor;
varying highp float v_fogCoordinate;
varying lowp vec4 v_fogColor;
varying lowp vec4 v_unlitColor;
varying lowp vec4 v_diffuseColor;
varying highp vec3 v_normal;
varying highp vec3 v_position;
varying highp vec2 v_texture;
varying lowp float v_gradient;
varying highp float v_shininess;
varying highp float v_specularity;
varying highp vec3 v_clipPosition;
uniform Style style;
uniform Scale scale;
uniform Fade fade;
void main ()
  lowp float styleBrightness_1;
  styleBrightness_1 = style.brightness;
  lowp float scale_2;
  scale_2 = scale.scale;
  highp vec2 tmpvar_3;
  tmpvar_3 = fade.fadeEquation;
  lowp vec4 c_4;
  lowp vec4 tmpvar_5;
  tmpvar_5.xyz = (v_diffuseColor.xyz * vec3(mix (1.0, (
    min (v_gradient, 0.9799805)
   * styleBrightness_1), scale_2)));
  tmpvar_5.w = v_diffuseColor.w;
  lowp vec4 tmpvar_6;
  tmpvar_6 = mix (v_unlitColor, tmpvar_5, scale_2);
  c_4.xyz = tmpvar_6.xyz;
  lowp float tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = clamp (((v_clipPosition.y * tmpvar_3.x) + tmpvar_3.y), fade.alphaFactor, 1.0);
  tmpvar_7 = tmpvar_8;
  c_4.w = (tmpvar_6.w * tmpvar_7);
  gl_FragColor = c_4;
//diffuseLandmark_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec4 position;
  highp vec2 texture2D;
  highp vec4 normalAndStyleIndex;
struct View {
  highp mat4 modelViewProjectionMatrix;
  highp float tilePerPoint;
struct Scale {
  highp float scale;
  highp vec3 tileOrigin;
  highp vec3 tileSize;
struct Style {
  highp vec4 color[8];
  highp vec4 alternateColor[8];
  highp vec2 shininessAndSpecularity[8];
  highp float textureCoordScale[8];
  highp float textureLightness;
  highp float brightness;
  highp vec3 cameraPositionInTileSpace;
  highp float fogFactor;
struct Gradient {
  highp vec2 equation[8];
struct Lighting {
  highp vec4 lightDirection[3];
  highp vec4 lightColor[3];
  highp vec4 lightSpecularColor;
  highp vec4 ambientLightColor;
struct VertexOut {
  highp float fogCoordinate;
  lowp vec4 fogColor;
  lowp vec4 unlitColor;
  lowp vec4 diffuseColor;
  highp vec3 normal;
  highp vec3 position;
  highp vec2 texture2D;
  lowp float gradient;
  highp float shininess;
  highp float specularity;
  highp vec3 clipPosition;
attribute highp vec4 vertex_input_position;
attribute highp vec2 vertex_input_texture;
attribute highp vec4 vertex_input_normalAndStyleIndex;
uniform View view;
uniform Scale scale;
uniform Style style;
uniform Gradient gradient;
uniform Lighting lighting;
varying highp float v_fogCoordinate;
varying lowp vec4 v_fogColor;
varying lowp vec4 v_unlitColor;
varying lowp vec4 v_diffuseColor;
varying highp vec3 v_normal;
varying highp vec3 v_position;
varying highp vec2 v_texture;
varying lowp float v_gradient;
varying highp float v_shininess;
varying highp float v_specularity;
varying highp vec3 v_clipPosition;
void main ()
  VertexIn vertex_input_1;
  vertex_input_1.position = vertex_input_position;
  vertex_input_1.texture2D = vertex_input_texture;
  vertex_input_1.normalAndStyleIndex = vertex_input_normalAndStyleIndex;
  VertexOut outputValue_2;
  highp int tmpvar_3;
  tmpvar_3 = int((vertex_input_1.normalAndStyleIndex.w * 127.5));
  outputValue_2.normal = vertex_input_1.normalAndStyleIndex.xyz;
  highp vec4 tmpvar_4;
  tmpvar_4 = style.color[tmpvar_3];
  outputValue_2.unlitColor = tmpvar_4;
  outputValue_2.shininess = style.shininessAndSpecularity[tmpvar_3].x;
  outputValue_2.specularity = style.shininessAndSpecularity[tmpvar_3].y;
  outputValue_2.position = (scale.tileOrigin + (scale.tileSize * vertex_input_1.position.xyz));
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xy = outputValue_2.position.xy;
  tmpvar_5.z = (outputValue_2.position.z * scale.scale);
  gl_Position = (view.modelViewProjectionMatrix * tmpvar_5);
  outputValue_2.clipPosition = (gl_Position.xyz / gl_Position.www);
  highp vec3 normal_6;
  normal_6 = outputValue_2.normal;
  lowp vec3 lightContributions_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = lighting.ambientLightColor.xyz;
  lightContributions_7 = tmpvar_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = (vec3(clamp (dot (lighting.lightDirection[0].xyz, normal_6), 0.0, 1.0)) * lighting.lightColor[0].xyz);
  lightContributions_7 = (lightContributions_7 + tmpvar_9);
  highp vec3 tmpvar_10;
  tmpvar_10 = (vec3(clamp (dot (lighting.lightDirection[1].xyz, normal_6), 0.0, 1.0)) * lighting.lightColor[1].xyz);
  lightContributions_7 = (lightContributions_7 + tmpvar_10);
  highp vec3 tmpvar_11;
  tmpvar_11 = (vec3(clamp (dot (lighting.lightDirection[2].xyz, normal_6), 0.0, 1.0)) * lighting.lightColor[2].xyz);
  lightContributions_7 = (lightContributions_7 + tmpvar_11);
  lowp vec4 tmpvar_12;
  tmpvar_12.xyz = (outputValue_2.unlitColor.xyz * lightContributions_7);
  tmpvar_12.w = outputValue_2.unlitColor.w;
  outputValue_2.diffuseColor = tmpvar_12;
  highp float tmpvar_13;
  highp vec2 gradient_14;
  gradient_14 = gradient.equation[tmpvar_3];
  tmpvar_13 = ((gradient_14.x * outputValue_2.position.z) + gradient_14.y);
  outputValue_2.gradient = tmpvar_13;
  outputValue_2.texture2D = vertex_input_1.texture2D;
  v_fogCoordinate = outputValue_2.fogCoordinate;
  v_fogColor = outputValue_2.fogColor;
  v_unlitColor = outputValue_2.unlitColor;
  v_diffuseColor = outputValue_2.diffuseColor;
  v_normal = outputValue_2.normal;
  v_position = outputValue_2.position;
  v_texture = outputValue_2.texture2D;
  v_gradient = outputValue_2.gradient;
  v_shininess = outputValue_2.shininess;
  v_specularity = outputValue_2.specularity;
  v_clipPosition = outputValue_2.clipPosition;
//diffuseLandmark_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
struct Scale {
  highp float scale;
  highp vec3 tileOrigin;
  highp vec3 tileSize;
struct Style {
  highp vec4 color[8];
  highp vec4 alternateColor[8];
  highp vec2 shininessAndSpecularity[8];
  highp float textureCoordScale[8];
  highp float textureLightness;
  highp float brightness;
  highp vec3 cameraPositionInTileSpace;
  highp float fogFactor;
struct Fade {
  highp vec2 fadeEquation;
  highp float alphaFactor;
varying highp float v_fogCoordinate;
varying lowp vec4 v_fogColor;
varying lowp vec4 v_unlitColor;
varying lowp vec4 v_diffuseColor;
varying highp vec3 v_normal;
varying highp vec3 v_position;
varying highp vec2 v_texture;
varying lowp float v_gradient;
varying highp float v_shininess;
varying highp float v_specularity;
varying highp vec3 v_clipPosition;
uniform Scale scale;
uniform Style style;
uniform Fade fade;
uniform sampler2D textureSampler;
void main ()
  lowp float styleBrightness_1;
  styleBrightness_1 = style.brightness;
  lowp float scale_2;
  scale_2 = scale.scale;
  mediump float textureLightness_3;
  textureLightness_3 = style.textureLightness;
  highp vec2 tmpvar_4;
  tmpvar_4 = fade.fadeEquation;
  lowp vec4 texturedColor_5;
  lowp vec4 textureColor_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (textureSampler, v_texture);
  mediump vec4 tmpvar_8;
  tmpvar_8 = mix (tmpvar_7, vec4(1.0, 1.0, 1.0, 1.0), textureLightness_3);
  textureColor_6 = tmpvar_8;
  lowp vec4 tmpvar_9;
  tmpvar_9.xyz = (v_diffuseColor.xyz * vec3(mix (1.0, (
    min (v_gradient, 0.9799805)
   * styleBrightness_1), scale_2)));
  tmpvar_9.w = v_diffuseColor.w;
  lowp vec4 tmpvar_10;
  tmpvar_10 = (mix (v_unlitColor, tmpvar_9, scale_2) * textureColor_6);
  texturedColor_5.xyz = tmpvar_10.xyz;
  lowp float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = clamp (((v_clipPosition.y * tmpvar_4.x) + tmpvar_4.y), fade.alphaFactor, 1.0);
  tmpvar_11 = tmpvar_12;
  texturedColor_5.w = (tmpvar_10.w * tmpvar_11);
  gl_FragColor = texturedColor_5;
//fog_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec4 vertexAndStyleIndex;
struct Skyfog {
  highp vec4 fogSlope;
  highp float fogOffset;
  highp float screenHeight;
  highp float skyOffset;
  highp vec4 skyBottomColor;
  highp vec4 skyTopColor;
struct View {
  highp mat4 modelViewProjectionMatrix;
  highp float tilePerPoint;
struct Varyings {
  highp float fogCoordinate;
  lowp vec4 fogColor;
attribute highp vec4 vertex_input_vertexAndStyleIndex;
uniform Skyfog skyfog;
uniform View view;
varying highp float v_fogCoordinate;
varying lowp vec4 v_fogColor;
void main ()
  Varyings outputValue_1;
  VertexIn vertex_input_2;
  vertex_input_2.vertexAndStyleIndex = vertex_input_vertexAndStyleIndex;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.x = vertex_input_2.vertexAndStyleIndex.x;
  tmpvar_3.y = vertex_input_2.vertexAndStyleIndex.y;
  tmpvar_3.z = ((vertex_input_2.vertexAndStyleIndex.z * 2.0) - 1.0);
  gl_Position = (view.modelViewProjectionMatrix * tmpvar_3);
  outputValue_1.fogCoordinate = (dot (skyfog.fogSlope, tmpvar_3) + skyfog.fogOffset);
  lowp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = mix (skyfog.skyBottomColor, skyfog.skyTopColor, clamp ((
    ((0.5 + (0.5 * gl_Position.y)) - skyfog.skyOffset)
   * 10.0), 0.0, 1.0));
  tmpvar_4 = tmpvar_5;
  outputValue_1.fogColor = tmpvar_4;
  v_fogCoordinate = outputValue_1.fogCoordinate;
  v_fogColor = outputValue_1.fogColor;
//fog_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
varying highp float v_fogCoordinate;
varying lowp vec4 v_fogColor;
void main ()
  highp vec4 tmpvar_1;
  tmpvar_1.xyz = v_fogColor.xyz;
  tmpvar_1.w = (v_fogColor.w * v_fogCoordinate);
  gl_FragColor = tmpvar_1;
//foggedDiffuseBuilding_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec4 vertexAndTexture;
  highp vec4 normalAndStyleIndex;
struct Skyfog {
  highp vec4 fogSlope;
  highp float fogOffset;
  highp float screenHeight;
  highp float skyOffset;
  highp vec4 skyBottomColor;
  highp vec4 skyTopColor;
struct View {
  highp mat4 modelViewProjectionMatrix;
  highp float tilePerPoint;
struct Scale {
  highp float scale;
  highp vec3 tileOrigin;
  highp vec3 tileSize;
struct Style {
  highp vec4 color[8];
  highp vec4 alternateColor[8];
  highp vec2 shininessAndSpecularity[8];
  highp float textureCoordScale[8];
  highp float textureLightness;
  highp float brightness;
  highp vec3 cameraPositionInTileSpace;
  highp float fogFactor;
struct Gradient {
  highp vec2 equation[8];
struct Lighting {
  highp vec4 lightDirection[3];
  highp vec4 lightColor[3];
  highp vec4 lightSpecularColor;
  highp vec4 ambientLightColor;
struct VertexOut {
  highp float fogCoordinate;
  lowp vec4 fogColor;
  lowp vec4 unlitColor;
  lowp vec4 diffuseColor;
  highp vec3 normal;
  highp vec3 position;
  highp vec2 texture2D;
  lowp float gradient;
  highp float shininess;
  highp float specularity;
  highp vec3 clipPosition;
attribute highp vec4 vertex_input_vertexAndTexture;
attribute highp vec4 vertex_input_normalAndStyleIndex;
uniform Skyfog skyfog;
uniform View view;
uniform Scale scale;
uniform Style style;
uniform Gradient gradient;
uniform Lighting lighting;
varying highp float v_fogCoordinate;
varying lowp vec4 v_fogColor;
varying lowp vec4 v_unlitColor;
varying lowp vec4 v_diffuseColor;
varying highp vec3 v_normal;
varying highp vec3 v_position;
varying highp vec2 v_texture;
varying lowp float v_gradient;
varying highp float v_shininess;
varying highp float v_specularity;
varying highp vec3 v_clipPosition;
void main ()
  VertexOut outputValue_1;
  VertexIn vertex_input_2;
  vertex_input_2.vertexAndTexture = vertex_input_vertexAndTexture;
  vertex_input_2.normalAndStyleIndex = vertex_input_normalAndStyleIndex;
  VertexOut outputValue_3;
  highp int tmpvar_4;
  tmpvar_4 = int((vertex_input_2.normalAndStyleIndex.w * 127.5));
  outputValue_3.normal = vertex_input_2.normalAndStyleIndex.xyz;
  highp vec4 tmpvar_5;
  tmpvar_5 = style.color[tmpvar_4];
  outputValue_3.unlitColor = tmpvar_5;
  outputValue_3.shininess = style.shininessAndSpecularity[tmpvar_4].x;
  outputValue_3.specularity = style.shininessAndSpecularity[tmpvar_4].y;
  outputValue_3.position = (scale.tileOrigin + (scale.tileSize * vertex_input_2.vertexAndTexture.xyz));
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xy = outputValue_3.position.xy;
  tmpvar_6.z = (outputValue_3.position.z * scale.scale);
  gl_Position = (view.modelViewProjectionMatrix * tmpvar_6);
  outputValue_3.clipPosition = (gl_Position.xyz / gl_Position.www);
  highp vec3 normal_7;
  normal_7 = outputValue_3.normal;
  lowp vec3 lightContributions_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = lighting.ambientLightColor.xyz;
  lightContributions_8 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = (vec3(clamp (dot (lighting.lightDirection[0].xyz, normal_7), 0.0, 1.0)) * lighting.lightColor[0].xyz);
  lightContributions_8 = (lightContributions_8 + tmpvar_10);
  highp vec3 tmpvar_11;
  tmpvar_11 = (vec3(clamp (dot (lighting.lightDirection[1].xyz, normal_7), 0.0, 1.0)) * lighting.lightColor[1].xyz);
  lightContributions_8 = (lightContributions_8 + tmpvar_11);
  highp vec3 tmpvar_12;
  tmpvar_12 = (vec3(clamp (dot (lighting.lightDirection[2].xyz, normal_7), 0.0, 1.0)) * lighting.lightColor[2].xyz);
  lightContributions_8 = (lightContributions_8 + tmpvar_12);
  lowp vec4 tmpvar_13;
  tmpvar_13.xyz = (outputValue_3.unlitColor.xyz * lightContributions_8);
  tmpvar_13.w = outputValue_3.unlitColor.w;
  outputValue_3.diffuseColor = tmpvar_13;
  highp float tmpvar_14;
  highp vec2 gradient_15;
  gradient_15 = gradient.equation[tmpvar_4];
  tmpvar_14 = ((gradient_15.x * outputValue_3.position.z) + gradient_15.y);
  outputValue_3.gradient = tmpvar_14;
  highp float tmpvar_16;
  tmpvar_16 = floor((vertex_input_2.vertexAndTexture.w * 256.0));
  highp vec2 tmpvar_17;
  tmpvar_17.x = tmpvar_16;
  tmpvar_17.y = floor(((
    (vertex_input_2.vertexAndTexture.w * 256.0)
   - tmpvar_16) * 256.0));
  outputValue_3.texture2D = floor((tmpvar_17 * vec2(style.textureCoordScale[tmpvar_4])));
  outputValue_1 = outputValue_3;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = outputValue_3.position;
  outputValue_1.fogCoordinate = (dot (skyfog.fogSlope, tmpvar_18) + skyfog.fogOffset);
  lowp vec4 tmpvar_19;
  highp vec4 tmpvar_20;
  tmpvar_20 = mix (skyfog.skyBottomColor, skyfog.skyTopColor, clamp ((
    ((0.5 + ((0.5 * gl_Position.y) / gl_Position.w)) - skyfog.skyOffset)
   * 10.0), 0.0, 1.0));
  tmpvar_19 = tmpvar_20;
  outputValue_1.fogColor = tmpvar_19;
  v_fogCoordinate = outputValue_1.fogCoordinate;
  v_fogColor = outputValue_1.fogColor;
  v_unlitColor = outputValue_1.unlitColor;
  v_diffuseColor = outputValue_1.diffuseColor;
  v_normal = outputValue_1.normal;
  v_position = outputValue_1.position;
  v_texture = outputValue_1.texture2D;
  v_gradient = outputValue_1.gradient;
  v_shininess = outputValue_1.shininess;
  v_specularity = outputValue_1.specularity;
  v_clipPosition = outputValue_1.clipPosition;
//foggedDiffuseBuilding_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
struct Scale {
  highp float scale;
  highp vec3 tileOrigin;
  highp vec3 tileSize;
struct Style {
  highp vec4 color[8];
  highp vec4 alternateColor[8];
  highp vec2 shininessAndSpecularity[8];
  highp float textureCoordScale[8];
  highp float textureLightness;
  highp float brightness;
  highp vec3 cameraPositionInTileSpace;
  highp float fogFactor;
struct Fade {
  highp vec2 fadeEquation;
  highp float alphaFactor;
varying highp float v_fogCoordinate;
varying lowp vec4 v_fogColor;
varying lowp vec4 v_unlitColor;
varying lowp vec4 v_diffuseColor;
varying highp vec3 v_normal;
varying highp vec3 v_position;
varying highp vec2 v_texture;
varying lowp float v_gradient;
varying highp float v_shininess;
varying highp float v_specularity;
varying highp vec3 v_clipPosition;
uniform Scale scale;
uniform Style style;
uniform Fade fade;
uniform sampler2D textureSampler;
void main ()
  lowp float styleBrightness_1;
  styleBrightness_1 = style.brightness;
  lowp float scale_2;
  scale_2 = scale.scale;
  highp vec2 tmpvar_3;
  tmpvar_3 = fade.fadeEquation;
  lowp vec4 texturedColor_4;
  lowp vec4 textureColor_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (textureSampler, v_texture);
  mediump vec4 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  textureColor_5 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8.xyz = (v_diffuseColor.xyz * vec3(mix (1.0, (
    min (v_gradient, 0.9799805)
   * styleBrightness_1), scale_2)));
  tmpvar_8.w = v_diffuseColor.w;
  lowp vec4 tmpvar_9;
  tmpvar_9 = (mix (v_unlitColor, tmpvar_8, scale_2) * textureColor_5);
  texturedColor_4.xyz = tmpvar_9.xyz;
  lowp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = clamp (((v_clipPosition.y * tmpvar_3.x) + tmpvar_3.y), fade.alphaFactor, 1.0);
  tmpvar_10 = tmpvar_11;
  texturedColor_4.w = (tmpvar_9.w * tmpvar_10);
  lowp vec4 color_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = mix (texturedColor_4, v_fogColor, clamp (v_fogCoordinate, 0.0, 1.0));
  color_12 = tmpvar_13;
  gl_FragColor = color_12;
//foggedDiffuseBuildingTop_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec4 vertexAndStyleIndex;
struct Skyfog {
  highp vec4 fogSlope;
  highp float fogOffset;
  highp float screenHeight;
  highp float skyOffset;
  highp vec4 skyBottomColor;
  highp vec4 skyTopColor;
struct View {
  highp mat4 modelViewProjectionMatrix;
  highp float tilePerPoint;
struct Scale {
  highp float scale;
  highp vec3 tileOrigin;
  highp vec3 tileSize;
struct Style {
  highp vec4 color[8];
  highp vec4 alternateColor[8];
  highp vec2 shininessAndSpecularity[8];
  highp float textureCoordScale[8];
  highp float textureLightness;
  highp float brightness;
  highp vec3 cameraPositionInTileSpace;
  highp float fogFactor;
struct Gradient {
  highp vec2 equation[8];
struct Lighting {
  highp vec4 lightDirection[3];
  highp vec4 lightColor[3];
  highp vec4 lightSpecularColor;
  highp vec4 ambientLightColor;
struct VertexOut {
  highp float fogCoordinate;
  lowp vec4 fogColor;
  lowp vec4 unlitColor;
  lowp vec4 diffuseColor;
  highp vec3 normal;
  highp vec3 position;
  highp vec2 texture2D;
  lowp float gradient;
  highp float shininess;
  highp float specularity;
  highp vec3 clipPosition;
attribute highp vec4 vertex_input_vertexAndStyleIndex;
uniform Skyfog skyfog;
uniform View view;
uniform Scale scale;
uniform Style style;
uniform Gradient gradient;
uniform Lighting lighting;
varying highp float v_fogCoordinate;
varying lowp vec4 v_fogColor;
varying lowp vec4 v_unlitColor;
varying lowp vec4 v_diffuseColor;
varying highp vec3 v_normal;
varying highp vec3 v_position;
varying highp vec2 v_texture;
varying lowp float v_gradient;
varying highp float v_shininess;
varying highp float v_specularity;
varying highp vec3 v_clipPosition;
void main ()
  VertexOut outputValue_1;
  VertexIn vertex_input_2;
  vertex_input_2.vertexAndStyleIndex = vertex_input_vertexAndStyleIndex;
  VertexOut outputValue_3;
  highp int tmpvar_4;
  tmpvar_4 = int((vertex_input_2.vertexAndStyleIndex.w * 256.0));
  highp vec4 tmpvar_5;
  tmpvar_5 = style.color[tmpvar_4];
  outputValue_3.unlitColor = tmpvar_5;
  outputValue_3.shininess = style.shininessAndSpecularity[tmpvar_4].x;
  outputValue_3.specularity = style.shininessAndSpecularity[tmpvar_4].y;
  outputValue_3.normal = vec3(0.0, 0.0, 1.0);
  outputValue_3.position = (scale.tileOrigin + (scale.tileSize * vertex_input_2.vertexAndStyleIndex.xyz));
  outputValue_3.position.z = (outputValue_3.position.z * scale.scale);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = outputValue_3.position;
  gl_Position = (view.modelViewProjectionMatrix * tmpvar_6);
  outputValue_3.clipPosition = (gl_Position.xyz / gl_Position.www);
  lowp vec3 lightContributions_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = lighting.ambientLightColor.xyz;
  lightContributions_7 = tmpvar_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = (vec3(clamp (lighting.lightDirection[0].z, 0.0, 1.0)) * lighting.lightColor[0].xyz);
  lightContributions_7 = (lightContributions_7 + tmpvar_9);
  highp vec3 tmpvar_10;
  tmpvar_10 = (vec3(clamp (lighting.lightDirection[1].z, 0.0, 1.0)) * lighting.lightColor[1].xyz);
  lightContributions_7 = (lightContributions_7 + tmpvar_10);
  highp vec3 tmpvar_11;
  tmpvar_11 = (vec3(clamp (lighting.lightDirection[2].z, 0.0, 1.0)) * lighting.lightColor[2].xyz);
  lightContributions_7 = (lightContributions_7 + tmpvar_11);
  lowp vec4 tmpvar_12;
  tmpvar_12.xyz = (outputValue_3.unlitColor.xyz * lightContributions_7);
  tmpvar_12.w = outputValue_3.unlitColor.w;
  outputValue_3.diffuseColor = tmpvar_12;
  if ((outputValue_3.position.z < 1e-08)) {
    highp float tmpvar_13;
    tmpvar_13 = mix (0.935, 1.0, scale.scale);
    outputValue_3.gradient = tmpvar_13;
  } else {
    highp float tmpvar_14;
    highp vec2 gradient_15;
    gradient_15 = gradient.equation[tmpvar_4];
    tmpvar_14 = ((gradient_15.x * outputValue_3.position.z) + gradient_15.y);
    outputValue_3.gradient = tmpvar_14;
  };
  outputValue_3.texture2D = vertex_input_2.vertexAndStyleIndex.xy;
  outputValue_1 = outputValue_3;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = outputValue_3.position;
  outputValue_1.fogCoordinate = (dot (skyfog.fogSlope, tmpvar_16) + skyfog.fogOffset);
  lowp vec4 tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18 = mix (skyfog.skyBottomColor, skyfog.skyTopColor, clamp ((
    ((0.5 + ((0.5 * gl_Position.y) / gl_Position.w)) - skyfog.skyOffset)
   * 10.0), 0.0, 1.0));
  tmpvar_17 = tmpvar_18;
  outputValue_1.fogColor = tmpvar_17;
  v_fogCoordinate = outputValue_1.fogCoordinate;
  v_fogColor = outputValue_1.fogColor;
  v_unlitColor = outputValue_1.unlitColor;
  v_diffuseColor = outputValue_1.diffuseColor;
  v_normal = outputValue_1.normal;
  v_position = outputValue_1.position;
  v_texture = outputValue_1.texture2D;
  v_gradient = outputValue_1.gradient;
  v_shininess = outputValue_1.shininess;
  v_specularity = outputValue_1.specularity;
  v_clipPosition = outputValue_1.clipPosition;
//foggedDiffuseBuildingTop_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
struct Scale {
  highp float scale;
  highp vec3 tileOrigin;
  highp vec3 tileSize;
struct Style {
  highp vec4 color[8];
  highp vec4 alternateColor[8];
  highp vec2 shininessAndSpecularity[8];
  highp float textureCoordScale[8];
  highp float textureLightness;
  highp float brightness;
  highp vec3 cameraPositionInTileSpace;
  highp float fogFactor;
struct Fade {
  highp vec2 fadeEquation;
  highp float alphaFactor;
varying highp float v_fogCoordinate;
varying lowp vec4 v_fogColor;
varying lowp vec4 v_unlitColor;
varying lowp vec4 v_diffuseColor;
varying highp vec3 v_normal;
varying highp vec3 v_position;
varying highp vec2 v_texture;
varying lowp float v_gradient;
varying highp float v_shininess;
varying highp float v_specularity;
varying highp vec3 v_clipPosition;
uniform Scale scale;
uniform Style style;
uniform Fade fade;
void main ()
  lowp float styleBrightness_1;
  styleBrightness_1 = style.brightness;
  lowp float scale_2;
  scale_2 = scale.scale;
  highp vec2 tmpvar_3;
  tmpvar_3 = fade.fadeEquation;
  lowp float tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = clamp (((v_clipPosition.y * tmpvar_3.x) + tmpvar_3.y), fade.alphaFactor, 1.0);
  tmpvar_4 = tmpvar_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = mix (v_unlitColor, (v_diffuseColor * vec4(mix (1.0, 
    (min (v_gradient, 0.9799805) * styleBrightness_1)
  , scale_2))), (tmpvar_4 * scale_2));
  lowp vec4 color_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = mix (tmpvar_6, v_fogColor, clamp (v_fogCoordinate, 0.0, 1.0));
  color_7 = tmpvar_8;
  gl_FragColor = color_7;
//foggedDiffuseLandmark_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec4 position;
  highp vec2 texture2D;
  highp vec4 normalAndStyleIndex;
struct Skyfog {
  highp vec4 fogSlope;
  highp float fogOffset;
  highp float screenHeight;
  highp float skyOffset;
  highp vec4 skyBottomColor;
  highp vec4 skyTopColor;
struct View {
  highp mat4 modelViewProjectionMatrix;
  highp float tilePerPoint;
struct Scale {
  highp float scale;
  highp vec3 tileOrigin;
  highp vec3 tileSize;
struct Style {
  highp vec4 color[8];
  highp vec4 alternateColor[8];
  highp vec2 shininessAndSpecularity[8];
  highp float textureCoordScale[8];
  highp float textureLightness;
  highp float brightness;
  highp vec3 cameraPositionInTileSpace;
  highp float fogFactor;
struct Gradient {
  highp vec2 equation[8];
struct Lighting {
  highp vec4 lightDirection[3];
  highp vec4 lightColor[3];
  highp vec4 lightSpecularColor;
  highp vec4 ambientLightColor;
struct VertexOut {
  highp float fogCoordinate;
  lowp vec4 fogColor;
  lowp vec4 unlitColor;
  lowp vec4 diffuseColor;
  highp vec3 normal;
  highp vec3 position;
  highp vec2 texture2D;
  lowp float gradient;
  highp float shininess;
  highp float specularity;
  highp vec3 clipPosition;
attribute highp vec4 vertex_input_position;
attribute highp vec2 vertex_input_texture;
attribute highp vec4 vertex_input_normalAndStyleIndex;
uniform Skyfog skyfog;
uniform View view;
uniform Scale scale;
uniform Style style;
uniform Gradient gradient;
uniform Lighting lighting;
varying highp float v_fogCoordinate;
varying lowp vec4 v_fogColor;
varying lowp vec4 v_unlitColor;
varying lowp vec4 v_diffuseColor;
varying highp vec3 v_normal;
varying highp vec3 v_position;
varying highp vec2 v_texture;
varying lowp float v_gradient;
varying highp float v_shininess;
varying highp float v_specularity;
varying highp vec3 v_clipPosition;
void main ()
  VertexOut outputValue_1;
  VertexIn vertex_input_2;
  vertex_input_2.position = vertex_input_position;
  vertex_input_2.texture2D = vertex_input_texture;
  vertex_input_2.normalAndStyleIndex = vertex_input_normalAndStyleIndex;
  VertexOut outputValue_3;
  highp int tmpvar_4;
  tmpvar_4 = int((vertex_input_2.normalAndStyleIndex.w * 127.5));
  outputValue_3.normal = vertex_input_2.normalAndStyleIndex.xyz;
  highp vec4 tmpvar_5;
  tmpvar_5 = style.color[tmpvar_4];
  outputValue_3.unlitColor = tmpvar_5;
  outputValue_3.shininess = style.shininessAndSpecularity[tmpvar_4].x;
  outputValue_3.specularity = style.shininessAndSpecularity[tmpvar_4].y;
  outputValue_3.position = (scale.tileOrigin + (scale.tileSize * vertex_input_2.position.xyz));
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xy = outputValue_3.position.xy;
  tmpvar_6.z = (outputValue_3.position.z * scale.scale);
  gl_Position = (view.modelViewProjectionMatrix * tmpvar_6);
  outputValue_3.clipPosition = (gl_Position.xyz / gl_Position.www);
  highp vec3 normal_7;
  normal_7 = outputValue_3.normal;
  lowp vec3 lightContributions_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = lighting.ambientLightColor.xyz;
  lightContributions_8 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = (vec3(clamp (dot (lighting.lightDirection[0].xyz, normal_7), 0.0, 1.0)) * lighting.lightColor[0].xyz);
  lightContributions_8 = (lightContributions_8 + tmpvar_10);
  highp vec3 tmpvar_11;
  tmpvar_11 = (vec3(clamp (dot (lighting.lightDirection[1].xyz, normal_7), 0.0, 1.0)) * lighting.lightColor[1].xyz);
  lightContributions_8 = (lightContributions_8 + tmpvar_11);
  highp vec3 tmpvar_12;
  tmpvar_12 = (vec3(clamp (dot (lighting.lightDirection[2].xyz, normal_7), 0.0, 1.0)) * lighting.lightColor[2].xyz);
  lightContributions_8 = (lightContributions_8 + tmpvar_12);
  lowp vec4 tmpvar_13;
  tmpvar_13.xyz = (outputValue_3.unlitColor.xyz * lightContributions_8);
  tmpvar_13.w = outputValue_3.unlitColor.w;
  outputValue_3.diffuseColor = tmpvar_13;
  highp float tmpvar_14;
  highp vec2 gradient_15;
  gradient_15 = gradient.equation[tmpvar_4];
  tmpvar_14 = ((gradient_15.x * outputValue_3.position.z) + gradient_15.y);
  outputValue_3.gradient = tmpvar_14;
  outputValue_3.texture2D = vertex_input_2.texture2D;
  outputValue_1 = outputValue_3;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = outputValue_3.position;
  outputValue_1.fogCoordinate = (dot (skyfog.fogSlope, tmpvar_16) + skyfog.fogOffset);
  lowp vec4 tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18 = mix (skyfog.skyBottomColor, skyfog.skyTopColor, clamp ((
    ((0.5 + ((0.5 * gl_Position.y) / gl_Position.w)) - skyfog.skyOffset)
   * 10.0), 0.0, 1.0));
  tmpvar_17 = tmpvar_18;
  outputValue_1.fogColor = tmpvar_17;
  v_fogCoordinate = outputValue_1.fogCoordinate;
  v_fogColor = outputValue_1.fogColor;
  v_unlitColor = outputValue_1.unlitColor;
  v_diffuseColor = outputValue_1.diffuseColor;
  v_normal = outputValue_1.normal;
  v_position = outputValue_1.position;
  v_texture = outputValue_1.texture2D;
  v_gradient = outputValue_1.gradient;
  v_shininess = outputValue_1.shininess;
  v_specularity = outputValue_1.specularity;
  v_clipPosition = outputValue_1.clipPosition;
//foggedDiffuseLandmark_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
struct Scale {
  highp float scale;
  highp vec3 tileOrigin;
  highp vec3 tileSize;
struct Style {
  highp vec4 color[8];
  highp vec4 alternateColor[8];
  highp vec2 shininessAndSpecularity[8];
  highp float textureCoordScale[8];
  highp float textureLightness;
  highp float brightness;
  highp vec3 cameraPositionInTileSpace;
  highp float fogFactor;
struct Fade {
  highp vec2 fadeEquation;
  highp float alphaFactor;
varying highp float v_fogCoordinate;
varying lowp vec4 v_fogColor;
varying lowp vec4 v_unlitColor;
varying lowp vec4 v_diffuseColor;
varying highp vec3 v_normal;
varying highp vec3 v_position;
varying highp vec2 v_texture;
varying lowp float v_gradient;
varying highp float v_shininess;
varying highp float v_specularity;
varying highp vec3 v_clipPosition;
uniform Scale scale;
uniform Style style;
uniform Fade fade;
uniform sampler2D textureSampler;
void main ()
  lowp float styleBrightness_1;
  styleBrightness_1 = style.brightness;
  lowp float scale_2;
  scale_2 = scale.scale;
  mediump float textureLightness_3;
  textureLightness_3 = style.textureLightness;
  highp vec2 tmpvar_4;
  tmpvar_4 = fade.fadeEquation;
  lowp vec4 texturedColor_5;
  lowp vec4 textureColor_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (textureSampler, v_texture);
  mediump vec4 tmpvar_8;
  tmpvar_8 = mix (tmpvar_7, vec4(1.0, 1.0, 1.0, 1.0), textureLightness_3);
  textureColor_6 = tmpvar_8;
  lowp vec4 tmpvar_9;
  tmpvar_9.xyz = (v_diffuseColor.xyz * vec3(mix (1.0, (
    min (v_gradient, 0.9799805)
   * styleBrightness_1), scale_2)));
  tmpvar_9.w = v_diffuseColor.w;
  lowp vec4 tmpvar_10;
  tmpvar_10 = (mix (v_unlitColor, tmpvar_9, scale_2) * textureColor_6);
  texturedColor_5.xyz = tmpvar_10.xyz;
  lowp float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = clamp (((v_clipPosition.y * tmpvar_4.x) + tmpvar_4.y), fade.alphaFactor, 1.0);
  tmpvar_11 = tmpvar_12;
  texturedColor_5.w = (tmpvar_10.w * tmpvar_11);
  lowp vec4 color_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = mix (texturedColor_5, v_fogColor, clamp (v_fogCoordinate, 0.0, 1.0));
  color_13 = tmpvar_14;
  gl_FragColor = color_13;
//foggedSpecularBuilding_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec4 vertexAndTexture;
  highp vec4 normalAndStyleIndex;
struct Skyfog {
  highp vec4 fogSlope;
  highp float fogOffset;
  highp float screenHeight;
  highp float skyOffset;
  highp vec4 skyBottomColor;
  highp vec4 skyTopColor;
struct View {
  highp mat4 modelViewProjectionMatrix;
  highp float tilePerPoint;
struct Scale {
  highp float scale;
  highp vec3 tileOrigin;
  highp vec3 tileSize;
struct Style {
  highp vec4 color[8];
  highp vec4 alternateColor[8];
  highp vec2 shininessAndSpecularity[8];
  highp float textureCoordScale[8];
  highp float textureLightness;
  highp float brightness;
  highp vec3 cameraPositionInTileSpace;
  highp float fogFactor;
struct Gradient {
  highp vec2 equation[8];
struct Lighting {
  highp vec4 lightDirection[3];
  highp vec4 lightColor[3];
  highp vec4 lightSpecularColor;
  highp vec4 ambientLightColor;
struct VertexOut {
  highp float fogCoordinate;
  lowp vec4 fogColor;
  lowp vec4 unlitColor;
  lowp vec4 diffuseColor;
  highp vec3 normal;
  highp vec3 position;
  highp vec2 texture2D;
  lowp float gradient;
  highp float shininess;
  highp float specularity;
  highp vec3 clipPosition;
attribute highp vec4 vertex_input_vertexAndTexture;
attribute highp vec4 vertex_input_normalAndStyleIndex;
uniform Skyfog skyfog;
uniform View view;
uniform Scale scale;
uniform Style style;
uniform Gradient gradient;
uniform Lighting lighting;
varying highp float v_fogCoordinate;
varying lowp vec4 v_fogColor;
varying lowp vec4 v_unlitColor;
varying lowp vec4 v_diffuseColor;
varying highp vec3 v_normal;
varying highp vec3 v_position;
varying highp vec2 v_texture;
varying lowp float v_gradient;
varying highp float v_shininess;
varying highp float v_specularity;
varying highp vec3 v_clipPosition;
void main ()
  VertexOut outputValue_1;
  VertexIn vertex_input_2;
  vertex_input_2.vertexAndTexture = vertex_input_vertexAndTexture;
  vertex_input_2.normalAndStyleIndex = vertex_input_normalAndStyleIndex;
  VertexOut outputValue_3;
  highp int tmpvar_4;
  tmpvar_4 = int((vertex_input_2.normalAndStyleIndex.w * 127.5));
  outputValue_3.normal = vertex_input_2.normalAndStyleIndex.xyz;
  highp vec4 tmpvar_5;
  tmpvar_5 = style.color[tmpvar_4];
  outputValue_3.unlitColor = tmpvar_5;
  outputValue_3.shininess = style.shininessAndSpecularity[tmpvar_4].x;
  outputValue_3.specularity = style.shininessAndSpecularity[tmpvar_4].y;
  outputValue_3.position = (scale.tileOrigin + (scale.tileSize * vertex_input_2.vertexAndTexture.xyz));
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xy = outputValue_3.position.xy;
  tmpvar_6.z = (outputValue_3.position.z * scale.scale);
  gl_Position = (view.modelViewProjectionMatrix * tmpvar_6);
  outputValue_3.clipPosition = (gl_Position.xyz / gl_Position.www);
  highp vec3 normal_7;
  normal_7 = outputValue_3.normal;
  lowp vec3 lightContributions_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = lighting.ambientLightColor.xyz;
  lightContributions_8 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = (vec3(clamp (dot (lighting.lightDirection[0].xyz, normal_7), 0.0, 1.0)) * lighting.lightColor[0].xyz);
  lightContributions_8 = (lightContributions_8 + tmpvar_10);
  highp vec3 tmpvar_11;
  tmpvar_11 = (vec3(clamp (dot (lighting.lightDirection[1].xyz, normal_7), 0.0, 1.0)) * lighting.lightColor[1].xyz);
  lightContributions_8 = (lightContributions_8 + tmpvar_11);
  highp vec3 tmpvar_12;
  tmpvar_12 = (vec3(clamp (dot (lighting.lightDirection[2].xyz, normal_7), 0.0, 1.0)) * lighting.lightColor[2].xyz);
  lightContributions_8 = (lightContributions_8 + tmpvar_12);
  lowp vec4 tmpvar_13;
  tmpvar_13.xyz = (outputValue_3.unlitColor.xyz * lightContributions_8);
  tmpvar_13.w = outputValue_3.unlitColor.w;
  outputValue_3.diffuseColor = tmpvar_13;
  highp float tmpvar_14;
  highp vec2 gradient_15;
  gradient_15 = gradient.equation[tmpvar_4];
  tmpvar_14 = ((gradient_15.x * outputValue_3.position.z) + gradient_15.y);
  outputValue_3.gradient = tmpvar_14;
  highp float tmpvar_16;
  tmpvar_16 = floor((vertex_input_2.vertexAndTexture.w * 256.0));
  highp vec2 tmpvar_17;
  tmpvar_17.x = tmpvar_16;
  tmpvar_17.y = floor(((
    (vertex_input_2.vertexAndTexture.w * 256.0)
   - tmpvar_16) * 256.0));
  outputValue_3.texture2D = floor((tmpvar_17 * vec2(style.textureCoordScale[tmpvar_4])));
  outputValue_1 = outputValue_3;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = outputValue_3.position;
  outputValue_1.fogCoordinate = (dot (skyfog.fogSlope, tmpvar_18) + skyfog.fogOffset);
  lowp vec4 tmpvar_19;
  highp vec4 tmpvar_20;
  tmpvar_20 = mix (skyfog.skyBottomColor, skyfog.skyTopColor, clamp ((
    ((0.5 + ((0.5 * gl_Position.y) / gl_Position.w)) - skyfog.skyOffset)
   * 10.0), 0.0, 1.0));
  tmpvar_19 = tmpvar_20;
  outputValue_1.fogColor = tmpvar_19;
  v_fogCoordinate = outputValue_1.fogCoordinate;
  v_fogColor = outputValue_1.fogColor;
  v_unlitColor = outputValue_1.unlitColor;
  v_diffuseColor = outputValue_1.diffuseColor;
  v_normal = outputValue_1.normal;
  v_position = outputValue_1.position;
  v_texture = outputValue_1.texture2D;
  v_gradient = outputValue_1.gradient;
  v_shininess = outputValue_1.shininess;
  v_specularity = outputValue_1.specularity;
  v_clipPosition = outputValue_1.clipPosition;
//foggedSpecularBuilding_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
struct Scale {
  highp float scale;
  highp vec3 tileOrigin;
  highp vec3 tileSize;
struct Style {
  highp vec4 color[8];
  highp vec4 alternateColor[8];
  highp vec2 shininessAndSpecularity[8];
  highp float textureCoordScale[8];
  highp float textureLightness;
  highp float brightness;
  highp vec3 cameraPositionInTileSpace;
  highp float fogFactor;
struct Lighting {
  highp vec4 lightDirection[3];
  highp vec4 lightColor[3];
  highp vec4 lightSpecularColor;
  highp vec4 ambientLightColor;
struct Fade {
  highp vec2 fadeEquation;
  highp float alphaFactor;
varying highp float v_fogCoordinate;
varying lowp vec4 v_fogColor;
varying lowp vec4 v_unlitColor;
varying lowp vec4 v_diffuseColor;
varying highp vec3 v_normal;
varying highp vec3 v_position;
varying highp vec2 v_texture;
varying lowp float v_gradient;
varying highp float v_shininess;
varying highp float v_specularity;
varying highp vec3 v_clipPosition;
uniform Scale scale;
uniform Style style;
uniform Lighting lighting;
uniform Fade fade;
uniform sampler2D textureSampler;
void main ()
  highp float tmpvar_1;
  tmpvar_1 = scale.scale;
  highp float tmpvar_2;
  tmpvar_2 = style.brightness;
  highp vec4 tmpvar_3;
  tmpvar_3 = lighting.lightDirection[0];
  highp vec2 tmpvar_4;
  tmpvar_4 = fade.fadeEquation;
  lowp vec4 texturedColor_5;
  lowp float lowScale_6;
  lowScale_6 = tmpvar_1;
  lowp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = (lighting.lightSpecularColor.xyz * vec3(((v_specularity * 
    pow (max (0.0, dot (normalize(
      (v_position - style.cameraPositionInTileSpace)
    ), normalize(
      (tmpvar_3.xyz - (2.0 * (dot (v_normal, tmpvar_3.xyz) * v_normal)))
    ))), v_shininess)
  ) * (
    (v_shininess + 8.0)
   / 25.13274))));
  tmpvar_7 = tmpvar_8;
  lowp float styleBrightness_9;
  styleBrightness_9 = tmpvar_2;
  lowp vec4 tmpvar_10;
  tmpvar_10.xyz = ((v_diffuseColor.xyz + tmpvar_7) * vec3(mix (1.0, (
    min (v_gradient, 0.9799805)
   * styleBrightness_9), lowScale_6)));
  tmpvar_10.w = v_diffuseColor.w;
  lowp vec4 tmpvar_11;
  tmpvar_11 = (mix (v_unlitColor, tmpvar_10, lowScale_6) * texture2D (textureSampler, v_texture));
  texturedColor_5.xyz = tmpvar_11.xyz;
  lowp float tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = clamp (((v_clipPosition.y * tmpvar_4.x) + tmpvar_4.y), fade.alphaFactor, 1.0);
  tmpvar_12 = tmpvar_13;
  texturedColor_5.w = (tmpvar_11.w * tmpvar_12);
  lowp vec4 color_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = mix (texturedColor_5, v_fogColor, clamp (v_fogCoordinate, 0.0, 1.0));
  color_14 = tmpvar_15;
  gl_FragColor = color_14;
//foggedSpecularBuildingTop_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec4 vertexAndStyleIndex;
struct Skyfog {
  highp vec4 fogSlope;
  highp float fogOffset;
  highp float screenHeight;
  highp float skyOffset;
  highp vec4 skyBottomColor;
  highp vec4 skyTopColor;
struct View {
  highp mat4 modelViewProjectionMatrix;
  highp float tilePerPoint;
struct Scale {
  highp float scale;
  highp vec3 tileOrigin;
  highp vec3 tileSize;
struct Style {
  highp vec4 color[8];
  highp vec4 alternateColor[8];
  highp vec2 shininessAndSpecularity[8];
  highp float textureCoordScale[8];
  highp float textureLightness;
  highp float brightness;
  highp vec3 cameraPositionInTileSpace;
  highp float fogFactor;
struct Gradient {
  highp vec2 equation[8];
struct Lighting {
  highp vec4 lightDirection[3];
  highp vec4 lightColor[3];
  highp vec4 lightSpecularColor;
  highp vec4 ambientLightColor;
struct VertexOut {
  highp float fogCoordinate;
  lowp vec4 fogColor;
  lowp vec4 unlitColor;
  lowp vec4 diffuseColor;
  highp vec3 normal;
  highp vec3 position;
  highp vec2 texture2D;
  lowp float gradient;
  highp float shininess;
  highp float specularity;
  highp vec3 clipPosition;
attribute highp vec4 vertex_input_vertexAndStyleIndex;
uniform Skyfog skyfog;
uniform View view;
uniform Scale scale;
uniform Style style;
uniform Gradient gradient;
uniform Lighting lighting;
varying highp float v_fogCoordinate;
varying lowp vec4 v_fogColor;
varying lowp vec4 v_unlitColor;
varying lowp vec4 v_diffuseColor;
varying highp vec3 v_normal;
varying highp vec3 v_position;
varying highp vec2 v_texture;
varying lowp float v_gradient;
varying highp float v_shininess;
varying highp float v_specularity;
varying highp vec3 v_clipPosition;
void main ()
  VertexOut outputValue_1;
  VertexIn vertex_input_2;
  vertex_input_2.vertexAndStyleIndex = vertex_input_vertexAndStyleIndex;
  VertexOut outputValue_3;
  highp int tmpvar_4;
  tmpvar_4 = int((vertex_input_2.vertexAndStyleIndex.w * 256.0));
  highp vec4 tmpvar_5;
  tmpvar_5 = style.color[tmpvar_4];
  outputValue_3.unlitColor = tmpvar_5;
  outputValue_3.shininess = style.shininessAndSpecularity[tmpvar_4].x;
  outputValue_3.specularity = style.shininessAndSpecularity[tmpvar_4].y;
  outputValue_3.normal = vec3(0.0, 0.0, 1.0);
  outputValue_3.position = (scale.tileOrigin + (scale.tileSize * vertex_input_2.vertexAndStyleIndex.xyz));
  outputValue_3.position.z = (outputValue_3.position.z * scale.scale);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = outputValue_3.position;
  gl_Position = (view.modelViewProjectionMatrix * tmpvar_6);
  outputValue_3.clipPosition = (gl_Position.xyz / gl_Position.www);
  lowp vec3 lightContributions_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = lighting.ambientLightColor.xyz;
  lightContributions_7 = tmpvar_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = (vec3(clamp (lighting.lightDirection[0].z, 0.0, 1.0)) * lighting.lightColor[0].xyz);
  lightContributions_7 = (lightContributions_7 + tmpvar_9);
  highp vec3 tmpvar_10;
  tmpvar_10 = (vec3(clamp (lighting.lightDirection[1].z, 0.0, 1.0)) * lighting.lightColor[1].xyz);
  lightContributions_7 = (lightContributions_7 + tmpvar_10);
  highp vec3 tmpvar_11;
  tmpvar_11 = (vec3(clamp (lighting.lightDirection[2].z, 0.0, 1.0)) * lighting.lightColor[2].xyz);
  lightContributions_7 = (lightContributions_7 + tmpvar_11);
  lowp vec4 tmpvar_12;
  tmpvar_12.xyz = (outputValue_3.unlitColor.xyz * lightContributions_7);
  tmpvar_12.w = outputValue_3.unlitColor.w;
  outputValue_3.diffuseColor = tmpvar_12;
  if ((outputValue_3.position.z < 1e-08)) {
    highp float tmpvar_13;
    tmpvar_13 = mix (0.935, 1.0, scale.scale);
    outputValue_3.gradient = tmpvar_13;
  } else {
    highp float tmpvar_14;
    highp vec2 gradient_15;
    gradient_15 = gradient.equation[tmpvar_4];
    tmpvar_14 = ((gradient_15.x * outputValue_3.position.z) + gradient_15.y);
    outputValue_3.gradient = tmpvar_14;
  };
  outputValue_3.texture2D = vertex_input_2.vertexAndStyleIndex.xy;
  outputValue_1 = outputValue_3;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = outputValue_3.position;
  outputValue_1.fogCoordinate = (dot (skyfog.fogSlope, tmpvar_16) + skyfog.fogOffset);
  lowp vec4 tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18 = mix (skyfog.skyBottomColor, skyfog.skyTopColor, clamp ((
    ((0.5 + ((0.5 * gl_Position.y) / gl_Position.w)) - skyfog.skyOffset)
   * 10.0), 0.0, 1.0));
  tmpvar_17 = tmpvar_18;
  outputValue_1.fogColor = tmpvar_17;
  v_fogCoordinate = outputValue_1.fogCoordinate;
  v_fogColor = outputValue_1.fogColor;
  v_unlitColor = outputValue_1.unlitColor;
  v_diffuseColor = outputValue_1.diffuseColor;
  v_normal = outputValue_1.normal;
  v_position = outputValue_1.position;
  v_texture = outputValue_1.texture2D;
  v_gradient = outputValue_1.gradient;
  v_shininess = outputValue_1.shininess;
  v_specularity = outputValue_1.specularity;
  v_clipPosition = outputValue_1.clipPosition;
//foggedSpecularBuildingTop_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
struct Scale {
  highp float scale;
  highp vec3 tileOrigin;
  highp vec3 tileSize;
struct Style {
  highp vec4 color[8];
  highp vec4 alternateColor[8];
  highp vec2 shininessAndSpecularity[8];
  highp float textureCoordScale[8];
  highp float textureLightness;
  highp float brightness;
  highp vec3 cameraPositionInTileSpace;
  highp float fogFactor;
struct Lighting {
  highp vec4 lightDirection[3];
  highp vec4 lightColor[3];
  highp vec4 lightSpecularColor;
  highp vec4 ambientLightColor;
struct Fade {
  highp vec2 fadeEquation;
  highp float alphaFactor;
varying highp float v_fogCoordinate;
varying lowp vec4 v_fogColor;
varying lowp vec4 v_unlitColor;
varying lowp vec4 v_diffuseColor;
varying highp vec3 v_normal;
varying highp vec3 v_position;
varying highp vec2 v_texture;
varying lowp float v_gradient;
varying highp float v_shininess;
varying highp float v_specularity;
varying highp vec3 v_clipPosition;
uniform Scale scale;
uniform Style style;
uniform Lighting lighting;
uniform Fade fade;
void main ()
  highp float tmpvar_1;
  tmpvar_1 = scale.scale;
  highp float tmpvar_2;
  tmpvar_2 = style.brightness;
  highp vec4 tmpvar_3;
  tmpvar_3 = lighting.lightDirection[0];
  highp vec2 tmpvar_4;
  tmpvar_4 = fade.fadeEquation;
  lowp vec4 c_5;
  lowp float lowScale_6;
  lowScale_6 = tmpvar_1;
  lowp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_3.xy;
  tmpvar_8.z = -(tmpvar_3.z);
  highp vec3 tmpvar_9;
  tmpvar_9 = (lighting.lightSpecularColor.xyz * vec3((pow (
    max (0.0, dot (normalize((v_position - style.cameraPositionInTileSpace)), normalize(tmpvar_8)))
  , v_shininess) * (
    (v_shininess + 8.0)
   / 25.13274))));
  tmpvar_7 = tmpvar_9;
  lowp float styleBrightness_10;
  styleBrightness_10 = tmpvar_2;
  lowp vec4 tmpvar_11;
  tmpvar_11.xyz = ((v_diffuseColor.xyz + tmpvar_7) * vec3(mix (1.0, (
    min (v_gradient, 0.9799805)
   * styleBrightness_10), lowScale_6)));
  tmpvar_11.w = v_diffuseColor.w;
  highp vec4 tmpvar_12;
  tmpvar_12 = mix (v_unlitColor, tmpvar_11, tmpvar_1);
  c_5 = tmpvar_12;
  lowp float tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((v_clipPosition.y * tmpvar_4.x) + tmpvar_4.y), fade.alphaFactor, 1.0);
  tmpvar_13 = tmpvar_14;
  c_5.w = (c_5.w * tmpvar_13);
  lowp vec4 color_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = mix (c_5, v_fogColor, clamp (v_fogCoordinate, 0.0, 1.0));
  color_15 = tmpvar_16;
  gl_FragColor = color_15;
//foggedSpecularLandmark_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec4 position;
  highp vec2 texture2D;
  highp vec4 normalAndStyleIndex;
struct Skyfog {
  highp vec4 fogSlope;
  highp float fogOffset;
  highp float screenHeight;
  highp float skyOffset;
  highp vec4 skyBottomColor;
  highp vec4 skyTopColor;
struct View {
  highp mat4 modelViewProjectionMatrix;
  highp float tilePerPoint;
struct Scale {
  highp float scale;
  highp vec3 tileOrigin;
  highp vec3 tileSize;
struct Style {
  highp vec4 color[8];
  highp vec4 alternateColor[8];
  highp vec2 shininessAndSpecularity[8];
  highp float textureCoordScale[8];
  highp float textureLightness;
  highp float brightness;
  highp vec3 cameraPositionInTileSpace;
  highp float fogFactor;
struct Gradient {
  highp vec2 equation[8];
struct Lighting {
  highp vec4 lightDirection[3];
  highp vec4 lightColor[3];
  highp vec4 lightSpecularColor;
  highp vec4 ambientLightColor;
struct VertexOut {
  highp float fogCoordinate;
  lowp vec4 fogColor;
  lowp vec4 unlitColor;
  lowp vec4 diffuseColor;
  highp vec3 normal;
  highp vec3 position;
  highp vec2 texture2D;
  lowp float gradient;
  highp float shininess;
  highp float specularity;
  highp vec3 clipPosition;
attribute highp vec4 vertex_input_position;
attribute highp vec2 vertex_input_texture;
attribute highp vec4 vertex_input_normalAndStyleIndex;
uniform Skyfog skyfog;
uniform View view;
uniform Scale scale;
uniform Style style;
uniform Gradient gradient;
uniform Lighting lighting;
varying highp float v_fogCoordinate;
varying lowp vec4 v_fogColor;
varying lowp vec4 v_unlitColor;
varying lowp vec4 v_diffuseColor;
varying highp vec3 v_normal;
varying highp vec3 v_position;
varying highp vec2 v_texture;
varying lowp float v_gradient;
varying highp float v_shininess;
varying highp float v_specularity;
varying highp vec3 v_clipPosition;
void main ()
  VertexOut outputValue_1;
  VertexIn vertex_input_2;
  vertex_input_2.position = vertex_input_position;
  vertex_input_2.texture2D = vertex_input_texture;
  vertex_input_2.normalAndStyleIndex = vertex_input_normalAndStyleIndex;
  VertexOut outputValue_3;
  highp int tmpvar_4;
  tmpvar_4 = int((vertex_input_2.normalAndStyleIndex.w * 127.5));
  outputValue_3.normal = vertex_input_2.normalAndStyleIndex.xyz;
  highp vec4 tmpvar_5;
  tmpvar_5 = style.color[tmpvar_4];
  outputValue_3.unlitColor = tmpvar_5;
  outputValue_3.shininess = style.shininessAndSpecularity[tmpvar_4].x;
  outputValue_3.specularity = style.shininessAndSpecularity[tmpvar_4].y;
  outputValue_3.position = (scale.tileOrigin + (scale.tileSize * vertex_input_2.position.xyz));
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xy = outputValue_3.position.xy;
  tmpvar_6.z = (outputValue_3.position.z * scale.scale);
  gl_Position = (view.modelViewProjectionMatrix * tmpvar_6);
  outputValue_3.clipPosition = (gl_Position.xyz / gl_Position.www);
  highp vec3 normal_7;
  normal_7 = outputValue_3.normal;
  lowp vec3 lightContributions_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = lighting.ambientLightColor.xyz;
  lightContributions_8 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = (vec3(clamp (dot (lighting.lightDirection[0].xyz, normal_7), 0.0, 1.0)) * lighting.lightColor[0].xyz);
  lightContributions_8 = (lightContributions_8 + tmpvar_10);
  highp vec3 tmpvar_11;
  tmpvar_11 = (vec3(clamp (dot (lighting.lightDirection[1].xyz, normal_7), 0.0, 1.0)) * lighting.lightColor[1].xyz);
  lightContributions_8 = (lightContributions_8 + tmpvar_11);
  highp vec3 tmpvar_12;
  tmpvar_12 = (vec3(clamp (dot (lighting.lightDirection[2].xyz, normal_7), 0.0, 1.0)) * lighting.lightColor[2].xyz);
  lightContributions_8 = (lightContributions_8 + tmpvar_12);
  lowp vec4 tmpvar_13;
  tmpvar_13.xyz = (outputValue_3.unlitColor.xyz * lightContributions_8);
  tmpvar_13.w = outputValue_3.unlitColor.w;
  outputValue_3.diffuseColor = tmpvar_13;
  highp float tmpvar_14;
  highp vec2 gradient_15;
  gradient_15 = gradient.equation[tmpvar_4];
  tmpvar_14 = ((gradient_15.x * outputValue_3.position.z) + gradient_15.y);
  outputValue_3.gradient = tmpvar_14;
  outputValue_3.texture2D = vertex_input_2.texture2D;
  outputValue_1 = outputValue_3;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = outputValue_3.position;
  outputValue_1.fogCoordinate = (dot (skyfog.fogSlope, tmpvar_16) + skyfog.fogOffset);
  lowp vec4 tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18 = mix (skyfog.skyBottomColor, skyfog.skyTopColor, clamp ((
    ((0.5 + ((0.5 * gl_Position.y) / gl_Position.w)) - skyfog.skyOffset)
   * 10.0), 0.0, 1.0));
  tmpvar_17 = tmpvar_18;
  outputValue_1.fogColor = tmpvar_17;
  v_fogCoordinate = outputValue_1.fogCoordinate;
  v_fogColor = outputValue_1.fogColor;
  v_unlitColor = outputValue_1.unlitColor;
  v_diffuseColor = outputValue_1.diffuseColor;
  v_normal = outputValue_1.normal;
  v_position = outputValue_1.position;
  v_texture = outputValue_1.texture2D;
  v_gradient = outputValue_1.gradient;
  v_shininess = outputValue_1.shininess;
  v_specularity = outputValue_1.specularity;
  v_clipPosition = outputValue_1.clipPosition;
//foggedSpecularLandmark_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
struct Scale {
  highp float scale;
  highp vec3 tileOrigin;
  highp vec3 tileSize;
struct Style {
  highp vec4 color[8];
  highp vec4 alternateColor[8];
  highp vec2 shininessAndSpecularity[8];
  highp float textureCoordScale[8];
  highp float textureLightness;
  highp float brightness;
  highp vec3 cameraPositionInTileSpace;
  highp float fogFactor;
struct Lighting {
  highp vec4 lightDirection[3];
  highp vec4 lightColor[3];
  highp vec4 lightSpecularColor;
  highp vec4 ambientLightColor;
struct Fade {
  highp vec2 fadeEquation;
  highp float alphaFactor;
varying highp float v_fogCoordinate;
varying lowp vec4 v_fogColor;
varying lowp vec4 v_unlitColor;
varying lowp vec4 v_diffuseColor;
varying highp vec3 v_normal;
varying highp vec3 v_position;
varying highp vec2 v_texture;
varying lowp float v_gradient;
varying highp float v_shininess;
varying highp float v_specularity;
varying highp vec3 v_clipPosition;
uniform Scale scale;
uniform Style style;
uniform Lighting lighting;
uniform Fade fade;
uniform sampler2D textureSampler;
void main ()
  highp float tmpvar_1;
  tmpvar_1 = scale.scale;
  highp float tmpvar_2;
  tmpvar_2 = style.brightness;
  highp vec4 tmpvar_3;
  tmpvar_3 = lighting.lightDirection[0];
  highp vec2 tmpvar_4;
  tmpvar_4 = fade.fadeEquation;
  lowp float textureLightness_5;
  textureLightness_5 = style.textureLightness;
  lowp vec4 texturedColor_6;
  lowp float lowScale_7;
  lowScale_7 = tmpvar_1;
  lowp vec3 tmpvar_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = (lighting.lightSpecularColor.xyz * vec3(((v_specularity * 
    pow (max (0.0, dot (normalize(
      (v_position - style.cameraPositionInTileSpace)
    ), normalize(
      (tmpvar_3.xyz - (2.0 * (dot (v_normal, tmpvar_3.xyz) * v_normal)))
    ))), v_shininess)
  ) * (
    (v_shininess + 8.0)
   / 25.13274))));
  tmpvar_8 = tmpvar_9;
  lowp float styleBrightness_10;
  styleBrightness_10 = tmpvar_2;
  lowp vec4 tmpvar_11;
  tmpvar_11.xyz = ((v_diffuseColor.xyz + tmpvar_8) * vec3(mix (1.0, (
    min (v_gradient, 0.9799805)
   * styleBrightness_10), lowScale_7)));
  tmpvar_11.w = v_diffuseColor.w;
  lowp vec4 tmpvar_12;
  tmpvar_12 = (mix (v_unlitColor, tmpvar_11, lowScale_7) * mix (texture2D (textureSampler, v_texture), vec4(1.0, 1.0, 1.0, 1.0), textureLightness_5));
  texturedColor_6.xyz = tmpvar_12.xyz;
  lowp float tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((v_clipPosition.y * tmpvar_4.x) + tmpvar_4.y), fade.alphaFactor, 1.0);
  tmpvar_13 = tmpvar_14;
  texturedColor_6.w = (tmpvar_12.w * tmpvar_13);
  lowp vec4 color_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = mix (texturedColor_6, v_fogColor, clamp (v_fogCoordinate, 0.0, 1.0));
  color_15 = tmpvar_16;
  gl_FragColor = color_15;
//glow_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec2 vertex_pos;
  highp vec4 normalAndTexture;
struct View {
  highp mat4 modelViewProjectionMatrix;
  highp float tilePerPoint;
struct Style {
  highp vec4 color;
  highp float radius;
attribute highp vec2 vertex_attributes_vertex_pos;
attribute highp vec4 vertex_attributes_normalAndTexture;
uniform View view;
uniform Style style;
void main ()
  VertexIn vertex_attributes_1;
  vertex_attributes_1.vertex_pos = vertex_attributes_vertex_pos;
  vertex_attributes_1.normalAndTexture = vertex_attributes_normalAndTexture;
  highp vec2 tmpvar_2;
  tmpvar_2 = (((vertex_attributes_1.normalAndTexture.xy * vec2(style.radius)) * vec2(view.tilePerPoint)) * vertex_attributes_1.normalAndTexture.zz);
  highp vec4 tmpvar_3;
  tmpvar_3.zw = vec2(0.0, 1.0);
  tmpvar_3.x = (vertex_attributes_1.vertex_pos.x + tmpvar_2.x);
  tmpvar_3.y = (vertex_attributes_1.vertex_pos.y + tmpvar_2.y);
  gl_Position = (view.modelViewProjectionMatrix * tmpvar_3);
//glow_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
struct Style {
  highp vec4 color;
  highp float radius;
uniform Style style;
void main ()
  highp vec4 tmpvar_1;
  tmpvar_1 = style.color;
  gl_FragColor = tmpvar_1;
//glowAlpha_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec2 vertex_pos;
  highp vec4 normalAndTexture;
struct View {
  highp mat4 modelViewProjectionMatrix;
  highp float tilePerPoint;
struct Glow {
  highp float radius;
  highp float opacity;
struct VertexOut {
  highp float alphaRamp;
attribute highp vec2 vertex_attributes_vertex_pos;
attribute highp vec4 vertex_attributes_normalAndTexture;
uniform View view;
uniform Glow glow;
varying highp float v_alphaRamp;
void main ()
  VertexOut outputValue_1;
  VertexIn vertex_attributes_2;
  vertex_attributes_2.vertex_pos = vertex_attributes_vertex_pos;
  vertex_attributes_2.normalAndTexture = vertex_attributes_normalAndTexture;
  highp vec2 tmpvar_3;
  tmpvar_3 = (((vertex_attributes_2.normalAndTexture.xy * vec2(glow.radius)) * vec2(view.tilePerPoint)) * vertex_attributes_2.normalAndTexture.zz);
  highp vec4 tmpvar_4;
  tmpvar_4.zw = vec2(0.0, 1.0);
  tmpvar_4.x = (vertex_attributes_2.vertex_pos.x + tmpvar_3.x);
  tmpvar_4.y = (vertex_attributes_2.vertex_pos.y + tmpvar_3.y);
  outputValue_1.alphaRamp = (glow.opacity * (1.0 - vertex_attributes_2.normalAndTexture.z));
  gl_Position = (view.modelViewProjectionMatrix * tmpvar_4);
  v_alphaRamp = outputValue_1.alphaRamp;
//glowAlpha_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
varying highp float v_alphaRamp;
void main ()
  lowp float lastOneMinusAlpha_1;
  lowp float oneMinusAlpha_2;
  highp float tmpvar_3;
  tmpvar_3 = (1.0 - v_alphaRamp);
  oneMinusAlpha_2 = tmpvar_3;
  mediump float tmpvar_4;
  tmpvar_4 = gl_LastFragData[0].w;
  lastOneMinusAlpha_1 = tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_5 = min (oneMinusAlpha_2, lastOneMinusAlpha_1);
  mediump vec4 tmpvar_6;
  tmpvar_6.x = gl_LastFragData[0].x;
  tmpvar_6.y = gl_LastFragData[0].y;
  tmpvar_6.z = gl_LastFragData[0].z;
  tmpvar_6.w = tmpvar_5;
  gl_FragColor = tmpvar_6;
//glyphWithNormalHalo_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec2 position;
  highp vec2 texture2D;
  highp vec2 alphaAndHaloSizeInPixels;
  mediump vec4 color;
  mediump vec4 haloColor;
struct View {
  highp mat4 matrix;
struct VertexOut {
  highp vec2 texture2D;
  lowp vec4 color;
  lowp vec4 haloColor;
  highp float alpha;
  highp float haloSizeInPixels;
attribute highp vec2 vertex_attributes_position;
attribute highp vec2 vertex_attributes_texture;
attribute highp vec2 vertex_attributes_alphaAndHaloSizeInPixels;
attribute mediump vec4 vertex_attributes_color;
attribute mediump vec4 vertex_attributes_haloColor;
uniform View view;
varying highp vec2 v_texture;
varying lowp vec4 v_color;
varying lowp vec4 v_haloColor;
varying highp float v_alpha;
varying highp float v_haloSizeInPixels;
void main ()
  VertexIn vertex_attributes_1;
  vertex_attributes_1.position = vertex_attributes_position;
  vertex_attributes_1.texture2D = vertex_attributes_texture;
  vertex_attributes_1.alphaAndHaloSizeInPixels = vertex_attributes_alphaAndHaloSizeInPixels;
  vertex_attributes_1.color = vertex_attributes_color;
  vertex_attributes_1.haloColor = vertex_attributes_haloColor;
  VertexOut outputValue_2;
  highp float tmpvar_3;
  tmpvar_3 = (vertex_attributes_1.alphaAndHaloSizeInPixels.x / 65535.0);
  highp vec4 tmpvar_4;
  tmpvar_4.zw = vec2(0.0, 1.0);
  tmpvar_4.x = vertex_attributes_1.position.x;
  tmpvar_4.y = vertex_attributes_1.position.y;
  outputValue_2.texture2D = vertex_attributes_1.texture2D;
  highp vec4 tmpvar_5;
  tmpvar_5.x = vertex_attributes_1.color.x;
  tmpvar_5.y = vertex_attributes_1.color.y;
  tmpvar_5.z = vertex_attributes_1.color.z;
  tmpvar_5.w = (vertex_attributes_1.color.w * tmpvar_3);
  outputValue_2.color = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.x = vertex_attributes_1.haloColor.x;
  tmpvar_6.y = vertex_attributes_1.haloColor.y;
  tmpvar_6.z = vertex_attributes_1.haloColor.z;
  tmpvar_6.w = (vertex_attributes_1.haloColor.w * tmpvar_3);
  outputValue_2.haloColor = tmpvar_6;
  outputValue_2.haloSizeInPixels = ((vertex_attributes_1.alphaAndHaloSizeInPixels.y - 32767.5) * 0.01);
  gl_Position = (view.matrix * tmpvar_4);
  v_texture = outputValue_2.texture2D;
  v_color = outputValue_2.color;
  v_haloColor = outputValue_2.haloColor;
  v_alpha = outputValue_2.alpha;
  v_haloSizeInPixels = outputValue_2.haloSizeInPixels;
//glyphWithNormalHalo_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
struct Channel {
  highp int channel;
struct Information {
  highp int maxDistanceStored;
varying highp vec2 v_texture;
varying lowp vec4 v_color;
varying lowp vec4 v_haloColor;
varying highp float v_alpha;
varying highp float v_haloSizeInPixels;
uniform Channel channel;
uniform Information information;
uniform sampler2D textureAtlas;
void main ()
  mediump vec4 mask_1;
  lowp vec4 out_color_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (textureAtlas, v_texture);
  mask_1 = tmpvar_3;
  if ((channel.channel == 1)) {
    mediump vec4 tmpvar_4;
    tmpvar_4.xyz = v_color.xyz;
    tmpvar_4.w = (mask_1.x * v_color.w);
    out_color_2 = tmpvar_4;
  } else {
    mediump float alpha_5;
    mediump float haloDistance_6;
    highp float tmpvar_7;
    tmpvar_7 = (mask_1.y * float(information.maxDistanceStored));
    haloDistance_6 = tmpvar_7;
    highp float tmpvar_8;
    tmpvar_8 = (1.0 - min (max (
      ((haloDistance_6 - v_haloSizeInPixels) / 2.0)
    , 0.0), 1.0));
    alpha_5 = tmpvar_8;
    mediump vec4 tmpvar_9;
    tmpvar_9.xyz = v_haloColor.xyz;
    tmpvar_9.w = (alpha_5 * v_haloColor.w);
    out_color_2 = tmpvar_9;
  };
  gl_FragColor = out_color_2;
//glyphWithOuterHalo_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec2 position;
  highp vec2 texture2D;
  highp vec2 alphaAndHaloSizeInPixels;
  mediump vec4 color;
  mediump vec4 haloColor;
struct View {
  highp mat4 matrix;
struct VertexOut {
  highp vec2 texture2D;
  lowp vec4 color;
  lowp vec4 haloColor;
  highp float alpha;
  highp float haloSizeInPixels;
attribute highp vec2 vertex_attributes_position;
attribute highp vec2 vertex_attributes_texture;
attribute highp vec2 vertex_attributes_alphaAndHaloSizeInPixels;
attribute mediump vec4 vertex_attributes_color;
attribute mediump vec4 vertex_attributes_haloColor;
uniform View view;
varying highp vec2 v_texture;
varying lowp vec4 v_color;
varying lowp vec4 v_haloColor;
varying highp float v_alpha;
varying highp float v_haloSizeInPixels;
void main ()
  VertexIn vertex_attributes_1;
  vertex_attributes_1.position = vertex_attributes_position;
  vertex_attributes_1.texture2D = vertex_attributes_texture;
  vertex_attributes_1.alphaAndHaloSizeInPixels = vertex_attributes_alphaAndHaloSizeInPixels;
  vertex_attributes_1.color = vertex_attributes_color;
  vertex_attributes_1.haloColor = vertex_attributes_haloColor;
  VertexOut outputValue_2;
  highp float tmpvar_3;
  tmpvar_3 = (vertex_attributes_1.alphaAndHaloSizeInPixels.x / 65535.0);
  highp vec4 tmpvar_4;
  tmpvar_4.zw = vec2(0.0, 1.0);
  tmpvar_4.x = vertex_attributes_1.position.x;
  tmpvar_4.y = vertex_attributes_1.position.y;
  outputValue_2.texture2D = vertex_attributes_1.texture2D;
  highp vec4 tmpvar_5;
  tmpvar_5.x = vertex_attributes_1.color.x;
  tmpvar_5.y = vertex_attributes_1.color.y;
  tmpvar_5.z = vertex_attributes_1.color.z;
  tmpvar_5.w = (vertex_attributes_1.color.w * tmpvar_3);
  outputValue_2.color = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.x = vertex_attributes_1.haloColor.x;
  tmpvar_6.y = vertex_attributes_1.haloColor.y;
  tmpvar_6.z = vertex_attributes_1.haloColor.z;
  tmpvar_6.w = (vertex_attributes_1.haloColor.w * tmpvar_3);
  outputValue_2.haloColor = tmpvar_6;
  outputValue_2.haloSizeInPixels = ((vertex_attributes_1.alphaAndHaloSizeInPixels.y - 32767.5) * 0.01);
  gl_Position = (view.matrix * tmpvar_4);
  v_texture = outputValue_2.texture2D;
  v_color = outputValue_2.color;
  v_haloColor = outputValue_2.haloColor;
  v_alpha = outputValue_2.alpha;
  v_haloSizeInPixels = outputValue_2.haloSizeInPixels;
//glyphWithOuterHalo_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
struct Channel {
  highp int channel;
struct Information {
  highp int maxDistanceStored;
varying highp vec2 v_texture;
varying lowp vec4 v_color;
varying lowp vec4 v_haloColor;
varying highp float v_alpha;
varying highp float v_haloSizeInPixels;
uniform Channel channel;
uniform Information information;
uniform sampler2D textureAtlas;
void main ()
  mediump vec4 mask_1;
  lowp vec4 framebuffer_2;
  lowp vec4 out_color_3;
  mediump vec4 tmpvar_4;
  tmpvar_4 = gl_LastFragData[0];
  framebuffer_2 = tmpvar_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (textureAtlas, v_texture);
  mask_1 = tmpvar_5;
  if ((channel.channel == 0)) {
    mediump float haloSizeInPixels_6;
    mediump float haloDistance_7;
    highp float tmpvar_8;
    tmpvar_8 = (mask_1.y * float(information.maxDistanceStored));
    haloDistance_7 = tmpvar_8;
    highp float tmpvar_9;
    tmpvar_9 = max (v_haloSizeInPixels, ((v_haloSizeInPixels + 2.0) * framebuffer_2.w));
    haloSizeInPixels_6 = tmpvar_9;
    mediump float tmpvar_10;
    tmpvar_10 = (1.0 - min (max (
      ((haloDistance_7 - haloSizeInPixels_6) / 2.0)
    , 0.0), 1.0));
    mediump vec4 tmpvar_11;
    tmpvar_11.xyz = mix (framebuffer_2.xyz, v_haloColor.xyz, (tmpvar_10 * v_haloColor.w));
    tmpvar_11.w = min ((1.0 - (tmpvar_10 * v_haloColor.w)), framebuffer_2.w);
    out_color_3 = tmpvar_11;
  } else {
    mediump vec4 tmpvar_12;
    tmpvar_12.xyz = mix (framebuffer_2.xyz, v_color.xyz, (mask_1.x * v_color.w));
    tmpvar_12.w = framebuffer_2.w;
    out_color_3 = tmpvar_12;
  };
  gl_FragColor = out_color_3;
//grid_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec4 position;
struct View {
  highp mat4 modelViewProjectionMatrix;
  highp float tilePerPoint;
struct GridView {
  highp mat4 gridView;
  highp vec4 color;
struct Style {
  highp vec4 lineColor;
  highp float majorSize;
  highp float minorSize;
  highp float gridMix;
  highp vec4 lineParams;
struct MajorMinorVertex {
  highp vec4 majorMinorVertex;
attribute highp vec4 vertex_input_position;
uniform View view;
uniform GridView gridView;
uniform Style style;
varying highp vec4 v_majorMinorVertex;
void main ()
  MajorMinorVertex out_value_1;
  VertexIn vertex_input_2;
  vertex_input_2.position = vertex_input_position;
  highp vec4 tmpvar_3;
  tmpvar_3 = vertex_input_2.position;
  gl_Position = (view.modelViewProjectionMatrix * tmpvar_3);
  highp vec4 tmpvar_4;
  tmpvar_4 = (gridView.gridView * tmpvar_3);
  out_value_1.majorMinorVertex.xy = (tmpvar_4.xy * vec2(style.majorSize));
  out_value_1.majorMinorVertex.zw = (tmpvar_4.xy * vec2(style.minorSize));
  v_majorMinorVertex = out_value_1.majorMinorVertex;
//grid_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
struct GridView {
  highp mat4 gridView;
  highp vec4 color;
struct Style {
  highp vec4 lineColor;
  highp float majorSize;
  highp float minorSize;
  highp float gridMix;
  highp vec4 lineParams;
varying highp vec4 v_majorMinorVertex;
uniform GridView gridView;
uniform Style style;
void main ()
  mediump float grid_1;
  mediump vec4 g_2;
  lowp vec4 out_color_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (abs(dFdx(v_majorMinorVertex)) + abs(dFdy(v_majorMinorVertex)));
  highp vec4 tmpvar_5;
  tmpvar_5.x = style.lineParams.x;
  tmpvar_5.y = style.lineParams.x;
  tmpvar_5.z = style.lineParams.z;
  tmpvar_5.w = style.lineParams.z;
  highp vec4 tmpvar_6;
  tmpvar_6.x = style.lineParams.y;
  tmpvar_6.y = style.lineParams.y;
  tmpvar_6.z = style.lineParams.w;
  tmpvar_6.w = style.lineParams.w;
  highp vec4 tmpvar_7;
  tmpvar_7 = clamp (((
    abs((fract((v_majorMinorVertex - vec4(0.5, 0.5, 0.5, 0.5))) - vec4(0.5, 0.5, 0.5, 0.5)))
   - 
    (tmpvar_4 * tmpvar_5)
  ) / (tmpvar_4 * 
    (tmpvar_6 - tmpvar_5)
  )), 0.0, 1.0);
  g_2 = tmpvar_7;
  mediump float tmpvar_8;
  tmpvar_8 = min (g_2.x, g_2.y);
  mediump float tmpvar_9;
  tmpvar_9 = min (g_2.z, g_2.w);
  highp float tmpvar_10;
  tmpvar_10 = mix (tmpvar_9, tmpvar_8, style.gridMix);
  grid_1 = tmpvar_10;
  mediump vec4 tmpvar_11;
  tmpvar_11 = vec4((1.0 - grid_1));
  highp vec4 tmpvar_12;
  tmpvar_12 = ((style.lineColor * tmpvar_11) + (gridView.color * vec4(grid_1)));
  out_color_3.xyz = tmpvar_12.xyz;
  out_color_3.w = 1.0;
  gl_FragColor = out_color_3;
//icon_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec2 position;
  highp vec2 texture2D;
  mediump vec4 alphaBrightnessPercentSaturation;
struct View {
  highp mat4 matrix;
struct VertexOut {
  highp vec2 texture2D;
  mediump float alpha;
  mediump float brightness;
  mediump float saturation;
attribute highp vec2 vertex_attributes_position;
attribute highp vec2 vertex_attributes_texture;
attribute mediump vec4 vertex_attributes_alphaBrightnessPercentSaturation;
uniform View view;
varying highp vec2 v_texture;
varying mediump float v_alpha;
varying mediump float v_brightness;
varying mediump float v_saturation;
void main ()
  VertexOut outputValue_1;
  VertexIn vertex_attributes_2;
  vertex_attributes_2.position = vertex_attributes_position;
  vertex_attributes_2.texture2D = vertex_attributes_texture;
  vertex_attributes_2.alphaBrightnessPercentSaturation = vertex_attributes_alphaBrightnessPercentSaturation;
  outputValue_1.texture2D = vertex_attributes_2.texture2D;
  outputValue_1.alpha = vertex_attributes_2.alphaBrightnessPercentSaturation.x;
  outputValue_1.brightness = (vertex_attributes_2.alphaBrightnessPercentSaturation.y * 2.55);
  outputValue_1.saturation = vertex_attributes_2.alphaBrightnessPercentSaturation.z;
  highp vec4 tmpvar_3;
  tmpvar_3.zw = vec2(0.0, 1.0);
  tmpvar_3.x = vertex_attributes_2.position.x;
  tmpvar_3.y = vertex_attributes_2.position.y;
  gl_Position = (view.matrix * tmpvar_3);
  v_texture = outputValue_1.texture2D;
  v_alpha = outputValue_1.alpha;
  v_brightness = outputValue_1.brightness;
  v_saturation = outputValue_1.saturation;
//icon_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
varying highp vec2 v_texture;
varying mediump float v_alpha;
varying mediump float v_brightness;
varying mediump float v_saturation;
uniform sampler2D textureMap;
void main ()
  mediump vec4 tex0_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (textureMap, v_texture);
  tex0_1 = tmpvar_2;
  tex0_1.xyz = mix (vec3(dot (tex0_1.xyz, vec3(0.2990723, 0.5869141, 0.1140137))), tex0_1.xyz, v_saturation);
  tex0_1.xyz = mix ((tex0_1.xyz * vec3((1.0 - 
    max (0.0, (1.0 - v_brightness))
  ))), tex0_1.www, max (0.0, (v_brightness - 1.0)));
  gl_FragColor = (tex0_1 * vec4(v_alpha));
//imageCopy_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec2 position;
  highp vec2 texcoord;
struct VertexOut {
  highp vec2 texcoord;
attribute highp vec2 vertexInput_position;
attribute highp vec2 vertexInput_texcoord;
varying highp vec2 v_texcoord;
void main ()
  VertexOut outputValue_1;
  VertexIn vertexInput_2;
  vertexInput_2.position = vertexInput_position;
  vertexInput_2.texcoord = vertexInput_texcoord;
  outputValue_1.texcoord = vertexInput_2.texcoord;
  highp vec4 tmpvar_3;
  tmpvar_3.zw = vec2(0.0, 1.0);
  tmpvar_3.xy = ((vertexInput_2.position * vec2(2.0, 2.0)) - vec2(1.0, 1.0));
  gl_Position = tmpvar_3;
  v_texcoord = outputValue_1.texcoord;
//imageCopy_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
varying highp vec2 v_texcoord;
uniform sampler2D textureMap;
void main ()
  lowp vec4 tmpvar_1;
  tmpvar_1 = texture2D (textureMap, v_texcoord);
  gl_FragColor = tmpvar_1;
//landmarkDepth_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec4 position;
  highp vec2 texture2D;
  highp vec4 normalAndStyleIndex;
struct View {
  highp mat4 modelViewProjectionMatrix;
  highp float tilePerPoint;
struct Scale {
  highp float scale;
  highp vec3 tileOrigin;
  highp vec3 tileSize;
attribute highp vec4 vertex_input_position;
attribute highp vec2 vertex_input_texture;
attribute highp vec4 vertex_input_normalAndStyleIndex;
uniform View view;
uniform Scale scale;
void main ()
  VertexIn vertex_input_1;
  vertex_input_1.position = vertex_input_position;
  vertex_input_1.texture2D = vertex_input_texture;
  vertex_input_1.normalAndStyleIndex = vertex_input_normalAndStyleIndex;
  highp vec3 tmpvar_2;
  tmpvar_2 = (scale.tileOrigin + (scale.tileSize * vertex_input_1.position.xyz));
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xy = tmpvar_2.xy;
  tmpvar_3.z = (tmpvar_2.z * scale.scale);
  gl_Position = (view.modelViewProjectionMatrix * tmpvar_3);
//landmarkDepth_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
void main ()
  gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);
//landmarkFlat_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec4 position;
  highp vec2 texture2D;
  highp vec4 normalAndStyleIndex;
struct View {
  highp mat4 modelViewProjectionMatrix;
  highp float tilePerPoint;
struct Scale {
  highp float scale;
  highp vec3 tileOrigin;
  highp vec3 tileSize;
struct Style {
  highp vec4 color[8];
  highp vec4 alternateColor[8];
  highp vec2 shininessAndSpecularity[8];
  highp float textureCoordScale[8];
  highp float textureLightness;
  highp float brightness;
  highp vec3 cameraPositionInTileSpace;
  highp float fogFactor;
struct VertexOut {
  lowp vec4 color;
  highp vec2 texture2D;
attribute highp vec4 vertex_input_position;
attribute highp vec2 vertex_input_texture;
attribute highp vec4 vertex_input_normalAndStyleIndex;
uniform View view;
uniform Scale scale;
uniform Style style;
varying lowp vec4 v_color;
varying highp vec2 v_texture;
void main ()
  VertexIn vertex_input_1;
  vertex_input_1.position = vertex_input_position;
  vertex_input_1.texture2D = vertex_input_texture;
  vertex_input_1.normalAndStyleIndex = vertex_input_normalAndStyleIndex;
  VertexOut outputValue_2;
  highp int tmpvar_3;
  tmpvar_3 = int((vertex_input_1.normalAndStyleIndex.w * 127.5));
  highp vec4 tmpvar_4;
  tmpvar_4 = style.color[tmpvar_3];
  outputValue_2.color = tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (scale.tileOrigin + (scale.tileSize * vertex_input_1.position.xyz));
  highp vec4 tmpvar_6;
  tmpvar_6.zw = vec2(0.0, 1.0);
  tmpvar_6.xy = tmpvar_5.xy;
  highp vec4 tmpvar_7;
  tmpvar_7 = (view.modelViewProjectionMatrix * tmpvar_6);
  highp vec4 tmpvar_8;
  tmpvar_8.xy = tmpvar_7.xy;
  tmpvar_8.z = ((1.0 - tmpvar_5.z) * tmpvar_7.w);
  tmpvar_8.w = tmpvar_7.w;
  gl_Position = tmpvar_8;
  outputValue_2.texture2D = vertex_input_1.texture2D;
  v_color = outputValue_2.color;
  v_texture = outputValue_2.texture2D;
//landmarkFlat_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
struct Style {
  highp vec4 color[8];
  highp vec4 alternateColor[8];
  highp vec2 shininessAndSpecularity[8];
  highp float textureCoordScale[8];
  highp float textureLightness;
  highp float brightness;
  highp vec3 cameraPositionInTileSpace;
  highp float fogFactor;
varying lowp vec4 v_color;
varying highp vec2 v_texture;
uniform Style style;
uniform sampler2D textureSampler;
void main ()
  lowp vec4 tmpvar_1;
  mediump float textureLightness_2;
  textureLightness_2 = style.textureLightness;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (textureSampler, v_texture);
  mediump vec4 tmpvar_4;
  tmpvar_4 = mix (tmpvar_3, vec4(1.0, 1.0, 1.0, 1.0), textureLightness_2);
  tmpvar_1 = (v_color * tmpvar_4);
  gl_FragColor = tmpvar_1;
//line_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec2 position;
  highp vec2 normal;
  highp vec2 texCoord;
struct View {
  highp mat4 modelViewProjectionMatrix;
  highp float tilePerPoint;
attribute highp vec2 vertex_attributes_position;
attribute highp vec2 vertex_attributes_normal;
attribute highp vec2 vertex_attributes_texCoord;
uniform View view;
void main ()
  VertexIn vertex_attributes_1;
  vertex_attributes_1.position = vertex_attributes_position;
  vertex_attributes_1.normal = vertex_attributes_normal;
  vertex_attributes_1.texCoord = vertex_attributes_texCoord;
  highp vec4 tmpvar_2;
  tmpvar_2.zw = vec2(0.0, 1.0);
  tmpvar_2.x = vertex_attributes_1.position.x;
  tmpvar_2.y = vertex_attributes_1.position.y;
  gl_Position = (view.modelViewProjectionMatrix * tmpvar_2);
//line_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
struct Style {
  highp vec4 color;
uniform Style style;
void main ()
  highp vec4 tmpvar_1;
  tmpvar_1 = style.color;
  gl_FragColor = tmpvar_1;
//maneuverPoint_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec2 position;
  highp vec2 normal;
struct View {
  highp mat4 modelViewProjectionMatrix;
  highp float tilePerPoint;
struct Style {
  highp vec4 color;
  highp float halfWidth;
struct VertexOut {
  highp vec2 texCoord;
attribute highp vec2 vertexInput_position;
attribute highp vec2 vertexInput_normal;
uniform View view;
uniform Style style;
varying highp vec2 v_texCoord;
void main ()
  VertexOut outputValue_1;
  VertexIn vertexInput_2;
  vertexInput_2.position = vertexInput_position;
  vertexInput_2.normal = vertexInput_normal;
  highp vec4 tmpvar_3;
  tmpvar_3.zw = vec2(0.0, 1.0);
  tmpvar_3.xy = (vertexInput_2.position + (vertexInput_2.normal * vec2(style.halfWidth)));
  gl_Position = (view.modelViewProjectionMatrix * tmpvar_3);
  outputValue_1.texCoord = vertexInput_2.normal;
  v_texCoord = outputValue_1.texCoord;
//maneuverPoint_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
struct Style {
  highp vec4 color;
  highp float halfWidth;
varying highp vec2 v_texCoord;
uniform Style style;
uniform sampler2D alphaMap;
void main ()
  lowp vec4 tmpvar_1;
  tmpvar_1 = texture2D (alphaMap, v_texCoord);
  highp vec4 tmpvar_2;
  tmpvar_2.xyz = style.color.xyz;
  tmpvar_2.w = (style.color.w * tmpvar_1.x);
  gl_FragColor = tmpvar_2;
//occlusionLine_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec3 position;
struct View {
  highp mat4 matrix;
  highp vec4 color;
attribute highp vec3 vertex_attributes_position;
uniform View view;
void main ()
  VertexIn vertex_attributes_1;
  vertex_attributes_1.position = vertex_attributes_position;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = vertex_attributes_1.position;
  gl_Position = (view.matrix * tmpvar_2);
  gl_PointSize = 6.0;
//occlusionLine_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
struct View {
  highp mat4 matrix;
  highp vec4 color;
uniform View view;
void main ()
  highp vec4 tmpvar_1;
  tmpvar_1 = view.color;
  gl_FragColor = tmpvar_1;
//optimizedTraffic_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec2 startPosition;
  highp vec2 endPosition;
  highp float startDistance;
  highp float endDistance;
  highp vec2 direction;
  highp float uniDirectional;
  highp vec2 coordinates;
struct View {
  highp mat4 modelViewProjectionMatrix;
  highp float tilePerPoint;
struct Style {
  highp float halfWidth;
  highp vec4 color;
  highp float pitchRatio;
  highp vec4 glowColor;
  highp float drivingDirection;
  highp float zoomDependentShift;
  highp float pillPhase;
  highp float frameBufferAlphaScale;
  highp float sideOffset;
  highp float pillLength;
  highp float localPillRadius;
  highp float localPillStart;
  highp float pillAspectRatio;
  highp vec4 pillAlphaFunction;
struct VertexOut {
  highp vec3 pillCoords;
  highp float pillY;
attribute highp vec2 vertexInput_startPosition;
attribute highp vec2 vertexInput_endPosition;
attribute highp float vertexInput_startDistance;
attribute highp float vertexInput_endDistance;
attribute highp vec2 vertexInput_direction;
attribute highp float vertexInput_uniDirectional;
attribute highp vec2 vertexInput_coordinates;
uniform View view;
uniform Style style;
varying highp vec3 v_pillCoords;
varying highp float v_pillY;
void main ()
  highp float extrusionAmount_1;
  VertexOut outputValue_2;
  VertexIn vertexInput_3;
  vertexInput_3.startPosition = vertexInput_startPosition;
  vertexInput_3.endPosition = vertexInput_endPosition;
  vertexInput_3.startDistance = vertexInput_startDistance;
  vertexInput_3.endDistance = vertexInput_endDistance;
  vertexInput_3.direction = vertexInput_direction;
  vertexInput_3.uniDirectional = vertexInput_uniDirectional;
  vertexInput_3.coordinates = vertexInput_coordinates;
  highp float tmpvar_4;
  tmpvar_4 = (style.drivingDirection * (1.0 - (style.zoomDependentShift * vertexInput_3.uniDirectional)));
  highp vec2 tmpvar_5;
  tmpvar_5.x = vertexInput_3.direction.y;
  tmpvar_5.y = -(vertexInput_3.direction.x);
  highp float tmpvar_6;
  if ((vertexInput_3.coordinates.x < 0.0)) {
    tmpvar_6 = vertexInput_3.startDistance;
  } else {
    tmpvar_6 = vertexInput_3.endDistance;
  };
  highp float tmpvar_7;
  tmpvar_7 = fract(((tmpvar_6 / style.pillLength) + style.pillPhase));
  highp float tmpvar_8;
  tmpvar_8 = (tmpvar_7 - clamp (tmpvar_7, style.localPillStart, (1.0 - style.localPillStart)));
  if (((tmpvar_8 * tmpvar_8) < 1e-06)) {
    extrusionAmount_1 = ((style.localPillStart * sign(vertexInput_3.coordinates.x)) * style.pillLength);
  } else {
    extrusionAmount_1 = (((style.localPillStart - 
      abs(tmpvar_8)
    ) * sign(tmpvar_8)) * style.pillLength);
  };
  highp vec4 tmpvar_9;
  tmpvar_9.zw = vec2(0.0, 1.0);
  tmpvar_9.xy = ((mix (vertexInput_3.startPosition, vertexInput_3.endPosition, 
    float((vertexInput_3.coordinates.x >= 0.0))
  ) + (tmpvar_5 * vec2(
    (((tmpvar_4 * style.sideOffset) + (sign(vertexInput_3.coordinates.y) * style.halfWidth)) * view.tilePerPoint)
  ))) + (vertexInput_3.direction * vec2(extrusionAmount_1)));
  gl_Position = (view.modelViewProjectionMatrix * tmpvar_9);
  highp vec3 tmpvar_10;
  tmpvar_10.x = (tmpvar_6 + extrusionAmount_1);
  tmpvar_10.y = vertexInput_3.startDistance;
  tmpvar_10.z = vertexInput_3.endDistance;
  highp vec3 tmpvar_11;
  tmpvar_11.x = 0.0;
  tmpvar_11.y = -(style.localPillStart);
  tmpvar_11.z = style.localPillStart;
  outputValue_2.pillCoords = (((tmpvar_10 / vec3(style.pillLength)) + vec3(style.pillPhase)) + tmpvar_11);
  outputValue_2.pillY = ((vertexInput_3.coordinates.y * 0.5) / style.pillAspectRatio);
  v_pillCoords = outputValue_2.pillCoords;
  v_pillY = outputValue_2.pillY;
//optimizedTraffic_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
struct Style {
  highp float halfWidth;
  highp vec4 color;
  highp float pitchRatio;
  highp vec4 glowColor;
  highp float drivingDirection;
  highp float zoomDependentShift;
  highp float pillPhase;
  highp float frameBufferAlphaScale;
  highp float sideOffset;
  highp float pillLength;
  highp float localPillRadius;
  highp float localPillStart;
  highp float pillAspectRatio;
  highp vec4 pillAlphaFunction;
varying highp vec3 v_pillCoords;
varying highp float v_pillY;
uniform Style style;
void main ()
  lowp vec3 glowColor_1;
  lowp float maxAlpha_2;
  lowp vec4 framebuffer_3;
  lowp vec4 o_color_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (v_pillCoords - vec3(floor(v_pillCoords.x)));
  highp vec2 tmpvar_6;
  tmpvar_6 = clamp (tmpvar_5.yz, 0.0, 1.0);
  highp vec2 tmpvar_7;
  tmpvar_7.x = abs((tmpvar_5.x - clamp (tmpvar_5.x, 
    (tmpvar_6.x + style.localPillStart)
  , 
    (tmpvar_6.y - style.localPillStart)
  )));
  tmpvar_7.y = v_pillY;
  highp vec2 tmpvar_8;
  tmpvar_8.x = style.color.w;
  tmpvar_8.y = style.glowColor.w;
  highp vec2 tmpvar_9;
  tmpvar_9 = (clamp ((
    (style.pillAlphaFunction.xy - vec2(sqrt(dot (tmpvar_7, tmpvar_7))))
   * 
    (1.0/((style.pillAlphaFunction.zw * vec2((abs(
      dFdx(v_pillY)
    ) + abs(
      dFdy(v_pillY)
    ))))))
  ), 0.0, 1.0) * tmpvar_8);
  mediump vec4 tmpvar_10;
  tmpvar_10 = gl_LastFragData[0];
  framebuffer_3 = tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = (1.0 - (framebuffer_3.w * style.frameBufferAlphaScale));
  maxAlpha_2 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = mix (framebuffer_3.xyz, style.glowColor.xyz, (maxAlpha_2 * tmpvar_9.y));
  glowColor_1 = tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13.xyz = mix (glowColor_1, style.color.xyz, min (tmpvar_9.x, maxAlpha_2));
  tmpvar_13.w = max (tmpvar_9.x, framebuffer_3.w);
  o_color_4 = tmpvar_13;
  gl_FragColor = o_color_4;
//outerShadowRibbon_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec2 position;
  highp vec2 normal;
  highp vec2 texCoord;
struct View {
  highp mat4 modelViewProjectionMatrix;
  highp float tilePerPoint;
struct Style {
  highp vec4 color;
  highp float halfWidth;
  highp float imageWidth;
  highp float strokeSlopeFactor;
struct VertexOut {
  highp vec2 texCoord;
attribute highp vec2 vertexInput_position;
attribute highp vec2 vertexInput_normal;
attribute highp vec2 vertexInput_texCoord;
uniform View view;
uniform Style style;
varying highp vec2 v_texCoord;
void main ()
  VertexOut outputValue_1;
  VertexIn vertexInput_2;
  vertexInput_2.position = vertexInput_position;
  vertexInput_2.normal = vertexInput_normal;
  vertexInput_2.texCoord = vertexInput_texCoord;
  outputValue_1.texCoord = vertexInput_2.texCoord;
  highp vec4 tmpvar_3;
  tmpvar_3.zw = vec2(0.0, 1.0);
  tmpvar_3.xy = (vertexInput_2.position + ((
    (vertexInput_2.normal * vec2(style.halfWidth))
   * vec2(view.tilePerPoint)) * vec2(4.0, 4.0)));
  gl_Position = (view.modelViewProjectionMatrix * tmpvar_3);
  v_texCoord = outputValue_1.texCoord;
//outerShadowRibbon_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
lowp vec4 impl_low_texture2DLodEXT(lowp sampler2D sampler, highp vec2 coord, mediump float lod)
#if defined(GL_EXT_shader_texture_lod)
return texture2DLodEXT(sampler, coord, lod);
#else
return texture2D(sampler, coord, lod);
#endif
struct Style {
  highp vec4 color;
  highp float halfWidth;
  highp float imageWidth;
  highp float strokeSlopeFactor;
varying highp vec2 v_texCoord;
uniform Style style;
uniform sampler2D distanceTexture;
void main ()
  lowp float shadow_1;
  mediump float dist_2;
  lowp vec4 o_color_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = style.color;
  o_color_3 = tmpvar_4;
  mediump float tmpvar_5;
  highp float tmpvar_6;
  tmpvar_6 = dFdx(v_texCoord.y);
  highp float tmpvar_7;
  tmpvar_7 = dFdy(v_texCoord.y);
  highp float tmpvar_8;
  tmpvar_8 = log2(max (1.0, (style.imageWidth * 
    sqrt(((tmpvar_6 * tmpvar_6) + (tmpvar_7 * tmpvar_7)))
  )));
  tmpvar_5 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = impl_low_texture2DLodEXT (distanceTexture, v_texCoord, tmpvar_5).x;
  dist_2 = tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = clamp ((dist_2 * style.strokeSlopeFactor), 0.0, 1.0);
  shadow_1 = tmpvar_10;
  o_color_3.w = (o_color_3.w * (shadow_1 * shadow_1));
  gl_FragColor = o_color_3;
//patternedRibbon_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec2 position;
  highp vec2 normal;
  highp vec2 texCoord;
  highp float distance;
struct View {
  highp mat4 modelViewProjectionMatrix;
  highp float tilePerPoint;
struct Style {
  highp float halfWidth;
  highp vec4 color;
  highp float distanceMultiplier;
struct VertexOut {
  highp vec2 texCoord;
attribute highp vec2 vertexInput_position;
attribute highp vec2 vertexInput_normal;
attribute highp vec2 vertexInput_texCoord;
attribute highp float vertexInput_distance;
uniform View view;
uniform Style style;
varying highp vec2 v_texCoord;
void main ()
  VertexOut outputValue_1;
  VertexIn vertexInput_2;
  vertexInput_2.position = vertexInput_position;
  vertexInput_2.normal = vertexInput_normal;
  vertexInput_2.texCoord = vertexInput_texCoord;
  vertexInput_2.distance = vertexInput_distance;
  highp vec2 tmpvar_3;
  tmpvar_3.x = ((vertexInput_2.texCoord.y + 1.0) / 2.0);
  tmpvar_3.y = (vertexInput_2.distance * style.distanceMultiplier);
  outputValue_1.texCoord = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.zw = vec2(0.0, 1.0);
  tmpvar_4.xy = (vertexInput_2.position + ((
    (vertexInput_2.normal * vec2(style.halfWidth))
   * vec2(view.tilePerPoint)) * vec2(4.0, 4.0)));
  gl_Position = (view.modelViewProjectionMatrix * tmpvar_4);
  v_texCoord = outputValue_1.texCoord;
//patternedRibbon_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
struct Style {
  highp float halfWidth;
  highp vec4 color;
  highp float distanceMultiplier;
varying highp vec2 v_texCoord;
uniform Style style;
uniform sampler2D textureSampler;
void main ()
  lowp vec4 outColor_1;
  highp vec2 tmpvar_2;
  tmpvar_2.x = v_texCoord.x;
  tmpvar_2.y = fract(v_texCoord.y);
  highp vec4 tmpvar_3;
  tmpvar_3 = style.color;
  outColor_1 = tmpvar_3;
  outColor_1.w = (outColor_1.w * texture2D (textureSampler, tmpvar_2).x);
  lowp vec4 framebuffer_4;
  framebuffer_4 = gl_LastFragData[0];
  lowp vec4 result_5;
  if ((framebuffer_4.w >= 0.9902344)) {
    result_5.xyz = mix (framebuffer_4.xyz, outColor_1.xyz, outColor_1.w);
    result_5.w = outColor_1.w;
  } else {
    if ((outColor_1.w > framebuffer_4.w)) {
      result_5.xyz = mix (framebuffer_4.xyz, outColor_1.xyz, (outColor_1.w - framebuffer_4.w));
      result_5.w = outColor_1.w;
    } else {
      result_5 = framebuffer_4;
    };
  };
  gl_FragColor = result_5;
//polygonAnimatableFill_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec4 vertexAndStyleIndex;
struct View {
  highp mat4 modelViewProjectionMatrix;
  highp float tilePerPoint;
struct Fill {
  highp mat4 worldTransform;
  highp vec4 color;
  highp vec4 variantColor;
  highp float scale;
  highp vec2 origin;
  highp vec2 size;
struct VertexOut {
  highp vec2 texture2D;
attribute highp vec4 vertex_attributes_vertexAndStyleIndex;
uniform View view;
uniform Fill fill;
varying highp vec2 v_texture;
void main ()
  VertexOut outputValue_1;
  VertexIn vertex_attributes_2;
  vertex_attributes_2.vertexAndStyleIndex = vertex_attributes_vertexAndStyleIndex;
  highp vec4 tmpvar_3;
  tmpvar_3.zw = vec2(0.0, 1.0);
  tmpvar_3.xy = (fill.origin + (fill.size * vertex_attributes_2.vertexAndStyleIndex.xy));
  highp vec4 tmpvar_4;
  tmpvar_4 = (fill.worldTransform * tmpvar_3);
  outputValue_1.texture2D = (tmpvar_4.xy * vec2(fill.scale));
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xy = tmpvar_4.xy;
  tmpvar_5.z = ((vertex_attributes_2.vertexAndStyleIndex.z * 2.0) - 1.0);
  gl_Position = (view.modelViewProjectionMatrix * tmpvar_5);
  v_texture = outputValue_1.texture2D;
//polygonAnimatableFill_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
struct Fill {
  highp mat4 worldTransform;
  highp vec4 color;
  highp vec4 variantColor;
  highp float scale;
  highp vec2 origin;
  highp vec2 size;
struct Variant {
  highp float textureWeight;
varying highp vec2 v_texture;
uniform Fill fill;
uniform Variant variant;
uniform sampler2D textureSampler;
uniform sampler2D variantTextureSampler;
void main ()
  lowp vec4 color2_1;
  lowp vec4 color1_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (textureSampler, v_texture);
  highp vec4 tmpvar_4;
  tmpvar_4.xyz = (fill.color.xyz * tmpvar_3.xyz);
  tmpvar_4.w = fill.color.w;
  color1_2 = tmpvar_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (variantTextureSampler, v_texture);
  highp vec4 tmpvar_6;
  tmpvar_6.xyz = (fill.variantColor.xyz * tmpvar_5.xyz);
  tmpvar_6.w = fill.variantColor.w;
  color2_1 = tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = mix (color1_2, color2_1, variant.textureWeight);
  gl_FragColor = tmpvar_7;
//polygonAnimatableStroke_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec4 vertexStyleIndicesAndTexture;
  highp vec4 tangents;
  highp float side;
struct View {
  highp mat4 modelViewProjectionMatrix;
  highp float tilePerPoint;
struct Polygon {
  highp mat4 worldTransform;
  highp vec4 strokeColor[16];
  highp vec4 polygonColor;
  highp float lineWidthOuter[16];
  highp float lineWidthInner[16];
  highp float scale;
struct VertexOut {
  highp float strokeTexture;
  highp vec2 polygonTexture;
  highp vec4 strokeColor;
attribute highp vec4 vertex_attributes_vertexStyleIndicesAndTexture;
attribute highp vec4 vertex_attributes_tangents;
attribute highp float vertex_attributes_side;
uniform View view;
uniform Polygon polygon;
varying highp float v_strokeTexture;
varying highp vec2 v_polygonTexture;
varying highp vec4 v_strokeColor;
void main ()
  VertexIn vertex_attributes_1;
  vertex_attributes_1.vertexStyleIndicesAndTexture = vertex_attributes_vertexStyleIndicesAndTexture;
  vertex_attributes_1.tangents = vertex_attributes_tangents;
  vertex_attributes_1.side = vertex_attributes_side;
  highp mat4 modelViewProjectionMatrix_2;
  modelViewProjectionMatrix_2 = view.modelViewProjectionMatrix;
  VertexOut outputValue_3;
  highp vec4 tmpvar_4;
  tmpvar_4.zw = vec2(0.0, 1.0);
  tmpvar_4.xy = vertex_attributes_1.vertexStyleIndicesAndTexture.xy;
  highp int tmpvar_5;
  tmpvar_5 = int((vertex_attributes_1.vertexStyleIndicesAndTexture.z * 256.0));
  highp int tmpvar_6;
  tmpvar_6 = int(((
    (vertex_attributes_1.vertexStyleIndicesAndTexture.z * 256.0)
   - 
    float(tmpvar_5)
  ) * 256.0));
  highp float tmpvar_7;
  tmpvar_7 = ((vertex_attributes_1.vertexStyleIndicesAndTexture.w * 2.0) - 1.0);
  highp vec2 tmpvar_8;
  tmpvar_8 = vertex_attributes_1.tangents.xy;
  highp vec2 tmpvar_9;
  tmpvar_9 = vertex_attributes_1.tangents.zw;
  highp float tmpvar_10;
  if ((vertex_attributes_1.side > 0.5)) {
    tmpvar_10 = polygon.lineWidthOuter[tmpvar_5];
  } else {
    tmpvar_10 = polygon.lineWidthInner[tmpvar_5];
  };
  highp float tmpvar_11;
  if ((vertex_attributes_1.side > 0.5)) {
    tmpvar_11 = polygon.lineWidthOuter[tmpvar_6];
  } else {
    tmpvar_11 = polygon.lineWidthInner[tmpvar_6];
  };
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_8.y;
  tmpvar_12.y = -(tmpvar_8.x);
  highp float factor_13;
  factor_13 = 0.0;
  highp float tmpvar_14;
  tmpvar_14 = ((tmpvar_8.x * tmpvar_9.y) - (tmpvar_8.y * tmpvar_9.x));
  highp float tmpvar_15;
  tmpvar_15 = dot (tmpvar_9, tmpvar_9);
  highp float tmpvar_16;
  tmpvar_16 = float((dot (tmpvar_8, tmpvar_8) >= 0.08));
  highp float tmpvar_17;
  tmpvar_17 = float((tmpvar_15 >= 0.08));
  highp float tmpvar_18;
  tmpvar_18 = float((abs(tmpvar_14) >= 0.08));
  if ((((tmpvar_16 * tmpvar_17) * tmpvar_18) > 0.0)) {
    factor_13 = (((tmpvar_11 * tmpvar_15) - (tmpvar_10 * 
      dot (tmpvar_8, tmpvar_9)
    )) * (1.0/(tmpvar_14)));
    highp float tmpvar_19;
    tmpvar_19 = (abs(tmpvar_10) * 2.0);
    factor_13 = clamp (factor_13, -(tmpvar_19), tmpvar_19);
  };
  highp vec4 tmpvar_20;
  tmpvar_20.zw = vec2(0.0, 0.0);
  tmpvar_20.xy = ((tmpvar_12 * vec2(tmpvar_10)) + (tmpvar_8 * vec2(factor_13)));
  highp vec4 tmpvar_21;
  tmpvar_21 = ((polygon.worldTransform * tmpvar_4) + tmpvar_20);
  gl_Position = (modelViewProjectionMatrix_2 * tmpvar_21);
  outputValue_3.polygonTexture = (tmpvar_21.xy * vec2(polygon.scale));
  outputValue_3.strokeTexture = tmpvar_7;
  outputValue_3.strokeColor = polygon.strokeColor[tmpvar_5];
  v_strokeTexture = outputValue_3.strokeTexture;
  v_polygonTexture = outputValue_3.polygonTexture;
  v_strokeColor = outputValue_3.strokeColor;
//polygonAnimatableStroke_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
struct Polygon {
  highp mat4 worldTransform;
  highp vec4 strokeColor[16];
  highp vec4 polygonColor;
  highp float lineWidthOuter[16];
  highp float lineWidthInner[16];
  highp float scale;
struct Variant {
  highp float textureWeight;
struct AnimatablePolygon {
  highp vec4 targetColor;
varying highp float v_strokeTexture;
varying highp vec2 v_polygonTexture;
varying highp vec4 v_strokeColor;
uniform Polygon polygon;
uniform Variant variant;
uniform AnimatablePolygon animatablePolygon;
uniform sampler2D alphaTexture;
uniform sampler2D texturePolygonSampler;
uniform sampler2D textureVariantSampler;
void main ()
  lowp vec4 polyColor_1;
  lowp vec4 color2_2;
  lowp vec4 color1_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (texturePolygonSampler, v_polygonTexture);
  highp vec4 tmpvar_5;
  tmpvar_5 = (polygon.polygonColor * tmpvar_4);
  color1_3 = tmpvar_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (textureVariantSampler, v_polygonTexture);
  highp vec4 tmpvar_7;
  tmpvar_7 = (animatablePolygon.targetColor * tmpvar_6);
  color2_2 = tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = mix (color1_3, color2_2, variant.textureWeight);
  polyColor_1 = tmpvar_8;
  lowp vec4 tmpvar_9;
  highp vec2 tmpvar_10;
  tmpvar_10.y = 0.0;
  tmpvar_10.x = v_strokeTexture;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (alphaTexture, tmpvar_10);
  if ((v_strokeColor.w > 0.0001000166)) {
    lowp float polygonTextureCoord_12;
    highp float tmpvar_13;
    tmpvar_13 = clamp (v_strokeTexture, 0.0, 1.0);
    polygonTextureCoord_12 = tmpvar_13;
    lowp float tmpvar_14;
    tmpvar_14 = (polygonTextureCoord_12 * (1.0 - tmpvar_11.x));
    highp vec4 tmpvar_15;
    tmpvar_15.xyz = mix (v_strokeColor.xyz, polyColor_1.xyz, polygonTextureCoord_12);
    tmpvar_15.w = ((tmpvar_11.x + tmpvar_14) * mix (v_strokeColor.w, polyColor_1.w, polygonTextureCoord_12));
    tmpvar_9 = tmpvar_15;
  } else {
    lowp float polygonTextureCoord_16;
    highp float tmpvar_17;
    tmpvar_17 = ((v_strokeTexture + 1.0) / 2.0);
    polygonTextureCoord_16 = tmpvar_17;
    lowp vec4 tmpvar_18;
    tmpvar_18.xyz = polyColor_1.xyz;
    tmpvar_18.w = (polyColor_1.w * (polygonTextureCoord_16 * (1.0 - tmpvar_11.x)));
    tmpvar_9 = tmpvar_18;
  };
  gl_FragColor = tmpvar_9;
//polygonFill_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec4 vertexAndStyleIndex;
struct View {
  highp mat4 modelViewProjectionMatrix;
  highp float tilePerPoint;
struct Fill {
  highp mat4 worldTransform;
  highp vec4 color;
  highp float scale;
  highp vec2 origin;
  highp vec2 size;
struct VertexOut {
  highp vec2 texture2D;
attribute highp vec4 vertex_attributes_vertexAndStyleIndex;
uniform View view;
uniform Fill fill;
varying highp vec2 v_texture;
void main ()
  VertexOut outputValue_1;
  VertexIn vertex_attributes_2;
  vertex_attributes_2.vertexAndStyleIndex = vertex_attributes_vertexAndStyleIndex;
  highp vec4 tmpvar_3;
  tmpvar_3.zw = vec2(0.0, 1.0);
  tmpvar_3.xy = (fill.origin + (fill.size * vertex_attributes_2.vertexAndStyleIndex.xy));
  highp vec4 tmpvar_4;
  tmpvar_4 = (fill.worldTransform * tmpvar_3);
  outputValue_1.texture2D = (tmpvar_4.xy * vec2(fill.scale));
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xy = tmpvar_4.xy;
  tmpvar_5.z = ((vertex_attributes_2.vertexAndStyleIndex.z * 2.0) - 1.0);
  gl_Position = (view.modelViewProjectionMatrix * tmpvar_5);
  v_texture = outputValue_1.texture2D;
//polygonFill_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
struct Fill {
  highp mat4 worldTransform;
  highp vec4 color;
  highp float scale;
  highp vec2 origin;
  highp vec2 size;
varying highp vec2 v_texture;
uniform Fill fill;
uniform sampler2D textureSampler;
void main ()
  highp vec4 tmpvar_1;
  tmpvar_1 = fill.color;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (textureSampler, v_texture);
  gl_FragColor = (tmpvar_1 * tmpvar_2);
//polygonShadowedStroke_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec2 vertexPosition;
  highp vec2 offsetAndTexture;
struct View {
  highp mat4 modelViewProjectionMatrix;
  highp float tilePerPoint;
struct ShadowPath {
  highp vec4 color;
  highp float width;
  highp vec3 direction;
  highp float offsetScale;
struct VertexOut {
  highp float alphaRamp;
  highp float alphaAdjust;
attribute highp vec2 vertex_attributes_vertexPosition;
attribute highp vec2 vertex_attributes_offsetAndTexture;
uniform View view;
uniform ShadowPath shadowPath;
varying highp float v_alphaRamp;
varying highp float v_alphaAdjust;
void main ()
  VertexOut outputValue_1;
  VertexIn vertex_attributes_2;
  vertex_attributes_2.vertexPosition = vertex_attributes_vertexPosition;
  vertex_attributes_2.offsetAndTexture = vertex_attributes_offsetAndTexture;
  highp float tmpvar_3;
  tmpvar_3 = float(int((255.0 * vertex_attributes_2.offsetAndTexture.x)));
  highp vec2 tmpvar_4;
  tmpvar_4.x = ((tmpvar_3 / 127.5) - 1.0);
  tmpvar_4.y = ((floor(
    ((vertex_attributes_2.offsetAndTexture.x * 255.0) - tmpvar_3)
  ) * 2.0) - 1.0);
  highp vec3 tmpvar_5;
  tmpvar_5 = (((shadowPath.direction * vec3(shadowPath.width)) * vertex_attributes_2.offsetAndTexture.yyy) * vec3(view.tilePerPoint));
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.x = (vertex_attributes_2.vertexPosition.x + tmpvar_5.x);
  tmpvar_6.y = (vertex_attributes_2.vertexPosition.y + tmpvar_5.y);
  tmpvar_6.z = tmpvar_5.z;
  highp vec3 tmpvar_7;
  tmpvar_7.z = 0.0;
  tmpvar_7.xy = (vec2(shadowPath.offsetScale) * tmpvar_4);
  outputValue_1.alphaAdjust = min ((1.0 - abs(
    dot (tmpvar_7, shadowPath.direction)
  )), 1.0);
  outputValue_1.alphaRamp = vertex_attributes_2.offsetAndTexture.y;
  gl_Position = (view.modelViewProjectionMatrix * tmpvar_6);
  v_alphaRamp = outputValue_1.alphaRamp;
  v_alphaAdjust = outputValue_1.alphaAdjust;
//polygonShadowedStroke_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
struct ShadowPath {
  highp vec4 color;
  highp float width;
  highp vec3 direction;
  highp float offsetScale;
varying highp float v_alphaRamp;
varying highp float v_alphaAdjust;
uniform ShadowPath shadowPath;
void main ()
  lowp vec3 shadowColor_1;
  lowp float alpha_2;
  lowp float mask_alpha_3;
  lowp float landAlpha_4;
  lowp vec4 land_5;
  mediump vec4 tmpvar_6;
  tmpvar_6 = gl_LastFragData[0];
  land_5 = tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = (1.0 - min ((v_alphaRamp + 1.0), 1.0));
  landAlpha_4 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8.xyz = (land_5.xyz * vec3(landAlpha_4));
  tmpvar_8.w = landAlpha_4;
  land_5 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = (1.0 - v_alphaRamp);
  mask_alpha_3 = tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = (shadowPath.color.w * mask_alpha_3);
  alpha_2 = tmpvar_10;
  alpha_2 = (min ((alpha_2 + landAlpha_4), 1.0) * v_alphaAdjust);
  highp vec3 tmpvar_11;
  tmpvar_11 = (shadowPath.color.xyz * vec3(alpha_2));
  shadowColor_1 = tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12.xyz = (tmpvar_8.xyz + (vec3((1.0 - landAlpha_4)) * shadowColor_1));
  tmpvar_12.w = alpha_2;
  gl_FragColor = tmpvar_12;
//polygonSolidFill_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec4 vertexAndStyleIndex;
struct View {
  highp mat4 modelViewProjectionMatrix;
  highp float tilePerPoint;
struct SolidFill {
  highp vec4 color;
  highp vec2 origin;
  highp vec2 size;
attribute highp vec4 vertex_attributes_vertexAndStyleIndex;
uniform View view;
uniform SolidFill solidFill;
void main ()
  VertexIn vertex_attributes_1;
  vertex_attributes_1.vertexAndStyleIndex = vertex_attributes_vertexAndStyleIndex;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xy = (solidFill.origin + (solidFill.size * vertex_attributes_1.vertexAndStyleIndex.xy));
  tmpvar_2.z = ((vertex_attributes_1.vertexAndStyleIndex.z * 2.0) - 1.0);
  gl_Position = (view.modelViewProjectionMatrix * tmpvar_2);
//polygonSolidFill_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
struct SolidFill {
  highp vec4 color;
  highp vec2 origin;
  highp vec2 size;
uniform SolidFill solidFill;
void main ()
  highp vec4 tmpvar_1;
  tmpvar_1 = solidFill.color;
  gl_FragColor = tmpvar_1;
//polygonStroke_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec4 vertexStyleIndicesAndTexture;
  highp vec4 tangents;
  highp float side;
struct View {
  highp mat4 modelViewProjectionMatrix;
  highp float tilePerPoint;
struct Polygon {
  highp mat4 worldTransform;
  highp vec4 strokeColor[16];
  highp vec4 polygonColor;
  highp float lineWidthOuter[16];
  highp float lineWidthInner[16];
  highp float scale;
struct VertexOut {
  highp float strokeTexture;
  highp vec2 polygonTexture;
  highp vec4 strokeColor;
attribute highp vec4 vertex_attributes_vertexStyleIndicesAndTexture;
attribute highp vec4 vertex_attributes_tangents;
attribute highp float vertex_attributes_side;
uniform View view;
uniform Polygon polygon;
varying highp float v_strokeTexture;
varying highp vec2 v_polygonTexture;
varying highp vec4 v_strokeColor;
void main ()
  VertexIn vertex_attributes_1;
  vertex_attributes_1.vertexStyleIndicesAndTexture = vertex_attributes_vertexStyleIndicesAndTexture;
  vertex_attributes_1.tangents = vertex_attributes_tangents;
  vertex_attributes_1.side = vertex_attributes_side;
  highp mat4 modelViewProjectionMatrix_2;
  modelViewProjectionMatrix_2 = view.modelViewProjectionMatrix;
  VertexOut outputValue_3;
  highp vec4 tmpvar_4;
  tmpvar_4.zw = vec2(0.0, 1.0);
  tmpvar_4.xy = vertex_attributes_1.vertexStyleIndicesAndTexture.xy;
  highp int tmpvar_5;
  tmpvar_5 = int((vertex_attributes_1.vertexStyleIndicesAndTexture.z * 256.0));
  highp int tmpvar_6;
  tmpvar_6 = int(((
    (vertex_attributes_1.vertexStyleIndicesAndTexture.z * 256.0)
   - 
    float(tmpvar_5)
  ) * 256.0));
  highp float tmpvar_7;
  tmpvar_7 = ((vertex_attributes_1.vertexStyleIndicesAndTexture.w * 2.0) - 1.0);
  highp vec2 tmpvar_8;
  tmpvar_8 = vertex_attributes_1.tangents.xy;
  highp vec2 tmpvar_9;
  tmpvar_9 = vertex_attributes_1.tangents.zw;
  highp float tmpvar_10;
  if ((vertex_attributes_1.side > 0.5)) {
    tmpvar_10 = polygon.lineWidthOuter[tmpvar_5];
  } else {
    tmpvar_10 = polygon.lineWidthInner[tmpvar_5];
  };
  highp float tmpvar_11;
  if ((vertex_attributes_1.side > 0.5)) {
    tmpvar_11 = polygon.lineWidthOuter[tmpvar_6];
  } else {
    tmpvar_11 = polygon.lineWidthInner[tmpvar_6];
  };
  highp vec2 tmpvar_12;
  tmpvar_12.x = tmpvar_8.y;
  tmpvar_12.y = -(tmpvar_8.x);
  highp float factor_13;
  factor_13 = 0.0;
  highp float tmpvar_14;
  tmpvar_14 = ((tmpvar_8.x * tmpvar_9.y) - (tmpvar_8.y * tmpvar_9.x));
  highp float tmpvar_15;
  tmpvar_15 = dot (tmpvar_9, tmpvar_9);
  highp float tmpvar_16;
  tmpvar_16 = float((dot (tmpvar_8, tmpvar_8) >= 0.08));
  highp float tmpvar_17;
  tmpvar_17 = float((tmpvar_15 >= 0.08));
  highp float tmpvar_18;
  tmpvar_18 = float((abs(tmpvar_14) >= 0.08));
  if ((((tmpvar_16 * tmpvar_17) * tmpvar_18) > 0.0)) {
    factor_13 = (((tmpvar_11 * tmpvar_15) - (tmpvar_10 * 
      dot (tmpvar_8, tmpvar_9)
    )) * (1.0/(tmpvar_14)));
    highp float tmpvar_19;
    tmpvar_19 = (abs(tmpvar_10) * 2.0);
    factor_13 = clamp (factor_13, -(tmpvar_19), tmpvar_19);
  };
  highp vec4 tmpvar_20;
  tmpvar_20.zw = vec2(0.0, 0.0);
  tmpvar_20.xy = ((tmpvar_12 * vec2(tmpvar_10)) + (tmpvar_8 * vec2(factor_13)));
  highp vec4 tmpvar_21;
  tmpvar_21 = ((polygon.worldTransform * tmpvar_4) + tmpvar_20);
  gl_Position = (modelViewProjectionMatrix_2 * tmpvar_21);
  outputValue_3.polygonTexture = (tmpvar_21.xy * vec2(polygon.scale));
  outputValue_3.strokeTexture = tmpvar_7;
  outputValue_3.strokeColor = polygon.strokeColor[tmpvar_5];
  v_strokeTexture = outputValue_3.strokeTexture;
  v_polygonTexture = outputValue_3.polygonTexture;
  v_strokeColor = outputValue_3.strokeColor;
//polygonStroke_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
struct Polygon {
  highp mat4 worldTransform;
  highp vec4 strokeColor[16];
  highp vec4 polygonColor;
  highp float lineWidthOuter[16];
  highp float lineWidthInner[16];
  highp float scale;
varying highp float v_strokeTexture;
varying highp vec2 v_polygonTexture;
varying highp vec4 v_strokeColor;
uniform Polygon polygon;
uniform sampler2D alphaTexture;
uniform sampler2D texturePolygonSampler;
void main ()
  lowp vec4 polyColor_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (texturePolygonSampler, v_polygonTexture);
  highp vec4 tmpvar_3;
  tmpvar_3 = (polygon.polygonColor * tmpvar_2);
  polyColor_1 = tmpvar_3;
  lowp vec4 tmpvar_4;
  highp vec2 tmpvar_5;
  tmpvar_5.y = 0.0;
  tmpvar_5.x = v_strokeTexture;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (alphaTexture, tmpvar_5);
  if ((v_strokeColor.w > 0.0001000166)) {
    lowp float polygonTextureCoord_7;
    highp float tmpvar_8;
    tmpvar_8 = clamp (v_strokeTexture, 0.0, 1.0);
    polygonTextureCoord_7 = tmpvar_8;
    lowp float tmpvar_9;
    tmpvar_9 = (polygonTextureCoord_7 * (1.0 - tmpvar_6.x));
    highp vec4 tmpvar_10;
    tmpvar_10.xyz = mix (v_strokeColor.xyz, polyColor_1.xyz, polygonTextureCoord_7);
    tmpvar_10.w = ((tmpvar_6.x + tmpvar_9) * mix (v_strokeColor.w, polyColor_1.w, polygonTextureCoord_7));
    tmpvar_4 = tmpvar_10;
  } else {
    lowp float polygonTextureCoord_11;
    highp float tmpvar_12;
    tmpvar_12 = ((v_strokeTexture + 1.0) / 2.0);
    polygonTextureCoord_11 = tmpvar_12;
    lowp vec4 tmpvar_13;
    tmpvar_13.xyz = polyColor_1.xyz;
    tmpvar_13.w = (polyColor_1.w * (polygonTextureCoord_11 * (1.0 - tmpvar_6.x)));
    tmpvar_4 = tmpvar_13;
  };
  gl_FragColor = tmpvar_4;
//prefilteredLine_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec4 vertex1AndCorner;
  highp vec4 vertex2AndStyleIndex;
struct View {
  highp mat4 modelViewProjectionMatrix;
  highp float tilePerPoint;
struct Style {
  highp vec4 vertexOffset[8];
  highp vec4 color[8];
  highp float halfWidth[8];
  highp vec2 canvasSize;
  highp vec3 tileOrigin;
  highp vec3 tileSize;
  highp float zScale;
  highp float fogFactor;
struct Skyfog {
  highp vec4 fogSlope;
  highp float fogOffset;
  highp float screenHeight;
  highp float skyOffset;
  highp vec4 skyBottomColor;
  highp vec4 skyTopColor;
struct VertexOut {
  highp float texCoord;
  highp float fogCoordinate;
  lowp vec4 color;
  lowp vec4 fogColor;
attribute highp vec4 vertex_input_vertex1AndCorner;
attribute highp vec4 vertex_input_vertex2AndStyleIndex;
uniform View view;
uniform Style style;
uniform Skyfog skyfog;
varying highp float v_texCoord;
varying highp float v_fogCoordinate;
varying lowp vec4 v_color;
varying lowp vec4 v_fogColor;
void main ()
  highp vec4 unprojectedP_1;
  highp vec4 p_2;
  highp vec4 p1_3;
  highp vec4 p0_4;
  highp vec4 secondVertex_5;
  highp vec4 firstVertex_6;
  VertexOut outputValue_7;
  VertexIn vertex_input_8;
  vertex_input_8.vertex1AndCorner = vertex_input_vertex1AndCorner;
  vertex_input_8.vertex2AndStyleIndex = vertex_input_vertex2AndStyleIndex;
  highp int tmpvar_9;
  tmpvar_9 = int((65535.0 * vertex_input_8.vertex2AndStyleIndex.w));
  highp vec4 tmpvar_10;
  tmpvar_10 = style.vertexOffset[tmpvar_9];
  highp float tmpvar_11;
  tmpvar_11 = style.halfWidth[tmpvar_9];
  highp vec4 tmpvar_12;
  tmpvar_12 = style.color[tmpvar_9];
  outputValue_7.color = tmpvar_12;
  highp int tmpvar_13;
  tmpvar_13 = int((65535.0 * vertex_input_8.vertex1AndCorner.w));
  highp int tmpvar_14;
  tmpvar_14 = (tmpvar_13 / 256);
  highp vec2 tmpvar_15;
  tmpvar_15.x = float(tmpvar_14);
  tmpvar_15.y = float((tmpvar_13 - (tmpvar_14 * 256)));
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = (style.tileOrigin + (style.tileSize * vertex_input_8.vertex1AndCorner.xyz));
  firstVertex_6.xyw = tmpvar_16.xyw;
  firstVertex_6.z = (tmpvar_16.z * style.zScale);
  firstVertex_6 = (firstVertex_6 + tmpvar_10);
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = (style.tileOrigin + (style.tileSize * vertex_input_8.vertex2AndStyleIndex.xyz));
  secondVertex_5.xyw = tmpvar_17.xyw;
  secondVertex_5.z = (tmpvar_17.z * style.zScale);
  secondVertex_5 = (secondVertex_5 + tmpvar_10);
  highp vec4 tmpvar_18;
  tmpvar_18 = (view.modelViewProjectionMatrix * firstVertex_6);
  p0_4 = tmpvar_18;
  highp vec4 tmpvar_19;
  tmpvar_19 = (view.modelViewProjectionMatrix * secondVertex_5);
  p1_3 = tmpvar_19;
  if ((tmpvar_15.x < 0.5)) {
    p_2 = tmpvar_18;
    unprojectedP_1 = firstVertex_6;
  } else {
    p_2 = tmpvar_19;
    unprojectedP_1 = secondVertex_5;
  };
  highp vec4 tmpvar_20;
  tmpvar_20.zw = vec2(1.0, 1.0);
  tmpvar_20.xy = (style.canvasSize * vec2(0.5, 0.5));
  p0_4 = (((tmpvar_18 / tmpvar_18.wwww) + vec4(1.0, 1.0, 0.0, 0.0)) * tmpvar_20);
  p1_3 = (((tmpvar_19 / tmpvar_19.wwww) + vec4(1.0, 1.0, 0.0, 0.0)) * tmpvar_20);
  highp vec2 tmpvar_21;
  tmpvar_21.x = (p1_3.y - p0_4.y);
  tmpvar_21.y = (p0_4.x - p1_3.x);
  highp vec4 tmpvar_22;
  tmpvar_22.zw = vec2(0.0, 0.0);
  tmpvar_22.xy = (vec2((p_2.w * tmpvar_11)) * normalize(tmpvar_21));
  outputValue_7.texCoord = ((tmpvar_15.y * 2.0) - 1.0);
  gl_Position = (p_2 + (vec4(-(outputValue_7.texCoord)) * (tmpvar_22 / tmpvar_20)));
  outputValue_7.fogCoordinate = (style.fogFactor * (dot (skyfog.fogSlope, unprojectedP_1) + skyfog.fogOffset));
  lowp vec4 tmpvar_23;
  highp vec4 tmpvar_24;
  tmpvar_24 = mix (skyfog.skyBottomColor, skyfog.skyTopColor, clamp ((
    ((0.5 + (0.5 * p_2.y)) - skyfog.skyOffset)
   * 10.0), 0.0, 1.0));
  tmpvar_23 = tmpvar_24;
  outputValue_7.fogColor = tmpvar_23;
  v_texCoord = outputValue_7.texCoord;
  v_fogCoordinate = outputValue_7.fogCoordinate;
  v_color = outputValue_7.color;
  v_fogColor = outputValue_7.fogColor;
//prefilteredLine_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
varying highp float v_texCoord;
varying highp float v_fogCoordinate;
varying lowp vec4 v_color;
varying lowp vec4 v_fogColor;
uniform sampler2D alphaTexture;
void main ()
  highp vec2 tmpvar_1;
  tmpvar_1.y = 0.0;
  tmpvar_1.x = v_texCoord;
  lowp vec4 tmpvar_2;
  tmpvar_2.xyz = v_color.xyz;
  tmpvar_2.w = (v_color.w * texture2D (alphaTexture, tmpvar_1).x);
  lowp vec4 color_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = mix (tmpvar_2, v_fogColor, clamp (v_fogCoordinate, 0.0, 1.0));
  color_3 = tmpvar_4;
  gl_FragColor = color_3;
//renderTargetBlend_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec2 position;
struct VertexOut {
  highp vec2 texcoord;
attribute highp vec2 vertex_attributes_position;
varying highp vec2 v_texcoord;
void main ()
  VertexOut outputValue_1;
  VertexIn vertex_attributes_2;
  vertex_attributes_2.position = vertex_attributes_position;
  highp vec4 tmpvar_3;
  tmpvar_3.zw = vec2(0.0, 1.0);
  tmpvar_3.x = ((vertex_attributes_2.position.x * 2.0) - 1.0);
  tmpvar_3.y = ((vertex_attributes_2.position.y * 2.0) - 1.0);
  gl_Position = tmpvar_3;
  outputValue_1.texcoord = vertex_attributes_2.position;
  v_texcoord = outputValue_1.texcoord;
//renderTargetBlend_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
struct Blend {
  highp float blendFactor;
varying highp vec2 v_texcoord;
uniform Blend blend;
uniform sampler2D textureMap;
void main ()
  mediump vec4 colorTexture_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (textureMap, v_texcoord);
  colorTexture_1 = tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.xyz = colorTexture_1.xyz;
  tmpvar_3.w = (colorTexture_1.w * blend.blendFactor);
  gl_FragColor = tmpvar_3;
//routeLine_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec2 position;
  highp vec2 normal;
  highp vec2 texCoord;
  highp float distance;
struct View {
  highp mat4 modelViewProjectionMatrix;
  highp float tilePerPoint;
struct Style {
  highp float halfWidth;
  highp vec4 color;
  highp float splitLength;
  highp vec4 travelledColor;
  highp vec4 inverseBaseColor;
  highp float alphaScale;
  highp float alphaTest;
  highp float alphaComp;
struct VertexOut {
  highp vec2 texCoord;
  highp float distance;
attribute highp vec2 vertexInput_position;
attribute highp vec2 vertexInput_normal;
attribute highp vec2 vertexInput_texCoord;
attribute highp float vertexInput_distance;
uniform View view;
uniform Style style;
varying highp vec2 v_texCoord;
varying highp float v_distance;
void main ()
  VertexOut outputValue_1;
  VertexIn vertexInput_2;
  vertexInput_2.position = vertexInput_position;
  vertexInput_2.normal = vertexInput_normal;
  vertexInput_2.texCoord = vertexInput_texCoord;
  vertexInput_2.distance = vertexInput_distance;
  outputValue_1.texCoord = vertexInput_2.texCoord;
  outputValue_1.distance = vertexInput_2.distance;
  highp vec4 tmpvar_3;
  tmpvar_3.zw = vec2(0.0, 1.0);
  tmpvar_3.xy = (vertexInput_2.position + ((
    (vertexInput_2.normal * vec2(style.halfWidth))
   * vec2(view.tilePerPoint)) * vec2(4.0, 4.0)));
  gl_Position = (view.modelViewProjectionMatrix * tmpvar_3);
  v_texCoord = outputValue_1.texCoord;
  v_distance = outputValue_1.distance;
//routeLine_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
struct Style {
  highp float halfWidth;
  highp vec4 color;
  highp float splitLength;
  highp vec4 travelledColor;
  highp vec4 inverseBaseColor;
  highp float alphaScale;
  highp float alphaTest;
  highp float alphaComp;
varying highp vec2 v_texCoord;
varying highp float v_distance;
uniform Style style;
uniform sampler2D alphaTexture;
void main ()
  lowp vec4 outColor_1;
  lowp vec4 framebuffer_2;
  mediump vec4 tmpvar_3;
  tmpvar_3 = gl_LastFragData[0];
  framebuffer_2 = tmpvar_3;
  if ((framebuffer_2.w >= 0.9902344)) {
    discard;
  };
  highp vec4 tmpvar_4;
  tmpvar_4 = style.inverseBaseColor;
  highp vec4 tmpvar_5;
  tmpvar_5 = style.travelledColor;
  highp float splitLength_6;
  splitLength_6 = style.splitLength;
  lowp vec4 inverseBaseColor_7;
  inverseBaseColor_7 = tmpvar_4;
  lowp vec4 travelledColor_8;
  travelledColor_8 = tmpvar_5;
  lowp vec4 baseColor_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = (vec4(1.0, 1.0, 1.0, 1.0) - inverseBaseColor_7);
  baseColor_9 = tmpvar_10;
  lowp float tmpvar_11;
  if ((splitLength_6 < v_distance)) {
    tmpvar_11 = 1.0;
  } else {
    tmpvar_11 = 0.0;
  };
  baseColor_9 = ((tmpvar_10 * vec4(tmpvar_11)) + (travelledColor_8 * vec4((1.0 - tmpvar_11))));
  outColor_1.xyz = baseColor_9.xyz;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (alphaTexture, v_texCoord);
  outColor_1.w = (baseColor_9.w * (tmpvar_12.x * style.alphaScale));
  lowp vec4 tmpvar_13;
  tmpvar_13.xyz = mix (framebuffer_2.xyz, baseColor_9.xyz, outColor_1.w);
  tmpvar_13.w = tmpvar_12.x;
  gl_FragColor = tmpvar_13;
//patternedRouteLine_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec2 position;
  highp vec2 normal;
  highp vec2 texCoord;
  highp float distance;
struct View {
  highp mat4 modelViewProjectionMatrix;
  highp float tilePerPoint;
struct Style {
  highp float halfWidth;
  highp vec4 color;
  highp float distanceMultiplier;
struct PatternedVertexOut {
  highp vec2 texCoord;
  highp float distance;
attribute highp vec2 vertexInput_position;
attribute highp vec2 vertexInput_normal;
attribute highp vec2 vertexInput_texCoord;
attribute highp float vertexInput_distance;
uniform View view;
uniform Style patternStyle;
varying highp vec2 v_texCoord;
varying highp float v_distance;
void main ()
  PatternedVertexOut outputValue_1;
  VertexIn vertexInput_2;
  vertexInput_2.position = vertexInput_position;
  vertexInput_2.normal = vertexInput_normal;
  vertexInput_2.texCoord = vertexInput_texCoord;
  vertexInput_2.distance = vertexInput_distance;
  highp vec2 tmpvar_3;
  tmpvar_3.x = ((vertexInput_2.texCoord.y + 1.0) / 2.0);
  tmpvar_3.y = (vertexInput_2.distance * patternStyle.distanceMultiplier);
  outputValue_1.texCoord = tmpvar_3;
  outputValue_1.distance = vertexInput_2.distance;
  highp vec4 tmpvar_4;
  tmpvar_4.zw = vec2(0.0, 1.0);
  tmpvar_4.xy = (vertexInput_2.position + ((
    (vertexInput_2.normal * vec2(patternStyle.halfWidth))
   * vec2(view.tilePerPoint)) * vec2(4.0, 4.0)));
  gl_Position = (view.modelViewProjectionMatrix * tmpvar_4);
  v_texCoord = outputValue_1.texCoord;
  v_distance = outputValue_1.distance;
//patternedRouteLine_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
struct Style {
  highp float halfWidth;
  highp vec4 color;
  highp float splitLength;
  highp vec4 travelledColor;
  highp vec4 inverseBaseColor;
  highp float alphaScale;
  highp float alphaTest;
  highp float alphaComp;
varying highp vec2 v_texCoord;
varying highp float v_distance;
uniform Style routeStyle;
uniform sampler2D textureSampler;
void main ()
  lowp vec4 outColor_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = routeStyle.inverseBaseColor;
  highp vec4 tmpvar_3;
  tmpvar_3 = routeStyle.travelledColor;
  highp float splitLength_4;
  splitLength_4 = routeStyle.splitLength;
  lowp vec4 inverseBaseColor_5;
  inverseBaseColor_5 = tmpvar_2;
  lowp vec4 travelledColor_6;
  travelledColor_6 = tmpvar_3;
  lowp vec4 baseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = (vec4(1.0, 1.0, 1.0, 1.0) - inverseBaseColor_5);
  baseColor_7 = tmpvar_8;
  lowp float tmpvar_9;
  if ((splitLength_4 < v_distance)) {
    tmpvar_9 = 1.0;
  } else {
    tmpvar_9 = 0.0;
  };
  baseColor_7 = ((tmpvar_8 * vec4(tmpvar_9)) + (travelledColor_6 * vec4((1.0 - tmpvar_9))));
  outColor_1.xyz = baseColor_7.xyz;
  highp vec2 tmpvar_10;
  tmpvar_10.x = v_texCoord.x;
  tmpvar_10.y = fract(v_texCoord.y);
  outColor_1.w = (baseColor_7.w * (texture2D (textureSampler, tmpvar_10).x * routeStyle.alphaScale));
  lowp vec4 framebuffer_11;
  framebuffer_11 = gl_LastFragData[0];
  lowp vec4 result_12;
  if ((framebuffer_11.w >= 0.9902344)) {
    result_12.xyz = mix (framebuffer_11.xyz, baseColor_7.xyz, outColor_1.w);
    result_12.w = outColor_1.w;
  } else {
    if ((outColor_1.w > framebuffer_11.w)) {
      result_12.xyz = mix (framebuffer_11.xyz, baseColor_7.xyz, (outColor_1.w - framebuffer_11.w));
      result_12.w = outColor_1.w;
    } else {
      result_12 = framebuffer_11;
    };
  };
  gl_FragColor = result_12;
//routeLineAlphaReset_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec2 position;
  highp vec2 normal;
  highp vec2 texCoord;
struct View {
  highp mat4 modelViewProjectionMatrix;
  highp float tilePerPoint;
struct Style {
  highp vec4 color;
  highp float halfWidth;
struct VertexOut {
  highp float v;
attribute highp vec2 vertexInput_position;
attribute highp vec2 vertexInput_normal;
attribute highp vec2 vertexInput_texCoord;
uniform View view;
uniform Style style;
varying highp float v_v;
void main ()
  VertexOut outputValue_1;
  VertexIn vertexInput_2;
  vertexInput_2.position = vertexInput_position;
  vertexInput_2.normal = vertexInput_normal;
  vertexInput_2.texCoord = vertexInput_texCoord;
  outputValue_1.v = vertexInput_2.texCoord.y;
  highp vec4 tmpvar_3;
  tmpvar_3.zw = vec2(0.0, 1.0);
  tmpvar_3.xy = (vertexInput_2.position + ((
    (vertexInput_2.normal * vec2(style.halfWidth))
   * vec2(view.tilePerPoint)) * vec2(4.0, 4.0)));
  gl_Position = (view.modelViewProjectionMatrix * tmpvar_3);
  v_v = outputValue_1.v;
//routeLineAlphaReset_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
struct FadeParams {
  highp float fadeStart;
varying highp float v_v;
uniform FadeParams params;
void main ()
  lowp float alpha_1;
  highp float tmpvar_2;
  highp float tmpvar_3;
  tmpvar_3 = clamp (((
    abs(v_v)
   - 1.0) / (params.fadeStart - 1.0)), 0.0, 1.0);
  tmpvar_2 = (tmpvar_3 * (tmpvar_3 * (3.0 - 
    (2.0 * tmpvar_3)
  )));
  alpha_1 = tmpvar_2;
  mediump vec4 tmpvar_4;
  tmpvar_4.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_4.w = max (alpha_1, gl_LastFragData[0].w);
  gl_FragColor = tmpvar_4;
//routeLineArrow_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec2 position;
  highp vec2 normal;
  highp vec2 texCoord;
  highp float arrowIndex;
struct View {
  highp mat4 modelViewProjectionMatrix;
  highp float tilePerPoint;
struct Style {
  highp float halfWidth;
  highp vec4 color;
  highp float pitchRatio;
  highp float currentArrowIndex;
  highp vec4 fillColor;
  highp vec4 strokeColor;
  highp vec4 highlightedFillColor;
  highp vec4 highlightedStrokeColor;
  highp float hightlightedHalfWidth;
  highp float alphaScale;
struct VertexOut {
  highp vec2 texture2D;
  highp vec4 fillColor;
  highp vec4 strokeColor;
attribute highp vec2 vertexInput_position;
attribute highp vec2 vertexInput_normal;
attribute highp vec2 vertexInput_texCoord;
attribute highp float vertexInput_arrowIndex;
uniform View view;
uniform Style style;
varying highp vec2 v_texture;
varying highp vec4 v_fillColor;
varying highp vec4 v_strokeColor;
void main ()
  VertexOut outputValue_1;
  VertexIn vertexInput_2;
  vertexInput_2.position = vertexInput_position;
  vertexInput_2.normal = vertexInput_normal;
  vertexInput_2.texCoord = vertexInput_texCoord;
  vertexInput_2.arrowIndex = vertexInput_arrowIndex;
  outputValue_1.texture2D = vertexInput_2.texCoord;
  highp float tmpvar_3;
  tmpvar_3 = clamp (abs((vertexInput_2.arrowIndex - style.currentArrowIndex)), 0.0, 1.0);
  outputValue_1.fillColor = mix (style.highlightedFillColor, style.fillColor, tmpvar_3);
  outputValue_1.strokeColor = mix (style.highlightedStrokeColor, style.strokeColor, tmpvar_3);
  highp vec4 tmpvar_4;
  tmpvar_4.zw = vec2(0.0, 1.0);
  tmpvar_4.xy = (vertexInput_2.position + ((
    (vertexInput_2.normal * vec2(mix (style.hightlightedHalfWidth, style.halfWidth, tmpvar_3)))
   * vec2(view.tilePerPoint)) * vec2(16.0, 16.0)));
  gl_Position = (view.modelViewProjectionMatrix * tmpvar_4);
  v_texture = outputValue_1.texture2D;
  v_fillColor = outputValue_1.fillColor;
  v_strokeColor = outputValue_1.strokeColor;
//routeLineArrow_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
struct Style {
  highp float halfWidth;
  highp vec4 color;
  highp float pitchRatio;
  highp float currentArrowIndex;
  highp vec4 fillColor;
  highp vec4 strokeColor;
  highp vec4 highlightedFillColor;
  highp vec4 highlightedStrokeColor;
  highp float hightlightedHalfWidth;
  highp float alphaScale;
varying highp vec2 v_texture;
varying highp vec4 v_fillColor;
varying highp vec4 v_strokeColor;
uniform Style style;
uniform sampler2D alphaTextureSampler;
void main ()
  lowp vec4 arrowColor_1;
  lowp vec4 framebuffer_2;
  mediump vec4 tmpvar_3;
  tmpvar_3 = gl_LastFragData[0];
  framebuffer_2 = tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (alphaTextureSampler, v_texture);
  highp vec4 tmpvar_5;
  tmpvar_5 = mix (v_strokeColor, v_fillColor, tmpvar_4.y);
  arrowColor_1.xyz = tmpvar_5.xyz;
  arrowColor_1.w = (tmpvar_4.x * style.alphaScale);
  lowp vec4 tmpvar_6;
  tmpvar_6.xyz = mix (framebuffer_2.xyz, arrowColor_1.xyz, arrowColor_1.w);
  tmpvar_6.w = arrowColor_1.w;
  arrowColor_1 = tmpvar_6;
  gl_FragColor = tmpvar_6;
//routeLineTraffic_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec2 position;
  highp vec2 normal;
  highp vec2 texCoord;
  highp float distance;
  highp vec2 trafficSpeed;
struct View {
  highp mat4 modelViewProjectionMatrix;
  highp float tilePerPoint;
struct Style {
  highp float halfWidth;
  highp vec4 trafficColors[5];
  highp vec4 travelledTrafficColors[5];
  highp float splitLength;
struct VertexOut {
  highp vec2 texCoord;
  highp float distance;
  highp vec4 trafficColor;
  highp vec4 travelledTrafficColor;
attribute highp vec2 vertexInput_position;
attribute highp vec2 vertexInput_normal;
attribute highp vec2 vertexInput_texCoord;
attribute highp float vertexInput_distance;
attribute highp vec2 vertexInput_trafficSpeed;
uniform View view;
uniform Style style;
varying highp vec2 v_texCoord;
varying highp float v_distance;
varying highp vec4 v_trafficColor;
varying highp vec4 v_travelledTrafficColor;
void main ()
  VertexOut outputValue_1;
  VertexIn vertexInput_2;
  vertexInput_2.position = vertexInput_position;
  vertexInput_2.normal = vertexInput_normal;
  vertexInput_2.texCoord = vertexInput_texCoord;
  vertexInput_2.distance = vertexInput_distance;
  vertexInput_2.trafficSpeed = vertexInput_trafficSpeed;
  outputValue_1.texCoord = vertexInput_2.texCoord;
  highp vec4 tmpvar_3;
  tmpvar_3.zw = vec2(0.0, 1.0);
  tmpvar_3.xy = (vertexInput_2.position + ((
    (vertexInput_2.normal * vec2(style.halfWidth))
   * vec2(view.tilePerPoint)) * vec2(4.0, 4.0)));
  gl_Position = (view.modelViewProjectionMatrix * tmpvar_3);
  highp int tmpvar_4;
  tmpvar_4 = int(floor((vertexInput_2.trafficSpeed.x + 0.5)));
  outputValue_1.distance = vertexInput_2.distance;
  outputValue_1.trafficColor = style.trafficColors[tmpvar_4];
  outputValue_1.travelledTrafficColor = style.travelledTrafficColors[tmpvar_4];
  v_texCoord = outputValue_1.texCoord;
  v_distance = outputValue_1.distance;
  v_trafficColor = outputValue_1.trafficColor;
  v_travelledTrafficColor = outputValue_1.travelledTrafficColor;
//routeLineTraffic_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
struct Style {
  highp float halfWidth;
  highp vec4 trafficColors[5];
  highp vec4 travelledTrafficColors[5];
  highp float splitLength;
varying highp vec2 v_texCoord;
varying highp float v_distance;
varying highp vec4 v_trafficColor;
varying highp vec4 v_travelledTrafficColor;
uniform Style style;
uniform sampler2D alphaTexture;
void main ()
  lowp vec4 trafficColor_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = mix (v_travelledTrafficColor, v_trafficColor, float((v_distance >= style.splitLength)));
  trafficColor_1 = tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (alphaTexture, v_texCoord).xxxx;
  gl_FragColor = (trafficColor_1 * tmpvar_3);
//simpleGrid_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec4 position;
struct View {
  highp mat4 modelViewProjectionMatrix;
  highp float tilePerPoint;
struct GridView {
  highp mat4 gridView;
  highp vec4 color;
struct MajorMinorVertex {
  highp vec2 v_vertex;
attribute highp vec4 vertex_input_position;
uniform View view;
uniform GridView gridView;
varying highp vec2 v_v_vertex;
void main ()
  MajorMinorVertex out_value_1;
  VertexIn vertex_input_2;
  vertex_input_2.position = vertex_input_position;
  highp vec4 tmpvar_3;
  tmpvar_3 = vertex_input_2.position;
  gl_Position = (view.modelViewProjectionMatrix * tmpvar_3);
  out_value_1.v_vertex = (gridView.gridView * tmpvar_3).xy;
  v_v_vertex = out_value_1.v_vertex;
//simpleGrid_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
struct GridView {
  highp mat4 gridView;
  highp vec4 color;
struct Style {
  highp vec2 invFwidth;
varying highp vec2 v_v_vertex;
uniform GridView gridView;
uniform Style style;
void main ()
  mediump vec2 f_1;
  lowp vec4 out_color_2;
  highp vec2 tmpvar_3;
  tmpvar_3 = (abs((
    fract(v_v_vertex)
   - vec2(0.5, 0.5))) * style.invFwidth);
  f_1 = tmpvar_3;
  mediump float tmpvar_4;
  tmpvar_4 = min (f_1.x, f_1.y);
  highp vec3 tmpvar_5;
  tmpvar_5 = gridView.color.xyz;
  out_color_2.xyz = tmpvar_5;
  out_color_2.w = tmpvar_4;
  gl_FragColor = out_color_2;
//sky_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec2 vertexPosition;
struct Style {
  highp float skyStartOffset;
  highp vec4 horizon;
  highp vec4 color;
  highp float screenHeight;
struct VertexOut {
  lowp vec4 skyColor;
attribute highp vec2 vertexInput_vertexPosition;
uniform Style style;
varying lowp vec4 v_skyColor;
void main ()
  VertexOut outputValue_1;
  VertexIn vertexInput_2;
  vertexInput_2.vertexPosition = vertexInput_vertexPosition;
  highp vec3 tmpvar_3;
  tmpvar_3.z = 1.0;
  tmpvar_3.x = vertexInput_2.vertexPosition.x;
  tmpvar_3.y = (style.skyStartOffset + (vertexInput_2.vertexPosition.y * (1.0 - style.skyStartOffset)));
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = (vec3(-1.0, -1.0, -1.0) + (vec3(2.0, 2.0, 2.0) * tmpvar_3));
  gl_Position = tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = mix (style.horizon, style.color, clamp ((
    (tmpvar_3.y - style.skyStartOffset)
   * 10.0), 0.0, 1.0));
  outputValue_1.skyColor = tmpvar_5;
  v_skyColor = outputValue_1.skyColor;
//sky_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
varying lowp vec4 v_skyColor;
void main ()
  gl_FragColor = v_skyColor;
//solidRibbon_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec2 position;
  highp vec2 normal;
  highp vec2 texCoord;
struct View {
  highp mat4 modelViewProjectionMatrix;
  highp float tilePerPoint;
struct Style {
  highp vec4 color;
  highp vec2 offset;
  highp float halfWidth;
  highp float imageWidth;
struct VertexOut {
  highp vec2 texCoord;
attribute highp vec2 vertexInput_position;
attribute highp vec2 vertexInput_normal;
attribute highp vec2 vertexInput_texCoord;
uniform View view;
uniform Style style;
varying highp vec2 v_texCoord;
void main ()
  VertexOut outputValue_1;
  VertexIn vertexInput_2;
  vertexInput_2.position = vertexInput_position;
  vertexInput_2.normal = vertexInput_normal;
  vertexInput_2.texCoord = vertexInput_texCoord;
  outputValue_1.texCoord = vertexInput_2.texCoord;
  highp vec4 pos_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.zw = vec2(0.0, 1.0);
  tmpvar_5.xy = (vertexInput_2.position + ((
    (vertexInput_2.normal * vec2(style.halfWidth))
   * vec2(view.tilePerPoint)) * vec2(4.0, 4.0)));
  tmpvar_4 = (view.modelViewProjectionMatrix * tmpvar_5);
  pos_3.zw = tmpvar_4.zw;
  pos_3.xy = (tmpvar_4.xy + (style.offset * tmpvar_4.ww));
  gl_Position = pos_3;
  v_texCoord = outputValue_1.texCoord;
//solidRibbon_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
lowp vec4 impl_low_texture2DLodEXT(lowp sampler2D sampler, highp vec2 coord, mediump float lod)
#if defined(GL_EXT_shader_texture_lod)
return texture2DLodEXT(sampler, coord, lod);
#else
return texture2D(sampler, coord, lod);
#endif
struct Style {
  highp vec4 color;
  highp vec2 offset;
  highp float halfWidth;
  highp float imageWidth;
varying highp vec2 v_texCoord;
uniform Style style;
uniform sampler2D alphaTexture;
void main ()
  lowp vec4 o_color_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = style.color;
  o_color_1 = tmpvar_2;
  mediump float tmpvar_3;
  highp float tmpvar_4;
  tmpvar_4 = dFdx(v_texCoord.y);
  highp float tmpvar_5;
  tmpvar_5 = dFdy(v_texCoord.y);
  highp float tmpvar_6;
  tmpvar_6 = log2(max (1.0, (style.imageWidth * 
    sqrt(((tmpvar_4 * tmpvar_4) + (tmpvar_5 * tmpvar_5)))
  )));
  tmpvar_3 = tmpvar_6;
  o_color_1.w = (o_color_1.w * impl_low_texture2DLodEXT (alphaTexture, v_texCoord, tmpvar_3).x);
  gl_FragColor = o_color_1;
//solidTraffic_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec2 position;
  highp vec2 normal;
  highp vec2 texCoord;
  highp float uniDirectional;
  highp vec2 shiftDir;
struct View {
  highp mat4 modelViewProjectionMatrix;
  highp float tilePerPoint;
struct Style {
  highp vec4 color;
  highp float halfWidth;
  highp float imageWidth;
  highp float zoomDependentShift;
  highp float drivingDirection;
  highp float sideOffset;
struct VertexOut {
  highp vec2 texCoord;
attribute highp vec2 vertexInput_position;
attribute highp vec2 vertexInput_normal;
attribute highp vec2 vertexInput_texCoord;
attribute highp float vertexInput_uniDirectional;
attribute highp vec2 vertexInput_shiftDir;
uniform View view;
uniform Style style;
varying highp vec2 v_texCoord;
void main ()
  VertexOut outputValue_1;
  VertexIn vertexInput_2;
  vertexInput_2.position = vertexInput_position;
  vertexInput_2.normal = vertexInput_normal;
  vertexInput_2.texCoord = vertexInput_texCoord;
  vertexInput_2.uniDirectional = vertexInput_uniDirectional;
  vertexInput_2.shiftDir = vertexInput_shiftDir;
  outputValue_1.texCoord = vertexInput_2.texCoord;
  highp vec4 tmpvar_3;
  tmpvar_3.zw = vec2(0.0, 1.0);
  tmpvar_3.xy = ((vertexInput_2.position + (vec2(
    (style.halfWidth * view.tilePerPoint)
  ) * 
    (vertexInput_2.normal * vec2(4.0, 4.0))
  )) + (vec2((
    ((style.drivingDirection * (1.0 - (style.zoomDependentShift * vertexInput_2.uniDirectional))) * style.sideOffset)
   * view.tilePerPoint)) * (vertexInput_2.shiftDir * vec2(4.0, 4.0))));
  gl_Position = (view.modelViewProjectionMatrix * tmpvar_3);
  v_texCoord = outputValue_1.texCoord;
//solidTraffic_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
lowp vec4 impl_low_texture2DLodEXT(lowp sampler2D sampler, highp vec2 coord, mediump float lod)
#if defined(GL_EXT_shader_texture_lod)
return texture2DLodEXT(sampler, coord, lod);
#else
return texture2D(sampler, coord, lod);
#endif
struct Style {
  highp vec4 color;
  highp float halfWidth;
  highp float imageWidth;
  highp float zoomDependentShift;
  highp float drivingDirection;
  highp float sideOffset;
varying highp vec2 v_texCoord;
uniform Style style;
uniform sampler2D alphaTexture;
void main ()
  lowp vec4 o_color_1;
  lowp vec4 dst_2;
  mediump vec4 tmpvar_3;
  tmpvar_3 = gl_LastFragData[0];
  dst_2 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = style.color;
  o_color_1 = tmpvar_4;
  mediump float tmpvar_5;
  highp float tmpvar_6;
  tmpvar_6 = dFdx(v_texCoord.y);
  highp float tmpvar_7;
  tmpvar_7 = dFdy(v_texCoord.y);
  highp float tmpvar_8;
  tmpvar_8 = log2(max (1.0, (style.imageWidth * 
    sqrt(((tmpvar_6 * tmpvar_6) + (tmpvar_7 * tmpvar_7)))
  )));
  tmpvar_5 = tmpvar_8;
  o_color_1.w = (o_color_1.w * impl_low_texture2DLodEXT (alphaTexture, v_texCoord, tmpvar_5).x);
  o_color_1.xyz = mix (dst_2.xyz, o_color_1.xyz, o_color_1.w);
  o_color_1.w = (((1.0 - dst_2.w) * o_color_1.w) + dst_2.w);
  gl_FragColor = o_color_1;
//specularBuilding_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec4 vertexAndTexture;
  highp vec4 normalAndStyleIndex;
struct View {
  highp mat4 modelViewProjectionMatrix;
  highp float tilePerPoint;
struct Scale {
  highp float scale;
  highp vec3 tileOrigin;
  highp vec3 tileSize;
struct Style {
  highp vec4 color[8];
  highp vec4 alternateColor[8];
  highp vec2 shininessAndSpecularity[8];
  highp float textureCoordScale[8];
  highp float textureLightness;
  highp float brightness;
  highp vec3 cameraPositionInTileSpace;
  highp float fogFactor;
struct Gradient {
  highp vec2 equation[8];
struct Lighting {
  highp vec4 lightDirection[3];
  highp vec4 lightColor[3];
  highp vec4 lightSpecularColor;
  highp vec4 ambientLightColor;
struct VertexOut {
  highp float fogCoordinate;
  lowp vec4 fogColor;
  lowp vec4 unlitColor;
  lowp vec4 diffuseColor;
  highp vec3 normal;
  highp vec3 position;
  highp vec2 texture2D;
  lowp float gradient;
  highp float shininess;
  highp float specularity;
  highp vec3 clipPosition;
attribute highp vec4 vertex_input_vertexAndTexture;
attribute highp vec4 vertex_input_normalAndStyleIndex;
uniform View view;
uniform Scale scale;
uniform Style style;
uniform Gradient gradient;
uniform Lighting lighting;
varying highp float v_fogCoordinate;
varying lowp vec4 v_fogColor;
varying lowp vec4 v_unlitColor;
varying lowp vec4 v_diffuseColor;
varying highp vec3 v_normal;
varying highp vec3 v_position;
varying highp vec2 v_texture;
varying lowp float v_gradient;
varying highp float v_shininess;
varying highp float v_specularity;
varying highp vec3 v_clipPosition;
void main ()
  VertexIn vertex_input_1;
  vertex_input_1.vertexAndTexture = vertex_input_vertexAndTexture;
  vertex_input_1.normalAndStyleIndex = vertex_input_normalAndStyleIndex;
  VertexOut outputValue_2;
  highp int tmpvar_3;
  tmpvar_3 = int((vertex_input_1.normalAndStyleIndex.w * 127.5));
  outputValue_2.normal = vertex_input_1.normalAndStyleIndex.xyz;
  highp vec4 tmpvar_4;
  tmpvar_4 = style.color[tmpvar_3];
  outputValue_2.unlitColor = tmpvar_4;
  outputValue_2.shininess = style.shininessAndSpecularity[tmpvar_3].x;
  outputValue_2.specularity = style.shininessAndSpecularity[tmpvar_3].y;
  outputValue_2.position = (scale.tileOrigin + (scale.tileSize * vertex_input_1.vertexAndTexture.xyz));
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xy = outputValue_2.position.xy;
  tmpvar_5.z = (outputValue_2.position.z * scale.scale);
  gl_Position = (view.modelViewProjectionMatrix * tmpvar_5);
  outputValue_2.clipPosition = (gl_Position.xyz / gl_Position.www);
  highp vec3 normal_6;
  normal_6 = outputValue_2.normal;
  lowp vec3 lightContributions_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = lighting.ambientLightColor.xyz;
  lightContributions_7 = tmpvar_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = (vec3(clamp (dot (lighting.lightDirection[0].xyz, normal_6), 0.0, 1.0)) * lighting.lightColor[0].xyz);
  lightContributions_7 = (lightContributions_7 + tmpvar_9);
  highp vec3 tmpvar_10;
  tmpvar_10 = (vec3(clamp (dot (lighting.lightDirection[1].xyz, normal_6), 0.0, 1.0)) * lighting.lightColor[1].xyz);
  lightContributions_7 = (lightContributions_7 + tmpvar_10);
  highp vec3 tmpvar_11;
  tmpvar_11 = (vec3(clamp (dot (lighting.lightDirection[2].xyz, normal_6), 0.0, 1.0)) * lighting.lightColor[2].xyz);
  lightContributions_7 = (lightContributions_7 + tmpvar_11);
  lowp vec4 tmpvar_12;
  tmpvar_12.xyz = (outputValue_2.unlitColor.xyz * lightContributions_7);
  tmpvar_12.w = outputValue_2.unlitColor.w;
  outputValue_2.diffuseColor = tmpvar_12;
  highp float tmpvar_13;
  highp vec2 gradient_14;
  gradient_14 = gradient.equation[tmpvar_3];
  tmpvar_13 = ((gradient_14.x * outputValue_2.position.z) + gradient_14.y);
  outputValue_2.gradient = tmpvar_13;
  highp float tmpvar_15;
  tmpvar_15 = floor((vertex_input_1.vertexAndTexture.w * 256.0));
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_15;
  tmpvar_16.y = floor(((
    (vertex_input_1.vertexAndTexture.w * 256.0)
   - tmpvar_15) * 256.0));
  outputValue_2.texture2D = floor((tmpvar_16 * vec2(style.textureCoordScale[tmpvar_3])));
  v_fogCoordinate = outputValue_2.fogCoordinate;
  v_fogColor = outputValue_2.fogColor;
  v_unlitColor = outputValue_2.unlitColor;
  v_diffuseColor = outputValue_2.diffuseColor;
  v_normal = outputValue_2.normal;
  v_position = outputValue_2.position;
  v_texture = outputValue_2.texture2D;
  v_gradient = outputValue_2.gradient;
  v_shininess = outputValue_2.shininess;
  v_specularity = outputValue_2.specularity;
  v_clipPosition = outputValue_2.clipPosition;
//specularBuilding_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
struct Scale {
  highp float scale;
  highp vec3 tileOrigin;
  highp vec3 tileSize;
struct Style {
  highp vec4 color[8];
  highp vec4 alternateColor[8];
  highp vec2 shininessAndSpecularity[8];
  highp float textureCoordScale[8];
  highp float textureLightness;
  highp float brightness;
  highp vec3 cameraPositionInTileSpace;
  highp float fogFactor;
struct Lighting {
  highp vec4 lightDirection[3];
  highp vec4 lightColor[3];
  highp vec4 lightSpecularColor;
  highp vec4 ambientLightColor;
struct Fade {
  highp vec2 fadeEquation;
  highp float alphaFactor;
varying highp float v_fogCoordinate;
varying lowp vec4 v_fogColor;
varying lowp vec4 v_unlitColor;
varying lowp vec4 v_diffuseColor;
varying highp vec3 v_normal;
varying highp vec3 v_position;
varying highp vec2 v_texture;
varying lowp float v_gradient;
varying highp float v_shininess;
varying highp float v_specularity;
varying highp vec3 v_clipPosition;
uniform Scale scale;
uniform Style style;
uniform Lighting lighting;
uniform Fade fade;
uniform sampler2D textureSampler;
void main ()
  highp float tmpvar_1;
  tmpvar_1 = scale.scale;
  highp float tmpvar_2;
  tmpvar_2 = style.brightness;
  highp vec4 tmpvar_3;
  tmpvar_3 = lighting.lightDirection[0];
  highp vec2 tmpvar_4;
  tmpvar_4 = fade.fadeEquation;
  lowp vec4 texturedColor_5;
  lowp float lowScale_6;
  lowScale_6 = tmpvar_1;
  lowp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = (lighting.lightSpecularColor.xyz * vec3(((v_specularity * 
    pow (max (0.0, dot (normalize(
      (v_position - style.cameraPositionInTileSpace)
    ), normalize(
      (tmpvar_3.xyz - (2.0 * (dot (v_normal, tmpvar_3.xyz) * v_normal)))
    ))), v_shininess)
  ) * (
    (v_shininess + 8.0)
   / 25.13274))));
  tmpvar_7 = tmpvar_8;
  lowp float styleBrightness_9;
  styleBrightness_9 = tmpvar_2;
  lowp vec4 tmpvar_10;
  tmpvar_10.xyz = ((v_diffuseColor.xyz + tmpvar_7) * vec3(mix (1.0, (
    min (v_gradient, 0.9799805)
   * styleBrightness_9), lowScale_6)));
  tmpvar_10.w = v_diffuseColor.w;
  lowp vec4 tmpvar_11;
  tmpvar_11 = (mix (v_unlitColor, tmpvar_10, lowScale_6) * texture2D (textureSampler, v_texture));
  texturedColor_5.xyz = tmpvar_11.xyz;
  lowp float tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = clamp (((v_clipPosition.y * tmpvar_4.x) + tmpvar_4.y), fade.alphaFactor, 1.0);
  tmpvar_12 = tmpvar_13;
  texturedColor_5.w = (tmpvar_11.w * tmpvar_12);
  gl_FragColor = texturedColor_5;
//specularBuildingPointyRoof_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec4 vertexAndStyleIndex;
  highp vec4 normalAndIsFacade;
struct Skyfog {
  highp vec4 fogSlope;
  highp float fogOffset;
  highp float screenHeight;
  highp float skyOffset;
  highp vec4 skyBottomColor;
  highp vec4 skyTopColor;
struct View {
  highp mat4 modelViewProjectionMatrix;
  highp float tilePerPoint;
struct Scale {
  highp float scale;
  highp vec3 tileOrigin;
  highp vec3 tileSize;
struct Style {
  highp vec4 color[8];
  highp vec4 alternateColor[8];
  highp vec2 shininessAndSpecularity[8];
  highp float textureCoordScale[8];
  highp float textureLightness;
  highp float brightness;
  highp vec3 cameraPositionInTileSpace;
  highp float fogFactor;
struct Gradient {
  highp vec2 equation[8];
struct Lighting {
  highp vec4 lightDirection[3];
  highp vec4 lightColor[3];
  highp vec4 lightSpecularColor;
  highp vec4 ambientLightColor;
struct VertexOut {
  highp float fogCoordinate;
  lowp vec4 fogColor;
  lowp vec4 unlitColor;
  lowp vec4 diffuseColor;
  highp vec3 normal;
  highp vec3 position;
  highp vec2 texture2D;
  lowp float gradient;
  highp float shininess;
  highp float specularity;
  highp vec3 clipPosition;
attribute highp vec4 vertex_input_vertexAndStyleIndex;
attribute highp vec4 vertex_input_normalAndIsFacade;
uniform Skyfog skyfog;
uniform View view;
uniform Scale scale;
uniform Style style;
uniform Gradient gradient;
uniform Lighting lighting;
varying highp float v_fogCoordinate;
varying lowp vec4 v_fogColor;
varying lowp vec4 v_unlitColor;
varying lowp vec4 v_diffuseColor;
varying highp vec3 v_normal;
varying highp vec3 v_position;
varying highp vec2 v_texture;
varying lowp float v_gradient;
varying highp float v_shininess;
varying highp float v_specularity;
varying highp vec3 v_clipPosition;
void main ()
  VertexOut outputValue_1;
  VertexIn vertex_input_2;
  vertex_input_2.vertexAndStyleIndex = vertex_input_vertexAndStyleIndex;
  vertex_input_2.normalAndIsFacade = vertex_input_normalAndIsFacade;
  VertexOut outputValue_3;
  lowp float isFacade_4;
  highp int tmpvar_5;
  tmpvar_5 = int((65535.0 * vertex_input_2.vertexAndStyleIndex.w));
  highp float tmpvar_6;
  tmpvar_6 = vertex_input_2.normalAndIsFacade.w;
  isFacade_4 = tmpvar_6;
  outputValue_3.normal = vertex_input_2.normalAndIsFacade.xyz;
  highp vec4 tmpvar_7;
  tmpvar_7 = mix (style.alternateColor[tmpvar_5], style.color[tmpvar_5], isFacade_4);
  outputValue_3.unlitColor = tmpvar_7;
  outputValue_3.shininess = style.shininessAndSpecularity[tmpvar_5].x;
  outputValue_3.specularity = style.shininessAndSpecularity[tmpvar_5].y;
  outputValue_3.position = (scale.tileOrigin + (scale.tileSize * vertex_input_2.vertexAndStyleIndex.xyz));
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xy = outputValue_3.position.xy;
  tmpvar_8.z = (outputValue_3.position.z * scale.scale);
  gl_Position = (view.modelViewProjectionMatrix * tmpvar_8);
  highp vec3 normal_9;
  normal_9 = outputValue_3.normal;
  lowp vec3 lightContributions_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = lighting.ambientLightColor.xyz;
  lightContributions_10 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = (vec3(clamp (dot (lighting.lightDirection[0].xyz, normal_9), 0.0, 1.0)) * lighting.lightColor[0].xyz);
  lightContributions_10 = (lightContributions_10 + tmpvar_12);
  highp vec3 tmpvar_13;
  tmpvar_13 = (vec3(clamp (dot (lighting.lightDirection[1].xyz, normal_9), 0.0, 1.0)) * lighting.lightColor[1].xyz);
  lightContributions_10 = (lightContributions_10 + tmpvar_13);
  highp vec3 tmpvar_14;
  tmpvar_14 = (vec3(clamp (dot (lighting.lightDirection[2].xyz, normal_9), 0.0, 1.0)) * lighting.lightColor[2].xyz);
  lightContributions_10 = (lightContributions_10 + tmpvar_14);
  lowp vec4 tmpvar_15;
  tmpvar_15.xyz = (outputValue_3.unlitColor.xyz * lightContributions_10);
  tmpvar_15.w = outputValue_3.unlitColor.w;
  outputValue_3.diffuseColor = tmpvar_15;
  highp float tmpvar_16;
  highp vec2 gradient_17;
  gradient_17 = gradient.equation[tmpvar_5];
  tmpvar_16 = ((gradient_17.x * outputValue_3.position.z) + gradient_17.y);
  outputValue_3.gradient = tmpvar_16;
  outputValue_3.texture2D = vec2(0.0, 0.0);
  outputValue_1 = outputValue_3;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = outputValue_3.position;
  outputValue_1.fogCoordinate = (style.fogFactor * (dot (skyfog.fogSlope, tmpvar_18) + skyfog.fogOffset));
  lowp vec4 tmpvar_19;
  highp vec4 tmpvar_20;
  tmpvar_20 = mix (skyfog.skyBottomColor, skyfog.skyTopColor, clamp ((
    ((0.5 + ((0.5 * gl_Position.y) / gl_Position.w)) - skyfog.skyOffset)
   * 10.0), 0.0, 1.0));
  tmpvar_19 = tmpvar_20;
  outputValue_1.fogColor = tmpvar_19;
  v_fogCoordinate = outputValue_1.fogCoordinate;
  v_fogColor = outputValue_1.fogColor;
  v_unlitColor = outputValue_1.unlitColor;
  v_diffuseColor = outputValue_1.diffuseColor;
  v_normal = outputValue_1.normal;
  v_position = outputValue_1.position;
  v_texture = outputValue_1.texture2D;
  v_gradient = outputValue_1.gradient;
  v_shininess = outputValue_1.shininess;
  v_specularity = outputValue_1.specularity;
  v_clipPosition = outputValue_1.clipPosition;
//specularBuildingPointyRoof_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
struct Scale {
  highp float scale;
  highp vec3 tileOrigin;
  highp vec3 tileSize;
struct Style {
  highp vec4 color[8];
  highp vec4 alternateColor[8];
  highp vec2 shininessAndSpecularity[8];
  highp float textureCoordScale[8];
  highp float textureLightness;
  highp float brightness;
  highp vec3 cameraPositionInTileSpace;
  highp float fogFactor;
struct Lighting {
  highp vec4 lightDirection[3];
  highp vec4 lightColor[3];
  highp vec4 lightSpecularColor;
  highp vec4 ambientLightColor;
struct Fade {
  highp vec2 fadeEquation;
  highp float alphaFactor;
varying highp float v_fogCoordinate;
varying lowp vec4 v_fogColor;
varying lowp vec4 v_unlitColor;
varying lowp vec4 v_diffuseColor;
varying highp vec3 v_normal;
varying highp vec3 v_position;
varying highp vec2 v_texture;
varying lowp float v_gradient;
varying highp float v_shininess;
varying highp float v_specularity;
varying highp vec3 v_clipPosition;
uniform Scale scale;
uniform Style style;
uniform Lighting lighting;
uniform Fade fade;
void main ()
  highp float tmpvar_1;
  tmpvar_1 = scale.scale;
  highp float tmpvar_2;
  tmpvar_2 = style.brightness;
  highp vec4 tmpvar_3;
  tmpvar_3 = lighting.lightDirection[0];
  highp vec2 tmpvar_4;
  tmpvar_4 = fade.fadeEquation;
  lowp vec4 combinedColor_5;
  lowp float lowScale_6;
  lowScale_6 = tmpvar_1;
  lowp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = (lighting.lightSpecularColor.xyz * vec3(((v_specularity * 
    pow (max (0.0, dot (normalize(
      (v_position - style.cameraPositionInTileSpace)
    ), normalize(
      (tmpvar_3.xyz - (2.0 * (dot (v_normal, tmpvar_3.xyz) * v_normal)))
    ))), v_shininess)
  ) * (
    (v_shininess + 8.0)
   / 25.13274))));
  tmpvar_7 = tmpvar_8;
  lowp float styleBrightness_9;
  styleBrightness_9 = tmpvar_2;
  lowp vec4 tmpvar_10;
  tmpvar_10.xyz = ((v_diffuseColor.xyz + tmpvar_7) * vec3(mix (1.0, (
    min (v_gradient, 0.9799805)
   * styleBrightness_9), lowScale_6)));
  tmpvar_10.w = v_diffuseColor.w;
  lowp vec4 tmpvar_11;
  tmpvar_11 = mix (v_unlitColor, tmpvar_10, lowScale_6);
  combinedColor_5.xyz = tmpvar_11.xyz;
  lowp float tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = clamp (((v_clipPosition.y * tmpvar_4.x) + tmpvar_4.y), fade.alphaFactor, 1.0);
  tmpvar_12 = tmpvar_13;
  combinedColor_5.w = (tmpvar_11.w * tmpvar_12);
  lowp vec4 color_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = mix (combinedColor_5, v_fogColor, clamp (v_fogCoordinate, 0.0, 1.0));
  color_14 = tmpvar_15;
  gl_FragColor = color_14;
//specularBuildingTop_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec4 vertexAndStyleIndex;
struct View {
  highp mat4 modelViewProjectionMatrix;
  highp float tilePerPoint;
struct Scale {
  highp float scale;
  highp vec3 tileOrigin;
  highp vec3 tileSize;
struct Style {
  highp vec4 color[8];
  highp vec4 alternateColor[8];
  highp vec2 shininessAndSpecularity[8];
  highp float textureCoordScale[8];
  highp float textureLightness;
  highp float brightness;
  highp vec3 cameraPositionInTileSpace;
  highp float fogFactor;
struct Gradient {
  highp vec2 equation[8];
struct Lighting {
  highp vec4 lightDirection[3];
  highp vec4 lightColor[3];
  highp vec4 lightSpecularColor;
  highp vec4 ambientLightColor;
struct VertexOut {
  highp float fogCoordinate;
  lowp vec4 fogColor;
  lowp vec4 unlitColor;
  lowp vec4 diffuseColor;
  highp vec3 normal;
  highp vec3 position;
  highp vec2 texture2D;
  lowp float gradient;
  highp float shininess;
  highp float specularity;
  highp vec3 clipPosition;
attribute highp vec4 vertex_input_vertexAndStyleIndex;
uniform View view;
uniform Scale scale;
uniform Style style;
uniform Gradient gradient;
uniform Lighting lighting;
varying highp float v_fogCoordinate;
varying lowp vec4 v_fogColor;
varying lowp vec4 v_unlitColor;
varying lowp vec4 v_diffuseColor;
varying highp vec3 v_normal;
varying highp vec3 v_position;
varying highp vec2 v_texture;
varying lowp float v_gradient;
varying highp float v_shininess;
varying highp float v_specularity;
varying highp vec3 v_clipPosition;
void main ()
  VertexIn vertex_input_1;
  vertex_input_1.vertexAndStyleIndex = vertex_input_vertexAndStyleIndex;
  VertexOut outputValue_2;
  highp int tmpvar_3;
  tmpvar_3 = int((vertex_input_1.vertexAndStyleIndex.w * 256.0));
  highp vec4 tmpvar_4;
  tmpvar_4 = style.color[tmpvar_3];
  outputValue_2.unlitColor = tmpvar_4;
  outputValue_2.shininess = style.shininessAndSpecularity[tmpvar_3].x;
  outputValue_2.specularity = style.shininessAndSpecularity[tmpvar_3].y;
  outputValue_2.normal = vec3(0.0, 0.0, 1.0);
  outputValue_2.position = (scale.tileOrigin + (scale.tileSize * vertex_input_1.vertexAndStyleIndex.xyz));
  outputValue_2.position.z = (outputValue_2.position.z * scale.scale);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = outputValue_2.position;
  gl_Position = (view.modelViewProjectionMatrix * tmpvar_5);
  outputValue_2.clipPosition = (gl_Position.xyz / gl_Position.www);
  lowp vec3 lightContributions_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = lighting.ambientLightColor.xyz;
  lightContributions_6 = tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = (vec3(clamp (lighting.lightDirection[0].z, 0.0, 1.0)) * lighting.lightColor[0].xyz);
  lightContributions_6 = (lightContributions_6 + tmpvar_8);
  highp vec3 tmpvar_9;
  tmpvar_9 = (vec3(clamp (lighting.lightDirection[1].z, 0.0, 1.0)) * lighting.lightColor[1].xyz);
  lightContributions_6 = (lightContributions_6 + tmpvar_9);
  highp vec3 tmpvar_10;
  tmpvar_10 = (vec3(clamp (lighting.lightDirection[2].z, 0.0, 1.0)) * lighting.lightColor[2].xyz);
  lightContributions_6 = (lightContributions_6 + tmpvar_10);
  lowp vec4 tmpvar_11;
  tmpvar_11.xyz = (outputValue_2.unlitColor.xyz * lightContributions_6);
  tmpvar_11.w = outputValue_2.unlitColor.w;
  outputValue_2.diffuseColor = tmpvar_11;
  if ((outputValue_2.position.z < 1e-08)) {
    highp float tmpvar_12;
    tmpvar_12 = mix (0.935, 1.0, scale.scale);
    outputValue_2.gradient = tmpvar_12;
  } else {
    highp float tmpvar_13;
    highp vec2 gradient_14;
    gradient_14 = gradient.equation[tmpvar_3];
    tmpvar_13 = ((gradient_14.x * outputValue_2.position.z) + gradient_14.y);
    outputValue_2.gradient = tmpvar_13;
  };
  outputValue_2.texture2D = vertex_input_1.vertexAndStyleIndex.xy;
  v_fogCoordinate = outputValue_2.fogCoordinate;
  v_fogColor = outputValue_2.fogColor;
  v_unlitColor = outputValue_2.unlitColor;
  v_diffuseColor = outputValue_2.diffuseColor;
  v_normal = outputValue_2.normal;
  v_position = outputValue_2.position;
  v_texture = outputValue_2.texture2D;
  v_gradient = outputValue_2.gradient;
  v_shininess = outputValue_2.shininess;
  v_specularity = outputValue_2.specularity;
  v_clipPosition = outputValue_2.clipPosition;
//specularBuildingTop_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
struct Scale {
  highp float scale;
  highp vec3 tileOrigin;
  highp vec3 tileSize;
struct Style {
  highp vec4 color[8];
  highp vec4 alternateColor[8];
  highp vec2 shininessAndSpecularity[8];
  highp float textureCoordScale[8];
  highp float textureLightness;
  highp float brightness;
  highp vec3 cameraPositionInTileSpace;
  highp float fogFactor;
struct Lighting {
  highp vec4 lightDirection[3];
  highp vec4 lightColor[3];
  highp vec4 lightSpecularColor;
  highp vec4 ambientLightColor;
struct Fade {
  highp vec2 fadeEquation;
  highp float alphaFactor;
varying highp float v_fogCoordinate;
varying lowp vec4 v_fogColor;
varying lowp vec4 v_unlitColor;
varying lowp vec4 v_diffuseColor;
varying highp vec3 v_normal;
varying highp vec3 v_position;
varying highp vec2 v_texture;
varying lowp float v_gradient;
varying highp float v_shininess;
varying highp float v_specularity;
varying highp vec3 v_clipPosition;
uniform Scale scale;
uniform Style style;
uniform Lighting lighting;
uniform Fade fade;
void main ()
  highp float tmpvar_1;
  tmpvar_1 = scale.scale;
  highp float tmpvar_2;
  tmpvar_2 = style.brightness;
  highp vec4 tmpvar_3;
  tmpvar_3 = lighting.lightDirection[0];
  highp vec2 tmpvar_4;
  tmpvar_4 = fade.fadeEquation;
  lowp vec4 c_5;
  lowp float lowScale_6;
  lowScale_6 = tmpvar_1;
  lowp vec3 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_3.xy;
  tmpvar_8.z = -(tmpvar_3.z);
  highp vec3 tmpvar_9;
  tmpvar_9 = (lighting.lightSpecularColor.xyz * vec3((pow (
    max (0.0, dot (normalize((v_position - style.cameraPositionInTileSpace)), normalize(tmpvar_8)))
  , v_shininess) * (
    (v_shininess + 8.0)
   / 25.13274))));
  tmpvar_7 = tmpvar_9;
  lowp float styleBrightness_10;
  styleBrightness_10 = tmpvar_2;
  lowp vec4 tmpvar_11;
  tmpvar_11.xyz = ((v_diffuseColor.xyz + tmpvar_7) * vec3(mix (1.0, (
    min (v_gradient, 0.9799805)
   * styleBrightness_10), lowScale_6)));
  tmpvar_11.w = v_diffuseColor.w;
  highp vec4 tmpvar_12;
  tmpvar_12 = mix (v_unlitColor, tmpvar_11, tmpvar_1);
  c_5 = tmpvar_12;
  lowp float tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((v_clipPosition.y * tmpvar_4.x) + tmpvar_4.y), fade.alphaFactor, 1.0);
  tmpvar_13 = tmpvar_14;
  c_5.w = (c_5.w * tmpvar_13);
  gl_FragColor = c_5;
//specularLandmark_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec4 position;
  highp vec2 texture2D;
  highp vec4 normalAndStyleIndex;
struct View {
  highp mat4 modelViewProjectionMatrix;
  highp float tilePerPoint;
struct Scale {
  highp float scale;
  highp vec3 tileOrigin;
  highp vec3 tileSize;
struct Style {
  highp vec4 color[8];
  highp vec4 alternateColor[8];
  highp vec2 shininessAndSpecularity[8];
  highp float textureCoordScale[8];
  highp float textureLightness;
  highp float brightness;
  highp vec3 cameraPositionInTileSpace;
  highp float fogFactor;
struct Gradient {
  highp vec2 equation[8];
struct Lighting {
  highp vec4 lightDirection[3];
  highp vec4 lightColor[3];
  highp vec4 lightSpecularColor;
  highp vec4 ambientLightColor;
struct VertexOut {
  highp float fogCoordinate;
  lowp vec4 fogColor;
  lowp vec4 unlitColor;
  lowp vec4 diffuseColor;
  highp vec3 normal;
  highp vec3 position;
  highp vec2 texture2D;
  lowp float gradient;
  highp float shininess;
  highp float specularity;
  highp vec3 clipPosition;
attribute highp vec4 vertex_input_position;
attribute highp vec2 vertex_input_texture;
attribute highp vec4 vertex_input_normalAndStyleIndex;
uniform View view;
uniform Scale scale;
uniform Style style;
uniform Gradient gradient;
uniform Lighting lighting;
varying highp float v_fogCoordinate;
varying lowp vec4 v_fogColor;
varying lowp vec4 v_unlitColor;
varying lowp vec4 v_diffuseColor;
varying highp vec3 v_normal;
varying highp vec3 v_position;
varying highp vec2 v_texture;
varying lowp float v_gradient;
varying highp float v_shininess;
varying highp float v_specularity;
varying highp vec3 v_clipPosition;
void main ()
  VertexIn vertex_input_1;
  vertex_input_1.position = vertex_input_position;
  vertex_input_1.texture2D = vertex_input_texture;
  vertex_input_1.normalAndStyleIndex = vertex_input_normalAndStyleIndex;
  VertexOut outputValue_2;
  highp int tmpvar_3;
  tmpvar_3 = int((vertex_input_1.normalAndStyleIndex.w * 127.5));
  outputValue_2.normal = vertex_input_1.normalAndStyleIndex.xyz;
  highp vec4 tmpvar_4;
  tmpvar_4 = style.color[tmpvar_3];
  outputValue_2.unlitColor = tmpvar_4;
  outputValue_2.shininess = style.shininessAndSpecularity[tmpvar_3].x;
  outputValue_2.specularity = style.shininessAndSpecularity[tmpvar_3].y;
  outputValue_2.position = (scale.tileOrigin + (scale.tileSize * vertex_input_1.position.xyz));
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xy = outputValue_2.position.xy;
  tmpvar_5.z = (outputValue_2.position.z * scale.scale);
  gl_Position = (view.modelViewProjectionMatrix * tmpvar_5);
  outputValue_2.clipPosition = (gl_Position.xyz / gl_Position.www);
  highp vec3 normal_6;
  normal_6 = outputValue_2.normal;
  lowp vec3 lightContributions_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = lighting.ambientLightColor.xyz;
  lightContributions_7 = tmpvar_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = (vec3(clamp (dot (lighting.lightDirection[0].xyz, normal_6), 0.0, 1.0)) * lighting.lightColor[0].xyz);
  lightContributions_7 = (lightContributions_7 + tmpvar_9);
  highp vec3 tmpvar_10;
  tmpvar_10 = (vec3(clamp (dot (lighting.lightDirection[1].xyz, normal_6), 0.0, 1.0)) * lighting.lightColor[1].xyz);
  lightContributions_7 = (lightContributions_7 + tmpvar_10);
  highp vec3 tmpvar_11;
  tmpvar_11 = (vec3(clamp (dot (lighting.lightDirection[2].xyz, normal_6), 0.0, 1.0)) * lighting.lightColor[2].xyz);
  lightContributions_7 = (lightContributions_7 + tmpvar_11);
  lowp vec4 tmpvar_12;
  tmpvar_12.xyz = (outputValue_2.unlitColor.xyz * lightContributions_7);
  tmpvar_12.w = outputValue_2.unlitColor.w;
  outputValue_2.diffuseColor = tmpvar_12;
  highp float tmpvar_13;
  highp vec2 gradient_14;
  gradient_14 = gradient.equation[tmpvar_3];
  tmpvar_13 = ((gradient_14.x * outputValue_2.position.z) + gradient_14.y);
  outputValue_2.gradient = tmpvar_13;
  outputValue_2.texture2D = vertex_input_1.texture2D;
  v_fogCoordinate = outputValue_2.fogCoordinate;
  v_fogColor = outputValue_2.fogColor;
  v_unlitColor = outputValue_2.unlitColor;
  v_diffuseColor = outputValue_2.diffuseColor;
  v_normal = outputValue_2.normal;
  v_position = outputValue_2.position;
  v_texture = outputValue_2.texture2D;
  v_gradient = outputValue_2.gradient;
  v_shininess = outputValue_2.shininess;
  v_specularity = outputValue_2.specularity;
  v_clipPosition = outputValue_2.clipPosition;
//specularLandmark_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
struct Scale {
  highp float scale;
  highp vec3 tileOrigin;
  highp vec3 tileSize;
struct Style {
  highp vec4 color[8];
  highp vec4 alternateColor[8];
  highp vec2 shininessAndSpecularity[8];
  highp float textureCoordScale[8];
  highp float textureLightness;
  highp float brightness;
  highp vec3 cameraPositionInTileSpace;
  highp float fogFactor;
struct Lighting {
  highp vec4 lightDirection[3];
  highp vec4 lightColor[3];
  highp vec4 lightSpecularColor;
  highp vec4 ambientLightColor;
struct Fade {
  highp vec2 fadeEquation;
  highp float alphaFactor;
varying highp float v_fogCoordinate;
varying lowp vec4 v_fogColor;
varying lowp vec4 v_unlitColor;
varying lowp vec4 v_diffuseColor;
varying highp vec3 v_normal;
varying highp vec3 v_position;
varying highp vec2 v_texture;
varying lowp float v_gradient;
varying highp float v_shininess;
varying highp float v_specularity;
varying highp vec3 v_clipPosition;
uniform Scale scale;
uniform Style style;
uniform Lighting lighting;
uniform Fade fade;
uniform sampler2D textureSampler;
void main ()
  highp float tmpvar_1;
  tmpvar_1 = scale.scale;
  highp float tmpvar_2;
  tmpvar_2 = style.brightness;
  highp vec4 tmpvar_3;
  tmpvar_3 = lighting.lightDirection[0];
  highp vec2 tmpvar_4;
  tmpvar_4 = fade.fadeEquation;
  lowp float textureLightness_5;
  textureLightness_5 = style.textureLightness;
  lowp vec4 texturedColor_6;
  lowp float lowScale_7;
  lowScale_7 = tmpvar_1;
  lowp vec3 tmpvar_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = (lighting.lightSpecularColor.xyz * vec3(((v_specularity * 
    pow (max (0.0, dot (normalize(
      (v_position - style.cameraPositionInTileSpace)
    ), normalize(
      (tmpvar_3.xyz - (2.0 * (dot (v_normal, tmpvar_3.xyz) * v_normal)))
    ))), v_shininess)
  ) * (
    (v_shininess + 8.0)
   / 25.13274))));
  tmpvar_8 = tmpvar_9;
  lowp float styleBrightness_10;
  styleBrightness_10 = tmpvar_2;
  lowp vec4 tmpvar_11;
  tmpvar_11.xyz = ((v_diffuseColor.xyz + tmpvar_8) * vec3(mix (1.0, (
    min (v_gradient, 0.9799805)
   * styleBrightness_10), lowScale_7)));
  tmpvar_11.w = v_diffuseColor.w;
  lowp vec4 tmpvar_12;
  tmpvar_12 = (mix (v_unlitColor, tmpvar_11, lowScale_7) * mix (texture2D (textureSampler, v_texture), vec4(1.0, 1.0, 1.0, 1.0), textureLightness_5));
  texturedColor_6.xyz = tmpvar_12.xyz;
  lowp float tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((v_clipPosition.y * tmpvar_4.x) + tmpvar_4.y), fade.alphaFactor, 1.0);
  tmpvar_13 = tmpvar_14;
  texturedColor_6.w = (tmpvar_12.w * tmpvar_13);
  gl_FragColor = texturedColor_6;
//styleTextureRibbon_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec2 position;
  highp vec2 normal;
  highp vec2 texCoord;
  highp vec2 styleTexture;
struct View {
  highp mat4 modelViewProjectionMatrix;
  highp float tilePerPoint;
struct Style {
  highp vec4 color;
  highp vec2 halfWidthRange;
  highp float halfWidth;
  highp float imageWidth;
struct VertexOut {
  highp vec2 texCoord;
  mediump vec4 color;
attribute highp vec2 vertexInput_position;
attribute highp vec2 vertexInput_normal;
attribute highp vec2 vertexInput_texCoord;
attribute highp vec2 vertexInput_styleTexture;
uniform View view;
uniform Style style;
uniform sampler2D styleTexture;
varying highp vec2 v_texCoord;
varying mediump vec4 v_color;
void main ()
  mediump vec4 styleSample_1;
  VertexOut outputValue_2;
  VertexIn vertexInput_3;
  vertexInput_3.position = vertexInput_position;
  vertexInput_3.normal = vertexInput_normal;
  vertexInput_3.texCoord = vertexInput_texCoord;
  vertexInput_3.styleTexture = vertexInput_styleTexture;
  lowp vec4 tmpvar_4;
  highp vec2 P_5;
  P_5 = vertexInput_3.styleTexture;
  tmpvar_4 = texture2D (styleTexture, P_5);
  styleSample_1 = tmpvar_4;
  highp vec2 tmpvar_6;
  tmpvar_6.x = 1.0;
  tmpvar_6.y = vertexInput_3.styleTexture.y;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (styleTexture, tmpvar_6);
  outputValue_2.color = tmpvar_7;
  outputValue_2.texCoord = vertexInput_3.texCoord;
  highp vec4 tmpvar_8;
  tmpvar_8.zw = vec2(0.0, 1.0);
  tmpvar_8.xy = (vertexInput_3.position + ((vec2(
    (mix (style.halfWidthRange.x, style.halfWidthRange.y, styleSample_1.x) * view.tilePerPoint)
  ) * vertexInput_3.normal) * vec2(4.0, 4.0)));
  gl_Position = (view.modelViewProjectionMatrix * tmpvar_8);
  v_texCoord = outputValue_2.texCoord;
  v_color = outputValue_2.color;
//styleTextureRibbon_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
lowp vec4 impl_low_texture2DLodEXT(lowp sampler2D sampler, highp vec2 coord, mediump float lod)
#if defined(GL_EXT_shader_texture_lod)
return texture2DLodEXT(sampler, coord, lod);
#else
return texture2D(sampler, coord, lod);
#endif
struct Style {
  highp vec4 color;
  highp vec2 halfWidthRange;
  highp float halfWidth;
  highp float imageWidth;
varying highp vec2 v_texCoord;
varying mediump vec4 v_color;
uniform Style style;
uniform sampler2D alphaTexture;
void main ()
  lowp vec4 o_color_1;
  o_color_1 = v_color;
  mediump float tmpvar_2;
  highp float tmpvar_3;
  tmpvar_3 = dFdx(v_texCoord.y);
  highp float tmpvar_4;
  tmpvar_4 = dFdy(v_texCoord.y);
  highp float tmpvar_5;
  tmpvar_5 = log2(max (1.0, (style.imageWidth * 
    sqrt(((tmpvar_3 * tmpvar_3) + (tmpvar_4 * tmpvar_4)))
  )));
  tmpvar_2 = tmpvar_5;
  o_color_1.w = (o_color_1.w * impl_low_texture2DLodEXT (alphaTexture, v_texCoord, tmpvar_2).x);
  gl_FragColor = o_color_1;
//textureAlphaMask_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec2 position;
  highp vec2 texcoord;
struct View {
  highp mat4 modelViewProjectionMatrix;
struct VertexOut {
  highp vec2 texcoord;
attribute highp vec2 vertexInput_position;
attribute highp vec2 vertexInput_texcoord;
uniform View view;
varying highp vec2 v_texcoord;
void main ()
  VertexOut outputValue_1;
  VertexIn vertexInput_2;
  vertexInput_2.position = vertexInput_position;
  vertexInput_2.texcoord = vertexInput_texcoord;
  outputValue_1.texcoord = vertexInput_2.texcoord;
  highp vec4 tmpvar_3;
  tmpvar_3.zw = vec2(0.0, 1.0);
  tmpvar_3.xy = vertexInput_2.position;
  gl_Position = (view.modelViewProjectionMatrix * tmpvar_3);
  v_texcoord = outputValue_1.texcoord;
//textureAlphaMask_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
struct Style {
  highp vec4 color;
varying highp vec2 v_texcoord;
uniform Style style;
uniform sampler2D textureMap;
void main ()
  lowp vec4 color_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = style.color;
  color_1 = tmpvar_2;
  color_1.w = (color_1.w * texture2D (textureMap, v_texcoord).w);
  gl_FragColor = color_1;
//texture_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec2 position;
  highp vec2 texcoord;
struct View {
  highp mat4 modelViewProjectionMatrix;
  highp float tilePerPoint;
struct VertexOut {
  highp vec2 texcoord;
attribute highp vec2 vertexInput_position;
attribute highp vec2 vertexInput_texcoord;
uniform View view;
varying highp vec2 v_texcoord;
void main ()
  VertexOut outputValue_1;
  VertexIn vertexInput_2;
  vertexInput_2.position = vertexInput_position;
  vertexInput_2.texcoord = vertexInput_texcoord;
  outputValue_1.texcoord = vertexInput_2.texcoord;
  highp vec4 tmpvar_3;
  tmpvar_3.zw = vec2(0.0, 1.0);
  tmpvar_3.xy = vertexInput_2.position;
  gl_Position = (view.modelViewProjectionMatrix * tmpvar_3);
  v_texcoord = outputValue_1.texcoord;
//texture_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
varying highp vec2 v_texcoord;
uniform sampler2D textureMap;
void main ()
  lowp vec4 tmpvar_1;
  tmpvar_1 = texture2D (textureMap, v_texcoord);
  gl_FragColor = tmpvar_1;
//texturedInnerShadowRibbon_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec2 position;
  highp vec2 normal;
  highp vec2 texCoord;
struct View {
  highp mat4 modelViewProjectionMatrix;
  highp float tilePerPoint;
struct Style {
  highp vec4 color;
  highp vec2 offset;
  highp float halfWidth;
  highp float imageWidth;
struct Noise {
  highp vec4 offsetScale;
struct VertexOut {
  highp vec2 lineUV;
  highp vec2 tileUV;
attribute highp vec2 ribbonVertex_position;
attribute highp vec2 ribbonVertex_normal;
attribute highp vec2 ribbonVertex_texCoord;
uniform View view;
uniform Style style;
uniform Noise noise;
varying highp vec2 v_lineUV;
varying highp vec2 v_tileUV;
void main ()
  VertexOut vout_1;
  VertexIn ribbonVertex_2;
  ribbonVertex_2.position = ribbonVertex_position;
  ribbonVertex_2.normal = ribbonVertex_normal;
  ribbonVertex_2.texCoord = ribbonVertex_texCoord;
  highp vec2 tmpvar_3;
  tmpvar_3 = (ribbonVertex_2.position + ((
    (ribbonVertex_2.normal * vec2(style.halfWidth))
   * vec2(view.tilePerPoint)) * vec2(4.0, 4.0)));
  highp vec4 tmpvar_4;
  tmpvar_4.zw = vec2(0.0, 1.0);
  tmpvar_4.xy = tmpvar_3;
  highp vec4 tmpvar_5;
  tmpvar_5 = (view.modelViewProjectionMatrix * tmpvar_4);
  highp vec4 tmpvar_6;
  tmpvar_6.xy = (tmpvar_5.xy + (style.offset * tmpvar_5.ww));
  tmpvar_6.zw = tmpvar_5.zw;
  vout_1.lineUV = ribbonVertex_2.texCoord;
  vout_1.tileUV = (noise.offsetScale.xy + (noise.offsetScale.zw * tmpvar_3));
  gl_Position = tmpvar_6;
  v_lineUV = vout_1.lineUV;
  v_tileUV = vout_1.tileUV;
//texturedInnerShadowRibbon_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
lowp vec4 impl_low_texture2DLodEXT(lowp sampler2D sampler, highp vec2 coord, mediump float lod)
#if defined(GL_EXT_shader_texture_lod)
return texture2DLodEXT(sampler, coord, lod);
#else
return texture2D(sampler, coord, lod);
#endif
struct Style {
  highp vec4 color;
  highp vec2 offset;
  highp float halfWidth;
  highp float imageWidth;
struct ShadowStyle {
  highp vec2 slopeOffset;
  highp vec2 coefficents;
varying highp vec2 v_lineUV;
varying highp vec2 v_tileUV;
uniform Style style;
uniform ShadowStyle shadowStyle;
uniform sampler2D modulated;
uniform sampler2D distanceField;
uniform sampler2D alphaTexture;
void main ()
  lowp vec4 color_1;
  lowp float shadow_2;
  lowp vec2 coefficents_3;
  mediump vec2 slopeOffset_4;
  mediump float radius_5;
  mediump float tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = dFdx(v_lineUV.y);
  highp float tmpvar_8;
  tmpvar_8 = dFdy(v_lineUV.y);
  highp float tmpvar_9;
  tmpvar_9 = log2(max (1.0, (style.imageWidth * 
    sqrt(((tmpvar_7 * tmpvar_7) + (tmpvar_8 * tmpvar_8)))
  )));
  tmpvar_6 = tmpvar_9;
  lowp float tmpvar_10;
  tmpvar_10 = (1.0 - impl_low_texture2DLodEXT (distanceField, v_lineUV, tmpvar_6).x);
  radius_5 = tmpvar_10;
  highp vec2 tmpvar_11;
  tmpvar_11 = shadowStyle.slopeOffset;
  slopeOffset_4 = tmpvar_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = shadowStyle.coefficents;
  coefficents_3 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = clamp (((1.0 + 
    (slopeOffset_4.x * slopeOffset_4.y)
  ) - (radius_5 * slopeOffset_4.y)), 0.0, 1.0);
  shadow_2 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = style.color;
  color_1 = tmpvar_14;
  color_1.xyz = (color_1.xyz * (texture2D (modulated, v_tileUV).xyz * vec3(2.0, 2.0, 2.0)));
  color_1.w = (color_1.w * ((coefficents_3.x * shadow_2) + (coefficents_3.y * 
    (shadow_2 * shadow_2)
  )));
  color_1.w = (color_1.w * impl_low_texture2DLodEXT (alphaTexture, v_lineUV, tmpvar_6).x);
  gl_FragColor = color_1;
//texturedSolidRibbon_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec2 position;
  highp vec2 normal;
  highp vec2 texCoord;
struct View {
  highp mat4 modelViewProjectionMatrix;
  highp float tilePerPoint;
struct Style {
  highp vec4 color;
  highp vec2 offset;
  highp float halfWidth;
  highp float imageWidth;
struct Noise {
  highp vec4 offsetScale;
struct VertexOut {
  highp vec2 lineUV;
  highp vec2 tileUV;
attribute highp vec2 ribbonVertex_position;
attribute highp vec2 ribbonVertex_normal;
attribute highp vec2 ribbonVertex_texCoord;
uniform View view;
uniform Style style;
uniform Noise noise;
varying highp vec2 v_lineUV;
varying highp vec2 v_tileUV;
void main ()
  VertexOut vout_1;
  VertexIn ribbonVertex_2;
  ribbonVertex_2.position = ribbonVertex_position;
  ribbonVertex_2.normal = ribbonVertex_normal;
  ribbonVertex_2.texCoord = ribbonVertex_texCoord;
  highp vec2 tmpvar_3;
  tmpvar_3 = (ribbonVertex_2.position + ((
    (ribbonVertex_2.normal * vec2(style.halfWidth))
   * vec2(view.tilePerPoint)) * vec2(4.0, 4.0)));
  highp vec4 tmpvar_4;
  tmpvar_4.zw = vec2(0.0, 1.0);
  tmpvar_4.xy = tmpvar_3;
  highp vec4 tmpvar_5;
  tmpvar_5 = (view.modelViewProjectionMatrix * tmpvar_4);
  highp vec4 tmpvar_6;
  tmpvar_6.xy = (tmpvar_5.xy + (style.offset * tmpvar_5.ww));
  tmpvar_6.zw = tmpvar_5.zw;
  vout_1.lineUV = ribbonVertex_2.texCoord;
  vout_1.tileUV = (noise.offsetScale.xy + (noise.offsetScale.zw * tmpvar_3));
  gl_Position = tmpvar_6;
  v_lineUV = vout_1.lineUV;
  v_tileUV = vout_1.tileUV;
//texturedSolidRibbon_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
lowp vec4 impl_low_texture2DLodEXT(lowp sampler2D sampler, highp vec2 coord, mediump float lod)
#if defined(GL_EXT_shader_texture_lod)
return texture2DLodEXT(sampler, coord, lod);
#else
return texture2D(sampler, coord, lod);
#endif
struct Style {
  highp vec4 color;
  highp vec2 offset;
  highp float halfWidth;
  highp float imageWidth;
varying highp vec2 v_lineUV;
varying highp vec2 v_tileUV;
uniform Style style;
uniform sampler2D alphaTexture;
uniform sampler2D modulated;
void main ()
  lowp vec4 color_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = style.color;
  color_1 = tmpvar_2;
  mediump float tmpvar_3;
  highp float tmpvar_4;
  tmpvar_4 = dFdx(v_lineUV.y);
  highp float tmpvar_5;
  tmpvar_5 = dFdy(v_lineUV.y);
  highp float tmpvar_6;
  tmpvar_6 = log2(max (1.0, (style.imageWidth * 
    sqrt(((tmpvar_4 * tmpvar_4) + (tmpvar_5 * tmpvar_5)))
  )));
  tmpvar_3 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7.xyz = ((texture2D (modulated, v_tileUV).xxx * vec3(2.0, 2.0, 2.0)) * color_1.xyz);
  tmpvar_7.w = (color_1.w * impl_low_texture2DLodEXT (alphaTexture, v_lineUV, tmpvar_3).x);
  gl_FragColor = tmpvar_7;
//textureWithBrightness_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec2 position;
  highp vec2 texcoord;
struct View {
  highp mat4 modelViewProjectionMatrix;
struct VertexOut {
  highp vec2 texcoord;
attribute highp vec2 vertexInput_position;
attribute highp vec2 vertexInput_texcoord;
uniform View view;
varying highp vec2 v_texcoord;
void main ()
  VertexOut outputValue_1;
  VertexIn vertexInput_2;
  vertexInput_2.position = vertexInput_position;
  vertexInput_2.texcoord = vertexInput_texcoord;
  outputValue_1.texcoord = vertexInput_2.texcoord;
  highp vec4 tmpvar_3;
  tmpvar_3.zw = vec2(0.0, 1.0);
  tmpvar_3.xy = vertexInput_2.position;
  gl_Position = (view.modelViewProjectionMatrix * tmpvar_3);
  v_texcoord = outputValue_1.texcoord;
//textureWithBrightness_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
struct Style {
  highp float brightness;
varying highp vec2 v_texcoord;
uniform Style style;
uniform sampler2D textureMap;
void main ()
  lowp vec4 color_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (textureMap, v_texcoord);
  color_1.w = tmpvar_2.w;
  highp vec3 tmpvar_3;
  tmpvar_3 = vec3(style.brightness);
  color_1.xyz = (tmpvar_2.xyz * tmpvar_3);
  gl_FragColor = color_1;
//textureWithReverseAlpha_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec2 position;
  highp vec2 texcoord;
struct View {
  highp mat4 modelViewProjectionMatrix;
  highp float tilePerPoint;
struct VertexOut {
  highp vec2 texcoord;
attribute highp vec2 vertexInput_position;
attribute highp vec2 vertexInput_texcoord;
uniform View view;
varying highp vec2 v_texcoord;
void main ()
  VertexOut outputValue_1;
  VertexIn vertexInput_2;
  vertexInput_2.position = vertexInput_position;
  vertexInput_2.texcoord = vertexInput_texcoord;
  outputValue_1.texcoord = vertexInput_2.texcoord;
  highp vec4 tmpvar_3;
  tmpvar_3.zw = vec2(0.0, 1.0);
  tmpvar_3.xy = vertexInput_2.position;
  gl_Position = (view.modelViewProjectionMatrix * tmpvar_3);
  v_texcoord = outputValue_1.texcoord;
//textureWithReverseAlpha_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
struct ReverseAlpha {
  highp float alpha;
varying highp vec2 v_texcoord;
uniform ReverseAlpha reverseAlpha;
uniform sampler2D textureMap;
void main ()
  mediump vec4 colorTexture_1;
  lowp vec4 last_2;
  mediump vec4 tmpvar_3;
  tmpvar_3 = gl_LastFragData[0];
  last_2 = tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (textureMap, v_texcoord);
  colorTexture_1 = tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = mix (colorTexture_1.xyz, last_2.xyz, (last_2.w * reverseAlpha.alpha));
  gl_FragColor = tmpvar_5;
//trafficCasing_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec2 position;
  highp vec2 normal;
  highp vec2 texCoord;
  highp vec2 texCoord2;
struct View {
  highp mat4 modelViewProjectionMatrix;
  highp float tilePerPoint;
struct Style {
  highp vec4 color;
  highp vec2 offset;
  highp float halfWidth;
  highp float strokeWidthRatio;
  highp float streamTextureDeltaV;
  highp float pitchRatio;
  highp vec4 trafficColors[5];
struct VertexOut {
  highp vec2 texCoord;
  highp vec2 streamCoords;
attribute highp vec2 vertexInput_position;
attribute highp vec2 vertexInput_normal;
attribute highp vec2 vertexInput_texCoord;
attribute highp vec2 vertexInput_texCoord2;
uniform View view;
uniform Style style;
varying highp vec2 v_texCoord;
varying highp vec2 v_streamCoords;
void main ()
  VertexOut outputValue_1;
  VertexIn vertexInput_2;
  vertexInput_2.position = vertexInput_position;
  vertexInput_2.normal = vertexInput_normal;
  vertexInput_2.texCoord = vertexInput_texCoord;
  vertexInput_2.texCoord2 = vertexInput_texCoord2;
  outputValue_1.texCoord = vertexInput_2.texCoord;
  highp vec2 tmpvar_3;
  tmpvar_3.x = vertexInput_2.texCoord2.x;
  tmpvar_3.y = (vertexInput_2.texCoord2.y + (float(
    (vertexInput_2.texCoord.y >= 0.0)
  ) * style.streamTextureDeltaV));
  outputValue_1.streamCoords = tmpvar_3;
  highp vec4 pos_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.zw = vec2(0.0, 1.0);
  tmpvar_6.xy = (vertexInput_2.position + ((
    (vertexInput_2.normal * vec2(style.halfWidth))
   * vec2(view.tilePerPoint)) * vec2((4.0 * 
    (1.0 - abs(vertexInput_2.texCoord.x))
  ))));
  tmpvar_5 = (view.modelViewProjectionMatrix * tmpvar_6);
  pos_4.zw = tmpvar_5.zw;
  pos_4.xy = (tmpvar_5.xy + (style.offset * tmpvar_5.ww));
  gl_Position = pos_4;
  v_texCoord = outputValue_1.texCoord;
  v_streamCoords = outputValue_1.streamCoords;
//trafficCasing_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
struct Style {
  highp vec4 color;
  highp vec2 offset;
  highp float halfWidth;
  highp float strokeWidthRatio;
  highp float streamTextureDeltaV;
  highp float pitchRatio;
  highp vec4 trafficColors[5];
varying highp vec2 v_texCoord;
varying highp vec2 v_streamCoords;
uniform Style style;
uniform sampler2D alphaTexture;
uniform sampler2D trafficTexture;
void main ()
  lowp float trafficMask_1;
  lowp vec4 trafficCol_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (trafficTexture, v_streamCoords);
  highp int tmpvar_4;
  mediump float x_5;
  x_5 = tmpvar_3.x;
  tmpvar_4 = int((255.0 * x_5));
  highp vec4 tmpvar_6;
  tmpvar_6 = style.trafficColors[tmpvar_4];
  trafficCol_2 = tmpvar_6;
  trafficMask_1 = (float((trafficCol_2.w >= 0.5)) * (1.0 - gl_LastFragData[0].w));
  lowp vec4 tmpvar_7;
  tmpvar_7.xyz = trafficCol_2.xyz;
  tmpvar_7.w = (texture2D (alphaTexture, v_texCoord).x * trafficMask_1);
  gl_FragColor = tmpvar_7;
//trafficGlow_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec2 position;
  highp vec2 normal;
  highp vec2 texCoord;
  highp float uniDirectional;
  highp vec2 shiftDir;
struct View {
  highp mat4 modelViewProjectionMatrix;
  highp float tilePerPoint;
struct Style {
  highp float halfWidth;
  highp vec4 color;
  highp float pitchRatio;
  highp float zoomDependentShift;
  highp float drivingDirection;
  highp float sideOffset;
  highp float alphaFadeParam;
struct VertexOut {
  highp vec2 texCoord;
attribute highp vec2 vertexInput_position;
attribute highp vec2 vertexInput_normal;
attribute highp vec2 vertexInput_texCoord;
attribute highp float vertexInput_uniDirectional;
attribute highp vec2 vertexInput_shiftDir;
uniform View view;
uniform Style style;
varying highp vec2 v_texCoord;
void main ()
  VertexOut outputValue_1;
  VertexIn vertexInput_2;
  vertexInput_2.position = vertexInput_position;
  vertexInput_2.normal = vertexInput_normal;
  vertexInput_2.texCoord = vertexInput_texCoord;
  vertexInput_2.uniDirectional = vertexInput_uniDirectional;
  vertexInput_2.shiftDir = vertexInput_shiftDir;
  outputValue_1.texCoord = vertexInput_2.texCoord;
  highp vec4 tmpvar_3;
  tmpvar_3.zw = vec2(0.0, 1.0);
  tmpvar_3.xy = ((vertexInput_2.position + (vec2(
    (style.halfWidth * view.tilePerPoint)
  ) * 
    (vertexInput_2.normal * vec2(4.0, 4.0))
  )) + (vec2((
    ((style.drivingDirection * (1.0 - (style.zoomDependentShift * vertexInput_2.uniDirectional))) * style.sideOffset)
   * view.tilePerPoint)) * (vertexInput_2.shiftDir * vec2(4.0, 4.0))));
  gl_Position = (view.modelViewProjectionMatrix * tmpvar_3);
  v_texCoord = outputValue_1.texCoord;
//trafficGlow_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
struct Style {
  highp float halfWidth;
  highp vec4 color;
  highp float pitchRatio;
  highp float zoomDependentShift;
  highp float drivingDirection;
  highp float sideOffset;
  highp float alphaFadeParam;
varying highp vec2 v_texCoord;
uniform Style style;
void main ()
  lowp vec4 o_color_1;
  lowp float alpha_2;
  lowp float dist_3;
  lowp vec4 dst_4;
  mediump vec4 tmpvar_5;
  tmpvar_5 = gl_LastFragData[0];
  dst_4 = tmpvar_5;
  highp float tmpvar_6;
  tmpvar_6 = sqrt(dot (v_texCoord, v_texCoord));
  dist_3 = tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = clamp (((1.0 - dist_3) * style.alphaFadeParam), 0.0, 1.0);
  alpha_2 = tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = style.color;
  o_color_1 = tmpvar_8;
  o_color_1.w = (o_color_1.w * alpha_2);
  o_color_1.xyz = mix (dst_4.xyz, o_color_1.xyz, o_color_1.w);
  o_color_1.w = (((1.0 - dst_4.w) * o_color_1.w) + dst_4.w);
  gl_FragColor = o_color_1;
//patternedTransitLine_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec2 position;
  highp vec2 normal;
  highp vec2 texCoord;
  highp vec2 styleTextureCoord;
  highp float normalOffsetMixFactor;
  highp float distance;
struct View {
  highp mat4 modelViewProjectionMatrix;
  highp float tilePerPoint;
struct Style {
  highp vec2 halfWidthRange;
  highp vec2 normalOffsetRange;
  highp float imageWidth;
  highp float styleTextureColorPixelOffset;
struct PatternStyle {
  highp vec4 color;
  highp float halfWidth;
  highp float distanceMultiplier;
struct PatternedVertexOut {
  highp vec2 patternTextureCoord;
  highp vec2 alphaTextureCoord;
  mediump vec4 color;
attribute highp vec2 vertexInput_position;
attribute highp vec2 vertexInput_normal;
attribute highp vec2 vertexInput_texCoord;
attribute highp vec2 vertexInput_styleTextureCoord;
attribute highp float vertexInput_normalOffsetMixFactor;
attribute highp float vertexInput_distance;
uniform View view;
uniform Style style;
uniform PatternStyle patternStyle;
uniform sampler2D styleTexture;
varying highp vec2 v_patternTextureCoord;
varying highp vec2 v_alphaTextureCoord;
varying mediump vec4 v_color;
void main ()
  mediump vec4 styleValue_1;
  PatternedVertexOut outputValue_2;
  VertexIn vertexInput_3;
  vertexInput_3.position = vertexInput_position;
  vertexInput_3.normal = vertexInput_normal;
  vertexInput_3.texCoord = vertexInput_texCoord;
  vertexInput_3.styleTextureCoord = vertexInput_styleTextureCoord;
  vertexInput_3.normalOffsetMixFactor = vertexInput_normalOffsetMixFactor;
  vertexInput_3.distance = vertexInput_distance;
  highp vec4 tmpvar_4;
  tmpvar_4 = patternStyle.color;
  outputValue_2.color = tmpvar_4;
  highp vec2 tmpvar_5;
  tmpvar_5.x = 0.5;
  tmpvar_5.y = (vertexInput_3.distance * patternStyle.distanceMultiplier);
  outputValue_2.patternTextureCoord = tmpvar_5;
  outputValue_2.alphaTextureCoord = vertexInput_3.texCoord;
  lowp vec4 tmpvar_6;
  highp vec2 P_7;
  P_7 = vertexInput_3.styleTextureCoord;
  tmpvar_6 = texture2D (styleTexture, P_7);
  styleValue_1 = tmpvar_6;
  highp vec4 tmpvar_8;
  tmpvar_8.zw = vec2(0.0, 1.0);
  tmpvar_8.xy = (vertexInput_3.position + ((vec2(
    ((patternStyle.halfWidth + (mix (
      mix (mix (style.normalOffsetRange.x, style.normalOffsetRange.y, styleValue_1.y), mix (style.normalOffsetRange.x, style.normalOffsetRange.y, styleValue_1.w), min (max (vertexInput_3.normalOffsetMixFactor, 0.0), 1.0))
    , 
      mix (style.normalOffsetRange.x, style.normalOffsetRange.y, styleValue_1.z)
    , 
      max (0.0, (abs(vertexInput_3.normalOffsetMixFactor) - 1.0))
    ) * vertexInput_3.texCoord.y)) * view.tilePerPoint)
  ) * vertexInput_3.normal) * vec2(4.0, 4.0)));
  gl_Position = (view.modelViewProjectionMatrix * tmpvar_8);
  v_patternTextureCoord = outputValue_2.patternTextureCoord;
  v_alphaTextureCoord = outputValue_2.alphaTextureCoord;
  v_color = outputValue_2.color;
//patternedTransitLine_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
lowp vec4 impl_low_texture2DLodEXT(lowp sampler2D sampler, highp vec2 coord, mediump float lod)
#if defined(GL_EXT_shader_texture_lod)
return texture2DLodEXT(sampler, coord, lod);
#else
return texture2D(sampler, coord, lod);
#endif
struct Style {
  highp vec2 halfWidthRange;
  highp vec2 normalOffsetRange;
  highp float imageWidth;
  highp float styleTextureColorPixelOffset;
varying highp vec2 v_patternTextureCoord;
varying highp vec2 v_alphaTextureCoord;
varying mediump vec4 v_color;
uniform Style style;
uniform sampler2D alphaTexture;
uniform sampler2D patternTexture;
void main ()
  lowp vec4 o_color_1;
  mediump float alpha_2;
  mediump float tmpvar_3;
  highp float tmpvar_4;
  tmpvar_4 = dFdx(v_alphaTextureCoord.y);
  highp float tmpvar_5;
  tmpvar_5 = dFdy(v_alphaTextureCoord.y);
  highp float tmpvar_6;
  tmpvar_6 = log2(max (1.0, (style.imageWidth * 
    sqrt(((tmpvar_4 * tmpvar_4) + (tmpvar_5 * tmpvar_5)))
  )));
  tmpvar_3 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = impl_low_texture2DLodEXT (alphaTexture, v_alphaTextureCoord, tmpvar_3).x;
  alpha_2 = tmpvar_7;
  highp vec2 tmpvar_8;
  tmpvar_8.x = v_patternTextureCoord.x;
  tmpvar_8.y = fract(v_patternTextureCoord.y);
  o_color_1 = v_color;
  o_color_1.w = (o_color_1.w * ((1.0 - texture2D (patternTexture, tmpvar_8).x) * alpha_2));
  gl_FragColor = o_color_1;
//transitLine_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec2 position;
  highp vec2 normal;
  highp vec2 texCoord;
  highp vec2 styleTextureCoord;
  highp float normalOffsetMixFactor;
  highp float distance;
struct View {
  highp mat4 modelViewProjectionMatrix;
  highp float tilePerPoint;
struct Style {
  highp vec2 halfWidthRange;
  highp vec2 normalOffsetRange;
  highp float imageWidth;
  highp float styleTextureColorPixelOffset;
struct VertexOut {
  highp vec2 alphaTextureCoord;
  mediump vec4 color;
attribute highp vec2 vertexInput_position;
attribute highp vec2 vertexInput_normal;
attribute highp vec2 vertexInput_texCoord;
attribute highp vec2 vertexInput_styleTextureCoord;
attribute highp float vertexInput_normalOffsetMixFactor;
attribute highp float vertexInput_distance;
uniform View view;
uniform Style style;
uniform sampler2D styleTexture;
varying highp vec2 v_alphaTextureCoord;
varying mediump vec4 v_color;
void main ()
  mediump vec4 styleValue_1;
  VertexOut outputValue_2;
  VertexIn vertexInput_3;
  vertexInput_3.position = vertexInput_position;
  vertexInput_3.normal = vertexInput_normal;
  vertexInput_3.texCoord = vertexInput_texCoord;
  vertexInput_3.styleTextureCoord = vertexInput_styleTextureCoord;
  vertexInput_3.normalOffsetMixFactor = vertexInput_normalOffsetMixFactor;
  vertexInput_3.distance = vertexInput_distance;
  highp vec2 tmpvar_4;
  tmpvar_4.x = (vertexInput_3.styleTextureCoord.x + style.styleTextureColorPixelOffset);
  tmpvar_4.y = vertexInput_3.styleTextureCoord.y;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (styleTexture, tmpvar_4);
  outputValue_2.color = tmpvar_5;
  outputValue_2.alphaTextureCoord = vertexInput_3.texCoord;
  lowp vec4 tmpvar_6;
  highp vec2 P_7;
  P_7 = vertexInput_3.styleTextureCoord;
  tmpvar_6 = texture2D (styleTexture, P_7);
  styleValue_1 = tmpvar_6;
  highp vec4 tmpvar_8;
  tmpvar_8.zw = vec2(0.0, 1.0);
  tmpvar_8.xy = (vertexInput_3.position + ((vec2(
    ((mix (style.halfWidthRange.x, style.halfWidthRange.y, styleValue_1.x) + (mix (
      mix (mix (style.normalOffsetRange.x, style.normalOffsetRange.y, styleValue_1.y), mix (style.normalOffsetRange.x, style.normalOffsetRange.y, styleValue_1.w), min (max (vertexInput_3.normalOffsetMixFactor, 0.0), 1.0))
    , 
      mix (style.normalOffsetRange.x, style.normalOffsetRange.y, styleValue_1.z)
    , 
      max (0.0, (abs(vertexInput_3.normalOffsetMixFactor) - 1.0))
    ) * vertexInput_3.texCoord.y)) * view.tilePerPoint)
  ) * vertexInput_3.normal) * vec2(4.0, 4.0)));
  gl_Position = (view.modelViewProjectionMatrix * tmpvar_8);
  v_alphaTextureCoord = outputValue_2.alphaTextureCoord;
  v_color = outputValue_2.color;
//transitLine_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
lowp vec4 impl_low_texture2DLodEXT(lowp sampler2D sampler, highp vec2 coord, mediump float lod)
#if defined(GL_EXT_shader_texture_lod)
return texture2DLodEXT(sampler, coord, lod);
#else
return texture2D(sampler, coord, lod);
#endif
struct Style {
  highp vec2 halfWidthRange;
  highp vec2 normalOffsetRange;
  highp float imageWidth;
  highp float styleTextureColorPixelOffset;
varying highp vec2 v_alphaTextureCoord;
varying mediump vec4 v_color;
uniform Style style;
uniform sampler2D alphaTexture;
void main ()
  lowp vec4 o_color_1;
  o_color_1 = v_color;
  mediump float tmpvar_2;
  highp float tmpvar_3;
  tmpvar_3 = dFdx(v_alphaTextureCoord.y);
  highp float tmpvar_4;
  tmpvar_4 = dFdy(v_alphaTextureCoord.y);
  highp float tmpvar_5;
  tmpvar_5 = log2(max (1.0, (style.imageWidth * 
    sqrt(((tmpvar_3 * tmpvar_3) + (tmpvar_4 * tmpvar_4)))
  )));
  tmpvar_2 = tmpvar_5;
  o_color_1.w = (o_color_1.w * impl_low_texture2DLodEXT (alphaTexture, v_alphaTextureCoord, tmpvar_2).x);
  gl_FragColor = o_color_1;
//transitNodeColorized_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec2 position;
  highp vec4 color;
  highp vec2 texcoord;
  highp vec2 brightness;
struct Settings {
  highp vec2 atlasSize;
  highp vec2 halfScreenSize;
struct VertexOut {
  highp vec2 texcoord;
  lowp vec4 color;
  mediump float brightness;
attribute highp vec2 vertexInput_position;
attribute highp vec4 vertexInput_color;
attribute highp vec2 vertexInput_texcoord;
attribute highp vec2 vertexInput_brightness;
uniform Settings settings;
varying highp vec2 v_texcoord;
varying lowp vec4 v_color;
varying mediump float v_brightness;
void main ()
  VertexOut outputValue_1;
  VertexIn vertexInput_2;
  vertexInput_2.position = vertexInput_position;
  vertexInput_2.color = vertexInput_color;
  vertexInput_2.texcoord = vertexInput_texcoord;
  vertexInput_2.brightness = vertexInput_brightness;
  highp vec4 tmpvar_3;
  tmpvar_3 = vertexInput_2.color;
  outputValue_1.color = tmpvar_3;
  outputValue_1.brightness = (vertexInput_2.brightness.x * 2.55);
  outputValue_1.texcoord = (vertexInput_2.texcoord / settings.atlasSize);
  highp vec4 tmpvar_4;
  tmpvar_4.zw = vec2(0.0, 1.0);
  tmpvar_4.xy = ((vertexInput_2.position / settings.halfScreenSize) - vec2(1.0, 1.0));
  gl_Position = tmpvar_4;
  v_texcoord = outputValue_1.texcoord;
  v_color = outputValue_1.color;
  v_brightness = outputValue_1.brightness;
//transitNodeColorized_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
varying highp vec2 v_texcoord;
varying lowp vec4 v_color;
varying mediump float v_brightness;
uniform sampler2D textureMap;
void main ()
  lowp vec3 rgb_1;
  mediump float brightness_2;
  lowp float alpha_3;
  mediump vec4 tex_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (textureMap, v_texcoord);
  tex_4 = tmpvar_5;
  mediump float tmpvar_6;
  tmpvar_6 = (v_color.w * tex_4.w);
  alpha_3 = tmpvar_6;
  mediump float tmpvar_7;
  tmpvar_7 = (tex_4.x + tex_4.y);
  brightness_2 = (tmpvar_7 + ((
    max (0.0, (v_brightness - 1.0))
   * 
    max (0.0, (2.0 - tmpvar_7))
  ) - (
    max (0.0, (1.0 - v_brightness))
   * tmpvar_7)));
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix ((v_color.xyz * vec3((1.0 - 
    max (0.0, (1.0 - brightness_2))
  ))), vec3(1.0, 1.0, 1.0), max (0.0, (brightness_2 - 1.0)));
  rgb_1 = tmpvar_8;
  lowp vec4 tmpvar_9;
  tmpvar_9.xyz = (rgb_1 * vec3(alpha_3));
  tmpvar_9.w = alpha_3;
  gl_FragColor = tmpvar_9;
//transitNodeRGB_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec2 position;
  highp vec4 color;
  highp vec2 texcoord;
  highp vec2 brightness;
struct Settings {
  highp vec2 atlasSize;
  highp vec2 halfScreenSize;
struct VertexOut {
  highp vec2 texcoord;
  lowp float alpha;
  mediump float brightness;
attribute highp vec2 vertexInput_position;
attribute highp vec4 vertexInput_color;
attribute highp vec2 vertexInput_texcoord;
attribute highp vec2 vertexInput_brightness;
uniform Settings settings;
varying highp vec2 v_texcoord;
varying lowp float v_alpha;
varying mediump float v_brightness;
void main ()
  VertexOut outputValue_1;
  VertexIn vertexInput_2;
  vertexInput_2.position = vertexInput_position;
  vertexInput_2.color = vertexInput_color;
  vertexInput_2.texcoord = vertexInput_texcoord;
  vertexInput_2.brightness = vertexInput_brightness;
  outputValue_1.alpha = vertexInput_2.color.w;
  outputValue_1.brightness = (vertexInput_2.brightness.x * 2.55);
  outputValue_1.texcoord = (vertexInput_2.texcoord / settings.atlasSize);
  highp vec4 tmpvar_3;
  tmpvar_3.zw = vec2(0.0, 1.0);
  tmpvar_3.xy = ((vertexInput_2.position / settings.halfScreenSize) - vec2(1.0, 1.0));
  gl_Position = tmpvar_3;
  v_texcoord = outputValue_1.texcoord;
  v_alpha = outputValue_1.alpha;
  v_brightness = outputValue_1.brightness;
//transitNodeRGB_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
varying highp vec2 v_texcoord;
varying lowp float v_alpha;
varying mediump float v_brightness;
uniform sampler2D textureMap;
void main ()
  mediump vec4 tex0_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (textureMap, v_texcoord);
  tex0_1 = tmpvar_2;
  tex0_1.xyz = mix ((tex0_1.xyz * vec3((1.0 - 
    max (0.0, (1.0 - v_brightness))
  ))), tex0_1.www, max (0.0, (v_brightness - 1.0)));
  gl_FragColor = (tex0_1 * vec4(v_alpha));
//venueWall_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec2 position;
  highp vec2 styleIndices;
  highp vec2 quadSpaceCoordAndXTexCoord;
  highp vec4 tangents;
struct View {
  highp mat4 modelViewProjectionMatrix;
  highp float tilePerPoint;
struct Lighting {
  highp vec4 lightDirection[3];
  highp vec4 lightColor[3];
  highp vec4 lightSpecularColor;
  highp vec4 ambientLightColor;
struct Gradient {
  highp vec2 equation[8];
struct Wall {
  highp vec4 color[16];
  highp float width[16];
  highp float baseHeight[16];
  highp float height[16];
  highp float normalMultiplier;
  highp float textureScale;
  highp float maximumTexCoord;
struct VertexOut {
  highp vec4 color;
  highp vec2 texCoord;
  lowp float gradient;
attribute highp vec2 vertexAttributes_position;
attribute highp vec2 vertexAttributes_styleIndices;
attribute highp vec2 vertexAttributes_quadSpaceCoordAndXTexCoord;
attribute highp vec4 vertexAttributes_tangents;
uniform View view;
uniform Lighting lighting;
uniform Gradient gradient;
uniform Wall wall;
varying highp vec4 v_color;
varying highp vec2 v_texCoord;
varying lowp float v_gradient;
void main ()
  VertexOut outputValue_1;
  VertexIn vertexAttributes_2;
  vertexAttributes_2.position = vertexAttributes_position;
  vertexAttributes_2.styleIndices = vertexAttributes_styleIndices;
  vertexAttributes_2.quadSpaceCoordAndXTexCoord = vertexAttributes_quadSpaceCoordAndXTexCoord;
  vertexAttributes_2.tangents = vertexAttributes_tangents;
  highp vec4 tmpvar_3;
  tmpvar_3.zw = vec2(0.0, 1.0);
  tmpvar_3.xy = vertexAttributes_2.position;
  highp int tmpvar_4;
  tmpvar_4 = int((65535.0 * vertexAttributes_2.styleIndices.x));
  highp int tmpvar_5;
  tmpvar_5 = int((65535.0 * vertexAttributes_2.styleIndices.y));
  highp vec2 tmpvar_6;
  tmpvar_6 = vertexAttributes_2.tangents.xy;
  highp vec2 tmpvar_7;
  tmpvar_7 = vertexAttributes_2.tangents.zw;
  highp vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_6.y;
  tmpvar_8.y = -(tmpvar_6.x);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_7.y;
  tmpvar_9.y = -(tmpvar_7.x);
  highp int tmpvar_10;
  tmpvar_10 = int((65535.0 * vertexAttributes_2.quadSpaceCoordAndXTexCoord.x));
  highp int tmpvar_11;
  tmpvar_11 = (tmpvar_10 / 256);
  highp float tmpvar_12;
  tmpvar_12 = (float(tmpvar_11) / 255.0);
  highp float tmpvar_13;
  tmpvar_13 = (float((tmpvar_10 - tmpvar_11)) / 255.0);
  highp float tmpvar_14;
  if ((tmpvar_13 > 0.5)) {
    tmpvar_14 = wall.height[tmpvar_4];
  } else {
    tmpvar_14 = wall.baseHeight[tmpvar_4];
  };
  highp float tmpvar_15;
  tmpvar_15 = wall.width[tmpvar_4];
  highp float tmpvar_16;
  tmpvar_16 = wall.width[tmpvar_5];
  highp float factor_17;
  factor_17 = 0.0;
  highp float tmpvar_18;
  tmpvar_18 = ((tmpvar_6.x * tmpvar_7.y) - (tmpvar_6.y * tmpvar_7.x));
  highp float tmpvar_19;
  tmpvar_19 = dot (tmpvar_7, tmpvar_7);
  highp float tmpvar_20;
  tmpvar_20 = float((dot (tmpvar_6, tmpvar_6) >= 0.08));
  highp float tmpvar_21;
  tmpvar_21 = float((tmpvar_19 >= 0.08));
  highp float tmpvar_22;
  tmpvar_22 = float((abs(tmpvar_18) >= 0.08));
  if ((((tmpvar_20 * tmpvar_21) * tmpvar_22) > 0.0)) {
    factor_17 = (((tmpvar_16 * tmpvar_19) - (tmpvar_15 * 
      dot (tmpvar_6, tmpvar_7)
    )) * (1.0/(tmpvar_18)));
    highp float tmpvar_23;
    tmpvar_23 = (abs(tmpvar_15) * 2.0);
    factor_17 = clamp (factor_17, -(tmpvar_23), tmpvar_23);
  };
  highp vec4 tmpvar_24;
  tmpvar_24.zw = vec2(0.0, 0.0);
  tmpvar_24.xy = ((tmpvar_8 * vec2(tmpvar_15)) + (tmpvar_6 * vec2(factor_17)));
  highp vec4 tmpvar_25;
  tmpvar_25.w = 0.0;
  tmpvar_25.xy = -(tmpvar_24.xy);
  tmpvar_25.z = tmpvar_14;
  highp vec4 tmpvar_26;
  tmpvar_26 = (tmpvar_3 + tmpvar_25);
  gl_Position = (view.modelViewProjectionMatrix * tmpvar_26);
  highp float tmpvar_27;
  highp vec2 gradient_28;
  gradient_28 = gradient.equation[tmpvar_4];
  tmpvar_27 = ((gradient_28.x * tmpvar_26.z) + gradient_28.y);
  outputValue_1.gradient = tmpvar_27;
  highp vec4 tmpvar_29;
  tmpvar_29 = wall.color[tmpvar_5];
  highp vec2 tmpvar_30;
  if ((tmpvar_12 > 0.5)) {
    tmpvar_30 = tmpvar_9;
  } else {
    tmpvar_30 = tmpvar_8;
  };
  highp vec3 tmpvar_31;
  tmpvar_31.z = 0.0;
  tmpvar_31.xy = (tmpvar_30 * vec2(wall.normalMultiplier));
  lowp vec3 lightContributions_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = lighting.ambientLightColor.xyz;
  lightContributions_32 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = (vec3(clamp (dot (lighting.lightDirection[0].xyz, tmpvar_31), 0.0, 1.0)) * lighting.lightColor[0].xyz);
  lightContributions_32 = (lightContributions_32 + tmpvar_34);
  highp vec3 tmpvar_35;
  tmpvar_35 = (vec3(clamp (dot (lighting.lightDirection[1].xyz, tmpvar_31), 0.0, 1.0)) * lighting.lightColor[1].xyz);
  lightContributions_32 = (lightContributions_32 + tmpvar_35);
  highp vec3 tmpvar_36;
  tmpvar_36 = (vec3(clamp (dot (lighting.lightDirection[2].xyz, tmpvar_31), 0.0, 1.0)) * lighting.lightColor[2].xyz);
  lightContributions_32 = (lightContributions_32 + tmpvar_36);
  highp vec4 tmpvar_37;
  tmpvar_37.xyz = (tmpvar_29.xyz * lightContributions_32);
  tmpvar_37.w = tmpvar_29.w;
  outputValue_1.color = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38.x = (vertexAttributes_2.quadSpaceCoordAndXTexCoord.y * wall.maximumTexCoord);
  tmpvar_38.y = tmpvar_14;
  outputValue_1.texCoord = (tmpvar_38 * vec2(wall.textureScale));
  v_color = outputValue_1.color;
  v_texCoord = outputValue_1.texCoord;
  v_gradient = outputValue_1.gradient;
//venueWall_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
varying highp vec4 v_color;
varying highp vec2 v_texCoord;
varying lowp float v_gradient;
uniform sampler2D textureSampler;
void main ()
  lowp float tmpvar_1;
  tmpvar_1 = min (v_gradient, 0.9799805);
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (textureSampler, v_texCoord);
  gl_FragColor = ((vec4(tmpvar_1) * v_color) * tmpvar_2);
//venueWallEndCap_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct EndCapVertexIn {
  highp vec2 position;
  highp vec2 styleIndices;
  highp vec2 quadSpaceCoord;
  highp vec4 tangents;
struct View {
  highp mat4 modelViewProjectionMatrix;
  highp float tilePerPoint;
struct Lighting {
  highp vec4 lightDirection[3];
  highp vec4 lightColor[3];
  highp vec4 lightSpecularColor;
  highp vec4 ambientLightColor;
struct Gradient {
  highp vec2 equation[8];
struct WallEndCap {
  highp vec4 color[16];
  highp float innerOffset[16];
  highp float outerOffset[16];
  highp float baseHeight[16];
  highp float height[16];
struct VertexOut {
  highp vec4 color;
  highp vec2 texCoord;
  lowp float gradient;
attribute highp vec2 vertexAttributes_position;
attribute highp vec2 vertexAttributes_styleIndices;
attribute highp vec2 vertexAttributes_quadSpaceCoord;
attribute highp vec4 vertexAttributes_tangents;
uniform View view;
uniform Lighting lighting;
uniform Gradient gradient;
uniform WallEndCap wall;
varying highp vec4 v_color;
varying highp vec2 v_texCoord;
varying lowp float v_gradient;
void main ()
  VertexOut outputValue_1;
  EndCapVertexIn vertexAttributes_2;
  vertexAttributes_2.position = vertexAttributes_position;
  vertexAttributes_2.styleIndices = vertexAttributes_styleIndices;
  vertexAttributes_2.quadSpaceCoord = vertexAttributes_quadSpaceCoord;
  vertexAttributes_2.tangents = vertexAttributes_tangents;
  highp vec4 tmpvar_3;
  tmpvar_3.zw = vec2(0.0, 1.0);
  tmpvar_3.xy = vertexAttributes_2.position;
  highp int tmpvar_4;
  tmpvar_4 = int((65535.0 * vertexAttributes_2.styleIndices.x));
  highp int tmpvar_5;
  tmpvar_5 = int((65535.0 * vertexAttributes_2.styleIndices.y));
  highp vec2 tmpvar_6;
  tmpvar_6 = vertexAttributes_2.tangents.xy;
  highp vec2 tmpvar_7;
  tmpvar_7 = vertexAttributes_2.tangents.zw;
  highp vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_6.y;
  tmpvar_8.y = -(tmpvar_6.x);
  highp float tmpvar_9;
  tmpvar_9 = vertexAttributes_2.quadSpaceCoord.x;
  highp float tmpvar_10;
  if ((tmpvar_9 > 0.5)) {
    tmpvar_10 = wall.outerOffset[tmpvar_4];
  } else {
    tmpvar_10 = wall.innerOffset[tmpvar_4];
  };
  highp float tmpvar_11;
  if ((tmpvar_9 > 0.5)) {
    tmpvar_11 = wall.outerOffset[tmpvar_5];
  } else {
    tmpvar_11 = wall.innerOffset[tmpvar_5];
  };
  highp float tmpvar_12;
  tmpvar_12 = wall.height[tmpvar_4];
  highp float tmpvar_13;
  tmpvar_13 = wall.height[tmpvar_5];
  bool tmpvar_14;
  tmpvar_14 = (tmpvar_12 > tmpvar_13);
  highp float tmpvar_15;
  if (tmpvar_14) {
    tmpvar_15 = tmpvar_12;
  } else {
    tmpvar_15 = tmpvar_13;
  };
  highp float tmpvar_16;
  tmpvar_16 = wall.baseHeight[tmpvar_4];
  highp float tmpvar_17;
  tmpvar_17 = wall.baseHeight[tmpvar_5];
  highp float tmpvar_18;
  if ((tmpvar_12 > 0.0)) {
    tmpvar_18 = tmpvar_16;
  } else {
    tmpvar_18 = tmpvar_17;
  };
  highp float tmpvar_19;
  if ((tmpvar_13 > 0.0)) {
    tmpvar_19 = tmpvar_17;
  } else {
    tmpvar_19 = tmpvar_16;
  };
  highp float tmpvar_20;
  tmpvar_20 = min (tmpvar_19, tmpvar_18);
  highp float tmpvar_21;
  if ((vertexAttributes_2.quadSpaceCoord.y > 0.5)) {
    tmpvar_21 = tmpvar_15;
  } else {
    tmpvar_21 = tmpvar_20;
  };
  highp vec2 tmpvar_22;
  if (tmpvar_14) {
    tmpvar_22 = tmpvar_7;
  } else {
    tmpvar_22 = -(tmpvar_6);
  };
  highp vec3 tmpvar_23;
  tmpvar_23.z = 0.0;
  tmpvar_23.xy = tmpvar_22;
  highp float factor_24;
  factor_24 = 0.0;
  highp float tmpvar_25;
  tmpvar_25 = ((tmpvar_6.x * tmpvar_7.y) - (tmpvar_6.y * tmpvar_7.x));
  highp float tmpvar_26;
  tmpvar_26 = dot (tmpvar_7, tmpvar_7);
  highp float tmpvar_27;
  tmpvar_27 = float((dot (tmpvar_6, tmpvar_6) >= 0.08));
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_26 >= 0.08));
  highp float tmpvar_29;
  tmpvar_29 = float((abs(tmpvar_25) >= 0.08));
  if ((((tmpvar_27 * tmpvar_28) * tmpvar_29) > 0.0)) {
    factor_24 = (((tmpvar_11 * tmpvar_26) - (tmpvar_10 * 
      dot (tmpvar_6, tmpvar_7)
    )) * (1.0/(tmpvar_25)));
    highp float tmpvar_30;
    tmpvar_30 = (abs(tmpvar_10) * 2.0);
    factor_24 = clamp (factor_24, -(tmpvar_30), tmpvar_30);
  };
  highp vec4 tmpvar_31;
  tmpvar_31.zw = vec2(0.0, 0.0);
  tmpvar_31.xy = ((tmpvar_8 * vec2(tmpvar_10)) + (tmpvar_6 * vec2(factor_24)));
  highp vec4 tmpvar_32;
  tmpvar_32.w = 0.0;
  tmpvar_32.xy = -(tmpvar_31.xy);
  tmpvar_32.z = tmpvar_21;
  highp vec4 tmpvar_33;
  tmpvar_33 = (tmpvar_3 + tmpvar_32);
  gl_Position = (view.modelViewProjectionMatrix * tmpvar_33);
  highp int tmpvar_34;
  if (tmpvar_14) {
    tmpvar_34 = tmpvar_4;
  } else {
    tmpvar_34 = tmpvar_5;
  };
  highp float tmpvar_35;
  highp vec2 gradient_36;
  gradient_36 = gradient.equation[tmpvar_34];
  tmpvar_35 = ((gradient_36.x * tmpvar_33.z) + gradient_36.y);
  outputValue_1.gradient = tmpvar_35;
  highp vec4 tmpvar_37;
  tmpvar_37 = wall.color[tmpvar_4];
  lowp vec3 lightContributions_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = lighting.ambientLightColor.xyz;
  lightContributions_38 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = (vec3(clamp (dot (lighting.lightDirection[0].xyz, tmpvar_23), 0.0, 1.0)) * lighting.lightColor[0].xyz);
  lightContributions_38 = (lightContributions_38 + tmpvar_40);
  highp vec3 tmpvar_41;
  tmpvar_41 = (vec3(clamp (dot (lighting.lightDirection[1].xyz, tmpvar_23), 0.0, 1.0)) * lighting.lightColor[1].xyz);
  lightContributions_38 = (lightContributions_38 + tmpvar_41);
  highp vec3 tmpvar_42;
  tmpvar_42 = (vec3(clamp (dot (lighting.lightDirection[2].xyz, tmpvar_23), 0.0, 1.0)) * lighting.lightColor[2].xyz);
  lightContributions_38 = (lightContributions_38 + tmpvar_42);
  highp vec4 tmpvar_43;
  tmpvar_43.xyz = (tmpvar_37.xyz * lightContributions_38);
  tmpvar_43.w = tmpvar_37.w;
  outputValue_1.color = tmpvar_43;
  outputValue_1.texCoord = vec2(0.0, 0.0);
  v_color = outputValue_1.color;
  v_texCoord = outputValue_1.texCoord;
  v_gradient = outputValue_1.gradient;
//venueWall_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
varying highp vec4 v_color;
varying highp vec2 v_texCoord;
varying lowp float v_gradient;
uniform sampler2D textureSampler;
void main ()
  lowp float tmpvar_1;
  tmpvar_1 = min (v_gradient, 0.9799805);
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (textureSampler, v_texCoord);
  gl_FragColor = ((vec4(tmpvar_1) * v_color) * tmpvar_2);
//venueWallTop_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec2 position;
  highp vec2 styleIndices;
  highp vec2 quadSpaceCoordAndXTexCoord;
  highp vec4 tangents;
struct View {
  highp mat4 modelViewProjectionMatrix;
  highp float tilePerPoint;
struct Lighting {
  highp vec4 lightDirection[3];
  highp vec4 lightColor[3];
  highp vec4 lightSpecularColor;
  highp vec4 ambientLightColor;
struct WallTop {
  highp vec4 color[16];
  highp float innerOffset[16];
  highp float outerOffset[16];
  highp float height[16];
  highp float normalMultiplier;
  highp float textureScale;
  highp float maximumTexCoord;
struct VertexOut {
  highp vec4 color;
  highp vec2 texCoord;
  lowp float gradient;
attribute highp vec2 vertexAttributes_position;
attribute highp vec2 vertexAttributes_styleIndices;
attribute highp vec2 vertexAttributes_quadSpaceCoordAndXTexCoord;
attribute highp vec4 vertexAttributes_tangents;
uniform View view;
uniform Lighting lighting;
uniform WallTop wall;
varying highp vec4 v_color;
varying highp vec2 v_texCoord;
varying lowp float v_gradient;
void main ()
  VertexOut outputValue_1;
  VertexIn vertexAttributes_2;
  vertexAttributes_2.position = vertexAttributes_position;
  vertexAttributes_2.styleIndices = vertexAttributes_styleIndices;
  vertexAttributes_2.quadSpaceCoordAndXTexCoord = vertexAttributes_quadSpaceCoordAndXTexCoord;
  vertexAttributes_2.tangents = vertexAttributes_tangents;
  highp vec4 tmpvar_3;
  tmpvar_3.zw = vec2(0.0, 1.0);
  tmpvar_3.xy = vertexAttributes_2.position;
  highp int tmpvar_4;
  tmpvar_4 = int((65535.0 * vertexAttributes_2.styleIndices.x));
  highp int tmpvar_5;
  tmpvar_5 = int((65535.0 * vertexAttributes_2.styleIndices.y));
  highp vec2 tmpvar_6;
  tmpvar_6 = vertexAttributes_2.tangents.xy;
  highp vec2 tmpvar_7;
  tmpvar_7 = vertexAttributes_2.tangents.zw;
  highp vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_6.y;
  tmpvar_8.y = -(tmpvar_6.x);
  highp int tmpvar_9;
  tmpvar_9 = int((65535.0 * vertexAttributes_2.quadSpaceCoordAndXTexCoord.x));
  highp int tmpvar_10;
  tmpvar_10 = (tmpvar_9 / 256);
  highp vec2 tmpvar_11;
  tmpvar_11.x = (float(tmpvar_10) / 255.0);
  tmpvar_11.y = (float((tmpvar_9 - tmpvar_10)) / 255.0);
  highp float tmpvar_12;
  if ((tmpvar_11.y > 0.5)) {
    tmpvar_12 = wall.outerOffset[tmpvar_4];
  } else {
    tmpvar_12 = wall.innerOffset[tmpvar_4];
  };
  highp float tmpvar_13;
  if ((tmpvar_11.y > 0.5)) {
    tmpvar_13 = wall.outerOffset[tmpvar_5];
  } else {
    tmpvar_13 = wall.innerOffset[tmpvar_5];
  };
  highp float wallHeight_14;
  wallHeight_14 = wall.height[tmpvar_4];
  highp float factor_15;
  factor_15 = 0.0;
  highp float tmpvar_16;
  tmpvar_16 = ((tmpvar_6.x * tmpvar_7.y) - (tmpvar_6.y * tmpvar_7.x));
  highp float tmpvar_17;
  tmpvar_17 = dot (tmpvar_7, tmpvar_7);
  highp float tmpvar_18;
  tmpvar_18 = float((dot (tmpvar_6, tmpvar_6) >= 0.08));
  highp float tmpvar_19;
  tmpvar_19 = float((tmpvar_17 >= 0.08));
  highp float tmpvar_20;
  tmpvar_20 = float((abs(tmpvar_16) >= 0.08));
  if ((((tmpvar_18 * tmpvar_19) * tmpvar_20) > 0.0)) {
    factor_15 = (((tmpvar_13 * tmpvar_17) - (tmpvar_12 * 
      dot (tmpvar_6, tmpvar_7)
    )) * (1.0/(tmpvar_16)));
    highp float tmpvar_21;
    tmpvar_21 = (abs(tmpvar_12) * 2.0);
    factor_15 = clamp (factor_15, -(tmpvar_21), tmpvar_21);
  };
  highp vec4 tmpvar_22;
  tmpvar_22.zw = vec2(0.0, 0.0);
  tmpvar_22.xy = ((tmpvar_8 * vec2(tmpvar_12)) + (tmpvar_6 * vec2(factor_15)));
  highp vec4 tmpvar_23;
  tmpvar_23.w = 0.0;
  tmpvar_23.xy = -(tmpvar_22.xy);
  tmpvar_23.z = wallHeight_14;
  gl_Position = (view.modelViewProjectionMatrix * (tmpvar_3 + tmpvar_23));
  outputValue_1.gradient = 1.0;
  highp vec4 tmpvar_24;
  tmpvar_24 = wall.color[tmpvar_4];
  lowp vec3 lightContributions_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = lighting.ambientLightColor.xyz;
  lightContributions_25 = tmpvar_26;
  highp vec3 tmpvar_27;
  tmpvar_27 = (vec3(clamp (lighting.lightDirection[0].z, 0.0, 1.0)) * lighting.lightColor[0].xyz);
  lightContributions_25 = (lightContributions_25 + tmpvar_27);
  highp vec3 tmpvar_28;
  tmpvar_28 = (vec3(clamp (lighting.lightDirection[1].z, 0.0, 1.0)) * lighting.lightColor[1].xyz);
  lightContributions_25 = (lightContributions_25 + tmpvar_28);
  highp vec3 tmpvar_29;
  tmpvar_29 = (vec3(clamp (lighting.lightDirection[2].z, 0.0, 1.0)) * lighting.lightColor[2].xyz);
  lightContributions_25 = (lightContributions_25 + tmpvar_29);
  highp vec4 tmpvar_30;
  tmpvar_30.xyz = (tmpvar_24.xyz * lightContributions_25);
  tmpvar_30.w = tmpvar_24.w;
  outputValue_1.color = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31.x = (vertexAttributes_2.quadSpaceCoordAndXTexCoord.y * wall.maximumTexCoord);
  tmpvar_31.y = sqrt(dot (tmpvar_23, tmpvar_23));
  outputValue_1.texCoord = (tmpvar_31 * vec2(wall.textureScale));
  v_color = outputValue_1.color;
  v_texCoord = outputValue_1.texCoord;
  v_gradient = outputValue_1.gradient;
//venueWall_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
varying highp vec4 v_color;
varying highp vec2 v_texCoord;
varying lowp float v_gradient;
uniform sampler2D textureSampler;
void main ()
  lowp float tmpvar_1;
  tmpvar_1 = min (v_gradient, 0.9799805);
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (textureSampler, v_texCoord);
  gl_FragColor = ((vec4(tmpvar_1) * v_color) * tmpvar_2);
//venueWallShadow_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec2 position;
  highp vec2 styleIndices;
  highp vec2 quadSpaceCoordAndXTexCoord;
  highp vec4 tangents;
struct View {
  highp mat4 modelViewProjectionMatrix;
  highp float tilePerPoint;
struct WallShadow {
  highp vec4 color[16];
  highp vec2 direction[16];
struct VertexOut {
  highp vec4 color;
attribute highp vec2 vertexAttributes_position;
attribute highp vec2 vertexAttributes_styleIndices;
attribute highp vec2 vertexAttributes_quadSpaceCoordAndXTexCoord;
attribute highp vec4 vertexAttributes_tangents;
uniform View view;
uniform WallShadow wall;
varying highp vec4 v_color;
void main ()
  VertexOut outputValue_1;
  VertexIn vertexAttributes_2;
  vertexAttributes_2.position = vertexAttributes_position;
  vertexAttributes_2.styleIndices = vertexAttributes_styleIndices;
  vertexAttributes_2.quadSpaceCoordAndXTexCoord = vertexAttributes_quadSpaceCoordAndXTexCoord;
  vertexAttributes_2.tangents = vertexAttributes_tangents;
  highp int tmpvar_3;
  tmpvar_3 = int((65535.0 * vertexAttributes_2.styleIndices.x));
  highp int tmpvar_4;
  tmpvar_4 = int((65535.0 * vertexAttributes_2.quadSpaceCoordAndXTexCoord.x));
  highp int tmpvar_5;
  tmpvar_5 = (tmpvar_4 / 256);
  highp vec2 tmpvar_6;
  tmpvar_6.x = (float(tmpvar_5) / 255.0);
  tmpvar_6.y = (float((tmpvar_4 - tmpvar_5)) / 255.0);
  highp vec4 tmpvar_7;
  tmpvar_7.zw = vec2(0.0, 1.0);
  tmpvar_7.xy = (vertexAttributes_2.position + (tmpvar_6.xx * wall.direction[tmpvar_3]));
  gl_Position = (view.modelViewProjectionMatrix * tmpvar_7);
  outputValue_1.color = wall.color[tmpvar_3];
  v_color = outputValue_1.color;
//venueWallShadow_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
varying highp vec4 v_color;
void main ()
  gl_FragColor = v_color;
//verticalVenue3DStroke_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VerticalVertexIn {
  highp vec4 vertex1AndCorner;
  highp vec4 vertex2;
  highp vec4 styleIndices;
  highp vec4 tangents;
struct View {
  highp mat4 modelViewProjectionMatrix;
  highp float tilePerPoint;
struct Style {
  highp vec4 color[8];
  highp float halfStrokeWidth[8];
  highp float height[8];
  highp float baseHeight[8];
  highp float width[8];
  highp vec2 canvasSize;
struct VertexOut {
  highp float texCoord;
  lowp vec4 color;
attribute highp vec4 vertex_input_vertex1AndCorner;
attribute highp vec4 vertex_input_vertex2;
attribute highp vec4 vertex_input_styleIndices;
attribute highp vec4 vertex_input_tangents;
uniform View view;
uniform Style style;
varying highp float v_texCoord;
varying lowp vec4 v_color;
void main ()
  highp vec4 secondVertex_1;
  highp vec4 firstVertex_2;
  VertexOut outputValue_3;
  VerticalVertexIn vertex_input_4;
  vertex_input_4.vertex1AndCorner = vertex_input_vertex1AndCorner;
  vertex_input_4.vertex2 = vertex_input_vertex2;
  vertex_input_4.styleIndices = vertex_input_styleIndices;
  vertex_input_4.tangents = vertex_input_tangents;
  highp int tmpvar_5;
  tmpvar_5 = int((255.0 * vertex_input_4.styleIndices.x));
  highp int tmpvar_6;
  tmpvar_6 = int((255.0 * vertex_input_4.styleIndices.y));
  highp float tmpvar_7;
  tmpvar_7 = style.height[tmpvar_5];
  highp float tmpvar_8;
  tmpvar_8 = style.height[tmpvar_6];
  highp float tmpvar_9;
  tmpvar_9 = style.baseHeight[tmpvar_5];
  highp float tmpvar_10;
  tmpvar_10 = style.baseHeight[tmpvar_6];
  highp float tmpvar_11;
  if ((tmpvar_7 > 0.0)) {
    tmpvar_11 = tmpvar_9;
  } else {
    tmpvar_11 = tmpvar_10;
  };
  highp float tmpvar_12;
  if ((tmpvar_8 > 0.0)) {
    tmpvar_12 = tmpvar_10;
  } else {
    tmpvar_12 = tmpvar_9;
  };
  bool tmpvar_13;
  tmpvar_13 = (tmpvar_7 > tmpvar_8);
  highp int tmpvar_14;
  if (tmpvar_13) {
    tmpvar_14 = tmpvar_5;
  } else {
    tmpvar_14 = tmpvar_6;
  };
  highp float tmpvar_15;
  if (tmpvar_13) {
    tmpvar_15 = tmpvar_7;
  } else {
    tmpvar_15 = tmpvar_8;
  };
  highp float tmpvar_16;
  tmpvar_16 = min (tmpvar_11, tmpvar_12);
  highp vec4 tmpvar_17;
  tmpvar_17 = style.color[tmpvar_14];
  outputValue_3.color = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = style.halfStrokeWidth[tmpvar_14];
  highp int tmpvar_19;
  tmpvar_19 = int((65535.0 * vertex_input_4.vertex1AndCorner.w));
  highp int tmpvar_20;
  tmpvar_20 = int((float(tmpvar_19) / 256.0));
  highp vec2 tmpvar_21;
  tmpvar_21.x = float(tmpvar_20);
  tmpvar_21.y = (float(tmpvar_19) - (float(tmpvar_20) * 256.0));
  bool tmpvar_22;
  tmpvar_22 = (tmpvar_21.x < 0.5);
  highp float tmpvar_23;
  tmpvar_23 = style.width[tmpvar_5];
  highp float tmpvar_24;
  tmpvar_24 = style.width[tmpvar_6];
  highp vec2 tmpvar_25;
  tmpvar_25 = vertex_input_4.tangents.xy;
  highp vec2 tmpvar_26;
  tmpvar_26 = vertex_input_4.tangents.zw;
  highp vec2 tmpvar_27;
  tmpvar_27.x = tmpvar_25.y;
  tmpvar_27.y = -(tmpvar_25.x);
  highp float factor_28;
  factor_28 = 0.0;
  highp float tmpvar_29;
  tmpvar_29 = ((tmpvar_25.x * tmpvar_26.y) - (tmpvar_25.y * tmpvar_26.x));
  highp float tmpvar_30;
  tmpvar_30 = dot (tmpvar_26, tmpvar_26);
  highp float tmpvar_31;
  tmpvar_31 = float((dot (tmpvar_25, tmpvar_25) >= 0.08));
  highp float tmpvar_32;
  tmpvar_32 = float((tmpvar_30 >= 0.08));
  highp float tmpvar_33;
  tmpvar_33 = float((abs(tmpvar_29) >= 0.08));
  if ((((tmpvar_31 * tmpvar_32) * tmpvar_33) > 0.0)) {
    factor_28 = (((tmpvar_24 * tmpvar_30) - (tmpvar_23 * 
      dot (tmpvar_25, tmpvar_26)
    )) * (1.0/(tmpvar_29)));
    highp float tmpvar_34;
    tmpvar_34 = (abs(tmpvar_23) * 2.0);
    factor_28 = clamp (factor_28, -(tmpvar_34), tmpvar_34);
  };
  highp vec4 tmpvar_35;
  tmpvar_35.zw = vec2(0.0, 0.0);
  tmpvar_35.xy = ((tmpvar_27 * vec2(tmpvar_23)) + (tmpvar_25 * vec2(factor_28)));
  highp vec4 tmpvar_36;
  tmpvar_36.w = 1.0;
  tmpvar_36.xyz = vertex_input_4.vertex1AndCorner.xyz;
  highp vec4 tmpvar_37;
  tmpvar_37 = (tmpvar_36 - tmpvar_35);
  firstVertex_2 = tmpvar_37;
  highp vec4 tmpvar_38;
  tmpvar_38.w = 1.0;
  tmpvar_38.xyz = vertex_input_4.vertex2.xyz;
  highp vec4 tmpvar_39;
  tmpvar_39 = (tmpvar_38 - tmpvar_35);
  secondVertex_1 = tmpvar_39;
  highp float tmpvar_40;
  if ((tmpvar_37.z > 0.5)) {
    tmpvar_40 = tmpvar_15;
  } else {
    tmpvar_40 = tmpvar_16;
  };
  firstVertex_2.z = tmpvar_40;
  highp float tmpvar_41;
  if ((tmpvar_39.z > 0.5)) {
    tmpvar_41 = tmpvar_15;
  } else {
    tmpvar_41 = tmpvar_16;
  };
  secondVertex_1.z = tmpvar_41;
  highp vec4 tmpvar_42;
  tmpvar_42 = (view.modelViewProjectionMatrix * firstVertex_2);
  highp vec4 tmpvar_43;
  tmpvar_43 = (view.modelViewProjectionMatrix * secondVertex_1);
  highp vec4 tmpvar_44;
  if (tmpvar_22) {
    tmpvar_44 = tmpvar_42;
  } else {
    tmpvar_44 = tmpvar_43;
  };
  highp vec4 p0_45;
  highp vec4 p1_46;
  highp vec4 tmpvar_47;
  tmpvar_47.zw = vec2(1.0, 1.0);
  tmpvar_47.xy = (style.canvasSize * vec2(0.5, 0.5));
  p0_45 = (((tmpvar_42 / tmpvar_42.wwww) + vec4(1.0, 1.0, 0.0, 0.0)) * tmpvar_47);
  p1_46 = (((tmpvar_43 / tmpvar_43.wwww) + vec4(1.0, 1.0, 0.0, 0.0)) * tmpvar_47);
  highp vec2 tmpvar_48;
  tmpvar_48.x = (p1_46.y - p0_45.y);
  tmpvar_48.y = (p0_45.x - p1_46.x);
  highp vec4 tmpvar_49;
  tmpvar_49.zw = vec2(0.0, 0.0);
  tmpvar_49.xy = (vec2((tmpvar_44.w * tmpvar_18)) * normalize(tmpvar_48));
  outputValue_3.texCoord = ((tmpvar_21.y * 2.0) - 1.0);
  gl_Position = (tmpvar_44 - (vec4(outputValue_3.texCoord) * (tmpvar_49 / tmpvar_47)));
  v_texCoord = outputValue_3.texCoord;
  v_color = outputValue_3.color;
//venue3DStroke_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
varying highp float v_texCoord;
varying lowp vec4 v_color;
uniform sampler2D alphaTexture;
void main ()
  highp vec2 tmpvar_1;
  tmpvar_1.y = 0.0;
  tmpvar_1.x = v_texCoord;
  lowp vec4 tmpvar_2;
  tmpvar_2.xyz = v_color.xyz;
  tmpvar_2.w = (v_color.w * texture2D (alphaTexture, tmpvar_1).x);
  gl_FragColor = tmpvar_2;
//horizontalVenue3DStroke_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct HorizontalVertexIn {
  highp vec4 vertex1AndCorner;
  highp vec4 vertex2;
  highp vec4 styleIndices;
  highp vec4 tangents;
  highp vec2 tangent3;
struct View {
  highp mat4 modelViewProjectionMatrix;
  highp float tilePerPoint;
struct Style {
  highp vec4 color[8];
  highp float halfStrokeWidth[8];
  highp float height[8];
  highp float baseHeight[8];
  highp float width[8];
  highp vec2 canvasSize;
struct VertexOut {
  highp float texCoord;
  lowp vec4 color;
attribute highp vec4 vertex_input_vertex1AndCorner;
attribute highp vec4 vertex_input_vertex2;
attribute highp vec4 vertex_input_styleIndices;
attribute highp vec4 vertex_input_tangents;
attribute highp vec2 vertex_input_tangent3;
uniform View view;
uniform Style style;
varying highp float v_texCoord;
varying lowp vec4 v_color;
void main ()
  highp vec4 secondVertex_1;
  highp vec4 firstVertex_2;
  VertexOut outputValue_3;
  HorizontalVertexIn vertex_input_4;
  vertex_input_4.vertex1AndCorner = vertex_input_vertex1AndCorner;
  vertex_input_4.vertex2 = vertex_input_vertex2;
  vertex_input_4.styleIndices = vertex_input_styleIndices;
  vertex_input_4.tangents = vertex_input_tangents;
  vertex_input_4.tangent3 = vertex_input_tangent3;
  highp int tmpvar_5;
  tmpvar_5 = int((255.0 * vertex_input_4.styleIndices.x));
  highp int tmpvar_6;
  tmpvar_6 = int((255.0 * vertex_input_4.styleIndices.y));
  highp int tmpvar_7;
  tmpvar_7 = int((255.0 * vertex_input_4.styleIndices.z));
  highp vec4 tmpvar_8;
  tmpvar_8 = style.color[tmpvar_6];
  outputValue_3.color = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = style.height[tmpvar_6];
  highp float tmpvar_10;
  tmpvar_10 = style.halfStrokeWidth[tmpvar_6];
  highp int tmpvar_11;
  tmpvar_11 = int((65535.0 * vertex_input_4.vertex1AndCorner.w));
  highp int tmpvar_12;
  tmpvar_12 = int((float(tmpvar_11) / 256.0));
  highp vec2 tmpvar_13;
  tmpvar_13.x = float(tmpvar_12);
  tmpvar_13.y = (float(tmpvar_11) - (float(tmpvar_12) * 256.0));
  bool tmpvar_14;
  tmpvar_14 = (tmpvar_13.x < 0.5);
  highp int tmpvar_15;
  if (tmpvar_14) {
    tmpvar_15 = tmpvar_5;
  } else {
    tmpvar_15 = tmpvar_6;
  };
  highp float tmpvar_16;
  tmpvar_16 = style.width[tmpvar_15];
  highp int tmpvar_17;
  if (tmpvar_14) {
    tmpvar_17 = tmpvar_6;
  } else {
    tmpvar_17 = tmpvar_7;
  };
  highp float tmpvar_18;
  tmpvar_18 = style.width[tmpvar_17];
  highp vec2 tmpvar_19;
  if (tmpvar_14) {
    tmpvar_19 = vertex_input_4.tangents.xy;
  } else {
    tmpvar_19 = vertex_input_4.tangents.zw;
  };
  highp vec2 tmpvar_20;
  if (tmpvar_14) {
    tmpvar_20 = vertex_input_4.tangents.zw;
  } else {
    tmpvar_20 = vertex_input_4.tangent3;
  };
  highp vec2 tmpvar_21;
  tmpvar_21.x = tmpvar_19.y;
  tmpvar_21.y = -(tmpvar_19.x);
  highp float factor_22;
  factor_22 = 0.0;
  highp float tmpvar_23;
  tmpvar_23 = ((tmpvar_19.x * tmpvar_20.y) - (tmpvar_19.y * tmpvar_20.x));
  highp float tmpvar_24;
  tmpvar_24 = dot (tmpvar_20, tmpvar_20);
  highp float tmpvar_25;
  tmpvar_25 = float((dot (tmpvar_19, tmpvar_19) >= 0.08));
  highp float tmpvar_26;
  tmpvar_26 = float((tmpvar_24 >= 0.08));
  highp float tmpvar_27;
  tmpvar_27 = float((abs(tmpvar_23) >= 0.08));
  if ((((tmpvar_25 * tmpvar_26) * tmpvar_27) > 0.0)) {
    factor_22 = (((tmpvar_18 * tmpvar_24) - (tmpvar_16 * 
      dot (tmpvar_19, tmpvar_20)
    )) * (1.0/(tmpvar_23)));
    highp float tmpvar_28;
    tmpvar_28 = (abs(tmpvar_16) * 2.0);
    factor_22 = clamp (factor_22, -(tmpvar_28), tmpvar_28);
  };
  highp vec4 tmpvar_29;
  tmpvar_29.zw = vec2(0.0, 0.0);
  tmpvar_29.xy = ((tmpvar_21 * vec2(tmpvar_16)) + (tmpvar_19 * vec2(factor_22)));
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = vertex_input_4.vertex1AndCorner.xyz;
  highp vec4 tmpvar_31;
  tmpvar_31 = (tmpvar_30 - tmpvar_29);
  firstVertex_2.xyw = tmpvar_31.xyw;
  firstVertex_2.z = (tmpvar_31.z * tmpvar_9);
  highp vec4 tmpvar_32;
  tmpvar_32.w = 1.0;
  tmpvar_32.xyz = vertex_input_4.vertex2.xyz;
  highp vec4 tmpvar_33;
  tmpvar_33 = (tmpvar_32 - tmpvar_29);
  secondVertex_1.xyw = tmpvar_33.xyw;
  secondVertex_1.z = (tmpvar_33.z * tmpvar_9);
  highp vec4 tmpvar_34;
  tmpvar_34 = (view.modelViewProjectionMatrix * firstVertex_2);
  highp vec4 tmpvar_35;
  tmpvar_35 = (view.modelViewProjectionMatrix * secondVertex_1);
  highp vec4 tmpvar_36;
  if (tmpvar_14) {
    tmpvar_36 = tmpvar_34;
  } else {
    tmpvar_36 = tmpvar_35;
  };
  highp vec4 p0_37;
  highp vec4 p1_38;
  highp vec4 tmpvar_39;
  tmpvar_39.zw = vec2(1.0, 1.0);
  tmpvar_39.xy = (style.canvasSize * vec2(0.5, 0.5));
  p0_37 = (((tmpvar_34 / tmpvar_34.wwww) + vec4(1.0, 1.0, 0.0, 0.0)) * tmpvar_39);
  p1_38 = (((tmpvar_35 / tmpvar_35.wwww) + vec4(1.0, 1.0, 0.0, 0.0)) * tmpvar_39);
  highp vec2 tmpvar_40;
  tmpvar_40.x = (p1_38.y - p0_37.y);
  tmpvar_40.y = (p0_37.x - p1_38.x);
  highp vec4 tmpvar_41;
  tmpvar_41.zw = vec2(0.0, 0.0);
  tmpvar_41.xy = (vec2((tmpvar_36.w * tmpvar_10)) * normalize(tmpvar_40));
  outputValue_3.texCoord = ((tmpvar_13.y * 2.0) - 1.0);
  gl_Position = (tmpvar_36 - (vec4(outputValue_3.texCoord) * (tmpvar_41 / tmpvar_39)));
  v_texCoord = outputValue_3.texCoord;
  v_color = outputValue_3.color;
//venue3DStroke_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
varying highp float v_texCoord;
varying lowp vec4 v_color;
uniform sampler2D alphaTexture;
void main ()
  highp vec2 tmpvar_1;
  tmpvar_1.y = 0.0;
  tmpvar_1.x = v_texCoord;
  lowp vec4 tmpvar_2;
  tmpvar_2.xyz = v_color.xyz;
  tmpvar_2.w = (v_color.w * texture2D (alphaTexture, tmpvar_1).x);
  gl_FragColor = tmpvar_2;
//shadow_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec4 vertexStyleIndicesAndTexture;
  highp vec4 tangents;
  highp float side;
struct View {
  highp mat4 modelViewProjectionMatrix;
  highp float tilePerPoint;
struct Style {
  highp vec4 color;
  highp vec2 offset;
struct VertexOut {
  highp float alphaRamp;
attribute highp vec4 vertex_attributes_vertexStyleIndicesAndTexture;
attribute highp vec4 vertex_attributes_tangents;
attribute highp float vertex_attributes_side;
uniform View view;
uniform Style style;
varying highp float v_alphaRamp;
void main ()
  VertexOut outputValue_1;
  VertexIn vertex_attributes_2;
  vertex_attributes_2.vertexStyleIndicesAndTexture = vertex_attributes_vertexStyleIndicesAndTexture;
  vertex_attributes_2.tangents = vertex_attributes_tangents;
  vertex_attributes_2.side = vertex_attributes_side;
  outputValue_1.alphaRamp = (style.color.w * (1.0 - vertex_attributes_2.side));
  highp vec4 tmpvar_3;
  tmpvar_3.zw = vec2(0.0, 1.0);
  tmpvar_3.xy = vertex_attributes_2.vertexStyleIndicesAndTexture.xy;
  gl_Position = (view.modelViewProjectionMatrix * tmpvar_3);
  highp vec4 tmpvar_4;
  tmpvar_4.zw = vec2(0.0, 0.0);
  tmpvar_4.xy = (vec2(vertex_attributes_2.side) * style.offset);
  gl_Position = (gl_Position + (tmpvar_4 * gl_Position.wwww));
  v_alphaRamp = outputValue_1.alphaRamp;
//shadow_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
struct Style {
  highp vec4 color;
  highp vec2 offset;
varying highp float v_alphaRamp;
uniform Style style;
void main ()
  highp vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = style.color.xyz;
  gl_FragColor = tmpvar_1;
//shadow_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec4 vertexStyleIndicesAndTexture;
  highp vec4 tangents;
  highp float side;
struct View {
  highp mat4 modelViewProjectionMatrix;
  highp float tilePerPoint;
struct Style {
  highp vec4 color;
  highp vec2 offset;
struct VertexOut {
  highp float alphaRamp;
attribute highp vec4 vertex_attributes_vertexStyleIndicesAndTexture;
attribute highp vec4 vertex_attributes_tangents;
attribute highp float vertex_attributes_side;
uniform View view;
uniform Style style;
varying highp float v_alphaRamp;
void main ()
  VertexOut outputValue_1;
  VertexIn vertex_attributes_2;
  vertex_attributes_2.vertexStyleIndicesAndTexture = vertex_attributes_vertexStyleIndicesAndTexture;
  vertex_attributes_2.tangents = vertex_attributes_tangents;
  vertex_attributes_2.side = vertex_attributes_side;
  outputValue_1.alphaRamp = (style.color.w * (1.0 - vertex_attributes_2.side));
  highp vec4 tmpvar_3;
  tmpvar_3.zw = vec2(0.0, 1.0);
  tmpvar_3.xy = vertex_attributes_2.vertexStyleIndicesAndTexture.xy;
  gl_Position = (view.modelViewProjectionMatrix * tmpvar_3);
  highp vec4 tmpvar_4;
  tmpvar_4.zw = vec2(0.0, 0.0);
  tmpvar_4.xy = (vec2(vertex_attributes_2.side) * style.offset);
  gl_Position = (gl_Position + (tmpvar_4 * gl_Position.wwww));
  v_alphaRamp = outputValue_1.alphaRamp;
//shadowAlpha_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
varying highp float v_alphaRamp;
void main ()
  lowp float lastOneMinusAlpha_1;
  lowp float oneMinusAlpha_2;
  highp float tmpvar_3;
  tmpvar_3 = (1.0 - v_alphaRamp);
  oneMinusAlpha_2 = tmpvar_3;
  mediump float tmpvar_4;
  tmpvar_4 = gl_LastFragData[0].w;
  lastOneMinusAlpha_1 = tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_5 = min (oneMinusAlpha_2, lastOneMinusAlpha_1);
  mediump vec4 tmpvar_6;
  tmpvar_6.x = gl_LastFragData[0].x;
  tmpvar_6.y = gl_LastFragData[0].y;
  tmpvar_6.z = gl_LastFragData[0].z;
  tmpvar_6.w = tmpvar_5;
  gl_FragColor = tmpvar_6;
KTX 11
rifir
l[PLP[l
r[H939H[r
iP9$
$9Pi
iP9$
$9Pi
r[H939H[r
l[PLP[l
rifir
reH=u^
N&>cJ
//earthcorona_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexData {
  highp vec3 position;
struct Base {
  highp mat4 modelview;
  highp mat4 projection;
  highp float brightness;
  highp vec3 lightdirection;
  highp mat4 earthcoronamodelview;
  highp float horizondistance;
  highp float nightlightfade;
struct VertexOut {
  highp vec3 iDistance;
  highp float iIntensity;
attribute highp vec3 vertex_attributes_position;
uniform Base base;
varying highp vec3 v_iDistance;
varying highp float v_iIntensity;
void main ()
  highp float lz_1;
  highp vec3 p_2;
  VertexOut outputValue_3;
  VertexData vertex_attributes_4;
  vertex_attributes_4.position = vertex_attributes_position;
  highp vec3 tmpvar_5;
  tmpvar_5 = vertex_attributes_4.position;
  p_2.xy = tmpvar_5.xy;
  highp vec3 tmpvar_6;
  tmpvar_6.yz = vec2(0.0, 1.5);
  tmpvar_6.x = sqrt(dot (tmpvar_5, tmpvar_5));
  outputValue_3.iDistance = tmpvar_6;
  p_2.z = (tmpvar_5.z + (outputValue_3.iDistance.x / base.horizondistance));
  highp vec3 tmpvar_7;
  if ((outputValue_3.iDistance.x > 0.0)) {
    tmpvar_7 = (normalize(p_2) * outputValue_3.iDistance.xxx);
  } else {
    tmpvar_7 = p_2;
  };
  p_2 = tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_8.z = 0.0;
  tmpvar_8.xy = tmpvar_7.xy;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 0.0;
  tmpvar_9.xyz = base.lightdirection;
  highp vec3 tmpvar_10;
  tmpvar_10 = (base.modelview * tmpvar_9).xyz;
  lz_1 = (tmpvar_10.z * tmpvar_10.z);
  lz_1 = (lz_1 * lz_1);
  lz_1 = (lz_1 * lz_1);
  outputValue_3.iIntensity = clamp ((max (
    (1.0 - dot ((tmpvar_8 / outputValue_3.iDistance.xxx), (-(tmpvar_10) * vec3(3.0, 3.0, 3.0))))
  , 0.0) + (lz_1 * 0.7)), (1.0 - base.nightlightfade), 1.0);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = tmpvar_7;
  gl_Position = (base.projection * (base.earthcoronamodelview * tmpvar_11));
  gl_Position.z = gl_Position.w;
  v_iDistance = outputValue_3.iDistance;
  v_iIntensity = outputValue_3.iIntensity;
//earthcorona_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
struct Base {
  highp mat4 modelview;
  highp mat4 projection;
  highp float brightness;
  highp vec3 lightdirection;
  highp mat4 earthcoronamodelview;
  highp float horizondistance;
  highp float nightlightfade;
varying highp vec3 v_iDistance;
varying highp float v_iIntensity;
uniform Base base;
uniform sampler2D textureMap0;
void main ()
  mediump vec4 out_color_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2DProj (textureMap0, v_iDistance);
  out_color_1.xyz = (vec4(v_iIntensity) * tmpvar_2).xyz;
  out_color_1.w = base.brightness;
  gl_FragColor = out_color_1;
//endOfWorld_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexData {
  highp vec3 position;
  highp vec2 texcoord;
struct Element {
  highp mat4 modelview;
  highp float blend;
struct Shared {
  highp mat4 projection;
  highp float texscale;
struct VertexOut {
  highp vec2 iTextureCoord0;
attribute highp vec3 vertex_attributes_position;
attribute highp vec2 vertex_attributes_texcoord;
uniform Element element;
uniform Shared shared;
varying highp vec2 v_iTextureCoord0;
void main ()
  VertexOut outputValue_1;
  VertexData vertex_attributes_2;
  vertex_attributes_2.position = vertex_attributes_position;
  vertex_attributes_2.texcoord = vertex_attributes_texcoord;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = vertex_attributes_2.position;
  outputValue_1.iTextureCoord0 = (vertex_attributes_2.texcoord / vec2(shared.texscale));
  gl_Position = (shared.projection * (element.modelview * tmpvar_3));
  v_iTextureCoord0 = outputValue_1.iTextureCoord0;
//endOfWorld_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
struct Element {
  highp mat4 modelview;
  highp float blend;
varying highp vec2 v_iTextureCoord0;
uniform Element element;
uniform sampler2D textureMap0;
void main ()
  mediump vec4 color_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (textureMap0, v_iTextureCoord0);
  color_1.w = tmpvar_2.w;
  highp vec2 tmpvar_3;
  tmpvar_3.x = (v_iTextureCoord0.x / 7.5);
  tmpvar_3.y = (v_iTextureCoord0.y / 3.75);
  highp float tmpvar_4;
  tmpvar_4 = clamp ((element.blend * clamp (
    (2.0 - sqrt(dot (tmpvar_3, tmpvar_3)))
  , 0.0, 2.0)), 0.0, 1.0);
  color_1.xyz = vec3(1.0, 1.0, 1.0);
  color_1.w = (color_1.w * tmpvar_4);
  gl_FragColor = color_1;
//flyover_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec3 position;
  highp vec2 texcoord;
struct Shared {
  highp mat4 projection;
  highp vec3 atmospherecolor;
  highp vec2 horizonvalues;
  highp vec3 lightdirection;
  highp float nightlightfade;
struct Transform {
  highp mat4 modelview;
  highp mat4 modelmat;
struct Clip {
  highp vec4 clipPlanes[6];
struct Material {
  highp float blendfactor;
struct Texcoords {
  highp vec2 offset;
  highp vec2 scale;
struct VertexOut {
  highp vec2 uv;
  lowp float atmosphere;
attribute highp vec3 vertexInput_position;
attribute highp vec2 vertexInput_texcoord;
uniform Shared shared;
uniform Transform transform;
uniform Clip clip;
uniform Material material;
uniform Texcoords texcoords;
uniform sampler2D atmosphere;
varying highp vec2 v_uv;
varying lowp float v_atmosphere;
void main ()
  VertexOut outputValue_1;
  VertexIn vertexInput_2;
  vertexInput_2.position = vertexInput_position;
  vertexInput_2.texcoord = vertexInput_texcoord;
  highp vec2 tmpvar_3;
  tmpvar_3 = ((vertexInput_2.texcoord * texcoords.scale) + texcoords.offset);
  highp vec2 tmpvar_4;
  tmpvar_4.x = tmpvar_3.x;
  tmpvar_4.y = (1.0 - tmpvar_3.y);
  outputValue_1.uv = tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = vertexInput_2.position;
  highp vec4 tmpvar_6;
  tmpvar_6 = (transform.modelview * tmpvar_5);
  highp vec2 horizon_7;
  horizon_7 = shared.horizonvalues;
  highp vec2 tmpvar_8;
  tmpvar_8.y = 0.5;
  tmpvar_8.x = ((sqrt(
    dot (tmpvar_6.xyz, tmpvar_6.xyz)
  ) - horizon_7.x) / horizon_7.y);
  outputValue_1.atmosphere = texture2D (atmosphere, tmpvar_8).x;
  gl_Position = ((shared.projection * tmpvar_6) + vec4(((1.0 - 
    max (0.0, material.blendfactor)
  ) * 0.02)));
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = vertexInput_2.position;
  gl_ClipDistance[0] = dot (clip.clipPlanes[0], tmpvar_9);
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = vertexInput_2.position;
  gl_ClipDistance[1] = dot (clip.clipPlanes[1], tmpvar_10);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = vertexInput_2.position;
  gl_ClipDistance[2] = dot (clip.clipPlanes[2], tmpvar_11);
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = vertexInput_2.position;
  gl_ClipDistance[3] = dot (clip.clipPlanes[3], tmpvar_12);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = vertexInput_2.position;
  gl_ClipDistance[4] = dot (clip.clipPlanes[4], tmpvar_13);
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = vertexInput_2.position;
  gl_ClipDistance[5] = dot (clip.clipPlanes[5], tmpvar_14);
  v_uv = outputValue_1.uv;
  v_atmosphere = outputValue_1.atmosphere;
//flyover_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
struct Shared {
  highp mat4 projection;
  highp vec3 atmospherecolor;
  highp vec2 horizonvalues;
  highp vec3 lightdirection;
  highp float nightlightfade;
struct Material {
  highp float blendfactor;
varying highp vec2 v_uv;
varying lowp float v_atmosphere;
uniform Shared shared;
uniform Material material;
uniform sampler2D diffuse;
void main ()
  lowp vec4 o_color_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (diffuse, v_uv);
  highp vec3 tmpvar_3;
  tmpvar_3 = shared.atmospherecolor;
  o_color_1.xyz = (tmpvar_2.xyz + (vec3(v_atmosphere) * tmpvar_3));
  o_color_1.w = (tmpvar_2.w * material.blendfactor);
  gl_FragColor = o_color_1;
//flyoverBorder_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec3 position;
  highp vec2 merccoord;
  highp vec2 flyovercoord;
struct Shared {
  highp mat4 projection;
  highp vec3 atmospherecolor;
  highp vec2 horizonvalues;
  highp vec3 lightdirection;
  highp float nightlightfade;
struct Transform {
  highp mat4 modelview;
  highp mat4 modelmat;
struct Clip {
  highp vec4 clipPlanes[6];
struct Material {
  highp float blendfactor;
struct Texcoords {
  highp vec2 offset;
  highp vec2 scale;
struct VertexOut {
  highp vec2 satelliteuv;
  highp vec2 flyoveruv;
  highp vec2 blenduv;
  lowp float atmosphere;
attribute highp vec3 vertexInput_position;
attribute highp vec2 vertexInput_merccoord;
attribute highp vec2 vertexInput_flyovercoord;
uniform Shared shared;
uniform Transform transform;
uniform Clip clip;
uniform Material material;
uniform Texcoords texcoords;
uniform sampler2D atmosphere;
varying highp vec2 v_satelliteuv;
varying highp vec2 v_flyoveruv;
varying highp vec2 v_blenduv;
varying lowp float v_atmosphere;
void main ()
  VertexOut outputValue_1;
  VertexIn vertexInput_2;
  vertexInput_2.position = vertexInput_position;
  vertexInput_2.merccoord = vertexInput_merccoord;
  vertexInput_2.flyovercoord = vertexInput_flyovercoord;
  highp vec2 tmpvar_3;
  tmpvar_3 = ((vertexInput_2.merccoord * texcoords.scale) + texcoords.offset);
  highp vec2 tmpvar_4;
  tmpvar_4.x = tmpvar_3.x;
  tmpvar_4.y = (1.0 - tmpvar_3.y);
  outputValue_1.satelliteuv = tmpvar_4;
  highp vec2 tmpvar_5;
  tmpvar_5.x = vertexInput_2.merccoord.x;
  tmpvar_5.y = (1.0 - vertexInput_2.merccoord.y);
  outputValue_1.blenduv = tmpvar_5;
  highp vec2 tmpvar_6;
  tmpvar_6.x = vertexInput_2.flyovercoord.x;
  tmpvar_6.y = (1.0 - vertexInput_2.flyovercoord.y);
  outputValue_1.flyoveruv = tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = vertexInput_2.position;
  highp vec4 tmpvar_8;
  tmpvar_8 = (transform.modelview * tmpvar_7);
  highp vec2 horizon_9;
  horizon_9 = shared.horizonvalues;
  highp vec2 tmpvar_10;
  tmpvar_10.y = 0.5;
  tmpvar_10.x = ((sqrt(
    dot (tmpvar_8.xyz, tmpvar_8.xyz)
  ) - horizon_9.x) / horizon_9.y);
  outputValue_1.atmosphere = texture2D (atmosphere, tmpvar_10).x;
  gl_Position = ((shared.projection * tmpvar_8) + vec4(((1.0 - 
    max (0.0, material.blendfactor)
  ) * 0.02)));
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = vertexInput_2.position;
  gl_ClipDistance[0] = dot (clip.clipPlanes[0], tmpvar_11);
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = vertexInput_2.position;
  gl_ClipDistance[1] = dot (clip.clipPlanes[1], tmpvar_12);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = vertexInput_2.position;
  gl_ClipDistance[2] = dot (clip.clipPlanes[2], tmpvar_13);
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = vertexInput_2.position;
  gl_ClipDistance[3] = dot (clip.clipPlanes[3], tmpvar_14);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = vertexInput_2.position;
  gl_ClipDistance[4] = dot (clip.clipPlanes[4], tmpvar_15);
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = vertexInput_2.position;
  gl_ClipDistance[5] = dot (clip.clipPlanes[5], tmpvar_16);
  v_satelliteuv = outputValue_1.satelliteuv;
  v_flyoveruv = outputValue_1.flyoveruv;
  v_blenduv = outputValue_1.blenduv;
  v_atmosphere = outputValue_1.atmosphere;
//flyoverBorder_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
struct Shared {
  highp mat4 projection;
  highp vec3 atmospherecolor;
  highp vec2 horizonvalues;
  highp vec3 lightdirection;
  highp float nightlightfade;
struct Material {
  highp float blendfactor;
varying highp vec2 v_satelliteuv;
varying highp vec2 v_flyoveruv;
varying highp vec2 v_blenduv;
varying lowp float v_atmosphere;
uniform Shared shared;
uniform Material material;
uniform sampler2D satellite;
uniform sampler2D flyover;
uniform sampler2D blend;
void main ()
  lowp vec4 o_color_1;
  mediump float blend_value_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (satellite, v_satelliteuv);
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (flyover, v_flyoveruv);
  lowp float tmpvar_5;
  tmpvar_5 = texture2D (blend, v_blenduv).x;
  blend_value_2 = tmpvar_5;
  mediump vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = mix (tmpvar_3.xyz, tmpvar_4.xyz, blend_value_2);
  o_color_1 = tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = shared.atmospherecolor;
  o_color_1.xyz = (o_color_1.xyz + (vec3(v_atmosphere) * tmpvar_7));
  o_color_1.w = (o_color_1.w * material.blendfactor);
  gl_FragColor = o_color_1;
//flyoverBorderRibbon_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec3 position;
  highp vec3 normal;
  highp vec4 offset;
  highp vec2 uv;
struct View {
  highp mat4 projection;
struct Tile {
  highp mat4 modelview;
struct Border {
  highp vec3 property;
struct VertexOut {
  highp vec4 uv;
attribute highp vec3 vertexInput_position;
attribute highp vec3 vertexInput_normal;
attribute highp vec4 vertexInput_offset;
attribute highp vec2 vertexInput_uv;
uniform View view;
uniform Tile tile;
uniform Border border;
varying highp vec4 v_uv;
void main ()
  highp vec4 p_1;
  VertexOut outputValue_2;
  VertexIn vertexInput_3;
  vertexInput_3.position = vertexInput_position;
  vertexInput_3.normal = vertexInput_normal;
  vertexInput_3.offset = vertexInput_offset;
  vertexInput_3.uv = vertexInput_uv;
  highp vec4 tmpvar_4;
  tmpvar_4.y = 0.5;
  tmpvar_4.x = vertexInput_3.uv.x;
  tmpvar_4.z = (vertexInput_3.uv.x + (vertexInput_3.offset.w * border.property.x));
  tmpvar_4.w = (vertexInput_3.uv.y * border.property.z);
  outputValue_2.uv = tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = vertexInput_3.position;
  p_1.w = tmpvar_5.w;
  p_1.xyz = (tmpvar_5.xyz + (vertexInput_3.offset.xyz * vec3((vertexInput_3.offset.w * border.property.y))));
  p_1 = (tile.modelview * p_1);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = vertexInput_3.normal;
  highp float tmpvar_7;
  tmpvar_7 = -((tile.modelview * tmpvar_6).z);
  highp float tmpvar_8;
  tmpvar_8 = (tmpvar_7 * tmpvar_7);
  highp float tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_8);
  highp float tmpvar_10;
  tmpvar_10 = (tmpvar_9 * tmpvar_9);
  highp vec4 tmpvar_11;
  tmpvar_11.xyz = (p_1.xyz - (vec3((
    (2.5 + (7.5 * tmpvar_10))
   + 
    ((0.002 + (0.02 * tmpvar_10)) * -(p_1.z))
  )) * normalize(p_1.xyz)));
  tmpvar_11.w = p_1.w;
  gl_Position = (view.projection * tmpvar_11);
  v_uv = outputValue_2.uv;
//flyoverBorderRibbon_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
struct Color {
  highp vec4 primary;
  highp vec4 secondary;
varying highp vec4 v_uv;
uniform Color color;
uniform sampler2D patternMap;
uniform sampler2D discMap;
void main ()
  lowp float mixValue_1;
  lowp vec3 colorValue_2;
  lowp vec4 colors_3;
  highp vec2 uv_4;
  uv_4.x = v_uv.z;
  uv_4.y = (float(mod (v_uv.w, 1.0)));
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (patternMap, uv_4);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (discMap, v_uv.xy);
  highp vec4 tmpvar_7;
  tmpvar_7 = mix (color.secondary, color.primary, tmpvar_5.x);
  colors_3 = tmpvar_7;
  mediump vec3 tmpvar_8;
  lowp float a_9;
  a_9 = (colors_3.w * tmpvar_6.x);
  tmpvar_8 = mix (gl_LastFragData[0].xyz, colors_3.xyz, a_9);
  colorValue_2 = tmpvar_8;
  lowp float tmpvar_10;
  tmpvar_10 = (1.0 - mix (tmpvar_6.x, tmpvar_5.x, tmpvar_5.x));
  mediump float tmpvar_11;
  tmpvar_11 = float((gl_LastFragData[0].w >= tmpvar_10));
  mixValue_1 = tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12.xyz = colorValue_2;
  tmpvar_12.w = tmpvar_10;
  gl_FragColor = mix (gl_LastFragData[0], tmpvar_12, mixValue_1);
//flyoverFlat_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec3 position;
  highp vec2 texcoord;
  highp vec2 flatcoord;
struct Shared {
  highp mat4 projection;
  highp vec3 atmospherecolor;
  highp vec2 horizonvalues;
  highp vec3 lightdirection;
  highp float nightlightfade;
struct Transform {
  highp mat4 modelview;
  highp mat4 modelmat;
struct Clip {
  highp vec4 clipPlanes[6];
struct Material {
  highp float blendfactor;
struct Texcoords {
  highp vec2 offset;
  highp vec2 scale;
struct VertexOut {
  highp vec2 uv;
  mediump vec3 flatcolor;
  lowp float atmosphere;
attribute highp vec3 vertexInput_position;
attribute highp vec2 vertexInput_texcoord;
attribute highp vec2 vertexInput_flatcoord;
uniform Shared shared;
uniform Transform transform;
uniform Clip clip;
uniform Material material;
uniform Texcoords texcoords;
uniform sampler2D atmosphere;
uniform sampler2D colorlookup;
varying highp vec2 v_uv;
varying mediump vec3 v_flatcolor;
varying lowp float v_atmosphere;
void main ()
  VertexOut outputValue_1;
  VertexIn vertexInput_2;
  vertexInput_2.position = vertexInput_position;
  vertexInput_2.texcoord = vertexInput_texcoord;
  vertexInput_2.flatcoord = vertexInput_flatcoord;
  highp vec2 tmpvar_3;
  tmpvar_3 = ((vertexInput_2.texcoord * texcoords.scale) + texcoords.offset);
  highp vec2 tmpvar_4;
  tmpvar_4.x = tmpvar_3.x;
  tmpvar_4.y = (1.0 - tmpvar_3.y);
  outputValue_1.uv = tmpvar_4;
  lowp vec4 tmpvar_5;
  highp vec2 P_6;
  P_6 = vertexInput_2.flatcoord;
  tmpvar_5 = texture2D (colorlookup, P_6);
  outputValue_1.flatcolor = tmpvar_5.xyz;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = vertexInput_2.position;
  highp vec4 tmpvar_8;
  tmpvar_8 = (transform.modelview * tmpvar_7);
  highp vec2 horizon_9;
  horizon_9 = shared.horizonvalues;
  highp vec2 tmpvar_10;
  tmpvar_10.y = 0.5;
  tmpvar_10.x = ((sqrt(
    dot (tmpvar_8.xyz, tmpvar_8.xyz)
  ) - horizon_9.x) / horizon_9.y);
  outputValue_1.atmosphere = texture2D (atmosphere, tmpvar_10).x;
  gl_Position = ((shared.projection * tmpvar_8) + vec4(((1.0 - 
    max (0.0, material.blendfactor)
  ) * 0.02)));
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = vertexInput_2.position;
  gl_ClipDistance[0] = dot (clip.clipPlanes[0], tmpvar_11);
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = vertexInput_2.position;
  gl_ClipDistance[1] = dot (clip.clipPlanes[1], tmpvar_12);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = vertexInput_2.position;
  gl_ClipDistance[2] = dot (clip.clipPlanes[2], tmpvar_13);
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = vertexInput_2.position;
  gl_ClipDistance[3] = dot (clip.clipPlanes[3], tmpvar_14);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = vertexInput_2.position;
  gl_ClipDistance[4] = dot (clip.clipPlanes[4], tmpvar_15);
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = vertexInput_2.position;
  gl_ClipDistance[5] = dot (clip.clipPlanes[5], tmpvar_16);
  v_uv = outputValue_1.uv;
  v_flatcolor = outputValue_1.flatcolor;
  v_atmosphere = outputValue_1.atmosphere;
//flyoverFlat_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
struct Shared {
  highp mat4 projection;
  highp vec3 atmospherecolor;
  highp vec2 horizonvalues;
  highp vec3 lightdirection;
  highp float nightlightfade;
struct Material {
  highp float blendfactor;
struct FlatFactor {
  highp float factor;
varying highp vec2 v_uv;
varying mediump vec3 v_flatcolor;
varying lowp float v_atmosphere;
uniform Shared shared;
uniform Material material;
uniform FlatFactor flatFactor;
uniform sampler2D diffuse;
void main ()
  lowp vec4 o_color_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (diffuse, v_uv);
  mediump vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = v_flatcolor;
  highp vec4 tmpvar_4;
  tmpvar_4 = mix (tmpvar_2, tmpvar_3, flatFactor.factor);
  o_color_1 = tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = shared.atmospherecolor;
  o_color_1.xyz = (o_color_1.xyz + (vec3(v_atmosphere) * tmpvar_5));
  o_color_1.w = (o_color_1.w * material.blendfactor);
  gl_FragColor = o_color_1;
//flyoverManeuver_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec3 position;
  highp vec3 normal;
  highp vec4 offset;
  highp vec2 uv;
struct View {
  highp mat4 projection;
struct Displacement {
  highp mat4 modelview;
  highp vec3 properties;
  highp vec4 color[4];
struct VertexOut {
  highp vec2 uv;
  lowp vec4 primary;
  lowp vec4 secondary;
attribute highp vec3 vertexInput_position;
attribute highp vec3 vertexInput_normal;
attribute highp vec4 vertexInput_offset;
attribute highp vec2 vertexInput_uv;
uniform View view;
uniform Displacement displacement;
varying highp vec2 v_uv;
varying lowp vec4 v_primary;
varying lowp vec4 v_secondary;
void main ()
  highp vec4 p_1;
  VertexOut outputValue_2;
  VertexIn vertexInput_3;
  vertexInput_3.position = vertexInput_position;
  vertexInput_3.normal = vertexInput_normal;
  vertexInput_3.offset = vertexInput_offset;
  vertexInput_3.uv = vertexInput_uv;
  highp float tmpvar_4;
  tmpvar_4 = ((vertexInput_3.uv.y - displacement.properties.z) * 2.0);
  highp vec2 tmpvar_5;
  tmpvar_5.x = vertexInput_3.uv.x;
  tmpvar_5.y = (1.0 - vertexInput_3.uv.y);
  outputValue_2.uv = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = vertexInput_3.position;
  p_1.w = tmpvar_6.w;
  p_1.xyz = (tmpvar_6.xyz + (vertexInput_3.offset.xyz * vec3((vertexInput_3.uv.x * displacement.properties.x))));
  p_1 = (displacement.modelview * p_1);
  if (((tmpvar_4 * tmpvar_4) > 0.01)) {
    highp vec3 a_7;
    a_7 = vertexInput_3.normal;
    highp vec3 b_8;
    b_8 = vertexInput_3.offset.xyz;
    highp vec4 tmpvar_9;
    tmpvar_9.w = 0.0;
    tmpvar_9.xyz = normalize(((a_7.yzx * b_8.zxy) - (a_7.zxy * b_8.yzx)));
    p_1 = (p_1 + ((displacement.modelview * 
      (tmpvar_9 * vec4(tmpvar_4))
    ) * displacement.properties.xxxx));
  };
  highp float tmpvar_10;
  tmpvar_10 = (vertexInput_3.offset.w - displacement.properties.y);
  highp float tmpvar_11;
  tmpvar_11 = clamp ((tmpvar_10 * tmpvar_10), 0.0, 1.0);
  highp vec4 tmpvar_12;
  tmpvar_12 = mix (displacement.color[0], displacement.color[2], tmpvar_11);
  outputValue_2.primary = tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = mix (displacement.color[1], displacement.color[3], tmpvar_11);
  outputValue_2.secondary = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14.w = 0.0;
  tmpvar_14.xyz = vertexInput_3.normal;
  highp float tmpvar_15;
  tmpvar_15 = -((displacement.modelview * tmpvar_14).z);
  highp float tmpvar_16;
  tmpvar_16 = (tmpvar_15 * tmpvar_15);
  highp float tmpvar_17;
  tmpvar_17 = (tmpvar_16 * tmpvar_16);
  highp float tmpvar_18;
  tmpvar_18 = (tmpvar_17 * tmpvar_17);
  highp vec4 tmpvar_19;
  tmpvar_19.xyz = (p_1.xyz - (vec3((
    (2.5 + (7.5 * tmpvar_18))
   + 
    ((0.002 + (0.02 * tmpvar_18)) * -(p_1.z))
  )) * normalize(p_1.xyz)));
  tmpvar_19.w = p_1.w;
  gl_Position = (view.projection * tmpvar_19);
  v_uv = outputValue_2.uv;
  v_primary = outputValue_2.primary;
  v_secondary = outputValue_2.secondary;
//flyoverManeuver_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
struct Style {
  highp float alpha;
varying highp vec2 v_uv;
varying lowp vec4 v_primary;
varying lowp vec4 v_secondary;
uniform Style style;
uniform sampler2D textureMap;
void main ()
  mediump float distance_1;
  lowp vec4 framebuffer_2;
  mediump vec4 tmpvar_3;
  tmpvar_3 = gl_LastFragData[0];
  framebuffer_2 = tmpvar_3;
  lowp float tmpvar_4;
  tmpvar_4 = texture2D (textureMap, v_uv).z;
  distance_1 = tmpvar_4;
  lowp float tmpvar_5;
  mediump float tmpvar_6;
  tmpvar_6 = clamp ((distance_1 * 48.0), 0.0, 1.0);
  tmpvar_5 = tmpvar_6;
  lowp float tmpvar_7;
  mediump float tmpvar_8;
  tmpvar_8 = clamp (((distance_1 * 12.0) - 1.0), 0.0, 1.0);
  tmpvar_7 = tmpvar_8;
  lowp vec3 tmpvar_9;
  tmpvar_9 = mix (mix (v_primary, v_secondary, tmpvar_5).xyz, framebuffer_2.xyz, tmpvar_7);
  lowp float tmpvar_10;
  tmpvar_10 = max (framebuffer_2.w, (1.0 - tmpvar_7));
  highp vec4 tmpvar_11;
  tmpvar_11.xyz = mix (framebuffer_2.xyz, tmpvar_9, style.alpha);
  tmpvar_11.w = tmpvar_10;
  gl_FragColor = tmpvar_11;
//flyoverMasked_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec3 position;
  highp vec2 texcoord;
struct Shared {
  highp mat4 projection;
  highp vec3 atmospherecolor;
  highp vec2 horizonvalues;
  highp vec3 lightdirection;
  highp float nightlightfade;
struct Transform {
  highp mat4 modelview;
  highp mat4 modelmat;
struct Clip {
  highp vec4 clipPlanes[6];
struct Material {
  highp float blendfactor;
struct Texcoords {
  highp vec2 offset;
  highp vec2 scale;
struct VertexOut {
  highp vec2 uv;
  lowp float atmosphere;
attribute highp vec3 vertexInput_position;
attribute highp vec2 vertexInput_texcoord;
uniform Shared shared;
uniform Transform transform;
uniform Clip clip;
uniform Material material;
uniform Texcoords texcoords;
uniform sampler2D atmosphere;
varying highp vec2 v_uv;
varying lowp float v_atmosphere;
void main ()
  VertexOut outputValue_1;
  VertexIn vertexInput_2;
  vertexInput_2.position = vertexInput_position;
  vertexInput_2.texcoord = vertexInput_texcoord;
  highp vec2 tmpvar_3;
  tmpvar_3 = ((vertexInput_2.texcoord * texcoords.scale) + texcoords.offset);
  highp vec2 tmpvar_4;
  tmpvar_4.x = tmpvar_3.x;
  tmpvar_4.y = (1.0 - tmpvar_3.y);
  outputValue_1.uv = tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = vertexInput_2.position;
  highp vec4 tmpvar_6;
  tmpvar_6 = (transform.modelview * tmpvar_5);
  highp vec2 horizon_7;
  horizon_7 = shared.horizonvalues;
  highp vec2 tmpvar_8;
  tmpvar_8.y = 0.5;
  tmpvar_8.x = ((sqrt(
    dot (tmpvar_6.xyz, tmpvar_6.xyz)
  ) - horizon_7.x) / horizon_7.y);
  outputValue_1.atmosphere = texture2D (atmosphere, tmpvar_8).x;
  gl_Position = ((shared.projection * tmpvar_6) + vec4(((1.0 - 
    max (0.0, material.blendfactor)
  ) * 0.02)));
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = vertexInput_2.position;
  gl_ClipDistance[0] = dot (clip.clipPlanes[0], tmpvar_9);
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = vertexInput_2.position;
  gl_ClipDistance[1] = dot (clip.clipPlanes[1], tmpvar_10);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = vertexInput_2.position;
  gl_ClipDistance[2] = dot (clip.clipPlanes[2], tmpvar_11);
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = vertexInput_2.position;
  gl_ClipDistance[3] = dot (clip.clipPlanes[3], tmpvar_12);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = vertexInput_2.position;
  gl_ClipDistance[4] = dot (clip.clipPlanes[4], tmpvar_13);
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = vertexInput_2.position;
  gl_ClipDistance[5] = dot (clip.clipPlanes[5], tmpvar_14);
  v_uv = outputValue_1.uv;
  v_atmosphere = outputValue_1.atmosphere;
//flyoverMasked_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
struct Shared {
  highp mat4 projection;
  highp vec3 atmospherecolor;
  highp vec2 horizonvalues;
  highp vec3 lightdirection;
  highp float nightlightfade;
struct Material {
  highp float blendfactor;
varying highp vec2 v_uv;
varying lowp float v_atmosphere;
uniform Shared shared;
uniform Material material;
uniform sampler2D diffuse;
uniform sampler2D alphamask;
void main ()
  lowp vec4 o_color_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (alphamask, v_uv);
  if ((tmpvar_2.x < 0.5)) {
    discard;
  };
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (diffuse, v_uv);
  highp vec3 tmpvar_4;
  tmpvar_4 = shared.atmospherecolor;
  o_color_1.xyz = (tmpvar_3.xyz + (vec3(v_atmosphere) * tmpvar_4));
  o_color_1.w = (tmpvar_3.w * material.blendfactor);
  gl_FragColor = o_color_1;
//flyoverMorph_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec3 position;
  highp float morphX;
  highp vec2 finercoord;
  highp vec2 coarsecoord;
struct Shared {
  highp mat4 projection;
  highp vec3 atmospherecolor;
  highp vec2 horizonvalues;
  highp vec3 lightdirection;
  highp float nightlightfade;
struct Transform {
  highp mat4 modelview;
  highp mat4 modelmat;
struct Clip {
  highp vec4 clipPlanes[6];
struct Material {
  highp float blendfactor;
struct Texcoords {
  highp vec2 offset;
  highp vec2 scale;
struct Morph {
  highp vec2 coarseScale;
  highp vec2 coarseOffset;
  highp vec2 factor;
struct VertexOut {
  highp vec2 fineruv;
  highp vec2 coarseuv;
  lowp float atmosphere;
attribute highp vec3 vertexInput_position;
attribute highp float vertexInput_morphX;
attribute highp vec2 vertexInput_finercoord;
attribute highp vec2 vertexInput_coarsecoord;
uniform Shared shared;
uniform Transform transform;
uniform Clip clip;
uniform Material material;
uniform Texcoords texcoords;
uniform Morph morph;
uniform sampler2D atmosphere;
varying highp vec2 v_fineruv;
varying highp vec2 v_coarseuv;
varying lowp float v_atmosphere;
void main ()
  VertexOut outputValue_1;
  VertexIn vertexInput_2;
  vertexInput_2.position = vertexInput_position;
  vertexInput_2.morphX = vertexInput_morphX;
  vertexInput_2.finercoord = vertexInput_finercoord;
  vertexInput_2.coarsecoord = vertexInput_coarsecoord;
  highp vec2 tmpvar_3;
  tmpvar_3 = ((vertexInput_2.finercoord * texcoords.scale) + texcoords.offset);
  highp vec2 tmpvar_4;
  tmpvar_4.x = tmpvar_3.x;
  tmpvar_4.y = (1.0 - tmpvar_3.y);
  outputValue_1.fineruv = tmpvar_4;
  highp vec2 tmpvar_5;
  tmpvar_5 = ((vertexInput_2.coarsecoord * morph.coarseScale) + morph.coarseOffset);
  highp vec2 tmpvar_6;
  tmpvar_6.x = tmpvar_5.x;
  tmpvar_6.y = (1.0 - tmpvar_5.y);
  outputValue_1.coarseuv = tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.x = mix (vertexInput_2.position.x, vertexInput_2.morphX, morph.factor.x);
  tmpvar_7.y = vertexInput_2.position.y;
  tmpvar_7.z = vertexInput_2.position.z;
  highp vec4 tmpvar_8;
  tmpvar_8 = (transform.modelview * tmpvar_7);
  highp vec2 horizon_9;
  horizon_9 = shared.horizonvalues;
  highp vec2 tmpvar_10;
  tmpvar_10.y = 0.5;
  tmpvar_10.x = ((sqrt(
    dot (tmpvar_8.xyz, tmpvar_8.xyz)
  ) - horizon_9.x) / horizon_9.y);
  outputValue_1.atmosphere = texture2D (atmosphere, tmpvar_10).x;
  gl_Position = ((shared.projection * tmpvar_8) + vec4(((1.0 - 
    max (0.0, material.blendfactor)
  ) * 0.02)));
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = vertexInput_2.position;
  gl_ClipDistance[0] = dot (clip.clipPlanes[0], tmpvar_11);
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = vertexInput_2.position;
  gl_ClipDistance[1] = dot (clip.clipPlanes[1], tmpvar_12);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = vertexInput_2.position;
  gl_ClipDistance[2] = dot (clip.clipPlanes[2], tmpvar_13);
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = vertexInput_2.position;
  gl_ClipDistance[3] = dot (clip.clipPlanes[3], tmpvar_14);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = vertexInput_2.position;
  gl_ClipDistance[4] = dot (clip.clipPlanes[4], tmpvar_15);
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = vertexInput_2.position;
  gl_ClipDistance[5] = dot (clip.clipPlanes[5], tmpvar_16);
  v_fineruv = outputValue_1.fineruv;
  v_coarseuv = outputValue_1.coarseuv;
  v_atmosphere = outputValue_1.atmosphere;
//flyoverMorph_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
struct Shared {
  highp mat4 projection;
  highp vec3 atmospherecolor;
  highp vec2 horizonvalues;
  highp vec3 lightdirection;
  highp float nightlightfade;
struct Material {
  highp float blendfactor;
struct Morph {
  highp vec2 coarseScale;
  highp vec2 coarseOffset;
  highp vec2 factor;
varying highp vec2 v_fineruv;
varying highp vec2 v_coarseuv;
varying lowp float v_atmosphere;
uniform Shared shared;
uniform Material material;
uniform Morph morph;
uniform sampler2D finer;
uniform sampler2D coarse;
void main ()
  lowp vec4 o_color_1;
  lowp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = texture2D (finer, v_fineruv).xyz;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (coarse, v_coarseuv);
  highp vec4 tmpvar_4;
  tmpvar_4 = mix (tmpvar_2, tmpvar_3, morph.factor.y);
  o_color_1 = tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = shared.atmospherecolor;
  o_color_1.xyz = (o_color_1.xyz + (vec3(v_atmosphere) * tmpvar_5));
  o_color_1.w = (o_color_1.w * material.blendfactor);
  gl_FragColor = o_color_1;
//flyoverMorphBorder_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec3 position;
  highp float morphX;
  highp vec2 finermerccoord;
  highp vec2 finerflyovercoord;
  highp vec2 coarsemerccoord;
struct Shared {
  highp mat4 projection;
  highp vec3 atmospherecolor;
  highp vec2 horizonvalues;
  highp vec3 lightdirection;
  highp float nightlightfade;
struct Transform {
  highp mat4 modelview;
  highp mat4 modelmat;
struct Clip {
  highp vec4 clipPlanes[6];
struct Material {
  highp float blendfactor;
struct Texcoords {
  highp vec2 offset;
  highp vec2 scale;
struct Morph {
  highp vec2 coarseScale;
  highp vec2 coarseOffset;
  highp vec2 factor;
struct VertexOut {
  highp vec2 finersatelliteuv;
  highp vec2 finerflyoveruv;
  highp vec2 finerblenduv;
  highp vec2 coarsesatelliteuv;
  lowp float atmosphere;
attribute highp vec3 vertexInput_position;
attribute highp float vertexInput_morphX;
attribute highp vec2 vertexInput_finermerccoord;
attribute highp vec2 vertexInput_finerflyovercoord;
attribute highp vec2 vertexInput_coarsemerccoord;
uniform Shared shared;
uniform Transform transform;
uniform Clip clip;
uniform Material material;
uniform Texcoords texcoords;
uniform Morph morph;
uniform sampler2D atmosphere;
varying highp vec2 v_finersatelliteuv;
varying highp vec2 v_finerflyoveruv;
varying highp vec2 v_finerblenduv;
varying highp vec2 v_coarsesatelliteuv;
varying lowp float v_atmosphere;
void main ()
  VertexOut outputValue_1;
  VertexIn vertexInput_2;
  vertexInput_2.position = vertexInput_position;
  vertexInput_2.morphX = vertexInput_morphX;
  vertexInput_2.finermerccoord = vertexInput_finermerccoord;
  vertexInput_2.finerflyovercoord = vertexInput_finerflyovercoord;
  vertexInput_2.coarsemerccoord = vertexInput_coarsemerccoord;
  highp vec2 tmpvar_3;
  tmpvar_3 = ((vertexInput_2.finermerccoord * texcoords.scale) + texcoords.offset);
  highp vec2 tmpvar_4;
  tmpvar_4.x = tmpvar_3.x;
  tmpvar_4.y = (1.0 - tmpvar_3.y);
  outputValue_1.finersatelliteuv = tmpvar_4;
  highp vec2 tmpvar_5;
  tmpvar_5.x = vertexInput_2.finermerccoord.x;
  tmpvar_5.y = (1.0 - vertexInput_2.finermerccoord.y);
  outputValue_1.finerblenduv = tmpvar_5;
  highp vec2 tmpvar_6;
  tmpvar_6.x = vertexInput_2.finerflyovercoord.x;
  tmpvar_6.y = (1.0 - vertexInput_2.finerflyovercoord.y);
  outputValue_1.finerflyoveruv = tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = ((vertexInput_2.coarsemerccoord * morph.coarseScale) + morph.coarseOffset);
  highp vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (1.0 - tmpvar_7.y);
  outputValue_1.coarsesatelliteuv = tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.x = mix (vertexInput_2.position.x, vertexInput_2.morphX, morph.factor.x);
  tmpvar_9.y = vertexInput_2.position.y;
  tmpvar_9.z = vertexInput_2.position.z;
  highp vec4 tmpvar_10;
  tmpvar_10 = (transform.modelview * tmpvar_9);
  highp vec2 horizon_11;
  horizon_11 = shared.horizonvalues;
  highp vec2 tmpvar_12;
  tmpvar_12.y = 0.5;
  tmpvar_12.x = ((sqrt(
    dot (tmpvar_10.xyz, tmpvar_10.xyz)
  ) - horizon_11.x) / horizon_11.y);
  outputValue_1.atmosphere = texture2D (atmosphere, tmpvar_12).x;
  gl_Position = ((shared.projection * tmpvar_10) + vec4(((1.0 - 
    max (0.0, material.blendfactor)
  ) * 0.02)));
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = vertexInput_2.position;
  gl_ClipDistance[0] = dot (clip.clipPlanes[0], tmpvar_13);
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = vertexInput_2.position;
  gl_ClipDistance[1] = dot (clip.clipPlanes[1], tmpvar_14);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = vertexInput_2.position;
  gl_ClipDistance[2] = dot (clip.clipPlanes[2], tmpvar_15);
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = vertexInput_2.position;
  gl_ClipDistance[3] = dot (clip.clipPlanes[3], tmpvar_16);
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = vertexInput_2.position;
  gl_ClipDistance[4] = dot (clip.clipPlanes[4], tmpvar_17);
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = vertexInput_2.position;
  gl_ClipDistance[5] = dot (clip.clipPlanes[5], tmpvar_18);
  v_finersatelliteuv = outputValue_1.finersatelliteuv;
  v_finerflyoveruv = outputValue_1.finerflyoveruv;
  v_finerblenduv = outputValue_1.finerblenduv;
  v_coarsesatelliteuv = outputValue_1.coarsesatelliteuv;
  v_atmosphere = outputValue_1.atmosphere;
//flyoverMorphBorder_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
struct Shared {
  highp mat4 projection;
  highp vec3 atmospherecolor;
  highp vec2 horizonvalues;
  highp vec3 lightdirection;
  highp float nightlightfade;
struct Material {
  highp float blendfactor;
struct Morph {
  highp vec2 coarseScale;
  highp vec2 coarseOffset;
  highp vec2 factor;
varying highp vec2 v_finersatelliteuv;
varying highp vec2 v_finerflyoveruv;
varying highp vec2 v_finerblenduv;
varying highp vec2 v_coarsesatelliteuv;
varying lowp float v_atmosphere;
uniform Shared shared;
uniform Material material;
uniform Morph morph;
uniform sampler2D finerSatellite;
uniform sampler2D finerFlyover;
uniform sampler2D finerBlend;
uniform sampler2D coarseSatellite;
void main ()
  lowp vec4 o_color_1;
  lowp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = mix (texture2D (finerSatellite, v_finersatelliteuv).xyz, texture2D (finerFlyover, v_finerflyoveruv).xyz, texture2D (finerBlend, v_finerblenduv).x);
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (coarseSatellite, v_coarsesatelliteuv);
  highp vec4 tmpvar_4;
  tmpvar_4 = mix (tmpvar_2, tmpvar_3, morph.factor.y);
  o_color_1 = tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = shared.atmospherecolor;
  o_color_1.xyz = (o_color_1.xyz + (vec3(v_atmosphere) * tmpvar_5));
  o_color_1.w = (o_color_1.w * material.blendfactor);
  gl_FragColor = o_color_1;
//flyoverMorphNight_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec3 position;
  highp float morphX;
  highp vec2 finercoord;
  highp vec2 coarsecoord;
struct Shared {
  highp mat4 projection;
  highp vec3 atmospherecolor;
  highp vec2 horizonvalues;
  highp vec3 lightdirection;
  highp float nightlightfade;
struct Transform {
  highp mat4 modelview;
  highp mat4 modelmat;
struct Clip {
  highp vec4 clipPlanes[6];
struct Material {
  highp float blendfactor;
struct Texcoords {
  highp vec2 offset;
  highp vec2 scale;
struct Morph {
  highp vec2 coarseScale;
  highp vec2 coarseOffset;
  highp vec2 factor;
struct VertexOut {
  highp vec2 fineruv;
  highp vec2 coarseuv;
  lowp float atmosphere;
  lowp float nightLightIntensity;
attribute highp vec3 vertexInput_position;
attribute highp float vertexInput_morphX;
attribute highp vec2 vertexInput_finercoord;
attribute highp vec2 vertexInput_coarsecoord;
uniform Shared shared;
uniform Transform transform;
uniform Clip clip;
uniform Material material;
uniform Texcoords texcoords;
uniform Morph morph;
uniform sampler2D atmosphere;
varying highp vec2 v_fineruv;
varying highp vec2 v_coarseuv;
varying lowp float v_atmosphere;
varying lowp float v_nightLightIntensity;
void main ()
  VertexOut outputValue_1;
  VertexIn vertexInput_2;
  vertexInput_2.position = vertexInput_position;
  vertexInput_2.morphX = vertexInput_morphX;
  vertexInput_2.finercoord = vertexInput_finercoord;
  vertexInput_2.coarsecoord = vertexInput_coarsecoord;
  highp vec2 tmpvar_3;
  tmpvar_3 = ((vertexInput_2.finercoord * texcoords.scale) + texcoords.offset);
  highp vec2 tmpvar_4;
  tmpvar_4.x = tmpvar_3.x;
  tmpvar_4.y = (1.0 - tmpvar_3.y);
  outputValue_1.fineruv = tmpvar_4;
  highp vec2 tmpvar_5;
  tmpvar_5 = ((vertexInput_2.coarsecoord * morph.coarseScale) + morph.coarseOffset);
  highp vec2 tmpvar_6;
  tmpvar_6.x = tmpvar_5.x;
  tmpvar_6.y = (1.0 - tmpvar_5.y);
  outputValue_1.coarseuv = tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.x = mix (vertexInput_2.position.x, vertexInput_2.morphX, morph.factor.x);
  tmpvar_7.y = vertexInput_2.position.y;
  tmpvar_7.z = vertexInput_2.position.z;
  highp vec4 tmpvar_8;
  tmpvar_8 = (transform.modelview * tmpvar_7);
  highp vec2 horizon_9;
  horizon_9 = shared.horizonvalues;
  highp vec2 tmpvar_10;
  tmpvar_10.y = 0.5;
  tmpvar_10.x = ((sqrt(
    dot (tmpvar_8.xyz, tmpvar_8.xyz)
  ) - horizon_9.x) / horizon_9.y);
  outputValue_1.atmosphere = texture2D (atmosphere, tmpvar_10).x;
  gl_Position = ((shared.projection * tmpvar_8) + vec4(((1.0 - 
    max (0.0, material.blendfactor)
  ) * 0.02)));
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = vertexInput_2.position;
  highp float tmpvar_12;
  tmpvar_12 = clamp (dot (normalize(
    ((transform.modelmat * tmpvar_11).xyz / vec3(6000000.0, 6000000.0, 6000000.0))
  ), (
    -(shared.lightdirection)
   * vec3(5.0, 5.0, 5.0))), 0.0, 1.0);
  outputValue_1.nightLightIntensity = (tmpvar_12 * shared.nightlightfade);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = vertexInput_2.position;
  gl_ClipDistance[0] = dot (clip.clipPlanes[0], tmpvar_13);
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = vertexInput_2.position;
  gl_ClipDistance[1] = dot (clip.clipPlanes[1], tmpvar_14);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = vertexInput_2.position;
  gl_ClipDistance[2] = dot (clip.clipPlanes[2], tmpvar_15);
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = vertexInput_2.position;
  gl_ClipDistance[3] = dot (clip.clipPlanes[3], tmpvar_16);
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = vertexInput_2.position;
  gl_ClipDistance[4] = dot (clip.clipPlanes[4], tmpvar_17);
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = vertexInput_2.position;
  gl_ClipDistance[5] = dot (clip.clipPlanes[5], tmpvar_18);
  v_fineruv = outputValue_1.fineruv;
  v_coarseuv = outputValue_1.coarseuv;
  v_atmosphere = outputValue_1.atmosphere;
  v_nightLightIntensity = outputValue_1.nightLightIntensity;
//flyoverMorphNight_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
struct Shared {
  highp mat4 projection;
  highp vec3 atmospherecolor;
  highp vec2 horizonvalues;
  highp vec3 lightdirection;
  highp float nightlightfade;
struct Material {
  highp float blendfactor;
struct Morph {
  highp vec2 coarseScale;
  highp vec2 coarseOffset;
  highp vec2 factor;
varying highp vec2 v_fineruv;
varying highp vec2 v_coarseuv;
varying lowp float v_atmosphere;
varying lowp float v_nightLightIntensity;
uniform Shared shared;
uniform Material material;
uniform Morph morph;
uniform sampler2D finer;
uniform sampler2D coarse;
uniform sampler2D finerNight;
uniform sampler2D coarseNight;
void main ()
  lowp vec4 nightTexture_1;
  lowp vec4 o_color_2;
  lowp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = texture2D (finer, v_fineruv).xyz;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (coarse, v_coarseuv);
  highp vec4 tmpvar_5;
  tmpvar_5 = mix (tmpvar_3, tmpvar_4, morph.factor.y);
  o_color_2 = tmpvar_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (finerNight, v_fineruv);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (coarseNight, v_coarseuv);
  highp vec4 tmpvar_8;
  tmpvar_8 = mix (tmpvar_6, tmpvar_7, morph.factor.y);
  nightTexture_1 = tmpvar_8;
  lowp vec3 tmpvar_9;
  tmpvar_9.x = nightTexture_1.x;
  tmpvar_9.y = nightTexture_1.x;
  tmpvar_9.z = (nightTexture_1.x * 0.3999023);
  lowp vec3 tmpvar_10;
  tmpvar_10 = ((mat3(0.04798632, 0.04798632, 0.1199902, 0.04798632, 0.04798632, 0.1199902, 0.04798632, 0.04798632, 0.0) * o_color_2.xyz) + tmpvar_9);
  lowp vec3 tmpvar_11;
  tmpvar_11.x = mix (o_color_2.x, tmpvar_10.x, pow (v_nightLightIntensity, 1.299805));
  tmpvar_11.yz = mix (o_color_2.yz, tmpvar_10.yz, v_nightLightIntensity);
  o_color_2.xyz = mix (tmpvar_11, tmpvar_10, v_nightLightIntensity);
  lowp vec3 tmpvar_12;
  tmpvar_12 = vec3((1.0 - v_nightLightIntensity));
  highp vec3 tmpvar_13;
  tmpvar_13 = mix (o_color_2.xyz, ((o_color_2.xyz + 
    (vec3(v_atmosphere) * shared.atmospherecolor)
  ) * tmpvar_12), v_atmosphere);
  o_color_2.xyz = tmpvar_13;
  o_color_2.w = (o_color_2.w * material.blendfactor);
  gl_FragColor = o_color_2;
//flyoverNight_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec3 position;
  highp vec2 texcoord;
struct Shared {
  highp mat4 projection;
  highp vec3 atmospherecolor;
  highp vec2 horizonvalues;
  highp vec3 lightdirection;
  highp float nightlightfade;
struct Transform {
  highp mat4 modelview;
  highp mat4 modelmat;
struct Clip {
  highp vec4 clipPlanes[6];
struct Material {
  highp float blendfactor;
struct Texcoords {
  highp vec2 offset;
  highp vec2 scale;
struct VertexOut {
  highp vec2 uv;
  lowp float atmosphere;
  lowp float nightLightIntensity;
attribute highp vec3 vertexInput_position;
attribute highp vec2 vertexInput_texcoord;
uniform Shared shared;
uniform Transform transform;
uniform Clip clip;
uniform Material material;
uniform Texcoords texcoords;
uniform sampler2D atmosphere;
varying highp vec2 v_uv;
varying lowp float v_atmosphere;
varying lowp float v_nightLightIntensity;
void main ()
  VertexOut outputValue_1;
  VertexIn vertexInput_2;
  vertexInput_2.position = vertexInput_position;
  vertexInput_2.texcoord = vertexInput_texcoord;
  highp vec2 tmpvar_3;
  tmpvar_3 = ((vertexInput_2.texcoord * texcoords.scale) + texcoords.offset);
  highp vec2 tmpvar_4;
  tmpvar_4.x = tmpvar_3.x;
  tmpvar_4.y = (1.0 - tmpvar_3.y);
  outputValue_1.uv = tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = vertexInput_2.position;
  highp vec4 tmpvar_6;
  tmpvar_6 = (transform.modelview * tmpvar_5);
  highp vec2 horizon_7;
  horizon_7 = shared.horizonvalues;
  highp vec2 tmpvar_8;
  tmpvar_8.y = 0.5;
  tmpvar_8.x = ((sqrt(
    dot (tmpvar_6.xyz, tmpvar_6.xyz)
  ) - horizon_7.x) / horizon_7.y);
  outputValue_1.atmosphere = texture2D (atmosphere, tmpvar_8).x;
  gl_Position = ((shared.projection * tmpvar_6) + vec4(((1.0 - 
    max (0.0, material.blendfactor)
  ) * 0.02)));
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = vertexInput_2.position;
  highp float tmpvar_10;
  tmpvar_10 = clamp (dot (normalize(
    ((transform.modelmat * tmpvar_9).xyz / vec3(6000000.0, 6000000.0, 6000000.0))
  ), (
    -(shared.lightdirection)
   * vec3(5.0, 5.0, 5.0))), 0.0, 1.0);
  outputValue_1.nightLightIntensity = (tmpvar_10 * shared.nightlightfade);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = vertexInput_2.position;
  gl_ClipDistance[0] = dot (clip.clipPlanes[0], tmpvar_11);
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = vertexInput_2.position;
  gl_ClipDistance[1] = dot (clip.clipPlanes[1], tmpvar_12);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = vertexInput_2.position;
  gl_ClipDistance[2] = dot (clip.clipPlanes[2], tmpvar_13);
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = vertexInput_2.position;
  gl_ClipDistance[3] = dot (clip.clipPlanes[3], tmpvar_14);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = vertexInput_2.position;
  gl_ClipDistance[4] = dot (clip.clipPlanes[4], tmpvar_15);
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = vertexInput_2.position;
  gl_ClipDistance[5] = dot (clip.clipPlanes[5], tmpvar_16);
  v_uv = outputValue_1.uv;
  v_atmosphere = outputValue_1.atmosphere;
  v_nightLightIntensity = outputValue_1.nightLightIntensity;
//flyoverNight_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
struct Shared {
  highp mat4 projection;
  highp vec3 atmospherecolor;
  highp vec2 horizonvalues;
  highp vec3 lightdirection;
  highp float nightlightfade;
struct Material {
  highp float blendfactor;
varying highp vec2 v_uv;
varying lowp float v_atmosphere;
varying lowp float v_nightLightIntensity;
uniform Shared shared;
uniform Material material;
uniform sampler2D diffuse;
uniform sampler2D night;
void main ()
  lowp vec4 o_color_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (diffuse, v_uv);
  o_color_1.w = tmpvar_2.w;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (night, v_uv);
  lowp vec3 tmpvar_4;
  tmpvar_4.x = tmpvar_3.x;
  tmpvar_4.y = tmpvar_3.x;
  tmpvar_4.z = (tmpvar_3.x * 0.3999023);
  lowp vec3 tmpvar_5;
  tmpvar_5 = ((mat3(0.04798632, 0.04798632, 0.1199902, 0.04798632, 0.04798632, 0.1199902, 0.04798632, 0.04798632, 0.0) * tmpvar_2.xyz) + tmpvar_4);
  lowp vec3 tmpvar_6;
  tmpvar_6.x = mix (tmpvar_2.x, tmpvar_5.x, pow (v_nightLightIntensity, 1.299805));
  tmpvar_6.yz = mix (tmpvar_2.yz, tmpvar_5.yz, v_nightLightIntensity);
  o_color_1.xyz = mix (tmpvar_6, tmpvar_5, v_nightLightIntensity);
  lowp vec3 tmpvar_7;
  tmpvar_7 = vec3((1.0 - v_nightLightIntensity));
  highp vec3 tmpvar_8;
  tmpvar_8 = mix (o_color_1.xyz, ((o_color_1.xyz + 
    (vec3(v_atmosphere) * shared.atmospherecolor)
  ) * tmpvar_7), v_atmosphere);
  o_color_1.xyz = tmpvar_8;
  o_color_1.w = (tmpvar_2.w * material.blendfactor);
  gl_FragColor = o_color_1;
//flyoverNightDim_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec2 unit;
attribute highp vec2 vertexInput_unit;
void main ()
  VertexIn vertexInput_1;
  vertexInput_1.unit = vertexInput_unit;
  highp vec4 tmpvar_2;
  tmpvar_2.zw = vec2(0.0, 1.0);
  tmpvar_2.xy = vertexInput_1.unit;
  gl_Position = tmpvar_2;
//flyoverNightDim_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
struct Color {
  highp vec3 color;
uniform Color color;
void main ()
  lowp vec4 out_color_1;
  highp vec2 tmpvar_2;
  tmpvar_2 = color.color.zz;
  out_color_1.xy = (tmpvar_2 * gl_LastFragData[0].xy);
  highp float tmpvar_3;
  mediump vec3 y_4;
  y_4 = gl_LastFragData[0].xyz;
  tmpvar_3 = dot (color.color, y_4);
  out_color_1.z = tmpvar_3;
  out_color_1.w = gl_LastFragData[0].w;
  gl_FragColor = out_color_1;
//flyoverOverlay_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec3 position;
  highp vec2 texcoord;
struct Shared {
  highp mat4 projection;
  highp float offsetfactor;
struct Transform {
  highp mat4 modelview;
struct VertexOut {
  highp vec2 uv;
attribute highp vec3 vertexInput_position;
attribute highp vec2 vertexInput_texcoord;
uniform Shared shared;
uniform Transform transform;
varying highp vec2 v_uv;
void main ()
  VertexOut outputValue_1;
  VertexIn vertexInput_2;
  vertexInput_2.position = vertexInput_position;
  vertexInput_2.texcoord = vertexInput_texcoord;
  outputValue_1.uv = vertexInput_2.texcoord;
  outputValue_1.uv.y = (1.0 - outputValue_1.uv.y);
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = vertexInput_2.position;
  highp vec4 tmpvar_4;
  tmpvar_4 = (transform.modelview * tmpvar_3);
  highp float factor_5;
  factor_5 = shared.offsetfactor;
  highp vec4 tmpvar_6;
  tmpvar_6.xyz = (tmpvar_4.xyz - (vec3((
    (2.5 + (7.5 * factor_5))
   + 
    ((0.005 + factor_5) * -(tmpvar_4.z))
  )) * normalize(tmpvar_4.xyz)));
  tmpvar_6.w = tmpvar_4.w;
  gl_Position = (shared.projection * tmpvar_6);
  v_uv = outputValue_1.uv;
//flyoverOverlay_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
varying highp vec2 v_uv;
uniform sampler2D overlay;
void main ()
  lowp vec4 tmpvar_1;
  tmpvar_1 = texture2D (overlay, v_uv);
  gl_FragColor = tmpvar_1;
//flyoverRoadFillProcedural_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec3 position;
  highp vec3 normal;
  highp vec4 offset;
  highp vec2 uv;
struct View {
  highp mat4 projection;
struct Transform {
  highp mat4 modelview;
  highp float width;
struct VertexOut {
  highp vec2 uv;
attribute highp vec3 vertexInput_position;
attribute highp vec3 vertexInput_normal;
attribute highp vec4 vertexInput_offset;
attribute highp vec2 vertexInput_uv;
uniform View view;
uniform Transform transform;
varying highp vec2 v_uv;
void main ()
  VertexOut outputValue_1;
  VertexIn vertexInput_2;
  vertexInput_2.position = vertexInput_position;
  vertexInput_2.normal = vertexInput_normal;
  vertexInput_2.offset = vertexInput_offset;
  vertexInput_2.uv = vertexInput_uv;
  highp vec3 tmpvar_3;
  tmpvar_3.z = 1.0;
  tmpvar_3.xy = vertexInput_2.uv;
  outputValue_1.uv = (mat3(2.0, 0.0, 0.0, 0.0, 2.0, 0.0, -1.0, -1.0, 1.0) * tmpvar_3).xy;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = (vertexInput_2.position + (vertexInput_2.offset.xyz * vec3((vertexInput_2.offset.w * transform.width))));
  highp vec4 tmpvar_5;
  tmpvar_5 = (transform.modelview * tmpvar_4);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = vertexInput_2.normal;
  highp float tmpvar_7;
  tmpvar_7 = -((transform.modelview * tmpvar_6).z);
  highp float tmpvar_8;
  tmpvar_8 = (tmpvar_7 * tmpvar_7);
  highp float tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_8);
  highp float tmpvar_10;
  tmpvar_10 = (tmpvar_9 * tmpvar_9);
  highp vec4 tmpvar_11;
  tmpvar_11.xyz = (tmpvar_5.xyz - (vec3((
    (2.5 + (7.5 * tmpvar_10))
   + 
    ((0.002 + (0.02 * tmpvar_10)) * -(tmpvar_5.z))
  )) * normalize(tmpvar_5.xyz)));
  tmpvar_11.w = tmpvar_5.w;
  gl_Position = (view.projection * tmpvar_11);
  v_uv = outputValue_1.uv;
//flyoverRoadFillProcedural_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
struct Blend {
  highp float alpha;
struct Color {
  highp vec4 fill;
  highp vec4 stroke;
varying highp vec2 v_uv;
uniform Blend blend;
uniform Color color;
void main ()
  lowp float fillA_1;
  mediump float edgeStep_2;
  lowp vec2 nUv_3;
  lowp float radius_4;
  highp float tmpvar_5;
  tmpvar_5 = sqrt(dot (v_uv, v_uv));
  radius_4 = tmpvar_5;
  highp vec2 tmpvar_6;
  tmpvar_6 = normalize(v_uv);
  nUv_3 = tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = max (abs(dot (
    dFdx(v_uv)
  , nUv_3)), abs(dot (
    dFdy(v_uv)
  , nUv_3)));
  edgeStep_2 = tmpvar_7;
  mediump float edge0_8;
  edge0_8 = (1.0 - (2.0 * edgeStep_2));
  mediump float tmpvar_9;
  tmpvar_9 = clamp (((radius_4 - edge0_8) / (1.0 - edge0_8)), 0.0, 1.0);
  mediump float tmpvar_10;
  tmpvar_10 = (1.0 - (tmpvar_9 * (tmpvar_9 * 
    (3.0 - (2.0 * tmpvar_9))
  )));
  fillA_1 = tmpvar_10;
  if ((fillA_1 < 0.9)) {
    discard;
  };
  mediump vec3 x_11;
  x_11 = gl_LastFragData[0].xyz;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 0.0;
  tmpvar_12.xyz = mix (x_11, color.fill.xyz, ((color.fill.w * fillA_1) * blend.alpha));
  gl_FragColor = tmpvar_12;
//flyoverRoadFillTextured_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec3 position;
  highp vec3 normal;
  highp vec4 offset;
  highp vec2 uv;
struct View {
  highp mat4 projection;
struct Transform {
  highp mat4 modelview;
  highp float width;
struct VertexOut {
  highp vec2 uv;
attribute highp vec3 vertexInput_position;
attribute highp vec3 vertexInput_normal;
attribute highp vec4 vertexInput_offset;
attribute highp vec2 vertexInput_uv;
uniform View view;
uniform Transform transform;
varying highp vec2 v_uv;
void main ()
  VertexOut outputValue_1;
  VertexIn vertexInput_2;
  vertexInput_2.position = vertexInput_position;
  vertexInput_2.normal = vertexInput_normal;
  vertexInput_2.offset = vertexInput_offset;
  vertexInput_2.uv = vertexInput_uv;
  outputValue_1.uv = vertexInput_2.uv;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = (vertexInput_2.position + (vertexInput_2.offset.xyz * vec3((vertexInput_2.offset.w * transform.width))));
  highp vec4 tmpvar_4;
  tmpvar_4 = (transform.modelview * tmpvar_3);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = vertexInput_2.normal;
  highp float tmpvar_6;
  tmpvar_6 = -((transform.modelview * tmpvar_5).z);
  highp float tmpvar_7;
  tmpvar_7 = (tmpvar_6 * tmpvar_6);
  highp float tmpvar_8;
  tmpvar_8 = (tmpvar_7 * tmpvar_7);
  highp float tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_8);
  highp vec4 tmpvar_10;
  tmpvar_10.xyz = (tmpvar_4.xyz - (vec3((
    (2.5 + (7.5 * tmpvar_9))
   + 
    ((0.002 + (0.02 * tmpvar_9)) * -(tmpvar_4.z))
  )) * normalize(tmpvar_4.xyz)));
  tmpvar_10.w = tmpvar_4.w;
  gl_Position = (view.projection * tmpvar_10);
  v_uv = outputValue_1.uv;
//flyoverRoadFillTextured_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
struct Blend {
  highp float alpha;
struct Color {
  highp vec4 fill;
  highp vec4 stroke;
varying highp vec2 v_uv;
uniform Blend blend;
uniform Color color;
uniform sampler2D discMap;
void main ()
  lowp vec4 tmpvar_1;
  tmpvar_1 = texture2D (discMap, v_uv);
  if ((tmpvar_1.x < 0.9)) {
    discard;
  };
  mediump vec3 x_2;
  x_2 = gl_LastFragData[0].xyz;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = mix (x_2, color.fill.xyz, ((color.fill.w * tmpvar_1.x) * blend.alpha));
  gl_FragColor = tmpvar_3;
//flyoverRoadStrokeProcedural_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec3 position;
  highp vec3 normal;
  highp vec4 offset;
  highp vec2 uv;
struct View {
  highp mat4 projection;
struct Transform {
  highp mat4 modelview;
  highp float width;
struct VertexOut {
  highp vec2 uv;
attribute highp vec3 vertexInput_position;
attribute highp vec3 vertexInput_normal;
attribute highp vec4 vertexInput_offset;
attribute highp vec2 vertexInput_uv;
uniform View view;
uniform Transform transform;
varying highp vec2 v_uv;
void main ()
  highp vec4 pme_1;
  VertexOut outputValue_2;
  VertexIn vertexInput_3;
  vertexInput_3.position = vertexInput_position;
  vertexInput_3.normal = vertexInput_normal;
  vertexInput_3.offset = vertexInput_offset;
  vertexInput_3.uv = vertexInput_uv;
  highp vec3 tmpvar_4;
  tmpvar_4.z = 1.0;
  tmpvar_4.xy = vertexInput_3.uv;
  outputValue_2.uv = (mat3(2.0, 0.0, 0.0, 0.0, 2.0, 0.0, -1.0, -1.0, 1.0) * tmpvar_4).xy;
  highp float tmpvar_5;
  tmpvar_5 = outputValue_2.uv.y;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = (vertexInput_3.position + (vertexInput_3.offset.xyz * vec3((vertexInput_3.offset.w * transform.width))));
  highp vec4 tmpvar_7;
  tmpvar_7 = (transform.modelview * tmpvar_6);
  if (((tmpvar_5 * tmpvar_5) > 0.1)) {
    highp vec3 a_8;
    a_8 = vertexInput_3.normal;
    highp vec3 b_9;
    b_9 = vertexInput_3.offset.xyz;
    highp vec4 tmpvar_10;
    tmpvar_10.w = 0.0;
    tmpvar_10.xyz = normalize(((a_8.yzx * b_9.zxy) - (a_8.zxy * b_9.yzx)));
    pme_1 = (tmpvar_7 + ((
      (transform.modelview * (tmpvar_10 * vec4(tmpvar_5)))
     * vec4(transform.width)) * vec4(0.5, 0.5, 0.5, 0.5)));
  } else {
    pme_1 = tmpvar_7;
  };
  highp vec4 tmpvar_11;
  tmpvar_11.w = 0.0;
  tmpvar_11.xyz = vertexInput_3.normal;
  highp float tmpvar_12;
  tmpvar_12 = -((transform.modelview * tmpvar_11).z);
  highp float tmpvar_13;
  tmpvar_13 = (tmpvar_12 * tmpvar_12);
  highp float tmpvar_14;
  tmpvar_14 = (tmpvar_13 * tmpvar_13);
  highp float tmpvar_15;
  tmpvar_15 = (tmpvar_14 * tmpvar_14);
  highp vec4 tmpvar_16;
  tmpvar_16.xyz = (pme_1.xyz - (vec3((
    (2.5 + (7.5 * tmpvar_15))
   + 
    ((0.002 + (0.02 * tmpvar_15)) * -(pme_1.z))
  )) * normalize(pme_1.xyz)));
  tmpvar_16.w = pme_1.w;
  gl_Position = (view.projection * tmpvar_16);
  v_uv = outputValue_2.uv;
//flyoverRoadStrokeProcedural_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
struct Blend {
  highp float alpha;
struct Color {
  highp vec4 fill;
  highp vec4 stroke;
struct RibbonExtra {
  highp float ewidth;
varying highp vec2 v_uv;
uniform Blend blend;
uniform Color color;
uniform RibbonExtra ribbonExtra;
void main ()
  lowp vec3 fineC_1;
  lowp vec4 framebuffer_2;
  lowp vec4 computed_color_3;
  lowp float fillA_4;
  lowp float fillT_5;
  lowp float strokeA_6;
  mediump float edgeStep_7;
  lowp vec2 nUv_8;
  lowp float radius_9;
  highp float tmpvar_10;
  tmpvar_10 = sqrt(dot (v_uv, v_uv));
  radius_9 = tmpvar_10;
  highp vec2 tmpvar_11;
  tmpvar_11 = normalize(v_uv);
  nUv_8 = tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = max (abs(dot (
    dFdx(v_uv)
  , nUv_8)), abs(dot (
    dFdy(v_uv)
  , nUv_8)));
  edgeStep_7 = tmpvar_12;
  mediump float edge0_13;
  edge0_13 = (1.0 - (2.0 * edgeStep_7));
  mediump float tmpvar_14;
  tmpvar_14 = clamp (((radius_9 - edge0_13) / (1.0 - edge0_13)), 0.0, 1.0);
  mediump float tmpvar_15;
  tmpvar_15 = (1.0 - (tmpvar_14 * (tmpvar_14 * 
    (3.0 - (2.0 * tmpvar_14))
  )));
  strokeA_6 = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = ribbonExtra.ewidth;
  fillT_5 = tmpvar_16;
  mediump float edge0_17;
  edge0_17 = (fillT_5 - (2.0 * edgeStep_7));
  mediump float tmpvar_18;
  tmpvar_18 = clamp (((radius_9 - edge0_17) / (fillT_5 - edge0_17)), 0.0, 1.0);
  mediump float tmpvar_19;
  tmpvar_19 = (1.0 - (tmpvar_18 * (tmpvar_18 * 
    (3.0 - (2.0 * tmpvar_18))
  )));
  fillA_4 = tmpvar_19;
  highp vec4 tmpvar_20;
  tmpvar_20 = mix (color.stroke, color.fill, fillA_4);
  computed_color_3 = tmpvar_20;
  mediump vec4 tmpvar_21;
  tmpvar_21 = gl_LastFragData[0];
  framebuffer_2 = tmpvar_21;
  lowp float tmpvar_22;
  tmpvar_22 = (1.0 - strokeA_6);
  lowp vec3 tmpvar_23;
  tmpvar_23 = mix (mix (mix (vec3(0.3999023, 0.3999023, 0.3999023), framebuffer_2.xyz, framebuffer_2.w), framebuffer_2.xyz, (tmpvar_22 * tmpvar_22)), computed_color_3.xyz, computed_color_3.w);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (framebuffer_2.xyz, tmpvar_23, (strokeA_6 * blend.alpha));
  fineC_1 = tmpvar_24;
  highp vec4 tmpvar_25;
  tmpvar_25.xyz = fineC_1;
  tmpvar_25.w = min ((1.0 - (strokeA_6 * blend.alpha)), framebuffer_2.w);
  gl_FragColor = tmpvar_25;
//flyoverRoadStrokeTextured_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec3 position;
  highp vec3 normal;
  highp vec4 offset;
  highp vec2 uv;
struct View {
  highp mat4 projection;
struct Transform {
  highp mat4 modelview;
  highp float width;
struct RibbonExtra {
  highp float ewidth;
struct VertexOut {
  highp vec2 uv;
  highp vec2 uvf;
attribute highp vec3 vertexInput_position;
attribute highp vec3 vertexInput_normal;
attribute highp vec4 vertexInput_offset;
attribute highp vec2 vertexInput_uv;
uniform View view;
uniform Transform transform;
uniform RibbonExtra ribbonExtra;
varying highp vec2 v_uv;
varying highp vec2 v_uvf;
void main ()
  highp vec4 pme_1;
  VertexOut outputValue_2;
  VertexIn vertexInput_3;
  vertexInput_3.position = vertexInput_position;
  vertexInput_3.normal = vertexInput_normal;
  vertexInput_3.offset = vertexInput_offset;
  vertexInput_3.uv = vertexInput_uv;
  outputValue_2.uv = vertexInput_3.uv;
  outputValue_2.uvf = vertexInput_3.uv;
  outputValue_2.uvf.x = (vertexInput_3.uv.x + (vertexInput_3.offset.w * ribbonExtra.ewidth));
  highp float tmpvar_4;
  tmpvar_4 = ((vertexInput_3.uv.y - 0.5) * 2.0);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = (vertexInput_3.position + (vertexInput_3.offset.xyz * vec3((vertexInput_3.offset.w * transform.width))));
  highp vec4 tmpvar_6;
  tmpvar_6 = (transform.modelview * tmpvar_5);
  if (((tmpvar_4 * tmpvar_4) > 0.1)) {
    highp vec3 a_7;
    a_7 = vertexInput_3.normal;
    highp vec3 b_8;
    b_8 = vertexInput_3.offset.xyz;
    highp vec4 tmpvar_9;
    tmpvar_9.w = 0.0;
    tmpvar_9.xyz = normalize(((a_7.yzx * b_8.zxy) - (a_7.zxy * b_8.yzx)));
    outputValue_2.uvf.y = (outputValue_2.uvf.y + (tmpvar_4 * ribbonExtra.ewidth));
    pme_1 = (tmpvar_6 + ((
      (transform.modelview * (tmpvar_9 * vec4(tmpvar_4)))
     * vec4(transform.width)) * vec4(0.5, 0.5, 0.5, 0.5)));
  } else {
    pme_1 = tmpvar_6;
  };
  highp vec4 tmpvar_10;
  tmpvar_10.w = 0.0;
  tmpvar_10.xyz = vertexInput_3.normal;
  highp float tmpvar_11;
  tmpvar_11 = -((transform.modelview * tmpvar_10).z);
  highp float tmpvar_12;
  tmpvar_12 = (tmpvar_11 * tmpvar_11);
  highp float tmpvar_13;
  tmpvar_13 = (tmpvar_12 * tmpvar_12);
  highp float tmpvar_14;
  tmpvar_14 = (tmpvar_13 * tmpvar_13);
  highp vec4 tmpvar_15;
  tmpvar_15.xyz = (pme_1.xyz - (vec3((
    (2.5 + (7.5 * tmpvar_14))
   + 
    ((0.002 + (0.02 * tmpvar_14)) * -(pme_1.z))
  )) * normalize(pme_1.xyz)));
  tmpvar_15.w = pme_1.w;
  gl_Position = (view.projection * tmpvar_15);
  v_uv = outputValue_2.uv;
  v_uvf = outputValue_2.uvf;
//flyoverRoadStrokeTextured_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
struct Blend {
  highp float alpha;
struct Color {
  highp vec4 fill;
  highp vec4 stroke;
varying highp vec2 v_uv;
varying highp vec2 v_uvf;
uniform Blend blend;
uniform Color color;
uniform sampler2D discMap;
void main ()
  lowp vec3 fineC_1;
  lowp vec4 framebuffer_2;
  lowp vec4 color_computed_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (discMap, v_uvf);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (discMap, v_uv);
  highp vec4 tmpvar_6;
  tmpvar_6 = mix (color.stroke, color.fill, tmpvar_4.x);
  color_computed_3 = tmpvar_6;
  mediump vec4 tmpvar_7;
  tmpvar_7 = gl_LastFragData[0];
  framebuffer_2 = tmpvar_7;
  lowp float tmpvar_8;
  tmpvar_8 = (1.0 - tmpvar_5.x);
  lowp vec3 tmpvar_9;
  tmpvar_9 = mix (mix (mix (vec3(0.3999023, 0.3999023, 0.3999023), framebuffer_2.xyz, framebuffer_2.w), framebuffer_2.xyz, (tmpvar_8 * tmpvar_8)), color_computed_3.xyz, color_computed_3.w);
  highp vec3 tmpvar_10;
  tmpvar_10 = mix (framebuffer_2.xyz, tmpvar_9, (tmpvar_5.x * blend.alpha));
  fineC_1 = tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.xyz = fineC_1;
  tmpvar_11.w = min ((1.0 - (tmpvar_5.x * blend.alpha)), framebuffer_2.w);
  gl_FragColor = tmpvar_11;
//flyoverRoute_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec3 position;
  highp vec3 normal;
  highp vec4 offset;
  highp vec2 texcoord;
  highp float fraction;
struct View {
  highp mat4 projection;
struct Displacement {
  highp mat4 modelview;
  highp float width;
struct VertexOut {
  highp vec2 uv;
  highp float fraction;
attribute highp vec3 vertexInput_position;
attribute highp vec3 vertexInput_normal;
attribute highp vec4 vertexInput_offset;
attribute highp vec2 vertexInput_texcoord;
attribute highp float vertexInput_fraction;
uniform View view;
uniform Displacement displacement;
varying highp vec2 v_uv;
varying highp float v_fraction;
void main ()
  highp vec4 pm_1;
  VertexOut outputValue_2;
  VertexIn vertexInput_3;
  vertexInput_3.position = vertexInput_position;
  vertexInput_3.normal = vertexInput_normal;
  vertexInput_3.offset = vertexInput_offset;
  vertexInput_3.texcoord = vertexInput_texcoord;
  vertexInput_3.fraction = vertexInput_fraction;
  outputValue_2.uv = vertexInput_3.texcoord;
  outputValue_2.fraction = vertexInput_3.fraction;
  highp float tmpvar_4;
  tmpvar_4 = (outputValue_2.uv.y - 0.5);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = (vertexInput_3.position + ((vertexInput_3.offset.xyz * vec3(displacement.width)) * vertexInput_3.offset.www));
  highp vec4 tmpvar_6;
  tmpvar_6 = (displacement.modelview * tmpvar_5);
  pm_1 = tmpvar_6;
  if (((tmpvar_4 * tmpvar_4) > 0.0)) {
    highp vec4 move_7;
    highp vec3 a_8;
    a_8 = vertexInput_3.normal;
    highp vec3 b_9;
    b_9 = vertexInput_3.offset.xyz;
    highp vec4 tmpvar_10;
    tmpvar_10.w = 0.0;
    tmpvar_10.xyz = ((a_8.yzx * b_9.zxy) - (a_8.zxy * b_9.yzx));
    move_7 = (tmpvar_10 * vec4((tmpvar_4 * displacement.width)));
    move_7 = (displacement.modelview * move_7);
    pm_1 = (tmpvar_6 + move_7);
  };
  highp vec4 tmpvar_11;
  tmpvar_11.w = 0.0;
  tmpvar_11.xyz = vertexInput_3.normal;
  highp float tmpvar_12;
  tmpvar_12 = -((displacement.modelview * tmpvar_11).z);
  highp float tmpvar_13;
  tmpvar_13 = (tmpvar_12 * tmpvar_12);
  highp float tmpvar_14;
  tmpvar_14 = (tmpvar_13 * tmpvar_13);
  highp float tmpvar_15;
  tmpvar_15 = (tmpvar_14 * tmpvar_14);
  highp vec4 tmpvar_16;
  tmpvar_16.xyz = (pm_1.xyz - (vec3((
    (2.5 + (7.5 * tmpvar_15))
   + 
    ((0.002 + (0.02 * tmpvar_15)) * -(pm_1.z))
  )) * normalize(pm_1.xyz)));
  tmpvar_16.w = pm_1.w;
  gl_Position = (view.projection * tmpvar_16);
  v_uv = outputValue_2.uv;
  v_fraction = outputValue_2.fraction;
//flyoverRoute_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
struct Style {
  highp vec4 color;
  highp vec4 secondary;
  highp float split;
  highp int greater;
  highp float alphaThreshold;
varying highp vec2 v_uv;
varying highp float v_fraction;
uniform Style style;
uniform sampler2D textureMap;
void main ()
  lowp vec4 framebuffer_1;
  lowp vec4 baseColor_2;
  highp vec4 tmpvar_3;
  if ((v_fraction < style.split)) {
    tmpvar_3 = style.secondary;
  } else {
    tmpvar_3 = style.color;
  };
  baseColor_2 = tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (textureMap, v_uv);
  mediump vec4 tmpvar_5;
  tmpvar_5 = gl_LastFragData[0];
  framebuffer_1 = tmpvar_5;
  lowp vec4 tmpvar_6;
  tmpvar_6.xyz = mix (framebuffer_1.xyz, mix (framebuffer_1.xyz, baseColor_2.xyz, (tmpvar_4.x * baseColor_2.w)), framebuffer_1.w);
  tmpvar_6.w = (1.0 - (1.0 - (framebuffer_1.w * 
    (1.0 - tmpvar_4.x)
  )));
  gl_FragColor = tmpvar_6;
//flyoverTraffic_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec3 position;
  highp vec3 normal;
  highp vec3 offset;
  highp vec3 binormal;
  highp vec4 texcoord;
  highp vec3 bounds;
  highp vec4 misc;
  highp vec2 extension;
struct View {
  highp mat4 projection;
struct Displacement {
  highp mat4 modelview;
  highp float width;
  highp vec3 scaling;
struct Pattern {
  highp vec4 pattern;
struct VertexOut {
  highp vec2 uv;
  highp vec2 segment;
attribute highp vec3 vertexInput_position;
attribute highp vec3 vertexInput_normal;
attribute highp vec3 vertexInput_offset;
attribute highp vec3 vertexInput_binormal;
attribute highp vec4 vertexInput_texcoord;
attribute highp vec3 vertexInput_bounds;
attribute highp vec4 vertexInput_misc;
attribute highp vec2 vertexInput_extension;
uniform View view;
uniform Displacement displacement;
uniform Pattern pattern;
varying highp vec2 v_uv;
varying highp vec2 v_segment;
void main ()
  highp vec4 p_1;
  VertexOut outputValue_2;
  VertexIn vertexInput_3;
  vertexInput_3.position = vertexInput_position;
  vertexInput_3.normal = vertexInput_normal;
  vertexInput_3.offset = vertexInput_offset;
  vertexInput_3.binormal = vertexInput_binormal;
  vertexInput_3.texcoord = vertexInput_texcoord;
  vertexInput_3.bounds = vertexInput_bounds;
  vertexInput_3.misc = vertexInput_misc;
  vertexInput_3.extension = vertexInput_extension;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = vertexInput_3.position;
  p_1 = tmpvar_4;
  outputValue_2.uv = vertexInput_3.texcoord.xy;
  outputValue_2.segment = vertexInput_3.texcoord.zw;
  outputValue_2.uv.y = (outputValue_2.uv.y + vertexInput_3.bounds.y);
  outputValue_2.segment = (outputValue_2.segment + vertexInput_3.bounds.yy);
  highp float tmpvar_5;
  tmpvar_5 = (1.0/(pattern.pattern.x));
  highp float tmpvar_6;
  tmpvar_6 = fract(((
    (outputValue_2.uv.y * displacement.scaling.y)
   * tmpvar_5) - displacement.scaling.x));
  highp float tmpvar_7;
  tmpvar_7 = (clamp (tmpvar_6, (0.5 - pattern.pattern.y), (0.5 + pattern.pattern.y)) - tmpvar_6);
  highp float tmpvar_8;
  tmpvar_8 = sign(tmpvar_7);
  highp float tmpvar_9;
  if (((tmpvar_8 * tmpvar_8) > 0.0)) {
    tmpvar_9 = ((-(tmpvar_8) * (
      (0.5 - pattern.pattern.y)
     - 
      (tmpvar_8 * tmpvar_7)
    )) * pattern.pattern.x);
  } else {
    tmpvar_9 = vertexInput_3.misc.x;
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = ((vertexInput_3.offset * outputValue_2.uv.xxx) * vec3(displacement.width));
  p_1.xyz = (tmpvar_4.xyz + (tmpvar_10 + (
    (vertexInput_3.binormal * vec3(tmpvar_9))
   * vec3(displacement.width))));
  p_1.xyz = (p_1.xyz + ((
    (tmpvar_10 * outputValue_2.uv.xxx)
   * vertexInput_3.misc.zzz) * vec3((1.0 - 
    (displacement.scaling.z * vertexInput_3.misc.w)
  ))));
  outputValue_2.uv.y = (outputValue_2.uv.y + (tmpvar_9 * displacement.width));
  outputValue_2.uv = (outputValue_2.uv * vec2(tmpvar_5));
  outputValue_2.uv.y = ((outputValue_2.uv.y * displacement.scaling.y) - displacement.scaling.x);
  outputValue_2.segment = ((outputValue_2.segment * displacement.scaling.yy) * vec2(tmpvar_5));
  outputValue_2.segment = (outputValue_2.segment - displacement.scaling.xx);
  p_1 = (displacement.modelview * p_1);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 0.0;
  tmpvar_11.xyz = vertexInput_3.normal;
  highp float tmpvar_12;
  tmpvar_12 = -((displacement.modelview * tmpvar_11).z);
  highp float tmpvar_13;
  tmpvar_13 = (tmpvar_12 * tmpvar_12);
  highp float tmpvar_14;
  tmpvar_14 = (tmpvar_13 * tmpvar_13);
  highp float tmpvar_15;
  tmpvar_15 = (tmpvar_14 * tmpvar_14);
  highp vec4 tmpvar_16;
  tmpvar_16.xyz = (p_1.xyz - (vec3((
    (2.5 + (7.5 * tmpvar_15))
   + 
    ((0.002 + (0.02 * tmpvar_15)) * -(p_1.z))
  )) * normalize(p_1.xyz)));
  tmpvar_16.w = p_1.w;
  p_1 = (view.projection * tmpvar_16);
  gl_Position = p_1;
  v_uv = outputValue_2.uv;
  v_segment = outputValue_2.segment;
//flyoverTraffic_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
struct Pattern {
  highp vec4 pattern;
struct Style {
  highp vec4 color;
  highp vec4 glow;
  highp vec2 ramp;
struct Shared {
  highp float skew;
varying highp vec2 v_uv;
varying highp vec2 v_segment;
uniform Pattern pattern;
uniform Style style;
uniform Shared shared;
void main ()
  lowp vec3 C_1;
  lowp float skew_2;
  lowp vec4 framebuffer_3;
  lowp vec2 preF_4;
  lowp vec2 pre_5;
  lowp vec2 mask_6;
  highp float dsqr_7;
  lowp vec2 diff_8;
  lowp vec2 pixel_9;
  highp float tmpvar_10;
  tmpvar_10 = clamp (v_uv.y, v_segment.x, v_segment.y);
  highp float tmpvar_11;
  tmpvar_11 = fract(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12.x = 0.0;
  tmpvar_12.y = tmpvar_11;
  pixel_9 = tmpvar_12;
  highp vec2 tmpvar_13;
  tmpvar_13.x = v_uv.x;
  tmpvar_13.y = (v_uv.y - (tmpvar_10 - tmpvar_11));
  highp vec2 tmpvar_14;
  tmpvar_14 = (pixel_9 - tmpvar_13);
  diff_8 = tmpvar_14;
  highp vec2 tmpvar_15;
  tmpvar_15.x = 0.0;
  tmpvar_15.y = (clamp (tmpvar_11, (0.5 - pattern.pattern.y), (0.5 + pattern.pattern.y)) - tmpvar_11);
  diff_8 = (diff_8 + tmpvar_15);
  lowp float tmpvar_16;
  tmpvar_16 = dot (diff_8, diff_8);
  dsqr_7 = tmpvar_16;
  highp vec2 tmpvar_17;
  tmpvar_17 = clamp (((pattern.pattern.zw - vec2(dsqr_7)) * (style.ramp / 
    (abs(dFdx(v_uv)) + abs(dFdy(v_uv)))
  .xx)), vec2(0.0, 0.0), vec2(1.0, 1.0));
  mask_6 = tmpvar_17;
  highp vec2 tmpvar_18;
  tmpvar_18.x = 1.0;
  tmpvar_18.y = style.glow.w;
  highp vec2 tmpvar_19;
  tmpvar_19 = (mask_6 * tmpvar_18);
  pre_5 = tmpvar_19;
  lowp vec2 tmpvar_20;
  tmpvar_20 = clamp (pre_5, vec2(0.0, 0.0), vec2(1.0, 1.0));
  preF_4.x = tmpvar_20.x;
  preF_4.y = (tmpvar_20.y * (1.0 - tmpvar_20.x));
  lowp float tmpvar_21;
  tmpvar_21 = (tmpvar_20.x + preF_4.y);
  mediump vec4 tmpvar_22;
  tmpvar_22 = gl_LastFragData[0];
  framebuffer_3 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = (1.0 - ((shared.skew * tmpvar_21) * tmpvar_21));
  skew_2 = tmpvar_23;
  lowp float tmpvar_24;
  tmpvar_24 = (tmpvar_21 - (skew_2 * (1.0 - framebuffer_3.w)));
  lowp float tmpvar_25;
  if ((tmpvar_24 > 0.0)) {
    tmpvar_25 = tmpvar_24;
  } else {
    tmpvar_25 = 0.0;
  };
  highp vec3 tmpvar_26;
  tmpvar_26 = ((style.color.xyz * pre_5.xxx) + (style.glow.xyz * pre_5.yyy));
  C_1 = tmpvar_26;
  C_1 = ((mix (framebuffer_3.xyz, C_1, tmpvar_21) * vec3(tmpvar_25)) + (framebuffer_3.xyz * vec3((1.0 - tmpvar_25))));
  lowp vec4 tmpvar_27;
  tmpvar_27.xyz = C_1;
  tmpvar_27.w = (1.0 - ((skew_2 * 
    (1.0 - framebuffer_3.w)
  ) + tmpvar_25));
  gl_FragColor = tmpvar_27;
//solidLine_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec3 position;
struct View {
  highp mat4 modelViewProjection;
attribute highp vec3 vertexInput_position;
uniform View view;
void main ()
  VertexIn vertexInput_1;
  vertexInput_1.position = vertexInput_position;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = vertexInput_1.position;
  gl_Position = (view.modelViewProjection * tmpvar_2);
//solidLine_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
struct Style {
  highp vec4 color;
uniform Style style;
void main ()
  highp vec4 tmpvar_1;
  tmpvar_1 = style.color;
  gl_FragColor = tmpvar_1;
//stars_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec3 position;
  highp float color;
struct View {
  highp mat4 modelview;
  highp mat4 projection;
  highp float fadein;
  highp float pointsize;
struct VertexOut {
  highp float alpha;
attribute highp vec3 vertexInput_position;
attribute highp float vertexInput_color;
uniform View view;
varying highp float v_alpha;
void main ()
  highp vec4 pw_1;
  VertexOut outputValue_2;
  VertexIn vertexInput_3;
  vertexInput_3.position = vertexInput_position;
  vertexInput_3.color = vertexInput_color;
  outputValue_2.alpha = (vertexInput_3.color * view.fadein);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = vertexInput_3.position;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = (view.modelview * tmpvar_4).xyz;
  highp vec4 tmpvar_6;
  tmpvar_6 = (view.projection * tmpvar_5);
  pw_1.xyw = (tmpvar_6 / tmpvar_6.wwww).xyw;
  pw_1.z = 0.9999999;
  gl_PointSize = view.pointsize;
  gl_Position = pw_1;
  v_alpha = outputValue_2.alpha;
//stars_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
varying highp float v_alpha;
void main ()
  highp vec4 tmpvar_1;
  tmpvar_1.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_1.w = v_alpha;
  gl_FragColor = tmpvar_1;
//stenciledAlphaClear_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec2 position;
attribute highp vec2 vertexInput_position;
void main ()
  VertexIn vertexInput_1;
  vertexInput_1.position = vertexInput_position;
  highp vec4 tmpvar_2;
  tmpvar_2.zw = vec2(0.0, 1.0);
  tmpvar_2.xy = vertexInput_1.position;
  gl_Position = tmpvar_2;
//stenciledAlphaClear_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
void main ()
  lowp vec4 last_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = gl_LastFragData[0];
  last_1 = tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = last_1.xyz;
  gl_FragColor = tmpvar_3;
//tileBaseSurface_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec3 position;
  highp vec2 texcoord;
  highp vec2 texcoord2;
struct Element {
  highp mat4 modelview;
  highp vec2 tcScale;
  highp vec2 tcOffset;
  highp vec2 tcLimit;
struct Shared {
  highp mat4 projection;
  highp float levelFade;
  highp vec4 lineColor;
  highp vec4 backgroundColor;
  highp float majorSize;
  highp float minorSize;
  highp vec4 lineParams;
struct VertexOut {
  highp vec4 majorMinorVertex;
attribute highp vec3 vertexInput_position;
attribute highp vec2 vertexInput_texcoord;
attribute highp vec2 vertexInput_texcoord2;
uniform Element element;
uniform Shared shared;
varying highp vec4 v_majorMinorVertex;
void main ()
  VertexOut outputValue_1;
  VertexIn vertexInput_2;
  vertexInput_2.position = vertexInput_position;
  vertexInput_2.texcoord = vertexInput_texcoord;
  vertexInput_2.texcoord2 = vertexInput_texcoord2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = vertexInput_2.position;
  gl_Position = (shared.projection * (element.modelview * tmpvar_3));
  highp vec2 tmpvar_4;
  tmpvar_4 = (mix ((vertexInput_2.texcoord * element.tcScale), (
    (vertexInput_2.texcoord2 * element.tcScale)
   * element.tcLimit.yy), float(
    (element.tcScale.x >= element.tcLimit.x)
  )) + element.tcOffset);
  outputValue_1.majorMinorVertex.xy = (tmpvar_4 * vec2(shared.majorSize));
  outputValue_1.majorMinorVertex.zw = (tmpvar_4 * vec2(shared.minorSize));
  v_majorMinorVertex = outputValue_1.majorMinorVertex;
//tileBaseSurface_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
struct Shared {
  highp mat4 projection;
  highp float levelFade;
  highp vec4 lineColor;
  highp vec4 backgroundColor;
  highp float majorSize;
  highp float minorSize;
  highp vec4 lineParams;
varying highp vec4 v_majorMinorVertex;
uniform Shared shared;
void main ()
  lowp float grid_1;
  lowp vec4 g_2;
  mediump vec4 mi_3;
  lowp vec4 out_color_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = shared.lineParams;
  mi_3 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = clamp (((
    abs((fract((v_majorMinorVertex - vec4(0.5, 0.5, 0.5, 0.5))) - vec4(0.5, 0.5, 0.5, 0.5)))
   / 
    (abs(dFdx(v_majorMinorVertex)) + abs(dFdy(v_majorMinorVertex)))
  ) - mi_3), vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0));
  g_2 = tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_7 = min (g_2.x, g_2.y);
  lowp float tmpvar_8;
  tmpvar_8 = min (g_2.z, g_2.w);
  highp float tmpvar_9;
  tmpvar_9 = mix (tmpvar_8, tmpvar_7, shared.levelFade);
  grid_1 = tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = vec4((1.0 - grid_1));
  highp vec4 tmpvar_11;
  tmpvar_11 = ((shared.lineColor * tmpvar_10) + (shared.backgroundColor * vec4(grid_1)));
  out_color_4 = tmpvar_11;
  gl_FragColor = out_color_4;
//tileSkybox_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec3 position;
  highp vec2 texcoord;
struct Element {
  highp mat4 modelview;
  highp float blendfactor;
struct View {
  highp mat4 projection;
struct VertexOut {
  highp vec2 iTextureCoord0;
attribute highp vec3 vertexInput_position;
attribute highp vec2 vertexInput_texcoord;
uniform Element element;
uniform View view;
varying highp vec2 v_iTextureCoord0;
void main ()
  VertexOut outputValue_1;
  VertexIn vertexInput_2;
  vertexInput_2.position = vertexInput_position;
  vertexInput_2.texcoord = vertexInput_texcoord;
  highp vec2 tmpvar_3;
  tmpvar_3.x = vertexInput_2.texcoord.x;
  tmpvar_3.y = (1.0 - vertexInput_2.texcoord.y);
  outputValue_1.iTextureCoord0 = tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = vertexInput_2.position;
  gl_Position = (view.projection * (element.modelview * tmpvar_4));
  gl_Position.z = (gl_Position.z - ((
    sign(element.blendfactor)
   * 
    clamp ((1.0 - abs(element.blendfactor)), 0.0, 1.0)
  ) * 0.02));
  v_iTextureCoord0 = outputValue_1.iTextureCoord0;
//tileSkybox_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
struct Element {
  highp mat4 modelview;
  highp float blendfactor;
varying highp vec2 v_iTextureCoord0;
uniform Element element;
uniform sampler2D textureMap0;
void main ()
  mediump vec4 out_color_1;
  mediump vec4 tex0_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (textureMap0, v_iTextureCoord0);
  tex0_2 = tmpvar_3;
  mediump vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = tex0_2.xyz;
  out_color_1.xyz = tmpvar_4.xyz;
  highp float tmpvar_5;
  tmpvar_5 = abs(element.blendfactor);
  out_color_1.w = tmpvar_5;
  gl_FragColor = out_color_1;
//imageCopy_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec2 position;
  highp vec2 texcoord;
struct VertexOut {
  highp vec2 texcoord;
attribute highp vec2 vertexInput_position;
attribute highp vec2 vertexInput_texcoord;
varying highp vec2 v_texcoord;
void main ()
  VertexOut outputValue_1;
  VertexIn vertexInput_2;
  vertexInput_2.position = vertexInput_position;
  vertexInput_2.texcoord = vertexInput_texcoord;
  outputValue_1.texcoord = vertexInput_2.texcoord;
  highp vec4 tmpvar_3;
  tmpvar_3.zw = vec2(0.0, 1.0);
  tmpvar_3.xy = ((vertexInput_2.position * vec2(2.0, 2.0)) - vec2(1.0, 1.0));
  gl_Position = tmpvar_3;
  v_texcoord = outputValue_1.texcoord;
//imageCopy_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
varying highp vec2 v_texcoord;
uniform sampler2D textureMap;
void main ()
  lowp vec4 tmpvar_1;
  tmpvar_1 = texture2D (textureMap, v_texcoord);
  gl_FragColor = tmpvar_1;
@(#)PROGRAM:VectorKit  PROJECT:VectorKit-
//clear_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec2 position;
struct ClearConstants {
  highp vec4 color;
  highp float depth;
attribute highp vec2 vertexInput_position;
uniform ClearConstants clearConstants;
void main ()
  VertexIn vertexInput_1;
  vertexInput_1.position = vertexInput_position;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xy = vertexInput_1.position;
  tmpvar_2.z = clearConstants.depth;
  gl_Position = tmpvar_2;
//clear_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
struct ClearConstants {
  highp vec4 color;
  highp float depth;
uniform ClearConstants clearConstants;
void main ()
  highp vec4 tmpvar_1;
  tmpvar_1 = clearConstants.color;
  gl_FragColor = tmpvar_1;
//coloredText_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec2 position;
  highp vec2 texcoord;
  lowp vec4 color;
  lowp vec4 outlinecolor;
struct View {
  highp mat4 modelViewProjectionMatrix;
struct VertexOut {
  highp vec2 texcoord;
  lowp vec4 color;
  lowp vec4 outlinecolor;
attribute highp vec2 vertexInput_position;
attribute highp vec2 vertexInput_texcoord;
attribute lowp vec4 vertexInput_color;
attribute lowp vec4 vertexInput_outlinecolor;
uniform View view;
varying highp vec2 v_texcoord;
varying lowp vec4 v_color;
varying lowp vec4 v_outlinecolor;
void main ()
  VertexOut outputValue_1;
  VertexIn vertexInput_2;
  vertexInput_2.position = vertexInput_position;
  vertexInput_2.texcoord = vertexInput_texcoord;
  vertexInput_2.color = vertexInput_color;
  vertexInput_2.outlinecolor = vertexInput_outlinecolor;
  outputValue_1.texcoord = vertexInput_2.texcoord;
  outputValue_1.color = vertexInput_2.color;
  outputValue_1.outlinecolor = vertexInput_2.outlinecolor;
  highp vec4 tmpvar_3;
  tmpvar_3.zw = vec2(0.0, 1.0);
  tmpvar_3.xy = vertexInput_2.position;
  gl_Position = (view.modelViewProjectionMatrix * tmpvar_3);
  v_texcoord = outputValue_1.texcoord;
  v_color = outputValue_1.color;
  v_outlinecolor = outputValue_1.outlinecolor;
//coloredText_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
varying highp vec2 v_texcoord;
varying lowp vec4 v_color;
varying lowp vec4 v_outlinecolor;
uniform sampler2D textureMap;
void main ()
  lowp vec4 tmpvar_1;
  tmpvar_1 = texture2D (textureMap, v_texcoord);
  gl_FragColor = ((v_color * tmpvar_1.xxxx) + (v_outlinecolor * tmpvar_1.yyyy));
//shadedColor_vertex
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
#extension GL_APPLE_clip_distance : enable
varying highp float gl_ClipDistance[6];
struct VertexIn {
  highp vec3 position;
  highp vec3 normal;
struct Shared {
  highp mat4 view;
  highp mat4 projection;
struct Props {
  highp vec4 color;
  highp vec3 eyelightdir;
  highp vec3 scale;
  highp mat4 modelview;
struct VertexOut {
  highp vec3 normal;
attribute highp vec3 vertexInput_position;
attribute highp vec3 vertexInput_normal;
uniform Shared shared;
uniform Props props;
varying highp vec3 v_normal;
void main ()
  VertexOut outputValue_1;
  VertexIn vertexInput_2;
  vertexInput_2.position = vertexInput_position;
  vertexInput_2.normal = vertexInput_normal;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = props.modelview[0].xyz;
  tmpvar_3[1] = props.modelview[1].xyz;
  tmpvar_3[2] = props.modelview[2].xyz;
  outputValue_1.normal = (tmpvar_3 * vertexInput_2.normal);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = (props.scale * vertexInput_2.position);
  gl_Position = ((shared.projection * props.modelview) * tmpvar_4);
  v_normal = outputValue_1.normal;
//shadedColor_fragment
#version 100
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shader_framebuffer_fetch : enable
struct Props {
  highp vec4 color;
  highp vec3 eyelightdir;
  highp vec3 scale;
  highp mat4 modelview;
varying highp vec3 v_normal;
uniform Props props;
void main ()
  highp float tmpvar_1;
  tmpvar_1 = dot (v_normal, props.eyelightdir);
  highp vec4 tmpvar_2;
  tmpvar_2.x = (tmpvar_1 * props.color.x);
  tmpvar_2.y = (tmpvar_1 * props.color.y);
  tmpvar_2.z = (tmpvar_1 * props.color.z);
  tmpvar_2.w = props.color.w;
  gl_FragColor = tmpvar_2;
NSt3__117bad_function_callE
NSt3__120__shared_ptr_emplaceIN3geo4TaskENS_9allocatorIS2_EEEE
ZN3geo9TaskQueue7async_bEU13block_pointerFvvEPKNS_9TaskGroupEE3$_0
NSt3__110__function6__funcIZN3geo9TaskQueue7async_bEU13block_pointerFvvEPKNS2_9TaskGroupEE3$_0NS_9allocatorIS9_EES4_EE
NSt3__110__function6__baseIFvvEEE
PFbRN3gss10ibitstreamERNS_16StylePropertySetINS_10PropertyIDEEEyNS_18StylePropertyIndexERKNS_15DecodingContextERNSt3__119basic_ostringstreamIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEE
FbRN3gss10ibitstreamERNS_16StylePropertySetINS_10PropertyIDEEEyNS_18StylePropertyIndexERKNS_15DecodingContextERNSt3__119basic_ostringstreamIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEE
NSt3__110__function6__funcIPFbRN3gss10ibitstreamERNS2_16StylePropertySetINS2_10PropertyIDEEEyNS2_18StylePropertyIndexERKNS2_15DecodingContextERNS_19basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEEENSG_ISL_EESK_EE
NSt3__110__function6__baseIFbRN3gss10ibitstreamERNS2_16StylePropertySetINS2_10PropertyIDEEEyNS2_18StylePropertyIndexERKNS2_15DecodingContextERNS_19basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEE
PFbRN3gss10ibitstreamERNS_16StylePropertySetINS_15ScenePropertyIDEEEyNS_24SceneConfigPropertyIndexERKNS_15DecodingContextERNSt3__119basic_ostringstreamIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEE
FbRN3gss10ibitstreamERNS_16StylePropertySetINS_15ScenePropertyIDEEEyNS_24SceneConfigPropertyIndexERKNS_15DecodingContextERNSt3__119basic_ostringstreamIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEE
NSt3__110__function6__funcIPFbRN3gss10ibitstreamERNS2_16StylePropertySetINS2_15ScenePropertyIDEEEyNS2_24SceneConfigPropertyIndexERKNS2_15DecodingContextERNS_19basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEEENSG_ISL_EESK_EE
NSt3__110__function6__baseIFbRN3gss10ibitstreamERNS2_16StylePropertySetINS2_15ScenePropertyIDEEEyNS2_24SceneConfigPropertyIndexERKNS2_15DecodingContextERNS_19basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEE
Trying to remove child that is not a child: %s
Trying to add child tile but slot already occupied: %u %u %u %u
No child slot match this tile: %s
Unsupported LodMode.
Setting lod scale to: %f
Failed to convert image from: %d to %d
Tried to convert image without base data.
Unable to convert to %d
Unsupported pixel format: %d
VKMapView transition to tracking passed invalid start location!
VKMapView setContentsScale %f
VKMapView setBounds, size(%f, %f)
VKMapView setHidden: %s
VKMapView did finish suspension snapshot
VKMapView did enter background
VKMapView will enter foreground
Should not wait indefinitely on job: %u
Error reading meta data loaded from %u %u %u
Failed to load file %u %u %u
Missing loader! Unable to fetch request %u %u %u
Failed to load %u %u %u
Failed to load file %s
Failed to load label data for tile %u %u %u
Failed to load traffic data for tile %u %u %u
Failed to load road data for tile %u %u %u
Got no actor when loading c3m mesh for tile %u %u %u
Inavlidating geometry for %u %u %u
Got no actor when loading height mesh for tile %u %u %u
Failed to load height map for tile  %u %u %u
Unknown meta file extension: %s
Failed to get height field altitude bounds for tile %u %u %u
Failed to load height bounds for tile %u %u %u
Failed to load hires texture for tile %u %u %u
Got no actor when loading height fallback data for tile %u %u %u
Failed to load height fallback data for tile %u %u %u
Got no actor when loading base surface for tile %u %u %u
Failed to load base surface for tile %u %u %u
Missing input node: %s
Error reading c3m chunk!
Error reading mesh in c3m chunk!
Error reading mesh texture name length in c3m chunk!
Error reading mesh vertex count in c3m chunk!
Error reading mesh index count in c3m chunk!
Failed to read vertices from c3m chunk!
Failed to read texture coordinates from c3m chunk!
Failed to load index data from c3m chunk!
Failed to mipmap image %d %d %d
Failed to download image %d %d %d %d
Trying to page non JPEG data: %d %d %d %d
Failed to decode image %d %d %d %d
Missing input! Unable to fetch request %d %d %d %d | %d | %d | %d | %d | %d | %d
DTM header verification failed.
DTM header bits per pixel mismatch with PNG Data
Unknown DTM format
Missing node, can not load meta data!
Failed to load DTM: %u %u %u
Unhandled tile style found: %d
Missing latitude in trigger specification
Missing longitude in trigger specification
Missing radius in trigger specification
Missing altitude in trigger specification
Missing region in trigger specification
Missing version in trigger specification
Malformed trigger tag in xml: missing data node
Malformed trigger tag in xml: missing shape node
Malformed trigger tag in xml: missing c3meshdata node
No data type specified for trigger
Invalid data type in trigger specification: %s
No data url specified for trigger
No meta url specified for trigger
Failed to load start level of c3 mesh trigger
No shape type specified in trigger
Missing latitude in sphere shape trigger specification
Missing longitude in sphere shape trigger specification
Missing radius in sphere shape trigger specification
Unknown shape type in trigger
Failed to get fallback dtm with key %u %u %u
Failed to get invalide value fallback dtm with key %u %u %u
Skeleton traffic tile %@ implicates bad section (start: %f, end: %f, valid: %lu,%lu, skeleton record: %f,%f)
Skeleton traffic tile %@ implicates flow start/end offsets out of range  start: %f end:%f  section len = %ld
Skeleton traffic tile %@ implicates inverted road offsets: %f->%f 
Skeleton traffic tile implicates bad section (start: %f, end: %f, valid: %lu,%lu, skeleton record: %f,%f)
Resuming VKPuckAnimator
Pausing VKPuckAnimator
Stopping VKPuckAnimator
Starting VKPuckAnimator
Failed to get height for road points
C3M3 data block too short
C3M3 invalid header
C3M3 Unknown block type: %d
Unknown SG type.
C3M3 mesh data block too short
C3M3 LZMA mesh decode failed
C3M3 uncompressed mesh header data block too short
C3M3 index list not a multiple of 3
C3M3 uncompressed mesh body data block too short
C3M3 index out of bounds
C3M3 Unknown submesh type.
Index pointing outside vertex buffer
Failed to intialize the lzma decoder.
Failed to decode lzma data.
C3M3 LZMA texture decode failed
C3M3 texture won't fit into buffer
C3M3 failed to convert image format for PNG image
C3M3 unsupported texture format: %d
C3M3 unsupported image format
C3M3 unsupported image texture extension
C3M3 failed to load image data for image
C3M3 Unknown material type.
C3M3: Unknown header type %d
C3M v2 not supported
Failed to find c3m mesh in body!
Failed to find c3m mesh with name %s
Failed to load c3m model %s
Failed to load c3b image list!
Failed to find image data %s referenced in c3b!
Failed to load image data for image %s in c3b!
Unregister Model Placeholder [%u, %u, %u]->%p
Register Model Placeholder [%u, %u, %u]->%p
Failed to load ObjectTree model (region: %u version: %u entity: %u lod: %u)
Failed to initialize thread attributes.
Failed to destroy thread attributes.
Failed to join thread. A deadlock was detected or the value of thread specifies the calling thread.
Failed to join thread. The implementation has detected that the value specified by thread does not refer to a joinable thread.
Failed to join thread. No thread could be found corresponding to that specified by the given thread ID, thread.
Tile without geometry in loaded geometry list!
Tile without hires textures in loaded hires textures list!
Tile without overlay in loaded overlay list!
Tile without road in loaded road list!
Tile without traffic in loaded road list!
Tile without label data in loaded LabelData list!
Tile without fallback in loaded fallback list!
Tile without surface in loaded surface list!
Failed to get memory usage!
Selected 0 tiles keys for current camera
Tile %@ in current unloaded state for %.2f seconds - %@
source %@ wants grid size %f, min display z: %ld, min download z: %ld. This is probably a bug!
Failed to load Traffic file
Failed to load DTM file
Not recognized as ASTC data %d x %d x %d
ASTC, Invalid block size combination %d x %d
Invalid use: This request was made for a mesh actor
Invalid use: This request was made for altitude bounds only
Failed to create geometry %s
Zip file smaller than the zip header
No tile set attached to %s. Culling disabled!
No tile manager attached to %s. Culling disabled!
C3bLoadJob: Failed to load DTM for %u %u %u
Failed to create node for %u %u %u
Unknown mesh type.
File loader not available for %s
Error creating processing subjob for %u %u %u
MDDisplayLayer destroying render layer
MDDisplayLayer creating new render layer
Unsupported output format for jpeg loader.
Failed to load sky model.
Adjustment not applied, invalid depth range, znear = %f zfar = %f
Failed to create time zone: %s
Unhandled node type: %d fall back to C3M_SG_NODE
Missing texture
Stroke Z index (%d) in style %s is too large - clamping to 255
Fill Z index (%d) in style %s is too large - clamping to 255
This item is not added to loader %s
Removing item: %s
This item already exist in mItems, skipping insert: %s
This item is already managed, skipping add: %s
Missing input slot! Unable to fetch request %u %u %u
Failed to find key (%s) in string: %s
Nav Camera Started With Pounce but is already tracking
Nav Camera Started With Pounce to lat:%f lon:%f with course:%f
Invalid venue building feature id (%llu). Venue id: %llu, building id: %llu, tile key (%u.%u.%u)
C3M3 Could not create EdgebreakerDecodeTableCache.
Index list must be a multiple of three
Failed do decode submesh.
RoadTile isn't setup correct
Missing tour_region in tour trigger specification
Mismatching number of indices, indexCount: %zu, triangulatedIndexCount: %zu
Unknown id: %d length: %d
Morton bit setup must be 5/5/6.
Invalid c3mm file!
Meta levels are not defined
ObjectTree entry is outside specified data section
No meta level for file index
Invalid c3mm file, size (%u) is less than header size (%d)
Invalid file type!
Failed to load c3mm file!
Failed to load c3mm lzma chunk!
Failed to load C3MM data section
C3MM file index is missing
C3MM file index is missing when loading data section
Unknown structure type in root!
Unknown tile state!
Detected stale render item %p in command buffer %d.  Please file a radar!
Detected stale texture resource %p in render item within command buffer %d  Please file a radar!
%s:%d STYL Parse Error Here: %{public}s
%s&z=%d&x=%d&y=%d&h=0
%s_%i_%i_%i.c3h
%s_%i_%i_%i.c3b
%s%i/%i/map_%i_%i_%i%s
%s&z=%d&x=%d&y=%d&h=%d
%s%i/%i/map_%i_%i_%i_%i%s
southpole
northpole
T@"NSString",R,C
altitude.xml
Transit Item:
Tile:%@
Tile:%@
LayoutZoom:%.2f
iconManager
T@"VKIconManager",R,N
shieldManager
T@"VKShieldManager",R,N
gglTextureManager
T@"VKGGLTextureManager",R,N
resourceManager
T@"VKResourceManager",R,N
stylesheetVendor
T{shared_ptr<md::StylesheetVendor>=^{StylesheetVendor}^{__shared_weak_count}},R,N,V_stylesheetVendor
T^{Device=i{shared_ptr<ggl::Device>=^{Device}^{__shared_weak_count}}{unique_ptr<md::SharedDeviceResources, std::__1::default_delete<md::SharedDeviceResources> >={__compressed_pair<md::SharedDeviceResources *, std::__1::default_delete<md::SharedDeviceResources> >=^{SharedDeviceResources}}}},R,N
gglDevice
T^{Device=^^?{DeviceVersion=II}{DeviceCapabilities=BBIII{DeviceSize=III}}{DeviceAPIProperties=id}ii},R,N
alphaAtlas
T^{AlphaAtlas=BIIIf{unique_ptr<ggl::Texture2D, std::__1::default_delete<ggl::Texture2D> >={__compressed_pair<ggl::Texture2D *, std::__1::default_delete<ggl::Texture2D> >=^{Texture2D}}}},R,N
highInflationAlphaAtlas
T^{IsoAlphaAtlas=IIf{unique_ptr<ggl::Texture2D, std::__1::default_delete<ggl::Texture2D> >={__compressed_pair<ggl::Texture2D *, std::__1::default_delete<ggl::Texture2D> >=^{Texture2D}}}{shared_ptr<ggl::SamplerState>=^{SamplerState}^{__shared_weak_count}}},R,N
isoAlphaAtlas
distanceAtlas
T^{DistanceAtlas=III{unique_ptr<ggl::Texture2D, std::__1::default_delete<ggl::Texture2D> >={__compressed_pair<ggl::Texture2D *, std::__1::default_delete<ggl::Texture2D> >=^{Texture2D}}}},R,N
shaderLibrary
Tr^{StandardLibrary=^^?^{ResourceManager}^{RenderResource}^{ShaderLibraryDescriptor}{vector<ggl::ShaderLibrary::FunctionEntry, std::__1::allocator<ggl::ShaderLibrary::FunctionEntry> >=^{FunctionEntry}^{FunctionEntry}{__compressed_pair<ggl::ShaderLibrary::FunctionEntry *, std::__1::allocator<ggl::ShaderLibrary::FunctionEntry> >=^{FunctionEntry}}}{vector<ggl::ShaderLibrary::ShaderEntry, std::__1::allocator<ggl::ShaderLibrary::ShaderEntry> >=^{ShaderEntry}^{ShaderEntry}{__compressed_pair<ggl::ShaderLibrary::ShaderEntry *, std::__1::allocator<ggl::ShaderLibrary::ShaderEntry> >=^{ShaderEntry}}}{vector<ggl::ShaderLibrary::ComputeShaderEntry, std::__1::allocator<ggl::ShaderLibrary::ComputeShaderEntry> >=^{ComputeShaderEntry}^{ComputeShaderEntry}{__compressed_pair<ggl::ShaderLibrary::ComputeShaderEntry *, std::__1::allocator<ggl::ShaderLibrary::ComputeShaderEntry> >=^{ComputeShaderEntry}}}{vector<std::__1::shared_ptr<ggl::Shader>, std::__1::allocator<std::__1::shared_ptr<ggl::Shader> > >=^{shared_ptr<ggl::Shader>}^{shared_ptr<ggl::Shader>}{__compressed_pair<std::__1::shared_ptr<ggl::Shader> *, std::__1::allocator<std::__1::shared_ptr<ggl::Shader> > >=^{shared_ptr<ggl::Shader>}}}{shared_ptr<ggl::ShaderLibraryData>=^{ShaderLibraryData}^{__shared_weak_count}}},R,N
FeatureCount:
NavStates
 None:
 Behind:
 Approaching:
 Ahead:
IconStates
 POI:
 Callout:
 Picked:
ColorGlyphWithNormalHaloShader
C3_LOD_SCALE
maneuver points
maneuver indices
mp mesh
mp fill renderitem
mp stroke renderitem
FlyoverShader
frustum
T{?=Bddddd},R,N
Tr^{Matrix<double, 3, 1>=[3d]},N
Tr^{Quaternion<double>={Matrix<double, 3, 1>=[3d]}d},N
aspectRatio
Td,N,V_aspectRatio
horizontalFieldOfView
verticalFieldOfView
Tf,N
farClipDistance
nearClipDistance
ndcZNear
Td,N,V_ndcZNear
cameraState
T{VKCameraState={RigidTransform<double>={Quaternion<double>={Matrix<double, 3, 1>=[3d]}d}{Matrix<double, 3, 1>=[3d]}}ddd},N
minHeight
Td,N,V_minHeight
maxHeight
Td,N,V_maxHeight
maxHeightNoPitch
Td,N,V_maxHeightNoPitch
maxPitch
Td,N,V_maxPitch
terrainHeight
Td,N,V_terrainHeight
viewVolume
T@"VKViewVolume",R,N
footprint
T@"VKFootprint",R,N
upVector
T{Matrix<double, 3, 1>=[3d]},R,N
rightVector
forwardVector
groundPoint
tanHalfHorizFOV
tanHalfVerticalFOV
distanceToGroundAndFarClipPlaneIntersection
Td,R,N,V_distanceToGroundAndFarClipPlaneIntersection
screenHeightOfGroundAndFarClipPlaneIntersection
Td,R,N,V_screenHeightOfGroundAndFarClipPlaneIntersection
fractionOfScreenAboveFarClipPlaneAtCanonicalPitch
Td,N,V_fractionOfScreenAboveFarClipPlaneAtCanonicalPitch
allowDatelineWraparound
TB,N,V_allowDatelineWraparound
canonicalPitch
Td,N,V_canonicalPitch
horizontalOffset
Td,N,V_horizontalOffset
scaledViewMatrix
scaledProjectionMatrix
scaledViewProjectionMatrix
scaledSkewedViewProjectionMatrix
unscaledViewMatrix
unscaledProjectionMatrix
unscaledViewProjectionMatrix
viewProjectionMatrixWithoutOffset
unscaledProjectionMatrixWithoutOffset
Attempt to set camera position set to NANs (%f, %f, %f)! Bailing
view projection matrix
Frustum width
%.9f, height: %.9f, near: %.9f, far: %.9f
orientation quaternion
%f, %f, %f, %f
Super: VKCamera
view projection matrix:
Frustum width: %.9f, height: %.9f, near: %.9f, far: %.9f
orientation quaternion: %f, %f, %f, %f
position: %s
boundingRect
T{Box<double, 2>={Matrix<double, 2, 1>=[2d]}{Matrix<double, 2, 1>=[2d]}},R,N,V_boundingRect
convexHull
T{VKFootprintConvexHull_struct=i[6{Matrix<double, 3, 1>=[3d]}][6{Matrix<double, 3, 1>=[3d]}]},R,N,V_convexHull
minDepth
Td,R,N,V_minDepth
maxDepth
Td,R,N,V_maxDepth
centerDepth
Td,R,N,V_centerDepth
furthestGroundPoint
T{Matrix<double, 3, 1>=[3d]},R,N,V_furthestGroundPoint
nearestGroundPoint
T{Matrix<double, 3, 1>=[3d]},R,N,V_nearestGroundPoint
cornerGroundPoints
T^{Matrix<double, 3, 1>=[3d]},R,N
cornerGroundPointsCount
Ti,R,N,V_cornerGroundPointsCount
EndOfWorldShader
shared.texscale
element.blend
vertex_attributes_texcoord
texscale
corners
Tr^{Matrix<double, 3, 1>=[3d]},R,N
FlyoverNightDimShader
color.color
vertexInput_unit
Quad
unit
  %@ - %@
  U+%04x : %C
/%.f
 (%s/
"%s"
/GridMesh
/GridIndexData
/route/element/clear/vdata
/route/element/clear/idata
/route/element/clear/mesh
T{VKTileKey=IiiI},R,N,V_key
TC,R,N,V_origin
birthdate
Td,R,N,V_birthdate
Tr^{Matrix<double, 4, 4>=[16d]},R,N
inverseMatrix
shaderMatrix
Tr^{Matrix<float, 4, 4>=[16f]},R,N
tileWidth
viewConstantData
Tr^{shared_ptr<ggl::ConstantDataTyped<ggl::Tile::View> >=^{ConstantDataTyped<ggl::Tile::View>}^{__shared_weak_count}},R,N
<%@ %p> %@ origin:%@
network
/render/heightmeshbuilder/indexdata
VKDefault
ManeuverPointShader
alphaMap_sampler
alphaMap
VKMapViewDidBecomePartiallyDrawnNotification
VKMapViewDidBecomeFullyDrawnNotification
shouldLoadMapMargin
T@"<VKMapViewDelegate>",N,V_mapDelegate
staysCenteredDuringPinch
hostDisplay
T@"CADisplay",&,N
isPitchable
pitched
TB,R,N,GisPitched
fullyPitched
TB,R,N,GisFullyPitched
canEnter3DMode
showingFlyover
TB,R,N,GisShowingFlyover
canShowFlyover
trafficEnabled
displayRate
navigationDisplayRate
localizeLabels
T{?=CCCCB},N
vehicleState
T{?=B},N
applicationUILayout
labelMarkerSelectionEnabled
TB,N,GisLabelMarkerSelectionEnabled
shieldSize
navigationShieldSize
shieldIdiom
showsPointsOfInterest
showsBuildings
userLocationAnimator
T@"VKPuckAnimator",R,N,V_userLocationAnimator
edgeInsets
fullyOccludedEdgeInsets
Td,R,N
presentationYaw
verticalYaw
Td,R,N,V_verticalYaw
T{?=ddd},R,N
iconsShouldAlignToPixels
TB,R,N,GisFullyDrawn
trackingCameraShouldHandleGestures
trackingZoomScale
annotationTrackingZoomStyle
annotationTrackingHeadingAnimationDisplayRate
animatingToTrackAnnotation
canShowFlyoverAnimation
selectedLabelMarker
T@"VKLabelMarker",R,N
labelMarkers
focusedLabelsPolyline
T@"VKPolylineOverlay",&,N
routePreloadSession
T@"<GEORoutePreloadSession>",&,N
rendersInBackground
debugLayoutContinuously
debugFramesPerSecond
enableDebugLabelHighlighting
applicationState
TC,N,V_applicationState
displayedSearchResultsType
TC,N,V_displayedSearchResultsType
hasFailedTiles
trackingAnnotation
isTrackingHeading
v8@?0i4
contentScale is unreasonable (NaN or Inf)
com.apple.Maps
VectorKit State:
GeoServices State:
Current Canvas
Self: VKMapView
Current Canvas
Puck Animator
Map Engine: %p
mapHasLabels: %s
searchResultsType: %@
applicationState: %@
overlayType: %@
timePeriod: %@
Night
Map Display Style:
_displayedSearchResultsType: %@
None
Points
Region
Venue
_applicationState: %@
Route Selection
Guidance
Feature Selection
Search
_containsOverlay: %s
_requestedRate: %ld
_navigationDisplayRate: %ld
_displayRate: %ld
hidden: %s
_didFinishSnapshotting: %s
rendersInBackground: %s
_isInBackground: %s
_mapType: %@
VKMapTypeStandard
VKMapTypeSatellite
VKMapTypeNavigation
VKMapTypeTransit
VKMapTypeStandardLabels
VKMapTypeHybridLabels
VKMapTypeHybridRoadsAndLabels
VKMapTypeHybridRoadsAndLabelsWithoutPOI
Unkonwn Map Type
CAProcessCanAccessGPU
mapCanvas
T@"VKMapCanvas",R,N
mapEngine
Tr^{MapEngine=^^?{shared_ptr<md::TaskContext>=^{TaskContext}^{__shared_weak_count}}{_retain_ptr<GEOResourceManifestConfiguration *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}^{Device}{_retain_ptr<_MapEngineRenderQueueSource *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{unique_ptr<ggl::DisplayLink, std::__1::default_delete<ggl::DisplayLink> >={__compressed_pair<ggl::DisplayLink *, std::__1::default_delete<ggl::DisplayLink> >=^{DisplayLink}}}{unique_ptr<ggl::SnapshotRunLoop, std::__1::default_delete<ggl::SnapshotRunLoop> >={__compressed_pair<ggl::SnapshotRunLoop *, std::__1::default_delete<ggl::SnapshotRunLoop> >=^{SnapshotRunLoop}}}^{RunLoop}{unique_ptr<md::AnimationManager, std::__1::default_delete<md::AnimationManager> >={__compressed_pair<md::AnimationManager *, std::__1::default_delete<md::AnimationManager> >=^{AnimationManager}}}{unique_ptr<md::AnimationRunner, std::__1::default_delete<md::AnimationRunner> >={__compressed_pair<md::AnimationRunner *, std::__1::default_delete<md::AnimationRunner> >=^{AnimationRunner}}}{shared_ptr<md::RunLoopController>=^{RunLoopController}^{__shared_weak_count}}@@@@{unique_ptr<md::CartographicRenderer, std::__1::default_delete<md::CartographicRenderer> >={__compressed_pair<md::CartographicRenderer *, std::__1::default_delete<md::CartographicRenderer> >=^{CartographicRenderer}}}{unique_ptr<md::realistic::RealisticRenderer, std::__1::default_delete<md::realistic::RealisticRenderer> >={__compressed_pair<md::realistic::RealisticRenderer *, std::__1::default_delete<md::realistic::RealisticRenderer> >=^{RealisticRenderer}}}^{Renderer}{unique_ptr<md::LayoutContext, std::__1::default_delete<md::LayoutContext> >={__compressed_pair<md::LayoutContext *, std::__1::default_delete<md::LayoutContext> >=^{LayoutContext}}}{_retain_ptr<VKCamera *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{shared_ptr<md::LabelManager>=^{LabelManager}^{__shared_weak_count}}{shared_ptr<md::LabelManager>=^{LabelManager}^{__shared_weak_count}}{unique_ptr<md::LogicManager, std::__1::default_delete<md::LogicManager> >={__compressed_pair<md::LogicManager *, std::__1::default_delete<md::LogicManager> >=^{LogicManager}}}BBB{atomic<bool>=AB}{atomic<bool>=AB}B},R,N
TI,R
T#,R
shouldLoadFallbackTiles
T@"<VKInteractiveMapDelegate>",N,V_delegate
additionalManifestConfiguration
T@"GEOResourceManifestConfiguration",&,N
T{shared_ptr<gss::StylesheetManager<gss::PropertyID> >=^{StylesheetManager<gss::PropertyID>}^{__shared_weak_count}},N
T@"VKSceneConfiguration",R,N
defaultTrackingCamera
T@"VKCamera",&,N,V_defaultTrackingCamera
T@"VKMapModel",R,N,V_map
T@"<VKRouteMatchedAnnotationPresentation>",N
canonicalSkyHeight
Td,N,V_canonicalSkyHeight
superclass
description
T@"NSArray",R,N
visibleTileSets
fullyDrawn
externalAnchors
T@"VKAnchorWrapper",R,N
T@"<VKInteractiveMapDelegate>",N
VKMapModel
Camera: 
Canvas Size: 
(%f, %f)
Self: VKMapCanvas
Camera Controller:
Canvas size: (%f, %f)
Could not read attribute's type.
/BuildRoot/Library/Caches/com.apple.xbs/Sources/VectorKit_Sim/VectorKit-1359.44.8.15.35/GeoCSS/GeoCSS/StylDecoding.hpp
Could not read feature attribute id.
Could not read client attribute id.
-car
T@"VKSharedResources",R,N,V_sharedResources
T@"<MDRenderTarget>",R,N,V_renderTarget
T{shared_ptr<gss::StylesheetManager<gss::PropertyID> >=^{StylesheetManager<gss::PropertyID>}^{__shared_weak_count}},R,N
active
TB,N,GisActive,V_active
renderLayer
T^{CartographicLayer=^^?{CommandBufferIdSet={vector<md::CommandBufferId, std::__1::allocator<md::CommandBufferId> >=^C^C{__compressed_pair<md::CommandBufferId *, std::__1::allocator<md::CommandBufferId> >=^C}}}{map<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer> >, std::__1::less<md::CommandBufferId>, std::__1::allocator<std::__1::pair<const md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer> > > > >={__tree<std::__1::__value_type<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer> > >, std::__1::__map_value_compare<md::CommandBufferId, std::__1::__value_type<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer> > >, std::__1::less<md::CommandBufferId>, true>, std::__1::allocator<std::__1::__value_type<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<md::CommandBufferId, std::__1::__value_type<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer> > >, std::__1::less<md::CommandBufferId>, true> >=L}}}BI^^?^{CartographicRenderer}C},N,V_renderLayer
3D Stroke
OcclusionLineShader
state
Ti,R,N,V_state
running
TB,R,N
runsForever
TB,N,V_runsForever
frequency
Tf,N,V_frequency
hasFrequency
duration
timed
completionHandler
T@?,C,N,V_completionHandler
priority
Ti,R,N,V_priority
T@"NSString",R,N,V_name
%@ state: %ld, name: %@
timingFunction
T@?,C,N,V_timingFunction
stepHandler
T@?,C,N,V_stepHandler
T@"GEOResourceManifestConfiguration",&,N,V_additionalManifestConfiguration
T@"GEOResourceManifestConfiguration",R,N,V_manifestConfiguration
styleManager
T{shared_ptr<gss::StylesheetManager<gss::PropertyID> >=^{StylesheetManager<gss::PropertyID>}^{__shared_weak_count}},N,V_activeStyleManager
sceneManager
T{shared_ptr<gss::StylesheetManager<gss::ScenePropertyID> >=^{StylesheetManager<gss::ScenePropertyID>}^{__shared_weak_count}},N,V_sceneManager
sceneConfiguration
mapType
neighborMode
TI,N
Ti,N,V_shieldSize
Ti,N,V_navigationShieldSize
Ti,N,V_shieldIdiom
TB,N,V_showsPointsOfInterest
lodBias
trafficResources
Tr^{TrafficSharedResources={TrafficSharedPipelineStates={shared_ptr<ggl::SolidTraffic::BasePipelineState>=^{BasePipelineState}^{__shared_weak_count}}{shared_ptr<ggl::TrafficGlow::BasePipelineState>=^{BasePipelineState}^{__shared_weak_count}}{shared_ptr<ggl::OptimizedTraffic::BasePipelineState>=^{BasePipelineState}^{__shared_weak_count}}}{TrafficSharedRenderStates={unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> >={__compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> >=^{RenderState}}}{unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> >={__compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> >=^{RenderState}}}{unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> >={__compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> >=^{RenderState}}}{unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> >={__compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> >=^{RenderState}}}{unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> >={__compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> >=^{RenderState}}}{unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> >={__compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> >=^{RenderState}}}}^{IsoAlphaAtlas}},R,N
navMapModeTransitionZ
Tf,N,V_navMapModeTransitionZ
currentRoadSignOffset
Tf,R,N
showingTrafficCasing
purpose
TI,R,N,V_mapPurpose
currentMapMode
Ti,R,N,V_mapMode
limitingNavCameraHeight
TB,N,V_limitingNavCameraHeight
terrainHeightCache
T{shared_ptr<md::CMercatorTerrainHeightCache>=^{CMercatorTerrainHeightCache}^{__shared_weak_count}},R,N
TB,N,GisTrafficEnabled,V_trafficEnabled
trafficIncidentsEnabled
TB,N,GisTrafficIncidentsEnabled,V_trafficIncidentsEnabled
TC,N,V_labelScaleFactor
delegate
T@"<VKMapModelDelegate>",N,V_delegate
isFullyDrawn
tileProvider
T@"VKTileProvider",R,N
routeUserOffset
T{PolylineCoordinate=If},N,V_routeUserOffset
persistentOverlays
T@"NSSet",R,N,V_persistentOverlays
rasterOverlays
disableRoads
TB,N,V_disableRoads
disableLabels
disablePolygons
TB,N,V_disablePolygons
disableBuildingFootprints
TB,N,V_disableBuildingFootprints
disableRasters
TB,N,V_disableRasters
disableGrid
TB,N,V_disableGrid
clearColor
T{Matrix<float, 4, 1>=[4f]},N,V_clearColor
routeLineSplitAnnotation
navigationPuckSize
Tf,N,V_navigationPuckSize
TB,R,N,V_shouldRasterize
disableTransitLines
TB,N,V_disableTransitLines
Tile Provider
Regular
Navigation
v8@?0^{CartographicLayer=^^?{CommandBufferIdSet={vector<md::CommandBufferId, std::__1::allocator<md::CommandBufferId> >=^C^C{__compressed_pair<md::CommandBufferId *, std::__1::allocator<md::CommandBufferId> >=^C}}}{map<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer> >, std::__1::less<md::CommandBufferId>, std::__1::allocator<std::__1::pair<const md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer> > > > >={__tree<std::__1::__value_type<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer> > >, std::__1::__map_value_compare<md::CommandBufferId, std::__1::__value_type<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer> > >, std::__1::less<md::CommandBufferId>, true>, std::__1::allocator<std::__1::__value_type<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<md::CommandBufferId, std::__1::__value_type<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer> > >, std::__1::less<md::CommandBufferId>, true> >=L}}}BI^^?^{CartographicRenderer}C}4
v16@?0C4@"VKTileSource"8@"VKTileProvider"12
com.apple.mapdisplay.stylesheetLoadQueue
Could not decode STYL header.
/BuildRoot/Library/Caches/com.apple.xbs/Sources/VectorKit_Sim/VectorKit-1359.44.8.15.35/GeoCSS/GeoCSS/StyleSheet.hpp
Could not decode stylesheet info.
Could not decode global properties.
Could not decode property sets.
Could not decode styles.
Could not decode style matching graph.
Could not decode style matching tree.
Could not read number of bits used for end chain counts.
/BuildRoot/Library/Caches/com.apple.xbs/Sources/VectorKit_Sim/VectorKit-1359.44.8.15.35/GeoCSS/GeoCSS/StyleMatchingTree.hpp
Could not read number of bits used for end chain lengths.
Could not read number of bits used for attribute value counts.
Could not read number of bits used for node indices.
Could not read number of bits used for node child counts.
Could not read number of bits used for chunk sizes.
Could not read end chain chunk.
Could not read number of end chains.
Could not read end chain length.
Could not decode attributes.
Could not read number of values.
Could not read attribute value.
Could not read number of style matching graph nodes.
Could not read number of chunks.
Could not read chunk length.
Could not read number of nodes in the chunk.
Could not construct node.
Could not read indication of node being terminal.
Could not read style index.
Could not end chain index.
Could not decode attribute.
Could not read indication of undefined node existing.
Could not read undefined node index.
Undefined node index out of bounds
Could not read number of children.
Could not read referenced node index.
Referenced node index out of bounds
Could not read number of bits for inheritance list length.
Could not read number of bits for zoom style count.
Could not read number of bits for conditional style count.
Could not read number of bits for condition count.
Could not read number of bits for condition attribute count.
Could not read number of bits for style count.
Could not read number of styles.
Could not read style name.
Could not read style score.
Could not read number of inheritted styles.
Could not read inherited style index.
Inherited style index out of bounds.
Could not read property set index.
Property set index out of bounds.
Could not read number of zoom styles.
Could not read zoom style min zoom.
Could not read zoom style max zoom.
Could not read zoom style property set index.
Zoom style property set index out of bounds.
Could not read number of conditional styles.
Could not read number of conditions.
Could not read number of attribute values for condition.
Could not read value for condition attribute.
Could not read conditional style property set index.
Conditional style property set index out of bounds.
Could not read conditional style's zoom style count.
Could not read conditional style's zoom style min zoom.
Could not read conditional style's zoom style max zoom.
Could not read conditional style's zoom style property set index.
Conditional style's zoom style property set index out of bounds.
-condStyle-
Could not read number of bits for property set index.
Could not read number of property sets.
Could not decode property set.
Could not read number of properties.
/BuildRoot/Library/Caches/com.apple.xbs/Sources/VectorKit_Sim/VectorKit-1359.44.8.15.35/GeoCSS/GeoCSS/StylePropertySet.hpp
Could not read property index.
Could not find size for property.
Could not read size of variable sized property.
Could not decode property
Could not read stylesheet version.
Could not read debug stylesheet flag.
Could not read number of modes.
Could not read mode support flag.
Support specified for unknown map mode.
Could not read number of attributes.
Could not read number of bits for feature attribute.
Could not read number of bits for client attribute.
Could not read number of bits for attribute value.
Could not read number of bits for property id.
Could not read property id.
Could not read property size.
styl
v8@?0@"NSString"4
v12@?0@"NSString"4@"NSString"8
@"NSData"8@?0@"NSString"4
@"NSData"12@?0f4@"NSString"8
%s%@.%@
%s%@%@.%@
@%lu.%ux
Additional manifest provider (%@):
Raster overlay provider[%ld]:
Building Tile Provider
Style Manager State: 
  No stylesheet
  Stylesheet:
    Name: 
    Finished decoding: 
    Valid: 
    Loaded from dev resources: 
    Decode errors:
Desired Map Mode: 
Current Map Mode:
Content Scale: 
Self: VKMapModel
Additional manifest provider (%@): %@
Raster overlay provider[%ld]: %@
Building tile provider: %@
Standard tile provider: %@
Style manager State: 
Traffic Enabled = %d
Desired Map Mode: %ld
Current Map Mode: %ld
Content Scale: %f
v8@?0@"<VKStyleManagerObserver>"4
Invalid Road Class
MajorMotorwayFreeway
MajorRoad
OtherMajorRoad
SecondaryRoad
LocalConnectingRoad
LocalRoadImportant
LocalRoad
LocalMinorRoad
OtherRoad
VKPounceWillStartNotification
VKPounceDidEndNotification
camera
T@"VKCamera",R,N,V_camera
T^{MapEngine=^^?{shared_ptr<md::TaskContext>=^{TaskContext}^{__shared_weak_count}}{_retain_ptr<GEOResourceManifestConfiguration *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}^{Device}{_retain_ptr<_MapEngineRenderQueueSource *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{unique_ptr<ggl::DisplayLink, std::__1::default_delete<ggl::DisplayLink> >={__compressed_pair<ggl::DisplayLink *, std::__1::default_delete<ggl::DisplayLink> >=^{DisplayLink}}}{unique_ptr<ggl::SnapshotRunLoop, std::__1::default_delete<ggl::SnapshotRunLoop> >={__compressed_pair<ggl::SnapshotRunLoop *, std::__1::default_delete<ggl::SnapshotRunLoop> >=^{SnapshotRunLoop}}}^{RunLoop}{unique_ptr<md::AnimationManager, std::__1::default_delete<md::AnimationManager> >={__compressed_pair<md::AnimationManager *, std::__1::default_delete<md::AnimationManager> >=^{AnimationManager}}}{unique_ptr<md::AnimationRunner, std::__1::default_delete<md::AnimationRunner> >={__compressed_pair<md::AnimationRunner *, std::__1::default_delete<md::AnimationRunner> >=^{AnimationRunner}}}{shared_ptr<md::RunLoopController>=^{RunLoopController}^{__shared_weak_count}}@@@@{unique_ptr<md::CartographicRenderer, std::__1::default_delete<md::CartographicRenderer> >={__compressed_pair<md::CartographicRenderer *, std::__1::default_delete<md::CartographicRenderer> >=^{CartographicRenderer}}}{unique_ptr<md::realistic::RealisticRenderer, std::__1::default_delete<md::realistic::RealisticRenderer> >={__compressed_pair<md::realistic::RealisticRenderer *, std::__1::default_delete<md::realistic::RealisticRenderer> >=^{RealisticRenderer}}}^{Renderer}{unique_ptr<md::LayoutContext, std::__1::default_delete<md::LayoutContext> >={__compressed_pair<md::LayoutContext *, std::__1::default_delete<md::LayoutContext> >=^{LayoutContext}}}{_retain_ptr<VKCamera *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{shared_ptr<md::LabelManager>=^{LabelManager}^{__shared_weak_count}}{shared_ptr<md::LabelManager>=^{LabelManager}^{__shared_weak_count}}{unique_ptr<md::LogicManager, std::__1::default_delete<md::LogicManager> >={__compressed_pair<md::LogicManager *, std::__1::default_delete<md::LogicManager> >=^{LogicManager}}}BBB{atomic<bool>=AB}{atomic<bool>=AB}B},R,N,V_mapEngine
Tf,N,V_debugFramesPerSecond
targetDisplay
T{VehicleState=B},N
emphasis
T{VKEdgeInsets=ffff},N
T{VKEdgeInsets=ffff},N,V_fullyOccludedEdgeInsets
labelEdgeInsets
mapDelegate
T@"<MDMapControllerDelegate>",N,V_mapDelegate
bgColor
T{Matrix<float, 4, 1>=[4f]},R,N,V_bgColor
gesturing
TB,N,GisGesturing
Ti,N
isAnimatingToTrackAnnotation
SpecularLandmarkShader
DebugTree - Start
DebugTree - End
Root Nodes
Version
FoggedSpecularBuildingTopShader
TileSetGridFraction (%)
FractionLoadedTime (ms)[
identifier
T@"GEOMapItemIdentifier",R,N,V_identifier
shieldText
T@"NSString",R,N,V_shieldText
shieldLocale
T@"NSString",R,N,V_shieldLocale
shieldType
Tq,R,N,V_shieldType
T{?={Matrix<float, 4, 1>=[4f]}},R,N,V_shieldColor
labelText
T@"NSString",R,N,V_labelText
labelLocale
T@"NSString",R,N,V_labelLocale
transitLinkID
T^v,R,N,V_transitLinkID
%llu
TextIcon(%s)
ASTC
gglTexture
renderItem
presentationHeading
isPitchEnabled
TB,N,V_isPitchEnabled
isRotateEnabled
TB,N,V_isRotateEnabled
TB,N,V_staysCenteredDuringPinch
staysCenteredDuringRotation
TB,N,V_staysCenteredDuringRotation
canPitch
canRotate
centerCoordinate
distanceFromCenterCoordinate
Td,N
isPitched
isRotated
isFullyPitched
_regionChangeCount:
_gesturing:
_animating:
_camera:
Self: VKMapCameraController
_regionChangeCount: %lu
_gesturing: %d
_animating: %d
_camera: %@
T{VKCacheKey=IIII},N,V_key
value
T@,&,N,V_value
next
T@"VKCacheNode",&,N,V_next
previous
T@"VKCacheNode",N,V_previous
reservedCapacity
TI,R,N,V_reservedCapacity
maximumCapacity
TI,R,N,V_maximumCapacity
count
TI,R,N,V_count
T@"<VKLRUCacheDelegate>",N,V_delegate
%d.%d.%d.%d => %@
<%@ %p> head: %p, tail: %p, count: %lu
DiffuseLandmarkShader
SpecularBuildingTopShader
mapModel
T@"VKMapModel",&,N,V_mapModel
T@"VKMapCanvas",N,V_mapCanvas
StarsShader
view.modelview
view.fadein
StarVertex
fadein
GridView
PolygonShadowedStrokeShader
shadowPath
shadowPath.color
shadowPath.width
shadowPath.direction
shadowPath.offsetScale
vertex_attributes_vertexPosition
vertex_attributes_offsetAndTexture
ShadowPath
diskQueue
processingQueue
GridShader
style.lineColor
style.majorSize
style.minorSize
style.gridMix
style.lineParams
gridMix
  No external icon
 halfExt:(%.2f, %.2f)
 radius:%.2f
  isActive:%i, scale:%.1f
TransitPillIcon
FlyoverMaskedShader
alphamask_sampler
alphamask
Stack, Margin:H=%.1f, V=%.1f
Stack, Margin=%.1f
ClutShader
clutMap_sampler
clutMap
variation.variation
 countNodes:%i
 <nodeFeature>
T^{MapEngine=^^?{shared_ptr<md::TaskContext>=^{TaskContext}^{__shared_weak_count}}{_retain_ptr<GEOResourceManifestConfiguration *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}^{Device}{_retain_ptr<_MapEngineRenderQueueSource *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{unique_ptr<ggl::DisplayLink, std::__1::default_delete<ggl::DisplayLink> >={__compressed_pair<ggl::DisplayLink *, std::__1::default_delete<ggl::DisplayLink> >=^{DisplayLink}}}{unique_ptr<ggl::SnapshotRunLoop, std::__1::default_delete<ggl::SnapshotRunLoop> >={__compressed_pair<ggl::SnapshotRunLoop *, std::__1::default_delete<ggl::SnapshotRunLoop> >=^{SnapshotRunLoop}}}^{RunLoop}{unique_ptr<md::AnimationManager, std::__1::default_delete<md::AnimationManager> >={__compressed_pair<md::AnimationManager *, std::__1::default_delete<md::AnimationManager> >=^{AnimationManager}}}{unique_ptr<md::AnimationRunner, std::__1::default_delete<md::AnimationRunner> >={__compressed_pair<md::AnimationRunner *, std::__1::default_delete<md::AnimationRunner> >=^{AnimationRunner}}}{shared_ptr<md::RunLoopController>=^{RunLoopController}^{__shared_weak_count}}@@@@{unique_ptr<md::CartographicRenderer, std::__1::default_delete<md::CartographicRenderer> >={__compressed_pair<md::CartographicRenderer *, std::__1::default_delete<md::CartographicRenderer> >=^{CartographicRenderer}}}{unique_ptr<md::realistic::RealisticRenderer, std::__1::default_delete<md::realistic::RealisticRenderer> >={__compressed_pair<md::realistic::RealisticRenderer *, std::__1::default_delete<md::realistic::RealisticRenderer> >=^{RealisticRenderer}}}^{Renderer}{unique_ptr<md::LayoutContext, std::__1::default_delete<md::LayoutContext> >={__compressed_pair<md::LayoutContext *, std::__1::default_delete<md::LayoutContext> >=^{LayoutContext}}}{_retain_ptr<VKCamera *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{shared_ptr<md::LabelManager>=^{LabelManager}^{__shared_weak_count}}{shared_ptr<md::LabelManager>=^{LabelManager}^{__shared_weak_count}}{unique_ptr<md::LogicManager, std::__1::default_delete<md::LogicManager> >={__compressed_pair<md::LogicManager *, std::__1::default_delete<md::LogicManager> >=^{LogicManager}}}BBB{atomic<bool>=AB}{atomic<bool>=AB}B},N,V_mapEngine
globeView
T^{GlobeView=^^?^{GeoServicesLoader}^{ManifestManager}^{TriggerManager}{shared_ptr<altitude::AnchorManager>=^{AnchorManager}^{__shared_weak_count}}^{DtmCacheNode}^{DtmRequestManager}^{FreezeViewNode}{Projection={Perspective=dddd}{Ortho=dddddd}BB}{CameraFrame<geo::Radians, double>={Coordinate3D<Radians, double>={Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<MeterUnitDescription, double>=d}}{Unit<MeterUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}}B{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{vector<altitude::SimpleTileKey, std::__1::allocator<altitude::SimpleTileKey> >=^{SimpleTileKey}^{SimpleTileKey}{__compressed_pair<altitude::SimpleTileKey *, std::__1::allocator<altitude::SimpleTileKey> >=^{SimpleTileKey}}}BII^{VKClassicGlobeCanvas}BB{AnimationManager={AnimationReferenceTimer=ddd}{unique_ptr<altitude::AnimationTimer, std::__1::default_delete<altitude::AnimationTimer> >={__compressed_pair<altitude::AnimationTimer *, std::__1::default_delete<altitude::AnimationTimer> >=^{AnimationTimer}}}d{vector<altitude::AnimationObjectHolder, std::__1::allocator<altitude::AnimationObjectHolder> >=^{AnimationObjectHolder}^{AnimationObjectHolder}{__compressed_pair<altitude::AnimationObjectHolder *, std::__1::allocator<altitude::AnimationObjectHolder> >=^{AnimationObjectHolder}}}}{Timer=d}dBddd{CameraFrame<geo::Radians, double>={Coordinate3D<Radians, double>={Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<MeterUnitDescription, double>=d}}{Unit<MeterUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}}^{C3mmRequestManager}^{RenderableGroup}IdBB^{LabelDataManagerPrivate}BBBB^{RouteLineManager}^{GlobeCleanupLoader}^{CompleteGlobeTileSetCullingGraph}^{CompleteGlobeTileSetLoader}^{TileSetNode}^{GlobeTileRenderManager}^{CullingNode}^{EarthAdjustedViewNode}^{UserViewNode}^{View}^{BasicViewNode}^{GlobeMainViewNode}^{C3bRequestManager}fB{shared_ptr<bool>=^B^{__shared_weak_count}}^{HeightRequestManager}{map<gm::Matrix<int, 2, 1>, std::__1::pair<bool, geo::Coordinate3D<Radians, double> >, altitude::GlobeView::LessVector2i, std::__1::allocator<std::__1::pair<const gm::Matrix<int, 2, 1>, std::__1::pair<bool, geo::Coordinate3D<Radians, double> > > > >={__tree<std::__1::__value_type<gm::Matrix<int, 2, 1>, std::__1::pair<bool, geo::Coordinate3D<Radians, double> > >, std::__1::__map_value_compare<gm::Matrix<int, 2, 1>, std::__1::__value_type<gm::Matrix<int, 2, 1>, std::__1::pair<bool, geo::Coordinate3D<Radians, double> > >, altitude::GlobeView::LessVector2i, true>, std::__1::allocator<std::__1::__value_type<gm::Matrix<int, 2, 1>, std::__1::pair<bool, geo::Coordinate3D<Radians, double> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gm::Matrix<int, 2, 1>, std::__1::pair<bool, geo::Coordinate3D<Radians, double> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<gm::Matrix<int, 2, 1>, std::__1::__value_type<gm::Matrix<int, 2, 1>, std::__1::pair<bool, geo::Coordinate3D<Radians, double> > >, altitude::GlobeView::LessVector2i, true> >=L}}}{Mutex=^v}{shared_ptr<altitude::Stylesheet>=^{Stylesheet}^{__shared_weak_count}}^{FlyoverTour}B{Viewport=iiii}B{set<altitude::ManifestListener *, std::__1::less<altitude::ManifestListener *>, std::__1::allocator<altitude::ManifestListener *> >={__tree<altitude::ManifestListener *, std::__1::less<altitude::ManifestListener *>, std::__1::allocator<altitude::ManifestListener *> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<altitude::ManifestListener *, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<altitude::ManifestListener *> >=L}}}^{TileManager}^{ObjectTreeLoader}^{QuickSurfaceManager}^{IntersectorHeight}{shared_ptr<karo::SharedItemManager<altitude::Map, altitude::MapRequestId> >=^{SharedItemManager<altitude::Map, altitude::MapRequestId>}^{__shared_weak_count}}^{BundleLoader}^{ProtocolLoader}^{GeoResourceManager}^{GeoResourceLoader}^{ViewNode}^{ViewportNode}^{View}^{Viewport}{shared_ptr<ggl::RenderState>=^{RenderState}^{__shared_weak_count}}I^{Statistics}{atomic<bool>=AB}^{TexturePager}^{IOSurfacePool}^{RealisticRenderer}{DclpUnique<ggl::Texture2D, altitude::util::DclpDefaultDelete<ggl::Texture2D> >={mutex={_opaque_pthread_mutex_t=l[40c]}}{atomic<ggl::Texture2D *>=A^{Texture2D}}{function<ggl::Texture2D *()>={type=[16C]}^{__base<ggl::Texture2D *()>}}}{DclpUnique<altitude::TextureMap, altitude::util::DclpDefaultDelete<altitude::TextureMap> >={mutex={_opaque_pthread_mutex_t=l[40c]}}{atomic<altitude::TextureMap *>=A^{TextureMap}}{function<altitude::TextureMap *()>={type=[16C]}^{__base<altitude::TextureMap *()>}}}{DclpUnique<altitude::TextureMap, altitude::util::DclpDefaultDelete<altitude::TextureMap> >={mutex={_opaque_pthread_mutex_t=l[40c]}}{atomic<altitude::TextureMap *>=A^{TextureMap}}{function<altitude::TextureMap *()>={type=[16C]}^{__base<altitude::TextureMap *()>}}}},N,V_globeView
fieldOfView
T{Unit<DegreeUnitDescription, double>=d},N,V_fieldOfView
overrideARFieldOfView
TB,N,V_overrideARFieldOfView
heightScale
offsetTransform
T{RigidTransform<double>={Quaternion<double>={Matrix<double, 3, 1>=[3d]}d}{Matrix<double, 3, 1>=[3d]}},N,V_offsetTransform
ARCameraControllerShouldAlwaysUseCurrentFrame
NavRoadSignLabelPart
roadArrow_standard
roadArrow_hybrid
ETA Labeler active: 
actualFeatureMarker
Tr^{shared_ptr<md::FeatureMarker>=^{FeatureMarker}^{__shared_weak_count}},R
shortName
TQ,R,N
venueID
T@"GEOFeatureStyleAttributes",R,N
center
T{CGPoint=ff},R,V_center
Tf,R,N,V_scale
L8@?0@"NSString"4
@"NSAttributedString"8@?0@"NSString"4
%.1f
^{CGContext=}16@?0f4f8^{CGSize=ff}12
f8@?0f4
^{CGContext=}4@?0
shouldCacheAtlases
TB,R,N,V_shouldCacheAtlases
shields-index
shieldindex
shieldpack
@"VKShieldArtwork"8@?0i4
-xxxsmall
-xxsmall
-xsmall
-xxxlarge
-xxlarge
-extralarge
-medium
-large
~car
@%lux
B12@?0i4i8
^{CGImage=}12@?0I4I8
TEXT_SPECIFIC_ONLY
T{shared_ptr<gss::StylesheetManager<gss::PropertyID> >=^{StylesheetManager<gss::PropertyID>}^{__shared_weak_count}},N,V_styleManager
vectorType
Ti,R,N
Tf,N,V_contentScale
Tf,N,V_maximumStyleZ
Tf,N,V_textureScale
fragments
T@"VKMapTileList",R,N,V_fragments
viewProximity
hasGenericTileType
TB,R,N,V_hasGenericTileType
genericTileType
Ti,R,N,V_genericTileType
T^{RenderItem=^^?*^{RenderState}^{PipelineSetup}IQf^{Mesh}{Range<unsigned long>=LL}^{Range<unsigned long>}I},R,N
T{shared_ptr<ggl::Texture2D>=^{Texture2D}^{__shared_weak_count}},N,V_gglTexture
EarthCoronaShader
base
base.modelview
base.projection
base.brightness
base.lightdirection
base.earthcoronamodelview
base.horizondistance
base.nightlightfade
Base
earthcoronamodelview
horizondistance
BuildingTopDepthShader
/SharedUnitMesh
/SharedPolygonUnitMesh
/SharedTextureUnitMesh
BuildingFacadeDepthShader
TileSkyboxShader
textureMap0_sampler
textureMap0
element.blendfactor
/renderutil/spherecolor/vertexdata
/renderutil/spherecolor/indexdata
/renderutil/spherecolor/mesh
MultipleShields
ImageCopyShader
-- current placements --
Long
Orient
Avoid
Balance
MinDist
Route Idx 
-- last search results --
UpLeft
Route 
last search was 
 seconds ago. did find = 
no last search
Screen Projection Matrix :
UpRight
DnLeft
DnRight
v8@?0r^{?=@{PolylineCoordinate=If}{PolylineCoordinate=If}}4
tilePerPoint
GlyphWithNormalHaloShader
labelTile
T{shared_ptr<md::LabelTile>=^{LabelTile}^{__shared_weak_count}},R,N,V_labelTile
VKLabelTile(%d.%d.%d) tileType=%hhu
SpecularBuildingPointyRoofShader
TextureWithReverseAlphaShader
reverseAlpha
reverseAlpha.alpha
ReverseAlpha
Debug RouteLine Mesh
Debug RouteLine
%s.csv
TrafficCasingShader
trafficTexture_sampler
trafficTexture
style.strokeWidthRatio
style.streamTextureDeltaV
vertexInput_texCoord2
strokeWidthRatio
streamTextureDeltaV
vertexInput_texture2
P3T2T2Vbo
texcoord2
P3T2Vbo
/DebugFrustumElement/VertexData
/DebugFrustumElement/RenderableGroup
/loading/heightfallbackrequestmanager
/loading/transitiontilerequestmanager
/render/globe/freezecullingviewnode
/loading/globe/load/completetileset
/loading/globe/preload/adjustedviewnode
/loading/globe/preload/viewnode
/render/globe/globetilerendermanager
/loading/network/geoservicesloader
Tiles: 
 re, 
 hires, 
 kB)
FlyoverMorphShader
finercoord
coarsecoord
Morph
coarseScale
coarseOffset
T@"VKImage",&,N,V_image
TC,N,V_style
fillColor
T^{CGColor=},N,V_fillColor
T^{CGColor=},N,V_haloColor
glyphColor
T^{CGColor=},N,V_glyphColor
fullBleedColor
T^{CGColor=},N,V_fullBleedColor
alpha
Tf,N,V_alpha
strokeWeight
Tf,N,V_strokeWeight
Tf,R,N,V_contentScale
T{Style={optional<gss::IconStyle>=B(ValueUnion=[1C]C)}{vector<md::IconImage::IconLayer, std::__1::allocator<md::IconImage::IconLayer> >=^C^C{__compressed_pair<md::IconImage::IconLayer *, std::__1::allocator<md::IconImage::IconLayer> >=^C}}ffffff{Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}CC{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}},R,N,V_style
HelveticaNeue
@"VKIconArtwork"16@?0@"VKIconAtlas"4f8i12
%@-%f
-outline
@"VKPIcon"8@?0i4
attr{%ud:%ud}
attr{%ud:%llu}
_callout_color
iconpack
BuildingPointyRoofDepthShader
AnimatableTextureShader
variantTextureMap_sampler
variantTextureMap
Variant
textureWeight
Skeleton traffic tile makes degenerate road geometry reference (start: %f, length: %f)
VKTrafficTile tried to access line outside of feature index range, likely need new chain mapping for traffic server
IconShader
texture_sampler
vertex_attributes_alphaBrightnessPercentSaturation
alphaBrightnessPercentSaturation
GlowShader
style.radius
uid:%llu, %s, %s
Merge: SameSys+Color=%i SysThresh=%i Group=%i GroupThresh=%i
system=%llu color=%X group=%i z=%i
width: fill=%.1f, stroke=%.1f spacing=%.1f
attrs:{%@}
style:%s
style=
&part=
georesource_c3h
.c3h
georesource_c3b
.c3b
/map_
Root
Value
Properties
.c3mm
meta_levels
meta_zmax
meta_region
http://some.server.com/tile?style=15
http://some.server.com/tile?style=16
latitude
longitude
altitude
tilepixels
version
&region=
level
max_level
FLYOVER_C3M_MESH
true
FLYOVER_C3M_JPEG_TEXTURE
FLYOVER_C3M_ASTC_TEXTURE
highres_tex_min_level
c3mesh
dataurl
dataurlformat
metaurl
metaurlformat
dtmurl
dtmurlformat
sphere
http://some.server.com/tile?style=52&x=0&y=0&z=0&h=0
system
coastlineGroups
T^{vector<std::__1::shared_ptr<md::CoastlineGroup>, std::__1::allocator<std::__1::shared_ptr<md::CoastlineGroup> > >=^{shared_ptr<md::CoastlineGroup>}^{shared_ptr<md::CoastlineGroup>}{__compressed_pair<std::__1::shared_ptr<md::CoastlineGroup> *, std::__1::allocator<std::__1::shared_ptr<md::CoastlineGroup> > >=^{shared_ptr<md::CoastlineGroup>}}},R,N,V_coastlineGroups
minLayeringHeight
Tf,R,N,V_minLayeringHeight
animation
T@"VKAnimation",&,N,V_animationForPitch
polygonGroups
Tr^{vector<geo::_retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::allocator<geo::_retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >=^{_retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}^{_retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}{__compressed_pair<geo::_retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> *, std::__1::allocator<geo::_retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >=^{_retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}}},R,N
labelFeatureMarker
T@"VKLabelFeatureMarker",R,N,V_labelFeatureMarker
closestApproach
T{CGVector=ff},R,N
<VKRoadLabelPickingResult %p %@ (%f), (%f, %f)>
AnnotatedShields
displayMercatorPoint
T{Mercator2<double>=[2d]},N,V_displayMercatorPoint
featureMercatorPoint
nextMercatorPoint
T{Mercator2<double>=[2d]},R,N,V_nextMercatorPoint
previousMercatorPoint
T{Mercator2<double>=[2d]},R,N,V_previousMercatorPoint
label
T@"VKLabelNavRoadLabel",R,N,V_roadLabel
labelNavMode
TC,R,N,V_labelNavMode
trafficCamera
T@"VKTrafficCameraFeature",R,N,V_trafficCamera
navState
currentIconState
TC,R,N,V_iconState
expectedIconState
TC,R,N
shouldRestyleFeature
TB,N,V_shouldRestyleFeature
tailDirection
TC,N,V_tailDirection
tailOrientation
TB,R,N,V_isOnRoute
TB,R,N,V_isAwayFromRoute
shieldDisplayGroup
isPicked
LandmarkFlatShader
alphaAndHaloSizeInPixels
haloColor
matrix
Channel
Information
maxDistanceStored
/road/element/clear/vdata
/road/element/clear/idata
/road/element/clear/mesh
dataOverrideManager
T{shared_ptr<md::DataOverrideManager>=^{DataOverrideManager}^{__shared_weak_count}},N,V_dataOverrideManager
tileRequester
T@"GEOTileRequester",&,N,V_tileRequester
T{_GEOTileKey=b6b26b26b6b8b8b8b1b7[4C]},N,V_key
featureID
TQ,N,V_featureID
selectedLineID
T@"GEOMapItemIdentifier",&,N,V_selectedLineID
maxZ
TI,N,V_maxZ
TexturedInnerShadowRibbonShader
distanceField_sampler
distanceField
shadowStyle
shadowStyle.slopeOffset
shadowStyle.coefficents
ShadowStyle
slopeOffset
coefficents
zoomStyle
Ti,N,V_zoomStyle
headingAnimationDisplayRate
Ti,N,V_headingAnimationDisplayRate
T@"<VKTrackableAnnotation>",R,N,V_annotation
accuracy
(no traffic)
traffic: %@ (%@)
traffic tile: %@
Polygons: %tu  Verts: %tu
Points: %tu
Named lines: %tu Verts: %tu 
Unamed Lines: %tu Verts: %tu 
Vertices: %tu 
Junctions: %tu   Overpasses: %tu
Coast Lines: %tu   Verts: %tu 
X:%d Y:%d Z:%d
%d.%d.%d
/DebugSharedUnitRectMesh
DebugItem
VerticalVenue3DStrokeShader
style.halfStrokeWidth
style.height
style.baseHeight
style.width
vertex_input_vertex2
vertex_input_styleIndices
vertex_input_tangents
HorizontalVenue3DStrokeShader
vertex_input_tangent3
HorizontalDefaultVbo
vertex2
tangent3
VerticalDefaultVbo
halfStrokeWidth
trafficSpeed
TC,N,V_trafficSpeed
points
T^{Matrix<float, 2, 1>=[2f]},R,N,V_points
pointCount
TI,R,N,V_pointCount
routeStart
T{PolylineCoordinate=If},N,V_routeStart
routeEnd
T{PolylineCoordinate=If},N,V_routeEnd
hasCompletedMapMatching
isMapMatched
section
T@"GEOComposedRouteSection",R,N,V_section
snappedPath
T@"GEOSnappedRoutePath",R,N,V_snappedPath
Td,N,V_startDistance
<VKPolylinePath %p>: %f - %f, snappedPath:%s
lineID
TQ,R,N,V_lineID
T@"VKGGLTransitTile",R,N,V_tile
<VKTransitPolylinePath %p>: %f - %f; line %llu; tile %@
dataKey
Tr^{_GEOTileKey=b6b26b26b6b8b8b8b1b7[4C]},N
dynamicTiles
T@"VKTileKeyMap",R,N,V_dynamicTiles
pilledTrafficLayer
T^{PilledTrafficLayer=^^?{vector<md::PilledTrafficBatch *, std::__1::allocator<md::PilledTrafficBatch *> >=^^{PilledTrafficBatch}^^{PilledTrafficBatch}{__compressed_pair<md::PilledTrafficBatch **, std::__1::allocator<md::PilledTrafficBatch *> >=^^{PilledTrafficBatch}}}{vector<ggl::OptimizedTraffic::BaseMesh *, std::__1::allocator<ggl::OptimizedTraffic::BaseMesh *> >=^^{BaseMesh}^^{BaseMesh}{__compressed_pair<ggl::OptimizedTraffic::BaseMesh **, std::__1::allocator<ggl::OptimizedTraffic::BaseMesh *> >=^^{BaseMesh}}}[1^{RenderState}]{shared_ptr<ggl::ConstantDataTyped<ggl::Tile::View> >=^{ConstantDataTyped<ggl::Tile::View>}^{__shared_weak_count}}I^{TrafficSharedResources}},R,N
solidTrafficLayer
T^{SolidTrafficLayer=^^?{vector<md::SolidTrafficBatch *, std::__1::allocator<md::SolidTrafficBatch *> >=^^{SolidTrafficBatch}^^{SolidTrafficBatch}{__compressed_pair<md::SolidTrafficBatch **, std::__1::allocator<md::SolidTrafficBatch *> >=^^{SolidTrafficBatch}}}{vector<ggl::TrafficBase::BaseMesh *, std::__1::allocator<ggl::TrafficBase::BaseMesh *> >=^^{BaseMesh}^^{BaseMesh}{__compressed_pair<ggl::TrafficBase::BaseMesh **, std::__1::allocator<ggl::TrafficBase::BaseMesh *> >=^^{BaseMesh}}}[2^{RenderState}]{shared_ptr<ggl::ConstantDataTyped<ggl::Tile::View> >=^{ConstantDataTyped<ggl::Tile::View>}^{__shared_weak_count}}I^{TrafficSharedResources}},R,N
casedTrafficLayer
T^{CasedTrafficLayer=^^?{vector<md::CasedTrafficBatch *, std::__1::allocator<md::CasedTrafficBatch *> >=^^{CasedTrafficBatch}^^{CasedTrafficBatch}{__compressed_pair<md::CasedTrafficBatch **, std::__1::allocator<md::CasedTrafficBatch *> >=^^{CasedTrafficBatch}}}{vector<ggl::TrafficBase::BaseMesh *, std::__1::allocator<ggl::TrafficBase::BaseMesh *> >=^^{BaseMesh}^^{BaseMesh}{__compressed_pair<ggl::TrafficBase::BaseMesh **, std::__1::allocator<ggl::TrafficBase::BaseMesh *> >=^^{BaseMesh}}}[1^{RenderState}]{shared_ptr<ggl::ConstantDataTyped<ggl::Tile::View> >=^{ConstantDataTyped<ggl::Tile::View>}^{__shared_weak_count}}I^{TrafficSharedResources}},R,N
trafficStream
Tr^{TrafficStream=IIIf{unique_ptr<ggl::Texture2D, std::__1::default_delete<ggl::Texture2D> >={__compressed_pair<ggl::Texture2D *, std::__1::default_delete<ggl::Texture2D> >=^{Texture2D}}}f{TexelRun=fffff}{unordered_map<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun, md::TrafficStream::SectionKeyHash, std::__1::equal_to<md::TrafficStream::SectionKey>, std::__1::allocator<std::__1::pair<const md::TrafficStream::SectionKey, md::TrafficStream::TexelRun> > >={__hash_table<std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, std::__1::__unordered_map_hasher<md::TrafficStream::SectionKey, std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, md::TrafficStream::SectionKeyHash, true>, std::__1::__unordered_map_equal<md::TrafficStream::SectionKey, std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, std::__1::equal_to<md::TrafficStream::SectionKey>, true>, std::__1::allocator<std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, void *> *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<md::TrafficStream::SectionKey, std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, md::TrafficStream::SectionKeyHash, true> >=L}{__compressed_pair<float, std::__1::__unordered_map_equal<md::TrafficStream::SectionKey, std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, std::__1::equal_to<md::TrafficStream::SectionKey>, true> >=f}}}},R,N
trafficSkeletonTile
Tr^{shared_ptr<zilch::TrafficSkeletonTile>=^{TrafficSkeletonTile}^{__shared_weak_count}},R,N,V_trafficData
styleAttributes
T^{FeatureAttributeSet={vector<gss::FeatureAttributePair, std::__1::allocator<gss::FeatureAttributePair> >=^{FeatureAttributePair}^{FeatureAttributePair}{__compressed_pair<gss::FeatureAttributePair *, std::__1::allocator<gss::FeatureAttributePair> >=^{FeatureAttributePair}}}},R,N,V_styleAttributes
v48@?0^{?={?=@*IIIIIQBQfQ@i}IIiiiII(?={?={?=ff}{?=ff}}{?=ffff})^{?}{?=[2S][2S]}CBCBBCBC{_NSRange=II}BI}4I8I12i16f20f24i28r^{shared_ptr<gss::StylesheetQuery<gss::PropertyID> >=^{StylesheetQuery<gss::PropertyID>}^{__shared_weak_count}}32C36^{Matrix<float, 2, 1>=[2f]}40I44
v24@?0i4f8f12r^{Matrix<float, 2, 1>=[2f]}16I20
Skeleton traffic tile %@ implicates bad section (start: %f, end: %f, valid: %lu,%lu, skeleton record: %f,%f)
Skeleton traffic tile %@ references invalid section %lu on feature %lu
Skeleton traffic tile %@ makes degenerate road geometry reference (start: %f, length: %f)
 %@ : update stamp = %lld flow count = %zu
 %zu dynamic traffic tiles
vertex data
C3bLoadJobTotalTime (ms)
C3bLoadJobMainTime (ms)
C3bLoadJobWait0Time (ms)
C3bLoadJobStep0Time (ms)
C3bLoadJobWait1Time (ms)
C3bLoadJobStep1Time (ms)
C3bLoadJobWait2Time (ms)
C3bLoadJobStep2Time (ms)
C3bLoadJobDecodeTime (ms)
C3bLoadJobDecodeMeshTime (ms)
C3bLoadJobDownloadC3bTime (ms)
TransitTransferAnnotationLabelPart
annotation
T@"<VKAnnotation>",&,N,V_annotation
presentationCoordinate
T{?=dd},N
presentationCourse
mode
tracking
TB,N,V_tracking
animatingToCoordinate
TB,N,V_animatingToCoordinate
showCourse
stale
TB,N,V_stale
enabled
FoggedDiffuseLandmarkShader
roadsWithSimpleLineMeshesAvailable
tilePrefetchNumberOfScreens
supportsHiResRTT
isPad
shouldDrawWhenReady
shouldStyleLabelsInParallel
shouldLayoutLabelsInParallel
shouldPregenerateLabelGlyphs
canMakeSharingThumbnails
supportsBuildingShadows
supportsBuildingStrokes
TB,R,N,V_supportsBuildingStrokes
supports3DBuildingStrokes
TB,R,N,V_supports3DBuildingStrokes
supportsHiResBuildings
supports3DBuildings
supportsPerFragmentLighting
TB,R,N,V_supportsPerFragmentLighting
supportsCoastlineGlows
TB,R,N,V_supportsCoastlineGlows
proceduralRoadAlpha
TB,R,N,V_proceduralRoadAlpha
useCheapTrafficShader
TB,R,N,V_useCheapTrafficShader
memorySize
TI,R,N,V_memSize
tileDecodeQueueWidth
processingQueueWidth
lowPerformanceDevice
routeLineSimplificationEpsilon
supportsARMode
TB,R,N,V_supportsARMode
DeviceClassNumber
DeviceSupportsSimplisticRoadMesh
hw.ncpu
hw.memsize
atmospherecolor
horizonvalues
lightdirection
nightlightfade
modelmat
Material
blendfactor
Texcoords
Clip
clipPlanes
3D Object
StandardLibrary
polylines
T@"NSSet",R,N,V_polylines
selectedPolyline
T@"VKPolylineOverlay",&,N,V_selectedPolyline
boundingMapRegion
T@"GEOMapRegion",R,N,V_boundingMapRegion
T{?=dd},R,N
containsTransit
TB,R,N,V_containsTransit
hash
VKOverlayBoundingMapRegionDidChange
PolygonStrokeShader
 Regional
 Voltaire
%d.%d.%d type: %d pixel: %d
   %@
<%@: %p; maxCount = %lu; count = %lu;
debugDescription
displayLayer
T@"<MDRenderTarget>",N,V_displayLayer
coordinate
followsTerrain
TB,N,V_followsTerrain
PolygonAnimatableStrokeShader
texturePolygonSampler_sampler
textureVariantSampler_sampler
texturePolygonSampler
textureVariantSampler
polygon
animatablePolygon
animatablePolygon.targetColor
polygon.worldTransform
polygon.strokeColor
polygon.polygonColor
polygon.lineWidthOuter
polygon.lineWidthInner
polygon.scale
AnimatablePolygon
targetColor
lastProjectedLocation
T@"GEORouteMatch",&,N,V_lastProjectedLocation
target
T@"<VKPuckAnimatorTarget>",&,N,V_target
T@"<VKPuckAnimatorDelegate>",N,V_delegate
tracePlaybackSpeedMultiplier
Td,N,V_tracePlaybackSpeedMultiplier
behavior
TI,N,V_behavior
_target: %@
_delegate: %@
_locationProjector:
_behavior: %lu
_lastProjectedPosition: %f, %f, %f
_suspended: %@
_pausedCount: %ld
_vehicleHeading: %f
VKPuckAnimator got location %f, %f
Destroying VKPuckAnimator %p
Creating VKPuckAnimator %p
locale
Tq,R,N
isDragged
shields
transitSystems
dataIconImageKeys
iconImageKeys
imageKeys
relatedTexts
relatedSubTexts
<LabelMarker> rect:{%f, %f, %f, %f}
Class_VKBuildingFootprintMapModel
FoggedDiffuseBuildingShader
Icon updateCount(active)=%zu(%zu)
route
T@"GEOComposedRoute",R,N,V_route
routeMatch
currentStepIndex
TI,N,V_currentStepIndex
groupedManeuverCount
TI,R,D,N
groupedManeuverCounts
T@"NSArray",C,N,V_groupedManeuverCounts
navigationCameraHeadingOverride
TI,N,V_navigationCameraHeadingOverride
StyleCrossFade
TrafficGlowShader
style.alphaFadeParam
alphaFadeParam
RouteLineAlphaResetShader
params
params.fadeStart
FadeParams
fadeStart
dynamicStepHandler
T@?,C,N,V_dynamicStepHandler
B12@?0d4
AnimatedCrossFadeLabelPart
/night/vdata
/night/mesh
PatternedTransitLineRibbonShader
patternTexture_sampler
patternTexture
style.normalOffsetRange
style.styleTextureColorPixelOffset
vertexInput_styleTextureCoord
vertexInput_normalOffsetMixFactor
TransitLineRibbonShader
styleTextureCoord
normalOffsetMixFactor
normalOffsetRange
styleTextureColorPixelOffset
PatternStyle
hasName
T@"NSString",&,N,V_name
TI,N,V_quadIndex
hasAnchorPointX
anchorPointX
TI,N,V_anchorPointX
hasAnchorPointY
anchorPointY
TI,N,V_anchorPointY
hasIconRectX
iconRectX
TI,N,V_iconRectX
hasIconRectY
TI,N,V_iconRectY
hasIconRectWidth
iconRectWidth
TI,N,V_iconRectWidth
hasIconRectHeight
iconRectHeight
TI,N,V_iconRectHeight
hasMatchingStyleAttributeKey
matchingStyleAttributeKey
TI,N,V_matchingStyleAttributeKey
hasMatchingStyleAttributeValue
matchingStyleAttributeValue
Ti,N,V_matchingStyleAttributeValue
hasMatchingStyleAttributeLongValue
matchingStyleAttributeLongValue
TQ,N,V_matchingStyleAttributeLongValue
hasSize
Ti,N,V_size
shield_default
shield_small
shield_large
shield_xsmall
shield_xlarge
shield_xxsmall
shield_xxlarge
shield_xxxlarge
shield_medium
shield_xxxsmall
iconRectY
atlasIndex
dflt
  Transit Shield(%s):of=%.2f,size=%s
HeightFallbackLoadJobTotalTime
HeightFallbackLoadJobMainTime
LandmarkDepthShader
Unknown node type: 
 size: 
C3B VData
a_position
h264
unknown
astc
.c3m
-night.
isFixedSize
TB,R,N,V_isFixedSize
centroid
T{Matrix<float, 2, 1>=[2f]},R,N,V_centroid
tileZoom
origin
Tr^{Matrix<float, 3, 1>=[3f]},R,N
maxPoint
T{Matrix<float, 3, 1>=[3f]},R,N
cullingMask
TI,R,N,V_cullingMask
fillMeshes
T^{vector<std::__1::shared_ptr<ggl::PolygonBase::CompressedMeshMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::PolygonBase::CompressedMeshMesh> > >=^{shared_ptr<ggl::PolygonBase::CompressedMeshMesh>}^{shared_ptr<ggl::PolygonBase::CompressedMeshMesh>}{__compressed_pair<std::__1::shared_ptr<ggl::PolygonBase::CompressedMeshMesh> *, std::__1::allocator<std::__1::shared_ptr<ggl::PolygonBase::CompressedMeshMesh> > >=^{shared_ptr<ggl::PolygonBase::CompressedMeshMesh>}}},R,N
attributeSets
T@"NSOrderedSet",R,N
styleQueries
T^{vector<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::allocator<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > > >=^{shared_ptr<gss::StylesheetQuery<gss::PropertyID> >}^{shared_ptr<gss::StylesheetQuery<gss::PropertyID> >}{__compressed_pair<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > *, std::__1::allocator<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > > >=^{shared_ptr<gss::StylesheetQuery<gss::PropertyID> >}}},R,N
selectedStyleQueries
Polygon Fill Mesh
Polygon Fill Vertex Data
Polygon Fill Index Data
TI,N,V_identifier
atlas
T@"NSMutableArray",&,N,V_atlas
T@"NSMutableArray",&,N,V_icons
icons
T@"NSData",&,N,V_texture
quadWidth
TI,N,V_quadWidth
TI,N,V_quadHeight
quadHeight
FlyoverNightShader
night_sampler
night
AnimatedTexturedGroundCoverShader
landSamplerA_sampler
landSamplerB_sampler
landSamplerA
landSamplerB
variation
variation.textureVariation
Variation
textureVariation
namedLineMesh
T^{BaseMesh=^^?*^^?^{ResourceManager}^{RenderResource}^{MeshCReflection}{vector<std::__1::shared_ptr<ggl::VertexData>, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > >=^{shared_ptr<ggl::VertexData>}^{shared_ptr<ggl::VertexData>}{__compressed_pair<std::__1::shared_ptr<ggl::VertexData> *, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > >=^{shared_ptr<ggl::VertexData>}}}{shared_ptr<ggl::IndexData>=^{IndexData}^{__shared_weak_count}}},R,N
unnamedLineMesh
polygonLineMesh
venueOutlineMesh
venueBuildingOutlineMesh
coastLineMesh
poiPointsMesh
verticesPointsMesh
junctionsPointsMesh
overpassPointsMesh
realTransitNodesMesh
namedLineCount
TI,R,N,V_namedLineCount
namedLineVertCount
TI,R,N,V_namedLineVertCount
unnamedLineCount
TI,R,N,V_unnamedLineCount
unnamedLineVertCount
TI,R,N,V_unnamedLineVertCount
polygonCount
TI,R,N,V_polygonCount
polygonVertCount
TI,R,N,V_polygonVertCount
venueOutlinesCount
TI,R,N,V_venueOutlinesCount
poiCount
TI,R,N,V_poiCount
vertexCount
TI,R,N,V_vertexCount
junctionCount
TI,R,N,V_junctionCount
overpassCount
TI,R,N,V_overpassCount
coastLineCount
TI,R,N,V_coastLineCount
coastLineVertCount
TI,R,N,V_coastLineVertCount
/RealTransitNodes
/DebugOverpassPoints
/DebugJunctionPoints
/DebugVerticesPoints
/DebugPOIPoints
/DebugCoastLines
/DebugVenueBuildingOutlines
/DebugVenueOutlines
/DebugPolygonLines
/DebugUnnamedLines
/DebugNamedLines
isAwayFromRoute
isRamp
isStartOfRoadName
isInGuidance
isGuidanceStepStart
isVisible
TB,R,N,V_isVisible
maneuverSign
T@"VKLabelNavRoadLabel",R,N,V_maneuverSign
isEtaFeature
VKLabelNavManeuver
TransitNodeColorizedShader
T@"NSString",&,N,V_identifier
T@"NSMutableArray",&,N,V_variants
hasGenericShieldStyleInfo
genericShieldStyleInfo
T@"VKPGenericShieldStyleInfo",&,N,V_genericShieldStyleInfo
variants
%@ %@
FEATURE:
LABEL:
    LabelsPerStyle:%.1f
   %@:(%d, %d)
Style-Cache shared:%zu layout:%zu
   Pushed Labels: %d
   Quad Layout: %lu
Counts:
   Parts Cross Fading: %d
   Style Fade Parts: %d
   Cross Fade Parts: %d
Fade:
Outcome: (Staging, Display)
Collision Tested: Items=%u ReserveSpace=%u Lines=%u
%s=%d 
DisplayState: 
StagingState: 
ImageLoader: hits=%u, misses=%u, hit%%=%.1f, size=%u
Staging GlyphCache: hits=%u, misses=%u, hit%%=%.1f, size=%u
Scissor Rect(Signs): min=(%u, %u), max=(%u, %u)
Scissor Rect: min=(%u, %u), max=(%u, %u)
Occlusions: %zu unsubmitted, %zu pending
Loading Counts: image=%u, textData=%u, glyphImage=%u
ExternalObjects: %@
Custom features: %zu
DisplayLabels: total=%zu active=%u
Labels: active=%zu(%zu) cached=%zu custom=%zu overridden=%zu exist=%u
MapTiles: tiles=%zu, label-fail(noFeature=%u, noStyle=%u, zRange=%u)
Total TextDataFontVariant: %u
Feature Pool: tiles=%zu, points=%zu, roads=%zu, transit links=%zu
MapTiles: %li Labels: %zu Labels shown: %i
Feature Pool: %li roads, %li points, %li transit links
Label 
VKTestTileRequesterDomain
vmp4
Tiles
T@"NSMutableArray",&,N,V_shields
hasAtlasIndex
TB,N
TI,N,V_atlasIndex
hasQuadIndex
hasMinDigits
TI,N,V_minDigits
hasMaxDigits
TI,N,V_maxDigits
Tf,N,V_textBaseline
hasCenterOffsetX
centerOffsetX
Tf,N,V_centerOffsetX
hasFontName
T@"NSString",&,N,V_fontName
hasFontSize
Tf,N,V_fontSize
hasFontColor
fontColor
T{?=fIII},N,V_fontColor
hasTextStroke
T{?={?=fIII}f},N,V_textStroke
hasTextShadow
textShadow
T{?={?=fIII}fff{?=b1b1}},N,V_textShadow
hasNonDigitFontName
T@"NSString",&,N,V_nonDigitFontName
hasNonDigitFontSize
nonDigitFontSize
Tf,N,V_nonDigitFontSize
centerPointsCount
centerPoints
T^f,R,N
layers
T^{?=IiifI{?=b1b1b1b1b1}},R,N
hasBackgroundColor
TI,N,V_backgroundColor
borderColor
TI,N,V_borderColor
hasCapWidthLeft
capWidthLeft
Tf,N,V_capWidthLeft
hasCapWidthRight
Tf,N,V_capWidthRight
hasPaddingLeft
Tf,N,V_paddingLeft
hasPaddingRight
paddingRight
Tf,N,V_paddingRight
hasTextMaskColor
textMaskColor
Ti,N,V_textMaskColor
hasLineSpacing
hasNonDigitFontColor
nonDigitFontColor
T{?=fIII},N,V_nonDigitFontColor
MASK_COLOR_LEGIBLE_ON_TRANSIT_LINE
paddingLeft
capWidthRight
layer
centerPoint
nonDigitFontName
textStroke
maxDigits
minDigits
quadIndex
idx (%tu) is out of range (%tu)
title
T@"NSString",R,C,N,V_title
subtitle
T@"NSString",R,C,N,V_subtitle
uniqueID
TQ,R,N,V_uniqueID
uniqueString
T@"NSString",R,N,V_uniqueString
Ti,R,N,V_type
isNotForDisplay
TB,R,N,V_isNotForDisplay
routeRelevance
Ti,N,V_routeRelevance
isOnSelectedRoute
TB,N,V_isOnSelectedRoute
routeOffsetInMeters
TI,N,V_routeOffsetInMeters
street
T@"NSString",R,N,V_street
crossStreet
T@"NSString",R,N,V_crossStreet
info
T@"NSString",R,N,V_info
startDate
T@"NSDate",R,N,V_startDate
endDate
T@"NSDate",R,N,V_endDate
lastUpdatedDate
T@"NSDate",R,N,V_lastUpdatedDate
significance
Ti,R,N,V_significance
T@"VKTileProvider",N,V_tileProvider
Ti,N,V_mode
fallbackFunction
TC,N,V_fallbackFunction
useStableFallback
TB,N,V_useStableFallback
TI,N,V_neighborMode
prefetchEnabled
TB,N,GisPrefetchEnabled,V_prefetchEnabled
client
T@"<VKTileProviderClient>",N,V_client
T@"VKTileKeyList",R,N,V_keysInView
neighborKeys
T@"VKTileKeyList",R,N,V_neighborKeys
tilesToRender
T@"NSSet",R,N,V_tilesToRender
neighborTiles
T@"NSSet",R,N,V_neighborTiles
loadingProgress
Tf,R,N,V_loadingProgress
finishedLoading
TB,R,N,GisFinishedLoading,V_finishedLoading
finishedLoadingOptionalLayers
TB,R,N,GisFinishedLoadingOptionalLayers,V_finishedLoadingOptionalLayers
hasFailedTile
TB,R,N,V_hasFailedTile
debugLayer
T@"<VKMapLayer>",&,N,V_debugLayer
debugLayerKeys
T@"GEOTileKeyList",R,N,V_debugLayerKeys
i12@?0r^v4r^v8
B8@?0r^{VKTileKey=IiiI}4
B16@?0C4@"VKTileSource"8B12
%s - %@ (%.2f sec)
Unknown (ephemeral)
Available (ephemeral)
Loading (ephemeral)
Unavailable (terminal)
Failed to load (terminal)
Failed to decode (terminal)
B24@?0@"VKMapTile"4C8@"VKTileSource"12B16B20
Tile Key: 
Tile: 
Load
Render
Cached
Active
Culling
GEOTileLoader:
Active Map Layers
%@%s
(Optional) 
%lu prefetched keys, next prefetch z: %f
Neighbour Keys::
%lu neighbor keys
Rendering
Ignoring Neighbors
Loading
allback tiles in the currently loaded scene %lu:
allback tiles in the currently loaded scene %d
 holes in the currently loaded scene %lu
Holes in currently loaded scene %d
tiles to render %lu:
Tile to render %d:
Selected keys in view %lu :
Tile selection is configured with this sample grid size 
Self: VKTileProvider
GEOTileLoader:
%s => %@%@
Active Map Layers
%lu prefetched keys, next prefetch z: %f
%lu neighbor keys, %@
%lu fallback tiles in the currently loaded scene
%lu holes in the currently loaded scene
%lu tiles to render
%lu selected keys in view
Prefetch Timer: %f
Last Fetch: %f, Last Select: %f
Evaluation Timer: %f
Current Time: %f
Tile Pool, Count: %lu, Max Capacity: %lu, Reserved Capacity: %lu
Tile selection is configured with: %ld sample grid size
No tile for this key
Can NOT Render %@
Can Render %@
No tile for key: %@
can %@render: %@
NOT 
metroArea
Ti,R,N,V_metroArea
rasterized
T@"VKRasterTile",&,N,V_rasterized
needsRasterization
TB,N,V_needsRasterization
labelMapTile
T{shared_ptr<md::LabelMapTile>=^{LabelMapTile}^{__shared_weak_count}},N,V_labelMapTile
Ready (terminal)
Grid
Background Rasters
Standard Rasters
Satellite Rasters
Hybrid Rasters
Polygons
Rivers
Roads
LandCover
Transit Polygons
Buildings
Transit Lines
Selected Transit Lines
Venues
Raster Overlays Beneath Labels
Point Labels
POI Labels
Polygon Labels
Road Labels
Realistic Labels
Transit Labels
Venue Labels
Overlays
Vector Road Traffic
Labels
Traffic Incidents
Raster Overlays Above Labels
Annotations
Resources
Attributes
Count
{ %@, %.0fs, %@, %@ }
%s => { %@, %.0fs, %@, %@ }
<%@ %p> (%@) rasterized: %@ (%@), %d tiles, %d ephemeral states, %d non-ready terminal states
dirty
clean
com.apple.maps.snapshot.badrequest
Node - %s
Node - 
Children
Name
Node
T@"<VKTileSourceClient>",N,V_client
sharedResources
T@"VKSharedResources",&,N,V_sharedResources
contentScale
preloadOnly
TB,N,V_preloadOnly
requireWiFi
TB,N,V_requireWiFi
originRequested
TC,R,N,V_originRequested
originOverridden
TB,R,N,V_originOverridden
TC,N,V_targetDisplay
minimumZoomLevel
maximumZoomLevel
maximumZoomLevelWithoutOverride
minimumZoomLevelBoundsCamera
maximumZoomLevelBoundsCamera
device
zEquivalenceClass
minimumDownloadZoomLevel
maximumDownloadZoomLevel
keys
geokey:%@, srckey:%@, rdrkey:%@
%d.%d.%d (%d)
 <Unknown %d>
 Feature
 r2: %02x%02x%02x
failedTiles
decoding
pending loads
%@: %p; loadingTiles:
failedTiles: %@
decoding: %@
pending loads: %@
<%@: %p; loadingTiles: %d
%@ => %@
<%@ %p> %zu items
Scale
alternateColor
shininessAndSpecularity
textureCoordScale
textureLightness
cameraPositionInTileSpace
Lighting
lightDirection
lightColor
lightSpecularColor
ambientLightColor
Fade
fadeEquation
alphaFactor
Gradient
equation
ShouldUpscaleRasterTiles
VKRecentNoDataKeysListCapacity
[server:
,zooms:
FlyoverFlatShader
colorlookup_sampler
diffuse_sampler
diffuse
colorlookup
flatFactor
flatFactor.factor
vertexInput_flatcoord
flatcoord
FlatFactor
factor
[%i]"%s":{%@}
shiftDir
com.apple.vectorkit.dispatch.layoutqueue
com.apple.vectorkit.dispatch.renderqueue
com.apple.vectorkit.dispatch.layoutbackgroundqueue
com.apple.vectorkit.dispatch.glyphrenderqueue
com.apple.mapdisplay.dispatch.layoutworkerqueue
com.apple.mapdisplay.labelDataLoaderQueue
com.apple.mapdisplay.dispatch.tiledecodequeue
com.apple.mapdisplay.dispatch.tiledecodestylingqueue
com.apple.mapdisplay.textureManagerRootQueue
com.apple.mapdisplay.preemptiveLoadQueue
/render/tilebasic/vertexdata
/ClippedElement
hasStyle
Ti,N,V_style
hasBorderColor
hasTextColor
textColor
TI,N,V_textColor
hasTextStrokeSize
textStrokeSize
Tf,N,V_textStrokeSize
hasTextStrokeColor
textStrokeColor
TI,N,V_textStrokeColor
textDropShadowOffsetsCount
textDropShadowOffsets
hasTextDropShadowSize
Tf,N,V_textDropShadowSize
hasTextDropShadowColor
TI,N,V_textDropShadowColor
textDropShadowColor
textDropShadowSize
textDropShadowOffset
nonbordered
bordered
interchange
intersection
junction
FlyoverRoadFillTexturedShader
FoggedDiffuseBuildingTopShader
BuildingFlatStrokeShader
building.polygonColor
building.strokeColor
building.lineWidth
building.offsetScale
building.tileOrigin
building.tileSize
vertex_input_offsetAndTexture
offsetAndTexture
lineWidth
shouldUpdateStyle
TB,N,V_shouldUpdateStyle
isGrouped
uniqueIdentifier
T@"NSString",R,N,V_uniqueIdentifier
groupIdentifier
Ti,R,N,V_groupIdentifier
approachingDistanceInMeters
Td,R,N,V_approachingDistanceInMeters
type
speedThreshold
TI,R,N,V_speedThreshold
labelState
Ti,N,V_state
approachingRouteOffset
T{PolylineCoordinate=If},N,V_approachingRouteOffset
isAboveSpeedThreshold
TB,N,V_isAboveSpeedThreshold
speedLimitText
T@"NSString",R,N,V_speedLimitText
cameraPriority
TI,R,N,V_cameraPriority
/meshes/flyover
Unknown value for altitude::LabelData::TileType: %d
VKLabelTileTypeFromAltitudeLabelDataTileTypeInvalid
LabelQueryMesh
B12@?0^{Tile=^^?{RigidTransform<double>={Quaternion<double>={Matrix<double, 3, 1>=[3d]}d}{Matrix<double, 3, 1>=[3d]}}{Box<double, 3>={Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}}{Box<double, 3>={Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}}{SizedArray<altitude::TileView, 2>=I[2{TileView=^^?^{Tile}^{View}fIBIBI}]{vector<altitude::TileView, std::__1::allocator<altitude::TileView> >=^{TileView}^{TileView}{__compressed_pair<altitude::TileView *, std::__1::allocator<altitude::TileView> >=^{TileView}}}}^{RootTileData}^{Tile}{vector<altitude::Tile::ChildData, std::__1::allocator<altitude::Tile::ChildData> >=^{ChildData}^{ChildData}{__compressed_pair<altitude::Tile::ChildData *, std::__1::allocator<altitude::Tile::ChildData> >=^{ChildData}}}[5^{TileComponent}]IIII{TileId=IIII}fff^{TileListener}BiB}4^{Tile=^^?{RigidTransform<double>={Quaternion<double>={Matrix<double, 3, 1>=[3d]}d}{Matrix<double, 3, 1>=[3d]}}{Box<double, 3>={Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}}{Box<double, 3>={Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}}{SizedArray<altitude::TileView, 2>=I[2{TileView=^^?^{Tile}^{View}fIBIBI}]{vector<altitude::TileView, std::__1::allocator<altitude::TileView> >=^{TileView}^{TileView}{__compressed_pair<altitude::TileView *, std::__1::allocator<altitude::TileView> >=^{TileView}}}}^{RootTileData}^{Tile}{vector<altitude::Tile::ChildData, std::__1::allocator<altitude::Tile::ChildData> >=^{ChildData}^{ChildData}{__compressed_pair<altitude::Tile::ChildData *, std::__1::allocator<altitude::Tile::ChildData> >=^{ChildData}}}[5^{TileComponent}]IIII{TileId=IIII}fff^{TileListener}BiB}8
etaText
T@"NSString",R,N,V_etaText
glyphType
TC,R,N,V_glyphType
tollCurrencyType
TC,R,N,V_tollCurrencyType
etaDescription
T@"VKRouteEtaDescription",&,N,V_etaDescription
hasRouteEta
divergenceCoordinate
T{PolylineCoordinate=If},R,N,V_divergenceCoordinate
convergenceCoordinate
T{PolylineCoordinate=If},R,N,V_convergenceCoordinate
etaComparisionToMain
TC,N,V_etaComparisonToMain
routeInfo
T@"VKRouteInfo",R,N,V_routeInfo
useType
TC,R,N,V_useType
currentLegIndex
Ti,N,V_currentLegIndex
Ti,N,V_currentStepIndex
snappingToTransitLines
TB,N,V_snappingToTransitLines
inspectedLegIndex
Ti,N,V_inspectedLegIndex
inspectedStepIndex
Ti,N,V_inspectedStepIndex
puckLocation
T{?=dd},N,V_puckLocation
puckRadius
Tf,N,V_puckRadius
puckSnappedStopID
TQ,N,V_puckSnappedStopID
T@"NSString",&,N,V_locale
accessPointEntryName
T@"NSString",&,N,V_accessPointEntryName
accessPointExitName
T@"NSString",&,N,V_accessPointExitName
alternateRoutes
T@"NSArray",&,N,V_alternateRoutes
totalRouteCount
zh-hans
v8@?0L4
 <node> Missing-Feature Node
TransitNodeExternalIcon
    line[uid:%llu,%i,%s,%s] draw[to:%i, FROM:%i]
   OutgoingLink[%i]
    line[uid:%llu,%i,%s,%s] draw[TO:%i, from:%i]
   IncomingLink[%i]
 <junction>
  %i:%p, dir:%.02f, domDelta:%.1f
Links:
RefLink:%p, isSuperSet:%i, domDir:%.1f
point=(%f,%f)
<Junction:%p>
vertexAndTexture
Error: 
: Parse error in CSV file
skewedViewConstantData
SolidTrafficShader
vertexInput_shiftDir
allowAlpha
TB,N,V_allowAlpha
renderTarget
imageTexture
resolvedRenderTargetFormat
T{RenderTargetFormat=[4i]IIi},R,N,V_resolvedRenderTargetFormat
T{CGSize=ff},N,V_size
T{CGRect={CGPoint=ff}{CGSize=ff}},N,V_bounds
T@"<GGLRenderQueueSource>",N,V_renderSource
multiSample
TB,R,N,V_useMultisampling
format
T^{Renderer=^^?^{Device}IIIBf{vector<std::__1::shared_ptr<ggl::DebugRenderer>, std::__1::allocator<std::__1::shared_ptr<ggl::DebugRenderer> > >=^{shared_ptr<ggl::DebugRenderer>}^{shared_ptr<ggl::DebugRenderer>}{__compressed_pair<std::__1::shared_ptr<ggl::DebugRenderer> *, std::__1::allocator<std::__1::shared_ptr<ggl::DebugRenderer> > >=^{shared_ptr<ggl::DebugRenderer>}}}{unique_ptr<ggl::RenderQueue, std::__1::default_delete<ggl::RenderQueue> >={__compressed_pair<ggl::RenderQueue *, std::__1::default_delete<ggl::RenderQueue> >=^{RenderQueue}}}{shared_ptr<ggl::CommonLibrary>=^{CommonLibrary}^{__shared_weak_count}}{unique_ptr<ggl::RenderResourceFences, std::__1::default_delete<ggl::RenderResourceFences> >={__compressed_pair<ggl::RenderResourceFences *, std::__1::default_delete<ggl::RenderResourceFences> >=^{RenderResourceFences}}}^{Texture2D}{unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer> >={__compressed_pair<ggl::CommandBuffer *, std::__1::default_delete<ggl::CommandBuffer> >=^{CommandBuffer}}}},R,N
shouldRasterize
T{CGSize=ff},R,N
/ImageCanvasTarget
/ImageCanvasMSAARenderBuffer
/ImageCanvasResolveRenderBuffer
/ImageCanvasNONMSAARenderBuffer
/ImageCanvasDepthBuffer
region
T{?={?=dd}{?=dd}},N,V_region
Ti,N,V_mapType
TI,N,V_scale
T@"NSLocale",&,N,V_locale
manifestConfiguration
T@"GEOResourceManifestConfiguration",&,N,V_manifestConfiguration
<%@ %p> %@ %dx%dpx, scale: %d, locale: %@
VKMapTypeHybrid
VKMapTypeSatelliteGlobe
VKMapTypeHybridGlobe
VKMapTypeStandardBase
VKMapTypeStandardWithoutPOI
VKMapTypeHybridRoads
T{CGSize=ff},R
T{?=CCCCB},N,V_mapDisplayStyle
TC,N,V_emphasis
showsVenues
com.apple.maps.snapshot.failedtiles
v12@?0@"VKMapSnapshot"4@"NSError"8
taskContext
T{shared_ptr<md::TaskContext>=^{TaskContext}^{__shared_weak_count}},R,N
T@"<VKImageCanvasDelegate>",N,V_delegate
mapDisplayStyle
T{DisplayStyle=CCCCC},N,V_mapDisplayStyle
T@"NSArray",R,N,V_overlays
roadTile
T@"VKVectorTile",&,N,V_roadTile
maximumStyleZ
Tf,R,N,V_maximumStyleZ
resourceInfo
T{shared_ptr<md::ResourceInfo>=^{ResourceInfo}^{__shared_weak_count}},R,N,V_resourceInfo
roadTileSource
T@"VKRoadTileSource",N,V_roadTileSource
dynamicTileSource
T@"VKTrafficDynamicTileSource",R,N,V_dynamicTileSource
FlyoverRoadStrokeProceduralShader
CurrencyGlyphUSD
CurrencyGlyphWon
CurrencyGlyphYen
CurrencyGlyphEuro
CurrencyGlyphPound
CurrencyGlyphRuble
CurrencyGlyphRupee
T{?=dd},N,V_presentationCoordinate
Offsets: Start=%.1f Middle=%.1f End=%.1f
Mergetype=%i, mergedIndex=%i
makeFacades
TB,N,V_makeFacades
RibbonExtra
ewidth
stroke
test.tile
MockTileCache
com.apple.MapsRedux
%@%@%@
lang=en&style=%d&size=%d&scale=%d&v=%d&z=%d&x=%d&y=%d
tileTest.db
=====
 %2d  %6.2f
Downtown 1
Downtown 2
Downtown 3
South Bay
Cupertino
%4d FPS = %6.2f
/GroundMesh
isHidden: 
isInBackground: 
Render Target: 
hasRenderTarget: 
size: 
contentScale: 
renderSource: 
multiSample: 
sizeInPixels: 
shouldRasterize: 
finalRenderTarget: 
tileSet
T@"GEOActiveTileSet",&,N,V_tileSet
%@ would like to display tiles down to z:%lu but this would be bad for performance. Forcing min zoom level to %ld. We either need tiles available for download at a lower zoom level or the stylesheet should not ask to display these tiles at such a low zoom level. 
tileSource
T@"VKTileSetBackedTileSource",N,V_tileSource
VKShouldFlushTileCachesNotification
VKEnablePeformanceHUD
VKDisablePeformanceHUD
VKExtendedPeformanceHUD
VKDMinimalPeformanceHUD
ExtraExtraExtraSmall
ExtraExtraSmall
ExtraSmall
ExtraLarge
ExtraExtraLarge
ExtraExtraExtraLarge
LineShader
vertex_attributes_normal
vertex_attributes_texCoord
index data
UnitQuad
hasNewRoadMatches
TB,V_hasNewRoadMatches
sections
T{vector<geo::fast_shared_ptr<md::RouteLineSection>, std::__1::allocator<geo::fast_shared_ptr<md::RouteLineSection> > >=^{fast_shared_ptr<md::RouteLineSection>}^{fast_shared_ptr<md::RouteLineSection>}{__compressed_pair<geo::fast_shared_ptr<md::RouteLineSection> *, std::__1::allocator<geo::fast_shared_ptr<md::RouteLineSection> > >=^{fast_shared_ptr<md::RouteLineSection>}}},R,N,V_sections
T{Box<double, 2>={Matrix<double, 2, 1>=[2d]}{Matrix<double, 2, 1>=[2d]}},R,N,V_bounds
T@"VKPolylineOverlay",R,N,V_overlay
observer
T@"<VKRouteLineObserverProtocol>",N,V_observer
simplificationEpsilonPoints
Td,N,V_simplificationEpsilonPoints
v28@?0r^{Matrix<float, 2, 1>=[2f]}4r^{PolylineCoordinate=If}8I12@"VKPolylinePath"16@"GEOSnappedRouteEdge"20B24
v8@?0{fast_shared_ptr<md::RouteLineSection>=^{_fast_shared_ptr_control}}4
  halfExt:(%.2f, %.2f)
  radius:%.2f
  alpha:%.2f
ExternalIcon
public.png
sceneDidLoadCallback
T@?,C,N,V_sceneDidLoadCallback
flyoverMode
Ti,R,N,V_flyoverMode
globeCameraController
T@"VKGlobeCameraController",R,N,V_globeCameraController
arCameraController
T@"VKARCameraController",R,N,V_arCameraController
flyoverAvailable
TB,R,N,V_canShowFlyover
T@"NSSet",R,N
TB,N,V_disableLabels
TB,N,V_showsBuildings
TB,N,V_showsVenues
B20@?0{?=dd}4
i36@?0d4d12d20d28
Self: VKClassicGlobeCanvas
Tile id at camera position: %s
Tiles: %d BaseSurface: %d (%d kB, avg: %d kB) Geometry: %d (%d kB, avg: %d kB)
Flyover region: %d version: %d C3M version: %d.%d C3MM version: %d.%d
$compact
italic
condensed
ultralight
light
thin
regular
medium
semibold
bold
heavy
black
Error SECTION_MARKER expected %x
Error SOI expected
%s#%d: warning jpg yv12. samp_factor[0] = 0x%02X, samp_factor[i] = 0x%02X
/BuildRoot/Library/Caches/com.apple.xbs/Sources/VectorKit_Sim/VectorKit-1359.44.8.15.35/src/karo/media/image/pwin_jpg/ap_rwjpg.cpp
   %llu
  TransitLineIDs:
   isActive:%i isSelected:%i
 drawAsXfer:%i nodeIconType:%i, nodeType:%s, tileZ:%i
 <node>
FlyoverMorphBorderShader
finerSatellite_sampler
finerFlyover_sampler
finerBlend_sampler
coarseSatellite_sampler
finerSatellite
finerFlyover
finerBlend
coarseSatellite
vertexInput_finermerccoord
vertexInput_finerflyovercoord
vertexInput_coarsemerccoord
morphX
finermerccoord
finerflyovercoord
coarsemerccoord
Property - %s
Property - 
Tags
Values
StyleAttribute
Time
Visual Type
Primitive
Property
@"NSString"8@?0@"NSString"4
_%lux
com.apple.VectorKit
/HeightMesh/
/BaseSurface/
tiles
T@"NSSet",R,N,V_tiles
visibleRect
T{Box<double, 2>={Matrix<double, 2, 1>=[2d]}{Matrix<double, 2, 1>=[2d]}},R,N,V_visibleRect
snappingRect
T{Box<double, 2>={Matrix<double, 2, 1>=[2d]}{Matrix<double, 2, 1>=[2d]}},R,N,V_snappingRect
trafficTimeStamp
Td,R,N,V_trafficTimeStamp
routeRibbon
T@"VKRouteLine",N,V_routeRibbon
routeRibbonObserver
T@"<VKPolylineOverlayRouteRibbonObserver>",N,V_routeRibbonObserver
composedRoute
T@"GEOComposedRoute",R,N,V_composedRoute
selected
TB,N,V_selected
showTraffic
TB,N,V_showTraffic
vkBounds
T{Box<double, 2>={Matrix<double, 2, 1>=[2d]}{Matrix<double, 2, 1>=[2d]}},R,N
PolygonSolidFillShader
solidFill
solidFill.color
solidFill.origin
solidFill.size
SolidFill
T@"<VKRouteMatchedAnnotationPresentation>",&,N
T@"<VKGlobeLineContainerDelegate>",N,V_delegate
RouteArrowMinZoom
highlightFeaturesOnly
TB,N,V_highlightFeaturesOnly
paintMapTiles
TB,N,V_paintMapTiles
paintSelectedMapTiles
TB,N,V_paintSelectedMapTiles
paintTiles
TB,N,V_paintTiles
paintRoadBoundaries
TB,N,V_paintRoadBoundaries
paintRoadTiles
TB,N,V_paintRoadTiles
paintPoiTiles
TB,N,V_paintPoiTiles
paintPointTiles
TB,N,V_paintPointTiles
paintPolygonTiles
TB,N,V_paintPolygonTiles
paintLandcoverTiles
TB,N,V_paintLandcoverTiles
paintVenues
TB,N,V_paintVenues
paintVertices
TB,N,V_paintVertices
paintJunctions
TB,N,V_paintJunctions
paintCoastlines
TB,N,V_paintCoastlines
paintBuildingNormals
TB,N,V_paintBuildingNormals
disableRoute
TB,N,V_disableRoute
labelHighlighting
TB,N,V_labelHighlighting
transitHighlighting
TB,N,V_transitHighlighting
labelCollisionEnabled
TB,N,V_labelCollisionEnabled
labelCollideContinuously
TB,N,V_labelCollideContinuously
labelFlipAlternatePositionsEnable
TB,N,V_labelFlipAlternatePositionsEnable
labelTileDecodeEnabled
TB,N,V_labelTileDecodeEnabled
disableBackgroundLabelLayout
TB,N,V_disableBackgroundLabelLayout
labelAllowDefaultStyle
TB,N,V_labelAllowDefaultStyle
labelUpdateMapTilesContinuously
TB,N,V_labelUpdateMapTilesContinuously
labelAutoOffsetRoadText
TB,N,V_labelAutoOffsetRoadText
paintRouteDebugMarkers
TB,N,V_paintRouteDebugMarkers
dontMatchRouteLine
TB,N,V_dontMatchRouteLine
dontMapMatchToSnappedRouteLine
TB,N,V_dontMapMatchToSnappedRouteLine
highlightRouteLineSnappingStatus
TB,N,V_highlightRouteLineSnappingStatus
dontVerifyRouteToTransitSnapping
TB,N,V_dontVerifyRouteToTransitSnapping
showManeuverPoints
TB,N,V_showManeuverPoints
paintRoadSigns
TB,N,V_paintRoadSigns
paintLabelBounds
TB,N,V_paintLabelBounds
paintLabelRoadFeatures
TB,N,V_paintLabelRoadFeatures
paintLabelCollisionLines
TB,N,V_paintLabelCollisionLines
paintLabelCounts
TB,N,V_paintLabelCounts
paintTransitCounts
TB,N,V_paintTransitCounts
hideDirectionalArrows
TB,N,V_hideDirectionalArrows
hideClientPositionedFeatures
TB,N,V_hideClientPositionedFeatures
hideServerPositionedRoadFeatures
TB,N,V_hideServerPositionedRoadFeatures
hideServerPositionedTransitFeatures
TB,N,V_hideServerPositionedTransitFeatures
keepTooCloseServerPositionedTransitFeatures
TB,N,V_keepTooCloseServerPositionedTransitFeatures
labelHideLineFeatures
TB,N,V_labelHideLineFeatures
labelHidePointFeatures
TB,N,V_labelHidePointFeatures
paintTrafficSkeleton
TB,N,V_paintTrafficSkeleton
loadGreenTraffic
TB,N,V_loadGreenTraffic
useStaticTrafficFeed
TB,N,V_useStaticTrafficFeed
newRouteTraffic
TB,N,V_newRouteTraffic
showTrafficCasing
TB,N,V_showTrafficCasing
texturedTrafficCasing
TB,N,V_texturedTrafficCasing
prioritizeTrafficSkeleton
TB,N,V_prioritizeTrafficSkeleton
paintRoadsStitchedByName
TB,N,V_paintRoadsStitchedByName
realisticWireframeEnabled
TB,N,V_realisticWireframeEnabled
altitudePauseLoading
TB,N,V_altitudePauseLoading
altitudeFreezeViewNode
TB,N,V_altitudeFreezeViewNode
altitudeTexturePaging
TB,N,V_altitudeTexturePaging
altitudeShowTileBounds
TB,N,V_altitudeShowTileBounds
altitudeHighResSatellite
TB,N,V_altitudeHighResSatellite
altitudeMipmapSatellite
TB,N,V_altitudeMipmapSatellite
altitudeMipmapFlyover
TB,N,V_altitudeMipmapFlyover
altitudeMipmapObjectTree
TB,N,V_altitudeMipmapObjectTree
altitudeShowNightLight
TB,N,V_altitudeShowNightLight
altitudePrintRenderedTilesStat
TB,N,V_altitudePrintRenderedTilesStat
altitudeDisableC3mTextureLoading
TB,N,V_altitudeDisableC3mTextureLoading
altitudeShowTriggerBounds
TB,N,V_altitudeShowTriggerbounds
disableTransitLineDrawing
TB,N,V_disableTransitLineDrawing
disableTransitLineMerging
TB,N,V_disableTransitLineMerging
disableTransitLineGroupMerging
TB,N,V_disableTransitLineGroupMerging
dumpTransitTileContents
TB,N,V_dumpTransitTileContents
dumpRouteAndPath
TB,N,V_dumpRouteAndPath
disableIntraLinkTransitLineCrossings
TB,N,V_disableIntraLinkTransitLineCrossings
useMetalRenderer
TB,N,V_useMetalRenderer
showNavCameraDebugConsole
TB,N,V_showNavCameraDebugConsole
showNavCameraDebugConsoleAttributes
TB,N,V_showNavCameraDebugConsoleAttributes
showNavCameraDebugConsoleProperties
TB,N,V_showNavCameraDebugConsoleProperties
showNavCameraDebugLegend
TB,N,V_showNavCameraDebugLegend
showNavCameraDebugOverlay
TB,N,V_showNavCameraDebugOverlay
ribbonCrispness
Tf,N,V_ribbonCrispness
altitudeProfilingEnabled
TB,N,V_altitudeProfilingEnabled
altitudeProfilingType
TI,N,V_altitudeProfilingType
altitudeProfilingZones
TI,N,V_altitudeProfilingZones
altitudeLodScale
Tf,N,V_altitudeLodScale
altitudeTileQualityThreshold
Tf,N,V_altitudeTileQualityThreshold
altitudeHideMeshTime
Tf,N,V_altitudeHideMeshTime
altitudeFadeSpeed
Tf,N,V_altitudeFadeSpeed
altitudeTourSpeedup
TB,N,V_altitudeTourSpeedup
altitudeTourSpeedupFactor
Tf,N,V_altitudeTourSpeedupFactor
altitudeTelemetryURL
T@"NSString",&,N,V_altitudeTelemetryURL
isInstalledInLockScreen
TB,N,V_isInstalledInLockScreen
enableLoggingInLockScreen
TB,N,V_enableLoggingInLockScreen
useBuildingShadowTexture
TB,N,V_useBuildingShadowTexture
layoutContinuously
TB,N,V_layoutContinuously
enableSignPostEvents
TB,N,V_enableSignPostEvents
useTransactionManager
TB,N,V_useTransactionManager
debugStyleAnimations
TB,N,V_debugStyleAnimations
disableStylesheetAnimations
TB,N,V_disableStylesheetAnimations
renderInSeparateThread
TB,N,V_renderInSeparateThread
forceHiResBuildings
TB,N,V_forceHiResBuildings
readLandmarksFromDisk
TB,N,V_readLandmarksFromDisk
drawPerformanceHUD
TB,N,V_drawPerformanceHUD
expandedPerformanceHUD
TB,N,V_expandedPerformanceHUD
immediateRasterTextureLoading
TB,N,V_immediateRasterTextureLoading
trackingCameraZoomFurther
TB,N,V_trackingCameraZoomFurther
holdOntoStyleAttributes
TB,N,V_holdOntoStyleAttributes
footprintsToSuppress
T@"NSMutableArray",&,N,V_footprintsToSuppress
suppressFootprints
TB,N,V_suppressFootprints
drawDebugTransit
TB,N,V_drawDebugTransit
labelTransitLineCollisionEnabled
TB,N,V_labelTransitLineCollisionEnabled
labelHighlightingVerboseLoggingEnabled
TB,N,V_labelHighlightingVerboseLoggingEnabled
landmark2DStrokeSettings
T{?=BBBff},N,V_landmark2DStrokeSettings
shouldUseTestTileLoader
TB,N,V_shouldUseTestTileLoader
constantlyChangeTileGroup
TB,N,V_constantlyChangeTileGroup
disableRoadSignLimit
TB,N,V_disableRoadSignLimit
enableShieldsOnRouteLine
TB,N,V_enableShieldsOnRouteLine
overrideVenueCameraSettings
TB,N,V_overrideVenueCameraSettings
venueBoundsPaddingForCamera
Tf,N,V_venueBoundsPaddingForCamera
venueZoomOutFalloff
Tf,N,V_venueZoomOutFalloff
enableTrafficCameraLabelDebugging
TB,N,V_enableTrafficCameraLabelDebugging
enableEtaLabelDebugging
TB,N,V_enableEtaLabelDebugging
enableRouteShareSectionDebugging
TB,N,V_enableRouteShareSectionDebugging
enableEtaLabelRectDebugging
TB,N,V_enableEtaLabelRectDebugging
etaLabelDebugScore
TI,N,V_etaLabelDebugScore
etaLabelDebugOrientationMask
TI,N,V_etaLabelDebugOrientationMask
etaLabelsAvoidScreenEdges
TB,N,V_etaLabelsAvoidScreenEdges
enableRouteIntersectionTesting
TB,N,V_enableRouteIntersectionTesting
forceEtaLabelPlacement
TB,N,V_forceEtaLabelPlacement
traceEtaDebugLog
TB,N,V_traceEtaDebugLog
trafficCameraLabelSelfCollide
TB,N,V_trafficCameraLabelSelfCollide
trafficCameraLabelCollideOutExternal
TB,N,V_trafficCameraLabelCollideOutExternal
trafficCameraLabelCollideWithExternal
TB,N,V_trafficCameraLabelCollideWithExternal
enableARDebugConsole
TB,N,V_enableARDebugConsole
enableAROmniTileLoader
TB,N,V_enableAROmniTileLoader
arOverrideDefaults
TB,N,V_arOverrideDefaults
arVirtualPlaneHeight
Tf,N,V_arVirtualPlaneHeight
arDefaultHeight
Tf,N,V_arDefaultHeight
arSwipeGesture
TI,N,V_arSwipeGesture
arPinchGesture
TI,N,V_arPinchGesture
arRenderAtNativeRate
TB,N,V_arRenderAtNativeRate
debugStyleManager
T{shared_ptr<gss::StylesheetManager<gss::PropertyID> >=^{StylesheetManager<gss::PropertyID>}^{__shared_weak_count}},N,V_debugStyleManager
VKARRenderAtNativeRateKey
VKPreferOpenGLRendererKey
AltitudeDisableC3mTextureLoadingKey
indices
vertices
HighlightRouteLineSnappingStatusKey
AltitudeTelemetryURLKey
IS NOT
VK LOCK SCREEN: %@
%s installed in lock screen
VKEnableSignpostsKey
VKKeepTooCloseServerPositionedtransitFeatures
VKHideServerPositionedtransitFeatures
VKHideServerPositionedRoadFeatures
VKHideClientPositionedFeatures
VKDisableBackgroundLabelLayout
HideDirectionalArrowsKey
VKDisableStyleAnimations
VKUseStaticTrafficFeed
VKReadLandmarksFromDisk
T@"VKLabelTile",R,N,V_tile
cstrName
Tr*,R,N
T@"NSString",R,N
shieldGroup
junctionB
T^{?=II^{?}},R,N,V_junctionB
navJunctionA
T@"VKLabelNavJunction",R,N,V_navJunctionA
T{Matrix<float, 2, 1>=[2f]},N,V_direction
TB,N,V_isOnRoute
TB,N,V_isStartOfRoadName
TB,N,V_isInGuidance
TB,N,V_isGuidanceStepStart
areLabelsDisabled
TB,N,V_areLabelsDisabled
routeCrossProduct
Tf,N,V_routeCrossProduct
intraRoadPriority
Ti,N,V_intraRoadPriority
isRoadLabelUnique
TB,N,V_isRoadLabelUnique
suppressRoadSignIfShieldPresent
TB,R,N,V_suppressRoadSignIfShieldPresent
isOnewayToJunction
roadClass
roadSignAlignment
%@_%llX_%@
%@_%llX
 isOnDualCarriageway
 isOnRoute
 isAwayFromRoute
 isGuidanceStepStart
 isInGuidance
 isStartOfRoadName
 routeOffset:%.2f, intraPri:%ld
 ptA->B: %f, %f, %f, %f
VKLabelNavRoad (%@)
DiffuseBuildingTopShader
drawRoadSigns
TB,N,V_drawRoadSigns
T@"VKPolylineOverlay",&,N,V_route
currentLocationText
T@"NSString",&,N,V_currentLocationText
currentRoadName
T@"NSString",&,N,V_currentRoadName
currentShieldGroup
T@"NSString",&,N,V_currentShieldGroup
activeSigns
Tr^{vector<std::__1::shared_ptr<md::NavLabel>, std::__1::allocator<std::__1::shared_ptr<md::NavLabel> > >=^{shared_ptr<md::NavLabel>}^{shared_ptr<md::NavLabel>}{__compressed_pair<std::__1::shared_ptr<md::NavLabel> *, std::__1::allocator<std::__1::shared_ptr<md::NavLabel> > >=^{shared_ptr<md::NavLabel>}}},R,N,V_activeSigns
needsLayout
TB,R,N,V_needsLayout
currentRoadSign
T^{NavCurrentRoadSign=^^?{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{shared_ptr<md::LabelStyle>=^{LabelStyle}^{__shared_weak_count}}B{shared_ptr<gss::StylesheetQuery<gss::PropertyID> >=^{StylesheetQuery<gss::PropertyID>}^{__shared_weak_count}}{?=BBff}{unique_ptr<md::NavLabelPart, std::__1::default_delete<md::NavLabelPart> >={__compressed_pair<md::NavLabelPart *, std::__1::default_delete<md::NavLabelPart> >=^{NavLabelPart}}}{Mercator2<double>=[2d]}{shared_ptr<md::Anchor>=^{Anchor}^{__shared_weak_count}}{Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}BBBfBBff},R,N
currentRoadSignPixelHeight
debugDisableRoadSignLimit
TB,N,V_debugDisableRoadSignLimit
debugEnableShieldsOnRouteLine
TB,N,V_debugEnableShieldsOnRouteLine
artworkCache
T^{VKLabelNavArtworkCache={unique_ptr<LRUCache<unsigned long, VKRoadSignArtwork *, std::__1::hash<unsigned long> >, std::__1::default_delete<LRUCache<unsigned long, VKRoadSignArtwork *, std::__1::hash<unsigned long> > > >={__compressed_pair<LRUCache<unsigned long, VKRoadSignArtwork *, std::__1::hash<unsigned long> > *, std::__1::default_delete<LRUCache<unsigned long, VKRoadSignArtwork *, std::__1::hash<unsigned long> > > >=^{LRUCache<unsigned long, VKRoadSignArtwork *, std::__1::hash<unsigned long> >}}}{unique_ptr<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> >, std::__1::default_delete<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> > > >={__compressed_pair<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> > *, std::__1::default_delete<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> > > >=^{LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> >}}}{unique_ptr<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> >, std::__1::default_delete<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> > > >={__compressed_pair<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> > *, std::__1::default_delete<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> > > >=^{LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> >}}}^{CGColor}^{CGColor}{VKGuidanceManeuverArrowMetrics={CGSize=ff}fff{CGSize=ff}fffCffffffffffffffffBfffBB}},N,V_artworkCache
v8@?0@"GEOSnappedRoutePath"4
name
T@"NSString",R,&,N,V_name
T@"NSString",R,&,N,V_shieldGroup
T{PolylineCoordinate=If},R,N,V_routeOffset
roadName
T@"NSString",R,&,N,V_roadName
routePoint
Ti,R,N,V_routePoint
TransitNodeRGBShader
settings
settings.atlasSize
settings.halfScreenSize
vertexInput_brightness
PrefilteredLineShader
style.vertexOffset
style.canvasSize
style.tileOrigin
style.tileSize
style.zScale
vertex_input_vertex1AndCorner
vertex_input_vertex2AndStyleIndex
vertex1AndCorner
vertex2AndStyleIndex
vertexOffset
canvasSize
tileOrigin
zScale
fogFactor
T@"<MDARControllerDelegate>",N,V_delegate
session
T@"ARSession",R,N,V_session
sessionInterruptedReason
TI,R,N,V_sessionInterruptedReason
isSupported
GlyphWithOuterHaloShader
information
information.maxDistanceStored
NoPosition
NoStyle
NoPixel
Clipped
HideInNav
DebugHide
z < min
z > max
NotVisible
HikerInvalid
MatrixInvalid
LoadingGlyphInfos
NoGlyphInfos
NoQuads
NoText
LoadingArtwork
NoArtwork
DuplicateArtwork
Kinked
Extrapolated
Collided
Deduped
Occluded
ZeroTextSize
Overridden
SceneHide
DeactivateHide
PathBusy
NotDisplayable
%d=%llu
,%d=%llu
%d=%d
%d=%lld
%@%@
SkyShader
style.skyStartOffset
style.horizon
style.screenHeight
vertexInput_vertexPosition
vertexPosition
skyStartOffset
horizon
image
T^{CGImage=},R,N,V_image
showingNoDataPlaceholders
TB,R,N,GisShowingNoDataPlaceholders,V_showingNoDataPlaceholders
supportsSecureCoding
TB,R
public.jpeg
.png
.jpg
%@ size: (%zu, %zu)
{VKCameraState={RigidTransform<double>={Quaternion<double>={Matrix<double, 3, 1>=[3d]}d}{Matrix<double, 3, 1>=[3d]}}ddd}
imageData
/workers/worker
FogShader
Skyfog
fogSlope
fogOffset
screenHeight
skyOffset
skyBottomColor
skyTopColor
businessID
buildings
T{shared_ptr<md::TrafficDynamicTile>=^{TrafficDynamicTile}^{__shared_weak_count}},R,N,V_tile
(%i %i %i %i)
DebugBoundsElement
/RenderableGroup
DebugPointsShader
view.pointsize
view.color
pointsize
nextFireDate
Td,R,N,V_nextFireDate
Value - %s
Value - %lli
Value - %llu
Value - %f
True
False
Value - 
Boolean
Double
Unsigned Number
Number
Value Type
String
Type
basic
Ti,N,V_annotationTrackingZoomStyle
Ti,N,V_annotationTrackingHeadingAnimationDisplayRate
TB,R,N,GisAnimatingToTrackAnnotation
T@"<VKTrackableAnnotation>",R,N
trackingHeading
TB,R,N,GisTrackingHeading
FoggedSpecularBuildingShader
StyleTextureRibbonShader
styleTexture_sampler
styleTexture
style.halfWidthRange
vertexInput_styleTexture
halfWidthRange
/traffic/element/clear/vdata
/traffic/element/clear/idata
/traffic/element/clear/mesh
/loading/skeletonrequestmanager
FlyoverLibrary
tileList
T^@,R,N
numTiles
/morphactor/
/render/morph/indexdata
/render/morph/vertexdata
render/morph/vertexdata
TransitionTileLoadJobTotalTime
TransitionTileLoadJobMainTime
T@"NSSet",&,N,V_tilesToRender
T@"NSSet",&,N,V_neighborTiles
fullyLoaded
TB,N,V_fullyLoaded
mapIsOpaque
TB,N,V_mapIsOpaque
keysInView
T@"VKTileKeyList",&,N,V_keysInView
T@"VKTileKeyList",&,N,V_neighborKeys
debugKeyList
T@"GEOTileKeyList",&,N,V_debugKeyList
overlayLevel
TI,N,V_overlayLevel
B16@?0r^{_GEOTileKey=b6b26b26b6b8b8b8b1b7[4C]}4d8
Download failed: %@ Error: %@
{x:%d y:%d z:%d (%@)}
 Test
 r1: %d
 expires
GeoServicesLoadJobTotalTime (ms)
GeoServicesLoadJobDataSize (bytes)
FlyoverTrafficShader
pattern
shared.skew
style.glow
style.ramp
pattern.pattern
displacement.scaling
vertexInput_binormal
vertexInput_bounds
vertexInput_misc
vertexInput_extension
binormal
bounds
misc
extension
scaling
Pattern
ramp
skew
v28@?0c4L8L12{FeatureAttributeSet={vector<gss::FeatureAttributePair, std::__1::allocator<gss::FeatureAttributePair> >=^{FeatureAttributePair}^{FeatureAttributePair}{__compressed_pair<gss::FeatureAttributePair *, std::__1::allocator<gss::FeatureAttributePair> >=^{FeatureAttributePair}}}}16
Missing texture: %@
white
routeLineArrow.png
GGLTextureManagerQueue
genericshieldstyles
default-genericshields
-small
tourShouldResumeWhenDoneGesturing
TB,N,V_tourShouldResumeWhenDoneGesturing
{CameraFrame<geo::Radians, double>={Coordinate3D<Radians, double>={Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<MeterUnitDescription, double>=d}}{Unit<MeterUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}}8@?0f4
v20@?0r^{_GEOTileKey=b6b26b26b6b8b8b8b1b7[4C]}4@8@"NSError"12@"NSDictionary"16
Regional resource download failed: %@ Error: %@
 VoltaireSimple3D
 Invalid
 text: %d
<altitude::GeoRegionalResourceLoader> %p
TextureWithBrightnessShader
problem computing angle histogram for building roof, quitting
baseHeight (%f) > height (%f) for feature in tile %d.%d.%d
Flat Building Roof Mesh
Flat Building Roof Vertex Data
Flat Building Roof Index Data
TexturedShader
isActive
TB,R,N,V_isActive
Data
didChangeRegion
South
North
West
East
MapInspectorTree
%@/Tree-%ld-%02ld-%02ld.%02ld-%02ld-%02ld.plist
~/Library/Maps/MIT
MITObjectArray
propertiesForMITPath
MITObject
MessageType
Recieve
rootMITObject
Function
Path
Identifier
DebugTree
Tree Data
UUID
Options
com.apple.mapinspectord
Ping
v8@?0@"NSObject<OS_xpc_object>"4
com.apple.Maps.MIController
OptimizedTrafficShader
style.glowColor
style.drivingDirection
style.zoomDependentShift
style.pillPhase
style.frameBufferAlphaScale
style.sideOffset
style.pillLength
style.localPillRadius
style.localPillStart
style.pillAspectRatio
style.pillAlphaFunction
vertexInput_startPosition
vertexInput_endPosition
vertexInput_startDistance
vertexInput_endDistance
vertexInput_direction
vertexInput_uniDirectional
vertexInput_coordinates
startPosition
endPosition
startDistance
endDistance
uniDirectional
coordinates
glowColor
drivingDirection
zoomDependentShift
pillPhase
frameBufferAlphaScale
sideOffset
pillLength
localPillRadius
localPillStart
pillAspectRatio
pillAlphaFunction
/Element
/Renderable
/render/flyoverborder/vertexdata
apple
level: 
  lat: 
  lon: 
  height: 
/render/tilebasic/indexdata
/mesh
/indexdata
/loading/network/regionalresourceloader
/loading/regionalresourcecachenode
unnamed
tile
geoJunction
Tr^{?=II^{?}},R,N,V_geoJunction
tileCoordinate
T{Matrix<float, 2, 1>=[2f]},R,N,V_tileCoordinate
routeOffset
roads
T@"NSArray",R,N,V_roads
outgoingRoad
T@"VKLabelNavRoad",R,N,V_outgoingRoad
incomingRoad
T@"VKLabelNavRoad",R,N,V_incomingRoad
distanceFromPreviousShieldLabel
Tf,N,V_distanceFromPreviousShieldLabel
isOnDualCarriageway
TB,N,V_isOnDualCarriageway
hasSharedRouteDirection
TB,R,N,V_hasSharedRouteDirection
sharedRouteDirection
T{Matrix<float, 2, 1>=[2f]},N,V_sharedRouteDirection
isOnRoute
isIntraRamp
isTileEdgeJunction
isRouteRefineJunction
TB,N,V_isRouteRefineJunction
isRoadTerminus
isIntersection
isMultiRoadIntersection
isOffRouteGraph
isOverpass
TB,R,N,V_isOverpass
isRouteOverpass
TB,N,V_isRouteOverpass
largestRoadClass
depthFromRoute
TI,N,V_depthFromRoute
overpassJunction
T@"VKLabelNavJunction",N,V_overpassJunction
worldUnitsPerMeter
Td,R,N,V_worldUnitsPerMeter
junctionSign
T@"VKLabelNavRoadLabel",R,N,V_junctionSign
requiredLabelPlacement
preferredLabelPlacement
Ti,N,V_preferredLabelPlacement
roads:%@
VKLabelNavJunction 
T{PolylineCoordinate=If},R,N
/render/earthcorona/vertexdata
/render/earthcorona/indexdata
/render/earthcorona/mesh
width
size
offsetY
offsetX
T@"GEORouteMatch",&,N,V_routeMatch
projectedRouteMatch
T@"GEORouteMatch",&,N,V_projectedRouteMatch
projectedPosition
T{Matrix<double, 3, 1>=[3d]},R,N,V_projectedPosition
projectedLocation
projectedCourse
Td,R,N,V_projectedCourse
projectedLocationOnRoute
_projectedCourse: %f
_projectedPosition: %f, %f, %f
_projectedRouteMatch: %@
_routeMatch: %@
GlowAlphaShader
glow
glow.radius
glow.opacity
vertex_attributes_vertex_pos
vertex_attributes_normalAndTexture
vertex_pos
normalAndTexture
Glow
radius
opacity
NavShieldLabelPart
TB,N,V_localizeLabels
labelScaleFactor
T@"CALayer",R,N,V_layer
T{CGSize=ff},N
T{CGRect={CGPoint=ff}{CGSize=ff}},N
renderSource
Tr^{RenderTargetFormat=[4i]IIi},R,N
renderer
sizeInPixels
finalRenderTarget
T^{RenderTarget=^^?^{ResourceManager}^{RenderResource}^^?*{RenderTargetFormat=[4i]IIi}[4^{Texture}][4^{Texture}]^{Texture}IIBB},R,N
averageFPS
v8@?0^{RenderQueue={vector<ggl::RenderQueue::Pass, std::__1::allocator<ggl::RenderQueue::Pass> >=^{Pass}^{Pass}{__compressed_pair<ggl::RenderQueue::Pass *, std::__1::allocator<ggl::RenderQueue::Pass> >=^{Pass}}}{vector<ggl::ComputeQueue *, std::__1::allocator<ggl::ComputeQueue *> >=^^{ComputeQueue}^^{ComputeQueue}{__compressed_pair<ggl::ComputeQueue **, std::__1::allocator<ggl::ComputeQueue *> >=^^{ComputeQueue}}}{vector<ggl::CommandBuffer *, std::__1::allocator<ggl::CommandBuffer *> >=^^{CommandBuffer}^^{CommandBuffer}{__compressed_pair<ggl::CommandBuffer **, std::__1::allocator<ggl::CommandBuffer *> >=^^{CommandBuffer}}}{shared_ptr<ggl::RenderTransaction>=^{RenderTransaction}^{__shared_weak_count}}{vector<ggl::Texture *, std::__1::allocator<ggl::Texture *> >=^^{Texture}^^{Texture}{__compressed_pair<ggl::Texture **, std::__1::allocator<ggl::Texture *> >=^^{Texture}}}}4
MDDisplayLayer
MDDisplayLayer MSAA
T@"<GGLRenderQueueSource>",N
OuterShadowRibbonShader
distanceTexture_sampler
distanceTexture
style.strokeSlopeFactor
strokeSlopeFactor
imageWidth
Noise
offsetScale
heightProvider
T@"<VKMercatorTerrainHeightProvider>",N,V_heightProvider
A3D appears to be malformed, there aren't enough bytes for its metadata.
A3D appears to be malformed, one of its metadata blocks ends after more than SIZE_MAX bytes.
A3D appears to be malformed, there aren't enough bytes for its metadata headers.
A3D appears to be malformed, it claims its metadata headers end after more than SIZE_MAX bytes.
A3D appears to be malformed, there aren't enough bytes for one of its textures.
A3D appears to be malformed, it claims one of its textures ends after more than SIZE_MAX bytes.
A3D appears to be malformed, there aren't enough bytes for all its sub mesh indices.
A3D appears to be malformed, it claims one of its mesh index sets ends after more than SIZE_MAX bytes.
A3D appears to be malformed, there aren't enough bytes for the sub-mesh headers.
A3D appears to be malformed, there aren't enough bytes for all its vertices.
A3D appears to be malformed, it claims its vertices end after more than SIZE_MAX bytes.
A3D contains incorrect version for parser.
Data does not appear to be A3D format.
A3D appears to be malformed, there's not enough room for a header
No A3D data provided
kVKOuterStrokeWidthAttributeName
StyleFade
texture2
TypeID
POD_char
POD_u_char
POD_int32_t
POD_uint32_t
POD_int64_t
POD_uint64_t
POD_bool
POD_float
POD_double
POD_string
POD_color
POD_VKTileKey
Name:
TypeID:
Path:
Value:
DiffuseBuildingPointyRoofShader
vertex_input_normalAndIsFacade
vertexStyleIndicesAndTexture
side
Polygon
polygonColor
lineWidthOuter
lineWidthInner
dictionaryRepresentation
T{?=dd},N,V_centerCoordinate
zoomLevel
Tf,N,V_zoomLevel
tileSize
Ti,N,V_tileSize
Td,N,V_pitch
Td,N,V_yaw
TileSize
ZoomLevel
YawRadians
PitchRadians
CenterLongitude
CenterLatitude
Cannot load viewport: Invalid zoom level
Cannot load viewport: Invalid yaw
Cannot load viewport: Invalid pitch
Cannot load viewport: Invalid coordinate
Cannot load viewport: Invalid dictionary
VendedMesh
IndexData
hasVariantType
Ti,N,V_variantType
entries
T@"NSMutableArray",&,N,V_entries
T@"NSMutableArray",&,N,V_textEntries
textEntries
variantType
VARIANT_TYPE_NONE
VARIANT_TYPE_DIM
ColorGlyphWithOuterHaloShader
textureAtlas_sampler
textureAtlas
channel
channel.channel
view.matrix
vertex_attributes_texture
vertex_attributes_alphaAndHaloSizeInPixels
vertex_attributes_color
vertex_attributes_haloColor
->min
->max
->avg
->sum
->count
navFeature
T@"<VKLabelNavFeature>",N,V_navFeature
Tr^{shared_ptr<md::NavLabel>=^{NavLabel}^{__shared_weak_count}},R,N,V_label
alignment
TC,N,V_alignment
desiredOffsetDistance
Tf,N,V_desiredOffsetDistance
displayID
TI,N,V_displayID
isShieldLabel
isRoadLabel
isJunctionLabel
isManeuverLabel
isEtaLabel
isTrafficCameraLabel
renderOrder
TS,N
T{Mercator2<double>=[2d]},N,V_mercatorPoint
%@, (%@)
JC$_%@
SH$_%@
DI$_%X
 TransitTypes:%@
 LineTypes:%@
 SystemTypes:%@
T@"VKLabelTile",R,&,N,V_tile
oppositeCarriagewayJunctionsValid
TB,N,V_oppositeCarriagewayJunctionsValid
oppositeCarriagewayJunctions
T@"NSMutableArray",R,&,N,V_oppositeCarriagewayJunctions
v8@?0^{?=^{?}IIII^{?}^{?}}4
v8@?0^{?={?=@*IIIIIQBQfQ@i}IIiiiII(?={?={?=ff}{?=ff}}{?=ffff})^{?}{?=[2S][2S]}CBCBBCBC{_NSRange=II}BI}4
junctions
T@"NSMutableArray",&,N,V_junctions
%ld.%ld
i12@?0@4@8
B12@?0@4@"NSDictionary"8
    pt=(%f,%f) tngt,nrml=(%.2f,%.2f) jctn=%p type=%i sr=%i
validPoint=%i validTangent=%i offset=%.2f offsetOutside = %.2f length=%.2f
  %i:MergedLine:%i %@
CollapsedLines:
    
  %i:%@
  Lines Truncated...
    geoSection: start=%.2f end=%.2f
  %i:%@
MergedLines:
Sections:
NodeID From=%llu To=%llu
 end=(%.2f:%.2f)
 end=(none)
start=(%.2f:%.2f)
start=(none)
EaseRegions: 
<Link:%p>
 %i:%@, slot:%d normal:%.02f
 Lines Truncated...
edgePadding
T{VKEdgeInsets=ffff},N,V_edgePadding
/Stars/Mesh
DebugShader
lineStrokePipelineSetup
T^{BasePipelineSetup=^^?^{PipelineDataCReflection}{shared_ptr<ggl::PipelineState>=^{PipelineState}^{__shared_weak_count}}{vector<ggl::ConstantDataElement, std::__1::allocator<ggl::ConstantDataElement> >=^{ConstantDataElement}^{ConstantDataElement}{__compressed_pair<ggl::ConstantDataElement *, std::__1::allocator<ggl::ConstantDataElement> >=^{ConstantDataElement}}}{vector<ggl::Texture *, std::__1::allocator<ggl::Texture *> >=^^{Texture}^^{Texture}{__compressed_pair<ggl::Texture **, std::__1::allocator<ggl::Texture *> >=^^{Texture}}}^{Mesh}},R,N
lineFillPipelineSetup
nodes
T^{vector<std::__1::shared_ptr<md::TransitNode>, std::__1::allocator<std::__1::shared_ptr<md::TransitNode> > >=^{shared_ptr<md::TransitNode>}^{shared_ptr<md::TransitNode>}{__compressed_pair<std::__1::shared_ptr<md::TransitNode> *, std::__1::allocator<std::__1::shared_ptr<md::TransitNode> > >=^{shared_ptr<md::TransitNode>}}},R,N,V_nodes
links
T^{vector<md::TransitLink, std::__1::allocator<md::TransitLink> >=^{TransitLink}^{TransitLink}{__compressed_pair<md::TransitLink *, std::__1::allocator<md::TransitLink> >=^{TransitLink}}},R,N,V_links
displayConnections
T^{list<md::TransitDisplayConnection, std::__1::allocator<md::TransitDisplayConnection> >={__list_node_base<md::TransitDisplayConnection, void *>=^{__list_node_base<md::TransitDisplayConnection, void *>}^{__list_node_base<md::TransitDisplayConnection, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<md::TransitDisplayConnection, void *> > >=L}},R,N,V_displayConnections
lineLayer
T^{RibbonLayer<md::Ribbons::TransitRibbonDescriptor>=^^?{vector<md::Ribbons::RibbonBatch<md::Ribbons::TransitRibbonDescriptor> *, std::__1::allocator<md::Ribbons::RibbonBatch<md::Ribbons::TransitRibbonDescriptor> *> >=^^{RibbonBatch<md::Ribbons::TransitRibbonDescriptor>}^^{RibbonBatch<md::Ribbons::TransitRibbonDescriptor>}{__compressed_pair<md::Ribbons::RibbonBatch<md::Ribbons::TransitRibbonDescriptor> **, std::__1::allocator<md::Ribbons::RibbonBatch<md::Ribbons::TransitRibbonDescriptor> *> >=^^{RibbonBatch<md::Ribbons::TransitRibbonDescriptor>}}}{vector<ggl::TransitLineRibbon::BaseMesh *, std::__1::allocator<ggl::TransitLineRibbon::BaseMesh *> >=^^{BaseMesh}^^{BaseMesh}{__compressed_pair<ggl::TransitLineRibbon::BaseMesh **, std::__1::allocator<ggl::TransitLineRibbon::BaseMesh *> >=^^{BaseMesh}}}[2^{RenderState}]},R,N
displayConnectionLayer
T^{RibbonLayer<md::TransitDisplayConnectionRibbonDescriptor>=^^?{vector<md::Ribbons::RibbonBatch<md::TransitDisplayConnectionRibbonDescriptor> *, std::__1::allocator<md::Ribbons::RibbonBatch<md::TransitDisplayConnectionRibbonDescriptor> *> >=^^{RibbonBatch<md::TransitDisplayConnectionRibbonDescriptor>}^^{RibbonBatch<md::TransitDisplayConnectionRibbonDescriptor>}{__compressed_pair<md::Ribbons::RibbonBatch<md::TransitDisplayConnectionRibbonDescriptor> **, std::__1::allocator<md::Ribbons::RibbonBatch<md::TransitDisplayConnectionRibbonDescriptor> *> >=^^{RibbonBatch<md::TransitDisplayConnectionRibbonDescriptor>}}}{vector<ggl::Ribbon::BaseMesh *, std::__1::allocator<ggl::Ribbon::BaseMesh *> >=^^{BaseMesh}^^{BaseMesh}{__compressed_pair<ggl::Ribbon::BaseMesh **, std::__1::allocator<ggl::Ribbon::BaseMesh *> >=^^{BaseMesh}}}[2^{RenderState}]},R,N
 Neighbors:T=%i B=%i L=%i R=%i 
 Edges Synched:T=%i L=%i,
 Counts: links=%i easingPoints=%i 
Tile
%@PuckArrowMask
driving
walking
puckCircle
PuckArrow
PuckCircle
RouteLineTrafficShader
style.trafficColors
style.travelledTrafficColors
vertexInput_trafficSpeed
trafficColors
travelledTrafficColors
objectSubTile
T@"VK3DObjectSubTile",R,N,V_objectSubTile
shadowTexture
T^{Texture2D=^^?^{ResourceManager}^{RenderResource}^^?*iiiiI{shared_ptr<const ggl::TextureDataAbstract>=^{TextureDataAbstract}^{__shared_weak_count}}BBIIB{shared_ptr<ggl::SamplerState>=^{SamplerState}^{__shared_weak_count}}},R,N
shadowViewConstantData
T{shared_ptr<ggl::ConstantDataTyped<ggl::Tile::View> >=^{ConstantDataTyped<ggl::Tile::View>}^{__shared_weak_count}},R,N
fadeProgress
Tf,N,V_fadeProgress
scale
Tf,N,V_scale
maxLayeringHeight
Tf,R,N,V_maxLayeringHeight
Td,R,N,V_maxHeight
T@"VKAnimation",&,N,V_animation
animationForPitch
cullingGrid
T{CullingGridWithHeight=[16f]},R,N,V_cullingGrid
fogInfo
T^{FogInfo={shared_ptr<ggl::ConstantDataTyped<ggl::Fog::Skyfog> >=^{ConstantDataTyped<ggl::Fog::Skyfog>}^{__shared_weak_count}}},R,N
btVERTPINSTRIPE
btHORIZPINSTRIPE
btCHECKER
CrossFade
VenueOpenToBelowShadowShader
vertex_attributes_vertexStyleIndicesAndTexture
vertex_attributes_tangents
vertex_attributes_side
VenueOpenToBelowShadowAlphaShader
Ti,R,N,V_layer
buildingId
maximumSectionLength
wallTexture
venueWallMeshes
Tr^{vector<std::__1::shared_ptr<ggl::VenueWall::MeshMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::VenueWall::MeshMesh> > >=^{shared_ptr<ggl::VenueWall::MeshMesh>}^{shared_ptr<ggl::VenueWall::MeshMesh>}{__compressed_pair<std::__1::shared_ptr<ggl::VenueWall::MeshMesh> *, std::__1::allocator<std::__1::shared_ptr<ggl::VenueWall::MeshMesh> > >=^{shared_ptr<ggl::VenueWall::MeshMesh>}}},R,N
venueWallEndMeshes
Tr^{vector<std::__1::shared_ptr<ggl::VenueWall::EndCapMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::VenueWall::EndCapMesh> > >=^{shared_ptr<ggl::VenueWall::EndCapMesh>}^{shared_ptr<ggl::VenueWall::EndCapMesh>}{__compressed_pair<std::__1::shared_ptr<ggl::VenueWall::EndCapMesh> *, std::__1::allocator<std::__1::shared_ptr<ggl::VenueWall::EndCapMesh> > >=^{shared_ptr<ggl::VenueWall::EndCapMesh>}}},R,N
venueWallHorizontalStrokeMeshes
Tr^{vector<std::__1::shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh> > >=^{shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh>}^{shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh>}{__compressed_pair<std::__1::shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh> *, std::__1::allocator<std::__1::shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh> > >=^{shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh>}}},R,N
venueWallVerticalStrokeMeshes
Tr^{vector<std::__1::shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh> > >=^{shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh>}^{shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh>}{__compressed_pair<std::__1::shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh> *, std::__1::allocator<std::__1::shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh> > >=^{shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh>}}},R,N
Venue Wall Mesh
Venue Wall Vertex Data
Venue Wall Index Data
Venue Wall End Cap Mesh
Venue Wall End Cap Vertex Data
Venue Wall End Cap Index Data
Venue Wall Horizontal Stroke Mesh
Venue Wall Horizontal Stroke Vertex Data
Venue Wall Horizontal Stroke Index Data
Venue Wall Vertical Stroke Mesh
Venue Wall Vertical Stroke Vertex Data
Venue Wall Vertical Stroke Index Data
blendMode
multiply
screen
overlay
darken
lighten
colorDodge
colorBurn
softLight
hardLight
difference
exclusion
saturation
color
luminosity
clear
copy
sourceIn
sourceOut
sourceAtop
destinationOver
destinationIn
destinationOut
destinationAtop
plusDarker
plusLighter
maskColor
MASK_COLOR_BACKGROUND
MASK_COLOR_BORDER
MASK_COLOR_TRANSIT_LINE
MASK_COLOR_LEGIBLE_ON_BACKGROUND
(unknown: %i)
normalAndIsFacade
with
 small caps)
NavTrafficCameraLabelPart
NavRouteEtaLabelPart
HeightLoadJobTotalTime (ms)
HeightLoadJobMainTime (ms)
HeightLoadJobTotalTime(Bounds) (ms)
HeightLoadJobMainTime(Bounds) (ms)
VenueWallShader
wall.width
wall.baseHeight
wall.height
wall.normalMultiplier
wall.textureScale
wall.maximumTexCoord
VenueWallEndCapShader
wall.innerOffset
wall.outerOffset
vertexAttributes_quadSpaceCoord
VenueWallTopShader
EndCapVbo
styleIndices
quadSpaceCoord
tangents
quadSpaceCoordAndXTexCoord
Wall
baseHeight
height
normalMultiplier
textureScale
maximumTexCoord
WallTop
innerOffset
outerOffset
WallEndCap
StenciledAlphaClearShader
Clear
SimpleGridShader
gridView
style.invFwidth
gridView.gridView
gridView.color
invFwidth
FlyoverMorphNightShader
finer_sampler
coarse_sampler
finerNight_sampler
coarseNight_sampler
finer
coarse
finerNight
coarseNight
morph
morph.coarseScale
morph.coarseOffset
morph.factor
vertexInput_morphX
vertexInput_finercoord
vertexInput_coarsecoord
T{?=dd},N,V_coordinate
course
variantEntries
T@"NSMutableArray",&,N,V_variantEntries
hasArtworkIdentifier
artworkIdentifier
T@"NSString",&,N,V_artworkIdentifier
shieldTypesCount
shieldTypes
T^i,R,N
defaultForFeatureTypesCount
defaultForFeatureTypes
FEATURE_TYPE_NONE
FEATURE_TYPE_ROAD
FEATURE_TYPE_TRANSIT
defaultForFeatureType
RenderTargetBlendShader
blend.blendFactor
vertex_attributes_position
Blend
blendFactor
map_%d_%d_%d
screenCanvas
T@"VKScreenCanvas<VKInteractiveMap><VKMapDataAccess>",N,V_screenCanvas
T@"VKSceneConfiguration",N,V_sceneConfiguration
zoomScale
baseDisplayRate
Ti,N,V_baseDisplayRate
clientFramingInsets
T{VKEdgeInsets=ffff},N,V_clientFramingInsets
heading
pitch
mapRegion
T@"GEOMapRegion",R,N
T@"VKScreenCanvas<VKInteractiveMap><VKMapDataAccess>",N
T@"VKSceneConfiguration",N
v24@?0@"GEOComposedRoute"4{PolylineCoordinate=If}8{PolylineCoordinate=If}16
v20@?0{?=dd}4
Unknown
Maneuver
Grouped Maneuver
Current Maneuver
Point To Frame
Alternate Route Maneuver
Additional Points To Frame
Framing Rect
Viewable Rect
Heading
Desired Heading
Puck Movement Box
Ideal Puck Point
Heading Delta
Heading Delta Min
%s: %s
Traffic
Transit
Browse
In Vehicle Browse
Client Attributes:
Min/Max Pitch: %.2f, %.2f
Ignore Points Behind: %s
Frame Grouped Maneuvers: %s
Max Maneuver: %d
Framing Distance After Maneuver: %f
Max Framing Distance: %f
Framing Source: %s
Pan Return Delay: %.2fs
Gesture Enable pan:%s zoom:%s rotate:%s pitch:%s
Framing Insets: (%.2f + %.2f), (%.2f + %.2f) - (%.2f + %.2f), (%.2f + %.2f)
Height Delta: H(%.2f, %.2f), V(%.2f, %.2f)
Puck Movement Bounds: %.2f, %.2f - %.2f, %.2f
Max Camera Height: %.2fm
Min Camera Height: %.2fm
DistanceFromTarget: %.2fm
PuckScreenPosition: %f, %f
Heading Delta Min: %.2f
Heading Delta : %.2f
Maneuvers To Frame: %d
Heading Type(Overriden: %s): %s
Camera Type: %s
Name: %s
Style:
Alternate Routes: %d
Location Lat: %f, Long: %f
Step: %lu
isGoodMatch: %s
RouteMatch: %s
Grouped Maneuvers: %lu
Current Step: %ld
Steps: %lu
Route: %s
Screen Pos: %.2f, %.2f  => %.2f, %.2f
Distance From Target: %.2fm => %.2fm
Heading: %.2f => %.2f
Pitch: %.2f => %.2f
Puck Lat: %f, Long: %f, Alt: %f
Springs:
Coordinates to frame: %lu
Puck Course: %f
Zoom Scale: (%f, %f), Min: %f, Max: %f
Zoom Level: %f
Computed Maneuvers To Frame: %d
Heading: %.2f
Pitch: %.2f
Height: %.2f
Lat: %f, Long: %f
Camera
Style Name: %s
Nav Camera Controller
NavCameraMaxZoomScale
NavCameraShouldUseStartLocationForPounce
init is not a valid initializer for VKNavCameraController
v8@?0r^{VKTileKey=IiiI}4
LabelGlyphMesh
LabelIconMesh
GlyphIndexData
IconIndexData
TexturedSolidRibbonShader
modulated_sampler
modulated
noise
noise.offsetScale
ribbonVertex
ribbonVertex_position
ribbonVertex_normal
ribbonVertex_texCoord
ribbonVertex_texture
BuildingShadowShader
shadow
shadow.brightness
shadow.color
vertex_input_texcoord
Shadow
BatchType/VData
BatchType/IData
BatchType/Mesh
animations
T@"NSMutableArray",R,N,V_animations
groupStepHandler
T@?,C,N,V_groupStepHandler
Set: 
Attribute: 
  No attrs
    %@
  Attrs:
      Dedupable
      Default
      (%s)
  External: hasAnnotation=%i
  BusinessID:  %llu
  FeatureID:  %llu
  %@ (%@)
Feature %llu
CompressedVbo
vertexAndStyleIndex
FlyoverBorderShader
atmosphere_sampler
satellite_sampler
flyover_sampler
blend_sampler
atmosphere
satellite
flyover
clip
material
texcoords
texcoords.offset
texcoords.scale
material.blendfactor
clip.clipPlanes
transform.modelmat
shared.atmospherecolor
shared.horizonvalues
shared.lightdirection
shared.nightlightfade
vertexInput_merccoord
vertexInput_flyovercoord
Vertex
merccoord
flyovercoord
FlyoverManeuverShader
style.alpha
displacement.properties
displacement.color
properties
NullLabelPart
<NONE>
Dead
Prepare
Display
Hidden
FadeIn
FadeOut
Visible
 (selectable)
 (SELECTED)
 (occludable)
 (OVERRIDDEN)
  Collided with '%s'
shield(
No Style
    font:%s
/%.2f
%.2f
  Style: %s/
  MKBalloon:%s
  Display: State=%s Outcome=%@ isDisplayLabel=%i isActiveForDisplay=%i
  Staging: State=%s Outcome=%@
  Attrs: Dedupe=%d Layer=%i%s%s%s%s
 Layer=%i Overlay=%s
 SortKey=%i
 Rank=%.2f
 IconOrder=%d
  Collision: Order=%d
  Zoom: Cur=%.2f Min=%.2f Max=%.2f
  pos: %.8f, %.8f
Label:
Route
T@"VKAnimation",&,N
venueGroups
Tr^{vector<geo::_retain_ptr<VKVenueGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::allocator<geo::_retain_ptr<VKVenueGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >=^{_retain_ptr<VKVenueGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}^{_retain_ptr<VKVenueGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}{__compressed_pair<geo::_retain_ptr<VKVenueGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> *, std::__1::allocator<geo::_retain_ptr<VKVenueGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >=^{_retain_ptr<VKVenueGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}}},R,N
venueFloorGroups
T^{vector<md::VenueFloorGroup, std::__1::allocator<md::VenueFloorGroup> >=^{VenueFloorGroup}^{VenueFloorGroup}{__compressed_pair<md::VenueFloorGroup *, std::__1::allocator<md::VenueFloorGroup> >=^{VenueFloorGroup}}},R,N,V_venueFloorGroups
venues
Tr^{vector<std::__1::shared_ptr<md::Venue>, std::__1::allocator<std::__1::shared_ptr<md::Venue> > >=^{shared_ptr<md::Venue>}^{shared_ptr<md::Venue>}{__compressed_pair<std::__1::shared_ptr<md::Venue> *, std::__1::allocator<std::__1::shared_ptr<md::Venue> > >=^{shared_ptr<md::Venue>}}},R,N
PatternedRibbonShader
style.distanceMultiplier
distanceMultiplier
VertexDataGeoGL
IndexDataGeoGL
TextureAlphaMaskShader
FoggedSpecularLandmarkShader
vertex_input_position
vertex_input_texture
, pathZ:
 shield, 
 shields, 
    spacing:
    Shields:
Two way
Multiple
One way pos
One way neg
Invalid
    travel dir:
Stylesheet Map Editing Queue
Localization to attribute Queue
v16@?0@4@8^B12
LocalizationStyleAttributes.plist
DiffuseBuildingShader
hasShieldType
Ti,N,V_shieldType
shieldTexts
T@"NSMutableArray",&,N,V_shieldTexts
Icon: alpha:%.1f brightness:%.1f saturation:%.1f padding:%.1f
 size:%i
FlyoverRoadFillProceduralShader
FlyoverBorderRibbonShader
patternMap_sampler
patternMap
border
color.primary
color.secondary
border.property
tile.modelview
Tile
Border
property
Color
primary
VenueWallShadowShader
wall
wall.color
wall.direction
vertexAttributes
vertexAttributes_position
vertexAttributes_styleIndices
vertexAttributes_quadSpaceCoordAndXTexCoord
vertexAttributes_tangents
WallShadow
direction
dataType
TC,N,V_dataType
text
T@"NSString",&,N,V_text
relatedText
T@"NSString",&,N,V_relatedText
dataValue
TI,N,V_dataValue
imageCenter
T{CGPoint=ff},N,V_imageCenter
fallbackImageKeys
T@"NSArray",&,N,V_fallbackImageKeys
keyType
TI,R,N,V_keyType
imageName
T@"NSString",R,N,V_imageName
TI,R,N,V_shieldType
shieldTextLocale
T@"NSString",R,N,V_shieldTextLocale
shieldColor
T{?={Matrix<float, 4, 1>=[4f]}},R,N
iconAttributeKey
TI,R,N,V_iconAttributeKey
iconAttributeValue
TI,R,N,V_iconAttributeValue
hasDataValue
TB,R,N,V_hasDataValue
SpecularBuildingShader
skyfog
gradient
lighting
fade
fade.fadeEquation
fade.alphaFactor
lighting.lightDirection
lighting.lightColor
lighting.lightSpecularColor
lighting.ambientLightColor
gradient.equation
style.alternateColor
style.shininessAndSpecularity
style.textureCoordScale
style.textureLightness
style.brightness
style.cameraPositionInTileSpace
style.fogFactor
scale.scale
scale.tileOrigin
scale.tileSize
skyfog.fogSlope
skyfog.fogOffset
skyfog.screenHeight
skyfog.skyOffset
skyfog.skyBottomColor
skyfog.skyTopColor
vertex_input_vertexAndTexture
vertex_input_normalAndStyleIndex
  positioningMode:%s position:%s
CurvedText
  line wrapping %@: %i%@
(Default)
logograms
chars
  text alpha: %.2f
HorizontalText %@
BuildingFlatShader
building
building.color
building.origin
building.size
vertex_input
vertex_input_vertexAndStyleIndex
Building
SolidRibbonShader
alphaTextureMap_sampler
style.offset
style.imageWidth
serviceparkingarea
DEFAULT
BACKGROUND_MASK
BORDER_MASK
FlyoverRouteShader
displacement
style.secondary
style.split
style.greater
style.alphaThreshold
displacement.modelview
displacement.width
vertexInput_fraction
offset
fraction
Displacement
secondary
split
greater
alphaThreshold
T@"NSMutableArray",&,N,V_textureAtlas
genericShields
T@"NSMutableArray",&,N,V_genericShields
genericShield
mercatorPoint
T{Mercator2<double>=[2d]},R,N
worldPoint
T{Matrix<double, 3, 1>=[3d]},N,V_worldPoint
location
T{?=dd},N,V_location
trafficFeatureType
Ti,R,N,V_trafficFeatureType
T@"GEOLatLng",C,N,V_position
T{PolylineCoordinate=If},N,V_routeOffset
minZoom
Tf,N,V_minZoom
maxZoom
Tf,N,V_maxZoom
FlyoverRoadStrokeTexturedShader
discMap_sampler
discMap
blend
ribbonExtra
ribbonExtra.ewidth
color.fill
color.stroke
transform.width
blend.alpha
view.projection
vertexInput_offset
vertexInput_uv
tourid
usesplines
tour
source
/SkyMesh
/SkyIndexData
hasNumberOfLines
numberOfLines
TI,N,V_numberOfLines
layersCount
TI,R,N
T^{?=IfIIi{?=b1b1b1b1b1}},R,N
hasTextBaseline
textBaseline
fontName
hasLeftCapWidth
leftCapWidth
Tf,N,V_leftCapWidth
hasRightCapWidth
rightCapWidth
Tf,N,V_rightCapWidth
lineSpacing
Tf,N,V_lineSpacing
hasLeftPadding
leftPadding
Tf,N,V_leftPadding
hasRightPadding
Tf,N,V_rightPadding
rightPadding
fontSize
overrideMaxZoomLevel
TB,N,V_overrideMaxZoomLevel
overlays
v16@?0r^{VKTileKey=IiiI}4@8^B12
FlyoverOverlayShader
overlay_sampler
transform
transform.modelview
shared.offsetfactor
Transform
offsetfactor
normalAndStyleIndex
T@"<VKRasterOverlayDelegate>",V_delegate
T@"VKRasterOverlayTileSource",N,V_tileSource
replaceMapContentInRect
T{?={?=dd}{?=dd}},N,V_replaceMapContentInRect
TI,N,V_level
{%@}
ext:{%@}
  Point:
    layoutZ:
  MinZoomRank:
 TransitMinZoomRank:
 position
 positions
 [text]
 [placement]
<none>
 clientAlternates:
 [element] Z:
 text:
 placement:
 [style]
 <icon> 
 style:
Default
Small
Large
Medium
 size:
 scale:
 MSrcKey:
 srcKey:
 name:
  <text> source:
 shieldThreshold:
 icon-size:
PolygonFillShader
/View
Arrow
T{FeatureAttributeSet={vector<gss::FeatureAttributePair, std::__1::allocator<gss::FeatureAttributePair> >=^{FeatureAttributePair}^{FeatureAttributePair}{__compressed_pair<gss::FeatureAttributePair *, std::__1::allocator<gss::FeatureAttributePair> >=^{FeatureAttributePair}}}},R,N
strokeMeshes
T^{vector<std::__1::shared_ptr<ggl::PolygonCommonStroke::MeshMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::PolygonCommonStroke::MeshMesh> > >=^{shared_ptr<ggl::PolygonCommonStroke::MeshMesh>}^{shared_ptr<ggl::PolygonCommonStroke::MeshMesh>}{__compressed_pair<std::__1::shared_ptr<ggl::PolygonCommonStroke::MeshMesh> *, std::__1::allocator<std::__1::shared_ptr<ggl::PolygonCommonStroke::MeshMesh> > >=^{shared_ptr<ggl::PolygonCommonStroke::MeshMesh>}}},R,N
sourceTexture
targetTexture
sourceRoofTexture
targetRoofTexture
Polygon Stroke Mesh
Polygon Stroke Vertex Data
Polygon Stroke Index Data
TileBaseSurfaceShader
element
shared.levelFade
shared.lineColor
shared.backgroundColor
shared.majorSize
shared.minorSize
shared.lineParams
element.modelview
element.tcScale
element.tcOffset
element.tcLimit
vertexInput_texcoord2
Element
tcScale
tcOffset
tcLimit
levelFade
lineColor
backgroundColor
majorSize
minorSize
lineParams
v8@?0B4
v8@?0f4
v12@?0d4
    [
Road Pos 
    
RouteLineShader
alphaTexture_sampler
alphaTexture
style.splitLength
style.travelledColor
style.inverseBaseColor
style.alphaTest
style.alphaComp
vertexInput_distance
PatternedRouteLineShader
patternStyle
routeStyle
routeStyle.halfWidth
routeStyle.color
routeStyle.splitLength
routeStyle.travelledColor
routeStyle.inverseBaseColor
routeStyle.alphaScale
routeStyle.alphaTest
routeStyle.alphaComp
patternStyle.halfWidth
patternStyle.color
patternStyle.distanceMultiplier
distance
splitLength
travelledColor
inverseBaseColor
alphaTest
alphaComp
RouteLineArrowShader
alphaTextureSampler_sampler
alphaTextureSampler
style.halfWidth
style.pitchRatio
style.currentArrowIndex
style.fillColor
style.strokeColor
style.highlightedFillColor
style.highlightedStrokeColor
style.hightlightedHalfWidth
style.alphaScale
vertexInput_texCoord
vertexInput_arrowIndex
texture
arrowIndex
halfWidth
pitchRatio
currentArrowIndex
strokeColor
highlightedFillColor
highlightedStrokeColor
hightlightedHalfWidth
alphaScale
vertexInput_texture
modelTile
T@"GEOVectorTile",&,N,V_modelTile
objectGroups
T^{vector<std::__1::shared_ptr<md::ObjectGroup>, std::__1::allocator<std::__1::shared_ptr<md::ObjectGroup> > >=^{shared_ptr<md::ObjectGroup>}^{shared_ptr<md::ObjectGroup>}{__compressed_pair<std::__1::shared_ptr<md::ObjectGroup> *, std::__1::allocator<std::__1::shared_ptr<md::ObjectGroup> > >=^{shared_ptr<md::ObjectGroup>}}},R,N
SUPPRESSID:
.transform
DevResources
%d %d %d
TransitNodeQuadIndexData
TransitNodePillIndexData
TransitNodeMesh
Shield(%s)
brightness
Settings
atlasSize
halfScreenSize
PointIcon
SolidLineShader
style
view.modelViewProjection
style.color
DefaultVbo
Style
modelViewProjection
Venue footprint vertex data
Venue footprint index data
Venue footprint mesh
T@"VKLabelNavRoadLabel",R,N,V_etaLabel
etaComparisonToMain
T@"VKRouteInfo",&,N,V_routeInfo
displayEtaDescription
T@"VKRouteEtaDescription",R,N,V_displayEtaDescription
isRepositioning
TB,N,V_isRepositioning
orientation
TC,N
isTrafficCameraFeature
TB,N,V_isPicked
  %@
TrafficIncident
Stencil Invert
Stencil Erase Water
Shadowed Stroke
Coastline Stencile
, multiPOI-fallback
, multiPOI(%u)
MultipleIcons, %@
  FeatureZoom: Min=%.2f Max=%.2f
  Attrs:{%@}
  Style:%s
<Display connection>
 (optional text is hidden)
    alternates:<%s>
  [placement] resolved:%s default:%s snapToDef(can:%i should:%i)
(data placement disabled)
 alternates:[%s]
  [style] placement:(%s)
  padding:%.1f
  icon margins[L:%.1f R:%.1f T:%.1f B:%.1f DiagV:%.1f DiagH:%.1f]
  layout style:%s
  text collision alpha: %.2f
  textDisplayClass: %s%s
CaptionedIcon
trafficTile
T@"VKTrafficTile",&,N,V_trafficTile
roadLayer
T^{RoadLayer=^^?{vector<md::RoadBatch *, std::__1::allocator<md::RoadBatch *> >=^^{RoadBatch}^^{RoadBatch}{__compressed_pair<md::RoadBatch **, std::__1::allocator<md::RoadBatch *> >=^^{RoadBatch}}}{vector<ggl::Ribbon::BaseMesh *, std::__1::allocator<ggl::Ribbon::BaseMesh *> >=^^{BaseMesh}^^{BaseMesh}{__compressed_pair<ggl::Ribbon::BaseMesh **, std::__1::allocator<ggl::Ribbon::BaseMesh *> >=^^{BaseMesh}}}[8^{RenderState}]{shared_ptr<ggl::ConstantDataTyped<ggl::Tile::View> >=^{ConstantDataTyped<ggl::Tile::View>}^{__shared_weak_count}}I^{RoadSharedResources}},R,N
roadTrafficLayer
patternedRibbonLayer
T^{PatternedLayer=^^?{vector<md::PatternedBatch *, std::__1::allocator<md::PatternedBatch *> >=^^{PatternedBatch}^^{PatternedBatch}{__compressed_pair<md::PatternedBatch **, std::__1::allocator<md::PatternedBatch *> >=^^{PatternedBatch}}}{vector<ggl::PatternedRibbon::BaseMesh *, std::__1::allocator<ggl::PatternedRibbon::BaseMesh *> >=^^{BaseMesh}^^{BaseMesh}{__compressed_pair<ggl::PatternedRibbon::BaseMesh **, std::__1::allocator<ggl::PatternedRibbon::BaseMesh *> >=^^{BaseMesh}}}[2^{RenderState}]{shared_ptr<ggl::ConstantDataTyped<ggl::Tile::View> >=^{ConstantDataTyped<ggl::Tile::View>}^{__shared_weak_count}}I^{PatternedSharedResources}},R,N
Error (Geo Data): Received point characteristic out of order in tile %@, featureIndex %d, sectionIndex %d
 Voltaire3D
 with NO traffic tile
 with traffic tile: %@
TB,N,V_trafficEnabled
v8@?0@"VKTile"4
v8@?0@"VKTrafficTileSource"4
PolygonAnimatableFillShader
textureSampler_sampler
variantTextureSampler_sampler
textureSampler
variantTextureSampler
fill
variant
variant.textureWeight
fill.worldTransform
fill.color
fill.variantColor
fill.scale
fill.origin
fill.size
view.tilePerPoint
vertex_attributes
vertex_attributes_vertexAndStyleIndex
Fill
worldTransform
variantColor
B8@?0r^{C3mmRoot={C3mmKey=IIII}Ii}4
businessId
floorOrdinals
shortFloorNames
T@"NSDictionary",R,N
floorNames
/BuildRoot/Library/Caches/com.apple.xbs/Sources/VectorKit_Sim/VectorKit-1359.44.8.15.35/geo/GeoGL/GeoGL/GLContextResourceManager.cpp
No query handles available
Failed to link shader. 
ColoredTextShader
textureMap_sampler
textureMap
view.modelViewProjectionMatrix
vertexInput_texcoord
vertexInput_color
vertexInput_outlinecolor
texcoord
outlinecolor
View
modelViewProjectionMatrix
%s.root
debug text mesh
com.apple.maps.geogl.renderQueue
ClearShader
clearConstants
clearConstants.color
clearConstants.depth
ClearData
ClearConstants
depth
backingSize
T{CGSize=ff},R,N,V_backingSize
backingFormat
Ti,R
T^{Texture=^^?^{ResourceManager}^{RenderResource}^^?*iiii},R,N
renderDelegate
T@"<GGLLayerDelegate>",V_delegate
T@"<GGLLayerDelegate>"
Layer backing
Unable to allocate render buffer storage! %p
contents
hidden
contentsScale
CommonLibrary
/BuildRoot/Library/Caches/com.apple.xbs/Sources/VectorKit_Sim/VectorKit-1359.44.8.15.35/geo/GeoGL/GeoGL/GLTextureLoader.cpp
Trying to load texture with unsupported texture format 
KHR_texture_compression_astc_ldr
GL_EXT_discard_framebuffer
/BuildRoot/Library/Caches/com.apple.xbs/Sources/VectorKit_Sim/VectorKit-1359.44.8.15.35/geo/GeoGL/GeoGL/GLCoreContext.cpp
Framebuffer incomplete, incomplete attachment
Framebuffer incomplete, missing attachment
Unsupported framebuffer format
InfoLog 
ShadedColorShader
shared
props
props.color
props.eyelightdir
props.scale
props.modelview
shared.view
shared.projection
vertexInput
vertexInput_position
vertexInput_normal
Props
eyelightdir
modelview
/BuildRoot/Library/Caches/com.apple.xbs/Sources/VectorKit_Sim/VectorKit-1359.44.8.15.35/geo/GeoGL/GeoGL/GLResourceManager.cpp
#version
#extension
#define %s %s
ERROR 
Failed to compile shader. 
P3NVbo
position
normal
/VertexData
Shared
view
projection
v8@?0^{ResourceAccessor=^^?}4
%.2fms
%lld
<1%%
%lld%%
GeoGL
VectorKit
Flyover
CPU Render Time
Num render items
Num draw calls
Num primitives
Num shader changes
Num texture uploads
Flushed buf mem
Flushed buffers
Texture Upload Time
Buffer Upload Time
GPU Frame Latency 0
GPU Frame Latency 1
GPU Frame Latency 2
Layout labels
Layout roads
Layout map
Layout polygon
Layout transit
Num glyphs created
Glyphs per frame
Tour Slow Down
Grid tile fraction
Non complete tiles
Active Effects
Debug
%3.6f
1.2.11
Dash pattern had strange number of bits.
/BuildRoot/Library/Caches/com.apple.xbs/Sources/VectorKit_Sim/VectorKit-1359.44.8.15.35/GeoCSS/GeoCSS/StylePropertySet.cpp
Could not read dash gap.
Could not read indication of traffic visibility existing.
Could not read traffic visibility.
Could not read indication of traffic fill color existing.
Could not read traffic fill color.
Could not read indication of traffic secondary color existing.
Could not read traffic secondary color.
Could not read indication of traffic pill middle length existing.
Could not read traffic pill middle length.
Could not read indication of traffic pill spacing existing.
Could not read traffic pill spacing.
Could not read indication of traffic secondary width existing.
Could not read traffic secondary width.
Could not read indication of traffic width existing.
Could not read traffic width.
Could not read indication of traffic min width existing.
Could not read traffic min width.
Could not read indication of traffic secondary min width existing.
Could not read traffic secondary min width.
Could not read indication of traffic max width existing.
Could not read traffic max width.
Could not read indication of traffic secondary max width existing.
Could not read traffic secondary max width.
Could not read indication of label height existing.
Could not read label height.
Could not read indication of label height curve existing.
Could not read label height curve.
Could not read indication of label height curve limit existing.
Could not read label height curve limit.
Could not read indication of label halo size existing.
Could not read label halo size.
Could not read indication of label font expansion existing.
Could not read label font expansion.
Could not read indication of label spacing existing.
Could not read label spacing.
Could not read indication of arrow height existing.
Could not read arrow height.
Found boolean property with strange bit count.
Could not read boolean property.
Could not read uint backing for enum.
Unexpected enum value, perhaps this stylesheet uses values that are too new for this client?
 STYL Parse Warning: 
Found uint64 property with a strange number of bits.
Could not read uint64 property
Found color gradient with strange number of bits.
Could not read first half of color gradient.
Could not read second half of color gradient.
Found float pair property with strange number of bits.
Could not read first half of float pair.
Could not read second half of float pair.
Found int32 property with strange number of bits.
Could not read int32.
Found fixed point 0 to 2.55 property with strange number of bits.
Could not read fixed point 0 to 2.55.
Found fixed point 0 to 1 property with strange number of bits.
Could not read fixed point 0 to 1.
Found fixed point 5.3 property with strange number of bits.
Could not read fixed point 5.3.
Found float with strange number of bits.
Could not read float.
Found RGBA color with strange bit count.
Could not read RGBA color.
Found fixed point 12.4 property with strange number of bits.
Could not read fixed point 12.4.
Found unsigned integer property with too few bits.
Could not read unsigned integer.
Found fixed point 6.2 property with strange number of bits.
Could not read fixed point 6.2.
Could not read string.
String property was an unexpected length.
Found -180
 - 180
 property with too few bits.
Could not read -180
 - 180
 angle.
Found 0
 - 90
 property with too few bits.
Could not read 0
 - 90
 angle.
Found uint8 property with strange number of bits.
Could not read uint8.
Found 0
 - 180
 property with too few bits.
Could not read 0
 - 180
 angle.
Found int16 property with strange number of bits.
Could not read int16.
Found fixed point -1 to 1 property with strange number of bits.
Could not read fixed point -1 to 1.
v4@?0
com.apple.VectorKit.StyleEngine
ParseError
Could not read indication of raster polygon changeover z existing.
/BuildRoot/Library/Caches/com.apple.xbs/Sources/VectorKit_Sim/VectorKit-1359.44.8.15.35/GeoCSS/GeoCSS/GlobalProperties.cpp
Could not read raster polygon changeover z.
Could not read indication of min triangle width existing.
Could not read min line triangle width.
Could not read indication of building changeover z existing.
Could not read building changeover z.
Could not read indication of min traffic type (unknown) z existing.
Could not read min traffic type (unknown) z.
Could not read indication of min traffic type (accident) z existing.
Could not read min traffic type (accident) z.
Could not read indication of min traffic type (construction) z existing.
Could not read min traffic type (construction) z.
Could not read indication of min traffic type (road closure) z existing.
Could not read min traffic type (road closure) z.
Could not read indication of min traffic type (event) z existing.
Could not read min traffic type (event) z.
Could not read indication of min traffic type (hazard) z existing.
Could not read min traffic type (hazard) z.
Could not read indication of min traffic type (lane closure) z existing.
Could not read min traffic type (lane closure) z.
Could not read indication of min traffic type (ramp closure) z existing.
Could not read min traffic type (ramp closure) z.
Could not read indication of realistic night brightness existing.
Could not read realistic night brightness.
Could not read indication of shield night brightness existing.
Could not read shield night brightness.
Could not read indication of realistic shield night brightness existing.
Could not read realistic shieldnight brightness.
Could not read indication of background rasters zoom range existing.
Could not read background rasters min zoom.
Could not read background rasters max zoom.
Could not read indication of standard rasters zoom range existing.
Could not read standard rasters min zoom.
Could not read standard rasters max zoom.
Could not read indication of satellite rasters zoom range existing.
Could not read satellite rasters min zoom.
Could not read satellite rasters max zoom.
Could not read indication of hybrid rasters zoom range existing.
Could not read hybrid rasters min zoom.
Could not read hybrid rasters max zoom.
Could not read indication of ground cover zoom range existing.
Could not read ground cover min zoom.
Could not read ground cover max zoom.
Could not read indication of raster traffic zoom range existing.
Could not read raster traffic min zoom.
Could not read raster traffic max zoom.
Could not read indication of vector polygons zoom range existing.
Could not read vector polygons min zoom.
Could not read vector polygons max zoom.
Could not read indication of vector roads zoom range existing.
Could not read vector roads min zoom.
Could not read vector roads max zoom.
Could not read indication of vector land cover zoom range existing.
Could not read vector land cover min zoom.
Could not read vector land cover max zoom.
Could not read indication of vector buildings zoom range existing.
Could not read vector buildings min zoom.
Could not read vector buildings max zoom.
Could not read indication of vector PoIs zoom range existing.
Could not read vector PoIs min zoom.
Could not read vector PoIs max zoom.
Could not read indication of vector traffic zoom range existing.
Could not read vector traffic min zoom.
Could not read vector traffic max zoom.
Could not read indication of tile limit satellite scale existing.
Could not read tile limit satellite scale.
Could not read indication of global LoD scale existing.
Could not read global LoD scale.
Could not read indication of LoD offset existing.
Could not read LoD offset.
Could not read indication of label icon scale existing.
Could not read label icon scale.
Could not read indication of nav label road sign height existing.
Could not read nav label road sign height.
Could not read indication of nav label road sign height (small) existing.
Could not read nav label road sign height (small).
Could not read indication of nav label road sign height (medium) existing.
Could not read nav label road sign height (medium).
Could not read indication of nav label road sign height (large) existing.
Could not read nav label road sign height (large).
Could not read indication of nav label road sign height (extra large) existing.
Could not read nav label road sign height (extra large).
Could not read indication of nav label road sign height (extra extra large) existing.
Could not read nav label road sign height (extra extra large).
Could not read indication of nav label max road signs existing.
Could not read nav label max road signs.
Could not read label disable alternate text positions.
Could not read indication of min traffic type (traffic) z existing.
Could not read min traffic type (traffic) z.
Could not read indication of maneuver distance (immediate) existing.
Could not read maneuver distance (immediate).
Could not read indication of maneuver distance (extremely near) existing.
Could not read maneuver distance (extremely near).
Could not read indication of maneuver distance (very near) existing.
Could not read maneuver distance (very near).
Could not read indication of maneuver distance (near) existing.
Could not read maneuver distance (near).
Could not read indication of maneuver distance (medium) existing.
Could not read maneuver distance (medium).
Could not read indication of maneuver distance (far) existing.
Could not read maneuver distance (far).
Could not read indication of maneuver distance (very far) existing.
Could not read maneuver distance (very far).
Could not read indication of nav map mode transition z existing.
Could not read nav map mode transition z.
Could not read suppress oppositie carriageway signs.
Could not read indication of vector venue zoom range existing.
Could not read building shadow color existing.
Could not read building shadow red
Could not read building shadow green
Could not read building shadow blue
Could not read building shadow alpha
Could not read venue dimming factor existing.
Could not read venue dimming factor
This is not a styl file - it's too short.
/BuildRoot/Library/Caches/com.apple.xbs/Sources/VectorKit_Sim/VectorKit-1359.44.8.15.35/GeoCSS/GeoCSS/StylFile.cpp
 STYL Parse Error Here: 
This is not a styl file - the magic is missing.
Could not read chapter count.
Could not read chapter id.
Could not read chapter start byte offset.
Could not read chapter end byte offset.
Could not read chapter uncompressed length.
_AnimationManagerRunner
VKAnimationRunner
NSObject
VKSharedResources
VKSharedResourcesManager
VKSceneConfiguration
VKCamera
MDCRouteLayerObserverProxy
VKPolylineGroupOverlayObserver
VKFootprint
VKViewVolume
VKTile
VKMapView
VKGesturingCameraController
Internal
IconLookup
VKMapCanvas
VKMapDataAccess
VKInteractiveMap
VKMapModelDelegate
VKModelObject
VKAnimation
VKTimedAnimation
VKMapModel
VKTileProviderClient
GEOExperimentConfigurationObserver
VKPolylineOverlayRouteRibbonObserver
GEOResourceManifestTileGroupObserver
VKScreenCanvas
VKCameraControllerDelegate
VKTransitLineMarker
MDCLabelNotifier
LabelManagerDelegate
VKStyleManagerObserver
VKRasterOverlayTile
VKCameraController
VKCacheNode
VKLRUCache
NSFastEnumeration
VKMapCameraController
VKARCameraController
VKFeatureMarker
VKShieldImage
VKShieldArtwork
_VKScaledFallbackShieldArtwork
VKShieldManager
0"0B
VKShieldAtlas
VKShieldManagerAdditions
VKVectorTile
VKLabelFeatureMarker
VKRasterTile
VKRasterizedMapTile
VKTriangulator
VKLabelTile
VKGlobeGestureCameraController
VKMapImageCanvas
MDSnapshotMap
VKIconInfo
VKIconArtwork
_VKPOIIconArtwork
_VKLandmarkIconArtwork
_VKScaledFallbackIconArtwork
VKIconManager
VKIconAtlas
_VKLocalIconAtlas
VKDebugTree
VKPolygonTile
VKPolygonTileSource
VKRoadLabelPickingResult
VKLabelNavTrafficCamera
VKLabelNavFeature
VKTransitLineTileSource
RequesterContext
VKSelectedTransitLineTileSource
VKAnnotationTrackingCameraController
VKPolylinePath
VKTransitPolylinePath
VKTransitStationPolylinePath
VKTrafficTile
VKNavigationPuck
VKTrackableAnnotationPresentation
VKPlatform
VKPolylineGroupOverlay
VKOverlay
VKMemoryObserver
VKTileKeyList
NSCopying
LabelNavRouteContextObserverProxy
VKRouteContextObserver
VKAnchorWrapper
VKAnchorDelegate
VKPuckAnimator
VKLabelMarkerFeatureHandle
VKLabelMarkerShield
VKLabelMarker
VKNavContext
VKTileCache
VKNavPolygonTileSource
VKDynamicAnimation
VKPIcon
VKPolygonalItemGroup
VKPIconPack
VKPTextureAtlas
VKMapGestureCameraController
VKRunningCurve
VKGGLDebugTileData
VKLabelNavManeuver
VKPShield
VKTestTileRequester
VKPShieldPack
VKPShieldVariant
VKTrafficIncidentFeature
_VKTileProviderTimerTarget
VKTileProvider
VKTileSourceClient
VKLRUCacheDelegate
VKAttributesTile
VKAttributesTileSource
VKMapTile
VKMapSnapshotServer
VKTileSource
VKTileKeyMap
VKRasterTileSource
VKBackgroundRasterTileSource
VKStandardRasterTileSource
VKSatelliteRasterTileSource
VKHybridRasterTileSource
VKVectorTileSource
VKRouteContextObserverThunk
VKRouteLineObserver
VKRouteLineObserverProtocol
VKPGenericShieldStyleInfo
VKRoadSignArtwork
VKTrafficCameraFeature
VKRouteEtaDescription
VKRouteInfo
VKAlternateRouteInfo
VKRouteContext
VKInternedString
VKFoundationUtility
VKFoundationInterning
VKSkewingVectorTile
VKCustomFeature
GGLImageCanvas
MDRenderTarget
VKMapSnapshotRequest
VKMapSnapshotCreator
MapEngineDelegate
VKImageCanvasDelegate
VKImageCanvas
VKOverlayTileSource
VKOverlayTile
VKResourcesTileSource
VKResourcesTile
VKTrafficTileSource
VKAnnotationMarker
VKBuildingFootprintTileSource
VKTileDecoderWrapper
VKMockVectorTileRequester
VKMockRasterTileRequester
VKPerformanceTest
_MapEngineRenderQueueSource
GGLRenderQueueSource
VKTileSetBackedTileSource
_VKTileSetBackedTileSourceTimerTarget
VKRouteLine
VKImage
VKClassicGlobeCanvas
VKGlobeLineContainerDelegate
VKResourceManager
VKPolylineOverlayRenderRegion
VKPolylineOverlay
GEOComposedRouteObserver
RenderRegion
VKGestureCameraBehavior
VKGlobeLineContainer
VKPolylineObserver
VKDebugSettings
VKLabelNavRoad
LabelNavRouteLabeler
VKRouteRoadInfo
VKGuidanceStepInfo
VKARGestureCameraBehavior
VKTilePool
MDARController
VKClientLocalizedStrings
VKTrafficDynamicTileSource
VKMapSnapshot
NSSecureCoding
NSCoding
VKVenueFeatureMarker
VKTrafficDynamicTile
VKCustomFeatureDataSourceObserverThunk
VKCustomFeatureDataSourceObserver
VKTimer
VKScreenCameraController
VKMapTileList
VKScene
VKRasterOverlayScene
AltTileFetcher
VKGGLTextureManager
VKVenueTileSource
VKGenericShieldGenerator
VKGenericShieldGeneratorAdditions
VKGlobeCameraController
0/(@
VKBuildingGroup
MIController
VKMapViewDelegate
VKLabelNavJunction
VKPuckAnimatorLocationProjector
VKLabelTileSource
VKRoadLabelTileSource
VKPolygonLabelTileSource
VKPointLabelTileSource
VKPOILabelTileSource
VKRealisticLabelTileSource
VKTransitLabelTileSource
VKVenueLabelTileSource
MDDisplayLayer
GGLLayerDelegate
VKMercatorTerrainHeightCache
VKBundle
Accessibility
VKViewportInfo
VKPShieldIndexVariantEntry
VKLabelNavRoadLabel
VKLabelNavTileData
VKLabelNavRoadGraph
junctionlist
VKObjectBoundsContext
VKGGLTransitTile
VKBuildingTile
VKVenueGroup
VKGlobeAnnotationTrackingCameraController
VKClusterFeatureAnnotation
VKCustomFeatureAnnotation
VKAnnotation
VKPShieldIndex
VKPShieldIndexEntry
VKNavCameraController
VKNavContextObserver
VKNavigationCameraController
VKPuckAnimatorDelegate
VKCompoundAnimation
VKVenueTile
VKStylesheetVendorResourceManifestTileGroupObserverProxy
VKPShieldIndexTextEntry
VKImageSourceKey
VKPGenericShield
VKGlobeImageCanvas
VKPGenericShieldStylePack
VKTrafficFeature
VKAttachedNavGestureCameraBehavior
VKNavGestureCameraBehavior
VKDetachedNavGestureCameraBehavior
VKPGenericShieldVariant
VKRasterOverlayTileSource
VKRasterOverlay
VKPolygonGroup
VKMapAnnotationTrackingCameraController
VK3DObjectSubTile
VKLabelNavRouteEta
VKRoadTile
VKRoadTileSource
VKVenueBuildingFeatureMarker
GGLOpenGLESLayer
GGLLayer
_GGLDisplayLinkTarget
_animationManager
animationDidStop:
animationDidResume:
debugDescription
isEqual:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
description
initWithAnimationManager:
alloc
modernManagerForConfiguration:
activeTileGroup
activeTileSetForTileType:scale:
isHybridModeAvailableForTileKey:
isAvailableForTileKey:
activeTileSetForKey:
maximumZoomLevelInRect:
versionForRegion:
versionForTileKey:
dataForResourceWithName:fallbackBundle:
bytes
stringWithFormat:
appendString:
appendFormat:
newlineCharacterSet
componentsSeparatedByCharactersInSet:
UTF8String
_manifestConfiguration
_iconManager
_shieldManager
_gglTextureManager
_resourceManager
_stylesheetVendor
_fontManager
_device
_alphaAtlas
_highInflationAlphaAtlas
_isoAlphaAtlas
_distanceAtlas
_shaderLibrary
_commonLibrary
_referenceCount
iconManager
shieldManager
gglTextureManager
resourceManager
device
gglDevice
alphaAtlas
highInflationAlphaAtlas
isoAlphaAtlas
distanceAtlas
shaderLibrary
_initWithConfiguration:device:standardLibrary:
dealloc
_addResourceUser
_removeResourceUser
_hasResourceUsers
purge
.cxx_destruct
.cxx_construct
stylesheetVendor
init
_lock
_tilegroupIdentifierToResources
resourcesForConfiguration:
defaultManifestConfiguration
isDefaultConfiguration
initWithKeyOptions:valueOptions:capacity:
sharedManager
sharedResourcesForConfiguration:
addResourceUser:
removeResourceUser:
clearAllCaches
modernLoaderForResourceManifestConfiguration:locale:
setTileGroupIdentifier:
pointAtRouteCoordinate:
pointAt:
distanceFromPoint:toPoint:
closestPointOnRoute:
_solveForInput:
functionWithName:
_sceneManager
_styleManager
_pointsOfInterest
_navState
_distanceToCurrentManeuver
_distanceToDestination
_currentManeuverType
_currentStepLength
_nextStepLength
_currentIncidentType
_currentManeuverComplexity
_currentGroupedManeuverCount
_lineType
_rampType
_nextManeuverRampType
_transportType
_searchAlongTheRoute
_vehicleSpeed
_roadSpeed
_roadSpeedZeroes
_cameraMode
_navigationDestination
_distanceRanges
_taskContext
initWithTaskContext:
resetState
setSceneManager:
_updateStyleManager
sceneManager
setStyleManager:
styleManager
setNavigationState:
setDistanceToCurrentManeuver:
setDistanceToDestination:
setCurrentManeuverType:
setCurrentStepLength:
setNextStepLength:
setCurrentIncidentType:
setCurrentManeuverJunctionsCount:
setCurrentGroupedManeuverCount:
setLineType:
setRampType:
setNextManeuverRampType:
setCurrentTransportationType:
setSearchAlongTheRoute:
setVehicleSpeed:
setRoadSpeed:
setNavCameraMode:
navCameraMode
setNavigationDestination:
navigationDestination
navigationState
analyticsLogContextWithNavigationState
logContextByAddingNavigationStateWithLineType:navState:distanceToDestination:upcomingManeuverType:distanceToManeuver:isGroupedManeuver:speedBucket:toLogContext:
integerValue
defaultForKey:defaultValue:
numberWithInteger:
sharedConfiguration
doubleValue
numberWithDouble:
_runLoopController
_frustum
_minHeight
_maxHeight
_maxPitch
_terrainHeight
_maxFarClipDistance
_needsUpdate
_updating
_viewVolume
_footprint
_tanHalfHorizFOV
_tanHalfVerticalFOV
_forward
_right
_fractionOfScreenAboveFarClipPlaneAtCanonicalPitch
_distanceToGroundAndFarClipPlaneIntersection
_screenHeightOfGroundAndFarClipPlaneIntersection
_allowDatelineWraparound
_canonicalPitch
_horizontalOffset
_ndcZNear
_aspectRatio
_verticalFieldOfView
_near
_far
_width
_height
_transform
_scaledViewMatrix
_scaledSkewedViewMatrix
_scaledProjectionMatrix
_scaledViewProjectionMatrix
_scaledSkewedViewProjectionMatrix
_unscaledViewMatrix
_unscaledProjectionMatrix
_unscaledViewProjectionMatrix
_unscaledProjectionMatrixWithoutOffset
_viewProjectionMatrixWithoutOffset
_worldMatrix
_maxHeightNoPitch
setHorizontalOffset:
initWithRunLoopController:
detailedDescription
descriptionDictionaryRepresentation
_setPosition:
setPosition:
position
frustum
setOrientation:
orientation
setAspectRatio:
verticalFieldOfView
setVerticalFieldOfView:
horizontalFieldOfView
farClipDistance
nearClipDistance
tanHalfHorizFOV
tanHalfVerticalFOV
viewVolume
footprint
upVector
rightVector
forwardVector
groundPoint
displayZoomLevel
pitch
setCameraState:
cameraState
hasChangedState:
maximumStyleZForRect:
isWorldSpaceRectVisible:
isOuterWorldBoundsVisible
groundPlaneIntersectionPoint
annotationRectTest
annotationCoordinateTest
setNeedsUpdate
updateIfNeeded
groundPointFromScreenPoint:
groundPointFromScreenPoint:atGroundLevel:
widthOfViewAtDepth:
depthForViewWidth:
zoomAtPoint:
zoomAtCentrePoint
adjustClipPlanes
scaledViewProjectionMatrix
scaledSkewedViewProjectionMatrix
viewProjectionMatrixWithoutOffset
unscaledProjectionMatrixWithoutOffset
scaledProjectionMatrix
scaledViewMatrix
unscaledViewMatrix
unscaledViewProjectionMatrix
unscaledProjectionMatrix
projectWorldSpaceToClipSpace:
view:
aspectRatio
maxHeightNoPitch
setMaxHeightNoPitch:
minHeight
setMinHeight:
maxHeight
setMaxHeight:
maxPitch
setMaxPitch:
terrainHeight
setTerrainHeight:
fractionOfScreenAboveFarClipPlaneAtCanonicalPitch
setFractionOfScreenAboveFarClipPlaneAtCanonicalPitch:
distanceToGroundAndFarClipPlaneIntersection
screenHeightOfGroundAndFarClipPlaneIntersection
allowDatelineWraparound
setAllowDatelineWraparound:
canonicalPitch
setCanonicalPitch:
horizontalOffset
ndcZNear
setNdcZNear:
isInternalInstall
initWithFormat:
_polylineGroupObserver
_retainedGroups
_observedGroupsSet
polylineGroup:didAddPolyline:
polylineGroup:didRemovePolyline:
polylineGroup:didSelectPolyline:
initWithPolylineGroupObserver:
startObserving:
stopObserving:
_boundingRect
_convexHull
_maxDistance
_furthestGroundPoint
_minDistance
_nearestGroundPoint
_minDepth
_maxDepth
_centerDepth
_cornerGroundPointsCount
_cornerGroundPoints
cornerGroundPoints
computeFromCamera:
rejectsRect:
containsGroundPoint:
_expandedBoundingRect
boundingRect
convexHull
minDepth
maxDepth
centerDepth
furthestGroundPoint
nearestGroundPoint
cornerGroundPointsCount
copy
_corners
corners
updateWithFrustum:matrix:
lerpPoint:
initWithCapacity:
addObject:
compare:
_key
_origin
_matrix
_inverseMatrix
_pool
_birthdate
_cameraState
bounds
_shaderMatrix
_viewConstantData
matrix
inverseMatrix
shaderMatrix
keyPointer
setKey:
setOrigin:
setPool:
initWithKey:
tileWidth
geometryCount
updateViewDependentStateIfNecessaryWithContext:
updateViewDependentStateWithContext:
viewConstantData
origin
birthdate
_mapType
_canvas
_globe
_mapDelegate
_loaderOpen
_additionalManifestConfigurationLoaderOpen
_tileLoaderClientID
_mapDisplayStyle
_mapDisplayStyleAnimation
_edgeInsetAnimation
_animatingToEdgeInsets
_isChangingMapType
_regionChangeCount
_containsOverlay
_verticalYaw
_applicationState
_displayedSearchResultsType
_memoryObserver
_userLocationAnimator
_displayRate
_navigationDisplayRate
_requestedRate
_isInBackground
_additionalManifestConfiguration
_mapCameraController
_navigationCameraController
_navContext
_lastAnimatedUserCoordinate
_lastAnimatedCourse
_mapEngine
_didFinishSnapshotting
_flyoverMode
_arController
setApplicationState:displayedSearchResultsType:
setApplicationState:
setDisplayedSearchResultsType:
setAdditionalManifestConfiguration:
setMapDelegate:
isLabelMarkerSelectionEnabled
setLabelMarkerSelectionEnabled:
forceSceneLoad
openLoaderConnection
_openAdditionalManifestConfigurationLoaderConnection
closeLoaderConnection
_closeAdditionalManifestConfigurationLoaderConnection
secondaryCanvas
_forceLayoutForSuspensionSnapShot
forceFrame
forceLayout
visibleTileSets
attributionsForCurrentRegion
isShowingNoDataPlaceholders
setStylesheetName:
stylesheetIsDevResource
reloadStylesheet
targetDisplay
setTargetDisplay:
vehicleState
setVehicleState:
emphasis
setEmphasis:
setApplicationUILayout:
applicationUILayout
trafficEnabled
setTrafficEnabled:
trafficIncidentsEnabled
setTrafficIncidentsEnabled:
displayRate
setDisplayRate:
navigationDisplayRate
setNavigationDisplayRate:
_updateDisplayRate
_createDisplayLayer
willEnterForeground
didEnterBackground
didFinishSnapshotting
flushTileLoads
canRotate
setStaysCenteredDuringPinch:
localizeLabels
setLocalizeLabels:
labelScaleFactor
setLabelScaleFactor:
staysCenteredDuringPinch
setStaysCenteredDuringRotation:
staysCenteredDuringRotation
setIsPitchable:
isPitchable
debugLayoutContinuously
setDebugLayoutContinuously:
debugFramesPerSecond
debugRunPerformanceTestWithOutputHeader:
setNeedsLayout
clearScene
setHidden:
didReceiveMemoryWarning:
isEffectivelyHidden
hostDisplay
setHostDisplay:
enableDebugLabelHighlighting
debugHighlightLabelAtPoint:
debugLabelString:
closestRoadMarkerForSelectionAtPoint:
setShouldLoadFallbackTiles:
shouldLoadFallbackTiles
setShouldLoadMapMargin:
shouldLoadMapMargin
detailedDescriptionDictionaryRepresentation
isGesturing
setGesturing:
iconsShouldAlignToPixels
setIconsShouldAlignToPixels:
mapType
canZoomInForTileSize:
canZoomOutForTileSize:
minimumZoomLevelForTileSize:
topDownMinimumZoomLevelForTileSize:
maximumZoomLevelForTileSize:
currentZoomLevelForTileSize:
zoomLevelAdjustmentForTileSize:
shieldSize
setShieldSize:
navigationShieldSize
setNavigationShieldSize:
shieldIdiom
setShieldIdiom:
showsPointsOfInterest
setShowsPointsOfInterest:
showsBuildings
setShowsBuildings:
showsVenues
setShowsVenues:
worldSpaceWidthOfView
setDimmingBaseMap:
setDimmingBaseMap:animated:duration:
isDimmingBaseMap
venueWithFocus
venueBuildingWithFocus
venueAtLocation:
venueAtLocation:withMarginForError:
venueAtLocation:withMarginForError:includeNonRevealedVenues:
venueWithID:
displayedFloorIsDefaultForVenueBuilding:
displayedFloorOrdinalForVenueBuilding:
setDisplayedFloorOrdinal:forVenueBuilding:
clearVenueBuildingFloorSelections
zoomToRevealVenueFloorplan:
zoomToRevealVenueBuildingFloorplan:
_setFloorSwitcherZoomPadding:
nearestVenueDidChange:building:
setClientLocalizedStrings:
setDesiredMapMode:immediate:
setCanonicalSkyHeight:
_createGlobe
supportsMapType:
supportsNightMode
setMapType:
setMapType:animated:
_updateAnalytics:
_clearAnalytics
_updateBackgroundColor
mapDisplayStyle
setMapDisplayStyle:
setMapDisplayStyle:animated:
setMapDisplayStyle:animated:duration:
animateStylesWithDuration:animations:
_styleTransitionProgress
_setStyleTransitionProgress:targetStyle:step:
setBounds:
mapRegionBounds
presentationYaw
altitude
mapRegion
consoleString:
centerCoordinate
setCenterCoordinate:altitude:yaw:pitch:duration:timingCurve:completion:
activateInternalSettings
initShouldRasterize:inBackground:manifestConfiguration:contentScale:
setContentsScale:
renderInContext:
runAnimation:
setYaw:animated:
setMapRegion:pitch:yaw:
setMapRegion:pitch:yaw:duration:completion:
durationToAnimateToMapRegion:
convertPoint:toCoordinateFromLayer:
convertPoint:toMapPointFromLayer:
convertMapPoint:toPointToLayer:
convertCoordinate:toPointToLayer:
convertCoordinate:toCameraModelPointToLayer:
distanceFromPoint:toPoint:fromLayer:withPrecision:
setEdgeInsets:
setEdgeInsets:duration:timingFunction:completionHandler:
edgeInsets
setFullyOccludedEdgeInsets:
fullyOccludedEdgeInsets
setLabelEdgeInsets:
labelEdgeInsets
setCameraFramingInsets:
canShowFlyoverAnimation
prepareFlyoverAnimation:completion:
_runFlyoverTourStateChange:completion:
_notifyDelegateFlyoverTourLabelChanged:
startFlyoverAnimation:animateToStart:completion:
moveToFlyoverTourStartPosition:duration:completion:
startFlyoverTourAnimation:animateToStart:completion:
stopFlyoverAnimation
pauseFlyoverTourAnimation
resumeFlyoverTourAnimation
enableFlyoverStatistics
disableFlyoverStatistics
resetFlyoverStatistics
flyoverStatistics
stopTracking
pauseTracking
navigationCameraReturnToPuck
transitionToTracking:mapMode:startLocation:startCourse:pounceCompletionHandler:
setTrackingCameraShouldHandleGestures:
trackingCameraShouldHandleGestures
preloadNavigationSceneResources
setRoutePreloadSession:
routePreloadSession
setExternalTrafficFeatures:areRouteTrafficFeaturesActive:
addCustomFeatureDataSource:
removeCustomFeatureDataSource:
labelMarkerForSelectionAtPoint:selectableLabelsOnly:
labelMarkerForCustomFeatureAnnotation:dataSource:
labelMarkerForCustomFeatureAnnotation:
selectLabelMarker:
deselectLabelMarker
transitLinesDisabled
setDisableTransitLines:
transitLineMarkersInCurrentViewport
transitLineMarkersForSelectionAtPoint:
selectedTransitLineIDs
selectTransitLineMarker:
deselectTransitLineMarker
boundsContextForSelectedTransitLines
setSelectedFeatureId:
deselectFeatureId
setSelectedVenuePoiFeatureId:
deselectVenuePoiFeatureId
enter3DMode
exit3DMode
canEnter3DMode
canEnter3DModeFlyoverForTileSize:
isPitched
isFullyPitched
setFlyoverMode:
flyoverMode
isShowingFlyover
canShowFlyover
panWithOffset:relativeToScreenPoint:animated:duration:completionHandler:
shouldHideOffscreenSelectedAnnotation
selectedLabelMarker
labelMarkers
trackingZoomScale
setTrackingZoomScale:
annotationTrackingZoomStyle
setAnnotationTrackingZoomStyle:
annotationTrackingHeadingAnimationDisplayRate
setAnnotationTrackingHeadingAnimationDisplayRate:
startTrackingAnnotation:trackHeading:animated:
stopTrackingAnnotation
isAnimatingToTrackAnnotation
addOverlay:
removeOverlay:
addPersistentOverlay:
removePersistentOverlay:
addRasterOverlay:
removeRasterOverlay:
insertRasterOverlay:aboveOverlay:
insertRasterOverlay:belowOverlay:
setRouteUserOffset:
setCurrentLocationText:
setRouteContext:
setNavContext:
viewportInfo
restoreViewportFromInfo:
focusedLabelsPolyline
setFocusedLabelsPolyline:
_mapDelegateQueue
_postDelegateCallbackBlock:
mapDidStartLoadingTiles:
mapDidFinishLoadingTiles:
mapDidFailLoadingTiles:withError:
mapDidChangeVisibleRegion:
mapDidReloadStylesheet:
map:willChangeRegionAnimated:
map:didChangeRegionAnimated:
map:presentationForAnnotation:
mapDidBecomeFullyDrawn:hasFailedTiles:
mapDidBecomePartiallyDrawn:
map:didBecomePitched:
map:canZoomInDidChange:
map:canZoomOutDidChange:
map:canEnter3DModeDidChange:
map:canShowFlyoverDidChange:
map:flyoverModeDidChange:
map:flyoverModeWillChange:
mapDidFinishChangingMapDisplayStyle:
map:selectedLabelMarkerWillDisappear:
map:labelMarkerDidChangeState:
mapLabelsDidLayout:
map:willTransitionFrom:to:duration:
map:didUpdateContainsOverlay:
mapDidFinishInitialTrackingAnimation:
_updateMapDisplayStyle
mapController:requestsDisplayRate:
willLayoutWithTimestamp:
didPresent
wantsTimerTick
zoomToLevel:withFocusPoint:
zoom:withFocusPoint:completionHandler:
startPinchingWithFocusPoint:
updatePinchWithFocusPoint:oldFactor:newFactor:
stopPinchingWithFocusPoint:
startPanningAtPoint:
startPanningAtPoint:panAtStartPoint:
updatePanWithTranslation:
stopPanningAtPoint:
startRotatingWithFocusPoint:
updateRotationWithFocusPoint:newValue:
stopRotatingWithFocusPoint:
startPitchingWithFocusPoint:
updatePitchWithFocusPoint:translation:
stopPitchingWithFocusPoint:
isPointValidForGesturing:
stopSnappingAnimations
setDisableRoads:
setDisableLabels:
setDisablePolygons:
setDisableBuildingFootprints:
setDisableRasters:
setDisableRoadClass:forRoadClass:
setDisableGrid:
roadClassDisabled:
isFullyDrawn
roadsDisabled
labelsDisabled
polygonsDisabled
buildingFootprintsDisabled
rastersDisabled
gridDisabled
goToTileX:Y:Z:tileSize:
setRendersInBackground:
rendersInBackground
setRouteLineSplitAnnotation:
setCameraHorizontalOffset:duration:timingFunction:
addExternalAnchor:
removeExternalAnchor:
map:didUpdateVerticalYawTo:
puckAnimator:runAnimation:
puckAnimator:updatedPosition:course:
puckAnimatorDidStop:
puckAnimator:updatedTargetPosition:
sceneConfiguration
navigationPuck
mapHasStartedPanning:
mapHasStoppedPanning:
mapDidLeaveDefaultZoom:
mapDidReturnToDefaultZoom:
mapDelegate
verticalYaw
applicationState
displayedSearchResultsType
additionalManifestConfiguration
userLocationAnimator
currentCanvas
transferGestureState:
postNotificationName:object:
defaultCenter
postNotificationName:object:userInfo:
dictionaryWithObjects:forKeys:count:
numberWithBool:
trackingAnnotation
isTrackingHeading
arrayWithArray:
convertPoint:fromLayer:
raise
exceptionWithName:reason:userInfo:
layoutIfNeeded
performStylesheetDidChange
contentsScale
arrayWithCapacity:
dictionaryWithDictionary:
isHidden
superlayer
boolValue
objectForInfoDictionaryKey:
mainBundle
closeServerConnection
closeForClient:
openServerConnection
openForClient:
mapCanvas
debugHighlightFeatureMarker:
stylesheet
styleForFeature:
currentMapMode
mapEngine
featureMarkerAtPoint:
buildingMarkerAtPoint:
roadMarkersForSelectionAtPoint:
populateDebugNode:
iconForStyleAttributes:contentScale:size:customIconID:transparent:
_map
_lastCanvasSize
_defaultTrackingCamera
_lastValidCanvasSizeZoomLevel
_hasLastValidCanvasSizeZoomLevel
_horizontalOffsetAnimation
_canonicalSkyHeight
_anchorContext
_delegate
groundCoordinateForScreenPixel:cameraFrame:
screenPixelForCoordinate:cameraFrame:
rigidTransformForFrame:
projectionMatrix
worldViewProjectionMatrix:
fovAdjustment
heightAtCoordinate:
setCameraFrame:
rotateCameraFrameAboutCoordinate:coordinate:deltaAngle:
supportsMapType:scale:manifestConfiguration:
requestStylesheetAnimation:targetMapDisplayStyle:setupHandler:
beginStyleAnimationGroup
endStyleAnimationGroup
stylesheetAnimationWillStartFromStyle:toStyle:
stylesheetAnimationDidProgress:
stylesheetAnimationDidEnd:
finishStyleBlend
setStylesheetMapDisplayStyle:
supportsMapDisplayStyle:
sourceMapDisplayStyle
debugHighlightObjectAtPoint:highlightTarget:
labelSettings
boundsForSelectedTransitLines
convertPointToCoordinate:
convertPointToMapPoint:
convertMapPointToPoint:
convertCoordinateToPoint:
convertCoordinateToCameraModelPoint:
overlays
persistentOverlays
transitionToTracking:mapMode:startLocation:startCourse:cameraController:pounceCompletionHandler:
setNavCameraIsDetached:
currentRoadSignOffset
delegate
setDelegate:
routeLineSplitAnnotation
rasterOverlays
externalAnchors
mapModel:didUpdateContainsOverlay:
mapModelDidReloadStylesheet:
mapModelStylesheetDidChange:
mapModelDidBecomePartiallyDrawn:
mapModelWillBecomeFullyDrawn:
mapModelDidBecomeFullyDrawn:hasFailedTiles:
mapModelDidStartLoadingTiles:
mapModelDidFinishLoadingTiles:
mapModelDidFailLoadingTiles:withError:
mapModel:selectedLabelMarkerWillDisappear:
mapModel:labelMarkerDidChangeState:
mapModelLabelsDidLayout:
mapModel:willTransitionFrom:to:duration:
mapModelDidUpdateMinMaxZoomLevel:
transferStateFromCanvas:
resetTileContainers
initWithMapEngine:inBackground:
currentSceneRequiresMSAA
_updateViewTransform
gglWillDrawWithTimestamp
updateCameraForFrameResize
didBeginTransitionToTransit
setShouldLimitTrackingCameraHeight:
setDefaultTrackingCamera:
preloadNavigationSceneResourcesWithDevice:
cameraControllerDidChangeCameraState:
cameraControllerRequestsLayout:
cameraController:willChangeRegionAnimated:
cameraController:didChangeRegionAnimated:
cameraControllerDidFinishInitialTrackingAnimation:
cameraController:didBecomePitched:
cameraController:canEnter3DModeDidChange:
cameraController:presentationForAnnotation:
cameraController:canZoomInDidChange:
cameraController:canZoomOutDidChange:
cameraControllerHasStartedPanning:
cameraControllerHasStoppedPanning:
cameraControllerDidLeaveDefaultZoom:
cameraControllerDidReturnToDefaultZoom:
buildingMarkerAtScreenPoint:
featureMarkerAtScreenPoint:
styleAtScreenPoint:
tileSize
upForCoordinate:
unitsPerMeterAtLatitude:
_lookAtToCameraFrame:target:up:
canonicalSkyHeight
defaultTrackingCamera
stringByAppendingPathExtension:
stringWithCString:encoding:
stringByAppendingString:
objectAtIndexedSubscript:
_active
_needsLayout
_needsDisplay
_renderLayer
_sharedResources
_renderTarget
shouldLayoutWithoutStyleManager
initWithTarget:manifestConfiguration:
reset
setNeedsDisplay
layoutScene:withContext:
gglLayoutScene:withContext:renderQueue:
gglLayoutSceneWithoutStyleManager:withContext:renderQueue:
renderLayer
setRenderLayer:
isActive
setActive:
sharedResources
renderTarget
_completionHandler
_name
_priority
_runner
_state
_frequency
_runsForever
running
duration
setDuration:
hasFrequency
timed
initWithName:
initWithPriority:name:
initWithPriority:
startWithRunner:
transferToRunner:
stopAnimation:
stop
pause
resume
onTimerFired:
completionHandler
setCompletionHandler:
priority
runsForever
setRunsForever:
name
state
frequency
setFrequency:
_stepHandler
_timingFunction
_duration
_startTimestamp
_lastTimestamp
_resuming
_startTimestampSet
setTimingFunction:
initWithDuration:priority:name:
initWithDuration:
initWithDuration:name:
timingFunction
stepHandler
setStepHandler:
setDragCoefficientGetter:
_mapPurpose
_locale
_tileSize
_tileProvider
_buildingTileProvider
_additionalManifestTileProvider
_rasterOverlayProvider
_activeMapLayers
_mapMode
_desiredMapMode
_transitioningToNav
_isTransitioningToTransit
_rasterOverlayTileSource
_tileSources
_activeStyleManager
_defaultStyleManager
_hybridStyleManager
_satelliteStyleManager
_sceneConfiguration
_zoomLevel
_routePreloadSession
_showsBuildings
_showsVenues
_fullyDrawn
_shouldNotifyFullyDrawn
_hasFailedTile
_trafficEnabled
_trafficIncidentsEnabled
_shouldRasterize
_loadingCount
_contentScale
_targetDisplay
_vehicleState
_emphasis
_applicationUILayout
_lodBias
_disableRoads
_disableLabels
_disablePolygons
_disableBuildingFootprints
_disableRasters
_disableGrid
_clearColor
_limitingNavCameraHeight
_blockingStylesheetObservers
_externalAnchors
_forcedMaxZoomLevel
_disableTransitLines
_modeTransitionAnimation
_disableRoadClass
_renderer
_rendererMutex
_logicManager
_trafficSource
_trafficSharedResources
_dataOverrideManager
_navigationPuckSize
_clearItem
_mapFeatureStyleAttributes
_styleQuery
_metroArea
_forceMapDrawStyleUpdate
_polylineOverlays
_selectedPolyline
_highZoomTransitionAnimation
_navigationPuck
_observedOverlays
_overlays
_navMapMode
_isEmphasisSet
_showsPointsOfInterest
_localizeLabels
_labelScaleFactor
_shieldSize
_navigationShieldSize
_shieldIdiom
_navMapModeTransitionZ
_persistentOverlays
_routeUserOffset
tileProviderNeedsUpdate:
willStartLoadingTiles
didStopLoadingTilesWithError:
tileSource:overrideForMaximumZoomLevel:
experimentConfigurationDidChange:
polylineOverlay:didUpdateRouteRibbon:
resourceManifestManagerWillChangeActiveTileGroup:
resourceManifestManagerDidChangeActiveTileGroup:
resourceManifestManager:didChangeActiveTileGroup:fromOldTileGroup:
setNeighborMode:
trafficResources
neighborMode
foreachActiveRenderLayer:
foreachRenderLayer:
foreachActiveLayer:
tileProvider
disableRoadClass:withRoadClass:
isRoadClassDisabled:
terrainHeightCache
mapTypeUsesStandardTiles
tileStyleForMapLayer:
canPitch
createSourceForLayer:tileSet:useAdditionalManifest:
tileSetForMapLayer:tileGroup:
clearTileSources
tileProviderForMapLayer:
configureTileSources
createSourceForLayer:useAdditionalManifest:
forceMapType:animated:
activateLogic
showingTrafficCasing
_transitFadeOutCompletionCallback
updateOverlayType
startStylesheetAnimation:targetMapDisplayStyle:
didBeginTransitionToNavigation
didEndNavigation
didEndTransitionToTransit
_updateRegularTileProviderMode
setLimitingNavCameraHeight:
_mapConfigurationDidChange
_tileSelectionScaleForContext:
sizeDidChange:
_setInitialClientStyleAttributesForDefaultStyleManager
_setStyleManagerFromMapType:
performStylesheetWillTransitionToDisplayStyle:
performStylesheetTransitionDidProgress
performStylesheetDoneChanging
performStylesheetDidReload
setStyleManager:forRealistic:
setContentScale:
lodBias
setLodBias:
_createTrafficTileSourcesIfNecessary:sharedResources:
_createTrafficTileSourceAtIndex:roadTileSource:origin:sharedResources:
initWithTarget:renderer:purpose:manifestConfiguration:locale:taskContext:logicManager:
flushCaches:
cancelTileRequests
shouldFlushCaches:
_localeChanged:
_forceLayout
minimumZoomLevelInView:
maximumZoomLevelInViewWithoutZoomOverride:
maximumZoomLevelInView:
_maximumZoomLevelInView:ignoreZoomOverride:
_updateZoomLevel:
_beginNavMapModeTransitionToMode:
_transitionFromMode:toMode:animated:
updateMapDrawStyleWithContext:
northYawAtZoom:
layoutScene:withContext:renderQueue:
destroyRendererStopObserving
updateRasterOverlayProviders:withContext:
setClearColor:
reserveStencilRangesForScene:context:renderQueue:
buildingsDidBecome3D:
_rasterOverlayForLevel:
_rasterOverlayTileSourceForLevel:
_updateTileExclusionAreas
_updateRasterOverlayZoomOverride
isInNavigationMode
isInTransitMode
setShowingOuterHaloOnLabelsDidChange:
roadTileForTile:
_updateOverlayTileSource
labelMapTileForTile:layer:
selectedLabelMarkerWillDisappear:
labelMarkerDidChangeState:
didLayoutLabels
setNavigationPuckSize:
buildingMarkerAtScreenPoint:groundPoint:
featureMarkerAtScreenPoint:groundPoint:
populateDebugNode:debugTileProvider:
disableRoads
disableLabels
disablePolygons
disableBuildingFootprints
disableRasters
disableGrid
clearColor
isTrafficEnabled
isTrafficIncidentsEnabled
contentScale
manifestConfiguration
navigationPuckSize
shouldRasterize
purpose
limitingNavCameraHeight
disableTransitLines
navMapModeTransitionZ
setNavMapModeTransitionZ:
routeUserOffset
removeObject:
addObjectsFromArray:
numberWithUnsignedLongLong:
arrayWithObjects:count:
removeExperimentObserver:
removeTileGroupObserver:
setByAddingObjectsFromSet:
countryCode
containsObject:
array
addObserver:selector:name:object:
addExperimentObserver:queue:
addTileGroupObserver:queue:
isEquivalentTileSet:
hasActiveTileGroup
conciseDictionaryRepresentation
numberWithLong:
numberWithFloat:
nameForRoadClass:
numberOfRoadClasses
_animationRunner
_camera
_displayTarget
_userIsGesturing
_cameraController
_debugFramesPerSecond
_edgeInsets
_fullyOccludedEdgeInsets
_labelEdgeInsets
_deallocing
_renderQueue
_mapRenderer
_layoutContext
_bgColor
_view
_arSession
cameraControllerRequestsUpdateDisplayLinkStatus:
cameraController:requestsDisplayRate:
cameraController:flyoverModeDidChange:
cameraController:flyoverModeWillChange:
updateWithTimestamp:
setWantsLayout
setCameraController:
cameraController
roadMarkersForSelectionAtScreenPoint:
didReceiveMemoryWarning:beAggressive:
setDebugFramesPerSecond:
camera
bgColor
string
dictionary
numberWithInt:
intValue
_identifier
_shieldText
_shieldLocale
_shieldType
_shieldColor
_labelText
_labelLocale
_transitLinkID
initWithFeature:transitLink:
initWithIdentifier:
featureID
identifier
shieldText
shieldLocale
shieldType
shieldColor
labelText
labelLocale
transitLinkID
muid
initWithUTF8String:
initWithMUID:
markerWithFeature:transitLink:
_layer
labelManager:setNeedsLayout:
labelManager:setNeedsDisplay:
labelManagerDidLayout:
labelManager:selectedLabelMarkerWillDisappear:
labelManager:labelMarkerDidChangeState:
labelManager:pendingArtworkIsReady:
prepareForStylesheetTransitionToMapDisplayStyle:withReadinessBlock:
stylesheetWillTransition:
stylesheetWillChange
stylesheetTransitionDidProgress
stylesheetDidChange
stylesheetDoneChanging
stylesheetDidReload
reloadOnStylesheetChange
initWithLayer:
_renderItem
_pipelineSetup
_overlayData
initWithKey:size:scale:
renderItem
isEmpty
drawContext
setupRenderItemWithRenderState:pipelineState:mesh:
gglTexture
_gesturing
_inProgressRegionChangeIsAnimated
_staysCenteredDuringPinch
_staysCenteredDuringRotation
_isPitchEnabled
_isRotateEnabled
setCenterCoordinate:
distanceFromCenterCoordinate
setDistanceFromCenterCoordinate:
heading
setHeading:
setPitch:
isRotated
setCamera:
canvas
setCanvas:
canvasDidLayout
beginRegionChange:
endRegionChange
isAnimating
isChangingRegion
checkAndResetRegionChangeCount
centerScreenPoint
scaledScreenPointForPoint:
cursorFromScreenPoint:
edgeInsetsWillBeginAnimating
edgeInsetsDidEndAnimating
minimumZoomLevel
maximumZoomLevel
currentZoomLevel
topDownMinimumZoomLevel
updateCameraToPositionOrientationLimits
presentationHeading
centerCoordinate:andDistanceFromCenter:forMapRegion:
isPitchEnabled
setIsPitchEnabled:
isRotateEnabled
setIsRotateEnabled:
doesNotRecognizeSelector:
addVertex:
initWithMapRect:
initWithCoordinateRegion:
setValue:forKey:
_value
_next
_previous
value
setValue:
next
setNext:
previous
setPrevious:
_reservedCapacity
_maximumCapacity
_count
_table
_head
_tail
countByEnumeratingWithState:objects:count:
consistencyCheck
initWithReservedCapacity:maximumCapacity:
contentsDescription
dropTail
evictIfNecessary
setReservedCapacity:maximumCapacity:
objectForKey:
objectWithoutPromotingForKey:
setObject:forKey:
removeAllObjects
removeNode:
insertNodeAtHead:
removeObjectsMatchingPredicate:
reservedCapacity
maximumCapacity
count
_mapModel
_mapCanvas
_minDistanceToGroundAlongForwardVector
_maxDistanceToGroundAlongForwardVector
_finalYaw
_finalPitch
currentDisplayZoomLevel
currentNormalizedZoomLevel
currentStyleZoomLevel
minimumNormalizedZoomLevel
maximumNormalizedZoomLevel
currentMaximumNormalizedZoomLevel
currentMinimumNormalizedZoomLevel
currentTopDownMinimumNormalizedZoomLevel
normalizedZoomLevelAdjustmentForTileSize:
minimumPitchForNormalizedZoomLevel:
idealPitchForNormalizedZoomLevel:
maxPitchForNormalizedZoomLevel:
rotateToPitch:withPoint:preserveAltitude:animated:exaggerate:
rotateToYaw:withPoint:animated:
tapZoom:levels:completionHandler:
zoom:withPoint:completionHandler:
zoomToLevel:withPoint:
snapMapIfNecessary:
clampPitch:yaw:atTargetPositionZ:
canEnter3DModeNoUpdate
clampZoomLevelIfNecessary
updateCameraZBounds
_mercatorCenterCoordinateForMapRegion:
_animateToPosition:pitch:yaw:duration:timingCurve:completion:
setCenterCoordinate:altitude:yaw:pitch:duration:animationStyle:timingCurve:completion:
setCenterCoordinate3D:altitude:yaw:pitch:duration:animationStyle:timingCurve:completion:
mapModel
setMapModel:
setMapCanvas:
stringWithUTF8String:
_globeView
_currentZoomLevel
_maxZoomLevel
_altitudeOffset
_fovy
_offsetTransform
_cameraFrame
_baseTransform
_arTransform
_currentARTransform
_lastARTransform
_arOrientation
_transitionAnimation
_interfaceOrientation
_interfaceOrientationRotation
_currentCoordinate
_trackingState
_trackingStateReason
_overrideARFieldOfView
_alwaysUseCurrentFrame
_fieldOfView
updateGlobeFromCamera
cameraPosition
_intersectAndResolveWorldCollision:
_fovAdjustment
setCurrentZoomLevel:
setMaxZoomLevel:
updateWithARSession:
_updateARContext
_updateBaseTransform
_setupPounceAnimation:duration:completion:
trasitionToARModeAtCoordinate:withDuration:completion:
cameraFrame
trasitionToARModeFromCameraFrame:withDuration:completion:
arCameraTransform
heightScale
updateCameraFrameFromARTransform
arSessionWasInterrupted:
globeView
setGlobeView:
setMapEngine:
overrideARFieldOfView
setOverrideARFieldOfView:
offsetTransform
setOffsetTransform:
fieldOfView
setFieldOfView:
setSouthLat:
setNorthLat:
setWestLng:
setEastLng:
_actualFeatureMarker
initWithFeatureMarkerPtr:
shortName
venueID
styleAttributes
actualFeatureMarker
markerWithFeatureMarker:
_center
initWithCGImage:scale:usedAsTextureAndImage:centerPoint:
center
_scale
_imageCache
_imageCacheLock
_stringAttributes
_shadowColor
_shadowOffset
_shadowRadius
_textCenterOffsetX
_textBaseline
_nonDigitFont
_nonDigitFontColor
_textSpecificArtworks
_templateContext
_newContext
_backgroundImage
_resizableInfo
_resizable
_lineHeight
_lineSpacing
initWithPackedVariant:backgroundImage:scale:colors:
initWithBackgroundImage:contentScale:font:nonDigitFont:textColor:nonDigitTextColor:textCenterOffsetX:textBaseline:textStrokeWidth:textStrokeColor:textShadowOffset:textShadowRadius:textShadowColor:
initWithResizableBackgroundImage:resizableInfo:contentScale:font:nonDigitFont:textColor:nonDigitTextColor:textCenterOffsetX:textBaseline:textStrokeWidth:textStrokeColor:textShadowOffset:textShadowRadius:textShadowColor:lineSpacing:
_initWithBackgroundImage:contentScale:resizableInfo:font:nonDigitFont:textColor:nonDigitTextColor:textCenterOffsetX:textBaseline:textStrokeWidth:textStrokeColor:textShadowOffset:textShadowRadius:textShadowColor:lineSpacing:
setTextSpecificArtwork:forStrings:
imageWithShieldText:
imageWithShieldText:allowMultiline:
imageWithShieldText:widthPaddingMultiple:
imageWithShieldText:allowMultiline:widthPaddingMultiple:
newImageWithShieldText:allowMultiline:widthPaddingMultiple:centerPoint:
scale
hasPrefix:
hasSuffix:
arrayWithObject:
componentsSeparatedByString:
addAttribute:value:range:
rangeOfCharacterFromSet:options:range:
invertedSet
decimalDigitCharacterSet
initWithString:attributes:
objectForKeyedSubscript:
stringByAppendingFormat:
initWithObjectsAndKeys:
unlock
lock
_colorForMaskColor:colors:
_artwork
initWithShieldArtwork:scale:
_artworkPool
_genericArtworks
_genericShieldGenerator
_nonRegionalResourceNames
_nonRegionalResourceNamesLock
_atlases
_atlasesLock
_indexes
_indexesLock
_shouldCacheAtlases
initWithConfiguration:resourceManager:
initWithConfiguration:resourceManager:shouldCacheAtlases:
_nonRegionalIndexesAndPacks
_atlasForName:
_indexForName:
artworkForShieldType:textLength:contentScale:resourceNames:style:size:idiom:numberOfLines:colors:featureType:variant:
artworkForShieldName:textLength:contentScale:resourceNames:size:idiom:numberOfLines:colors:
artworkForShieldType:textLength:contentScale:size:idiom:mapRect:colors:featureType:variant:
artworkForShieldType:textLength:contentScale:size:idiom:colors:featureType:variant:
imageForShieldType:shieldText:contentScale:size:idiom:colors:featureType:variant:
shouldCacheAtlases
stringByReplacingOccurrencesOfString:withString:
stringByDeletingPathExtension
allObjects
pathExtension
dictionaryWithCapacity:
intersectSet:
setWithArray:
contentsOfDirectoryAtPath:error:
defaultManager
filename
resourceType
regionalResourcesForMapRect:
modernManagerForTileGroupIdentifier:
rangeOfCharacterFromSet:options:
characterSetWithCharactersInString:
deleteCharactersInRange:
mutableCopy
artworkForShieldIdentifier:textLength:contentScale:size:numberOfLines:genericShieldGenerator:colors:
arrayByAddingObjectsFromArray:
defaultArtworkIdentifierForFeatureType:variant:
artworkIdentifierForShieldType:textSpecificIdentifiers:variant:
initWithData:
initWithShieldPack:
_atlasToImages
_atlasToImagesLock
_shieldPack
newImageWithTextureAtlases:atlasToImageCache:atlasToImageCacheLock:contentScale:colors:
lastPathComponent
pathsForResourcesOfType:inDirectory:
allResourceNames
sharedManagerForConfiguration:
objectAtIndex:
scannerWithString:
scanHexInt:
_modelTile
_maximumStyleZ
_textureScale
_fragments
setModelTile:
initWithKey:modelTile:styleManager:sharedResources:contentScale:device:
vectorType
setSharedResources:
modelTile
textureScale
setTextureScale:
maximumStyleZ
setMaximumStyleZ:
fragments
_actualLabelFeatureMarker
initWithLabelFeatureMarkerPtr:
closestApproach
direction
viewProximity
setViewProximity:
markerWithLabelFeatureMarker:
_data
_genericTileType
_hasGenericTileType
_gglTexture
_pipelineSetupCLUT
_shaderReverseAlphaSetup
initWithKey:imageData:styleManager:
initWithKey:imageData:styleManager:genericTileType:
setupClutShaderWithRenderState:pipelineState:mesh:clutTexture:clutBlend:
setupNormalShaderWithRenderState:pipelineState:mesh:
setupReverseAlphaShaderWithRenderState:pipelineState:mesh:roadAlpha:
newCGImageFromData:
buildTextureDataFromCGImage:
gglBuildTexture:
immediateLoad:
hasGenericTileType
genericTileType
setGglTexture:
buildTexture
initWithKey:gglTexture:styleManager:
gglBuildTexture
transportType
expectedTime
_opaque_triangulator
_segments_capacity
_opaque_segments
_mesh_capacity
_mesh
_scratch
_triangulateIndicesInto:
triangulateIndicesForPoints:pointCount:
setLength:
appendBytes:length:
_labelTile
initWithKey:modelTile:tileType:labelManager:sharedResources:
labelTile
transitNodes
transitNodeCount
linesCount
pois
poisCount
eastLng
southLat
westLng
northLat
indexOfObject:
forEachSnappedPath:
stepsCount
currentDisplayStep
_cameraManager
_beganDoublePanPitch
_currentDoublePanPitch
_isPitchIncreasing
setCameraManager:
beginZoom:
updateZoom:oldFactor:newFactor:
endZoom:
beginPan:
updatePan:lastScreenPoint:
endPan:
beginRotate:
updateRotate:atScreenPoint:
endRotate:
beginPitch:
updatePitch:translation:
endPitch:
isPitchIncreasing
initWithMapEngine:
initWithMapEngine:localizeLabels:mapType:
update
endPointIndex
startPointIndex
_style
_image
_fillColor
_haloColor
_glyphColor
_fullBleedColor
_alpha
_strokeWeight
setFillColor:
setHaloColor:
setGlyphColor:
setFullBleedColor:
image
setImage:
style
setStyle:
fillColor
haloColor
glyphColor
fullBleedColor
alpha
setAlpha:
strokeWeight
setStrokeWeight:
_hasIcon
_textCenterPosition
_extraStyle
_completionHandlers
initWithImage:contentScale:
imageWithText:fontName:
getImage:queue:
_newImageWithText:fontName:
_newImage
_cleanUpAfterDrawing
hasBounds
localRenderBounds
localCollisionBounds
anchorPoint
_glyphImage
_hasText
_circleMetrics
_balloonMetrics
initWithGlyph:style:extraStyle:contentScale:hasText:
isPOIBalloon
isPOICircle
_maskImage
_outlineMaskImage
initWithMask:outlineMask:style:extraStyle:contentScale:
_scaleFactor
initWithArtwork:contentScale:
_newScaledImage:
_localAtlas
_nameToStyleManagerLock
_nameToStyleManager
initWithConfiguration:
initWithConfiguration:shouldCacheAtlases:
initWithConfiguration:resourceManager:stylesheetVendor:shouldCacheAtlases:
_didReceiveMemoryWarning:
_nonRegionalPacks
_forEachIconPackWithContentScale:iconSize:resourceNames:visitUntilMatch:
_forEachIconPackWithContentScale:iconSize:resourceNames:allowSizeFallback:visitUntilMatch:
artworkForName:withResourceNames:style:extraStyle:contentScale:size:hasText:
artworkForName:withResourceNames:style:extraStyle:contentScale:size:
artworkForStyleAttributeKey:attributeValue:withResourceNames:style:extraStyle:contentScale:size:hasText:
artworkForStyleAttributeKey:attributeValue:withResourceNames:style:extraStyle:contentScale:size:
artworkForStyleAttributeKey:longAttributeValue:withResourceNames:style:extraStyle:contentScale:size:
artworkForFeatureID:withResourceNames:style:extraStyle:contentScale:size:
_allResourceNames
imageForName:contentScale:
_getIconStyleDescriptorForStyleAttributes:withStylesheetName:contentScale:iconStyleDescriptor:
_getIconStyleDescriptorForStyleAttributes:withStylesheetName:contentScale:iconStyleDescriptor:transitMode:
_getIconStyleDescriptorForStyleAttributes:withStylesheetName:contentScale:iconStyleDescriptor:transitMode:interactive:navMode:
imageForStyleAttributes:withStylesheetName:contentScale:size:customIconID:
imageForStyleAttributes:withStylesheetName:contentScale:size:customIconID:transparent:
imageForStyleAttributes:withStylesheetName:contentScale:size:customIconID:transparent:transitMode:
imageForStyleAttributes:withStylesheetName:contentScale:size:customIconID:transparent:transitMode:interactive:
imageForStyleAttributes:withStylesheetName:contentScale:size:customIconID:transparent:transitMode:interactive:navMode:
imageForStyleAttributes:withStylesheetName:iconText:contentScale:size:customIconID:transparent:transitMode:interactive:navMode:
_artworkForStyleAttributes:iconStyleDescriptor:contentScale:size:customIconID:transparent:
iconForStyleAttributes:withStylesheetName:contentScale:size:customIconID:transparent:transitMode:interactive:
iconForStyleAttributes:styleManager:contentScale:size:customIconID:transparent:
iconForStyleAttributes:styleManager:contentScale:size:customIconID:transparent:overrides:
newFillColorForStyleAttributes:withStylesheetName:contentScale:
newHaloColorForStyleAttributes:withStylesheetName:contentScale:
newGlyphColorForStyleAttributes:withStylesheetName:contentScale:
iconStyleForStyleAttributes:withStylesheetName:contentScale:
iconForTransitSystemType:size:contentScale:
iconForTransitType:size:contentScale:
iconForIconAttributeKey:attributeValue:size:contentScale:
artworkForStyleAttributeKey:value:style:extraStyle:contentScale:size:hasText:includeFullBleedColor:resourceNames:
artworkForName:style:extraStyle:contentScale:size:hasText:includeFullBleedColor:resourceNames:
allRegionalResourceNames
initWithIconPack:
_iconPack
_artworkForBaseImage:additionalImage:fullBleedColor:style:extraStyle:contentScale:hasText:
_newFullBleedColorForName:contentScale:
artworkForStyleAttributeKey:longValue:style:extraStyle:contentScale:size:includeFullBleedColor:resourceNames:
_createImageForName:contentScale:size:
_createImageForIconInfo:contentScale:
null
initWithResourceManager:
artworkForStyleAttributeKey:value:style:contentScale:size:
artworkForStyleAttributeKey:longValue:style:contentScale:size:
_debugTree
activate:
deactivate
populateData
printTree
logTree
serializeTree
deserializeTree:
numberWithChar:
numberWithUnsignedChar:
numberWithUnsignedInt:
numberWithLongLong:
_polygonGroups
_coastlineGroups
_minLayeringHeight
_maxLayeringHeight
_animation
_animationForPitch
_transitPolygonGroupMap
_transitNodesRouteAttributesMap
polygonGroups
initWithKey:modelTile:prepareExtrusion:styleManager:sharedResources:contentScale:device:
buildMeshesWithDevice:triangulator:prepareExtrusion:
buildCoastlinesWithStyleManager:
setTransitNodesRouteAttributes:
coastlineGroups
setScale:
minLayeringHeight
maxLayeringHeight
animation
setAnimation:
animationForPitch
setAnimationForPitch:
coastlines
coastlinesCount
polygons
polygonsCount
buildingFootprintsCount
defaultMinimumZoomLevel
mapLayerForZoomLevelRange
tileForData:downloadKey:sourceKey:
_labelFeatureMarker
labelFeatureMarker
_roadLabel
_isAwayFromRoute
_isOnRoute
_routeOffset
_displayMercatorPoint
_previousMercatorPoint
_nextMercatorPoint
_trafficCamera
_labelNavMode
_labelStyle
_isPicked
_shouldRestyleFeature
_tailDirection
_iconState
layoutWithNavContext:
isOnRoute
isAwayFromRoute
routeOffset
isRamp
shieldDisplayGroup
isStartOfRoadName
isInGuidance
intraRoadPriority
isGuidanceStepStart
isEtaFeature
isTrafficCameraFeature
isPicked
setIsPicked:
initWithTrafficCamera:previousMercatorPoint:nextMercatorPoint:
_clearLabel
expectedIconState
featureMercatorPoint
setDisplayMercatorPoint:
tailOrientation
setShouldRestyleFeature:
recreateRoadSignWithNavContext:
navState
swapExternalFeature:
isPOI
isCallout
hasLabelWithArtwork
displayMercatorPoint
nextMercatorPoint
previousMercatorPoint
label
trafficCamera
shouldRestyleFeature
tailDirection
setTailDirection:
currentIconState
labelNavMode
replaceAttributes:count:
controlPoints
composedRouteLeg
composedRouteStep
finalStepIndex
stepAtIndex:
boardStep
rideOptionsCount
attributesForTransitLine:
system
shieldDataSource
shieldColorString
attributesForTransitSystem:
artworkSourceType
iconDataSource
cartoID
hasStyleAttributes
defaultTransitType
transitVehicle
pickupDropoffType
maneuver
getNextStep
labelLanguage
zoomNames
entranceZoomNames
exitZoomNames
initWithGEOStyleAttributes:
initWithAttributes:
transitSystem
artwork
routeLineArtwork
legs
pointRange
steps
transitStep
maneuverType
decoderData
halls
stations
originStop
hasHallIndex
hallIndex
hasStationIndex
stationIndex
hasMuid
transitLine
hasLineColorString
lineColorString
stepIndex
destinationStop
significanceForEndNode
accessPoint
hasLocation
stepRange
_labelExternalObjectsModerator
_transitLineSharedResources
initWithTileSet:resourceManifestConfiguration:locale:sharedResources:taskContext:labelExternalObjectsModerator:transitLineSharedResources:
dataOverrideManager
setDataOverrideManager:
_tileRequester
_featureID
tileRequester
setTileRequester:
setFeatureID:
_selectedLineIDSequenceCounter
_selectedLineID
_maxZ
_extraInfoForPendingSourceKey:
_shouldUseDecodedTile:extraInfo:
setSelectedLineID:
canFetchTileForKey:
performDownload:isPrefetch:
downloadKeyAtX:y:z:
sourceKeyForDownloadKey:
selectedLineID
maxZ
setMaxZ:
loadKey:additionalInfo:priority:forClient:options:callbackQ:beginNetwork:callback:
reportTileLoadSuccess:
reportLoadFailure:
sharedReachability
domain
code
errorWithDomain:code:userInfo:
cancelAllForClient:
unsignedIntegerValue
numberWithUnsignedInteger:
_annotation
_annotationPresentation
_currentAnimation
_currentAnimationStartPoint
_currentAnimationStartCameraPosition
_currentAnimationEndPoint
_currentAnimationEndCameraPosition
_pendingChangeDuration
_currentHeadingAnimation
_pendingHeadingChangeDuration
_headingAnimationCompletedAngle
_headingAnimationDisplayRate
_zoomStyle
_flags
updateFramerate
_goToAnnotationAnimated:duration:isInitial:
_rotateToHeadingAnimated:duration:
pauseAnimation
resumeAnimation
observeValueForKeyPath:ofObject:change:context:
annotation
zoomStyle
setZoomStyle:
headingAnimationDisplayRate
setHeadingAnimationDisplayRate:
expectedHeadingUpdateInterval
expectedCoordinateUpdateInterval
removeObserver:forKeyPath:
addObserver:forKeyPath:options:context:
headingDegrees
accuracy
stringFromDate:
dateWithTimeIntervalSince1970:
setTimeStyle:
setDateStyle:
unsignedLongLongValue
setObject:forKeyedSubscript:
_overlay
_section
_snappedPath
_points
_pointCount
_ownsPoints
_routeStart
_routeEnd
_startDistance
_trafficSpeed
_sectionLengthScaleFactor
initWithOverlay:section:
initWithOverlay:section:routeStartIndex:routeEndIndex:
initWithOverlay:snappedPath:
hasCompletedMapMatching
isMapMatched
assignPoints:count:
assignTo:withSegment:
splitTrafficSegmentationAndAddTo:with:shouldSnap:
points
pointCount
routeStart
setRouteStart:
routeEnd
setRouteEnd:
snappedPath
section
trafficSpeed
setTrafficSpeed:
startDistance
setStartDistance:
edges
routeOffsets
routeEndIndex
routeStartIndex
stepDistanceFromPoint:toPoint:
lengthScaleFactor
_lineID
_tile
initWithOverlay:section:points:pointCount:reversePoints:transform:routeStartIndex:routeEndIndex:lineID:tile:
lineID
tile
initWithOverlay:section:points:pointCount:routeStartIndex:routeEndIndex:
_pilledTrafficLayer
_solidTrafficLayer
_casedTrafficLayer
_dataKey
_dynamicTiles
_trafficStream
_trafficData
_builtTrafficStyle
_styleAttributes
builtTrafficStyle
trafficStream
setDataKey:
dataKey
pilledTrafficLayer
solidTrafficLayer
casedTrafficLayer
initWithKey:downloadKey:data:styleManager:sharedResources:contentScale:device:
buildSkeletonMap
setupStyleAttributesWithRoadData:
buildTrafficStreamWithRoadData:trafficMeshStyle:
buildTrafficWithRoadData:trafficMeshStyle:addSegment:
buildTrafficMeshWithRoadData:withLoader:trafficMeshStyle:
builtRenderingData
dynamicTiles
trafficSkeletonTile
tileKey
lineVertices
_tracking
_animatingToCoordinate
_stale
_puckStyleAnimation
presentationCoordinate
setPresentationCoordinate:
tracking
setTracking:
initWithAnimationRunner:
destroyAnimationRunner
setMode:
mode
presentationCourse
setPresentationCourse:
showCourse
setShowCourse:
setStale:
setAnnotation:
setAnimatingToCoordinate:
enabled
setEnabled:
puck
stale
animatingToCoordinate
_memSize
_numCPUs
_isMac
_proceduralRoadAlpha
_useCheapTrafficShader
_supportsBuildingStrokes
_supports3DBuildingStrokes
_lowPerformanceDevice
_supportsCoastlineGlows
_supportsPerFragmentLighting
_supportsARMode
_calculateMemSize
_determineHardware
roadsWithSimpleLineMeshesAvailable
tileMaximumLimit:
tilePrefetchNumberOfScreens
supportsHiResRTT
canMakeSharingThumbnails
isPad
shouldDrawWhenReady
supportsHiResBuildings
shouldStyleLabelsInParallel
shouldLayoutLabelsInParallel
shouldPregenerateLabelGlyphs
tileDecodeQueueWidth
processingQueueWidth
supportsBuildingShadows
supports3DBuildings
lowPerformanceDevice
routeLineSimplificationEpsilon
memorySize
proceduralRoadAlpha
useCheapTrafficShader
supportsBuildingStrokes
supports3DBuildingStrokes
supportsCoastlineGlows
supportsPerFragmentLighting
supportsARMode
sharedPlatform
indexOfObjectIdenticalTo:
insertObject:atIndex:
_polylines
_boundingMapRegion
_observers
_containsTransit
_showTraffic
coordinate
boundingMapRegion
addObserver:
removeObserver:
setShowTraffic:
addPolyline:
removePolyline:
setSelectedPolyline:
_updateBoundingMapRegion
_updateContainsTransit
polylines
selectedPolyline
containsTransit
showTraffic
_target
_selector
_memoryNotificationEventSource
initWithTarget:selector:taskContext:
_receivedMemoryNotification
triggerMemoryNotification:
_maxCount
copyWithZone:
initWithMaxCapacity:
copyWithMaxCapacity:
firstKey
addKey:lostKey:
addKey:
_addKeyToBack:
containsKey:
capacity
listWithout:
sort:
removeKeysMatchingPredicate:
removeKey:
removeAllListNodes
removeAllKeys
isEqualToList:
allocWithZone:
_observer
_observedContexts
routeContextStateDidChange:
initWithRouteContextChangeObserver:
_anchor
_followsTerrain
_screenPointInCanvas
_lastLayoutContext
_lastCoordinate
_isUpdating
_pointsPerMeter
_displayLayer
anchorWorldPointDidChange:
destroyAnchor
pointInLayer:
pointOffsetForDistanceOffset:
_anchorWithContext:
_updateCachedPointWithContext:
layoutWithContext:
followsTerrain
setFollowsTerrain:
displayLayer
setDisplayLayer:
_curve
_locationProjector
_vehicleHeading
_pausedCount
_suspended
_tracePlaybackSpeedMultiplier
_behavior
_lastProjectedPosition
_lastProjectedLocation
setTarget:
start
_step
updateLocation:routeMatch:
updateVehicleHeading:
target
lastProjectedLocation
setLastProjectedLocation:
tracePlaybackSpeedMultiplier
setTracePlaybackSpeedMultiplier:
behavior
setBehavior:
trafficColorsCount
geoRoute
trafficColorOffsetsCount
trafficColorOffsets
trafficColors
maneuverDisplayEnabled
_actualHandle
initWithLabelMarkerHandle:
actualHandle
featureType
featureIndex
tileX
tileY
tileZ
tileStyle
tileVersion
_imageKey
initWithImageKey:
color
text
locale
type
_labelMarker
initWithLabelMarkerPtr:
labelMarkerImpl
subtext
dataIconImageKeys
iconImageKeys
transitSystems
_bounds
calloutAnchorRect
isSelectable
isSelected
isDragged
setIsDragged:
isAlongSelectedTransitLine
isVisible
isTextVisible
isOneWayArrow
isTrafficIncident
isTrafficCamera
isRouteEta
isVenueButton
isFlyoverTour
isTransit
isTransitLine
hasBusinessID
businessID
featureIDs
countFeatureIDs
venueBuildingID
venueLevelID
venueComponentID
venueFloorOrdinal
venueComponentType
positionOfInterest:zoom:
featureTile
incident
routeInfo
featureAnnotation
featureHandles
relatedTexts
relatedSubTexts
imageKeys
shields
setLabelPressed:
setIsPickedIconDrawnExternally:
calloutAnchorPointWithCanvasSize:canvasScale:snapToPixels:
screenPointToScrollRelativeToWithCanvasSize:canvasScale:
screenCollisionBounds
isLabelHitAtScreenPoint:selectableLabelsOnly:
selectionType
pickedLabelBalloonBehavior
animationID
sortKey
elementCount
debugAnchorPointString
isCluster
isLeafCluster
clusterContentBounds
clusterFeatureCount
clusterFeatureAnnotations
isClusterChild
parentClusterLabelMarker
markerWithLabelMarker:
buildingFootprints
stepCount
getStationForStop:
vehicleInfosCount
vehicleInfos
hasSignificanceForEndNode
_route
_routeMatch
_currentStepIndex
_pointsToFrame
_groupedManeuverCounts
_navCameraHeadingOverride
_additionalRoutesToFrame
_navigationCameraHeadingOverride
updateWithNewRoute:currentStepIndex:
setRouteMatch:
setCurrentStepIndex:
groupedManeuverCount
clearPointsToFrame
addPointToFrame:
enumeratePointsToFrameUsingBlock:
_notifyObserversStateChanged
setNavigationCameraHeadingOverride:
navigationCameraHeadingOverride
clearAdditionalRoutesToFrame
addRouteToFrame:divergenceCoord:convergenceCoord:
enumerateAdditionalRoutesToFrameUsingBlock:
route
currentStepIndex
groupedManeuverCounts
setGroupedManeuverCounts:
routeMatch
initWithOptions:capacity:
tileWithoutTouchingForKey:
minimumZoomLevelBoundsCamera
defaultMaximumZoomLevel
_dynamicStepHandler
dynamicStepHandler
setDynamicStepHandler:
calculateGeocentricDirectionForSunX:Y:Z:
bundleWithIdentifier:
stringByDeletingLastPathComponent
pathForResource:ofType:inDirectory:
dataWithContentsOfFile:
_matchingStyleAttributeLongValue
_anchorPointX
_anchorPointY
_atlasIndex
_iconRectHeight
_iconRectWidth
_iconRectX
_iconRectY
_matchingStyleAttributeKey
_matchingStyleAttributeValue
_quadIndex
_size
_has
hasName
setAnchorPointX:
setHasAnchorPointX:
hasAnchorPointX
setAnchorPointY:
setHasAnchorPointY:
hasAnchorPointY
setIconRectX:
setHasIconRectX:
hasIconRectX
setIconRectY:
setHasIconRectY:
hasIconRectY
setIconRectWidth:
setHasIconRectWidth:
hasIconRectWidth
setIconRectHeight:
setHasIconRectHeight:
hasIconRectHeight
setMatchingStyleAttributeKey:
setHasMatchingStyleAttributeKey:
hasMatchingStyleAttributeKey
setMatchingStyleAttributeValue:
setHasMatchingStyleAttributeValue:
hasMatchingStyleAttributeValue
setMatchingStyleAttributeLongValue:
setHasMatchingStyleAttributeLongValue:
hasMatchingStyleAttributeLongValue
size
setSize:
setHasSize:
hasSize
dictionaryRepresentation
readFrom:
writeTo:
copyTo:
mergeFrom:
setName:
atlasIndex
setAtlasIndex:
quadIndex
setQuadIndex:
anchorPointX
anchorPointY
iconRectX
iconRectY
iconRectWidth
iconRectHeight
matchingStyleAttributeKey
matchingStyleAttributeValue
matchingStyleAttributeLongValue
azimuth
initWithLocation:date:body:
dateWithTimeIntervalSinceReferenceDate:
_cullingMask
_fillMeshInfo
_fillMeshes
_fillCullingGroups
_strokeCullingGroups
_venueCullingGroups
_venueEndCapCullingGroups
_venueWallHorizontalStrokeCullingGroups
_venueWallVerticalStrokeCullingGroups
_polygonEdges
_featureIds
_boundingBox
_tileZoom
_fillRenderItemBatchers
_strokeRenderItemBatchers
_centroid
_attributeSets
_styleQueries
_selectedStyleQueries
_routeAttributes
_isFixedSize
_stylesUpToDate
_hasRouteAttributes
initWithStyleQuery:tileZoom:fixedAroundCentroid:contentScale:
maxAttributeSetsPerGroup
attributeSets
maxPoint
styleQueries
selectedStyleQueries
tileZoom
fillMeshes
commitRangesToFillRenderItemBatcher:forMeshAtIndex:cullingMask:featureIdPredicate:
commitRangesToStrokeRenderItemBatcher:forMeshAtIndex:cullingMask:featureIdPredicate:
commitRangesToVenueWallRenderItemBatcher:forMeshAtIndex:cullingMask:
commitRangesToVenueWallEndCapRenderItemBatcher:forMeshAtIndex:cullingMask:
commitRangesToHorizontalVenueWallStrokeRenderItemBatcher:forMeshAtIndex:cullingMask:
commitRangesToVerticalVenueWallStrokeRenderItemBatcher:forMeshAtIndex:cullingMask:
indexForGeoFeatureAttributes:
willAddDataWithAccessor:
didFinishAddingData
canAcceptPolygon:
hasFeatureId:
updateCachedStyles
setRouteAttributes:
clearRouteAttributes
cullingMask
isFixedSize
centroid
_atlas
_icons
clearAtlas
addAtlas:
atlasCount
atlasAtIndex:
clearIcons
addIcons:
iconsCount
iconsAtIndex:
setIdentifier:
atlas
setAtlas:
icons
setIcons:
_quadHeight
_quadWidth
_texture
texture
setTexture:
quadWidth
setQuadWidth:
quadHeight
setQuadHeight:
_panLastScreenPoint
_beganPitch
_zoomAnimation
_mbValid
appendPosition:atTime:
hasStateAtTime:
stateAtTime:
_namedLineMesh
_unnamedLineMesh
_polygonLineMesh
_venueOutlineMesh
_venueBuildingOutlineMesh
_coastLineMesh
_poiPointsMesh
_verticesPointsMesh
_junctionsPointsMesh
_overpassPointsMesh
_realTransitNodesMesh
_namedLineCount
_namedLineVertCount
_unnamedLineCount
_unnamedLineVertCount
_polygonCount
_polygonVertCount
_venueOutlinesCount
_poiCount
_vertexCount
_junctionCount
_overpassCount
_coastLineCount
_coastLineVertCount
initWithTile:
namedLineMesh
unnamedLineMesh
polygonLineMesh
venueOutlineMesh
venueBuildingOutlineMesh
coastLineMesh
poiPointsMesh
verticesPointsMesh
junctionsPointsMesh
overpassPointsMesh
realTransitNodesMesh
_fillInDebugData:
namedLineCount
namedLineVertCount
unnamedLineCount
unnamedLineVertCount
polygonCount
polygonVertCount
venueOutlinesCount
poiCount
vertexCount
junctionCount
overpassCount
coastLineCount
coastLineVertCount
transitLinks
transitLinkCount
overpasses
pointsOnRoad
junctionsCount
venueBuildings
venueBuildingsCount
venuesCount
_maneuverSign
_worldPoint
_type
_drivingSide
_isVisible
initWithGEOComposedRouteStep:
createLabelWithNavContext:artworkCache:
prepareStyleVarsWithContext:
maneuverSign
drivingSide
geoStep
maneuverRoadOrExitName
maneuverStartPointIndex
_genericShieldStyleInfo
_variants
clearVariants
addVariants:
variantsCount
variantsAtIndex:
hasGenericShieldStyleInfo
variants
setVariants:
genericShieldStyleInfo
setGenericShieldStyleInfo:
tileProviderIdentifier
tileRequester:receivedData:tileEdition:tileSet:etag:forKey:userInfo:
tileRequester:receivedError:
stringByAppendingPathComponent:
keyList
tileRequest
_shields
clearShields
addShields:
shieldsCount
shieldsAtIndex:
setShields:
_textShadow
_layers
_layersCount
_layersSpace
_textStroke
_fontColor
_centerPoints
_backgroundColor
_borderColor
_capWidthLeft
_capWidthRight
_centerOffsetX
_fontName
_fontSize
_maxDigits
_minDigits
_nonDigitFontName
_nonDigitFontSize
_paddingLeft
_paddingRight
_textMaskColor
setHasAtlasIndex:
hasAtlasIndex
setHasQuadIndex:
hasQuadIndex
setMinDigits:
setHasMinDigits:
hasMinDigits
setMaxDigits:
setHasMaxDigits:
hasMaxDigits
setTextBaseline:
setHasTextBaseline:
hasTextBaseline
setCenterOffsetX:
setHasCenterOffsetX:
hasCenterOffsetX
hasFontName
setFontSize:
setHasFontSize:
hasFontSize
setFontColor:
setHasFontColor:
hasFontColor
setTextStroke:
setHasTextStroke:
hasTextStroke
setTextShadow:
setHasTextShadow:
hasTextShadow
hasNonDigitFontName
setNonDigitFontSize:
setHasNonDigitFontSize:
hasNonDigitFontSize
centerPointsCount
centerPoints
clearCenterPoints
addCenterPoint:
centerPointAtIndex:
setCenterPoints:count:
layersCount
layers
clearLayers
addLayer:
layerAtIndex:
setLayers:count:
setBackgroundColor:
setHasBackgroundColor:
hasBackgroundColor
setBorderColor:
setHasBorderColor:
hasBorderColor
setCapWidthLeft:
setHasCapWidthLeft:
hasCapWidthLeft
setCapWidthRight:
setHasCapWidthRight:
hasCapWidthRight
setPaddingLeft:
setHasPaddingLeft:
hasPaddingLeft
setPaddingRight:
setHasPaddingRight:
hasPaddingRight
textMaskColor
setTextMaskColor:
setHasTextMaskColor:
hasTextMaskColor
lineSpacing
setLineSpacing:
setHasLineSpacing:
hasLineSpacing
setNonDigitFontColor:
setHasNonDigitFontColor:
hasNonDigitFontColor
minDigits
maxDigits
textBaseline
centerOffsetX
fontName
setFontName:
fontSize
fontColor
textStroke
textShadow
nonDigitFontName
setNonDigitFontName:
nonDigitFontSize
backgroundColor
borderColor
capWidthLeft
capWidthRight
paddingLeft
paddingRight
nonDigitFontColor
_title
_subtitle
_routeRelevance
_significance
_isNotForDisplay
_isOnSelectedRoute
_routeOffsetInMeters
_street
_crossStreet
_info
_startDate
_endDate
_lastUpdatedDate
_uniqueID
_uniqueString
hasSameIdentifier:
initWithIncidentData:worldPoint:
initWithRouteIncident:routeRelevance:
uniqueID
uniqueString
title
subtitle
isNotForDisplay
routeRelevance
setRouteRelevance:
isOnSelectedRoute
setIsOnSelectedRoute:
routeOffsetInMeters
setRouteOffsetInMeters:
street
crossStreet
info
startDate
endDate
lastUpdatedDate
significance
updateTime
endTime
initWithTimeIntervalSince1970:
startTime
incidentId
laneClosureCount
laneClosureType
stringByTrimmingCharactersInSet:
whitespaceCharacterSet
initWithBytes:length:encoding:
timerFired:
setTileProvider:
_client
_mode
_tileSelector
_keysInView
_neighborKeys
_prefetchKeys
_evaluationTimer
_lastFetchTime
_lastSelectTime
_lastHoleLogTime
_prefetchTimer
_tilesToRender
_holes
_lostTiles
_fallbackTiles
_neighborTiles
_neighborMode
_fallbackFunction
_useStableFallback
_previousTiles
_prefetchEnabled
_tilePool
_tilesSources
_optionalTileSources
_loadingProgress
_finishedLoading
_finishedLoadingOptionalLayers
_lastCameraState
_tilesChanged
_rasterizer
_debugLayer
_debugLayerKeys
_tileReserveLimit
_prefetchNumberOfScreens
_useSmallTileCache
_lastMidDisplayZoomLevel
_sortPoint
_exclusionAreas
_exclusionAreaVisible
_evaluationTarget
_prefetchTarget
dirtyTile:source:
expireTilesForTileSource:
tileSource:didFetchTile:forKey:
tileSource:didFailToDecodeTileForKey:
tileSource:didFailToLoadTileForKey:error:
tileSource:invalidateKey:
tileSource:invalidateKeys:
tileSource:invalidateTilesWithState:
invalidateTilesFromTileSource:
tileSource:keyIsNeeded:
tileSource:dirtyTilesWithinRect:level:
dirtyTilesFromTileSource:
cache:willEvictObject:forKey:
setTileExclusionAreas:
tileExclusionAreaVisible
initWithClient:resourceManifestConfiguration:locale:taskContext:tileSelectionProfile:
quiesce
requireRasterization:
rasterizer:didMakeRasterTile:forKey:
cancelLoadingTiles
tileStatusFromList:canRender:canNotRender:
describeTilesFromList:output:
describeTilesFromList:outputtoDict:
populateDebugNodeForTiles:tiles:
populateDebugNodeForKeys:keys:
foreachOptionalLayer:
tileForKey:
retireRenderTiles:
retireNeighborTiles:
prepareTileForRendering:
releaseNeighborTileForRendering:
releaseTileForRendering:
rescindTileForRendering:
inFailedState:
hasRequiredTileData:
hasAllTileData:
canRenderTile:
releaseFallbackTileForRendering:
tileMatters:
changeTileForKey:toState:withMetadata:withTile:forLayer:
evaluateNeighborTileForRendering:
evaluateSelectedTileForRendering:
tileSourcesDidChange
invalidateRasterizedTiles
setTileSource:forMapLayer:optional:
removeTileSourceForMapLayer:
sourceForMapLayer:
sourceForLayer:
layerForSource:
_resizeCache
configureTileSelection
_fetchAvailableTiles:
cancelLoadForMapTile:
_prefetchTiles
releaseBestAccuracyFallbackTilesForTile:context:previousTiles:
rescindOverlappedTiles
bestAccuracyFallbackForHoles:context:previousTiles:
_fillHoles:context:
selectTiles:needRasterization:
_updateTimers:
_disableTimers
tile:hasBecomeTerminalSince:
timeTileLastUpdatedHoleStatus:
describeReasonForTileBeingHole:atTime:
logPersistentHoles
updateWithContext:selectionScale:
_dirtyTile:source:layer:
client
setClient:
fallbackFunction
setFallbackFunction:
useStableFallback
setUseStableFallback:
isPrefetchEnabled
setPrefetchEnabled:
keysInView
neighborKeys
tilesToRender
neighborTiles
loadingProgress
debugLayer
setDebugLayer:
debugLayerKeys
isFinishedLoading
isFinishedLoadingOptionalLayers
hasFailedTile
setSortPoint:
mapLayerPosition
minusSet:
initWithKey:modelTile:
metroArea
initWithTileSet:resourceManifestConfiguration:locale:sharedResources:taskContext:
maximumZoomLevelBoundsCamera
minimumDownloadZoomLevel
maximumDownloadZoomLevel
zEquivalenceClass
_tiles
_states
_stateDates
_stateMetas
_localBounds
_rasterized
_needsRasterization
_labelMapTile
setRasterized:
needsRasterization
clear
tileForLayer:
tileStateForLayer:
timeTileEnteredStateForLayer:
_setTile:state:metadata:forLayer:timestamp:
tileCountForOnline:offline:
setTile:state:metadata:forLayer:
localBoundsForLayer:
rasterized
setNeedsRasterization:
labelMapTile
setLabelMapTile:
_homeQueue
initWithHomeQueue:
renderRequest:completion:
_renderRequest:completion:
_pendingLoads
_decoding
_failedTiles
loadingTiles
_recentError
_tileLoaderClientIdentifier
_preloadOnly
_requireWiFi
_originOverridden
_originRequested
tileLoader
initWithResourceManifestConfiguration:locale:sharedResources:taskContext:
clearCaches
foreachTileInPool:
maximumZoomLevelWithoutOverride
nativeKeyForRenderKey:
sourceKeyForRenderKey:
downloadKeyForSourceKey:
_fetchedTile:
tileForSourceKey:renderKey:
fetchTileForKey:sourceKey:isPrefetch:
fetchTileForKey:isPrefetch:
cancelFetchForKey:sourceKey:
cancelFetchForKey:
cancelDownload:
cancelAllDownloads
_shouldDecodeTile:
failedToDecodeSourceKey:
fetchedTile:forKey:
didLoadTile:forKey:
decodeData:downloadKey:sourceKey:origin:
populateVisibleTileSets:withTiles:
tileAvailabilityChanged:
_failedToLoadSourceKey:downloadKey:error:
didFetchData:forKey:info:
willGoToNetwork
didFinishWithNetwork
didFailToLoadTileKey:error:
forceDownload
requestOrigin:
preloadOnly
setPreloadOnly:
requireWiFi
setRequireWiFi:
originRequested
originOverridden
userInfo
cancelKey:forClient:
loadKey:priority:forClient:options:qos:callbackQ:beginNetwork:callback:
registerTileDecoder:
registerTileLoader:
setServerProxyClass:
initWithMapType:
removeObjectForKey:
enumerateKeysAndObjectsUsingBlock:
_genericTextureCache
_gglGenericRasterTextureCache
_recentNoDataSourceKeys
dataForGenericTileType:configuration:
initWithStyleAttributes:
transitSystemInfoForFeatureID:
transitLinkLabelAnnotationCount
transitLinkLabelAnnotations
_transitSupport
_routeContext
initWithRouteContext:transitSupport:
_routeLine
routeLineDidUpdateSections:
initWithTransitSupport:andRouteLine:
timeIntervalSinceReferenceDate
_textDropShadowOffsets
_textColor
_textDropShadowColor
_textDropShadowSize
_textStrokeColor
_textStrokeSize
setHasStyle:
hasStyle
textColor
setTextColor:
setHasTextColor:
hasTextColor
setTextStrokeSize:
setHasTextStrokeSize:
hasTextStrokeSize
setTextStrokeColor:
setHasTextStrokeColor:
hasTextStrokeColor
textDropShadowOffsetsCount
textDropShadowOffsets
clearTextDropShadowOffsets
addTextDropShadowOffset:
textDropShadowOffsetAtIndex:
setTextDropShadowOffsets:count:
setTextDropShadowSize:
setHasTextDropShadowSize:
hasTextDropShadowSize
textDropShadowColor
setTextDropShadowColor:
setHasTextDropShadowColor:
hasTextDropShadowColor
textStrokeSize
textStrokeColor
textDropShadowSize
_line
_frame
_framesetter
_signMetrics
_textMetrics
_generatedMetrics
_signColoring
_glyph
initWithString:signMetrics:textMetrics:signColoring:glyph:
offsetPixelForPixel:
localSignBounds
_approachingRouteOffset
_approachingDistanceInMeters
_isAboveSpeedThreshold
_shouldUpdateStyle
_speedLimit
_speedLimitText
_uniqueIdentifier
_cameraPriority
_groupIdentifier
_speedThreshold
initWithTrafficCamera:
setIsAboveSpeedThreshold:
updateLabelStateForRouteUserOffset:
isAheadButNotApproaching
isApproaching
isBehind
isSpeedLimitCamera
isGrouped
uniqueIdentifier
labelState
setLabelState:
approachingDistanceInMeters
approachingRouteOffset
setApproachingRouteOffset:
speedThreshold
isAboveSpeedThreshold
shouldUpdateStyle
setShouldUpdateStyle:
speedLimitText
cameraPriority
groupIdentifier
routeCoordinate
hasCameraPriority
hasSpeedLimitText
highlightDistance
hasSpeedThreshold
hasGroupIdentifier
raise:format:
_etaText
_glyphType
_tollCurrencyType
initWithEtaText:
initWithEtaText:glyphType:tollCurrencyType:
etaText
glyphType
tollCurrencyType
_etaDescription
initWithComposedRoute:etaText:
initWithComposedRoute:etaDescription:
hasRouteEta
etaDescription
setEtaDescription:
_divergenceCoordinate
_convergenceCoordinate
_etaComparisonToMain
initWithComposedRoute:etaText:divergenceRouteCoordinate:convergenceRouteCoordinate:
initWithComposedRoute:etaDescription:divergenceRouteCoordinate:convergenceRouteCoordinate:
divergenceCoordinate
convergenceCoordinate
etaComparisionToMain
setEtaComparisionToMain:
_routeInfo
_useType
_inspectedLegIndex
_inspectedStepIndex
_currentLegIndex
_snappingToTransitLines
_puckLocation
_puckRadius
_puckSnappedStopID
_accessPointEntryName
_accessPointExitName
_hasContextChangedForLabels
_labelObservers
_hasContextChangedForRouteLine
_routeLineObservers
_hasContextChangedForAlternateRouteLines
_alternateRouteLineObservers
_alternateRoutes
_shareSections
totalRouteCount
initWithComposedRoute:useType:
initWithRouteInfo:useType:
_hashTableForObserverType:
_setHasContextChangedForObserverType:withValue:
addObserver:withType:
removeObserver:withType:
resetNotificationsForObserverType:
setInspectedLegIndex:
setInspectedStepIndex:
setPuckRadius:
setPuckSnappedStopID:
setAlternateRoutes:
addShareSections:shareCount:
forEachSectionWithShareCount:dothis:
useType
setRouteOffset:
currentLegIndex
setCurrentLegIndex:
snappingToTransitLines
setSnappingToTransitLines:
inspectedLegIndex
inspectedStepIndex
puckLocation
setPuckLocation:
puckRadius
puckSnappedStopID
setLocale:
accessPointEntryName
setAccessPointEntryName:
accessPointExitName
setAccessPointExitName:
alternateRoutes
isEqualToSet:
original
initWithString:
length
characterAtIndex:
getCharacters:range:
substringFromIndex:
substringToIndex:
substringWithRange:
compare:options:range:locale:
isEqualToString:
initialize
stringWithString:
member:
_vk_newWeakSet
_vk_internedString
availableLocaleIdentifiers
_vk_indexForLocale:
initWithCharacters:length:
rangeOfCharacterFromSet:
transitPointsOnRoadCount
transitPointsOnRoad
_skewedShaderMatrix
_skewedViewConstantData
skewedViewConstantData
_feature
_dataSource
_initWithCoordinate:isInjected:
initWithCoordinate:
_initInternalFeatureWithCoordinate:
setDataSource:
dataSource
setBusinessID:
setVenueID:
setVenueBuildingID:
setVenueLevelID:
setVenueComponentID:
setVenueFloorOrdinal:
setStyleAttributes:
setMinZoom:
setMaxZoom:
setSortKey:
setTextDisplayMode:
setText:locale:
setAnnotationText:locale:
setPlaceholderIconWithSize:anchorPoint:isRound:
feature
isInjectedFeature
_resolvedRenderTargetFormat
_canMakeImage
_recreateRenderTarget
_allowAlpha
_renderSource
_format
_colorBuffer
_depthStencilBuffer
_useMultisampling
_msaaResolveBuffer
willDrawView
didDrawView
convertPoint:toLayer:
debugConsoleForId:
averageFPS
createRenderTarget
destroyRenderTarget
hasRenderTarget
renderWithTimestamp:completion:
bitmapData:
renderSource
setRenderSource:
multiSample
format
renderer
sizeInPixels
finalRenderTarget
finalSurface
initWithSize:scale:useMultisampling:device:
imageTexture
allowAlpha
setAllowAlpha:
resolvedRenderTargetFormat
_region
_requestKey
region
setRegion:
setManifestConfiguration:
_globeCanvas
_didBecomeFullyDrawn
_hasFailedTiles
_completion
_didSoftDealloc
imageCanvasWillBecomeFullyDrawn:
imageCanvasDidBecomeFullyDrawn:hasFailedTiles:
initWithSize:scale:homeQueue:
initWithSize:scale:homeQueue:manifestConfiguration:locale:
softDealloc
activeCanvas
_transferSettingsFrom:to:
lookAtX:y:z:
setCenterCoordinate:altitude:yaw:pitch:
renderSnapshot:
cancel
cancelFlushingTileDecodes:
defaultConfiguration
supportsSharingThumbnails
taskContext
didLayout
loadScene
cancelLoad
renderSceneWithEngine:completion:
_tileSourceToMatch
_overlayBoundingMapRegionChanged:
matchTilesFromSource:
_roadTile
_tileForOverlay
setTile:forOverlay:
tileForOverlay:
roadTile
setRoadTile:
removeObserver:name:object:
_keyToKeysMap
_scenariosToDownload
loadKey:priority:forClient:options:callbackQ:beginNetwork:callback:
regionalResourceKeysForTileKey:scale:scenarios:
resourceInfo
_resourceInfo
attributions
attributionsCount
largestRegionalResourceZoomLevelContainingTileKey:
hasRegionalResourcesForTileKey:
setWithObject:
setWithObjects:
_building
_roadTileSource
_dynamicTileSource
_recentTrafficTiles
_incompleteTiles
_buildTrafficTexture
setRoadTileSource:
initWithSkeletonTileSet:dynamicTileSet:resourceManifestConfiguration:locale:sharedResources:taskContext:origin:
_constructTile:forKey:
_acceptPendingTilesIfCompletedWithTile:
_failTilesForFailedDynamicTile:
_acceptTileIfComplete:forKey:
shouldObeyHybridUnavailableRegions
canFetchTrafficTileForKey:
_notifyRoadsTileSourceOfErrorForSourceKey:
forceExpireTile:
roadTileSource
dynamicTileSource
pathForResource:ofType:
_presentationCoordinate
_minimumZoomLevel
_makeFacades
_prepareExtrusion
makeFacades
setMakeFacades:
decodeTile:forKey:
initWithTileData:localizationData:tileKey:
getTileData:
fakeLoadTile
performSelector:withObject:afterDelay:
tileRequesterFinished:
tileSetForKey:
initWithDomain:code:userInfo:
pathWithComponents:
initWithObjects:
lastObject
_urlForTileKey:
initWithBytes:length:
rangeOfString:
baseURLStringForTileKey:
modernManager
removeItemAtPath:error:
setDiskCacheLocation:
useLocalLoader
modernLoader
_mapView
_running
_loopCounter
_resultCount
_results
_outputHeader
initWithMapView:outputHeader:
loop
abort
tick:
runTest:step:
printResults
runWithMapView:outputHeader:
renderQueueForTimestamp:
initWithEngine:
insertSublayer:atIndex:
sublayers
_tileSet
_downloadTemplate
_minimumDownloadZoomLevel
_maximumDownloadZoomLevel
_expirationTimer
_expiredTilePool
_zoomLevelRange
_timerTarget
setTileSet:
expires
_expirationInterval
_nextTileExpirationDate
_scheduleTileExpirationTimer:forceUpdate:
_expireTilesList:
forceExpireTiles
expireTiles
tileSet
tileKeyAtIndex:
addTileKey:
tileKeysCount
version
expireTilesWithPredicate:
expireTiles:
setTileSource:
_tileSource
tileSource
largestZoomLevelLEQ:inRect:
timeToLiveSeconds
minimumZoomLevelInRect:
_matchToRoads
_hasNewRoadMatches
_boundsUnitsPerMeter
_metersPerPoint
_boundsInWorldUnit
_simplificationEpsilonPoints
_viewUnitsPerPoint
_sections
_userLocationSection
_userLocationIndex
_userLocation
_lastTrafficTimeStamp
_retainedTiles
_renderRegion
_maneuverArrowCoordinates
_builtViewUnitsPerPoint
initWithPolylineOverlay:
_updateTilesCovered:
buildRouteLine:tiles:viewUnitsPerPoint:force:selected:isNavMode:
generateArrowsForManeuverDisplayMode:routeLineWidth:
createMeshIfNecessary:
isTrafficUpToDate
isTrafficUptoDate:
needsUpdateForViewingScale:
splitRouteLineAtAnnotation:
forEachSection:
_updateBounds:
maneuverPoints
inverseManeuverTransform
maneuverTransform
boundsUnitsPerMeter
sections
overlay
hasNewRoadMatches
setHasNewRoadMatches:
simplificationEpsilonPoints
setSimplificationEpsilonPoints:
observer
setObserver:
maneuverEndPointIndex
isEqualToData:
routeID
routeOffsetB
mapEdgeOffset
mapEdge
routeOffsetA
supportsSnapping
_imageRef
_collisionRect
_anchorPoint
_hasCollisionRect
_hasAnchorPoint
_usedAsTextureAndImage
_isTextureReady
_isImageReady
_imageHash
initWithCGImage:scale:usedAsTextureAndImage:
initWithCGImage:scale:
initWithData:scale:usedAsTextureAndImage:
initWithData:scale:
initWithName:scale:resourceManager:
prepareTexture
_prepareImage
collisionRect
setAnchorPoint:
setCollisionRect:
compareTo:
fileExistsAtPath:
_globeCameraController
_lineContainer
_globeStyleSheet
_debugSettings
_globeAdapter
_overlayContainer
_flyoverLibrary
_initialized
_canShowFlyover
_isDead
_isLoading
_isDownloading
_coarseLoading
_tourIsDownloading
_sceneDidLoadCallback
_artworkIsReadyBlock
_arCameraController
_arRoadDisabledState
_overlayCache
lineContainerNeedsDisplay:
useNewRenderPath
arCameraController
setNightMode:
stopLoading
initWithMapEngine:inBackground:manifestConfiguration:
_reloadStylesheet
_centerScreenPoint
updateCameraFromGlobe
createFlyoverPreTourAnimation:duration:
startFlyoverAnimation:animateToStart:labelChanged:stateChange:
startFlyoverTourAnimation:animateToStart:labelChanged:stateChange:
stopAnimations
convertPointToCoordinateOnSphere:
_update
_viewTransformSetup
_updateDebugSettings
waitForLoading
setupMapScene
enableTileAnalytics
disableTileAnalytics
_setDefaultFov:
overlayContainer
flyoverAvailable
sceneDidLoadCallback
setSceneDidLoadCallback:
globeCameraController
captureTileStateForLoadCoverage:oldCoverage:durationInLastState:
captureTileStateForGridCoverage:oldCoverage:durationInLastState:
cameraPathAtIndex:
setCameraPaths:count:
isMainThread
_vkBundle
_localNameForResourceName:
dataForResourceWithName:
pathForResourceWithName:
isDevResourceWithName:
isDevResourceWithName:fallbackBundle:fallbackNameHandler:
pathForResourceWithName:fallbackBundle:fallbackNameHandler:
dataForResourceWithName:fallbackBundle:fallbackNameHandler:
_visibleRect
_snappingRect
_rectsForSnapping
_snappedTileKeys
initForKeysInView:tiles:allowsSnapping:
isEquivalentToNewRegion:
rectsForSnapping
tiles
visibleRect
snappingRect
_composedRoute
_isReadyForSnapping
_routeRibbon
_routeRibbonObserver
_trafficTimeStamp
_trafficSegments
_selected
composedRouteUpdatedSnappedPaths:
composedRouteUpdatedTraffic:
composedRoute:selectedSections:deselectedSections:
composedRoute:changedSelectedRideInClusteredLeg:fromIndex:toIndex:
initWithComposedRoute:
_setNeedsLayout
setRouteRibbon:
sectionRangeForBounds:
_updateTraffic
clearSnappedPathsForObserver:
getPathsForRenderRegion:shouldSnapToRoads:verifySnapping:observer:
isSnappingForSceneTiles
composedRoute
trafficTimeStamp
routeRibbon
routeRibbonObserver
setRouteRibbonObserver:
selected
setSelected:
isSnapping
sortUsingComparator:
pathsForRenderRegion:inOverlay:excludedSegments:
getSnappedPathsForVisibleRect:rectsToSnap:rectsToSnapCount:observer:
pathsForRenderRegion:inOverlay:
pathsForRenderRegion:inOverlay:shouldSnapToTransit:verifySnapping:
distance
vkBounds
pathsForRenderRegion:inOverlay:shouldSnapToTransit:
unsnappedPathsInOverlay:
_getEndPoints:rect:result:
transitVertices
_validateSnappedPaths:snappedTileBounds:overlay:
_pinching
_pinchStartFocusPoint
_panning
_panStartFocusPoint
_panStartScreenPoint
_rotating
_rotateStartFocusPoint
_lastRotation
_shouldRotationRubberband
_pitching
_pitchStartFocusPoint
_pitchStartScreenPoint
_notifyCameraStateChanges
initWithCameraController:
isPitching
isPinching
isPanning
isRotating
_routeLineSplitAnnotation
_polylinesToRoutes
_routeSplit
setNeedsLayoutForPolyline:
polyline:selectedSections:deselectedSections:
initWithGlobeView:stylesheet:
addLine:
removeLine:
clearLineSelection
setSelected:selected:
_updateRouteSplit
_recreateLinesIfNeeded
halfWidthForLine:styleZ:
standardUserDefaults
_highlightFeaturesOnly
_paintMapTiles
_paintSelectedMapTiles
_paintTiles
_paintRoadBoundaries
_paintRoadTiles
_paintPointTiles
_paintPolygonTiles
_paintVertices
_paintJunctions
_paintCoastlines
_paintBuildingNormals
_disableRoute
_labelHighlighting
_transitHighlighting
_labelCollisionEnabled
_labelFlipAlternatePositionsEnable
_labelTileDecodeEnabled
_disableBackgroundLabelLayout
_labelAllowDefaultStyle
_labelUpdateMapTilesContinuously
_labelAutoOffsetRoadText
_paintRouteDebugMarkers
_dontMatchRouteLine
_dontMapMatchToSnappedRouteLine
_highlightRouteLineSnappingStatus
_dontVerifyRouteToTransitSnapping
_showManeuverPoints
_paintRoadSigns
_paintLabelBounds
_paintLabelRoadFeatures
_paintLabelCollisionLines
_paintLabelCounts
_paintTransitCounts
_hideDirectionalArrows
_hideClientPositionedFeatures
_hideServerPositionedRoadFeatures
_hideServerPositionedTransitFeatures
_keepTooCloseServerPositionedTransitFeatures
_labelHideLineFeatures
_labelHidePointFeatures
_paintTrafficSkeleton
_loadGreenTraffic
_showTrafficCasing
_texturedTrafficCasing
_prioritizeTrafficSkeleton
_paintRoadsStitchedByName
_realisticWireframeEnabled
_altitudePauseLoading
_altitudeFreezeViewNode
_altitudeTexturePaging
_altitudeShowTileBounds
_altitudeHighResSatellite
_altitudeMipmapSatellite
_altitudeMipmapFlyover
_altitudeMipmapObjectTree
_altitudeShowNightLight
_altitudePrintRenderedTilesStat
_altitudeDisableC3mTextureLoading
_altitudeShowTriggerbounds
_disableTransitLineDrawing
_disableTransitLineMerging
_disableTransitLineGroupMerging
_dumpTransitTileContents
_dumpRouteAndPath
_disableIntraLinkTransitLineCrossings
_useMetalRenderer
_showNavCameraDebugConsole
_showNavCameraDebugConsoleAttributes
_showNavCameraDebugLegend
_ribbonCrispness
_altitudeLodScale
_altitudeTileQualityThreshold
_altitudeHideMeshTime
_altitudeFadeSpeed
_altitudeTourSpeedup
_altitudeTourSpeedupFactor
_altitudeProfilingEnabled
_altitudeProfilingType
_altitudeProfilingZones
_altitudeTelemetryURL
_isInstalledInLockScreen
_enableLoggingInLockScreen
_useBuildingShadowTexture
_layoutContinuously
_enableSignPostEvents
_useTransactionManager
_debugStyleAnimations
_renderInSeparateThread
_forceHiResBuildings
_readLandmarksFromDisk
_drawPerformanceHUD
_expandedPerformanceHUD
_immediateRasterTextureLoading
_holdOntoStyleAttributes
_footprintsToSuppress
_suppressFootprints
_customTiles
_drawDebugTransit
_labelTransitLineCollisionEnabled
_labelHighlightingVerboseLoggingEnabled
_shouldUseTestTileLoader
_constantlyChangeTileGroup
_disableRoadSignLimit
_enableShieldsOnRouteLine
_overrideVenueCameraSettings
_venueBoundsPaddingForCamera
_venueZoomOutFalloff
_enableTrafficCameraLabelDebugging
_enableEtaLabelDebugging
_enableRouteShareSectionDebugging
_enableEtaLabelRectDebugging
_etaLabelDebugScore
_etaLabelDebugOrientationMask
_etaLabelsAvoidScreenEdges
_enableRouteIntersectionTesting
_forceEtaLabelPlacement
_traceEtaDebugLog
_trafficCameraLabelSelfCollide
_trafficCameraLabelCollideOutExternal
_trafficCameraLabelCollideWithExternal
_arOverrideDefaults
_arVirtualPlaneHeight
_arDefaultHeight
_arSwipeGesture
_arPinchGesture
_arRenderAtNativeRate
_customLandmarks
_paintPoiTiles
_paintLandcoverTiles
_paintVenues
_labelCollideContinuously
_useStaticTrafficFeed
_newRouteTraffic
_showNavCameraDebugConsoleProperties
_showNavCameraDebugOverlay
_disableStylesheetAnimations
_trackingCameraZoomFurther
_enableARDebugConsole
_enableAROmniTileLoader
_debugStyleManager
_landmark2DStrokeSettings
shouldDrawDebug
setDrawPerformanceHUD:
setExpandedPerformanceHUD:
overlaysShouldDrawDebug
setHideDirectionalArrows:
setDisableBackgroundLabelLayout:
setHideClientPositionedFeatures:
setHideServerPositionedRoadFeatures:
setHideServerPositionedTransitFeatures:
setKeepTooCloseServerPositionedTransitFeatures:
setEnableSignPostEvents:
setIsInstalledInLockScreen:
setAltitudeTelemetryURL:
setAltitudeProfilingEnabled:
setHighlightRouteLineSnappingStatus:
numPerformanceGroups
nameForPerformanceGroup:
showPerformanceGroup:
hidePerformanceGroup:
isPerformanceGroupShown:
setCustomLandmarkFromDisk:tileKey:
setCustomLandmarkFromDisk:tileKey:styleKey:styleValue:
setCustomLandmarkFromData:tileKey:texturePath:
customLandmarkObjectGroupsForKey:
addFootprintToSuppress:
clearFootprintsToSuppress
setAltitudeDisableC3mTextureLoading:
setUseMetalRenderer:
setConstantlyChangeTileGroup:
setArRenderAtNativeRate:
highlightFeaturesOnly
setHighlightFeaturesOnly:
paintMapTiles
setPaintMapTiles:
paintSelectedMapTiles
setPaintSelectedMapTiles:
paintTiles
setPaintTiles:
paintRoadBoundaries
setPaintRoadBoundaries:
paintRoadTiles
setPaintRoadTiles:
paintPoiTiles
setPaintPoiTiles:
paintPointTiles
setPaintPointTiles:
paintPolygonTiles
setPaintPolygonTiles:
paintLandcoverTiles
setPaintLandcoverTiles:
paintVenues
setPaintVenues:
paintVertices
setPaintVertices:
paintJunctions
setPaintJunctions:
paintCoastlines
setPaintCoastlines:
paintBuildingNormals
setPaintBuildingNormals:
disableRoute
setDisableRoute:
labelHighlighting
setLabelHighlighting:
transitHighlighting
setTransitHighlighting:
labelCollisionEnabled
setLabelCollisionEnabled:
labelCollideContinuously
setLabelCollideContinuously:
labelFlipAlternatePositionsEnable
setLabelFlipAlternatePositionsEnable:
labelTileDecodeEnabled
setLabelTileDecodeEnabled:
disableBackgroundLabelLayout
labelAllowDefaultStyle
setLabelAllowDefaultStyle:
labelUpdateMapTilesContinuously
setLabelUpdateMapTilesContinuously:
labelAutoOffsetRoadText
setLabelAutoOffsetRoadText:
paintRouteDebugMarkers
setPaintRouteDebugMarkers:
dontMatchRouteLine
setDontMatchRouteLine:
dontMapMatchToSnappedRouteLine
setDontMapMatchToSnappedRouteLine:
highlightRouteLineSnappingStatus
dontVerifyRouteToTransitSnapping
setDontVerifyRouteToTransitSnapping:
showManeuverPoints
setShowManeuverPoints:
paintRoadSigns
setPaintRoadSigns:
paintLabelBounds
setPaintLabelBounds:
paintLabelRoadFeatures
setPaintLabelRoadFeatures:
paintLabelCollisionLines
setPaintLabelCollisionLines:
paintLabelCounts
setPaintLabelCounts:
paintTransitCounts
setPaintTransitCounts:
hideDirectionalArrows
hideClientPositionedFeatures
hideServerPositionedRoadFeatures
hideServerPositionedTransitFeatures
keepTooCloseServerPositionedTransitFeatures
labelHideLineFeatures
setLabelHideLineFeatures:
labelHidePointFeatures
setLabelHidePointFeatures:
paintTrafficSkeleton
setPaintTrafficSkeleton:
loadGreenTraffic
setLoadGreenTraffic:
useStaticTrafficFeed
setUseStaticTrafficFeed:
newRouteTraffic
setNewRouteTraffic:
showTrafficCasing
setShowTrafficCasing:
texturedTrafficCasing
setTexturedTrafficCasing:
prioritizeTrafficSkeleton
setPrioritizeTrafficSkeleton:
paintRoadsStitchedByName
setPaintRoadsStitchedByName:
realisticWireframeEnabled
setRealisticWireframeEnabled:
altitudePauseLoading
setAltitudePauseLoading:
altitudeFreezeViewNode
setAltitudeFreezeViewNode:
altitudeTexturePaging
setAltitudeTexturePaging:
altitudeShowTileBounds
setAltitudeShowTileBounds:
altitudeMipmapSatellite
setAltitudeMipmapSatellite:
altitudeMipmapFlyover
setAltitudeMipmapFlyover:
altitudeMipmapObjectTree
setAltitudeMipmapObjectTree:
altitudeShowNightLight
setAltitudeShowNightLight:
altitudePrintRenderedTilesStat
setAltitudePrintRenderedTilesStat:
altitudeDisableC3mTextureLoading
altitudeShowTriggerBounds
setAltitudeShowTriggerBounds:
altitudeHighResSatellite
setAltitudeHighResSatellite:
disableTransitLineDrawing
setDisableTransitLineDrawing:
disableTransitLineMerging
setDisableTransitLineMerging:
disableTransitLineGroupMerging
setDisableTransitLineGroupMerging:
dumpTransitTileContents
setDumpTransitTileContents:
dumpRouteAndPath
setDumpRouteAndPath:
disableIntraLinkTransitLineCrossings
setDisableIntraLinkTransitLineCrossings:
useMetalRenderer
showNavCameraDebugConsole
setShowNavCameraDebugConsole:
showNavCameraDebugConsoleAttributes
setShowNavCameraDebugConsoleAttributes:
showNavCameraDebugConsoleProperties
setShowNavCameraDebugConsoleProperties:
showNavCameraDebugLegend
setShowNavCameraDebugLegend:
showNavCameraDebugOverlay
setShowNavCameraDebugOverlay:
ribbonCrispness
setRibbonCrispness:
overrideVenueCameraSettings
setOverrideVenueCameraSettings:
venueBoundsPaddingForCamera
setVenueBoundsPaddingForCamera:
venueZoomOutFalloff
setVenueZoomOutFalloff:
altitudeLodScale
setAltitudeLodScale:
altitudeTileQualityThreshold
setAltitudeTileQualityThreshold:
altitudeHideMeshTime
setAltitudeHideMeshTime:
altitudeFadeSpeed
setAltitudeFadeSpeed:
altitudeTourSpeedup
setAltitudeTourSpeedup:
altitudeTourSpeedupFactor
setAltitudeTourSpeedupFactor:
altitudeProfilingEnabled
altitudeProfilingType
setAltitudeProfilingType:
altitudeProfilingZones
setAltitudeProfilingZones:
altitudeTelemetryURL
isInstalledInLockScreen
enableLoggingInLockScreen
setEnableLoggingInLockScreen:
useBuildingShadowTexture
setUseBuildingShadowTexture:
layoutContinuously
setLayoutContinuously:
enableSignPostEvents
useTransactionManager
setUseTransactionManager:
debugStyleAnimations
setDebugStyleAnimations:
disableStylesheetAnimations
setDisableStylesheetAnimations:
renderInSeparateThread
setRenderInSeparateThread:
forceHiResBuildings
setForceHiResBuildings:
readLandmarksFromDisk
setReadLandmarksFromDisk:
drawPerformanceHUD
expandedPerformanceHUD
immediateRasterTextureLoading
setImmediateRasterTextureLoading:
trackingCameraZoomFurther
setTrackingCameraZoomFurther:
holdOntoStyleAttributes
setHoldOntoStyleAttributes:
drawDebugTransit
setDrawDebugTransit:
labelTransitLineCollisionEnabled
setLabelTransitLineCollisionEnabled:
labelHighlightingVerboseLoggingEnabled
setLabelHighlightingVerboseLoggingEnabled:
footprintsToSuppress
setFootprintsToSuppress:
suppressFootprints
setSuppressFootprints:
landmark2DStrokeSettings
setLandmark2DStrokeSettings:
debugStyleManager
setDebugStyleManager:
shouldUseTestTileLoader
setShouldUseTestTileLoader:
constantlyChangeTileGroup
disableRoadSignLimit
setDisableRoadSignLimit:
enableShieldsOnRouteLine
setEnableShieldsOnRouteLine:
enableTrafficCameraLabelDebugging
setEnableTrafficCameraLabelDebugging:
enableEtaLabelDebugging
setEnableEtaLabelDebugging:
enableRouteShareSectionDebugging
setEnableRouteShareSectionDebugging:
enableEtaLabelRectDebugging
setEnableEtaLabelRectDebugging:
etaLabelDebugScore
setEtaLabelDebugScore:
etaLabelDebugOrientationMask
setEtaLabelDebugOrientationMask:
enableRouteIntersectionTesting
setEnableRouteIntersectionTesting:
etaLabelsAvoidScreenEdges
setEtaLabelsAvoidScreenEdges:
forceEtaLabelPlacement
setForceEtaLabelPlacement:
traceEtaDebugLog
setTraceEtaDebugLog:
trafficCameraLabelSelfCollide
setTrafficCameraLabelSelfCollide:
trafficCameraLabelCollideOutExternal
setTrafficCameraLabelCollideOutExternal:
trafficCameraLabelCollideWithExternal
setTrafficCameraLabelCollideWithExternal:
enableARDebugConsole
setEnableARDebugConsole:
enableAROmniTileLoader
setEnableAROmniTileLoader:
arOverrideDefaults
setArOverrideDefaults:
arVirtualPlaneHeight
setArVirtualPlaneHeight:
arDefaultHeight
setArDefaultHeight:
arSwipeGesture
setArSwipeGesture:
arPinchGesture
setArPinchGesture:
arRenderAtNativeRate
setBool:forKey:
synchronize
initWithFormat:arguments:
sharedSettings
boolForKey:
_vertexIndexA
_vertexIndexB
_junctionA
_junctionB
_navJunctionA
_simplifiedPoints
_direction
_isRoadLabelUnique
_isStartOfRoadName
_isInGuidance
_isGuidanceStepStart
_areLabelsDisabled
_routeCrossProduct
_intraRoadPriority
_length
_shieldDisplayGroup
_shieldGroup
_roadSign
_roadShield
_isVisibilityCached
_cachedSignVisibility
_cachedShieldVisibility
_hasVisibleSigns
_hasVisibleShields
_suppressRoadSignIfShieldPresent
initWithRoadEdge:navJunctionA:routeOffset:tile:
cstrName
clearRoadSign
_updateWithNavContext:threshold:
_updateWithNavContext:
roadClass
isOnewayToJunction
getRoadEdge:
matchesRoadEdge:
matchesRoad:
hasVisibleSigns
hasVisibleShields
hasShield
shieldGroup
labelWithType:
_findRoadOffsetForDistanceToRay:rayStart:rayVector:roadGraph:
_findLabelAnchorPoint:isShieldLabel:desiredOffsetDistance:maxOffsetDistance:minJunctionDistance:roadGraph:
createLabelWithNavContext:isShieldLabel:desiredOffsetDistance:maxOffsetDistance:minJunctionDistance:minRouteDistance:roadGraph:artworkCache:
recreateRoadSignWithAlignment:navContext:artworkCache:
appendSimplifiedWorldRoadPoints:
_worldRoadPoints:
_worldPointForRoadOffset:worldPoint:
roadSignAlignment
_newLabelWithNavContext:isShieldLabel:worldPoint:alignment:artworkCache:
setDirection:
setIsOnRoute:
setIsStartOfRoadName:
setIsInGuidance:
setIsGuidanceStepStart:
routeCrossProduct
setRouteCrossProduct:
junctionB
setIntraRoadPriority:
areLabelsDisabled
setAreLabelsDisabled:
isRoadLabelUnique
setIsRoadLabelUnique:
navJunctionA
suppressRoadSignIfShieldPresent
isFreeway
_drawRoadSigns
_currentLocationText
_stepIndex
_checkOnRouteLabelsAlignment
_disableTileParseForOneLayout
_pendingTiles
_junctions
_roadGraph
_activeSigns
_fadingLabels
_visibleLabelsByName
_visibleLabels
_countVisibleOnRouteRoadSigns
_countVisibleOffRouteRoadSigns
_countVisibleRoadSigns
_maxVisibleOnRouteRoadSigns
_maxVisibleOffRouteRoadSigns
_maxVisibleRoadSigns
_maxOnRoadGraphRoadSigns
_minVisibleOffRoadGraphRoadSigns
_minVisibleProceedToRouteRoadSigns
_preferRightSideLabelPlacement
_minSignOffsetDistance
_roadNamesInGuidance
_guidanceStepInfos
_routeRoadInfos
_currentRoadName
_currentRoadNameIndex
_currentShieldGroup
_checkIfRouteSubrangeChanged
_useRouteSubrange
_routeSubrangeStart
_routeSubrangeEnd
_artworkCache
_currentRoadSign
_debugDisableRoadSignLimit
_debugCachedMaxVisibleOffRouteRoadSigns
_debugCachedMaxVisibleOnRouteRoadSigns
_debugEnableShieldsOnRouteLine
_shouldLabelOppositeCarriageways
_externalCollisionLabelsForLayout
currentRoadSign
currentRoadSignPixelHeight
setDebugDisableRoadSignLimit:
setDebugEnableShieldsOnRouteLine:
isNavMode
clearSceneIsMemoryWarning:
_reloadRouteJunctions
setRoute:
_refreshGuidanceRoadNames
grabTilesFromScene:
_tryAddRoadSignForJunction:navContext:labelCollisionEnabled:
_createOrUpdateLabelForRoad:isShield:navContext:
_tryAddRoadSignForRoad:isShield:navContext:labelCollisionEnabled:
_tryAddLabel:navContext:labelCollisionEnabled:
_collideLabel:activeLabel:labelsToRemove:
_generateCurrentRoadSignWithContext:
orientationForRoadSign:roadLabel:navContext:
layoutWithNavContext:externalCollisionLabels:
_addLabelsAtJunctions:withContext:maxLabelsToAdd:
_addLabelsForJunctions:withContext:maxLabelsToAdd:useAllJunctions:placeShieldsFrontToBack:
_addJunctionsForTile:
_updateUniqueOffRouteRoads
_updateRoadStarts
_updateRoadsInGuidance
_updatePreferredLabelPlacements
_initalizeCurrentRoadInfo
_updateCurrentRoadInfo
_findRouteOverlappingJunctionFrom:routeJunctions:lookBackward:firstOverlap:secondOverlap:
_updateActiveRouteRange
computeRoutePositionForPOIAtPixel:currentPosition:context:
needsLayout
drawRoadSigns
setDrawRoadSigns:
currentLocationText
activeSigns
currentRoadName
setCurrentRoadName:
currentShieldGroup
setCurrentShieldGroup:
debugDisableRoadSignLimit
debugEnableShieldsOnRouteLine
artworkCache
setArtworkCache:
clippedBack
clippedFront
routePoint
roadName
initWithName:shieldGroup:offset:
removeObjectsInArray:
reverseObjectEnumerator
initWithArray:
anyObject
setSet:
filterUsingPredicate:
predicateWithBlock:
_roadName
_routePoint
initWithRoadName:point:
stepIndexForPointIndex:
_startPanPosition
initWithARCameraController:
removeObjectsForKeys:
_sessionInterruptedReason
_session
run:
sessionInterruptedReason
session
isSupported
_stringDictionary
initWithStrings:locale:
getTextForKey:text:locale:
_recentTrafficDynamicTiles
sourceKeysForRenderKey:
subarrayWithRange:
_showingNoDataPlaceholders
supportsSecureCoding
encodeWithCoder:
initWithCoder:
_initWithImage:scale:camera:showingNoDataPlaceholders:
pointForCoordinate:
coordinateForPoint:
writeImageToFile:format:error:
imageDataInFormat:
writeToFile:options:error:
value:withObjCType:
encodeBool:forKey:
encodeDouble:forKey:
encodeObject:forKey:
getValue:
objCType
decodeBoolForKey:
decodeDoubleForKey:
decodeObjectOfClass:forKey:
maneuverDisplaySteps
coordinateAtOffset:fromRouteCoordinate:
coordinateAtOffset:fromRoutePoint:
_localize
initWithVenue:localize:
venueFeatureMarker
buildings
_downloadKey
initWithKey:downloadKey:data:
linesLabelAnnotationCount
linesLabelAnnotations
linesAnnotationBezierVertices
dataSource:featuresDidChangeForRect:
dataSource:didChangeSceneState:
dataSource:didChangeSceneID:
initWithDataSource:observer:
clearObserver
annotationsInMapRect:
isClusteringEnabled
sceneState
sceneID
transitLineForFeatureID:
transitNodeForFeatureID:
transitAccessPointForFeatureID:
_source
_nextFireDate
initWithTarget:selector:queue:
fireAfter:
disable
invalidate
nextFireDate
distantFuture
sortedPointsOnRoad
stringValue
longLongValue
_pitchAnimation
_rotationAnimation
_regionAnimation
_annotationTrackingCameraController
_gestureCameraControllerBehavior
_annotationTrackingZoomStyle
_annotationTrackingHeadingAnimationDisplayRate
stopRegionAnimation
_list
tileList
numTiles
addTileToList:
clearList
_debugKeyList
_fullyLoaded
_mapIsOpaque
_rasterOverlayScenes
unloadedTiles
addRasterOverlayScene:
rasterOverlaySceneAtLevel:
clearRasterOverlayScenes
setTilesToRender:
setNeighborTiles:
setKeysInView:
setNeighborKeys:
debugKeyList
setDebugKeyList:
fullyLoaded
setFullyLoaded:
mapIsOpaque
setMapIsOpaque:
initWithArray:copyItems:
overlayLevel
_overlayLevel
setOverlayLevel:
_geoTileLoader
_keyToJobMap
_mutex
_numDownloads
getJobForKey:
fetchDataForJob:
cancelJob:
updateJobPriority:
cancelRequests
reportCorruptTile:
purgeExpired:
reprioritizeKey:forClient:newPriority:
composedRouteLegIndex
_textureQueue
_whiteTexture
_arrowTexture
_textureDictionary
initWithConfiguration:resourceManager:device:
dataWithName:fromResourceManager:
textureWithName:samplerState:
textureWithName:mipmap:samplerState:
whiteTexture
arrowTexture
textureWithName:forScale:samplerState:
textureWithName:forScale:mipmap:samplerState:
purgeAll
_venueLogic
initWithTileSet:resourceManifestConfiguration:locale:sharedResources:taskContext:venueLogic:
_defaultStyle
_defaultStylePacks
newArtworkWithScale:style:size:numberOfLines:
newImageWithBackgroundColor:borderColor:textureAtlases:contentScale:
_imageSizeWithTextureAtlases:
_isPitching
_isRotating
_wasPitched
_couldEnter3DMode
_tourShouldResumeWhenDoneGesturing
_updateGlobeFromCamera
rotate:atScreenPoint:
pitch:translation:
rotateTo:animated:
tiltTo:animated:exaggerate:
zoomToDistance:distance:time:completionHandler:
zoomToDistance:distance:time:
moveTo:zoom:rotation:tilt:duration:timingCurve:completion:
moveTo:height:useHeight:zoom:rotation:tilt:duration:timingCurve:completion:
createMoveToZoomOutZoomInFrameFunction:toLatLon:
moveToZoomOutZoomInTransition:height:useHeight:zoom:rotation:tilt:duration:timingCurve:completion:
flyoverTourAnimation:animateToStart:labelChanged:stateChange:
stopFlyoverTourAnimation
interruptFlyoverTourAnimation
isFlyoverTourStarted
slowDownFactorFromLoadProgress
adjustLoadingForAnimation:progressFactor:
stopGlobeAnimations
_updateIsPitched
_updateCanEnter3DMode
updateState
updateCameraManager
geocAngleBetween:andCoordinate:
earthRadiusAt:
greatCircleMidPointLatitude:fromLongitude:toLongitude:
widestLatitudeForMapRegion:
zoomForMapRegion:
_centerCoordinateForMapRegion:
tourShouldResumeWhenDoneGesturing
setTourShouldResumeWhenDoneGesturing:
cameraPathsCount
_strokeMeshInfo
_fillMeshInfoForPointyRoofs
_strokeMeshes
_fillMeshesForPointyRoofs
_extrusionFillMeshVendor
_extrusionStrokeMeshVendor
_pointyRoofFillMeshVendor
_pointyRoofStrokeMeshVendor
_extrusionFillCullingGroups
_extrusionStrokeCullingGroups
_fillCullingGroupsForPointyRoofs
_pointyRoofFillCullingGroups
_pointyRoofStrokeCullingGroups
_flatRoofStyleQueries
_selectedFlatRoofStyleQueries
strokeMeshes
extrusionFillMeshVendor
extrusionStrokeMeshVendor
fillMeshesForPointyRoofs
pointyRoofFillMeshVendor
pointyRoofStrokeMeshVendor
styleQueriesForPointyRoofs:selected:
commitRangesToExtrusionFillRenderItemBatcher:forMeshAtIndex:cullingMask:featureIdPredicate:
commitRangesToExtrusionStrokeRenderItemBatcher:forMeshAtIndex:cullingMask:featureIdPredicate:
commitRangesToPointyRoofTopRenderItemBatcher:forMeshAtIndex:cullingMask:featureIdPredicate:
commitRangesToPointyRoofFillRenderItemBatcher:forMeshAtIndex:cullingMask:featureIdPredicate:
commitRangesToPointyRoofStrokeRenderItemBatcher:forMeshAtIndex:cullingMask:featureIdPredicate:
prepareForBuilding:forRoofStyle:scaleThreshold:
addBuilding:index:ofTotal:accessor:triangulator:prepareExtrusion:forRoofStyle:scaleThreshold:
addExtrusionForBuilding:index:ofTotal:triangulator:
canConstructPointyRoofForPolygon:building:buildingModel:scaleThreshold:
addPointyRoofForBuilding:buildingModel:scaleThreshold:styleIndex:
updateWithStyleManager:
shouldSuppress3DBuildingStrokes
_queue
_connection
_mitManager
_isActive
mapLayerDidStartLoadingTiles:
mapLayerDidFinishLoadingTiles:
mapLayerDidFailLoadingTiles:withError:
mapLayerDidChangeVisibleRegion:
mapLayerDidDraw:
mapLayer:willChangeRegionAnimated:
mapLayer:didChangeRegionAnimated:
mapLayerDidFinishInitialTrackingAnimation:
mapLayerDidReloadStylesheet:
mapLayerDidBecomePartiallyDrawn:
mapLayerDidBecomeFullyDrawn:hasFailedTiles:
mapLayer:presentationForAnnotation:
mapLayer:didBecomePitched:
mapLayer:canEnter3DModeDidChange:
mapLayer:canZoomInDidChange:
mapLayer:canZoomOutDidChange:
mapLayer:showingFlyoverDidChange:
mapLayer:canShowFlyoverDidChange:
mapLayerWillEnterAR:
mapLayerDidEnterAR:
mapLayerWillExitAR:
mapLayerDidExitAR:
mapLayer:didEncounterARError:
mapLayer:arSessionWasInterrupted:
mapLayerARSessionInterruptionEnded:
mapLayer:arTrackingStateDidChange:reason:
mapLayerWillStartFlyoverTour:
mapLayer:didStopFlyoverTourCompleted:
mapLayer:flyoverTourLabelDidChange:
mapLayer:flyoverModeDidChange:
mapLayer:flyoverModeWillChange:
mapLayer:didFinishChangingMapDisplayStyle:
mapLayer:selectedLabelMarkerWillDisappear:
mapLayer:selectedLabelMarkerDidChangeState:
mapLayer:labelMarkerDidChangeState:
mapLayerLabelsDidLayout:
mapLayer:willTransitionFrom:to:duration:
mapLayer:didUpdateVerticalYawTo:
mapLayerNavigationCameraHasStartedPanning:
mapLayerNavigationCameraHasStoppedPanning:
mapLayerNavigationCameraDidLeaveDefaultZoom:
mapLayerNavigationCameraDidReturnToDefaultZoom:
mapLayer:venueWithFocusDidChange:building:
activateController:
deactivateController
handleXPCEvent:
recievedData:
sendData:
decodeDebugTreeData:
decodeMITreeData:
takeMITSnapshot:
dataWithPropertyList:format:options:error:
writeToFile:atomically:
second
minute
hour
month
year
components:fromDate:
currentCalendar
date
createDirectoryAtPath:withIntermediateDirectories:attributes:error:
stringByExpandingTildeInPath
cStringUsingEncoding:
propertyListWithData:options:format:error:
sharedController
_tileCoordinate
_geoJunction
_roads
_incomingRoad
_outgoingRoad
_distanceFromPreviousShieldLabel
_preferredLabelPlacement
_isOnDualCarriageway
_hasSharedRouteDirection
_sharedRouteDirection
_foundRoads
_isOverpass
_isRouteOverpass
_largestRoadClass
_labelFeature
_junctionSign
_depthFromRoute
_worldUnitsPerMeter
_overpassJunction
_worldCoordinate
_sortValue
_isRouteRefineJunction
initWithGEOJunction:routeOffset:tile:
initWithRoadEdge:atA:routeOffset:tile:
matchesLocationForJunction:
isTileEdgeJunction
isRoadTerminus
isIntersection
isOffRouteGraph
isIntraRamp
isMultiRoadIntersection
roads
largestRoadClass
findRoads
addRouteEdge:atA:
evaluateCrossStreets
evaluateCrossStreetsUsingRouteJunction:
requiredLabelPlacement
setPreferredLabelPlacement:
worldUnitsPerMeter
_signOrientationWithDrivingSide:
_anchorCoordinateForSignOrientation:
createLabelWithNavContext:isDrivingSideRight:artworkCache:
setSharedRouteDirection:
geoJunction
tileCoordinate
outgoingRoad
incomingRoad
preferredLabelPlacement
distanceFromPreviousShieldLabel
setDistanceFromPreviousShieldLabel:
isOnDualCarriageway
setIsOnDualCarriageway:
hasSharedRouteDirection
sharedRouteDirection
depthFromRoute
setDepthFromRoute:
overpassJunction
setOverpassJunction:
isOverpass
isRouteOverpass
setIsRouteOverpass:
isRouteRefineJunction
setIsRouteRefineJunction:
junctionSign
exchangeObjectAtIndex:withObjectAtIndex:
forEachEdgeOnJunction:visitor:
_projectedRouteMatch
_projectedPosition
_projectedCourse
_updateCourseAndPositionFromRouteMatch
projectFromLocation:routeMatch:speedMultiplier:
projectedLocation
projectedLocationOnRoute
projectedRouteMatch
setProjectedRouteMatch:
projectedPosition
projectedCourse
routeMatchBehind:
routeMatchAtDistance:from:stopAtEndOfTunnel:stopAtEndOfManeuver:date:
clientLocation
speed
matchedCourse
locationCoordinate
isGoodMatch
_labelManager
initWithTileSet:resourceManifestConfiguration:locale:sharedResources:taskContext:labelManager:
_labelTileType
_debugConsoleManagerCreationLock
_debugConsoleManager
_depthStencil
_msaaTexture
_requiresMultisampling
_snapshotContext
_readPixels
_contentsScale
drawToTexture:withTimestamp:
initWithContentScale:shouldRasterize:taskContext:device:sharedResources:
_createRenderTarget:
drawToTexture:withTimestamp:completionHandler:prepareHandler:
enablePerformanceHUD:
disablePerformanceHUD:
expandedPerformanceHUD:
setNeedsDisplayOnBoundsChange:
setOpaque:
setContentsGravity:
drawInContext:
_didReadPixels:
didReceiveMemoryWarning
layer
removeFromSuperlayer
setFrame:
_heightProvider
_anchorToHeight
heightForAnchor:
removeCachedValueForAnchor:
invalidateRect:
heightProvider
setHeightProvider:
heightAtPoint:
floatValue
bundleForClass:
__vkBundle
roadLabelTilesInScene
_centerCoordinate
_pitch
_yaw
initWithDictionaryRepresentation:
setYaw:
setZoomLevel:
setTileSize:
zoomLevel
dictionaryWithObjectsAndKeys:
_entries
_textEntries
_variantType
variantType
setVariantType:
setHasVariantType:
hasVariantType
clearEntries
addEntries:
entriesCount
entriesAtIndex:
clearTextEntries
addTextEntries:
textEntriesCount
textEntriesAtIndex:
entries
setEntries:
textEntries
setTextEntries:
_label
_navLabelType
_navFeature
_displayGroup
_alignment
_desiredOffsetDistance
_displayID
_mercatorPoint
initWithNavFeature:label:navLabelType:
setRenderOrder:
renderOrder
isShieldLabel
isRoadLabel
isJunctionLabel
isManeuverLabel
isEtaLabel
isTrafficCameraLabel
displayGroup
navFeature
setNavFeature:
displayID
setDisplayID:
alignment
setAlignment:
desiredOffsetDistance
setDesiredOffsetDistance:
mercatorPoint
setMercatorPoint:
transitLines
transitLineCount
_geoJunctionToJunctionMap
_tileEdgeJunctions
_foundTileEdgeJunctions
_oppositeCarriagewayJunctionsValid
_oppositeCarriagewayJunctions
_junctionInfos
junctionForGeoJunction:
junctionAtCoordinate:
addJunction:
_findTileEdgeJunctions
findTileEdgeJunctionAtCoordinate:
initializeJunctionInfos
appendNavJunctionsInWorldRect:junctions:
findOppositeCarriagewayJunctionsWithRouteFeatures:distanceThreshold:
oppositeCarriagewayJunctionsValid
setOppositeCarriagewayJunctionsValid:
oppositeCarriagewayJunctions
junctions
forEachRoad:
forEachEdgeInRoad:visitTwice:visitor:
_duplicateTiles
_tileDatasByIndex
_intersections
_unitHeading
_offRouteJunctionsValid
_offRouteJunctionSelectRect
_offRouteJunctions
_routeFeatureMapValid
_routeFeatureMap
_simplifiedRouteValid
_simplifiedRoutePoints
_currentRoadStartSimplifiedPointIndex
_screenRouteValid
_screenRouteSegments
_firstPOIAligningRouteSegment
initWithJunctions:
routeJunctionsHaveChanged
startingLabelLayoutWithContext:routeUserOffset:
setTiles:
junctionForRoad:nearJunction:crossTileEdge:
unitHeading
_junctionForRoadEdge:atA:routeOffset:tile:
_findInterTileJunctionForJunction:
nextRoadSegmentForRoad:
_nextIntersectionForRoad:
setJunctions:
objectEnumerator
_checkIfDualCarriageWayConnectorRoad:fromJunction:toJunction:checkShields:
overpassJunctionForJunction:
_updateIntersectionsForDepth:
setObject:atIndexedSubscript:
_findOffRouteJunctions
_updateSimplifiedRoute
_transformRouteToScreenWithContext:
addRouteRoadEdge:atA:isRouteRefineJunction:tile:junctionList:
evaluateDualCarriagewayForJunction:outputJunctionList:
countReadyJunctionLists
junctionListForDepth:
offRouteGraphJunctionsWithNavContext:maxJunctions:isOnRoute:
isPriorRouteCollinearWithRoad:distance:
collideRouteWithLabel:routeCrossProduct:context:
prepareOppositeCarriagewayJunctions
transitLinkSections
_edgePadding
addPoints:
edgePadding
setEdgePadding:
_lines
_links
_displayConnections
_junctionManager
_nodes
_nodesWithConnectivity
_connectedNodes
_parentNodes
_orphanNodes
_lineLayer
_lineBatches
_lineStrokePipelineSetup
_lineFillPipelineSetup
_lineFillStyleTexture
_lineStrokeStyleTexture
_patternedLineSetups
_displayConnectionLayer
_nodeFeaturePool
_interTileMediator
_areNormalsSynchedForTileEdge
_isNeighboringTilePresent
_lineIDToAssociatedNodesMap
_lineInflation
_displayConnectionInflation
_alphaScale
_easingPointCount
_didLineDataChange
_didNeighboringTilesChange
_shouldUpdateMergedLinesForNodes
_transitSharedResources
initWithKey:modelTile:styleManager:dataOverrideManager:sharedResources:contentScale:device:labelExternalObjectsModerator:
setInterTileMediator:
setNodeFeaturePool:
containsLinesInSet:
minLineZoomForIDs:
createGroupsWithDevice:sharedResources:
_prepareLinesWithSharedResources:
_createLinesWithLoader:
_setupPatternedLineSetup:sharedResources:
_createDisplayConnectionsWithLoader:sharedResources:
_createNodes
updateLinesAtZoom:
_tilePerPoint:
updateLineStylesInContext:lineMergingDisabled:forceMeshCreation:dashCache:
updateDisplayConnectionStylesInContext:
updateNodeStylesInContext:
setAlphaScale:
appendNodesAttachedToLines:toNodes:
setSelectedLines:
setSelectedNodes:
populateSelectedLineBounds:
lineStrokePipelineSetup
lineFillPipelineSetup
lineLayer
displayConnectionLayer
neighborTileDidChange
willAppear
willDisappear
addTransitLinesInRect:toSet:
addTransitLinesAtGroundPoint:toArray:
closestItemAtPixel:maxDistance:itemDistanceSqrd:screenProjectionMatrix:
lines
debugString
debugDrawWithConsole:context:
nodes
links
displayConnections
transitNodeCollapseIndices
transitNodeCollapseIDs
transitNodeCollapseIDCount
transitStationTransfers
transitStationTransferCount
timeIntervalSinceDate:
secondsFromGMT
timeZoneWithName:
_facadeTextures
_objectSubTile
_shadowTexture
_shadowModelMatrix
_shadowViewConstantData
_fadeProgress
_cullingGrid
_fogInfo
shadowTexture
shadowViewConstantData
fogInfo
confirmBuildingSuppression:
buildMeshesWithTriangulator:device:prepareExtrusion:
numberOfFacadeTextures
facadeTextures
polygonGroupsForTextureAtIndex:
_shadowBounds
_fillShadowAreasInContext:data:
_blurTexture:
heightAtPoint:outZ:outBuildingId:
_buildShadowTexture
objectSubTile
fadeProgress
setFadeProgress:
cullingGrid
_venueWallMeshInfo
_venueWallEndCapMeshInfo
_venueWallHorizontalStrokeMeshInfo
_venueWallVerticalStrokeMeshInfo
_venueWallMeshes
_venueWallEndMeshes
_venueWallHorizontalStrokeMeshes
_venueWallVerticalStrokeMeshes
_venueWalls
_buildingId
_maximumSectionLength
_wallTexture
initWithStyleQuery:tileZoom:layer:buildingId:contentScale:sharedResources:
venueWallMeshes
venueWallEndMeshes
venueWallHorizontalStrokeMeshes
venueWallVerticalStrokeMeshes
buildingId
maximumSectionLength
wallTexture
generateEdgeListForPolygonSection:key:
verticalStrokeCountForSection:styles:edges:
bufferSizingForStrokesOnSection:styles:edges:
prepareToGenerateWallsForSection:styles:edges:
prepareToGenerateWallStrokesForSection:styles:edges:
prepareToStrokeSection:key:styles:paddedCount:
addWallsForSection:edges:attributes:styles:cullingMask:accessor:
addWallStrokesForSection:edges:attributes:styles:cullingMask:accessor:
addStrokeForSection:paddedCount:key:attributes:styles:cullingMask:accessor:
updateTextures:
_currentAnimationStartCoordinate
_currentAnimationPresentationStartCoordinate
_currentAnimationEndCoordinate
_centerCursor
enterARModeAtCoordinate:
exitARMode
map:didEnterARMode:
arController:didEncounterError:
arController:arSessionWasInterrupted:
arControllerSessionInterruptionEnded:
arController:didChangeTrackingState:reason:
setARInterfaceOrientation:
lineColor
_coordinate
_customFeature
course
setCourse:
setCoordinate:
initWithClusterNode:clusterTree:baseStyle:imageText:annotationText:annotationLocale:
clusterStyleAttributes
getClusterImageTextForClusterFeatureCount:text:locale:
getClusterAnnotationTextForClusterFeatureCount:text:locale:
_variantEntries
clearVariantEntries
addVariantEntries:
variantEntriesCount
variantEntriesAtIndex:
variantEntries
setVariantEntries:
_defaultForFeatureTypes
_shieldTypes
_artworkIdentifier
hasArtworkIdentifier
shieldTypesCount
shieldTypes
clearShieldTypes
addShieldTypes:
shieldTypesAtIndex:
setShieldTypes:count:
defaultForFeatureTypesCount
defaultForFeatureTypes
clearDefaultForFeatureTypes
addDefaultForFeatureType:
defaultForFeatureTypeAtIndex:
setDefaultForFeatureTypes:count:
artworkIdentifier
setArtworkIdentifier:
_cameraType
_headingType
_puckCourse
_puckCoordinate
_headingDelta
_headingMinDelta
_lastCalculatedCameraFrame
_pitchSpring
_headingSpring
_distanceFromTargetSpring
_screenPositionSpring
_cameraDistanceFromTarget
_cameraPitch
_previousUpdateTime
_maxZoomScale
_minZoomScale
_gestureBehavior
_attachedGestureBehavior
_detachedGestureBehavior
_isDetached
_zooming
_snapPitchAnimation
_snapHeadingAnimation
_transitionFrame
_currentStyleName
_coordinatesToFrame
_styleManeuversToFrame
_maneuversToFrame
_minCameraHeight
_maxCameraHeight
_minCameraPitch
_maxCameraPitch
_framingEdgeInset
_framingEdgeInsetProportional
_clientFramingInsets
_puckMovementBoundsMin
_puckMovementBoundsMax
_puckScreenPosition
_minHeightDeltaChangeHorizontal
_maxHeightDeltaChangeHorizontal
_minHeightDeltaChangeVertical
_maxHeightDeltaChangeVertical
_halfPuckSize
_viewableScreenRect
_framingScreenRect
_enablePan
_enableZoom
_enablePitch
_enableRotate
_panReturnDelayTime
_alternateFramingSource
_maxFramingDistance
_framingDistanceAfterManeuver
_locationCoordinate
_routeCoordinate
_frameAllGroupedManeuvers
_maxManeuversToFrame
_ignorePointsBehind
_insetsAnimating
_routeFocusCoordinate
_lastTargetStyleIdentifier
_desiredZoomScale
_animationTime
_isTracking
_depthNear
_sentZoomNotification
_screenCanvas
_baseDisplayRate
navContextStateDidChange:
navContextCameraHeadingOverrideDidChange:
startWithPounce:startLocation:startCourse:pounceCompletionHandler:
screenCanvas
setScreenCanvas:
setSceneConfiguration:
zoomScale
setZoomScale:
initWithTaskContext:device:
_setDetached:
_updateObserverCouldZoomIn:couldZoomOut:
setBaseDisplayRate:
updateLocation:andCourse:
updateCameraState
resetSpringsToResting
_hasRunningAnimation
_debugText:showNavCameraDebugConsoleAttributes:
_updateDebugText
_updateDebugOverlay
puckScreenPixel
_updateSprings:
_updateSceneStyles:
_updateStyles
currentCameraFrame
restingCameraFrame
animateCameraWithDuration:fromFrame:completionHandler:
returnToTrackingWithDelay:resetZoom:
returnToPuck
_normalizedZoomLevelForDisplayZoomLevel:
_canZoomIn
_canZoomOut
calculateHeading
calculateViewableScreenRect
updateSpringsForTrackingCamera
distanceToManeuver:
routeLocationAtDistance:fromManeuver:
routeCoordinateAtDistance:
updateManeuversToFrame
updatePointsToFrame
_addAdditionalRoutePointsToFrameToList:
updateSpringsForFramingCamera
_setNeedsUpdate
_updateZoomScaleLimts
minZoomScale
maxZoomScale
minZoomHeight
maxZoomHeight
minCameraPitch
maxCameraPitch
_snapPitch
_snapHeading
cameraHeadingType
clientFramingInsets
setClientFramingInsets:
baseDisplayRate
distanceBetweenRoutePointIndex:toPointIndex:
latLng
hasLatLng
destination
distanceBetweenLocation:nextPointIndex:toPointIndex:
coordinateAtOffset:
locationAtDistance:from:
setIsGoodMatch:
initWithRoute:routeCoordinate:locationCoordinate:stepIndex:matchedCourse:timestamp:
courseAtRouteCoordinateIndex:
routeCoordinateAtDistance:beforeRouteCoordinate:
_groupStepHandler
_animations
initWithAnimations:
animations
groupStepHandler
setGroupStepHandler:
firstObject
sortedArrayUsingSelector:
caseInsensitiveCompare:
_venueGroups
_venueFloorGroups
_venues
venueGroups
venues
buildMeshesWithDevice:styleManager:triangulator:
buildPolygonMeshesWithDevice:triangulator:
buildExteriorWallMeshesWithDevice:styleManager:
populateMetaData:
venueFloorGroups
venueComponents
venueComponentsCount
venueLevels
venueLevelsCount
isBorder
_vendor
initWithStylesheetVendor:manifestConfiguration:
_shieldTexts
setShieldType:
setHasShieldType:
hasShieldType
clearShieldTexts
addShieldText:
shieldTextsCount
shieldTextAtIndex:
shieldTexts
setShieldTexts:
_keyType
_imageName
_shieldTextLocale
_iconAttributeKey
_iconAttributeValue
_dataType
_text
_relatedText
_hasDataValue
_dataValue
_imageCenter
_fallbackImageKeys
_initWithKeyType:
initWithDataType:
initWithShieldText:locale:type:color:
initWithShieldName:text:locale:color:
initWithIconAttributeKey:attributeValue:
initWithIconName:
initWithLabelImageKey:
setDataValue:
keyType
imageName
shieldTextLocale
iconAttributeKey
iconAttributeValue
dataType
setDataType:
setText:
relatedText
setRelatedText:
hasDataValue
dataValue
imageCenter
setImageCenter:
fallbackImageKeys
setFallbackImageKeys:
addVariant:
variantAtIndex:
_notifyFullyLoaded
_notifyFullyDrawn
initWithMapEngine:manifestConfiguration:
_updateViewport
_updateCameraFromGlobe
globeWillBecomeFullyDrawn
globeDidBecomeFullyDrawn
_genericShields
_textureAtlas
clearTextureAtlas
addTextureAtlas:
textureAtlasCount
textureAtlasAtIndex:
clearGenericShields
addGenericShield:
genericShieldsCount
genericShieldAtIndex:
textureAtlas
setTextureAtlas:
genericShields
setGenericShields:
_position
_location
_minZoom
_maxZoom
_trafficFeatureType
initWithType:
isCamera
isIncident
worldPoint
setWorldPoint:
minZoom
maxZoom
location
setLocation:
trafficFeatureType
_navCameraController
_startZoomScale
_tapZoomAnimation
initWithNavCameraController:
_startZoomAnimationFrom:to:completionHandler:
_startPitch
addCameraPath:
setUseSplines:
useSplines
functionWithControlPoints::::
labelFramesCount
labelFrameAtIndex:
bestLocalizedLabelAtIndex:
_leftCapWidth
_leftPadding
_numberOfLines
_rightCapWidth
_rightPadding
numberOfLines
setNumberOfLines:
setHasNumberOfLines:
hasNumberOfLines
setLeftCapWidth:
setHasLeftCapWidth:
hasLeftCapWidth
setRightCapWidth:
setHasRightCapWidth:
hasRightCapWidth
setLeftPadding:
setHasLeftPadding:
hasLeftPadding
setRightPadding:
setHasRightPadding:
hasRightPadding
leftCapWidth
rightCapWidth
leftPadding
rightPadding
_renderGroup
_overrideMaxZoomLevel
_worldSizedOverlays
_queueDraw:
invalidateRect:level:
_flush
insertOverlay:atIndex:
exchangeOverlayAtIndex:withOverlayAtIndex:
insertOverlay:aboveOverlay:
insertOverlay:belowOverlay:
overrideMaxZoomLevel
setOverrideMaxZoomLevel:
_replaceMapContentInRect
_level
_flyoverContainer
setNeedsDisplayInRect:level:
canDrawKey:
drawKey:inContext:
flyoverContainer
setFlyoverContainer:
replaceMapContentInRect
setReplaceMapContentInRect:
level
setLevel:
overlay:drawKey:inContext:
overlay:canDrawKey:
labelTextPlacements
_sourceTexture
_targetTexture
_sourceRoofTexture
_targetRoofTexture
_lastResolvedZoom
sourceTexture
targetTexture
sourceRoofTexture
targetRoofTexture
initWithStyleQuery:tileZoom:fixedAroundCentroid:contentScale:sharedResources:
_textureForName:
setNeedsTextureUpdate
updateTexturesIfNecessary:
createStrokePointStyleList:section:outPointStyles:
prepareForPolygon:hasNonWaterStyle:
enclosePointsInBoundingBox:count:
prepareToFillSection:
addPolygon:hasNonWaterStyle:accessor:triangulator:
addFillForSection:precision:styleIndex:cullingMask:accessor:triangulator:
styleIndexForAttributes:edgePair:
initialStyleIndexForSection:attributes:styles:
_zoomLevelForCameraPosition:
_minTrackingCameraDistance
transitAccessPointCount
transitAccessPoints
_objectGroups
_vectorType
_heights
objectGroups
initWithKey:modelTile:styleManager:sharedResources:contentScale:
_replaceThreeBuldingsInModelTile:objects:
_read3DObjects:fromDiskForTileKey:
_createMeshForObjects:count:
shadowBounds
fillShadowAreasInContext:
threeDBuildingsCount
threeDBuildings
numberFromString:
stringWithContentsOfFile:encoding:error:
_etaLabel
_etaLabelArtworkKey
_displayEtaDescription
_isRepositioning
_orientation
initWithRouteInfo:routeCoord:
etaComparisonToMain
createLabelWithNavContext:orientation:etaDescription:selected:artworkCache:
labelRectForOrientation:styleQuery:navContext:anchorPosition:artworkCache:
updateRoadSignWithNavContext:artworkCache:
repositionAtRouteCoord:
setRouteInfo:
displayEtaDescription
isRepositioning
setIsRepositioning:
styleQueryForNavContext:selected:etaComparison:transportType:
artworkForEtaDescription:navContext:styleQuery:orientation:artworkCache:selected:
toStyleEtaComparison:
_trafficTile
_roadLayer
_roadTrafficLayer
_patternedRibbonLayer
setTrafficTile:
addRoadRibbonTo:styleQuery:painterZ:numPoints:points:startCap:endCap:trafficTexelRun:trafficSkeleton:
addPatternedRibbonTo:styleQuery:painterZ:numPoints:points:
buildGglMeshesWithDevice:trafficStream:
roadLayer
roadTrafficLayer
patternedRibbonLayer
trafficTile
_trafficTileSource
_inflightTiles
_privateInflightTiles
forEachTrafficTileSource:
setTrafficTileSource:atIndex:
inflightTileForKey:
expireAllTraffic
_trafficTileSourceForOrigin:
_trafficFailed:
releaseTraffic
initWithVenueBuilding:localize:
venueBuildingFeatureMarker
businessId
floorOrdinals
shortFloorNames
floorNames
nearestFramingPositionToLocation:
numberWithShort:
_context
_backingSize
renderDelegate
setRenderDelegate:
backingSize
backingFormat
initWithDevice:
layoutSublayers
_createLayerRenderBuffer
_deleteLayerRenderBuffer
setParameter:to:
presentRenderbuffer:
renderbufferStorage:fromDrawable:
setPresentsWithTransaction:
setDrawableProperties:
setActions:
_callbacker
initWithCallbacker:
displayLinkFired:
targetTimestamp
isPaused
setPaused:
displayLinkWithTarget:selector:
mainDisplay
currentRunLoop
addToRunLoop:forMode:
setPreferredFramesPerSecond:
preferredFramesPerSecond
displayLinkWithDisplay:target:selector:
sharegroup
currentContext
setCurrentContext:
initWithAPI:properties:
initWithContentsOfFile:
attributesCount
attributeAtIndex:
^{AnimationManager=^^?{_retain_ptr<_AnimationManagerRunner *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}^{RunLoopController}{mutex={_opaque_pthread_mutex_t=l[40c]}}{array<std::__1::unordered_set<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::hash<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, std::__1::equal_to<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, std::__1::allocator<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >, 2>=[2{unordered_set<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::hash<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, std::__1::equal_to<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, std::__1::allocator<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >={__hash_table<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::hash<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, std::__1::equal_to<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, std::__1::allocator<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, void *> *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, void *> *>, std::__1::allocator<std::__1::__hash_node<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, void *> > >={__hash_node_base<std::__1::__hash_node<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, void *> *>=^{__hash_node_base<std::__1::__hash_node<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >=L}{__compressed_pair<float, std::__1::equal_to<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >=f}}}]}{atomic<bool>=AB}}
v12@0:4@"VKAnimation"8
v12@0:4@8
B12@0:4@8
#8@0:4
@8@0:4
@12@0:4:8
@16@0:4:8@12
@20@0:4:8@12@16
B8@0:4
B12@0:4#8
B12@0:4@"Protocol"8
B12@0:4:8
Vv8@0:4
I8@0:4
^{_NSZone=}8@0:4
@"NSString"8@0:4
@12@0:4^{AnimationManager=^^?{_retain_ptr<_AnimationManagerRunner *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}^{RunLoopController}{mutex={_opaque_pthread_mutex_t=l[40c]}}{array<std::__1::unordered_set<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::hash<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, std::__1::equal_to<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, std::__1::allocator<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >, 2>=[2{unordered_set<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::hash<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, std::__1::equal_to<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, std::__1::allocator<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >={__hash_table<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::hash<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, std::__1::equal_to<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, std::__1::allocator<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, void *> *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, void *> *>, std::__1::allocator<std::__1::__hash_node<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, void *> > >={__hash_node_base<std::__1::__hash_node<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, void *> *>=^{__hash_node_base<std::__1::__hash_node<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >=L}{__compressed_pair<float, std::__1::equal_to<geo::_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >=f}}}]}{atomic<bool>=AB}}8
@"GEOResourceManifestConfiguration"
{_retain_ptr<VKIconManager *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>="_vptr$_retain_ptr"^^?"_obj"@"VKIconManager""_retain"{_retain_objc=}"_release"{_release_objc=}}
{_retain_ptr<VKShieldManager *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>="_vptr$_retain_ptr"^^?"_obj"@"VKShieldManager""_retain"{_retain_objc=}"_release"{_release_objc=}}
{_retain_ptr<VKGGLTextureManager *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>="_vptr$_retain_ptr"^^?"_obj"@"VKGGLTextureManager""_retain"{_retain_objc=}"_release"{_release_objc=}}
{_retain_ptr<VKResourceManager *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>="_vptr$_retain_ptr"^^?"_obj"@"VKResourceManager""_retain"{_retain_objc=}"_release"{_release_objc=}}
{shared_ptr<md::StylesheetVendor>="__ptr_"^{StylesheetVendor}"__cntrl_"^{__shared_weak_count}}
{unique_ptr<md::FontManager, std::__1::default_delete<md::FontManager> >="__ptr_"{__compressed_pair<md::FontManager *, std::__1::default_delete<md::FontManager> >="__value_"^{FontManager}}}
{unique_ptr<md::Device, std::__1::default_delete<md::Device> >="__ptr_"{__compressed_pair<md::Device *, std::__1::default_delete<md::Device> >="__value_"^{Device}}}
{unique_ptr<ggl::AlphaAtlas, std::__1::default_delete<ggl::AlphaAtlas> >="__ptr_"{__compressed_pair<ggl::AlphaAtlas *, std::__1::default_delete<ggl::AlphaAtlas> >="__value_"^{AlphaAtlas}}}
{unique_ptr<ggl::IsoAlphaAtlas, std::__1::default_delete<ggl::IsoAlphaAtlas> >="__ptr_"{__compressed_pair<ggl::IsoAlphaAtlas *, std::__1::default_delete<ggl::IsoAlphaAtlas> >="__value_"^{IsoAlphaAtlas}}}
{unique_ptr<ggl::DistanceAtlas, std::__1::default_delete<ggl::DistanceAtlas> >="__ptr_"{__compressed_pair<ggl::DistanceAtlas *, std::__1::default_delete<ggl::DistanceAtlas> >="__value_"^{DistanceAtlas}}}
{shared_ptr<ggl::StandardLibrary>="__ptr_"^{StandardLibrary}"__cntrl_"^{__shared_weak_count}}
{shared_ptr<ggl::CommonLibrary>="__ptr_"^{CommonLibrary}"__cntrl_"^{__shared_weak_count}}
^{Device=i{shared_ptr<ggl::Device>=^{Device}^{__shared_weak_count}}{unique_ptr<md::SharedDeviceResources, std::__1::default_delete<md::SharedDeviceResources> >={__compressed_pair<md::SharedDeviceResources *, std::__1::default_delete<md::SharedDeviceResources> >=^{SharedDeviceResources}}}}8@0:4
^{Device=^^?{DeviceVersion=II}{DeviceCapabilities=BBIII{DeviceSize=III}}{DeviceAPIProperties=id}ii}8@0:4
^{AlphaAtlas=BIIIf{unique_ptr<ggl::Texture2D, std::__1::default_delete<ggl::Texture2D> >={__compressed_pair<ggl::Texture2D *, std::__1::default_delete<ggl::Texture2D> >=^{Texture2D}}}}8@0:4
^{IsoAlphaAtlas=IIf{unique_ptr<ggl::Texture2D, std::__1::default_delete<ggl::Texture2D> >={__compressed_pair<ggl::Texture2D *, std::__1::default_delete<ggl::Texture2D> >=^{Texture2D}}}{shared_ptr<ggl::SamplerState>=^{SamplerState}^{__shared_weak_count}}}8@0:4
^{DistanceAtlas=III{unique_ptr<ggl::Texture2D, std::__1::default_delete<ggl::Texture2D> >={__compressed_pair<ggl::Texture2D *, std::__1::default_delete<ggl::Texture2D> >=^{Texture2D}}}}8@0:4
r^{StandardLibrary=^^?^{ResourceManager}^{RenderResource}^{ShaderLibraryDescriptor}{vector<ggl::ShaderLibrary::FunctionEntry, std::__1::allocator<ggl::ShaderLibrary::FunctionEntry> >=^{FunctionEntry}^{FunctionEntry}{__compressed_pair<ggl::ShaderLibrary::FunctionEntry *, std::__1::allocator<ggl::ShaderLibrary::FunctionEntry> >=^{FunctionEntry}}}{vector<ggl::ShaderLibrary::ShaderEntry, std::__1::allocator<ggl::ShaderLibrary::ShaderEntry> >=^{ShaderEntry}^{ShaderEntry}{__compressed_pair<ggl::ShaderLibrary::ShaderEntry *, std::__1::allocator<ggl::ShaderLibrary::ShaderEntry> >=^{ShaderEntry}}}{vector<ggl::ShaderLibrary::ComputeShaderEntry, std::__1::allocator<ggl::ShaderLibrary::ComputeShaderEntry> >=^{ComputeShaderEntry}^{ComputeShaderEntry}{__compressed_pair<ggl::ShaderLibrary::ComputeShaderEntry *, std::__1::allocator<ggl::ShaderLibrary::ComputeShaderEntry> >=^{ComputeShaderEntry}}}{vector<std::__1::shared_ptr<ggl::Shader>, std::__1::allocator<std::__1::shared_ptr<ggl::Shader> > >=^{shared_ptr<ggl::Shader>}^{shared_ptr<ggl::Shader>}{__compressed_pair<std::__1::shared_ptr<ggl::Shader> *, std::__1::allocator<std::__1::shared_ptr<ggl::Shader> > >=^{shared_ptr<ggl::Shader>}}}{shared_ptr<ggl::ShaderLibraryData>=^{ShaderLibraryData}^{__shared_weak_count}}}8@0:4
@20@0:4@8^{Device=i{shared_ptr<ggl::Device>=^{Device}^{__shared_weak_count}}{unique_ptr<md::SharedDeviceResources, std::__1::default_delete<md::SharedDeviceResources> >={__compressed_pair<md::SharedDeviceResources *, std::__1::default_delete<md::SharedDeviceResources> >=^{SharedDeviceResources}}}}12r^{shared_ptr<ggl::StandardLibrary>=^{StandardLibrary}^{__shared_weak_count}}16
v8@0:4
{shared_ptr<md::StylesheetVendor>=^{StylesheetVendor}^{__shared_weak_count}}8@0:4
{mutex="__m_"{_opaque_pthread_mutex_t="__sig"l"__opaque"[40c]}}
@"NSMapTable"
@12@0:4@8
{shared_ptr<gss::StylesheetManager<gss::ScenePropertyID> >="__ptr_"^{StylesheetManager<gss::ScenePropertyID>}"__cntrl_"^{__shared_weak_count}}
{shared_ptr<gss::StylesheetManager<gss::PropertyID> >="__ptr_"^{StylesheetManager<gss::PropertyID>}"__cntrl_"^{__shared_weak_count}}
{vector<GEOLocationCoordinate2D, std::__1::allocator<GEOLocationCoordinate2D> >="__begin_"^{?}"__end_"^{?}"__end_cap_"{__compressed_pair<GEOLocationCoordinate2D *, std::__1::allocator<GEOLocationCoordinate2D> >="__value_"^{?}}}
{ManeveuverDistancesRange="_immediate"d"_extremlyNear"d"_veryNear"d"_near"d"_medium"d"_far"d"_veryFar"d}
{shared_ptr<md::TaskContext>="__ptr_"^{TaskContext}"__cntrl_"^{__shared_weak_count}}
@16@0:4{shared_ptr<md::TaskContext>=^{TaskContext}^{__shared_weak_count}}8
v16@0:4{shared_ptr<gss::StylesheetManager<gss::ScenePropertyID> >=^{StylesheetManager<gss::ScenePropertyID>}^{__shared_weak_count}}8
{shared_ptr<gss::StylesheetManager<gss::ScenePropertyID> >=^{StylesheetManager<gss::ScenePropertyID>}^{__shared_weak_count}}8@0:4
v16@0:4{shared_ptr<gss::StylesheetManager<gss::PropertyID> >=^{StylesheetManager<gss::PropertyID>}^{__shared_weak_count}}8
{shared_ptr<gss::StylesheetManager<gss::PropertyID> >=^{StylesheetManager<gss::PropertyID>}^{__shared_weak_count}}8@0:4
v12@0:4i8
v16@0:4d8
v12@0:4I8
v12@0:4B8
C8@0:4
^{RunLoopController=^{MapEngine}}
{?="orthographic"B"width"d"height"d"near"d"far"d"horizontalOffset"d}
@"VKViewVolume"
@"VKFootprint"
{Matrix<double, 3, 1>="_e"[3d]}
{RigidTransform<double>="_rotation"{Quaternion<double>="_imaginary"{Matrix<double, 3, 1>="_e"[3d]}"_scalar"d}"_translation"{Matrix<double, 3, 1>="_e"[3d]}}
{Matrix<double, 4, 4>="_e"[16d]}
@12@0:4^{RunLoopController=^{MapEngine}}8
v12@0:4r^{Matrix<double, 3, 1>=[3d]}8
r^{Matrix<double, 3, 1>=[3d]}8@0:4
{?=Bddddd}8@0:4
v12@0:4r^{Quaternion<double>={Matrix<double, 3, 1>=[3d]}d}8
r^{Quaternion<double>={Matrix<double, 3, 1>=[3d]}d}8@0:4
f8@0:4
v12@0:4f8
d8@0:4
{Matrix<double, 3, 1>=[3d]}8@0:4
v88@0:4{VKCameraState={RigidTransform<double>={Quaternion<double>={Matrix<double, 3, 1>=[3d]}d}{Matrix<double, 3, 1>=[3d]}}ddd}8
{VKCameraState={RigidTransform<double>={Quaternion<double>={Matrix<double, 3, 1>=[3d]}d}{Matrix<double, 3, 1>=[3d]}}ddd}8@0:4
B12@0:4^{VKCameraState={RigidTransform<double>={Quaternion<double>={Matrix<double, 3, 1>=[3d]}d}{Matrix<double, 3, 1>=[3d]}}ddd}8
f12@0:4r^{Box<double, 2>={Matrix<double, 2, 1>=[2d]}{Matrix<double, 2, 1>=[2d]}}8
B12@0:4r^{Box<double, 2>={Matrix<double, 2, 1>=[2d]}{Matrix<double, 2, 1>=[2d]}}8
@?8@0:4
{Matrix<double, 3, 1>=[3d]}16@0:4{CGPoint=ff}8
{Matrix<double, 3, 1>=[3d]}24@0:4{CGPoint=ff}8d16
d16@0:4d8
f16@0:4{CGPoint=ff}8
r^{Matrix<double, 4, 4>=[16d]}8@0:4
{Matrix<double, 3, 1>=[3d]}12@0:4r^{Mercator3<double>=[3d]}8
{View<double>={RigidTransform<double>={Quaternion<double>={Matrix<double, 3, 1>=[3d]}d}{Matrix<double, 3, 1>=[3d]}}{Matrix<double, 4, 4>=[16d]}{Matrix<double, 4, 4>=[16d]}d{ViewSize=SS}i}12@0:4{ViewSize=SS}8
^{CPolylineGroupChangeObserver=^^?}
{vector<geo::_retain_ptr<VKPolylineGroupOverlay *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::allocator<geo::_retain_ptr<VKPolylineGroupOverlay *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >="__begin_"^{_retain_ptr<VKPolylineGroupOverlay *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}"__end_"^{_retain_ptr<VKPolylineGroupOverlay *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}"__end_cap_"{__compressed_pair<geo::_retain_ptr<VKPolylineGroupOverlay *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> *, std::__1::allocator<geo::_retain_ptr<VKPolylineGroupOverlay *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >="__value_"^{_retain_ptr<VKPolylineGroupOverlay *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}}}
{set<VKPolylineGroupOverlay *, std::__1::less<VKPolylineGroupOverlay *>, std::__1::allocator<VKPolylineGroupOverlay *> >="__tree_"{__tree<VKPolylineGroupOverlay *, std::__1::less<VKPolylineGroupOverlay *>, std::__1::allocator<VKPolylineGroupOverlay *> >="__begin_node_"^{__tree_end_node<std::__1::__tree_node_base<void *> *>}"__pair1_"{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<VKPolylineGroupOverlay *, void *> > >="__value_"{__tree_end_node<std::__1::__tree_node_base<void *> *>="__left_"^{__tree_node_base<void *>}}}"__pair3_"{__compressed_pair<unsigned long, std::__1::less<VKPolylineGroupOverlay *> >="__value_"L}}}
v16@0:4@"VKPolylineGroupOverlay"8@"VKPolylineOverlay"12
v16@0:4@8@12
@12@0:4^{CPolylineGroupChangeObserver=^^?}8
{Box<double, 2>="_minimum"{Matrix<double, 2, 1>="_e"[2d]}"_maximum"{Matrix<double, 2, 1>="_e"[2d]}}
{VKFootprintConvexHull_struct="edgeCount"i"edgeOrigin"[6{Matrix<double, 3, 1>="_e"[3d]}]"edgeNormal"[6{Matrix<double, 3, 1>="_e"[3d]}]}
[12{Matrix<double, 3, 1>="_e"[3d]}]
^{Matrix<double, 3, 1>=[3d]}8@0:4
B12@0:4^{Matrix<double, 3, 1>=[3d]}8
{Box<double, 2>={Matrix<double, 2, 1>=[2d]}{Matrix<double, 2, 1>=[2d]}}8@0:4
{VKFootprintConvexHull_struct=i[6{Matrix<double, 3, 1>=[3d]}][6{Matrix<double, 3, 1>=[3d]}]}8@0:4
i8@0:4
[8{Matrix<double, 3, 1>="_e"[3d]}]
v56@0:4{?=Bddddd}8r^{Matrix<double, 4, 4>=[16d]}52
{Matrix<double, 3, 1>=[3d]}12@0:4^f8
{VKTileKey="z"I"x"i"y"i"pointSize"I}
@"VKTilePool"
{VKCameraState="transform"{RigidTransform<double>="_rotation"{Quaternion<double>="_imaginary"{Matrix<double, 3, 1>="_e"[3d]}"_scalar"d}"_translation"{Matrix<double, 3, 1>="_e"[3d]}}"aspectRatio"d"verticalFieldOfView"d"horizontalOffset"d}
{Matrix<float, 4, 4>="_e"[16f]}
{shared_ptr<ggl::ConstantDataTyped<ggl::Tile::View> >="__ptr_"^{ConstantDataTyped<ggl::Tile::View>}"__cntrl_"^{__shared_weak_count}}
r^{Matrix<float, 4, 4>=[16f]}8@0:4
r^{VKTileKey=IiiI}8@0:4
v12@0:4r^{VKTileKey=IiiI}8
v12@0:4C8
@12@0:4r^{VKTileKey=IiiI}8
v12@0:4^{LayoutContext=@{shared_ptr<md::ViewTransform>=^{ViewTransform}^{__shared_weak_count}}{shared_ptr<md::AnchorContext>=^{AnchorContext}^{__shared_weak_count}}@@{shared_ptr<gss::StylesheetManager<gss::PropertyID> >=^{StylesheetManager<gss::PropertyID>}^{__shared_weak_count}}{shared_ptr<gss::StylesheetManager<gss::ScenePropertyID> >=^{StylesheetManager<gss::ScenePropertyID>}^{__shared_weak_count}}{VKEdgeInsets=ffff}{VKEdgeInsets=ffff}C{shared_ptr<ggl::PolygonBase::MeshMesh>=^{MeshMesh}^{__shared_weak_count}}{shared_ptr<ggl::PolygonBase::MeshMesh>=^{MeshMesh}^{__shared_weak_count}}{shared_ptr<ggl::TextureMesh::MeshMesh>=^{MeshMesh}^{__shared_weak_count}}{StencilManager=CCC{ClearItem=C{Matrix<float, 4, 1>=[4f]}BfCI}}{shared_ptr<ggl::Device>=^{Device}^{__shared_weak_count}}{Loader={unique_ptr<ggl::LoaderImpl, std::__1::default_delete<ggl::LoaderImpl> >={__compressed_pair<ggl::LoaderImpl *, std::__1::default_delete<ggl::LoaderImpl> >=^{LoaderImpl}}}}ddBBBBB{Coordinate3D<Radians, double>={Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<MeterUnitDescription, double>=d}}fffi^{View}^{View}^{Viewport}^{ARContext}{array<std::__1::unique_ptr<md::LogicContext, std::__1::default_delete<md::LogicContext> >, 4>=[4{unique_ptr<md::LogicContext, std::__1::default_delete<md::LogicContext> >={__compressed_pair<md::LogicContext *, std::__1::default_delete<md::LogicContext> >=^{LogicContext}}}]}}8
r^{shared_ptr<ggl::ConstantDataTyped<ggl::Tile::View> >=^{ConstantDataTyped<ggl::Tile::View>}^{__shared_weak_count}}8@0:4
{VKTileKey=IiiI}8@0:4
@"VKMapCanvas"
@"VKClassicGlobeCanvas"
@"<VKMapViewDelegate>"
@"NSString"
{?="timePeriod"C"overlayType"C"applicationState"C"searchResultsType"C"mapHasLabels"B}
@"VKTimedAnimation"
{VKEdgeInsets="top"f"left"f"bottom"f"right"f}
@"VKMemoryObserver"
@"VKPuckAnimator"
@"VKMapCameraController"
@"VKNavCameraController"
@"VKNavContext"
{Coordinate3D<Radians, double>="latitude"{Unit<RadianUnitDescription, double>="_value"d}"longitude"{Unit<RadianUnitDescription, double>="_value"d}"altitude"{Unit<MeterUnitDescription, double>="_value"d}}
{Unit<RadianUnitDescription, double>="_value"d}
{unique_ptr<md::MapEngine, std::__1::default_delete<md::MapEngine> >="__ptr_"{__compressed_pair<md::MapEngine *, std::__1::default_delete<md::MapEngine> >="__value_"^{MapEngine}}}
@"MDARController"
v16@0:4C8C12
{?=B}8@0:4
v9@0:4{?=B}8
v16@0:4{CGPoint=ff}8
@12@0:4B8
@16@0:4{CGPoint=ff}8
B12@0:4i8
d12@0:4i8
v24@0:4B8B12d16
@24@0:4{?=dd}8
@28@0:4{?=dd}8B24
@32@0:4{?=dd}8B24B28
@16@0:4Q8
s12@0:4@8
v16@0:4s8@12
f12@0:4@8
v16@0:4r^{Venue=QQ{vector<md::VenueBuilding, std::__1::allocator<md::VenueBuilding> >=^{VenueBuilding}^{VenueBuilding}{__compressed_pair<md::VenueBuilding *, std::__1::allocator<md::VenueBuilding> >=^{VenueBuilding}}}{Polygon2<double>={vector<gm::Matrix<double, 2, 1>, std::__1::allocator<gm::Matrix<double, 2, 1> > >=^{Matrix<double, 2, 1>}^{Matrix<double, 2, 1>}{__compressed_pair<gm::Matrix<double, 2, 1> *, std::__1::allocator<gm::Matrix<double, 2, 1> > >=^{Matrix<double, 2, 1>}}}}{ConvexHull2<double>={vector<gm::Matrix<double, 2, 1>, std::__1::allocator<gm::Matrix<double, 2, 1> > >=^{Matrix<double, 2, 1>}^{Matrix<double, 2, 1>}{__compressed_pair<gm::Matrix<double, 2, 1> *, std::__1::allocator<gm::Matrix<double, 2, 1> > >=^{Matrix<double, 2, 1>}}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}8r^{VenueBuilding={vector<md::VenueLevel, std::__1::allocator<md::VenueLevel> >=^{VenueLevel}^{VenueLevel}{__compressed_pair<md::VenueLevel *, std::__1::allocator<md::VenueLevel> >=^{VenueLevel}}}QQQQs{Matrix<double, 2, 1>=[2d]}{ConvexHull2<double>={vector<gm::Matrix<double, 2, 1>, std::__1::allocator<gm::Matrix<double, 2, 1> > >=^{Matrix<double, 2, 1>}^{Matrix<double, 2, 1>}{__compressed_pair<gm::Matrix<double, 2, 1> *, std::__1::allocator<gm::Matrix<double, 2, 1> > >=^{Matrix<double, 2, 1>}}}}}12
v16@0:4i8B12
{?=CCCCB}8@0:4
v13@0:4{?=CCCCB}8
v17@0:4{?=CCCCB}8B13
v25@0:4{?=CCCCB}8B13d17
v20@0:4d8@?16
v21@0:4f8{?=CCCCB}12i17
v24@0:4{CGRect={CGPoint=ff}{CGSize=ff}}8
{CGRect={CGPoint=ff}{CGSize=ff}}8@0:4
{?=ddd}8@0:4
v64@0:4{?=dd}8d24d32d40d48@?56@?60
@24@0:4B8B12@16f20
v12@0:4^{CGContext=}8
v20@0:4d8B16
v28@0:4@8d12d20
v40@0:4@8d12d20d28@?36
d12@0:4@8
{?=dd}20@0:4{CGPoint=ff}8@16
{CGPoint=ff}28@0:4{?=dd}8@24
d32@0:4{CGPoint=ff}8{CGPoint=ff}16@24i28
v24@0:4{VKEdgeInsets=ffff}8
v40@0:4{VKEdgeInsets=ffff}8d24@32@?36
{VKEdgeInsets=ffff}8@0:4
v16@0:4@8@?12
v16@0:4i8@?12
v20@0:4@8B12@?16
v24@0:4@8d12@?20
v24@0:4Q8B16@?20
v44@0:4B8i12{?=dd}16d32@?40
v16@0:4@8B12
@20@0:4{CGPoint=ff}8B16
@16@0:4@8@12
v16@0:4Q8
v40@0:4{CGPoint=ff}8{CGPoint=ff}16B24d28@?36
v20@0:4@8B12B16
v16@0:4{PolylineCoordinate=If}8
v12@0:4@?8
v16@0:4@8i12
v16@0:4@8r^{shared_ptr<md::LabelMarker>=^{LabelMarker}^{__shared_weak_count}}12
v28@0:4@8i12i16d20
v24@0:4d8{CGPoint=ff}16
v28@0:4d8{CGPoint=ff}16@?24
v32@0:4{CGPoint=ff}8d16d24
v20@0:4{CGPoint=ff}8B16
v24@0:4{CGPoint=ff}8d16
B16@0:4{CGPoint=ff}8
v16@0:4B8i12
v24@0:4i8i12i16i20
v28@0:4d8d16@24
v20@0:4@8d12
v20@0:4@8r^{Coordinate3D<Radians, double>={Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<MeterUnitDescription, double>=d}}12r^{Unit<RadianUnitDescription, double>=d}16
v16@0:4@8r^{Coordinate3D<Radians, double>={Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<MeterUnitDescription, double>=d}}12
v28@0:4d8{CGPoint=ff}16@?<v@?>24
v12@0:4@"<VKGesturingCameraController>"8
v20@0:4@"<VKTrackableAnnotation>"8B12B16
@"<VKTrackableAnnotation>"8@0:4
v12@0:4r^{shared_ptr<md::FeatureMarker>=^{FeatureMarker}^{__shared_weak_count}}8
r^{MapEngine=^^?{shared_ptr<md::TaskContext>=^{TaskContext}^{__shared_weak_count}}{_retain_ptr<GEOResourceManifestConfiguration *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}^{Device}{_retain_ptr<_MapEngineRenderQueueSource *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{unique_ptr<ggl::DisplayLink, std::__1::default_delete<ggl::DisplayLink> >={__compressed_pair<ggl::DisplayLink *, std::__1::default_delete<ggl::DisplayLink> >=^{DisplayLink}}}{unique_ptr<ggl::SnapshotRunLoop, std::__1::default_delete<ggl::SnapshotRunLoop> >={__compressed_pair<ggl::SnapshotRunLoop *, std::__1::default_delete<ggl::SnapshotRunLoop> >=^{SnapshotRunLoop}}}^{RunLoop}{unique_ptr<md::AnimationManager, std::__1::default_delete<md::AnimationManager> >={__compressed_pair<md::AnimationManager *, std::__1::default_delete<md::AnimationManager> >=^{AnimationManager}}}{unique_ptr<md::AnimationRunner, std::__1::default_delete<md::AnimationRunner> >={__compressed_pair<md::AnimationRunner *, std::__1::default_delete<md::AnimationRunner> >=^{AnimationRunner}}}{shared_ptr<md::RunLoopController>=^{RunLoopController}^{__shared_weak_count}}@@@@{unique_ptr<md::CartographicRenderer, std::__1::default_delete<md::CartographicRenderer> >={__compressed_pair<md::CartographicRenderer *, std::__1::default_delete<md::CartographicRenderer> >=^{CartographicRenderer}}}{unique_ptr<md::realistic::RealisticRenderer, std::__1::default_delete<md::realistic::RealisticRenderer> >={__compressed_pair<md::realistic::RealisticRenderer *, std::__1::default_delete<md::realistic::RealisticRenderer> >=^{RealisticRenderer}}}^{Renderer}{unique_ptr<md::LayoutContext, std::__1::default_delete<md::LayoutContext> >={__compressed_pair<md::LayoutContext *, std::__1::default_delete<md::LayoutContext> >=^{LayoutContext}}}{_retain_ptr<VKCamera *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{shared_ptr<md::LabelManager>=^{LabelManager}^{__shared_weak_count}}{shared_ptr<md::LabelManager>=^{LabelManager}^{__shared_weak_count}}{unique_ptr<md::LogicManager, std::__1::default_delete<md::LogicManager> >={__compressed_pair<md::LogicManager *, std::__1::default_delete<md::LogicManager> >=^{LogicManager}}}BBB{atomic<bool>=AB}{atomic<bool>=AB}B}8@0:4
{shared_ptr<gss::StyleSheet<gss::PropertyID> >=^{StyleSheet<gss::PropertyID>}^{__shared_weak_count}}8@0:4
{shared_ptr<gss::CartoStyle<gss::PropertyID> >=^{CartoStyle<gss::PropertyID>}^{__shared_weak_count}}16@0:4{shared_ptr<md::FeatureMarker>=^{FeatureMarker}^{__shared_weak_count}}8
{shared_ptr<md::FeatureMarker>=^{FeatureMarker}^{__shared_weak_count}}16@0:4{CGPoint=ff}8
v16@0:4{shared_ptr<md::DebugTreeNode>=^{DebugTreeNode}^{__shared_weak_count}}8
@32@0:4@8f12i16Q20B28
@"VKMapModel"
{CGSize="width"f"height"f}
@"VKCamera"
{shared_ptr<md::AnchorContext>="__ptr_"^{AnchorContext}"__cntrl_"^{__shared_weak_count}}
@"<VKInteractiveMapDelegate>"
{Coordinate3D<Radians, double>={Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<MeterUnitDescription, double>=d}}16@0:4r^{Matrix<double, 2, 1>=[2d]}8r^{CameraFrame<geo::Radians, double>={Coordinate3D<Radians, double>={Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<MeterUnitDescription, double>=d}}{Unit<MeterUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}}12
{Matrix<double, 2, 1>=[2d]}16@0:4r^{Coordinate3D<Radians, double>={Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<MeterUnitDescription, double>=d}}8r^{CameraFrame<geo::Radians, double>={Coordinate3D<Radians, double>={Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<MeterUnitDescription, double>=d}}{Unit<MeterUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}}12
{RigidTransform<double>={Quaternion<double>={Matrix<double, 3, 1>=[3d]}d}{Matrix<double, 3, 1>=[3d]}}12@0:4r^{CameraFrame<geo::Radians, double>={Coordinate3D<Radians, double>={Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<MeterUnitDescription, double>=d}}{Unit<MeterUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}}8
{Matrix<double, 4, 4>=[16d]}12@0:4r^{CameraFrame<geo::Radians, double>={Coordinate3D<Radians, double>={Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<MeterUnitDescription, double>=d}}{Unit<MeterUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}}8
d12@0:4r^{Coordinate3D<Radians, double>={Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<MeterUnitDescription, double>=d}}8
v12@0:4r^{CameraFrame<geo::Radians, double>={Coordinate3D<Radians, double>={Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<MeterUnitDescription, double>=d}}{Unit<MeterUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}}8
{CameraFrame<geo::Radians, double>={Coordinate3D<Radians, double>={Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<MeterUnitDescription, double>=d}}{Unit<MeterUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}}44@0:4r^{CameraFrame<geo::Radians, double>={Coordinate3D<Radians, double>={Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<MeterUnitDescription, double>=d}}{Unit<MeterUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}}8{Coordinate3D<Radians, double>={Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<MeterUnitDescription, double>=d}}12d36
@"NSDictionary"8@0:4
@"NSString"12@0:4B8
v21@0:4@"VKAnimation"8{DisplayStyle=CCCCC}12@?<v@?>17
v18@0:4{DisplayStyle=CCCCC}8{DisplayStyle=CCCCC}13
v13@0:4{DisplayStyle=CCCCC}8
B13@0:4{DisplayStyle=CCCCC}8
{DisplayStyle=CCCCC}8@0:4
v21@0:4f8{DisplayStyle=CCCCC}12i17
v20@0:4{CGPoint=ff}8C16
@?<i@?dddd>8@0:4
@?<B@?{?=dd}>8@0:4
^{LabelSettings=}8@0:4
@"NSArray"8@0:4
@"NSArray"16@0:4{CGPoint=ff}8
v12@0:4@"VKTransitLineMarker"8
@"VKObjectBoundsContext"8@0:4
{?=dd}16@0:4{CGPoint=ff}8
{CGPoint=ff}24@0:4{?=dd}8
v12@0:4@"<VKOverlay>"8
@"NSSet"8@0:4
v12@0:4@"VKRasterOverlay"8
v16@0:4@"VKRasterOverlay"8@"VKRasterOverlay"12
v12@0:4@"VKAnchorWrapper"8
v48@0:4B8i12{?=dd}16d32@"VKCameraController<VKNavigationCameraController>"40@?<v@?B>44
@"<VKInteractiveMapDelegate>"8@0:4
v12@0:4@"<VKInteractiveMapDelegate>"8
@"<VKRouteMatchedAnnotationPresentation>"8@0:4
v12@0:4@"<VKRouteMatchedAnnotationPresentation>"8
@"VKAnchorWrapper"8@0:4
B20@0:4i8i12@"GEOResourceManifestConfiguration"16
B20@0:4i8i12@16
v21@0:4@8{DisplayStyle=CCCCC}12@?17
v48@0:4B8i12{?=dd}16d32@40@?44
v12@0:4@"VKMapModel"8
v16@0:4@"VKMapModel"8B12
v16@0:4@"VKMapModel"8@"NSError"12
v16@0:4@"VKMapModel"8r^{shared_ptr<md::LabelMarker>=}12
v28@0:4@"VKMapModel"8i12i16d20
v16@0:4@8r^{shared_ptr<md::LabelMarker>=}12
v12@0:4r^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}8
{VehicleState=B}8@0:4
v9@0:4{VehicleState=B}8
@16@0:4^{MapEngine=^^?{shared_ptr<md::TaskContext>=^{TaskContext}^{__shared_weak_count}}{_retain_ptr<GEOResourceManifestConfiguration *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}^{Device}{_retain_ptr<_MapEngineRenderQueueSource *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{unique_ptr<ggl::DisplayLink, std::__1::default_delete<ggl::DisplayLink> >={__compressed_pair<ggl::DisplayLink *, std::__1::default_delete<ggl::DisplayLink> >=^{DisplayLink}}}{unique_ptr<ggl::SnapshotRunLoop, std::__1::default_delete<ggl::SnapshotRunLoop> >={__compressed_pair<ggl::SnapshotRunLoop *, std::__1::default_delete<ggl::SnapshotRunLoop> >=^{SnapshotRunLoop}}}^{RunLoop}{unique_ptr<md::AnimationManager, std::__1::default_delete<md::AnimationManager> >={__compressed_pair<md::AnimationManager *, std::__1::default_delete<md::AnimationManager> >=^{AnimationManager}}}{unique_ptr<md::AnimationRunner, std::__1::default_delete<md::AnimationRunner> >={__compressed_pair<md::AnimationRunner *, std::__1::default_delete<md::AnimationRunner> >=^{AnimationRunner}}}{shared_ptr<md::RunLoopController>=^{RunLoopController}^{__shared_weak_count}}@@@@{unique_ptr<md::CartographicRenderer, std::__1::default_delete<md::CartographicRenderer> >={__compressed_pair<md::CartographicRenderer *, std::__1::default_delete<md::CartographicRenderer> >=^{CartographicRenderer}}}{unique_ptr<md::realistic::RealisticRenderer, std::__1::default_delete<md::realistic::RealisticRenderer> >={__compressed_pair<md::realistic::RealisticRenderer *, std::__1::default_delete<md::realistic::RealisticRenderer> >=^{RealisticRenderer}}}^{Renderer}{unique_ptr<md::LayoutContext, std::__1::default_delete<md::LayoutContext> >={__compressed_pair<md::LayoutContext *, std::__1::default_delete<md::LayoutContext> >=^{LayoutContext}}}{_retain_ptr<VKCamera *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{shared_ptr<md::LabelManager>=^{LabelManager}^{__shared_weak_count}}{shared_ptr<md::LabelManager>=^{LabelManager}^{__shared_weak_count}}{unique_ptr<md::LogicManager, std::__1::default_delete<md::LogicManager> >={__compressed_pair<md::LogicManager *, std::__1::default_delete<md::LogicManager> >=^{LogicManager}}}BBB{atomic<bool>=AB}{atomic<bool>=AB}B}8B12
v12@0:4r^{shared_ptr<ggl::Device>=^{Device}^{__shared_weak_count}}8
{shared_ptr<gss::CartoStyle<gss::PropertyID> >=^{CartoStyle<gss::PropertyID>}^{__shared_weak_count}}12@0:4r^{shared_ptr<md::FeatureMarker>=^{FeatureMarker}^{__shared_weak_count}}8
{shared_ptr<gss::CartoStyle<gss::PropertyID> >=^{CartoStyle<gss::PropertyID>}^{__shared_weak_count}}16@0:4{CGPoint=ff}8
{Matrix<double, 3, 1>=[3d]}12@0:4r^{Coordinate3D<Radians, double>={Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<MeterUnitDescription, double>=d}}8
d16@0:4{Unit<RadianUnitDescription, double>=d}8
{CameraFrame<geo::Radians, double>={Coordinate3D<Radians, double>={Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<MeterUnitDescription, double>=d}}{Unit<MeterUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}}20@0:4r^{Matrix<double, 3, 1>=[3d]}8r^{Matrix<double, 3, 1>=[3d]}12r^{Matrix<double, 3, 1>=[3d]}16
^{CartographicLayer=^^?{CommandBufferIdSet={vector<md::CommandBufferId, std::__1::allocator<md::CommandBufferId> >=^C^C{__compressed_pair<md::CommandBufferId *, std::__1::allocator<md::CommandBufferId> >=^C}}}{map<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer> >, std::__1::less<md::CommandBufferId>, std::__1::allocator<std::__1::pair<const md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer> > > > >={__tree<std::__1::__value_type<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer> > >, std::__1::__map_value_compare<md::CommandBufferId, std::__1::__value_type<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer> > >, std::__1::less<md::CommandBufferId>, true>, std::__1::allocator<std::__1::__value_type<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<md::CommandBufferId, std::__1::__value_type<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer> > >, std::__1::less<md::CommandBufferId>, true> >=L}}}BI^^?^{CartographicRenderer}C}
@"VKSharedResources"
@"<MDRenderTarget>"
v16@0:4@8^{LayoutContext=@{shared_ptr<md::ViewTransform>=^{ViewTransform}^{__shared_weak_count}}{shared_ptr<md::AnchorContext>=^{AnchorContext}^{__shared_weak_count}}@@{shared_ptr<gss::StylesheetManager<gss::PropertyID> >=^{StylesheetManager<gss::PropertyID>}^{__shared_weak_count}}{shared_ptr<gss::StylesheetManager<gss::ScenePropertyID> >=^{StylesheetManager<gss::ScenePropertyID>}^{__shared_weak_count}}{VKEdgeInsets=ffff}{VKEdgeInsets=ffff}C{shared_ptr<ggl::PolygonBase::MeshMesh>=^{MeshMesh}^{__shared_weak_count}}{shared_ptr<ggl::PolygonBase::MeshMesh>=^{MeshMesh}^{__shared_weak_count}}{shared_ptr<ggl::TextureMesh::MeshMesh>=^{MeshMesh}^{__shared_weak_count}}{StencilManager=CCC{ClearItem=C{Matrix<float, 4, 1>=[4f]}BfCI}}{shared_ptr<ggl::Device>=^{Device}^{__shared_weak_count}}{Loader={unique_ptr<ggl::LoaderImpl, std::__1::default_delete<ggl::LoaderImpl> >={__compressed_pair<ggl::LoaderImpl *, std::__1::default_delete<ggl::LoaderImpl> >=^{LoaderImpl}}}}ddBBBBB{Coordinate3D<Radians, double>={Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<MeterUnitDescription, double>=d}}fffi^{View}^{View}^{Viewport}^{ARContext}{array<std::__1::unique_ptr<md::LogicContext, std::__1::default_delete<md::LogicContext> >, 4>=[4{unique_ptr<md::LogicContext, std::__1::default_delete<md::LogicContext> >={__compressed_pair<md::LogicContext *, std::__1::default_delete<md::LogicContext> >=^{LogicContext}}}]}}12
v20@0:4@8^{LayoutContext=@{shared_ptr<md::ViewTransform>=^{ViewTransform}^{__shared_weak_count}}{shared_ptr<md::AnchorContext>=^{AnchorContext}^{__shared_weak_count}}@@{shared_ptr<gss::StylesheetManager<gss::PropertyID> >=^{StylesheetManager<gss::PropertyID>}^{__shared_weak_count}}{shared_ptr<gss::StylesheetManager<gss::ScenePropertyID> >=^{StylesheetManager<gss::ScenePropertyID>}^{__shared_weak_count}}{VKEdgeInsets=ffff}{VKEdgeInsets=ffff}C{shared_ptr<ggl::PolygonBase::MeshMesh>=^{MeshMesh}^{__shared_weak_count}}{shared_ptr<ggl::PolygonBase::MeshMesh>=^{MeshMesh}^{__shared_weak_count}}{shared_ptr<ggl::TextureMesh::MeshMesh>=^{MeshMesh}^{__shared_weak_count}}{StencilManager=CCC{ClearItem=C{Matrix<float, 4, 1>=[4f]}BfCI}}{shared_ptr<ggl::Device>=^{Device}^{__shared_weak_count}}{Loader={unique_ptr<ggl::LoaderImpl, std::__1::default_delete<ggl::LoaderImpl> >={__compressed_pair<ggl::LoaderImpl *, std::__1::default_delete<ggl::LoaderImpl> >=^{LoaderImpl}}}}ddBBBBB{Coordinate3D<Radians, double>={Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<MeterUnitDescription, double>=d}}fffi^{View}^{View}^{Viewport}^{ARContext}{array<std::__1::unique_ptr<md::LogicContext, std::__1::default_delete<md::LogicContext> >, 4>=[4{unique_ptr<md::LogicContext, std::__1::default_delete<md::LogicContext> >={__compressed_pair<md::LogicContext *, std::__1::default_delete<md::LogicContext> >=^{LogicContext}}}]}}12^{RenderQueue=^^?{shared_ptr<ggl::RenderQueue>=^{RenderQueue}^{__shared_weak_count}}}16
^{CartographicLayer=^^?{CommandBufferIdSet={vector<md::CommandBufferId, std::__1::allocator<md::CommandBufferId> >=^C^C{__compressed_pair<md::CommandBufferId *, std::__1::allocator<md::CommandBufferId> >=^C}}}{map<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer> >, std::__1::less<md::CommandBufferId>, std::__1::allocator<std::__1::pair<const md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer> > > > >={__tree<std::__1::__value_type<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer> > >, std::__1::__map_value_compare<md::CommandBufferId, std::__1::__value_type<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer> > >, std::__1::less<md::CommandBufferId>, true>, std::__1::allocator<std::__1::__value_type<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<md::CommandBufferId, std::__1::__value_type<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer> > >, std::__1::less<md::CommandBufferId>, true> >=L}}}BI^^?^{CartographicRenderer}C}8@0:4
v12@0:4^{CartographicLayer=^^?{CommandBufferIdSet={vector<md::CommandBufferId, std::__1::allocator<md::CommandBufferId> >=^C^C{__compressed_pair<md::CommandBufferId *, std::__1::allocator<md::CommandBufferId> >=^C}}}{map<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer> >, std::__1::less<md::CommandBufferId>, std::__1::allocator<std::__1::pair<const md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer> > > > >={__tree<std::__1::__value_type<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer> > >, std::__1::__map_value_compare<md::CommandBufferId, std::__1::__value_type<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer> > >, std::__1::less<md::CommandBufferId>, true>, std::__1::allocator<std::__1::__value_type<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<md::CommandBufferId, std::__1::__value_type<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer> > >, std::__1::less<md::CommandBufferId>, true> >=L}}}BI^^?^{CartographicRenderer}C}8
@"<VKAnimationRunner>"
@16@0:4i8@12
@12@0:4i8
@24@0:4d8i16@20
@16@0:4d8
@20@0:4d8@16
@"NSLocale"
@"VKTileProvider"
[2@"VKTileProvider"]
[33B]
[2@"VKRasterOverlayTileSource"]
@"VKSceneConfiguration"
@"<VKMapModelDelegate>"
@"<GEORoutePreloadSession>"
{VehicleState="_isParked"B}
{Matrix<float, 4, 1>="_e"[4f]}
@"NSMutableSet"
@"NSMutableArray"
[9B]
^{CartographicRenderer=^^?{shared_ptr<md::TaskContext>=^{TaskContext}^{__shared_weak_count}}{unique_ptr<md::RenderQueue, std::__1::default_delete<md::RenderQueue> >={__compressed_pair<md::RenderQueue *, std::__1::default_delete<md::RenderQueue> >=^{RenderQueue}}}[28^{RenderLayer}][65^{RenderLayer}]^{RunLoopController}^{MapEngine}@@@@{shared_ptr<gss::StylesheetManager<gss::PropertyID> >=^{StylesheetManager<gss::PropertyID>}^{__shared_weak_count}}^{CommandBuffer}^{AnimationRunner}}
^{LogicManager=^^?[4^{Logic}]}
[1@"VKTrafficTileSource"]
{unique_ptr<md::TrafficSharedResources, std::__1::default_delete<md::TrafficSharedResources> >="__ptr_"{__compressed_pair<md::TrafficSharedResources *, std::__1::default_delete<md::TrafficSharedResources> >="__value_"^{TrafficSharedResources}}}
{shared_ptr<md::DataOverrideManager>="__ptr_"^{DataOverrideManager}"__cntrl_"^{__shared_weak_count}}
{ClearItem="colorMask"C"color"{Matrix<float, 4, 1>="_e"[4f]}"clearDepthBuffer"B"depth"f"clearStencilBuffer"C"stencil"I}
{FeatureAttributeSet="_attributes"{vector<gss::FeatureAttributePair, std::__1::allocator<gss::FeatureAttributePair> >="__begin_"^{FeatureAttributePair}"__end_"^{FeatureAttributePair}"__end_cap_"{__compressed_pair<gss::FeatureAttributePair *, std::__1::allocator<gss::FeatureAttributePair> >="__value_"^{FeatureAttributePair}}}}
{shared_ptr<gss::StylesheetQuery<gss::PropertyID> >="__ptr_"^{StylesheetQuery<gss::PropertyID>}"__cntrl_"^{__shared_weak_count}}
@"VKPolylineOverlay"
@"VKNavigationPuck"
{set<geo::_retain_ptr<VKOverlay *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::less<geo::_retain_ptr<VKOverlay *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, std::__1::allocator<geo::_retain_ptr<VKOverlay *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >="__tree_"{__tree<geo::_retain_ptr<VKOverlay *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::less<geo::_retain_ptr<VKOverlay *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, std::__1::allocator<geo::_retain_ptr<VKOverlay *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >="__begin_node_"^{__tree_end_node<std::__1::__tree_node_base<void *> *>}"__pair1_"{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::_retain_ptr<VKOverlay *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, void *> > >="__value_"{__tree_end_node<std::__1::__tree_node_base<void *> *>="__left_"^{__tree_node_base<void *>}}}"__pair3_"{__compressed_pair<unsigned long, std::__1::less<geo::_retain_ptr<VKOverlay *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >="__value_"L}}}
@"NSSet"
{PolylineCoordinate="index"I"offset"f}
v12@0:4@"VKTileProvider"8
v12@0:4@"NSError"8
i16@0:4@"VKTileSource"8i12
i16@0:4@8i12
v12@0:4@"GEOExperimentConfiguration"8
v16@0:4@"VKPolylineOverlay"8@"VKRouteLine"12
v12@0:4@"GEOResourceManifestManager"8
v20@0:4@"GEOResourceManifestManager"8@"GEOActiveTileGroup"12@"GEOActiveTileGroup"16
v20@0:4@8@12@16
r^{TrafficSharedResources={TrafficSharedPipelineStates={shared_ptr<ggl::SolidTraffic::BasePipelineState>=^{BasePipelineState}^{__shared_weak_count}}{shared_ptr<ggl::TrafficGlow::BasePipelineState>=^{BasePipelineState}^{__shared_weak_count}}{shared_ptr<ggl::OptimizedTraffic::BasePipelineState>=^{BasePipelineState}^{__shared_weak_count}}}{TrafficSharedRenderStates={unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> >={__compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> >=^{RenderState}}}{unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> >={__compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> >=^{RenderState}}}{unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> >={__compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> >=^{RenderState}}}{unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> >={__compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> >=^{RenderState}}}{unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> >={__compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> >=^{RenderState}}}{unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> >={__compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> >=^{RenderState}}}}^{IsoAlphaAtlas}}8@0:4
{shared_ptr<md::CMercatorTerrainHeightCache>=^{CMercatorTerrainHeightCache}^{__shared_weak_count}}8@0:4
i12@0:4C8
@20@0:4C8@12B16
@16@0:4C8@12
@12@0:4C8
@16@0:4C8B12
v17@0:4@8{DisplayStyle=CCCCC}12
f12@0:4^{LayoutContext=@{shared_ptr<md::ViewTransform>=^{ViewTransform}^{__shared_weak_count}}{shared_ptr<md::AnchorContext>=^{AnchorContext}^{__shared_weak_count}}@@{shared_ptr<gss::StylesheetManager<gss::PropertyID> >=^{StylesheetManager<gss::PropertyID>}^{__shared_weak_count}}{shared_ptr<gss::StylesheetManager<gss::ScenePropertyID> >=^{StylesheetManager<gss::ScenePropertyID>}^{__shared_weak_count}}{VKEdgeInsets=ffff}{VKEdgeInsets=ffff}C{shared_ptr<ggl::PolygonBase::MeshMesh>=^{MeshMesh}^{__shared_weak_count}}{shared_ptr<ggl::PolygonBase::MeshMesh>=^{MeshMesh}^{__shared_weak_count}}{shared_ptr<ggl::TextureMesh::MeshMesh>=^{MeshMesh}^{__shared_weak_count}}{StencilManager=CCC{ClearItem=C{Matrix<float, 4, 1>=[4f]}BfCI}}{shared_ptr<ggl::Device>=^{Device}^{__shared_weak_count}}{Loader={unique_ptr<ggl::LoaderImpl, std::__1::default_delete<ggl::LoaderImpl> >={__compressed_pair<ggl::LoaderImpl *, std::__1::default_delete<ggl::LoaderImpl> >=^{LoaderImpl}}}}ddBBBBB{Coordinate3D<Radians, double>={Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<MeterUnitDescription, double>=d}}fffi^{View}^{View}^{Viewport}^{ARContext}{array<std::__1::unique_ptr<md::LogicContext, std::__1::default_delete<md::LogicContext> >, 4>=[4{unique_ptr<md::LogicContext, std::__1::default_delete<md::LogicContext> >={__compressed_pair<md::LogicContext *, std::__1::default_delete<md::LogicContext> >=^{LogicContext}}}]}}8
v16@0:4{CGSize=ff}8
v20@0:4{shared_ptr<gss::StylesheetManager<gss::PropertyID> >=^{StylesheetManager<gss::PropertyID>}^{__shared_weak_count}}8B16
v24@0:4I8@12C16@20
@40@0:4@8^{CartographicRenderer=^^?{shared_ptr<md::TaskContext>=^{TaskContext}^{__shared_weak_count}}{unique_ptr<md::RenderQueue, std::__1::default_delete<md::RenderQueue> >={__compressed_pair<md::RenderQueue *, std::__1::default_delete<md::RenderQueue> >=^{RenderQueue}}}[28^{RenderLayer}][65^{RenderLayer}]^{RunLoopController}^{MapEngine}@@@@{shared_ptr<gss::StylesheetManager<gss::PropertyID> >=^{StylesheetManager<gss::PropertyID>}^{__shared_weak_count}}^{CommandBuffer}^{AnimationRunner}}12I16@20@24{shared_ptr<md::TaskContext>=^{TaskContext}^{__shared_weak_count}}28^{LogicManager=^^?[4^{Logic}]}36
i12@0:4@8
i16@0:4@8B12
v20@0:4i8i12B16
v24@0:4{Matrix<float, 4, 1>=[4f]}8
^{LabelSettings={LabelSettings_Presentation=^{LabelSettings}}{LabelSettings_Navigation=^{LabelSettings}}{LabelSettings_Markers=^{LabelSettings}}{shared_ptr<md::LabelManager>=^{LabelManager}^{__shared_weak_count}}{unique_ptr<md::LabelSettingsData, std::__1::default_delete<md::LabelSettingsData> >={__compressed_pair<md::LabelSettingsData *, std::__1::default_delete<md::LabelSettingsData> >=^{LabelSettingsData}}}}8@0:4
^{COverlayLayer=^^?{CommandBufferIdSet={vector<md::CommandBufferId, std::__1::allocator<md::CommandBufferId> >=^C^C{__compressed_pair<md::CommandBufferId *, std::__1::allocator<md::CommandBufferId> >=^C}}}{map<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer> >, std::__1::less<md::CommandBufferId>, std::__1::allocator<std::__1::pair<const md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer> > > > >={__tree<std::__1::__value_type<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer> > >, std::__1::__map_value_compare<md::CommandBufferId, std::__1::__value_type<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer> > >, std::__1::less<md::CommandBufferId>, true>, std::__1::allocator<std::__1::__value_type<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<md::CommandBufferId, std::__1::__value_type<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer> > >, std::__1::less<md::CommandBufferId>, true> >=L}}}BI^^?^{CartographicRenderer}C{set<geo::_retain_ptr<VKTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::less<geo::_retain_ptr<VKTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, std::__1::allocator<geo::_retain_ptr<VKTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >={__tree<geo::_retain_ptr<VKTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::less<geo::_retain_ptr<VKTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, std::__1::allocator<geo::_retain_ptr<VKTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::_retain_ptr<VKTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<geo::_retain_ptr<VKTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >=L}}}{ZRange=CC}i^{CartographicTilesCache}^{COverlayRenderResources}C{vector<VKTile *, std::__1::allocator<VKTile *> >=^@^@{__compressed_pair<VKTile **, std::__1::allocator<VKTile *> >=^@}}i}12@0:4I8
@12@0:4I8
@16@0:4@8C12
v12@0:4r^{shared_ptr<md::LabelMarker>=^{LabelMarker}^{__shared_weak_count}}8
{shared_ptr<md::FeatureMarker>=^{FeatureMarker}^{__shared_weak_count}}40@0:4{CGPoint=ff}8{Matrix<double, 3, 1>=[3d]}16
v20@0:4{shared_ptr<md::DebugTreeNode>=^{DebugTreeNode}^{__shared_weak_count}}8B16
{Matrix<float, 4, 1>=[4f]}8@0:4
{PolylineCoordinate=If}8@0:4
r*12@0:4i8
L8@0:4
^{MapEngine=^^?{shared_ptr<md::TaskContext>=^{TaskContext}^{__shared_weak_count}}{_retain_ptr<GEOResourceManifestConfiguration *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}^{Device}{_retain_ptr<_MapEngineRenderQueueSource *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{unique_ptr<ggl::DisplayLink, std::__1::default_delete<ggl::DisplayLink> >={__compressed_pair<ggl::DisplayLink *, std::__1::default_delete<ggl::DisplayLink> >=^{DisplayLink}}}{unique_ptr<ggl::SnapshotRunLoop, std::__1::default_delete<ggl::SnapshotRunLoop> >={__compressed_pair<ggl::SnapshotRunLoop *, std::__1::default_delete<ggl::SnapshotRunLoop> >=^{SnapshotRunLoop}}}^{RunLoop}{unique_ptr<md::AnimationManager, std::__1::default_delete<md::AnimationManager> >={__compressed_pair<md::AnimationManager *, std::__1::default_delete<md::AnimationManager> >=^{AnimationManager}}}{unique_ptr<md::AnimationRunner, std::__1::default_delete<md::AnimationRunner> >={__compressed_pair<md::AnimationRunner *, std::__1::default_delete<md::AnimationRunner> >=^{AnimationRunner}}}{shared_ptr<md::RunLoopController>=^{RunLoopController}^{__shared_weak_count}}@@@@{unique_ptr<md::CartographicRenderer, std::__1::default_delete<md::CartographicRenderer> >={__compressed_pair<md::CartographicRenderer *, std::__1::default_delete<md::CartographicRenderer> >=^{CartographicRenderer}}}{unique_ptr<md::realistic::RealisticRenderer, std::__1::default_delete<md::realistic::RealisticRenderer> >={__compressed_pair<md::realistic::RealisticRenderer *, std::__1::default_delete<md::realistic::RealisticRenderer> >=^{RealisticRenderer}}}^{Renderer}{unique_ptr<md::LayoutContext, std::__1::default_delete<md::LayoutContext> >={__compressed_pair<md::LayoutContext *, std::__1::default_delete<md::LayoutContext> >=^{LayoutContext}}}{_retain_ptr<VKCamera *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{shared_ptr<md::LabelManager>=^{LabelManager}^{__shared_weak_count}}{shared_ptr<md::LabelManager>=^{LabelManager}^{__shared_weak_count}}{unique_ptr<md::LogicManager, std::__1::default_delete<md::LogicManager> >={__compressed_pair<md::LogicManager *, std::__1::default_delete<md::LogicManager> >=^{LogicManager}}}BBB{atomic<bool>=AB}{atomic<bool>=AB}B}
^{AnimationRunner=^{MapEngine}}
@"VKCameraController"
{unique_ptr<md::RenderQueue, std::__1::default_delete<md::RenderQueue> >="__ptr_"{__compressed_pair<md::RenderQueue *, std::__1::default_delete<md::RenderQueue> >="__value_"^{RenderQueue}}}
^{Renderer=^^?{shared_ptr<md::TaskContext>=^{TaskContext}^{__shared_weak_count}}{unique_ptr<md::RenderQueue, std::__1::default_delete<md::RenderQueue> >={__compressed_pair<md::RenderQueue *, std::__1::default_delete<md::RenderQueue> >=^{RenderQueue}}}[28^{RenderLayer}][65^{RenderLayer}]^{RunLoopController}^{MapEngine}}
^{LayoutContext=@{shared_ptr<md::ViewTransform>=^{ViewTransform}^{__shared_weak_count}}{shared_ptr<md::AnchorContext>=^{AnchorContext}^{__shared_weak_count}}@@{shared_ptr<gss::StylesheetManager<gss::PropertyID> >=^{StylesheetManager<gss::PropertyID>}^{__shared_weak_count}}{shared_ptr<gss::StylesheetManager<gss::ScenePropertyID> >=^{StylesheetManager<gss::ScenePropertyID>}^{__shared_weak_count}}{VKEdgeInsets=ffff}{VKEdgeInsets=ffff}C{shared_ptr<ggl::PolygonBase::MeshMesh>=^{MeshMesh}^{__shared_weak_count}}{shared_ptr<ggl::PolygonBase::MeshMesh>=^{MeshMesh}^{__shared_weak_count}}{shared_ptr<ggl::TextureMesh::MeshMesh>=^{MeshMesh}^{__shared_weak_count}}{StencilManager=CCC{ClearItem=C{Matrix<float, 4, 1>=[4f]}BfCI}}{shared_ptr<ggl::Device>=^{Device}^{__shared_weak_count}}{Loader={unique_ptr<ggl::LoaderImpl, std::__1::default_delete<ggl::LoaderImpl> >={__compressed_pair<ggl::LoaderImpl *, std::__1::default_delete<ggl::LoaderImpl> >=^{LoaderImpl}}}}ddBBBBB{Coordinate3D<Radians, double>={Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<MeterUnitDescription, double>=d}}fffi^{View}^{View}^{Viewport}^{ARContext}{array<std::__1::unique_ptr<md::LogicContext, std::__1::default_delete<md::LogicContext> >, 4>=[4{unique_ptr<md::LogicContext, std::__1::default_delete<md::LogicContext> >={__compressed_pair<md::LogicContext *, std::__1::default_delete<md::LogicContext> >=^{LogicContext}}}]}}
@"<MDMapControllerDelegate>"
{PerspectiveView<double>="_transform"{RigidTransform<double>="_rotation"{Quaternion<double>="_imaginary"{Matrix<double, 3, 1>="_e"[3d]}"_scalar"d}"_translation"{Matrix<double, 3, 1>="_e"[3d]}}"_projectionMatrix"{Matrix<double, 4, 4>="_e"[16d]}"_inverseProjection"{Matrix<double, 4, 4>="_e"[16d]}"_ndcZNear"d"_size"{ViewSize="width"S"height"S}"_type"i"_verticalFOV"d"_near"d"_far"d}
@"ARSession"
v12@0:4@"VKCameraController"8
v16@0:4@"VKCameraController"8i12
v16@0:4@"VKCameraController"8B12
@"<VKTrackableAnnotationPresentation>"16@0:4@"VKCameraController"8@"<VKTrackableAnnotation>"12
{vector<std::__1::shared_ptr<md::LabelFeatureMarker>, std::__1::allocator<std::__1::shared_ptr<md::LabelFeatureMarker> > >=^{shared_ptr<md::LabelFeatureMarker>}^{shared_ptr<md::LabelFeatureMarker>}{__compressed_pair<std::__1::shared_ptr<md::LabelFeatureMarker> *, std::__1::allocator<std::__1::shared_ptr<md::LabelFeatureMarker> > >=^{shared_ptr<md::LabelFeatureMarker>}}}16@0:4{CGPoint=ff}8
v16@0:4B8B12
^{MapEngine=^^?{shared_ptr<md::TaskContext>=^{TaskContext}^{__shared_weak_count}}{_retain_ptr<GEOResourceManifestConfiguration *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}^{Device}{_retain_ptr<_MapEngineRenderQueueSource *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{unique_ptr<ggl::DisplayLink, std::__1::default_delete<ggl::DisplayLink> >={__compressed_pair<ggl::DisplayLink *, std::__1::default_delete<ggl::DisplayLink> >=^{DisplayLink}}}{unique_ptr<ggl::SnapshotRunLoop, std::__1::default_delete<ggl::SnapshotRunLoop> >={__compressed_pair<ggl::SnapshotRunLoop *, std::__1::default_delete<ggl::SnapshotRunLoop> >=^{SnapshotRunLoop}}}^{RunLoop}{unique_ptr<md::AnimationManager, std::__1::default_delete<md::AnimationManager> >={__compressed_pair<md::AnimationManager *, std::__1::default_delete<md::AnimationManager> >=^{AnimationManager}}}{unique_ptr<md::AnimationRunner, std::__1::default_delete<md::AnimationRunner> >={__compressed_pair<md::AnimationRunner *, std::__1::default_delete<md::AnimationRunner> >=^{AnimationRunner}}}{shared_ptr<md::RunLoopController>=^{RunLoopController}^{__shared_weak_count}}@@@@{unique_ptr<md::CartographicRenderer, std::__1::default_delete<md::CartographicRenderer> >={__compressed_pair<md::CartographicRenderer *, std::__1::default_delete<md::CartographicRenderer> >=^{CartographicRenderer}}}{unique_ptr<md::realistic::RealisticRenderer, std::__1::default_delete<md::realistic::RealisticRenderer> >={__compressed_pair<md::realistic::RealisticRenderer *, std::__1::default_delete<md::realistic::RealisticRenderer> >=^{RealisticRenderer}}}^{Renderer}{unique_ptr<md::LayoutContext, std::__1::default_delete<md::LayoutContext> >={__compressed_pair<md::LayoutContext *, std::__1::default_delete<md::LayoutContext> >=^{LayoutContext}}}{_retain_ptr<VKCamera *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{shared_ptr<md::LabelManager>=^{LabelManager}^{__shared_weak_count}}{shared_ptr<md::LabelManager>=^{LabelManager}^{__shared_weak_count}}{unique_ptr<md::LogicManager, std::__1::default_delete<md::LogicManager> >={__compressed_pair<md::LogicManager *, std::__1::default_delete<md::LogicManager> >=^{LogicManager}}}BBB{atomic<bool>=AB}{atomic<bool>=AB}B}8@0:4
@"GEOMapItemIdentifier"
{?="transitLineColor"{Matrix<float, 4, 1>="_e"[4f]}}
@16@0:4^{?={?=@*IIIIIQBQfQ@i}CCCCIfIII}8r^{?=@II{_NSRange=II}^{?}^{?}QQ{_NSRange=II}{_NSRange=II}B{_NSRange=II}{_NSRange=II}[2{_NSRange=II}][2{_NSRange=II}]}12
Q8@0:4
q8@0:4
{?={Matrix<float, 4, 1>=[4f]}}8@0:4
^v8@0:4
^{CLabelLayer=^^?{CommandBufferIdSet={vector<md::CommandBufferId, std::__1::allocator<md::CommandBufferId> >=^C^C{__compressed_pair<md::CommandBufferId *, std::__1::allocator<md::CommandBufferId> >=^C}}}{map<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer> >, std::__1::less<md::CommandBufferId>, std::__1::allocator<std::__1::pair<const md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer> > > > >={__tree<std::__1::__value_type<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer> > >, std::__1::__map_value_compare<md::CommandBufferId, std::__1::__value_type<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer> > >, std::__1::less<md::CommandBufferId>, true>, std::__1::allocator<std::__1::__value_type<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<md::CommandBufferId, std::__1::__value_type<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer> > >, std::__1::less<md::CommandBufferId>, true> >=L}}}BI^^?^{CartographicRenderer}C{CLabelDebug=^{CLabelLayer}}{shared_ptr<md::LabelManager>=^{LabelManager}^{__shared_weak_count}}@{_retain_ptr<GEOResourceManifestConfiguration *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{unique_ptr<md::LabelSettings, std::__1::default_delete<md::LabelSettings> >={__compressed_pair<md::LabelSettings *, std::__1::default_delete<md::LabelSettings> >=^{LabelSettings}}}^{CLabelCache}IBBB}
v16@0:4^{LabelManager=^^?{weak_ptr<md::LabelManager>=^{LabelManager}^{__shared_weak_count}}{_retain_ptr<VKSharedResources *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{shared_ptr<md::TaskContext>=^{TaskContext}^{__shared_weak_count}}@fICiCCBBBBBBBBBBBBBBBBBBBBBBBBBB{atomic<bool>=AB}BBBBBBBBBBBBBB{Box<unsigned int, 2>={Matrix<unsigned int, 2, 1>=[2I]}{Matrix<unsigned int, 2, 1>=[2I]}}{Box<unsigned int, 2>={Matrix<unsigned int, 2, 1>=[2I]}{Matrix<unsigned int, 2, 1>=[2I]}}BB^{LabelLayoutContext}{LabelLayoutContext=BBBBBCf{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}ddddddd{?={Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}fff}ffff{Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}{LabelAngle=C}f{Matrix<double, 4, 4>=[16d]}{Matrix<double, 4, 4>=[16d]}{Matrix<float, 2, 1>=[2f]}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}II{shared_ptr<const md::VenueLogicContext>=^{VenueLogicContext}^{__shared_weak_count}}}{LabelLayoutContext=BBBBBCf{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}ddddddd{?={Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}fff}ffff{Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}{LabelAngle=C}f{Matrix<double, 4, 4>=[16d]}{Matrix<double, 4, 4>=[16d]}{Matrix<float, 2, 1>=[2f]}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}II{shared_ptr<const md::VenueLogicContext>=^{VenueLogicContext}^{__shared_weak_count}}}{LabelNavLayoutContext={Box<double, 2>={Matrix<double, 2, 1>=[2d]}{Matrix<double, 2, 1>=[2d]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Matrix<double, 3, 1>=[3d]}{Matrix<float, 2, 1>=[2f]}d{shared_ptr<md::AnchorContext>=^{AnchorContext}^{__shared_weak_count}}B}[5d]di{unique_ptr<md::LabelExternalObjectsModerator, std::__1::default_delete<md::LabelExternalObjectsModerator> >={__compressed_pair<md::LabelExternalObjectsModerator *, std::__1::default_delete<md::LabelExternalObjectsModerator> >=^{LabelExternalObjectsModerator}}}{unique_ptr<md::LabelTransitSupport, std::__1::default_delete<md::LabelTransitSupport> >={__compressed_pair<md::LabelTransitSupport *, std::__1::default_delete<md::LabelTransitSupport> >=^{LabelTransitSupport}}}{unique_ptr<md::LabelCustomFeatureSupport, std::__1::default_delete<md::LabelCustomFeatureSupport> >={__compressed_pair<md::LabelCustomFeatureSupport *, std::__1::default_delete<md::LabelCustomFeatureSupport> >=^{LabelCustomFeatureSupport}}}{unique_ptr<md::LabelNavSupport, std::__1::default_delete<md::LabelNavSupport> >={__compressed_pair<md::LabelNavSupport *, std::__1::default_delete<md::LabelNavSupport> >=^{LabelNavSupport}}}{unique_ptr<md::LabelNavTrafficSupport, std::__1::default_delete<md::LabelNavTrafficSupport> >={__compressed_pair<md::LabelNavTrafficSupport *, std::__1::default_delete<md::LabelNavTrafficSupport> >=^{LabelNavTrafficSupport}}}{unique_ptr<md::LabelImageLoader, std::__1::default_delete<md::LabelImageLoader> >={__compressed_pair<md::LabelImageLoader *, std::__1::default_delete<md::LabelImageLoader> >=^{LabelImageLoader}}}{unique_ptr<md::LabelTextDataLoader, std::__1::default_delete<md::LabelTextDataLoader> >={__compressed_pair<md::LabelTextDataLoader *, std::__1::default_delete<md::LabelTextDataLoader> >=^{LabelTextDataLoader}}}{unique_ptr<md::LabelGlyphImageLoader, std::__1::default_delete<md::LabelGlyphImageLoader> >={__compressed_pair<md::LabelGlyphImageLoader *, std::__1::default_delete<md::LabelGlyphImageLoader> >=^{LabelGlyphImageLoader}}}{vector<std::__1::shared_ptr<md::LabelMapTile>, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > >=^{shared_ptr<md::LabelMapTile>}^{shared_ptr<md::LabelMapTile>}{__compressed_pair<std::__1::shared_ptr<md::LabelMapTile> *, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > >=^{shared_ptr<md::LabelMapTile>}}}{set<std::__1::shared_ptr<md::LabelMapTile>, std::__1::less<std::__1::shared_ptr<md::LabelMapTile> >, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > >={__tree<std::__1::shared_ptr<md::LabelMapTile>, std::__1::less<std::__1::shared_ptr<md::LabelMapTile> >, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::shared_ptr<md::LabelMapTile>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<std::__1::shared_ptr<md::LabelMapTile> > >=L}}}{unique_ptr<md::LabelFeaturePool, std::__1::default_delete<md::LabelFeaturePool> >={__compressed_pair<md::LabelFeaturePool *, std::__1::default_delete<md::LabelFeaturePool> >=^{LabelFeaturePool}}}{unique_ptr<md::LabelFeatureStyler, std::__1::default_delete<md::LabelFeatureStyler> >={__compressed_pair<md::LabelFeatureStyler *, std::__1::default_delete<md::LabelFeatureStyler> >=^{LabelFeatureStyler}}}{unique_ptr<md::LabelPool, std::__1::default_delete<md::LabelPool> >={__compressed_pair<md::LabelPool *, std::__1::default_delete<md::LabelPool> >=^{LabelPool}}}{vector<std::__1::shared_ptr<md::Label>, std::__1::allocator<std::__1::shared_ptr<md::Label> > >=^{shared_ptr<md::Label>}^{shared_ptr<md::Label>}{__compressed_pair<std::__1::shared_ptr<md::Label> *, std::__1::allocator<std::__1::shared_ptr<md::Label> > >=^{shared_ptr<md::Label>}}}{vector<std::__1::shared_ptr<md::Label>, std::__1::allocator<std::__1::shared_ptr<md::Label> > >=^{shared_ptr<md::Label>}^{shared_ptr<md::Label>}{__compressed_pair<std::__1::shared_ptr<md::Label> *, std::__1::allocator<std::__1::shared_ptr<md::Label> > >=^{shared_ptr<md::Label>}}}{vector<md::Label *, std::__1::allocator<md::Label *> >=^^{Label}^^{Label}{__compressed_pair<md::Label **, std::__1::allocator<md::Label *> >=^^{Label}}}{unique_ptr<md::FontAtlas, std::__1::default_delete<md::FontAtlas> >={__compressed_pair<md::FontAtlas *, std::__1::default_delete<md::FontAtlas> >=^{FontAtlas}}}{unique_ptr<md::FontTrackingCache, std::__1::default_delete<md::FontTrackingCache> >={__compressed_pair<md::FontTrackingCache *, std::__1::default_delete<md::FontTrackingCache> >=^{FontTrackingCache}}}{?={unique_ptr<md::FontGlyphCache, std::__1::default_delete<md::FontGlyphCache> >={__compressed_pair<md::FontGlyphCache *, std::__1::default_delete<md::FontGlyphCache> >=^{FontGlyphCache}}}}{unique_ptr<md::LabelMesh, std::__1::default_delete<md::LabelMesh> >={__compressed_pair<md::LabelMesh *, std::__1::default_delete<md::LabelMesh> >=^{LabelMesh}}}{unique_ptr<md::LabelStyleCache, std::__1::default_delete<md::LabelStyleCache> >={__compressed_pair<md::LabelStyleCache *, std::__1::default_delete<md::LabelStyleCache> >=^{LabelStyleCache}}}{shared_ptr<gss::StylesheetManager<gss::ScenePropertyID> >=^{StylesheetManager<gss::ScenePropertyID>}^{__shared_weak_count}}{unique_ptr<md::LabelCollider, std::__1::default_delete<md::LabelCollider> >={__compressed_pair<md::LabelCollider *, std::__1::default_delete<md::LabelCollider> >=^{LabelCollider}}}{unique_ptr<md::OcclusionManager, std::__1::default_delete<md::OcclusionManager> >={__compressed_pair<md::OcclusionManager *, std::__1::default_delete<md::OcclusionManager> >=^{OcclusionManager}}}II{shared_ptr<md::LabelTrafficTilePool>=^{LabelTrafficTilePool}^{__shared_weak_count}}{mutex={_opaque_pthread_mutex_t=l[40c]}}{vector<std::__1::shared_ptr<md::LabelManagerCommand>, std::__1::allocator<std::__1::shared_ptr<md::LabelManagerCommand> > >=^{shared_ptr<md::LabelManagerCommand>}^{shared_ptr<md::LabelManagerCommand>}{__compressed_pair<std::__1::shared_ptr<md::LabelManagerCommand> *, std::__1::allocator<std::__1::shared_ptr<md::LabelManagerCommand> > >=^{shared_ptr<md::LabelManagerCommand>}}}IIIddQBIIIfI{array<bool, 12>=[12B]}fBB{shared_ptr<md::Label>=^{Label}^{__shared_weak_count}}{shared_ptr<md::LabelFeature>=^{LabelFeature}^{__shared_weak_count}}{LabelIdentifier=I}BiifiCBBBBBBBBBBBBBBB{atomic<bool>=AB}{atomic<bool>=AB}{atomic<bool>=AB}{atomic<bool>=AB}ii{shared_ptr<md::LabelMarker>=^{LabelMarker}^{__shared_weak_count}}{SelectedLabelState={Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}BC}{unique_ptr<md::Timer, std::__1::default_delete<md::Timer> >={__compressed_pair<md::Timer *, std::__1::default_delete<md::Timer> >=^{Timer}}}{unique_ptr<md::Timer, std::__1::default_delete<md::Timer> >={__compressed_pair<md::Timer *, std::__1::default_delete<md::Timer> >=^{Timer}}}{_retain_ptr<VKClientLocalizedStrings *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{?={shared_ptr<gss::StylesheetManager<gss::PropertyID> >=^{StylesheetManager<gss::PropertyID>}^{__shared_weak_count}}{shared_ptr<md::LabelMarker>=^{LabelMarker}^{__shared_weak_count}}{_retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}BBB}IBf{vector<std::__1::shared_ptr<md::NavLabel>, std::__1::allocator<std::__1::shared_ptr<md::NavLabel> > >=^{shared_ptr<md::NavLabel>}^{shared_ptr<md::NavLabel>}{__compressed_pair<std::__1::shared_ptr<md::NavLabel> *, std::__1::allocator<std::__1::shared_ptr<md::NavLabel> > >=^{shared_ptr<md::NavLabel>}}}}8B12
v12@0:4^{LabelManager=^^?{weak_ptr<md::LabelManager>=^{LabelManager}^{__shared_weak_count}}{_retain_ptr<VKSharedResources *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{shared_ptr<md::TaskContext>=^{TaskContext}^{__shared_weak_count}}@fICiCCBBBBBBBBBBBBBBBBBBBBBBBBBB{atomic<bool>=AB}BBBBBBBBBBBBBB{Box<unsigned int, 2>={Matrix<unsigned int, 2, 1>=[2I]}{Matrix<unsigned int, 2, 1>=[2I]}}{Box<unsigned int, 2>={Matrix<unsigned int, 2, 1>=[2I]}{Matrix<unsigned int, 2, 1>=[2I]}}BB^{LabelLayoutContext}{LabelLayoutContext=BBBBBCf{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}ddddddd{?={Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}fff}ffff{Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}{LabelAngle=C}f{Matrix<double, 4, 4>=[16d]}{Matrix<double, 4, 4>=[16d]}{Matrix<float, 2, 1>=[2f]}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}II{shared_ptr<const md::VenueLogicContext>=^{VenueLogicContext}^{__shared_weak_count}}}{LabelLayoutContext=BBBBBCf{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}ddddddd{?={Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}fff}ffff{Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}{LabelAngle=C}f{Matrix<double, 4, 4>=[16d]}{Matrix<double, 4, 4>=[16d]}{Matrix<float, 2, 1>=[2f]}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}II{shared_ptr<const md::VenueLogicContext>=^{VenueLogicContext}^{__shared_weak_count}}}{LabelNavLayoutContext={Box<double, 2>={Matrix<double, 2, 1>=[2d]}{Matrix<double, 2, 1>=[2d]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Matrix<double, 3, 1>=[3d]}{Matrix<float, 2, 1>=[2f]}d{shared_ptr<md::AnchorContext>=^{AnchorContext}^{__shared_weak_count}}B}[5d]di{unique_ptr<md::LabelExternalObjectsModerator, std::__1::default_delete<md::LabelExternalObjectsModerator> >={__compressed_pair<md::LabelExternalObjectsModerator *, std::__1::default_delete<md::LabelExternalObjectsModerator> >=^{LabelExternalObjectsModerator}}}{unique_ptr<md::LabelTransitSupport, std::__1::default_delete<md::LabelTransitSupport> >={__compressed_pair<md::LabelTransitSupport *, std::__1::default_delete<md::LabelTransitSupport> >=^{LabelTransitSupport}}}{unique_ptr<md::LabelCustomFeatureSupport, std::__1::default_delete<md::LabelCustomFeatureSupport> >={__compressed_pair<md::LabelCustomFeatureSupport *, std::__1::default_delete<md::LabelCustomFeatureSupport> >=^{LabelCustomFeatureSupport}}}{unique_ptr<md::LabelNavSupport, std::__1::default_delete<md::LabelNavSupport> >={__compressed_pair<md::LabelNavSupport *, std::__1::default_delete<md::LabelNavSupport> >=^{LabelNavSupport}}}{unique_ptr<md::LabelNavTrafficSupport, std::__1::default_delete<md::LabelNavTrafficSupport> >={__compressed_pair<md::LabelNavTrafficSupport *, std::__1::default_delete<md::LabelNavTrafficSupport> >=^{LabelNavTrafficSupport}}}{unique_ptr<md::LabelImageLoader, std::__1::default_delete<md::LabelImageLoader> >={__compressed_pair<md::LabelImageLoader *, std::__1::default_delete<md::LabelImageLoader> >=^{LabelImageLoader}}}{unique_ptr<md::LabelTextDataLoader, std::__1::default_delete<md::LabelTextDataLoader> >={__compressed_pair<md::LabelTextDataLoader *, std::__1::default_delete<md::LabelTextDataLoader> >=^{LabelTextDataLoader}}}{unique_ptr<md::LabelGlyphImageLoader, std::__1::default_delete<md::LabelGlyphImageLoader> >={__compressed_pair<md::LabelGlyphImageLoader *, std::__1::default_delete<md::LabelGlyphImageLoader> >=^{LabelGlyphImageLoader}}}{vector<std::__1::shared_ptr<md::LabelMapTile>, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > >=^{shared_ptr<md::LabelMapTile>}^{shared_ptr<md::LabelMapTile>}{__compressed_pair<std::__1::shared_ptr<md::LabelMapTile> *, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > >=^{shared_ptr<md::LabelMapTile>}}}{set<std::__1::shared_ptr<md::LabelMapTile>, std::__1::less<std::__1::shared_ptr<md::LabelMapTile> >, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > >={__tree<std::__1::shared_ptr<md::LabelMapTile>, std::__1::less<std::__1::shared_ptr<md::LabelMapTile> >, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::shared_ptr<md::LabelMapTile>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<std::__1::shared_ptr<md::LabelMapTile> > >=L}}}{unique_ptr<md::LabelFeaturePool, std::__1::default_delete<md::LabelFeaturePool> >={__compressed_pair<md::LabelFeaturePool *, std::__1::default_delete<md::LabelFeaturePool> >=^{LabelFeaturePool}}}{unique_ptr<md::LabelFeatureStyler, std::__1::default_delete<md::LabelFeatureStyler> >={__compressed_pair<md::LabelFeatureStyler *, std::__1::default_delete<md::LabelFeatureStyler> >=^{LabelFeatureStyler}}}{unique_ptr<md::LabelPool, std::__1::default_delete<md::LabelPool> >={__compressed_pair<md::LabelPool *, std::__1::default_delete<md::LabelPool> >=^{LabelPool}}}{vector<std::__1::shared_ptr<md::Label>, std::__1::allocator<std::__1::shared_ptr<md::Label> > >=^{shared_ptr<md::Label>}^{shared_ptr<md::Label>}{__compressed_pair<std::__1::shared_ptr<md::Label> *, std::__1::allocator<std::__1::shared_ptr<md::Label> > >=^{shared_ptr<md::Label>}}}{vector<std::__1::shared_ptr<md::Label>, std::__1::allocator<std::__1::shared_ptr<md::Label> > >=^{shared_ptr<md::Label>}^{shared_ptr<md::Label>}{__compressed_pair<std::__1::shared_ptr<md::Label> *, std::__1::allocator<std::__1::shared_ptr<md::Label> > >=^{shared_ptr<md::Label>}}}{vector<md::Label *, std::__1::allocator<md::Label *> >=^^{Label}^^{Label}{__compressed_pair<md::Label **, std::__1::allocator<md::Label *> >=^^{Label}}}{unique_ptr<md::FontAtlas, std::__1::default_delete<md::FontAtlas> >={__compressed_pair<md::FontAtlas *, std::__1::default_delete<md::FontAtlas> >=^{FontAtlas}}}{unique_ptr<md::FontTrackingCache, std::__1::default_delete<md::FontTrackingCache> >={__compressed_pair<md::FontTrackingCache *, std::__1::default_delete<md::FontTrackingCache> >=^{FontTrackingCache}}}{?={unique_ptr<md::FontGlyphCache, std::__1::default_delete<md::FontGlyphCache> >={__compressed_pair<md::FontGlyphCache *, std::__1::default_delete<md::FontGlyphCache> >=^{FontGlyphCache}}}}{unique_ptr<md::LabelMesh, std::__1::default_delete<md::LabelMesh> >={__compressed_pair<md::LabelMesh *, std::__1::default_delete<md::LabelMesh> >=^{LabelMesh}}}{unique_ptr<md::LabelStyleCache, std::__1::default_delete<md::LabelStyleCache> >={__compressed_pair<md::LabelStyleCache *, std::__1::default_delete<md::LabelStyleCache> >=^{LabelStyleCache}}}{shared_ptr<gss::StylesheetManager<gss::ScenePropertyID> >=^{StylesheetManager<gss::ScenePropertyID>}^{__shared_weak_count}}{unique_ptr<md::LabelCollider, std::__1::default_delete<md::LabelCollider> >={__compressed_pair<md::LabelCollider *, std::__1::default_delete<md::LabelCollider> >=^{LabelCollider}}}{unique_ptr<md::OcclusionManager, std::__1::default_delete<md::OcclusionManager> >={__compressed_pair<md::OcclusionManager *, std::__1::default_delete<md::OcclusionManager> >=^{OcclusionManager}}}II{shared_ptr<md::LabelTrafficTilePool>=^{LabelTrafficTilePool}^{__shared_weak_count}}{mutex={_opaque_pthread_mutex_t=l[40c]}}{vector<std::__1::shared_ptr<md::LabelManagerCommand>, std::__1::allocator<std::__1::shared_ptr<md::LabelManagerCommand> > >=^{shared_ptr<md::LabelManagerCommand>}^{shared_ptr<md::LabelManagerCommand>}{__compressed_pair<std::__1::shared_ptr<md::LabelManagerCommand> *, std::__1::allocator<std::__1::shared_ptr<md::LabelManagerCommand> > >=^{shared_ptr<md::LabelManagerCommand>}}}IIIddQBIIIfI{array<bool, 12>=[12B]}fBB{shared_ptr<md::Label>=^{Label}^{__shared_weak_count}}{shared_ptr<md::LabelFeature>=^{LabelFeature}^{__shared_weak_count}}{LabelIdentifier=I}BiifiCBBBBBBBBBBBBBBB{atomic<bool>=AB}{atomic<bool>=AB}{atomic<bool>=AB}{atomic<bool>=AB}ii{shared_ptr<md::LabelMarker>=^{LabelMarker}^{__shared_weak_count}}{SelectedLabelState={Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}BC}{unique_ptr<md::Timer, std::__1::default_delete<md::Timer> >={__compressed_pair<md::Timer *, std::__1::default_delete<md::Timer> >=^{Timer}}}{unique_ptr<md::Timer, std::__1::default_delete<md::Timer> >={__compressed_pair<md::Timer *, std::__1::default_delete<md::Timer> >=^{Timer}}}{_retain_ptr<VKClientLocalizedStrings *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{?={shared_ptr<gss::StylesheetManager<gss::PropertyID> >=^{StylesheetManager<gss::PropertyID>}^{__shared_weak_count}}{shared_ptr<md::LabelMarker>=^{LabelMarker}^{__shared_weak_count}}{_retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}BBB}IBf{vector<std::__1::shared_ptr<md::NavLabel>, std::__1::allocator<std::__1::shared_ptr<md::NavLabel> > >=^{shared_ptr<md::NavLabel>}^{shared_ptr<md::NavLabel>}{__compressed_pair<std::__1::shared_ptr<md::NavLabel> *, std::__1::allocator<std::__1::shared_ptr<md::NavLabel> > >=^{shared_ptr<md::NavLabel>}}}}8
v16@0:4^{LabelManager=^^?{weak_ptr<md::LabelManager>=^{LabelManager}^{__shared_weak_count}}{_retain_ptr<VKSharedResources *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{shared_ptr<md::TaskContext>=^{TaskContext}^{__shared_weak_count}}@fICiCCBBBBBBBBBBBBBBBBBBBBBBBBBB{atomic<bool>=AB}BBBBBBBBBBBBBB{Box<unsigned int, 2>={Matrix<unsigned int, 2, 1>=[2I]}{Matrix<unsigned int, 2, 1>=[2I]}}{Box<unsigned int, 2>={Matrix<unsigned int, 2, 1>=[2I]}{Matrix<unsigned int, 2, 1>=[2I]}}BB^{LabelLayoutContext}{LabelLayoutContext=BBBBBCf{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}ddddddd{?={Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}fff}ffff{Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}{LabelAngle=C}f{Matrix<double, 4, 4>=[16d]}{Matrix<double, 4, 4>=[16d]}{Matrix<float, 2, 1>=[2f]}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}II{shared_ptr<const md::VenueLogicContext>=^{VenueLogicContext}^{__shared_weak_count}}}{LabelLayoutContext=BBBBBCf{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}ddddddd{?={Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}fff}ffff{Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}{LabelAngle=C}f{Matrix<double, 4, 4>=[16d]}{Matrix<double, 4, 4>=[16d]}{Matrix<float, 2, 1>=[2f]}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}II{shared_ptr<const md::VenueLogicContext>=^{VenueLogicContext}^{__shared_weak_count}}}{LabelNavLayoutContext={Box<double, 2>={Matrix<double, 2, 1>=[2d]}{Matrix<double, 2, 1>=[2d]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}{Matrix<double, 3, 1>=[3d]}{Matrix<float, 2, 1>=[2f]}d{shared_ptr<md::AnchorContext>=^{AnchorContext}^{__shared_weak_count}}B}[5d]di{unique_ptr<md::LabelExternalObjectsModerator, std::__1::default_delete<md::LabelExternalObjectsModerator> >={__compressed_pair<md::LabelExternalObjectsModerator *, std::__1::default_delete<md::LabelExternalObjectsModerator> >=^{LabelExternalObjectsModerator}}}{unique_ptr<md::LabelTransitSupport, std::__1::default_delete<md::LabelTransitSupport> >={__compressed_pair<md::LabelTransitSupport *, std::__1::default_delete<md::LabelTransitSupport> >=^{LabelTransitSupport}}}{unique_ptr<md::LabelCustomFeatureSupport, std::__1::default_delete<md::LabelCustomFeatureSupport> >={__compressed_pair<md::LabelCustomFeatureSupport *, std::__1::default_delete<md::LabelCustomFeatureSupport> >=^{LabelCustomFeatureSupport}}}{unique_ptr<md::LabelNavSupport, std::__1::default_delete<md::LabelNavSupport> >={__compressed_pair<md::LabelNavSupport *, std::__1::default_delete<md::LabelNavSupport> >=^{LabelNavSupport}}}{unique_ptr<md::LabelNavTrafficSupport, std::__1::default_delete<md::LabelNavTrafficSupport> >={__compressed_pair<md::LabelNavTrafficSupport *, std::__1::default_delete<md::LabelNavTrafficSupport> >=^{LabelNavTrafficSupport}}}{unique_ptr<md::LabelImageLoader, std::__1::default_delete<md::LabelImageLoader> >={__compressed_pair<md::LabelImageLoader *, std::__1::default_delete<md::LabelImageLoader> >=^{LabelImageLoader}}}{unique_ptr<md::LabelTextDataLoader, std::__1::default_delete<md::LabelTextDataLoader> >={__compressed_pair<md::LabelTextDataLoader *, std::__1::default_delete<md::LabelTextDataLoader> >=^{LabelTextDataLoader}}}{unique_ptr<md::LabelGlyphImageLoader, std::__1::default_delete<md::LabelGlyphImageLoader> >={__compressed_pair<md::LabelGlyphImageLoader *, std::__1::default_delete<md::LabelGlyphImageLoader> >=^{LabelGlyphImageLoader}}}{vector<std::__1::shared_ptr<md::LabelMapTile>, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > >=^{shared_ptr<md::LabelMapTile>}^{shared_ptr<md::LabelMapTile>}{__compressed_pair<std::__1::shared_ptr<md::LabelMapTile> *, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > >=^{shared_ptr<md::LabelMapTile>}}}{set<std::__1::shared_ptr<md::LabelMapTile>, std::__1::less<std::__1::shared_ptr<md::LabelMapTile> >, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > >={__tree<std::__1::shared_ptr<md::LabelMapTile>, std::__1::less<std::__1::shared_ptr<md::LabelMapTile> >, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::shared_ptr<md::LabelMapTile>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<std::__1::shared_ptr<md::LabelMapTile> > >=L}}}{unique_ptr<md::LabelFeaturePool, std::__1::default_delete<md::LabelFeaturePool> >={__compressed_pair<md::LabelFeaturePool *, std::__1::default_delete<md::LabelFeaturePool> >=^{LabelFeaturePool}}}{unique_ptr<md::LabelFeatureStyler, std::__1::default_delete<md::LabelFeatureStyler> >={__compressed_pair<md::LabelFeatureStyler *, std::__1::default_delete<md::LabelFeatureStyler> >=^{LabelFeatureStyler}}}{unique_ptr<md::LabelPool, std::__1::default_delete<md::LabelPool> >={__compressed_pair<md::LabelPool *, std::__1::default_delete<md::LabelPool> >=^{LabelPool}}}{vector<std::__1::shared_ptr<md::Label>, std::__1::allocator<std::__1::shared_ptr<md::Label> > >=^{shared_ptr<md::Label>}^{shared_ptr<md::Label>}{__compressed_pair<std::__1::shared_ptr<md::Label> *, std::__1::allocator<std::__1::shared_ptr<md::Label> > >=^{shared_ptr<md::Label>}}}{vector<std::__1::shared_ptr<md::Label>, std::__1::allocator<std::__1::shared_ptr<md::Label> > >=^{shared_ptr<md::Label>}^{shared_ptr<md::Label>}{__compressed_pair<std::__1::shared_ptr<md::Label> *, std::__1::allocator<std::__1::shared_ptr<md::Label> > >=^{shared_ptr<md::Label>}}}{vector<md::Label *, std::__1::allocator<md::Label *> >=^^{Label}^^{Label}{__compressed_pair<md::Label **, std::__1::allocator<md::Label *> >=^^{Label}}}{unique_ptr<md::FontAtlas, std::__1::default_delete<md::FontAtlas> >={__compressed_pair<md::FontAtlas *, std::__1::default_delete<md::FontAtlas> >=^{FontAtlas}}}{unique_ptr<md::FontTrackingCache, std::__1::default_delete<md::FontTrackingCache> >={__compressed_pair<md::FontTrackingCache *, std::__1::default_delete<md::FontTrackingCache> >=^{FontTrackingCache}}}{?={unique_ptr<md::FontGlyphCache, std::__1::default_delete<md::FontGlyphCache> >={__compressed_pair<md::FontGlyphCache *, std::__1::default_delete<md::FontGlyphCache> >=^{FontGlyphCache}}}}{unique_ptr<md::LabelMesh, std::__1::default_delete<md::LabelMesh> >={__compressed_pair<md::LabelMesh *, std::__1::default_delete<md::LabelMesh> >=^{LabelMesh}}}{unique_ptr<md::LabelStyleCache, std::__1::default_delete<md::LabelStyleCache> >={__compressed_pair<md::LabelStyleCache *, std::__1::default_delete<md::LabelStyleCache> >=^{LabelStyleCache}}}{shared_ptr<gss::StylesheetManager<gss::ScenePropertyID> >=^{StylesheetManager<gss::ScenePropertyID>}^{__shared_weak_count}}{unique_ptr<md::LabelCollider, std::__1::default_delete<md::LabelCollider> >={__compressed_pair<md::LabelCollider *, std::__1::default_delete<md::LabelCollider> >=^{LabelCollider}}}{unique_ptr<md::OcclusionManager, std::__1::default_delete<md::OcclusionManager> >={__compressed_pair<md::OcclusionManager *, std::__1::default_delete<md::OcclusionManager> >=^{OcclusionManager}}}II{shared_ptr<md::LabelTrafficTilePool>=^{LabelTrafficTilePool}^{__shared_weak_count}}{mutex={_opaque_pthread_mutex_t=l[40c]}}{vector<std::__1::shared_ptr<md::LabelManagerCommand>, std::__1::allocator<std::__1::shared_ptr<md::LabelManagerCommand> > >=^{shared_ptr<md::LabelManagerCommand>}^{shared_ptr<md::LabelManagerCommand>}{__compressed_pair<std::__1::shared_ptr<md::LabelManagerCommand> *, std::__1::allocator<std::__1::shared_ptr<md::LabelManagerCommand> > >=^{shared_ptr<md::LabelManagerCommand>}}}IIIddQBIIIfI{array<bool, 12>=[12B]}fBB{shared_ptr<md::Label>=^{Label}^{__shared_weak_count}}{shared_ptr<md::LabelFeature>=^{LabelFeature}^{__shared_weak_count}}{LabelIdentifier=I}BiifiCBBBBBBBBBBBBBBB{atomic<bool>=AB}{atomic<bool>=AB}{atomic<bool>=AB}{atomic<bool>=AB}ii{shared_ptr<md::LabelMarker>=^{LabelMarker}^{__shared_weak_count}}{SelectedLabelState={Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}BC}{unique_ptr<md::Timer, std::__1::default_delete<md::Timer> >={__compressed_pair<md::Timer *, std::__1::default_delete<md::Timer> >=^{Timer}}}{unique_ptr<md::Timer, std::__1::default_delete<md::Timer> >={__compressed_pair<md::Timer *, std::__1::default_delete<md::Timer> >=^{Timer}}}{_retain_ptr<VKClientLocalizedStrings *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{?={shared_ptr<gss::StylesheetManager<gss::PropertyID> >=^{StylesheetManager<gss::PropertyID>}^{__shared_weak_count}}{shared_ptr<md::LabelMarker>=^{LabelMarker}^{__shared_weak_count}}{_retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}BBB}IBf{vector<std::__1::shared_ptr<md::NavLabel>, std::__1::allocator<std::__1::shared_ptr<md::NavLabel> > >=^{shared_ptr<md::NavLabel>}^{shared_ptr<md::NavLabel>}{__compressed_pair<std::__1::shared_ptr<md::NavLabel> *, std::__1::allocator<std::__1::shared_ptr<md::NavLabel> > >=^{shared_ptr<md::NavLabel>}}}}8r^{shared_ptr<md::LabelMarker>=^{LabelMarker}^{__shared_weak_count}}12
v17@0:4{DisplayStyle=CCCCC}8@?<v@?@"<VKStyleManagerObserver>">13
v17@0:4{DisplayStyle=CCCCC}8@?13
@12@0:4^{CLabelLayer=^^?{CommandBufferIdSet={vector<md::CommandBufferId, std::__1::allocator<md::CommandBufferId> >=^C^C{__compressed_pair<md::CommandBufferId *, std::__1::allocator<md::CommandBufferId> >=^C}}}{map<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer> >, std::__1::less<md::CommandBufferId>, std::__1::allocator<std::__1::pair<const md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer> > > > >={__tree<std::__1::__value_type<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer> > >, std::__1::__map_value_compare<md::CommandBufferId, std::__1::__value_type<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer> > >, std::__1::less<md::CommandBufferId>, true>, std::__1::allocator<std::__1::__value_type<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<md::CommandBufferId, std::__1::__value_type<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer> > >, std::__1::less<md::CommandBufferId>, true> >=L}}}BI^^?^{CartographicRenderer}C{CLabelDebug=^{CLabelLayer}}{shared_ptr<md::LabelManager>=^{LabelManager}^{__shared_weak_count}}@{_retain_ptr<GEOResourceManifestConfiguration *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{unique_ptr<md::LabelSettings, std::__1::default_delete<md::LabelSettings> >={__compressed_pair<md::LabelSettings *, std::__1::default_delete<md::LabelSettings> >=^{LabelSettings}}}^{CLabelCache}IBBB}8
{unique_ptr<ggl::RenderItem, std::__1::default_delete<ggl::RenderItem> >="__ptr_"{__compressed_pair<ggl::RenderItem *, std::__1::default_delete<ggl::RenderItem> >="__value_"^{RenderItem}}}
{unique_ptr<ggl::Textured::Pos2DUVPipelineSetup, std::__1::default_delete<ggl::Textured::Pos2DUVPipelineSetup> >="__ptr_"{__compressed_pair<ggl::Textured::Pos2DUVPipelineSetup *, std::__1::default_delete<ggl::Textured::Pos2DUVPipelineSetup> >="__value_"^{Pos2DUVPipelineSetup}}}
{shared_ptr<md::RasterOverlayData>="__ptr_"^{RasterOverlayData}"__cntrl_"^{__shared_weak_count}}
@20@0:4r^{VKTileKey=IiiI}8I12f16
^{RenderItem=^^?*^{RenderState}^{PipelineSetup}IQf^{Mesh}{Range<unsigned long>=LL}^{Range<unsigned long>}I}8@0:4
^{CGContext=}8@0:4
^{RenderItem=^^?*^{RenderState}^{PipelineSetup}IQf^{Mesh}{Range<unsigned long>=LL}^{Range<unsigned long>}I}20@0:4^{RenderState=^^?^{ResourceManager}^{RenderResource}{DepthState=iiiff}{StencilState=iiiiiIII}{RasterizerState=iiI{Box<unsigned int, 2>={Matrix<unsigned int, 2, 1>=[2I]}{Matrix<unsigned int, 2, 1>=[2I]}}}B}8r^{shared_ptr<ggl::Textured::Pos2DUVPipelineState>=^{Pos2DUVPipelineState}^{__shared_weak_count}}12^{Mesh=^^?*^^?^{ResourceManager}^{RenderResource}^{MeshCReflection}{vector<std::__1::shared_ptr<ggl::VertexData>, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > >=^{shared_ptr<ggl::VertexData>}^{shared_ptr<ggl::VertexData>}{__compressed_pair<std::__1::shared_ptr<ggl::VertexData> *, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > >=^{shared_ptr<ggl::VertexData>}}}{shared_ptr<ggl::IndexData>=^{IndexData}^{__shared_weak_count}}}16
^{Texture2D=^^?^{ResourceManager}^{RenderResource}^^?*iiiiI{shared_ptr<const ggl::TextureDataAbstract>=^{TextureDataAbstract}^{__shared_weak_count}}BBIIB{shared_ptr<ggl::SamplerState>=^{SamplerState}^{__shared_weak_count}}}8@0:4
@"<VKCameraControllerDelegate>"
@"VKViewportInfo"8@0:4
B12@0:4@"VKViewportInfo"8
{?=dd}8@0:4
v24@0:4{?=dd}8
@"GEOMapRegion"8@0:4
{CGPoint=ff}8@0:4
{CGPoint=ff}16@0:4{CGPoint=ff}8
{Matrix<int, 2, 1>=[2i]}16@0:4{CGPoint=ff}8
B20@0:4^{?=dd}8^d12@16
{VKCacheKey="a"I"b"I"c"I"d"I}
@"VKCacheNode"
{VKCacheKey=IIII}8@0:4
v24@0:4{VKCacheKey=IIII}8
@"<VKLRUCacheDelegate>"
I20@0:4^{?=L^@^L[5L]}8^@12I16
@16@0:4I8I12
v16@0:4I8I12
@12@0:4r^{VKCacheKey=IIII}8
v16@0:4@8r^{VKCacheKey=IIII}12
f12@0:4i8
f12@0:4f8
v32@0:4d8r^{Matrix<double, 3, 1>=[3d]}16B20B24B28
v24@0:4d8r^{Matrix<double, 3, 1>=[3d]}16B20
v28@0:4{CGPoint=ff}8d16@?24
v44@0:4d8{Matrix<double, 3, 1>=[3d]}16@?40
v40@0:4d8{Matrix<double, 3, 1>=[3d]}16
B12@0:4B8
v24@0:4^d8^d12d16
{?=dd}12@0:4@8
v64@0:4{Matrix<double, 3, 1>=[3d]}8d32d40d48@?56@?60
v68@0:4{?=dd}8d24d32d40d48i56@?60@?64
v76@0:4{?=ddd}8d32d40d48d56i64@?68@?72
^{GlobeView=^^?^{GeoServicesLoader}^{ManifestManager}^{TriggerManager}{shared_ptr<altitude::AnchorManager>=^{AnchorManager}^{__shared_weak_count}}^{DtmCacheNode}^{DtmRequestManager}^{FreezeViewNode}{Projection={Perspective=dddd}{Ortho=dddddd}BB}{CameraFrame<geo::Radians, double>={Coordinate3D<Radians, double>={Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<MeterUnitDescription, double>=d}}{Unit<MeterUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}}B{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{vector<altitude::SimpleTileKey, std::__1::allocator<altitude::SimpleTileKey> >=^{SimpleTileKey}^{SimpleTileKey}{__compressed_pair<altitude::SimpleTileKey *, std::__1::allocator<altitude::SimpleTileKey> >=^{SimpleTileKey}}}BII^{VKClassicGlobeCanvas}BB{AnimationManager={AnimationReferenceTimer=ddd}{unique_ptr<altitude::AnimationTimer, std::__1::default_delete<altitude::AnimationTimer> >={__compressed_pair<altitude::AnimationTimer *, std::__1::default_delete<altitude::AnimationTimer> >=^{AnimationTimer}}}d{vector<altitude::AnimationObjectHolder, std::__1::allocator<altitude::AnimationObjectHolder> >=^{AnimationObjectHolder}^{AnimationObjectHolder}{__compressed_pair<altitude::AnimationObjectHolder *, std::__1::allocator<altitude::AnimationObjectHolder> >=^{AnimationObjectHolder}}}}{Timer=d}dBddd{CameraFrame<geo::Radians, double>={Coordinate3D<Radians, double>={Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<MeterUnitDescription, double>=d}}{Unit<MeterUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}}^{C3mmRequestManager}^{RenderableGroup}IdBB^{LabelDataManagerPrivate}BBBB^{RouteLineManager}^{GlobeCleanupLoader}^{CompleteGlobeTileSetCullingGraph}^{CompleteGlobeTileSetLoader}^{TileSetNode}^{GlobeTileRenderManager}^{CullingNode}^{EarthAdjustedViewNode}^{UserViewNode}^{View}^{BasicViewNode}^{GlobeMainViewNode}^{C3bRequestManager}fB{shared_ptr<bool>=^B^{__shared_weak_count}}^{HeightRequestManager}{map<gm::Matrix<int, 2, 1>, std::__1::pair<bool, geo::Coordinate3D<Radians, double> >, altitude::GlobeView::LessVector2i, std::__1::allocator<std::__1::pair<const gm::Matrix<int, 2, 1>, std::__1::pair<bool, geo::Coordinate3D<Radians, double> > > > >={__tree<std::__1::__value_type<gm::Matrix<int, 2, 1>, std::__1::pair<bool, geo::Coordinate3D<Radians, double> > >, std::__1::__map_value_compare<gm::Matrix<int, 2, 1>, std::__1::__value_type<gm::Matrix<int, 2, 1>, std::__1::pair<bool, geo::Coordinate3D<Radians, double> > >, altitude::GlobeView::LessVector2i, true>, std::__1::allocator<std::__1::__value_type<gm::Matrix<int, 2, 1>, std::__1::pair<bool, geo::Coordinate3D<Radians, double> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gm::Matrix<int, 2, 1>, std::__1::pair<bool, geo::Coordinate3D<Radians, double> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<gm::Matrix<int, 2, 1>, std::__1::__value_type<gm::Matrix<int, 2, 1>, std::__1::pair<bool, geo::Coordinate3D<Radians, double> > >, altitude::GlobeView::LessVector2i, true> >=L}}}{Mutex=^v}{shared_ptr<altitude::Stylesheet>=^{Stylesheet}^{__shared_weak_count}}^{FlyoverTour}B{Viewport=iiii}B{set<altitude::ManifestListener *, std::__1::less<altitude::ManifestListener *>, std::__1::allocator<altitude::ManifestListener *> >={__tree<altitude::ManifestListener *, std::__1::less<altitude::ManifestListener *>, std::__1::allocator<altitude::ManifestListener *> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<altitude::ManifestListener *, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<altitude::ManifestListener *> >=L}}}^{TileManager}^{ObjectTreeLoader}^{QuickSurfaceManager}^{IntersectorHeight}{shared_ptr<karo::SharedItemManager<altitude::Map, altitude::MapRequestId> >=^{SharedItemManager<altitude::Map, altitude::MapRequestId>}^{__shared_weak_count}}^{BundleLoader}^{ProtocolLoader}^{GeoResourceManager}^{GeoResourceLoader}^{ViewNode}^{ViewportNode}^{View}^{Viewport}{shared_ptr<ggl::RenderState>=^{RenderState}^{__shared_weak_count}}I^{Statistics}{atomic<bool>=AB}^{TexturePager}^{IOSurfacePool}^{RealisticRenderer}{DclpUnique<ggl::Texture2D, altitude::util::DclpDefaultDelete<ggl::Texture2D> >={mutex={_opaque_pthread_mutex_t=l[40c]}}{atomic<ggl::Texture2D *>=A^{Texture2D}}{function<ggl::Texture2D *()>={type=[16C]}^{__base<ggl::Texture2D *()>}}}{DclpUnique<altitude::TextureMap, altitude::util::DclpDefaultDelete<altitude::TextureMap> >={mutex={_opaque_pthread_mutex_t=l[40c]}}{atomic<altitude::TextureMap *>=A^{TextureMap}}{function<altitude::TextureMap *()>={type=[16C]}^{__base<altitude::TextureMap *()>}}}{DclpUnique<altitude::TextureMap, altitude::util::DclpDefaultDelete<altitude::TextureMap> >={mutex={_opaque_pthread_mutex_t=l[40c]}}{atomic<altitude::TextureMap *>=A^{TextureMap}}{function<altitude::TextureMap *()>={type=[16C]}^{__base<altitude::TextureMap *()>}}}}
{CameraFrame<geo::Radians, double>="_target"{Coordinate3D<Radians, double>="latitude"{Unit<RadianUnitDescription, double>="_value"d}"longitude"{Unit<RadianUnitDescription, double>="_value"d}"altitude"{Unit<MeterUnitDescription, double>="_value"d}}"_distanceFromTarget"{Unit<MeterUnitDescription, double>="_value"d}"_pitch"{Unit<RadianUnitDescription, double>="_value"d}"_heading"{Unit<RadianUnitDescription, double>="_value"d}"_roll"{Unit<RadianUnitDescription, double>="_value"d}}
{Quaternion<double>="_imaginary"{Matrix<double, 3, 1>="_e"[3d]}"_scalar"d}
{Coordinate2D<Radians, double>="latitude"{Unit<RadianUnitDescription, double>="_value"d}"longitude"{Unit<RadianUnitDescription, double>="_value"d}}
{Unit<DegreeUnitDescription, double>="_value"d}
{Geocentric<double>=[3d]}8@0:4
{Matrix<double, 3, 1>=[3d]}12@0:4r^{RigidTransform<double>={Quaternion<double>={Matrix<double, 3, 1>=[3d]}d}{Matrix<double, 3, 1>=[3d]}}8
v24@0:4r^{Coordinate3D<Radians, double>={Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<MeterUnitDescription, double>=d}}8d12@?20
v36@0:4{?=dd}8d24@?32
{CameraFrame<geo::Radians, double>={Coordinate3D<Radians, double>={Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<MeterUnitDescription, double>=d}}{Unit<MeterUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}}8@0:4
v24@0:4r^{CameraFrame<geo::Radians, double>={Coordinate3D<Radians, double>={Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<MeterUnitDescription, double>=d}}{Unit<MeterUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}}8d12@?20
{RigidTransform<double>={Quaternion<double>={Matrix<double, 3, 1>=[3d]}d}{Matrix<double, 3, 1>=[3d]}}8@0:4
^{GlobeView=^^?^{GeoServicesLoader}^{ManifestManager}^{TriggerManager}{shared_ptr<altitude::AnchorManager>=^{AnchorManager}^{__shared_weak_count}}^{DtmCacheNode}^{DtmRequestManager}^{FreezeViewNode}{Projection={Perspective=dddd}{Ortho=dddddd}BB}{CameraFrame<geo::Radians, double>={Coordinate3D<Radians, double>={Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<MeterUnitDescription, double>=d}}{Unit<MeterUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}}B{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{vector<altitude::SimpleTileKey, std::__1::allocator<altitude::SimpleTileKey> >=^{SimpleTileKey}^{SimpleTileKey}{__compressed_pair<altitude::SimpleTileKey *, std::__1::allocator<altitude::SimpleTileKey> >=^{SimpleTileKey}}}BII^{VKClassicGlobeCanvas}BB{AnimationManager={AnimationReferenceTimer=ddd}{unique_ptr<altitude::AnimationTimer, std::__1::default_delete<altitude::AnimationTimer> >={__compressed_pair<altitude::AnimationTimer *, std::__1::default_delete<altitude::AnimationTimer> >=^{AnimationTimer}}}d{vector<altitude::AnimationObjectHolder, std::__1::allocator<altitude::AnimationObjectHolder> >=^{AnimationObjectHolder}^{AnimationObjectHolder}{__compressed_pair<altitude::AnimationObjectHolder *, std::__1::allocator<altitude::AnimationObjectHolder> >=^{AnimationObjectHolder}}}}{Timer=d}dBddd{CameraFrame<geo::Radians, double>={Coordinate3D<Radians, double>={Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<MeterUnitDescription, double>=d}}{Unit<MeterUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}}^{C3mmRequestManager}^{RenderableGroup}IdBB^{LabelDataManagerPrivate}BBBB^{RouteLineManager}^{GlobeCleanupLoader}^{CompleteGlobeTileSetCullingGraph}^{CompleteGlobeTileSetLoader}^{TileSetNode}^{GlobeTileRenderManager}^{CullingNode}^{EarthAdjustedViewNode}^{UserViewNode}^{View}^{BasicViewNode}^{GlobeMainViewNode}^{C3bRequestManager}fB{shared_ptr<bool>=^B^{__shared_weak_count}}^{HeightRequestManager}{map<gm::Matrix<int, 2, 1>, std::__1::pair<bool, geo::Coordinate3D<Radians, double> >, altitude::GlobeView::LessVector2i, std::__1::allocator<std::__1::pair<const gm::Matrix<int, 2, 1>, std::__1::pair<bool, geo::Coordinate3D<Radians, double> > > > >={__tree<std::__1::__value_type<gm::Matrix<int, 2, 1>, std::__1::pair<bool, geo::Coordinate3D<Radians, double> > >, std::__1::__map_value_compare<gm::Matrix<int, 2, 1>, std::__1::__value_type<gm::Matrix<int, 2, 1>, std::__1::pair<bool, geo::Coordinate3D<Radians, double> > >, altitude::GlobeView::LessVector2i, true>, std::__1::allocator<std::__1::__value_type<gm::Matrix<int, 2, 1>, std::__1::pair<bool, geo::Coordinate3D<Radians, double> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gm::Matrix<int, 2, 1>, std::__1::pair<bool, geo::Coordinate3D<Radians, double> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<gm::Matrix<int, 2, 1>, std::__1::__value_type<gm::Matrix<int, 2, 1>, std::__1::pair<bool, geo::Coordinate3D<Radians, double> > >, altitude::GlobeView::LessVector2i, true> >=L}}}{Mutex=^v}{shared_ptr<altitude::Stylesheet>=^{Stylesheet}^{__shared_weak_count}}^{FlyoverTour}B{Viewport=iiii}B{set<altitude::ManifestListener *, std::__1::less<altitude::ManifestListener *>, std::__1::allocator<altitude::ManifestListener *> >={__tree<altitude::ManifestListener *, std::__1::less<altitude::ManifestListener *>, std::__1::allocator<altitude::ManifestListener *> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<altitude::ManifestListener *, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<altitude::ManifestListener *> >=L}}}^{TileManager}^{ObjectTreeLoader}^{QuickSurfaceManager}^{IntersectorHeight}{shared_ptr<karo::SharedItemManager<altitude::Map, altitude::MapRequestId> >=^{SharedItemManager<altitude::Map, altitude::MapRequestId>}^{__shared_weak_count}}^{BundleLoader}^{ProtocolLoader}^{GeoResourceManager}^{GeoResourceLoader}^{ViewNode}^{ViewportNode}^{View}^{Viewport}{shared_ptr<ggl::RenderState>=^{RenderState}^{__shared_weak_count}}I^{Statistics}{atomic<bool>=AB}^{TexturePager}^{IOSurfacePool}^{RealisticRenderer}{DclpUnique<ggl::Texture2D, altitude::util::DclpDefaultDelete<ggl::Texture2D> >={mutex={_opaque_pthread_mutex_t=l[40c]}}{atomic<ggl::Texture2D *>=A^{Texture2D}}{function<ggl::Texture2D *()>={type=[16C]}^{__base<ggl::Texture2D *()>}}}{DclpUnique<altitude::TextureMap, altitude::util::DclpDefaultDelete<altitude::TextureMap> >={mutex={_opaque_pthread_mutex_t=l[40c]}}{atomic<altitude::TextureMap *>=A^{TextureMap}}{function<altitude::TextureMap *()>={type=[16C]}^{__base<altitude::TextureMap *()>}}}{DclpUnique<altitude::TextureMap, altitude::util::DclpDefaultDelete<altitude::TextureMap> >={mutex={_opaque_pthread_mutex_t=l[40c]}}{atomic<altitude::TextureMap *>=A^{TextureMap}}{function<altitude::TextureMap *()>={type=[16C]}^{__base<altitude::TextureMap *()>}}}}8@0:4
v12@0:4^{GlobeView=^^?^{GeoServicesLoader}^{ManifestManager}^{TriggerManager}{shared_ptr<altitude::AnchorManager>=^{AnchorManager}^{__shared_weak_count}}^{DtmCacheNode}^{DtmRequestManager}^{FreezeViewNode}{Projection={Perspective=dddd}{Ortho=dddddd}BB}{CameraFrame<geo::Radians, double>={Coordinate3D<Radians, double>={Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<MeterUnitDescription, double>=d}}{Unit<MeterUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}}B{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{vector<altitude::SimpleTileKey, std::__1::allocator<altitude::SimpleTileKey> >=^{SimpleTileKey}^{SimpleTileKey}{__compressed_pair<altitude::SimpleTileKey *, std::__1::allocator<altitude::SimpleTileKey> >=^{SimpleTileKey}}}BII^{VKClassicGlobeCanvas}BB{AnimationManager={AnimationReferenceTimer=ddd}{unique_ptr<altitude::AnimationTimer, std::__1::default_delete<altitude::AnimationTimer> >={__compressed_pair<altitude::AnimationTimer *, std::__1::default_delete<altitude::AnimationTimer> >=^{AnimationTimer}}}d{vector<altitude::AnimationObjectHolder, std::__1::allocator<altitude::AnimationObjectHolder> >=^{AnimationObjectHolder}^{AnimationObjectHolder}{__compressed_pair<altitude::AnimationObjectHolder *, std::__1::allocator<altitude::AnimationObjectHolder> >=^{AnimationObjectHolder}}}}{Timer=d}dBddd{CameraFrame<geo::Radians, double>={Coordinate3D<Radians, double>={Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<MeterUnitDescription, double>=d}}{Unit<MeterUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}}^{C3mmRequestManager}^{RenderableGroup}IdBB^{LabelDataManagerPrivate}BBBB^{RouteLineManager}^{GlobeCleanupLoader}^{CompleteGlobeTileSetCullingGraph}^{CompleteGlobeTileSetLoader}^{TileSetNode}^{GlobeTileRenderManager}^{CullingNode}^{EarthAdjustedViewNode}^{UserViewNode}^{View}^{BasicViewNode}^{GlobeMainViewNode}^{C3bRequestManager}fB{shared_ptr<bool>=^B^{__shared_weak_count}}^{HeightRequestManager}{map<gm::Matrix<int, 2, 1>, std::__1::pair<bool, geo::Coordinate3D<Radians, double> >, altitude::GlobeView::LessVector2i, std::__1::allocator<std::__1::pair<const gm::Matrix<int, 2, 1>, std::__1::pair<bool, geo::Coordinate3D<Radians, double> > > > >={__tree<std::__1::__value_type<gm::Matrix<int, 2, 1>, std::__1::pair<bool, geo::Coordinate3D<Radians, double> > >, std::__1::__map_value_compare<gm::Matrix<int, 2, 1>, std::__1::__value_type<gm::Matrix<int, 2, 1>, std::__1::pair<bool, geo::Coordinate3D<Radians, double> > >, altitude::GlobeView::LessVector2i, true>, std::__1::allocator<std::__1::__value_type<gm::Matrix<int, 2, 1>, std::__1::pair<bool, geo::Coordinate3D<Radians, double> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gm::Matrix<int, 2, 1>, std::__1::pair<bool, geo::Coordinate3D<Radians, double> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<gm::Matrix<int, 2, 1>, std::__1::__value_type<gm::Matrix<int, 2, 1>, std::__1::pair<bool, geo::Coordinate3D<Radians, double> > >, altitude::GlobeView::LessVector2i, true> >=L}}}{Mutex=^v}{shared_ptr<altitude::Stylesheet>=^{Stylesheet}^{__shared_weak_count}}^{FlyoverTour}B{Viewport=iiii}B{set<altitude::ManifestListener *, std::__1::less<altitude::ManifestListener *>, std::__1::allocator<altitude::ManifestListener *> >={__tree<altitude::ManifestListener *, std::__1::less<altitude::ManifestListener *>, std::__1::allocator<altitude::ManifestListener *> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<altitude::ManifestListener *, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<altitude::ManifestListener *> >=L}}}^{TileManager}^{ObjectTreeLoader}^{QuickSurfaceManager}^{IntersectorHeight}{shared_ptr<karo::SharedItemManager<altitude::Map, altitude::MapRequestId> >=^{SharedItemManager<altitude::Map, altitude::MapRequestId>}^{__shared_weak_count}}^{BundleLoader}^{ProtocolLoader}^{GeoResourceManager}^{GeoResourceLoader}^{ViewNode}^{ViewportNode}^{View}^{Viewport}{shared_ptr<ggl::RenderState>=^{RenderState}^{__shared_weak_count}}I^{Statistics}{atomic<bool>=AB}^{TexturePager}^{IOSurfacePool}^{RealisticRenderer}{DclpUnique<ggl::Texture2D, altitude::util::DclpDefaultDelete<ggl::Texture2D> >={mutex={_opaque_pthread_mutex_t=l[40c]}}{atomic<ggl::Texture2D *>=A^{Texture2D}}{function<ggl::Texture2D *()>={type=[16C]}^{__base<ggl::Texture2D *()>}}}{DclpUnique<altitude::TextureMap, altitude::util::DclpDefaultDelete<altitude::TextureMap> >={mutex={_opaque_pthread_mutex_t=l[40c]}}{atomic<altitude::TextureMap *>=A^{TextureMap}}{function<altitude::TextureMap *()>={type=[16C]}^{__base<altitude::TextureMap *()>}}}{DclpUnique<altitude::TextureMap, altitude::util::DclpDefaultDelete<altitude::TextureMap> >={mutex={_opaque_pthread_mutex_t=l[40c]}}{atomic<altitude::TextureMap *>=A^{TextureMap}}{function<altitude::TextureMap *()>={type=[16C]}^{__base<altitude::TextureMap *()>}}}}8
v12@0:4^{MapEngine=^^?{shared_ptr<md::TaskContext>=^{TaskContext}^{__shared_weak_count}}{_retain_ptr<GEOResourceManifestConfiguration *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}^{Device}{_retain_ptr<_MapEngineRenderQueueSource *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{unique_ptr<ggl::DisplayLink, std::__1::default_delete<ggl::DisplayLink> >={__compressed_pair<ggl::DisplayLink *, std::__1::default_delete<ggl::DisplayLink> >=^{DisplayLink}}}{unique_ptr<ggl::SnapshotRunLoop, std::__1::default_delete<ggl::SnapshotRunLoop> >={__compressed_pair<ggl::SnapshotRunLoop *, std::__1::default_delete<ggl::SnapshotRunLoop> >=^{SnapshotRunLoop}}}^{RunLoop}{unique_ptr<md::AnimationManager, std::__1::default_delete<md::AnimationManager> >={__compressed_pair<md::AnimationManager *, std::__1::default_delete<md::AnimationManager> >=^{AnimationManager}}}{unique_ptr<md::AnimationRunner, std::__1::default_delete<md::AnimationRunner> >={__compressed_pair<md::AnimationRunner *, std::__1::default_delete<md::AnimationRunner> >=^{AnimationRunner}}}{shared_ptr<md::RunLoopController>=^{RunLoopController}^{__shared_weak_count}}@@@@{unique_ptr<md::CartographicRenderer, std::__1::default_delete<md::CartographicRenderer> >={__compressed_pair<md::CartographicRenderer *, std::__1::default_delete<md::CartographicRenderer> >=^{CartographicRenderer}}}{unique_ptr<md::realistic::RealisticRenderer, std::__1::default_delete<md::realistic::RealisticRenderer> >={__compressed_pair<md::realistic::RealisticRenderer *, std::__1::default_delete<md::realistic::RealisticRenderer> >=^{RealisticRenderer}}}^{Renderer}{unique_ptr<md::LayoutContext, std::__1::default_delete<md::LayoutContext> >={__compressed_pair<md::LayoutContext *, std::__1::default_delete<md::LayoutContext> >=^{LayoutContext}}}{_retain_ptr<VKCamera *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{shared_ptr<md::LabelManager>=^{LabelManager}^{__shared_weak_count}}{shared_ptr<md::LabelManager>=^{LabelManager}^{__shared_weak_count}}{unique_ptr<md::LogicManager, std::__1::default_delete<md::LogicManager> >={__compressed_pair<md::LogicManager *, std::__1::default_delete<md::LogicManager> >=^{LogicManager}}}BBB{atomic<bool>=AB}{atomic<bool>=AB}B}8
v64@0:4{RigidTransform<double>={Quaternion<double>={Matrix<double, 3, 1>=[3d]}d}{Matrix<double, 3, 1>=[3d]}}8
{Unit<DegreeUnitDescription, double>=d}8@0:4
v16@0:4{Unit<DegreeUnitDescription, double>=d}8
{shared_ptr<md::FeatureMarker>="__ptr_"^{FeatureMarker}"__cntrl_"^{__shared_weak_count}}
@12@0:4r^{shared_ptr<md::FeatureMarker>=^{FeatureMarker}^{__shared_weak_count}}8
r^{shared_ptr<md::FeatureMarker>=^{FeatureMarker}^{__shared_weak_count}}8@0:4
{CGPoint="x"f"y"f}
@28@0:4^{CGImage=}8f12B16{CGPoint=ff}20
@"NSCache"
@"NSDictionary"
^{CGColor=}
^{__CTFont=}
@"NSMutableDictionary"
^{CGContext=}
^{CGImage=}
{?="leftCapWidth"f"rightCapWidth"f"leftPadding"f"rightPadding"f}
@24@0:4@8^{CGImage=}12f16^{?={Matrix<float, 4, 1>=[4f]}}20
@64@0:4^{CGImage=}8f12^{__CTFont=}16^{__CTFont=}20^{CGColor=}24^{CGColor=}28f32f36f40^{CGColor=}44{CGSize=ff}48f56^{CGColor=}60
@72@0:4^{CGImage=}8^{?=ffff}12f16^{__CTFont=}20^{__CTFont=}24^{CGColor=}28^{CGColor=}32f36f40f44^{CGColor=}48{CGSize=ff}52f60^{CGColor=}64f68
@72@0:4^{CGImage=}8f12^{?=ffff}16^{__CTFont=}20^{__CTFont=}24^{CGColor=}28^{CGColor=}32f36f40f44^{CGColor=}48{CGSize=ff}52f60^{CGColor=}64f68
@16@0:4@8B12
@16@0:4@8f12
@20@0:4@8B12f16
^{CGImage=}24@0:4@8B12f16^{CGPoint=ff}20
@"VKShieldArtwork"
{_GEOGenericContainer<md::ShieldCacheKey, VKShieldArtwork *, std::__1::hash<md::ShieldCacheKey>, std::__1::equal_to<md::ShieldCacheKey>, geo::GEOGenericContainerWeakReferenceTag, 0, 0, geo::GEOGenericContainerLockingTag, detail::_default_pointer_type>="_lock"{mutex="__m_"{_opaque_pthread_mutex_t="__sig"l"__opaque"[40c]}}"_list"{list<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, std::__1::allocator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr> > >="__end_"{__list_node_base<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>="__prev_"^{__list_node_base<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>}"__next_"^{__list_node_base<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>}}"__size_alloc_"{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> > >="__value_"L}}"_map"{unordered_map<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>, std::__1::hash<md::ShieldCacheKey>, std::__1::equal_to<md::ShieldCacheKey>, std::__1::allocator<std::__1::pair<const md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> > > >="__table_"{__hash_table<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, std::__1::__unordered_map_hasher<md::ShieldCacheKey, std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, std::__1::hash<md::ShieldCacheKey>, true>, std::__1::__unordered_map_equal<md::ShieldCacheKey, std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, std::__1::equal_to<md::ShieldCacheKey>, true>, std::__1::allocator<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> > > >="__bucket_list_"{unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, void *> *> *> > >="__ptr_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, void *> *> *> > >="__value_"^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, void *> *>}"__value_"{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, void *> *> *> >="__data_"{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, void *> *> *> >="__value_"L}}}}"__p1_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, void *> > >="__value_"{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, void *> *>="__next_"^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, void *> *>}}}"__p2_"{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<md::ShieldCacheKey, std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, std::__1::hash<md::ShieldCacheKey>, true> >="__value_"L}"__p3_"{__compressed_pair<float, std::__1::__unordered_map_equal<md::ShieldCacheKey, std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, std::__1::equal_to<md::ShieldCacheKey>, true> >="__value_"f}}}"_maxCapacity"I"_maxCost"I"_currentCost"I"_currentCount"I}
{_GEOGenericContainer<md::GenericShieldCacheKey, VKShieldArtwork *, std::__1::hash<md::GenericShieldCacheKey>, std::__1::equal_to<md::GenericShieldCacheKey>, geo::GEOGenericContainerWeakReferenceTag, 0, 0, geo::GEOGenericContainerLockingTag, detail::_default_pointer_type>="_lock"{mutex="__m_"{_opaque_pthread_mutex_t="__sig"l"__opaque"[40c]}}"_list"{list<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, std::__1::allocator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr> > >="__end_"{__list_node_base<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>="__prev_"^{__list_node_base<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>}"__next_"^{__list_node_base<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>}}"__size_alloc_"{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> > >="__value_"L}}"_map"{unordered_map<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>, std::__1::hash<md::GenericShieldCacheKey>, std::__1::equal_to<md::GenericShieldCacheKey>, std::__1::allocator<std::__1::pair<const md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> > > >="__table_"{__hash_table<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, std::__1::__unordered_map_hasher<md::GenericShieldCacheKey, std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, std::__1::hash<md::GenericShieldCacheKey>, true>, std::__1::__unordered_map_equal<md::GenericShieldCacheKey, std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, std::__1::equal_to<md::GenericShieldCacheKey>, true>, std::__1::allocator<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> > > >="__bucket_list_"{unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, void *> *> *> > >="__ptr_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, void *> *> *> > >="__value_"^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, void *> *>}"__value_"{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, void *> *> *> >="__data_"{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, void *> *> *> >="__value_"L}}}}"__p1_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, void *> > >="__value_"{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, void *> *>="__next_"^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, void *> *>}}}"__p2_"{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<md::GenericShieldCacheKey, std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, std::__1::hash<md::GenericShieldCacheKey>, true> >="__value_"L}"__p3_"{__compressed_pair<float, std::__1::__unordered_map_equal<md::GenericShieldCacheKey, std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, std::__1::equal_to<md::GenericShieldCacheKey>, true> >="__value_"f}}}"_maxCapacity"I"_maxCost"I"_currentCost"I"_currentCount"I}
@"VKResourceManager"
@"VKGenericShieldGenerator"
@"NSArray"
@"NSLock"
@20@0:4@8@12B16
@56@0:4q8I16f20@24r^{shared_ptr<const md::GenericShieldStyleInfo>=^{GenericShieldStyleInfo}^{__shared_weak_count}}28i32i36I40^{?={Matrix<float, 4, 1>=[4f]}}44I48I52
@40@0:4@8I12f16@20i24i28I32^{?={Matrix<float, 4, 1>=[4f]}}36
@76@0:4q8I16f20i24i28{?={?=dd}{?=dd}}32^{?={Matrix<float, 4, 1>=[4f]}}64I68I72
@44@0:4q8I16f20i24i28^{?={Matrix<float, 4, 1>=[4f]}}32I36I40
@44@0:4q8@16f20i24i28^{?={Matrix<float, 4, 1>=[4f]}}32I36I40
@"VKPShieldPack"
@36@0:4@8I12f16i20I24@28^{?={Matrix<float, 4, 1>=[4f]}}32
@24@0:4q8^@16I20
@16@0:4i8I12
{Matrix<float, 4, 1>=[4f]}16@0:4i8^{?={Matrix<float, 4, 1>=[4f]}}12
^{CGImage=}28@0:4@8@12@16f20^{?={Matrix<float, 4, 1>=[4f]}}24
@"GEOVectorTile"
@"VKMapTileList"
@36@0:4r^{VKTileKey=IiiI}8@12{shared_ptr<gss::StylesheetManager<gss::PropertyID> >=^{StylesheetManager<gss::PropertyID>}^{__shared_weak_count}}16@24f28^{Device=}32
{shared_ptr<md::LabelFeatureMarker>="__ptr_"^{LabelFeatureMarker}"__cntrl_"^{__shared_weak_count}}
@12@0:4r^{shared_ptr<md::LabelFeatureMarker>=^{LabelFeatureMarker}^{__shared_weak_count}}8
{CGVector=ff}8@0:4
@"NSData"
{shared_ptr<ggl::Texture2D>="__ptr_"^{Texture2D}"__cntrl_"^{__shared_weak_count}}
{RenderItem="_vptr$RenderItem"^^?"_name"*"_renderState"^{RenderState}"_pipelineSetup"^{PipelineSetup}"_stencilRefValue"I"_renderOrder"Q"_lineWidth"f"_mesh"^{Mesh}"_range"{Range<unsigned long>="_min"L"_max"L}"_ranges"^{Range<unsigned long>}"_rangeCount"I}
{unique_ptr<ggl::Clut::Pos2DUVPipelineSetup, std::__1::default_delete<ggl::Clut::Pos2DUVPipelineSetup> >="__ptr_"{__compressed_pair<ggl::Clut::Pos2DUVPipelineSetup *, std::__1::default_delete<ggl::Clut::Pos2DUVPipelineSetup> >="__value_"^{Pos2DUVPipelineSetup}}}
{unique_ptr<ggl::TextureWithReverseAlpha::Pos2DUVPipelineSetup, std::__1::default_delete<ggl::TextureWithReverseAlpha::Pos2DUVPipelineSetup> >="__ptr_"{__compressed_pair<ggl::TextureWithReverseAlpha::Pos2DUVPipelineSetup *, std::__1::default_delete<ggl::TextureWithReverseAlpha::Pos2DUVPipelineSetup> >="__value_"^{Pos2DUVPipelineSetup}}}
@24@0:4r^{VKTileKey=IiiI}8@12{shared_ptr<gss::StylesheetManager<gss::PropertyID> >=^{StylesheetManager<gss::PropertyID>}^{__shared_weak_count}}16
@28@0:4r^{VKTileKey=IiiI}8@12{shared_ptr<gss::StylesheetManager<gss::PropertyID> >=^{StylesheetManager<gss::PropertyID>}^{__shared_weak_count}}16i24
v28@0:4^{RenderState=^^?^{ResourceManager}^{RenderResource}{DepthState=iiiff}{StencilState=iiiiiIII}{RasterizerState=iiI{Box<unsigned int, 2>={Matrix<unsigned int, 2, 1>=[2I]}{Matrix<unsigned int, 2, 1>=[2I]}}}B}8r^{shared_ptr<ggl::Clut::Pos2DUVPipelineState>=^{Pos2DUVPipelineState}^{__shared_weak_count}}12^{Mesh=^^?*^^?^{ResourceManager}^{RenderResource}^{MeshCReflection}{vector<std::__1::shared_ptr<ggl::VertexData>, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > >=^{shared_ptr<ggl::VertexData>}^{shared_ptr<ggl::VertexData>}{__compressed_pair<std::__1::shared_ptr<ggl::VertexData> *, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > >=^{shared_ptr<ggl::VertexData>}}}{shared_ptr<ggl::IndexData>=^{IndexData}^{__shared_weak_count}}}16^{Texture2D=^^?^{ResourceManager}^{RenderResource}^^?*iiiiI{shared_ptr<const ggl::TextureDataAbstract>=^{TextureDataAbstract}^{__shared_weak_count}}BBIIB{shared_ptr<ggl::SamplerState>=^{SamplerState}^{__shared_weak_count}}}20f24
v20@0:4^{RenderState=^^?^{ResourceManager}^{RenderResource}{DepthState=iiiff}{StencilState=iiiiiIII}{RasterizerState=iiI{Box<unsigned int, 2>={Matrix<unsigned int, 2, 1>=[2I]}{Matrix<unsigned int, 2, 1>=[2I]}}}B}8r^{shared_ptr<ggl::Textured::Pos2DUVPipelineState>=^{Pos2DUVPipelineState}^{__shared_weak_count}}12^{Mesh=^^?*^^?^{ResourceManager}^{RenderResource}^{MeshCReflection}{vector<std::__1::shared_ptr<ggl::VertexData>, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > >=^{shared_ptr<ggl::VertexData>}^{shared_ptr<ggl::VertexData>}{__compressed_pair<std::__1::shared_ptr<ggl::VertexData> *, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > >=^{shared_ptr<ggl::VertexData>}}}{shared_ptr<ggl::IndexData>=^{IndexData}^{__shared_weak_count}}}16
v24@0:4^{RenderState=^^?^{ResourceManager}^{RenderResource}{DepthState=iiiff}{StencilState=iiiiiIII}{RasterizerState=iiI{Box<unsigned int, 2>={Matrix<unsigned int, 2, 1>=[2I]}{Matrix<unsigned int, 2, 1>=[2I]}}}B}8r^{shared_ptr<ggl::TextureWithReverseAlpha::Pos2DUVPipelineState>=^{Pos2DUVPipelineState}^{__shared_weak_count}}12^{Mesh=^^?*^^?^{ResourceManager}^{RenderResource}^{MeshCReflection}{vector<std::__1::shared_ptr<ggl::VertexData>, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > >=^{shared_ptr<ggl::VertexData>}^{shared_ptr<ggl::VertexData>}{__compressed_pair<std::__1::shared_ptr<ggl::VertexData> *, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > >=^{shared_ptr<ggl::VertexData>}}}{shared_ptr<ggl::IndexData>=^{IndexData}^{__shared_weak_count}}}16f20
^{CGImage=}12@0:4@8
{shared_ptr<ggl::TextureData2D>=^{TextureData2D}^{__shared_weak_count}}12@0:4^{CGImage=}8
v12@0:4^{Device=^^?{DeviceVersion=II}{DeviceCapabilities=BBIII{DeviceSize=III}}{DeviceAPIProperties=id}ii}8
{shared_ptr<ggl::Texture2D>=^{Texture2D}^{__shared_weak_count}}8@0:4
v16@0:4{shared_ptr<ggl::Texture2D>=^{Texture2D}^{__shared_weak_count}}8
@24@0:4r^{VKTileKey=IiiI}8r^{shared_ptr<ggl::Texture2D>=^{Texture2D}^{__shared_weak_count}}12{shared_ptr<gss::StylesheetManager<gss::PropertyID> >=^{StylesheetManager<gss::PropertyID>}^{__shared_weak_count}}16
@"NSMutableData"
@16@0:4^{Matrix<int, 2, 1>=[2i]}8I12
{shared_ptr<md::LabelTile>="__ptr_"^{LabelTile}"__cntrl_"^{__shared_weak_count}}
@28@0:4r^{VKTileKey=IiiI}8@12C16r^{shared_ptr<md::LabelManager>=^{LabelManager}^{__shared_weak_count}}20@24
{shared_ptr<md::LabelTile>=^{LabelTile}^{__shared_weak_count}}8@0:4
^{CameraManager=^^?BBB{Matrix<int, 2, 1>=[2i]}{Matrix<int, 2, 1>=[2i]}{Matrix<int, 2, 1>=[2i]}{Coordinate3D<Radians, double>={Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<MeterUnitDescription, double>=d}}dBBBB{Coordinate3D<Radians, double>={Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<MeterUnitDescription, double>=d}}{Matrix<int, 2, 1>=[2i]}dBBB{Coordinate3D<Radians, double>={Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<MeterUnitDescription, double>=d}}{Matrix<int, 2, 1>=[2i]}{Matrix<int, 2, 1>=[2i]}dBBB{Coordinate3D<Radians, double>={Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<MeterUnitDescription, double>=d}}{Matrix<int, 2, 1>=[2i]}ddBBiBBBddd{Geocentric<double>=[3d]}{Matrix<double, 3, 1>=[3d]}d}
v12@0:4^{CameraManager=^^?BBB{Matrix<int, 2, 1>=[2i]}{Matrix<int, 2, 1>=[2i]}{Matrix<int, 2, 1>=[2i]}{Coordinate3D<Radians, double>={Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<MeterUnitDescription, double>=d}}dBBBB{Coordinate3D<Radians, double>={Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<MeterUnitDescription, double>=d}}{Matrix<int, 2, 1>=[2i]}dBBB{Coordinate3D<Radians, double>={Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<MeterUnitDescription, double>=d}}{Matrix<int, 2, 1>=[2i]}{Matrix<int, 2, 1>=[2i]}dBBB{Coordinate3D<Radians, double>={Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<MeterUnitDescription, double>=d}}{Matrix<int, 2, 1>=[2i]}ddBBiBBBddd{Geocentric<double>=[3d]}{Matrix<double, 3, 1>=[3d]}d}8
v24@0:4{CGPoint=ff}8{CGPoint=ff}16
@12@0:4^{MapEngine=^^?{shared_ptr<md::TaskContext>=^{TaskContext}^{__shared_weak_count}}{_retain_ptr<GEOResourceManifestConfiguration *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}^{Device}{_retain_ptr<_MapEngineRenderQueueSource *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{unique_ptr<ggl::DisplayLink, std::__1::default_delete<ggl::DisplayLink> >={__compressed_pair<ggl::DisplayLink *, std::__1::default_delete<ggl::DisplayLink> >=^{DisplayLink}}}{unique_ptr<ggl::SnapshotRunLoop, std::__1::default_delete<ggl::SnapshotRunLoop> >={__compressed_pair<ggl::SnapshotRunLoop *, std::__1::default_delete<ggl::SnapshotRunLoop> >=^{SnapshotRunLoop}}}^{RunLoop}{unique_ptr<md::AnimationManager, std::__1::default_delete<md::AnimationManager> >={__compressed_pair<md::AnimationManager *, std::__1::default_delete<md::AnimationManager> >=^{AnimationManager}}}{unique_ptr<md::AnimationRunner, std::__1::default_delete<md::AnimationRunner> >={__compressed_pair<md::AnimationRunner *, std::__1::default_delete<md::AnimationRunner> >=^{AnimationRunner}}}{shared_ptr<md::RunLoopController>=^{RunLoopController}^{__shared_weak_count}}@@@@{unique_ptr<md::CartographicRenderer, std::__1::default_delete<md::CartographicRenderer> >={__compressed_pair<md::CartographicRenderer *, std::__1::default_delete<md::CartographicRenderer> >=^{CartographicRenderer}}}{unique_ptr<md::realistic::RealisticRenderer, std::__1::default_delete<md::realistic::RealisticRenderer> >={__compressed_pair<md::realistic::RealisticRenderer *, std::__1::default_delete<md::realistic::RealisticRenderer> >=^{RealisticRenderer}}}^{Renderer}{unique_ptr<md::LayoutContext, std::__1::default_delete<md::LayoutContext> >={__compressed_pair<md::LayoutContext *, std::__1::default_delete<md::LayoutContext> >=^{LayoutContext}}}{_retain_ptr<VKCamera *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{shared_ptr<md::LabelManager>=^{LabelManager}^{__shared_weak_count}}{shared_ptr<md::LabelManager>=^{LabelManager}^{__shared_weak_count}}{unique_ptr<md::LogicManager, std::__1::default_delete<md::LogicManager> >={__compressed_pair<md::LogicManager *, std::__1::default_delete<md::LogicManager> >=^{LogicManager}}}BBB{atomic<bool>=AB}{atomic<bool>=AB}B}8
@20@0:4^{MapEngine=^^?{shared_ptr<md::TaskContext>=^{TaskContext}^{__shared_weak_count}}{_retain_ptr<GEOResourceManifestConfiguration *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}^{Device}{_retain_ptr<_MapEngineRenderQueueSource *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{unique_ptr<ggl::DisplayLink, std::__1::default_delete<ggl::DisplayLink> >={__compressed_pair<ggl::DisplayLink *, std::__1::default_delete<ggl::DisplayLink> >=^{DisplayLink}}}{unique_ptr<ggl::SnapshotRunLoop, std::__1::default_delete<ggl::SnapshotRunLoop> >={__compressed_pair<ggl::SnapshotRunLoop *, std::__1::default_delete<ggl::SnapshotRunLoop> >=^{SnapshotRunLoop}}}^{RunLoop}{unique_ptr<md::AnimationManager, std::__1::default_delete<md::AnimationManager> >={__compressed_pair<md::AnimationManager *, std::__1::default_delete<md::AnimationManager> >=^{AnimationManager}}}{unique_ptr<md::AnimationRunner, std::__1::default_delete<md::AnimationRunner> >={__compressed_pair<md::AnimationRunner *, std::__1::default_delete<md::AnimationRunner> >=^{AnimationRunner}}}{shared_ptr<md::RunLoopController>=^{RunLoopController}^{__shared_weak_count}}@@@@{unique_ptr<md::CartographicRenderer, std::__1::default_delete<md::CartographicRenderer> >={__compressed_pair<md::CartographicRenderer *, std::__1::default_delete<md::CartographicRenderer> >=^{CartographicRenderer}}}{unique_ptr<md::realistic::RealisticRenderer, std::__1::default_delete<md::realistic::RealisticRenderer> >={__compressed_pair<md::realistic::RealisticRenderer *, std::__1::default_delete<md::realistic::RealisticRenderer> >=^{RealisticRenderer}}}^{Renderer}{unique_ptr<md::LayoutContext, std::__1::default_delete<md::LayoutContext> >={__compressed_pair<md::LayoutContext *, std::__1::default_delete<md::LayoutContext> >=^{LayoutContext}}}{_retain_ptr<VKCamera *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{shared_ptr<md::LabelManager>=^{LabelManager}^{__shared_weak_count}}{shared_ptr<md::LabelManager>=^{LabelManager}^{__shared_weak_count}}{unique_ptr<md::LogicManager, std::__1::default_delete<md::LogicManager> >={__compressed_pair<md::LogicManager *, std::__1::default_delete<md::LogicManager> >=^{LogicManager}}}BBB{atomic<bool>=AB}{atomic<bool>=AB}B}8B12i16
@"VKImage"
v12@0:4^{CGColor=}8
^{CGColor=}8@0:4
{atomic<bool>="__a_"AB}
{Style="_iconStyle"{optional<gss::IconStyle>="_hasValue"B"_value"(ValueUnion="data"[1C]"type"C)}"_iconLayers"{vector<md::IconImage::IconLayer, std::__1::allocator<md::IconImage::IconLayer> >="__begin_"^C"__end_"^C"__end_cap_"{__compressed_pair<md::IconImage::IconLayer *, std::__1::allocator<md::IconImage::IconLayer> >="__value_"^C}}"_scale"f"_contentScale"f"_fillWeight"f"_strokeWeight"f"_shadowWeight"f"_cornerRadius"f"_glyphMargin"{Matrix<float, 2, 1>="_e"[2f]}"_shadowOffset"{Matrix<float, 2, 1>="_e"[2f]}"_fillColor"{FixedPointVector<unsigned char, 4>="_e"[4C]}"_strokeColor"{FixedPointVector<unsigned char, 4>="_e"[4C]}"_shadowColor"{FixedPointVector<unsigned char, 4>="_e"[4C]}"_glyphColor"{FixedPointVector<unsigned char, 4>="_e"[4C]}"_gradientTop"{FixedPointVector<unsigned char, 4>="_e"[4C]}"_gradientBottom"{FixedPointVector<unsigned char, 4>="_e"[4C]}"_glyphBlendMode"C"_glyphStyle"C"_shieldID"{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >="__r_"{__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >="__value_"{__rep=""(?="__l"{__long="__cap_"I"__size_"I"__data_"*}"__s"{__short=""(?="__size_"C"__lx"c)"__data_"[11c]}"__r"{__raw="__words"[3L]})}}}}
{ExtraStyle="_scale"f"_contentScale"f"_tailDirection"f"_glyphImageSize"{Matrix<unsigned int, 2, 1>="_e"[2I]}"_landmarkImageSize"{Matrix<unsigned int, 2, 1>="_e"[2I]}"_outlineImageSize"{Matrix<unsigned int, 2, 1>="_e"[2I]}"_text"{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >="__r_"{__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >="__value_"{__rep=""(?="__l"{__long="__cap_"I"__size_"I"__data_"*}"__s"{__short=""(?="__size_"C"__lx"c)"__data_"[11c]}"__r"{__raw="__words"[3L]})}}}}
@16@0:4^{CGImage=}8f12
v16@0:4@?8@12
{Box<unsigned int, 2>={Matrix<unsigned int, 2, 1>=[2I]}{Matrix<unsigned int, 2, 1>=[2I]}}8@0:4
{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}8@0:4
{Matrix<float, 2, 1>=[2f]}8@0:4
{Style={optional<gss::IconStyle>=B(ValueUnion=[1C]C)}{vector<md::IconImage::IconLayer, std::__1::allocator<md::IconImage::IconLayer> >=^C^C{__compressed_pair<md::IconImage::IconLayer *, std::__1::allocator<md::IconImage::IconLayer> >=^C}}ffffff{Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}CC{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}8@0:4
{_retain_ptr<CGImage *, geo::_retain_cf<CGImage *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf>="_vptr$_retain_ptr"^^?"_obj"^{CGImage}"_retain"{_retain_cf<CGImage *>=}"_release"{_release_cf=}}
{unique_ptr<md::IconImage::CircleMetrics, std::__1::default_delete<md::IconImage::CircleMetrics> >="__ptr_"{__compressed_pair<md::IconImage::CircleMetrics *, std::__1::default_delete<md::IconImage::CircleMetrics> >="__value_"^{CircleMetrics}}}
{unique_ptr<md::IconImage::BalloonMetrics, std::__1::default_delete<md::IconImage::BalloonMetrics> >="__ptr_"{__compressed_pair<md::IconImage::BalloonMetrics *, std::__1::default_delete<md::IconImage::BalloonMetrics> >="__value_"^{BalloonMetrics}}}
@28@0:4^{CGImage=}8r^{Style={optional<gss::IconStyle>=B(ValueUnion=[1C]C)}{vector<md::IconImage::IconLayer, std::__1::allocator<md::IconImage::IconLayer> >=^C^C{__compressed_pair<md::IconImage::IconLayer *, std::__1::allocator<md::IconImage::IconLayer> >=^C}}ffffff{Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}CC{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}12r^{ExtraStyle=fff{Matrix<unsigned int, 2, 1>=[2I]}{Matrix<unsigned int, 2, 1>=[2I]}{Matrix<unsigned int, 2, 1>=[2I]}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}16f20B24
@28@0:4^{CGImage=}8^{CGImage=}12r^{Style={optional<gss::IconStyle>=B(ValueUnion=[1C]C)}{vector<md::IconImage::IconLayer, std::__1::allocator<md::IconImage::IconLayer> >=^C^C{__compressed_pair<md::IconImage::IconLayer *, std::__1::allocator<md::IconImage::IconLayer> >=^C}}ffffff{Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}CC{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}16r^{ExtraStyle=fff{Matrix<unsigned int, 2, 1>=[2I]}{Matrix<unsigned int, 2, 1>=[2I]}{Matrix<unsigned int, 2, 1>=[2I]}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}20f24
@"VKIconArtwork"
@"_VKLocalIconAtlas"
{read_write_lock="_lock"{_opaque_pthread_rwlock_t="__sig"l"__opaque"[124c]}}
{map<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<gss::StylesheetManager<gss::PropertyID> >, NSStringMapComparison, std::__1::allocator<std::__1::pair<const geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<gss::StylesheetManager<gss::PropertyID> > > > >="__tree_"{__tree<std::__1::__value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<gss::StylesheetManager<gss::PropertyID> > >, std::__1::__map_value_compare<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<gss::StylesheetManager<gss::PropertyID> > >, NSStringMapComparison, true>, std::__1::allocator<std::__1::__value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<gss::StylesheetManager<gss::PropertyID> > > > >="__begin_node_"^{__tree_end_node<std::__1::__tree_node_base<void *> *>}"__pair1_"{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<gss::StylesheetManager<gss::PropertyID> > >, void *> > >="__value_"{__tree_end_node<std::__1::__tree_node_base<void *> *>="__left_"^{__tree_node_base<void *>}}}"__pair3_"{__compressed_pair<unsigned long, std::__1::__map_value_compare<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<gss::StylesheetManager<gss::PropertyID> > >, NSStringMapComparison, true> >="__value_"L}}}
@28@0:4@8@12{shared_ptr<md::StylesheetVendor>=^{StylesheetVendor}^{__shared_weak_count}}16B24
@24@0:4f8i12@16@?20
@28@0:4f8i12@16B20@?24
@36@0:4@8@12^{Style={optional<gss::IconStyle>=B(ValueUnion=[1C]C)}{vector<md::IconImage::IconLayer, std::__1::allocator<md::IconImage::IconLayer> >=^C^C{__compressed_pair<md::IconImage::IconLayer *, std::__1::allocator<md::IconImage::IconLayer> >=^C}}ffffff{Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}CC{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}16^{ExtraStyle=fff{Matrix<unsigned int, 2, 1>=[2I]}{Matrix<unsigned int, 2, 1>=[2I]}{Matrix<unsigned int, 2, 1>=[2I]}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}20f24i28B32
@32@0:4@8@12^{Style={optional<gss::IconStyle>=B(ValueUnion=[1C]C)}{vector<md::IconImage::IconLayer, std::__1::allocator<md::IconImage::IconLayer> >=^C^C{__compressed_pair<md::IconImage::IconLayer *, std::__1::allocator<md::IconImage::IconLayer> >=^C}}ffffff{Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}CC{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}16^{ExtraStyle=fff{Matrix<unsigned int, 2, 1>=[2I]}{Matrix<unsigned int, 2, 1>=[2I]}{Matrix<unsigned int, 2, 1>=[2I]}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}20f24i28
@40@0:4I8I12@16^{Style={optional<gss::IconStyle>=B(ValueUnion=[1C]C)}{vector<md::IconImage::IconLayer, std::__1::allocator<md::IconImage::IconLayer> >=^C^C{__compressed_pair<md::IconImage::IconLayer *, std::__1::allocator<md::IconImage::IconLayer> >=^C}}ffffff{Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}CC{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}20^{ExtraStyle=fff{Matrix<unsigned int, 2, 1>=[2I]}{Matrix<unsigned int, 2, 1>=[2I]}{Matrix<unsigned int, 2, 1>=[2I]}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}24f28i32B36
@36@0:4I8I12@16^{Style={optional<gss::IconStyle>=B(ValueUnion=[1C]C)}{vector<md::IconImage::IconLayer, std::__1::allocator<md::IconImage::IconLayer> >=^C^C{__compressed_pair<md::IconImage::IconLayer *, std::__1::allocator<md::IconImage::IconLayer> >=^C}}ffffff{Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}CC{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}20^{ExtraStyle=fff{Matrix<unsigned int, 2, 1>=[2I]}{Matrix<unsigned int, 2, 1>=[2I]}{Matrix<unsigned int, 2, 1>=[2I]}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}24f28i32
@40@0:4I8Q12@20^{Style={optional<gss::IconStyle>=B(ValueUnion=[1C]C)}{vector<md::IconImage::IconLayer, std::__1::allocator<md::IconImage::IconLayer> >=^C^C{__compressed_pair<md::IconImage::IconLayer *, std::__1::allocator<md::IconImage::IconLayer> >=^C}}ffffff{Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}CC{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}24^{ExtraStyle=fff{Matrix<unsigned int, 2, 1>=[2I]}{Matrix<unsigned int, 2, 1>=[2I]}{Matrix<unsigned int, 2, 1>=[2I]}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}28f32i36
@36@0:4Q8@16^{Style={optional<gss::IconStyle>=B(ValueUnion=[1C]C)}{vector<md::IconImage::IconLayer, std::__1::allocator<md::IconImage::IconLayer> >=^C^C{__compressed_pair<md::IconImage::IconLayer *, std::__1::allocator<md::IconImage::IconLayer> >=^C}}ffffff{Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}CC{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}20^{ExtraStyle=fff{Matrix<unsigned int, 2, 1>=[2I]}{Matrix<unsigned int, 2, 1>=[2I]}{Matrix<unsigned int, 2, 1>=[2I]}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}24f28i32
B24@0:4@8@12f16^{VKIconStyleDescriptor=If{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{Style={optional<gss::IconStyle>=B(ValueUnion=[1C]C)}{vector<md::IconImage::IconLayer, std::__1::allocator<md::IconImage::IconLayer> >=^C^C{__compressed_pair<md::IconImage::IconLayer *, std::__1::allocator<md::IconImage::IconLayer> >=^C}}ffffff{Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}CC{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}{ExtraStyle=fff{Matrix<unsigned int, 2, 1>=[2I]}{Matrix<unsigned int, 2, 1>=[2I]}{Matrix<unsigned int, 2, 1>=[2I]}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}}20
B28@0:4@8@12f16^{VKIconStyleDescriptor=If{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{Style={optional<gss::IconStyle>=B(ValueUnion=[1C]C)}{vector<md::IconImage::IconLayer, std::__1::allocator<md::IconImage::IconLayer> >=^C^C{__compressed_pair<md::IconImage::IconLayer *, std::__1::allocator<md::IconImage::IconLayer> >=^C}}ffffff{Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}CC{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}{ExtraStyle=fff{Matrix<unsigned int, 2, 1>=[2I]}{Matrix<unsigned int, 2, 1>=[2I]}{Matrix<unsigned int, 2, 1>=[2I]}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}}20B24
B36@0:4@8@12f16^{VKIconStyleDescriptor=If{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{Style={optional<gss::IconStyle>=B(ValueUnion=[1C]C)}{vector<md::IconImage::IconLayer, std::__1::allocator<md::IconImage::IconLayer> >=^C^C{__compressed_pair<md::IconImage::IconLayer *, std::__1::allocator<md::IconImage::IconLayer> >=^C}}ffffff{Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}CC{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}{ExtraStyle=fff{Matrix<unsigned int, 2, 1>=[2I]}{Matrix<unsigned int, 2, 1>=[2I]}{Matrix<unsigned int, 2, 1>=[2I]}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}}20B24B28B32
@32@0:4@8@12f16i20Q24
@36@0:4@8@12f16i20Q24B32
@40@0:4@8@12f16i20Q24B32B36
@44@0:4@8@12f16i20Q24B32B36B40
@48@0:4@8@12f16i20Q24B32B36B40B44
@52@0:4@8@12r*16f20i24Q28B36B40B44B48
@196@0:4@8{VKIconStyleDescriptor=If{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{Style={optional<gss::IconStyle>=B(ValueUnion=[1C]C)}{vector<md::IconImage::IconLayer, std::__1::allocator<md::IconImage::IconLayer> >=^C^C{__compressed_pair<md::IconImage::IconLayer *, std::__1::allocator<md::IconImage::IconLayer> >=^C}}ffffff{Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}CC{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}{ExtraStyle=fff{Matrix<unsigned int, 2, 1>=[2I]}{Matrix<unsigned int, 2, 1>=[2I]}{Matrix<unsigned int, 2, 1>=[2I]}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}}12f176i180Q184B192
@40@0:4@8{shared_ptr<gss::StylesheetManager<gss::PropertyID> >=^{StylesheetManager<gss::PropertyID>}^{__shared_weak_count}}12f20i24Q28B36
@72@0:4@8{shared_ptr<gss::StylesheetManager<gss::PropertyID> >=^{StylesheetManager<gss::PropertyID>}^{__shared_weak_count}}12f20i24Q28B36{QueryOverrides=BBBBBBBC{DisplayStyle=CCCCC}CBC{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}B}40
^{CGColor=}20@0:4@8@12f16
C20@0:4@8@12f16
@20@0:4I8i12f16
@24@0:4I8I12i16f20
@"VKPIconPack"
{_GEOGenericContainer<md::IconCacheKey, id, std::__1::hash<md::IconCacheKey>, std::__1::equal_to<md::IconCacheKey>, geo::GEOGenericContainerWeakReferenceTag, 0, 0, geo::GEOGenericContainerLockingTag, detail::_default_pointer_type>="_lock"{mutex="__m_"{_opaque_pthread_mutex_t="__sig"l"__opaque"[40c]}}"_list"{list<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, std::__1::allocator<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr> > >="__end_"{__list_node_base<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, void *>="__prev_"^{__list_node_base<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, void *>}"__next_"^{__list_node_base<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, void *>}}"__size_alloc_"{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, void *> > >="__value_"L}}"_map"{unordered_map<md::IconCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, void *>, std::__1::hash<md::IconCacheKey>, std::__1::equal_to<md::IconCacheKey>, std::__1::allocator<std::__1::pair<const md::IconCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, void *> > > >="__table_"{__hash_table<std::__1::__hash_value_type<md::IconCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, void *> >, std::__1::__unordered_map_hasher<md::IconCacheKey, std::__1::__hash_value_type<md::IconCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, void *> >, std::__1::hash<md::IconCacheKey>, true>, std::__1::__unordered_map_equal<md::IconCacheKey, std::__1::__hash_value_type<md::IconCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, void *> >, std::__1::equal_to<md::IconCacheKey>, true>, std::__1::allocator<std::__1::__hash_value_type<md::IconCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, void *> > > >="__bucket_list_"{unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::IconCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, void *> >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::IconCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, void *> >, void *> *> *> > >="__ptr_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::IconCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, void *> >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::IconCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, void *> >, void *> *> *> > >="__value_"^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::IconCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, void *> >, void *> *>}"__value_"{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::IconCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, void *> >, void *> *> *> >="__data_"{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::IconCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, void *> >, void *> *> *> >="__value_"L}}}}"__p1_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::IconCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, void *> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::IconCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, void *> >, void *> > >="__value_"{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::IconCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, void *> >, void *> *>="__next_"^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::IconCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, void *> >, void *> *>}}}"__p2_"{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<md::IconCacheKey, std::__1::__hash_value_type<md::IconCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, void *> >, std::__1::hash<md::IconCacheKey>, true> >="__value_"L}"__p3_"{__compressed_pair<float, std::__1::__unordered_map_equal<md::IconCacheKey, std::__1::__hash_value_type<md::IconCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, void *> >, std::__1::equal_to<md::IconCacheKey>, true> >="__value_"f}}}"_maxCapacity"I"_maxCost"I"_currentCost"I"_currentCount"I}
@36@0:4^{CGImage=}8^{CGImage=}12^{CGColor=}16^{Style={optional<gss::IconStyle>=B(ValueUnion=[1C]C)}{vector<md::IconImage::IconLayer, std::__1::allocator<md::IconImage::IconLayer> >=^C^C{__compressed_pair<md::IconImage::IconLayer *, std::__1::allocator<md::IconImage::IconLayer> >=^C}}ffffff{Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}CC{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}20^{ExtraStyle=fff{Matrix<unsigned int, 2, 1>=[2I]}{Matrix<unsigned int, 2, 1>=[2I]}{Matrix<unsigned int, 2, 1>=[2I]}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}24f28B32
^{CGColor=}16@0:4@8f12
@44@0:4I8Q12^{Style={optional<gss::IconStyle>=B(ValueUnion=[1C]C)}{vector<md::IconImage::IconLayer, std::__1::allocator<md::IconImage::IconLayer> >=^C^C{__compressed_pair<md::IconImage::IconLayer *, std::__1::allocator<md::IconImage::IconLayer> >=^C}}ffffff{Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}CC{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}20^{ExtraStyle=fff{Matrix<unsigned int, 2, 1>=[2I]}{Matrix<unsigned int, 2, 1>=[2I]}{Matrix<unsigned int, 2, 1>=[2I]}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}24f28i32B36@40
@44@0:4I8I12^{Style={optional<gss::IconStyle>=B(ValueUnion=[1C]C)}{vector<md::IconImage::IconLayer, std::__1::allocator<md::IconImage::IconLayer> >=^C^C{__compressed_pair<md::IconImage::IconLayer *, std::__1::allocator<md::IconImage::IconLayer> >=^C}}ffffff{Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}CC{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}16^{ExtraStyle=fff{Matrix<unsigned int, 2, 1>=[2I]}{Matrix<unsigned int, 2, 1>=[2I]}{Matrix<unsigned int, 2, 1>=[2I]}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}20f24i28B32B36@40
@40@0:4@8^{Style={optional<gss::IconStyle>=B(ValueUnion=[1C]C)}{vector<md::IconImage::IconLayer, std::__1::allocator<md::IconImage::IconLayer> >=^C^C{__compressed_pair<md::IconImage::IconLayer *, std::__1::allocator<md::IconImage::IconLayer> >=^C}}ffffff{Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}CC{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}12^{ExtraStyle=fff{Matrix<unsigned int, 2, 1>=[2I]}{Matrix<unsigned int, 2, 1>=[2I]}{Matrix<unsigned int, 2, 1>=[2I]}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}16f20i24B28B32@36
^{CGImage=}20@0:4@8f12i16
^{CGImage=}16@0:4@8f12
@28@0:4I8I12^{Style={optional<gss::IconStyle>=B(ValueUnion=[1C]C)}{vector<md::IconImage::IconLayer, std::__1::allocator<md::IconImage::IconLayer> >=^C^C{__compressed_pair<md::IconImage::IconLayer *, std::__1::allocator<md::IconImage::IconLayer> >=^C}}ffffff{Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}CC{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}16f20i24
@32@0:4I8Q12^{Style={optional<gss::IconStyle>=B(ValueUnion=[1C]C)}{vector<md::IconImage::IconLayer, std::__1::allocator<md::IconImage::IconLayer> >=^C^C{__compressed_pair<md::IconImage::IconLayer *, std::__1::allocator<md::IconImage::IconLayer> >=^C}}ffffff{Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}{FixedPointVector<unsigned char, 4>=[4C]}CC{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}20f24i28
{DebugTree="_mapView"@"VKMapView""_nodes"{vector<std::__1::shared_ptr<md::DebugTreeNode>, std::__1::allocator<std::__1::shared_ptr<md::DebugTreeNode> > >="__begin_"^{shared_ptr<md::DebugTreeNode>}"__end_"^{shared_ptr<md::DebugTreeNode>}"__end_cap_"{__compressed_pair<std::__1::shared_ptr<md::DebugTreeNode> *, std::__1::allocator<std::__1::shared_ptr<md::DebugTreeNode> > >="__value_"^{shared_ptr<md::DebugTreeNode>}}}"_options"[4B]}
{vector<geo::_retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::allocator<geo::_retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >="__begin_"^{_retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}"__end_"^{_retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}"__end_cap_"{__compressed_pair<geo::_retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> *, std::__1::allocator<geo::_retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >="__value_"^{_retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}}}
{vector<std::__1::shared_ptr<md::CoastlineGroup>, std::__1::allocator<std::__1::shared_ptr<md::CoastlineGroup> > >="__begin_"^{shared_ptr<md::CoastlineGroup>}"__end_"^{shared_ptr<md::CoastlineGroup>}"__end_cap_"{__compressed_pair<std::__1::shared_ptr<md::CoastlineGroup> *, std::__1::allocator<std::__1::shared_ptr<md::CoastlineGroup> > >="__value_"^{shared_ptr<md::CoastlineGroup>}}}
@"VKAnimation"
{unordered_map<unsigned long long, VKPolygonGroup *, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, VKPolygonGroup *> > >="__table_"{__hash_table<std::__1::__hash_value_type<unsigned long long, VKPolygonGroup *>, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, VKPolygonGroup *>, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, VKPolygonGroup *>, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, VKPolygonGroup *> > >="__bucket_list_"{unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, VKPolygonGroup *>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, VKPolygonGroup *>, void *> *> *> > >="__ptr_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, VKPolygonGroup *>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, VKPolygonGroup *>, void *> *> *> > >="__value_"^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, VKPolygonGroup *>, void *> *>}"__value_"{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, VKPolygonGroup *>, void *> *> *> >="__data_"{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, VKPolygonGroup *>, void *> *> *> >="__value_"L}}}}"__p1_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, VKPolygonGroup *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, VKPolygonGroup *>, void *> > >="__value_"{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, VKPolygonGroup *>, void *> *>="__next_"^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, VKPolygonGroup *>, void *> *>}}}"__p2_"{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, VKPolygonGroup *>, std::__1::hash<unsigned long long>, true> >="__value_"L}"__p3_"{__compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, VKPolygonGroup *>, std::__1::equal_to<unsigned long long>, true> >="__value_"f}}}
{unordered_map<unsigned long long, md::PolygonRouteAttributes, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, md::PolygonRouteAttributes> > >="__table_"{__hash_table<std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes> > >="__bucket_list_"{unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, void *> *> *> > >="__ptr_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, void *> *> *> > >="__value_"^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, void *> *>}"__value_"{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, void *> *> *> >="__data_"{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, void *> *> *> >="__value_"L}}}}"__p1_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, void *> > >="__value_"{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, void *> *>="__next_"^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, void *> *>}}}"__p2_"{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, std::__1::hash<unsigned long long>, true> >="__value_"L}"__p3_"{__compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, std::__1::equal_to<unsigned long long>, true> >="__value_"f}}}
r^{vector<geo::_retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::allocator<geo::_retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >=^{_retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}^{_retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}{__compressed_pair<geo::_retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> *, std::__1::allocator<geo::_retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >=^{_retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}}}8@0:4
@40@0:4r^{VKTileKey=IiiI}8@12B16{shared_ptr<gss::StylesheetManager<gss::PropertyID> >=^{StylesheetManager<gss::PropertyID>}^{__shared_weak_count}}20@28f32^{Device=^^?{DeviceVersion=II}{DeviceCapabilities=BBIII{DeviceSize=III}}{DeviceAPIProperties=id}ii}36
v20@0:4^{Device=^^?{DeviceVersion=II}{DeviceCapabilities=BBIII{DeviceSize=III}}{DeviceAPIProperties=id}ii}8@12B16
v12@0:4^{shared_ptr<gss::StylesheetManager<gss::PropertyID> >=^{StylesheetManager<gss::PropertyID>}^{__shared_weak_count}}8
v12@0:4r^{unordered_map<unsigned long long, md::PolygonRouteAttributes, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, md::PolygonRouteAttributes> > >={__hash_table<std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, void *> *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, std::__1::hash<unsigned long long>, true> >=L}{__compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, std::__1::equal_to<unsigned long long>, true> >=f}}}8
^{vector<std::__1::shared_ptr<md::CoastlineGroup>, std::__1::allocator<std::__1::shared_ptr<md::CoastlineGroup> > >=^{shared_ptr<md::CoastlineGroup>}^{shared_ptr<md::CoastlineGroup>}{__compressed_pair<std::__1::shared_ptr<md::CoastlineGroup> *, std::__1::allocator<std::__1::shared_ptr<md::CoastlineGroup> > >=^{shared_ptr<md::CoastlineGroup>}}}8@0:4
@20@0:4@8r^{_GEOTileKey=b6b26b26b6b8b8b8b1b7[4C]}12r^{VKTileKey=IiiI}16
@"VKLabelFeatureMarker"
@12@0:4r^{shared_ptr<md::LabelFeatureMarker>=}8
@"VKLabelNavRoadLabel"
{Mercator2<double>="_e"[2d]}
@"VKTrafficCameraFeature"
{shared_ptr<md::LabelStyle>="__ptr_"^{LabelStyle}"__cntrl_"^{__shared_weak_count}}
v12@0:4^{NavContext=^^?^{LabelManager}^{LabelLayoutContext}^{LabelNavLayoutContext}}8
@20@0:4@8r^{Mercator2<double>=[2d]}12r^{Mercator2<double>=[2d]}16
{Mercator2<double>=[2d]}8@0:4
v24@0:4{Mercator2<double>=[2d]}8
^{LabelExternalObjectsModerator={shared_ptr<md::weak_interface_ptr<md::LabelExternalObjectsModerator> >=^{weak_interface_ptr<md::LabelExternalObjectsModerator>}^{__shared_weak_count}}^{LabelExternalIconRenderer}{vector<std::__1::shared_ptr<md::LabelCreateExternalIconRequest>, std::__1::allocator<std::__1::shared_ptr<md::LabelCreateExternalIconRequest> > >=^{shared_ptr<md::LabelCreateExternalIconRequest>}^{shared_ptr<md::LabelCreateExternalIconRequest>}{__compressed_pair<std::__1::shared_ptr<md::LabelCreateExternalIconRequest> *, std::__1::allocator<std::__1::shared_ptr<md::LabelCreateExternalIconRequest> > >=^{shared_ptr<md::LabelCreateExternalIconRequest>}}}{unordered_set<std::__1::shared_ptr<md::LabelExternalIcon>, std::__1::hash<std::__1::shared_ptr<md::LabelExternalIcon> >, std::__1::equal_to<std::__1::shared_ptr<md::LabelExternalIcon> >, std::__1::allocator<std::__1::shared_ptr<md::LabelExternalIcon> > >={__hash_table<std::__1::shared_ptr<md::LabelExternalIcon>, std::__1::hash<std::__1::shared_ptr<md::LabelExternalIcon> >, std::__1::equal_to<std::__1::shared_ptr<md::LabelExternalIcon> >, std::__1::allocator<std::__1::shared_ptr<md::LabelExternalIcon> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelExternalIcon>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelExternalIcon>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelExternalIcon>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelExternalIcon>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelExternalIcon>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelExternalIcon>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelExternalIcon>, void *> *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelExternalIcon>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::shared_ptr<md::LabelExternalIcon>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelExternalIcon>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelExternalIcon>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<std::__1::shared_ptr<md::LabelExternalIcon> > >=L}{__compressed_pair<float, std::__1::equal_to<std::__1::shared_ptr<md::LabelExternalIcon> > >=f}}}{set<unsigned long long, std::__1::less<unsigned long long>, std::__1::allocator<unsigned long long> >={__tree<unsigned long long, std::__1::less<unsigned long long>, std::__1::allocator<unsigned long long> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<unsigned long long, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<unsigned long long> >=L}}}{set<unsigned long long, std::__1::less<unsigned long long>, std::__1::allocator<unsigned long long> >={__tree<unsigned long long, std::__1::less<unsigned long long>, std::__1::allocator<unsigned long long> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<unsigned long long, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<unsigned long long> >=L}}}{unordered_map<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink>, std::__1::hash<const GEOTransitLink *>, std::__1::equal_to<const GEOTransitLink *>, std::__1::allocator<std::__1::pair<const GEOTransitLink *const, std::__1::weak_ptr<md::LabelExternalTransitLink> > > >={__hash_table<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink> >, std::__1::__unordered_map_hasher<const GEOTransitLink *, std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink> >, std::__1::hash<const GEOTransitLink *>, true>, std::__1::__unordered_map_equal<const GEOTransitLink *, std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink> >, std::__1::equal_to<const GEOTransitLink *>, true>, std::__1::allocator<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink> > > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink> >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink> >, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink> >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink> >, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink> >, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink> >, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink> >, void *> *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink> >, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink> >, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink> >, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<const GEOTransitLink *, std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink> >, std::__1::hash<const GEOTransitLink *>, true> >=L}{__compressed_pair<float, std::__1::__unordered_map_equal<const GEOTransitLink *, std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink> >, std::__1::equal_to<const GEOTransitLink *>, true> >=f}}}{unordered_map<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode>, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode> > > >={__hash_table<std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode> >, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode> >, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode> >, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode> > > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode> >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode> >, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode> >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode> >, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode> >, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode> >, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode> >, void *> *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode> >, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode> >, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode> >, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode> >, std::__1::hash<unsigned long long>, true> >=L}{__compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode> >, std::__1::equal_to<unsigned long long>, true> >=f}}}{mutex={_opaque_pthread_mutex_t=l[40c]}}{mutex={_opaque_pthread_mutex_t=l[40c]}}BB}
{shared_ptr<const md::TransitLineSharedResources>="__ptr_"^{TransitLineSharedResources}"__cntrl_"^{__shared_weak_count}}
@40@0:4@8@12@16@20{shared_ptr<md::TaskContext>=^{TaskContext}^{__shared_weak_count}}24^{LabelExternalObjectsModerator={shared_ptr<md::weak_interface_ptr<md::LabelExternalObjectsModerator> >=^{weak_interface_ptr<md::LabelExternalObjectsModerator>}^{__shared_weak_count}}^{LabelExternalIconRenderer}{vector<std::__1::shared_ptr<md::LabelCreateExternalIconRequest>, std::__1::allocator<std::__1::shared_ptr<md::LabelCreateExternalIconRequest> > >=^{shared_ptr<md::LabelCreateExternalIconRequest>}^{shared_ptr<md::LabelCreateExternalIconRequest>}{__compressed_pair<std::__1::shared_ptr<md::LabelCreateExternalIconRequest> *, std::__1::allocator<std::__1::shared_ptr<md::LabelCreateExternalIconRequest> > >=^{shared_ptr<md::LabelCreateExternalIconRequest>}}}{unordered_set<std::__1::shared_ptr<md::LabelExternalIcon>, std::__1::hash<std::__1::shared_ptr<md::LabelExternalIcon> >, std::__1::equal_to<std::__1::shared_ptr<md::LabelExternalIcon> >, std::__1::allocator<std::__1::shared_ptr<md::LabelExternalIcon> > >={__hash_table<std::__1::shared_ptr<md::LabelExternalIcon>, std::__1::hash<std::__1::shared_ptr<md::LabelExternalIcon> >, std::__1::equal_to<std::__1::shared_ptr<md::LabelExternalIcon> >, std::__1::allocator<std::__1::shared_ptr<md::LabelExternalIcon> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelExternalIcon>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelExternalIcon>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelExternalIcon>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelExternalIcon>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelExternalIcon>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelExternalIcon>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelExternalIcon>, void *> *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelExternalIcon>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::shared_ptr<md::LabelExternalIcon>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelExternalIcon>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelExternalIcon>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<std::__1::shared_ptr<md::LabelExternalIcon> > >=L}{__compressed_pair<float, std::__1::equal_to<std::__1::shared_ptr<md::LabelExternalIcon> > >=f}}}{set<unsigned long long, std::__1::less<unsigned long long>, std::__1::allocator<unsigned long long> >={__tree<unsigned long long, std::__1::less<unsigned long long>, std::__1::allocator<unsigned long long> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<unsigned long long, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<unsigned long long> >=L}}}{set<unsigned long long, std::__1::less<unsigned long long>, std::__1::allocator<unsigned long long> >={__tree<unsigned long long, std::__1::less<unsigned long long>, std::__1::allocator<unsigned long long> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<unsigned long long, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<unsigned long long> >=L}}}{unordered_map<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink>, std::__1::hash<const GEOTransitLink *>, std::__1::equal_to<const GEOTransitLink *>, std::__1::allocator<std::__1::pair<const GEOTransitLink *const, std::__1::weak_ptr<md::LabelExternalTransitLink> > > >={__hash_table<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink> >, std::__1::__unordered_map_hasher<const GEOTransitLink *, std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink> >, std::__1::hash<const GEOTransitLink *>, true>, std::__1::__unordered_map_equal<const GEOTransitLink *, std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink> >, std::__1::equal_to<const GEOTransitLink *>, true>, std::__1::allocator<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink> > > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink> >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink> >, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink> >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink> >, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink> >, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink> >, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink> >, void *> *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink> >, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink> >, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink> >, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<const GEOTransitLink *, std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink> >, std::__1::hash<const GEOTransitLink *>, true> >=L}{__compressed_pair<float, std::__1::__unordered_map_equal<const GEOTransitLink *, std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink> >, std::__1::equal_to<const GEOTransitLink *>, true> >=f}}}{unordered_map<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode>, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode> > > >={__hash_table<std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode> >, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode> >, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode> >, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode> > > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode> >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode> >, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode> >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode> >, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode> >, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode> >, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode> >, void *> *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode> >, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode> >, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode> >, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode> >, std::__1::hash<unsigned long long>, true> >=L}{__compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode> >, std::__1::equal_to<unsigned long long>, true> >=f}}}{mutex={_opaque_pthread_mutex_t=l[40c]}}{mutex={_opaque_pthread_mutex_t=l[40c]}}BB}32r^{shared_ptr<const md::TransitLineSharedResources>=^{TransitLineSharedResources}^{__shared_weak_count}}36
{shared_ptr<md::DataOverrideManager>=^{DataOverrideManager}^{__shared_weak_count}}8@0:4
v16@0:4{shared_ptr<md::DataOverrideManager>=^{DataOverrideManager}^{__shared_weak_count}}8
@"GEOTileRequester"
{_GEOTileKey="z"b6"x"b26"y"b26"type"b6"pixelSize"b8"textScale"b8"provider"b8"expires"b1"reserved1"b7"reserved2"[4C]}
{_GEOTileKey=b6b26b26b6b8b8b8b1b7[4C]}8@0:4
v24@0:4{_GEOTileKey=b6b26b26b6b8b8b8b1b7[4C]}8
B16@0:4@8@12
B12@0:4r^{VKTileKey=IiiI}8
v16@0:4r^{_GEOTileKey=b6b26b26b6b8b8b8b1b7[4C]}8B12
{_GEOTileKey=b6b26b26b6b8b8b8b1b7[4C]}20@0:4I8I12I16
{VKTileKey=IiiI}12@0:4r^{_GEOTileKey=b6b26b26b6b8b8b8b1b7[4C]}8
@"<VKTrackableAnnotation>"
@"<VKTrackableAnnotationPresentation>"
{?="hasPendingChange"b1"paused"b1"trackingHeading"b1"hasPendingHeadingChange"b1"isInitialRegionChange"b1"isJumpingToAnnotation"b1"annotationImplementsAccuracy"b1"annotationImplementsHeading"b1"annotationImplementsExpectedCoordinateUpdateInterval"b1"annotationImplementsExpectedHeadingUpdateInterval"b1}
v24@0:4B8d12B20
v20@0:4B8d12
v24@0:4@8@12@16^v20
@"GEOComposedRouteSection"
@"GEOSnappedRoutePath"
^{Matrix<float, 2, 1>=[2f]}
@24@0:4@8@12I16I20
v16@0:4^{Matrix<float, 2, 1>=[2f]}8I12
v16@0:4@8r^{TrafficSegment=IC}12
v20@0:4@8^{TrafficSegmentsAlongRoute={vector<md::TrafficSegment, std::__1::allocator<md::TrafficSegment> >=^{TrafficSegment}^{TrafficSegment}{__compressed_pair<md::TrafficSegment *, std::__1::allocator<md::TrafficSegment> >=^{TrafficSegment}}}}12B16
^{Matrix<float, 2, 1>=[2f]}8@0:4
@"VKGGLTransitTile"
@52@0:4@8@12^{Matrix<float, 2, 1>=[2f]}16I20B24^{?={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}28I32I36Q40@48
@32@0:4@8@12^{Matrix<float, 2, 1>=[2f]}16I20I24I28
{unique_ptr<md::PilledTrafficLayer, std::__1::default_delete<md::PilledTrafficLayer> >="__ptr_"{__compressed_pair<md::PilledTrafficLayer *, std::__1::default_delete<md::PilledTrafficLayer> >="__value_"^{PilledTrafficLayer}}}
{unique_ptr<md::SolidTrafficLayer, std::__1::default_delete<md::SolidTrafficLayer> >="__ptr_"{__compressed_pair<md::SolidTrafficLayer *, std::__1::default_delete<md::SolidTrafficLayer> >="__value_"^{SolidTrafficLayer}}}
{unique_ptr<md::CasedTrafficLayer, std::__1::default_delete<md::CasedTrafficLayer> >="__ptr_"{__compressed_pair<md::CasedTrafficLayer *, std::__1::default_delete<md::CasedTrafficLayer> >="__value_"^{CasedTrafficLayer}}}
@"VKTileKeyMap"
{unique_ptr<md::TrafficStream, std::__1::default_delete<md::TrafficStream> >="__ptr_"{__compressed_pair<md::TrafficStream *, std::__1::default_delete<md::TrafficStream> >="__value_"^{TrafficStream}}}
{shared_ptr<zilch::TrafficSkeletonTile>="__ptr_"^{TrafficSkeletonTile}"__cntrl_"^{__shared_weak_count}}
{TrafficMeshStyle="_style"[4i]}
r^{TrafficMeshStyle=[4i]}8@0:4
r^{TrafficStream=IIIf{unique_ptr<ggl::Texture2D, std::__1::default_delete<ggl::Texture2D> >={__compressed_pair<ggl::Texture2D *, std::__1::default_delete<ggl::Texture2D> >=^{Texture2D}}}f{TexelRun=fffff}{unordered_map<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun, md::TrafficStream::SectionKeyHash, std::__1::equal_to<md::TrafficStream::SectionKey>, std::__1::allocator<std::__1::pair<const md::TrafficStream::SectionKey, md::TrafficStream::TexelRun> > >={__hash_table<std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, std::__1::__unordered_map_hasher<md::TrafficStream::SectionKey, std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, md::TrafficStream::SectionKeyHash, true>, std::__1::__unordered_map_equal<md::TrafficStream::SectionKey, std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, std::__1::equal_to<md::TrafficStream::SectionKey>, true>, std::__1::allocator<std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, void *> *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<md::TrafficStream::SectionKey, std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, md::TrafficStream::SectionKeyHash, true> >=L}{__compressed_pair<float, std::__1::__unordered_map_equal<md::TrafficStream::SectionKey, std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, std::__1::equal_to<md::TrafficStream::SectionKey>, true> >=f}}}}8@0:4
v12@0:4r^{_GEOTileKey=b6b26b26b6b8b8b8b1b7[4C]}8
r^{_GEOTileKey=b6b26b26b6b8b8b8b1b7[4C]}8@0:4
^{PilledTrafficLayer=^^?{vector<md::PilledTrafficBatch *, std::__1::allocator<md::PilledTrafficBatch *> >=^^{PilledTrafficBatch}^^{PilledTrafficBatch}{__compressed_pair<md::PilledTrafficBatch **, std::__1::allocator<md::PilledTrafficBatch *> >=^^{PilledTrafficBatch}}}{vector<ggl::OptimizedTraffic::BaseMesh *, std::__1::allocator<ggl::OptimizedTraffic::BaseMesh *> >=^^{BaseMesh}^^{BaseMesh}{__compressed_pair<ggl::OptimizedTraffic::BaseMesh **, std::__1::allocator<ggl::OptimizedTraffic::BaseMesh *> >=^^{BaseMesh}}}[1^{RenderState}]{shared_ptr<ggl::ConstantDataTyped<ggl::Tile::View> >=^{ConstantDataTyped<ggl::Tile::View>}^{__shared_weak_count}}I^{TrafficSharedResources}}8@0:4
^{SolidTrafficLayer=^^?{vector<md::SolidTrafficBatch *, std::__1::allocator<md::SolidTrafficBatch *> >=^^{SolidTrafficBatch}^^{SolidTrafficBatch}{__compressed_pair<md::SolidTrafficBatch **, std::__1::allocator<md::SolidTrafficBatch *> >=^^{SolidTrafficBatch}}}{vector<ggl::TrafficBase::BaseMesh *, std::__1::allocator<ggl::TrafficBase::BaseMesh *> >=^^{BaseMesh}^^{BaseMesh}{__compressed_pair<ggl::TrafficBase::BaseMesh **, std::__1::allocator<ggl::TrafficBase::BaseMesh *> >=^^{BaseMesh}}}[2^{RenderState}]{shared_ptr<ggl::ConstantDataTyped<ggl::Tile::View> >=^{ConstantDataTyped<ggl::Tile::View>}^{__shared_weak_count}}I^{TrafficSharedResources}}8@0:4
^{CasedTrafficLayer=^^?{vector<md::CasedTrafficBatch *, std::__1::allocator<md::CasedTrafficBatch *> >=^^{CasedTrafficBatch}^^{CasedTrafficBatch}{__compressed_pair<md::CasedTrafficBatch **, std::__1::allocator<md::CasedTrafficBatch *> >=^^{CasedTrafficBatch}}}{vector<ggl::TrafficBase::BaseMesh *, std::__1::allocator<ggl::TrafficBase::BaseMesh *> >=^^{BaseMesh}^^{BaseMesh}{__compressed_pair<ggl::TrafficBase::BaseMesh **, std::__1::allocator<ggl::TrafficBase::BaseMesh *> >=^^{BaseMesh}}}[1^{RenderState}]{shared_ptr<ggl::ConstantDataTyped<ggl::Tile::View> >=^{ConstantDataTyped<ggl::Tile::View>}^{__shared_weak_count}}I^{TrafficSharedResources}}8@0:4
@40@0:4r^{VKTileKey=IiiI}8r^{_GEOTileKey=b6b26b26b6b8b8b8b1b7[4C]}12@16{shared_ptr<gss::StylesheetManager<gss::PropertyID> >=^{StylesheetManager<gss::PropertyID>}^{__shared_weak_count}}20@28f32^{Device=^^?{DeviceVersion=II}{DeviceCapabilities=BBIII{DeviceSize=III}}{DeviceAPIProperties=id}ii}36
v16@0:4@8r^{TrafficMeshStyle=[4i]}12
v20@0:4@8r^{TrafficMeshStyle=[4i]}12@?16
v20@0:4@8^{Loader={unique_ptr<ggl::LoaderImpl, std::__1::default_delete<ggl::LoaderImpl> >={__compressed_pair<ggl::LoaderImpl *, std::__1::default_delete<ggl::LoaderImpl> >=^{LoaderImpl}}}}12r^{TrafficMeshStyle=[4i]}16
r^{shared_ptr<zilch::TrafficSkeletonTile>=^{TrafficSkeletonTile}^{__shared_weak_count}}8@0:4
^{FeatureAttributeSet={vector<gss::FeatureAttributePair, std::__1::allocator<gss::FeatureAttributePair> >=^{FeatureAttributePair}^{FeatureAttributePair}{__compressed_pair<gss::FeatureAttributePair *, std::__1::allocator<gss::FeatureAttributePair> >=^{FeatureAttributePair}}}}8@0:4
@"<VKAnnotation>"
^{NavigationPuck=^{CPuckStyleInfo}{Coordinate3D<Radians, double>={Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<MeterUnitDescription, double>=d}}{Unit<RadianUnitDescription, double>=d}ffiBBB}
@12@0:4^{AnimationRunner=^{MapEngine}}8
^{NavigationPuck=^{CPuckStyleInfo}{Coordinate3D<Radians, double>={Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<MeterUnitDescription, double>=d}}{Unit<RadianUnitDescription, double>=d}ffiBBB}8@0:4
I12@0:4I8
@"GEOMapRegion"
^{__CFSet=}
{_geo_weak_ptr<id>="_p"@}
@"NSObject<OS_dispatch_source>"
@20@0:4@8:12r^{TaskContext=@@@@{unique_ptr<geo::TaskQueue, std::__1::default_delete<geo::TaskQueue> >={__compressed_pair<geo::TaskQueue *, std::__1::default_delete<geo::TaskQueue> >=^{TaskQueue}}}{unique_ptr<geo::TaskQueue, std::__1::default_delete<geo::TaskQueue> >={__compressed_pair<geo::TaskQueue *, std::__1::default_delete<geo::TaskQueue> >=^{TaskQueue}}}{unique_ptr<geo::TaskQueue, std::__1::default_delete<geo::TaskQueue> >={__compressed_pair<geo::TaskQueue *, std::__1::default_delete<geo::TaskQueue> >=^{TaskQueue}}}{unique_ptr<geo::TaskQueue, std::__1::default_delete<geo::TaskQueue> >={__compressed_pair<geo::TaskQueue *, std::__1::default_delete<geo::TaskQueue> >=^{TaskQueue}}}}16
@12@0:4^{_NSZone=}8
^{VKTileKey=IiiI}8@0:4
B16@0:4r^{VKTileKey=IiiI}8^{VKTileKey=IiiI}12
^{RouteContextChangeObserver=^^?}
{vector<geo::_retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::allocator<geo::_retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >="__begin_"^{_retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}"__end_"^{_retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}"__end_cap_"{__compressed_pair<geo::_retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> *, std::__1::allocator<geo::_retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >="__value_"^{_retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}}}
v12@0:4@"VKRouteContext"8
@12@0:4^{RouteContextChangeObserver=^^?}8
{shared_ptr<md::Anchor>="__ptr_"^{Anchor}"__cntrl_"^{__shared_weak_count}}
{Coordinate2D<Degrees, double>="latitude"{Unit<DegreeUnitDescription, double>="_value"d}"longitude"{Unit<DegreeUnitDescription, double>="_value"d}}
v12@0:4^v8
{CGPoint=ff}12@0:4@8
f16@0:4d8
{shared_ptr<md::Anchor>=^{Anchor}^{__shared_weak_count}}12@0:4^{LayoutContext=@{shared_ptr<md::ViewTransform>=^{ViewTransform}^{__shared_weak_count}}{shared_ptr<md::AnchorContext>=^{AnchorContext}^{__shared_weak_count}}@@{shared_ptr<gss::StylesheetManager<gss::PropertyID> >=^{StylesheetManager<gss::PropertyID>}^{__shared_weak_count}}{shared_ptr<gss::StylesheetManager<gss::ScenePropertyID> >=^{StylesheetManager<gss::ScenePropertyID>}^{__shared_weak_count}}{VKEdgeInsets=ffff}{VKEdgeInsets=ffff}C{shared_ptr<ggl::PolygonBase::MeshMesh>=^{MeshMesh}^{__shared_weak_count}}{shared_ptr<ggl::PolygonBase::MeshMesh>=^{MeshMesh}^{__shared_weak_count}}{shared_ptr<ggl::TextureMesh::MeshMesh>=^{MeshMesh}^{__shared_weak_count}}{StencilManager=CCC{ClearItem=C{Matrix<float, 4, 1>=[4f]}BfCI}}{shared_ptr<ggl::Device>=^{Device}^{__shared_weak_count}}{Loader={unique_ptr<ggl::LoaderImpl, std::__1::default_delete<ggl::LoaderImpl> >={__compressed_pair<ggl::LoaderImpl *, std::__1::default_delete<ggl::LoaderImpl> >=^{LoaderImpl}}}}ddBBBBB{Coordinate3D<Radians, double>={Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<MeterUnitDescription, double>=d}}fffi^{View}^{View}^{Viewport}^{ARContext}{array<std::__1::unique_ptr<md::LogicContext, std::__1::default_delete<md::LogicContext> >, 4>=[4{unique_ptr<md::LogicContext, std::__1::default_delete<md::LogicContext> >={__compressed_pair<md::LogicContext *, std::__1::default_delete<md::LogicContext> >=^{LogicContext}}}]}}8
@"<VKPuckAnimatorTarget>"
@"VKRunningCurve"
@"VKPuckAnimatorLocationProjector"
@"<VKPuckAnimatorDelegate>"
@"GEORouteMatch"
{LabelMarkerFeatureHandle="featureType"C"featureIndex"l"key"{VKTileKey="z"I"x"i"y"i"pointSize"I}"tileStyle"i"tileVersion"I"styleAttributes"@"GEOFeatureStyleAttributes"}
@12@0:4r^{LabelMarkerFeatureHandle=Cl{VKTileKey=IiiI}iI@}8
r^{LabelMarkerFeatureHandle=Cl{VKTileKey=IiiI}iI@}8@0:4
@"VKImageSourceKey"
{shared_ptr<md::LabelMarker>="__ptr_"^{LabelMarker}"__cntrl_"^{__shared_weak_count}}
@12@0:4r^{shared_ptr<md::LabelMarker>=^{LabelMarker}^{__shared_weak_count}}8
r^{shared_ptr<md::LabelMarker>=^{LabelMarker}^{__shared_weak_count}}8@0:4
r^Q8@0:4
s8@0:4
B16@0:4^{?=dd}8^f12
{CGPoint=ff}24@0:4{CGSize=ff}8f16B20
{CGPoint=ff}20@0:4{CGSize=ff}8f16
B20@0:4{CGPoint=ff}8B16
@"GEOComposedRoute"
@"NSHashTable"
{vector<AdditionalRouteInfo, std::__1::allocator<AdditionalRouteInfo> >="__begin_"^{AdditionalRouteInfo}"__end_"^{AdditionalRouteInfo}"__end_cap_"{__compressed_pair<AdditionalRouteInfo *, std::__1::allocator<AdditionalRouteInfo> >="__value_"^{AdditionalRouteInfo}}}
v16@0:4@8I12
v28@0:4@8{PolylineCoordinate=If}12{PolylineCoordinate=If}20
v16@0:4@8r^{VKTileKey=IiiI}12
{?="matchingStyleAttributeLongValue"b1"anchorPointX"b1"anchorPointY"b1"iconRectHeight"b1"iconRectWidth"b1"iconRectX"b1"iconRectY"b1"matchingStyleAttributeKey"b1"matchingStyleAttributeValue"b1"size"b1}
{optional<md::MeshSet<ggl::PolygonBase::CompressedMeshMesh, ggl::PolygonBase::CompressedVbo> >="_hasValue"B"_value"(ValueUnion="data"[88C]"type"{MeshSet<ggl::PolygonBase::CompressedMeshMesh, ggl::PolygonBase::CompressedVbo>="_vertexAndIndexCounts"{vector<std::__1::pair<unsigned short, unsigned int>, std::__1::allocator<std::__1::pair<unsigned short, unsigned int> > >="__begin_"^{pair<unsigned short, unsigned int>}"__end_"^{pair<unsigned short, unsigned int>}"__end_cap_"{__compressed_pair<std::__1::pair<unsigned short, unsigned int> *, std::__1::allocator<std::__1::pair<unsigned short, unsigned int> > >="__value_"^{pair<unsigned short, unsigned int>}}}"_meshes"{vector<std::__1::shared_ptr<ggl::PolygonBase::CompressedMeshMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::PolygonBase::CompressedMeshMesh> > >="__begin_"^{shared_ptr<ggl::PolygonBase::CompressedMeshMesh>}"__end_"^{shared_ptr<ggl::PolygonBase::CompressedMeshMesh>}"__end_cap_"{__compressed_pair<std::__1::shared_ptr<ggl::PolygonBase::CompressedMeshMesh> *, std::__1::allocator<std::__1::shared_ptr<ggl::PolygonBase::CompressedMeshMesh> > >="__value_"^{shared_ptr<ggl::PolygonBase::CompressedMeshMesh>}}}"_vertexDataWrite"{DataWrite<ggl::PolygonBase::CompressedVbo>="_memory"{BufferMemory="_accessor"^{ResourceAccessor}"_user"^{BufferData}"_range"{Range<unsigned long>="_min"L"_max"L}"_access"i"_sync"i"_data"*}}"_indexDataWrite"{DataWrite<unsigned short>="_memory"{BufferMemory="_accessor"^{ResourceAccessor}"_user"^{BufferData}"_range"{Range<unsigned long>="_min"L"_max"L}"_access"i"_sync"i"_data"*}}"_meshIndex"C"_meshVertexOffset"S"_meshIndexOffset"I})}
{vector<std::__1::shared_ptr<ggl::PolygonBase::CompressedMeshMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::PolygonBase::CompressedMeshMesh> > >="__begin_"^{shared_ptr<ggl::PolygonBase::CompressedMeshMesh>}"__end_"^{shared_ptr<ggl::PolygonBase::CompressedMeshMesh>}"__end_cap_"{__compressed_pair<std::__1::shared_ptr<ggl::PolygonBase::CompressedMeshMesh> *, std::__1::allocator<std::__1::shared_ptr<ggl::PolygonBase::CompressedMeshMesh> > >="__value_"^{shared_ptr<ggl::PolygonBase::CompressedMeshMesh>}}}
{vector<std::__1::vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > >, std::__1::allocator<std::__1::vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > > > >="__begin_"^{vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > >}"__end_"^{vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > >}"__end_cap_"{__compressed_pair<std::__1::vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > > *, std::__1::allocator<std::__1::vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > > > >="__value_"^{vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > >}}}
{unordered_map<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> >, std::__1::hash<SectionKey>, std::__1::equal_to<std::__1::pair<void *, unsigned long> >, std::__1::allocator<std::__1::pair<const std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > > > >="__table_"{__hash_table<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, std::__1::__unordered_map_hasher<std::__1::pair<void *, unsigned long>, std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, std::__1::hash<SectionKey>, true>, std::__1::__unordered_map_equal<std::__1::pair<void *, unsigned long>, std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, std::__1::equal_to<std::__1::pair<void *, unsigned long> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > > > >="__bucket_list_"{unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> *> *> > >="__ptr_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> *> *> > >="__value_"^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> *>}"__value_"{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> *> *> >="__data_"{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> *> *> >="__value_"L}}}}"__p1_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> > >="__value_"{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> *>="__next_"^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> *>}}}"__p2_"{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::pair<void *, unsigned long>, std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, std::__1::hash<SectionKey>, true> >="__value_"L}"__p3_"{__compressed_pair<float, std::__1::__unordered_map_equal<std::__1::pair<void *, unsigned long>, std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, std::__1::equal_to<std::__1::pair<void *, unsigned long> >, true> >="__value_"f}}}
{unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >="__table_"{__hash_table<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >="__bucket_list_"{unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > >="__ptr_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > >="__value_"^^{__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>}"__value_"{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> >="__data_"{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> >="__value_"L}}}}"__p1_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> > >="__value_"{__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>="__next_"^{__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>}}}"__p2_"{__compressed_pair<unsigned long, std::__1::hash<unsigned long long> >="__value_"L}"__p3_"{__compressed_pair<float, std::__1::equal_to<unsigned long long> >="__value_"f}}}
{Box<float, 3>="_minimum"{Matrix<float, 3, 1>="_e"[3f]}"_maximum"{Matrix<float, 3, 1>="_e"[3f]}}
{vector<ggl::Batcher, std::__1::allocator<ggl::Batcher> >="__begin_"^{Batcher}"__end_"^{Batcher}"__end_cap_"{__compressed_pair<ggl::Batcher *, std::__1::allocator<ggl::Batcher> >="__value_"^{Batcher}}}
{Matrix<float, 2, 1>="_e"[2f]}
@"NSMutableOrderedSet"
{vector<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::allocator<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > > >="__begin_"^{shared_ptr<gss::StylesheetQuery<gss::PropertyID> >}"__end_"^{shared_ptr<gss::StylesheetQuery<gss::PropertyID> >}"__end_cap_"{__compressed_pair<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > *, std::__1::allocator<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > > >="__value_"^{shared_ptr<gss::StylesheetQuery<gss::PropertyID> >}}}
{PolygonRouteAttributes="routeSignificance"I"routeProximity"C"hasRouteSignificance"B}
@24@0:4^{shared_ptr<gss::StylesheetQuery<gss::PropertyID> >=^{StylesheetQuery<gss::PropertyID>}^{__shared_weak_count}}8f12r^{Matrix<float, 2, 1>=[2f]}16f20
r^{Matrix<float, 3, 1>=[3f]}8@0:4
{Matrix<float, 3, 1>=[3f]}8@0:4
^{vector<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::allocator<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > > >=^{shared_ptr<gss::StylesheetQuery<gss::PropertyID> >}^{shared_ptr<gss::StylesheetQuery<gss::PropertyID> >}{__compressed_pair<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > *, std::__1::allocator<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > > >=^{shared_ptr<gss::StylesheetQuery<gss::PropertyID> >}}}8@0:4
^{vector<std::__1::shared_ptr<ggl::PolygonBase::CompressedMeshMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::PolygonBase::CompressedMeshMesh> > >=^{shared_ptr<ggl::PolygonBase::CompressedMeshMesh>}^{shared_ptr<ggl::PolygonBase::CompressedMeshMesh>}{__compressed_pair<std::__1::shared_ptr<ggl::PolygonBase::CompressedMeshMesh> *, std::__1::allocator<std::__1::shared_ptr<ggl::PolygonBase::CompressedMeshMesh> > >=^{shared_ptr<ggl::PolygonBase::CompressedMeshMesh>}}}8@0:4
r^{MultiRange<unsigned long>={vector<gm::Range<unsigned long>, std::__1::allocator<gm::Range<unsigned long> > >=^{Range<unsigned long>}^{Range<unsigned long>}{__compressed_pair<gm::Range<unsigned long> *, std::__1::allocator<gm::Range<unsigned long> > >=^{Range<unsigned long>}}}}44@0:4^{Batcher={MultiRange<unsigned long>={vector<gm::Range<unsigned long>, std::__1::allocator<gm::Range<unsigned long> > >=^{Range<unsigned long>}^{Range<unsigned long>}{__compressed_pair<gm::Range<unsigned long> *, std::__1::allocator<gm::Range<unsigned long> > >=^{Range<unsigned long>}}}}{vector<gm::MultiRange<unsigned long>, std::__1::allocator<gm::MultiRange<unsigned long> > >=^{MultiRange<unsigned long>}^{MultiRange<unsigned long>}{__compressed_pair<gm::MultiRange<unsigned long> *, std::__1::allocator<gm::MultiRange<unsigned long> > >=^{MultiRange<unsigned long>}}}{MultiRange<unsigned long>={vector<gm::Range<unsigned long>, std::__1::allocator<gm::Range<unsigned long> > >=^{Range<unsigned long>}^{Range<unsigned long>}{__compressed_pair<gm::Range<unsigned long> *, std::__1::allocator<gm::Range<unsigned long> > >=^{Range<unsigned long>}}}}}8L12I16{function<bool (unsigned long long)>={type=[16C]}^{__base<bool (unsigned long long)>}}20
r^{MultiRange<unsigned long>={vector<gm::Range<unsigned long>, std::__1::allocator<gm::Range<unsigned long> > >=^{Range<unsigned long>}^{Range<unsigned long>}{__compressed_pair<gm::Range<unsigned long> *, std::__1::allocator<gm::Range<unsigned long> > >=^{Range<unsigned long>}}}}20@0:4^{Batcher={MultiRange<unsigned long>={vector<gm::Range<unsigned long>, std::__1::allocator<gm::Range<unsigned long> > >=^{Range<unsigned long>}^{Range<unsigned long>}{__compressed_pair<gm::Range<unsigned long> *, std::__1::allocator<gm::Range<unsigned long> > >=^{Range<unsigned long>}}}}{vector<gm::MultiRange<unsigned long>, std::__1::allocator<gm::MultiRange<unsigned long> > >=^{MultiRange<unsigned long>}^{MultiRange<unsigned long>}{__compressed_pair<gm::MultiRange<unsigned long> *, std::__1::allocator<gm::MultiRange<unsigned long> > >=^{MultiRange<unsigned long>}}}{MultiRange<unsigned long>={vector<gm::Range<unsigned long>, std::__1::allocator<gm::Range<unsigned long> > >=^{Range<unsigned long>}^{Range<unsigned long>}{__compressed_pair<gm::Range<unsigned long> *, std::__1::allocator<gm::Range<unsigned long> > >=^{Range<unsigned long>}}}}}8L12I16
C12@0:4@8
v12@0:4^{ResourceAccessor=^^?}8
B12@0:4^{?={?=@*IIIIIQBQfQ@i}IIiiiII(?={?={?=ff}{?=ff}}{?=ffff})^{?}{?=[2S][2S]}CBCBBCBC{_NSRange=II}BI}8
B16@0:4Q8
v12@0:4r^{PolygonRouteAttributes=ICB}8
{?="position"{Matrix<double, 3, 1>="_e"[3d]}"tangent"{Matrix<double, 3, 1>="_e"[3d]}"tangentValid"B}
{?="mb"[4[3d]]}
v40@0:4{Matrix<double, 3, 1>=[3d]}8d32
B16@0:4d8
{?={Matrix<double, 3, 1>=[3d]}{Matrix<double, 3, 1>=[3d]}B}16@0:4d8
{unique_ptr<ggl::Debug::BaseMesh, std::__1::default_delete<ggl::Debug::BaseMesh> >="__ptr_"{__compressed_pair<ggl::Debug::BaseMesh *, std::__1::default_delete<ggl::Debug::BaseMesh> >="__value_"^{BaseMesh}}}
{unique_ptr<ggl::DebugPoints::BaseMesh, std::__1::default_delete<ggl::DebugPoints::BaseMesh> >="__ptr_"{__compressed_pair<ggl::DebugPoints::BaseMesh *, std::__1::default_delete<ggl::DebugPoints::BaseMesh> >="__value_"^{BaseMesh}}}
^{BaseMesh=^^?*^^?^{ResourceManager}^{RenderResource}^{MeshCReflection}{vector<std::__1::shared_ptr<ggl::VertexData>, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > >=^{shared_ptr<ggl::VertexData>}^{shared_ptr<ggl::VertexData>}{__compressed_pair<std::__1::shared_ptr<ggl::VertexData> *, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > >=^{shared_ptr<ggl::VertexData>}}}{shared_ptr<ggl::IndexData>=^{IndexData}^{__shared_weak_count}}}8@0:4
v16@0:4^{NavContext=^^?^{LabelManager}^{LabelLayoutContext}^{LabelNavLayoutContext}}8^{VKLabelNavArtworkCache={unique_ptr<LRUCache<unsigned long, VKRoadSignArtwork *, std::__1::hash<unsigned long> >, std::__1::default_delete<LRUCache<unsigned long, VKRoadSignArtwork *, std::__1::hash<unsigned long> > > >={__compressed_pair<LRUCache<unsigned long, VKRoadSignArtwork *, std::__1::hash<unsigned long> > *, std::__1::default_delete<LRUCache<unsigned long, VKRoadSignArtwork *, std::__1::hash<unsigned long> > > >=^{LRUCache<unsigned long, VKRoadSignArtwork *, std::__1::hash<unsigned long> >}}}{unique_ptr<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> >, std::__1::default_delete<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> > > >={__compressed_pair<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> > *, std::__1::default_delete<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> > > >=^{LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> >}}}{unique_ptr<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> >, std::__1::default_delete<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> > > >={__compressed_pair<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> > *, std::__1::default_delete<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> > > >=^{LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> >}}}^{CGColor}^{CGColor}{VKGuidanceManeuverArrowMetrics={CGSize=ff}fff{CGSize=ff}fffCffffffffffffffffBfffBB}}12
@"VKPGenericShieldStyleInfo"
{?="_color"{?="_a"f"_b"I"_g"I"_r"I}"_offsetX"f"_offsetY"f"_size"f"_has"{?="offsetX"b1"offsetY"b1}}
^{?=IiifI{?=b1b1b1b1b1}}
{?="_color"{?="_a"f"_b"I"_g"I"_r"I}"_width"f}
{?="_a"f"_b"I"_g"I"_r"I}
{?="list"^f"count"I"size"I}
{?="textShadow"b1"textStroke"b1"fontColor"b1"nonDigitFontColor"b1"atlasIndex"b1"backgroundColor"b1"borderColor"b1"capWidthLeft"b1"capWidthRight"b1"centerOffsetX"b1"fontSize"b1"lineSpacing"b1"maxDigits"b1"minDigits"b1"nonDigitFontSize"b1"paddingLeft"b1"paddingRight"b1"quadIndex"b1"textBaseline"b1"textMaskColor"b1}
v24@0:4{?=fIII}8
v28@0:4{?={?=fIII}f}8
v40@0:4{?={?=fIII}fff{?=b1b1}}8
^f8@0:4
f12@0:4I8
v16@0:4^f8I12
^{?=IiifI{?=b1b1b1b1b1}}8@0:4
v32@0:4{?=IiifI{?=b1b1b1b1b1}}8
{?=IiifI{?=b1b1b1b1b1}}12@0:4I8
v16@0:4^{?=IiifI{?=b1b1b1b1b1}}8I12
{?=fIII}8@0:4
{?={?=fIII}f}8@0:4
{?={?=fIII}fff{?=b1b1}}8@0:4
@"NSDate"
@16@0:4r^{Incident={GeoCoordinates={Longitude=I}{Latitude=I}}{String={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{String={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}i{String={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{String={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}qqqqiCBiCC}8^{Matrix<double, 3, 1>=[3d]}12
@16@0:4@8i12
@"<VKTileProviderClient>"
{unique_ptr<md::TileSelector, std::__1::default_delete<md::TileSelector> >="__ptr_"{__compressed_pair<md::TileSelector *, std::__1::default_delete<md::TileSelector> >="__value_"^{TileSelector}}}
@"VKTileKeyList"
@"VKTimer"
@"VKTileCache"
[33@"VKTileSource"]
@"VKMapRasterizer"
@"<VKMapLayer>"
@"GEOTileKeyList"
{?="x"d"y"d}
{vector<md::TileExclusionArea, std::__1::allocator<md::TileExclusionArea> >="__begin_"^{TileExclusionArea}"__end_"^{TileExclusionArea}"__end_cap_"{__compressed_pair<md::TileExclusionArea *, std::__1::allocator<md::TileExclusionArea> >="__value_"^{TileExclusionArea}}}
@"_VKTileProviderTimerTarget"
v20@0:4@"VKTileSource"8@"VKTile"12r^{VKTileKey=IiiI}16
v16@0:4@"VKTileSource"8r^{VKTileKey=IiiI}12
v20@0:4@"VKTileSource"8r^{VKTileKey=IiiI}12@"NSError"16
v16@0:4@"VKTileSource"8@"VKTileKeyList"12
v16@0:4@"VKTileSource"8I12
v12@0:4@"VKTileSource"8
B16@0:4@"VKTileSource"8r^{VKTileKey=IiiI}12
v20@0:4@"VKTileSource"8r^{Box<double, 2>={Matrix<double, 2, 1>=[2d]}{Matrix<double, 2, 1>=[2d]}}12i16
v16@0:4r^{VKTileKey=IiiI}8@"VKTileSource"12
v16@0:4r^{VKTileKey=IiiI}8@12
v20@0:4@8@12r^{VKTileKey=IiiI}16
v20@0:4@8r^{VKTileKey=IiiI}12@16
B16@0:4@8r^{VKTileKey=IiiI}12
v20@0:4@8r^{Box<double, 2>={Matrix<double, 2, 1>=[2d]}{Matrix<double, 2, 1>=[2d]}}12i16
B20@0:4@"VKLRUCache"8@12r^{VKCacheKey=IIII}16
B20@0:4@8@12r^{VKCacheKey=IIII}16
v12@0:4r^{vector<md::TileExclusionArea, std::__1::allocator<md::TileExclusionArea> >=^{TileExclusionArea}^{TileExclusionArea}{__compressed_pair<md::TileExclusionArea *, std::__1::allocator<md::TileExclusionArea> >=^{TileExclusionArea}}}8
@32@0:4@8@12@16{shared_ptr<md::TaskContext>=^{TaskContext}^{__shared_weak_count}}20^{unique_ptr<md::TileSelectionProfile, std::__1::default_delete<md::TileSelectionProfile> >={__compressed_pair<md::TileSelectionProfile *, std::__1::default_delete<md::TileSelectionProfile> >=^{TileSelectionProfile}}}28
v20@0:4@8o^@12o^@16
v20@0:4{shared_ptr<md::DebugTreeNode>=^{DebugTreeNode}^{__shared_weak_count}}8@16
v28@0:4r^{VKTileKey=IiiI}8I12@16@20C24
v20@0:4@8C12B16
v20@0:4@8^{LayoutContext=@{shared_ptr<md::ViewTransform>=^{ViewTransform}^{__shared_weak_count}}{shared_ptr<md::AnchorContext>=^{AnchorContext}^{__shared_weak_count}}@@{shared_ptr<gss::StylesheetManager<gss::PropertyID> >=^{StylesheetManager<gss::PropertyID>}^{__shared_weak_count}}{shared_ptr<gss::StylesheetManager<gss::ScenePropertyID> >=^{StylesheetManager<gss::ScenePropertyID>}^{__shared_weak_count}}{VKEdgeInsets=ffff}{VKEdgeInsets=ffff}C{shared_ptr<ggl::PolygonBase::MeshMesh>=^{MeshMesh}^{__shared_weak_count}}{shared_ptr<ggl::PolygonBase::MeshMesh>=^{MeshMesh}^{__shared_weak_count}}{shared_ptr<ggl::TextureMesh::MeshMesh>=^{MeshMesh}^{__shared_weak_count}}{StencilManager=CCC{ClearItem=C{Matrix<float, 4, 1>=[4f]}BfCI}}{shared_ptr<ggl::Device>=^{Device}^{__shared_weak_count}}{Loader={unique_ptr<ggl::LoaderImpl, std::__1::default_delete<ggl::LoaderImpl> >={__compressed_pair<ggl::LoaderImpl *, std::__1::default_delete<ggl::LoaderImpl> >=^{LoaderImpl}}}}ddBBBBB{Coordinate3D<Radians, double>={Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<MeterUnitDescription, double>=d}}fffi^{View}^{View}^{Viewport}^{ARContext}{array<std::__1::unique_ptr<md::LogicContext, std::__1::default_delete<md::LogicContext> >, 4>=[4{unique_ptr<md::LogicContext, std::__1::default_delete<md::LogicContext> >={__compressed_pair<md::LogicContext *, std::__1::default_delete<md::LogicContext> >=^{LogicContext}}}]}}12@16
@16@0:4^i8^B12
B20@0:4@8d12
@20@0:4@8d12
v16@0:4^{LayoutContext=@{shared_ptr<md::ViewTransform>=^{ViewTransform}^{__shared_weak_count}}{shared_ptr<md::AnchorContext>=^{AnchorContext}^{__shared_weak_count}}@@{shared_ptr<gss::StylesheetManager<gss::PropertyID> >=^{StylesheetManager<gss::PropertyID>}^{__shared_weak_count}}{shared_ptr<gss::StylesheetManager<gss::ScenePropertyID> >=^{StylesheetManager<gss::ScenePropertyID>}^{__shared_weak_count}}{VKEdgeInsets=ffff}{VKEdgeInsets=ffff}C{shared_ptr<ggl::PolygonBase::MeshMesh>=^{MeshMesh}^{__shared_weak_count}}{shared_ptr<ggl::PolygonBase::MeshMesh>=^{MeshMesh}^{__shared_weak_count}}{shared_ptr<ggl::TextureMesh::MeshMesh>=^{MeshMesh}^{__shared_weak_count}}{StencilManager=CCC{ClearItem=C{Matrix<float, 4, 1>=[4f]}BfCI}}{shared_ptr<ggl::Device>=^{Device}^{__shared_weak_count}}{Loader={unique_ptr<ggl::LoaderImpl, std::__1::default_delete<ggl::LoaderImpl> >={__compressed_pair<ggl::LoaderImpl *, std::__1::default_delete<ggl::LoaderImpl> >=^{LoaderImpl}}}}ddBBBBB{Coordinate3D<Radians, double>={Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<MeterUnitDescription, double>=d}}fffi^{View}^{View}^{Viewport}^{ARContext}{array<std::__1::unique_ptr<md::LogicContext, std::__1::default_delete<md::LogicContext> >, 4>=[4{unique_ptr<md::LogicContext, std::__1::default_delete<md::LogicContext> >={__compressed_pair<md::LogicContext *, std::__1::default_delete<md::LogicContext> >=^{LogicContext}}}]}}8f12
v20@0:4@8@12C16
@16@0:4r^{VKTileKey=IiiI}8@12
@32@0:4@8@12@16@20{shared_ptr<md::TaskContext>=^{TaskContext}^{__shared_weak_count}}24
[33@"VKTile"]
[33I]
[33d]
[33@]
[33{Box<double, 2>="_minimum"{Matrix<double, 2, 1>="_e"[2d]}"_maximum"{Matrix<double, 2, 1>="_e"[2d]}}]
@"VKRasterTile"
{shared_ptr<md::LabelMapTile>="__ptr_"^{LabelMapTile}"__cntrl_"^{__shared_weak_count}}
I12@0:4C8
d12@0:4C8
v32@0:4@8I12@16C20d24
v16@0:4^I8^I12
v24@0:4@8I12@16C20
{Box<double, 2>={Matrix<double, 2, 1>=[2d]}{Matrix<double, 2, 1>=[2d]}}12@0:4C8
{shared_ptr<md::LabelMapTile>=^{LabelMapTile}^{__shared_weak_count}}8@0:4
v16@0:4{shared_ptr<md::LabelMapTile>=^{LabelMapTile}^{__shared_weak_count}}8
@"NSObject<OS_dispatch_queue>"
@"<VKTileSourceClient>"
@"NSError"
@28@0:4@8@12@16{shared_ptr<md::TaskContext>=^{TaskContext}^{__shared_weak_count}}20
{VKTileKey=IiiI}12@0:4r^{VKTileKey=IiiI}8
{_GEOTileKey=b6b26b26b6b8b8b8b1b7[4C]}12@0:4r^{VKTileKey=IiiI}8
@16@0:4r^{VKTileKey=IiiI}8r^{VKTileKey=IiiI}12
v20@0:4r^{VKTileKey=IiiI}8r^{VKTileKey=IiiI}12B16
v16@0:4r^{VKTileKey=IiiI}8B12
B16@0:4r^{VKTileKey=IiiI}8r^{VKTileKey=IiiI}12
v24@0:4@8r^{_GEOTileKey=b6b26b26b6b8b8b8b1b7[4C]}12r^{VKTileKey=IiiI}16C20
v20@0:4r^{VKTileKey=IiiI}8r^{_GEOTileKey=b6b26b26b6b8b8b8b1b7[4C]}12@16
v20@0:4@8r^{_GEOTileKey=b6b26b26b6b8b8b8b1b7[4C]}12@16
v16@0:4r^{_GEOTileKey=b6b26b26b6b8b8b8b1b7[4C]}8@12
{unordered_map<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>, std::__1::hash<GEOGenericTileType>, std::__1::equal_to<GEOGenericTileType>, std::__1::allocator<std::__1::pair<const GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D> > > >="__table_"{__hash_table<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D> >, std::__1::__unordered_map_hasher<GEOGenericTileType, std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D> >, std::__1::hash<GEOGenericTileType>, true>, std::__1::__unordered_map_equal<GEOGenericTileType, std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D> >, std::__1::equal_to<GEOGenericTileType>, true>, std::__1::allocator<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D> > > >="__bucket_list_"{unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D> >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D> >, void *> *> *> > >="__ptr_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D> >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D> >, void *> *> *> > >="__value_"^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D> >, void *> *>}"__value_"{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D> >, void *> *> *> >="__data_"{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D> >, void *> *> *> >="__value_"L}}}}"__p1_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D> >, void *> > >="__value_"{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D> >, void *> *>="__next_"^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D> >, void *> *>}}}"__p2_"{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<GEOGenericTileType, std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D> >, std::__1::hash<GEOGenericTileType>, true> >="__value_"L}"__p3_"{__compressed_pair<float, std::__1::__unordered_map_equal<GEOGenericTileType, std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D> >, std::__1::equal_to<GEOGenericTileType>, true> >="__value_"f}}}
^{LabelTransitSupport=^{LabelManager}{shared_ptr<md::DataOverrideManager>=^{DataOverrideManager}^{__shared_weak_count}}{_retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{_retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{_retain_ptr<VKRouteContextObserverThunk *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}BBBBd{vector<std::__1::shared_ptr<md::LabelExternalPointFeature>, std::__1::allocator<std::__1::shared_ptr<md::LabelExternalPointFeature> > >=^{shared_ptr<md::LabelExternalPointFeature>}^{shared_ptr<md::LabelExternalPointFeature>}{__compressed_pair<std::__1::shared_ptr<md::LabelExternalPointFeature> *, std::__1::allocator<std::__1::shared_ptr<md::LabelExternalPointFeature> > >=^{shared_ptr<md::LabelExternalPointFeature>}}}{vector<std::__1::shared_ptr<md::LabelFeature>, std::__1::allocator<std::__1::shared_ptr<md::LabelFeature> > >=^{shared_ptr<md::LabelFeature>}^{shared_ptr<md::LabelFeature>}{__compressed_pair<std::__1::shared_ptr<md::LabelFeature> *, std::__1::allocator<std::__1::shared_ptr<md::LabelFeature> > >=^{shared_ptr<md::LabelFeature>}}}{unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >={__hash_table<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> > >={__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>=^{__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<unsigned long long> >=L}{__compressed_pair<float, std::__1::equal_to<unsigned long long> >=f}}}{vector<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::allocator<std::__1::shared_ptr<md::LabelExternalRoadFeature> > >=^{shared_ptr<md::LabelExternalRoadFeature>}^{shared_ptr<md::LabelExternalRoadFeature>}{__compressed_pair<std::__1::shared_ptr<md::LabelExternalRoadFeature> *, std::__1::allocator<std::__1::shared_ptr<md::LabelExternalRoadFeature> > >=^{shared_ptr<md::LabelExternalRoadFeature>}}}{vector<std::__1::shared_ptr<md::LabelFeature>, std::__1::allocator<std::__1::shared_ptr<md::LabelFeature> > >=^{shared_ptr<md::LabelFeature>}^{shared_ptr<md::LabelFeature>}{__compressed_pair<std::__1::shared_ptr<md::LabelFeature> *, std::__1::allocator<std::__1::shared_ptr<md::LabelFeature> > >=^{shared_ptr<md::LabelFeature>}}}{map<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature>, md::LabelExternalRoadFeatureLess, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> > > >={__tree<std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> >, std::__1::__map_value_compare<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> >, md::LabelExternalRoadFeatureLess, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> >, md::LabelExternalRoadFeatureLess, true> >=L}}}{_retain_ptr<VKRouteLineObserver *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{shared_ptr<md::LabelTransitRoute>=^{LabelTransitRoute}^{__shared_weak_count}}{shared_ptr<md::LabelTransitRouteLine>=^{LabelTransitRouteLine}^{__shared_weak_count}}I{unordered_map<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>, md::LabelTransitSupport::TransitLineColorKeyHash, std::__1::equal_to<std::__1::pair<unsigned long long, bool> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> > > >={__hash_table<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, std::__1::__unordered_map_hasher<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, md::LabelTransitSupport::TransitLineColorKeyHash, true>, std::__1::__unordered_map_equal<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, std::__1::equal_to<std::__1::pair<unsigned long long, bool> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> > > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, md::LabelTransitSupport::TransitLineColorKeyHash, true> >=L}{__compressed_pair<float, std::__1::__unordered_map_equal<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, std::__1::equal_to<std::__1::pair<unsigned long long, bool> >, true> >=f}}}}
{_retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>="_vptr$_retain_ptr"^^?"_obj"@"VKRouteContext""_retain"{_retain_objc=}"_release"{_release_objc=}}
@16@0:4@8^{LabelTransitSupport=^{LabelManager}{shared_ptr<md::DataOverrideManager>=^{DataOverrideManager}^{__shared_weak_count}}{_retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{_retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{_retain_ptr<VKRouteContextObserverThunk *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}BBBBd{vector<std::__1::shared_ptr<md::LabelExternalPointFeature>, std::__1::allocator<std::__1::shared_ptr<md::LabelExternalPointFeature> > >=^{shared_ptr<md::LabelExternalPointFeature>}^{shared_ptr<md::LabelExternalPointFeature>}{__compressed_pair<std::__1::shared_ptr<md::LabelExternalPointFeature> *, std::__1::allocator<std::__1::shared_ptr<md::LabelExternalPointFeature> > >=^{shared_ptr<md::LabelExternalPointFeature>}}}{vector<std::__1::shared_ptr<md::LabelFeature>, std::__1::allocator<std::__1::shared_ptr<md::LabelFeature> > >=^{shared_ptr<md::LabelFeature>}^{shared_ptr<md::LabelFeature>}{__compressed_pair<std::__1::shared_ptr<md::LabelFeature> *, std::__1::allocator<std::__1::shared_ptr<md::LabelFeature> > >=^{shared_ptr<md::LabelFeature>}}}{unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >={__hash_table<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> > >={__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>=^{__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<unsigned long long> >=L}{__compressed_pair<float, std::__1::equal_to<unsigned long long> >=f}}}{vector<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::allocator<std::__1::shared_ptr<md::LabelExternalRoadFeature> > >=^{shared_ptr<md::LabelExternalRoadFeature>}^{shared_ptr<md::LabelExternalRoadFeature>}{__compressed_pair<std::__1::shared_ptr<md::LabelExternalRoadFeature> *, std::__1::allocator<std::__1::shared_ptr<md::LabelExternalRoadFeature> > >=^{shared_ptr<md::LabelExternalRoadFeature>}}}{vector<std::__1::shared_ptr<md::LabelFeature>, std::__1::allocator<std::__1::shared_ptr<md::LabelFeature> > >=^{shared_ptr<md::LabelFeature>}^{shared_ptr<md::LabelFeature>}{__compressed_pair<std::__1::shared_ptr<md::LabelFeature> *, std::__1::allocator<std::__1::shared_ptr<md::LabelFeature> > >=^{shared_ptr<md::LabelFeature>}}}{map<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature>, md::LabelExternalRoadFeatureLess, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> > > >={__tree<std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> >, std::__1::__map_value_compare<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> >, md::LabelExternalRoadFeatureLess, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> >, md::LabelExternalRoadFeatureLess, true> >=L}}}{_retain_ptr<VKRouteLineObserver *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{shared_ptr<md::LabelTransitRoute>=^{LabelTransitRoute}^{__shared_weak_count}}{shared_ptr<md::LabelTransitRouteLine>=^{LabelTransitRouteLine}^{__shared_weak_count}}I{unordered_map<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>, md::LabelTransitSupport::TransitLineColorKeyHash, std::__1::equal_to<std::__1::pair<unsigned long long, bool> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> > > >={__hash_table<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, std::__1::__unordered_map_hasher<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, md::LabelTransitSupport::TransitLineColorKeyHash, true>, std::__1::__unordered_map_equal<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, std::__1::equal_to<std::__1::pair<unsigned long long, bool> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> > > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, md::LabelTransitSupport::TransitLineColorKeyHash, true> >=L}{__compressed_pair<float, std::__1::__unordered_map_equal<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, std::__1::equal_to<std::__1::pair<unsigned long long, bool> >, true> >=f}}}}12
@"VKRouteLine"
v12@0:4@"VKRouteLine"8
@16@0:4^{LabelTransitSupport=^{LabelManager}{shared_ptr<md::DataOverrideManager>=^{DataOverrideManager}^{__shared_weak_count}}{_retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{_retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{_retain_ptr<VKRouteContextObserverThunk *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}BBBBd{vector<std::__1::shared_ptr<md::LabelExternalPointFeature>, std::__1::allocator<std::__1::shared_ptr<md::LabelExternalPointFeature> > >=^{shared_ptr<md::LabelExternalPointFeature>}^{shared_ptr<md::LabelExternalPointFeature>}{__compressed_pair<std::__1::shared_ptr<md::LabelExternalPointFeature> *, std::__1::allocator<std::__1::shared_ptr<md::LabelExternalPointFeature> > >=^{shared_ptr<md::LabelExternalPointFeature>}}}{vector<std::__1::shared_ptr<md::LabelFeature>, std::__1::allocator<std::__1::shared_ptr<md::LabelFeature> > >=^{shared_ptr<md::LabelFeature>}^{shared_ptr<md::LabelFeature>}{__compressed_pair<std::__1::shared_ptr<md::LabelFeature> *, std::__1::allocator<std::__1::shared_ptr<md::LabelFeature> > >=^{shared_ptr<md::LabelFeature>}}}{unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >={__hash_table<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> > >={__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>=^{__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<unsigned long long> >=L}{__compressed_pair<float, std::__1::equal_to<unsigned long long> >=f}}}{vector<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::allocator<std::__1::shared_ptr<md::LabelExternalRoadFeature> > >=^{shared_ptr<md::LabelExternalRoadFeature>}^{shared_ptr<md::LabelExternalRoadFeature>}{__compressed_pair<std::__1::shared_ptr<md::LabelExternalRoadFeature> *, std::__1::allocator<std::__1::shared_ptr<md::LabelExternalRoadFeature> > >=^{shared_ptr<md::LabelExternalRoadFeature>}}}{vector<std::__1::shared_ptr<md::LabelFeature>, std::__1::allocator<std::__1::shared_ptr<md::LabelFeature> > >=^{shared_ptr<md::LabelFeature>}^{shared_ptr<md::LabelFeature>}{__compressed_pair<std::__1::shared_ptr<md::LabelFeature> *, std::__1::allocator<std::__1::shared_ptr<md::LabelFeature> > >=^{shared_ptr<md::LabelFeature>}}}{map<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature>, md::LabelExternalRoadFeatureLess, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> > > >={__tree<std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> >, std::__1::__map_value_compare<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> >, md::LabelExternalRoadFeatureLess, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature> >, md::LabelExternalRoadFeatureLess, true> >=L}}}{_retain_ptr<VKRouteLineObserver *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{shared_ptr<md::LabelTransitRoute>=^{LabelTransitRoute}^{__shared_weak_count}}{shared_ptr<md::LabelTransitRouteLine>=^{LabelTransitRouteLine}^{__shared_weak_count}}I{unordered_map<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>, md::LabelTransitSupport::TransitLineColorKeyHash, std::__1::equal_to<std::__1::pair<unsigned long long, bool> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> > > >={__hash_table<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, std::__1::__unordered_map_hasher<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, md::LabelTransitSupport::TransitLineColorKeyHash, true>, std::__1::__unordered_map_equal<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, std::__1::equal_to<std::__1::pair<unsigned long long, bool> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> > > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, md::LabelTransitSupport::TransitLineColorKeyHash, true> >=L}{__compressed_pair<float, std::__1::__unordered_map_equal<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4> >, std::__1::equal_to<std::__1::pair<unsigned long long, bool> >, true> >=f}}}}8@12
{?="backgroundColor"b1"borderColor"b1"style"b1"textColor"b1"textDropShadowColor"b1"textDropShadowSize"b1"textStrokeColor"b1"textStrokeSize"b1}
^{__CTLine=}
^{__CTFrame=}
^{__CTFramesetter=}
{RoadSignMetrics="_orientation"C"_scale"f"_contentScale"f"_arrowWeight"f"_arrowLength"f"_shadowOffset"{CGSize="width"f"height"f}"_shadowRadius"f"_strokeWeight"f"_signHeight"f"_signMargin"f"_horizontalMargin"f"_verticalMargin"f"_cornerRadius"f"_glyphSize"{CGSize="width"f"height"f}}
{RoadSignTextMetrics="_scale"f"_contentScale"f"_horizontalMargin"f"_verticalMargin"f"_verticalOffset"f"_textSize"f"_fontFamily"{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >="__r_"{__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >="__value_"{__rep=""(?="__l"{__long="__cap_"I"__size_"I"__data_"*}"__s"{__short=""(?="__size_"C"__lx"c)"__data_"[11c]}"__r"{__raw="__words"[3L]})}}}"_textDrawWidth"f"_textWrapWidth"f}
{RoadSignGeneratedMetrics="_leftRoadSignPartMetrics"{RoadSignPartMetrics="_type"C"_imageSize"{CGSize="width"f"height"f}"_signBaseRect"{CGRect="origin"{CGPoint="x"f"y"f}"size"{CGSize="width"f"height"f}}"_topEmptySpaceHeight"f"_bottomEmptySpaceHeight"f"_leftEmptySpaceWidth"f"_rightEmptySpaceWidth"f"_outsideImagePathExtension"f"_hasArrows"B"_arrowWingMin"{CGPoint="x"f"y"f}"_arrowWingMax"{CGPoint="x"f"y"f}"_arrowTip"{CGPoint="x"f"y"f}}"_rightRoadSignPartMetrics"{RoadSignPartMetrics="_type"C"_imageSize"{CGSize="width"f"height"f}"_signBaseRect"{CGRect="origin"{CGPoint="x"f"y"f}"size"{CGSize="width"f"height"f}}"_topEmptySpaceHeight"f"_bottomEmptySpaceHeight"f"_leftEmptySpaceWidth"f"_rightEmptySpaceWidth"f"_outsideImagePathExtension"f"_hasArrows"B"_arrowWingMin"{CGPoint="x"f"y"f}"_arrowWingMax"{CGPoint="x"f"y"f}"_arrowTip"{CGPoint="x"f"y"f}}"_stretchedRoadSignPartMetrics"{RoadSignPartMetrics="_type"C"_imageSize"{CGSize="width"f"height"f}"_signBaseRect"{CGRect="origin"{CGPoint="x"f"y"f}"size"{CGSize="width"f"height"f}}"_topEmptySpaceHeight"f"_bottomEmptySpaceHeight"f"_leftEmptySpaceWidth"f"_rightEmptySpaceWidth"f"_outsideImagePathExtension"f"_hasArrows"B"_arrowWingMin"{CGPoint="x"f"y"f}"_arrowWingMax"{CGPoint="x"f"y"f}"_arrowTip"{CGPoint="x"f"y"f}}"_middleRoadSignPartMetrics"{RoadSignPartMetrics="_type"C"_imageSize"{CGSize="width"f"height"f}"_signBaseRect"{CGRect="origin"{CGPoint="x"f"y"f}"size"{CGSize="width"f"height"f}}"_topEmptySpaceHeight"f"_bottomEmptySpaceHeight"f"_leftEmptySpaceWidth"f"_rightEmptySpaceWidth"f"_outsideImagePathExtension"f"_hasArrows"B"_arrowWingMin"{CGPoint="x"f"y"f}"_arrowWingMax"{CGPoint="x"f"y"f}"_arrowTip"{CGPoint="x"f"y"f}}"_hasMiddleSignPart"B"_imageSize"{CGSize="width"f"height"f}"_signBaseRect"{CGRect="origin"{CGPoint="x"f"y"f}"size"{CGSize="width"f"height"f}}"_glyphRect"{CGRect="origin"{CGPoint="x"f"y"f}"size"{CGSize="width"f"height"f}}"_stretchedRoadSignPartWidth"f"_arrowTipPosition"{CGPoint="x"f"y"f}"_textPosition"{CGPoint="x"f"y"f}"_textBounds"{CGRect="origin"{CGPoint="x"f"y"f}"size"{CGSize="width"f"height"f}}"_leftPartRect"{CGRect="origin"{CGPoint="x"f"y"f}"size"{CGSize="width"f"height"f}}"_rightPartRect"{CGRect="origin"{CGPoint="x"f"y"f}"size"{CGSize="width"f"height"f}}"_stretchedPartRect"{CGRect="origin"{CGPoint="x"f"y"f}"size"{CGSize="width"f"height"f}}"_middlePartRect"{CGRect="origin"{CGPoint="x"f"y"f}"size"{CGSize="width"f"height"f}}"_middleLeftStretchedPartRect"{CGRect="origin"{CGPoint="x"f"y"f}"size"{CGSize="width"f"height"f}}"_middleRightStretchedPartRect"{CGRect="origin"{CGPoint="x"f"y"f}"size"{CGSize="width"f"height"f}}}
{RoadSignColoring="_hasFillColor"B"_hasStrokeColor"B"_hasShadowColor"B"_hasTextColor"B"_fillColorComponents"{array<float, 4>="__elems_"[4f]}"_strokeColorComponents"{array<float, 4>="__elems_"[4f]}"_shadowColorComponents"{array<float, 4>="__elems_"[4f]}"_textColorComponents"{array<float, 4>="__elems_"[4f]}}
@192@0:4@8{RoadSignMetrics=Cffff{CGSize=ff}fffffff{CGSize=ff}}12{RoadSignTextMetrics=ffffff{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}ff}76{RoadSignColoring=BBBB{array<float, 4>=[4f]}{array<float, 4>=[4f]}{array<float, 4>=[4f]}{array<float, 4>=[4f]}}120^{CGImage=}188
{Matrix<float, 2, 1>=[2f]}16@0:4{Matrix<float, 2, 1>=[2f]}8
v12@0:4r^{PolylineCoordinate=If}8
@20@0:4@8C12C16
@"VKRouteEtaDescription"
@32@0:4@8@12{PolylineCoordinate=If}16{PolylineCoordinate=If}24
@"VKRouteInfo"
{?="latitude"d"longitude"d}
{multimap<unsigned int, std::__1::vector<RouteSection, std::__1::allocator<RouteSection> >, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, std::__1::vector<RouteSection, std::__1::allocator<RouteSection> > > > >="__tree_"{__tree<std::__1::__value_type<unsigned int, std::__1::vector<RouteSection, std::__1::allocator<RouteSection> > >, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, std::__1::vector<RouteSection, std::__1::allocator<RouteSection> > >, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, std::__1::vector<RouteSection, std::__1::allocator<RouteSection> > > > >="__begin_node_"^{__tree_end_node<std::__1::__tree_node_base<void *> *>}"__pair1_"{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, std::__1::vector<RouteSection, std::__1::allocator<RouteSection> > >, void *> > >="__value_"{__tree_end_node<std::__1::__tree_node_base<void *> *>="__left_"^{__tree_node_base<void *>}}}"__pair3_"{__compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, std::__1::vector<RouteSection, std::__1::allocator<RouteSection> > >, std::__1::less<unsigned int>, true> >="__value_"L}}}
v16@0:4C8B12
v16@0:4@8C12
v16@0:4r^{?=@{PolylineCoordinate=If}{PolylineCoordinate=If}}8I12
v16@0:4I8@?12
S12@0:4I8
v20@0:4^S8{_NSRange=II}12
@16@0:4{_NSRange=II}8
i28@0:4@8I12{_NSRange=II}16@24
@36@0:4r^{VKTileKey=IiiI}8@12{shared_ptr<gss::StylesheetManager<gss::PropertyID> >=^{StylesheetManager<gss::PropertyID>}^{__shared_weak_count}}16@24f28^{Device=^^?{DeviceVersion=II}{DeviceCapabilities=BBIII{DeviceSize=III}}{DeviceAPIProperties=id}ii}32
{shared_ptr<md::LabelExternalPointFeature>="__ptr_"^{LabelExternalPointFeature}"__cntrl_"^{__shared_weak_count}}
@"<VKCustomFeatureDataSource>"
v12@0:4s8
v28@0:4{CGSize=ff}8{CGPoint=ff}16B24
^{shared_ptr<md::LabelExternalPointFeature>=^{LabelExternalPointFeature}^{__shared_weak_count}}8@0:4
{RenderTargetFormat="colorFormats"[4i]"colorFormatsCount"I"samples"I"depthStencilFormat"i}
{CGRect="origin"{CGPoint="x"f"y"f}"size"{CGSize="width"f"height"f}}
@"<GGLRenderQueueSource>"
{shared_ptr<ggl::Device>="__ptr_"^{Device}"__cntrl_"^{__shared_weak_count}}
^{Renderer=^^?^{Device}IIIBf{vector<std::__1::shared_ptr<ggl::DebugRenderer>, std::__1::allocator<std::__1::shared_ptr<ggl::DebugRenderer> > >=^{shared_ptr<ggl::DebugRenderer>}^{shared_ptr<ggl::DebugRenderer>}{__compressed_pair<std::__1::shared_ptr<ggl::DebugRenderer> *, std::__1::allocator<std::__1::shared_ptr<ggl::DebugRenderer> > >=^{shared_ptr<ggl::DebugRenderer>}}}{unique_ptr<ggl::RenderQueue, std::__1::default_delete<ggl::RenderQueue> >={__compressed_pair<ggl::RenderQueue *, std::__1::default_delete<ggl::RenderQueue> >=^{RenderQueue}}}{shared_ptr<ggl::CommonLibrary>=^{CommonLibrary}^{__shared_weak_count}}{unique_ptr<ggl::RenderResourceFences, std::__1::default_delete<ggl::RenderResourceFences> >={__compressed_pair<ggl::RenderResourceFences *, std::__1::default_delete<ggl::RenderResourceFences> >=^{RenderResourceFences}}}^{Texture2D}{unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer> >={__compressed_pair<ggl::CommandBuffer *, std::__1::default_delete<ggl::CommandBuffer> >=^{CommandBuffer}}}}
{unique_ptr<ggl::RenderTarget, std::__1::default_delete<ggl::RenderTarget> >="__ptr_"{__compressed_pair<ggl::RenderTarget *, std::__1::default_delete<ggl::RenderTarget> >="__value_"^{RenderTarget}}}
{unique_ptr<ggl::Texture, std::__1::default_delete<ggl::Texture> >="__ptr_"{__compressed_pair<ggl::Texture *, std::__1::default_delete<ggl::Texture> >="__value_"^{Texture}}}
{unique_ptr<ggl::RenderBuffer, std::__1::default_delete<ggl::RenderBuffer> >="__ptr_"{__compressed_pair<ggl::RenderBuffer *, std::__1::default_delete<ggl::RenderBuffer> >="__value_"^{RenderBuffer}}}
v40@0:4d8{function<void ()>={type=[16C]}^{__base<void ()>}}16
{shared_ptr<ggl::BitmapDataBase>=^{BitmapDataBase}^{__shared_weak_count}}12@0:4^{Texture=^^?^{ResourceManager}^{RenderResource}^^?*iiii}8
{CGSize=ff}8@0:4
@"<GGLRenderQueueSource>"8@0:4
v12@0:4@"<GGLRenderQueueSource>"8
r^{RenderTargetFormat=[4i]IIi}8@0:4
^{Renderer=^^?^{Device}IIIBf{vector<std::__1::shared_ptr<ggl::DebugRenderer>, std::__1::allocator<std::__1::shared_ptr<ggl::DebugRenderer> > >=^{shared_ptr<ggl::DebugRenderer>}^{shared_ptr<ggl::DebugRenderer>}{__compressed_pair<std::__1::shared_ptr<ggl::DebugRenderer> *, std::__1::allocator<std::__1::shared_ptr<ggl::DebugRenderer> > >=^{shared_ptr<ggl::DebugRenderer>}}}{unique_ptr<ggl::RenderQueue, std::__1::default_delete<ggl::RenderQueue> >={__compressed_pair<ggl::RenderQueue *, std::__1::default_delete<ggl::RenderQueue> >=^{RenderQueue}}}{shared_ptr<ggl::CommonLibrary>=^{CommonLibrary}^{__shared_weak_count}}{unique_ptr<ggl::RenderResourceFences, std::__1::default_delete<ggl::RenderResourceFences> >={__compressed_pair<ggl::RenderResourceFences *, std::__1::default_delete<ggl::RenderResourceFences> >=^{RenderResourceFences}}}^{Texture2D}{unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer> >={__compressed_pair<ggl::CommandBuffer *, std::__1::default_delete<ggl::CommandBuffer> >=^{CommandBuffer}}}}8@0:4
^{RenderTarget=^^?^{ResourceManager}^{RenderResource}^^?*{RenderTargetFormat=[4i]IIi}[4^{Texture}][4^{Texture}]^{Texture}IIBB}8@0:4
{CGPoint=ff}20@0:4{CGPoint=ff}8@"CALayer"16
^{DebugConsole=}12@0:4i8
{CGPoint=ff}20@0:4{CGPoint=ff}8@16
^{Texture=^^?^{ResourceManager}^{RenderResource}^^?*iiii}8@0:4
@28@0:4{CGSize=ff}8f16B20^{Device=i{shared_ptr<ggl::Device>=^{Device}^{__shared_weak_count}}{unique_ptr<md::SharedDeviceResources, std::__1::default_delete<md::SharedDeviceResources> >={__compressed_pair<md::SharedDeviceResources *, std::__1::default_delete<md::SharedDeviceResources> >=^{SharedDeviceResources}}}}24
{RenderTargetFormat=[4i]IIi}8@0:4
{?="center"{?="latitude"d"longitude"d}"span"{?="latitudeDelta"d"longitudeDelta"d}}
{VKRequestKey={?={?=dd}{?=dd}}i{CGSize=ff}@S}8@0:4
{?={?=dd}{?=dd}}8@0:4
v40@0:4{?={?=dd}{?=dd}}8
@"VKMapImageCanvas"
@"VKGlobeImageCanvas"
v12@0:4@"VKImageCanvas"8
v16@0:4@"VKImageCanvas"8B12
@24@0:4{CGSize=ff}8f16@20
@32@0:4{CGSize=ff}8f16@20@24@28
v20@0:4I8I12I16
v48@0:4{?=dd}8d24d32d40
@"VKScreenCameraController"
{DisplayStyle="timePeriod"C"overlayType"C"applicationState"C"searchResultsType"C"mapHasLabels"C}
@"<VKImageCanvasDelegate>"
{shared_ptr<md::TaskContext>=^{TaskContext}^{__shared_weak_count}}8@0:4
v36@0:4^{MapEngine=^^?{shared_ptr<md::TaskContext>=^{TaskContext}^{__shared_weak_count}}{_retain_ptr<GEOResourceManifestConfiguration *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}^{Device}{_retain_ptr<_MapEngineRenderQueueSource *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{unique_ptr<ggl::DisplayLink, std::__1::default_delete<ggl::DisplayLink> >={__compressed_pair<ggl::DisplayLink *, std::__1::default_delete<ggl::DisplayLink> >=^{DisplayLink}}}{unique_ptr<ggl::SnapshotRunLoop, std::__1::default_delete<ggl::SnapshotRunLoop> >={__compressed_pair<ggl::SnapshotRunLoop *, std::__1::default_delete<ggl::SnapshotRunLoop> >=^{SnapshotRunLoop}}}^{RunLoop}{unique_ptr<md::AnimationManager, std::__1::default_delete<md::AnimationManager> >={__compressed_pair<md::AnimationManager *, std::__1::default_delete<md::AnimationManager> >=^{AnimationManager}}}{unique_ptr<md::AnimationRunner, std::__1::default_delete<md::AnimationRunner> >={__compressed_pair<md::AnimationRunner *, std::__1::default_delete<md::AnimationRunner> >=^{AnimationRunner}}}{shared_ptr<md::RunLoopController>=^{RunLoopController}^{__shared_weak_count}}@@@@{unique_ptr<md::CartographicRenderer, std::__1::default_delete<md::CartographicRenderer> >={__compressed_pair<md::CartographicRenderer *, std::__1::default_delete<md::CartographicRenderer> >=^{CartographicRenderer}}}{unique_ptr<md::realistic::RealisticRenderer, std::__1::default_delete<md::realistic::RealisticRenderer> >={__compressed_pair<md::realistic::RealisticRenderer *, std::__1::default_delete<md::realistic::RealisticRenderer> >=^{RealisticRenderer}}}^{Renderer}{unique_ptr<md::LayoutContext, std::__1::default_delete<md::LayoutContext> >={__compressed_pair<md::LayoutContext *, std::__1::default_delete<md::LayoutContext> >=^{LayoutContext}}}{_retain_ptr<VKCamera *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{shared_ptr<md::LabelManager>=^{LabelManager}^{__shared_weak_count}}{shared_ptr<md::LabelManager>=^{LabelManager}^{__shared_weak_count}}{unique_ptr<md::LogicManager, std::__1::default_delete<md::LogicManager> >={__compressed_pair<md::LogicManager *, std::__1::default_delete<md::LogicManager> >=^{LogicManager}}}BBB{atomic<bool>=AB}{atomic<bool>=AB}B}8{function<void ()>={type=[16C]}^{__base<void ()>}}12
@"VKTileSource"
@"VKVectorTile"
@"GEOTileKeyMap"
{shared_ptr<md::ResourceInfo>="__ptr_"^{ResourceInfo}"__cntrl_"^{__shared_weak_count}}
{shared_ptr<md::ResourceInfo>=^{ResourceInfo}^{__shared_weak_count}}8@0:4
@"VKRoadTileSource"
@"VKTrafficDynamicTileSource"
^{map<VKTileKey, geo::_retain_ptr<VKTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, bool (*)(const VKTileKey &, const VKTileKey &), std::__1::allocator<std::__1::pair<const VKTileKey, geo::_retain_ptr<VKTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > > >={__tree<std::__1::__value_type<VKTileKey, geo::_retain_ptr<VKTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, std::__1::__map_value_compare<VKTileKey, std::__1::__value_type<VKTileKey, geo::_retain_ptr<VKTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, bool (*)(const VKTileKey &, const VKTileKey &), false>, std::__1::allocator<std::__1::__value_type<VKTileKey, geo::_retain_ptr<VKTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<VKTileKey, geo::_retain_ptr<VKTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<VKTileKey, std::__1::__value_type<VKTileKey, geo::_retain_ptr<VKTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, bool (*)(const VKTileKey &, const VKTileKey &), false> >=L{__map_value_compare<VKTileKey, std::__1::__value_type<VKTileKey, geo::_retain_ptr<VKTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, bool (*)(const VKTileKey &, const VKTileKey &), false>=^?}}}}
@40@0:4@8@12@16@20@24{shared_ptr<md::TaskContext>=^{TaskContext}^{__shared_weak_count}}28C36
v28@0:4@8{VKTileKey=IiiI}12
@16@0:4@8r^{_GEOTileKey=b6b26b26b6b8b8b8b1b7[4C]}12
@12@0:4^{_GEOTileKey=b6b26b26b6b8b8b8b1b7[4C]}8
@"VKMapView"
^{VKPerformanceTestResult_struct=*[5f]}
v16@0:4i8i12
^{RenderQueue={vector<ggl::RenderQueue::Pass, std::__1::allocator<ggl::RenderQueue::Pass> >=^{Pass}^{Pass}{__compressed_pair<ggl::RenderQueue::Pass *, std::__1::allocator<ggl::RenderQueue::Pass> >=^{Pass}}}{vector<ggl::ComputeQueue *, std::__1::allocator<ggl::ComputeQueue *> >=^^{ComputeQueue}^^{ComputeQueue}{__compressed_pair<ggl::ComputeQueue **, std::__1::allocator<ggl::ComputeQueue *> >=^^{ComputeQueue}}}{vector<ggl::CommandBuffer *, std::__1::allocator<ggl::CommandBuffer *> >=^^{CommandBuffer}^^{CommandBuffer}{__compressed_pair<ggl::CommandBuffer **, std::__1::allocator<ggl::CommandBuffer *> >=^^{CommandBuffer}}}{shared_ptr<ggl::RenderTransaction>=^{RenderTransaction}^{__shared_weak_count}}{vector<ggl::Texture *, std::__1::allocator<ggl::Texture *> >=^^{Texture}^^{Texture}{__compressed_pair<ggl::Texture **, std::__1::allocator<ggl::Texture *> >=^^{Texture}}}}16@0:4d8
@"GEOActiveTileSet"
{ZoomRange="min"f"max"f}
@"_VKTileSetBackedTileSourceTimerTarget"
@"VKTileSetBackedTileSource"
@"<VKRouteLineObserverProtocol>"
{vector<geo::fast_shared_ptr<md::RouteLineSection>, std::__1::allocator<geo::fast_shared_ptr<md::RouteLineSection> > >="__begin_"^{fast_shared_ptr<md::RouteLineSection>}"__end_"^{fast_shared_ptr<md::RouteLineSection>}"__end_cap_"{__compressed_pair<geo::fast_shared_ptr<md::RouteLineSection> *, std::__1::allocator<geo::fast_shared_ptr<md::RouteLineSection> > >="__value_"^{fast_shared_ptr<md::RouteLineSection>}}}
{fast_shared_ptr<md::RouteLineSection>="_control"^{_fast_shared_ptr_control}}
@"VKPolylineOverlayRenderRegion"
{ManeuverArrowCoordinates="_maneuverArrows"{vector<md::ManeuverArrowInfo, std::__1::allocator<md::ManeuverArrowInfo> >="__begin_"^{ManeuverArrowInfo}"__end_"^{ManeuverArrowInfo}"__end_cap_"{__compressed_pair<md::ManeuverArrowInfo *, std::__1::allocator<md::ManeuverArrowInfo> >="__value_"^{ManeuverArrowInfo}}}}
B36@0:4@8@12d16B24B28B32
v16@0:4i8f12
{vector<gm::Matrix<float, 2, 1>, std::__1::allocator<gm::Matrix<float, 2, 1> > >=^{Matrix<float, 2, 1>}^{Matrix<float, 2, 1>}{__compressed_pair<gm::Matrix<float, 2, 1> *, std::__1::allocator<gm::Matrix<float, 2, 1> > >=^{Matrix<float, 2, 1>}}}8@0:4
{Matrix<double, 4, 4>=[16d]}8@0:4
{vector<geo::fast_shared_ptr<md::RouteLineSection>, std::__1::allocator<geo::fast_shared_ptr<md::RouteLineSection> > >=^{fast_shared_ptr<md::RouteLineSection>}^{fast_shared_ptr<md::RouteLineSection>}{__compressed_pair<geo::fast_shared_ptr<md::RouteLineSection> *, std::__1::allocator<geo::fast_shared_ptr<md::RouteLineSection> > >=^{fast_shared_ptr<md::RouteLineSection>}}}8@0:4
^{Texture2D=^^?^{ResourceManager}^{RenderResource}^^?*iiiiI{shared_ptr<const ggl::TextureDataAbstract>=^{TextureDataAbstract}^{__shared_weak_count}}BBIIB{shared_ptr<ggl::SamplerState>=^{SamplerState}^{__shared_weak_count}}}
[16C]
@20@0:4^{CGImage=}8f12B16
@20@0:4@8f12B16
@20@0:4@8f12@16
^{CGImage=}8@0:4
@"VKGlobeCameraController"
@"VKGlobeLineContainer"
{shared_ptr<md::VKGlobeStylesheet>="__ptr_"^{VKGlobeStylesheet}"__cntrl_"^{__shared_weak_count}}
{AltitudeDebugSettings="altitudePauseLoading"B"altitudeFreezeViewNode"B"altitudeTexturePaging"B"altitudeShowTileBounds"B"altitudeThreadDrawing"B"altitudeHighResSatellite"B"altitudeMipmapSatellite"B"altitudeMipmapFlyover"B"altitudeMipmapObjectTree"B"altitudeShowNightLight"B"lodScale"f"tileQualityThreshold"f"hideMeshTime"f"fadeSpeed"f"tourSpeedup"B"tourSpeedupFactor"f}
^{GlobeAdapter={shared_ptr<md::GlobeAdapterData>=^{GlobeAdapterData}^{__shared_weak_count}}^{GlobeView}{vector<std::__1::shared_ptr<md::LabelMapTile>, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > >=^{shared_ptr<md::LabelMapTile>}^{shared_ptr<md::LabelMapTile>}{__compressed_pair<std::__1::shared_ptr<md::LabelMapTile> *, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > >=^{shared_ptr<md::LabelMapTile>}}}{shared_ptr<md::LabelManager>=^{LabelManager}^{__shared_weak_count}}{unique_ptr<md::LabelSettings, std::__1::default_delete<md::LabelSettings> >={__compressed_pair<md::LabelSettings *, std::__1::default_delete<md::LabelSettings> >=^{LabelSettings}}}{_retain_ptr<GEOResourceManifestConfiguration *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}BB}
^{RealisticRenderer=^^?{shared_ptr<md::TaskContext>=^{TaskContext}^{__shared_weak_count}}{unique_ptr<md::RenderQueue, std::__1::default_delete<md::RenderQueue> >={__compressed_pair<md::RenderQueue *, std::__1::default_delete<md::RenderQueue> >=^{RenderQueue}}}[28^{RenderLayer}][65^{RenderLayer}]^{RunLoopController}^{MapEngine}@^{Device}^{GlobeView}^{Context}^{StencilManager}^{GlobeDispatch}^{CullingNode}^{GlobeTileRenderManager}^{TexturePager}{shared_ptr<md::GlobeOverlayContainer>=^{GlobeOverlayContainer}^{__shared_weak_count}}{shared_ptr<ggl::FlyoverLibrary>=^{FlyoverLibrary}^{__shared_weak_count}}@}
{shared_ptr<md::GlobeOverlayContainer>="__ptr_"^{GlobeOverlayContainer}"__cntrl_"^{__shared_weak_count}}
{shared_ptr<ggl::FlyoverLibrary>="__ptr_"^{FlyoverLibrary}"__cntrl_"^{__shared_weak_count}}
{shared_ptr<bool>="__ptr_"^B"__cntrl_"^{__shared_weak_count}}
@"VKARCameraController"
{unique_ptr<md::FlyoverPolylineOverlayCache, std::__1::default_delete<md::FlyoverPolylineOverlayCache> >="__ptr_"{__compressed_pair<md::FlyoverPolylineOverlayCache *, std::__1::default_delete<md::FlyoverPolylineOverlayCache> >="__value_"^{FlyoverPolylineOverlayCache}}}
v12@0:4@"VKGlobeLineContainer"8
@20@0:4^{MapEngine=^^?{shared_ptr<md::TaskContext>=^{TaskContext}^{__shared_weak_count}}{_retain_ptr<GEOResourceManifestConfiguration *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}^{Device}{_retain_ptr<_MapEngineRenderQueueSource *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{unique_ptr<ggl::DisplayLink, std::__1::default_delete<ggl::DisplayLink> >={__compressed_pair<ggl::DisplayLink *, std::__1::default_delete<ggl::DisplayLink> >=^{DisplayLink}}}{unique_ptr<ggl::SnapshotRunLoop, std::__1::default_delete<ggl::SnapshotRunLoop> >={__compressed_pair<ggl::SnapshotRunLoop *, std::__1::default_delete<ggl::SnapshotRunLoop> >=^{SnapshotRunLoop}}}^{RunLoop}{unique_ptr<md::AnimationManager, std::__1::default_delete<md::AnimationManager> >={__compressed_pair<md::AnimationManager *, std::__1::default_delete<md::AnimationManager> >=^{AnimationManager}}}{unique_ptr<md::AnimationRunner, std::__1::default_delete<md::AnimationRunner> >={__compressed_pair<md::AnimationRunner *, std::__1::default_delete<md::AnimationRunner> >=^{AnimationRunner}}}{shared_ptr<md::RunLoopController>=^{RunLoopController}^{__shared_weak_count}}@@@@{unique_ptr<md::CartographicRenderer, std::__1::default_delete<md::CartographicRenderer> >={__compressed_pair<md::CartographicRenderer *, std::__1::default_delete<md::CartographicRenderer> >=^{CartographicRenderer}}}{unique_ptr<md::realistic::RealisticRenderer, std::__1::default_delete<md::realistic::RealisticRenderer> >={__compressed_pair<md::realistic::RealisticRenderer *, std::__1::default_delete<md::realistic::RealisticRenderer> >=^{RealisticRenderer}}}^{Renderer}{unique_ptr<md::LayoutContext, std::__1::default_delete<md::LayoutContext> >={__compressed_pair<md::LayoutContext *, std::__1::default_delete<md::LayoutContext> >=^{LayoutContext}}}{_retain_ptr<VKCamera *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{shared_ptr<md::LabelManager>=^{LabelManager}^{__shared_weak_count}}{shared_ptr<md::LabelManager>=^{LabelManager}^{__shared_weak_count}}{unique_ptr<md::LogicManager, std::__1::default_delete<md::LogicManager> >={__compressed_pair<md::LogicManager *, std::__1::default_delete<md::LogicManager> >=^{LogicManager}}}BBB{atomic<bool>=AB}{atomic<bool>=AB}B}8B12@16
v24@0:4@8B12@?16@?20
v28@0:4Q8B16@?20@?24
v12@0:4r^{shared_ptr<md::FeatureMarker>=}8
^{GlobeOverlayContainer=^{GlobeView}^{NSMutableArray}{mutex={_opaque_pthread_mutex_t=l[40c]}}f}8@0:4
@"NSBundle"
{vector<gm::Box<double, 2>, std::__1::allocator<gm::Box<double, 2> > >="__begin_"^{Box<double, 2>}"__end_"^{Box<double, 2>}"__end_cap_"{__compressed_pair<gm::Box<double, 2> *, std::__1::allocator<gm::Box<double, 2> > >="__value_"^{Box<double, 2>}}}
{vector<VKTileKey, std::__1::allocator<VKTileKey> >="__begin_"^{VKTileKey}"__end_"^{VKTileKey}"__end_cap_"{__compressed_pair<VKTileKey *, std::__1::allocator<VKTileKey> >="__value_"^{VKTileKey}}}
r^{vector<gm::Box<double, 2>, std::__1::allocator<gm::Box<double, 2> > >=^{Box<double, 2>}^{Box<double, 2>}{__compressed_pair<gm::Box<double, 2> *, std::__1::allocator<gm::Box<double, 2> > >=^{Box<double, 2>}}}8@0:4
@"<VKPolylineOverlayRouteRibbonObserver>"
^{TrafficSegmentsAlongRoute={vector<md::TrafficSegment, std::__1::allocator<md::TrafficSegment> >=^{TrafficSegment}^{TrafficSegment}{__compressed_pair<md::TrafficSegment *, std::__1::allocator<md::TrafficSegment> >=^{TrafficSegment}}}}
v12@0:4@"GEOComposedRoute"8
v20@0:4@"GEOComposedRoute"8@"NSArray"12@"NSArray"16
v24@0:4@"GEOComposedRoute"8@"GEOComposedTransitTripRouteLeg"12I16I20
v24@0:4@8@12I16I20
{_NSRange=II}40@0:4{Box<double, 2>={Matrix<double, 2, 1>=[2d]}{Matrix<double, 2, 1>=[2d]}}8
@24@0:4@8B12B16@20
B20@0:4@8r^{Box<double, 2>={Matrix<double, 2, 1>=[2d]}{Matrix<double, 2, 1>=[2d]}}12^{array<gm::Matrix<double, 2, 1>, 2>=[2{Matrix<double, 2, 1>=[2d]}]}16
B20@0:4@8r^{Box<double, 2>={Matrix<double, 2, 1>=[2d]}{Matrix<double, 2, 1>=[2d]}}12@16
@24@0:4@8@12B16B20
@20@0:4@8@12r^{vector<gm::Range<unsigned int>, std::__1::allocator<gm::Range<unsigned int> > >=^{Range<unsigned int>}^{Range<unsigned int>}{__compressed_pair<gm::Range<unsigned int> *, std::__1::allocator<gm::Range<unsigned int> > >=^{Range<unsigned int>}}}16
@"<VKRouteMatchedAnnotationPresentation>"
@"<VKGlobeLineContainerDelegate>"
{map<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData>, std::__1::less<VKPolylineOverlay *>, std::__1::allocator<std::__1::pair<VKPolylineOverlay *const, std::__1::weak_ptr<altitude::RouteLineData> > > >="__tree_"{__tree<std::__1::__value_type<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData> >, std::__1::__map_value_compare<VKPolylineOverlay *, std::__1::__value_type<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData> >, std::__1::less<VKPolylineOverlay *>, true>, std::__1::allocator<std::__1::__value_type<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData> > > >="__begin_node_"^{__tree_end_node<std::__1::__tree_node_base<void *> *>}"__pair1_"{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData> >, void *> > >="__value_"{__tree_end_node<std::__1::__tree_node_base<void *> *>="__left_"^{__tree_node_base<void *>}}}"__pair3_"{__compressed_pair<unsigned long, std::__1::__map_value_compare<VKPolylineOverlay *, std::__1::__value_type<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData> >, std::__1::less<VKPolylineOverlay *>, true> >="__value_"L}}}
^{VKGlobeRouteSplit=^^?@}
v12@0:4@"VKPolylineOverlay"8
v20@0:4@"VKPolylineOverlay"8@"NSArray"12@"NSArray"16
@20@0:4^{GlobeView=^^?^{GeoServicesLoader}^{ManifestManager}^{TriggerManager}{shared_ptr<altitude::AnchorManager>=^{AnchorManager}^{__shared_weak_count}}^{DtmCacheNode}^{DtmRequestManager}^{FreezeViewNode}{Projection={Perspective=dddd}{Ortho=dddddd}BB}{CameraFrame<geo::Radians, double>={Coordinate3D<Radians, double>={Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<MeterUnitDescription, double>=d}}{Unit<MeterUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}}B{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{vector<altitude::SimpleTileKey, std::__1::allocator<altitude::SimpleTileKey> >=^{SimpleTileKey}^{SimpleTileKey}{__compressed_pair<altitude::SimpleTileKey *, std::__1::allocator<altitude::SimpleTileKey> >=^{SimpleTileKey}}}BII^{VKClassicGlobeCanvas}BB{AnimationManager={AnimationReferenceTimer=ddd}{unique_ptr<altitude::AnimationTimer, std::__1::default_delete<altitude::AnimationTimer> >={__compressed_pair<altitude::AnimationTimer *, std::__1::default_delete<altitude::AnimationTimer> >=^{AnimationTimer}}}d{vector<altitude::AnimationObjectHolder, std::__1::allocator<altitude::AnimationObjectHolder> >=^{AnimationObjectHolder}^{AnimationObjectHolder}{__compressed_pair<altitude::AnimationObjectHolder *, std::__1::allocator<altitude::AnimationObjectHolder> >=^{AnimationObjectHolder}}}}{Timer=d}dBddd{CameraFrame<geo::Radians, double>={Coordinate3D<Radians, double>={Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<MeterUnitDescription, double>=d}}{Unit<MeterUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}}^{C3mmRequestManager}^{RenderableGroup}IdBB^{LabelDataManagerPrivate}BBBB^{RouteLineManager}^{GlobeCleanupLoader}^{CompleteGlobeTileSetCullingGraph}^{CompleteGlobeTileSetLoader}^{TileSetNode}^{GlobeTileRenderManager}^{CullingNode}^{EarthAdjustedViewNode}^{UserViewNode}^{View}^{BasicViewNode}^{GlobeMainViewNode}^{C3bRequestManager}fB{shared_ptr<bool>=^B^{__shared_weak_count}}^{HeightRequestManager}{map<gm::Matrix<int, 2, 1>, std::__1::pair<bool, geo::Coordinate3D<Radians, double> >, altitude::GlobeView::LessVector2i, std::__1::allocator<std::__1::pair<const gm::Matrix<int, 2, 1>, std::__1::pair<bool, geo::Coordinate3D<Radians, double> > > > >={__tree<std::__1::__value_type<gm::Matrix<int, 2, 1>, std::__1::pair<bool, geo::Coordinate3D<Radians, double> > >, std::__1::__map_value_compare<gm::Matrix<int, 2, 1>, std::__1::__value_type<gm::Matrix<int, 2, 1>, std::__1::pair<bool, geo::Coordinate3D<Radians, double> > >, altitude::GlobeView::LessVector2i, true>, std::__1::allocator<std::__1::__value_type<gm::Matrix<int, 2, 1>, std::__1::pair<bool, geo::Coordinate3D<Radians, double> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gm::Matrix<int, 2, 1>, std::__1::pair<bool, geo::Coordinate3D<Radians, double> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<gm::Matrix<int, 2, 1>, std::__1::__value_type<gm::Matrix<int, 2, 1>, std::__1::pair<bool, geo::Coordinate3D<Radians, double> > >, altitude::GlobeView::LessVector2i, true> >=L}}}{Mutex=^v}{shared_ptr<altitude::Stylesheet>=^{Stylesheet}^{__shared_weak_count}}^{FlyoverTour}B{Viewport=iiii}B{set<altitude::ManifestListener *, std::__1::less<altitude::ManifestListener *>, std::__1::allocator<altitude::ManifestListener *> >={__tree<altitude::ManifestListener *, std::__1::less<altitude::ManifestListener *>, std::__1::allocator<altitude::ManifestListener *> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<altitude::ManifestListener *, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<altitude::ManifestListener *> >=L}}}^{TileManager}^{ObjectTreeLoader}^{QuickSurfaceManager}^{IntersectorHeight}{shared_ptr<karo::SharedItemManager<altitude::Map, altitude::MapRequestId> >=^{SharedItemManager<altitude::Map, altitude::MapRequestId>}^{__shared_weak_count}}^{BundleLoader}^{ProtocolLoader}^{GeoResourceManager}^{GeoResourceLoader}^{ViewNode}^{ViewportNode}^{View}^{Viewport}{shared_ptr<ggl::RenderState>=^{RenderState}^{__shared_weak_count}}I^{Statistics}{atomic<bool>=AB}^{TexturePager}^{IOSurfacePool}^{RealisticRenderer}{DclpUnique<ggl::Texture2D, altitude::util::DclpDefaultDelete<ggl::Texture2D> >={mutex={_opaque_pthread_mutex_t=l[40c]}}{atomic<ggl::Texture2D *>=A^{Texture2D}}{function<ggl::Texture2D *()>={type=[16C]}^{__base<ggl::Texture2D *()>}}}{DclpUnique<altitude::TextureMap, altitude::util::DclpDefaultDelete<altitude::TextureMap> >={mutex={_opaque_pthread_mutex_t=l[40c]}}{atomic<altitude::TextureMap *>=A^{TextureMap}}{function<altitude::TextureMap *()>={type=[16C]}^{__base<altitude::TextureMap *()>}}}{DclpUnique<altitude::TextureMap, altitude::util::DclpDefaultDelete<altitude::TextureMap> >={mutex={_opaque_pthread_mutex_t=l[40c]}}{atomic<altitude::TextureMap *>=A^{TextureMap}}{function<altitude::TextureMap *()>={type=[16C]}^{__base<altitude::TextureMap *()>}}}}8{shared_ptr<gss::StylesheetManager<gss::PropertyID> >=^{StylesheetManager<gss::PropertyID>}^{__shared_weak_count}}12
f16@0:4@8f12
{unordered_map<std::__1::basic_string<char>, std::__1::vector<std::__1::shared_ptr<md::ObjectGroup>, std::__1::allocator<std::__1::shared_ptr<md::ObjectGroup> > >, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::vector<std::__1::shared_ptr<md::ObjectGroup>, std::__1::allocator<std::__1::shared_ptr<md::ObjectGroup> > > > > >="__table_"{__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::vector<std::__1::shared_ptr<md::ObjectGroup>, std::__1::allocator<std::__1::shared_ptr<md::ObjectGroup> > > >, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::vector<std::__1::shared_ptr<md::ObjectGroup>, std::__1::allocator<std::__1::shared_ptr<md::ObjectGroup> > > >, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::vector<std::__1::shared_ptr<md::ObjectGroup>, std::__1::allocator<std::__1::shared_ptr<md::ObjectGroup> > > >, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::vector<std::__1::shared_ptr<md::ObjectGroup>, std::__1::allocator<std::__1::shared_ptr<md::ObjectGroup> > > > > >="__bucket_list_"{unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::vector<std::__1::shared_ptr<md::ObjectGroup>, std::__1::allocator<std::__1::shared_ptr<md::ObjectGroup> > > >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::vector<std::__1::shared_ptr<md::ObjectGroup>, std::__1::allocator<std::__1::shared_ptr<md::ObjectGroup> > > >, void *> *> *> > >="__ptr_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::vector<std::__1::shared_ptr<md::ObjectGroup>, std::__1::allocator<std::__1::shared_ptr<md::ObjectGroup> > > >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::vector<std::__1::shared_ptr<md::ObjectGroup>, std::__1::allocator<std::__1::shared_ptr<md::ObjectGroup> > > >, void *> *> *> > >="__value_"^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::vector<std::__1::shared_ptr<md::ObjectGroup>, std::__1::allocator<std::__1::shared_ptr<md::ObjectGroup> > > >, void *> *>}"__value_"{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::vector<std::__1::shared_ptr<md::ObjectGroup>, std::__1::allocator<std::__1::shared_ptr<md::ObjectGroup> > > >, void *> *> *> >="__data_"{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::vector<std::__1::shared_ptr<md::ObjectGroup>, std::__1::allocator<std::__1::shared_ptr<md::ObjectGroup> > > >, void *> *> *> >="__value_"L}}}}"__p1_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::vector<std::__1::shared_ptr<md::ObjectGroup>, std::__1::allocator<std::__1::shared_ptr<md::ObjectGroup> > > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::vector<std::__1::shared_ptr<md::ObjectGroup>, std::__1::allocator<std::__1::shared_ptr<md::ObjectGroup> > > >, void *> > >="__value_"{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::vector<std::__1::shared_ptr<md::ObjectGroup>, std::__1::allocator<std::__1::shared_ptr<md::ObjectGroup> > > >, void *> *>="__next_"^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::vector<std::__1::shared_ptr<md::ObjectGroup>, std::__1::allocator<std::__1::shared_ptr<md::ObjectGroup> > > >, void *> *>}}}"__p2_"{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::vector<std::__1::shared_ptr<md::ObjectGroup>, std::__1::allocator<std::__1::shared_ptr<md::ObjectGroup> > > >, std::__1::hash<std::__1::basic_string<char> >, true> >="__value_"L}"__p3_"{__compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::vector<std::__1::shared_ptr<md::ObjectGroup>, std::__1::allocator<std::__1::shared_ptr<md::ObjectGroup> > > >, std::__1::equal_to<std::__1::basic_string<char> >, true> >="__value_"f}}}
{?="borders"B"folds"B"angles"B"minAngle"f"maxAngle"f}
B12@0:4I8
v16@0:4@8r^{_GEOTileKey=b6b26b26b6b8b8b8b1b7[4C]}12
v24@0:4@8r^{_GEOTileKey=b6b26b26b6b8b8b8b1b7[4C]}12I16i20
r^{vector<std::__1::shared_ptr<md::ObjectGroup>, std::__1::allocator<std::__1::shared_ptr<md::ObjectGroup> > >=^{shared_ptr<md::ObjectGroup>}^{shared_ptr<md::ObjectGroup>}{__compressed_pair<std::__1::shared_ptr<md::ObjectGroup> *, std::__1::allocator<std::__1::shared_ptr<md::ObjectGroup> > >=^{shared_ptr<md::ObjectGroup>}}}12@0:4r^{_GEOTileKey=b6b26b26b6b8b8b8b1b7[4C]}8
{?=BBBff}8@0:4
v20@0:4{?=BBBff}8
@"VKLabelTile"
^{?={?=@*IIIIIQBQfQ@i}IIiiiII(?={?={?=ff}{?=ff}}{?=ffff})^{?}{?=[2S][2S]}CBCBBCBC{_NSRange=II}BI}
^{?=II^{?}}
@"VKLabelNavJunction"
{vector<gm::Matrix<double, 2, 1>, std::__1::allocator<gm::Matrix<double, 2, 1> > >="__begin_"^{Matrix<double, 2, 1>}"__end_"^{Matrix<double, 2, 1>}"__end_cap_"{__compressed_pair<gm::Matrix<double, 2, 1> *, std::__1::allocator<gm::Matrix<double, 2, 1> > >="__value_"^{Matrix<double, 2, 1>}}}
[3B]
@28@0:4r^{?=^{?}IIII^{?}^{?}}8@12{PolylineCoordinate=If}16@24
r*8@0:4
v20@0:4^{NavContext=^^?^{LabelManager}^{LabelLayoutContext}^{LabelNavLayoutContext}}8d12
v12@0:4^{?=^{?}IIII^{?}^{?}}8
B12@0:4r^{?=^{?}IIII^{?}^{?}}8
f48@0:4f8{Matrix<double, 3, 1>=[3d]}12{Matrix<float, 2, 1>=[2f]}36@44
B32@0:4^{Mercator3<double>=[3d]}8B12f16f20f24@28
v40@0:4^{NavContext=^^?^{LabelManager}^{LabelLayoutContext}^{LabelNavLayoutContext}}8B12f16f20f24f28@32^{VKLabelNavArtworkCache={unique_ptr<LRUCache<unsigned long, VKRoadSignArtwork *, std::__1::hash<unsigned long> >, std::__1::default_delete<LRUCache<unsigned long, VKRoadSignArtwork *, std::__1::hash<unsigned long> > > >={__compressed_pair<LRUCache<unsigned long, VKRoadSignArtwork *, std::__1::hash<unsigned long> > *, std::__1::default_delete<LRUCache<unsigned long, VKRoadSignArtwork *, std::__1::hash<unsigned long> > > >=^{LRUCache<unsigned long, VKRoadSignArtwork *, std::__1::hash<unsigned long> >}}}{unique_ptr<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> >, std::__1::default_delete<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> > > >={__compressed_pair<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> > *, std::__1::default_delete<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> > > >=^{LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> >}}}{unique_ptr<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> >, std::__1::default_delete<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> > > >={__compressed_pair<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> > *, std::__1::default_delete<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> > > >=^{LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> >}}}^{CGColor}^{CGColor}{VKGuidanceManeuverArrowMetrics={CGSize=ff}fff{CGSize=ff}fffCffffffffffffffffBfffBB}}36
v20@0:4C8^{NavContext=^^?^{LabelManager}^{LabelLayoutContext}^{LabelNavLayoutContext}}12^{VKLabelNavArtworkCache={unique_ptr<LRUCache<unsigned long, VKRoadSignArtwork *, std::__1::hash<unsigned long> >, std::__1::default_delete<LRUCache<unsigned long, VKRoadSignArtwork *, std::__1::hash<unsigned long> > > >={__compressed_pair<LRUCache<unsigned long, VKRoadSignArtwork *, std::__1::hash<unsigned long> > *, std::__1::default_delete<LRUCache<unsigned long, VKRoadSignArtwork *, std::__1::hash<unsigned long> > > >=^{LRUCache<unsigned long, VKRoadSignArtwork *, std::__1::hash<unsigned long> >}}}{unique_ptr<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> >, std::__1::default_delete<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> > > >={__compressed_pair<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> > *, std::__1::default_delete<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> > > >=^{LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> >}}}{unique_ptr<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> >, std::__1::default_delete<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> > > >={__compressed_pair<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> > *, std::__1::default_delete<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> > > >=^{LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> >}}}^{CGColor}^{CGColor}{VKGuidanceManeuverArrowMetrics={CGSize=ff}fff{CGSize=ff}fffCffffffffffffffffBfffBB}}16
v12@0:4^{vector<gm::Matrix<double, 2, 1>, std::__1::allocator<gm::Matrix<double, 2, 1> > >=^{Matrix<double, 2, 1>}^{Matrix<double, 2, 1>}{__compressed_pair<gm::Matrix<double, 2, 1> *, std::__1::allocator<gm::Matrix<double, 2, 1> > >=^{Matrix<double, 2, 1>}}}8
B16@0:4f8^{Mercator3<double>=[3d]}12
@48@0:4^{NavContext=^^?^{LabelManager}^{LabelLayoutContext}^{LabelNavLayoutContext}}8B12{Matrix<double, 3, 1>=[3d]}16C40^{VKLabelNavArtworkCache={unique_ptr<LRUCache<unsigned long, VKRoadSignArtwork *, std::__1::hash<unsigned long> >, std::__1::default_delete<LRUCache<unsigned long, VKRoadSignArtwork *, std::__1::hash<unsigned long> > > >={__compressed_pair<LRUCache<unsigned long, VKRoadSignArtwork *, std::__1::hash<unsigned long> > *, std::__1::default_delete<LRUCache<unsigned long, VKRoadSignArtwork *, std::__1::hash<unsigned long> > > >=^{LRUCache<unsigned long, VKRoadSignArtwork *, std::__1::hash<unsigned long> >}}}{unique_ptr<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> >, std::__1::default_delete<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> > > >={__compressed_pair<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> > *, std::__1::default_delete<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> > > >=^{LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> >}}}{unique_ptr<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> >, std::__1::default_delete<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> > > >={__compressed_pair<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> > *, std::__1::default_delete<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> > > >=^{LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> >}}}^{CGColor}^{CGColor}{VKGuidanceManeuverArrowMetrics={CGSize=ff}fff{CGSize=ff}fffCffffffffffffffffBfffBB}}44
v16@0:4{Matrix<float, 2, 1>=[2f]}8
^{?=II^{?}}8@0:4
@"VKLabelNavRoadGraph"
{vector<std::__1::shared_ptr<md::NavLabel>, std::__1::allocator<std::__1::shared_ptr<md::NavLabel> > >="__begin_"^{shared_ptr<md::NavLabel>}"__end_"^{shared_ptr<md::NavLabel>}"__end_cap_"{__compressed_pair<std::__1::shared_ptr<md::NavLabel> *, std::__1::allocator<std::__1::shared_ptr<md::NavLabel> > >="__value_"^{shared_ptr<md::NavLabel>}}}
^{VKLabelNavArtworkCache={unique_ptr<LRUCache<unsigned long, VKRoadSignArtwork *, std::__1::hash<unsigned long> >, std::__1::default_delete<LRUCache<unsigned long, VKRoadSignArtwork *, std::__1::hash<unsigned long> > > >={__compressed_pair<LRUCache<unsigned long, VKRoadSignArtwork *, std::__1::hash<unsigned long> > *, std::__1::default_delete<LRUCache<unsigned long, VKRoadSignArtwork *, std::__1::hash<unsigned long> > > >=^{LRUCache<unsigned long, VKRoadSignArtwork *, std::__1::hash<unsigned long> >}}}{unique_ptr<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> >, std::__1::default_delete<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> > > >={__compressed_pair<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> > *, std::__1::default_delete<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> > > >=^{LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> >}}}{unique_ptr<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> >, std::__1::default_delete<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> > > >={__compressed_pair<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> > *, std::__1::default_delete<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> > > >=^{LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> >}}}^{CGColor}^{CGColor}{VKGuidanceManeuverArrowMetrics={CGSize=ff}fff{CGSize=ff}fffCffffffffffffffffBfffBB}}
{shared_ptr<md::NavCurrentRoadSign>="__ptr_"^{NavCurrentRoadSign}"__cntrl_"^{__shared_weak_count}}
{vector<VKLabelNavRoadLabel *, std::__1::allocator<VKLabelNavRoadLabel *> >="__begin_"^@"__end_"^@"__end_cap_"{__compressed_pair<VKLabelNavRoadLabel **, std::__1::allocator<VKLabelNavRoadLabel *> >="__value_"^@}}
^{NavCurrentRoadSign=^^?{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{shared_ptr<md::LabelStyle>=^{LabelStyle}^{__shared_weak_count}}B{shared_ptr<gss::StylesheetQuery<gss::PropertyID> >=^{StylesheetQuery<gss::PropertyID>}^{__shared_weak_count}}{?=BBff}{unique_ptr<md::NavLabelPart, std::__1::default_delete<md::NavLabelPart> >={__compressed_pair<md::NavLabelPart *, std::__1::default_delete<md::NavLabelPart> >=^{NavLabelPart}}}{Mercator2<double>=[2d]}{shared_ptr<md::Anchor>=^{Anchor}^{__shared_weak_count}}{Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}BBBfBBff}8@0:4
v20@0:4@8^{NavContext=^^?^{LabelManager}^{LabelLayoutContext}^{LabelNavLayoutContext}}12B16
v20@0:4@8B12^{NavContext=^^?^{LabelManager}^{LabelLayoutContext}^{LabelNavLayoutContext}}16
v24@0:4@8B12^{NavContext=^^?^{LabelManager}^{LabelLayoutContext}^{LabelNavLayoutContext}}16B20
B20@0:4@8@12@16
C20@0:4@8@12^{NavContext=^^?^{LabelManager}^{LabelLayoutContext}^{LabelNavLayoutContext}}16
v16@0:4^{NavContext=^^?^{LabelManager}^{LabelLayoutContext}^{LabelNavLayoutContext}}8r^{vector<VKLabelNavRoadLabel *, std::__1::allocator<VKLabelNavRoadLabel *> >=^@^@{__compressed_pair<VKLabelNavRoadLabel **, std::__1::allocator<VKLabelNavRoadLabel *> >=^@}}12
v20@0:4@8^{NavContext=^^?^{LabelManager}^{LabelLayoutContext}^{LabelNavLayoutContext}}12I16
v28@0:4@8^{NavContext=^^?^{LabelManager}^{LabelLayoutContext}^{LabelNavLayoutContext}}12I16B20B24
B28@0:4i8^{vector<RouteJunctionInfo, std::__1::allocator<RouteJunctionInfo> >=^{RouteJunctionInfo}^{RouteJunctionInfo}{__compressed_pair<RouteJunctionInfo *, std::__1::allocator<RouteJunctionInfo> >=^{RouteJunctionInfo}}}12B16^i20^i24
C20@0:4r^{Matrix<float, 2, 1>=[2f]}8C12^{NavContext=^^?^{LabelManager}^{LabelLayoutContext}^{LabelNavLayoutContext}}16
r^{vector<std::__1::shared_ptr<md::NavLabel>, std::__1::allocator<std::__1::shared_ptr<md::NavLabel> > >=^{shared_ptr<md::NavLabel>}^{shared_ptr<md::NavLabel>}{__compressed_pair<std::__1::shared_ptr<md::NavLabel> *, std::__1::allocator<std::__1::shared_ptr<md::NavLabel> > >=^{shared_ptr<md::NavLabel>}}}8@0:4
^{VKLabelNavArtworkCache={unique_ptr<LRUCache<unsigned long, VKRoadSignArtwork *, std::__1::hash<unsigned long> >, std::__1::default_delete<LRUCache<unsigned long, VKRoadSignArtwork *, std::__1::hash<unsigned long> > > >={__compressed_pair<LRUCache<unsigned long, VKRoadSignArtwork *, std::__1::hash<unsigned long> > *, std::__1::default_delete<LRUCache<unsigned long, VKRoadSignArtwork *, std::__1::hash<unsigned long> > > >=^{LRUCache<unsigned long, VKRoadSignArtwork *, std::__1::hash<unsigned long> >}}}{unique_ptr<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> >, std::__1::default_delete<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> > > >={__compressed_pair<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> > *, std::__1::default_delete<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> > > >=^{LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> >}}}{unique_ptr<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> >, std::__1::default_delete<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> > > >={__compressed_pair<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> > *, std::__1::default_delete<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> > > >=^{LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> >}}}^{CGColor}^{CGColor}{VKGuidanceManeuverArrowMetrics={CGSize=ff}fff{CGSize=ff}fffCffffffffffffffffBfffBB}}8@0:4
v12@0:4^{VKLabelNavArtworkCache={unique_ptr<LRUCache<unsigned long, VKRoadSignArtwork *, std::__1::hash<unsigned long> >, std::__1::default_delete<LRUCache<unsigned long, VKRoadSignArtwork *, std::__1::hash<unsigned long> > > >={__compressed_pair<LRUCache<unsigned long, VKRoadSignArtwork *, std::__1::hash<unsigned long> > *, std::__1::default_delete<LRUCache<unsigned long, VKRoadSignArtwork *, std::__1::hash<unsigned long> > > >=^{LRUCache<unsigned long, VKRoadSignArtwork *, std::__1::hash<unsigned long> >}}}{unique_ptr<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> >, std::__1::default_delete<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> > > >={__compressed_pair<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> > *, std::__1::default_delete<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> > > >=^{LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> >}}}{unique_ptr<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> >, std::__1::default_delete<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> > > >={__compressed_pair<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> > *, std::__1::default_delete<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> > > >=^{LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> >}}}^{CGColor}^{CGColor}{VKGuidanceManeuverArrowMetrics={CGSize=ff}fff{CGSize=ff}fffCffffffffffffffffBfffBB}}8
@24@0:4@8@12{PolylineCoordinate=If}16
{Geocentric<double>="_e"[3d]}
@"<MDARControllerDelegate>"
^{NSDictionary=#}
@16@0:4^{NSDictionary=#}8@12
v20@0:4@8^@12^@16
v12@0:4@"NSCoder"8
@12@0:4@"NSCoder"8
@24@0:4^{CGImage=}8f12@16B20
B20@0:4@8I12^@16
@16@0:4r^{Venue=QQ{vector<md::VenueBuilding, std::__1::allocator<md::VenueBuilding> >=^{VenueBuilding}^{VenueBuilding}{__compressed_pair<md::VenueBuilding *, std::__1::allocator<md::VenueBuilding> >=^{VenueBuilding}}}{Polygon2<double>={vector<gm::Matrix<double, 2, 1>, std::__1::allocator<gm::Matrix<double, 2, 1> > >=^{Matrix<double, 2, 1>}^{Matrix<double, 2, 1>}{__compressed_pair<gm::Matrix<double, 2, 1> *, std::__1::allocator<gm::Matrix<double, 2, 1> > >=^{Matrix<double, 2, 1>}}}}{ConvexHull2<double>={vector<gm::Matrix<double, 2, 1>, std::__1::allocator<gm::Matrix<double, 2, 1> > >=^{Matrix<double, 2, 1>}^{Matrix<double, 2, 1>}{__compressed_pair<gm::Matrix<double, 2, 1> *, std::__1::allocator<gm::Matrix<double, 2, 1> > >=^{Matrix<double, 2, 1>}}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}8B12
r^{shared_ptr<md::VenueFeatureMarker>=^{VenueFeatureMarker}^{__shared_weak_count}}8@0:4
{shared_ptr<md::TrafficDynamicTile>="__ptr_"^{TrafficDynamicTile}"__cntrl_"^{__shared_weak_count}}
@20@0:4r^{VKTileKey=IiiI}8r^{_GEOTileKey=b6b26b26b6b8b8b8b1b7[4C]}12@16
{shared_ptr<md::TrafficDynamicTile>=^{TrafficDynamicTile}^{__shared_weak_count}}8@0:4
^{LabelCustomFeatureProvider=^{LabelCustomFeatureSupport}^{LabelManager}{_retain_ptr<VKCustomFeatureDataSourceObserverThunk *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{_retain_ptr<id<VKCustomFeatureDataSource>, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{map<VKTileKey, md::LabelCustomFeatureProvider::TileInfo, md::LabelCustomFeatureProvider::TileKeyLess, std::__1::allocator<std::__1::pair<const VKTileKey, md::LabelCustomFeatureProvider::TileInfo> > >={__tree<std::__1::__value_type<VKTileKey, md::LabelCustomFeatureProvider::TileInfo>, std::__1::__map_value_compare<VKTileKey, std::__1::__value_type<VKTileKey, md::LabelCustomFeatureProvider::TileInfo>, md::LabelCustomFeatureProvider::TileKeyLess, true>, std::__1::allocator<std::__1::__value_type<VKTileKey, md::LabelCustomFeatureProvider::TileInfo> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<VKTileKey, md::LabelCustomFeatureProvider::TileInfo>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<VKTileKey, std::__1::__value_type<VKTileKey, md::LabelCustomFeatureProvider::TileInfo>, md::LabelCustomFeatureProvider::TileKeyLess, true> >=L}}}{_retain_ptr<id<VKCustomFeatureAnnotation>, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{shared_ptr<md::LabelScene>=^{LabelScene}^{__shared_weak_count}}{map<id<VKCustomFeatureAnnotation>, md::LabelCustomFeatureProvider::FeatureInfo, std::__1::less<id<VKCustomFeatureAnnotation> >, std::__1::allocator<std::__1::pair<const id<VKCustomFeatureAnnotation>, md::LabelCustomFeatureProvider::FeatureInfo> > >={__tree<std::__1::__value_type<id<VKCustomFeatureAnnotation>, md::LabelCustomFeatureProvider::FeatureInfo>, std::__1::__map_value_compare<id<VKCustomFeatureAnnotation>, std::__1::__value_type<id<VKCustomFeatureAnnotation>, md::LabelCustomFeatureProvider::FeatureInfo>, std::__1::less<id<VKCustomFeatureAnnotation> >, true>, std::__1::allocator<std::__1::__value_type<id<VKCustomFeatureAnnotation>, md::LabelCustomFeatureProvider::FeatureInfo> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<id<VKCustomFeatureAnnotation>, md::LabelCustomFeatureProvider::FeatureInfo>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<id<VKCustomFeatureAnnotation>, std::__1::__value_type<id<VKCustomFeatureAnnotation>, md::LabelCustomFeatureProvider::FeatureInfo>, std::__1::less<id<VKCustomFeatureAnnotation> >, true> >=L}}}{unique_ptr<md::LabelClusterProvider, std::__1::default_delete<md::LabelClusterProvider> >={__compressed_pair<md::LabelClusterProvider *, std::__1::default_delete<md::LabelClusterProvider> >=^{LabelClusterProvider}}}BCC}
{_retain_ptr<id<VKCustomFeatureDataSource>, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>="_vptr$_retain_ptr"^^?"_obj"@"<VKCustomFeatureDataSource>""_retain"{_retain_objc=}"_release"{_release_objc=}}
v44@0:4@"<VKCustomFeatureDataSource>"8{?={?=dd}{?=dd}}12
v16@0:4@"<VKCustomFeatureDataSource>"8C12
v44@0:4@8{?={?=dd}{?=dd}}12
@16@0:4@8^{LabelCustomFeatureProvider=^{LabelCustomFeatureSupport}^{LabelManager}{_retain_ptr<VKCustomFeatureDataSourceObserverThunk *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{_retain_ptr<id<VKCustomFeatureDataSource>, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{map<VKTileKey, md::LabelCustomFeatureProvider::TileInfo, md::LabelCustomFeatureProvider::TileKeyLess, std::__1::allocator<std::__1::pair<const VKTileKey, md::LabelCustomFeatureProvider::TileInfo> > >={__tree<std::__1::__value_type<VKTileKey, md::LabelCustomFeatureProvider::TileInfo>, std::__1::__map_value_compare<VKTileKey, std::__1::__value_type<VKTileKey, md::LabelCustomFeatureProvider::TileInfo>, md::LabelCustomFeatureProvider::TileKeyLess, true>, std::__1::allocator<std::__1::__value_type<VKTileKey, md::LabelCustomFeatureProvider::TileInfo> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<VKTileKey, md::LabelCustomFeatureProvider::TileInfo>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<VKTileKey, std::__1::__value_type<VKTileKey, md::LabelCustomFeatureProvider::TileInfo>, md::LabelCustomFeatureProvider::TileKeyLess, true> >=L}}}{_retain_ptr<id<VKCustomFeatureAnnotation>, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{shared_ptr<md::LabelScene>=^{LabelScene}^{__shared_weak_count}}{map<id<VKCustomFeatureAnnotation>, md::LabelCustomFeatureProvider::FeatureInfo, std::__1::less<id<VKCustomFeatureAnnotation> >, std::__1::allocator<std::__1::pair<const id<VKCustomFeatureAnnotation>, md::LabelCustomFeatureProvider::FeatureInfo> > >={__tree<std::__1::__value_type<id<VKCustomFeatureAnnotation>, md::LabelCustomFeatureProvider::FeatureInfo>, std::__1::__map_value_compare<id<VKCustomFeatureAnnotation>, std::__1::__value_type<id<VKCustomFeatureAnnotation>, md::LabelCustomFeatureProvider::FeatureInfo>, std::__1::less<id<VKCustomFeatureAnnotation> >, true>, std::__1::allocator<std::__1::__value_type<id<VKCustomFeatureAnnotation>, md::LabelCustomFeatureProvider::FeatureInfo> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<id<VKCustomFeatureAnnotation>, md::LabelCustomFeatureProvider::FeatureInfo>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<id<VKCustomFeatureAnnotation>, std::__1::__value_type<id<VKCustomFeatureAnnotation>, md::LabelCustomFeatureProvider::FeatureInfo>, std::__1::less<id<VKCustomFeatureAnnotation> >, true> >=L}}}{unique_ptr<md::LabelClusterProvider, std::__1::default_delete<md::LabelClusterProvider> >={__compressed_pair<md::LabelClusterProvider *, std::__1::default_delete<md::LabelClusterProvider> >=^{LabelClusterProvider}}}BCC}12
@20@0:4@8:12@16
@"VKAnnotationTrackingCameraController"
@"VKGestureCameraBehavior"
{vector<VKMapTile *, std::__1::allocator<VKMapTile *> >="__begin_"^@"__end_"^@"__end_cap_"{__compressed_pair<VKMapTile **, std::__1::allocator<VKMapTile *> >="__value_"^@}}
^@8@0:4
@"GEOTileLoader"
{map<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob>, GEOTileKeyComp, std::__1::allocator<std::__1::pair<const _GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> > > >="__tree_"{__tree<std::__1::__value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> >, std::__1::__map_value_compare<_GEOTileKey, std::__1::__value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> >, GEOTileKeyComp, true>, std::__1::allocator<std::__1::__value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> > > >="__begin_node_"^{__tree_end_node<std::__1::__tree_node_base<void *> *>}"__pair1_"{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> >, void *> > >="__value_"{__tree_end_node<std::__1::__tree_node_base<void *> *>="__left_"^{__tree_node_base<void *>}}}"__pair3_"{__compressed_pair<unsigned long, std::__1::__map_value_compare<_GEOTileKey, std::__1::__value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> >, GEOTileKeyComp, true> >="__value_"L}}}
{Mutex="mMutex"^v}
{shared_ptr<altitude::GeoServicesLoadJob>=^{GeoServicesLoadJob}^{__shared_weak_count}}12@0:4r^{_GEOTileKey=b6b26b26b6b8b8b8b1b7[4C]}8
v12@0:4^{shared_ptr<altitude::GeoServicesLoadJob>=^{GeoServicesLoadJob}^{__shared_weak_count}}8
{map<std::__1::basic_string<char>, std::__1::shared_ptr<ggl::Texture2D>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::shared_ptr<ggl::Texture2D> > > >="__tree_"{__tree<std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<ggl::Texture2D> >, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<ggl::Texture2D> >, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<ggl::Texture2D> > > >="__begin_node_"^{__tree_end_node<std::__1::__tree_node_base<void *> *>}"__pair1_"{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<ggl::Texture2D> >, void *> > >="__value_"{__tree_end_node<std::__1::__tree_node_base<void *> *>="__left_"^{__tree_node_base<void *>}}}"__pair3_"{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<ggl::Texture2D> >, std::__1::less<std::__1::basic_string<char> >, true> >="__value_"L}}}
^{Device=^^?{DeviceVersion=II}{DeviceCapabilities=BBIII{DeviceSize=III}}{DeviceAPIProperties=id}ii}
@20@0:4@8@12^{Device=^^?{DeviceVersion=II}{DeviceCapabilities=BBIII{DeviceSize=III}}{DeviceAPIProperties=id}ii}16
{shared_ptr<ggl::Texture2D>=^{Texture2D}^{__shared_weak_count}}20@0:4@8{shared_ptr<ggl::SamplerState>=^{SamplerState}^{__shared_weak_count}}12
{shared_ptr<ggl::Texture2D>=^{Texture2D}^{__shared_weak_count}}24@0:4@8B12{shared_ptr<ggl::SamplerState>=^{SamplerState}^{__shared_weak_count}}16
r^{shared_ptr<ggl::Texture2D>=^{Texture2D}^{__shared_weak_count}}8@0:4
{shared_ptr<ggl::Texture2D>=^{Texture2D}^{__shared_weak_count}}24@0:4@8f12{shared_ptr<ggl::SamplerState>=^{SamplerState}^{__shared_weak_count}}16
{shared_ptr<ggl::Texture2D>=^{Texture2D}^{__shared_weak_count}}28@0:4@8f12B16{shared_ptr<ggl::SamplerState>=^{SamplerState}^{__shared_weak_count}}20
^{VenueLogic=^^?BS{mutex={_opaque_pthread_mutex_t=l[40c]}}{vector<std::__1::shared_ptr<const md::Venue>, std::__1::allocator<std::__1::shared_ptr<const md::Venue> > >=^{shared_ptr<const md::Venue>}^{shared_ptr<const md::Venue>}{__compressed_pair<std::__1::shared_ptr<const md::Venue> *, std::__1::allocator<std::__1::shared_ptr<const md::Venue> > >=^{shared_ptr<const md::Venue>}}}{VenueLogicContext=^^?{unordered_map<unsigned long long, std::__1::shared_ptr<const md::Venue>, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::shared_ptr<const md::Venue> > > >={__hash_table<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<const md::Venue> >, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<const md::Venue> >, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<const md::Venue> >, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<const md::Venue> > > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<const md::Venue> >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<const md::Venue> >, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<const md::Venue> >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<const md::Venue> >, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<const md::Venue> >, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<const md::Venue> >, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<const md::Venue> >, void *> *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<const md::Venue> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<const md::Venue> >, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<const md::Venue> >, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<const md::Venue> >, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<const md::Venue> >, std::__1::hash<unsigned long long>, true> >=L}{__compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<const md::Venue> >, std::__1::equal_to<unsigned long long>, true> >=f}}}{unordered_map<unsigned long long, short, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, short> > >={__hash_table<std::__1::__hash_value_type<unsigned long long, short>, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, short>, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, short>, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, short> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, short>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, short>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, short>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, short>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, short>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, short>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, short>, void *> *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, short>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, short>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, short>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, short>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, short>, std::__1::hash<unsigned long long>, true> >=L}{__compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, short>, std::__1::equal_to<unsigned long long>, true> >=f}}}{unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >={__hash_table<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> > >={__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>=^{__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<unsigned long long> >=L}{__compressed_pair<float, std::__1::equal_to<unsigned long long> >=f}}}{vector<unsigned long long, std::__1::allocator<unsigned long long> >=^Q^Q{__compressed_pair<unsigned long long *, std::__1::allocator<unsigned long long> >=^Q}}^{Venue}ffB}^{Venue}^{VenueBuilding}dQ{unordered_map<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> >, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > > > >={__hash_table<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > > > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, void *> *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, std::__1::hash<unsigned long long>, true> >=L}{__compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, std::__1::equal_to<unsigned long long>, true> >=f}}}^{VenueLogicDelegate}{_retain_ptr<VKTimedAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{_retain_ptr<VKTimedAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}Bf}
@36@0:4@8@12@16@20{shared_ptr<md::TaskContext>=^{TaskContext}^{__shared_weak_count}}24^{VenueLogic=^^?BS{mutex={_opaque_pthread_mutex_t=l[40c]}}{vector<std::__1::shared_ptr<const md::Venue>, std::__1::allocator<std::__1::shared_ptr<const md::Venue> > >=^{shared_ptr<const md::Venue>}^{shared_ptr<const md::Venue>}{__compressed_pair<std::__1::shared_ptr<const md::Venue> *, std::__1::allocator<std::__1::shared_ptr<const md::Venue> > >=^{shared_ptr<const md::Venue>}}}{VenueLogicContext=^^?{unordered_map<unsigned long long, std::__1::shared_ptr<const md::Venue>, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::shared_ptr<const md::Venue> > > >={__hash_table<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<const md::Venue> >, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<const md::Venue> >, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<const md::Venue> >, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<const md::Venue> > > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<const md::Venue> >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<const md::Venue> >, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<const md::Venue> >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<const md::Venue> >, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<const md::Venue> >, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<const md::Venue> >, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<const md::Venue> >, void *> *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<const md::Venue> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<const md::Venue> >, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<const md::Venue> >, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<const md::Venue> >, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<const md::Venue> >, std::__1::hash<unsigned long long>, true> >=L}{__compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<const md::Venue> >, std::__1::equal_to<unsigned long long>, true> >=f}}}{unordered_map<unsigned long long, short, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, short> > >={__hash_table<std::__1::__hash_value_type<unsigned long long, short>, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, short>, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, short>, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, short> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, short>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, short>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, short>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, short>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, short>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, short>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, short>, void *> *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, short>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, short>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, short>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, short>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, short>, std::__1::hash<unsigned long long>, true> >=L}{__compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, short>, std::__1::equal_to<unsigned long long>, true> >=f}}}{unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >={__hash_table<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> > >={__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>=^{__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<unsigned long long> >=L}{__compressed_pair<float, std::__1::equal_to<unsigned long long> >=f}}}{vector<unsigned long long, std::__1::allocator<unsigned long long> >=^Q^Q{__compressed_pair<unsigned long long *, std::__1::allocator<unsigned long long> >=^Q}}^{Venue}ffB}^{Venue}^{VenueBuilding}dQ{unordered_map<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> >, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > > > >={__hash_table<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > > > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, void *> *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, std::__1::hash<unsigned long long>, true> >=L}{__compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, std::__1::equal_to<unsigned long long>, true> >=f}}}^{VenueLogicDelegate}{_retain_ptr<VKTimedAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{_retain_ptr<VKTimedAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}Bf}32
@24@0:4f8@12i16I20
{CGSize=ff}12@0:4@8
^{CGImage=}24@0:4^{CGColor=}8^{CGColor=}12@16f20
{CameraManager="_vptr$CameraManager"^^?"_panBegin"B"_panInProgress"B"_panEnd"B"_panCurrentCursor"{Matrix<int, 2, 1>="_e"[2i]}"_panPreviousCursor"{Matrix<int, 2, 1>="_e"[2i]}"_panStartCursor"{Matrix<int, 2, 1>="_e"[2i]}"_panStartPosition"{Coordinate3D<Radians, double>="latitude"{Unit<RadianUnitDescription, double>="_value"d}"longitude"{Unit<RadianUnitDescription, double>="_value"d}"altitude"{Unit<MeterUnitDescription, double>="_value"d}}"_panDistance"d"_panAtStartPosition"B"_rotateBegin"B"_rotateInProgress"B"_rotateEnd"B"_rotateStartPosition"{Coordinate3D<Radians, double>="latitude"{Unit<RadianUnitDescription, double>="_value"d}"longitude"{Unit<RadianUnitDescription, double>="_value"d}"altitude"{Unit<MeterUnitDescription, double>="_value"d}}"_rotateCurrentCursor"{Matrix<int, 2, 1>="_e"[2i]}"_rotateAngle"d"_tiltBegin"B"_tiltInProgress"B"_tiltEnd"B"_tiltStartPosition"{Coordinate3D<Radians, double>="latitude"{Unit<RadianUnitDescription, double>="_value"d}"longitude"{Unit<RadianUnitDescription, double>="_value"d}"altitude"{Unit<MeterUnitDescription, double>="_value"d}}"_tiltCurrentCursor"{Matrix<int, 2, 1>="_e"[2i]}"_tiltPreviousCursor"{Matrix<int, 2, 1>="_e"[2i]}"_tiltAngle"d"_zoomBegin"B"_zoomInProgress"B"_zoomEnd"B"_zoomStartPosition"{Coordinate3D<Radians, double>="latitude"{Unit<RadianUnitDescription, double>="_value"d}"longitude"{Unit<RadianUnitDescription, double>="_value"d}"altitude"{Unit<MeterUnitDescription, double>="_value"d}}"_zoomCurrentCursor"{Matrix<int, 2, 1>="_e"[2i]}"_zoomFactor"d"_zoomStartDistance"d"_zoomRotateToNorth"B"_useTiltLimit"B"_tiltLimitMode"i"_tiltLimitPushDownEnabled"B"_tiltLimitTransferInProgress"B"_tiltLimitPushDown"B"_startPushDownTilt"d"_tiltLimitTransferFraction"d"_startTiltLimitTilt"d"_startTiltLimitPosition"{Geocentric<double>="_e"[3d]}"_startTiltLimitDirection"{Matrix<double, 3, 1>="_e"[3d]}"_fullZoomTiltLimitFactor"d}
v24@0:4d8B16B20
v36@0:4{CGPoint=ff}8d16d24@?32
v76@0:4{?=dd}8d24B32d36d44d52d60@?68@?72
@?120@0:4{CameraFrame<geo::Radians, double>={Coordinate3D<Radians, double>={Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<MeterUnitDescription, double>=d}}{Unit<MeterUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}}8{CameraFrame<geo::Radians, double>={Coordinate3D<Radians, double>={Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<MeterUnitDescription, double>=d}}{Unit<MeterUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}}64
v16@0:4f8f12
d40@0:4{?=dd}8{?=dd}24
d32@0:4d8d16d24
{optional<md::MeshSet<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh, ggl::BuildingFlatStroke::DefaultVbo> >="_hasValue"B"_value"(ValueUnion="data"[88C]"type"{MeshSet<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh, ggl::BuildingFlatStroke::DefaultVbo>="_vertexAndIndexCounts"{vector<std::__1::pair<unsigned short, unsigned int>, std::__1::allocator<std::__1::pair<unsigned short, unsigned int> > >="__begin_"^{pair<unsigned short, unsigned int>}"__end_"^{pair<unsigned short, unsigned int>}"__end_cap_"{__compressed_pair<std::__1::pair<unsigned short, unsigned int> *, std::__1::allocator<std::__1::pair<unsigned short, unsigned int> > >="__value_"^{pair<unsigned short, unsigned int>}}}"_meshes"{vector<std::__1::shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh> > >="__begin_"^{shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh>}"__end_"^{shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh>}"__end_cap_"{__compressed_pair<std::__1::shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh> *, std::__1::allocator<std::__1::shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh> > >="__value_"^{shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh>}}}"_vertexDataWrite"{DataWrite<ggl::BuildingFlatStroke::DefaultVbo>="_memory"{BufferMemory="_accessor"^{ResourceAccessor}"_user"^{BufferData}"_range"{Range<unsigned long>="_min"L"_max"L}"_access"i"_sync"i"_data"*}}"_indexDataWrite"{DataWrite<unsigned short>="_memory"{BufferMemory="_accessor"^{ResourceAccessor}"_user"^{BufferData}"_range"{Range<unsigned long>="_min"L"_max"L}"_access"i"_sync"i"_data"*}}"_meshIndex"C"_meshVertexOffset"S"_meshIndexOffset"I})}
{vector<std::__1::shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh> > >="__begin_"^{shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh>}"__end_"^{shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh>}"__end_cap_"{__compressed_pair<std::__1::shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh> *, std::__1::allocator<std::__1::shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh> > >="__value_"^{shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh>}}}
{unique_ptr<ggl::MeshVendor<ggl::BuildingFacade::BuildingMesh>, std::__1::default_delete<ggl::MeshVendor<ggl::BuildingFacade::BuildingMesh> > >="__ptr_"{__compressed_pair<ggl::MeshVendor<ggl::BuildingFacade::BuildingMesh> *, std::__1::default_delete<ggl::MeshVendor<ggl::BuildingFacade::BuildingMesh> > >="__value_"^{MeshVendor<ggl::BuildingFacade::BuildingMesh>}}}
{unique_ptr<ggl::MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh>, std::__1::default_delete<ggl::MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh> > >="__ptr_"{__compressed_pair<ggl::MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh> *, std::__1::default_delete<ggl::MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh> > >="__value_"^{MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh>}}}
{unique_ptr<ggl::MeshVendor<ggl::BuildingPointyRoof::BuildingMesh>, std::__1::default_delete<ggl::MeshVendor<ggl::BuildingPointyRoof::BuildingMesh> > >="__ptr_"{__compressed_pair<ggl::MeshVendor<ggl::BuildingPointyRoof::BuildingMesh> *, std::__1::default_delete<ggl::MeshVendor<ggl::BuildingPointyRoof::BuildingMesh> > >="__value_"^{MeshVendor<ggl::BuildingPointyRoof::BuildingMesh>}}}
^{vector<std::__1::shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh> > >=^{shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh>}^{shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh>}{__compressed_pair<std::__1::shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh> *, std::__1::allocator<std::__1::shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh> > >=^{shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh>}}}8@0:4
r^{MeshVendor<ggl::BuildingFacade::BuildingMesh>={vector<ggl::BuildingFacade::BuildingMesh *, std::__1::allocator<ggl::BuildingFacade::BuildingMesh *> >=^^{BuildingMesh}^^{BuildingMesh}{__compressed_pair<ggl::BuildingFacade::BuildingMesh **, std::__1::allocator<ggl::BuildingFacade::BuildingMesh *> >=^^{BuildingMesh}}}^{BuildingMesh}}8@0:4
r^{MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh>={vector<ggl::PrefilteredLine::PrefilteredLineMesh *, std::__1::allocator<ggl::PrefilteredLine::PrefilteredLineMesh *> >=^^{PrefilteredLineMesh}^^{PrefilteredLineMesh}{__compressed_pair<ggl::PrefilteredLine::PrefilteredLineMesh **, std::__1::allocator<ggl::PrefilteredLine::PrefilteredLineMesh *> >=^^{PrefilteredLineMesh}}}^{PrefilteredLineMesh}}8@0:4
r^{MeshVendor<ggl::BuildingPointyRoof::BuildingMesh>={vector<ggl::BuildingPointyRoof::BuildingMesh *, std::__1::allocator<ggl::BuildingPointyRoof::BuildingMesh *> >=^^{BuildingMesh}^^{BuildingMesh}{__compressed_pair<ggl::BuildingPointyRoof::BuildingMesh **, std::__1::allocator<ggl::BuildingPointyRoof::BuildingMesh *> >=^^{BuildingMesh}}}^{BuildingMesh}}8@0:4
^{vector<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::allocator<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > > >=^{shared_ptr<gss::StylesheetQuery<gss::PropertyID> >}^{shared_ptr<gss::StylesheetQuery<gss::PropertyID> >}{__compressed_pair<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > *, std::__1::allocator<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > > >=^{shared_ptr<gss::StylesheetQuery<gss::PropertyID> >}}}16@0:4B8B12
v20@0:4^{?={?={?=@*IIIIIQBQfQ@i}IIiiiII(?={?={?=ff}{?=ff}}{?=ffff})^{?}{?=[2S][2S]}CBCBBCBC{_NSRange=II}BI}IIBB}8C12f16
v40@0:4^{?={?={?=@*IIIIIQBQfQ@i}IIiiiII(?={?={?=ff}{?=ff}}{?=ffff})^{?}{?=[2S][2S]}CBCBBCBC{_NSRange=II}BI}IIBB}8I12I16^{ResourceAccessor=^^?}20@24B28C32f36
v24@0:4^{?={?={?=@*IIIIIQBQfQ@i}IIiiiII(?={?={?=ff}{?=ff}}{?=ffff})^{?}{?=[2S][2S]}CBCBBCBC{_NSRange=II}BI}IIBB}8I12I16@20
B24@0:4^{?={?=@*IIIIIQBQfQ@i}IIiiiII(?={?={?=ff}{?=ff}}{?=ffff})^{?}{?=[2S][2S]}CBCBBCBC{_NSRange=II}BI}8^{?={?={?=@*IIIIIQBQfQ@i}IIiiiII(?={?={?=ff}{?=ff}}{?=ffff})^{?}{?=[2S][2S]}CBCBBCBC{_NSRange=II}BI}IIBB}12C16f20
B24@0:4^{?={?={?=@*IIIIIQBQfQ@i}IIiiiII(?={?={?=ff}{?=ff}}{?=ffff})^{?}{?=[2S][2S]}CBCBBCBC{_NSRange=II}BI}IIBB}8C12f16f20
v12@0:4r^{shared_ptr<gss::StylesheetManager<gss::PropertyID> >=^{StylesheetManager<gss::PropertyID>}^{__shared_weak_count}}8
@"NSObject<OS_xpc_object>"
{shared_ptr<MITManager>="__ptr_"^{MITManager}"__cntrl_"^{__shared_weak_count}}
v12@0:4@"VKMapView"8
v16@0:4@"VKMapView"8@"NSError"12
v16@0:4@"VKMapView"8B12
@"<VKTrackableAnnotationPresentation>"16@0:4@"VKMapView"8@"<VKTrackableAnnotation>"12
v16@0:4@"VKMapView"8I12
v20@0:4@"VKMapView"8I12I16
v16@0:4@"VKMapView"8@"NSString"12
v16@0:4@"VKMapView"8i12
v17@0:4@"VKMapView"8{?=CCCCB}12
v16@0:4@"VKMapView"8@"VKLabelMarker"12
v28@0:4@"VKMapView"8i12i16d20
v20@0:4@"VKMapView"8d12
v20@0:4@"VKMapView"8@"VKVenueFeatureMarker"12@"VKVenueBuildingFeatureMarker"16
v20@0:4@8I12I16
v17@0:4@8{?=CCCCB}12
B12@0:4o^@8
@"VKLabelNavRoad"
^{?={?=@*IIIIIQBQfQ@i}{?=ff}{?=ff}QQQQsC^{?}ffICBBB}
@24@0:4^{?=II^{?}}8{PolylineCoordinate=If}12@20
@28@0:4r^{?=^{?}IIII^{?}^{?}}8B12{PolylineCoordinate=If}16@24
v16@0:4r^{VKLabelNavRouteRoadEdge={PolylineCoordinate=If}{PolylineCoordinate=If}^{?}}8B12
C12@0:4B8
{Matrix<double, 3, 1>=[3d]}12@0:4C8
v20@0:4^{NavContext=^^?^{LabelManager}^{LabelLayoutContext}^{LabelNavLayoutContext}}8B12^{VKLabelNavArtworkCache={unique_ptr<LRUCache<unsigned long, VKRoadSignArtwork *, std::__1::hash<unsigned long> >, std::__1::default_delete<LRUCache<unsigned long, VKRoadSignArtwork *, std::__1::hash<unsigned long> > > >={__compressed_pair<LRUCache<unsigned long, VKRoadSignArtwork *, std::__1::hash<unsigned long> > *, std::__1::default_delete<LRUCache<unsigned long, VKRoadSignArtwork *, std::__1::hash<unsigned long> > > >=^{LRUCache<unsigned long, VKRoadSignArtwork *, std::__1::hash<unsigned long> >}}}{unique_ptr<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> >, std::__1::default_delete<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> > > >={__compressed_pair<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> > *, std::__1::default_delete<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> > > >=^{LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> >}}}{unique_ptr<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> >, std::__1::default_delete<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> > > >={__compressed_pair<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> > *, std::__1::default_delete<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> > > >=^{LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> >}}}^{CGColor}^{CGColor}{VKGuidanceManeuverArrowMetrics={CGSize=ff}fff{CGSize=ff}fffCffffffffffffffffBfffBB}}16
r^{?=II^{?}}8@0:4
v24@0:4@8@12d16
{shared_ptr<md::LabelManager>="__ptr_"^{LabelManager}"__cntrl_"^{__shared_weak_count}}
@36@0:4@8@12@16@20{shared_ptr<md::TaskContext>=^{TaskContext}^{__shared_weak_count}}24r^{shared_ptr<md::LabelManager>=^{LabelManager}^{__shared_weak_count}}32
@"CALayer<GGLLayer>"
{_retain_ptr<VKSharedResources *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>="_vptr$_retain_ptr"^^?"_obj"@"VKSharedResources""_retain"{_retain_objc=}"_release"{_release_objc=}}
{deque<std::__1::function<void ()>, std::__1::allocator<std::__1::function<void ()> > >="__map_"{__split_buffer<std::__1::function<void ()> *, std::__1::allocator<std::__1::function<void ()> *> >="__first_"^^{function<void ()>}"__begin_"^^{function<void ()>}"__end_"^^{function<void ()>}"__end_cap_"{__compressed_pair<std::__1::function<void ()> **, std::__1::allocator<std::__1::function<void ()> *> >="__value_"^^{function<void ()>}}}"__start_"I"__size_"{__compressed_pair<unsigned long, std::__1::allocator<std::__1::function<void ()> > >="__value_"L}}
^{Device=i{shared_ptr<ggl::Device>=^{Device}^{__shared_weak_count}}{unique_ptr<md::SharedDeviceResources, std::__1::default_delete<md::SharedDeviceResources> >={__compressed_pair<md::SharedDeviceResources *, std::__1::default_delete<md::SharedDeviceResources> >=^{SharedDeviceResources}}}}
{unique_ptr<md::DebugConsoleManager, std::__1::default_delete<md::DebugConsoleManager> >="__ptr_"{__compressed_pair<md::DebugConsoleManager *, std::__1::default_delete<md::DebugConsoleManager> >="__value_"^{DebugConsoleManager}}}
v20@0:4^{Texture=^^?^{ResourceManager}^{RenderResource}^^?*iiii}8d12
@28@0:4f8B12r^{shared_ptr<md::TaskContext>=^{TaskContext}^{__shared_weak_count}}16^{Device=i{shared_ptr<ggl::Device>=^{Device}^{__shared_weak_count}}{unique_ptr<md::SharedDeviceResources, std::__1::default_delete<md::SharedDeviceResources> >={__compressed_pair<md::SharedDeviceResources *, std::__1::default_delete<md::SharedDeviceResources> >=^{SharedDeviceResources}}}}20@24
v12@0:4^{Texture=^^?^{ResourceManager}^{RenderResource}^^?*iiii}8
v28@0:4^{Texture=^^?^{ResourceManager}^{RenderResource}^^?*iiii}8d12@?20@?24
v12@0:4^{shared_ptr<ggl::BitmapDataBase>=^{BitmapDataBase}^{__shared_weak_count}}8
^{DebugConsole=^^?{Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}I{unique_ptr<ggl::RenderItem, std::__1::default_delete<ggl::RenderItem> >={__compressed_pair<ggl::RenderItem *, std::__1::default_delete<ggl::RenderItem> >=^{RenderItem}}}{unique_ptr<ggl::DataWrite<ggl::ColoredText::My>, std::__1::default_delete<ggl::DataWrite<ggl::ColoredText::My> > >={__compressed_pair<ggl::DataWrite<ggl::ColoredText::My> *, std::__1::default_delete<ggl::DataWrite<ggl::ColoredText::My> > >=^{DataWrite<ggl::ColoredText::My>}}}I^{Matrix<float, 2, 1>}{Matrix<unsigned char, 4, 1>=[4C]}{Matrix<unsigned char, 4, 1>=[4C]}f^{CommonLibrary}{RenderTargetFormat=[4i]IIi}}12@0:4i8
@"<VKMercatorTerrainHeightProvider>"
{map<md::Anchor *, float, std::__1::less<md::Anchor *>, std::__1::allocator<std::__1::pair<md::Anchor *const, float> > >="__tree_"{__tree<std::__1::__value_type<md::Anchor *, float>, std::__1::__map_value_compare<md::Anchor *, std::__1::__value_type<md::Anchor *, float>, std::__1::less<md::Anchor *>, true>, std::__1::allocator<std::__1::__value_type<md::Anchor *, float> > >="__begin_node_"^{__tree_end_node<std::__1::__tree_node_base<void *> *>}"__pair1_"{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<md::Anchor *, float>, void *> > >="__value_"{__tree_end_node<std::__1::__tree_node_base<void *> *>="__left_"^{__tree_node_base<void *>}}}"__pair3_"{__compressed_pair<unsigned long, std::__1::__map_value_compare<md::Anchor *, std::__1::__value_type<md::Anchor *, float>, std::__1::less<md::Anchor *>, true> >="__value_"L}}}
d12@0:4^{Anchor=^^?{Mercator3<double>=[3d]}{Coordinate2D<Degrees, double>={Unit<DegreeUnitDescription, double>=d}{Unit<DegreeUnitDescription, double>=d}}@}8
v12@0:4^{Anchor=^^?{Mercator3<double>=[3d]}{Coordinate2D<Degrees, double>={Unit<DegreeUnitDescription, double>=d}{Unit<DegreeUnitDescription, double>=d}}@}8
v12@0:4r^{Box<double, 2>={Matrix<double, 2, 1>=[2d]}{Matrix<double, 2, 1>=[2d]}}8
{?="variantType"b1}
{shared_ptr<md::NavLabel>="__ptr_"^{NavLabel}"__cntrl_"^{__shared_weak_count}}
@"<VKLabelNavFeature>"
@20@0:4@8r^{shared_ptr<md::NavLabel>=^{NavLabel}^{__shared_weak_count}}12i16
v12@0:4S8
S8@0:4
r^{shared_ptr<md::NavLabel>=^{NavLabel}^{__shared_weak_count}}8@0:4
{vector<LabelNavJunctionInfo, std::__1::allocator<LabelNavJunctionInfo> >="__begin_"^{LabelNavJunctionInfo}"__end_"^{LabelNavJunctionInfo}"__end_cap_"{__compressed_pair<LabelNavJunctionInfo *, std::__1::allocator<LabelNavJunctionInfo> >="__value_"^{LabelNavJunctionInfo}}}
@12@0:4^{?=II^{?}}8
@16@0:4{Matrix<float, 2, 1>=[2f]}8
v16@0:4r^{Box<double, 2>={Matrix<double, 2, 1>=[2d]}{Matrix<double, 2, 1>=[2d]}}8@12
v20@0:4^{unordered_map<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> > > >={__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> > > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, std::__1::hash<std::__1::basic_string<char> >, true> >=L}{__compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, std::__1::equal_to<std::__1::basic_string<char> >, true> >=f}}}8d12
{unordered_map<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> > > >="__table_"{__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> > > >="__bucket_list_"{unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> *> *> > >="__ptr_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> *> *> > >="__value_"^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> *>}"__value_"{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> *> *> >="__data_"{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> *> *> >="__value_"L}}}}"__p1_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> > >="__value_"{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> *>="__next_"^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> *>}}}"__p2_"{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, std::__1::hash<std::__1::basic_string<char> >, true> >="__value_"L}"__p3_"{__compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, std::__1::equal_to<std::__1::basic_string<char> >, true> >="__value_"f}}}
{vector<RouteSegment, std::__1::allocator<RouteSegment> >="__begin_"^{RouteSegment}"__end_"^{RouteSegment}"__end_cap_"{__compressed_pair<RouteSegment *, std::__1::allocator<RouteSegment> >="__value_"^{RouteSegment}}}
v20@0:4^{NavContext=^^?^{LabelManager}^{LabelLayoutContext}^{LabelNavLayoutContext}}8{PolylineCoordinate=If}12
@20@0:4@8B12B16
v28@0:4r^{VKLabelNavRouteRoadEdge={PolylineCoordinate=If}{PolylineCoordinate=If}^{?}}8B12B16@20@24
B24@0:4@8@12@16B20
@20@0:4^{NavContext=^^?^{LabelManager}^{LabelLayoutContext}^{LabelNavLayoutContext}}8I12B16
B16@0:4@8f12
B20@0:4@8^f12^{NavContext=^^?^{LabelManager}^{LabelLayoutContext}^{LabelNavLayoutContext}}16
v12@0:4r^{vector<gm::Matrix<double, 2, 1>, std::__1::allocator<gm::Matrix<double, 2, 1> > >=^{Matrix<double, 2, 1>}^{Matrix<double, 2, 1>}{__compressed_pair<gm::Matrix<double, 2, 1> *, std::__1::allocator<gm::Matrix<double, 2, 1> > >=^{Matrix<double, 2, 1>}}}8
{vector<md::TransitLine, std::__1::allocator<md::TransitLine> >="__begin_"^{TransitLine}"__end_"^{TransitLine}"__end_cap_"{__compressed_pair<md::TransitLine *, std::__1::allocator<md::TransitLine> >="__value_"^{TransitLine}}}
{vector<md::TransitLink, std::__1::allocator<md::TransitLink> >="__begin_"^{TransitLink}"__end_"^{TransitLink}"__end_cap_"{__compressed_pair<md::TransitLink *, std::__1::allocator<md::TransitLink> >="__value_"^{TransitLink}}}
{list<md::TransitDisplayConnection, std::__1::allocator<md::TransitDisplayConnection> >="__end_"{__list_node_base<md::TransitDisplayConnection, void *>="__prev_"^{__list_node_base<md::TransitDisplayConnection, void *>}"__next_"^{__list_node_base<md::TransitDisplayConnection, void *>}}"__size_alloc_"{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<md::TransitDisplayConnection, void *> > >="__value_"L}}
{unique_ptr<md::TransitJunctionManager, std::__1::default_delete<md::TransitJunctionManager> >="__ptr_"{__compressed_pair<md::TransitJunctionManager *, std::__1::default_delete<md::TransitJunctionManager> >="__value_"^{TransitJunctionManager}}}
{vector<std::__1::shared_ptr<md::TransitNode>, std::__1::allocator<std::__1::shared_ptr<md::TransitNode> > >="__begin_"^{shared_ptr<md::TransitNode>}"__end_"^{shared_ptr<md::TransitNode>}"__end_cap_"{__compressed_pair<std::__1::shared_ptr<md::TransitNode> *, std::__1::allocator<std::__1::shared_ptr<md::TransitNode> > >="__value_"^{shared_ptr<md::TransitNode>}}}
{vector<std::__1::shared_ptr<md::TransitConnectedNode>, std::__1::allocator<std::__1::shared_ptr<md::TransitConnectedNode> > >="__begin_"^{shared_ptr<md::TransitConnectedNode>}"__end_"^{shared_ptr<md::TransitConnectedNode>}"__end_cap_"{__compressed_pair<std::__1::shared_ptr<md::TransitConnectedNode> *, std::__1::allocator<std::__1::shared_ptr<md::TransitConnectedNode> > >="__value_"^{shared_ptr<md::TransitConnectedNode>}}}
{vector<std::__1::shared_ptr<md::TransitParentNode>, std::__1::allocator<std::__1::shared_ptr<md::TransitParentNode> > >="__begin_"^{shared_ptr<md::TransitParentNode>}"__end_"^{shared_ptr<md::TransitParentNode>}"__end_cap_"{__compressed_pair<std::__1::shared_ptr<md::TransitParentNode> *, std::__1::allocator<std::__1::shared_ptr<md::TransitParentNode> > >="__value_"^{shared_ptr<md::TransitParentNode>}}}
{vector<std::__1::shared_ptr<md::TransitOrphanNode>, std::__1::allocator<std::__1::shared_ptr<md::TransitOrphanNode> > >="__begin_"^{shared_ptr<md::TransitOrphanNode>}"__end_"^{shared_ptr<md::TransitOrphanNode>}"__end_cap_"{__compressed_pair<std::__1::shared_ptr<md::TransitOrphanNode> *, std::__1::allocator<std::__1::shared_ptr<md::TransitOrphanNode> > >="__value_"^{shared_ptr<md::TransitOrphanNode>}}}
{unique_ptr<md::Ribbons::RibbonLayer<md::Ribbons::TransitRibbonDescriptor>, std::__1::default_delete<md::Ribbons::RibbonLayer<md::Ribbons::TransitRibbonDescriptor> > >="__ptr_"{__compressed_pair<md::Ribbons::RibbonLayer<md::Ribbons::TransitRibbonDescriptor> *, std::__1::default_delete<md::Ribbons::RibbonLayer<md::Ribbons::TransitRibbonDescriptor> > >="__value_"^{RibbonLayer<md::Ribbons::TransitRibbonDescriptor>}}}
{map<unsigned int, md::Ribbons::RibbonBatch<md::Ribbons::TransitRibbonDescriptor> *, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, md::Ribbons::RibbonBatch<md::Ribbons::TransitRibbonDescriptor> *> > >="__tree_"{__tree<std::__1::__value_type<unsigned int, md::Ribbons::RibbonBatch<md::Ribbons::TransitRibbonDescriptor> *>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, md::Ribbons::RibbonBatch<md::Ribbons::TransitRibbonDescriptor> *>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, md::Ribbons::RibbonBatch<md::Ribbons::TransitRibbonDescriptor> *> > >="__begin_node_"^{__tree_end_node<std::__1::__tree_node_base<void *> *>}"__pair1_"{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, md::Ribbons::RibbonBatch<md::Ribbons::TransitRibbonDescriptor> *>, void *> > >="__value_"{__tree_end_node<std::__1::__tree_node_base<void *> *>="__left_"^{__tree_node_base<void *>}}}"__pair3_"{__compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, md::Ribbons::RibbonBatch<md::Ribbons::TransitRibbonDescriptor> *>, std::__1::less<unsigned int>, true> >="__value_"L}}}
{unique_ptr<ggl::TransitLineRibbon::BasePipelineSetup, std::__1::default_delete<ggl::TransitLineRibbon::BasePipelineSetup> >="__ptr_"{__compressed_pair<ggl::TransitLineRibbon::BasePipelineSetup *, std::__1::default_delete<ggl::TransitLineRibbon::BasePipelineSetup> >="__value_"^{BasePipelineSetup}}}
{unique_ptr<md::StyleTexture<md::TransitLineSegment::StylePixel>, std::__1::default_delete<md::StyleTexture<md::TransitLineSegment::StylePixel> > >="__ptr_"{__compressed_pair<md::StyleTexture<md::TransitLineSegment::StylePixel> *, std::__1::default_delete<md::StyleTexture<md::TransitLineSegment::StylePixel> > >="__value_"^{StyleTexture<md::TransitLineSegment::StylePixel>}}}
{map<PatternedLineKey, PatternedLineSetup, std::__1::less<PatternedLineKey>, std::__1::allocator<std::__1::pair<const PatternedLineKey, PatternedLineSetup> > >="__tree_"{__tree<std::__1::__value_type<PatternedLineKey, PatternedLineSetup>, std::__1::__map_value_compare<PatternedLineKey, std::__1::__value_type<PatternedLineKey, PatternedLineSetup>, std::__1::less<PatternedLineKey>, true>, std::__1::allocator<std::__1::__value_type<PatternedLineKey, PatternedLineSetup> > >="__begin_node_"^{__tree_end_node<std::__1::__tree_node_base<void *> *>}"__pair1_"{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<PatternedLineKey, PatternedLineSetup>, void *> > >="__value_"{__tree_end_node<std::__1::__tree_node_base<void *> *>="__left_"^{__tree_node_base<void *>}}}"__pair3_"{__compressed_pair<unsigned long, std::__1::__map_value_compare<PatternedLineKey, std::__1::__value_type<PatternedLineKey, PatternedLineSetup>, std::__1::less<PatternedLineKey>, true> >="__value_"L}}}
{unique_ptr<md::Ribbons::RibbonLayer<md::TransitDisplayConnectionRibbonDescriptor>, std::__1::default_delete<md::Ribbons::RibbonLayer<md::TransitDisplayConnectionRibbonDescriptor> > >="__ptr_"{__compressed_pair<md::Ribbons::RibbonLayer<md::TransitDisplayConnectionRibbonDescriptor> *, std::__1::default_delete<md::Ribbons::RibbonLayer<md::TransitDisplayConnectionRibbonDescriptor> > >="__value_"^{RibbonLayer<md::TransitDisplayConnectionRibbonDescriptor>}}}
^{TransitNodeFeaturePool=^^?^^?{vector<geo::_retain_ptr<VKTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::allocator<geo::_retain_ptr<VKTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >=^{_retain_ptr<VKTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}^{_retain_ptr<VKTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}{__compressed_pair<geo::_retain_ptr<VKTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> *, std::__1::allocator<geo::_retain_ptr<VKTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >=^{_retain_ptr<VKTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}}}{vector<geo::_retain_ptr<VKTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::allocator<geo::_retain_ptr<VKTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >=^{_retain_ptr<VKTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}^{_retain_ptr<VKTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}{__compressed_pair<geo::_retain_ptr<VKTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> *, std::__1::allocator<geo::_retain_ptr<VKTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >=^{_retain_ptr<VKTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}}}{fast_shared_ptr<md::unsynchronized_weak_interface_ptr<md::TransitNodeFeaturePool> >=^{_fast_shared_ptr_control}}^{LabelExternalObjectsModerator}{unordered_map<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature>, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature> > > >={__hash_table<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature> >, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature> >, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature> >, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature> > > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature> >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature> >, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature> >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature> >, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature> >, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature> >, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature> >, void *> *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature> >, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature> >, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature> >, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature> >, std::__1::hash<unsigned long long>, true> >=L}{__compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature> >, std::__1::equal_to<unsigned long long>, true> >=f}}}{unordered_map<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature>, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature> > > >={__hash_table<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature> >, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature> >, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature> >, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature> > > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature> >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature> >, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature> >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature> >, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature> >, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature> >, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature> >, void *> *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature> >, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature> >, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature> >, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature> >, std::__1::hash<unsigned long long>, true> >=L}{__compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature> >, std::__1::equal_to<unsigned long long>, true> >=f}}}{unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> >={__compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> >=^{RenderState}}}{unique_ptr<md::TransitNodeTextureAtlas, std::__1::default_delete<md::TransitNodeTextureAtlas> >={__compressed_pair<md::TransitNodeTextureAtlas *, std::__1::default_delete<md::TransitNodeTextureAtlas> >=^{TransitNodeTextureAtlas}}}{unique_ptr<md::TransitNodeTextureAtlas, std::__1::default_delete<md::TransitNodeTextureAtlas> >={__compressed_pair<md::TransitNodeTextureAtlas *, std::__1::default_delete<md::TransitNodeTextureAtlas> >=^{TransitNodeTextureAtlas}}}[4{unique_ptr<ggl::RenderItem, std::__1::default_delete<ggl::RenderItem> >={__compressed_pair<ggl::RenderItem *, std::__1::default_delete<ggl::RenderItem> >=^{RenderItem}}}][4{unique_ptr<ggl::TransitNode::BaseMesh, std::__1::default_delete<ggl::TransitNode::BaseMesh> >={__compressed_pair<ggl::TransitNode::BaseMesh *, std::__1::default_delete<ggl::TransitNode::BaseMesh> >=^{BaseMesh}}}]{shared_ptr<ggl::ConstantDataTyped<ggl::TransitNode::Settings> >=^{ConstantDataTyped<ggl::TransitNode::Settings>}^{__shared_weak_count}}{unique_ptr<ggl::TransitNodeColorized::BasePipelineSetup, std::__1::default_delete<ggl::TransitNodeColorized::BasePipelineSetup> >={__compressed_pair<ggl::TransitNodeColorized::BasePipelineSetup *, std::__1::default_delete<ggl::TransitNodeColorized::BasePipelineSetup> >=^{BasePipelineSetup}}}{unique_ptr<ggl::TransitNodeRGB::BasePipelineSetup, std::__1::default_delete<ggl::TransitNodeRGB::BasePipelineSetup> >={__compressed_pair<ggl::TransitNodeRGB::BasePipelineSetup *, std::__1::default_delete<ggl::TransitNodeRGB::BasePipelineSetup> >=^{BasePipelineSetup}}}{shared_ptr<ggl::IndexDataTyped<unsigned short> >=^{IndexDataTyped<unsigned short>}^{__shared_weak_count}}{shared_ptr<ggl::IndexDataTyped<unsigned short> >=^{IndexDataTyped<unsigned short>}^{__shared_weak_count}}f{_retain_ptr<VKSharedResources *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}}
{shared_ptr<md::TransitInterTileMediator>="__ptr_"^{TransitInterTileMediator}"__cntrl_"^{__shared_weak_count}}
[4B]
{unordered_map<unsigned long long, std::__1::unordered_set<md::TransitNode *, std::__1::hash<md::TransitNode *>, std::__1::equal_to<md::TransitNode *>, std::__1::allocator<md::TransitNode *> >, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::unordered_set<md::TransitNode *, std::__1::hash<md::TransitNode *>, std::__1::equal_to<md::TransitNode *>, std::__1::allocator<md::TransitNode *> > > > >="__table_"{__hash_table<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_set<md::TransitNode *, std::__1::hash<md::TransitNode *>, std::__1::equal_to<md::TransitNode *>, std::__1::allocator<md::TransitNode *> > >, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::unordered_set<md::TransitNode *, std::__1::hash<md::TransitNode *>, std::__1::equal_to<md::TransitNode *>, std::__1::allocator<md::TransitNode *> > >, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::unordered_set<md::TransitNode *, std::__1::hash<md::TransitNode *>, std::__1::equal_to<md::TransitNode *>, std::__1::allocator<md::TransitNode *> > >, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_set<md::TransitNode *, std::__1::hash<md::TransitNode *>, std::__1::equal_to<md::TransitNode *>, std::__1::allocator<md::TransitNode *> > > > >="__bucket_list_"{unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_set<md::TransitNode *, std::__1::hash<md::TransitNode *>, std::__1::equal_to<md::TransitNode *>, std::__1::allocator<md::TransitNode *> > >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_set<md::TransitNode *, std::__1::hash<md::TransitNode *>, std::__1::equal_to<md::TransitNode *>, std::__1::allocator<md::TransitNode *> > >, void *> *> *> > >="__ptr_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_set<md::TransitNode *, std::__1::hash<md::TransitNode *>, std::__1::equal_to<md::TransitNode *>, std::__1::allocator<md::TransitNode *> > >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_set<md::TransitNode *, std::__1::hash<md::TransitNode *>, std::__1::equal_to<md::TransitNode *>, std::__1::allocator<md::TransitNode *> > >, void *> *> *> > >="__value_"^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_set<md::TransitNode *, std::__1::hash<md::TransitNode *>, std::__1::equal_to<md::TransitNode *>, std::__1::allocator<md::TransitNode *> > >, void *> *>}"__value_"{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_set<md::TransitNode *, std::__1::hash<md::TransitNode *>, std::__1::equal_to<md::TransitNode *>, std::__1::allocator<md::TransitNode *> > >, void *> *> *> >="__data_"{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_set<md::TransitNode *, std::__1::hash<md::TransitNode *>, std::__1::equal_to<md::TransitNode *>, std::__1::allocator<md::TransitNode *> > >, void *> *> *> >="__value_"L}}}}"__p1_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_set<md::TransitNode *, std::__1::hash<md::TransitNode *>, std::__1::equal_to<md::TransitNode *>, std::__1::allocator<md::TransitNode *> > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_set<md::TransitNode *, std::__1::hash<md::TransitNode *>, std::__1::equal_to<md::TransitNode *>, std::__1::allocator<md::TransitNode *> > >, void *> > >="__value_"{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_set<md::TransitNode *, std::__1::hash<md::TransitNode *>, std::__1::equal_to<md::TransitNode *>, std::__1::allocator<md::TransitNode *> > >, void *> *>="__next_"^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_set<md::TransitNode *, std::__1::hash<md::TransitNode *>, std::__1::equal_to<md::TransitNode *>, std::__1::allocator<md::TransitNode *> > >, void *> *>}}}"__p2_"{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::unordered_set<md::TransitNode *, std::__1::hash<md::TransitNode *>, std::__1::equal_to<md::TransitNode *>, std::__1::allocator<md::TransitNode *> > >, std::__1::hash<unsigned long long>, true> >="__value_"L}"__p3_"{__compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::unordered_set<md::TransitNode *, std::__1::hash<md::TransitNode *>, std::__1::equal_to<md::TransitNode *>, std::__1::allocator<md::TransitNode *> > >, std::__1::equal_to<unsigned long long>, true> >="__value_"f}}}
r^{TransitLineSharedResources={shared_ptr<ggl::TransitLineRibbon::BasePipelineState>=^{BasePipelineState}^{__shared_weak_count}}{shared_ptr<ggl::TransitLineRibbon::PatternedBasePipelineState>=^{PatternedBasePipelineState}^{__shared_weak_count}}{shared_ptr<ggl::SolidRibbon::PipelineState>=^{PipelineState}^{__shared_weak_count}}}
@48@0:4r^{VKTileKey=IiiI}8@12{shared_ptr<gss::StylesheetManager<gss::PropertyID> >=^{StylesheetManager<gss::PropertyID>}^{__shared_weak_count}}16{shared_ptr<md::DataOverrideManager>=^{DataOverrideManager}^{__shared_weak_count}}24@32f36^{Device=^^?{DeviceVersion=II}{DeviceCapabilities=BBIII{DeviceSize=III}}{DeviceAPIProperties=id}ii}40^{LabelExternalObjectsModerator={shared_ptr<md::weak_interface_ptr<md::LabelExternalObjectsModerator> >=^{weak_interface_ptr<md::LabelExternalObjectsModerator>}^{__shared_weak_count}}^{LabelExternalIconRenderer}{vector<std::__1::shared_ptr<md::LabelCreateExternalIconRequest>, std::__1::allocator<std::__1::shared_ptr<md::LabelCreateExternalIconRequest> > >=^{shared_ptr<md::LabelCreateExternalIconRequest>}^{shared_ptr<md::LabelCreateExternalIconRequest>}{__compressed_pair<std::__1::shared_ptr<md::LabelCreateExternalIconRequest> *, std::__1::allocator<std::__1::shared_ptr<md::LabelCreateExternalIconRequest> > >=^{shared_ptr<md::LabelCreateExternalIconRequest>}}}{unordered_set<std::__1::shared_ptr<md::LabelExternalIcon>, std::__1::hash<std::__1::shared_ptr<md::LabelExternalIcon> >, std::__1::equal_to<std::__1::shared_ptr<md::LabelExternalIcon> >, std::__1::allocator<std::__1::shared_ptr<md::LabelExternalIcon> > >={__hash_table<std::__1::shared_ptr<md::LabelExternalIcon>, std::__1::hash<std::__1::shared_ptr<md::LabelExternalIcon> >, std::__1::equal_to<std::__1::shared_ptr<md::LabelExternalIcon> >, std::__1::allocator<std::__1::shared_ptr<md::LabelExternalIcon> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelExternalIcon>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelExternalIcon>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelExternalIcon>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelExternalIcon>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelExternalIcon>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelExternalIcon>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelExternalIcon>, void *> *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelExternalIcon>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::shared_ptr<md::LabelExternalIcon>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelExternalIcon>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelExternalIcon>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<std::__1::shared_ptr<md::LabelExternalIcon> > >=L}{__compressed_pair<float, std::__1::equal_to<std::__1::shared_ptr<md::LabelExternalIcon> > >=f}}}{set<unsigned long long, std::__1::less<unsigned long long>, std::__1::allocator<unsigned long long> >={__tree<unsigned long long, std::__1::less<unsigned long long>, std::__1::allocator<unsigned long long> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<unsigned long long, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<unsigned long long> >=L}}}{set<unsigned long long, std::__1::less<unsigned long long>, std::__1::allocator<unsigned long long> >={__tree<unsigned long long, std::__1::less<unsigned long long>, std::__1::allocator<unsigned long long> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<unsigned long long, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<unsigned long long> >=L}}}{unordered_map<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink>, std::__1::hash<const GEOTransitLink *>, std::__1::equal_to<const GEOTransitLink *>, std::__1::allocator<std::__1::pair<const GEOTransitLink *const, std::__1::weak_ptr<md::LabelExternalTransitLink> > > >={__hash_table<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink> >, std::__1::__unordered_map_hasher<const GEOTransitLink *, std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink> >, std::__1::hash<const GEOTransitLink *>, true>, std::__1::__unordered_map_equal<const GEOTransitLink *, std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink> >, std::__1::equal_to<const GEOTransitLink *>, true>, std::__1::allocator<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink> > > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink> >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink> >, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink> >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink> >, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink> >, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink> >, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink> >, void *> *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink> >, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink> >, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink> >, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<const GEOTransitLink *, std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink> >, std::__1::hash<const GEOTransitLink *>, true> >=L}{__compressed_pair<float, std::__1::__unordered_map_equal<const GEOTransitLink *, std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink> >, std::__1::equal_to<const GEOTransitLink *>, true> >=f}}}{unordered_map<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode>, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode> > > >={__hash_table<std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode> >, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode> >, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode> >, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode> > > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode> >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode> >, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode> >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode> >, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode> >, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode> >, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode> >, void *> *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode> >, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode> >, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode> >, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode> >, std::__1::hash<unsigned long long>, true> >=L}{__compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode> >, std::__1::equal_to<unsigned long long>, true> >=f}}}{mutex={_opaque_pthread_mutex_t=l[40c]}}{mutex={_opaque_pthread_mutex_t=l[40c]}}BB}44
v12@0:4r^{shared_ptr<md::TransitInterTileMediator>=^{TransitInterTileMediator}^{__shared_weak_count}}8
v12@0:4^{TransitNodeFeaturePool=^^?^^?{vector<geo::_retain_ptr<VKTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::allocator<geo::_retain_ptr<VKTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >=^{_retain_ptr<VKTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}^{_retain_ptr<VKTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}{__compressed_pair<geo::_retain_ptr<VKTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> *, std::__1::allocator<geo::_retain_ptr<VKTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >=^{_retain_ptr<VKTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}}}{vector<geo::_retain_ptr<VKTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::allocator<geo::_retain_ptr<VKTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >=^{_retain_ptr<VKTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}^{_retain_ptr<VKTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}{__compressed_pair<geo::_retain_ptr<VKTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> *, std::__1::allocator<geo::_retain_ptr<VKTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >=^{_retain_ptr<VKTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}}}{fast_shared_ptr<md::unsynchronized_weak_interface_ptr<md::TransitNodeFeaturePool> >=^{_fast_shared_ptr_control}}^{LabelExternalObjectsModerator}{unordered_map<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature>, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature> > > >={__hash_table<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature> >, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature> >, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature> >, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature> > > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature> >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature> >, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature> >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature> >, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature> >, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature> >, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature> >, void *> *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature> >, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature> >, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature> >, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature> >, std::__1::hash<unsigned long long>, true> >=L}{__compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature> >, std::__1::equal_to<unsigned long long>, true> >=f}}}{unordered_map<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature>, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature> > > >={__hash_table<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature> >, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature> >, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature> >, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature> > > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature> >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature> >, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature> >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature> >, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature> >, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature> >, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature> >, void *> *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature> >, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature> >, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature> >, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature> >, std::__1::hash<unsigned long long>, true> >=L}{__compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature> >, std::__1::equal_to<unsigned long long>, true> >=f}}}{unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> >={__compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> >=^{RenderState}}}{unique_ptr<md::TransitNodeTextureAtlas, std::__1::default_delete<md::TransitNodeTextureAtlas> >={__compressed_pair<md::TransitNodeTextureAtlas *, std::__1::default_delete<md::TransitNodeTextureAtlas> >=^{TransitNodeTextureAtlas}}}{unique_ptr<md::TransitNodeTextureAtlas, std::__1::default_delete<md::TransitNodeTextureAtlas> >={__compressed_pair<md::TransitNodeTextureAtlas *, std::__1::default_delete<md::TransitNodeTextureAtlas> >=^{TransitNodeTextureAtlas}}}[4{unique_ptr<ggl::RenderItem, std::__1::default_delete<ggl::RenderItem> >={__compressed_pair<ggl::RenderItem *, std::__1::default_delete<ggl::RenderItem> >=^{RenderItem}}}][4{unique_ptr<ggl::TransitNode::BaseMesh, std::__1::default_delete<ggl::TransitNode::BaseMesh> >={__compressed_pair<ggl::TransitNode::BaseMesh *, std::__1::default_delete<ggl::TransitNode::BaseMesh> >=^{BaseMesh}}}]{shared_ptr<ggl::ConstantDataTyped<ggl::TransitNode::Settings> >=^{ConstantDataTyped<ggl::TransitNode::Settings>}^{__shared_weak_count}}{unique_ptr<ggl::TransitNodeColorized::BasePipelineSetup, std::__1::default_delete<ggl::TransitNodeColorized::BasePipelineSetup> >={__compressed_pair<ggl::TransitNodeColorized::BasePipelineSetup *, std::__1::default_delete<ggl::TransitNodeColorized::BasePipelineSetup> >=^{BasePipelineSetup}}}{unique_ptr<ggl::TransitNodeRGB::BasePipelineSetup, std::__1::default_delete<ggl::TransitNodeRGB::BasePipelineSetup> >={__compressed_pair<ggl::TransitNodeRGB::BasePipelineSetup *, std::__1::default_delete<ggl::TransitNodeRGB::BasePipelineSetup> >=^{BasePipelineSetup}}}{shared_ptr<ggl::IndexDataTyped<unsigned short> >=^{IndexDataTyped<unsigned short>}^{__shared_weak_count}}{shared_ptr<ggl::IndexDataTyped<unsigned short> >=^{IndexDataTyped<unsigned short>}^{__shared_weak_count}}f{_retain_ptr<VKSharedResources *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}}8
B12@0:4r^{unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >={__hash_table<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> > >={__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>=^{__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<unsigned long long> >=L}{__compressed_pair<float, std::__1::equal_to<unsigned long long> >=f}}}8
f12@0:4r^{unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >={__hash_table<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> > >={__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>=^{__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<unsigned long long> >=L}{__compressed_pair<float, std::__1::equal_to<unsigned long long> >=f}}}8
v16@0:4^{Device=^^?{DeviceVersion=II}{DeviceCapabilities=BBIII{DeviceSize=III}}{DeviceAPIProperties=id}ii}8r^{TransitLineSharedResources={shared_ptr<ggl::TransitLineRibbon::BasePipelineState>=^{BasePipelineState}^{__shared_weak_count}}{shared_ptr<ggl::TransitLineRibbon::PatternedBasePipelineState>=^{PatternedBasePipelineState}^{__shared_weak_count}}{shared_ptr<ggl::SolidRibbon::PipelineState>=^{PipelineState}^{__shared_weak_count}}}12
v12@0:4r^{TransitLineSharedResources={shared_ptr<ggl::TransitLineRibbon::BasePipelineState>=^{BasePipelineState}^{__shared_weak_count}}{shared_ptr<ggl::TransitLineRibbon::PatternedBasePipelineState>=^{PatternedBasePipelineState}^{__shared_weak_count}}{shared_ptr<ggl::SolidRibbon::PipelineState>=^{PipelineState}^{__shared_weak_count}}}8
v12@0:4^{Loader={unique_ptr<ggl::LoaderImpl, std::__1::default_delete<ggl::LoaderImpl> >={__compressed_pair<ggl::LoaderImpl *, std::__1::default_delete<ggl::LoaderImpl> >=^{LoaderImpl}}}}8
v16@0:4^{PatternedLineSetup={shared_ptr<ggl::TransitLineRibbon::PatternedBasePipelineSetup>=^{PatternedBasePipelineSetup}^{__shared_weak_count}}{shared_ptr<md::DashTexture>=^{DashTexture}^{__shared_weak_count}}}8r^{TransitLineSharedResources={shared_ptr<ggl::TransitLineRibbon::BasePipelineState>=^{BasePipelineState}^{__shared_weak_count}}{shared_ptr<ggl::TransitLineRibbon::PatternedBasePipelineState>=^{PatternedBasePipelineState}^{__shared_weak_count}}{shared_ptr<ggl::SolidRibbon::PipelineState>=^{PipelineState}^{__shared_weak_count}}}12
v16@0:4^{Loader={unique_ptr<ggl::LoaderImpl, std::__1::default_delete<ggl::LoaderImpl> >={__compressed_pair<ggl::LoaderImpl *, std::__1::default_delete<ggl::LoaderImpl> >=^{LoaderImpl}}}}8r^{TransitLineSharedResources={shared_ptr<ggl::TransitLineRibbon::BasePipelineState>=^{BasePipelineState}^{__shared_weak_count}}{shared_ptr<ggl::TransitLineRibbon::PatternedBasePipelineState>=^{PatternedBasePipelineState}^{__shared_weak_count}}{shared_ptr<ggl::SolidRibbon::PipelineState>=^{PipelineState}^{__shared_weak_count}}}12
B12@0:4f8
v24@0:4^{LayoutContext=@{shared_ptr<md::ViewTransform>=^{ViewTransform}^{__shared_weak_count}}{shared_ptr<md::AnchorContext>=^{AnchorContext}^{__shared_weak_count}}@@{shared_ptr<gss::StylesheetManager<gss::PropertyID> >=^{StylesheetManager<gss::PropertyID>}^{__shared_weak_count}}{shared_ptr<gss::StylesheetManager<gss::ScenePropertyID> >=^{StylesheetManager<gss::ScenePropertyID>}^{__shared_weak_count}}{VKEdgeInsets=ffff}{VKEdgeInsets=ffff}C{shared_ptr<ggl::PolygonBase::MeshMesh>=^{MeshMesh}^{__shared_weak_count}}{shared_ptr<ggl::PolygonBase::MeshMesh>=^{MeshMesh}^{__shared_weak_count}}{shared_ptr<ggl::TextureMesh::MeshMesh>=^{MeshMesh}^{__shared_weak_count}}{StencilManager=CCC{ClearItem=C{Matrix<float, 4, 1>=[4f]}BfCI}}{shared_ptr<ggl::Device>=^{Device}^{__shared_weak_count}}{Loader={unique_ptr<ggl::LoaderImpl, std::__1::default_delete<ggl::LoaderImpl> >={__compressed_pair<ggl::LoaderImpl *, std::__1::default_delete<ggl::LoaderImpl> >=^{LoaderImpl}}}}ddBBBBB{Coordinate3D<Radians, double>={Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<MeterUnitDescription, double>=d}}fffi^{View}^{View}^{Viewport}^{ARContext}{array<std::__1::unique_ptr<md::LogicContext, std::__1::default_delete<md::LogicContext> >, 4>=[4{unique_ptr<md::LogicContext, std::__1::default_delete<md::LogicContext> >={__compressed_pair<md::LogicContext *, std::__1::default_delete<md::LogicContext> >=^{LogicContext}}}]}}8C12B16^{DashTextureCache={unordered_map<md::DashTextureCache::Key, std::__1::shared_ptr<md::DashTexture>, md::DashTextureCache::KeyHasher, std::__1::equal_to<md::DashTextureCache::Key>, std::__1::allocator<std::__1::pair<const md::DashTextureCache::Key, std::__1::shared_ptr<md::DashTexture> > > >={__hash_table<std::__1::__hash_value_type<md::DashTextureCache::Key, std::__1::shared_ptr<md::DashTexture> >, std::__1::__unordered_map_hasher<md::DashTextureCache::Key, std::__1::__hash_value_type<md::DashTextureCache::Key, std::__1::shared_ptr<md::DashTexture> >, md::DashTextureCache::KeyHasher, true>, std::__1::__unordered_map_equal<md::DashTextureCache::Key, std::__1::__hash_value_type<md::DashTextureCache::Key, std::__1::shared_ptr<md::DashTexture> >, std::__1::equal_to<md::DashTextureCache::Key>, true>, std::__1::allocator<std::__1::__hash_value_type<md::DashTextureCache::Key, std::__1::shared_ptr<md::DashTexture> > > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::DashTextureCache::Key, std::__1::shared_ptr<md::DashTexture> >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::DashTextureCache::Key, std::__1::shared_ptr<md::DashTexture> >, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::DashTextureCache::Key, std::__1::shared_ptr<md::DashTexture> >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::DashTextureCache::Key, std::__1::shared_ptr<md::DashTexture> >, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::DashTextureCache::Key, std::__1::shared_ptr<md::DashTexture> >, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::DashTextureCache::Key, std::__1::shared_ptr<md::DashTexture> >, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::DashTextureCache::Key, std::__1::shared_ptr<md::DashTexture> >, void *> *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::DashTextureCache::Key, std::__1::shared_ptr<md::DashTexture> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::DashTextureCache::Key, std::__1::shared_ptr<md::DashTexture> >, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::DashTextureCache::Key, std::__1::shared_ptr<md::DashTexture> >, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::DashTextureCache::Key, std::__1::shared_ptr<md::DashTexture> >, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<md::DashTextureCache::Key, std::__1::__hash_value_type<md::DashTextureCache::Key, std::__1::shared_ptr<md::DashTexture> >, md::DashTextureCache::KeyHasher, true> >=L}{__compressed_pair<float, std::__1::__unordered_map_equal<md::DashTextureCache::Key, std::__1::__hash_value_type<md::DashTextureCache::Key, std::__1::shared_ptr<md::DashTexture> >, std::__1::equal_to<md::DashTextureCache::Key>, true> >=f}}}}20
v16@0:4r^{unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >={__hash_table<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> > >={__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>=^{__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<unsigned long long> >=L}{__compressed_pair<float, std::__1::equal_to<unsigned long long> >=f}}}8^{unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >={__hash_table<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> > >={__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>=^{__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<unsigned long long> >=L}{__compressed_pair<float, std::__1::equal_to<unsigned long long> >=f}}}12
v12@0:4r^{unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >={__hash_table<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> > >={__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>=^{__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<unsigned long long> >=L}{__compressed_pair<float, std::__1::equal_to<unsigned long long> >=f}}}8
^{BasePipelineSetup=^^?^{PipelineDataCReflection}{shared_ptr<ggl::PipelineState>=^{PipelineState}^{__shared_weak_count}}{vector<ggl::ConstantDataElement, std::__1::allocator<ggl::ConstantDataElement> >=^{ConstantDataElement}^{ConstantDataElement}{__compressed_pair<ggl::ConstantDataElement *, std::__1::allocator<ggl::ConstantDataElement> >=^{ConstantDataElement}}}{vector<ggl::Texture *, std::__1::allocator<ggl::Texture *> >=^^{Texture}^^{Texture}{__compressed_pair<ggl::Texture **, std::__1::allocator<ggl::Texture *> >=^^{Texture}}}^{Mesh}}8@0:4
^{RibbonLayer<md::Ribbons::TransitRibbonDescriptor>=^^?{vector<md::Ribbons::RibbonBatch<md::Ribbons::TransitRibbonDescriptor> *, std::__1::allocator<md::Ribbons::RibbonBatch<md::Ribbons::TransitRibbonDescriptor> *> >=^^{RibbonBatch<md::Ribbons::TransitRibbonDescriptor>}^^{RibbonBatch<md::Ribbons::TransitRibbonDescriptor>}{__compressed_pair<md::Ribbons::RibbonBatch<md::Ribbons::TransitRibbonDescriptor> **, std::__1::allocator<md::Ribbons::RibbonBatch<md::Ribbons::TransitRibbonDescriptor> *> >=^^{RibbonBatch<md::Ribbons::TransitRibbonDescriptor>}}}{vector<ggl::TransitLineRibbon::BaseMesh *, std::__1::allocator<ggl::TransitLineRibbon::BaseMesh *> >=^^{BaseMesh}^^{BaseMesh}{__compressed_pair<ggl::TransitLineRibbon::BaseMesh **, std::__1::allocator<ggl::TransitLineRibbon::BaseMesh *> >=^^{BaseMesh}}}[2^{RenderState}]}8@0:4
^{RibbonLayer<md::TransitDisplayConnectionRibbonDescriptor>=^^?{vector<md::Ribbons::RibbonBatch<md::TransitDisplayConnectionRibbonDescriptor> *, std::__1::allocator<md::Ribbons::RibbonBatch<md::TransitDisplayConnectionRibbonDescriptor> *> >=^^{RibbonBatch<md::TransitDisplayConnectionRibbonDescriptor>}^^{RibbonBatch<md::TransitDisplayConnectionRibbonDescriptor>}{__compressed_pair<md::Ribbons::RibbonBatch<md::TransitDisplayConnectionRibbonDescriptor> **, std::__1::allocator<md::Ribbons::RibbonBatch<md::TransitDisplayConnectionRibbonDescriptor> *> >=^^{RibbonBatch<md::TransitDisplayConnectionRibbonDescriptor>}}}{vector<ggl::Ribbon::BaseMesh *, std::__1::allocator<ggl::Ribbon::BaseMesh *> >=^^{BaseMesh}^^{BaseMesh}{__compressed_pair<ggl::Ribbon::BaseMesh **, std::__1::allocator<ggl::Ribbon::BaseMesh *> >=^^{BaseMesh}}}[2^{RenderState}]}8@0:4
v16@0:4r^{Box<double, 2>={Matrix<double, 2, 1>=[2d]}{Matrix<double, 2, 1>=[2d]}}8^{unordered_set<TransitLineWithLink, TransitLineWithLinkHash, std::__1::equal_to<TransitLineWithLink>, std::__1::allocator<TransitLineWithLink> >={__hash_table<TransitLineWithLink, TransitLineWithLinkHash, std::__1::equal_to<TransitLineWithLink>, std::__1::allocator<TransitLineWithLink> >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<TransitLineWithLink, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TransitLineWithLink, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<TransitLineWithLink, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TransitLineWithLink, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<TransitLineWithLink, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TransitLineWithLink, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TransitLineWithLink, void *> *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<TransitLineWithLink, void *> *>, std::__1::allocator<std::__1::__hash_node<TransitLineWithLink, void *> > >={__hash_node_base<std::__1::__hash_node<TransitLineWithLink, void *> *>=^{__hash_node_base<std::__1::__hash_node<TransitLineWithLink, void *> *>}}}{__compressed_pair<unsigned long, TransitLineWithLinkHash>=L}{__compressed_pair<float, std::__1::equal_to<TransitLineWithLink> >=f}}}12
v16@0:4r^{Matrix<double, 3, 1>=[3d]}8^{vector<std::__1::pair<TransitLineWithLink, float>, std::__1::allocator<std::__1::pair<TransitLineWithLink, float> > >=^{pair<TransitLineWithLink, float>}^{pair<TransitLineWithLink, float>}{__compressed_pair<std::__1::pair<TransitLineWithLink, float> *, std::__1::allocator<std::__1::pair<TransitLineWithLink, float> > >=^{pair<TransitLineWithLink, float>}}}12
{shared_ptr<md::TransitItemMarker>=^{TransitItemMarker}^{__shared_weak_count}}28@0:4{Matrix<float, 2, 1>=[2f]}8f16^f20r^{Matrix<double, 4, 4>=[16d]}24
r^{vector<md::TransitLine, std::__1::allocator<md::TransitLine> >=^{TransitLine}^{TransitLine}{__compressed_pair<md::TransitLine *, std::__1::allocator<md::TransitLine> >=^{TransitLine}}}8@0:4
v16@0:4^{DebugConsole=^^?{Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}I{unique_ptr<ggl::RenderItem, std::__1::default_delete<ggl::RenderItem> >={__compressed_pair<ggl::RenderItem *, std::__1::default_delete<ggl::RenderItem> >=^{RenderItem}}}{unique_ptr<ggl::DataWrite<ggl::ColoredText::My>, std::__1::default_delete<ggl::DataWrite<ggl::ColoredText::My> > >={__compressed_pair<ggl::DataWrite<ggl::ColoredText::My> *, std::__1::default_delete<ggl::DataWrite<ggl::ColoredText::My> > >=^{DataWrite<ggl::ColoredText::My>}}}I^{Matrix<float, 2, 1>}{Matrix<unsigned char, 4, 1>=[4C]}{Matrix<unsigned char, 4, 1>=[4C]}f^{CommonLibrary}{RenderTargetFormat=[4i]IIi}}8^{HighlightHelper=@^{Matrix<double, 4, 4>}}12
^{vector<std::__1::shared_ptr<md::TransitNode>, std::__1::allocator<std::__1::shared_ptr<md::TransitNode> > >=^{shared_ptr<md::TransitNode>}^{shared_ptr<md::TransitNode>}{__compressed_pair<std::__1::shared_ptr<md::TransitNode> *, std::__1::allocator<std::__1::shared_ptr<md::TransitNode> > >=^{shared_ptr<md::TransitNode>}}}8@0:4
^{vector<md::TransitLink, std::__1::allocator<md::TransitLink> >=^{TransitLink}^{TransitLink}{__compressed_pair<md::TransitLink *, std::__1::allocator<md::TransitLink> >=^{TransitLink}}}8@0:4
^{list<md::TransitDisplayConnection, std::__1::allocator<md::TransitDisplayConnection> >={__list_node_base<md::TransitDisplayConnection, void *>=^{__list_node_base<md::TransitDisplayConnection, void *>}^{__list_node_base<md::TransitDisplayConnection, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<md::TransitDisplayConnection, void *> > >=L}}8@0:4
{vector<std::__1::shared_ptr<ggl::Texture2D>, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D> > >="__begin_"^{shared_ptr<ggl::Texture2D>}"__end_"^{shared_ptr<ggl::Texture2D>}"__end_cap_"{__compressed_pair<std::__1::shared_ptr<ggl::Texture2D> *, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D> > >="__value_"^{shared_ptr<ggl::Texture2D>}}}
[3@"NSMutableArray"]
@"VK3DObjectSubTile"
{unique_ptr<ggl::Texture2D, std::__1::default_delete<ggl::Texture2D> >="__ptr_"{__compressed_pair<ggl::Texture2D *, std::__1::default_delete<ggl::Texture2D> >="__value_"^{Texture2D}}}
{CullingGridWithHeight="_heights"[16f]}
{FogInfo="_fogConstantData"{shared_ptr<ggl::ConstantDataTyped<ggl::Fog::Skyfog> >="__ptr_"^{ConstantDataTyped<ggl::Fog::Skyfog>}"__cntrl_"^{__shared_weak_count}}}
{shared_ptr<ggl::ConstantDataTyped<ggl::Tile::View> >=^{ConstantDataTyped<ggl::Tile::View>}^{__shared_weak_count}}8@0:4
^{FogInfo={shared_ptr<ggl::ConstantDataTyped<ggl::Fog::Skyfog> >=^{ConstantDataTyped<ggl::Fog::Skyfog>}^{__shared_weak_count}}}8@0:4
v12@0:4^{?={?={?=@*IIIIIQBQfQ@i}IIiiiII(?={?={?=ff}{?=ff}}{?=ffff})^{?}{?=[2S][2S]}CBCBBCBC{_NSRange=II}BI}IIBB}8
v20@0:4@8^{Device=^^?{DeviceVersion=II}{DeviceCapabilities=BBIII{DeviceSize=III}}{DeviceAPIProperties=id}ii}12B16
r^{vector<std::__1::shared_ptr<ggl::Texture2D>, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D> > >=^{shared_ptr<ggl::Texture2D>}^{shared_ptr<ggl::Texture2D>}{__compressed_pair<std::__1::shared_ptr<ggl::Texture2D> *, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D> > >=^{shared_ptr<ggl::Texture2D>}}}8@0:4
v16@0:4^{CGContext=}8*12
v12@0:4*8
B20@0:4r^{Matrix<float, 2, 1>=[2f]}8^f12^Q16
{CullingGridWithHeight=[16f]}8@0:4
{optional<md::MeshSet<ggl::VenueWall::MeshMesh, ggl::VenueWall::DefaultVbo> >="_hasValue"B"_value"(ValueUnion="data"[88C]"type"{MeshSet<ggl::VenueWall::MeshMesh, ggl::VenueWall::DefaultVbo>="_vertexAndIndexCounts"{vector<std::__1::pair<unsigned short, unsigned int>, std::__1::allocator<std::__1::pair<unsigned short, unsigned int> > >="__begin_"^{pair<unsigned short, unsigned int>}"__end_"^{pair<unsigned short, unsigned int>}"__end_cap_"{__compressed_pair<std::__1::pair<unsigned short, unsigned int> *, std::__1::allocator<std::__1::pair<unsigned short, unsigned int> > >="__value_"^{pair<unsigned short, unsigned int>}}}"_meshes"{vector<std::__1::shared_ptr<ggl::VenueWall::MeshMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::VenueWall::MeshMesh> > >="__begin_"^{shared_ptr<ggl::VenueWall::MeshMesh>}"__end_"^{shared_ptr<ggl::VenueWall::MeshMesh>}"__end_cap_"{__compressed_pair<std::__1::shared_ptr<ggl::VenueWall::MeshMesh> *, std::__1::allocator<std::__1::shared_ptr<ggl::VenueWall::MeshMesh> > >="__value_"^{shared_ptr<ggl::VenueWall::MeshMesh>}}}"_vertexDataWrite"{DataWrite<ggl::VenueWall::DefaultVbo>="_memory"{BufferMemory="_accessor"^{ResourceAccessor}"_user"^{BufferData}"_range"{Range<unsigned long>="_min"L"_max"L}"_access"i"_sync"i"_data"*}}"_indexDataWrite"{DataWrite<unsigned short>="_memory"{BufferMemory="_accessor"^{ResourceAccessor}"_user"^{BufferData}"_range"{Range<unsigned long>="_min"L"_max"L}"_access"i"_sync"i"_data"*}}"_meshIndex"C"_meshVertexOffset"S"_meshIndexOffset"I})}
{optional<md::MeshSet<ggl::VenueWall::EndCapMesh, ggl::VenueWall::EndCapVbo> >="_hasValue"B"_value"(ValueUnion="data"[88C]"type"{MeshSet<ggl::VenueWall::EndCapMesh, ggl::VenueWall::EndCapVbo>="_vertexAndIndexCounts"{vector<std::__1::pair<unsigned short, unsigned int>, std::__1::allocator<std::__1::pair<unsigned short, unsigned int> > >="__begin_"^{pair<unsigned short, unsigned int>}"__end_"^{pair<unsigned short, unsigned int>}"__end_cap_"{__compressed_pair<std::__1::pair<unsigned short, unsigned int> *, std::__1::allocator<std::__1::pair<unsigned short, unsigned int> > >="__value_"^{pair<unsigned short, unsigned int>}}}"_meshes"{vector<std::__1::shared_ptr<ggl::VenueWall::EndCapMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::VenueWall::EndCapMesh> > >="__begin_"^{shared_ptr<ggl::VenueWall::EndCapMesh>}"__end_"^{shared_ptr<ggl::VenueWall::EndCapMesh>}"__end_cap_"{__compressed_pair<std::__1::shared_ptr<ggl::VenueWall::EndCapMesh> *, std::__1::allocator<std::__1::shared_ptr<ggl::VenueWall::EndCapMesh> > >="__value_"^{shared_ptr<ggl::VenueWall::EndCapMesh>}}}"_vertexDataWrite"{DataWrite<ggl::VenueWall::EndCapVbo>="_memory"{BufferMemory="_accessor"^{ResourceAccessor}"_user"^{BufferData}"_range"{Range<unsigned long>="_min"L"_max"L}"_access"i"_sync"i"_data"*}}"_indexDataWrite"{DataWrite<unsigned short>="_memory"{BufferMemory="_accessor"^{ResourceAccessor}"_user"^{BufferData}"_range"{Range<unsigned long>="_min"L"_max"L}"_access"i"_sync"i"_data"*}}"_meshIndex"C"_meshVertexOffset"S"_meshIndexOffset"I})}
{optional<md::MeshSet<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh, ggl::Venue3DStroke::HorizontalDefaultVbo> >="_hasValue"B"_value"(ValueUnion="data"[88C]"type"{MeshSet<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh, ggl::Venue3DStroke::HorizontalDefaultVbo>="_vertexAndIndexCounts"{vector<std::__1::pair<unsigned short, unsigned int>, std::__1::allocator<std::__1::pair<unsigned short, unsigned int> > >="__begin_"^{pair<unsigned short, unsigned int>}"__end_"^{pair<unsigned short, unsigned int>}"__end_cap_"{__compressed_pair<std::__1::pair<unsigned short, unsigned int> *, std::__1::allocator<std::__1::pair<unsigned short, unsigned int> > >="__value_"^{pair<unsigned short, unsigned int>}}}"_meshes"{vector<std::__1::shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh> > >="__begin_"^{shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh>}"__end_"^{shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh>}"__end_cap_"{__compressed_pair<std::__1::shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh> *, std::__1::allocator<std::__1::shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh> > >="__value_"^{shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh>}}}"_vertexDataWrite"{DataWrite<ggl::Venue3DStroke::HorizontalDefaultVbo>="_memory"{BufferMemory="_accessor"^{ResourceAccessor}"_user"^{BufferData}"_range"{Range<unsigned long>="_min"L"_max"L}"_access"i"_sync"i"_data"*}}"_indexDataWrite"{DataWrite<unsigned short>="_memory"{BufferMemory="_accessor"^{ResourceAccessor}"_user"^{BufferData}"_range"{Range<unsigned long>="_min"L"_max"L}"_access"i"_sync"i"_data"*}}"_meshIndex"C"_meshVertexOffset"S"_meshIndexOffset"I})}
{optional<md::MeshSet<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh, ggl::Venue3DStroke::VerticalDefaultVbo> >="_hasValue"B"_value"(ValueUnion="data"[88C]"type"{MeshSet<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh, ggl::Venue3DStroke::VerticalDefaultVbo>="_vertexAndIndexCounts"{vector<std::__1::pair<unsigned short, unsigned int>, std::__1::allocator<std::__1::pair<unsigned short, unsigned int> > >="__begin_"^{pair<unsigned short, unsigned int>}"__end_"^{pair<unsigned short, unsigned int>}"__end_cap_"{__compressed_pair<std::__1::pair<unsigned short, unsigned int> *, std::__1::allocator<std::__1::pair<unsigned short, unsigned int> > >="__value_"^{pair<unsigned short, unsigned int>}}}"_meshes"{vector<std::__1::shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh> > >="__begin_"^{shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh>}"__end_"^{shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh>}"__end_cap_"{__compressed_pair<std::__1::shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh> *, std::__1::allocator<std::__1::shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh> > >="__value_"^{shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh>}}}"_vertexDataWrite"{DataWrite<ggl::Venue3DStroke::VerticalDefaultVbo>="_memory"{BufferMemory="_accessor"^{ResourceAccessor}"_user"^{BufferData}"_range"{Range<unsigned long>="_min"L"_max"L}"_access"i"_sync"i"_data"*}}"_indexDataWrite"{DataWrite<unsigned short>="_memory"{BufferMemory="_accessor"^{ResourceAccessor}"_user"^{BufferData}"_range"{Range<unsigned long>="_min"L"_max"L}"_access"i"_sync"i"_data"*}}"_meshIndex"C"_meshVertexOffset"S"_meshIndexOffset"I})}
{vector<std::__1::shared_ptr<ggl::VenueWall::MeshMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::VenueWall::MeshMesh> > >="__begin_"^{shared_ptr<ggl::VenueWall::MeshMesh>}"__end_"^{shared_ptr<ggl::VenueWall::MeshMesh>}"__end_cap_"{__compressed_pair<std::__1::shared_ptr<ggl::VenueWall::MeshMesh> *, std::__1::allocator<std::__1::shared_ptr<ggl::VenueWall::MeshMesh> > >="__value_"^{shared_ptr<ggl::VenueWall::MeshMesh>}}}
{vector<std::__1::shared_ptr<ggl::VenueWall::EndCapMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::VenueWall::EndCapMesh> > >="__begin_"^{shared_ptr<ggl::VenueWall::EndCapMesh>}"__end_"^{shared_ptr<ggl::VenueWall::EndCapMesh>}"__end_cap_"{__compressed_pair<std::__1::shared_ptr<ggl::VenueWall::EndCapMesh> *, std::__1::allocator<std::__1::shared_ptr<ggl::VenueWall::EndCapMesh> > >="__value_"^{shared_ptr<ggl::VenueWall::EndCapMesh>}}}
{vector<std::__1::shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh> > >="__begin_"^{shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh>}"__end_"^{shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh>}"__end_cap_"{__compressed_pair<std::__1::shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh> *, std::__1::allocator<std::__1::shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh> > >="__value_"^{shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh>}}}
{vector<std::__1::shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh> > >="__begin_"^{shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh>}"__end_"^{shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh>}"__end_cap_"{__compressed_pair<std::__1::shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh> *, std::__1::allocator<std::__1::shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh> > >="__value_"^{shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh>}}}
@36@0:4^{shared_ptr<gss::StylesheetQuery<gss::PropertyID> >=^{StylesheetQuery<gss::PropertyID>}^{__shared_weak_count}}8f12i16Q20f28@32
r^{vector<std::__1::shared_ptr<ggl::VenueWall::MeshMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::VenueWall::MeshMesh> > >=^{shared_ptr<ggl::VenueWall::MeshMesh>}^{shared_ptr<ggl::VenueWall::MeshMesh>}{__compressed_pair<std::__1::shared_ptr<ggl::VenueWall::MeshMesh> *, std::__1::allocator<std::__1::shared_ptr<ggl::VenueWall::MeshMesh> > >=^{shared_ptr<ggl::VenueWall::MeshMesh>}}}8@0:4
r^{vector<std::__1::shared_ptr<ggl::VenueWall::EndCapMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::VenueWall::EndCapMesh> > >=^{shared_ptr<ggl::VenueWall::EndCapMesh>}^{shared_ptr<ggl::VenueWall::EndCapMesh>}{__compressed_pair<std::__1::shared_ptr<ggl::VenueWall::EndCapMesh> *, std::__1::allocator<std::__1::shared_ptr<ggl::VenueWall::EndCapMesh> > >=^{shared_ptr<ggl::VenueWall::EndCapMesh>}}}8@0:4
r^{vector<std::__1::shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh> > >=^{shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh>}^{shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh>}{__compressed_pair<std::__1::shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh> *, std::__1::allocator<std::__1::shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh> > >=^{shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh>}}}8@0:4
r^{vector<std::__1::shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh> > >=^{shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh>}^{shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh>}{__compressed_pair<std::__1::shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh> *, std::__1::allocator<std::__1::shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh> > >=^{shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh>}}}8@0:4
r^{vector<Edge, std::__1::allocator<Edge> >=^{Edge}^{Edge}{__compressed_pair<Edge *, std::__1::allocator<Edge> >=^{Edge}}}16@0:4r^{PolygonSection=^{Matrix<float, 2, 1>}^{Matrix<float, 2, 1>}^{Matrix<float, 2, 1>}^BIIQ{vector<unsigned int, std::__1::allocator<unsigned int> >=^I^I{__compressed_pair<unsigned int *, std::__1::allocator<unsigned int> >=^I}}f}8r^{pair<void *, unsigned long>=^vL}12
L20@0:4r^{PolygonSection=^{Matrix<float, 2, 1>}^{Matrix<float, 2, 1>}^{Matrix<float, 2, 1>}^BIIQ{vector<unsigned int, std::__1::allocator<unsigned int> >=^I^I{__compressed_pair<unsigned int *, std::__1::allocator<unsigned int> >=^I}}f}8r^{vector<std::__1::pair<bool, GEOFeatureStylePair>, std::__1::allocator<std::__1::pair<bool, GEOFeatureStylePair> > >=^{pair<bool, GEOFeatureStylePair>}^{pair<bool, GEOFeatureStylePair>}{__compressed_pair<std::__1::pair<bool, GEOFeatureStylePair> *, std::__1::allocator<std::__1::pair<bool, GEOFeatureStylePair> > >=^{pair<bool, GEOFeatureStylePair>}}}12r^{vector<Edge, std::__1::allocator<Edge> >=^{Edge}^{Edge}{__compressed_pair<Edge *, std::__1::allocator<Edge> >=^{Edge}}}16
{StrokeBufferSizing=IIII}20@0:4r^{PolygonSection=^{Matrix<float, 2, 1>}^{Matrix<float, 2, 1>}^{Matrix<float, 2, 1>}^BIIQ{vector<unsigned int, std::__1::allocator<unsigned int> >=^I^I{__compressed_pair<unsigned int *, std::__1::allocator<unsigned int> >=^I}}f}8r^{vector<std::__1::pair<bool, GEOFeatureStylePair>, std::__1::allocator<std::__1::pair<bool, GEOFeatureStylePair> > >=^{pair<bool, GEOFeatureStylePair>}^{pair<bool, GEOFeatureStylePair>}{__compressed_pair<std::__1::pair<bool, GEOFeatureStylePair> *, std::__1::allocator<std::__1::pair<bool, GEOFeatureStylePair> > >=^{pair<bool, GEOFeatureStylePair>}}}12r^{vector<Edge, std::__1::allocator<Edge> >=^{Edge}^{Edge}{__compressed_pair<Edge *, std::__1::allocator<Edge> >=^{Edge}}}16
v20@0:4r^{PolygonSection=^{Matrix<float, 2, 1>}^{Matrix<float, 2, 1>}^{Matrix<float, 2, 1>}^BIIQ{vector<unsigned int, std::__1::allocator<unsigned int> >=^I^I{__compressed_pair<unsigned int *, std::__1::allocator<unsigned int> >=^I}}f}8^{vector<std::__1::pair<bool, GEOFeatureStylePair>, std::__1::allocator<std::__1::pair<bool, GEOFeatureStylePair> > >=^{pair<bool, GEOFeatureStylePair>}^{pair<bool, GEOFeatureStylePair>}{__compressed_pair<std::__1::pair<bool, GEOFeatureStylePair> *, std::__1::allocator<std::__1::pair<bool, GEOFeatureStylePair> > >=^{pair<bool, GEOFeatureStylePair>}}}12r^{vector<Edge, std::__1::allocator<Edge> >=^{Edge}^{Edge}{__compressed_pair<Edge *, std::__1::allocator<Edge> >=^{Edge}}}16
v20@0:4r^{PolygonSection=^{Matrix<float, 2, 1>}^{Matrix<float, 2, 1>}^{Matrix<float, 2, 1>}^BIIQ{vector<unsigned int, std::__1::allocator<unsigned int> >=^I^I{__compressed_pair<unsigned int *, std::__1::allocator<unsigned int> >=^I}}f}8r^{vector<std::__1::pair<bool, GEOFeatureStylePair>, std::__1::allocator<std::__1::pair<bool, GEOFeatureStylePair> > >=^{pair<bool, GEOFeatureStylePair>}^{pair<bool, GEOFeatureStylePair>}{__compressed_pair<std::__1::pair<bool, GEOFeatureStylePair> *, std::__1::allocator<std::__1::pair<bool, GEOFeatureStylePair> > >=^{pair<bool, GEOFeatureStylePair>}}}12r^{vector<Edge, std::__1::allocator<Edge> >=^{Edge}^{Edge}{__compressed_pair<Edge *, std::__1::allocator<Edge> >=^{Edge}}}16
v24@0:4r^{PolygonSection=^{Matrix<float, 2, 1>}^{Matrix<float, 2, 1>}^{Matrix<float, 2, 1>}^BIIQ{vector<unsigned int, std::__1::allocator<unsigned int> >=^I^I{__compressed_pair<unsigned int *, std::__1::allocator<unsigned int> >=^I}}f}8r^{pair<void *, unsigned long>=^vL}12^{vector<std::__1::pair<bool, GEOFeatureStylePair>, std::__1::allocator<std::__1::pair<bool, GEOFeatureStylePair> > >=^{pair<bool, GEOFeatureStylePair>}^{pair<bool, GEOFeatureStylePair>}{__compressed_pair<std::__1::pair<bool, GEOFeatureStylePair> *, std::__1::allocator<std::__1::pair<bool, GEOFeatureStylePair> > >=^{pair<bool, GEOFeatureStylePair>}}}16I20
v32@0:4r^{PolygonSection=^{Matrix<float, 2, 1>}^{Matrix<float, 2, 1>}^{Matrix<float, 2, 1>}^BIIQ{vector<unsigned int, std::__1::allocator<unsigned int> >=^I^I{__compressed_pair<unsigned int *, std::__1::allocator<unsigned int> >=^I}}f}8r^{vector<Edge, std::__1::allocator<Edge> >=^{Edge}^{Edge}{__compressed_pair<Edge *, std::__1::allocator<Edge> >=^{Edge}}}12@16^{vector<std::__1::pair<bool, GEOFeatureStylePair>, std::__1::allocator<std::__1::pair<bool, GEOFeatureStylePair> > >=^{pair<bool, GEOFeatureStylePair>}^{pair<bool, GEOFeatureStylePair>}{__compressed_pair<std::__1::pair<bool, GEOFeatureStylePair> *, std::__1::allocator<std::__1::pair<bool, GEOFeatureStylePair> > >=^{pair<bool, GEOFeatureStylePair>}}}20I24^{ResourceAccessor=^^?}28
v40@0:4r^{PolygonSection=^{Matrix<float, 2, 1>}^{Matrix<float, 2, 1>}^{Matrix<float, 2, 1>}^BIIQ{vector<unsigned int, std::__1::allocator<unsigned int> >=^I^I{__compressed_pair<unsigned int *, std::__1::allocator<unsigned int> >=^I}}f}8I12{pair<void *, unsigned long>=^vL}16@24^{vector<std::__1::pair<bool, GEOFeatureStylePair>, std::__1::allocator<std::__1::pair<bool, GEOFeatureStylePair> > >=^{pair<bool, GEOFeatureStylePair>}^{pair<bool, GEOFeatureStylePair>}{__compressed_pair<std::__1::pair<bool, GEOFeatureStylePair> *, std::__1::allocator<std::__1::pair<bool, GEOFeatureStylePair> > >=^{pair<bool, GEOFeatureStylePair>}}}28I32^{ResourceAccessor=^^?}36
^{Anchor=i{Coordinate2D<Radians, double>={Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}}{Geocentric<double>=[3d]}d{MercatorTile=Cii}{shared_ptr<altitude::AnchorManager>=^{AnchorManager}^{__shared_weak_count}}B}
{?="latitude"d"longitude"d"altitude"d}
{Matrix<int, 2, 1>=[2i]}8@0:4
@"VKCustomFeature"
@"VKCustomFeature"8@0:4
@32@0:4^{ClusterTreeClusterNode=^^?{Range<float>=ff}{Mercator2<double>=[2d]}^{ClusterTreeClusterNode}IICB{_retain_ptr<id<VKCustomFeatureAnnotation>, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}[2^{ClusterTreeNode}]^{ClusterTreeFeatureNode}dIBB}8r^{shared_ptr<md::LabelClusterTree>=^{LabelClusterTree}^{__shared_weak_count}}12@16@20@24@28
{?="list"^i"count"I"size"I}
^i8@0:4
i12@0:4I8
v16@0:4^i8I12
{Spring<double, 1, md::SpringType::Linear>="_position"d"_velocity"d"_restingPosition"d"_kSpring"d"_kDamper"d}
{Spring<double, 1, md::SpringType::Angular>="_position"d"_velocity"d"_restingPosition"d"_kSpring"d"_kDamper"d}
{Spring<double, 2, md::SpringType::Linear>="_position"{Matrix<double, 2, 1>="_e"[2d]}"_velocity"{Matrix<double, 2, 1>="_e"[2d]}"_restingPosition"{Matrix<double, 2, 1>="_e"[2d]}"_kSpring"d"_kDamper"d}
{Unit<MeterUnitDescription, double>="_value"d}
@"VKGestureCameraBehavior<VKNavGestureCameraBehavior>"
@"VKAttachedNavGestureCameraBehavior"
@"VKDetachedNavGestureCameraBehavior"
{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >="__r_"{__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >="__value_"{__rep=""(?="__l"{__long="__cap_"I"__size_"I"__data_"*}"__s"{__short=""(?="__size_"C"__lx"c)"__data_"[11c]}"__r"{__raw="__words"[3L]})}}}
{vector<geo::Coordinate3D<Radians, double>, std::__1::allocator<geo::Coordinate3D<Radians, double> > >="__begin_"^{Coordinate3D<Radians, double>}"__end_"^{Coordinate3D<Radians, double>}"__end_cap_"{__compressed_pair<geo::Coordinate3D<Radians, double> *, std::__1::allocator<geo::Coordinate3D<Radians, double> > >="__value_"^{Coordinate3D<Radians, double>}}}
@"VKScreenCanvas<VKInteractiveMap><VKMapDataAccess>"
v12@0:4@"VKNavContext"8
v40@0:4B8{?=dd}12d28@?<v@?B>36
@"VKScreenCanvas<VKInteractiveMap><VKMapDataAccess>"8@0:4
v12@0:4@"VKScreenCanvas<VKInteractiveMap><VKMapDataAccess>"8
@"VKSceneConfiguration"8@0:4
v12@0:4@"VKSceneConfiguration"8
v40@0:4B8{?=dd}12d28@?36
v16@0:4@"VKPuckAnimator"8@"VKAnimation"12
v20@0:4@"VKPuckAnimator"8r^{Coordinate3D<Radians, double>={Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<MeterUnitDescription, double>=d}}12r^{Unit<RadianUnitDescription, double>=d}16
v12@0:4@"VKPuckAnimator"8
v16@0:4@"VKPuckAnimator"8r^{Coordinate3D<Radians, double>={Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<MeterUnitDescription, double>=d}}12
@20@0:4{shared_ptr<md::TaskContext>=^{TaskContext}^{__shared_weak_count}}8^{Device=i{shared_ptr<ggl::Device>=^{Device}^{__shared_weak_count}}{unique_ptr<md::SharedDeviceResources, std::__1::default_delete<md::SharedDeviceResources> >={__compressed_pair<md::SharedDeviceResources *, std::__1::default_delete<md::SharedDeviceResources> >=^{SharedDeviceResources}}}}16
v16@0:4r^{Coordinate3D<Radians, double>={Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<MeterUnitDescription, double>=d}}8r^{Unit<RadianUnitDescription, double>=d}12
@16@0:4B8B12
{Matrix<double, 2, 1>=[2d]}8@0:4
v20@0:4f8r^{CameraFrame<geo::Radians, double>={Coordinate3D<Radians, double>={Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<MeterUnitDescription, double>=d}}{Unit<MeterUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}}12@?16
{Unit<RadianUnitDescription, double>=d}8@0:4
d12@0:4I8
{Coordinate3D<Radians, double>={Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<MeterUnitDescription, double>=d}}20@0:4d8I16
{Coordinate3D<Radians, double>={Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<MeterUnitDescription, double>=d}}16@0:4d8
v12@0:4^{vector<geo::Coordinate3D<Radians, double>, std::__1::allocator<geo::Coordinate3D<Radians, double> > >=^{Coordinate3D<Radians, double>}^{Coordinate3D<Radians, double>}{__compressed_pair<geo::Coordinate3D<Radians, double> *, std::__1::allocator<geo::Coordinate3D<Radians, double> > >=^{Coordinate3D<Radians, double>}}}8
v64@0:4{CameraFrame<geo::Radians, double>={Coordinate3D<Radians, double>={Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<MeterUnitDescription, double>=d}}{Unit<MeterUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}{Unit<RadianUnitDescription, double>=d}}8
{vector<geo::_retain_ptr<VKVenueGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::allocator<geo::_retain_ptr<VKVenueGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >="__begin_"^{_retain_ptr<VKVenueGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}"__end_"^{_retain_ptr<VKVenueGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}"__end_cap_"{__compressed_pair<geo::_retain_ptr<VKVenueGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> *, std::__1::allocator<geo::_retain_ptr<VKVenueGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >="__value_"^{_retain_ptr<VKVenueGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}}}
{vector<md::VenueFloorGroup, std::__1::allocator<md::VenueFloorGroup> >="__begin_"^{VenueFloorGroup}"__end_"^{VenueFloorGroup}"__end_cap_"{__compressed_pair<md::VenueFloorGroup *, std::__1::allocator<md::VenueFloorGroup> >="__value_"^{VenueFloorGroup}}}
{_retain_ptr<VKAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>="_vptr$_retain_ptr"^^?"_obj"@"VKAnimation""_retain"{_retain_objc=}"_release"{_release_objc=}}
{vector<std::__1::shared_ptr<md::Venue>, std::__1::allocator<std::__1::shared_ptr<md::Venue> > >="__begin_"^{shared_ptr<md::Venue>}"__end_"^{shared_ptr<md::Venue>}"__end_cap_"{__compressed_pair<std::__1::shared_ptr<md::Venue> *, std::__1::allocator<std::__1::shared_ptr<md::Venue> > >="__value_"^{shared_ptr<md::Venue>}}}
r^{vector<geo::_retain_ptr<VKVenueGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::allocator<geo::_retain_ptr<VKVenueGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >=^{_retain_ptr<VKVenueGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}^{_retain_ptr<VKVenueGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}{__compressed_pair<geo::_retain_ptr<VKVenueGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> *, std::__1::allocator<geo::_retain_ptr<VKVenueGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >=^{_retain_ptr<VKVenueGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>}}}8@0:4
r^{vector<std::__1::shared_ptr<md::Venue>, std::__1::allocator<std::__1::shared_ptr<md::Venue> > >=^{shared_ptr<md::Venue>}^{shared_ptr<md::Venue>}{__compressed_pair<std::__1::shared_ptr<md::Venue> *, std::__1::allocator<std::__1::shared_ptr<md::Venue> > >=^{shared_ptr<md::Venue>}}}8@0:4
v20@0:4^{Device=^^?{DeviceVersion=II}{DeviceCapabilities=BBIII{DeviceSize=III}}{DeviceAPIProperties=id}ii}8^{shared_ptr<gss::StylesheetManager<gss::PropertyID> >=^{StylesheetManager<gss::PropertyID>}^{__shared_weak_count}}12@16
v16@0:4^{Device=^^?{DeviceVersion=II}{DeviceCapabilities=BBIII{DeviceSize=III}}{DeviceAPIProperties=id}ii}8@12
v16@0:4^{Device=^^?{DeviceVersion=II}{DeviceCapabilities=BBIII{DeviceSize=III}}{DeviceAPIProperties=id}ii}8^{shared_ptr<gss::StylesheetManager<gss::PropertyID> >=^{StylesheetManager<gss::PropertyID>}^{__shared_weak_count}}12
^{vector<md::VenueFloorGroup, std::__1::allocator<md::VenueFloorGroup> >=^{VenueFloorGroup}^{VenueFloorGroup}{__compressed_pair<md::VenueFloorGroup *, std::__1::allocator<md::VenueFloorGroup> >=^{VenueFloorGroup}}}8@0:4
{weak_ptr<md::StylesheetVendor>="__ptr_"^{StylesheetVendor}"__cntrl_"^{__shared_weak_count}}
@20@0:4{shared_ptr<md::StylesheetVendor>=^{StylesheetVendor}^{__shared_weak_count}}8@16
{?="shieldType"b1}
{FixedPointVector<unsigned char, 4>="_e"[4C]}
@24@0:4r*8r*12I16{FixedPointVector<unsigned char, 4>=[4C]}20
@24@0:4r*8r*12r*16{FixedPointVector<unsigned char, 4>=[4C]}20
@12@0:4r*8
@12@0:4r^{shared_ptr<md::LabelImageKey>=^{LabelImageKey}^{__shared_weak_count}}8
{unique_ptr<md::GlobeAdapter, std::__1::default_delete<md::GlobeAdapter> >="__ptr_"{__compressed_pair<md::GlobeAdapter *, std::__1::default_delete<md::GlobeAdapter> >="__value_"^{GlobeAdapter}}}
@16@0:4^{MapEngine=^^?{shared_ptr<md::TaskContext>=^{TaskContext}^{__shared_weak_count}}{_retain_ptr<GEOResourceManifestConfiguration *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}^{Device}{_retain_ptr<_MapEngineRenderQueueSource *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{unique_ptr<ggl::DisplayLink, std::__1::default_delete<ggl::DisplayLink> >={__compressed_pair<ggl::DisplayLink *, std::__1::default_delete<ggl::DisplayLink> >=^{DisplayLink}}}{unique_ptr<ggl::SnapshotRunLoop, std::__1::default_delete<ggl::SnapshotRunLoop> >={__compressed_pair<ggl::SnapshotRunLoop *, std::__1::default_delete<ggl::SnapshotRunLoop> >=^{SnapshotRunLoop}}}^{RunLoop}{unique_ptr<md::AnimationManager, std::__1::default_delete<md::AnimationManager> >={__compressed_pair<md::AnimationManager *, std::__1::default_delete<md::AnimationManager> >=^{AnimationManager}}}{unique_ptr<md::AnimationRunner, std::__1::default_delete<md::AnimationRunner> >={__compressed_pair<md::AnimationRunner *, std::__1::default_delete<md::AnimationRunner> >=^{AnimationRunner}}}{shared_ptr<md::RunLoopController>=^{RunLoopController}^{__shared_weak_count}}@@@@{unique_ptr<md::CartographicRenderer, std::__1::default_delete<md::CartographicRenderer> >={__compressed_pair<md::CartographicRenderer *, std::__1::default_delete<md::CartographicRenderer> >=^{CartographicRenderer}}}{unique_ptr<md::realistic::RealisticRenderer, std::__1::default_delete<md::realistic::RealisticRenderer> >={__compressed_pair<md::realistic::RealisticRenderer *, std::__1::default_delete<md::realistic::RealisticRenderer> >=^{RealisticRenderer}}}^{Renderer}{unique_ptr<md::LayoutContext, std::__1::default_delete<md::LayoutContext> >={__compressed_pair<md::LayoutContext *, std::__1::default_delete<md::LayoutContext> >=^{LayoutContext}}}{_retain_ptr<VKCamera *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{shared_ptr<md::LabelManager>=^{LabelManager}^{__shared_weak_count}}{shared_ptr<md::LabelManager>=^{LabelManager}^{__shared_weak_count}}{unique_ptr<md::LogicManager, std::__1::default_delete<md::LogicManager> >={__compressed_pair<md::LogicManager *, std::__1::default_delete<md::LogicManager> >=^{LogicManager}}}BBB{atomic<bool>=AB}{atomic<bool>=AB}B}8@12
@"GEOLatLng"
v32@0:4{Matrix<double, 3, 1>=[3d]}8
@12@0:4@"VKNavCameraController"8
v28@0:4d8d16@?24
^{?=IfIIi{?=b1b1b1b1b1}}
{?="fontSize"b1"leftCapWidth"b1"leftPadding"b1"lineSpacing"b1"numberOfLines"b1"rightCapWidth"b1"rightPadding"b1"textBaseline"b1}
^{?=IfIIi{?=b1b1b1b1b1}}8@0:4
v32@0:4{?=IfIIi{?=b1b1b1b1b1}}8
{?=IfIIi{?=b1b1b1b1b1}}12@0:4I8
v16@0:4^{?=IfIIi{?=b1b1b1b1b1}}8I12
@"NSObject<OS_dispatch_group>"
v16@0:4r^{Box<double, 2>={Matrix<double, 2, 1>=[2d]}{Matrix<double, 2, 1>=[2d]}}8i12
@"<VKRasterOverlayDelegate>"
{?="origin"{?="x"d"y"d}"size"{?="width"d"height"d}}
@"VKRasterOverlayTileSource"
{weak_ptr<md::GlobeOverlayContainer>="__ptr_"^{GlobeOverlayContainer}"__cntrl_"^{__shared_weak_count}}
v16@0:4r^{?={?=dd}{?=dd}}8i12
B12@0:4r^{?=IIII}8
v16@0:4r^{?=IIII}8^{CGContext=}12
{weak_ptr<md::GlobeOverlayContainer>=^{GlobeOverlayContainer}^{__shared_weak_count}}8@0:4
v16@0:4{weak_ptr<md::GlobeOverlayContainer>=^{GlobeOverlayContainer}^{__shared_weak_count}}8
{optional<md::MeshSet<ggl::PolygonCommonStroke::MeshMesh, ggl::PolygonCommonStroke::DefaultVbo> >="_hasValue"B"_value"(ValueUnion="data"[88C]"type"{MeshSet<ggl::PolygonCommonStroke::MeshMesh, ggl::PolygonCommonStroke::DefaultVbo>="_vertexAndIndexCounts"{vector<std::__1::pair<unsigned short, unsigned int>, std::__1::allocator<std::__1::pair<unsigned short, unsigned int> > >="__begin_"^{pair<unsigned short, unsigned int>}"__end_"^{pair<unsigned short, unsigned int>}"__end_cap_"{__compressed_pair<std::__1::pair<unsigned short, unsigned int> *, std::__1::allocator<std::__1::pair<unsigned short, unsigned int> > >="__value_"^{pair<unsigned short, unsigned int>}}}"_meshes"{vector<std::__1::shared_ptr<ggl::PolygonCommonStroke::MeshMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::PolygonCommonStroke::MeshMesh> > >="__begin_"^{shared_ptr<ggl::PolygonCommonStroke::MeshMesh>}"__end_"^{shared_ptr<ggl::PolygonCommonStroke::MeshMesh>}"__end_cap_"{__compressed_pair<std::__1::shared_ptr<ggl::PolygonCommonStroke::MeshMesh> *, std::__1::allocator<std::__1::shared_ptr<ggl::PolygonCommonStroke::MeshMesh> > >="__value_"^{shared_ptr<ggl::PolygonCommonStroke::MeshMesh>}}}"_vertexDataWrite"{DataWrite<ggl::PolygonCommonStroke::DefaultVbo>="_memory"{BufferMemory="_accessor"^{ResourceAccessor}"_user"^{BufferData}"_range"{Range<unsigned long>="_min"L"_max"L}"_access"i"_sync"i"_data"*}}"_indexDataWrite"{DataWrite<unsigned short>="_memory"{BufferMemory="_accessor"^{ResourceAccessor}"_user"^{BufferData}"_range"{Range<unsigned long>="_min"L"_max"L}"_access"i"_sync"i"_data"*}}"_meshIndex"C"_meshVertexOffset"S"_meshIndexOffset"I})}
{vector<std::__1::shared_ptr<ggl::PolygonCommonStroke::MeshMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::PolygonCommonStroke::MeshMesh> > >="__begin_"^{shared_ptr<ggl::PolygonCommonStroke::MeshMesh>}"__end_"^{shared_ptr<ggl::PolygonCommonStroke::MeshMesh>}"__end_cap_"{__compressed_pair<std::__1::shared_ptr<ggl::PolygonCommonStroke::MeshMesh> *, std::__1::allocator<std::__1::shared_ptr<ggl::PolygonCommonStroke::MeshMesh> > >="__value_"^{shared_ptr<ggl::PolygonCommonStroke::MeshMesh>}}}
@28@0:4^{shared_ptr<gss::StylesheetQuery<gss::PropertyID> >=^{StylesheetQuery<gss::PropertyID>}^{__shared_weak_count}}8f12r^{Matrix<float, 2, 1>=[2f]}16f20@24
{shared_ptr<ggl::Texture2D>=^{Texture2D}^{__shared_weak_count}}12@0:4r^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}8
{FeatureAttributeSet={vector<gss::FeatureAttributePair, std::__1::allocator<gss::FeatureAttributePair> >=^{FeatureAttributePair}^{FeatureAttributePair}{__compressed_pair<gss::FeatureAttributePair *, std::__1::allocator<gss::FeatureAttributePair> >=^{FeatureAttributePair}}}}8@0:4
^{vector<std::__1::shared_ptr<ggl::PolygonCommonStroke::MeshMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::PolygonCommonStroke::MeshMesh> > >=^{shared_ptr<ggl::PolygonCommonStroke::MeshMesh>}^{shared_ptr<ggl::PolygonCommonStroke::MeshMesh>}{__compressed_pair<std::__1::shared_ptr<ggl::PolygonCommonStroke::MeshMesh> *, std::__1::allocator<std::__1::shared_ptr<ggl::PolygonCommonStroke::MeshMesh> > >=^{shared_ptr<ggl::PolygonCommonStroke::MeshMesh>}}}8@0:4
I20@0:4^{?={?={?=@*IIIIIQBQfQ@i}IIiiiII(?={?={?=ff}{?=ff}}{?=ffff})^{?}{?=[2S][2S]}CBCBBCBC{_NSRange=II}BI}{?=ff}BBCII{?=ff}I}8I12^{vector<std::__1::pair<bool, GEOFeatureStylePair>, std::__1::allocator<std::__1::pair<bool, GEOFeatureStylePair> > >=^{pair<bool, GEOFeatureStylePair>}^{pair<bool, GEOFeatureStylePair>}{__compressed_pair<std::__1::pair<bool, GEOFeatureStylePair> *, std::__1::allocator<std::__1::pair<bool, GEOFeatureStylePair> > >=^{pair<bool, GEOFeatureStylePair>}}}16
v16@0:4^{?={?={?=@*IIIIIQBQfQ@i}IIiiiII(?={?={?=ff}{?=ff}}{?=ffff})^{?}{?=[2S][2S]}CBCBBCBC{_NSRange=II}BI}{?=ff}BBCII{?=ff}I}8B12
v12@0:4r^{PolygonSection=^{Matrix<float, 2, 1>}^{Matrix<float, 2, 1>}^{Matrix<float, 2, 1>}^BIIQ{vector<unsigned int, std::__1::allocator<unsigned int> >=^I^I{__compressed_pair<unsigned int *, std::__1::allocator<unsigned int> >=^I}}f}8
v24@0:4^{?={?={?=@*IIIIIQBQfQ@i}IIiiiII(?={?={?=ff}{?=ff}}{?=ffff})^{?}{?=[2S][2S]}CBCBBCBC{_NSRange=II}BI}{?=ff}BBCII{?=ff}I}8B12^{ResourceAccessor=^^?}16@20
B32@0:4r^{PolygonSection=^{Matrix<float, 2, 1>}^{Matrix<float, 2, 1>}^{Matrix<float, 2, 1>}^BIIQ{vector<unsigned int, std::__1::allocator<unsigned int> >=^I^I{__compressed_pair<unsigned int *, std::__1::allocator<unsigned int> >=^I}}f}8C12I16I20^{ResourceAccessor=^^?}24@28
C16@0:4@8r^{?=Ii}12
C20@0:4r^{PolygonSection=^{Matrix<float, 2, 1>}^{Matrix<float, 2, 1>}^{Matrix<float, 2, 1>}^BIIQ{vector<unsigned int, std::__1::allocator<unsigned int> >=^I^I{__compressed_pair<unsigned int *, std::__1::allocator<unsigned int> >=^I}}f}8@12r^{vector<std::__1::pair<bool, GEOFeatureStylePair>, std::__1::allocator<std::__1::pair<bool, GEOFeatureStylePair> > >=^{pair<bool, GEOFeatureStylePair>}^{pair<bool, GEOFeatureStylePair>}{__compressed_pair<std::__1::pair<bool, GEOFeatureStylePair> *, std::__1::allocator<std::__1::pair<bool, GEOFeatureStylePair> > >=^{pair<bool, GEOFeatureStylePair>}}}16
d32@0:4{Matrix<double, 3, 1>=[3d]}8
{vector<std::__1::shared_ptr<md::ObjectGroup>, std::__1::allocator<std::__1::shared_ptr<md::ObjectGroup> > >="__begin_"^{shared_ptr<md::ObjectGroup>}"__end_"^{shared_ptr<md::ObjectGroup>}"__end_cap_"{__compressed_pair<std::__1::shared_ptr<md::ObjectGroup> *, std::__1::allocator<std::__1::shared_ptr<md::ObjectGroup> > >="__value_"^{shared_ptr<md::ObjectGroup>}}}
{vector<std::__1::pair<VKBuildingHeightMap, unsigned long long>, std::__1::allocator<std::__1::pair<VKBuildingHeightMap, unsigned long long> > >="__begin_"^{pair<VKBuildingHeightMap, unsigned long long>}"__end_"^{pair<VKBuildingHeightMap, unsigned long long>}"__end_cap_"{__compressed_pair<std::__1::pair<VKBuildingHeightMap, unsigned long long> *, std::__1::allocator<std::__1::pair<VKBuildingHeightMap, unsigned long long> > >="__value_"^{pair<VKBuildingHeightMap, unsigned long long>}}}
^{vector<std::__1::shared_ptr<md::ObjectGroup>, std::__1::allocator<std::__1::shared_ptr<md::ObjectGroup> > >=^{shared_ptr<md::ObjectGroup>}^{shared_ptr<md::ObjectGroup>}{__compressed_pair<std::__1::shared_ptr<md::ObjectGroup> *, std::__1::allocator<std::__1::shared_ptr<md::ObjectGroup> > >=^{shared_ptr<md::ObjectGroup>}}}8@0:4
@32@0:4r^{VKTileKey=IiiI}8@12{shared_ptr<gss::StylesheetManager<gss::PropertyID> >=^{StylesheetManager<gss::PropertyID>}^{__shared_weak_count}}16@24f28
v16@0:4@8^{vector<GEO3DBuildingFeature, std::__1::allocator<GEO3DBuildingFeature> >=^{?}^{?}{__compressed_pair<GEO3DBuildingFeature *, std::__1::allocator<GEO3DBuildingFeature> >=^{?}}}12
v16@0:4^{vector<GEO3DBuildingFeature, std::__1::allocator<GEO3DBuildingFeature> >=^{?}^{?}{__compressed_pair<GEO3DBuildingFeature *, std::__1::allocator<GEO3DBuildingFeature> >=^{?}}}8r^{_GEOTileKey=b6b26b26b6b8b8b8b1b7[4C]}12
B16@0:4^{?={?=@*IIIIIQBQfQ@i}*I}8I12
@20@0:4@8{PolylineCoordinate=If}12
v28@0:4r^{NavContext=^^?^{LabelManager}^{LabelLayoutContext}^{LabelNavLayoutContext}}8C12@16B20^{VKLabelNavArtworkCache={unique_ptr<LRUCache<unsigned long, VKRoadSignArtwork *, std::__1::hash<unsigned long> >, std::__1::default_delete<LRUCache<unsigned long, VKRoadSignArtwork *, std::__1::hash<unsigned long> > > >={__compressed_pair<LRUCache<unsigned long, VKRoadSignArtwork *, std::__1::hash<unsigned long> > *, std::__1::default_delete<LRUCache<unsigned long, VKRoadSignArtwork *, std::__1::hash<unsigned long> > > >=^{LRUCache<unsigned long, VKRoadSignArtwork *, std::__1::hash<unsigned long> >}}}{unique_ptr<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> >, std::__1::default_delete<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> > > >={__compressed_pair<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> > *, std::__1::default_delete<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> > > >=^{LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> >}}}{unique_ptr<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> >, std::__1::default_delete<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> > > >={__compressed_pair<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> > *, std::__1::default_delete<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> > > >=^{LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> >}}}^{CGColor}^{CGColor}{VKGuidanceManeuverArrowMetrics={CGSize=ff}fff{CGSize=ff}fffCffffffffffffffffBfffBB}}24
{Box<float, 2>={Matrix<float, 2, 1>=[2f]}{Matrix<float, 2, 1>=[2f]}}32@0:4C8r^{shared_ptr<gss::StylesheetQuery<gss::PropertyID> >=^{StylesheetQuery<gss::PropertyID>}^{__shared_weak_count}}12r^{NavContext=^^?^{LabelManager}^{LabelLayoutContext}^{LabelNavLayoutContext}}16{Matrix<float, 2, 1>=[2f]}20^{VKLabelNavArtworkCache={unique_ptr<LRUCache<unsigned long, VKRoadSignArtwork *, std::__1::hash<unsigned long> >, std::__1::default_delete<LRUCache<unsigned long, VKRoadSignArtwork *, std::__1::hash<unsigned long> > > >={__compressed_pair<LRUCache<unsigned long, VKRoadSignArtwork *, std::__1::hash<unsigned long> > *, std::__1::default_delete<LRUCache<unsigned long, VKRoadSignArtwork *, std::__1::hash<unsigned long> > > >=^{LRUCache<unsigned long, VKRoadSignArtwork *, std::__1::hash<unsigned long> >}}}{unique_ptr<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> >, std::__1::default_delete<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> > > >={__compressed_pair<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> > *, std::__1::default_delete<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> > > >=^{LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> >}}}{unique_ptr<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> >, std::__1::default_delete<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> > > >={__compressed_pair<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> > *, std::__1::default_delete<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> > > >=^{LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> >}}}^{CGColor}^{CGColor}{VKGuidanceManeuverArrowMetrics={CGSize=ff}fff{CGSize=ff}fffCffffffffffffffffBfffBB}}28
{_retain_ptr<VKLabelNavRoadLabel *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}16@0:4r^{NavContext=^^?^{LabelManager}^{LabelLayoutContext}^{LabelNavLayoutContext}}8^{VKLabelNavArtworkCache={unique_ptr<LRUCache<unsigned long, VKRoadSignArtwork *, std::__1::hash<unsigned long> >, std::__1::default_delete<LRUCache<unsigned long, VKRoadSignArtwork *, std::__1::hash<unsigned long> > > >={__compressed_pair<LRUCache<unsigned long, VKRoadSignArtwork *, std::__1::hash<unsigned long> > *, std::__1::default_delete<LRUCache<unsigned long, VKRoadSignArtwork *, std::__1::hash<unsigned long> > > >=^{LRUCache<unsigned long, VKRoadSignArtwork *, std::__1::hash<unsigned long> >}}}{unique_ptr<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> >, std::__1::default_delete<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> > > >={__compressed_pair<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> > *, std::__1::default_delete<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> > > >=^{LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> >}}}{unique_ptr<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> >, std::__1::default_delete<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> > > >={__compressed_pair<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> > *, std::__1::default_delete<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> > > >=^{LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> >}}}^{CGColor}^{CGColor}{VKGuidanceManeuverArrowMetrics={CGSize=ff}fff{CGSize=ff}fffCffffffffffffffffBfffBB}}12
@36@0:4@8r^{NavContext=^^?^{LabelManager}^{LabelLayoutContext}^{LabelNavLayoutContext}}12{shared_ptr<gss::StylesheetQuery<gss::PropertyID> >=^{StylesheetQuery<gss::PropertyID>}^{__shared_weak_count}}16C24^{VKLabelNavArtworkCache={unique_ptr<LRUCache<unsigned long, VKRoadSignArtwork *, std::__1::hash<unsigned long> >, std::__1::default_delete<LRUCache<unsigned long, VKRoadSignArtwork *, std::__1::hash<unsigned long> > > >={__compressed_pair<LRUCache<unsigned long, VKRoadSignArtwork *, std::__1::hash<unsigned long> > *, std::__1::default_delete<LRUCache<unsigned long, VKRoadSignArtwork *, std::__1::hash<unsigned long> > > >=^{LRUCache<unsigned long, VKRoadSignArtwork *, std::__1::hash<unsigned long> >}}}{unique_ptr<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> >, std::__1::default_delete<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> > > >={__compressed_pair<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> > *, std::__1::default_delete<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> > > >=^{LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> >}}}{unique_ptr<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> >, std::__1::default_delete<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> > > >={__compressed_pair<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> > *, std::__1::default_delete<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> > > >=^{LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long> >}}}^{CGColor}^{CGColor}{VKGuidanceManeuverArrowMetrics={CGSize=ff}fff{CGSize=ff}fffCffffffffffffffffBfffBB}}28B32
{shared_ptr<gss::StylesheetQuery<gss::PropertyID> >=^{StylesheetQuery<gss::PropertyID>}^{__shared_weak_count}}24@0:4r^{NavContext=^^?^{LabelManager}^{LabelLayoutContext}^{LabelNavLayoutContext}}8B12C16C20
C12@0:4C8
@"VKTrafficTile"
{unique_ptr<md::RoadLayer, std::__1::default_delete<md::RoadLayer> >="__ptr_"{__compressed_pair<md::RoadLayer *, std::__1::default_delete<md::RoadLayer> >="__value_"^{RoadLayer}}}
{unique_ptr<md::PatternedLayer, std::__1::default_delete<md::PatternedLayer> >="__ptr_"{__compressed_pair<md::PatternedLayer *, std::__1::default_delete<md::PatternedLayer> >="__value_"^{PatternedLayer}}}
v12@0:4^{LayoutContext=}8
v48@0:4^{unordered_map<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon> >, std::__1::allocator<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon> > > >, std::__1::hash<md::RoadBatchKey>, std::__1::equal_to<md::RoadBatchKey>, std::__1::allocator<std::__1::pair<const md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon> >, std::__1::allocator<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon> > > > > > >={__hash_table<std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon> >, std::__1::allocator<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon> > > > >, std::__1::__unordered_map_hasher<md::RoadBatchKey, std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon> >, std::__1::allocator<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon> > > > >, std::__1::hash<md::RoadBatchKey>, true>, std::__1::__unordered_map_equal<md::RoadBatchKey, std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon> >, std::__1::allocator<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon> > > > >, std::__1::equal_to<md::RoadBatchKey>, true>, std::__1::allocator<std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon> >, std::__1::allocator<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon> > > > > > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon> >, std::__1::allocator<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon> > > > >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon> >, std::__1::allocator<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon> > > > >, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon> >, std::__1::allocator<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon> > > > >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon> >, std::__1::allocator<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon> > > > >, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon> >, std::__1::allocator<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon> > > > >, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon> >, std::__1::allocator<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon> > > > >, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon> >, std::__1::allocator<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon> > > > >, void *> *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon> >, std::__1::allocator<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon> > > > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon> >, std::__1::allocator<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon> > > > >, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon> >, std::__1::allocator<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon> > > > >, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon> >, std::__1::allocator<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon> > > > >, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<md::RoadBatchKey, std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon> >, std::__1::allocator<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon> > > > >, std::__1::hash<md::RoadBatchKey>, true> >=L}{__compressed_pair<float, std::__1::__unordered_map_equal<md::RoadBatchKey, std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon> >, std::__1::allocator<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon> > > > >, std::__1::equal_to<md::RoadBatchKey>, true> >=f}}}8{shared_ptr<gss::StylesheetQuery<gss::PropertyID> >=^{StylesheetQuery<gss::PropertyID>}^{__shared_weak_count}}12I20L24^{Matrix<float, 2, 1>=[2f]}28B32B36r^{TexelRun=fffff}40B44
v32@0:4^{unordered_map<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon> >, std::__1::allocator<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon> > > >, std::__1::hash<md::PatternedBatchKey>, std::__1::equal_to<md::PatternedBatchKey>, std::__1::allocator<std::__1::pair<const md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon> >, std::__1::allocator<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon> > > > > > >={__hash_table<std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon> >, std::__1::allocator<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon> > > > >, std::__1::__unordered_map_hasher<md::PatternedBatchKey, std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon> >, std::__1::allocator<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon> > > > >, std::__1::hash<md::PatternedBatchKey>, true>, std::__1::__unordered_map_equal<md::PatternedBatchKey, std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon> >, std::__1::allocator<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon> > > > >, std::__1::equal_to<md::PatternedBatchKey>, true>, std::__1::allocator<std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon> >, std::__1::allocator<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon> > > > > > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon> >, std::__1::allocator<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon> > > > >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon> >, std::__1::allocator<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon> > > > >, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon> >, std::__1::allocator<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon> > > > >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon> >, std::__1::allocator<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon> > > > >, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon> >, std::__1::allocator<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon> > > > >, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon> >, std::__1::allocator<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon> > > > >, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon> >, std::__1::allocator<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon> > > > >, void *> *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon> >, std::__1::allocator<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon> > > > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon> >, std::__1::allocator<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon> > > > >, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon> >, std::__1::allocator<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon> > > > >, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon> >, std::__1::allocator<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon> > > > >, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<md::PatternedBatchKey, std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon> >, std::__1::allocator<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon> > > > >, std::__1::hash<md::PatternedBatchKey>, true> >=L}{__compressed_pair<float, std::__1::__unordered_map_equal<md::PatternedBatchKey, std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon> >, std::__1::allocator<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon> > > > >, std::__1::equal_to<md::PatternedBatchKey>, true> >=f}}}8{shared_ptr<gss::StylesheetQuery<gss::PropertyID> >=^{StylesheetQuery<gss::PropertyID>}^{__shared_weak_count}}12I20L24^{Matrix<float, 2, 1>=[2f]}28
v16@0:4^{Device=^^?{DeviceVersion=II}{DeviceCapabilities=BBIII{DeviceSize=III}}{DeviceAPIProperties=id}ii}8r^{TrafficStream=IIIf{unique_ptr<ggl::Texture2D, std::__1::default_delete<ggl::Texture2D> >={__compressed_pair<ggl::Texture2D *, std::__1::default_delete<ggl::Texture2D> >=^{Texture2D}}}f{TexelRun=fffff}{unordered_map<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun, md::TrafficStream::SectionKeyHash, std::__1::equal_to<md::TrafficStream::SectionKey>, std::__1::allocator<std::__1::pair<const md::TrafficStream::SectionKey, md::TrafficStream::TexelRun> > >={__hash_table<std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, std::__1::__unordered_map_hasher<md::TrafficStream::SectionKey, std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, md::TrafficStream::SectionKeyHash, true>, std::__1::__unordered_map_equal<md::TrafficStream::SectionKey, std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, std::__1::equal_to<md::TrafficStream::SectionKey>, true>, std::__1::allocator<std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, void *> *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<md::TrafficStream::SectionKey, std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, md::TrafficStream::SectionKeyHash, true> >=L}{__compressed_pair<float, std::__1::__unordered_map_equal<md::TrafficStream::SectionKey, std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, std::__1::equal_to<md::TrafficStream::SectionKey>, true> >=f}}}}12
^{RoadLayer=^^?{vector<md::RoadBatch *, std::__1::allocator<md::RoadBatch *> >=^^{RoadBatch}^^{RoadBatch}{__compressed_pair<md::RoadBatch **, std::__1::allocator<md::RoadBatch *> >=^^{RoadBatch}}}{vector<ggl::Ribbon::BaseMesh *, std::__1::allocator<ggl::Ribbon::BaseMesh *> >=^^{BaseMesh}^^{BaseMesh}{__compressed_pair<ggl::Ribbon::BaseMesh **, std::__1::allocator<ggl::Ribbon::BaseMesh *> >=^^{BaseMesh}}}[8^{RenderState}]{shared_ptr<ggl::ConstantDataTyped<ggl::Tile::View> >=^{ConstantDataTyped<ggl::Tile::View>}^{__shared_weak_count}}I^{RoadSharedResources}}8@0:4
^{PatternedLayer=^^?{vector<md::PatternedBatch *, std::__1::allocator<md::PatternedBatch *> >=^^{PatternedBatch}^^{PatternedBatch}{__compressed_pair<md::PatternedBatch **, std::__1::allocator<md::PatternedBatch *> >=^^{PatternedBatch}}}{vector<ggl::PatternedRibbon::BaseMesh *, std::__1::allocator<ggl::PatternedRibbon::BaseMesh *> >=^^{BaseMesh}^^{BaseMesh}{__compressed_pair<ggl::PatternedRibbon::BaseMesh **, std::__1::allocator<ggl::PatternedRibbon::BaseMesh *> >=^^{BaseMesh}}}[2^{RenderState}]{shared_ptr<ggl::ConstantDataTyped<ggl::Tile::View> >=^{ConstantDataTyped<ggl::Tile::View>}^{__shared_weak_count}}I^{PatternedSharedResources}}8@0:4
^{map<VKTileKey, VKTile *, bool (*)(const VKTileKey &, const VKTileKey &), std::__1::allocator<std::__1::pair<const VKTileKey, VKTile *> > >={__tree<std::__1::__value_type<VKTileKey, VKTile *>, std::__1::__map_value_compare<VKTileKey, std::__1::__value_type<VKTileKey, VKTile *>, bool (*)(const VKTileKey &, const VKTileKey &), false>, std::__1::allocator<std::__1::__value_type<VKTileKey, VKTile *> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<VKTileKey, VKTile *>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<VKTileKey, std::__1::__value_type<VKTileKey, VKTile *>, bool (*)(const VKTileKey &, const VKTileKey &), false> >=L{__map_value_compare<VKTileKey, std::__1::__value_type<VKTileKey, VKTile *>, bool (*)(const VKTileKey &, const VKTileKey &), false>=^?}}}}
@16@0:4r^{VenueBuilding={vector<md::VenueLevel, std::__1::allocator<md::VenueLevel> >=^{VenueLevel}^{VenueLevel}{__compressed_pair<md::VenueLevel *, std::__1::allocator<md::VenueLevel> >=^{VenueLevel}}}QQQQs{Matrix<double, 2, 1>=[2d]}{ConvexHull2<double>={vector<gm::Matrix<double, 2, 1>, std::__1::allocator<gm::Matrix<double, 2, 1> > >=^{Matrix<double, 2, 1>}^{Matrix<double, 2, 1>}{__compressed_pair<gm::Matrix<double, 2, 1> *, std::__1::allocator<gm::Matrix<double, 2, 1> > >=^{Matrix<double, 2, 1>}}}}}8B12
r^{shared_ptr<md::VenueBuildingFeatureMarker>=^{VenueBuildingFeatureMarker}^{__shared_weak_count}}8@0:4
{?=dd}24@0:4{?=dd}8
@"<GGLLayerDelegate>"
{shared_ptr<ggl::OESDevice>="__ptr_"^{OESDevice}"__cntrl_"^{__shared_weak_count}}
{unique_ptr<ggl::OESContext, std::__1::default_delete<ggl::OESContext> >="__ptr_"{__compressed_pair<ggl::OESContext *, std::__1::default_delete<ggl::OESContext> >="__value_"^{OESContext}}}
@"<GGLLayerDelegate>"8@0:4
v12@0:4@"<GGLLayerDelegate>"8
@16@0:4{shared_ptr<ggl::OESDevice>=^{OESDevice}^{__shared_weak_count}}8
{weak_ptr<ggl::RunLoop::_RunLoopCallbacker>="__ptr_"^{_RunLoopCallbacker}"__cntrl_"^{__shared_weak_count}}
@16@0:4{weak_ptr<ggl::RunLoop::_RunLoopCallbacker>=^{_RunLoopCallbacker}^{__shared_weak_count}}8
Qhgy
zPLR
4561
 I0%
0C0n
0E0o
 G0(
 6"@
