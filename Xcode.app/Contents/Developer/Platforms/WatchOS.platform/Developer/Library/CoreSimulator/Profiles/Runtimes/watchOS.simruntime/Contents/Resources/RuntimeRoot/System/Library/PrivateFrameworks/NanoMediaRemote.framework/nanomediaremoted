NanoMusicCore
NanoMediaRemote
NanoAudioControl
NanoMusicSync
NanoMediaUI
v4@?0
com.apple.nanomusic
<%@ %p '%@'>
name
T@"NSString",R,N,V_name
%@-%@-%@
%@-%@
com.apple.Music
com.apple.NanoRadio
com.apple.NanoMusic
PerformanceTestingEnabled
timestamp
SkipToNextTrack
SkipCommandSent
yyyy-MM-dd-HHmmssSSS
/tmp/NanoMusic-%@-PPT-Results_%@.plist
com.apple.notifyd.matching
v8@?0@"NSObject<OS_xpc_object>"4
com.apple.NanoNowPlaying
command
TI,N,V_command
commandResultsHandler
T@?,C,N,V_commandResultsHandler
persistentID
T@"NSNumber",C,N,V_persistentID
albumPersistentID
T@"NSNumber",C,N,V_albumPersistentID
com.apple.nanomediaremoted.NMRDaemonServer
com.apple.nanomediaremoted.commandResultHandlerAccessQueue
MediaRemoteGetState
v8@?0^{__CFArray=}4
PrewarmSystemMusicApp
hash
TI,R
superclass
T#,R
description
T@"NSString",R,C
debugDescription
; failed to send the command IDS message
; failed to receive a command response IDS message in time
MediaRemoteGetArtwork
v8@?0I4
v8@?0^{__CFError=}4
MediaRemoteGetIcon
iPhone
v20@?0^v4I8^{__CFDictionary=}12@?<v@?^{__CFArray=}>16
v12@?0C4^v8
v16@?0^v4^v8@?<v@?^v^{__CFError=}>12
GetCloudAvailability
GetSpecializedQueueInfo
com.apple.WebKit.WebContent
v12@?0B4@"NSError"8
v8@?0C4
alloc
initWithName:
init
copy
dealloc
class
stringWithFormat:
runAssertionWithName:
description
.cxx_destruct
name
_name
title
album
artist
applicationBundleIdentifier
isLocal
isEqualToString:
_isPlayingRadio
radioStationIdentifier
longLongValue
radioStationHash
length
radioStationName
isAdvertisement
briefInfoIncludingBundleIdentifier:
localBundleIdentifierForOrigin:
date
setDateFormat:
stringFromDate:
writeToFile:atomically:
standardUserDefaults
boolForKey:
writeResultsToDisk:forTest:
perfTestingEnabled
machAbsoluteTimeGetCurrent
server
gizmoServer
command
setCommand:
commandResultsHandler
setCommandResultsHandler:
_command
_commandResultsHandler
persistentID
setPersistentID:
albumPersistentID
setAlbumPersistentID:
_persistentID
_albumPersistentID
setDelegate:
_handleMediaRemoteSetStateMessage:
setMessageHandlerTarget:action:forIncomingMessagesOfType:
_handleMediaRemoteSetArtworkMessage:
_handleMediaRemoteSetIconMessage:
_handleRemoteMediaCommandResponseMessage:
_handleSetCloudAvailabilityMessage:
_handleSetSpecializedQueueInfoMessage:
startHandlingMessages
sharedTimeline
initWithOptions:
addObserverDelegate:
beginObservingOrigins
dictionary
_registerMediaAppsAsPriviledgedBackgroundClients
_registerMediaRemoteCustomOriginForCompanionNowPlayingInfo
initWithMachServiceName:
resume
sharedManager
addObserver:
refreshMediaRemoteStateIfNecessary
_requestInitialStateIfUnlocked
isConnected
_clearAllMediaRemoteState
_refreshMediaRemoteStateIfNecessary
messageWithNowPlayingInfoDigest:applicationInfoDigest:supportedCommandsDigest:playbackQueueDigest:
protobufData
sendMessageWithProtobufData:messageType:priority:timeout:bypassDuet:skipStorage:expectReply:queueOneIdentifier:resultingMessageIdentifier:error:
numberWithInt:
dictionaryWithObjects:forKeys:count:
_handleMediaRemoteCommand:forOrigin:withOptions:commandResultHandler:
availabilityForTrackPID:
processIdentifier
isEqual:
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
debugDescription
sendMediaRemoteCommand:withCommandOptions:commandResultHandler:
prewarmCompanionSystemMusicApp
fetchCompanionCloudAvailabilityWithCompletionHandler:
fetchCompanionSpecializedQueueInfoWithCompletionHandler:
fetchTrackAssetAvailabilityForTrackPID:completionHandler:
interfaceWithProtocol:
setExportedInterface:
setExportedObject:
setInvalidationHandler:
arrayWithObjects:count:
_invokeCommandResultHandlerForIDSMessageIdentifier:returnStatuses:failedToSend:expired:complainIfMissing:
context
incomingResponseIdentifier
data
initWithProtobufData:
handlerReturnStatuses
_popPendingMediaRemoteCommandResultHandlerWithIdentifier:
componentsJoinedByString:
setObject:forKeyedSubscript:
objectForKeyedSubscript:
removeObjectForKey:
nowPlayingInfoData
_handleMediaRemoteSetNowPlayingInfoStateMessage:
supportedCommandsData
_handleMediaRemoteSetSupportedCommandsStateMessage:
applicationInfoData
_handleMediaRemoteSetNowPlayingApplicationInfoStateMessage:
playbackQueueData
_handleMediaRemotePlaybackQueueData:
jpegArtwork
originalDigest
_handleMediaRemoteSetNowPlayingArtwork:digest:
icon
bundleID
_handleMediaRemoteSetNowPlayingApplicationIcon:digest:bundleID:
mutableCopy
boolValue
_localEntityInfoForCompanionItemPersistentID:
_cachedArtworkWithDigest:
_localArtworkDataForItemWithPersistentID:
_cacheArtworkData:withDigest:
_updateMediaRemoteWithCurrentCompanionNowPlayingInfo
_requestArtwork
companionBundleIdentifier
_removeNowPlayingClientForBundleID:
fetchOrCreateIconWithBundleID:type:
digest
iconWithBundleID:data:digest:
setCachedIcon:withType:
_updateMediaRemoteWithCurrentCompanionSupportedCommands
updateWithData:
fullPlaybackQueueData
iconDigest
playbackState
watchBundleIdentifier
localizedDisplayName
_updateMediaRemoteWithCurrentCompanionNowPlayingApplicationInfo
_requestIcon
sizeOfIconForCurrentDevice
messageWithIconWidth:height:bundleID:
_updateActiveOrigin
_registerPlaybackQueueCallbackForOrigin:
copyMediaRemotePlaybackQueueWithRange:includeMetadata:
messageWithCommand:options:
_perfTestingCommandSent:
_pushPendingMediaRemoteCommandResultHandler:withIdentifier:
setValue:forKey:
setNowPlayingInfo:
_updateMediaRemotePlaybackQueue
copyFullMediaRemotePlaybackQueueIncludingMetadata:
setWithObject:
containsObject:
nowPlayingStateForOrigin:
_shouldRequestSnapshotForBundleIdentifier:
uniqueIdentifier
_requestSnapshotForBundleIdentifier:
activeOrigin
_registerPriviledgedBackgroundClientForBundleIdentifiler:
sharedInstance
invalidSnapshotContext
setSnapshotContext:forBundleID:
userInfo
registerPrivilegedBackgroundClient:withPriority:leeway:usesBudget:completion:
count
objectForKey:
sharedLibrary
predicateWithProperty:equalToValue:
anyInLibrary:predicate:
numberWithLongLong:
valueForProperty:
setObject:forKey:
_localArtworkURLForItemWithPersistentID:
dataWithContentsOfURL:
initWithPersistentID:inLibrary:
pathWithComponents:
fileURLWithPath:isDirectory:
setTotalCostLimit:
setObject:forKey:cost:
activeNowPlayingOrigin
mediaRemoteOrigin
_requestInitialState
_requestCloudAvailabilityUpdate
_requestSpecializedQueueInfoUpdate
numberWithDouble:
listener:shouldAcceptNewConnection:
messageCenter:messageWithIdentifier:didSendWithSuccess:error:
playbackQueueDidChange:
playbackQueue:contentItemsDidChange:
manager:connectivityDidChange:
originObserver:didUpdateNowPlayingInfoForOrigin:
originObserver:didUpdateNowPlayingApplicationBundleIdentifierForOrigin:
originObserver:didUpdatePlaybackStateForOrigin:
originObserver:didUpdateSupportedCommandsForOrigin:
originObserver:didUpdateElapsedTimeForOrigin:
originObserver:didUpdateTimestampForOrigin:
originObserver:didUpdatePlaybackQueueForOrigin:
nowPlayingOriginsDidUpdateForController:
activeNowPlayingOriginDidUpdateForController:
_serialQueue
_companionOrigin
_pendingRegistrationOfCompanionOrigin
_companionOriginRegistrationRetryInterval
_currentNowPlayingInfoDigest
_currentNowPlayingInfo
_currentNowPlayingArtworkDigest
_currentNowPlayingArtworkData
_currentSupportedCommandsDigest
_currentSupportedCommands
_currentNowPlayingApplicationInfoDigest
_currentNowPlayingApplicationInfo
_localEntityInfoCache
_artworkDataByDigestCache
_messageCenter
_clientListener
_pendingMediaRemoteCommandResultHandlers
_commandResultHandlerAccessQueue
_currentCloudAvailabilityProtobufData
_currentSpecializedQueueInfoProtobufData
_isObservingDeviceLockStatus
_playbackQueue
_currentPlaybackQueueDigest
_generalNowPlayingController
_nanoMediaNowPlayingController
_cachedGeneralNowPlayingInfo
_cachedNanoMediaNowPlayingInfo
Starting transaction %@.
Ending transaction %@.
Received SIGTERM; exiting.
Received notifyd event type: %@, name: %s.
[NMRD] Hello, world!
[NMRD] Connectivity state changed to disconnected; clearing media remote state.
[NMRD] Connectivity state changed to connected; refreshing media remote state.
[NMRD] Lost connection to client with PID %d.
[NMRD] Accepted connection to client with PID %d.
[NMRD] Received a MediaRemote command response IDS message without a reply identifier! This should never happen!
[NMRD] Failed to find a pending command reply handler to invoke for IDS message reply (ID: %@).
[NMRD] Invoking command reply handler for MediaRemote command %d with handlerReturnStatuses [%@]%@ (ID: %@).
[NMRD] Skipped requesting artwork.
[NMRD] Successfully cached a new icon sized %lu Bytes for %@
[NMRD] Handling playback queue data
[NMRD] Attempted to set supported commands without a Companion origin; deferring until custom origin is registered.
[NMRD] Bundle identifier is nil. Skip updating now playing application info.
[NMRD] Setting supported commands for origin %@: %@
[NMRD] Failed to set the now playing application's supported commands for the Companion origin (%u).
[NMRD] Received set state message for now playing application info, with companionBundleID: %@, watchBundleID: %@, displayName: %@, playbackState: %@.
[NMRD] Requesting the new icon for %@
[NMRD] Failed to remove now playing client (%@) with error: %@
[NMRD] Attempted to set now playing application info without a Companion origin; deferring until custom origin is registered.
[NMRD] Setting now playing application info for origin %@: %@-%@
[NMRD] Failed to set the now playing application's playback state for the Companion origin (%u).
[NMRD] Failed to set the now playing application's display name for the Companion origin (%@).
[NMRD] Failed to set the now playing application's bundle ID for the Companion origin (%@).
[NMRD] Successfully registered a media remote origin for the Companion.
[NMRD] Failed to register a media remote origin for the Companion. Attempting again in %.2fs.
[NMRD] Registering playback queue callback
[NMRD] Received media remote command %d for custom origin %@ (options: %@).
[NMRD] Request to deliver IDS message for MediaRemote command %d failed immediately with error "%@".
[NMRD] Queueing up an async. command result handler for MediaRemote command %d, and waiting for the Companion to reply.
[NMRD] Attempted to set now playing info without a Companion origin; deferring until custom origin is registered.
[NMRD] Setting now playing info for origin %@: %@
[NMRD] There is artwork data available; re-inserting into the now playing info.
[NMRD] There is no artwork data available; sending the now playing info as-is.
[NMRD] Failed to set playback queue with error: %@
[NMRD] Attempted to set now playing playback queue without a Companion origin.
[NMRD] Requesting snapshot because now playing info updated.  origin: %@, briefInfo: %@
[NMRD] Requesting snapshot because now playing info updated for nano media now playing controller. briefInfo: %@
[NMRD] Not requesting snapshot for bundle identifier %@
[NMRD] Requesting snapshot because active now playing origin updated
[NMRD] [snapshot] activeOrigin: %@
[NMRD] Requesting a new snapshot for %@.
[NMRD] Successfully registered %@ as priviledged background client.
[NMRD] Failed registered %@ as priviledged background client due to %@
[NMRD] Playback queue changed, posting notification
[NMRD] Playback queue content items changed, posting changed item list (count %zd)
[NMRD] Setting the active origin to %@
[NMRD] Active origin is now %@.
[NMRD] Failed to set active origin to %@!
[NMRD] Failed to set nil active origin %@
NMRRunAssertion
NMRDAdditions
NMPerfTestingUtil
_NMRPendingMediaRemoteCommandResultHandler
_NMRItemEntityInfo
NMRServiceInterface
NSObject
NMRDaemonServer
NSXPCListenerDelegate
NMRIDSMessageCenterDelegate
NMRPlaybackQueueDelegate
NMCConnectivityObserver
NMROriginObserverDelegate
NMRNowPlayingControllerDelegate
@12@0:4@8
v8@0:4
@8@0:4
@"NSString"
@12@0:4B8
B8@0:4
v16@0:4@8@12
d8@0:4
I8@0:4
v12@0:4I8
@?8@0:4
v12@0:4@?8
v12@0:4@8
@"NSNumber"
B12@0:4@8
#8@0:4
@12@0:4:8
@16@0:4:8@12
@20@0:4:8@12@16
B12@0:4#8
B12@0:4:8
Vv8@0:4
^{_NSZone=}8@0:4
B12@0:4@"Protocol"8
@"NSString"8@0:4
v20@0:4I8@12@?16
v16@0:4@8@?12
v20@0:4I8@"NSDictionary"12@?<v@?@"NSDictionary">16
v12@0:4@?<v@?@"NSData">8
v16@0:4@"NSNumber"8@?<v@?i>12
B16@0:4@8@12
B16@0:4@"NSXPCListener"8@"NSXPCConnection"12
v24@0:4@8@12B16@20
v24@0:4@"NMRIDSMessageCenter"8@"NSString"12B16@"NSError"20
v12@0:4@"NMRPlaybackQueue"8
v16@0:4@"NMRPlaybackQueue"8@"NSArray"12
v16@0:4@8B12
v16@0:4@"NMCConnectivityManager"8B12
v16@0:4@8@"NMROrigin"12
v12@0:4@"NMRNowPlayingController"8
v28@0:4@8@12B16B20B24
v20@0:4@8@12@16
v12@0:4^v8
v24@0:4I8^v12@16@?20
@"NSObject<OS_dispatch_queue>"
@"NSData"
@"NSDictionary"
@"NSArray"
@"NMRNowPlayingApplicationInfo"
@"NSCache"
@"NMRIDSMessageCenter"
@"NSXPCListener"
@"NSMutableDictionary"
@"NMRPlaybackQueue"
@"NMRNowPlayingController"
bplist00
BuildMachineOSBuild_
CFBundleAllowMixedLocalizations_
CFBundleDevelopmentRegion_
CFBundleExecutable_
CFBundleIdentifier_
CFBundleInfoDictionaryVersion_
CFBundleSupportedPlatformsZDTCompiler_
DTPlatformBuild^DTPlatformName_
DTPlatformVersionZDTSDKBuildYDTSDKNameWDTXcode\DTXcodeBuild_
MinimumOSVersion^UIDeviceFamilyW16B2657
WEnglish_
nanomediaremotedS6.0
^WatchSimulator_
"com.apple.compilers.llvm.clang.1_0V15R835^watchsimulatorS4.1_
watchsimulator4.1T0900U9A229
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>com.apple.carousel.snapshotservice.privileged</key>
<true/>
<key>com.apple.private.ids.messaging</key>
<array>
<string>com.apple.private.alloy.audiocontrol.music</string>
<string>com.apple.private.alloy.mediaremote</string>
</array>
<key>com.apple.private.ids.messaging.urgent-priority</key>
<array>
<string>com.apple.private.alloy.audiocontrol.music</string>
<string>com.apple.private.alloy.mediaremote</string>
</array>
<key>com.apple.private.tcc.allow</key>
<array>
<string>kTCCServiceMediaLibrary</string>
</array>
</dict>
</plist>
