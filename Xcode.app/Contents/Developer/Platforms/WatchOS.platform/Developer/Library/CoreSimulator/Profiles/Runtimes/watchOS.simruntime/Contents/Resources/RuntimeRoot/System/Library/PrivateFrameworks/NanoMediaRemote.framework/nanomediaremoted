v4@?0
NanoMusicCore
NanoMediaRemote
NanoAudioControl
NanoMusicSync
NanoMediaUI
NanoMediaTool
com.apple.nanomusic
<%@ %p '%@'>
name
T@"NSString",R,N,V_name
%@-%@-%@
%@-%@
com.apple.Music
com.apple.NanoRadio
com.apple.NanoMusic
com.apple.podcasts
persistentID
T@"NSNumber",C,N,V_persistentID
albumPersistentID
T@"NSNumber",C,N,V_albumPersistentID
com.apple.nanomediaremoted.NMRDaemonOriginController
v8@?0^{__CFError=}4
v20@?0^v4I8^{__CFDictionary=}12@?<v@?^{__CFArray=}>16
v12@?0C4^v8
v8@?0C4
v8@?0I4
v16@?0^v4^v8@?<v@?^v^{__CFError=}>12
v24@?0q4r^@12I16^B20
hash
TI,R
superclass
T#,R
description
T@"NSString",R,C
debugDescription
delegate
T@"<NMRDaemonOriginControllerDelegate>",W,N,V_delegate
originIdentifier
T@"NSNumber",R,N
currentGetStateMessageData
T@"NSData",R,N
PerformanceTestingEnabled
yyyy-MM-dd-HHmmssSSS
/tmp/NanoMusic-%@-PPT-Results_%@.plist
com.apple.notifyd.matching
v8@?0@"NSObject<OS_xpc_object>"4
com.apple.NanoNowPlaying
MediaRemoteGetState
MediaRemoteGetArtwork
MediaRemoteGetProxiedOrigins
GetCloudAvailability
PrewarmSystemMusicApp
DiscoverAndConnectEndpoints
command
TI,N,V_command
commandResultsHandler
T@?,C,N,V_commandResultsHandler
com.apple.nanomediaremoted.NMRDaemonServer
com.apple.nanomediaremoted.commandResultHandlerAccessQueue
v12@?0^{__CFNumber=}4^{__CFArray=}8
; failed to send the command IDS message
; failed to receive a command response IDS message in time
com.apple.WebKit.WebContent
v12@?0B4@"NSError"8
alloc
initWithName:
init
copy
dealloc
class
stringWithFormat:
runAssertionWithName:
description
.cxx_destruct
name
_name
title
album
artist
applicationBundleIdentifier
isLocal
isEqualToString:
isPlayingRadio
briefInfoIncludingBundleIdentifier:
localBundleIdentifierForOrigin:
persistentID
setPersistentID:
albumPersistentID
setAlbumPersistentID:
_persistentID
_albumPersistentID
displayName
setDelegate:
uniqueIdentifier
numberWithInt:
messageWithNowPlayingInfoDigest:applicationInfoDigest:supportedCommandsDigest:playbackQueueDigest:originIdentifier:
protobufData
_registerMediaRemoteOrigin
_unregisterMediaRemoteOrigin
deviceInfoData
numberWithUnsignedInt:
arrayWithObjects:count:
originController:sendMediaRemoteCommand:playerPath:withOptions:commandResultHandler:
_updateMediaRemoteWithCurrentRemoteDeviceSupportedCommands
_updateMediaRemoteWithCurrentRemoteDeviceNowPlayingApplicationInfo
_updateMediaRemoteWithCurrentRemoteDeviceNowPlayingInfo
_registerPlaybackQueueCallbackForOrigin:
_scheduleRecoveryFromRegistrationFailure
data
initWithProtobufData:
nowPlayingInfoData
_handleMediaRemoteSetNowPlayingInfoStateMessage:
supportedCommandsData
_handleMediaRemoteSetSupportedCommandsStateMessage:
applicationInfoData
_handleMediaRemoteSetNowPlayingApplicationInfoStateMessage:
playbackQueueData
_handleMediaRemotePlaybackQueueData:
jpegArtwork
originalDigest
_handleMediaRemoteSetNowPlayingArtwork:digest:
mutableCopy
objectForKeyedSubscript:
boolValue
_localEntityInfoForRemoteDeviceItemPersistentID:
setObject:forKeyedSubscript:
removeObjectForKey:
isEqual:
_cachedArtworkWithDigest:
_localArtworkDataForItemWithPersistentID:
_cacheArtworkData:withDigest:
originControllerRequestArtwork:
companionBundleIdentifier
playbackState
watchBundleIdentifier
localizedDisplayName
_removeNowPlayingClientForBundleID:
updateWithData:
fullPlaybackQueueData
setValue:forKey:
setNowPlayingInfo:
_updateMediaRemotePlaybackQueue
processID
copyFullMediaRemotePlaybackQueueIncludingMetadata:
copyMediaRemotePlaybackQueueWithRange:includeMetadata:
count
objectForKey:
sharedLibrary
predicateWithProperty:equalToValue:
queryWithLibrary:predicate:
numberWithLongLong:
enumeratePersistentIDsAndProperties:usingBlock:
setObject:forKey:
_localArtworkURLForItemWithPersistentID:
dataWithContentsOfURL:
longLongValue
initWithPersistentID:inLibrary:
valueForProperty:
length
pathWithComponents:
fileURLWithPath:isDirectory:
setTotalCostLimit:
sharedArtworkCache
setObject:forKey:cost:
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
debugDescription
playbackQueueDidChange:
playbackQueue:contentItemsDidChange:
initWithOriginInfo:
originIdentifier
currentGetStateMessageData
registerMediaRemoteOrigin
unregisterMediaRemoteOrigin
updateWithOriginInfo:
handleMediaRemoteSetStateMessage:
handleMediaRemoteSetArtworkMessage:
delegate
_serialQueue
_originRef
_originInfo
_originRegistrationRetryInterval
_originRegistrationSemaphore
_wantsMediaRemoteOrigin
_currentNowPlayingInfoDigest
_currentNowPlayingInfo
_currentNowPlayingArtworkDigest
_currentNowPlayingArtworkData
_currentSupportedCommandsDigest
_currentSupportedCommands
_currentNowPlayingApplicationInfoDigest
_currentNowPlayingApplicationInfo
_playbackQueue
_currentPlaybackQueueDigest
_localEntityInfoCache
_delegate
date
setDateFormat:
stringFromDate:
writeToFile:atomically:
standardUserDefaults
boolForKey:
writeResultsToDisk:forTest:
perfTestingEnabled
machAbsoluteTimeGetCurrent
server
gizmoServer
command
setCommand:
commandResultsHandler
setCommandResultsHandler:
_command
_commandResultsHandler
_handleMediaRemoteSetStateMessage:
setMessageHandlerTarget:action:forIncomingMessagesOfType:
_handleMediaRemoteSetArtworkMessage:
_handleRemoteMediaCommandResponseMessage:
_handleSetCloudAvailabilityMessage:
_handleMediaRemoteSetProxiedOriginsMessage:
_handleMediaRemoteUpdateProxiedOriginsMessage:
startHandlingMessages
sharedTimeline
initWithOptions:
addObserverDelegate:
beginObservingOrigins
dictionary
_registerMediaAppsAsPriviledgedBackgroundClients
initWithMachServiceName:
resume
sharedManager
addObserver:
refreshMediaRemoteStateIfNecessary
_requestInitialStateIfUnlocked
isConnected
allValues
countByEnumeratingWithState:objects:count:
removeAllObjects
_requestProxiedOrigins
_refreshMediaRemoteStateIfNecessary
dictionaryWithObjects:forKeys:count:
_handleMediaRemoteCommand:withOriginIdentifier:playerPath:options:commandResultHandler:
sendMessageWithProtobufData:messageType:priority:timeout:bypassDuet:skipStorage:expectReply:queueOneIdentifier:resultingMessageIdentifier:error:
availabilityForTrackPID:
processIdentifier
sendMediaRemoteCommand:withCommandOptions:toOriginWithUniqueIdentifier:commandResultHandler:
prewarmCompanionSystemMusicApp
fetchCompanionCloudAvailabilityWithCompletionHandler:
discoverAndConnectEndpoints
fetchTrackAssetAvailabilityForTrackPID:completionHandler:
interfaceWithProtocol:
setExportedInterface:
setExportedObject:
setInvalidationHandler:
code
_invokeCommandResultHandlerForIDSMessageIdentifier:commandErrorCode:returnStatuses:failedToSend:expired:complainIfMissing:
context
incomingResponseIdentifier
errorCode
handlerReturnStatuses
setWithCapacity:
_refreshMediaRemoteStateForOriginController:
addObject:
allKeys
setWithArray:
minusSet:
_requestArtworkWithOriginIdentifier:
messageWithCommand:bundleID:options:originIdentifier:
_pushPendingMediaRemoteCommandResultHandler:withIdentifier:
_popPendingMediaRemoteCommandResultHandlerWithIdentifier:
componentsJoinedByString:
_requestInitialState
_requestCloudAvailabilityUpdate
nowPlayingStateForOrigin:
_shouldRequestSnapshotForBundleIdentifier:
_requestSnapshotForBundleIdentifier:
activeOrigin
_updateActiveOrigin
setWithObject:
containsObject:
_registerPriviledgedBackgroundClientForBundleIdentifiler:
sharedInstance
invalidSnapshotContext
setSnapshotContext:forBundleID:
userInfo
registerPrivilegedBackgroundClient:withPriority:leeway:usesBudget:completion:
activeNowPlayingOrigin
mediaRemoteOrigin
listener:shouldAcceptNewConnection:
messageCenter:messageWithIdentifier:didSendWithSuccess:error:
manager:connectivityDidChange:
originObserver:didUpdateNowPlayingInfoForOrigin:
originObserver:didUpdateNowPlayingApplicationBundleIdentifierForOrigin:
originObserver:didUpdatePlaybackStateForOrigin:
originObserver:didUpdateSupportedCommandsForOrigin:
originObserver:didUpdateElapsedTimeForOrigin:
originObserver:didUpdateTimestampForOrigin:
originObserver:didUpdatePlaybackQueueForOrigin:
nowPlayingOriginsDidUpdateForController:
activeNowPlayingOriginDidUpdateForController:
_messageCenter
_clientListener
_isObservingDeviceLockStatus
_currentCloudAvailabilityProtobufData
_lastProxiedOriginsRequestMessageIdentifier
_pendingMediaRemoteCommandResultHandlers
_commandResultHandlerAccessQueue
_generalNowPlayingController
_nanoMediaNowPlayingController
_cachedGeneralNowPlayingInfo
_cachedNanoMediaNowPlayingInfo
_originControllers
Starting transaction %@.
Ending transaction %@.
[NMRD] (%@) Creating origin controller for %@
[NMRD] (%@) Failed to update deviceInfo with error: %@.
[NMRD] (%@) Successfully updated deviceInfo for %@.
[NMRD] (%@) Will register a media remote origin for %@.
[NMRD] (%@) Ignoring MRMediaRemoteRegisterCustomOriginWithDeviceInfo callback.
[NMRD] (%@) Successfully registered a media remote origin for %@.
[NMRD] (%@) Ignoring MRMediaRemoteSetCommandHandlerCallbackForOrigin callback.
[NMRD] (%@) Got media remote command %d for origin %@
[NMRD] (%@) Failed to register a media remote origin for %@.
[NMRD] (%@) Will unregister a media remote origin for %@.
[NMRD] (%@) Ignoring MRMediaRemoteRemoveCustomOrigin callback.
[NMRD] (%@) Successfully unregistered a media remote origin for %@.
[NMRD] (%@) Failed to unregister a media remote origin for %@.
[NMRD] (%@) Attempting to fix registration of media remote origin for %@ again in %.2fs.
[NMRD] (%@) Skipped requesting artwork.
[NMRD] (%@) Received set state message for now playing application info, with remoteDeviceBundleID: %@, watchBundleID: %@, displayName: %@, playbackState: %@.
[NMRD] (%@) Handling playback queue data
[NMRD] (%@) Attempted to set now playing info without a RemoteDevice origin; deferring until custom origin is registered.
[NMRD] (%@) Bundle identifier is nil. Skip updating now playing application info.
[NMRD] (%@) Setting now playing info for origin %@: %@
[NMRD] (%@) There is artwork data available; re-inserting into the now playing info.
[NMRD] (%@) There is no artwork data available; sending the now playing info as-is.
[NMRD] (%@) Attempted to set now playing playback queue without a RemoteDevice origin.
[NMRD] (%@) Failed to set playback queue with error: %@
[NMRD] (%@) Attempted to set supported commands without a RemoteDevice origin; deferring until custom origin is registered.
[NMRD] (%@) Setting supported commands for origin %@: %@
[NMRD] (%@) Failed to set the now playing application's supported commands for the RemoteDevice origin (%u).
[NMRD] (%@) Attempted to set now playing application info without a RemoteDevice origin; deferring until custom origin is registered.
[NMRD] (%@) Setting now playing application info for origin %@: %@-%@
[NMRD] (%@) Failed to set the now playing application's playback state for the RemoteDevice origin (%u).
[NMRD] (%@) Failed to set the now playing application's display name for the RemoteDevice origin (%@).
[NMRD] (%@) Failed to set the now playing application's bundle ID for the RemoteDevice origin (%@).
[NMRD] (%@) Failed to remove now playing client (%@) with error: %@
[NMRD] (%@) Registering playback queue callback
[NMRD] (%@) Playback queue changed, posting notification
[NMRD] (%@) Playback queue content items changed, posting changed item list (count %lu)
Received SIGTERM; exiting.
Received notifyd event type: %@, name: %s.
[NMRD] Hello, world!
[NMRD] Connectivity state changed to disconnected; clearing media remote state.
[NMRD] Connectivity state changed to connected; refreshing media remote state.
[NMRD] Lost connection to client with PID %d.
[NMRD] Accepted connection to client with PID %d.
[NMRD] Retrying proxied origins request because previous message (%@) timed out.
[NMRD] Received a MediaRemote command response IDS message without a reply identifier! This should never happen!
[NMRD] Receieved message for origin %@: %@
[NMRD] Received media remote command %d for custom origin %@ (options: %@).
[NMRD] Request to deliver IDS message for MediaRemote command %d failed immediately with error "%@".
[NMRD] Queueing up an async. command result handler for MediaRemote command %d, and waiting for the Companion to reply.
[NMRD] Phone is not currently connected. Skipped requesting proxied origins.
[NMRD] Failed to find a pending command reply handler to invoke for IDS message reply (ID: %@).
[NMRD] Invoking command reply handler for MediaRemote command %d with error: (%u), handlerReturnStatuses [%@]%@ (ID: %@).
[NMRD] Requesting snapshot because now playing info updated.  origin: %@, briefInfo: %@
[NMRD] Requesting snapshot because now playing info updated for nano media now playing controller. briefInfo: %@
[NMRD] Not requesting snapshot for bundle identifier %@
[NMRD] Requesting snapshot because active now playing origin updated
[NMRD] [snapshot] activeOrigin: %@
[NMRD] Requesting a new snapshot for %@.
[NMRD] Successfully registered %@ as priviledged background client.
[NMRD] Failed registered %@ as priviledged background client due to %@
[NMRD] Setting the active origin to %@
[NMRD] Active origin is now %@.
[NMRD] Failed to set active origin to %@!
[NMRD] Failed to set nil active origin %@
NMRRunAssertion
NMRDAdditions
_NMRItemEntityInfo
NMRDaemonOriginController
NMRPlaybackQueueDelegate
NSObject
NMPerfTestingUtil
_NMRPendingMediaRemoteCommandResultHandler
NMRServiceInterface
NMRDaemonServer
NSXPCListenerDelegate
NMRIDSMessageCenterDelegate
NMCConnectivityObserver
NMROriginObserverDelegate
NMRNowPlayingControllerDelegate
NMRDaemonOriginControllerDelegate
@12@0:4@8
v8@0:4
@8@0:4
@"NSString"
@12@0:4B8
v12@0:4@8
@"NSNumber"
v16@0:4@8@12
B12@0:4@8
#8@0:4
@12@0:4:8
@16@0:4:8@12
@20@0:4:8@12@16
B8@0:4
B12@0:4#8
B12@0:4:8
Vv8@0:4
I8@0:4
^{_NSZone=}8@0:4
B12@0:4@"Protocol"8
@"NSString"8@0:4
v12@0:4@"NMRPlaybackQueue"8
v16@0:4@"NMRPlaybackQueue"8@"NSArray"12
v12@0:4^v8
@"NSObject<OS_dispatch_queue>"
@"NMROriginInfo"
@"NSObject<OS_dispatch_semaphore>"
@"NSData"
@"NSDictionary"
@"NSArray"
@"NMRNowPlayingApplicationInfo"
@"NMRPlaybackQueue"
@"NSCache"
@"<NMRDaemonOriginControllerDelegate>"
d8@0:4
v12@0:4I8
@?8@0:4
v12@0:4@?8
v24@0:4I8@12i16@?20
v16@0:4@8@?12
v24@0:4I8@"NSDictionary"12i16@?<v@?@"NSDictionary">20
v12@0:4@?<v@?@"NSData">8
v16@0:4@"NSNumber"8@?<v@?i>12
B16@0:4@8@12
B16@0:4@"NSXPCListener"8@"NSXPCConnection"12
v24@0:4@8@12B16@20
v24@0:4@"NMRIDSMessageCenter"8@"NSString"12B16@"NSError"20
v16@0:4@8B12
v16@0:4@"NMCConnectivityManager"8B12
v16@0:4@8@"NMROrigin"12
v12@0:4@"NMRNowPlayingController"8
v28@0:4@8I12^v16@20@?24
v28@0:4@"NMRDaemonOriginController"8I12^v16@"NSDictionary"20@?<v@?^{__CFArray=}>24
v12@0:4@"NMRDaemonOriginController"8
v28@0:4I8@12^v16@20@?24
v32@0:4@8I12@16B20B24B28
@"NMRIDSMessageCenter"
@"NSXPCListener"
@"NSMutableDictionary"
@"NMRNowPlayingController"
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>BuildMachineOSBuild</key>
<string>17A405001</string>
<key>CFBundleAllowMixedLocalizations</key>
<true/>
<key>CFBundleDevelopmentRegion</key>
<string>English</string>
<key>CFBundleExecutable</key>
<string>nanomediaremoted</string>
<key>CFBundleIdentifier</key>
<string>nanomediaremoted</string>
<key>CFBundleInfoDictionaryVersion</key>
<string>6.0</string>
<key>CFBundleShortVersionString</key>
<string>1.0</string>
<key>CFBundleSupportedPlatforms</key>
<array>
<string>WatchSimulator</string>
</array>
<key>CFBundleVersion</key>
<string>847.1</string>
<key>DTCompiler</key>
<string>com.apple.compilers.llvm.clang.1_0</string>
<key>DTPlatformBuild</key>
<string></string>
<key>DTPlatformName</key>
<string>watchsimulator</string>
<key>DTPlatformVersion</key>
<string>5.0</string>
<key>DTSDKBuild</key>
<string>16R312z</string>
<key>DTSDKName</key>
<string>watchsimulator5.0</string>
<key>DTXcode</key>
<string>1000</string>
<key>DTXcodeBuild</key>
<string>10L177f</string>
<key>MinimumOSVersion</key>
<string>5.0</string>
<key>UIDeviceFamily</key>
<array>
<integer>1</integer>
<integer>4</integer>
</array>
</dict>
</plist>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>com.apple.carousel.snapshotservice.privileged</key>
<true/>
<key>com.apple.private.ids.messaging</key>
<array>
<string>com.apple.private.alloy.audiocontrol.music</string>
<string>com.apple.private.alloy.mediaremote</string>
</array>
<key>com.apple.private.ids.messaging.urgent-priority</key>
<array>
<string>com.apple.private.alloy.audiocontrol.music</string>
<string>com.apple.private.alloy.mediaremote</string>
</array>
<key>com.apple.private.tcc.allow</key>
<array>
<string>kTCCServiceMediaLibrary</string>
</array>
<key>com.apple.security.exception.mach-lookup.global-name</key>
<array>
<string>com.apple.carousel.connectionstatusservice</string>
</array>
<key>com.apple.security.exception.shared-preference.read-write</key>
<array>
<string>com.apple.NanoAudioControl</string>
<string>com.apple.NMUNowPlayingTimeline</string>
<string>com.apple.ToneLibrary</string>
<string>com.apple.celestial</string>
</array>
<key>platform-application</key>
<true/>
<key>seatbelt-profiles</key>
<array>
<string>nanomediaremoted</string>
</array>
</dict>
</plist>
zPLR
