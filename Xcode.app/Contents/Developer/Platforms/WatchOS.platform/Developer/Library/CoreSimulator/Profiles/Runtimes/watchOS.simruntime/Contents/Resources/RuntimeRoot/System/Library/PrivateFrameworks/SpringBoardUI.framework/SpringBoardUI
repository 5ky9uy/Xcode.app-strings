initWithTarget:action:
alloc
init
_setForceLevelClassifier:
numberWithInteger:
arrayWithObjects:count:
setAllowedTouchTypes:
setMinimumPressDuration:
setRequiredPreviewForceState:
removeProgressObserver:
dealloc
percentComplete
velocity
reset
touchesBegan:withEvent:
view
setView:
_initWithView:targetState:minimumRequiredState:useLinearClassifier:
addProgressObserver:
allowedTouchTypes
countByEnumeratingWithState:objects:count:
type
containsObject:
isEqual:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
description
debugDescription
interactionProgressDidUpdate:
interactionProgress:didEnd:
pressDuration
relativeTouchForce
touchForceVelocity
_gestureRecognizerWillHandleTouches:
.cxx_destruct
forceTouchCompleted
_initialMediaTime
_interactionProgress
_forceTouchCompleted
removeAllObjects
objectForKeyedSubscript:
settingsForPrivateStyle:
setGrayscaleTintAlpha:
setGrayscaleTintLevel:
setColorTintAlpha:
setSaturationDeltaFactor:
setBlurRadius:
setObject:forKeyedSubscript:
uiEnvironment
setUiEnvironment:
hideOtherWindowsDuringAppearance
setHideOtherWindowsDuringAppearance:
_uiEnvironment
_hideOtherWindowsDuringAppearance
copyWithZone:
initWithOwner:
owner
_owner
stringWithUTF8String:
currentHandler
handleFailureInMethod:object:file:lineNumber:description:
copy
setObject:forKey:
removeObjectForKey:
allValues
invalidate
sceneHandle:didCreateScene:
sceneHandle:didDestroyScene:
sceneHandle:didUpdateContentState:
sceneHandle:didUpdateSettingsWithDiff:previousSettings:
sceneHandle:didUpdateClientSettingsWithDiff:transitionContext:
sceneHandle:didUpdatePairingStatusForExternalSceneIdentifiers:
observeCreate:
observeDestroy:
observeDidUpdateContentState:
observeDidUpdateSettings:
observeDidUpdateClientSettings:
observeDidUpdatePairingStatusForExternalIdentifiers:
removeObserverForToken:
_createBlocks
_destroyBlocks
_didUpdateContentStateBlocks
_didUpdateSettingsBlocks
_didUpdateClientSettingsBlocks
_didUpdatePairingStatusBlocks
_invalidated
initWithURL:
isValid
isCallAction
_dialRequest
setElement:
overrideForElement:
setHidden:
descriptionWithMultilinePrefix:
succinctDescriptionBuilder
build
builderWithObject:
appendObject:withName:
appendBool:withName:
appendString:withName:skipIfEmpty:
descriptionBuilderWithMultilinePrefix:
overrideForHiddenElement:
succinctDescription
element
isHidden
text
setText:
_hidden
_element
_text
factoryWithDuration:
initWithSceneHandle:referenceSize:orientation:hostRequester:
initWithFrame:
setOpaque:
setClipsToBounds:
setBackgroundView:
sceneViewHostingPriority:
sceneViewHostingRequestIdentifier:
initWithFormat:
addObserver:
_enableHostingIfPossible
removeObserver:
_disableHosting
sceneIdentifier
appendPointer:withName:
displayMode
effectiveDisplayMode
appendSuper
bounds
setFrame:
_transitionFromDisplayMode:showingView:toDisplayMode:showingView:withAnimationFactory:completion:
setAlpha:
addSubview:
removeFromSuperview
setBackgroundColor:
insertSubview:atIndex:
setDelegate:
_reloadPlaceholderContentIfNecessary
_evaluateEffectiveDisplayModeWithAnimationFactory:completion:
sceneHandle
sceneIfExists
hostManager
hostingRequester
snapshotContextForRequester:
_configureSceneSnapshotContext:
createSnapshotWithContext:
systemPinkColor
_clearSnapshotViews
layoutSubviews
superview
sendSubviewToBack:
isEqualToString:
_shouldAnimatePropertyWithKey:
_hotSwapPlaceholderContentView
_hotSwapLiveSnapshotView
_shouldObserveSceneHostContentState
_recheckLiveContentDependencies
enableHostingForRequester:priority:
disableHostingForRequester:
_configureViewForEffectiveDisplayMode:
_viewForDisplayMode:
_bestDisplayModeLessThanMode:
isContentReady
window
isHiddenOrHasHiddenAncestor
_addContentLikeViewToHeierarchyForTransitionIfPossible:
layer
displayIdentity
currentConfiguration
scale
setRasterizationScale:
setShouldRasterize:
_representsTranslucentContent
isOpaque
crossfadeViewWithStartView:endView:translucent:
setAnimationFactory:
crossfadeWithCompletion:
animateWithFactory:actions:completion:
_shouldViewBeInHeirarchyForTransition:
_configurePlaceholderContentView
_configureLiveSnapshotView
_configureHostView
sceneView:requestsPlaceholderContentViewWithContext:
newSnapshot
snapshotViewForSnapshot:
setMinificationFilter:
scene
hostViewForRequester:appearanceStyle:
setNeedsLayout
_configureSceneLiveHostView:
performWithoutAnimation:
defaultDisplayModeAnimationFactory
placeholderContentViewProviderContentDidUpdate:
initWithCoder:
initWithSceneHandle:referenceSize:orientation:
setCustomContentView:
setPlaceholderContentProvider:
setPlaceholderContentContext:
setDisplayMode:animationFactory:completion:
sizeThatFits:
_refresh
_updateReferenceSize:andOrientation:
referenceSize
orientation
customContentView
backgroundView
placeholderContentProvider
placeholderContentContext
hostingPriority
_sceneHandle
_referenceSize
_orientation
_requestedDisplayMode
_effectiveDisplayMode
_hostingPriority
_hostingRequester
_placeholderContentContext
_customContentView
_placeholderContentView
_liveSnapshotView
_hostView
_crossfadeView
_backgroundView
_placeholderContentProvider
initWithNibName:bundle:
_layoutForDataProvider:
sharedInstance
warmUpForFeedback:withReason:
raise:format:
initWithDataProvider:
coolDownForFeedback:withReason:
dataProvider
layout
_setLayoutDebuggingIdentifier:
setTranslatesAutoresizingMaskIntoConstraints:
parallaxSettings
newIconViewCopy
initWithIconView:
primaryViewController
initWithChildViewController:
iconImageCornerRadius
_setContinuousCornerRadius:
addChildViewController:
didMoveToParentViewController:
secondaryViewController
setContentAlpha:
insertSubview:below:
dictionaryWithObjects:forKeys:count:
constraintsWithVisualFormat:options:metrics:views:
activateConstraints:
iconViewFrame
mainScreen
fixedCoordinateSpace
convertRect:fromCoordinateSpace:
numberWithFloat:
iconImageInsets
addObjectsFromArray:
leftAnchor
constraintEqualToAnchor:
addObject:
rightAnchor
topAnchor
bottomAnchor
constraintEqualToAnchor:constant:
heightAnchor
widthAnchor
arrayWithArray:
setPriority:
constraintLessThanOrEqualToAnchor:constant:
constraintGreaterThanOrEqualToAnchor:constant:
centerXAnchor
trailingAnchor
centerYAnchor
leadingAnchor
setDidMoveToWindowHandler:
_handleTapGestureRecognizer:
addGestureRecognizer:
viewDidLayoutSubviews
contentNativeSize
childViewController
systemLayoutSizeFittingSize:withHorizontalFittingPriority:verticalFittingPriority:
setContentNativeSize:
_peekAnimated:withRelativeTouchForce:allowSmoothing:completionHandler:
count
actuateFeedback:
_presentAnimated:withCompletionHandler:
dismissAnimated:withCompletionHandler:
delegate
iconForceTouchViewControllerDidDismiss:
iconForceTouchViewControllerWillDismiss:
_dismissAnimated:withCompletionHandler:
interfaceOrientation
gestureRecognizer
screen
coordinateSpace
layoutStyle
_revealWithRelativeForce:
setTransform:
_scaleIconViewWithPercent:
animateWithDuration:animations:completion:
wrapperViewCornerRadius
layoutIfNeeded
deactivateConstraints:
beginAppearanceTransition:animated:
setGaussianBlurRadius:
endAppearanceTransition
animateWithSettings:actions:completion:
runningPropertyAnimatorWithDuration:delay:options:animations:completion:
initWithDuration:curve:animations:
addCompletion:
startAnimation
setEffectStrength:
zoomDownView
zoomDownCenter
state
locationInView:
gestureRecognizerShouldBegin:
gestureRecognizer:shouldRecognizeSimultaneouslyWithGestureRecognizer:
gestureRecognizer:shouldRequireFailureOfGestureRecognizer:
gestureRecognizer:shouldBeRequiredToFailByGestureRecognizer:
gestureRecognizer:shouldReceiveTouch:
gestureRecognizer:shouldReceivePress:
loadView
shouldAutomaticallyForwardAppearanceMethods
peekAnimated:withRelativeTouchForce:allowSmoothing:
presentAnimated:withCompletionHandler:
_visualEffectView
_parallaxView
_iconViewWrapperViewBelow
_primaryViewController
_secondaryViewController
_iconViewWrapperViewAbove
_initialLayoutConstraints
_showingLayoutConstraints
_presentCompletionHandlers
_dismissCompletionHandlers
_smoothedValue
_currentPeekProgress
_dataProvider
_state
_layout
_delegate
functionWithName:
settingsWithDuration:timingFunction:
functionWithControlPoints::::
settingsWithMass:stiffness:damping:timingFunction:
mutableCopy
setSpeed:
bundleForClass:
sbui_effectiveWindowForIsolation
_alertItemsController
activateAlertItem:
dismissOnLock
didPlayPresentationSound
sound
playInEvironments:completion:
deactivateForReason:
deactivateAlertItem:reason:
_setPresented:
_clearAlertController
setAlertItem:
setPreferredStyle:
configure:requirePasscodeForActions:
defaultCenter
postNotificationName:object:userInfo:
alertItemDidAppear
alertItemDidDisappear
initWithContentsOfFile:
alertController
contentViewController
sb_hasActiveKeyboardOnScreen
deactivate
deactivateForButton
lockLabel
shortLockLabel
performUnlockAction
allowMenuButtonDismissal
allowLockScreenDismissal
shouldShowInLockScreen
shouldShowInEmergencyCall
undimsScreen
unlocksScreen
reappearsAfterLock
reappearsAfterUnlock
playPresentationSound
didFailToActivate
willActivate
didActivate
willRelockForButtonPress:
willDeactivateForReason:
didDeactivateForReason:
forcesModalAlertAppearance
behavesSuperModally
allowInLoginWindow
alertPriority
dismissesOverlaysOnLockScreen
doCleanupAfterDeactivationAnimation
_deactivationCompleted
_alertController
_prepareNewAlertControllerWithLockedState:requirePasscodeForActions:
_iconImage
_attachmentImage
_noteVolumeOrLockPressed
_hasActiveKeyboardOnScreen
_didEverActivate
_displayActionButtonOnLockScreen
_publicDescription
dismiss
dismiss:
buttonDismissed
ignoreIfAlreadyDisplaying
setIgnoreIfAlreadyDisplaying:
allowInSetup
setAllowInSetup:
pendInSetupIfNotAllowed
setPendInSetupIfNotAllowed:
pendWhileKeyBagLocked
setPendWhileKeyBagLocked:
allowedBundleIDs
setAllowedBundleIDs:
allowInCar
setAllowInCar:
allowMessageInCar
setAllowMessageInCar:
_isPresented
_iconImagePath
setIconImagePath:
_attachmentImagePath
setAttachmentImagePath:
_allowedBundleIDs
_didEverDeactivate
_ignoreIfAlreadyDisplaying
_didPlayPresentationSound
_allowInSetup
_pendInSetupIfNotAllowed
_pendWhileKeyBagLocked
_allowInCar
_allowMessageInCar
_presented
badgeView
setBadgeView:
initWithObserver:
behaviorFromObserver:
observer
didCreateScene
setDidCreateScene:
didDestroyScene
setDidDestroyScene:
didUpdateContentState
setDidUpdateContentState:
didUpdateSettingsWithDiff
setDidUpdateSettingsWithDiff:
didUpdateClientSettingsWithDiff
setDidUpdateClientSettingsWithDiff:
didUpdatePairingStatusForExternalSceneIdentifiers
setDidUpdatePairingStatusForExternalSceneIdentifiers:
_didCreateScene
_didDestroyScene
_didUpdateContentState
_didUpdateSettingsWithDiff
_didUpdateClientSettingsWithDiff
_didUpdatePairingStatusForExternalSceneIdentifiers
_observer
_initWithDefinition:scene:displayIdentity:
weakObjectsHashTable
mapTableWithKeyOptions:valueOptions:
definition
_createMonitor
_setScene:
_commonInit
identity
identifier
isPairedWithExternalSceneID:
removeObject:
allObjects
objectForKey:
_enumerateObserversWithBlock:
initWithSceneID:
_didUpdateSettingsWithDiff:previousSettings:
_didUpdateClientSettingsWithDiff:transitionContext:
_didUpdatePairingStatusForExternalSceneIdentifiers:
contentState
_setContentState:
_didCreateScene:
_didDestroyScene:
_didUpdateHostContentState:
sceneMonitor:sceneWasCreated:
sceneMonitor:sceneWasDestroyed:
sceneMonitor:sceneSettingsDidChangeWithDiff:previousSettings:
sceneMonitor:effectiveSceneSettingsDidChangeWithDiff:previousSettings:
sceneMonitor:pairingStatusDidChangeForExternalSceneIDs:
sceneMonitor:sceneClientSettingsDidChangeWithDiff:transitionContext:
sceneMonitor:sceneWillCommitUpdateWithContext:
sceneMonitor:sceneDidCommitUpdateWithContext:
sceneHostManagerContentStateDidChange:
sceneHostManagerDidInvalidate:
sceneHostManager:willActivateRequester:
sceneHostManager:willDeactivateRequester:
_initWithScene:displayIdentity:
_initWithDefinition:displayIdentity:
isPairedWithExternalSceneWithIdentifier:
_setSceneMonitor:
_noteSceneCreated:
_noteSceneDestroyed:
_setDisplayIdentity:
_definition
_sceneMonitor
_manuallyControlsLifecycle
_setManuallyControlsLifecycle:
_scene
_contentState
_displayIdentity
_observers
_observersToObserverBehaviors
builder
appendObject:
clientSettings
diffFromSettings:toSettings:
client:didUpdateClientSettings:withDiff:transitionContext:
setClientSettings:
client:didReceiveActions:
client:attachLayer:
client:detachLayer:
setSettings:
appendArraySection:withName:skipIfEmpty:
appendBodySectionWithName:multilinePrefix:block:
host:configureWithDefinition:parameters:
host:didUpdateSettings:withDiff:transitionContext:completion:
host:didInvalidateWithTransitionContext:completion:
host:didReceiveActions:
initWithIdentifier:
updateClientSettingsWithBlock:
sendActions:
attachLayer:
detachLayer:
settings
layers
_valid
_identifier
_sceneHost
_settings
_clientSettings
_layers
viewDidDisappear:
alertControllerDidDisappear:
title
appendString:withName:
alertItem
alertControllerDelegate
setAlertControllerDelegate:
_alertItem
_alertControllerDelegate
iconForceTouchController:iconImageInsetsForGestureRecognizer:
iconForceTouchController:iconImageCornerRadiusForGestureRecognizer:
iconForceTouchController:wrapperViewCornerRadiusForGestureRecognizer:
iconForceTouchController:parallaxSettingsForGestureRecognizer:
iconForceTouchController:zoomDownViewForGestureRecognizer:
iconForceTouchController:zoomDownCenterForGestureRecognizer:
initWithDataSource:controller:gestureRecognizer:
dataSource
controller
iconForceTouchController:layoutStyleForGestureRecognizer:
iconForceTouchController:iconViewFrameForGestureRecognizer:
iconForceTouchController:primaryViewControllerForGestureRecognizer:
iconForceTouchController:secondaryViewControllerForGestureRecognizer:
gestureRecognizerWindow
iconForceTouchController:newIconViewCopyForGestureRecognizer:
_dataSourceRespondsTo
_dataSource
_controller
_gestureRecognizer
array
componentsJoinedByString:
initWithActions:gestureRecognizer:
actions
reversesActions
reverseObjectEnumerator
imagePosition
initWithAction:
setImagePosition:
initWithArrangedSubviews:
setAxis:
_updateKeylineViews
setActive:
_handleLongPressGestureRecognizer:
viewDidAppear:
addTarget:action:
viewWillDisappear:
removeTarget:action:
isViewLoaded
arrangedSubviews
addArrangedSubview:
actionPlatterViewControllerShouldRespondToTouches:
subviews
objectAtIndexedSubscript:
setHighlighted:
action
handler
setReversesActions:
_delegateRespondsTo
_stackView
_keylinesContainerView
_reversesActions
_actions
_imagePosition
isInCallAction
isSlidingViewController
activateAlertForController:animated:animateCurrentDisplayOut:withDelay:isSlidingDisplay:
deactivateAlertForController:animated:animateOldDisplayInWithStyle:isSlidingDisplay:
setWallpaperTunnelActive:forFullscreenAlertController:
_adapterForController:
setBackgroundStyle:withAnimationFactory:
removeBackgroundStyleWithAnimationFactory:
viewDidLoad
updateInterfaceOrientationIfNecessary
supportedInterfaceOrientations
activeInterfaceOrientation
setAutoresizingMask:
willAnimateRotationToInterfaceOrientation:duration:
deviceClass
currentDevice
userInterfaceIdiom
_setModalPresentationStyle:
presentViewController:animated:completion:
finishedAnimatingIn
postNotificationName:object:
finishedAnimatingOut
didReceiveMemoryWarning
viewDidUnload
invoke
requestActivationAnimated:animateCurrentDisplayOut:withDelay:
requestDeactivationAnimated:animateOldDisplayInWithStyle:
setWallpaperTunnelActive:
setBackgroundStyle:withDuration:
removeBackgroundStyleWithDuration:
allowSuspension
viewWillAnimateIn
viewWillAnimateOut
definesPresentationContext
animateViewIn
animateViewOut
viewIsReadyToBeRemoved
hasTranslucentBackground
allowStackingOfAlert:
handleLockButtonPressed
handleVolumeUpButtonPressed
handleVolumeDownButtonPressed
handleMenuButtonTap
handleHeadsetButtonPressed:
handleAutoLock
didFinishLaunchingFrontmost
setPendingDeactivationInvocation:
pendingDeactivationInvocation
shouldAnimateIn
setShouldAnimateIn:
animationStartTime
setAnimationStartTime:
activationContext
setActivationContext:
_shouldAnimateIn
_animationStartTime
_activationContext
_pendingDeactivationInvocation
useHardwareSwitchAsOrientationLock
newTopBar
newBottomBar
isShowingWallpaper
beginIgnoringInteractionEvents
shouldShowBottomBar
frame
_performAnimateDisplayIn
animateWithDuration:delay:options:animations:completion:
endIgnoringInteractionEvents
deviceIsLocked
springBoardIsActive
_slideOutAnimationDelay
_slideOutAnimationDuration
_viewAnimatedOut
statusBarHeight
_animatingToHomescreenWallpaper
_animationDelayForOthersActivation
_updateLayoutForStatusBarAndInterfaceOrientation
topBar
bottomBar
_topBar
_bottomBar
_animatingIn
_animatingOut
activationEvent
setActivationEvent:
setScreen:
_screen
_activationEvent
_imageThatSuppressesAccessibilityHairlineThickening
initWithTitle:subtitle:image:badgeView:handler:
initWithTitle:subtitle:image:handler:
initWithTitle:subtitle:handler:
initWithTitle:handler:
subtitle
image
_title
_subtitle
_image
_badgeView
_handler
isMainThread
handleFailureInFunction:file:lineNumber:description:
addObserver:forKeyPath:options:context:
isAvailable
hashTableWithOptions:
_loadFlashlightLevel
setLevel:
_postLevelChangeNotification:
_storeFlashlightLevel:
_setFlashlightLevel:
_turnPowerOn
_turnPowerOff
_updateState
observeValueForKeyPath:ofObject:change:context:
isOverheated
_postAvailabilityChangeNotification:
flashlightLevel
flashlightAvailabilityDidChange:
flashlightLevelDidChange:
setFlashlightLevel:withError:
turnPowerOnWithError:
turnPowerOff
standardUserDefaults
setInteger:forKey:
integerForKey:
turnFlashlightOn
turnFlashlightOff
level
warmUp
coolDown
removeAllObservers
_flashlight
_flashlightQueue
_level
_available
initWithStyle:
defaultSettings
backgroundColorHint
setBackgroundColorHint:
vibrancyDisabled
setVibrancyDisabled:
_vibrancyDisabled
_backgroundColorHint
actionWithCompletion:
initWithCompletion:
error
code
initWithInfo:timeout:forResponseOnQueue:withHandler:
response
sendResponse:
sendResponseWithSuccess:
label
setLabel:
authenticationPolicy
setAuthenticationPolicy:
completion
_action
_label
_authenticationPolicy
_completion
alignmentRectInsets
sbui_rangesOfEmojiTokens:
initWithString:
clearColor
addAttributes:range:
setAttributedText:
font
setFont:
lineBreakMode
setLineBreakMode:
numberOfLines
setNumberOfLines:
textAlignment
setTextAlignment:
setTextColor:
viewForFirstBaselineLayout
viewForLastBaselineLayout
textColor
_textColor
_emojiLabel
length
isFrontBoard
initWithObjects:
_performSynchronouslyOnMainThread:
stringWithFormat:
initWithArray:
mainConfiguration
setDisplayConfiguration:
preferredLevel
preferredInterfaceOrientation
setInterfaceOrientation:
createSceneWithIdentifier:settings:initialClientSettings:clientProvider:transitionContext:
scenes
destroyScene:withTransitionContext:
_queue_invalidate
sceneWithIdentifier:
registerInvalidationAction:
registerHost:
unregisterHost:
beginTransaction
endTransaction
initWithIdentifier:queue:
createSceneWithIdentifier:initialClientSettings:
destroyScene:
_clientQueue
_queue
_scenes
_invalidationAction
displayIfNeeded
sbui_drawEagerly
setContentOrientation:
_updateGeometry
containerOrientation
contentOrientation
setCenter:
setBounds:
setContainerOrientation:
contentViews
addContentView:
convertPointFromContainerInterfaceOrientationToContentInterfaceOrientation:
convertRectFromContainerInterfaceOrientationToContentInterfaceOrientation:
convertTransformFromContainerInterfaceOrientationToContentInterfaceOrientation:
convertPointFromContentInterfaceOrientationToContainerInterfaceOrientation:
convertRectFromContentInterfaceOrientationToContainerInterfaceOrientation:
convertTransformFromContentInterfaceOrientationToContainerInterfaceOrientation:
_transformedView
_contentOrientation
_containerOrientation
setAllowsGroupOpacity:
_setUnified:
_layoutGrabberView:forState:
setColor:
colorWithAlphaComponent:
alphaComponent
_setDrawsAsBackdropOverlayWithBlendMode:
_frameForGrabberView:forState:unified:
_transformForGrabberView:forState:
_setState:
animationDuration
setState:animated:
deleteCharactersInRange:
appendFormat:
mask
setMask:
tintViewWithFrame:
insertSubview:belowSubview:
vibrantSettings
setVibrantSettings:
initWithColor:
setAnimationDuration:
configureForLightStyle
setState:
color
_leftGrabberView
_rightGrabberView
_animationDuration
_color
_alphaComponent
_vibrantSettings
_tintView
_unified
_alphaContainerView
setCornerRadius:
setAllowsEdgeAntialiasing:
methodSignatureForSelector:
invocationWithMethodSignature:
setSelector:
invokeWithTarget:
getReturnValue:
isLoaded
bundlePath
load
initWithRemoteAlertControllerClass:
isSubclassOfClass:
queueWithDispatchQueue:
initWithIdentifier:queue:clientAuthenticator:
initWithCapacity:
isUsable
rawPort
numberWithUnsignedInt:
initWithDefinition:tokenPort:context:queue:delegate:
initWithOptions:capacity:
initFromReceiveRight:
bs_secureEncoded
messageWithPacker:
sendMessage:withType:toClients:
setWithObject:
payload
tokenFromXPCMessage:
isDefinition:allowedForAuditToken:
objectEnumerator
queue_matchesDefinition:
queue_tokenPort
_queue_addControllerWithDefinition:token:context:forClient:
queue_isActive
sendReplyMessageWithPacker:
_queue_notifyClients:remoteAlertForToken:didInvalidateWithReason:underlyingError:
queue_activateWithContext:
queue_invalidate
queue_remoteAlertController:didInvalidateWithReason:underlyingError:
setRepresentation
queue_remoteAlertControllerDidChangeActivationState:
prerequisiteMilestones
noteClientDidDisconnect:
noteDidReceiveMessage:withType:fromClient:
_remoteAlertControllerClass
_tokenPortToToken
_tokenPortToControllerMap
_tokenPortToClientsMap
suggestedContentInsets
appendObject:withName:skipIfNil:
legibilitySettings
setSuggestedContentInsets:
setLegibilitySettings:
_shouldControlAutorotation
_isSecure
_setupSubviews
_updateImageViewLayoutConstraints
colorWithWhite:alpha:
preferredContentSizeCategory
size
setContentMode:
setImage:
traitCollectionWithPreferredContentSizeCategory:
preferredFontForTextStyle:compatibleWithTraitCollection:
constraintEqualToConstant:
_bodyLeading
firstBaselineAnchor
lastBaselineAnchor
didMoveToSuperview
isHighlighted
_interfaceOrientationIsPortrait
_imageView
_textContainer
_titleLabel
_subtitleLabel
_imageViewLayoutConstraints
_highlighted
activatePluginName
_defaultActionWithFilter:
activatePluginContext
enableBundleNamed:activationContext:
dictionaryWithDictionary:
_responseForAction:withOrigin:context:
setActivated:
send
launchURL
actionBlockForAction:withOrigin:context:
ignoresQuietMode
context
supplementaryActionsForLayout:
supplementaryActions
responseForAction:
setContext:
setOriginID:
defaultAction
alternateAction
playSound
killSound
actionBlockForButton:
sb_nonPluginDefaultAction
_launchURLForAction:context:
actionBlockForAction:withOrigin:
bulletinAlertShouldOverrideQuietMode
bulletinAlertShouldOverridePocketMode
sb_minimalSupplementaryActions
mainBundle
localizedStringForKey:value:table:
initWithActionBlock:remoteViewControllerClassName:remoteServiceBundleIdentifier:actionIdentifier:activationMode:behavior:parameters:
actionWithBlock:
actionBlock
setActionBlock:
remoteViewControllerClassName
setRemoteViewControllerClassName:
remoteServiceBundleIdentifier
setRemoteServiceBundleIdentifier:
behavior
setBehavior:
activationMode
setIdentifier:
parameters
setParameters:
_actionBlock
_remoteViewControllerClassName
_remoteServiceBundleIdentifier
_behavior
_activationMode
_parameters
setURL:
setBundleID:
appendInteger:withName:
actionWithURL:
actionWithBundleID:
isApplicationAction
bundleID
transitionStyle
setTransitionStyle:
_bundleID
_url
_transitionStyle
imageNamed:inBundle:compatibleWithTraitCollection:
sbui_image
sbui_defaultImage
newLockScreenModalView
localizedTitle
setDataSource:
appIconForceTouchController:shouldHandleGestureRecognizer:
appIconForceTouchController:shouldUseSecureWindowForGestureRecognizer:
appIconForceTouchController:willPresentForGestureRecognizer:
appIconForceTouchController:didPresentForGestureRecognizer:
appIconForceTouchController:willDismissForGestureRecognizer:
appIconForceTouchController:didDismissForGestureRecognizer:
appIconForceTouchController:shouldActivateApplicationShortcutItem:atIndex:forGestureRecognizer:
startHandlingGestureRecognizer:
stopHandlingGestureRecognizer:
applicationShortcutItems
initWithDataProvider:applicationShortcutItems:
_setupWithGestureRecognizer:
_peekAnimated:withRelativeTouchForce:allowSmoothing:
indexOfObject:
bundleIdentifierToLaunch
applicationBundleIdentifier
initWithSBSShortcutItem:
numberWithBool:
optionsWithDictionary:
openApplication:withOptions:completion:
_widgetViewControllerForDataProvider:
_shortcutViewControllerForDataProvider:
setIconPosition:
setReversesApplicationShortcutItems:
filteredApplicationShortcutItemsWithStaticApplicationShortcutItems:dynamicApplicationShortcutItems:
appIconForceTouchShortcutViewControllerShouldHandleGestureRecognizers:
appIconForceTouchShortcutViewController:activateApplicationShortcutItem:
iconForceTouchController:shouldHandleGestureRecognizer:
iconForceTouchController:shouldUseSecureWindowForGestureRecognizer:
iconForceTouchController:willPresentForGestureRecognizer:
iconForceTouchController:didPresentForGestureRecognizer:
iconForceTouchController:willDismissForGestureRecognizer:
iconForceTouchController:didDismissForGestureRecognizer:
_iconForceTouchController
_openApplicationService
handledMenuButtonDownEvent
handledMenuButtonUpEvent
handledMenuButtonTap
awakeFromBundle
setVisible:
registeredWithHost
supportedAndEnabled
shouldBreadcrumbLaunchedApplicationWithBundleIdentifier:
wantsActivationEvent:eventSource:interval:
prepareForActivationEvent:eventSource:afterInterval:
cancelPendingActivationEvent:
handleActivationEvent:eventSource:context:
handledPasscodeUnlockWithCompletion:
handleBluetoothDismissal
handlePreheatCommand
handledWiredMicButtonTap
handledButtonDownEventFromSource:
handledButtonUpEventFromSource:
handledButtonTapFromSource:
viewControllerForActivationContext:
viewPartiallyRevealedWithPercentRevealed:
handleViewFullyRevealed
host
setHost:
isVisible
_host
_isVisible
setAnimatedLayerProperties:
filterWithType:
setName:
numberWithDouble:
setValue:forKey:
setFilters:
valueForKeyPath:
doubleValue
setValue:forKeyPath:
gaussianBlurRadius
iconView
_iconView
distantFuture
subActions
priority
isSticky
sortDate
canShowInAssistant
shouldPlayLightsAndSirens
canShowWhileLocked
message
shouldShowModalSubActions
subActionLabels
hasSubActions
defaultActionWithContext:
actionWithIdentifier:
lockScreenActionContextWithContext:
_actionFromApplicationShortcutItem:
iconPosition
reversesApplicationShortcutItems
intrinsicContentSize
setIntrinsicContentSize:
localizedSubtitle
icon
_imageFromApplicationShortcutIcon:
applicationBundleURL
absoluteString
containsString:
imageWithRenderingMode:
templateImageName
_assetManager
imageNamed:withTrait:
URLByAppendingPathComponent:
path
imageWithContentsOfFile:
imageData
dataType
imageWithData:scale:
imageWithCGImage:scale:orientation:
isTemplate
initWithURL:idiom:error:
_actionPlatterViewController
_reversesApplicationShortcutItems
_applicationShortcutItems
_iconPosition
setSoundType:
setSystemSoundID:
setSoundBehavior:
setVibrationPattern:
setSongPath:
initWithType:
setTopic:
setToneIdentifier:
setVibrationIdentifier:
initWithToneAlertConfiguration:
setAlertConfiguration:
isPlaying:
playSound:environments:completion:
stopSound:
soundType
systemSoundID
songPath
soundBehavior
vibrationPattern
alertConfiguration
stringByAppendingFormat:
initWithSystemSoundID:behavior:vibrationPattern:
initWithSystemSoundPath:behavior:vibrationPattern:
initWithToneAlert:accountIdentifier:toneIdentifier:vibrationIdentifier:
isPlaying
stop
_completionBlock
_setCompletionBlock:
_resolvedSystemSoundID
_setResolvedSoundID:
alertType
setAlertType:
_soundType
_systemSoundID
_soundBehavior
_vibrationPattern
_alertConfiguration
_songPath
_alertType
restrictedCapabilities
setRestrictedCapabilities:
backgroundStyle
setBackgroundStyle:
presentationStyle
setPresentationStyle:
notificationBehavior
setNotificationBehavior:
elementOverrides
setElementOverrides:
presentationRegion
setPresentationRegion:
initWithAppearance:
mutableCopyWithZone:
hidden
setLockScreenDisableAssertionClass:
lockScreenDisableAssertionWithIdentifier:
whiteColor
buttonWithText:highlightColor:
boldSystemFontOfSize:
sizeToFit
setSize:
setTextLabel:
setHighlightColor:
setUnselectedTextColor:
setSelectedTextColor:
_chevronImageForTraitCollection:
_flatImageWithColor:
setUnselectedImage:
setSelectedImage:
backgroundColor
setNeedsDisplay
isSelected
initWithImage:highlightedImage:
externalSystemTealColor
systemBlueColor
imageFlippedForRightToLeftLayoutDirection
buttonWithOKAndHighlightColor:
buttonWithChevronImageForTraitCollection:highlightColor:
highlightColorForNightTime:
highlightColor
textLabel
unselectedTextColor
selectedTextColor
unselectedImage
selectedImage
_textLabel
_unselectedTextColor
_selectedTextColor
_unselectedImage
_selectedImage
_highlightView
_highlightColor
_initWithStartView:endView:translucent:
isUserInteractionEnabled
allowsHitTesting
setAllowsHitTesting:
setUserInteractionEnabled:
animationFactory
allowsGroupOpacityDuringCrossfade
adaptsAnimationFactoryTimingFunction
factoryWithTimingFunction:
animateWithFactory:options:actions:completion:
setAllowsGroupOpacityDuringCrossfade:
setAdaptsAnimationFactoryTimingFunction:
_animationFactory
_startView
_endView
_translucent
_crossfaded
_allowsGroupOpacityDuringCrossfade
_adaptsAnimationFactoryTimingFunction
remoteAlertClass
remoteAlertDelegate
requestWithDefinition:context:delegate:completion:
hasEntitlement:
serviceName
viewControllerClassName
isDefinition:equalToDefinition:
activateWithContext:
didInvalidate
_queue_isValid
_queue_setActive:
remoteAlertDidActivate:
remoteAlertDidDeactivate:
remoteAlertDidRequestDismissal:
remoteAlert:didTerminateWithError:
alert
_tokenPort
_alert
_pendedActivations
_active
contentAlpha
constraintWithItem:attribute:relatedBy:toItem:attribute:multiplier:constant:
_updateLayoutConstraints
_updateChildViewTransform
_containerView
_mutableLayoutConstraints
_childViewController
_contentAlpha
_contentNativeSize
sb_backdropViewWithFrame:privateStyle:
initWithFrame:privateStyle:
sbf_searchTransitionGraphicsQuality
setScaleForNoBlur:
sb_backdropViewWithPrivateStyle:
_iconForceTouchControllerHashTable
_window
setWithSet:
_addIconForceTouchController:
_handleGestureRecognizer:
setRootViewController:
setWindowLevel:
_setRotatableViewOrientation:updateStatusBar:duration:force:
_synchronizeDrawing
_cleanWithGestureRecognizer:
_isPeekingOrShowing
_isWidgetVisible:
_windows
iconForceTouchViewController
_iconForceTouchViewController
appIconForceTouchController:applicationBundleIdentifierForGestureRecognizer:
appIconForceTouchController:applicationBundleURLForGestureRecognizer:
appIconForceTouchController:applicationShortcutWidgetBundleIdentifierForGestureRecognizer:
appIconForceTouchController:applicationShortcutItemsForGestureRecognizer:
appIconForceTouchController:iconImageInsetsForGestureRecognizer:
appIconForceTouchController:iconImageCornerRadiusForGestureRecognizer:
appIconForceTouchController:parallaxSettingsForGestureRecognizer:
appIconForceTouchController:zoomDownViewForGestureRecognizer:
appIconForceTouchController:zoomDownCenterForGestureRecognizer:
appIconForceTouchController:iconViewFrameForGestureRecognizer:
appIconForceTouchController:newIconViewCopyForGestureRecognizer:
applicationShortcutWidgetBundleIdentifier
initWithPrivateStyle:
blackColor
setColorTint:
transitionIncrementallyToSettings:weighting:
setComputesColorSettings:
effectStrength
_targetBackdropViewSettings
_effectStrength
sharedInstanceForStyle:
systemAppPersistenteCache
primaryColor
_imageNameForCurrentContentSize:
imageNamed:
imageForKey:generatingIfNecessaryWithBlock:
initWithSettings:strength:image:tintColor:
sharedApplication
setStrength:
sb_isEqualToLegibilitySettings:
_newDialViewForSettings:
strength
replicate
_strength
_legibilitySettings
_dialView
getRed:green:blue:alpha:
bannerTargetIdentifier
bannerTargetIdiom
registerSource:
unregisterSource:
modallyPresentBannerWithContext:
isShowingModalBanner
signalSource:
currentBannerContextForSource:
dismissCurrentBannerContextForSource:
cacheBannerForContext:withCompletion:
removeCachedBannerForContext:
initWithTargetImplementation:
_idiom
_implementation
initWithKeyOptions:valueOptions:capacity:
bannerTargetManager:didAddTarget:
_notifyObservers:
bannerTargetManager:didRemoveTarget:
targets
_registerTargetImplementation:
_unregisterTargetImplementation:
_proxyForTargetImplementation:
_proxies
_implementationToProxyMap
viewCanBeDisplayed
showStatusBar
showDateView
hasCustomSubtitle
customSubtitleText
showDate
allowsSiri
allowsLockScreenCamera
allowsUnlocking
allowsLogout
wantsMesaAutoUnlock
allowsLockScreenMediaControls
allowsControlCenter
overlayStyle
pluginController:updateAppearance:
style
secondaryColor
shadowColor
initWithStyle:primaryColor:secondaryColor:shadowColor:
legibilitySettingsOverridesVibrancy
isContentViewWhiteUnderSlideToUnlockText
_updateAppearanceAndNotify:
userInfo
setDeactivationContext:
purgeView
setPluginAgent:
slideToUnlockText
bundleIDForUnlock
unlockAnimationStyleForDestinationApp:
shouldDisableOnUnlock
disable
shouldDisableOnRelock
enableTransitionBlock
sentinelWithExceptionReason:
signal
settingsWithDuration:
viewIfLoaded
statusBarOrientation
deactivatePluginController:
viewWantsOverlayLayout
disablesAwayItemsCompletely
shouldAutoHideNotifications
enableLockScreenBundle:withContext:
disableLockScreenBundle:withContext:
disableBundleNamed:deactivationContext:
enableBundleNamed:
disableBundleNamed:
pluginAnimatesAppearanceTransition:
pluginAnimateAppearanceTransition:withCompletion:
pluginAgent
pluginPriority
pluginViewController
pluginAppearance
pluginWillActivateWithContext:
pluginDidDeactivateWithContext:
pluginHandleEvent:
updateForPresentation:
pluginUnlockAction
_updateAppearance
setViewCanBeDisplayed:
setOrientation:
setFullscreen:animated:
setFullscreen:duration:
shouldShowLockStatusBarTime
allowsTimer
allowsLockScreenHint
animateResumingToApplicationWithIdentifier:
showBatteryChargingText
customSubtitleColor
customHeaderView
allowsPhotoSlideshow
handleMenuButtonDoubleTap
wantsMenuButtonHeldEvent
handleMenuButtonHeld
setNeedsLegibilityAppearanceUpdate
_agent
_appearance
_viewCanBeDisplayed
initWithItem:source:target:
item
source
target
_item
_source
_target
_isValid
isEmergencyDialerAction
setUserInfo:
setProcess:
setAuxiliaryAnimation:
appendDictionarySection:withName:skipIfEmpty:
contextWithName:
name
process
auxiliaryAnimation
setObserver:
_name
_userInfo
_process
_auxiliaryAnimation
_referenceBounds
preferredFontDescriptorWithTextStyle:addingSymbolicTraits:options:
fontWithDescriptor:size:
_scaledValueForValue:
peekNextBannerItemForTarget:
compare:
dequeueNextBannerItemForTarget:
SBUIForceTouchGestureRecognizer
UIInteractionProgressObserver
NSObject
SBUIPluginAppearanceContext
_SBSceneHandleObserverToken
SBSceneHandleObserverToken
NSCopying
SBSceneHandleBlockObserver
BSInvalidatable
SBSceneHandleObserver
SBLockScreenPluginCallAction
SBLockScreenElementOverride
SBSceneView
SBScenePlaceholderContentViewProviderDelegate
SBUIIconForceTouchViewController
UIGestureRecognizerDelegate
Isolation
SBAlertItem
BSDescriptionProviding
SBUIAdditions
_SBSceneHandleObserverBehavior
SBSceneHandle
FBSceneMonitorDelegate
FBSceneHostManagerObserver
SBUIScene
FBSceneClient
_SBAlertController
SBUIIconForceTouchControllerDataProvider
SBUIActionPlatterViewController
SBLockScreenPluginInCallAction
SBUIFullscreenAlertController
SBUISlidingFullscreenAlertController
SBUIPluginActivationContext
SBUIAction
SBUIFlashlightController
SBLockScreenLegibilitySettings
SBLockScreenPluginAction
SBUIActionViewLabel
SBUIEmojiAdditions
SBUIWorkspace
FBSceneClientProvider
SBOrientationTransformWrapperView
_SBOrientationTransformedContentView
SBUIChevronView
_SBFVibrantView
SpringBoardUI
SBRemoteAlertServer
SBRemoteAlertControllerDelegate
SBLockScreenPluginPresentation
SBMutableLockScreenPluginPresentation
SBUIIconForceTouchWindow
SBUISecureIconForceTouchWindow
SBUIActionView
SBUIUtilities
SBUIBannerAction
SBLockScreenPluginApplicationAction
SBLockScreenModalViewFactory
SBUIAppIconForceTouchController
SBUIAppIconForceTouchShortcutViewControllerDelegate
SBUIIconForceTouchControllerDataSource
SBUIIconForceTouchControllerDelegate
SBUIPluginController
SBPluginBundleController
BSPluginBundleController
SBUIIconForceTouchIconViewWrapperView
SBUIBannerItem
SBUIAppIconForceTouchShortcutViewController
SBUIActionPlatterViewControllerDelegate
SBUISound
SBUIActionKeylineView
SBLockScreenPluginAppearanceContext
SBLockScreenPluginMutableAppearance
SBLockScreenPluginAppearance
NSMutableCopying
SBLockScreenPluginMutableAppearanceContext
SBUILockScreenDisableAssertion
SBUIStarkBannerViewButton
SBCrossfadeView
SBRemoteAlert
SBRemoteAlertController
SBRemoteAlertDelegate
SBUIIconForceTouchWrapperViewController
SpringBoardUIAdditions
SBUIIconForceTouchController
SBUIIconForceTouchViewControllerDelegate
SBUIAppIconForceTouchControllerDataProvider
SBUIIconForceTouchVisualEffectView
SBLockScreenTimerDialView
SBUILegibility
SBUIOptionalLegibility
SBFScreenFadeReplicatable
SBUIBannerTargetProxy
SBUIBannerTarget
SBUIBannerTargetBase
SBUIBannerTargetManager
SBAwayViewPluginController
SBLockScreenPluginViewController
SBLockScreenPluginController
SBUIBannerContext
SBLockScreenPluginEmergencyDialerAction
SBLockScreenPluginContext
B12@0:4@8
#8@0:4
@8@0:4
@12@0:4:8
@16@0:4:8@12
@20@0:4:8@12@16
B8@0:4
B12@0:4#8
B12@0:4:8
Vv8@0:4
I8@0:4
^{_NSZone=}8@0:4
B12@0:4@"Protocol"8
@"NSString"8@0:4
v12@0:4@8
v16@0:4@8B12
v12@0:4@"UIInteractionProgress"8
v16@0:4@"UIInteractionProgress"8B12
@16@0:4@8:12
v8@0:4
d8@0:4
v16@0:4@8@12
@"UIInteractionProgress"
v12@0:4I8
v12@0:4B8
@12@0:4^{_NSZone=}8
@12@0:4@8
@"NSMutableDictionary"
v16@0:4@8i12
v20@0:4@8@12@16
v16@0:4@"SBSceneHandle"8@"FBScene"12
v16@0:4@"SBSceneHandle"8i12
v20@0:4@"SBSceneHandle"8@"FBSSceneSettingsDiff"12@"FBSSceneSettings"16
v20@0:4@"SBSceneHandle"8@"FBSSceneClientSettingsDiff"12@"FBSSceneTransitionContext"16
v16@0:4@"SBSceneHandle"8@"NSSet"12
@12@0:4@?8
@"TUDialRequest"
@12@0:4i8
i8@0:4
v12@0:4i8
@"NSString"
v12@0:4@"<SBScenePlaceholderContentViewProvider>"8
@24@0:4{CGRect={CGPoint=ff}{CGSize=ff}}8
@24@0:4@8{CGSize=ff}12i20
@28@0:4@8{CGSize=ff}12i20@24
v20@0:4i8@12@?16
{CGSize=ff}16@0:4{CGSize=ff}8
v20@0:4{CGSize=ff}8i16
v16@0:4@8@?12
i12@0:4i8
v32@0:4i8@12i16@20@24@?28
{CGSize=ff}8@0:4
@"SBSceneHandle"
{CGSize="width"f"height"f}
@"<SBScenePlaceholderContentContext>"
@"UIView"
@"UIView<FBSceneHostView>"
@"<SBScenePlaceholderContentViewProvider>"
B16@0:4@8@12
B12@0:4@"UIGestureRecognizer"8
B16@0:4@"UIGestureRecognizer"8@"UIGestureRecognizer"12
B16@0:4@"UIGestureRecognizer"8@"UITouch"12
B16@0:4@"UIGestureRecognizer"8@"UIPress"12
@16@0:4@8@12
B24@0:4B8d12B20
B16@0:4B8@?12
i12@0:4@8
v28@0:4B8d12B20@?24
v16@0:4B8@?12
v16@0:4d8
@"SBUIIconForceTouchVisualEffectView"
@"SBUIIconForceTouchIconViewWrapperView"
@"SBUIIconForceTouchWrapperViewController"
@"NSArray"
@"NSMutableArray"
@"SBUIIconForceTouchControllerDataProvider"
@"<SBUIIconForceTouchViewControllerDelegate>"
@"NSString"12@0:4@"NSString"8
@"BSDescriptionBuilder"12@0:4@"NSString"8
@"BSDescriptionBuilder"8@0:4
v16@0:4B8B12
@16@0:4B8B12
@"_SBAlertController"
@"<SBSceneHandleObserver>"
v16@0:4@"FBSceneMonitor"8@"FBScene"12
v20@0:4@"FBSceneMonitor"8@"FBSSceneSettingsDiff"12@"FBSSceneSettings"16
v16@0:4@"FBSceneMonitor"8@"NSSet"12
v20@0:4@"FBSceneMonitor"8@"FBSSceneClientSettingsDiff"12@"FBSSceneTransitionContext"16
v16@0:4@"FBSceneMonitor"8@"FBSceneUpdateContext"12
v12@0:4@"FBSceneHostManager"8
v16@0:4@"FBSceneHostManager"8@"NSString"12
@20@0:4@8@12@16
v12@0:4@?8
@"FBSSceneDefinition"
@"FBScene"
@"FBSDisplayIdentity"
@"FBSceneMonitor"
@"NSHashTable"
@"NSMapTable"
v28@0:4@8@12@16@20@?24
v20@0:4@8@12@?16
v20@0:4@"<FBSceneHost>"8@"FBSSceneDefinition"12@"FBSSceneParameters"16
v28@0:4@"<FBSceneHost>"8@"FBSSceneSettings"12@"FBSSceneSettingsDiff"16@"FBSSceneTransitionContext"20@?<v@?B>24
v20@0:4@"<FBSceneHost>"8@"FBSSceneTransitionContext"12@?<v@?B>16
v16@0:4@"<FBSceneHost>"8@"NSSet"12
@"<FBSceneHost>"
@"FBSSceneSettings"
@"FBSSceneClientSettings"
@"NSMutableSet"
@"SBAlertItem"
@"<_SBAlertControllerDelegate>"
{CGRect={CGPoint=ff}{CGSize=ff}}8@0:4
{UIEdgeInsets=ffff}8@0:4
f8@0:4
{CGPoint=ff}8@0:4
{?="iconForceTouchController_iconImageInsetsForGestureRecognizer"b1"iconForceTouchController_iconImageCornerRadiusForGestureRecognizer"b1"iconForceTouchController_wrapperViewCornerRadiusForGestureRecognizer"b1"iconForceTouchController_parallaxSettingsForGestureRecognizer"b1"iconForceTouchController_zoomDownViewForGestureRecognizer"b1"iconForceTouchController_zoomDownCenterForGestureRecognizer"b1}
@"<SBUIIconForceTouchControllerDataSource>"
@"SBUIIconForceTouchController"
@"SBUIForceTouchGestureRecognizer"
{?="actionPlatterViewControllerShouldRespondToTouches"b1}
@"UIStackView"
@"UILongPressGestureRecognizer"
@"<SBUIActionPlatterViewControllerDelegate>"
v20@0:4B8B12B16
v16@0:4B8i12
v20@0:4i8d12
v20@0:4@8B12@?16
B12@0:4B8
@"NSNumber"
@"NSInvocation"
@"UIScreen"
@28@0:4@8@12@16@20@?24
@24@0:4@8@12@16@?20
@20@0:4@8@12@?16
@16@0:4@8@?12
@?8@0:4
@"UIImage"
v24@0:4@8@12@16^v20
v12@0:4f8
@"AVFlashlight"
@"NSObject<OS_dispatch_queue>"
@"UIColor"
@"BSAction"
@"UILabel"
@12@0:4^@8
v12@0:4@"FBSceneClientProviderInvalidationAction"8
@"<FBSceneClient>"12@0:4@"<FBSceneHost>"8
v12@0:4@"<FBSceneHost>"8
@"FBSSerialQueue"
@"FBSceneClientProviderInvalidationAction"
{CGPoint=ff}16@0:4{CGPoint=ff}8
{CGRect={CGPoint=ff}{CGSize=ff}}24@0:4{CGRect={CGPoint=ff}{CGSize=ff}}8
{CGAffineTransform=ffffff}32@0:4{CGAffineTransform=ffffff}8
v24@0:4{CGRect={CGPoint=ff}{CGSize=ff}}8
v16@0:4{CGPoint=ff}8
@"_SBOrientationTransformedContentView"
v12@0:4@"UIView"8
@"_SBFVibrantSettings"8@0:4
v12@0:4@"_SBFVibrantSettings"8
{CGAffineTransform=ffffff}16@0:4@8i12
{CGRect={CGPoint=ff}{CGSize=ff}}20@0:4@8i12B16
B12@0:4i8
v16@0:4i8B12
@"_SBFVibrantSettings"
v24@0:4@8q12@20
v12@0:4@"SBRemoteAlertController"8
v24@0:4@"SBRemoteAlertController"8q12@"NSError"20
@12@0:4#8
@24@0:4@8@12@16@20
v28@0:4@8@12q16@24
v24@0:4{UIEdgeInsets=ffff}8
@"_UILegibilitySettings"
{UIEdgeInsets="top"f"left"f"bottom"f"right"f}
@"UIImageView"
@"SBUIActionViewLabel"
@"SBUIAction"
@?12@0:4@8
@?20@0:4@8i12@16
@?16@0:4@8i12
@20@0:4@8i12@16
@36@0:4@?8@12@16@20I24I28@32
@"NSDictionary"
@"NSURL"
B12@0:4@"SBUIAppIconForceTouchShortcutViewController"8
v16@0:4@"SBUIAppIconForceTouchShortcutViewController"8@"SBSApplicationShortcutItem"12
i16@0:4@8@12
{CGRect={CGPoint=ff}{CGSize=ff}}16@0:4@8@12
{UIEdgeInsets=ffff}16@0:4@8@12
f16@0:4@8@12
{CGPoint=ff}16@0:4@8@12
i16@0:4@"SBUIIconForceTouchController"8@"SBUIForceTouchGestureRecognizer"12
@"UIView"16@0:4@"SBUIIconForceTouchController"8@"SBUIForceTouchGestureRecognizer"12
{CGRect={CGPoint=ff}{CGSize=ff}}16@0:4@"SBUIIconForceTouchController"8@"SBUIForceTouchGestureRecognizer"12
@"UIViewController"16@0:4@"SBUIIconForceTouchController"8@"SBUIForceTouchGestureRecognizer"12
{UIEdgeInsets=ffff}16@0:4@"SBUIIconForceTouchController"8@"SBUIForceTouchGestureRecognizer"12
f16@0:4@"SBUIIconForceTouchController"8@"SBUIForceTouchGestureRecognizer"12
@"SBFParallaxSettings"16@0:4@"SBUIIconForceTouchController"8@"SBUIForceTouchGestureRecognizer"12
{CGPoint=ff}16@0:4@"SBUIIconForceTouchController"8@"SBUIForceTouchGestureRecognizer"12
B16@0:4@"SBUIIconForceTouchController"8@"SBUIForceTouchGestureRecognizer"12
v16@0:4@"SBUIIconForceTouchController"8@"SBUIForceTouchGestureRecognizer"12
v24@0:4B8d12B20
{?="appIconForceTouchController_shouldHandleGestureRecognizer"b1"appIconForceTouchController_shouldUseSecureWindowForGestureRecognizer"b1"appIconForceTouchController_willPresentForGestureRecognizer"b1"appIconForceTouchController_didPresentForGestureRecognizer"b1"appIconForceTouchController_willDismissForGestureRecognizer"b1"appIconForceTouchController_didDismissForGestureRecognizer"b1"appIconForceTouchController_shouldActivateApplicationShortcutItem_atIndex_forGestureRecognizer"b1}
@"SBUIAppIconForceTouchControllerDataProvider"
@"UIViewController"
@"FBSOpenApplicationService"
@"<SBUIAppIconForceTouchControllerDataSource>"
@"<SBUIAppIconForceTouchControllerDelegate>"
B20@0:4i8i12^d16
v24@0:4i8i12d16
B20@0:4i8i12^v16
B12@0:4@?8
@"<SBUIPluginControllerHost>"
B12@0:4@"SBUIActionPlatterViewController"8
@"SBUIActionPlatterViewController"
@"_UIAssetManager"
@"<SBUIAppIconForceTouchShortcutViewControllerDelegate>"
@20@0:4L8I12@16
@20@0:4@8I12@16
@24@0:4i8@12@16@20
B16@0:4i8@?12
L8@0:4
v12@0:4L8
@"TLAlertConfiguration"
@"NSArray"8@0:4
@"SBLockScreenLegibilitySettings"8@0:4
v12@0:4@"NSArray"8
v12@0:4@"SBLockScreenLegibilitySettings"8
@"SBLockScreenLegibilitySettings"
{CGRect="origin"{CGPoint="x"f"y"f}"size"{CGSize="width"f"height"f}}
v12@0:4#8
@12@0:4B8
@20@0:4@8@12B16
@"BSUIAnimationFactory"
v24@0:4@8@12@16@?20
@"<SBRemoteAlertDelegate>"8@0:4
v24@0:4@"SBSRemoteAlertDefinition"8@"SBSRemoteAlertConfigurationContext"12@"<SBRemoteAlertDelegate>"16@?<v@?@"<SBRemoteAlert>"@"NSError">20
v12@0:4@"<SBRemoteAlert>"8
v16@0:4@"<SBRemoteAlert>"8@"NSError"12
@28@0:4@8I12@16@20@24
@"SBSRemoteAlertDefinition"
@"<SBRemoteAlertControllerDelegate>"
@"<SBRemoteAlert>"
v16@0:4{CGSize=ff}8
@28@0:4{CGRect={CGPoint=ff}{CGSize=ff}}8i24
v12@0:4@"SBUIIconForceTouchViewController"8
{?="iconForceTouchController_shouldHandleGestureRecognizer"b1"iconForceTouchController_shouldUseSecureWindowForGestureRecognizer"b1"iconForceTouchController_willPresentForGestureRecognizer"b1"iconForceTouchController_didPresentForGestureRecognizer"b1"iconForceTouchController_willDismissForGestureRecognizer"b1"iconForceTouchController_didDismissForGestureRecognizer"b1}
@"UIWindow"
@"<SBUIIconForceTouchControllerDelegate>"
@"SBUIIconForceTouchViewController"
{?="appIconForceTouchController_applicationBundleIdentifierForGestureRecognizer"b1"appIconForceTouchController_applicationBundleURLForGestureRecognizer"b1"appIconForceTouchController_applicationShortcutWidgetBundleIdentifierForGestureRecognizer"b1"appIconForceTouchController_applicationShortcutItemsForGestureRecognizer"b1"appIconForceTouchController_iconImageInsetsForGestureRecognizer"b1"appIconForceTouchController_iconImageCornerRadiusForGestureRecognizer"b1"appIconForceTouchController_parallaxSettingsForGestureRecognizer"b1"appIconForceTouchController_zoomDownViewForGestureRecognizer"b1"appIconForceTouchController_zoomDownCenterForGestureRecognizer"b1}
@"SBUIAppIconForceTouchController"
@"_UIBackdropViewSettings"
@"_UILegibilitySettings"8@0:4
v12@0:4@"_UILegibilitySettings"8
@"SBUILegibilityView"
^v8@0:4
v12@0:4@"<SBUIBannerSource>"8
v12@0:4@"SBUIBannerContext"8
@"SBUIBannerContext"12@0:4@"<SBUIBannerSource>"8
v16@0:4@"SBUIBannerContext"8@?<v@?>12
@"<SBUIBannerTargetImplementation>"
@16@0:4B8@?12
@"BSAnimationSettings"16@0:4B8@?<v@?>12
@"<SBLockScreenPluginAgent>"8@0:4
v12@0:4@"<SBLockScreenPluginAgent>"8
@"UIViewController<SBLockScreenPluginViewController>"8@0:4
@"<SBLockScreenPluginAppearance>"8@0:4
v12@0:4@"SBLockScreenPluginContext"8
v12@0:4@"SBLockScreenPluginPresentation"8
@"SBLockScreenPluginAction"8@0:4
v20@0:4B8d12
I12@0:4@8
@"<SBLockScreenPluginAgent>"
@"SBLockScreenPluginMutableAppearanceContext"
@"SBUIBannerItem"
@"<SBUIBannerSource>"
@"<SBUIBannerTarget>"
@"<FBSProcess>"
@"<SBLockScreenPluginLifecycleObserver>"
hash
TI,R
superclass
T#,R
description
T@"NSString",R,C
debugDescription
pressDuration
Td,R,N
forceTouchCompleted
TB,R,N,V_forceTouchCompleted
relativeTouchForce
touchForceVelocity
None
Boot
Alert
Logout
Plugin
Blocked
Keyboard
LostMode
IdleTimer
Restoring
Activation
LiftToWake
LockButton
RemoteLock
SmartCover
Notification
Authentication
NotificationCenter
Mesa
Siri
Touch
HomeButton
OtherButton
RemoteAlert
VolumeButton
ACPowerChange
ExternalRequest
ApplicationRequest
SpringBoardRequest
SystemServiceRequest
ChargingAccessoryChange
CoverSheet
ControlCenter
Dismiss
Authenticate
Authenticate and Dismiss
(inherit)
Default
DarkenSourceOver
BlurOnly
Light
LightWithTint
MediumDark
Dark
Passcode
DeckSwitcher
v4@?0
uiEnvironment
TI,N,V_uiEnvironment
hideOtherWindowsDuringAppearance
TB,N,V_hideOtherWindowsDuringAppearance
owner
T@"NSMutableDictionary",R,W,N,V_owner
/BuildRoot/Library/Caches/com.apple.xbs/Sources/SpringBoardUI_Sim/SpringBoard-3730/SBSceneHandleBlockObserver.m
<Unknown File>
Cannot deallocate a SBSceneHandleBlockObserver without invalidating first.
T@"NSURL",R,D,N
element
hidden
text
Ti,N,V_element
TB,N,GisHidden,V_hidden
T@"NSString",C,N,V_text
SBApplicationSceneView
CustomContent
PlaceholderContent
LiveSnapshot
LiveContent
/BuildRoot/Library/Caches/com.apple.xbs/Sources/SpringBoardUI_Sim/SpringBoard-3730/SBSceneView.m
unsupported initializer
Invalid parameter not satisfying: %@
sceneHandle
%@:%p-SBApplicationSceneView:%p-%llu
%@-%p-%llu
sceneId
requestedDisplayMode
effectiveDisplayMode
this object has already been invalidated
zPosition
bogus reference size
bogus interface orientation
Expected views to match (toView: %@, toMode: %@, toDisplayModeView: %@).
v8@?0B4
hostingPriority
Ti,R,N,V_hostingPriority
hostingRequester
T@"NSString",R,C,N,V_hostingRequester
T@"SBSceneHandle",R,N,V_sceneHandle
referenceSize
T{CGSize=ff},R,N,V_referenceSize
orientation
Ti,R,N,V_orientation
placeholderContentProvider
T@"<SBScenePlaceholderContentViewProvider>",&,N,V_placeholderContentProvider
placeholderContentContext
T@"<SBScenePlaceholderContentContext>",&,N,V_placeholderContentContext
displayMode
Ti,R,N,V_requestedDisplayMode
Ti,R,N,V_effectiveDisplayMode
backgroundView
T@"UIView",&,N,V_backgroundView
customContentView
T@"UIView",&,N,V_customContentView
kSBUIIconForceTouchViewControllerTapticEngineWarmUpReason
%s is not a valid initializer. You must call -[%@ initWithDataProvider:].
-[SBUIIconForceTouchViewController initWithNibName:bundle:]
%@ does not support unarchiving from a nib.
visualEffectView
parallaxView
iconViewWrapperViewBelow
primaryView
secondaryView
iconViewWrapperViewAbove
H:|[visualEffectView]|
V:|[visualEffectView]|
H:|[parallaxView]|
V:|[parallaxView]|
H:|-(origin_x)-[iconViewWrapperViewBelow(size_width)]
origin_x
size_width
V:|-(origin_y)-[iconViewWrapperViewBelow(size_height)]
origin_y
size_height
H:|-(origin_x)-[primaryView(size_width)]
V:|-(origin_y)-[primaryView(size_height)]
@"NSLayoutConstraint"12@?0@"NSLayoutConstraint"4f8
H:|-(origin_x)-[iconViewWrapperViewAbove(size_width)]
V:|-(origin_y@priority)-[iconViewWrapperViewAbove(size_height)]
priority
v12@?0@"SBFView"4@"UIWindow"8
/BuildRoot/Library/Caches/com.apple.xbs/Sources/SpringBoardUI_Sim/SpringBoard-3730/SBUIIconForceTouchViewController.m
%s should only be called when there is content to present!
-[SBUIIconForceTouchViewController _presentAnimated:withCompletionHandler:]
v8@?0i4
-[SBUIIconForceTouchViewController _dismissAnimated:withCompletionHandler:]
dataProvider
T@"SBUIIconForceTouchControllerDataProvider",R,N,V_dataProvider
state
Ti,R,N,V_state
layout
Ti,R,N,V_layout
delegate
T@"<SBUIIconForceTouchViewControllerDelegate>",W,N,V_delegate
SBAlertItemDidPrepareNewAlertControllerNotification
Lock
Pended
User Dismissed
Button Pressed
Auto Dismiss
Generic
Unlock
SBAlertItemsController
alertController
presented
TB,N,G_isPresented,S_setPresented:,V_presented
iconImagePath
T@"NSString",&,N,G_iconImagePath,V_iconImagePath
attachmentImagePath
T@"NSString",&,N,G_attachmentImagePath,V_attachmentImagePath
ignoreIfAlreadyDisplaying
TB,N,V_ignoreIfAlreadyDisplaying
allowInSetup
TB,N,V_allowInSetup
pendInSetupIfNotAllowed
TB,N,V_pendInSetupIfNotAllowed
pendWhileKeyBagLocked
TB,N,V_pendWhileKeyBagLocked
allowedBundleIDs
T@"NSArray",&,N,V_allowedBundleIDs
allowInCar
TB,N,V_allowInCar
allowMessageInCar
TB,N,V_allowMessageInCar
SBSApplicationShortcutItem.BadgeView
badgeView
T@"UIView",&,N
observer
T@"<SBSceneHandleObserver>",R,W,N,V_observer
didCreateScene
TB,N,V_didCreateScene
didDestroyScene
TB,N,V_didDestroyScene
didUpdateContentState
TB,N,V_didUpdateContentState
didUpdateSettingsWithDiff
TB,N,V_didUpdateSettingsWithDiff
didUpdateClientSettingsWithDiff
TB,N,V_didUpdateClientSettingsWithDiff
didUpdatePairingStatusForExternalSceneIdentifiers
TB,N,V_didUpdatePairingStatusForExternalSceneIdentifiers
/BuildRoot/Library/Caches/com.apple.xbs/Sources/SpringBoardUI_Sim/SpringBoard-3730/SBSceneHandle.m
init is unavailable for SBSceneHandle.
Scene or definition must be provided.
Given scene and monitor'd scene do not match.
Required scene wasn't found from scene handle: %@
v12@?0@"<SBSceneHandleObserver>"4@"_SBSceneHandleObserverBehavior"8
Cannot have scene creation/destruction invoked when using a scene monitor for lifecycle events.
Scene destroyed did not match the scene being tracked.
sceneID
scenePointer
A scene is required for the content host manager state to change.
sceneMonitor
T@"FBSceneMonitor",&,N,G_sceneMonitor,S_setSceneMonitor:,V_sceneMonitor
definition
T@"FBSSceneDefinition",R,N,G_definition,V_definition
displayIdentity
T@"FBSDisplayIdentity",&,N,S_setDisplayIdentity:,V_displayIdentity
manuallyControlsLifecycle
TB,N,G_manuallyControlsLifecycle,S_setManuallyControlsLifecycle:,V_manuallyControlsLifecycle
sceneIdentifier
T@"NSString",R,C,N
scene
T@"FBScene",R,N
sceneIfExists
T@"FBScene",R,N,V_scene
contentState
Ti,R,N
contentReady
TB,R,N,GisContentReady
identifier
layers
settings
clientSettings
T@"FBSSceneSettings",C,V_settings
T@"FBSSceneClientSettings",C,V_clientSettings
T@"NSString",R,C,N,V_identifier
valid
TB,R,N,GisValid,V_valid
T@"NSSet",R,C,N,V_layers
title
alertItem
T@"SBAlertItem",W,N,V_alertItem
alertControllerDelegate
T@"<_SBAlertControllerDelegate>",W,N,V_alertControllerDelegate
%s is not a valid initializer. You must call -[%@ initWithDataSource:controller:gestureRecognizer:].
-[SBUIIconForceTouchControllerDataProvider init]
dataSource
T@"<SBUIIconForceTouchControllerDataSource>",R,N,V_dataSource
controller
T@"SBUIIconForceTouchController",R,W,N,V_controller
gestureRecognizer
T@"SBUIForceTouchGestureRecognizer",R,W,N,V_gestureRecognizer
layoutStyle
iconViewFrame
T{CGRect={CGPoint=ff}{CGSize=ff}},R,N
primaryViewController
T@"UIViewController",R,N
secondaryViewController
iconImageInsets
T{UIEdgeInsets=ffff},R,N
iconImageCornerRadius
Tf,R,N
wrapperViewCornerRadius
parallaxSettings
T@"SBFParallaxSettings",R,N
zoomDownView
T@"UIView",R,N
zoomDownCenter
T{CGPoint=ff},R,N
gestureRecognizerWindow
T@"UIWindow",R,N
interfaceOrientation
StatusBar
TimeAndDate
Subtitle
v16@?0I4i8^B12
ScreenOff
VolumeUp
VolumeDown
HeadsetButton
HeadsetButtonHeld
Legible
Undefined
Overlay
Normal
Background
Stationary
Disabled
Temporary
Exclusive
Camera
TouchID
MediaControls
TodayCenter
%s is not a valid initializer. You must call -[%@ initWithActions:gestureRecognizer:].
-[SBUIActionPlatterViewController initWithNibName:bundle:]
actions
T@"NSArray",R,C,N,V_actions
T@"UILongPressGestureRecognizer",R,W,N,V_gestureRecognizer
reversesActions
TB,N,V_reversesActions
imagePosition
Ti,N,V_imagePosition
T@"<SBUIActionPlatterViewControllerDelegate>",W,N,V_delegate
SBPluginFullscreenAlertDidAnimateInNotification
SBUIFullscreenAlertAdapter
SBPluginFullscreenAlertAnimatedOutNotification
shouldAnimateIn
TB,N,V_shouldAnimateIn
animationStartTime
T@"NSNumber",&,N,V_animationStartTime
activationContext
T@"NSString",&,N,V_activationContext
SBUIRingerSwitchBehaviorDidChangeNotification
ringer-switch
topBar
T@"UIView",R,N,V_topBar
bottomBar
T@"UIView",R,N,V_bottomBar
SBDeviceLockStateChangedNotification
SBLockButtonPressedNotification
SBMenuButtonPressedNotification
SBVolumeChangedNotification
SBApplicationNetworkFlagsChangedNotification
SBHeadsetButtonUpNotification
SBActiveCallStateChangedNotification
SBRingerChangedNotification
SBIncomingCallPendingNotification
SBCallCountChangedNotification
SBTelephonyDaemonRestartNotification
SBUserEventOccurredNotification
SBHomescreenIconsDidAppearNotification
SBHomescreenIconsWillAppearNotification
SBWiFiDeviceAttachedNotification
SBProximityDidChangeNotification
SBTestingConfigureNextVoiceRecognitionAudioInputPathsNotification
SBTestingConfigureNextAssistantRecognitionStrings
SBFeaturesShouldBeLockedForRemoteLockNotification
SBBannerWillAnimateRevealNotification
SBBannerWillAnimateDismissalNotification
SBOrientationLockChangedNotification
SBAirplaneModeControllerWillProcessAirplaneModeChangeNotification
SBAirplaneModeControllerAirplaneModeDidChangeNotification
SBAirplaneModeControllerDidProcessAirplaneModeChangeNotification
SBTelephonyManagerWillProcessAirplaneModeChangeNotification
SBTelephonyManagerAirplaneModeDidChangeNotification
SBTelephonyManagerDidProcessAirplaneModeChangeNotification
SBNetworkTetheringStateChangedNotification
SBWifiManagerPowerStateDidChangeNotification
SBWifiManagerCurrentDeviceDidChangeNotification
SBWifiManagerDevicePresenceDidChangeNotification
SBBacklightAboutToUndimNotification
SBBacklightResetLockScreenIdleTimerNotification
SBBacklightLevelChangedNotification
SBBacklightFadeFinishedNotification
SBBacklightWillTurnOnWhileUILockedNotification
SBBacklightChangeSourceKey
SBBacklightOldFactorKey
SBBacklightNewFactorKey
kSBNotificationKeyState
kSBNotificationKeyDisplayIdentifier
kSBNotificationKeyPreferenceChangedKey
kSBNotificationKeyCurrentVolume
kSBNotificationKeyHeadsetButtonLongPress
kSBNotificationKeyBundleIdentifier
kSBNotificationKeyLocalNotification
kSBNotificationKeyFrame
kSBNotificationKeyAnimationDuration
screen
T@"UIScreen",&,N,V_screen
activationEvent
Ti,N,V_activationEvent
%s is not a valid initializer. You must call -[%@ initWithTitle:subtitle:image:badgeView:handler:].
-[SBUIAction init]
T@"NSString",R,C,N,V_title
subtitle
T@"NSString",R,C,N,V_subtitle
image
T@"UIImage",R,N,V_image
T@"UIView",R,N,V_badgeView
handler
T@?,R,C,N,V_handler
SBUILaunchOptionKeyPNGLess
SBUILaunchOptionKeyAllowUnlock
id<SBUIUserAgent> SBUIGetUserAgent()
<Unknown Function>
/BuildRoot/Library/Caches/com.apple.xbs/Sources/SpringBoardUI_Sim/SpringBoard-3730/SpringBoardUI_Private.m
this call must be made on the main thread
void SBUISetUserAgent(__strong id<SBUIUserAgent>)
available
overheated
flashlightLevel
com.apple.ControlCenter.FlashlightModule.AVFlashlight
com.apple.ControlCenter
Flashlight
FlashlightLevel
TB,R,N,GisAvailable,V_available
level
TI,N
backgroundColorHint
T@"UIColor",&,N,V_backgroundColorHint
vibrancyDisabled
TB,N,V_vibrancyDisabled
v8@?0@"BSActionResponse"4
completion
T@?,R,C,N,V_completion
label
T@"NSString",C,N,V_label
authenticationPolicy
Ti,N,V_authenticationPolicy
H:|[label]|
V:|[label]|
@8@?0@"NSArray"4
H:|[emojiLabel]|
emojiLabel
V:|[emojiLabel]|
T@"NSString",C,N
font
T@"UIFont",&,N
textColor
T@"UIColor",&,N
textAlignment
Ti,N
lineBreakMode
numberOfLines
v20@?0^{__EmojiTokenWrapper=}4{?=ii}8^B16
/BuildRoot/Library/Caches/com.apple.xbs/Sources/SpringBoardUI_Sim/SpringBoard-3730/SBUIWorkspace.m
queue
this can't be used outside the system app
%@:%@
initialClientSettings
can't register multiple scenes with the same identifier: %@
v8@?0@?<v@?>4
clientQueue
scenes
T@"NSSet",R,C,N
_UIKeyboardArbiter_ForSpringBoard_WorkspaceIdentifier
/System/Library/PrivateFrameworks/KeyboardArbiter.framework/KeyboardArbiter
### Failed to Soft Linked: /System/Library/PrivateFrameworks/KeyboardArbiter.framework/KeyboardArbiter
hasDrawn
container
contentOrientation
Ti,N,V_contentOrientation
containerOrientation
Ti,N,V_containerOrientation
contentViews
T@"NSArray",R,N
content
; state: %@>
vibrantSettings
T@"_SBFVibrantSettings",&,N
animationDuration
Td,N
Ti,N,V_state
color
T@"UIColor",&,N,V_color
T@"_SBFVibrantSettings",&,N,V_vibrantSettings
[Invalid]
SBUIChevronViewStateUp
SBUIChevronViewStateNone
SBUIChevronViewStateDown
com.apple.SpringBoardUIFramework
com.apple.springboard-ui.client
XCTestProbe
isTesting
SearchUI
/BuildRoot/Library/Caches/com.apple.xbs/Sources/SpringBoardUI_Sim/SpringBoard-3730/SpringBoardUI.m
This process should not be linking or loading SpringBoardUI.framework (<rdar://problem/26143166>)
/BuildRoot/Library/Caches/com.apple.xbs/Sources/SpringBoardUI_Sim/SpringBoard-3730/SBRemoteAlertServer.m
this initializer is not allowed - call initWithRemoteAlertControllerClass: instead
expected subclass of SBRemoteAlertController : remoteAlertControllerClass=%@
com.apple.springboard.remote-alert-server
you can't deallocate the server
the token must be valid at this point
failed to get a handleToken
v8@?0@"NSObject<OS_xpc_object>"4
handleToken for lookups must be valid at the time of sending : handleToken=%@ controller=%@ token=%@
-[SBRemoteAlertServer noteDidReceiveMessage:withType:fromClient:]
suggestedContentInsets
legibilitySettings
T{UIEdgeInsets=ffff},N,VsuggestedContentInsets
T@"_UILegibilitySettings",&,N,VlegibilitySettings
T{UIEdgeInsets=ffff},D,N
T@"_UILegibilitySettings",&,D,N
%s is not a valid initializer. You must call -[%@ initWithAction:].
-[SBUIActionView initWithFrame:]
titleLabel
subtitleLabel
H:|-(12)-[imageView(35)]-(12)-[textContainer]-(17)-|
imageView
textContainer
action
T@"SBUIAction",R,N,V_action
highlighted
TB,N,GisHighlighted,V_highlighted
NCInteractiveNotificationActionContextLaunchURLKey
SBBulletinResponseOriginDefault
SBBulletinResponseOriginBanner
SBBulletinResponseOriginList
SBBulletinResponseOriginStark
SBBulletinResponseOriginLockScreen
SBBulletinResponseOriginNotificationCenterOnLockScreen
SBBulletinResponseOriginModalAlert
B8@?0@"BBAction"4
B8@?0@"NSDictionary"4
BulletinBoard
actionBlock
T@?,C,N,V_actionBlock
remoteViewControllerClassName
T@"NSString",C,N,V_remoteViewControllerClassName
remoteServiceBundleIdentifier
T@"NSString",C,N,V_remoteServiceBundleIdentifier
behavior
TI,N,V_behavior
T@"NSString",C,N,V_identifier
parameters
T@"NSDictionary",C,N,V_parameters
activationMode
TI,R,N,V_activationMode
bundleID
transitionStyle
T@"NSString",C,N,V_bundleID
T@"NSURL",&,N,SsetURL:,V_url
TI,N,V_transitionStyle
SBSApplicationShortcutSystemIcon_UnreadDot
ComposeNew
Play
Pause
Location
Search
Share
Prohibit
Contact
Home
MarkLocation
Favorite
Love
Cloud
Invitation
Confirmation
Mail
Message
Date
Time
CapturePhoto
CaptureVideo
Task
TaskCompleted
Alarm
Bookmark
Shuffle
Audio
Update
UnreadDot
SBSApplicationShortcutSystemIcon_%@
sbui_image
T@"UIImage",R,N
SBDashBoardModalView
SBUIAppIconForceTouchControllerWillPresentNotification
SBUIAppIconForceTouchControllerDidPresentNotification
SBUIAppIconForceTouchControllerWillDismissNotification
SBUIAppIconForceTouchControllerDidDismissNotification
v8@?0@"NSArray"4
v12@?0@"FBSProcessHandle"4@"NSError"8
T@"<SBUIAppIconForceTouchControllerDataSource>",W,N,V_dataSource
T@"<SBUIAppIconForceTouchControllerDelegate>",W,N,V_delegate
SBUIPluginVisibilityDidChangeNotification
SBUIPluginActivationSettingsDidChangeNotification
__bundleId
__supportsCarFullScreen
WiredMic
BTHeadset
MotionGesture
Voice
Continuity
Unknown
visible
TB,N,GisVisible,V_isVisible
host
T@"<SBUIPluginControllerHost>",W,N,V_host
filters.gaussianBlur.inputRadius
gaussianBlur
inputRadius
H:|[iconView]|
iconView
V:|[iconView]|
%s is not a valid initializer. You must call -[%@ initWithIconView:].
-[SBUIIconForceTouchIconViewWrapperView initWithFrame:]
T@"UIView",R,N,V_iconView
gaussianBlurRadius
%s is not a valid initializer. You must call -[%@ initWithDataProvider:applicationShortcutItems:].
-[SBUIAppIconForceTouchShortcutViewController initWithNibName:bundle:]
MobileSlideShow.app
InfoPlist
%@.png
Assets.car
T@"SBUIAppIconForceTouchControllerDataProvider",R,N,V_dataProvider
applicationShortcutItems
T@"NSArray",R,N,V_applicationShortcutItems
reversesApplicationShortcutItems
TB,N,V_reversesApplicationShortcutItems
iconPosition
Ti,N,V_iconPosition
T@"<SBUIAppIconForceTouchShortcutViewControllerDelegate>",W,N,V_delegate
SBSoundController
SystemSound
   hasCompletionBlock: %@
   SoundID: %lu
   Path: %@
 Behavior: %lu
   Vibration Pattern: %@
ToneAlert
   hasCompletionBlock: %@
    Alert Configuration: %@
{  SoundType: %@%@
soundType
Ti,N,V_soundType
systemSoundID
TL,N,V_systemSoundID
_resolvedSystemSoundID
TL,N,S_setResolvedSoundID:,V_resolvedSystemSoundID
soundBehavior
TI,N,V_soundBehavior
vibrationPattern
T@"NSDictionary",&,N,V_vibrationPattern
alertType
Ti,N,V_alertType
alertConfiguration
T@"TLAlertConfiguration",C,N,V_alertConfiguration
songPath
T@"NSString",C,N,V_songPath
backgroundStyle
presentationStyle
notificationBehavior
presentationRegion
restrictions
elementOverrides
TB,R,N,GisHidden
restrictedCapabilities
TI,R,N
T@"NSArray",R,C,N
T@"SBLockScreenLegibilitySettings",R,&,N
TB,N,GisHidden
T@"NSArray",C,N
T@"SBLockScreenLegibilitySettings",&,N
T{CGRect={CGPoint=ff}{CGSize=ff}},N
BANNER_OKAY
CarDisplay
CarDisplayChevronBanner
textLabel
T@"UILabel",&,N,V_textLabel
unselectedTextColor
T@"UIColor",&,N,V_unselectedTextColor
selectedTextColor
T@"UIColor",&,N,V_selectedTextColor
unselectedImage
T@"UIImage",&,N,V_unselectedImage
selectedImage
T@"UIImage",&,N,V_selectedImage
highlightColor
T@"UIColor",&,N,V_highlightColor
animationFactory
T@"BSUIAnimationFactory",&,N,V_animationFactory
allowsGroupOpacityDuringCrossfade
TB,N,V_allowsGroupOpacityDuringCrossfade
adaptsAnimationFactoryTimingFunction
TB,N,V_adaptsAnimationFactoryTimingFunction
/BuildRoot/Library/Caches/com.apple.xbs/Sources/SpringBoardUI_Sim/SpringBoard-3730/SBRemoteAlertController.m
MACH_PORT_VALID(tokenPort)
remoteAlertDelegate
T@"<SBRemoteAlertDelegate>",R,W,N
remoteAlertClass must conform to SBRemoteAlert
the remoteAlert's delegate is wrong : remoteAlert=%@ actual=%@ expected=%@
v12@?0@"<SBRemoteAlert>"4@"NSError"8
the controller must be invalidated before it goes away
alert
T@"<SBRemoteAlert>",R,N
%s is not a valid initializer. You must call -[%@ initWithChildViewController:].
-[SBUIIconForceTouchWrapperViewController initWithNibName:bundle:]
containerView
childView
H:|[containerView]|
V:|[containerView]|
childViewController
T@"UIViewController",R,N,V_childViewController
contentAlpha
Tf,N,V_contentAlpha
contentNativeSize
T{CGSize=ff},N,V_contentNativeSize
iconForceTouchViewController
T@"SBUIIconForceTouchViewController",R,N,V_iconForceTouchViewController
T@"<SBUIIconForceTouchControllerDataSource>",W,N,V_dataSource
T@"<SBUIIconForceTouchControllerDelegate>",W,N,V_delegate
-[SBUIAppIconForceTouchControllerDataProvider init]
T@"<SBUIAppIconForceTouchControllerDataSource>",R,N,V_dataSource
T@"SBUIAppIconForceTouchController",R,W,N,V_controller
applicationBundleIdentifier
T@"NSString",R,N
applicationBundleURL
T@"NSURL",R,N
applicationShortcutWidgetBundleIdentifier
effectStrength
Td,N,V_effectStrength
SBLockScreenTimerDial
@"UIImage"4@?0
SBLockScreenTimerDial.SBLockScreenTimerDial.%x
@"UIImage"8@?0^I4
%@%@
T@"_UILegibilitySettings",&,N
strength
Tf,N
Tf,N,V_strength
/BuildRoot/Library/Caches/com.apple.xbs/Sources/SpringBoardUI_Sim/SpringBoard-3730/SBUIBannerTargetManager.m
must provide a valid target implementation
<%@:%p identifier=%p idiom=%i> -> %@
bannerTargetIdentifier
T^v,R,N
bannerTargetIdiom
T^v,R,N,V_identifier
Ti,R,N,V_idiom
v8@?0@"<SBUIBannerTargetManagerObserver>"4
targets
SBAwayViewPluginActivationReasonKey
SBAwayViewPluginActivatingForRemoteEvent
Plugin %@ did not call transition completion block
pluginAgent
T@"<SBLockScreenPluginAgent>",W,N
pluginPriority
pluginViewController
T@"UIViewController<SBLockScreenPluginViewController>",R,N
pluginAppearance
T@"<SBLockScreenPluginAppearance>",R,N
pluginUnlockAction
T@"SBLockScreenPluginAction",R,&,N
viewCanBeDisplayed
TB,N,V_viewCanBeDisplayed
T@"<SBLockScreenPluginAgent>",W,N,V_agent
/BuildRoot/Library/Caches/com.apple.xbs/Sources/SpringBoardUI_Sim/SpringBoard-3730/SBUIBannerContext.m
must supply a valid item
must supply a valid target
must supply a valid source
<%@:%p target=%@ source=%@ item=%@>
TB,R,N,GisValid,V_isValid
item
T@"SBUIBannerItem",R,N,V_item
source
T@"<SBUIBannerSource>",R,N,V_source
target
T@"<SBUIBannerTarget>",R,N,V_target
AppIconForceTouch
name
process
userInfo
T@"NSString",C,N,V_name
T@"NSDictionary",C,N,V_userInfo
T@"<FBSProcess>",&,N,V_process
T@"<SBLockScreenPluginLifecycleObserver>",&,N,V_observer
auxiliaryAnimation
T@?,C,N,V_auxiliaryAnimation
SBUIBannerContext *SBUIBannerTargetDequeueContextFromSourcesWithCheck(__strong id<SBUIBannerTargetImplementation>, __strong id<NSFastEnumeration>, __strong SBUIBannerDequeueAllowedCheck)
/BuildRoot/Library/Caches/com.apple.xbs/Sources/SpringBoardUI_Sim/SpringBoard-3730/SBUIBannerTarget.m
source inconsistency error: source=%@ peek=%@ dequeue=%@
333333
?ff&?
?33s?
 ?d!
Error setting flashligt level: %@
Error turning on flashlight power: %@
%{public}@: Client "%{public}@" is not allowed to use this class. All requests will be ignored.
Allowing SpringBoardUI.framework to load because SearchUI.framework is loaded. This will become a hard assert once <rdar://problem/29408996> is fixed.
This process should not be linking or loading SpringBoardUI.framework
malformed or dead create message received and discarded -> payload=%@
no controller found for activate/invalidate message -> payload=%@
malformed or dead activate/invalidate message received and discarded -> payload=%@
 ****==== %s client=%@ type=%lli payload=%@
Could not launch application with application shortcut item: %{public}@, error: %{public}@.
Entitlement %{public}@ required to create remoteAlert with definition=%{public}@
SBSRemoteAlertDefinition required to create remoteAlert : definition=%{public}@
%{public}@ can't present without a data source.
%{public}@ can't present without a window.
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
