_kIDSServerBagFinishedLoadingNotification
bagURL
T@"NSURL",R,&
apsEnvironmentName
T@"NSString",R,&
allowSelfSignedCertificates
TB,R
allowUnsignedBags
isLoaded
isLoading
isInDebilitatedMode
isServerAvailable
FTMessageDeliveryNoResultCodeError
FaceTime
Should retry!
FTMessageDelivery
Service
Delivery
Registration
...Should retry
Failed retrying message: %@
...Failed retrying
com.apple.imagent.http-delivery
Network state changed
push
Nonce
Timestamp received %@, delta %f servertimestamp %@ newServerTimestamp %@
Signing message: %@
IDSRegistrationMessage
   Single signing for: %@
auth
x-auth-user-id
Warning, missing %@ to add to %s
dictionary
   result dictionary: %@
   Multiple signatures for: %@
x-auth-user-id%@
   adding userID: %@
userAgent
T@"NSString",C,V_userAgent
protocolVersion
T@"NSNumber",C,V_protocolVersion
hasQueuedItems
busy
retryInAirplaneMode
TB,V_retryInAirplaneMode
logToRegistration
TB,V_logToRegistration
currentMessage
T@"IDSBaseMessage",R
queuedMessages
T@"NSArray",R
allMessages
maxMessageSize
Tq,R
maxLargeMessageSize
maxConcurrentMessages
TQ,V_maxConcurrentMessages
x-%@-cert%@
x-%@-nonce%@
x-%@-sig%@
Missing self identity
self URI
0c0c0e0ececece
session-token
sessionToken
T@"NSData",C,V_sessionToken
MessageQueue
Setting timeout for %f seconds from now  (Message: %@)
Queue timeout hit for message: %@
_queue
T@"NSMutableArray",&,V_queue
_addDates
T@"NSMutableArray",&,V_addDates
topMessage
count
messages
delegate
T@"<FTMessageQueueDelegate>",V_delegate
APSErrorDomain
ApplePushService
sigs
push-token
auth-token
name
version
flags
Appending %d length header for %@ segment
bag-key
Appending %d bytes for %@ segment
Appending no bytes for %@ segment
query-string
body
Signature input is %d bytes (%@)
Failed signing nonce: %@   with error: %d
Succeeded verifying signature for: %@   with error: %d
Failed verifying signature for: %@   with error: %d
Nonce: %@    Signed: %@   Result: %d
_FTDataFromBase64String
T@"NSData",R,N
_FTDataFromHexString
1.2.8
__kFaceTimeDeviceRegistrationStateChangedNotification
__kFaceTimeDeviceIDChangedNotification
__kFaceTimeDeviceRegistrationCapabilityChangedNotification
__kFaceTimeDeviceCapabilityChangedNotification
__kFaceTimeCommCenterReadyNotification
__kFaceTimeDeviceTechnologyChangedNotification
__kFaceTimeDeviceSIMInsertedNotification
__kFaceTimeDeviceSIMRemovedNotification
__kFaceTimeDeviceRestictionsChangedNotification
v8@?0
kiMessageAllowedNotifyRegister
v20@?0i8Q12
Carrier bundle changed, processing in a bit...
Determining query behavior by carrierBundleValue: %@
Carrier Bundle wants to force celluar Queries
DN/A
ZD/A
Device has interesting region info, allowing carrier bundle value to set behaviour : %@
Device does not have interesting regionInfo, Ignoring Carrier Bundle Value
Device has regionInfo: %@
PKCanMakePayments
PassKitCore
FTA isn't allowed, disabled
FTA isn't allowed, managed profile doesn't allow it
Conferencing isn't allowed, disabled
Conferencing isn't allowed, managed profile doesn't allow it
com.apple.facetime
ForceMakeBeforeBreak
Unnamed Device
Technology changed: %@   (Kicking heartbeat)
Phone Number Registration State changed: %@   (Kicking heartbeat, New State: %@)
Not posting Phone Number Registration State changed, no change from: %@   to: %@
Lockdown became activated, let's notify
Registering %@ for lockdown changes
isTelephonyDevice
TB,R,N
faceTimeAvailable
faceTimeBlocked
faceTimeSupported
callingAvailable
callingBlocked
callingSupported
nonWifiFaceTimeAvailable
nonWifiCallingAvailable
iMessageAvailable
iMessageBlocked
iMessageSupported
identityServicesSupported
madridAvailable
madridBlocked
madridSupported
conferencingEnabled
conferencingBlocked
conferencingAllowed
registrationSupported
commCenterDead
accountModificationRestricted
isInMultiUserMode
wantsBreakBeforeMake
SIMInserted
isC2KEquipment
supportsSimultaneousVoiceAndDataRightNow
wantsForcedCelluarQueries
TB,R,N,V_wantsForcedCelluarQueries
supportsSMSIdentification
supportsAppleIDIdentification
supportsApplePay
TB,R,N,V_supportsApplePay
supportsHandoff
TB,R,N,V_supportsHandoff
supportsTethering
TB,R,N,V_supportsTethering
supportsSMS
TB,R,N,V_supportsSMS
supportsMMS
TB,R,N,V_supportsMMS
mmsConfigured
TB,R,N,V_mmsConfigured
supportsWiFi
TB,R,N,V_supportsWiFi
supportsCellularData
TB,R,N,V_supportsCellularData
supportsWLAN
TB,R,N,V_supportsWLAN
supportsNonWiFiFaceTime
TB,R,N,V_supportsNonWiFiFaceTime
supportsNonWiFiCalling
supportsFrontFacingCamera
TB,R,N,V_supportsFrontCamera
supportsBackFacingCamera
TB,R,N,V_supportsBackCamera
supportsRegistrationControl
TB,R,N,V_supportsRegistrationControl
CTNetworkInformation
T@"NSDictionary",R,N
telephonyCapabilities
deviceName
T@"NSString",R,N
deviceColor
enclosureColor
deviceIDPrefix
deviceTypeIDPrefix
deviceRegionInfo
model
userAgentString
productName
productVersion
productBuildVersion
deviceInformationString
telephoneNumber
performanceClass
Tq,R,N
deviceType
gk-invitation-relay-cancel
peer-id
peer-push-token
reason
relay-type
relay-connection-id
self-relay-ip
self-relay-port
peer-relay-ip
peer-relay-port
peerID
T@"NSString",C,V_peerID
peerPushToken
T@"NSData",C,V_peerPushToken
relayType
T@"NSNumber",C,V_relayType
T@"NSNumber",C,V_reason
relayConnectionID
T@"NSData",C,V_relayConnectionID
selfRelayIP
T@"NSData",C,V_selfRelayIP
selfRelayPort
T@"NSNumber",C,V_selfRelayPort
peerRelayIP
T@"NSData",C,V_peerRelayIP
peerRelayPort
T@"NSNumber",C,V_peerRelayPort
FTErrorDomain
FTServicesSuppressServiceErrorDialogsPropertyKey
gk-invitation-relay-update
self-push-token
relay-transaction-id-alloc
relay-token-alloc-res
self-relay-nat-ip
self-relay-nat-port
self-relay-blob
selfPushToken
T@"NSData",C,V_selfPushToken
selfRelayBlob
T@"NSData",C,V_selfRelayBlob
relayTransactionIDAlloc
T@"NSData",C,V_relayTransactionIDAlloc
relayTokenAllocRes
T@"NSData",C,V_relayTokenAllocRes
selfRelayNATIP
T@"NSData",C,V_selfRelayNATIP
selfRelayNATPort
T@"NSNumber",C,V_selfRelayNATPort
allowAnyNetwork
validNetworkEnabled
validNetworkActive
validNetworkReachable
wiFiActiveAndReachable
willSearchForNetwork
dataActiveAndReachable
networkEnabled
networkActive
networkReachable
enableCriticalReliability
TB,N
gk-invitation-accept
self-nat-type
self-blob
self-nat-ip
peer-nat-type
peer-blob
peer-nat-ip
relay-token-alloc-req
selfNATType
T@"NSNumber",C,V_selfNATType
selfBlob
T@"NSData",C,V_selfBlob
selfNATIP
T@"NSData",C,V_selfNATIP
peerNATType
T@"NSNumber",C,V_peerNATType
peerBlob
T@"NSData",C,V_peerBlob
peerNATIP
T@"NSData",C,V_peerNATIP
relayConnectionId
T@"NSData",C,V_relayConnectionId
relayTransactionIdAlloc
T@"NSData",C,V_relayTransactionIdAlloc
relayTokenAllocReq
T@"NSData",C,V_relayTokenAllocReq
gk-invitation-relay-initiate
selfNatType
T@"NSNumber",C,V_selfNatType
T@"NSNumber",C,V_selfNATIP
peerNatType
T@"NSNumber",C,V_peerNatType
T@"NSNumber",C,V_peerNATIP
SCNetworkReachabilityCreateWithName
SystemConfiguration
SCNetworkReachabilityCreateWithAddress
localWiFiStatusForFlags
networkStatusForFlags
/BuildRoot/Library/Caches/com.apple.xbs/Sources/IdentityServices_Sim/IdentityServices-1025.8.9/FTServices/Device Support/FTEmbeddedReachability.m
<Unknown File>
connectionRequired called with NULL reachabilityRef
SCNetworkReachabilityGetFlags
currentNetworkStatus called with NULL reachabilityRef
EmbeddedReachability
AKAppleIDSession
AuthKit
com.apple.ids.ftauthkitmanager
MessageDelivery
AuthKit - gathering headers
AuthKit - received headers, count: %lu
AuthKit - handling response
AuthKit - shouldRetry: %@
Cannot send message: Empty URL requested for message: %@, forcing a bag load
 Query parameters: %@
%@=%@
v32@?0@8@16^B24
 Query string: %@
Generated final URL: %@
POST
Building URL request with URL: %@
Headers
 Protocol Version: %@
       User Agent: %@
FaceTime.Verbose
%@ %@
            Agent: %@
Accept-Language
gzip
accept-encoding
user-agent
content-encoding
application/x-apple-plist
content-type
content-length
       %@: %@
anisette-headers-disabled
anisette headers are required for messageType %@ but disabled by the server bag anisette-headers-disabled
v16@?0@"NSDictionary"8
v16@?0@?<v@?>8
************* Couldn't gather Anisette headers for %@ *************
************* Couldn't gather Anisette headers %@ *************
v12@?0B8
Exception processing result: %@   for message: %@
    
%@ = 
Requesting async send: %@
error = %@
Created URL Request: %@  from URL: %@
Delivering message to URL: %@
(Not Loggable)
Message body: %@
Force cellular: %@
MessageDelivery-oversized
Warning
**** Server sent status code header codes to refresh the bag, reloading IDS and iMessage bags ****
x-bag-refresh
**** Server sent status code header codes to refresh the bag (Interval: %d), reloading IDS and iMessage bags ****
  * Sending refresh, we're outside our interval: %d  (Last date: %@)
  * Not refreshing, we're still inside our interval: %d (Laste date: %@)
FTMessageDelivery-oversized
Finished URL request: %@
Response: %p
Response Headers
Response: %@
ResponseCode: %d
Error: %@
URL: %@
           Response: %@
       Replied Code: %d
 Result Data Length: %d
              Error: %@
Connection failed with error: %@
FTMessageDelivery failed! (HTTP Status Code: %d) Error (%@:%d): %@ %@
... this was a remote loader crash
... no error, ignoring...
... IDS message failed sending
... IDS message timed out
... we're done here, code: %d
... we should retry this
... not going to retry, we're done
  headers: %@
  status code: %d
Response
status
retry-interval
current-timestamp-ms
HTTP Status code: %d   will retry: %@
Server too busy, will retry after %f seconds
Setting server timestamp %@
Kicked off server retry
sent dictionary: %@
         result: %@
    status code: %d
v40@?0@"NSURLResponse"8q16@"NSData"24@"NSError"32
do-http-pipelining
max-concurrent-connections
do-http-keep-alive
http-keep-alive-idle-timeout-wifi-millis
http-keep-alive-idle-timeout-cell-millis
Failing message, empty url request
Failing message, empty url request for URL: %@
v16@?0@"NSURLRequest"8
Nothing left in queue, done
Server bag is not loaded, waiting for it
 => Server is available
 => Starting load
 => Already loading
 => Server not available
Message not being delivered, invalid message
Cancelling message delivery! invalid message!
Message not being delivered, missing some required keys: %@
Cancelling message delivery! Missing keys: %@
Cleaning out url connection
Should retry, already tried: %d times
Retrying - trying again in %f seconds
Gave up, too many attempts
Message timed out, but we're going to wait for CFNetwork: %@
Message timed out, but we want extra timeout retries (%d/%d): %@
Queue timed out delivery for message: %@
Cancelling message in the queue: %@
Adding message to the queue: %@
  Busy delivering: %@  (%@)
Server bag loaded
We're out of airplane mode, and we have a pending retry
_CFNetworkCopyPreferredLanguageCode
CFNetwork
anisette-headers-global-timeout
Using server bag anisetteHeaderGlobalTimeout: %f second(s)
gk-invitation-reject
APSOutgoingMessage
APSConnection
IDSFoundation
Created APSConnection: %p  (Max size: %d  Environment: %@)
Cannot map Message: %@   no ID!
none
Mapping messageID: %@  message: %@   APSMessage: %@   timeout: %f  timeoutSelector: %@
No timer specified for message ID: %@
Missing APS Message for message ID: %@
Missing FTMessage for message ID: %@
Missing body for message ID: %@
_clearMapForMessageID: %@
  => Message retried too many times (%d), not retrying anymore. Has received courier ack? %@
Noting message failed: %@   (Request ID: %@  Retries: %d  Retry Allowed: %@  Wants Retry: %@)
  => Will retry message: %@ in %f seconds
Informing delegate about message %@ with resultCode %ld
Noting message success: %@   (Request ID: %@   %d remaining)
Noting message ack'd: %@   (Request ID: %@   %d remaining)
   => Setting ack timeout time, this will use APS retries
Message has used %ld retries, Retry timeout time with multiplier will be %f
   => Setting send timeout time: %f
Noting message sent: %@   (Request ID: %@  Remaining: %d  Attempt: %d)
Sent outgoing message: %@ to command: %@   (Request ID: %@   Connection: %@)
Could not generate APSMessage for message: %@
Timed out waiting for server ack for message: %@   (Request ID: %@)
Timed out waiting for server response for message: %@   (Request ID: %@)
Missing message for retry!  (timer: %@   messageID: %@)
Starting retry for message: %@   (Request ID: %@)
v32@?0@8Q16^B24
Enabling required topics: %@
  => Skipping, already enabled
Cannot send message: Empty topic requested for message: %@
Building URL request with topic: %@  bagKey: %@
Body: %@
Final delivery payload: %@
Message sent as non-binary push. This is never expected and probably points to memory corruption.
Sending message: %@ as binary push
invalidating: %@
Created APSOutgoingMessage body: %@
Delivering message to command: %@
CommandID
MessageIdentifier
FaceTimeDelivery
Message body: %@ [guid: %@]
MessageGUID
IDS OutgoingPushSent
Failing message, empty message
 => Server bag not needed, proceeding
We're already busy, not pulling from queue
Removed message: %@   apsMessage: %@
Message: %@ not in queue.   Current message: %@
  Busy delivering: %@
received response dictionary: %@
no message found, map reads: %@
Topic
IDS IncomingPushReceived
Recived an unknown object for kBodyIDKey
Error decompressing body: %@  (Data: %@)
received response code: %@  response body: %@
  Found internal status code of: %@
Exception processing status code from result body: %@   for message: %@
  This Message Wants Multiple responses
  This Message responds to receiving updates for multipleMessages
 More To Come, Not done yet
  Last message Has Been acknowledged
Server ACK'd outgoing message: %@      (Request ID: %@)
   message: %@ wants response: %@
message: %@ delivery failed with error: %@   (Request ID: %@)
message delivery failed with error: %@
FTMessageDelivery failed! Error (%@:%d): %@ %@
APSConnection %@  gave me a connection size of: %d  which doesn't pass our sanity size of: %d   ignoring
APSConnection %@  gave me a connection large size of: %d  which doesn't pass our sanity size of: %d   ignoring
hash
TQ,R
superclass
T#,R
description
T@"NSString",R,C
debugDescription
md-retry-attempts
Server Bag provided us with %d retries
Server Bag has no value for retries, using the default: %d retries
md-retry-start-interval
Server Bag provided us with a retry interval of %f 
Server Bag has no value for interval , using the default: %f interval
%@:b
Passed in bogus info to FTIDSMessage (%@:%@:%@:%@)
x-push-token
x-id-self-uri
pushPrivateKey
T^{__SecKey=},N,V_pushKey
pushPublicKey
T^{__SecKey=},N,V_pushPublicKey
pushCertificate
T@"NSData",C,N,V_pushCert
pushToken
T@"NSData",C,N,V_pushToken
selfURI
T@"NSString",C,N,V_selfURI
certDataArray
T@"NSMutableArray",C,N,V_certDataArray
publicKeyArray
T@"NSMutableArray",C,N,V_publicKeyArray
privateKeyArray
T@"NSMutableArray",C,N,V_privateKeyArray
userIDArray
T@"NSMutableArray",C,N,V_userIDArray
identityPrivateKey
T^{__SecKey=},N,V_identityKey
identityPublicKey
T^{__SecKey=},N,V_identityPublicKey
IDCertificate
T@"NSData",C,N,V_identityCert
gk-invitation-cancel
peers
T@"NSArray",C,V_peers
__kFTCTRegistrationStatusCanRegisterKey
__kFTCTRegistrationStatusPhoneNumberKey
__kFTCTRegistrationStatusChangedNotification
__kFTEntitlementStatusChangedNotification
Entitlements
This device does not support non WiFi facetime, thus we're not entitled
Returning default entitlement of YES
Registration state changed: %@
Posting notification for entitlement status changed
 Cleaning up mach bits
faceTimeNonWiFiEntitled
registrationState
T@"NSDictionary",R,&,N
_nonWifiFaceTimeEntitled
cellularFaceTimeEnabled
gk-invitation-send
subregions
iso-2
label
base-phone-number
[FTRegion] Label: %@   ISO: %@    BaseNumber: %@  Region ID: %@
_dictionary
T@"NSDictionary",&,V_dictionary
_parentRegion
T@"FTRegion",&,V_parentRegion
isoCode
T@"NSString",R
regionID
basePhoneNumber
parentRegion
T@"FTRegion",R
subRegions
T@"NSArray",R,&,V_subRegions
__kFTRegionListFinishedLoadingNotification
com.apple.facetime-region-query
RegionSupport
Succeeded loading region information
RegionSupport.Verbose
   Region info: %@
   Loaded region: %@
Failed querying regions: %@  code: %ld
v40@?0@"IDSBaseMessage"8@"NSError"16q24@"NSDictionary"32
_delivery
T@"FTMessageDelivery",&,V_delivery
_regions
T@"NSArray",&,V_regions
regions
gk-invitation-initiate
service-data
client-data
alert
selfNatIP
T@"NSData",C,V_selfNatIP
regionInformation
T@"NSDictionary",C,V_regionInformation
canonicalizedPeers
T@"NSArray",C,V_canonicalizedPeers
vc-profile-get-region-metadata
accept-language
language
T@"NSString",C,V_language
responseRegionInformation
T@"NSDictionary",C,V_responseRegionInformation
ACAccountStore
Accounts
Checking keychain with prefixed username %@
Account: %@
            username: %@
          profile ID: %@
               token: %@
vetted email handles: %@
B16@?0@"ACAccount"8
Searching for profileID %@
Didn't find an authenticated account with a DSID; attempting to fall back to an unauthenticated match that has a password
Didn't find a DISD match with a password; attempting to fall back to an unauthenticated DISD and username match
Didn't find an unauthenticated DISD and username match; attempting to fall back to an unauthenticated DSID match
Didn't find a DSID match!
Couldn't match based on any known DSID of %@; attempting to fall back to a username match
Couldn't find a username match for %@; attempting to search aliases of known accounts
Didn't find any matching account!
Didn't find profileID %@; attempting to use username %@
Fetching password for profileID: %@ username: %@ service: %@
  Found account: %@
  Credential: %@
         => Type: %@
     => Username: %@
     => Password: %@
   => Auth Token: %@
   => Profile ID: %@
      => Self ID: %@
Did not find an account to use! No password fetched.
Fetching auth token for profileID: %@ username: %@ service: %@
Did not find an account to use! No auth token fetched.
Requesting password for username: %@  service: %@
Handle user notification complete: %@:%@
v16@?0@"IMUserNotification"8
Requesting auth token for profileID: %@ username: %@ service: %@
ACAccount
No account found, created new account: %@
Adding and saving account
Save completed (%@) with error: %@
Failed saving account %@ with error: %@
v20@?0B8@"NSError"12
Getting new auth token for account: %@
Failed renewing account %@ with error: %@
Renewal complete for: %@  service: %@ account: %@  renewResult: %ld  error: %@
  => Cancelled, bailing
*** Empty profile ID handed back during token gathering, please file a radar
*** Account: %@
v24@?0q8@"NSError"16
Requesting verification for account: %@
Completed verify credentials
Verification complete for: %@  service: %@ account: %@  error: %@
Failed verifying account %@ with error: %@
*** No error reported for account verification, but verified account is nil, please file a radar (input: %@  output: %@)
*** No account found to use for renewal, please file a radar (input: %@  output: %@)
   Verification failed with error: %@, starting renew for service: %@
Verification succeeded for account: %@
     => Token: %@
    => SelfID: %@
*** Account properties: %@
v24@?0@"ACAccount"8@"NSError"16
Checking the current status of the account %@
Not requesting renewal for a Managed AppleID account
Requesting renewal for account: %@  service: %@
Setting password for profileID: %@ username: %@ service: %@
Using account: %@
Updated credential: %@
ACAccountCredential
Creating credential: %@
Assigning credential: %@
Saving account
Setting auth token for profileID: %@ username: %@ service: %@  (%@)
Updating credential %@
Setting profile ID on account: %@
Setting self handle on account: %@
Saving account: %@
      Authenticated: %@
Setting handles dictionary for profileID: %@ username: %@ service: %@  (%@)
The password for \U201C%@\U201D needs to be updated.
FTSLocalizable
FaceTime/iMessage Apple ID alert body: The password for this Apple ID needs to be updated. arg1:username 
iMessage
Calling
Verification Options Dictionary Contains: %@
__ksPasswordPromptUserNotificationIdentifier
iCloud
Password alert title: iCloud
%@ Password
DaemonCoreLocalizable
Alert title: %@ password (arg: service name)
Password
Text label: password
Log In
Button title: login
Cancel
%@ Login
Alert title:login (arg: service name)
Login ID:
Text label: loginid
Password:
Forgot Password\U2026
Button title: Forgot Password button
Remember this password in my keychain
Remember password
Messages can\U2019t log in to %@ because your login ID or password is incorrect.
Alert message:badpasslogin (arg:account name)
Please enter your password for %@.
Alert message:login (arg:account name)
FTPasswordManager
-[FTPasswordManager acAccountWithProfileID:username:accountStore:]
%@ - %s: invalid arguments!
ACAccountTypeIdentifierIdentityServices
profileID
(nil auth token)
(empty auth token)
%@...
(short auth token)
handles
originalUsername
com.apple
bundleRef
com.apple.imcore
profile-id
self-handle
kACRenewCredentialsShouldForceKey
kACRenewCredentialsAppleIDServiceTypeKey
kACRenewCredentialsReasonStringKey
kACRenewCredentialsProxiedAppBundleIDKey
/System/Library/PrivateFrameworks/IMDaemonCore.framework
sharedInstanceForBagType:
alloc
initWithBagType:
isLoaded
startBagLoad
_sharedInstanceForType:
init
defaultCenter
removeObserver:
dealloc
forceBagLoad
isLoading
_cachedBag
_bag
bagURL
apsEnvironmentName
allowSelfSignedCertificates
allowUnsignedBags
isInDebilitatedMode
objectForKey:
urlWithKey:
isServerAvailable
sharedInstance
_sharedInstance
_type
class
setDelegate:
networkStateChanged
addObserver:selector:name:object:
removeObserver:name:object:
_clearRetryTimer
release
removeAllMessages
errorWithDomain:code:userInfo:
_errorForTDMessageDeliveryStatus:userInfo:
domain
code
completionBlock
messages
topMessage
queuedMessages
count
retain
invalidate
logToRegistration
_sendMessageAsynchronously:error:
_retryTimerHit:
initWithTimeInterval:name:shouldWake:target:selector:userInfo:
maxMessageSize
bagKey
pushToken
pushCertificate
pushPublicKey
pushPrivateKey
serverTimestamp
IDCertificate
identityPublicKey
identityPrivateKey
certDataArray
date
timeIntervalSince1970
serverTimestampReceivedDate
doubleValue
numberWithDouble:
setServerTimestamp:
dateWithTimeIntervalSince1970:
isKindOfClass:
userIDArray
objectAtIndex:
publicKeyArray
privateKeyArray
allKeys
stringWithFormat:
HTTPMessageDeliveryClass
APNSMessageDeliveryClass
queue:hitTimeoutForMessage:
_informDelegateAboutMessage:error:result:resultCode:
currentMessage
allMessages
busy
hasQueuedItems
_queue
cancelMessage:
sendMessage:
_setRetryTimer:
maxLargeMessageSize
_signMessage:useDataSignatures:body:queryString:intoDictionary:
protocolVersion
setProtocolVersion:
userAgent
setUserAgent:
setLogToRegistration:
maxConcurrentMessages
setMaxConcurrentMessages:
retryInAirplaneMode
setRetryInAirplaneMode:
_retries
_protocolVersion
_userAgent
_maxConcurrentMessages
_retryInAirplaneMode
_logToRegistration
_timer
_FTStringFromBaseData
setTimeout:
copyWithZone:
sessionToken
setSessionToken:
selfURI
length
arrayWithObject:
_FTDataFromHexString
subdataWithRange:
isEqualToData:
isValidMessage
messageBody
mutableCopy
autorelease
hasRequiredKeys:
requiredKeys
_sessionToken
_timeoutHit
cancelPreviousPerformRequestsWithTarget:selector:object:
_clearTimeout
delegate
timeIntervalSinceNow
timeout
performSelector:withObject:afterDelay:
removeAllObjects
removeObjectAtIndex:
_setTimeout
addObject:
insertObject:atIndex:
dequeueTopMessage
addMessage:
addMessageAtHeadOfQueue:
removeMessage:
set_queue:
_addDates
set_addDates:
_delegate
isEqualToString:
_FTDataFromBase64String
numberWithInteger:
numberWithUnsignedInteger:
countByEnumeratingWithState:objects:count:
isC2KEquipment
numberWithInt:
dataWithBytes:length:
appendData:
dataUsingEncoding:
appendBytes:length:
SHA1Data
bytes
_FZIDType
_IDFromFZIDType:
_stripFZIDPrefix
localizedCaseInsensitiveCompare:
_FZBestGuessFZIDType
_URIFromFZIDType:
lowercaseString
base64Encoding
_FTFilteredArrayForAPS
_FTFilteredDictionaryForAPS
_URIsFromIDs
_IDsFromURIs
setObject:forKey:
initWithBase64EncodedString:options:
data
getCharacters:
dataWithBytesNoCopy:length:freeWhenDone:
base64EncodedStringWithOptions:
dataWithLength:
increaseLengthBy:
mutableBytes
setLength:
dataWithData:
_FTDecompressData
initWithLength:
_FTOptionallyDecompressData
_FTCopyGzippedData
_watchNotifyTokens
_updateCapabilities
_updateManagedConfigurationSettings
_registerForCarrierNotifications
_registerForCapabilityNotifications
_registerForCoreTelephonyNotifications
_registerForLockdownNotifications
_registerForManagedConfigurationNotifications
_unregisterForManagedConfigurationNotifications
_unregisterForCoreTelephonyNotifications
_unregisterForCarrierNotifications
_unregisterForCommCenterReadyNotifications
__im_afterDelay:
_forceWWANQueriesCarrierBundleValue
deviceType
integerValue
arrayWithObjects:count:
deviceRegionInfo
containsObject:
__mainThreadPostNotificationName:object:
madridSupported
madridBlocked
callingSupported
callingBlocked
faceTimeBlocked
madridAvailable
conferencingEnabled
conferencingBlocked
conferencingAllowed
supportsNonWiFiFaceTime
faceTimeSupported
iMessageSupported
supportsAppleIDIdentification
model
__stringByStrippingControlCharacters
registrationState
isEqualToDictionary:
__mainThreadPostNotificationName:object:userInfo:
isTelephonyDevice
userAgentString
productName
productVersion
productBuildVersion
deviceInformationString
isActivated
_lockdownStateChanged:
faceTimeNonWiFiEntitled
nonWifiAvailableForBundleId:
cellularDataEnabledForBundleId:
allowAnyNetwork
nonWifiFaceTimeAvailable
carrierSettingsChanged:
_wantsForcedCellularQueries
_registerForCommCenterReadyNotifications
_operatorChanged
_carrierChanged
_registerForInternalCoreTelephonyNotifications
commCenterDead
callingAvailable
iMessageAvailable
iMessageBlocked
faceTimeAvailable
identityServicesSupported
supportsNonWiFiCalling
registrationSupported
accountModificationRestricted
deviceIDPrefix
deviceTypeIDPrefix
telephonyCapabilities
supportsSimultaneousVoiceAndDataRightNow
SIMInserted
wantsBreakBeforeMake
deviceName
deviceColor
enclosureColor
_simStatusChanged:
_handleTechnologyChange:
_handlePhoneNumberRegistrationStateChanged:
CTNetworkInformation
supportsSMSIdentification
telephoneNumber
performanceClass
wifiAllowedForBundleId:
nonWifiCallingAvailable
isInMultiUserMode
supportsRegistrationControl
supportsApplePay
supportsHandoff
supportsTethering
supportsFrontFacingCamera
supportsBackFacingCamera
supportsWLAN
supportsWiFi
supportsCellularData
supportsSMS
supportsMMS
mmsConfigured
wantsForcedCelluarQueries
_number
_blockPost
_supportsFrontCamera
_supportsBackCamera
_supportsiMessage
_supportsSMS
_supportsMMS
_mmsConfigured
_supportsApplePay
_supportsHandoff
_supportsTethering
_supportsFT
_supportsFTA
_supportsWiFi
_supportsWLAN
_supportsNonWiFiFaceTime
_supportsCellularData
_shouldUseSIMState
_commCenterDead
_simBecameNotReady
_simInserted
_wantsForcedCelluarQueries
_carrierBundleSupported
_iMessageAllowedToken
_faceTimeBlocked
_iMessageBlocked
_accountModificationRestricted
_supportsRegistrationControl
_performanceClass
peerID
peerPushToken
reason
intValue
relayType
relayConnectionID
selfRelayIP
selfRelayPort
peerRelayIP
peerRelayPort
setPeerID:
setPeerPushToken:
setRelayType:
setReason:
setRelayConnectionID:
setSelfRelayIP:
setSelfRelayPort:
setPeerRelayIP:
setPeerRelayPort:
_peerID
_peerPushToken
_relayType
_reason
_relayConnectionID
_selfRelayIP
_selfRelayPort
_peerRelayIP
_peerRelayPort
selfPushToken
relayTransactionIDAlloc
relayTokenAllocRes
selfRelayNATIP
selfRelayNATPort
selfRelayBlob
setSelfPushToken:
setSelfRelayBlob:
setRelayTransactionIDAlloc:
setRelayTokenAllocRes:
setSelfRelayNATIP:
setSelfRelayNATPort:
_selfPushToken
_selfRelayBlob
_relayTransactionIDAlloc
_relayTokenAllocRes
_selfRelayNATIP
_selfRelayNATPort
validNetworkEnabledForBundleId:
validNetworkActiveForBundleId:
validNetworkReachable
validNetworkReachableForBundleId:
reachabilityForInternetConnection
currentReachabilityStatus
willSearchForNetworkForBundleId:
_clearReliabilityTimeoutInterval
validNetworkEnabled
validNetworkActive
wiFiActiveAndReachable
willSearchForNetwork
dataActiveAndReachable
networkEnabled
networkActive
networkReachable
enableCriticalReliability
_setReliabilityTimeoutInterval
_reallySetCriticalReliability:
_tryToEnableReliability
setEnableCriticalReliability:
_enableCriticalReliability
_criticalReliabilityEnabledState
selfNATType
selfBlob
selfNATIP
peerNATType
peerBlob
peerNATIP
setRelayConnectionId:
setRelayTransactionIdAlloc:
setRelayTokenAllocReq:
handleResponseDictionary:
setSelfNATType:
setSelfBlob:
setSelfNATIP:
setPeerNATType:
setPeerBlob:
setPeerNATIP:
relayConnectionId
relayTransactionIdAlloc
relayTokenAllocReq
_selfNATType
_selfBlob
_selfNATIP
_peerNATType
_peerBlob
_peerNATIP
_relayConnectionId
_relayTransactionIdAlloc
_relayTokenAllocReq
selfNatType
peerNatType
setSelfNatType:
setPeerNatType:
_selfNatType
_peerNatType
UTF8String
reachabilityWithAddress:
stringWithUTF8String:
currentHandler
handleFailureInMethod:object:file:lineNumber:description:
localWiFiStatusForFlags:
networkStatusForFlags:
reachabilityWithHostName:
reachabilityForLocalWiFi
connectionRequired
localWiFiRef
reachabilityRef
initWithIdentifier:
appleIDHeadersForRequest:
handleResponse:forRequest:shouldRetry:
anisetteHeadersForRequest:completionBlockQueue:completionBlock:
handleResponse:forRequest:completionBlock:
_akAppleIDSession
_serverBagLoaded:
cancel
additionalQueryStringParameters
appendString:
appendFormat:
enumerateKeysAndObjectsUsingBlock:
absoluteString
stringByAppendingFormat:
URLWithString:
requestWithURL:cachePolicy:timeoutInterval:
wantsHTTPGet
setHTTPMethod:
setHTTPBody:
setHTTPShouldHandleCookies:
setValue:forHTTPHeaderField:
stringValue
additionalMessageHeaders
isInternalInstall
additionalInternalHeaders
boolValue
anisetteHeadersTimeout
_dequeueIfNeeded
wantsSignature
wantsBodySignature
propertyListWithData:options:format:error:
_cleanupURLConnection
stringByAppendingString:
_indentedRegistrationLogWithLevel:
copy
_printDictionaryToRegistrationLogs:indentationLevel:
_printArrayToRegistrationLogs:identationLevel:
_printObjectToRegistrationLogs:key:identationLevel:
messageBodyUsingCache
dataWithPropertyList:format:options:error:
localizedDescription
payloadCanBeLogged
description
forceCellular
allHeaderFields
respondsToSelector:
allHTTPHeaderFields
userInfo
wantsCFNetworkTimeout
wantsManagedRetries
_tryRetryMessageWithTimeInterval:
statusCode
handleResponseHeaders:
_processResultData:forMessage:error:
setServerTimestampReceivedDate:
setRequest:
setBlock:
setShouldUsePipelining:
setConcurrentConnections:
setDisableKeepAlive:
setKeepAliveWifi:
setKeepAliveCell:
dataUsageBundleIdentifier
setBundleIdentifierForDataUsage:
setForceCellularIfPossible:
alwaysForceCelluar
setAlwaysForceCellular:
wantsIDSServer
setRequireIDSHost:
load
_notifyDelegateAboutError:forMessage:
_urlRequestWithURL:andData:message:missingAnisetteHeaders:completionBlock:
_updateWiFiAssertions
wantsExtraTimeoutRetry
timeoutRetries
maxTimeoutRetries
setTimeoutRetries:
timeIntervalSinceReferenceDate
setTimeSent:
sendMessageAtTopOfTheQueue:
_remoteConnection
_pendingRetryAfterAirplaneMode
_retryTimeAfterAirplaneMode
initWithEnvironmentName:queue:
array
_setEnabledTopics:
_updateTopics
messageSize
cancelOutgoingMessage:
setEnabledTopics:ignoredTopics:opportunisticTopics:
uniqueIDString
_invalidateTimerForMessageID:
scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:
_messageCompletelyTimedOut:
_invalidateDeathTimerForMessageID:
removeObjectForKey:
allKeysForObject:
allValues
_currentMessages
addObjectsFromArray:
__imFirstObject
_apsOutgoingMessageForFTMessage:
_messageForAPSOutgoingMessage:
_fillMessageParameters:ftMessage:
_retryCountForMessage:
hasReceivedPushAck
logFailureInfo
wantsCustomRetryInterval
customRetryInterval
setHasReceivedPushAck:
_messageNeedsRetry:
_setMapForMessage:apsMessage:messageBody:timeoutTime:timeoutSelector:retries:
_clearMapForMessageID:
wantsAPSRetries
highPriority
_messageACKTimedOut:
_messageSendTimedOut:
_apsMessageForMessage:body:
_noteMessageSent:ftMessage:body:
sendOutgoingMessage:
_noteMessageFailed:ftMessage:allowRetry:error:
setRetryCount:
_bodyForMessage:
_sendMessage:ftMessage:
topic
enumerateObjectsUsingBlock:
allObjects
_requiredTopics
isEqualToArray:
wantsHTTPHeaders
wantsUserAgentInHeaders
userAgentHeaderString
wantsCompressedBody
additionalMessageHeadersForOutgoingPush
nonStandardMessageHeadersForOutgoingPush
wantsBagKey
command
addEntriesFromDictionary:
dictionary
wantsIntegerUniqueIDs
uniqueID
numberWithUnsignedLongLong:
_apsMessageBodyForMessage:
wantsBinaryPush
processInfo
processName
initWithTopic:userInfo:
setPayloadFormat:
setIdentifier:
setCritical:
setPriority:
_powerLogEvent:dictionary:
_noteMessageSucceeded:ftMessage:error:result:resultCode:
_setUsingOutgoingPush:
_dataForKey:
dictionaryWithObjectsAndKeys:
responseCommand
isWebTunnelMessage
wantsMultipleResponses
noteResponseForToken:withResponse:andError:
expectingMoreResponses
_isBusyWithMessage:
wantsResponse
deliveryAcknowledgementBlock
_noteMessageACKd:ftMessage:
largeMessageSize
connection:didReceivePublicToken:
connection:didReceiveToken:forTopic:identifier:
connection:didReceiveIncomingMessage:
connection:didReceiveMessageForTopic:userInfo:
connection:didSendOutgoingMessage:
connection:didFailToSendOutgoingMessage:error:
connection:didChangeConnectedStatus:
connectionDidReconnect:
isEqual:
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isMemberOfClass:
conformsToProtocol:
retainCount
zone
hash
superclass
debugDescription
_currentAPSMessages
_currentTimers
connection
_APSConnectionClass
_APSOutgoingMessageClass
_connection
_messageSize
_largeMessageSize
_enabledTopics
_ftMessageMap
_startDateMap
_bodyMap
_apsMessageMap
_timerMap
_deathTimerMap
_retriesMap
setValue:forKey:
rangeOfString:
substringToIndex:
hasSuffix:
replaceObjectAtIndex:withObject:
lastObject
setTopic:
setWantsResponse:
setSelfURI:
setPushToken:
setPushCertificate:
setPushPrivateKey:
setPushPublicKey:
setIDCertificate:
setIdentityPrivateKey:
setIdentityPublicKey:
setPublicKeyArray:
setPrivateKeyArray:
setCertDataArray:
setUserIDArray:
_usingOutgoingPush
addAuthUserID:certificate:privateKey:publicKey:
_pushCert
_identityKey
_identityCert
_identityPublicKey
_pushKey
_pushPublicKey
_pushToken
_selfURI
_certDataArray
_publicKeyArray
_privateKeyArray
_userIDArray
_serverTimestamp
_serverTimestampReceivedDate
peers
setPeers:
_peers
_setupCTServerConnection
_nonWifiFaceTimeEntitled
_rawEntitlementValue
_registrationStateChanged
_entitlementStatusChanged
_updateEntitlementStatusUsingCTEntitlementsInfo:
_registerForCTEntitlementNotifications
_unregisterForCTEntitlementNotifications
_cleanupMachInfo
_reconnectCTServerConnectionIfNecessary
_disconnectCTServerConnection
_adequateInternalOrCarrierInstall
cellularFaceTimeEnabled
setCellularFaceTimeEnabled:
setAllowAnyNetwork:
_initWithDictionary:
_setParentRegion:
makeObjectsPerformSelector:withObject:
regionID
subRegions
label
isoCode
basePhoneNumber
parentRegion
regionWithID:
_dictionary
set_dictionary:
_parentRegion
set_parentRegion:
_subRegions
_buildMessageDeliveryIfNeeded
setLanguage:
responseRegionInformation
setCompletionBlock:
regions
startLoading
flushRegions
regionForID:
_regions
set_regions:
_delivery
set_delivery:
regionInformation
clientInfo
selfNatIP
setCanonicalizedPeers:
setResponseAlertInfo:
setSelfNatIP:
canonicalizedPeers
setRegionInformation:
_selfNatIP
_canonicalizedPeers
_regionInformation
language
setResponseRegionInformation:
_language
_responseRegionInformation
initWithUserNotificationCenter:
accountTypeWithAccountTypeIdentifier:
accountsWithAccountType:
username
_findIDSAccountInStore:withCriteria:
credential
password
_accountWithUsername:inStore:
isEqualToIgnoringCase:
_profileIDForUsername:inStore:
_accountWithProfileID:username:inStore:
_accountWithUsernameAlias:inStore:
_accountWithProfileIDMatchingUser:inStore:
stringGUID
_accountBasedOnProfileID:orUsername:inStore:
credentialForAccount:
accountType
identifier
token
_keychainPasswordForUsername:service:
removeObject:
accountProperties
_keychainAuthTokenForUsername:service:
_loginUserNotificationForService:user:isForBadPassword:showForgetPassword:shouldRememberPassword:
responseInformation
response
addUserNotification:listener:completionHandler:
initWithAccountType:
setUsername:
saveVerifiedAccount:withCompletionHandler:
reload
setCredential:
_accountOptionsDictForRenewCredentialsForService:username:
renewCredentialsForAccount:options:completion:
accountPropertyForKey:
verifyCredentialsForAccount:withHandler:
setPassword:
credentialWithPassword:
_setKeychainPassword:forUsername:service:
setAuthTokenForProfileID:username:service:authToken:selfHandle:accountStatus:outRequestID:completionBlock:
setToken:
setAccountProperty:forKey:
setAuthenticated:
isAuthenticated
_setKeychainAuthToken:forUsername:service:
bundleForClass:
numberWithBool:
removeNotificationsForServiceIdentifier:
stringByRemovingWhitespace
arrayWithObjects:
userNotificationWithIdentifier:timeout:alertLevel:displayFlags:displayInformation:
_primaryAppleAccount
supportsAuthTokenRequests
_findIDSAccountsInStore:withCriteria:
fetchPasswordForProfileID:username:service:outRequestID:completionBlock:
fetchAuthTokenForProfileID:username:service:outRequestID:completionBlock:
requestPasswordForUsername:service:badPassword:showForgotPassword:shouldRememberPassword:outRequestID:completionBlock:
requestAuthTokenForProfileID:username:service:badPassword:showForgotPassword:outRequestID:completionBlock:
setPasswordForProfileID:username:service:password:outRequestID:completionBlock:
setAuthTokenForProfileID:username:service:authToken:selfHandle:outRequestID:completionBlock:
setHandlesForProfileID:username:service:handles:
cancelRequestID:serviceIdentifier:
acAccountWithProfileID:username:accountStore:
profileIDForACAccount:
isiCloudSignedIn
_runningQueries
_accountStore
_userNotificationCenter
hasPrefix:
bundleWithPath:
FTServerBag
FTMessageDelivery
FTMessageQueueDelegate
IDSFaceTimeMessage
NSCopying
FTMessageQueue
FTAPSOutgoingMessage_Additions
FaceTimeStringAdditions
CompressionAdditions
FTDeviceSupport
IDSRelayCancelMessage
IDSRelayUpdateMessage
FTNetworkSupport
IDSAcceptMessage
IDSRelayInitiateMessage
FTEmbeddedReachability
FTAuthKitManager
FTMessageDelivery_HTTP
IDSRejectMessage
FTMessageDelivery_APS
APSConnectionDelegate
NSObject
FTIDSMessage
IDSCancelMessage
FTEntitlementSupport
FTUserConfiguration
IDSSendMessage
FTRegion
FTRegionSupport
IDSInitiateMessage
FTGetRegionMetadataMessage
FTPasswordManager
@16@0:8
@24@0:8q16
v16@0:8
B16@0:8
@24@0:8@16
#16@0:8
@32@0:8q16@24
v32@0:8@16@24
v32@0:8@"FTMessageQueue"16@"IDSBaseMessage"24
v48@0:8@16@24@32q40
B32@0:8@16^@24
v24@0:8@16
B24@0:8@16
v24@0:8d16
q16@0:8
v52@0:8@16B24@28@36@44
v20@0:8B16
Q16@0:8
v24@0:8Q16
@"NSNumber"
@"FTMessageQueue"
@"NSString"
@"IMTimer"
@24@0:8^{_NSZone=}16
B24@0:8^@16
@"NSData"
@"NSMutableArray"
@"<FTMessageQueueDelegate>"
@24@0:8r^{sockaddr_in=CCS{in_addr=I}[8c]}16
q20@0:8I16
^{__SCNetworkReachability=}
v40@0:8@16@24@?32
@"AKAppleIDSession"
@"NSObject<OS_dispatch_queue>"
v56@0:8@16@24@32^B40@?48
@40@0:8@16@24^@32
@20@0:8I16
v36@0:8@16@24I32
v28@0:8@16I24
B24@0:8d16
@"IMRemoteURLConnection"
v32@0:8@"APSConnection"16@"NSData"24
v48@0:8@16@24@32@40
v48@0:8@"APSConnection"16@"NSData"24@"NSString"32@"NSString"40
v32@0:8@"APSConnection"16@"APSIncomingMessage"24
v40@0:8@16@24@32
v40@0:8@"APSConnection"16@"NSString"24@"NSDictionary"32
v32@0:8@"APSConnection"16@"APSOutgoingMessage"24
v40@0:8@"APSConnection"16@"APSOutgoingMessage"24@"NSError"32
v28@0:8@16B24
v28@0:8@"APSConnection"16B24
v24@0:8@"APSConnection"16
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8@"Protocol"16
B24@0:8:16
Vv16@0:8
^{_NSZone=}16@0:8
@"NSString"16@0:8
v64@0:8@16@24@32d40:48@56
q24@0:8@16
B32@0:8^@16^@24
v44@0:8@16@24B32@36
v56@0:8@16@24@32@40q48
@32@0:8@16@24
@"APSConnection"
@"NSMutableDictionary"
v24@0:8^{__SecKey=}16
v48@0:8@16@24^{__SecKey=}32^{__SecKey=}40
^{__SecKey=}16@0:8
^{__SecKey=}
@"NSArray"
v24@0:8^{__CFDictionary=}16
@"NSDictionary"
@"FTRegion"
@"FTMessageDelivery"
@44@0:8@16@24B32B36B40
@32@0:8@16@?24
@40@0:8@16@24@32
v56@0:8@16@24@32^@40@?48
v60@0:8@16@24B32B36B40^@44@?52
v64@0:8@16@24@32B40B44^@48@?56
v64@0:8@16@24@32@40^@48@?56
v72@0:8@16@24@32@40@48^@56@?64
v80@0:8@16@24@32@40@48@56^@64@?72
@"NSMutableSet"
@"ACAccountStore"
@"IMUserNotificationCenter"
@(#)PROGRAM:FTServices  PROJECT:FaceTime Services-
Should retry!
...Should retry
...Failed retrying
Timestamp received %@, delta %f servertimestamp %@ newServerTimestamp %@
Signing message: %@
   Single signing for: %@
   Multiple signatures for: %@
   adding userID: %@
   result dictionary: %@
Setting timeout for %f seconds from now  (Message: %@)
Queue timeout hit for message: %@
Determining query behavior by carrierBundleValue: %@
Carrier Bundle wants to force celluar Queries
Device has interesting region info, allowing carrier bundle value to set behaviour : %@
Device does not have interesting regionInfo, Ignoring Carrier Bundle Value
Device has regionInfo: %@
Reachability Flag Status: %c%c %c%c%c%c%c%c%c %s
AuthKit - gathering headers
AuthKit - received headers, count: %lu
AuthKit - handling response
AuthKit - shouldRetry: %@
Cannot send message: Empty URL requested for message: %@, forcing a bag load
Building URL request with URL: %@
Headers
 Protocol Version: %@
       User Agent: %@
            Agent: %@
************* Couldn't gather Anisette headers for %@ *************
************* Couldn't gather Anisette headers %@ *************
       %@: %@
Requesting async send: %@
Delivering message to URL: %@
Message body: %@
Force cellular: %@
**** Server sent status code header codes to refresh the bag, reloading IDS and iMessage bags ****
**** Server sent status code header codes to refresh the bag (Interval: %d), reloading IDS and iMessage bags ****
  * Sending refresh, we're outside our interval: %d  (Last date: %@)
  * Not refreshing, we're still inside our interval: %d (Laste date: %@)
Finished URL request: %@
Response: %p
Response: %@
ResponseCode: %d
Error: %@
URL: %@
Connection failed with error: %@
FTMessageDelivery failed! (HTTP Status Code: %d) Error (%@:%d): %@ %@
... this was a remote loader crash
... IDS message failed sending
... IDS message timed out
... we're done here, code: %d
... we should retry this
... not going to retry, we're done
  headers: %@
  status code: %d
HTTP Status code: %d   will retry: %@
Server too busy, will retry after %f seconds
Setting server timestamp %@
Kicked off server retry
sent dictionary: %@
         result: %@
    status code: %d
Failing message, empty url request
Failing message, empty url request for URL: %@
Nothing left in queue, done
Server bag is not loaded, waiting for it
 => Starting load
 => Server not available
Message not being delivered, invalid message
Cancelling message delivery! invalid message!
Message not being delivered, missing some required keys: %@
Cancelling message delivery! Missing keys: %@
Cleaning out url connection
Should retry, already tried: %d times
Retrying - trying again in %f seconds
Gave up, too many attempts
Message timed out, but we're going to wait for CFNetwork: %@
Message timed out, but we want extra timeout retries (%d/%d): %@
Queue timed out delivery for message: %@
Cancelling message in the queue: %@
Adding message to the queue: %@
  Busy delivering: %@  (%@)
Server bag loaded
We're out of airplane mode, and we have a pending retry
Created APSConnection: %p  (Max size: %d  Environment: %@)
Cannot map Message: %@   no ID!
Mapping messageID: %@  message: %@   APSMessage: %@   timeout: %f  timeoutSelector: %@
No timer specified for message ID: %@
Missing APS Message for message ID: %@
Missing FTMessage for message ID: %@
Missing body for message ID: %@
_clearMapForMessageID: %@
  => Message retried too many times (%d), not retrying anymore. Has received courier ack? %@
Noting message failed: %@   (Request ID: %@  Retries: %d  Retry Allowed: %@  Wants Retry: %@)
  => Will retry message: %@ in %f seconds
Informing delegate about message %@ with resultCode %ld
Noting message success: %@   (Request ID: %@   %d remaining)
Noting message ack'd: %@   (Request ID: %@   %d remaining)
   => Setting ack timeout time, this will use APS retries
Message has used %ld retries, Retry timeout time with multiplier will be %f
   => Setting send timeout time: %f
Noting message sent: %@   (Request ID: %@  Remaining: %d  Attempt: %d)
Sent outgoing message: %@ to command: %@   (Request ID: %@   Connection: %@)
Could not generate APSMessage for message: %@
Timed out waiting for server ack for message: %@   (Request ID: %@)
Timed out waiting for server response for message: %@   (Request ID: %@)
Missing message for retry!  (timer: %@   messageID: %@)
Starting retry for message: %@   (Request ID: %@)
Enabling required topics: %@
  => Skipping, already enabled
Cannot send message: Empty topic requested for message: %@
Building URL request with topic: %@  bagKey: %@
Body: %@
Final delivery payload: %@
Sending message: %@ as binary push
invalidating: %@
Created APSOutgoingMessage body: %@
Delivering message to command: %@
Message body: %@ [guid: %@]
Failing message, empty message
 => Server is available
 => Already loading
 => Server bag not needed, proceeding
We're already busy, not pulling from queue
Removed message: %@   apsMessage: %@
Message: %@ not in queue.   Current message: %@
  Busy delivering: %@
no message found, map reads: %@
received response dictionary: %@
Recived an unknown object for kBodyIDKey
Error decompressing body: %@  (Data: %@)
received response code: %@  response body: %@
Exception processing result: %@   for message: %@
  Found internal status code of: %@
Exception processing status code from result body: %@   for message: %@
  This Message Wants Multiple responses
  This Message responds to receiving updates for multipleMessages
 More To Come, Not done yet
  Last message Has Been acknowledged
Server ACK'd outgoing message: %@      (Request ID: %@)
   message: %@ wants response: %@
message delivery failed with error: %@
FTMessageDelivery failed! Error (%@:%d): %@ %@
APSConnection %@  gave me a connection size of: %d  which doesn't pass our sanity size of: %d   ignoring
APSConnection %@  gave me a connection large size of: %d  which doesn't pass our sanity size of: %d   ignoring
Server Bag provided us with %d retries
Server Bag has no value for retries, using the default: %d retries
Server Bag provided us with a retry interval of %f 
Server Bag has no value for interval , using the default: %f interval
Checking keychain with prefixed username %@
Account: %@
            username: %@
          profile ID: %@
               token: %@
vetted email handles: %@
Searching for profileID %@
Didn't find an authenticated account with a DSID; attempting to fall back to an unauthenticated match that has a password
Didn't find a DISD match with a password; attempting to fall back to an unauthenticated DISD and username match
Didn't find an unauthenticated DISD and username match; attempting to fall back to an unauthenticated DSID match
Didn't find a DSID match!
Couldn't match based on any known DSID of %@; attempting to fall back to a username match
Couldn't find a username match for %@; attempting to search aliases of known accounts
Didn't find any matching account!
Didn't find profileID %@; attempting to use username %@
Fetching password for profileID: %@ username: %@ service: %@
  Found account: %@
  Credential: %@
         => Type: %@
     => Username: %@
     => Password: %@
   => Auth Token: %@
   => Profile ID: %@
      => Self ID: %@
Did not find an account to use! No password fetched.
Fetching auth token for profileID: %@ username: %@ service: %@
Did not find an account to use! No auth token fetched.
Requesting password for username: %@  service: %@
Handle user notification complete: %@:%@
Requesting auth token for profileID: %@ username: %@ service: %@
No account found, created new account: %@
Adding and saving account
Save completed (%@) with error: %@
Failed saving account %@ with error: %@
Getting new auth token for account: %@
Failed renewing account %@ with error: %@
Renewal complete for: %@  service: %@ account: %@  renewResult: %ld  error: %@
  => Cancelled, bailing
*** Empty profile ID handed back during token gathering, please file a radar
*** Account: %@
Requesting verification for account: %@
Completed verify credentials
Verification complete for: %@  service: %@ account: %@  error: %@
Failed verifying account %@ with error: %@
*** No error reported for account verification, but verified account is nil, please file a radar (input: %@  output: %@)
*** No account found to use for renewal, please file a radar (input: %@  output: %@)
   Verification failed with error: %@, starting renew for service: %@
Verification succeeded for account: %@
     => Token: %@
    => SelfID: %@
*** Account properties: %@
Checking the current status of the account %@
Not requesting renewal for a Managed AppleID account
Requesting renewal for account: %@  service: %@
Setting password for profileID: %@ username: %@ service: %@
Using account: %@
Updated credential: %@
Creating credential: %@
Assigning credential: %@
Saving account
Setting auth token for profileID: %@ username: %@ service: %@  (%@)
Updating credential %@
Setting profile ID on account: %@
Setting self handle on account: %@
Saving account: %@
      Authenticated: %@
Setting handles dictionary for profileID: %@ username: %@ service: %@  (%@)
Verification Options Dictionary Contains: %@
%@ - %s: invalid arguments!
