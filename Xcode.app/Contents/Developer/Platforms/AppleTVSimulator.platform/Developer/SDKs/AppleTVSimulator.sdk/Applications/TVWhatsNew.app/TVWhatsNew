mainBundle
bundleIdentifier
preferencesWithDomain:
addObserverForDomain:withDistributedSynchronizationHandler:
sharedWhatsNewPreferences
sharedApplication
suspend
terminateWithSuccess
setObject:forKey:
synchronize
objectForKey:
sharedInstance
lastUpdatedFromOSVersion
_preloadImages::
count
arrayWithCapacity:
countByEnumeratingWithState:objects:count:
_imageProxyFromDictionary:
addObject:
dictionary
appContext
jsContext
virtualMachine
managedValueWithValue:
addManagedReference:withOwner:
object
absoluteString
removeObjectForKey:
managedPreloaderReference
value
callWithArguments:
removeManagedReference:withOwner:
setImagePreloadingInProgress:
setManagedPreloaderReference:
evaluate:completionBlock:
setWriteCompletionHandler:
setObject:forKeyedSubscript:
load
objectForKeyedSubscript:
class
isKindOfClass:
URLWithString:
floatValue
alloc
initWithObject:imageLoader:groupType:
initWithScaleToSize:
setDecorator:
setNeedsBecomeActive
exit
setItem::
getItem:
shouldSkipVersionCheck
preloadImages::
.cxx_destruct
setShouldSkipVersionCheck:
imagePreloadingInProgress
_shouldSkipVersionCheck
_imagePreloadingInProgress
_managedPreloaderReference
arrayWithObjects:count:
initializeLoggingWithDomain:persistentComponents:
tvs_stringForKey:
isEqual:
setupNetworkMonitoring
internetAvailable
currentRunLoop
dateWithTimeIntervalSinceNow:
runUntilDate:
application:didFinishLaunchingWithOptions:
_markFailedToLaunch
_launchTimeout
scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:
_presetDialogWithError:appController:
invalidate
_handleDismissWhatsNewApp
_handleMenuButtonRecognizer:
initWithTarget:action:
numberWithInteger:
setAllowedPressTypes:
window
addGestureRecognizer:
currentAppContext
initWithAppContext:
appController:didFailWithError:
_executeRemoteMethod:completion:
sharedConnection
diagnosticLogsServiceProxy
incrementScalarKey:
appController
hasProperty:
invokeMethod:withArguments:
evaluateInJavaScriptContext:completion:
appController:didFinishLaunchingWithOptions:
appController:evaluateAppJavaScriptInContext:
launchTimer
setLaunchTimer:
_whatsNewNotifyToken
_wasLauchedFromTVSettings
_launchTimer
v8@?0
com.apple.TVWhatsNew.needsBecomeActive
#T:[%@%p] #Notice #%@ : 'exit()' was called in JS 
Main:
#T:[%@%p] #Notice #%@ : Image Preloader is busy 
#T:[%@%p] #Notice #%@ : Preloading complete 
-[TVWMAppUtilities _preloadImages::]_block_invoke_2
/BuildRoot/Library/Caches/com.apple.xbs/Sources/TVWhatsNew_Sim/TVWhatsNew-12.2/TVWhatsNew/TVWMAppUtilities.m
managedOnComplete
v16@?0@"JSContext"8
v28@?0@"NSString"8@"NSError"16B24
width
height
#T:[%@%p] #Warning #%@ : Invalid image obj: %@ 
managedPreloaderReference
T@"JSManagedValue",&,N,V_managedPreloaderReference
imagePreloadingInProgress
TB,N,V_imagePreloadingInProgress
shouldSkipVersionCheck
TB,N,V_shouldSkipVersionCheck
#T:[%@%p] #Notice #%@ : WNLog: What's New app started 
WhatsNew
com.apple.TVSettings
#T:[%@%p] #Notice #%@ : TVWhatsNew did launch 
#T:[%@%p] #Notice #%@ : TVWhatsNew has no internet, waiting... 
#T:[%@%p] #Notice #%@ : TVWhatsNew got internet! 
#T:[%@%p] #Notice #%@ : TVWhatsNew exiting because %s 
of miscellaneous reasons
there is no internet
#T:[%@%p] #Notice #%@ : TVWhatsNew exiting upon timeout 
#T:[%@%p] #Notice #%@ : TVWhatsNew exiting upon error %ld 
#T:[%@%p] #Notice #%@ : Did launch TVWhatsNew 
com.apple.TVWhatsNew.dismissTVWhatsNewApp
v12@?0i8
#T:[%@%p] #Notice #%@ : Evaluate JS 
itms
appUtilities
#T:[%@%p] #Error #%@ : Unable to start TVWhatsNew: %@ 
onDismissExternally
#T:[%@%p] #Notice #%@ : Terminating TVWhatsNew with launch type: %@ 
auto
manual
com.apple.appletv.whatsnew.launch.auto.failed
com.apple.appletv.whatsnew.launch.manual.failed
launchTimer
T@"NSTimer",&,V_launchTimer
TVWhatsNewAdditions
TVWMAppUtilities
TVWNAppUtilities
JSExport
TVWhatsNewAppDelegate
@16@0:8
v16@0:8
B32@0:8@16@24
B32@0:8@"NSString"16@24
@24@0:8@16
@24@0:8@"NSString"16
B16@0:8
@"NSString"16@0:8
B32@0:8@"NSArray"16@"JSValue"24
v32@0:8@16@24
v20@0:8B16
v24@0:8@16
@"JSManagedValue"
v32@0:8q16@24
v32@0:8@16@?24
@"NSTimer"
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>application-identifier</key>
<string>FAKETEAMID.com.apple.TVWhatsNew</string>
<key>com.apple.appletv.pbs.diagnostic-logs-service-access</key>
<true/>
<key>com.apple.itunesstored.private</key>
<true/>
<key>com.apple.private.security.container-required</key>
<true/>
<key>com.apple.security.exception.shared-preference.read-write</key>
<array>
<string>com.apple.appletv.osupdates</string>
<string>com.apple.TVWhatsNew</string>
</array>
<key>com.apple.tv.api</key>
<array>
<string>iTunes</string>
</array>
</dict>
</plist>
