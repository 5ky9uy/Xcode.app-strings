NSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE
NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE
NSt3__113basic_filebufIcNS_11char_traitsIcEEEE
NSt3__114basic_ifstreamIcNS_11char_traitsIcEEEE
NSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE
NSt3__114basic_ofstreamIcNS_11char_traitsIcEEEE
FlatBuffers 1.12.0
bool
byte
ubyte
short
ushort
uint
long
ulong
float
double
string
1.12.0
warning: 
error: 
maximum parsing recursion of 
 reached
end of file
string constant
integer constant
float constant
identifier
escape code must be followed by 
 hex digits
invalid utf-8 byte order mark
illegal character in string constant
illegal Unicode sequence (unpaired high surrogate)
illegal Unicode sequence (multiple high surrogates)
illegal Unicode sequence (unpaired low surrogate)
unknown escape code in string constant
illegal UTF-8 sequence
a documentation comment should be on a line on its own
end of file in comment
invalid number: 
code: 
illegal character: 
expecting: 
 instead got: 
int8
uint8
int16
uint16
int32
uint32
int64
uint64
float32
float64
nested vector types not supported (wrap in table first)
length of fixed-length array must be an integer value
length of fixed-length array must be positive and fit to uint16_t type
illegal type syntax
field already exists: 
field name can not be the same as table/struct name
structs_ may contain only scalar or struct fields
fixed-length array in table must be wrapped in struct
Arrays are not yet supported in all the specified programming languages.
Vectors of unions are not yet supported in all the specified programming languages.
default values currently only supported for scalars in tables
.eEpP
default value of 
 for field 
 is not part of enum 
deprecated
hash
Unknown hashing algorithm for 16 bit types: 
Unknown hashing algorithm for 32 bit types: 
Unknown hashing algorithm for 64 bit types: 
only short, ushort, int, uint, long and ulong data types support hashing.
cpp_type
cpp_type can only be used with a hashed field
cpp_ptr_type
naked
can't deprecate fields in a struct
required
only non-scalar fields in tables may be 'required'
only one field may be set as 'key'
'key' field must be string or scalar type
shared
shared can only be defined on strings
native_custom_alloc
native_custom_alloc can only be used with a table or struct definition
native_inline
native_inline can only be defined on structs
nested_flatbuffer
nested_flatbuffer attribute must be a string (the root type)
nested_flatbuffer attribute may only apply to a vector of ubyte
flexbuffer
flexbuffer attribute may only apply to a vector of ubyte
fnv1_64
fnv1a_64
fnv1_32
fnv1a_32
fnv1_16
fnv1a_16
attribute name must be either identifier or string: 
user define attributes must be declared before use: 
: type of argument mismatch, expecting: 
, found: 
, name: 
, value: 
asin
acos
atan
Unknown conversion function: 
, field name: 
type mismatch or invalid value, an initializer of non-string field must be trivial ASCII string: type: 
Cannot assign token starting with '
' to value of <
> type.
invalid number: "
, constant does not fit 
not a valid value for this field
enum values need to be qualified by an enum type
unknown enum: 
unknown enum value: 
type mismatch: expecting: 
0123456789.
invalid number, the exponent suffix of hexadecimal floating-point literals is mandatory: "
missing type field for this union value: 
illegal type id for: 
Fixed-length array size is incorrect.
force_align
too many unnamed fields in nested array
wrong number of unnamed fields in table vector
required field is missing: 
 in 
struct: wrong number of initializers: 
$schema
unknown field: 
field set more than once: 
internal: 
 use(s) of pre-declaration enum not accounted for: 
type referenced but not defined (check namespace): 
, originally at: 
only tables can be union elements in the generated language: 
option
syntax
package
native_include
include
import
public
unable to locate include file: 
unable to load include file: 
namespace
no root type set to parse json with
cannot have more than one json object in a file
enum
union
root_type
unknown root type: 
root type must be a table
file_identifier
file_identifier must be exactly 
 characters
file_extension
includes must come before declarations
attribute
rpc_service
struct
table
declaration expected
original_order
force_align must be a power of two integer ranging from thestruct's natural alignment to 
size 0 structs not allowed
either all fields or no fields must have an 'id' attribute
field id's must be consecutive from 0, id 
 missing or set twice
Type
_length
Length
_byte_vector
ByteVector
Field 
 would clash with generated functions for field 
datatype already exists: 
service already exists: 
rpc request and response types must be tables
rpc already exists: 
must specify the underlying integer type for this enum (e.g. ': short', which was the default).
underlying enum type must be integral
underlying type of bit_flags enum must be unsigned
NONE
union value type may only be table/struct/string
Protobuf mode doesn't allow implicit enum values.
incomplete enum declaration, values not found
bit flag out of range of underlying integral type
enum value does not fit, "
enum values must be specified in ascending order
enum value already exists: 
fatal: invalid enum underlying type
 + 1"
 out of 
enum already exists: 
extend
message
cannot extend unknown message type: 
service
don't know how to parse .proto declaration starting with 
extensions
reserved
optional
repeated
oneof
group
Union
Anonymous
default
0123456789-+.
oneof '
' cannot be mapped to a union because member '
' is not a table type.
sint32
sint64
fixed32
fixed64
sfixed32
sfixed64
bytes
input file is empty
csharp_partial
streaming
idempotent
cpp_ptr_type_get
cpp_str_type
cpp_str_flex_ctor
native_type
native_default
private
std::unique_ptr
_generated
cannot parse value starting with: 
BFBS
offsets differ for field: 
defaults differ for field: 
types differ for field: 
field renamed to different type: 
values differ for enum: 
true
false
bit_flags
null
.json
(struct)
(table)
[(elements)]
(union)
_type
#@Gu
09BKT]fo
KZix
KZix
&9L_
1=6II
#6bb
 -ZZ
 -ZZ
 -ZZ
 -ZZ
 -ZZ
6D< %*/49>CH
 "$&
NSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE
NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE
NSt3__113basic_filebufIcNS_11char_traitsIcEEEE
NSt3__114basic_ifstreamIcNS_11char_traitsIcEEEE
NSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE
NSt3__114basic_ofstreamIcNS_11char_traitsIcEEEE
FlatBuffers 1.12.0
bool
byte
ubyte
short
ushort
uint
long
ulong
float
double
string
1.12.0
warning: 
error: 
maximum parsing recursion of 
 reached
end of file
string constant
integer constant
float constant
identifier
escape code must be followed by 
 hex digits
invalid utf-8 byte order mark
illegal character in string constant
illegal Unicode sequence (unpaired high surrogate)
illegal Unicode sequence (multiple high surrogates)
illegal Unicode sequence (unpaired low surrogate)
unknown escape code in string constant
illegal UTF-8 sequence
a documentation comment should be on a line on its own
end of file in comment
invalid number: 
code: 
illegal character: 
expecting: 
 instead got: 
int8
uint8
int16
uint16
int32
uint32
int64
uint64
float32
float64
nested vector types not supported (wrap in table first)
length of fixed-length array must be an integer value
length of fixed-length array must be positive and fit to uint16_t type
illegal type syntax
field already exists: 
field name can not be the same as table/struct name
structs_ may contain only scalar or struct fields
fixed-length array in table must be wrapped in struct
Arrays are not yet supported in all the specified programming languages.
Vectors of unions are not yet supported in all the specified programming languages.
default values currently only supported for scalars in tables
.eEpP
default value of 
 for field 
 is not part of enum 
deprecated
hash
Unknown hashing algorithm for 16 bit types: 
Unknown hashing algorithm for 32 bit types: 
Unknown hashing algorithm for 64 bit types: 
only short, ushort, int, uint, long and ulong data types support hashing.
cpp_type
cpp_type can only be used with a hashed field
cpp_ptr_type
naked
can't deprecate fields in a struct
required
only non-scalar fields in tables may be 'required'
only one field may be set as 'key'
'key' field must be string or scalar type
shared
shared can only be defined on strings
native_custom_alloc
native_custom_alloc can only be used with a table or struct definition
native_inline
native_inline can only be defined on structs
nested_flatbuffer
nested_flatbuffer attribute must be a string (the root type)
nested_flatbuffer attribute may only apply to a vector of ubyte
flexbuffer
flexbuffer attribute may only apply to a vector of ubyte
fnv1_64
fnv1a_64
fnv1_32
fnv1a_32
fnv1_16
fnv1a_16
attribute name must be either identifier or string: 
user define attributes must be declared before use: 
: type of argument mismatch, expecting: 
, found: 
, name: 
, value: 
asin
acos
atan
Unknown conversion function: 
, field name: 
type mismatch or invalid value, an initializer of non-string field must be trivial ASCII string: type: 
Cannot assign token starting with '
' to value of <
> type.
invalid number: "
, constant does not fit 
not a valid value for this field
enum values need to be qualified by an enum type
unknown enum: 
unknown enum value: 
type mismatch: expecting: 
0123456789.
invalid number, the exponent suffix of hexadecimal floating-point literals is mandatory: "
missing type field for this union value: 
illegal type id for: 
Fixed-length array size is incorrect.
force_align
too many unnamed fields in nested array
wrong number of unnamed fields in table vector
required field is missing: 
 in 
struct: wrong number of initializers: 
$schema
unknown field: 
field set more than once: 
internal: 
 use(s) of pre-declaration enum not accounted for: 
type referenced but not defined (check namespace): 
, originally at: 
only tables can be union elements in the generated language: 
option
syntax
package
native_include
include
import
public
unable to locate include file: 
unable to load include file: 
namespace
no root type set to parse json with
cannot have more than one json object in a file
enum
union
root_type
unknown root type: 
root type must be a table
file_identifier
file_identifier must be exactly 
 characters
file_extension
includes must come before declarations
attribute
rpc_service
struct
table
declaration expected
original_order
force_align must be a power of two integer ranging from thestruct's natural alignment to 
size 0 structs not allowed
either all fields or no fields must have an 'id' attribute
field id's must be consecutive from 0, id 
 missing or set twice
Type
_length
Length
_byte_vector
ByteVector
Field 
 would clash with generated functions for field 
datatype already exists: 
service already exists: 
rpc request and response types must be tables
rpc already exists: 
must specify the underlying integer type for this enum (e.g. ': short', which was the default).
underlying enum type must be integral
underlying type of bit_flags enum must be unsigned
NONE
union value type may only be table/struct/string
Protobuf mode doesn't allow implicit enum values.
incomplete enum declaration, values not found
bit flag out of range of underlying integral type
enum value does not fit, "
enum values must be specified in ascending order
enum value already exists: 
fatal: invalid enum underlying type
 + 1"
 out of 
enum already exists: 
extend
message
cannot extend unknown message type: 
service
don't know how to parse .proto declaration starting with 
extensions
reserved
optional
repeated
oneof
group
Union
Anonymous
default
0123456789-+.
oneof '
' cannot be mapped to a union because member '
' is not a table type.
sint32
sint64
fixed32
fixed64
sfixed32
sfixed64
bytes
input file is empty
csharp_partial
streaming
idempotent
cpp_ptr_type_get
cpp_str_type
cpp_str_flex_ctor
native_type
native_default
private
std::unique_ptr
_generated
cannot parse value starting with: 
BFBS
offsets differ for field: 
defaults differ for field: 
types differ for field: 
field renamed to different type: 
values differ for enum: 
true
false
bit_flags
null
.json
(struct)
(table)
[(elements)]
(union)
_type
