<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>BuildMachineOSBuild</key>
<string>20A241115</string>
<key>CFBundleAllowMixedLocalizations</key>
<true/>
<key>CFBundleExecutable</key>
<string>storebookkeeperd</string>
<key>CFBundleIdentifier</key>
<string>com.apple.storebookkeeperd</string>
<key>CFBundleInfoDictionaryVersion</key>
<string>6.0</string>
<key>CFBundleSupportedPlatforms</key>
<array>
<string>AppleTVSimulator</string>
</array>
<key>DTCompiler</key>
<string>com.apple.compilers.llvm.clang.1_0</string>
<key>DTPlatformBuild</key>
<string>13A191</string>
<key>DTPlatformName</key>
<string>appletvsimulator</string>
<key>DTPlatformVersion</key>
<string>15.0</string>
<key>DTSDKBuild</key>
<string>19J329</string>
<key>DTSDKName</key>
<string>appletvsimulator15.0.internal</string>
<key>DTXcode</key>
<string>1300</string>
<key>DTXcodeBuild</key>
<string>13A191</string>
<key>MinimumOSVersion</key>
<string>15.0</string>
<key>UIDeviceFamily</key>
<array>
<integer>3</integer>
<integer>5</integer>
</array>
</dict>
</plist>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>DataProtectionClass</key>
<string>NSFileProtectionComplete</string>
<key>application-identifier</key>
<string>com.apple.storebookkeeperd</string>
<key>aps-connection-initiate</key>
<true/>
<key>com.apple.accounts.appleaccount.fullaccess</key>
<true/>
<key>com.apple.authkit.client.internal</key>
<true/>
<key>com.apple.itunesstored.private</key>
<true/>
<key>com.apple.private.tcc.allow</key>
<array>
<string>kTCCServiceMediaLibrary</string>
</array>
</dict>
</plist>
SBDPlaybackPositionService
SBCPlaybackPositionServiceProtocol
SBCDomainValueServiceProtocol
NSObject
SBCDomainSyncServiceProtocol
SBCPlaybackPositionServiceProtocol_Internal
SBCDomainSyncServiceProtocol_Internal
SBDDomainServiceHandler
SBDServer
SBDPushNotificationControllerDelegate
NSXPCListenerDelegate
XPCTransactionController
XPCTransaction
SBDDomainSyncedStorageController
SBKUniversalPlaybackPositionDataSource
SBDML3UbiquitousDatabase
SBDPlaybackPositionTransaction
SBKUniversalPlaybackPositionTransactionContext
SBDPlaybackPositionMediaItem
SBKUniversalPlaybackPositionMediaItem
SBDPlaybackPositionML3TrackMediaItem
SBKML3Properties
SBKSync
SBDWeakDomainDelegate
SBDPushNotificationController
APSConnectionDelegate
SBDPushRegistrationRequest
SBDDomainSyncServiceHandler
SBDDomainSyncedStorageObserver
SBDDomainValueServiceHandler
SBDJobScheduler
T@"NSObject<OS_dispatch_queue>",R,N,V_queue
T@"<SBCPlaybackPositionClientProtocol>",R,N,V_clientProxy
T@"SBDDomainSyncServiceHandler",R,N,V_syncHandler
T@"SBDDomainValueServiceHandler",R,N,V_valueHandler
T@"SBCClientConfiguration",R,N,V_clientConfiguration
T@"NSXPCConnection",R,N,V_XPCConnection
hash
TQ,R
superclass
T#,R
description
T@"NSString",R,C
debugDescription
_XPCConnection
_queue
_clientProxy
_syncHandler
_valueHandler
_clientConfiguration
pullPlaybackPositionEntity:completionBlock:
pushPlaybackPositionEntity:completionBlock:
isEqual:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
beginAccessingPlaybackPositionEntities
endAccessingPlaybackPositionEntities
persistPlaybackPositionEntity:isCheckpoint:completionBlock:
deletePlaybackPositionEntity:
deletePlaybackPositionEntities
updateForeignDatabaseWithValuesFromPlaybackPositionEntity:
pullLocalPlaybackPositionForEntityIdentifiers:completionBlock:
setClientConfiguration:
synchronizeImmediatelyWithCompletionHandler:
initWithXPCConnection:
_sendSyncHandlerMessageWithBlock:
_sendValueHandlerMessageWithBlock:
XPCConnection
queue
clientProxy
syncHandler
valueHandler
clientConfiguration
.cxx_destruct
initWithDomain:
stringWithFormat:
supportsSyncProtocol
remoteObjectProxy
setInterruptionHandler:
integerValue
setInvalidationHandler:
setRemoteObjectInterface:
serviceClientInterface
setExportedInterface:
serviceInterface
setExportedObject:
init
serviceForXPCConnection:
T@"SBCPlaybackPositionDomain",R,N,V_domain
_domain
domain
XPCInterfaceDebugDescription
T@"NSXPCListener",R,N,V_xpcListener
T@"SBDPushNotificationController",R,N,V_pushNotificationController
T@"NSArray",R,N,V_serviceConnections
_SBKStoreAccountChangedNotificationObserver
_SBKSBKSharedMusicLibraryImportFinishedObserver
_accountChangeUpdatePending
_accountChangeUpdateShouldReloadAccounts
_systemSyncHandlers
_xpcListener
_pushNotificationController
_serviceConnections
pushNotificationController:didReceiveUpdateRequestForAccount:withBookkeeperDomain:toDomainRevision:
listener:shouldAcceptNewConnection:
_init
dealloc
start
_updateForSharedLibraryImportFinished
_updateForAccountChangeAfterReloadingAccounts:
_accountsDidChangeNotification:
synchronizeForUpdateJobForAccount:withDomain:withCompletionHandler:
_performOnDomainSyncServiceHandlerWithBookkeeperDomain:forAccountWithIdentifier:completion:
_updatePushNotificationRegistrations
xpcListener
pushNotificationController
serviceConnections
addObject:
domainIdentifier
countByEnumeratingWithState:objects:count:
foreignDatabasePath
isEqualToString:
databasePath
musicLibraryForUserAccount:
accountDSID
userIdentitiesForManageableAccountsWithError:
defaultIdentityStore
array
containsObject:
allSyncingDomains
valueForKeyPath:
reloadAccounts
defaultStore
resume
newListener
arrayByAddingObject:
suspend
makeObjectsPerformSelector:
invalidate
valueForKey:
removeObserver:
removeObserver:name:object:
defaultCenter
server
addObserverForName:object:queue:usingBlock:
addObserver:selector:name:object:
setHttpArchiveBufferSize:
sharedManager
handleFailureInMethod:object:file:lineNumber:description:
currentHandler
copy
domainForSyncingMusicLibraryWithLibraryPath:
T@"NSMutableArray",R,N,V_openTransactions
_openTransactions
beginTransactionWithIdentifier:
isInTransaction
endTransaction:
openTransactions
count
close
removeObject:
open
initWithIdentifier:
T@"NSString",R,C,N,V_identifier
_transaction
_identifier
identifier
UTF8String
sharedInstance
enableTransactions
currentRunLoop
T@"SBCPlaybackPositionDomain",R,C,N,V_playbackPositionDomain
TB,R,N
T@"NSNumber",R,C,N
_observers
_operationQueue
_uppStore
_ubiquitousDatabase
_musicLibrary
_accountIdentifier
_targetSyncDate
_playbackPositionDomain
beginTransactionWithItemsToSyncEnumerationBlock:
cancelUniversalPlaybackPositionTransaction:
commitUniversalPlaybackPositionTransaction:domainVersion:metadataEnumerationBlock:
initWithPlaybackPositionDomain:
needsPoll
needsPull
needsPush
needsInitialSync
synchronizeBeforeDate:isCheckpoint:
synchronizeForUpdatedRemoteDomainVersion:beforeDate:
synchronizeForChangedAccountByResetInvalidatingLocalChanges:beforeDate:
persistPlaybackPositionEntity:completionBlock:
readUbiquitousDatabaseMetadataValuesForIdentifiers:
lastSynchronizedAccountIdentifier
lastSynchronizationFailureAccountIdentifier
addStorageObserver:
removeStorageObserver:
_onOperationQueue_scheduleSyncBeforeDate:isCheckpoint:
accountIdentifier
_databaseHasBookmarkableContents
_isEnabled
playbackPositionDomain
anyInLibrary:predicate:
predicateWithProperty:equalToValue:
UPPDomainIdentifier
dateWithTimeIntervalSinceNow:
timeIntervalSinceReferenceDate
timeIntervalSinceDate:
date
timeIntervalSinceNow
addOperationWithBlock:
foreignDatabaseEntityID
distantFuture
currentRevision
longLongValue
numberWithDouble:
loadBagContextWithCompletionBlock:
pollingIntervalInSeconds
setMaxConcurrentOperationCount:
initWithDomain:dataSource:automaticSynchronizeOptions:accountIdentifier:isActive:
initWithPath:
storageControllerForPlaybackPositionDomain:
setObject:forKey:
objectForKey:
dictionaryWithCapacity:
T@"ML3MusicLibrary",R,W,N,V_musicLibrary
TQ,N
T@"NSString",C,N
T@"NSDate",&,N
initWithMusicLibrary:
updateUbiquitousDatabaseByPerformingWriteTransactionWithBlock:
_valueForDatabaseProperty:
_setValue:forDatabaseProperty:
setLastSyncedEntityRevision:
lastSyncedEntityRevision
setLastSyncedDomainVersion:
lastSyncedDomainVersion
setDateLastSynced:
dateLastSynced
setLastNotificationDomainVersion:
lastNotificationDomainVersion
setDateToSyncWithUbiquitousStore:
dateToSyncWithUbiquitousStore
_updateUbiquitousDatabase_setBookmarkMetadataWithValuesFromTrackWithMetadataIdentifier:hasBeenPlayed:playCount:bookmarkTime:timestamp:syncRevision:usingConnection:
updateUbiquitousDatabaseByInsertingUbiquitousMetadataForTrackWithMetadataIdentifier:hasBeenPlayed:playCount:bookmarkTime:timestamp:syncRevision:
updateUbiquitousDatabaseByPersistingUbiquitousMetadataWithEntity:
_databaseHasEntryForEntity:
updateUbiquitousDatabaseByRemovingUbiquitousMetadataFromTrackWithPersistentID:
updateMusicLibraryByApplyingUbiquitousBookmarkMetadataToTrackWithPersistentID:
updateUbiquitousDatabaseByResetingSyncEntityRevisionForItemsWithMetadataIdentifiers:
readUbiquitousDatabaseMetadataValuesForIdentifier:
hasSyncedAtleastOnce
hasRemoteChangesToPull
hasLocalChangesToPush
dumpUbiquitousMetadata
musicLibrary
numberWithUnsignedLongLong:
unsignedLongLongValue
stringFromDate:
dateWithTimeIntervalSinceReferenceDate:
setDateStyle:
setTimeStyle:
doubleValue
stringValue
numberForColumnIndex:
stringForColumnIndex:
enumerateRowsWithBlock:
executeQuery:
performDatabaseTransactionWithBlock:
predicateWithProperty:value:comparison:
length
databaseConnectionAllowingWrites:withBlock:
setBookmarkTimestamp:
setBookmarkTime:
setHasBeenPlayed:
boolValue
setUserPlayCount:
unsignedIntegerValue
initWithPlaybackPositionDomain:ubiquitousIdentifier:foreignDatabaseEntityID:
executeQuery:withParameters:
statementWithPrefix:inParameterCount:
subarrayWithRange:
defaultRenderer
stringWithString:
firstObject
arrayWithObjects:count:
executeUpdate:withParameters:error:
allObjects
setValuesForPropertiesWithDictionary:
dictionaryWithObjects:forKeys:count:
valueForProperty:
hasAtLeastOneRow
ubiquitousIdentifier
enumerateObjectsUsingBlock:
appendString:
appendFormat:
numberWithLongLong:
allKeys
bookmarkTimestamp
bookmarkTimestampModified
bookmarkTime
bookmarkTimeModified
numberWithUnsignedInteger:
userPlayCount
userPlayCountModified
numberWithBool:
hasBeenPlayed
hasBeenPlayedModified
setValue:forDatabaseProperty:
valueForDatabaseProperty:
supportsUPP
uppDatabase
T@"ML3MusicLibrary",&,N,V_musicLibrary
TQ,N,V_lastSyncedEntityRevision
TQ,N,V_transactionEntityRevision
T@"NSString",C,N,V_lastSyncedDomainVersion
T@"NSMutableSet",&,N,V_ubiquitousIdentifiersToSync
_lastSyncedEntityRevision
_transactionEntityRevision
_lastSyncedDomainVersion
_ubiquitousIdentifiersToSync
setMusicLibrary:
transactionEntityRevision
setTransactionEntityRevision:
ubiquitousIdentifiersToSync
setUbiquitousIdentifiersToSync:
T@"NSString",R,N,V_identifier
T@"SBCPlaybackPositionEntity",R,N,V_entity
_entity
enumerateValuesForProperties:usingBlock:
initWithUbiquitousIdentifier:inLibrary:
entity
Tq,R,N,V_persistentID
T@"ML3Track",R,N,V_track
_persistentID
_track
initWithPersistentID:inLibrary:
persistentID
track
SBKPropertyValueForML3PropertyValue:ML3Property:
getValues:forProperties:count:
objectAtIndex:
enumerateKeysAndObjectsUsingBlock:
null
setWithArray:
dictionary
URLWithString:
unsignedIntValue
numberWithInteger:
unsignedLongValue
predicateMatchingPredicates:
unrestrictedAllItemsQueryWithlibrary:predicate:orderingTerms:
SBKQueryForTracksNeedingPushWithEntityRevisionAnchor:orderingTerms:
enumeratePersistentIDsUsingBlock:
SBKSQLQueryStringForItemsNeedingPush
performReadOnlyDatabaseTransactionWithBlock:
itemIdentifier
timestamp
playCount
removeObjectsForKeys:
SBKBeginTransactionWithItemsToSyncEnumerationBlock:
SBKCancelUniversalPlaybackPositionTransaction:
SBKCommitUniversalPlaybackPositionTransaction:domainVersion:metadataEnumerationBlock:
T@"<SBDPushNotificationControllerDelegate>",W,N,V_delegate
_delegate
delegate
setDelegate:
T@"APSConnection",R,N,V_connection
T@"NSMutableDictionary",R,N,V_weakDomainDelegates
T@"NSMutableDictionary",R,N,V_pendingAccountRequests
T@"NSMutableDictionary",R,N,V_registeredAccountsForDomains
T@"NSSet",&,N
_environment
_temporaryConnectionsByEnvironment
_typeRegistrationURL
_enabledDomains
_pushEnabled
_bagLoaded
_registrationUpdateScheduled
_fakeNotificationObserver
_connection
_weakDomainDelegates
_pendingAccountRequests
_registeredAccountsForDomains
connection:didReceiveToken:forTopic:identifier:
connection:didReceiveIncomingMessage:
connection:didReceiveMessageForTopic:userInfo:
connection:didSendOutgoingMessage:
connection:didFailToSendOutgoingMessage:error:
connection:didChangeConnectedStatus:
connectionDidReconnect:
connection:channelSubscriptionsFailedWithFailures:
connection:didReceivePublicToken:
_onQueue_updateConnectionTopicsAndStoreRegistrations
setDelegate:forBookkeeperDomain:
isEnabledForDomain:
setEnabledDomains:
enabledDomains
updateNotificationRegistrationsWithCompletionBlock:
_startServiceConnectionsWithCompletionHandler:
_loadURLBagWithCompletionHandler:
_portNameForEnvironmentName:
_registeredAccountIDs
_onQueue_updateStoreBookkeeperNotificationRegistrationForDomain:optIn:accountID:withCompletionHandler:
updateStoreBookkeeperNotificationRegistration:
_onQueue_updateStoreBookkeeperNotificationRegistration:
connection
weakDomainDelegates
pendingAccountRequests
registeredAccountsForDomains
componentsSeparatedByString:
objectForKey:withDefaultValue:
storeBookkeeperPreferences
storeAccountID
optIn
cancel
objectForKeyedSubscript:
startWithConnectionResponseBlock:
allHeaderFields
statusCode
initWithDomain:code:userInfo:
propertyListFromData:mutabilityOption:format:errorDescription:
bodyData
removeObjectForKey:
requestProperties
isEqualToRegistrationRequest:
requestForDomain:optIn:accountID:typeRegistrationURL:
T@"NSNumber",R,N,V_storeAccountID
T@"NSString",R,C,N,V_domain
TB,R,N,V_optIn
_optIn
_storeAccountID
initWithDomain:optIn:accountID:typeRegistrationURL:
_requestPropertiesForDomain:optIn:typeRegistrationURL:
setRequestParameters:
copyDeviceGUID
setITunesStoreRequest:
setValue:forHTTPHeaderField:
setHTTPMethod:
initWithURL:
initWithRequestProperties:
setObject:forKeyedSubscript:
archivedDataWithRootObject:requiringSecureCoding:error:
unionSet:
allValues
loadWithCompletionBlock:
initWithURLBagContext:
base64EncodedStringWithOptions:
publicToken
removeFromRunLoop
initWithEnvironmentName:namedDelegatePort:queue:
initWithObjects:
initWithCapacity:
isEqualToSet:
setEnabledTopics:
unarchivedObjectOfClasses:fromData:error:
T@"SBDDomainSyncedStorageController",R,N,V_syncedStorageController
Td,R,N,V_preferredSynchronizeInterval
TB,R,N,V_hasChangesToPush
TB,R,N,V_isActive
_hasChangesToPush
_isActive
_syncedStorageController
_preferredSynchronizeInterval
bookkeeperStorageControllerDidSync:
synchronizeImmediately
synchronizeForUpdatedRemoteDomainVersion:
synchronizeForChangedAccountByResetInvalidatingLocalChanges:
synchronizeIfNeedsInitialSynchronization
synchronizeForChangedAccountStatus
_onQueue_clearHasChanges
_onQueueSynchronizeWithInterval:isCheckpoint:
syncedStorageController
preferredSynchronizeInterval
hasChangesToPush
isActive
T@"SBKUniversalPlaybackPositionStore",R,N,V_cloudStore
_cloudStore
cloudStore
pushMetadataItem:completionBlock:
copyWithValuesFromSBKUniversalPlaybackPositionMetadata:
SBKUniversalPlaybackPositionMetadata
pullMetadataItemWithItemIdentifier:completionBlock:
initWithDomain:dataSource:automaticSynchronizeOptions:isActive:
T@"NSString",C,N,V_domain
T@"NSNumber",C,N,V_accountIdentifier
scheduleUpdateJobWithTimeInterval:replaceExisting:
removeScheduledJobs
setDomain:
setAccountIdentifier:
jobSchedulerForAccount:withDomain:
initializeBackgroundTaskAgentWithJobRunner:
@"NSXPCConnection"
@"NSObject<OS_dispatch_queue>"
@"<SBCPlaybackPositionClientProtocol>"
@"SBDDomainSyncServiceHandler"
@"SBDDomainValueServiceHandler"
@"SBCClientConfiguration"
Vv32@0:8@"SBCPlaybackPositionEntity"16@?<v@?B@"NSError"@"SBCPlaybackPositionEntity">24
Vv32@0:8@16@?24
B24@0:8@16
#16@0:8
@16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B16@0:8
B24@0:8#16
B24@0:8@"Protocol"16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
@"NSString"16@0:8
Vv36@0:8@"SBCPlaybackPositionEntity"16B24@?<v@?B>28
Vv24@0:8@"SBCPlaybackPositionEntity"16
Vv32@0:8@"NSArray"16@?<v@?B@"NSError"@"NSArray">24
Vv36@0:8@16B24@?28
Vv24@0:8@16
Vv24@0:8@"SBCClientConfiguration"16
Vv24@0:8@?<v@?B@"NSError">16
Vv24@0:8@?16
@24@0:8@16
v24@0:8@?16
v16@0:8
@"SBCPlaybackPositionDomain"
@"NSMutableArray"
@"NSXPCListener"
@"SBDPushNotificationController"
@"NSArray"
v48@0:8@"SBDPushNotificationController"16@"NSNumber"24@"NSString"32@"NSString"40
v48@0:8@16@24@32@40
B32@0:8@"NSXPCListener"16@"NSXPCConnection"24
B32@0:8@16@24
v20@0:8B16
v24@0:8@16
v40@0:8@16@24@?32
@"NSObject<OS_os_transaction>"
@"NSString"
@"NSOperationQueue"
@"SBKUniversalPlaybackPositionStore"
@"SBDML3UbiquitousDatabase"
@"ML3MusicLibrary"
@"NSNumber"
@"NSDate"
@"<SBKUniversalPlaybackPositionTransactionContext>"24@0:8@?<v@?@"<SBKUniversalPlaybackPositionMediaItem>">16
v24@0:8@"<SBKUniversalPlaybackPositionTransactionContext>"16
v40@0:8@"<SBKUniversalPlaybackPositionTransactionContext>"16@"NSString"24@?<@"SBKUniversalPlaybackPositionMetadata"@?>32
@24@0:8@?16
v28@0:8@16B24
v32@0:8@16@24
v28@0:8B16@20
v32@0:8@16@?24
v24@0:8Q16
B68@0:8@16B24Q28d36d44q52@60
B60@0:8@16B24Q28d36d44q52
v24@0:8q16
@"NSMutableSet"
@"SBCPlaybackPositionEntity"
v32@0:8@"NSSet"16@?<v@?@"NSString"@^B>24
@32@0:8@16@24
@"ML3Track"
@32@0:8q16@24
q16@0:8
@32@0:8Q16@24
@"<SBDPushNotificationControllerDelegate>"
@"NSMutableDictionary"
@"NSURL"
@"NSSet"
@"APSConnection"
v32@0:8@"APSConnection"16@"NSData"24
v48@0:8@"APSConnection"16@"NSData"24@"NSString"32@"NSString"40
v32@0:8@"APSConnection"16@"APSIncomingMessage"24
v40@0:8@"APSConnection"16@"NSString"24@"NSDictionary"32
v32@0:8@"APSConnection"16@"APSOutgoingMessage"24
v40@0:8@"APSConnection"16@"APSOutgoingMessage"24@"NSError"32
v28@0:8@"APSConnection"16B24
v24@0:8@"APSConnection"16
v32@0:8@"APSConnection"16@"NSArray"24
v40@0:8@16@24@32
v44@0:8@16B24@28@?36
@44@0:8@16B24@28@36
@36@0:8@16B24@28
@"SBDDomainSyncedStorageController"
v24@0:8@"SBDDomainSyncedStorageController"16
v28@0:8d16B24
d16@0:8
[UPP-SBDPlaybackPositionService] 
%@ %@
ERROR: attempt to use sync APIs on domain (%@) that does not support the sync protocol
v16@?0@"SBDDomainValueServiceHandler"8
v16@?0@"SBDDomainSyncServiceHandler"8
ERROR: client %@ did not supply a domain in client connection configuration %@
Connection interrupted: %@
com.apple.storebookkeeper
logLevel
Connection invalidated: %@
Exiting storebookkeeperd main()
Vending services: %@
[UPP] 
Starting storebookkeeperd
[UPP-SBDServer] 
synchronizeImmediatelyWithCompletionHandler
[SBDDomainSyncServiceHandler synchronizeForUpdatedRemoteDomainVersion]
Scheduling reset sync
v20@?0B8@"NSError"12
Dropping handler. handlerAccountID not in storeAccountIdentifiers
Dropping handler. handlerAccountID=nil
Dropping handler. foreignDatabasePath=nil
@distinctUnionOfObjects.domain.foreignDatabasePath
Handling account did change notification
reloading store accounts
com.apple.storebookkeeperd.launched
Starting service 'SBCPlaybackPositionService'
XPCConnection
com.apple.storebookkeeperd.SBDServer
v32@?0@"NSNumber"8@"NSString"16@?<v@?B@"NSError">24
SBKSharedMusicLibraryImportFinished
SBKStoreAccountChangedNotification
v16@?0@"NSNotification"8
Use +sharedInstance instead
SBDServer.m
%@ identifier = %@ %@
com.apple.storebookkeeperd.XPCTransactionController
DaemonTemporaryKeepAlive
scheduling sync (via BackgroundTaskJob) %f seconds from now...
scheduling sync NOW.
setting target date to: %@ (in %.2f sec)
target sync date from database: %@ (in %.2f sec)
target sync date in database has been passed, using sync date of 'now': %@ (in %.2f sec)
target sync date from client: %@ (in %.2f sec)
[UPP-SBDDomainSyncedStorageController] 
received request to scheduleSyncBeforeDate: %@ (in %.2f sec)
running synchronizeImmediatelyWithCompletionHandler: now
reseting sync anchor to 0, and scheduling pull from server
clearing all local changes that had been scheduled for push
received request handle account change (set sync anchor to 0%@)
 and clear last-sync revision number
skipping scheduling a sync, last synced domain version already %@
received request update for domain version change to version: %@
checking needsPoll, pollIntervalInSeconds = %@, lastSynced = %@ (%@)
ERROR: unable to load bag and determine polling interval
v20@?0@"SBKStoreURLBagContext"8B16
id = %s; titles = %s; item_pids = %s; timestamp = %s; bookmark_time_ms = %s; has_been_played = %s; play_count_user %s
SELECT key, title, item_pid, bookmark_sync_timestamp, bookmark_time_ms, has_been_played, play_count_user  FROM cloud_kvs JOIN item_kvs using (key) JOIN item_extra using (item_pid)
MPUbiquitousBookmarkDomainVersionAnchorToken
v16@?0@"ML3DatabaseConnection"8
SELECT key, play_count_user, has_been_played, bookmark_time_ms, bookmark_sync_timestamp FROM cloud_kvs WHERE key
UPDATE cloud_kvs SET bookmark_sync_revision = 0 WHERE key
UPDATE cloud_kvs SET bookmark_sync_timestamp = ?, bookmark_sync_revision = ? WHERE key = ?
SELECT play_count_user, has_been_played, bookmark_time_ms FROM cloud_kvs WHERE key = ?
[UPP-SBDML3UbiquitousDatabase] 
ERROR: updateMusicLibraryByApplyingUbiquitousBookmarkMetadataToTrackWithPersistentID:, persistentID %lld doesn't exist.
DELETE FROM cloud_kvs WHERE key = ?
SELECT key FROM cloud_kvs WHERE key = ?
UPDATE item_stats SET bookmark_time_ms = ?, has_been_played = ?, play_count_user = ? where item_pid = ?
SELECT item_pid, play_count_user, has_been_played, bookmark_time_ms FROM cloud_kvs INNER JOIN item_kvs USING (key) LEFT OUTER JOIN item USING (item_pid) WHERE key = ? AND item.item_pid IS NOT NULL
UPDATE cloud_kvs SET %@ WHERE key = ?
v32@?0@"NSString"8Q16^B24
%@ = ?
bookmark_sync_revision
bookmark_sync_timestamp
bookmark_time_ms
play_count_user
has_been_played
ERROR: failed to update ubiquitous bookmarkmatadata for metadata identifier %@.
INSERT OR REPLACE INTO cloud_kvs (key, play_count_user, has_been_played, bookmark_time_ms, bookmark_sync_timestamp, bookmark_sync_revision) VALUES (?, ?, ?, ?, ?, ?)
MPDateToSyncWithUbiquitousStore
MPUbiquitousBookmarkDomainVersionRemoteToken
MPDateLastSynced
MLUbiquitousBookmarkEntityRevisionAnchor
[StoreBookkeeper-ML]setting %@ to %@
LogSyncEvents
use initWithMusicLibrary:
SBDML3UbiquitousDatabase.m
__SBDML3UbiquitousDatabaseKey
%@: lastSyncedDomainVersion = %@, entityRevisions.lastSynced = %llu, entityRevisions.currentSyncTransaction = %llu)
<NO VERSION>
v32@?0@8@16^B24
%@ properties = %@
v32@?0@"NSString"8@16^B24
B16@?0@"ML3DatabaseConnection"8
v32@?0@"SBKUniversalPlaybackPositionMetadata"8@16^B24
v32@?0@"SBKUniversalPlaybackPositionMetadata"8@"ML3Track"16^B24
v32@?0@"ML3DatabaseRow"8@"NSError"16^B24
v32@?0q8Q16^B24
SELECT key FROM cloud_kvs LEFT OUTER JOIN item_kvs using (key) WHERE item_pid IS NULL AND bookmark_sync_timestamp != 0 AND bookmark_sync_revision >= ?
@16@?0@8
v32@?0@"NSString"8@"NSSet"16^B24
[UPP-SBDPushNotificationController] 
ERROR: exception while handling SBKBlacklistedAccountIDs preference: %@
SBKBlacklistedAccountIDs
domain
v32@?0@"NSString"8@"SBDPushRegistrationRequest"16^B24
v28@?0@"NSString"8B16@"NSNumber"20
v24@?0@"SSURLConnectionResponse"8@"NSError"16
...response-headers %@
StoreBookkeeper update push notification registration to %@ for domain '%@' (accountID: %@) returned response %@ with status %ld with decoded body %@%@
, **error** = %@, %@
Request Failed: response status error (%d) '%@'
unknown error
bad parameters in request
no push device error
unrecognized push notification type
bad password token
status
StoreBookkeeper update push notification registration to %@ for domain '%@' (accountID %@) issuing request %@ with properties %@
%@ push notification registration for domain '%@' (accountID: %@)
Opt-out of
Opt-in to
put-parameters
mzbookkeeper
notification-type
guid
bookkeeperDomain:%@
Content-Type
application/x-apple-plist
POST
Making sure blocked accountID %@ is opted-out for push notifications
SBKPushNotificationRegisteredDomains
Skipping opt-out push notification registration attempt for domain '%@' (accountID %@).  reason = 'itunesstored has already sent an opt-out on our behalf'.
Unable to update push notification registration to %@ for domain '%@' (accountID %@): reason = 'account ID missing, not set, or unspecified'.
Skipping opt-in push notification registration attempt for domain '%@' (accountID %@).  reason = 'push is not enabled at the moment'.
Unable to update push notification registration to %@ for domain '%@' (accountID %@): reason = 'type registration URL not found in URL bag'.
Unable to update push notification registration to %@ for domain '%@' (accountID %@): reason = 'URL bag has not been loaded'.
com.apple.storebookkeeperd.aps.dev
com.apple.storebookkeeperd.aps
com.apple.storebookkeeperd.aps.demo
v24@?0@"NSDictionary"8@"NSError"16
Finished loading URL Bag.  _pushEnabled = %@, _typeRegistrationURL = %@, _env = %@
push-notification-types.add-push-notification-type-url
push-notifications.environment
Loading URL Bag
PushNotificationConfiguration-LoadURLBag
Push token: %@
%@ APSConnection (env:%@) = %@ removed from runloop
%@->_connection (env:%@) = %@
%@ Push enabled: %d, environment: %@
%@ Beginning APS bringup - creating connections...
Setting APNS connection enabled topics to %@ on connection %@
%@ connectionDidReconnect:%@
%@ connection:%@ didChangeConnectedStatus: connected = %d
%@ connection:%@ didFailToSendOutgoingMessage:%@, error = %@
%@ connection:%@ didSendOutgoingMessage:%@
%@ connection:%@ didReceiveIncomingMessage:%@
Processing push notification for storebookkeeper domain '%@', version %@
Received push notification for storebookkeeper domain '%@
Received push notification for storebookkeeper topic '%@' with userInfo %@
%@ connection:%@ didReceiveMessageForTopic:%@ userInfo:%@
%@ connection:%@ didReceivePublicToken:%@
%@ APSConnection (env:%@) = %@ removed from runloop in dealloc
v32@?0@"NSString"8@"APSConnection"16^B24
com.apple.SBD.push-notification-controller
Error: SBDPushNotificationController init: Error unarchiving _registeredDomains from registeredDomains. registeredDomains=%@ error=%@
[UPP-SBDDomainSyncServiceHandler]
received request to synchronize immediately
received changed account event, will schedule sync
received request to do initial sync
received changed account event, will reset sync%@
 (dropping local changes)
received push notification event, %@'s version changed to %@
v8@?0
v12@?0B8
[UPP] ERROR: attempt to set hasChangeToPush while inactive may result in changes not being pushed to the servers.
Received request: -%@, entity %@
v40@?0@"SBKUniversalPlaybackPositionMetadata"8@"NSString"16@"NSString"24@"NSError"32
SBCPlaybackPositionDomain: Error fetching user identities. err=%@
