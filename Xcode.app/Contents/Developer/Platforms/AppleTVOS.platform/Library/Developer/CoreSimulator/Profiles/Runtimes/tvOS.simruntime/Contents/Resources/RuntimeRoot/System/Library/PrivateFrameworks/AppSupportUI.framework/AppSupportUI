MbP?
MbP?
MbP?
minimumLayoutSize
T{CGSize=dd},N
maximumLayoutSize
customAlignmentRectInsets
T{UIEdgeInsets=dddd},N
customBaselineOffsetFromBottom
Td,N
customFirstBaselineOffsetFromTop
invalidatingIntrinsicContentSizeAlsoInvalidatesSuperview
TB,N
Invalid edge %lu
<%@ %p size cache:
%@ : %@
containerViewInfoKey
v8@?0
Flow arrangement does not have valid measurement for %@
v24@?0^{_NUIFlowArrangementCell=@{CGSize=dd}{CGSize=dd}{?=dd}b8b8}8Q16
item
{CGSize=dd}
size
baselines
_NUIFlowArrangement
class
maxBaselines
rowSpacing
colSpacing
cells
topOffset
bottomOffset
-[%@ %@] not implemented.
containerViewClass
T#,R,N
containerView
T@"NUIContainerView",R,N,V_containerView
hash
TQ,R
superclass
T#,R
description
T@"NSString",R,C
debugDescription
Grid arrangement does not have valid measurement for %@
v24@?0^{_NUIGridArrangementCell=@{?=ff}{?=ff}{CGSize=dd}{CGSize=dd}{_NSRange=QQ}{_NSRange=QQ}{?=dd}b8b8}8Q16
v48@?0@"<NUIArrangementItem>"8{CGRect={CGPoint=dd}{CGSize=dd}}16
column
span
index
length
spacingAfter
hugging
compression
priorities
_NUIGridArrangement
baselineRelative
horizontal
vertical
distributions
columns
rows
v32@?0^{_NUIGridArrangementCell=@{?=ff}{?=ff}{CGSize=dd}{CGSize=dd}{_NSRange=QQ}{_NSRange=QQ}{?=dd}b8b8}8{_NSRange=QQ}16
Default
Fill
FillEqual
FillProp
EqualSpacing
EqualCentering
EqualGrouping
Unknown(%ld)
NUIContainerViewDebug
-%@ %@ not yet supported.
View is not a subview: %@
View is represented %lu times: %@
B24@?0@"UIView"8@"NSDictionary"16
/BuildRoot/Library/Caches/com.apple.xbs/Sources/AppSupportUI_Sim/AppSupportUI-32.3/AppSupportUI/NUIContainerView.mm
<Unknown File>
Mismatching visible arranged subviews count
Cannot nest more than 15 calls to performBatchUpdates:
Invalid parameter not satisfying: %@
view != nil
Hidden count mismatch
Info caount mismatch
stackIndex <= _arrangedSubviews.count
newView != nil
index < _arrangedSubviews.count
View is not an arranged subviews %@.
Skipping layout in size %@ for view: %@
hidden
 %@>
arrangedSubviews
T@"NSArray",C,N
visibleArrangedSubviews
T@"NSArray",R,N
delegate
T@"<NUIContainerViewDelegate>",W,N
baselineRelativeArrangement
TB,N,GisBaselineRelativeArrangement
layoutMarginsRelativeArrangement
TB,N,GisLayoutMarginsRelativeArrangement
baselineRelativeLayoutMarginsForArrangement
TB,N,GhasBaselineRelativeLayoutMarginsForArrangement
%@ called while in a layout or measurement pass.
WARNING: %@
ERROR: %@
{UIEdgeInsets=dddd}
baselineLayoutMargins
layoutMargins
respondsTo
self
batchDepth
flags
cachedFirstBaselineView
cachedLastBaselineView
invalidConsistency
debugBoundingBoxesEnabled
TB,N,GisDebugBoundingBoxesEnabled
enableAPIMisuseAssertions
arrangedSubviews = %lu[%lu];
 layoutMarginsRelative = {%f, %f, %f, %f};
 baselineRelative = YES;
view
horizonral
alignment
leading
bottom
trailing
minimumSpacing
sizeIsInvalid
debugBoundingBoxes
delayedInvalidation
inLayoutPass
inMeasurementPass
mustRestartMeasurement
Top/Lead
FirstBL
Center
Bottom/Trail
LastBL
/BuildRoot/Library/Caches/com.apple.xbs/Sources/AppSupportUI_Sim/AppSupportUI-32.3/AppSupportUI/NUIContainerGridView.mm
Use -[%@ initWithArrangedSubviewRows:] or -[%@ init]
Views managed by grid missing from arranged subviews: %@
Arranged subviews not being managed by grid: %@
Row count mismatch
Column count mismatch
column < _columns.count
row < _rows.count
colRangeOut != NULL || rowRangeOut != NULL
findView != nil
row <= _rows.count
arrangedViews.count > 0
numberOfColumns == 0 || numberOfColumns == copy.count
fromRow < _rows.count
toRow < _rows.count
column <= _columns.count
numberOfRows == 0 || numberOfRows == copy.count
v32@?0@"NSMutableArray"8Q16^B24
fromCol < _columns.count
toCol < _columns.count
%@ size = {%ld, %ld} cells = 
[%@:%@]
(%@|%@)
v16@?0r^{_NUIGridArrangementCell=@{?=ff}{?=ff}{CGSize=dd}{CGSize=dd}{_NSRange=QQ}{_NSRange=QQ}{?=dd}b8b8}8
arrangement
-[%1$@ insertArrangedSubview:atIndex:] not supported, use -[%1$@ insert{Row|Column}AtIndex:withArrangedSubviews:] to insert arranged subviews.
-[%1$@ removeArrangedSubview:] not supported, use -[%1$@ remove{Row|Column}AtIndex:] to remove arranged subviews.
v32@?0@"UIView"8Q16^B24
Invalid system spacing
arrangedSubviewRows
numberOfRows
Tq,R,N
numberOfColumns
horizontalAlignment
Tq,N
verticalAlignment
horizontalDistribution
verticalDistribution
columnSpacing
rowHeight
Td,N,V_rowHeight
columnWidth
Td,N,V_columnWidth
TB,N,GisHidden
T@"NSArray",C,N,V_visibleArrangedSubviews
T@"NSArray",C,D,N
%lu-%lu
%@ no longer attached to grid view <%p>.
%@ axis = %@: distribution = %@; alignments = 
Horz
Vert
[%@]
axis
distribution
spacing
Td,N,V_spacing
/BuildRoot/Library/Caches/com.apple.xbs/Sources/AppSupportUI_Sim/AppSupportUI-32.3/AppSupportUI/NUIBoxArrangement.mm
container != nil
dataSource != nil
container
T@"<NUIArrangementContainer>",R,W,N
dataSource
T@"<NUIBoxArrangementDataSource>",R,W,N
Box arrangement does not have valid measurement for %@
v24@?0^{_NUIBoxArrangementCell=@{CGSize=dd}{CGSize=dd}{?=dd}b8b8}8Q16
_NUIBoxArrangement
%ld distribution not yet supported
System spacing not yet supported
Baseline relative arrangement not yet supported by NUIContainerFlowView.
Non default minimum spacing adjecent to arranged subview is not yet supported by NUIContainerFlowView.
%@ alignments = 
[%@|%@]
alignmnets
_defaultAttributes
/BuildRoot/Library/Caches/com.apple.xbs/Sources/AppSupportUI_Sim/AppSupportUI-32.3/AppSupportUI/NUIWidgetGridViewCell.m
Unknown title style.
NUIWidgetGridView - Layout item %d entitled:%@ borrowable:%@ fitting:%@ final:%@
TQ,R,N
gridView
T@"NUIWidgetGridView",R,W,N,V_gridView
imageView
T@"UIImageView",R,N
titleLabel
T@"UILabel",R,N
subtitleLabel
{ %f, %f }
/BuildRoot/Library/Caches/com.apple.xbs/Sources/AppSupportUI_Sim/AppSupportUI-32.3/AppSupportUI/NUIContentScrollView.m
Invalid horizontal alignment %ld.
Invalid vertical alignment %ld.
contentView
T@"UIView",&,N
documentView
T@"UIView",&,N,V_documentView
Tq,N,V_horizontalAlignment
Tq,N,V_verticalAlignment
canScrollDocumentViewHorizontally
TB,N,V_canScrollDocumentViewHorizontally
canScrollDocumentViewVertically
TB,N,V_canScrollDocumentViewVertically
/BuildRoot/Library/Caches/com.apple.xbs/Sources/AppSupportUI_Sim/AppSupportUI-32.3/AppSupportUI/NUIWidgetGridView.m
no layout type set
Trying to do layout for items, when none exist.
currentLabelOutset
Td,R,N,V_currentLabelOutset
T@"<NUIWidgetGridViewDataSource>",W,N,V_dataSource
T@"<NUIWidgetGridViewDelegate>",W,N,V_delegate
imageStyle
Tq,N,V_imageStyle
titleStyle
Tq,N,V_titleStyle
subtitleStyle
Tq,N,V_subtitleStyle
centerAdjustmentAllowed
Td,N,V_centerAdjustmentAllowed
/BuildRoot/Library/Caches/com.apple.xbs/Sources/AppSupportUI_Sim/AppSupportUI-32.3/AppSupportUI/NUIGridArrangement.mm
T@"<NUIGridArrangementDataSource>",R,W,N
_NUIViewContainerViewInfo
NUIContainerView
_NUISizeCache
NUISubclassHelpers
NUIPrivate
NUIClassCheck
NUITableViewContainerCell
NUICollectionViewContainerCell
_NUIGridArrangement
NUIArrangementItem
NSObject
NUIContainerViewHack
_UIMultilineTextContentSizing
NUIAccessibilitySupport
NUISubclassing
NUIDebug
NUIDebugPrivate
NUIContainerGridView
_NUIGridArrangementContainer
NUIArrangementContainer
NUIGridDimension
NUIContainerStackView
NUIBoxArrangement
_NUIBoxArrangementContainer
NUIContainerFlowView
_NUIFlowArrangementContainer
NUIContainerBoxView
NUIWidgetGridViewCell
NUIContainerViewDelegate
NUIWidgetGridViewEmptyCell
NUIContentScrollView
NUIWidgetGridView
NUISizeCache
NUIMultilineSizingHelper
NUIGridArrangement
init
resetCaches
.cxx_destruct
.cxx_construct
_sizeCache
_minSize
_maxSize
_alignmentInsets
_baselines
_flags
contentLayoutSizeCache
isLayoutSizeDependentOnPerpendicularAxis
calculateLayoutSizeFittingSize:
_nui_baselineViewType
viewForLastBaselineLayout
effectiveBaselineOffsetFromBottom
_nui_additionalInsetsForBaselines
_currentScreenScale
viewForFirstBaselineLayout
effectiveFirstBaselineOffsetFromTop
_wantsAutolayout
invalidateIntrinsicContentSize
setMinimumLayoutSize:
setMaximumLayoutSize:
setContentHuggingPriority:forAxis:
setContentCompressionResistancePriority:forAxis:
layer
transform
anchorPoint
setCenter:
bounds
setBounds:
setFrame:
effectiveLayoutSizeFittingSize:
supportsAsynchronousMeasurement
containerViewInfoCreateIfNeeded:
minimumLayoutSize
maximumLayoutSize
setLayoutSize:withContentPriority:
setCustomAlignmentRectInsets:
customAlignmentRectInsets
setCustomBaselineOffsetFromBottom:
customBaselineOffsetFromBottom
setCustomFirstBaselineOffsetFromTop:
customFirstBaselineOffsetFromTop
setInvalidatingIntrinsicContentSizeAlsoInvalidatesSuperview:
invalidatingIntrinsicContentSizeAlsoInvalidatesSuperview
setUntransformedFrame:
subviews
countByEnumeratingWithState:objects:count:
nukeContentLayoutSizeCacheFromOrbit
effectiveAlignmentRectInsets
alignmentRectInsets
_autolayoutSpacingAtEdge:forAttribute:nextToNeighbor:edge:attribute:multiplier:
raise:format:
_autolayoutSpacingAtEdge:forAttribute:inContainer:isGuide:
effectiveScreenScale
effectiveMinimumLayoutContentSize
effectiveMaximumLayoutContentSize
effectiveBaselineOffsetFromContentBottom
effectiveFirstBaselineOffsetFromContentTop
systemSpacingToAdjecentSiblingView:axis:baselineRelative:multiplier:
systemSpacingToSuperView:edge:baselineRelative:multiplier:
_didInvalidateIntrinsicContentSize
stringWithFormat:
appendFormat:
stringByAppendingString:
systemLayoutSizeFittingSize:
contentLayoutSizeCacheDescription
_nui_isImageView
numberOfLines
image
hasBaseline
font
lineHeight
isScrollEnabled
textContainerInset
_canHaveTitle
_titleOrImageViewForBaselineLayout
contentRectForBounds:
imageRectForContentRect:
titleRectForContentRect:
numberOfSegments
infoViewForSegment:
effectiveSeparatorHeight
baselineOffsetFromBottom
sizeThatFits:
titleLabel
_fontInfoForBaselineSpacing
_hasFontInfoForVerticalBaselineSpacing
ascender
descender
populateFlowArrangementCells:
contentLayoutSizeFittingSize:forArrangedSubview:
layoutFrameForArrangedSubview:withProposedContentFrame:
dictionaryWithObject:forKey:
value:withObjCType:
setObject:forKeyedSubscript:
numberWithDouble:
setObject:forKey:
array
addObject:
dictionaryWithObjects:forKeys:count:
initWithStyle:reuseIdentifier:
containerViewClass
alloc
contentView
initWithFrame:
setPreservesSuperviewLayoutMargins:
setLayoutMarginsRelativeArrangement:
setAutoresizingMask:
addSubview:
containerView
_containerView
systemLayoutSizeFittingSize:withHorizontalFittingPriority:verticalFittingPriority:
_contentViewClass
isEqual:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
description
debugDescription
contentCompressionResistancePriorityForAxis:
contentHuggingPriorityForAxis:
populateGridArrangementCells:
populateGridArrangementDimension:withCells:axis:
canCancelMeasurementForCompression
valueWithRange:
numberWithUnsignedInteger:
numberWithFloat:
numberWithBool:
shouldCancelMeasurementForCompressionInAxis:
numberWithInteger:
initWithObjectsAndKeys:
objectForKeyedSubscript:
setNeedsLayout
_intrinsicContentSizeInvalidatedForChildView:
_isContainerView
_prepareForFirstIntrinsicContentSizeCalculation
_prepareForSecondIntrinsicContentSizeCalculationWithLayoutEngineBounds:
_inSecondConstraintsPass
_setInSecondConstraintsPass:
_resetToBeginningOfDoublePass
sharedApplication
preferredContentSizeCategory
arrayWithObjects:count:
containsObject:
_nui_isAccessibilityEnabled
processInfo
environment
boolValue
addArrangedSubview:
performBatchUpdates:
dealloc
setWithArray:
string
superview
countForObject:
length
assertNotInLayoutPass:
containerView:systemLayoutSizeFittingSize:forArrangedSubview:
containerView:layoutFrameForArrangedSubview:withProposedFrame:
containerView:willMeasureArrangedSubviewsFittingSize:forReason:
containerView:shouldRestartMeasurementDueToCompressionInAxis:forReason:
containerViewDidLayoutArrangedSubviews:
setNeedsInvalidation:
copy
removeFromSuperview
makeObjectsPerformSelector:
isHidden
predicateWithBlock:
filteredArrayUsingPredicate:
count
stringWithUTF8String:
currentHandler
handleFailureInMethod:object:file:lineNumber:description:
beginBatchUpdates
endBatchUpdates
insertArrangedSubview:atIndex:
willRemoveSubview:
removeArrangedSubview:
indexOfObject:
removeObjectAtIndex:
didRemoveArrangedSubview:atIndex:
_countHiddenArrangesSubviews
_setHostsLayoutEngine:
_addAsSubviewIfNeeded:
insertObject:atIndex:
didInsertArrangedSubview:atIndex:
objectAtIndex:
replaceObjectAtIndex:withObject:
replaceArrangedSubviewAtIndex:withView:
effectiveUserInterfaceLayoutDirection
delegate
effectiveLayoutMargins
calculateArrangedSizeFittingSize:
_intrinsicSizeWithinSize:
layoutSubviews
effectiveLayoutBounds
layoutArrangedSubviewsInBounds:
_updateDebugBoundingBoxesIfNeeded
removeFromSuperlayer
purpleColor
colorWithAlphaComponent:
CGColor
setBorderColor:
setBorderWidth:
insertSublayer:atIndex:
visibleArrangedSubviews
frame
orangeColor
insertSublayer:above:
brownColor
insertSublayer:below:
needsBaselineDebugBoundingBoxesForArrangedSubview:
layoutMarginsDidChange
isEqualToString:
visibilityDidChangeForArrangedSubview:
observeValueForKeyPath:ofObject:change:context:
intrinsicContentSizeDidInvalidateForArrangedSubview:
calculateViewForFirstBaselineLayout
calculateViewForLastBaselineLayout
substringToIndex:
arrangedDescription
stringByAppendingFormat:
requiresConstraintBasedLayout
isDebugBoundingBoxesEnabled
initialize
isFlipped
initWithCoder:
initWithArrangedSubviews:
_verifyInternalConsistencyWarningOnly:
setDelegate:
arrangedSubviews
setArrangedSubviews:
replaceArrangedSubview:atIndex:
indexOfArrangedSubview:
setBaselineRelativeArrangement:
isBaselineRelativeArrangement
isLayoutMarginsRelativeArrangement
setBaselineRelativeLayoutMarginsForArrangement:
hasBaselineRelativeLayoutMarginsForArrangement
alignmentForView:inAxis:
setAlignment:forView:inAxis:
minimumSpacingAdjacentToView:
setMinimumSpacing:adjacentToView:
_isRTL
_delegate
_arrangedSubviewInfo
_arrangedSubviews
_visibleArrangedSubviews
_multilineSizeHelper
_effectiveLayoutMargins
_firstBaselineView
_lastBaselineView
_debugBoundingBoxLayers
_containerFlags
updateConstraints
preferredMaxLayoutWidth
intrinsicContentSize
_needsDoubleUpdateConstraintsPass
firstObject
lastObject
mustRestartMeasurement
layoutMargins
callStackSymbols
isInBatchUpdate
ensureArrangedSubviewsAreValid
isInLayoutPass
debugDictionaryForVisibleArrangedSubview:
debugSetDelegateRespondsToSelectors
sortDescriptorWithKey:ascending:
sortedArrayUsingDescriptors:
dictionaryWithDictionary:
numberWithUnsignedInt:
debugSetEnabledFlags
setDebugBoundingBoxesEnabled:
debugDictionary
enableAPIMisuseAssertions
setEnableAPIMisuseAssertions:
appendString:
dictionary
initWithView:class:
removeObserver:forKeyPath:
addObserver:forKeyPath:options:context:
initWithArrangedSubviewRows:
setColumnSpacing:
setRowSpacing:
setHorizontalAlignment:
setVerticalAlignment:
getColumnRange:rowRange:forArrangedSubview:
_verticalAlignmentOfView:row:
viewForFirstBaselineLayoutInRowAtIndex:
viewForLastBaselineLayoutInRowAtIndex:
addRowWithArrangedSubviews:
addObjectsFromArray:
isEqualToSet:
mutableCopy
minusSet:
invalidateArrangedSubviews
removeRowAtIndex:
objectAtIndexedSubscript:
_setupViewRangesIfNeeded
numberOfRows
insertRowAtIndex:withArrangedSubviews:
arrayWithCapacity:
arrayWithArray:
initWithContainerGridView:isRow:
removeAllObjects
numberOfColumns
insertColumnAtIndex:withArrangedSubviews:
enumerateObjectsUsingBlock:
arrangedSubviewInColumnAtIndex:rowAtIndex:
_baselineViewVendForFirstBaseline:fromViews:
_calculateArrangedSizeFittingSize:forLayout:
spacingAfter
alignment
debugDictionaryForDimensionConfiguration:
debugArrayForDimension:
_verifyInternalGridConsistencyWarningOnly:
_horizontalAlignmentOfView:inColumn:
_widthOfColumnAtIndex:
_heightOfRowAtIndex:
containerGridViewWithArrangedSubviewRows:
displayScale
arrangedSubviewRows
setArrangedSubviewRows:
rowIndexForArrangedSubview:
columnIndexForArrangedSubview:
rowAtIndex:
moveRowAtIndex:toIndex:
columnAtIndex:
addColumnWithArrangedSubviews:
moveColumnAtIndex:toIndex:
removeColumnAtIndex:
replaceArrangedSubview:inColumnAtIndex:rowAtIndex:
horizontalAlignment
verticalAlignment
horizontalDistribution
setHorizontalDistribution:
verticalDistribution
setVerticalDistribution:
rowSpacing
columnSpacing
setRowHeight:
setColumnWidth:
rowHeight
columnWidth
_viewRows
_arrangement
_visibleCount
_viewRanges
_spacing
_rows
_columns
_gridViewFlags
_rowHeight
_columnWidth
orderedSetWithArray:
orderedSetWithCapacity:
setHidden:
setLength:
setSpacingAfter:
setAlignment:
setVisibleArrangedSubviews:
_gridView
_length
setSpacing:
setAxis:
containerStackViewWithAxis:arrangedSubviews:
_effectiveAlignmentForArrangedSubview:
_baselineViewVendForFirstBaseline:
setCustomSpacing:afterView:
indexOfObject:inRange:
axis
distribution
spacing
horizontalContainerStackViewWithArrangedSubviews:
verticalContainerStackViewWithArrangedSubviews:
setDistribution:
customSpacingAfterView:
setSpacing:afterArrangedSubviewAtIndex:
_customSpacings
_stackViewFlags
numberOfItemsInBoxArrangement:
boxArrangement:itemAtIndex:horizontalAlignment:verticalAlignment:
container
mainScreen
scale
_cacheDisplayScaleIfNeeded
populateBoxArrangementCells:
initWithContainer:dataSource:
dataSource
reloadData
layoutSizeFittingSize:
positionItemsInBounds:block:
_container
_dataSource
_scale
_bounds
reverseObjectEnumerator
_effectiveAlignmentForArrangedSubview:inAxis:
containerFlowViewWithArrangedSubviews:
setNumberOfColumns:
_flowFlags
containerBoxViewWithArrangedSubviews:
_boxFlags
_createButtonWithGridView:item:
titleStyle
_createLabelForStyle:
blackColor
setTextColor:
widgetItemTitle
setText:
valueForKey:
setHyphenationFactor:
text
initWithString:attributes:
setAttributedText:
currentFont
_scaledValueForValue:
widgetItemSubtitle
subtitleStyle
grayColor
itemWidth
widgetGridView:didTapItemAtIndex:
buttonWithType:
widgetItemImage
setImage:forState:
_didTapButton
addTarget:action:forControlEvents:
imageView
setClipsToBounds:
imageStyle
setCornerRadius:
labelColor
setFont:
clearColor
setBackgroundColor:
setTextAlignment:
setAdjustsFontSizeToFitWidth:
setNumberOfLines:
setLineBreakMode:
preferredFontForTextStyle:
pointSize
systemFontOfSize:
entitledExtraSpaceForCellAtIndex:
cellForGridViewItemAtIndex:
donatableSpaceAllowRemeasure:
borrowableSpaceForCellAtIndex:
centerAdjustmentAllowed
initWithWidgetGridView:item:index:
donatableSpace
index
subtitleLabel
gridView
_width
_measuredSize
_index
_donatableSpaceIsValid
_accessibilityEnabled
_donatableSpace
initWithDocumentView:
documentView
setDocumentView:
contentInset
canScrollDocumentViewHorizontally
canScrollDocumentViewVertically
setContentSize:
setCanScrollDocumentViewHorizontally:
setCanScrollDocumentViewVertically:
initWithContentView:
setContentView:
_canScrollDocumentViewHorizontally
_canScrollDocumentViewVertically
_documentView
_horizontalAlignment
_verticalAlignment
currentDevice
userInterfaceIdiom
defaultCenter
contentSizeDidChange
addObserver:selector:name:object:
maxNumberOfItems
itemsPerRow
labelMinSpacing
numberOfItemsInWidgetGridView:
widgetGridView:itemAtIndex:
widgetGridView:classForCellAtIndex:
null
horizontalMargin
generateItems
subarrayWithRange:
setLayoutMargins:
currentLayout
labelOutset
_createGridViewIfNeeded
initWithDataSource:delegate:
setImageStyle:
setTitleStyle:
setSubtitleStyle:
setDataSource:
setCenterAdjustmentAllowed:
currentLabelOutset
_itemViews
_labelSizes
_currentLayout
_imageStyle
_titleStyle
_subtitleStyle
_centerAdjustmentAllowed
_currentLabelOutset
initForAsynchronousAccess:
getSize:forTargetSize:isSizeDependentOnPerpendicularAxis:
insertSize:forTargetSize:
invalidateCache
_threadSafe
_hasLayoutEngine
translatesAutoresizingMaskIntoConstraints
_nsis_bounds
alignmentRectForFrame:
_view
_view_super
_preferredMaxLayoutWidth
gridArrangement:widthOfColumnAtIndex:spacingAfter:
gridArrangement:heightOfRowAtIndex:spacingAfter:
numberOfItemsInGridArrangement:
gridArrangement:itemAtIndex:columns:rows:horizontalAlignment:verticalAlignment:
positionItemsInColumns:rows:inBounds:block:
unionFrameForItemsInColumns:rows:inBounds:
frameForColumns:rows:inBounds:
@16@0:8
v16@0:8
{nui_size_cache="__begin_"^{pair<CGSize, CGSize>}"__end_"^{pair<CGSize, CGSize>}"__end_cap_"{__compressed_pair<std::__1::pair<CGSize, CGSize> *, std::__1::allocator<std::__1::pair<CGSize, CGSize> > >="__value_"^{pair<CGSize, CGSize>}}}
{CGSize="width"d"height"d}
{UIEdgeInsets="top"d"left"d"bottom"d"right"d}
{?="baseLineFromTop"d"baseLineFromBottom"d}
{?="alsoInvalidateSuperview"b1"alignmentInsetsAreCustom"b1"topBaselineIsCustom"b1"bottomBaselineIsCustom"b1}
{CGSize=dd}32@0:8{CGSize=dd}16
q16@0:8
{?=dd}16@0:8
d16@0:8
B16@0:8
@20@0:8B16
v32@0:8{CGSize=dd}16
{CGSize=dd}16@0:8
v36@0:8{CGSize=dd}16f32
v48@0:8{UIEdgeInsets=dddd}16
{UIEdgeInsets=dddd}16@0:8
v24@0:8d16
v20@0:8B16
v48@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16
^{nui_size_cache=^{pair<CGSize, CGSize>}^{pair<CGSize, CGSize>}{__compressed_pair<std::__1::pair<CGSize, CGSize> *, std::__1::allocator<std::__1::pair<CGSize, CGSize> > >=^{pair<CGSize, CGSize>}}}16@0:8
d44@0:8@16q24B32d36
d44@0:8@16Q24B32d36
#16@0:8
@32@0:8q16@24
@"NUIContainerView"
@48@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16
{CGSize=dd}40@0:8{CGSize=dd}16f32f36
B24@0:8@16
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
f24@0:8q16
v24@0:8@16
@24@0:8@16
B20@0:8B16
I16@0:8
v24@0:8@?16
v32@0:8@16Q24
v32@0:8Q16@24
Q24@0:8@16
q32@0:8@16q24
v40@0:8q16@24q32
{NSDirectionalEdgeInsets=dddd}24@0:8@16
v56@0:8{NSDirectionalEdgeInsets=dddd}16@48
v48@0:8@16@24@32^v40
@"<NUIContainerViewDelegate>"
{map<UIView *, _NUIContainerViewArrangedSubview, std::__1::less<UIView *>, std::__1::allocator<std::__1::pair<UIView *const, _NUIContainerViewArrangedSubview> > >="__tree_"{__tree<std::__1::__value_type<UIView *, _NUIContainerViewArrangedSubview>, std::__1::__map_value_compare<UIView *, std::__1::__value_type<UIView *, _NUIContainerViewArrangedSubview>, std::__1::less<UIView *>, true>, std::__1::allocator<std::__1::__value_type<UIView *, _NUIContainerViewArrangedSubview> > >="__begin_node_"^{__tree_end_node<std::__1::__tree_node_base<void *> *>}"__pair1_"{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<UIView *, _NUIContainerViewArrangedSubview>, void *> > >="__value_"{__tree_end_node<std::__1::__tree_node_base<void *> *>="__left_"^{__tree_node_base<void *>}}}"__pair3_"{__compressed_pair<unsigned long, std::__1::__map_value_compare<UIView *, std::__1::__value_type<UIView *, _NUIContainerViewArrangedSubview>, std::__1::less<UIView *>, true> >="__value_"Q}}}
@"NSMutableArray"
@"NSArray"
@"NUIMultilineSizingHelper"
@"UIView"
{vector<CALayer *, std::__1::allocator<CALayer *> >="__begin_"^@"__end_"^@"__end_cap_"{__compressed_pair<CALayer **, std::__1::allocator<CALayer *> >="__value_"^@}}
{?="hiddenArrangedSubviewCount"b16"delaydInvalidation"b8"batchDepth"b4"inLayoutPass"b2"inMeasurementPass"b2"layoutDependency"b2"inEnsureArranged"b1"hasMargins"b1"sizeIsInvalid"b1"debugBoundingBoxes"b1"baselineRelative"b1"layoutMarginsRelative"b1"baselineLayoutMargins"b1"mustRestart"b1"delegateSystemLayoutSizeFittingSizeForArrangedSubview"b1"delegateLayoutFrameForArrangedSubview"b1"delegateWillMeasureFitting"b1"delegateShouldRestart"b1"delegateDidLayout"b1}
B24@0:8q16
{CGRect={CGPoint=dd}{CGSize=dd}}16@0:8
{CGSize=dd}40@0:8{CGSize=dd}16@32
{CGRect={CGPoint=dd}{CGSize=dd}}56@0:8@16{CGRect={CGPoint=dd}{CGSize=dd}}24
v32@0:8@16q24
{CGSize=dd}40@0:8{CGSize=dd}16@"<NUIArrangementItem>"32
{CGRect={CGPoint=dd}{CGSize=dd}}56@0:8@"<NUIArrangementItem>"16{CGRect={CGPoint=dd}{CGSize=dd}}24
v24@0:8^{vector<_NUIGridArrangementCell, std::__1::allocator<_NUIGridArrangementCell> >=^{_NUIGridArrangementCell}^{_NUIGridArrangementCell}{__compressed_pair<_NUIGridArrangementCell *, std::__1::allocator<_NUIGridArrangementCell> >=^{_NUIGridArrangementCell}}}16
v40@0:8^{vector<_NUIGridArrangementDimension, std::__1::allocator<_NUIGridArrangementDimension> >=^{_NUIGridArrangementDimension}^{_NUIGridArrangementDimension}{__compressed_pair<_NUIGridArrangementDimension *, std::__1::allocator<_NUIGridArrangementDimension> >=^{_NUIGridArrangementDimension}}}16r^{vector<_NUIGridArrangementCell, std::__1::allocator<_NUIGridArrangementCell> >=^{_NUIGridArrangementCell}^{_NUIGridArrangementCell}{__compressed_pair<_NUIGridArrangementCell *, std::__1::allocator<_NUIGridArrangementCell> >=^{_NUIGridArrangementCell}}}24q32
@32@0:8q16q24
v40@0:8^{_NSRange=QQ}16^{_NSRange=QQ}24@32
q24@0:8@16
@24@0:8q16
v32@0:8q16q24
v24@0:8q16
v40@0:8@16q24q32
@28@0:8B16@20
{CGSize=dd}36@0:8{CGSize=dd}16B32
d24@0:8q16
{_NUIGridArrangement="container"@"<_NUIGridArrangementContainer>""horzDist"b8"vertDist"b8"baselineRelative"B"hasValidMeasurement"B"cells"{vector<_NUIGridArrangementCell, std::__1::allocator<_NUIGridArrangementCell> >="__begin_"^{_NUIGridArrangementCell}"__end_"^{_NUIGridArrangementCell}"__end_cap_"{__compressed_pair<_NUIGridArrangementCell *, std::__1::allocator<_NUIGridArrangementCell> >="__value_"^{_NUIGridArrangementCell}}}"columns"{vector<_NUIGridArrangementDimension, std::__1::allocator<_NUIGridArrangementDimension> >="__begin_"^{_NUIGridArrangementDimension}"__end_"^{_NUIGridArrangementDimension}"__end_cap_"{__compressed_pair<_NUIGridArrangementDimension *, std::__1::allocator<_NUIGridArrangementDimension> >="__value_"^{_NUIGridArrangementDimension}}}"rows"{vector<_NUIGridArrangementDimension, std::__1::allocator<_NUIGridArrangementDimension> >="__begin_"^{_NUIGridArrangementDimension}"__end_"^{_NUIGridArrangementDimension}"__end_cap_"{__compressed_pair<_NUIGridArrangementDimension *, std::__1::allocator<_NUIGridArrangementDimension> >="__value_"^{_NUIGridArrangementDimension}}}"viewFrames"{vector<CGRect, std::__1::allocator<CGRect> >="__begin_"^{CGRect}"__end_"^{CGRect}"__end_cap_"{__compressed_pair<CGRect *, std::__1::allocator<CGRect> >="__value_"^{CGRect}}}}
{?="width"S"height"S}
{map<UIView *, const std::__1::pair<_NSRange, _NSRange>, std::__1::less<UIView *>, std::__1::allocator<std::__1::pair<UIView *const, const std::__1::pair<_NSRange, _NSRange> > > >="__tree_"{__tree<std::__1::__value_type<UIView *, const std::__1::pair<_NSRange, _NSRange> >, std::__1::__map_value_compare<UIView *, std::__1::__value_type<UIView *, const std::__1::pair<_NSRange, _NSRange> >, std::__1::less<UIView *>, true>, std::__1::allocator<std::__1::__value_type<UIView *, const std::__1::pair<_NSRange, _NSRange> > > >="__begin_node_"^{__tree_end_node<std::__1::__tree_node_base<void *> *>}"__pair1_"{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<UIView *, const std::__1::pair<_NSRange, _NSRange> >, void *> > >="__value_"{__tree_end_node<std::__1::__tree_node_base<void *> *>="__left_"^{__tree_node_base<void *>}}}"__pair3_"{__compressed_pair<unsigned long, std::__1::__map_value_compare<UIView *, std::__1::__value_type<UIView *, const std::__1::pair<_NSRange, _NSRange> >, std::__1::less<UIView *>, true> >="__value_"Q}}}
{?="horzAlign"b8"vertAlign"b8"inInsertOrRemove"b1"hasMutations"b1}
@"NSArray"16@0:8
v24@0:8@"NSArray"16
@28@0:8@16B24
@"NUIContainerGridView"
{?="align"b8"isRow"b1"hidden"b1"wasDetached"b1}
d24@0:8@16
v32@0:8d16@24
v32@0:8d16q24
{map<UIView *, double, std::__1::less<UIView *>, std::__1::allocator<std::__1::pair<UIView *const, double> > >="__tree_"{__tree<std::__1::__value_type<UIView *, double>, std::__1::__map_value_compare<UIView *, std::__1::__value_type<UIView *, double>, std::__1::less<UIView *>, true>, std::__1::allocator<std::__1::__value_type<UIView *, double> > >="__begin_node_"^{__tree_end_node<std::__1::__tree_node_base<void *> *>}"__pair1_"{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<UIView *, double>, void *> > >="__value_"{__tree_end_node<std::__1::__tree_node_base<void *> *>="__left_"^{__tree_node_base<void *>}}}"__pair3_"{__compressed_pair<unsigned long, std::__1::__map_value_compare<UIView *, std::__1::__value_type<UIView *, double>, std::__1::less<UIView *>, true> >="__value_"Q}}}
{?="alignment"b8"distribution"b8"axis"b4}
v24@0:8^{vector<_NUIBoxArrangementCell, std::__1::allocator<_NUIBoxArrangementCell> >=^{_NUIBoxArrangementCell}^{_NUIBoxArrangementCell}{__compressed_pair<_NUIBoxArrangementCell *, std::__1::allocator<_NUIBoxArrangementCell> >=^{_NUIBoxArrangementCell}}}16
@32@0:8@16@24
v56@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16@?48
{_NUIBoxArrangement="container"@"<_NUIBoxArrangementContainer>""horzDist"q"vertDist"q"hasValidMeasurement"B"cells"{vector<_NUIBoxArrangementCell, std::__1::allocator<_NUIBoxArrangementCell> >="__begin_"^{_NUIBoxArrangementCell}"__end_"^{_NUIBoxArrangementCell}"__end_cap_"{__compressed_pair<_NUIBoxArrangementCell *, std::__1::allocator<_NUIBoxArrangementCell> >="__value_"^{_NUIBoxArrangementCell}}}"measureSize"{CGSize="width"d"height"d}"viewFrames"{vector<CGRect, std::__1::allocator<CGRect> >="__begin_"^{CGRect}"__end_"^{CGRect}"__end_cap_"{__compressed_pair<CGRect *, std::__1::allocator<CGRect> >="__value_"^{CGRect}}}"maxBaseLinePair"{?="baseLineFromTop"d"baseLineFromBottom"d}}
@"<NUIArrangementContainer>"
@"<NUIBoxArrangementDataSource>"
{?="containerDirection"b1}
{CGRect="origin"{CGPoint="x"d"y"d}"size"{CGSize="width"d"height"d}}
v24@0:8^{vector<_NUIFlowArrangementCell, std::__1::allocator<_NUIFlowArrangementCell> >=^{_NUIFlowArrangementCell}^{_NUIFlowArrangementCell}{__compressed_pair<_NUIFlowArrangementCell *, std::__1::allocator<_NUIFlowArrangementCell> >=^{_NUIFlowArrangementCell}}}16
{_NUIFlowArrangement="container"@"<_NUIFlowArrangementContainer>""columns"Q"rowSpacing"d"columnSpacing"d"hasValidMeasurement"B"cells"{vector<_NUIFlowArrangementCell, std::__1::allocator<_NUIFlowArrangementCell> >="__begin_"^{_NUIFlowArrangementCell}"__end_"^{_NUIFlowArrangementCell}"__end_cap_"{__compressed_pair<_NUIFlowArrangementCell *, std::__1::allocator<_NUIFlowArrangementCell> >="__value_"^{_NUIFlowArrangementCell}}}"measureSize"{CGSize="width"d"height"d}"maxSize"{CGSize="width"d"height"d}"viewFrames"{vector<CGRect, std::__1::allocator<CGRect> >="__begin_"^{CGRect}"__end_"^{CGRect}"__end_cap_"{__compressed_pair<CGRect *, std::__1::allocator<CGRect> >="__value_"^{CGRect}}}"maxBaseLinePair"{?="baseLineFromTop"d"baseLineFromBottom"d}}
{?="horzAlign"b8"vertAlign"b8}
{CGSize=dd}48@0:8@16{CGSize=dd}24@40
{CGRect={CGPoint=dd}{CGSize=dd}}64@0:8@16@24{CGRect={CGPoint=dd}{CGSize=dd}}32
v48@0:8@16{CGSize=dd}24q40
B40@0:8@16q24q32
{CGSize=dd}48@0:8@"NUIContainerView"16{CGSize=dd}24@"UIView"40
{CGRect={CGPoint=dd}{CGSize=dd}}64@0:8@"NUIContainerView"16@"UIView"24{CGRect={CGPoint=dd}{CGSize=dd}}32
v48@0:8@"NUIContainerView"16{CGSize=dd}24q40
B40@0:8@"NUIContainerView"16q24q32
v24@0:8@"NUIContainerView"16
@40@0:8@16@24Q32
{?=dd}20@0:8B16
@40@0:8@"NUIWidgetGridView"16@"<NUIWidgetGridViewItem>"24Q32
{?="leading"d"trailing"d}
@"NUIWidgetGridView"
{?=dd}24@0:8Q16
[8{CGSize="width"d"height"d}]
@"<NUIWidgetGridViewDataSource>"
@"<NUIWidgetGridViewDelegate>"
B44@0:8^{CGSize=dd}16{CGSize=dd}24B40
v48@0:8{CGSize=dd}16{CGSize=dd}32
@32@0:8@16#24
{objc_super="receiver"@"super_class"#}
{?="isContainerView"b1"determiningPreferredMaxLayoutWidth"b1"inSecondConstraintsPass"b1}
v88@0:8{_NSRange=QQ}16{_NSRange=QQ}32{CGRect={CGPoint=dd}{CGSize=dd}}48@?80
{CGRect={CGPoint=dd}{CGSize=dd}}80@0:8{_NSRange=QQ}16{_NSRange=QQ}32{CGRect={CGPoint=dd}{CGSize=dd}}48
@"<NUIGridArrangementDataSource>"
{?="delegateWidth"b1"delegateHeight"b1"containerDirection"b1}
