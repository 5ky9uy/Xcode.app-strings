MbP?
MbP?
MbP?
Invalid edge %lu
<%@ %p size cache:
%@ : %@
v8@?0
com.apple.AppSupportUI
DebugAssertion
containerViewInfoKey
Arranged subview %@ wants autolayout. It must be wrapped in a _UIConstraintBasedLayoutHostingView or override _layoutSizeThatFits:fixedAxes:.
Flow arrangement does not have valid measurement for %@
v24@?0^{_NUIFlowArrangementCell=@{CGSize=dd}{CGSize=dd}{?=dd}b8b8}8Q16
item
{CGSize=dd}
size
baselines
_NUIFlowArrangement
class
maxBaselines
rowSpacing
colSpacing
cells
topOffset
bottomOffset
-[%@ %@] not implemented.
Grid arrangement does not have valid measurement for %@
v24@?0^{_NUIGridArrangementCell=@{?=ff}{?=ff}{CGSize=dd}{CGSize=dd}{_NSRange=QQ}{_NSRange=QQ}{?=dd}b8b8}8Q16
v48@?0@"<NUIArrangementItem>"8{CGRect={CGPoint=dd}{CGSize=dd}}16
column
span
index
length
spacingAfter
hugging
compression
priorities
_NUIGridArrangement
baselineRelative
horizontal
vertical
distributions
columns
rows
arrangement
v32@?0^{_NUIGridArrangementCell=@{?=ff}{?=ff}{CGSize=dd}{CGSize=dd}{_NSRange=QQ}{_NSRange=QQ}{?=dd}b8b8}8{_NSRange=QQ}16
Default
Fill
FillEqual
FillProp
EqualSpacing
EqualCentering
EqualGrouping
Unknown(%ld)
NUIContainerViewDebug
-%@ %@ not yet supported.
View is not a subview: %@
View is represented %lu times: %@
v32@?0@"UIView"8Q16^B24
B24@?0@"UIView"8@"NSDictionary"16
/Library/Caches/com.apple.xbs/Sources/AppSupportUI_Sim/AppSupportUI-40/AppSupportUI/NUIContainerView.mm
<Unknown File>
Mismatching visible arranged subviews count
Cannot nest more than 15 calls to performBatchUpdates:
Invalid parameter not satisfying: %@
view != nil
Hidden count mismatch
Info caount mismatch
stackIndex <= _arrangedSubviews.count
newView != nil
index < _arrangedSubviews.count
View is not an arranged subviews %@.
effectiveLayoutSizeFittingSize: is not reentrant
Skipping layout in size %@ for view: %@
hidden
arrangedSubviews = %lu[%lu];
arrangedSubviews = %lu[-];
 %@>
%@ called while in a layout or measurement pass.
WARNING: %@
ERROR: %@
visibleArrangedSubviews
arrangedSubviewsWantingAutolayout
cachedSizes
{UIEdgeInsets=dddd}
baselineLayoutMargins
layoutMargins
delegate
respondsTo
self
batchDepth
flags
cachedFirstBaselineView
firstBaselineView
cachedLastBaselineView
lastBaselineView
invalidConsistency
 layoutMarginsRelative = {%f, %f, %f, %f};
 baselineRelative = YES;
AppSupportUI-40 (macos)
view
horizonral
alignment
leading
bottom
trailing
minimumSpacing
debugBoundingBoxes
delayedInvalidation
inLayoutPass
inMeasurementPass
mustRestartMeasurement
Top/Lead
FirstBL
Center
Bottom/Trail
LastBL
/Library/Caches/com.apple.xbs/Sources/AppSupportUI_Sim/AppSupportUI-40/AppSupportUI/NUIContainerGridView.mm
Use -[%@ initWithArrangedSubviewRows:] or -[%@ init]
Views managed by grid missing from arranged subviews: %@
Arranged subviews not being managed by grid: %@
Row count mismatch
Column count mismatch
column < _columns.count
row < _rows.count
colRangeOut != NULL || rowRangeOut != NULL
findView != nil
row <= _rows.count
arrangedViews.count > 0
numberOfColumns == 0 || numberOfColumns == copy.count
fromRow < _rows.count
toRow < _rows.count
column <= _columns.count
numberOfRows == 0 || numberOfRows == copy.count
v32@?0@"NSMutableArray"8Q16^B24
fromCol < _columns.count
toCol < _columns.count
%@ size = {%ld, %ld} cells = 
[%@:%@]
(%@|%@)
v16@?0r^{_NUIGridArrangementCell=@{?=ff}{?=ff}{CGSize=dd}{CGSize=dd}{_NSRange=QQ}{_NSRange=QQ}{?=dd}b8b8}8
-[%1$@ insertArrangedSubview:atIndex:] not supported, use -[%1$@ insert{Row|Column}AtIndex:withArrangedSubviews:] to insert arranged subviews.
-[%1$@ removeArrangedSubview:] not supported, use -[%1$@ remove{Row|Column}AtIndex:] to remove arranged subviews.
Invalid system spacing
%lu-%lu
%@ no longer attached to grid view <%p>.
%@ axis = %@: distribution = %@; alignments = 
Horz
Vert
[%@]
axis
distribution
spacing
/Library/Caches/com.apple.xbs/Sources/AppSupportUI_Sim/AppSupportUI-40/AppSupportUI/NUIBoxArrangement.mm
container != nil
dataSource != nil
Box arrangement does not have valid measurement for %@
v24@?0^{_NUIBoxArrangementCell=@{CGSize=dd}{CGSize=dd}{?=dd}b8b8}8Q16
_NUIBoxArrangement
System spacing not yet supported
Baseline relative arrangement not yet supported by NUIContainerFlowView.
Non default minimum spacing adjecent to arranged subview is not yet supported by NUIContainerFlowView.
%@ alignments = 
[%@|%@]
alignmnets
/Library/Caches/com.apple.xbs/Sources/AppSupportUI_Sim/AppSupportUI-40/AppSupportUI/NUIContentScrollView.m
Invalid horizontal alignment %ld.
Invalid vertical alignment %ld.
/Library/Caches/com.apple.xbs/Sources/AppSupportUI_Sim/AppSupportUI-40/AppSupportUI/NUIGridArrangement.mm
A container %@ has an invalid rect %@ for item %@. Break on _NUIArrangementInvalidRect to debug.
An item %@ returned an invalid size %@. Break on _NUIArrangementInvalidSize to debug.
_NUIViewContainerViewInfo
NUIContainerView
_NUISizeCache
NUISubclassHelpers
NUIPrivate
NUIClassCheck
NUITableViewContainerCell
NUICollectionViewContainerCell
_NUIGridArrangement
NUIArrangementItem
NSObject
NUIContainerViewHack
_UIMultilineTextContentSizing
NUIAccessibilitySupport
NUISubclassing
NUIDebug
NUIDebugPrivate
NUIContainerGridView
_NUIGridArrangementContainer
NUIArrangementContainer
NUIGridDimension
NUIContainerStackView
NUIBoxArrangement
_NUIBoxArrangementContainer
NUIContainerFlowView
_NUIFlowArrangementContainer
NUIContainerBoxView
NUIContentScrollView
NUISizeCache
NUIGridArrangement
init
.cxx_destruct
.cxx_construct
_sizeCache
_minSize
_maxSize
_alignmentInsets
_cachedAlignmentInsets
_baselines
_flags
isLayoutSizeDependentOnPerpendicularAxis
calculateLayoutSizeFittingSize:
alignmentRectInsets
effectiveBaselineOffsetFromBottom
_hasFontInfoForVerticalBaselineSpacing
_fontInfoForBaselineSpacing
effectiveFirstBaselineOffsetFromTop
capHeight
_currentScreenScale
_nui_baselineViewType
viewForLastBaselineLayout
viewForFirstBaselineLayout
_wantsConstraintBasedLayout
invalidateIntrinsicContentSize
setLayoutSize:withHorizontalContentPriority:verticalContentPriority:
setMinimumLayoutSize:
setMaximumLayoutSize:
setContentHuggingPriority:forAxis:
setContentCompressionResistancePriority:forAxis:
layer
transform
anchorPoint
setCenter:
bounds
setBounds:
setFrame:
effectiveLayoutSizeFittingSize:
setNeverCacheEffectiveLayoutSize:
neverCacheEffectiveLayoutSize
minimumLayoutSize
maximumLayoutSize
setLayoutSize:withContentPriority:
setCustomAlignmentRectInsets:
customAlignmentRectInsets
setCustomBaselineOffsetFromBottom:
customBaselineOffsetFromBottom
setCustomFirstBaselineOffsetFromTop:
customFirstBaselineOffsetFromTop
setInvalidatingIntrinsicContentSizeAlsoInvalidatesSuperview:
invalidatingIntrinsicContentSizeAlsoInvalidatesSuperview
setUntransformedFrame:
TB,N
T{CGSize=dd},N
T{UIEdgeInsets=dddd},N
Td,N
subviews
countByEnumeratingWithState:objects:count:
nukeContentLayoutSizeCacheFromOrbit
effectiveAlignmentRectInsets
superview
setCurrentEffectiveLayoutSizeFittingSizeShouldNotBeCached
_autolayoutSpacingAtEdge:forAttribute:nextToNeighbor:edge:attribute:multiplier:
raise:format:
_autolayoutSpacingAtEdge:forAttribute:inContainer:isGuide:
effectiveScreenScale
effectiveBaselineOffsetFromContentBottom
effectiveFirstBaselineOffsetFromContentTop
systemSpacingToAdjecentSiblingView:axis:baselineRelative:multiplier:
systemSpacingToSuperView:edge:baselineRelative:multiplier:
_didInvalidateIntrinsicContentSize
debugSizeCache
dictionary
valueWithCGSize:
setObject:forKey:
copy
stringWithFormat:
appendFormat:
stringByAppendingString:
canUseFastLayoutSizeCalulation
lineHeight
systemLayoutSizeFittingSize:
_layoutSizeThatFits:fixedAxes:
contentLayoutSizeCacheDescription
debugSizeCacheDict
numberOfLines
isScrollEnabled
effectiveSeparatorHeight
_baselineOffsetsAtSize:
ascender
descender
_wantsAutolayout
weakObjectsHashTable
instanceMethodForSelector:
methodForSelector:
containsObject:
addObject:
populateFlowArrangementCells:
contentLayoutSizeFittingSize:forArrangedSubview:
layoutFrameForArrangedSubview:withProposedContentFrame:
dictionaryWithObject:forKey:
value:withObjCType:
setObject:forKeyedSubscript:
numberWithDouble:
array
dictionaryWithObjects:forKeys:count:
initWithStyle:reuseIdentifier:
containerViewClass
contentView
initWithFrame:
setPreservesSuperviewLayoutMargins:
setLayoutMarginsRelativeArrangement:
setAutoresizingMask:
addSubview:
systemLayoutSizeFittingSize:withHorizontalFittingPriority:verticalFittingPriority:
sizeThatFits:
T#,R,N
containerView
_containerView
T@"NUIContainerView",R,N,V_containerView
_contentViewClass
isEqual:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
description
debugDescription
TQ,R
T#,R
T@"NSString",R,C
contentCompressionResistancePriorityForAxis:
contentHuggingPriorityForAxis:
populateGridArrangementCells:
populateGridArrangementDimension:withCells:axis:
canCancelMeasurementForCompression
valueWithRange:
numberWithUnsignedInteger:
numberWithFloat:
numberWithBool:
shouldCancelMeasurementForCompressionInAxis:
initWithObjectsAndKeys:
numberWithInteger:
objectForKeyedSubscript:
setNeedsLayout
_intrinsicContentSizeInvalidatedForChildView:
_isContainerView
_prepareForFirstIntrinsicContentSizeCalculation
_prepareForSecondIntrinsicContentSizeCalculationWithLayoutEngineBounds:
_inSecondConstraintsPass
_setInSecondConstraintsPass:
_resetToBeginningOfDoublePass
sharedApplication
preferredContentSizeCategory
arrayWithObjects:count:
_nui_isAccessibilityEnabled
processInfo
environment
boolValue
intValue
addArrangedSubview:
performBatchUpdates:
dealloc
setWithArray:
string
countForObject:
length
containerView:systemLayoutSizeFittingSize:forArrangedSubview:
containerView:layoutFrameForArrangedSubview:withProposedFrame:
containerView:willMeasureArrangedSubviewsFittingSize:forReason:
containerView:shouldRestartMeasurementDueToCompressionInAxis:forReason:
containerViewDidLayoutArrangedSubviews:
setNeedsInvalidation:
insertArrangedSubview:atIndex:
enumerateObjectsUsingBlock:
removeArrangedSubview:
isHidden
predicateWithBlock:
filteredArrayUsingPredicate:
count
stringWithUTF8String:
currentHandler
handleFailureInMethod:object:file:lineNumber:description:
willRemoveSubview:
indexOfObject:
removeObjectAtIndex:
didRemoveArrangedSubview:atIndex:
setHidden:
removeFromSuperview
_setHostsLayoutEngine:
insertObject:atIndex:
didInsertArrangedSubview:atIndex:
objectAtIndex:
replaceObjectAtIndex:withObject:
replaceArrangedSubviewAtIndex:withView:
effectiveUserInterfaceLayoutDirection
delegate
effectiveLayoutMargins
calculateArrangedSizeFittingSize:
layoutSubviews
effectiveLayoutBounds
layoutArrangedSubviewsInBounds:
removeFromSuperlayer
purpleColor
colorWithAlphaComponent:
CGColor
setBorderColor:
setBorderWidth:
insertSublayer:atIndex:
visibleArrangedSubviews
frame
redColor
orangeColor
insertSublayer:above:
brownColor
insertSublayer:below:
needsBaselineDebugBoundingBoxesForArrangedSubview:
layoutMarginsDidChange
isEqualToString:
visibilityDidChangeForArrangedSubview:
observeValueForKeyPath:ofObject:change:context:
intrinsicContentSizeDidInvalidateForArrangedSubview:
calculateViewForFirstBaselineLayout
calculateViewForLastBaselineLayout
substringToIndex:
stringByAppendingFormat:
arrangedDebugDescription
callStackSymbols
requiresConstraintBasedLayout
isDebugBoundingBoxesEnabled
initialize
layerClass
initWithCoder:
initWithArrangedSubviews:
setArrangedSubviewRemovalPolicy:
arrangedSubviewRemovalPolicy
setArrangedSubviewAdditionPolicy:
arrangedSubviewAdditionPolicy
setDelegate:
arrangedSubviews
setArrangedSubviews:
replaceArrangedSubview:atIndex:
indexOfArrangedSubview:
setBaselineRelativeArrangement:
isBaselineRelativeArrangement
isLayoutMarginsRelativeArrangement
setBaselineRelativeLayoutMarginsForArrangement:
hasBaselineRelativeLayoutMarginsForArrangement
alignmentForView:inAxis:
setAlignment:forView:inAxis:
positionAdjustmentOffsetForView:
setPositionAdjustmentOffset:forView:
minimumSpacingAdjacentToView:
setMinimumSpacing:adjacentToView:
_isRTL
_delegate
_arrangedSubviewInfo
_arrangedSubviews
_visibleArrangedSubviews
_effectiveLayoutMargins
_firstBaselineView
_lastBaselineView
_debugBoundingBoxLayers
_containerFlags
T@"NSArray",C,N
T@"NSArray",R,N
Tq,N
T@"<NUIContainerViewDelegate>",W,N
baselineRelativeArrangement
TB,N,GisBaselineRelativeArrangement
layoutMarginsRelativeArrangement
TB,N,GisLayoutMarginsRelativeArrangement
baselineRelativeLayoutMarginsForArrangement
TB,N,GhasBaselineRelativeLayoutMarginsForArrangement
_layoutHeightDependsOnWidth
_axesForDerivingIntrinsicContentSizeFromLayoutSize
firstObject
lastObject
mustRestartMeasurement
layoutMargins
isInBatchUpdate
ensureArrangedSubviewsAreValid
assertNotInLayoutPass:
debugDictionaryForVisibleArrangedSubview:
debugSetDelegateRespondsToSelectors
sortDescriptorWithKey:ascending:
sortedArrayUsingDescriptors:
dictionaryWithDictionary:
numberWithUnsignedInt:
debugSetEnabledFlags
setDebugBoundingBoxesEnabled:
debugDictionary
enableAPIMisuseAssertions
setEnableAPIMisuseAssertions:
debugBoundingBoxesEnabled
TB,N,GisDebugBoundingBoxesEnabled
appendString:
debugVersion
removeObserver:forKeyPath:
addObserver:forKeyPath:options:context:
initWithArrangedSubviewRows:
setColumnSpacing:
setRowSpacing:
setHorizontalAlignment:
setVerticalAlignment:
getColumnRange:rowRange:forArrangedSubview:
viewForFirstBaselineLayoutInRowAtIndex:
viewForLastBaselineLayoutInRowAtIndex:
addRowWithArrangedSubviews:
addObjectsFromArray:
isEqualToSet:
mutableCopy
minusSet:
removeRowAtIndex:
makeObjectsPerformSelector:
objectAtIndexedSubscript:
numberOfRows
insertRowAtIndex:withArrangedSubviews:
arrayWithCapacity:
arrayWithArray:
removeAllObjects
numberOfColumns
insertColumnAtIndex:withArrangedSubviews:
arrangedSubviewInColumnAtIndex:rowAtIndex:
spacingAfter
alignment
containerGridViewWithArrangedSubviewRows:
displayScale
arrangedSubviewRows
setArrangedSubviewRows:
rowIndexForArrangedSubview:
columnIndexForArrangedSubview:
rowAtIndex:
moveRowAtIndex:toIndex:
columnAtIndex:
addColumnWithArrangedSubviews:
moveColumnAtIndex:toIndex:
removeColumnAtIndex:
replaceArrangedSubview:inColumnAtIndex:rowAtIndex:
horizontalAlignment
verticalAlignment
horizontalDistribution
setHorizontalDistribution:
verticalDistribution
setVerticalDistribution:
rowSpacing
columnSpacing
setRowHeight:
setColumnWidth:
rowHeight
columnWidth
_viewRows
_arrangement
_visibleCount
_viewRanges
_spacing
_rows
_columns
_gridViewFlags
_rowHeight
_columnWidth
Tq,R,N
Td,N,V_rowHeight
Td,N,V_columnWidth
orderedSetWithArray:
orderedSetWithCapacity:
setLength:
setSpacingAfter:
setAlignment:
hidden
TB,N,GisHidden
_gridView
_length
T@"NSArray",C,D,N
setSpacing:
setAxis:
containerStackViewWithAxis:arrangedSubviews:
setCustomSpacing:afterView:
indexOfObject:inRange:
axis
distribution
spacing
horizontalContainerStackViewWithArrangedSubviews:
verticalContainerStackViewWithArrangedSubviews:
setDistribution:
customSpacingAfterView:
setSpacing:afterArrangedSubviewAtIndex:
_customSpacings
_stackViewFlags
Td,N,V_spacing
numberOfItemsInBoxArrangement:
boxArrangement:itemAtIndex:horizontalAlignment:verticalAlignment:
container
mainScreen
scale
populateBoxArrangementCells:
initWithContainer:dataSource:
dataSource
reloadData
layoutSizeFittingSize:
positionItemsInBounds:block:
_container
_dataSource
_scale
_bounds
T@"<NUIArrangementContainer>",R,W,N
T@"<NUIBoxArrangementDataSource>",R,W,N
reverseObjectEnumerator
containerFlowViewWithArrangedSubviews:
setNumberOfColumns:
_flowFlags
containerBoxViewWithArrangedSubviews:
_boxFlags
initWithDocumentView:
documentView
setDocumentView:
canScrollDocumentViewHorizontally
canScrollDocumentViewVertically
contentInset
_measureSizeForTargetSize:insets:
_finalSizeForTargetSize:resultSize:insets:
_intrinsicSizeWithinSize:
setContentSize:
setCanScrollDocumentViewHorizontally:
setCanScrollDocumentViewVertically:
initWithContentView:
setContentView:
_canScrollDocumentViewHorizontally
_canScrollDocumentViewVertically
_documentView
_horizontalAlignment
_verticalAlignment
T@"UIView",&,N
T@"UIView",&,N,V_documentView
Tq,N,V_horizontalAlignment
Tq,N,V_verticalAlignment
TB,N,V_canScrollDocumentViewHorizontally
TB,N,V_canScrollDocumentViewVertically
initForAsynchronousAccess:
getSize:forTargetSize:isSizeDependentOnPerpendicularAxis:
insertSize:forTargetSize:
invalidateCache
_threadSafe
gridArrangement:widthOfColumnAtIndex:spacingAfter:
gridArrangement:heightOfRowAtIndex:spacingAfter:
numberOfItemsInGridArrangement:
gridArrangement:itemAtIndex:columns:rows:horizontalAlignment:verticalAlignment:
positionItemsInColumns:rows:inBounds:block:
unionFrameForItemsInColumns:rows:inBounds:
frameForColumns:rows:inBounds:
T@"<NUIGridArrangementDataSource>",R,W,N
@16@0:8
v16@0:8
{nui_size_cache="__begin_"^v"__end_"^v"__end_cap_"{__compressed_pair<std::pair<CGSize, CGSize> *, std::allocator<std::pair<CGSize, CGSize>>>="__value_"^v}}
{CGSize="width"d"height"d}
{UIEdgeInsets="top"d"left"d"bottom"d"right"d}
{?="baseLineFromTop"d"baseLineFromBottom"d}
{?="neverCacheLayoutSize"b1"shouldCacheLayoutSize"b1"alsoInvalidateSuperview"b1"cachedAlignmentInsetsAreValid"b1"topBaselineIsCustom"b1"bottomBaselineIsCustom"b1}
{CGSize=dd}32@0:8{CGSize=dd}16
d16@0:8
B16@0:8
v20@0:8B16
v32@0:8{CGSize=dd}16
{CGSize=dd}16@0:8
v36@0:8{CGSize=dd}16f32
v40@0:8{CGSize=dd}16f32f36
v48@0:8{UIEdgeInsets=dddd}16
{UIEdgeInsets=dddd}16@0:8
v24@0:8d16
v48@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16
d44@0:8@16q24B32d36
d44@0:8@16Q24B32d36
q16@0:8
#16@0:8
@32@0:8q16@24
{CGSize=dd}40@0:8{CGSize=dd}16f32f36
@"NUIContainerView"
@48@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16
B24@0:8@16
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
f24@0:8q16
v24@0:8@16
@24@0:8@16
v24@0:8q16
v24@0:8@?16
v32@0:8@16Q24
v32@0:8Q16@24
Q24@0:8@16
q32@0:8@16q24
v40@0:8q16@24q32
{CGPoint=dd}24@0:8@16
v40@0:8{CGPoint=dd}16@32
{NSDirectionalEdgeInsets=dddd}24@0:8@16
v56@0:8{NSDirectionalEdgeInsets=dddd}16@48
{CGSize=dd}40@0:8{CGSize=dd}16Q32
v48@0:8@16@24@32^v40
B24@0:8q16
@"<NUIContainerViewDelegate>"
{map<UIView *, _NUIContainerViewArrangedSubview, std::less<UIView *>, std::allocator<std::pair<UIView *const, _NUIContainerViewArrangedSubview>>>="__tree_"{__tree<std::__value_type<UIView *, _NUIContainerViewArrangedSubview>, std::__map_value_compare<UIView *, std::__value_type<UIView *, _NUIContainerViewArrangedSubview>, std::less<UIView *>, true>, std::allocator<std::__value_type<UIView *, _NUIContainerViewArrangedSubview>>>="__begin_node_"^v"__pair1_"{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<UIView *, _NUIContainerViewArrangedSubview>, void *>>>="__value_"{__tree_end_node<std::__tree_node_base<void *> *>="__left_"^v}}"__pair3_"{__compressed_pair<unsigned long, std::__map_value_compare<UIView *, std::__value_type<UIView *, _NUIContainerViewArrangedSubview>, std::less<UIView *>, true>>="__value_"Q}}}
@"NSMutableArray"
@"NSArray"
@"UIView"
{vector<CALayer *, std::allocator<CALayer *>>="__begin_"^@"__end_"^@"__end_cap_"{__compressed_pair<CALayer **, std::allocator<CALayer *>>="__value_"^@}}
{?="hiddenArrangedSubviewCount"b16"delaydInvalidation"b8"batchDepth"b4"inLayoutPass"b2"inMeasurementPass"b2"layoutDependency"b2"removalPolicy"b2"removalPolicyHasBeenSet"b1"additionPolicy"b1"inEnsureArranged"b1"inEffectiveSize"b1"hasMargins"b1"debugBoundingBoxes"b1"baselineRelative"b1"layoutMarginsRelative"b1"baselineLayoutMargins"b1"mustRestart"b1"delegateSystemLayoutSizeFittingSizeForArrangedSubview"b1"delegateLayoutFrameForArrangedSubview"b1"delegateWillMeasureFitting"b1"delegateShouldRestart"b1"delegateDidLayout"b1}
{?=dd}32@0:8{CGSize=dd}16
{CGRect={CGPoint=dd}{CGSize=dd}}16@0:8
{CGSize=dd}40@0:8{CGSize=dd}16@32
{CGRect={CGPoint=dd}{CGSize=dd}}56@0:8@16{CGRect={CGPoint=dd}{CGSize=dd}}24
v32@0:8@16q24
{CGSize=dd}40@0:8{CGSize=dd}16@"<NUIArrangementItem>"32
{CGRect={CGPoint=dd}{CGSize=dd}}56@0:8@"<NUIArrangementItem>"16{CGRect={CGPoint=dd}{CGSize=dd}}24
v24@0:8^v16
v40@0:8^v16r^v24q32
@32@0:8q16q24
v40@0:8^{_NSRange=QQ}16^{_NSRange=QQ}24@32
q24@0:8@16
@24@0:8q16
v32@0:8q16q24
v40@0:8@16q24q32
{_NUIGridArrangement="container"@"<_NUIGridArrangementContainer>""horzDist"b8"vertDist"b8"baselineRelative"B"hasValidMeasurement"B"cells"{vector<_NUIGridArrangementCell, std::allocator<_NUIGridArrangementCell>>="__begin_"^{_NUIGridArrangementCell}"__end_"^{_NUIGridArrangementCell}"__end_cap_"{__compressed_pair<_NUIGridArrangementCell *, std::allocator<_NUIGridArrangementCell>>="__value_"^{_NUIGridArrangementCell}}}"columns"{vector<_NUIGridArrangementDimension, std::allocator<_NUIGridArrangementDimension>>="__begin_"^{_NUIGridArrangementDimension}"__end_"^{_NUIGridArrangementDimension}"__end_cap_"{__compressed_pair<_NUIGridArrangementDimension *, std::allocator<_NUIGridArrangementDimension>>="__value_"^{_NUIGridArrangementDimension}}}"rows"{vector<_NUIGridArrangementDimension, std::allocator<_NUIGridArrangementDimension>>="__begin_"^{_NUIGridArrangementDimension}"__end_"^{_NUIGridArrangementDimension}"__end_cap_"{__compressed_pair<_NUIGridArrangementDimension *, std::allocator<_NUIGridArrangementDimension>>="__value_"^{_NUIGridArrangementDimension}}}"viewFrames"{vector<CGRect, std::allocator<CGRect>>="__begin_"^{CGRect}"__end_"^{CGRect}"__end_cap_"{__compressed_pair<CGRect *, std::allocator<CGRect>>="__value_"^{CGRect}}}}
{?="width"S"height"S}
{map<UIView *, const std::pair<_NSRange, _NSRange>, std::less<UIView *>, std::allocator<std::pair<UIView *const, const std::pair<_NSRange, _NSRange>>>>="__tree_"{__tree<std::__value_type<UIView *, const std::pair<_NSRange, _NSRange>>, std::__map_value_compare<UIView *, std::__value_type<UIView *, const std::pair<_NSRange, _NSRange>>, std::less<UIView *>, true>, std::allocator<std::__value_type<UIView *, const std::pair<_NSRange, _NSRange>>>>="__begin_node_"^v"__pair1_"{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<UIView *, const std::pair<_NSRange, _NSRange>>, void *>>>="__value_"{__tree_end_node<std::__tree_node_base<void *> *>="__left_"^v}}"__pair3_"{__compressed_pair<unsigned long, std::__map_value_compare<UIView *, std::__value_type<UIView *, const std::pair<_NSRange, _NSRange>>, std::less<UIView *>, true>>="__value_"Q}}}
{?="horzAlign"b8"vertAlign"b8"inInsertOrRemove"b1"hasMutations"b1}
@"NSArray"16@0:8
v24@0:8@"NSArray"16
@"NUIContainerGridView"
{?="align"b8"isRow"b1"hidden"b1"wasDetached"b1}
d24@0:8@16
v32@0:8d16@24
v32@0:8d16q24
{map<UIView *, double, std::less<UIView *>, std::allocator<std::pair<UIView *const, double>>>="__tree_"{__tree<std::__value_type<UIView *, double>, std::__map_value_compare<UIView *, std::__value_type<UIView *, double>, std::less<UIView *>, true>, std::allocator<std::__value_type<UIView *, double>>>="__begin_node_"^v"__pair1_"{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<UIView *, double>, void *>>>="__value_"{__tree_end_node<std::__tree_node_base<void *> *>="__left_"^v}}"__pair3_"{__compressed_pair<unsigned long, std::__map_value_compare<UIView *, std::__value_type<UIView *, double>, std::less<UIView *>, true>>="__value_"Q}}}
{?="alignment"b8"distribution"b8"axis"b4}
@32@0:8@16@24
v56@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16@?48
{_NUIBoxArrangement="container"@"<_NUIBoxArrangementContainer>""horzDist"q"vertDist"q"hasValidMeasurement"B"cells"{vector<_NUIBoxArrangementCell, std::allocator<_NUIBoxArrangementCell>>="__begin_"^{_NUIBoxArrangementCell}"__end_"^{_NUIBoxArrangementCell}"__end_cap_"{__compressed_pair<_NUIBoxArrangementCell *, std::allocator<_NUIBoxArrangementCell>>="__value_"^{_NUIBoxArrangementCell}}}"measureSize"{CGSize="width"d"height"d}"viewFrames"{vector<CGRect, std::allocator<CGRect>>="__begin_"^{CGRect}"__end_"^{CGRect}"__end_cap_"{__compressed_pair<CGRect *, std::allocator<CGRect>>="__value_"^{CGRect}}}"maxBaseLinePair"{?="baseLineFromTop"d"baseLineFromBottom"d}}
@"<NUIArrangementContainer>"
@"<NUIBoxArrangementDataSource>"
{?="containerDirection"b1}
{CGRect="origin"{CGPoint="x"d"y"d}"size"{CGSize="width"d"height"d}}
{_NUIFlowArrangement="container"@"<_NUIFlowArrangementContainer>""columns"Q"rowSpacing"d"columnSpacing"d"hasValidMeasurement"B"cells"{vector<_NUIFlowArrangementCell, std::allocator<_NUIFlowArrangementCell>>="__begin_"^{_NUIFlowArrangementCell}"__end_"^{_NUIFlowArrangementCell}"__end_cap_"{__compressed_pair<_NUIFlowArrangementCell *, std::allocator<_NUIFlowArrangementCell>>="__value_"^{_NUIFlowArrangementCell}}}"measureSize"{CGSize="width"d"height"d}"maxSize"{CGSize="width"d"height"d}"viewFrames"{vector<CGRect, std::allocator<CGRect>>="__begin_"^{CGRect}"__end_"^{CGRect}"__end_cap_"{__compressed_pair<CGRect *, std::allocator<CGRect>>="__value_"^{CGRect}}}"maxBaseLinePair"{?="baseLineFromTop"d"baseLineFromBottom"d}}
{?="horzAlign"b8"vertAlign"b8}
{CGSize=dd}64@0:8{CGSize=dd}16{UIEdgeInsets=dddd}32
{CGSize=dd}80@0:8{CGSize=dd}16{CGSize=dd}32{UIEdgeInsets=dddd}48
@20@0:8B16
B44@0:8^{CGSize=dd}16{CGSize=dd}24B40
v48@0:8{CGSize=dd}16{CGSize=dd}32
v88@0:8{_NSRange=QQ}16{_NSRange=QQ}32{CGRect={CGPoint=dd}{CGSize=dd}}48@?80
{CGRect={CGPoint=dd}{CGSize=dd}}80@0:8{_NSRange=QQ}16{_NSRange=QQ}32{CGRect={CGPoint=dd}{CGSize=dd}}48
@"<NUIGridArrangementDataSource>"
{?="delegateWidth"b1"delegateHeight"b1"containerDirection"b1}
MbP?
&K5!!
Invalid edge %lu
<%@ %p size cache:
%@ : %@
v8@?0
com.apple.AppSupportUI
DebugAssertion
containerViewInfoKey
Arranged subview %@ wants autolayout. It must be wrapped in a _UIConstraintBasedLayoutHostingView or override _layoutSizeThatFits:fixedAxes:.
Flow arrangement does not have valid measurement for %@
v24@?0^{_NUIFlowArrangementCell=@{CGSize=dd}{CGSize=dd}{?=dd}b8b8}8Q16
item
{CGSize=dd}
size
baselines
_NUIFlowArrangement
class
maxBaselines
rowSpacing
colSpacing
cells
topOffset
bottomOffset
-[%@ %@] not implemented.
Grid arrangement does not have valid measurement for %@
v24@?0^{_NUIGridArrangementCell=@{?=ff}{?=ff}{CGSize=dd}{CGSize=dd}{_NSRange=QQ}{_NSRange=QQ}{?=dd}b8b8}8Q16
v48@?0@"<NUIArrangementItem>"8{CGRect={CGPoint=dd}{CGSize=dd}}16
column
span
index
length
spacingAfter
hugging
compression
priorities
_NUIGridArrangement
baselineRelative
horizontal
vertical
distributions
columns
rows
arrangement
v32@?0^{_NUIGridArrangementCell=@{?=ff}{?=ff}{CGSize=dd}{CGSize=dd}{_NSRange=QQ}{_NSRange=QQ}{?=dd}b8b8}8{_NSRange=QQ}16
Default
Fill
FillEqual
FillProp
EqualSpacing
EqualCentering
EqualGrouping
Unknown(%ld)
NUIContainerViewDebug
-%@ %@ not yet supported.
View is not a subview: %@
View is represented %lu times: %@
v32@?0@"UIView"8Q16^B24
B24@?0@"UIView"8@"NSDictionary"16
/Library/Caches/com.apple.xbs/Sources/AppSupportUI_Sim/AppSupportUI-40/AppSupportUI/NUIContainerView.mm
<Unknown File>
Mismatching visible arranged subviews count
Cannot nest more than 15 calls to performBatchUpdates:
Invalid parameter not satisfying: %@
view != nil
Hidden count mismatch
Info caount mismatch
stackIndex <= _arrangedSubviews.count
newView != nil
index < _arrangedSubviews.count
View is not an arranged subviews %@.
effectiveLayoutSizeFittingSize: is not reentrant
Skipping layout in size %@ for view: %@
hidden
arrangedSubviews = %lu[%lu];
arrangedSubviews = %lu[-];
 %@>
%@ called while in a layout or measurement pass.
WARNING: %@
ERROR: %@
visibleArrangedSubviews
arrangedSubviewsWantingAutolayout
cachedSizes
{UIEdgeInsets=dddd}
baselineLayoutMargins
layoutMargins
delegate
respondsTo
self
batchDepth
flags
cachedFirstBaselineView
firstBaselineView
cachedLastBaselineView
lastBaselineView
invalidConsistency
 layoutMarginsRelative = {%f, %f, %f, %f};
 baselineRelative = YES;
AppSupportUI-40 (macos)
view
horizonral
alignment
leading
bottom
trailing
minimumSpacing
debugBoundingBoxes
delayedInvalidation
inLayoutPass
inMeasurementPass
mustRestartMeasurement
Top/Lead
FirstBL
Center
Bottom/Trail
LastBL
/Library/Caches/com.apple.xbs/Sources/AppSupportUI_Sim/AppSupportUI-40/AppSupportUI/NUIContainerGridView.mm
Use -[%@ initWithArrangedSubviewRows:] or -[%@ init]
Views managed by grid missing from arranged subviews: %@
Arranged subviews not being managed by grid: %@
Row count mismatch
Column count mismatch
column < _columns.count
row < _rows.count
colRangeOut != NULL || rowRangeOut != NULL
findView != nil
row <= _rows.count
arrangedViews.count > 0
numberOfColumns == 0 || numberOfColumns == copy.count
fromRow < _rows.count
toRow < _rows.count
column <= _columns.count
numberOfRows == 0 || numberOfRows == copy.count
v32@?0@"NSMutableArray"8Q16^B24
fromCol < _columns.count
toCol < _columns.count
%@ size = {%ld, %ld} cells = 
[%@:%@]
(%@|%@)
v16@?0r^{_NUIGridArrangementCell=@{?=ff}{?=ff}{CGSize=dd}{CGSize=dd}{_NSRange=QQ}{_NSRange=QQ}{?=dd}b8b8}8
-[%1$@ insertArrangedSubview:atIndex:] not supported, use -[%1$@ insert{Row|Column}AtIndex:withArrangedSubviews:] to insert arranged subviews.
-[%1$@ removeArrangedSubview:] not supported, use -[%1$@ remove{Row|Column}AtIndex:] to remove arranged subviews.
Invalid system spacing
%lu-%lu
%@ no longer attached to grid view <%p>.
%@ axis = %@: distribution = %@; alignments = 
Horz
Vert
[%@]
axis
distribution
spacing
/Library/Caches/com.apple.xbs/Sources/AppSupportUI_Sim/AppSupportUI-40/AppSupportUI/NUIBoxArrangement.mm
container != nil
dataSource != nil
Box arrangement does not have valid measurement for %@
v24@?0^{_NUIBoxArrangementCell=@{CGSize=dd}{CGSize=dd}{?=dd}b8b8}8Q16
_NUIBoxArrangement
System spacing not yet supported
Baseline relative arrangement not yet supported by NUIContainerFlowView.
Non default minimum spacing adjecent to arranged subview is not yet supported by NUIContainerFlowView.
%@ alignments = 
[%@|%@]
alignmnets
/Library/Caches/com.apple.xbs/Sources/AppSupportUI_Sim/AppSupportUI-40/AppSupportUI/NUIContentScrollView.m
Invalid horizontal alignment %ld.
Invalid vertical alignment %ld.
/Library/Caches/com.apple.xbs/Sources/AppSupportUI_Sim/AppSupportUI-40/AppSupportUI/NUIGridArrangement.mm
A container %@ has an invalid rect %@ for item %@. Break on _NUIArrangementInvalidRect to debug.
An item %@ returned an invalid size %@. Break on _NUIArrangementInvalidSize to debug.
_NUIViewContainerViewInfo
NUIContainerView
_NUISizeCache
NUISubclassHelpers
NUIPrivate
NUIClassCheck
NUITableViewContainerCell
NUICollectionViewContainerCell
_NUIGridArrangement
NUIArrangementItem
NSObject
NUIContainerViewHack
_UIMultilineTextContentSizing
NUIAccessibilitySupport
NUISubclassing
NUIDebug
NUIDebugPrivate
NUIContainerGridView
_NUIGridArrangementContainer
NUIArrangementContainer
NUIGridDimension
NUIContainerStackView
NUIBoxArrangement
_NUIBoxArrangementContainer
NUIContainerFlowView
_NUIFlowArrangementContainer
NUIContainerBoxView
NUIContentScrollView
NUISizeCache
NUIGridArrangement
init
.cxx_destruct
.cxx_construct
_sizeCache
_minSize
_maxSize
_alignmentInsets
_cachedAlignmentInsets
_baselines
_flags
isLayoutSizeDependentOnPerpendicularAxis
calculateLayoutSizeFittingSize:
alignmentRectInsets
effectiveBaselineOffsetFromBottom
_hasFontInfoForVerticalBaselineSpacing
_fontInfoForBaselineSpacing
effectiveFirstBaselineOffsetFromTop
capHeight
_currentScreenScale
_nui_baselineViewType
viewForLastBaselineLayout
viewForFirstBaselineLayout
_wantsConstraintBasedLayout
invalidateIntrinsicContentSize
setLayoutSize:withHorizontalContentPriority:verticalContentPriority:
setMinimumLayoutSize:
setMaximumLayoutSize:
setContentHuggingPriority:forAxis:
setContentCompressionResistancePriority:forAxis:
layer
transform
anchorPoint
setCenter:
bounds
setBounds:
setFrame:
effectiveLayoutSizeFittingSize:
setNeverCacheEffectiveLayoutSize:
neverCacheEffectiveLayoutSize
minimumLayoutSize
maximumLayoutSize
setLayoutSize:withContentPriority:
setCustomAlignmentRectInsets:
customAlignmentRectInsets
setCustomBaselineOffsetFromBottom:
customBaselineOffsetFromBottom
setCustomFirstBaselineOffsetFromTop:
customFirstBaselineOffsetFromTop
setInvalidatingIntrinsicContentSizeAlsoInvalidatesSuperview:
invalidatingIntrinsicContentSizeAlsoInvalidatesSuperview
setUntransformedFrame:
TB,N
T{CGSize=dd},N
T{UIEdgeInsets=dddd},N
Td,N
subviews
countByEnumeratingWithState:objects:count:
nukeContentLayoutSizeCacheFromOrbit
effectiveAlignmentRectInsets
superview
setCurrentEffectiveLayoutSizeFittingSizeShouldNotBeCached
_autolayoutSpacingAtEdge:forAttribute:nextToNeighbor:edge:attribute:multiplier:
raise:format:
_autolayoutSpacingAtEdge:forAttribute:inContainer:isGuide:
effectiveScreenScale
effectiveBaselineOffsetFromContentBottom
effectiveFirstBaselineOffsetFromContentTop
systemSpacingToAdjecentSiblingView:axis:baselineRelative:multiplier:
systemSpacingToSuperView:edge:baselineRelative:multiplier:
_didInvalidateIntrinsicContentSize
debugSizeCache
dictionary
valueWithCGSize:
setObject:forKey:
copy
stringWithFormat:
appendFormat:
stringByAppendingString:
canUseFastLayoutSizeCalulation
lineHeight
systemLayoutSizeFittingSize:
_layoutSizeThatFits:fixedAxes:
contentLayoutSizeCacheDescription
debugSizeCacheDict
numberOfLines
isScrollEnabled
effectiveSeparatorHeight
_baselineOffsetsAtSize:
ascender
descender
_wantsAutolayout
weakObjectsHashTable
instanceMethodForSelector:
methodForSelector:
containsObject:
addObject:
populateFlowArrangementCells:
contentLayoutSizeFittingSize:forArrangedSubview:
layoutFrameForArrangedSubview:withProposedContentFrame:
dictionaryWithObject:forKey:
value:withObjCType:
setObject:forKeyedSubscript:
numberWithDouble:
array
dictionaryWithObjects:forKeys:count:
initWithStyle:reuseIdentifier:
containerViewClass
contentView
initWithFrame:
setPreservesSuperviewLayoutMargins:
setLayoutMarginsRelativeArrangement:
setAutoresizingMask:
addSubview:
systemLayoutSizeFittingSize:withHorizontalFittingPriority:verticalFittingPriority:
sizeThatFits:
T#,R,N
containerView
_containerView
T@"NUIContainerView",R,N,V_containerView
_contentViewClass
isEqual:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
description
debugDescription
TQ,R
T#,R
T@"NSString",R,C
contentCompressionResistancePriorityForAxis:
contentHuggingPriorityForAxis:
populateGridArrangementCells:
populateGridArrangementDimension:withCells:axis:
canCancelMeasurementForCompression
valueWithRange:
numberWithUnsignedInteger:
numberWithFloat:
numberWithBool:
shouldCancelMeasurementForCompressionInAxis:
initWithObjectsAndKeys:
numberWithInteger:
objectForKeyedSubscript:
setNeedsLayout
_intrinsicContentSizeInvalidatedForChildView:
_isContainerView
_prepareForFirstIntrinsicContentSizeCalculation
_prepareForSecondIntrinsicContentSizeCalculationWithLayoutEngineBounds:
_inSecondConstraintsPass
_setInSecondConstraintsPass:
_resetToBeginningOfDoublePass
sharedApplication
preferredContentSizeCategory
arrayWithObjects:count:
_nui_isAccessibilityEnabled
processInfo
environment
boolValue
intValue
addArrangedSubview:
performBatchUpdates:
dealloc
setWithArray:
string
countForObject:
length
containerView:systemLayoutSizeFittingSize:forArrangedSubview:
containerView:layoutFrameForArrangedSubview:withProposedFrame:
containerView:willMeasureArrangedSubviewsFittingSize:forReason:
containerView:shouldRestartMeasurementDueToCompressionInAxis:forReason:
containerViewDidLayoutArrangedSubviews:
setNeedsInvalidation:
insertArrangedSubview:atIndex:
enumerateObjectsUsingBlock:
removeArrangedSubview:
isHidden
predicateWithBlock:
filteredArrayUsingPredicate:
count
stringWithUTF8String:
currentHandler
handleFailureInMethod:object:file:lineNumber:description:
willRemoveSubview:
indexOfObject:
removeObjectAtIndex:
didRemoveArrangedSubview:atIndex:
setHidden:
removeFromSuperview
_setHostsLayoutEngine:
insertObject:atIndex:
didInsertArrangedSubview:atIndex:
objectAtIndex:
replaceObjectAtIndex:withObject:
replaceArrangedSubviewAtIndex:withView:
effectiveUserInterfaceLayoutDirection
delegate
effectiveLayoutMargins
calculateArrangedSizeFittingSize:
layoutSubviews
effectiveLayoutBounds
layoutArrangedSubviewsInBounds:
removeFromSuperlayer
purpleColor
colorWithAlphaComponent:
CGColor
setBorderColor:
setBorderWidth:
insertSublayer:atIndex:
visibleArrangedSubviews
frame
redColor
orangeColor
insertSublayer:above:
brownColor
insertSublayer:below:
needsBaselineDebugBoundingBoxesForArrangedSubview:
layoutMarginsDidChange
isEqualToString:
visibilityDidChangeForArrangedSubview:
observeValueForKeyPath:ofObject:change:context:
intrinsicContentSizeDidInvalidateForArrangedSubview:
calculateViewForFirstBaselineLayout
calculateViewForLastBaselineLayout
substringToIndex:
stringByAppendingFormat:
arrangedDebugDescription
callStackSymbols
requiresConstraintBasedLayout
isDebugBoundingBoxesEnabled
initialize
layerClass
initWithCoder:
initWithArrangedSubviews:
setArrangedSubviewRemovalPolicy:
arrangedSubviewRemovalPolicy
setArrangedSubviewAdditionPolicy:
arrangedSubviewAdditionPolicy
setDelegate:
arrangedSubviews
setArrangedSubviews:
replaceArrangedSubview:atIndex:
indexOfArrangedSubview:
setBaselineRelativeArrangement:
isBaselineRelativeArrangement
isLayoutMarginsRelativeArrangement
setBaselineRelativeLayoutMarginsForArrangement:
hasBaselineRelativeLayoutMarginsForArrangement
alignmentForView:inAxis:
setAlignment:forView:inAxis:
positionAdjustmentOffsetForView:
setPositionAdjustmentOffset:forView:
minimumSpacingAdjacentToView:
setMinimumSpacing:adjacentToView:
_isRTL
_delegate
_arrangedSubviewInfo
_arrangedSubviews
_visibleArrangedSubviews
_effectiveLayoutMargins
_firstBaselineView
_lastBaselineView
_debugBoundingBoxLayers
_containerFlags
T@"NSArray",C,N
T@"NSArray",R,N
Tq,N
T@"<NUIContainerViewDelegate>",W,N
baselineRelativeArrangement
TB,N,GisBaselineRelativeArrangement
layoutMarginsRelativeArrangement
TB,N,GisLayoutMarginsRelativeArrangement
baselineRelativeLayoutMarginsForArrangement
TB,N,GhasBaselineRelativeLayoutMarginsForArrangement
_layoutHeightDependsOnWidth
_axesForDerivingIntrinsicContentSizeFromLayoutSize
firstObject
lastObject
mustRestartMeasurement
layoutMargins
isInBatchUpdate
ensureArrangedSubviewsAreValid
assertNotInLayoutPass:
debugDictionaryForVisibleArrangedSubview:
debugSetDelegateRespondsToSelectors
sortDescriptorWithKey:ascending:
sortedArrayUsingDescriptors:
dictionaryWithDictionary:
numberWithUnsignedInt:
debugSetEnabledFlags
setDebugBoundingBoxesEnabled:
debugDictionary
enableAPIMisuseAssertions
setEnableAPIMisuseAssertions:
debugBoundingBoxesEnabled
TB,N,GisDebugBoundingBoxesEnabled
appendString:
debugVersion
removeObserver:forKeyPath:
addObserver:forKeyPath:options:context:
initWithArrangedSubviewRows:
setColumnSpacing:
setRowSpacing:
setHorizontalAlignment:
setVerticalAlignment:
getColumnRange:rowRange:forArrangedSubview:
viewForFirstBaselineLayoutInRowAtIndex:
viewForLastBaselineLayoutInRowAtIndex:
addRowWithArrangedSubviews:
addObjectsFromArray:
isEqualToSet:
mutableCopy
minusSet:
removeRowAtIndex:
makeObjectsPerformSelector:
objectAtIndexedSubscript:
numberOfRows
insertRowAtIndex:withArrangedSubviews:
arrayWithCapacity:
arrayWithArray:
removeAllObjects
numberOfColumns
insertColumnAtIndex:withArrangedSubviews:
arrangedSubviewInColumnAtIndex:rowAtIndex:
spacingAfter
alignment
containerGridViewWithArrangedSubviewRows:
displayScale
arrangedSubviewRows
setArrangedSubviewRows:
rowIndexForArrangedSubview:
columnIndexForArrangedSubview:
rowAtIndex:
moveRowAtIndex:toIndex:
columnAtIndex:
addColumnWithArrangedSubviews:
moveColumnAtIndex:toIndex:
removeColumnAtIndex:
replaceArrangedSubview:inColumnAtIndex:rowAtIndex:
horizontalAlignment
verticalAlignment
horizontalDistribution
setHorizontalDistribution:
verticalDistribution
setVerticalDistribution:
rowSpacing
columnSpacing
setRowHeight:
setColumnWidth:
rowHeight
columnWidth
_viewRows
_arrangement
_visibleCount
_viewRanges
_spacing
_rows
_columns
_gridViewFlags
_rowHeight
_columnWidth
Tq,R,N
Td,N,V_rowHeight
Td,N,V_columnWidth
orderedSetWithArray:
orderedSetWithCapacity:
setLength:
setSpacingAfter:
setAlignment:
hidden
TB,N,GisHidden
_gridView
_length
T@"NSArray",C,D,N
setSpacing:
setAxis:
containerStackViewWithAxis:arrangedSubviews:
setCustomSpacing:afterView:
indexOfObject:inRange:
axis
distribution
spacing
horizontalContainerStackViewWithArrangedSubviews:
verticalContainerStackViewWithArrangedSubviews:
setDistribution:
customSpacingAfterView:
setSpacing:afterArrangedSubviewAtIndex:
_customSpacings
_stackViewFlags
Td,N,V_spacing
numberOfItemsInBoxArrangement:
boxArrangement:itemAtIndex:horizontalAlignment:verticalAlignment:
container
mainScreen
scale
populateBoxArrangementCells:
initWithContainer:dataSource:
dataSource
reloadData
layoutSizeFittingSize:
positionItemsInBounds:block:
_container
_dataSource
_scale
_bounds
T@"<NUIArrangementContainer>",R,W,N
T@"<NUIBoxArrangementDataSource>",R,W,N
reverseObjectEnumerator
containerFlowViewWithArrangedSubviews:
setNumberOfColumns:
_flowFlags
containerBoxViewWithArrangedSubviews:
_boxFlags
initWithDocumentView:
documentView
setDocumentView:
canScrollDocumentViewHorizontally
canScrollDocumentViewVertically
contentInset
_measureSizeForTargetSize:insets:
_finalSizeForTargetSize:resultSize:insets:
_intrinsicSizeWithinSize:
setContentSize:
setCanScrollDocumentViewHorizontally:
setCanScrollDocumentViewVertically:
initWithContentView:
setContentView:
_canScrollDocumentViewHorizontally
_canScrollDocumentViewVertically
_documentView
_horizontalAlignment
_verticalAlignment
T@"UIView",&,N
T@"UIView",&,N,V_documentView
Tq,N,V_horizontalAlignment
Tq,N,V_verticalAlignment
TB,N,V_canScrollDocumentViewHorizontally
TB,N,V_canScrollDocumentViewVertically
initForAsynchronousAccess:
getSize:forTargetSize:isSizeDependentOnPerpendicularAxis:
insertSize:forTargetSize:
invalidateCache
_threadSafe
gridArrangement:widthOfColumnAtIndex:spacingAfter:
gridArrangement:heightOfRowAtIndex:spacingAfter:
numberOfItemsInGridArrangement:
gridArrangement:itemAtIndex:columns:rows:horizontalAlignment:verticalAlignment:
positionItemsInColumns:rows:inBounds:block:
unionFrameForItemsInColumns:rows:inBounds:
frameForColumns:rows:inBounds:
T@"<NUIGridArrangementDataSource>",R,W,N
@16@0:8
v16@0:8
{nui_size_cache="__begin_"^v"__end_"^v"__end_cap_"{__compressed_pair<std::pair<CGSize, CGSize> *, std::allocator<std::pair<CGSize, CGSize>>>="__value_"^v}}
{CGSize="width"d"height"d}
{UIEdgeInsets="top"d"left"d"bottom"d"right"d}
{?="baseLineFromTop"d"baseLineFromBottom"d}
{?="neverCacheLayoutSize"b1"shouldCacheLayoutSize"b1"alsoInvalidateSuperview"b1"cachedAlignmentInsetsAreValid"b1"topBaselineIsCustom"b1"bottomBaselineIsCustom"b1}
{CGSize=dd}32@0:8{CGSize=dd}16
d16@0:8
B16@0:8
v20@0:8B16
v32@0:8{CGSize=dd}16
{CGSize=dd}16@0:8
v36@0:8{CGSize=dd}16f32
v40@0:8{CGSize=dd}16f32f36
v48@0:8{UIEdgeInsets=dddd}16
{UIEdgeInsets=dddd}16@0:8
v24@0:8d16
v48@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16
d44@0:8@16q24B32d36
d44@0:8@16Q24B32d36
q16@0:8
#16@0:8
@32@0:8q16@24
{CGSize=dd}40@0:8{CGSize=dd}16f32f36
@"NUIContainerView"
@48@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16
B24@0:8@16
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
f24@0:8q16
v24@0:8@16
@24@0:8@16
v24@0:8q16
v24@0:8@?16
v32@0:8@16Q24
v32@0:8Q16@24
Q24@0:8@16
q32@0:8@16q24
v40@0:8q16@24q32
{CGPoint=dd}24@0:8@16
v40@0:8{CGPoint=dd}16@32
{NSDirectionalEdgeInsets=dddd}24@0:8@16
v56@0:8{NSDirectionalEdgeInsets=dddd}16@48
{CGSize=dd}40@0:8{CGSize=dd}16Q32
v48@0:8@16@24@32^v40
B24@0:8q16
@"<NUIContainerViewDelegate>"
{map<UIView *, _NUIContainerViewArrangedSubview, std::less<UIView *>, std::allocator<std::pair<UIView *const, _NUIContainerViewArrangedSubview>>>="__tree_"{__tree<std::__value_type<UIView *, _NUIContainerViewArrangedSubview>, std::__map_value_compare<UIView *, std::__value_type<UIView *, _NUIContainerViewArrangedSubview>, std::less<UIView *>, true>, std::allocator<std::__value_type<UIView *, _NUIContainerViewArrangedSubview>>>="__begin_node_"^v"__pair1_"{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<UIView *, _NUIContainerViewArrangedSubview>, void *>>>="__value_"{__tree_end_node<std::__tree_node_base<void *> *>="__left_"^v}}"__pair3_"{__compressed_pair<unsigned long, std::__map_value_compare<UIView *, std::__value_type<UIView *, _NUIContainerViewArrangedSubview>, std::less<UIView *>, true>>="__value_"Q}}}
@"NSMutableArray"
@"NSArray"
@"UIView"
{vector<CALayer *, std::allocator<CALayer *>>="__begin_"^@"__end_"^@"__end_cap_"{__compressed_pair<CALayer **, std::allocator<CALayer *>>="__value_"^@}}
{?="hiddenArrangedSubviewCount"b16"delaydInvalidation"b8"batchDepth"b4"inLayoutPass"b2"inMeasurementPass"b2"layoutDependency"b2"removalPolicy"b2"removalPolicyHasBeenSet"b1"additionPolicy"b1"inEnsureArranged"b1"inEffectiveSize"b1"hasMargins"b1"debugBoundingBoxes"b1"baselineRelative"b1"layoutMarginsRelative"b1"baselineLayoutMargins"b1"mustRestart"b1"delegateSystemLayoutSizeFittingSizeForArrangedSubview"b1"delegateLayoutFrameForArrangedSubview"b1"delegateWillMeasureFitting"b1"delegateShouldRestart"b1"delegateDidLayout"b1}
{?=dd}32@0:8{CGSize=dd}16
{CGRect={CGPoint=dd}{CGSize=dd}}16@0:8
{CGSize=dd}40@0:8{CGSize=dd}16@32
{CGRect={CGPoint=dd}{CGSize=dd}}56@0:8@16{CGRect={CGPoint=dd}{CGSize=dd}}24
v32@0:8@16q24
{CGSize=dd}40@0:8{CGSize=dd}16@"<NUIArrangementItem>"32
{CGRect={CGPoint=dd}{CGSize=dd}}56@0:8@"<NUIArrangementItem>"16{CGRect={CGPoint=dd}{CGSize=dd}}24
v24@0:8^v16
v40@0:8^v16r^v24q32
@32@0:8q16q24
v40@0:8^{_NSRange=QQ}16^{_NSRange=QQ}24@32
q24@0:8@16
@24@0:8q16
v32@0:8q16q24
v40@0:8@16q24q32
{_NUIGridArrangement="container"@"<_NUIGridArrangementContainer>""horzDist"b8"vertDist"b8"baselineRelative"B"hasValidMeasurement"B"cells"{vector<_NUIGridArrangementCell, std::allocator<_NUIGridArrangementCell>>="__begin_"^{_NUIGridArrangementCell}"__end_"^{_NUIGridArrangementCell}"__end_cap_"{__compressed_pair<_NUIGridArrangementCell *, std::allocator<_NUIGridArrangementCell>>="__value_"^{_NUIGridArrangementCell}}}"columns"{vector<_NUIGridArrangementDimension, std::allocator<_NUIGridArrangementDimension>>="__begin_"^{_NUIGridArrangementDimension}"__end_"^{_NUIGridArrangementDimension}"__end_cap_"{__compressed_pair<_NUIGridArrangementDimension *, std::allocator<_NUIGridArrangementDimension>>="__value_"^{_NUIGridArrangementDimension}}}"rows"{vector<_NUIGridArrangementDimension, std::allocator<_NUIGridArrangementDimension>>="__begin_"^{_NUIGridArrangementDimension}"__end_"^{_NUIGridArrangementDimension}"__end_cap_"{__compressed_pair<_NUIGridArrangementDimension *, std::allocator<_NUIGridArrangementDimension>>="__value_"^{_NUIGridArrangementDimension}}}"viewFrames"{vector<CGRect, std::allocator<CGRect>>="__begin_"^{CGRect}"__end_"^{CGRect}"__end_cap_"{__compressed_pair<CGRect *, std::allocator<CGRect>>="__value_"^{CGRect}}}}
{?="width"S"height"S}
{map<UIView *, const std::pair<_NSRange, _NSRange>, std::less<UIView *>, std::allocator<std::pair<UIView *const, const std::pair<_NSRange, _NSRange>>>>="__tree_"{__tree<std::__value_type<UIView *, const std::pair<_NSRange, _NSRange>>, std::__map_value_compare<UIView *, std::__value_type<UIView *, const std::pair<_NSRange, _NSRange>>, std::less<UIView *>, true>, std::allocator<std::__value_type<UIView *, const std::pair<_NSRange, _NSRange>>>>="__begin_node_"^v"__pair1_"{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<UIView *, const std::pair<_NSRange, _NSRange>>, void *>>>="__value_"{__tree_end_node<std::__tree_node_base<void *> *>="__left_"^v}}"__pair3_"{__compressed_pair<unsigned long, std::__map_value_compare<UIView *, std::__value_type<UIView *, const std::pair<_NSRange, _NSRange>>, std::less<UIView *>, true>>="__value_"Q}}}
{?="horzAlign"b8"vertAlign"b8"inInsertOrRemove"b1"hasMutations"b1}
@"NSArray"16@0:8
v24@0:8@"NSArray"16
@"NUIContainerGridView"
{?="align"b8"isRow"b1"hidden"b1"wasDetached"b1}
d24@0:8@16
v32@0:8d16@24
v32@0:8d16q24
{map<UIView *, double, std::less<UIView *>, std::allocator<std::pair<UIView *const, double>>>="__tree_"{__tree<std::__value_type<UIView *, double>, std::__map_value_compare<UIView *, std::__value_type<UIView *, double>, std::less<UIView *>, true>, std::allocator<std::__value_type<UIView *, double>>>="__begin_node_"^v"__pair1_"{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<UIView *, double>, void *>>>="__value_"{__tree_end_node<std::__tree_node_base<void *> *>="__left_"^v}}"__pair3_"{__compressed_pair<unsigned long, std::__map_value_compare<UIView *, std::__value_type<UIView *, double>, std::less<UIView *>, true>>="__value_"Q}}}
{?="alignment"b8"distribution"b8"axis"b4}
@32@0:8@16@24
v56@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16@?48
{_NUIBoxArrangement="container"@"<_NUIBoxArrangementContainer>""horzDist"q"vertDist"q"hasValidMeasurement"B"cells"{vector<_NUIBoxArrangementCell, std::allocator<_NUIBoxArrangementCell>>="__begin_"^{_NUIBoxArrangementCell}"__end_"^{_NUIBoxArrangementCell}"__end_cap_"{__compressed_pair<_NUIBoxArrangementCell *, std::allocator<_NUIBoxArrangementCell>>="__value_"^{_NUIBoxArrangementCell}}}"measureSize"{CGSize="width"d"height"d}"viewFrames"{vector<CGRect, std::allocator<CGRect>>="__begin_"^{CGRect}"__end_"^{CGRect}"__end_cap_"{__compressed_pair<CGRect *, std::allocator<CGRect>>="__value_"^{CGRect}}}"maxBaseLinePair"{?="baseLineFromTop"d"baseLineFromBottom"d}}
@"<NUIArrangementContainer>"
@"<NUIBoxArrangementDataSource>"
{?="containerDirection"b1}
{CGRect="origin"{CGPoint="x"d"y"d}"size"{CGSize="width"d"height"d}}
{_NUIFlowArrangement="container"@"<_NUIFlowArrangementContainer>""columns"Q"rowSpacing"d"columnSpacing"d"hasValidMeasurement"B"cells"{vector<_NUIFlowArrangementCell, std::allocator<_NUIFlowArrangementCell>>="__begin_"^{_NUIFlowArrangementCell}"__end_"^{_NUIFlowArrangementCell}"__end_cap_"{__compressed_pair<_NUIFlowArrangementCell *, std::allocator<_NUIFlowArrangementCell>>="__value_"^{_NUIFlowArrangementCell}}}"measureSize"{CGSize="width"d"height"d}"maxSize"{CGSize="width"d"height"d}"viewFrames"{vector<CGRect, std::allocator<CGRect>>="__begin_"^{CGRect}"__end_"^{CGRect}"__end_cap_"{__compressed_pair<CGRect *, std::allocator<CGRect>>="__value_"^{CGRect}}}"maxBaseLinePair"{?="baseLineFromTop"d"baseLineFromBottom"d}}
{?="horzAlign"b8"vertAlign"b8}
{CGSize=dd}64@0:8{CGSize=dd}16{UIEdgeInsets=dddd}32
{CGSize=dd}80@0:8{CGSize=dd}16{CGSize=dd}32{UIEdgeInsets=dddd}48
@20@0:8B16
B44@0:8^{CGSize=dd}16{CGSize=dd}24B40
v48@0:8{CGSize=dd}16{CGSize=dd}32
v88@0:8{_NSRange=QQ}16{_NSRange=QQ}32{CGRect={CGPoint=dd}{CGSize=dd}}48@?80
{CGRect={CGPoint=dd}{CGSize=dd}}80@0:8{_NSRange=QQ}16{_NSRange=QQ}32{CGRect={CGPoint=dd}{CGSize=dd}}48
@"<NUIGridArrangementDataSource>"
{?="delegateWidth"b1"delegateHeight"b1"containerDirection"b1}
