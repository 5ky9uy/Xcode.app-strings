The %@ initializer is not available.
server-info
Server Info
v36@?0I8Q12r*20^B28
success
TB,N,V_success
sharingProtocolVersion
TI,N,V_sharingProtocolVersion
DAAPProtocolVersion
TI,N,V_DAAPProtocolVersion
DPAPProtocolVersion
TI,N,V_DPAPProtocolVersion
supportedExtensions
TQ,N,V_supportedExtensions
login
Login
2,1,0
preferredVideoQuality
device-machine-guid
hsgid
sessionIdentifier
TI,N,V_sessionIdentifier
context
T^v,N,V_context
DAAP Update
DPAP Update
update
revision-number
revision
TI,N,V_revision
The %@ parameter must not be nil.
requestSession
v8@?0
databaseID
TI,N,V_databaseID
databasePersistentID
TQ,N,V_databasePersistentID
basePlaylistID
TI,N,V_basePlaylistID
basePlaylistPersistentID
TQ,N,V_basePlaylistPersistentID
importingDatabase
TB,N,GisImportingDatabase,V_importingDatabase
error
T@"NSError",C,N,V_error
currentSubOperation
T@"NSOperation",&,N,V_currentSubOperation
loginSession
T@"TVHDMediaServerLoginSession",C,N,V_loginSession
T@"TVHDMediaServerRequestSession",&,N,V_requestSession
__StateUnresolved
__StateResolving
__StateConnecting
__StateConnected
__StateDisconnected
__EventConnectRequest
__EventDisconnectRequest
__EventResolveSucceeded
__EventResolveFailed
__EventConnectSucceeded
__EventConnectFailed
__EventMediaServerDisconnected
__EventUserInfoKeyDisplayName
__EventUserInfoKeyError
__EventUserInfoKeyHostConfiguration
__EventUserInfoKeyLoginSession
v24@?0@"TVHSMediaServerResponse"8@"NSError"16
@"TVHSAsynchronousWorkToken"8@?0
%@&%@=%ld.%ld
client-dpap-version
%@=%@
displayName
baseURL
<%@>
v16@?0@"NSDictionary"8
@"NSString"40@?0@"TVSStateMachine"8@"NSString"16@24@"NSDictionary"32
TVHDMediaServer State Machine %@
state
%@/%u/items/%@.%@?session-id=%u&appletv=1
databases
%@-%@
%@&%@=%@,0
daapSecInfo
block
identifier
T@"TVHSMediaServerIdentifier",&,N,V_identifier
type
TQ,N,V_type
homeSharingGroupIdentifier
T@"NSString",C,N,V_homeSharingGroupIdentifier
keybagPath
T@"NSString",C,N,V_keybagPath
supportsDRMContent
TB,N,V_supportsDRMContent
stateMachine
T@"TVSStateMachine",&,N,V_stateMachine
DAAPPlaybackURLCache
T@"NSCache",&,N,V_DAAPPlaybackURLCache
DPAPPlaybackURLCache
T@"NSCache",&,N,V_DPAPPlaybackURLCache
resolveOperation
T@"TVHDMediaServerResolveOperation",&,N,V_resolveOperation
connectOperation
T@"TVHDMediaServerConnectOperation",&,N,V_connectOperation
DAAPRevisionOperation
T@"TVHDMediaServerDAAPRevisionOperation",&,N,V_DAAPRevisionOperation
DPAPRevisionOperation
T@"TVHDMediaServerDPAPRevisionOperation",&,N,V_DPAPRevisionOperation
logoutOperation
T@"TVHSURLRequestOperation",&,N,V_logoutOperation
privateOperationQueue
T@"NSOperationQueue",&,N,V_privateOperationQueue
rentalOperationQueue
T@"NSOperationQueue",&,N,V_rentalOperationQueue
T@"TVHDMediaServerState",R,C,N
T@"NSString",C,N,V_displayName
bonjourServiceConfiguration
T@"TVHDBonjourServiceConfiguration",C,N,V_bonjourServiceConfiguration
completionQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_completionQueue
sessionID
DAAPDatabaseID
DAAPDatabasePersistentID
DAAPBasePlaylistID
DAAPBasePlaylistPersistentID
DAAPRevision
DAAPDatabaseName
DPAPDatabaseID
DPAPDatabasePersistentID
DPAPBasePlaylistID
DPAPBasePlaylistPersistentID
isImportingDPAPDatabase
DPAPRevision
DRMRevision
fairPlaySAPContext
protocolVersion
T@"TVHSMediaServerProtocolVersion",C,N,V_protocolVersion
TI,N,V_sessionID
T@"NSString",C,N,V_DAAPDatabaseName
TI,N,V_DAAPDatabaseID
TQ,N,V_DAAPDatabasePersistentID
TI,N,V_DAAPRevision
TI,N,V_DAAPBasePlaylistID
TQ,N,V_DAAPBasePlaylistPersistentID
TI,N,V_DPAPDatabaseID
TQ,N,V_DPAPDatabasePersistentID
TI,N,V_DPAPBasePlaylistID
TQ,N,V_DPAPBasePlaylistPersistentID
importingDPAPDatabase
TB,N,GisImportingDPAPDatabase,V_importingDPAPDatabase
TI,N,V_DPAPRevision
TI,N,V_DRMRevision
T@"TVHDFairPlaySAPContext",&,N,V_fairPlaySAPContext
connectionState
sessionState
TQ,N,V_connectionState
T@"TVHSMediaServerSessionState",C,N,V_sessionState
?%@=%@
&%@=%@
v32@?0@"NSString"8@"NSString"16^B24
(%@) %@ : %@
session-id
Client-iTunes-Sharing-Version
Client-DAAP-Validation
appletv
User-Agent
true
AppleTV
ATVSharing-Version
gzip
Accept-Encoding
%d.%d
Client-DAAP-Version
%ld.%ld
Client-DPAP-Version
action
T@"NSString",C,N,V_action
protocol
TQ,N,V_protocol
headers
T@"NSMutableDictionary",&,N,V_headers
arguments
T@"NSMutableDictionary",&,N,V_arguments
T@"NSUUID",R,C,N,V_identifier
actionDescription
T@"NSString",C,N,V_actionDescription
requestType
TQ,R,N,V_requestType
clientSharingProtocolVersion
TI,N,V_clientSharingProtocolVersion
method
T@"NSString",C,N,V_method
body
T@"NSData",C,N,V_body
timeoutInterval
Td,N,V_timeoutInterval
logSafeDescription
T@"NSString",R,C,N
operationCount
fairPlayContextID
TI,N,V_fairPlayContextID
useTokenEncryption
TB,N,V_useTokenEncryption
mediaServerName
T@"NSString",C,N,V_mediaServerName
serviceName
serviceType
serviceDomain
T@"NSString",C,N,V_serviceName
T@"NSString",C,N,V_serviceType
T@"NSString",C,N,V_serviceDomain
machine-id-verify
Machine ID Verify
0x%llx
machine-id
verifiedSuccessfully
TB,N,V_verifiedSuccessfully
local.
_home-sharing._tcp.
_daap._tcp.
iTSh Version
Database ID
Machine Name
rentalItem
T@"TVHSRentalItem",R,N,V_rentalItem
T@"TVHDMediaServerLoginSession",R,N,V_loginSession
T@"TVHDMediaServerRequestSession",R,N,V_requestSession
userIdentifier
keyList
T@"NSNumber",C,N,V_userIdentifier
T@"NSData",C,N,V_keyList
%@/%lu/%@
containers
DAAP containers request
%@,%@
dmap.itemid
dmap.persistentid
meta
com.apple.tvhomesharingd.client
TVHDServiceListener -start should only be called once!
hash
TQ,R
superclass
T#,R
description
T@"NSString",R,C
debugDescription
listener
T@"NSXPCListener",&,N,V_listener
listening
TB,N,V_listening
connections
T@"NSMutableSet",&,N,V_connections
home-share-verify
Home Share Verify
hspid
appleId
password
guid
status
sgid
getShareIdentifiers
POST
v24@?0@"SSURLConnectionResponse"8@"NSError"16
accountName
T@"NSString",C,N,V_accountName
T@"NSString",C,N,V_password
mediaServerDiscoveryConfiguration
v16@?0@"TVHDServiceConnection"8
v24@?0@"TVHSMediaServerDiscoveryConfiguration"8@"NSError"16
TVHDServiceConnection outstanding request
v20@?0B8@"NSError"12
remoteConnection
T@"NSXPCConnection",&,N,V_remoteConnection
T@"TVHSMediaServerDiscoveryConfiguration",&,N,V_mediaServerDiscoveryConfiguration
requestWorkTokenByRequestIdentifier
T@"NSMutableDictionary",&,N,V_requestWorkTokenByRequestIdentifier
transaction
T@"NSObject<OS_os_transaction>",&,N,V_transaction
delegate
T@"<TVHDServiceConnectionDelegate>",W,N,V_delegate
clientBundleIdentifier
authorized-dsids-update
DRM Revision
port
hostName
T@"NSString",R,C,N,V_hostName
TQ,R,N,V_port
The rental userID cannot be 0
The rentalKeyID cannot be 0
T@"TVHSRentalItem",C,N,V_rentalItem
checkinRequest
T@"SSRentalCheckinRequest",&,N,V_checkinRequest
mediaServerIdentifier
T@"TVHSMediaServerIdentifier",&,N,V_mediaServerIdentifier
/var/mobile/Media/iTunes_Control/iTunes/HomeSharing
TVHDService -start should only be called once!
v32@?0Q8@"NSString"16@"NSString"24
v24@?0@"NSString"8@"NSError"16
Unsupported KVO change kind! (%lu)
v16@?0@"<TVHSServiceClientProtocol>"8
mediaServers
T@"TVHDServiceListener",&,N,V_listener
mediaServerManager
T@"TVHDMediaServerManager",&,N,V_mediaServerManager
Keybags
Sentinel
RentalJournal
rentalKeyID
userID
name
rootPath
T@"NSString",C,N,V_rootPath
keybagsPath
T@"NSString",C,N,V_keybagsPath
keybagCleanUpTimer
T@"NSTimer",&,N,V_keybagCleanUpTimer
checkedOutRentals
T@"NSMutableDictionary",&,N,V_checkedOutRentals
rentalJournalPath
T@"NSString",&,N,V_rentalJournalPath
haveRentalJournalCheckinsBeenAttempted
TB,N,V_haveRentalJournalCheckinsBeenAttempted
checkin-rental-asset
Rental Checkin
'%@:%qu'
database-spec
item-spec
mediaServerCheckoutOperation
T@"NSOperation",&,N,V_mediaServerCheckoutOperation
checkinWorkToken
T@"TVHSAsynchronousWorkToken",&,N,V_checkinWorkToken
available
TB,N,GisAvailable,V_available
logout
DPAP Databases
get-authorized-accounts-info
DRM Accounts
authorizedAccounts
T@"NSArray",C,N,V_authorizedAccounts
com.apple.tvhomesharingd
CacheIPAddresses
LogVerbosely
ServerIPAddress
mediaServerDiscoveryMode
groupID
cacheIPAddresses
logVerbosely
serverIPAddress
TB,N,V_cacheIPAddresses
TB,N,V_logVerbosely
T@"NSString",C,N,V_serverIPAddress
T@"TVHSMediaServerDiscoveryConfiguration",C,N,V_mediaServerDiscoveryConfiguration
DPAP containers request
('%@:%@')
com.apple.itunes.photos.album-kind
query
currentMediaServerOperation
T@"NSOperation",&,N,V_currentMediaServerOperation
checkoutWorkToken
T@"TVHSAsynchronousWorkToken",&,N,V_checkoutWorkToken
T@"TVHDMediaServerLoginSession",&,N,V_loginSession
setupRequestToken
T@"TVHSAsynchronousWorkToken",&,N,V_setupRequestToken
v32@?0@"TVHSMediaServerIdentifier"8@"TVHSAsynchronousWorkToken"16^B24
The discovery mode parameter must not be TVHSMediaServerDiscoveryModeNone
Unable to enable home share bonjour discovery as no HSGID was passed
%llX
%@,_%@
discoveryMode
TQ,N,V_discoveryMode
wirelessInterfaceActive
TB,N,GisWirelessInterfaceActive,V_wirelessInterfaceActive
wiredInterfaceActive
TB,N,GisWiredInterfaceActive,V_wiredInterfaceActive
activeNetworkInterfaceInitialized
TB,N,GisActiveNetworkInterfaceInitialized,V_activeNetworkInterfaceInitialized
serviceBrowser
T@"NSNetServiceBrowser",&,N,V_serviceBrowser
monitoredServices
T@"NSMutableSet",&,N,V_monitoredServices
mutableMediaServers
T@"NSMutableSet",&,N,V_mutableMediaServers
verifyMediaServerResultByIdentifier
T@"NSMutableDictionary",&,N,V_verifyMediaServerResultByIdentifier
Ti,R,N
T@"NSSet",R,C,N
DAAP Databases
databaseName
T@"NSString",C,N,V_databaseName
get-authorized-account-token
Authorized Account Token
dsid
tokenStatus
T@"NSNumber",C,N,V_tokenStatus
tokenData
T@"NSData",C,N,V_tokenData
[%@]
http://%@:%u
URLSession
T@"NSURLSession",&,N,V_URLSession
requestQueue
T@"NSOperationQueue",&,N,V_requestQueue
T@"NSOperationQueue",&,N,V_completionQueue
serverURL
T@"NSURL",C,N,V_serverURL
serverIPURL
T@"NSURL",C,N,V_serverIPURL
baseIPAddress
T@"NSString",C,N,V_baseIPAddress
cacheIPAddress
TB,N,V_cacheIPAddress
T@"NSURL",R,C,N
hostConfiguration
T@"TVHDMediaServerHostConfiguration",C,N,V_hostConfiguration
service
T@"NSNetService",&,N,V_service
request
T@"TVHDMediaServerRequest",&,N,V_request
requestToken
T@"TVHSAsynchronousWorkToken",&,N,V_requestToken
response
T@"TVHSMediaServerResponse",&,N,V_response
checkout-rental-asset
Rental Checkout
account
keybagState
T@"TVHDAuthorizedAccount",&,N,V_account
TQ,N,V_keybagState
checkoutRequest
T@"SSRentalCheckoutRequest",&,N,V_checkoutRequest
keybag
accountIdentifier
keybagData
T@"NSData",&,N,V_keybagData
T@"NSNumber",C,N,V_accountIdentifier
authorizationRequest
T@"SSAuthorizationRequest",&,N,V_authorizationRequest
raise:format:
initWithAction:requestType:protocol:
setActionDescription:
initWithRequest:requestSession:
HTTPStatusCode
sharedInstance
defaultLogObject
data
bytes
length
taggedBufferForCode:buffer:bufferLength:outTaggedBufferLength:
setSuccess:
unsignedInt32FromBuffer:length:
setDAAPProtocolVersion:
setDPAPProtocolVersion:
setSharingProtocolVersion:
unsignedInt64FromBuffer:length:
setSupportedExtensions:
parseTaggedBuffer:bufferLength:tagParsingBlock:
initWithRequestSession:
_handleResponse:
success
sharingProtocolVersion
DAAPProtocolVersion
DPAPProtocolVersion
supportedExtensions
_success
_sharingProtocolVersion
_DAAPProtocolVersion
_DPAPProtocolVersion
_supportedExtensions
setClientSharingProtocolVersion:
setValue:forArgument:
uniqueID
setSessionIdentifier:
initWithBytes:length:encoding:
isEqualToString:
initWithHomeSharingGroupIdentifier:clientSharingProtocolVersion:requestSession:
sessionIdentifier
_sessionIdentifier
init
dealloc
_fixedUpURLPathString:
dataUsingEncoding:
tvs_MD5Digest
_encryptData:
tvs_lowercaseHexString
characterAtIndex:
mutableCopy
insertString:atIndex:
initWithFairPlaySAPContext:
signURLPathString:
decryptData:
context
setContext:
_context
DAAPRevision
DPAPRevision
sessionID
setSessionID:
fairPlaySAPContext
setFairPlaySAPContext:
protocolVersion
clientSharingProtocolVersion
setTimeoutInterval:
stringWithFormat:
request
actionDescription
numberFromBuffer:length:
unsignedIntValue
setRevision:
initWithProtocol:loginSession:requestSession:
revision
_revision
copy
_startDatabasesOperation
cancel
currentSubOperation
finishExecutionIfPossible
loginSession
requestSession
initWithLoginSession:requestSession:
isCancelled
databaseID
databasePersistentID
setDPAPDatabaseID:
setDPAPDatabasePersistentID:
_startBasePlaylistOperation
isImportingDatabase
setImportingDatabase:
error
setError:
setCompletionBlock:
_startSubOperation:
basePlaylistID
basePlaylistPersistentID
DPAPDatabaseID
setDatabaseID:
DPAPDatabasePersistentID
setDatabasePersistentID:
setBasePlaylistID:
setBasePlaylistPersistentID:
setCurrentSubOperation:
start
executionDidBegin
.cxx_destruct
setLoginSession:
setRequestSession:
_importingDatabase
_databaseID
_basePlaylistID
_databasePersistentID
_basePlaylistPersistentID
_error
_currentSubOperation
_loginSession
_requestSession
keybagPathForMediaServerIdentifier:
setCountLimit:
initWithMaxConcurrentConnections:
setMaxConcurrentOperationCount:
_setupStateMachine
_tearDownConnection
_connectionState
setConnectionState:
_init
setProtocolVersion:
setDAAPRevision:
DAAPDatabaseID
setDAAPDatabaseID:
DAAPDatabasePersistentID
setDAAPDatabasePersistentID:
DAAPBasePlaylistID
setDAAPBasePlaylistID:
DAAPBasePlaylistPersistentID
setDAAPBasePlaylistPersistentID:
setDPAPRevision:
DPAPBasePlaylistID
setDPAPBasePlaylistID:
DPAPBasePlaylistPersistentID
setDPAPBasePlaylistPersistentID:
isImportingDPAPDatabase
setImportingDPAPDatabase:
setSessionState:
stateMachine
postEvent:
initWithRequest:
_handleRequestError:
_dispatchBlockOnCompletionQueue:
enqueueRequest:withCompletionQueue:completionHandler:
_completionOperationWithBlock:
privateOperationQueue
addOperation:
initWithOperation:
_baseURL
initWithBaseURL:
isAvailable
addDependency:
keybagPath
initWithKeybagPath:loginSession:requestSession:
supportsCapability:
setUseTokenEncryption:
displayName
setMediaServerName:
_performDRMWorkWithBlock:completionHandler:
_performRentalWorkWithItem:checkin:completionHandler:
DAAPPlaybackURLCache
DPAPPlaybackURLCache
_playbackURLCacheKeyWithItemID:itemFormat:
objectForKey:
_DMAPPlaybackURLStringWithItemID:databaseID:itemFormat:
_signedURLWithURLPathString:
setObject:forKey:
countByEnumeratingWithState:objects:count:
unsignedURLPathStringWithAddAppleTVToQueryString:
identifier
description
addObject:
componentsJoinedByString:
_stateMachineName
initWithName:initialState:mode:stateChangeHandler:
setStateMachine:
_registerStateMachineHandlers
setShouldAcceptEvents:
setLogObject:
tvs_stringForKey:
setDisplayName:
hostName
port
setHostName:andPort:
executeBlockAfterCurrentStateTransition:
_startResolving
registerHandlerForEvent:onState:withBlock:
_startConnecting
_stopResolving
registerDefaultHandlerForEvent:withBlock:
currentState
_connectionEstablishedWithLoginSession:
resolveOperation
bonjourServiceConfiguration
serviceName
initWithBonjourServiceConfiguration:
hostConfiguration
dictionaryWithObjects:forKeys:count:
setResolveOperation:
postEvent:withContext:userInfo:
initWithMediaServerIdentifier:requestSession:
homeSharingGroupIdentifier
setHomeSharingGroupIdentifier:
connectOperation
setConnectOperation:
_updateStateAndNotifyWithLoginSession:
_startMonitoringDAAPRevisionChange
_startMonitoringDPAPRevisionChange
_startMonitoringDRMRevisionChange
_startKeybagSynchronization
updateKeybagKeepAliveForMediaServerIdentifier:
_logoutIfNeeded
cancelAllOperations
cancelAllRequests
_stopConnecting
_clearPlaybackURLCaches
_updateStateAndNotifyWithBlock:
willChangeValueForKey:
didChangeValueForKey:
_canMakeSessionRequests
initWithBaseURL:loginSession:
setLogoutOperation:
_updateDAAPSessionWithRevision:
blockOperationWithBlock:
mainQueue
_fetchDPAPStateWithNewRevision:
_updateDPAPSessionWithRevision:databaseID:databasePersistentID:basePlaylistID:basePlaylistPersistentID:isImportingDatabase:
DRMRevision
setDRMRevision:
synchronizeKeybagWithCompletionHandler:
supportsDRMContent
initWithRentalItem:loginSession:requestSession:
rentalOperationQueue
baseURL
removeAllObjects
clearCachedIPAddress
stringValue
URLWithString:relativeToURL:
completionQueue
initWithIdentifier:type:displayName:homeSharingGroupIdentifier:
state
startConnecting
disconnect
enqueueRequest:withCompletionHandler:
verifyIsAvailableWithCompletionHandler:
checkoutRentalItem:withCompletionHandler:
checkinRentalItem:withCompletionHandler:
playbackURLWithItemID:itemFormat:protocol:
URLsForRequests:
playbackDidTimeout
setIdentifier:
type
setType:
setKeybagPath:
setBonjourServiceConfiguration:
setCompletionQueue:
setSupportsDRMContent:
setDAAPPlaybackURLCache:
setDPAPPlaybackURLCache:
DAAPRevisionOperation
setDAAPRevisionOperation:
DPAPRevisionOperation
setDPAPRevisionOperation:
logoutOperation
setPrivateOperationQueue:
setRentalOperationQueue:
_supportsDRMContent
_identifier
_type
_homeSharingGroupIdentifier
_keybagPath
_displayName
_bonjourServiceConfiguration
_completionQueue
_stateMachine
_DAAPPlaybackURLCache
_DPAPPlaybackURLCache
_resolveOperation
_connectOperation
_DAAPRevisionOperation
_DPAPRevisionOperation
_logoutOperation
_privateOperationQueue
_rentalOperationQueue
numberWithUnsignedLongLong:
hash
DAAPDatabaseName
numberWithUnsignedInt:
copyWithZone:
isEqual:
setDAAPDatabaseName:
_importingDPAPDatabase
_sessionID
_DAAPDatabaseID
_DAAPRevision
_DAAPBasePlaylistID
_DPAPDatabaseID
_DPAPBasePlaylistID
_DPAPRevision
_DRMRevision
_protocolVersion
_DAAPDatabaseName
_DAAPDatabasePersistentID
_DAAPBasePlaylistPersistentID
_DPAPDatabasePersistentID
_DPAPBasePlaylistPersistentID
_fairPlaySAPContext
connectionState
sessionState
_sessionState
UUID
dictionary
_setDefaultHeaders
action
requestType
protocol
method
body
timeoutInterval
arguments
dictionaryWithDictionary:
stringWithString:
appendFormat:
enumerateKeysAndObjectsUsingBlock:
URLWithString:
absoluteString
setValue:forHeaderField:
headers
removeObjectForKey:
initWithURL:cachePolicy:timeoutInterval:
setHTTPBody:
setHTTPMethod:
setValue:forHTTPHeaderField:
logSafeDescription
currentProcess
bundleIdentifier
processInfo
processName
userAgentForProcessInfo:
headerValueForField:
argumentValueForName:
URLRequestWithBaseURL:
setAction:
setProtocol:
setMethod:
setBody:
setHeaders:
setArguments:
_clientSharingProtocolVersion
_action
_actionDescription
_requestType
_protocol
_method
_body
_timeoutInterval
_headers
_arguments
mainBundle
arrayWithObjects:count:
initializeLoggingWithDomain:persistentComponents:
currentRunLoop
_stopObservingOperationQueue:
mediaServerName
_startAuthorizedAccountsOperation
unsignedIntegerValue
_completeWithError:
observeValueForKeyPath:ofObject:change:context:
addObserver:forKeyPath:options:context:
removeObserver:forKeyPath:context:
_startObservingOperationQueue:
fairPlayContextID
useTokenEncryption
setFairPlayContextID:
_useTokenEncryption
_fairPlayContextID
_mediaServerName
serviceType
serviceDomain
setServiceName:
setServiceType:
setServiceDomain:
_serviceName
_serviceType
_serviceDomain
setVerifiedSuccessfully:
initWithMachineIdentifier:loginSession:requestSession:
verifiedSuccessfully
_verifiedSuccessfully
tvs_dataForKey:
initWithData:encoding:
rentalItem
_rentalItem
userIdentifier
initWithUserIdentifier:keyList:
setUserIdentifier:
keyList
setKeyList:
_userIdentifier
_keyList
initWithProtocol:
setMaxEntities:
parsedResponseFromResponse:requestType:error:
entities
firstObject
attributeValueForCode:
unsignedLongLongValue
initWithMachServiceName:
setDelegate:
listening
setListening:
listener
resume
_allConnections
tvhd_clientBundleIdentifier
valueForEntitlement:
boolValue
initWithConnection:
_addConnection:
_removeConnection:
connections
removeObject:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
superclass
debugDescription
listener:shouldAcceptNewConnection:
connectionDidFinish:
notifyClientsWithBlock:
setListener:
setConnections:
_listening
_listener
_connections
initWithHomeSharingGroupIdentifier:loginSession:requestSession:
accountName
password
copyDeviceGUID
dictionaryWithObjectsAndKeys:
setURLBagKey:
setRequestParameters:
initWithRequestProperties:
statusCode
bodyData
propertyListWithData:options:format:error:
tvs_numberForKey:
integerValue
startWithConnectionResponseBlock:
initWithAccountName:andPassword:
homeSharingGroupIDWithCompletion:
setAccountName:
setPassword:
_accountName
_password
serviceInterface
setExportedInterface:
setExportedObject:
clientInterface
setRemoteObjectInterface:
_connectionWasInterrupted
setInterruptionHandler:
_connectionWasInvalidated
setInvalidationHandler:
tvs_bind:toObject:withKeyPath:options:
remoteConnection
_clientProxy
mediaServerDiscoveryConfigurationDidChange
mediaServersDidChange
mediaServerWithIdentifierDidChange:
mediaServerDiscoveryConfiguration
_performWorkOnMainQueueWithBlock:
_setMediaServerDiscoveryConfigurationWithMode:homeSharingAccountName:homeSharingPassword:completionHandler:
_restartMediaServerDiscoveryWithOptions:
mediaServers
_serializableMediaServerForMediaServer:
_mediaServerForIdentifier:
requestWorkTokenByRequestIdentifier
remoteObjectProxy
delegate
initWithIdentifier:type:
mediaServerDiscoveryConfigurationWithReply:
setMediaServerDiscoveryConfigurationWithMode:homeSharingAccountName:homeSharingPassword:reply:
restartMediaServerDiscoveryWithOptions:
mediaServersWithReply:
startConnectingToMediaServerWithIdentifier:reply:
disconnectFromMediaServerWithIdentifier:reply:
mediaServerWithIdentifier:reply:
submitRequest:toMediaServerWithIdentifier:reply:
cancelRequestWithIdentifier:
URLsForRequests:toMediaServerWithIdentifier:reply:
playbackURLForMediaServerWithIdentifier:itemIdentifier:protocol:itemFormat:reply:
playbackDidTimeoutFromMediaServerWithIdentifier:
synchronizeKeybagForMediaServerWithIdentifier:reply:
checkoutRentalItem:mediaServerIdentifier:reply:
checkinRentalItem:mediaServerIdentifier:reply:
clientBundleIdentifier
setRemoteConnection:
setMediaServerDiscoveryConfiguration:
setRequestWorkTokenByRequestIdentifier:
transaction
setTransaction:
_remoteConnection
_delegate
_mediaServerDiscoveryConfiguration
_requestWorkTokenByRequestIdentifier
_transaction
numberWithUnsignedInteger:
initWithHostName:port:
_hostName
_port
userID
rentalKeyID
name
initWithAccountIdentifier:rentalKeyIdentifier:
setCheckinRequest:
checkinRequest
initWithRentalItem:
setRentalItem:
_checkinRequest
_startServerInfoOperation
_startLoginOperation
_finishConnectAttemptWithSuccess:
_startFairPlaySAPSetupOperation
_startHomeShareVerifyOperation
_startDAAPDatabasesOperation
_startMachineVerifyOperation
mediaServerIdentifier
machineIdentifier
databaseName
_startDAAPBasePlaylistOperation
_startDAAPRevisionOperation
_startDPAPDatabasesOperation
_startDPAPBasePlaylistOperation
_startDPAPRevisionOperation
setMediaServerIdentifier:
_mediaServerIdentifier
setupNetworkMonitoring
initializeWithKeybagRootPath:
_setMediaServerDiscoveryConfiguration:updateSettings:
setMediaServerManager:
_startObservingMediaServerManager:
_startMediaServerDiscoveryIfNecessary
mediaServerManager
discoveryMode
homeSharingAccountName
_stopMediaServerDiscoveryIfNecessary
initWithDiscoveryMode:homeSharingAccountName:homeSharingGroupIdentifier:
tvs_boolForKey:defaultValue:
_startObservingMediaServers:
_stopObservingMediaServers:
_notifyClientsMediaServersDidChange
_notifyClientsMediaServerStateDidChange:
_notifyClientsMediaServerDiscoveryConfigurationDidChange
startDiscoveryWithMode:homeSharingGroupIdentifier:
stopDiscovery
_stopObservingMediaServerManager:
_logDiscoveredMediaServers
_mediaServerManager
_initWithKeybagRootPath:
rootPath
_eraseKeybags
keybagsPath
stringByAppendingPathComponent:
defaultManager
fileExistsAtPath:
createDirectoryAtPath:withIntermediateDirectories:attributes:error:
_updateSentinelWithKeybagPath:
_addRentalJournalEntryForRentalItem:
_checkoutRentalItem:withCompletionHandler:
_checkinRentalItem:withCompletionHandler:
dateWithTimeIntervalSinceNow:
_cleanupUnusedKeybagsTimerHandler
initWithFireDate:interval:target:selector:userInfo:repeats:
addTimer:forMode:
defaultCenter
_handleNetworkStateChangedNotification:
addObserver:selector:name:object:
_checkinJournaledRentalsIfNecessary
performSelector:withObject:afterDelay:
removeItemAtPath:error:
createFileAtPath:contents:attributes:
date
setAttributes:ofItemAtPath:error:
contentsOfDirectoryAtPath:error:
_eraseKeybagAtPath:
attributesOfItemAtPath:error:
fileModificationDate
timeIntervalSinceNow
_removeRentalJournalEntryForRentalItem:
haveRentalJournalCheckinsBeenAttempted
internetAvailable
_checkinJournaledRentals
setHaveRentalJournalCheckinsBeenAttempted:
_readRentalJournal
checkedOutRentals
addEntriesFromDictionary:
allValues
_checkinRentalJournalEntry:
setName:
setUserID:
setRentalKeyID:
_rentalJournalEntryForRentalItem:
_writeRentalJournal:
tvs_setObjectIfNotNil:forKey:
rentalJournalPath
dictionaryWithContentsOfFile:
writeToFile:atomically:
_eraseUnusedKeybags
eraseKeybagStore
setRootPath:
setKeybagsPath:
keybagCleanUpTimer
setKeybagCleanUpTimer:
setCheckedOutRentals:
setRentalJournalPath:
_haveRentalJournalCheckinsBeenAttempted
_rootPath
_keybagsPath
_keybagCleanUpTimer
_checkedOutRentals
_rentalJournalPath
DAAPPersistentItemID
_startStoreCheckin
mediaServerCheckoutOperation
checkinWorkToken
_startMediaServerCheckoutOperation
setCheckinWorkToken:
setMediaServerCheckoutOperation:
_mediaServerCheckoutOperation
_checkinWorkToken
initWithRequest:session:
host
setAvailable:
_handleResponse:responseData:error:
_available
_keyTypesData
authorizedAccountFromDMAPTaggedBuffer:bufferLength:
setAuthorizedAccounts:
authorizedAccounts
count
initWithBytesNoCopy:length:freeWhenDone:
_authorizedAccounts
alloc
initWithPreferencesDomain:
preferences
setBool:forKey:
_writeMediaServerDiscoveryConfiguration:toPreferences:
boolForKey:defaultValue:
_updateSettingWithBlock:shouldNotify:forKey:
_readMediaServerDiscoveryConfigurationFromPreferences:
integerForKey:defaultValue:
stringForKey:
synchronize
setCacheIPAddresses:
setServerIPAddress:
_refreshSettingsFromPreferencesAndShouldNotify:
cacheIPAddresses
logVerbosely
setLogVerbosely:
serverIPAddress
_cacheIPAddresses
_logVerbosely
_serverIPAddress
numberWithInt:
_startMediaServerCheckinOperation
currentMediaServerOperation
checkoutWorkToken
setCheckoutWorkToken:
_startStoreCheckout
setCurrentMediaServerOperation:
_currentMediaServerOperation
_checkoutWorkToken
setupRequestToken
setSetupRequestToken:
_setupRequestToken
_handlePhysicalNetworkStateChangedNotification:
removeObserver:
mutableMediaServers
setDiscoveryMode:
serviceBrowser
stop
setServiceBrowser:
monitoredServices
stopMonitoring
makeObjectsPerformSelector:
_disconnectAllMediaServers
_removeAllMediaServers
verifyMediaServerResultByIdentifier
_bonjourServiceTypeWithServiceBaseType:serviceSubType:
searchForServicesOfType:inDomain:
physicalNetworkAvailable
WiFiInterface
isActive
RJ45EthernetInterface
isActiveNetworkInterfaceInitialized
setWirelessInterfaceActive:
setWiredInterfaceActive:
setActiveNetworkInterfaceInitialized:
isWirelessInterfaceActive
isWiredInterfaceActive
objectEnumerator
member:
startMonitoring
containsObject:
_mediaServerForBonjourServiceName:
_startVerifyServerRequestForMediaServer:
_removeMediaServer:
dictionaryFromTXTRecordData:
_handleDiscoveredService:withTXTRecord:
_stopVerifyServerRequestForMediaServerIdentifier:
_homeSharingGroupIDWithTXTRecord:
_mediaServerIdentifierWithTXTRecord:
_bonjourServiceConfigurationWithService:
_mediaServerWithIdentifier:service:txtRecord:
_addMediaServer:
_uint64ValueWithHexString:
initWithMachineIdentifier:libraryIdentifier:
_mediaServerTypeFromServiceType:
intValue
rangeOfString:
_mediaServerTypeWithService:andTXTRecord:
setWithObject:
willChangeValueForKey:withSetMutation:usingObjects:
didChangeValueForKey:withSetMutation:usingObjects:
getCString:maxLength:encoding:
domain
netServiceBrowserWillSearch:
netServiceBrowserDidStopSearch:
netServiceBrowser:didNotSearch:
netServiceBrowser:didFindDomain:moreComing:
netServiceBrowser:didFindService:moreComing:
netServiceBrowser:didRemoveDomain:moreComing:
netServiceBrowser:didRemoveService:moreComing:
netServiceWillPublish:
netServiceDidPublish:
netService:didNotPublish:
netServiceWillResolve:
netServiceDidResolveAddress:
netService:didNotResolve:
netServiceDidStop:
netService:didUpdateTXTRecordData:
netService:didAcceptConnectionWithInputStream:outputStream:
countOfMediaServers
enumeratorOfMediaServers
memberOfMediaServers:
setMonitoredServices:
setMutableMediaServers:
setVerifyMediaServerResultByIdentifier:
_wirelessInterfaceActive
_wiredInterfaceActive
_activeNetworkInterfaceInitialized
_discoveryMode
_serviceBrowser
_monitoredServices
_mutableMediaServers
_verifyMediaServerResultByIdentifier
setDatabaseName:
_databaseName
numberFromBuffer:length:isSigned:
_decryptTokenData:
setTokenData:
setTokenStatus:
initWithUserIdentifier:loginSession:useTokenEncryption:requestSession:
tokenStatus
tokenData
_tokenStatus
_tokenData
ephemeralSessionConfiguration
setTimeoutIntervalForResource:
setHTTPShouldUsePipelining:
setHTTPMaximumConnectionsPerHost:
proxies
setConnectionProxyDictionary:
setURLCache:
sessionWithConfiguration:delegate:delegateQueue:
invalidateAndCancel
_serverURLWithHost:port:
setServerURL:
setBaseIPAddress:
serverIPURL
serverURL
URLSession
response
_handleRequestError:request:
baseIPAddress
cacheIPAddress
_updateBaseIPAddressWithResponse:
_mediaServerResponseWithURLResponse:data:
elapsedTimeInMilliseconds
requestQueue
_isCancelledError:
code
_CFURLResponse
_ipAddressFromPeerAddressData:hostName:
setServerIPURL:
stringByReplacingOccurrencesOfString:withString:
initWithFormat:
setURLSession:
setRequestQueue:
setCacheIPAddress:
_cacheIPAddress
_URLSession
_requestQueue
_serverURL
_serverIPURL
_baseIPAddress
service
setService:
initWithDomain:type:name:
resolveWithTimeout:
TXTRecordData
setHostConfiguration:
errorWithDomain:code:userInfo:
_hostConfiguration
_service
_handleResponse:error:
setRequestToken:
requestToken
setResponse:
setRequest:
_request
_response
_requestToken
account
keybagState
setAccount:
setKeybagState:
_account
_keybagState
setCheckoutRequest:
checkoutRequest
_checkoutRequest
accountIdentifier
initWithAuthorizationToken:accountIdentifier:
setKeybagData:
startWithAuthorizationResponseBlock:
setAuthorizationRequest:
authorizationRequest
initWithAccountIdentifier:tokenData:keybagPath:
keybagData
setAccountIdentifier:
_keybagData
_accountIdentifier
_authorizationRequest
auditToken
Server-info request succeeded with HTTP status [%ld]
Server-info request failed with HTTP status [%ld]
Login request succeeded with HTTP status [%ld]
Login response contains session identifier [%d]
Login response does not contain a session identifier!
Login request failed with service unavailable HTTP status (503). Login Result is 101 (eLoginFailed_SlotsFilled)
Login request failed with service unavailable HTTP status (503). Login Result = %@
Login request failed with HTTP status [%ld]
Creating signature header for URL [%@]
Created signature header for URL [%@]
Failed to create signature header for URL [%@]
%{public}@ succeeded with HTTP status [%ld]
%{public}@ request completed with revision [%@].
Error parsing %{public}@ response. Unable to find revision code
%{public}@ request failed with HTTP status [%ld]
Playback URL not in cache. Building URL
Found playback URL in cache
Unable to create playback URL with supplied item ID (%@) and format (%@)
Returning playback URL: %@
Connect request received while the server is unresolved. Starting resolve.
Connect request received while the server is currently being resolved. Waiting for resolve to finish
Connect request received while we are currently logging into the server. Waiting for login to finish
Connect request received when the server is already logged in. Nothing more to do
Connect request received when the server is disconnected. Starting login to server
Disconnect request received while the server is unresolved. Staying in unresolved state.
Disconnect request received while the server is being resolved. Cancelling resolve and moving to unresolved state.
Disconnect request received. Disconnecting and moving to the logged out state
Server has been marked as resolved. Will start logging into the server.
Server has been resolved while not actively connecting. Will update request session with updated host name and port
Server resolve has failed. Will move to unresolved state and complete all connection requests. Error = %@
Server resolve has failed while not actively connecting. Ignoring and remaining in same connection state. Error = %@
Login attempt has succeeded with login session: %{public}@
Login attempt has failed.
The Media server has disconncted us.
[%{public}@] is already being resolved. Ignoring this resolve attempt and waiting for curent resolve to complete
Connecting to server [%{public}@]
Updating DAAP state for server [%{public}@]. revision=%u
Updating DPAP state for server [%{public}@]. revision=%u databaseID=%u, databasePersistentID=%llu, basePlaylistID=%u, basePlaylistPersistentID=%llu, isImportingDatabase=%@
Logging out from iTunes [%@]
Fetching new DPAP state for server [%{public}@]
Set signature header [%@] for request [%{public}@]
No signature header set for request [%{public}@]
Starting tvhomesharingd
Exiting tvhomesharingd
Starting keybag synchronization for [%@]
Operations queue is empty. Completing sync with server [%@]
Keybag sync to server [%@] has completed with error [%@]
Machine verify request succeeded with HTTP status [%ld]
Machine verify request failed with HTTP status [%ld]
DAAP containers response received with HTTP status [%ld]
Error parsing DAAP containers response. One or both of the playlist identifiers are zero
Error parsing DAAP containers response. Unable to find the base playlist listing item
Starting service '%@'
Received request to open connection (%@) from bundle: %@
Connection (%@) has %@ entitlement.
Value for %@ entitlement (%@) was inadequate.
Will accept connection (%@) from bundle: %@
Will NOT accept connection (%@) from bundle: %@
Home share verify request succeeded with HTTP status [%ld]
Home share verify request failed with HTTP status [%ld]
HS GroupID requested with Account [%@] Password [%@] DeviceGUID [%@].
HS GroupID request finished for Account [%@] with HTTP status [%ld], error [%@], response status [%ld], HSGID [%@].
Checking in [%@] on store
Rental checkin on store for [%@] complete with error [%@]
Initial media server discovery configuration: %@
Ignoring restart media server discovery request as a media server is connected
Restarting media server discovery for %@
Received notification that the media servers have changed.
Media servers have been added. Starting observation of connection state
Media servers have been removed. Stopping observation of connection state
Received media server state change notification for %@. New State: %@. Informing clients.
Informing clients that the media server discovery configuration has changed.
Informing clients that the media servers have changed.
Informing clients that a media server state has changed.
Begin Discovered Media Servers
End Discovered Media Servers
Received %@. Disconnecting all media servers.
Erasing keybag store at %@
Keybag store initialized at path %@
Erasing keybag at path [%@]
Erasing keybags directory at path [%@]
Checking keybag sentinel at path [%@]
Keybag sentinel looks good at path [%@]
Looking for journaled rentals.
Rental journal found: %@
Checking in journal entry: %@
No rental journal found
Unable to write rental journal
Keybag store clean up started [%@]
Keybag store clean up finished [%@]
Checkin response received with HTTP status [%ld]
Checkin response indicates request succeeded
Checkin response does not contain a DMAP status code!
Checkin response does not contain kExtDAAPRentalCheckInCode response code
Checkin request failed with HTTP status [%ld]
TVHDMediaServerIsAvailableOperation for server [%@] has a valid NSHTTPURLResponse
TVHDMediaServerIsAvailableOperation determined that server [%@] is available [HTTP Status Code = %ld]
TVHDMediaServerIsAvailableOperation determined that server [%@] is NOT available [HTTP Status Code = %ld]
TVHDMediaServerIsAvailableOperation for server [%@] did not return an NSHTTPURLResponse [%@] [Error = %@]
DPAP databases succeeded with HTTP status [%ld]
Parsed DPAP databases response. ID [%lu], Persistent ID [%lu].
Error parsing DPAP databases response. One or both of the identifiers are zero
Parsed DPAP databases response but unable to find the local database listing item. Photo sharing is probably disabled
Error parsing DPAP databases response: %@
DPAP Databases request completed with 913 HTTP status code. Indicating photo library import in progress
DPAP databases request failed with HTTP status [%ld]
Authorized accounts request received response with HTTP status [%ld]
Finished parsing authorized accounts response. Found %@ accounts
Error parsing authorized accounts response. Unable to find kExtDAAPAuthorizedAccountsInfoCode code
Reading home sharing prefs: Discovery Mode: %@, Account Name: %@, Group ID: %@
Invalid discovery mode in prefs. Turning discovery off and cleaning up prefs.
Home sharing is enabled in prefs but we don't have a valid account name or group ID. Turning discovery off and cleaning up prefs.
Home sharing is not enabled in prefs but we have a valid account name and/or group ID. Turning discovery off and cleaning up prefs.
Writing home sharing prefs: Discovery Mode: %@, Account Name: %@, Group ID: %@
DPAP containers response received with HTTP status [%ld]
Error parsing DPAP containers response. One or both of the playlist identifiers are zero
Error parsing DPAP containers response. Unable to find the base playlist listing item
Security not supported on the simulator
Stopping bonjour browsing for discovery mode %{public}@ (HSGID: %{public}@).
Starting home share bonjour discovery with HSGID %{public}@
Starting DAAP bonjour browsing.
Service browser started using service type %{public}@
Will start searching for servers
Stopped searching for servers
Stopped searching for servers with error [%@]
Service browser found [%{public}@] moreComing [%d].
Service browser detected removed service [%{public}@] moreComing [%d].
Bonjour Remove for media server: [%{public}@]
Bonjour Remove while connected to [%{public}@]: Sending verify request
Bonjour Remove [%{public}@]: Removing server since it is not connected
Net Service TXT record update received for [%{public}@] with TXT [%@]
Existing verify server request is already in flight for %{public}@. Indicates a double Bonjour remove. Old request has been cancelled.
[%{public}@]: Verify request finished successfully. Ignoring the previous Bonjour remove.
[%{public}@]: Verify request failed with error [%@]. Will remove server.
Verify request in inflight for server [%{public}@]
Net Service found new instance of service [%{public}@]
iTunes service [%{public}@] has wrong home sharing group identifier [%{public}@], expecting [%{public}@]
Registering new media server: %{public}@
Discovered a media server being advertised as a home share but it does not have a home sharing group Identifier! Ignoring
DAAP databases response received with HTTP status [%ld]
Parsed DAAP databases response. Name [%@], ID [%lu], Persistent ID [%lu].
Error parsing DAAP databases response. One or both of the identifiers are zero
Error parsing DAAP databases response. Expecting a local database
Error parsing DAAP databases response. Unable to find the local database listing item
Received response for authorized account token request with HTTP status [%ld]
Successfully parsed authorized account token response with token status code [%ld].
Error parsing authorized account token response. Unable to find token status code
Error parsing authorized account token response. Unable to find token data. Staus Code = %ld
Authorized account token request failed with HTTP status [%ld]
Scheduling request: [%{public}@]
Finished processing request: [%{public}@] (%lu milliseconds)
[%{public}@] failed with Error [%@] Code [%ld] Domain [%@]. Clearing cached IP address.
Got IP [%{public}s] for [%{public}@]
Determined IP Address [%{public}@] for [%{public}@]
Host [%{public}@] failed to convert to IPAddress with error [%d]
Failed to get IP for [%{public}@]
Initiating resolve for [%@] [%@]
Net Service resolved [%@] with TXT [%@], Host [%@], Port [%ld]
Parsed TXT record: Display Name = %@, Host Name = %@, Port = %ld
Unable to process resolved service. No display name, host name or port. Display Name = %@, Host Name = %@, Port = %ld
Net Service failed to resolve [%@] with error [%@].
Server request (%{public}@) failed with error %@
Checkout response received with HTTP status [%ld]
Checkout response indicates request succeeded
Checkout response does not contain a DMAP status code!
Checkout response does not contain kExtDAAPRentalCheckInCode response code
Checkout request failed with HTTP status [%ld]
Checking out [%@] from store
Rental checkout from store for [%@] complete with error [%@]
Starting authorization request for [%@]
Got authorization response from store for user [%@]: %@
Keybag returned for user [%@]
No keybag returned for user [%@]
TVHDMediaServerServerInfoOperation
TVHDMediaServerLoginOperation
TVHDFairPlaySAPContext
TVHDMediaServerDMAPRevisionOperation
TVHDMediaServerDPAPStateOperation
TVHDMediaServer
TVHDMediaServerLoginSession
NSCopying
TVHDMediaServerState
TVHDMediaServerRequest
TVHDKeybagSynchronizeOperation
TVHDBonjourServiceConfiguration
TVHDMediaServerMachineVerifyOperation
TVHDRentalOperation
TVHDAuthorizedAccount
TVHDMediaServerDAAPBasePlaylistOperation
TVHDServiceListener
NSXPCListenerDelegate
NSObject
TVHDServiceConnectionDelegate
TVHDMediaServerHomeShareVerifyOperation
TVHDStoreAccount
TVHDServiceConnection
TVHSServiceProtocol
TVHSServiceClientProtocol
TVHDMediaServerAuthorizedAccountsRevisionOperation
TVHDMediaServerHostConfiguration
TVHDStoreRentalCheckinOperation
TVHDMediaServerConnectOperation
TVHDMediaServerDPAPRevisionOperation
TVHDService
TVHDKeybagStore
TVHDMediaServerRentalCheckinOperation
TVHDRentalCheckinOperation
TVHDMediaServerIsAvailableOperation
TVHDMediaServerLogoutOperation
TVHDMediaServerDPAPDatabasesOperation
TVHDMediaServerAuthorizedAccountsOperation
TVHDSettings
TVHDMediaServerDPAPBasePlaylistOperation
TVHDRentalCheckoutOperation
TVHDMediaServerFairPlaySAPSetupOperation
TVHDMediaServerManager
NSNetServiceBrowserDelegate
NSNetServiceDelegate
TVHDMediaServerDAAPDatabasesOperation
TVHDMediaServerAuthorizedAccountTokenOperation
TVHDMediaServerRequestSession
TVHDMediaServerResolveOperation
TVHDMediaServerDAAPRevisionOperation
TVHDMediaServerRequestOperation
TVHDMediaServerRentalCheckoutOperation
TVHDKeybagAccount
TVHDStoreRentalCheckoutOperation
TVHDStoreAuthorizationOperation
tvhomesharingd
@32@0:8@16@24
@24@0:8@16
v24@0:8@16
B16@0:8
v20@0:8B16
I16@0:8
v20@0:8I16
Q16@0:8
v24@0:8Q16
@36@0:8@16I24@28
@24@0:8^v16
v16@0:8
^v16@0:8
v24@0:8^v16
@40@0:8Q16@24@32
@16@0:8
@"NSError"
@"NSOperation"
@"TVHDMediaServerLoginSession"
@"TVHDMediaServerRequestSession"
@48@0:8@16Q24@32@40
@32@0:8@16@?24
@24@0:8@?16
@40@0:8@16@24Q32
v48@0:8I16I20Q24I32Q36B44
v24@0:8@?16
@32@0:8@?16@?24
@36@0:8@16B24@?28
@"TVHSMediaServerIdentifier"
@"NSString"
@"TVHDBonjourServiceConfiguration"
@"NSObject<OS_dispatch_queue>"
@"TVSStateMachine"
@"NSCache"
@"TVHDMediaServerResolveOperation"
@"TVHDMediaServerConnectOperation"
@"TVHDMediaServerDAAPRevisionOperation"
@"TVHDMediaServerDPAPRevisionOperation"
@"TVHSURLRequestOperation"
@"NSOperationQueue"
@24@0:8^{_NSZone=}16
B24@0:8@16
@"TVHSMediaServerProtocolVersion"
@"TVHDFairPlaySAPContext"
@"TVHSMediaServerSessionState"
@40@0:8@16Q24Q32
v32@0:8@16@24
@20@0:8B16
d16@0:8
v24@0:8d16
@"NSUUID"
@"NSData"
@"NSMutableDictionary"
@40@0:8@16@24@32
v48@0:8@16@24@32^v40
@"TVHSRentalItem"
@"NSNumber"
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
B32@0:8@16@24
B32@0:8@"NSXPCListener"16@"NSXPCConnection"24
v24@0:8@"TVHDServiceConnection"16
@"NSXPCListener"
@"NSMutableSet"
v48@0:8Q16@24@32@?40
v32@0:8@16@?24
v40@0:8@16@24@?32
v56@0:8@16@24Q32@40@?48
v24@0:8@?<v@?@"TVHSMediaServerDiscoveryConfiguration"@"NSError">16
v48@0:8Q16@"NSString"24@"NSString"32@?<v@?@"TVHSMediaServerDiscoveryConfiguration"@"NSError">40
v24@0:8@"NSDictionary"16
v24@0:8@?<v@?@"NSSet"@"NSError">16
v32@0:8@"TVHSMediaServerIdentifier"16@?<v@?B@"NSError">24
v32@0:8@"TVHSMediaServerIdentifier"16@?<v@?@"TVHSMediaServer"@"NSError">24
v40@0:8@"TVHSMediaServerRequest"16@"TVHSMediaServerIdentifier"24@?<v@?@"TVHSMediaServerResponse"@"NSError">32
v24@0:8@"NSUUID"16
v40@0:8@"NSArray"16@"TVHSMediaServerIdentifier"24@?<v@?@"NSDictionary"@"NSError">32
v56@0:8@"TVHSMediaServerIdentifier"16@"NSNumber"24Q32@"NSString"40@?<v@?@"NSURL"@"NSError">48
v24@0:8@"TVHSMediaServerIdentifier"16
v40@0:8@"TVHSRentalItem"16@"TVHSMediaServerIdentifier"24@?<v@?B@"NSError">32
@"NSXPCConnection"
@"<TVHDServiceConnectionDelegate>"
@"TVHSMediaServerDiscoveryConfiguration"
@"NSObject<OS_os_transaction>"
@32@0:8@16Q24
@"SSRentalCheckinRequest"
v28@0:8@16B24
@"TVHDServiceListener"
@"TVHDMediaServerManager"
@"NSTimer"
@"TVHSAsynchronousWorkToken"
v40@0:8@16@24@32
@32@0:8r*16Q24
@"NSArray"
Q32@0:8@16@24
Q24@0:8@16
v36@0:8@16@24B32
v24@0:8@"NSNetServiceBrowser"16
v32@0:8@"NSNetServiceBrowser"16@"NSDictionary"24
v36@0:8@"NSNetServiceBrowser"16@"NSString"24B32
v36@0:8@"NSNetServiceBrowser"16@"NSNetService"24B32
v24@0:8@"NSNetService"16
v32@0:8@"NSNetService"16@"NSDictionary"24
v32@0:8@"NSNetService"16@"NSData"24
v40@0:8@"NSNetService"16@"NSInputStream"24@"NSOutputStream"32
v32@0:8Q16@24
i16@0:8
@"NSNetServiceBrowser"
@44@0:8@16@24B32@36
@24@0:8Q16
v32@0:8@16Q24
@40@0:8@16@24@?32
@"NSURLSession"
@"NSURL"
@"TVHDMediaServerHostConfiguration"
@"NSNetService"
@"TVHDMediaServerRequest"
@"TVHSMediaServerResponse"
@"TVHDAuthorizedAccount"
@"SSRentalCheckoutRequest"
@"SSAuthorizationRequest"
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>CFBundleIdentifier</key>
<string>$(PRODUCT_BUNDLE_IDENTIFIER)</string>
<key>NSAppTransportSecurity</key>
<dict>
<key>NSAllowsLocalNetworking</key>
<true/>
</dict>
</dict>
</plist>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>application-identifier</key>
<string>com.apple.tvhomesharingd</string>
<key>com.apple.itunesstored.private</key>
<true/>
<key>fairplay-client</key>
<string>1859864847</string>
</dict>
</plist>
