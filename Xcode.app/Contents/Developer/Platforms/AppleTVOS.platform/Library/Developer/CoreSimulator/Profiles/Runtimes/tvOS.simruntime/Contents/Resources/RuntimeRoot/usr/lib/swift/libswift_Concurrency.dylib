Swift
Actor
MainActor
CheckedContinuationCanary
CheckedContinuation
UnownedExecutorRef
AsyncCompactMapSequence
Iterator
AsyncDropFirstSequence
AsyncDropWhileSequence
AsyncFilterSequence
AsyncFlatMapSequence
AsyncIteratorProtocol
Element
AsyncMapSequence
AsyncPrefixSequence
AsyncPrefixWhileSequence
AsyncSequence
AsyncIterator Element
AsyncThrowingCompactMapSequence
AsyncThrowingDropWhileSequence
AsyncThrowingFilterSequence
AsyncThrowingFlatMapSequence
AsyncThrowingMapSequence
AsyncThrowingPrefixWhileSequence
PartialAsyncTask
UnsafeContinuation
Task
Priority
Handle
UnsafeCurrentTask
CancellationError
TaskGroup
ThrowingTaskGroup
TaskLocal
_YieldingContinuationStorage
YieldingContinuation
_Concurrency/CheckedContinuation.swift
Fatal error
SWIFT TASK CONTINUATION MISUSE: 
 tried to resume its continuation more than once, returning 
 tried to resume its continuation more than once, throwing 
_Concurrency/Errors.swift
Fatal error: Call of deleted method
_Concurrency/AsyncDropFirstSequence.swift
Precondition failed
Can't drop a negative number of elements from an async sequence
_Concurrency/AsyncPrefixSequence.swift
Can't prefix a negative number of elements from an async sequence
_Concurrency/TaskGroup.swift
_Concurrency/TaskLocal.swift
Unexpectedly found nil while unwrapping an Optional value
_Concurrency/YieldingContinuation.swift
_TtCs9MainActor
_TtCs25CheckedContinuationCanary
defaultValue
_TtCs28_YieldingContinuationStorage
continuation
 leaked its continuation!
Illegal attempt to set a 
 value, use `withValue(...) { ... }` instead.
__DATA
__s_async_hook
@MainActor function
the main thread
actor-isolated function
the same actor
%s: data race detected: %s at %.*s:%d was not called on %s
error
warning
actor-isolation-violation
Actor-isolated function called from another thread
SWIFT_UNEXPECTED_EXECUTOR_LOG_LEVEL
invalid job priority %#zx
dispatch_async_swift_job
future reported an error, but wait cannot throw
CFRunLoopRun
not all allocations are deallocated
freed pointer was not the last allocation
error: task-local: detected illegal task-local value binding at %.*s:%d.
Task-local values must only be set in a structured-context, such as: around any (synchronous or asynchronous function invocation), around an 'async let' declaration, or around a 'with(Throwing)TaskGroup(...){ ... }' invocation. Notably, binding a task-local value is illegal *within the body* of a withTaskGroup invocation.
The following example is illegal:
    await withTaskGroup(...) { group in 
        await <task-local>.withValue(1234) {
            group.spawn { ... }
        }
    }
And should be replaced by, either: setting the value for the entire group:
    // bind task-local for all tasks spawned within the group
    await <task-local>.withValue(1234) {
        await withTaskGroup(...) { group in
            group.spawn { ... }
        }
    }
or, inside the specific task-group child task:
    // bind-task-local for only specific child-task
    await withTaskGroup(...) { group in
        group.spawn {
            await <task-local>.withValue(1234) {
                ... 
            }
        }
        group.spawn { ... }
    }
task-local-violation
Task-local bound in illegal context
__tsan_acquire
__tsan_release
xIeghHr_
_pIegHzo_
IeghH_
ytIeghHr_
_pIeghHrzo_
$ss21AsyncIteratorProtocolP
yxq__G
$ss13AsyncSequenceP
7Element
yx_G
yx_G
yx_G
7Element
yxq__G
yxq__G
yx_G
yx_G
yxq__G
yx_G
yx_G
yxq__G
yxq__G
yx_G
$sSY
yx_G
yxq__G
$ss5ActorP
q_Sg7Element
QzYac
13AsyncIterator
Sb7Element
QzYac
Sb7Element
QzYacSg
q_7Element
QzYac
13AsyncIterator
Qy_Sg
13AsyncIterator
_7Element
q_Sg7Element
QzYaKc
Sb7Element
QzYaKc
q_7Element
QzYaKc
yxq_G
BcSg
7Element
QzSbIegHnr_
7Element
QzSbIegHnd_
7Element
QzXMT
Element
AsyncIterator
RawValue
canary
identity
implementation
base
transform
baseIterator
count
predicate
isIncluded
currentIterator
finished
remaining
predicateHasFailed
doneDropping
context
_task
userInteractive
userInitiated
default
utility
background
unspecified
_group
group
defaultValue
continuation
storage
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
        <key>CFBundleIdentifier</key>
        <string>com.apple.dt.runtime.swift_Concurrency</string>
        <key>CFBundleInfoDictionaryVersion</key>
        <string>6.0</string>
        <key>CFBundleName</key>
        <string>swift_Concurrency</string>
        <key>CFBundleShortVersionString</key>
        <string>5.5</string>
        <key>CFBundleVersion</key>
        <string>1300.0.17.216</string>
</dict>
</plist>
SwiftNativeNSObject
init
allocWithZone:
automaticallyNotifiesObserversForKey:
initWithCoder:
retain
release
autorelease
retainCount
_isDeallocating
_tryRetain
allowsWeakReference
retainWeakReference
_setWeaklyReferenced
_noteAssociatedObjects
dealloc
refCounts
@24@0:8^{_NSZone=}16
B24@0:8@16
@24@0:8@16
@16@0:8
Vv16@0:8
Q16@0:8
B16@0:8
v16@0:8
{RefCounts<swift::RefCountBitsT<swift::RefCountIsInline>>="refCounts"{atomic<swift::RefCountBitsT<swift::RefCountIsInline>>="__a_"{__cxx_atomic_impl<swift::RefCountBitsT<swift::RefCountIsInline>, std::__cxx_atomic_base_impl<swift::RefCountBitsT<swift::RefCountIsInline>>>="__a_value"A{RefCountBitsT<swift::RefCountIsInline>}}}}
