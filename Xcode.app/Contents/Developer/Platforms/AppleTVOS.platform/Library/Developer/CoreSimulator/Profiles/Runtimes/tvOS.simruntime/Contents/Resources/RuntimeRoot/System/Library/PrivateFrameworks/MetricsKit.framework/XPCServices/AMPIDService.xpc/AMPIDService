@(#)PROGRAM:AMPIDService  PROJECT:MetricsKit-1
MetricsKit: AMPIDService shared secret store created
MetricsKit: AMPIDService XPC connection invalidated
MetricsKit: AMPIDService shared secret store released
MetricsKit: AMPIDService XPC connection from client interrupted!
MetricsKit: AMPIDService XPC connection made from pid %ld
MetricsKit: Failed to setup dir suffix for sandbox environment (error code: %d)
MetricsKit: AMPIDService XPC Service started
MetricsKit: Expected a path but got a full url for MTFrameworkEnvironment.setLocalDataPath. Please remove file:// from %@
MetricsKit: Failed to read entitlement %@ error: %@
MetricsKit: Error occurred with code %ld: %@
MetricsKit: Someone is finishing a promise with both a result and an error. This will result in both the success and error blocks being called. result = %@ error = %@
MetricsKit: Someone is finishing a promise with neither a result nor an error. This will result in neither the success nor the error blocks being called.
MetricsKit: Someone is attempting to finish a finished MTPromise.
MetricsKit: AMPIDService is using iCloud container in the sandbox environment
MetricsKit: Restarting ID sync engine because account has changed
MetricsKit: Creating new zone with ID %@
MetricsKit: Started fetching record with ID %@
MetricsKit: Started fetching all record changes
MetricsKit: Started saving %ld records with qos %ld
MetricsKit: Server has a newer version of record with ID %@, use server record instead
MetricsKit: Failed to save record with ID %@ error %@
MetricsKit: Failed to fetch records with error %@
MetricsKit: Failed to delete record with ID %@ error %@
MetricsKit: Updating record %@ for namespace %@ key %@
MetricsKit: Updating reference record %@ with current date
MetricsKit: Updated user record with ID %@
MetricsKit: Error starting sync engine: %@
MetricsKit: Started sync engine with %d unsynchronized records
MetricsKit: Started sync engine with all records synchronized
MetricsKit: Failed to read local record data with ID %@ error %@
MetricsKit: Failed to save local record data with ID %@ error %@
MetricsKit: Failed to delete local record data with ID %@ error %@
MetricsKit: Loaded reference record %@ dsId %@ %@
MetricsKit: Performing maintenance on %d ID schemes
MetricsKit: Error: %@
MetricsKit: Failed to load user record ID with error %@
MetricsKit: CloudKit user has changed
MetricsKit: Failed to write user record ID with error %@
MetricsKit: Failed to write fetch file with error %@
MetricsKit: Failed to load sync engine status with error %@
MetricsKit: Failed to write sync engine status with error %@
MetricsKit: Saving synchronized record with ID %@ for namespace %@
MetricsKit: Saving unsynchronized record with ID %@ for namespace %@
MetricsKit: Failed to delete corrupted data file %@ error %@
MetricsKit: Clearing local CloudKit record cache
MetricsKit: Failed to remove local record data %@ with error %@
MTXPCServiceInterface
NSObject
ServiceDelegate
NSXPCListenerDelegate
MTXPCConnection
MTFrameworkEnvironment
Utilities
SHA1Base62
Base62
MTInterprocessChangeNotifier
MTWeakRef
MTNonretainedCache
MTPromise
MTIDSyncEngine
MTIDSpan
Composition
MTPromiseResult
MTPromiseCompletionBlocks
MTPromiseWithTimeout
MTIDScheme
NSSecureCoding
NSCoding
MTIDSecret
MTIDCloudKitStore
MTIDCloudKitLocalDBDelegate
MTIDSyncEngineDelegate
MTIDSecretStore
MTIDCloudKitPromiseManager
MTIDCloudKitLocalDB
SyncState
MTIDCompositeSecretStore
isEqual:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
description
debugDescription
secretForScheme:options:completion:
doResetSchemes:options:completion:
doMaintainSchemes:options:
doClearLocalData
interfaceWithProtocol:
setExportedInterface:
exportedInterface
classesForSelector:argumentIndex:ofReply:
mutableCopy
arrayWithObjects:count:
addObjectsFromArray:
setClasses:forSelector:argumentIndex:ofReply:
secretStore
initWithXPCConnection:secretStore:
setExportedObject:
setInvalidationHandler:
setInterruptionHandler:
resume
processIdentifier
listener:shouldAcceptNewConnection:
.cxx_destruct
_secretStore
bundleForClass:
bundleIdentifier
UTF8String
serviceListener
setDelegate:
init
secretForScheme:options:
addFinishBlock:
resetSchemes:options:
maintainSchemes:options:
clearLocalData
connection
_configuration
_connection
sharedEnvironment
setSharedEnvironment:
hasPrefix:
URLWithString:
path
stringByReplacingOccurrencesOfString:withString:
defaultManager
URLForDirectory:inDomain:appropriateForURL:create:error:
metricsKitBundleIdentifier
URLByAppendingPathComponent:
date
valueForEntitlement:
containsObject:
isInternalBuild
standardUserDefaults
valueForKey:
isEqualToString:
mainBundle
processInfo
processName
withEnvironment:execute:
initialize
setLocalDataPath:
localDataPath
useCloudKitSandbox
hostProcessBundleIdentifier
_localDataPath
count
objectAtIndexedSubscript:
null
arrayWithCapacity:
countByEnumeratingWithState:objects:count:
addObject:
mt_deepCopy
addEntriesFromDictionary:
copy
mt_verifyEventData
mt_map:
mt_condensedArray
dataUsingEncoding:
bytes
length
initWithUUIDBytes:
mt_base62String
mt_SHA1Base62String
getUUIDBytes:
initWithBytes:length:encoding:
fullIdentifier:
stop
dealloc
stringWithFormat:
notify:
initWithIdentifier:onChange:
notify
_identifier
_token
localizedDescription
raise:format:
code
objectForKeyedSubscript:
setObject:forKeyedSubscript:
initWithDomain:code:userInfo:
initWithFormat:arguments:
dictionaryWithObjects:forKeys:count:
value
setValue:
_value
dictionary
setCache:
cache
objectForKeyedSubscript:creation:
_cache
initWithCondition:
_globalPromiseStorageAccessQueue
_globalPromiseStorage
finishWithError:
finishWithResult:
_configureAllPromise:withResults:promises:currentPromiseIndex:
_configureAnyPromise:withPromises:currentPromiseIndex:
stateLock
lock
_isFinished
promiseResult
error
_errorIsCanceledError:
unlock
completionBlocks
addErrorBlock:
callErrorBlock:withPromiseResult:
_addBlock:orCallWithResult:
addCompletionBlock:
callCompletionBlock:withPromiseResult:
addSuccessBlock:
callSuccessBlock:withPromiseResult:
lockWhenCondition:beforeDate:
result
distantFuture
resultBeforeDate:error:
dateWithTimeIntervalSinceNow:
resultWithError:
resultWithTimeout:error:
promiseWithResult:
_finishPromise:withPromise:
promiseWithError:
errorWithDomain:code:userInfo:
finishWithResult:error:
condition
initWithResult:error:
setPromiseResult:
unlockWithCondition:
flushCompletionBlocksWithPromiseResult:
removeObject:
numberWithBool:
cancel
domain
promiseWithAll:
promiseWithAny:
isCancelled
isFinished
waitUntilFinished
waitUntilFinishedWithTimeout:
catchWithBlock:
thenWithBlock:
boolCompletionHandlerAdapter
completionHandlerAdapter
errorOnlyCompletionHandlerAdapter
nilValueCompletionHandlerAdapter
setCompletionBlocks:
setStateLock:
_completionBlocks
_promiseResult
_stateLock
setQueue:
setZoneID:
setQueuedRecordIDs:
setPendingRecordIDs:
setupContainerWithIdentifier:
setQualityOfService:
defaultCenter
accountDidChange:
addObserver:selector:name:object:
initWithContainerIdentifier:environment:
initWithContainerID:
setContainer:
container
containerID
environment
state
setState:
startEngine
pendingRecordIDs
removeAllObjects
queuedRecordIDs
_endTransaction
handleUserRecordID:
handleEngineStartedWithError:
accountStatus
supportsDeviceToDeviceEncryption
containerIdentifier
zoneID
privateCloudDatabase
initWithZoneID:
saveRecordZone:completionHandler:
fetchRecordZoneWithID:completionHandler:
accountInfoWithCompletionHandler:
fetchUserRecordIDWithCompletionHandler:
recordName
addPendingRecordID:
handleFetchedRecords:error:
removePendingRecordID:
fetchRecordWithID:completionHandler:
predicateWithValue:
initWithRecordType:predicate:
performQuery:
_beginTransaction
performQuery:inZoneWithID:completionHandler:
qualityOfService
queue
commit
allObjects
addRecordIDsToSave:recordIDsToDelete:qualityOfService:
delegate
recordWithID:
initWithRecordsToSave:recordIDsToDelete:
configuration
setSavePolicy:
setAtomic:
handleSavedRecord:error:
setPerRecordCompletionBlock:
recordID
setCompletionBlock:
addOperation:
transactions
setTransactions:
transactionTimeout
accountDidChangeWithUserRecordID:
syncEngineDidStartWithError:
userInfo
recordWasDeleted:
recordWasSaved:
recordWasFailedToSave:
recordWasFetched:
setTransactionTimeout:
initWithContainerIdentifier:zoneID:queue:delegate:
start
fetchRecordWithID:
fetchAllRecordsOfType:
saveRecordsWithIDs:qualityOfService:
deleteRecordsWithIDs:
handleDeletedRecordID:error:
_state
_delegate
_queue
_container
_zoneID
_qualityOfService
_queuedRecordIDs
_pendingRecordIDs
_transactions
initWithScheme:date:referenceDate:
setReferenceDate:
rotationSchedule
localCalendar
components:fromDate:
components:fromDateComponents:toDateComponents:options:
dateFromComponents:
setDay:
lifespan
timeIntervalSinceDate:
timeIntervalSince1970
dateByAddingTimeInterval:
localTimeZone
timeZone
isEqualToTimeZone:
initWithCalendarIdentifier:
spanForScheme:date:referenceDate:
serialNumber
setSerialNumber:
startDate
setStartDate:
endDate
setEndDate:
referenceDate
_serialNumber
_startDate
_endDate
_referenceDate
_resultOfComposition:errors:
dictionaryWithCapacity:
_findUnfinishedPromise:
_setupCompositePromise:composition:
cancelPromisesInComposition:
promiseWithComposition:
_error
_result
_shouldCallImmediately
setPromise:
timeIntervalSinceNow
setDispatchSourceTimer:
promise
dispatchSourceTimer
initWithTimeout:queue:timeoutBlock:
_promise
_dispatchSourceTimer
setIdNamespace:
compare:options:
setRotationSchedule:
setLifespan:
longLongValue
setCorrelations:
setVersion:
caseInsensitiveCompare:
setIdType:
setContainerIdentifier:
overrideLifespanMaybe
calculateHash
setLocalHash:
idNamespace
integerForKey:
idType
storagePoolSize
maxPastTimeInterval
correlations
version
localHash
correlationHash
numberWithLongLong:
topics
isDefault
encodeObject:forKey:
encodeInt:forKey:
encodeInt64:forKey:
encodeBool:forKey:
decodeObjectOfClass:forKey:
decodeIntForKey:
decodeInt64ForKey:
decodeArrayOfObjectsOfClass:forKey:
setTopics:
decodeBoolForKey:
setIsDefault:
setCorrelationHash:
supportsSecureCoding
encodeWithCoder:
initWithCoder:
initWithNamespace:options:
initWithNamespace:type:
maxFutureTimeInterval
dictionaryRepresentation
_isDefault
_idNamespace
_idType
_rotationSchedule
_lifespan
_correlations
_version
_containerIdentifier
_localHash
_correlationHash
_topics
effectiveDate
expirationDate
isSynchronized
syncStatusCode
setEffectiveDate:
setExpirationDate:
setIsSynchronized:
setSyncStatusCode:
initWithValue:effectiveDate:expirationDate:isSynchronize:
debugInfo
_isSynchronized
_effectiveDate
_expirationDate
_syncStatusCode
setCanSyncBetweenDevices:
stringByAppendingString:
setAccessQueue:
recordZoneID
initWithContainerIdentifier:recordType:recordZoneID:
setLocalDB:
setGeneratedDates:
canSyncBetweenDevices
syncEngine
accessQueue
initWithCallbackQueue:
setPromiseManager:
_generateFutureRecordsForScheme:referenceRecord:
referenceDateOfRecord:
generatedDates
compare:
spanRecordIDForScheme:referenceRecordID:serialNumber:
spanRecordKeyWithReferenceRecord:serialNumber:
updateRecord:isSpanRecord:scheme:expectedKey:expiration:reset:
recordWithID:qualityOfService:updateRecordMaybe:error:
localDB
recordWithID:error:
recordType
initWithRecordType:recordID:
writeRecord:error:
mt_isSynchronized
promiseManager
waitForRecordToSync:timeout:
initWithZoneName:ownerName:
unsignedLongLongValue
stringByAppendingFormat:
initWithRecordName:zoneID:
doubleValue
dateWithTimeIntervalSince1970:
UUID
UUIDString
mt_setSecretValue:
mt_setSynchronized:
referenceRecordIDForScheme:dsId:
keyOfReferenceDate:
promiseForRecordWithID:timeout:qualityOfService:updateRecordMaybe:
needsFetchRecords
setNeedsFetchRecords:
setUserRecordIDName:
fetchChangesIfNeeded
finishPromisesOfRecord:
deleteRecordWithID:error:
boolValue
referenceRecordForScheme:dsId:date:reset:timeout:qualityOfService:
generateFutureRecordsForScheme:referenceRecord:
spanRecordForScheme:span:timeout:qualityOfService:referenceRecord:
mt_secretValue
array
clearData
allRecords
cloudKitLocalDB:didChangeRecord:
initWithContainerIdentifer:enableSync:
setSyncEngine:
_canSyncBetweenDevices
_syncEngine
_localDB
_accessQueue
_generatedDates
_promiseManager
setCallbackQueue:
setDict:
callbackQueue
dict
_dict
_callbackQueue
setRecordType:
setRecordZoneID:
fileURLWithPath:
exceptionWithName:reason:userInfo:
createDirectoryAtURL:withIntermediateDirectories:attributes:error:
fileExistsAtPath:isDirectory:
setPathURL:
pathURL
dataWithContentsOfURL:options:error:
writeToURL:options:error:
deleteIfExists:error:
fileExistsAtPath:
removeItemAtURL:error:
initRequiringSecureCoding:
encodeSystemFieldsWithCoder:
encodedData
initForReadingFromData:error:
setRequiresSecureCoding:
dataForName:error:
initWithData:encoding:
userRecordIDName
writeData:forName:error:
setZoneCreated:
fileExists:
mt_syncingFileName
mt_syncedFileName
encodeRecord:
decodeRecordFromData:recordID:isSynchronized:
mt_syncingFileExtension
enumeratorAtPath:
nextObject
hasSuffix:
substringToIndex:
enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:
mt_syncedFileExtension
zoneCreated
_zoneCreated
_recordType
_recordZoneID
_pathURL
encryptedValuesByKey
setStores:
storeKeyForScheme:
stores
secretStoreForScheme:
schemesGroupedByStore:
firstObject
enumerateKeysAndObjectsUsingBlock:
_stores
B24@0:8@16
#16@0:8
@16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B16@0:8
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
v40@0:8@16@24@?32
Vv32@0:8@16@24
v40@0:8@"MTIDScheme"16@"NSDictionary"24@?<v@?@"MTIDSecret"@"NSError">32
v40@0:8@"NSArray"16@"NSDictionary"24@?<v@?@"NSError">32
Vv32@0:8@"NSArray"16@"NSDictionary"24
B32@0:8@16@24
B32@0:8@"NSXPCListener"16@"NSXPCConnection"24
v16@0:8
@"<MTIDSecretStore>"
@32@0:8@16@24
@"NSDictionary"
@"NSXPCConnection"
v32@0:8@16@?24
v24@0:8@16
@24@0:8@16
@"NSString"
@24@0:8@?16
@32@0:8@16@?24
v32@0:8@16@24
@"NSMutableDictionary"
v48@0:8@16@24@32Q40
v40@0:8@16@24Q32
v24@0:8@?16
@32@0:8@16^@24
@24@0:8^@16
@32@0:8d16^@24
v24@0:8d16
@?16@0:8
v32@0:8@?16@?24
@"MTPromiseCompletionBlocks"
@"MTPromiseResult"
@"NSConditionLock"
d16@0:8
@48@0:8@16@24@32@40
v24@0:8q16
v32@0:8@16q24
v40@0:8@16@24q32
q16@0:8
@"<MTIDSyncEngineDelegate>"
@"NSObject<OS_dispatch_queue>"
@"CKContainer"
@"CKRecordZoneID"
@"NSMutableSet"
@"NSMutableArray"
@40@0:8@16@24@32
v24@0:8Q16
@"NSDate"
@"NSError"
v32@0:8@?16@24
@40@0:8d16@24@?32
@"MTPromise"
@"NSObject<OS_dispatch_source>"
v24@0:8@"NSCoder"16
@24@0:8@"NSCoder"16
@32@0:8@16q24
v20@0:8B16
@"NSArray"
@44@0:8@16@24@32B40
@40@0:8@16@24Q32
@32@0:8@16Q24
B56@0:8@16B24@28@36@44B52
v32@0:8@"MTIDCloudKitLocalDB"16@"CKRecord"24
v24@0:8@"CKRecordID"16
v24@0:8@"NSError"16
@"CKRecord"24@0:8@"CKRecordID"16
v24@0:8@"CKRecord"16
@"MTPromise"32@0:8@"MTIDScheme"16@"NSDictionary"24
@"MTPromise"32@0:8@"NSArray"16@"NSDictionary"24
@"NSDictionary"16@0:8
@28@0:8@16B24
@48@0:8@16q24@?32^@40
@48@0:8@16d24q32@?40
@60@0:8@16@24@32B40d44q52
@56@0:8@16@24d32q40@48
@"MTIDSyncEngine"
@"MTIDCloudKitLocalDB"
@"MTIDCloudKitPromiseManager"
@32@0:8@16d24
B40@0:8@16@24^@32
B32@0:8@16^@24
@36@0:8@16@24B32
@"<MTIDCloudKitLocalDBDelegate>"
@"NSURL"
hash
TQ,R
superclass
T#,R
description
T@"NSString",R,C
debugDescription
v8@?0
v24@?0@"MTIDSecret"8@"NSError"16
v24@?0@8@"NSError"16
connection
T@"NSXPCConnection",R,W,N,V_connection
secretStore
T@"<MTIDSecretStore>",R,N,V_secretStore
com.apple.AMPIDService
InternalBuild
file://
MTIDCompositeSecretStore
MTIDXPCSecretStore
com.apple.security.exception.mach-lookup.global-name
MTMetricsKitContainerEnvironment
com.apple.developer.icloud-container-environment
Development
MTMetricsKit
sharedEnvironment
T@"MTFrameworkEnvironment",&
localDataPath
T@"NSString",C,N
Event data item at index %ld is of invalid type %@. Event data items must be of NSDictionary or MTPromise type.
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789
v12@?0i8
MTMetricsKit:%@
com.apple.amp-ae-eng.MetricsKit
general
MTError
MetricsKit error
MTException
value
T@,W,N,V_value
cache
T@"NSMutableDictionary",&,N,V_cache
v16@?0@"MTPromiseResult"8
v20@?0B8@"NSError"12
v16@?0@"NSError"8
v16@?0@8
com.apple.MetricsKit.globalPromiseStorageAccessQueue
completionBlocks
T@"MTPromiseCompletionBlocks",&,N,V_completionBlocks
promiseResult
T@"MTPromiseResult",&,N,V_promiseResult
stateLock
T@"NSConditionLock",&,N,V_stateLock
cancelled
TB,R,N,GisCancelled
finished
TB,R,N,GisFinished
iCloud account is not available. Account status: %ld
iCloud account for container %@ doesn't support device to device encryption
v24@?0@"CKRecordZone"8@"NSError"16
v24@?0@"CKAccountInfo"8@"NSError"16
v24@?0@"CKRecordID"8@"NSError"16
v24@?0@"CKRecord"8@"NSError"16
v24@?0@"NSArray"8@"NSError"16
com.apple.AMPIDService.SyncEngineQueue
transactionTimeout
Td,N
queue
T@"NSObject<OS_dispatch_queue>",&,N,V_queue
container
T@"CKContainer",&,N,V_container
zoneID
T@"CKRecordZoneID",&,N,V_zoneID
qualityOfService
Tq,N,V_qualityOfService
queuedRecordIDs
T@"NSMutableSet",&,N,V_queuedRecordIDs
pendingRecordIDs
T@"NSMutableSet",&,N,V_pendingRecordIDs
transactions
T@"NSMutableArray",W,N,V_transactions
state
Tq,N,V_state
delegate
T@"<MTIDSyncEngineDelegate>",W,N,V_delegate
referenceDate
T@"NSDate",&,N,V_referenceDate
serialNumber
TQ,N,V_serialNumber
startDate
T@"NSDate",&,N,V_startDate
endDate
T@"NSDate",&,N,V_endDate
error
T@"NSError",R,C,N,V_error
result
T@,R,N,V_result
promise
T@"MTPromise",&,N,V_promise
dispatchSourceTimer
T@"NSObject<OS_dispatch_source>",&,N,V_dispatchSourceTimer
date
waitTime
idType
reset
dsId
namespace
type
lifespan
rotation
correlations
version
topics
default
MTCloudKitAccountDidChangeNotification
userid
user
client
daily
com.apple.amp-ae.metricskit.identifiers
MTIDServiceLifespanOverride~%@
MTIDServiceLifespanOverride
<%@: %p, namespace: %@, lifespan: %lld correlations: %@ >
localHash
correlationHash
supportsSecureCoding
TB,R
idNamespace
T@"NSString",C,N,V_idNamespace
Tq,N,V_idType
rotationSchedule
Tq,N,V_rotationSchedule
Tq,N,V_lifespan
T@"NSArray",C,N,V_correlations
T@"NSString",C,N,V_version
containerIdentifier
T@"NSString",C,N,V_containerIdentifier
TQ,N,V_localHash
TQ,N,V_correlationHash
T@"NSArray",C,N,V_topics
isDefault
TB,N,V_isDefault
storagePoolSize
TQ,R,N
maxFutureTimeInterval
Td,R,N
maxPastTimeInterval
NotImplemented
Use initWithScheme:date: instead
<%@: %p, value: %@, effective: %@, expiration: %@ >
effectiveDate
expirationDate
isSynchronized
syncStatusCode
T@"NSString",C,N,V_value
T@"NSDate",C,N,V_effectiveDate
T@"NSDate",C,N,V_expirationDate
TB,N,V_isSynchronized
T@"NSString",&,N,V_syncStatusCode
MT_IDSecret
MT_IDZone
MT_ID
.accessqueue
B16@?0@"CKRecord"8
_%llx
%lld
%@_%02lx
%llx
%@-%ld
Ready
synchronized
unsynchronized
Namespace date is null, are you sending multiple reset requests too quickly?
%@%@
@"MTPromise"16@?0@"CKRecord"8
@"MTPromise"16@?0@8
v16@?0@"CKRecord"8
secrets
@16@?0@"CKRecord"8
T@"NSString",&,N,V_containerIdentifier
canSyncBetweenDevices
TB,V_canSyncBetweenDevices
syncEngine
T@"MTIDSyncEngine",&,N,V_syncEngine
localDB
T@"MTIDCloudKitLocalDB",&,N,V_localDB
accessQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_accessQueue
generatedDates
T@"NSMutableDictionary",&,N,V_generatedDates
promiseManager
T@"MTIDCloudKitPromiseManager",&,N,V_promiseManager
v16@?0@"MTPromiseWithTimeout"8
dict
T@"NSMutableDictionary",&,N,V_dict
callbackQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_callbackQueue
UserRecordID
NeedsFetch
SyncEngineStatus
MetricsIdentifiers
MTIDCloudKitLocalDB
MTFrameworkEnvironment.sharedEnvironment.localDataPath is not valid: %@
Application doesn't have write access to %@
systemFields
Starting
recordType
T@"NSString",&,N,V_recordType
recordZoneID
T@"CKRecordZoneID",&,N,V_recordZoneID
pathURL
T@"NSURL",&,N,V_pathURL
zoneCreated
TB,N,V_zoneCreated
T@"<MTIDCloudKitLocalDBDelegate>",W,N,V_delegate
.local
.cloud
secretValue
secretKey
expiration
mt_isSynchronized
TB,N,Gmt_isSynchronized,Smt_setSynchronized:
mt_secretValue
T@"NSString",&,N,Gmt_secretValue,Smt_setSecretValue:
Cloud
Local
%@-%@
v32@?0@8@"<MTIDSecretStore>"16^B24
v32@?0@8@16^B24
subStores
stores
T@"NSMutableDictionary",&,N,V_stores
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>application-identifier</key>
<string>com.apple.AMPIDService</string>
<key>aps-connection-initiate</key>
<true/>
<key>aps-environment</key>
<string>serverPreferred</string>
<key>com.apple.developer.icloud-container-identifiers</key>
<array>
<string>com.apple.amp-ae.metricskit.identifiers</string>
</array>
<key>com.apple.developer.icloud-services</key>
<array>
<string>CloudKit</string>
</array>
<key>com.apple.private.appleaccount.app-hidden-from-icloud-settings</key>
<true/>
<key>com.apple.private.cloudkit.masquerade</key>
<true/>
<key>com.apple.private.cloudkit.serviceNameForContainerMap</key>
<dict>
<key>com.apple.amp-ae.metricskit.identifiers</key>
<string>com.apple.amp-ae.metricskit.identifiers</string>
</dict>
<key>com.apple.private.cloudkit.setEnvironment</key>
<true/>
<key>com.apple.private.cloudkit.spi</key>
<true/>
<key>com.apple.private.cloudkit.systemService</key>
<true/>
<key>com.apple.private.tcc.allow entitlement</key>
<array>
<string>kTCCServiceLiverpool</string>
</array>
<key>com.apple.security.exception.files.home-relative-path.read-write</key>
<array>
<string>Library/com.apple.AMPIDService/</string>
</array>
<key>com.apple.security.exception.mach-lookup.global-name</key>
<array>
<string>com.apple.apsd</string>
</array>
<key>com.apple.security.exception.shared-preference.read-write</key>
<array>
<string>com.apple.AMPIDService</string>
</array>
<key>com.apple.security.ts.cloudkit-client</key>
<true/>
<key>com.apple.security.ts.tmpdir</key>
<string>com.apple.AMPIDService</string>
<key>platform-application</key>
<true/>
<key>seatbelt-profiles</key>
<array>
<string>temporary-sandbox</string>
</array>
</dict>
</plist>
