#!/usr/bin/env python
import os, sys, glob, subprocess, argparse
parser = argparse.ArgumentParser(description='Generate umbrella header for SiriInstrumentation.')
parser.add_argument('--umbrella-file', default="../SiriInstrumentation_Generated.h", help="Set the path to modify an umbrella header.")
parser.add_argument('--output-dir', default="../Generated", help="The path looked for output generated classes.")
def main():
    args = parser.parse_args()
    template = None
    with open('SiriInstrumentation_Generated.h.tmpl', 'r') as f:
        template = f.read()
    headers = sorted([os.path.basename(path) for path in glob.glob(os.path.join(args.output_dir, "*.h"))])
    enum_lines = []
    output_lines = []
    for header in headers:
        if header.endswith('GlobalEnums.h'):
            enum_lines.append(include_directive(header))
        else:
            output_lines.append(include_directive(header))
    final_output = template.replace('{{enum_headers}}', '\n'.join(enum_lines))
    final_output = final_output.replace('{{type_headers}}', '\n'.join(output_lines))
    with open(args.umbrella_file, 'w') as f:
        f.write(final_output)
def include_directive(filename):
    return '#import <SiriInstrumentation/{}>'.format(filename)
if __name__ == '__main__':
    sys.exit(main())
