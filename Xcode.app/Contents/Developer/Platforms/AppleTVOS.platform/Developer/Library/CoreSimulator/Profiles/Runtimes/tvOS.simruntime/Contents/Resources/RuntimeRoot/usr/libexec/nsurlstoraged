com.apple.MobileAsset.TopLevelDomainDafsa
-[TLDMobileAssetManager registerForNotification0:NotificationName:]_block_invoke
newAssetInstalledNotification
cachedAssetUpdatedNotification
v12@?0i8
-[TLDMobileAssetManager registerForNotifications]
-[TLDMobileAssetManager getAssetQueryResults:]
-[TLDMobileAssetManager findBestAssetFrom:]
-[TLDMobileAssetManager findBestAssetFrom:]_block_invoke
v16@?0@"NSError"8
-[TLDMobileAssetManager downloadAsset:]_block_invoke
v24@?0@"NSDictionary"8@"NSError"16
-[TLDMobileAssetManager downloadAsset:]
-[TLDMobileAssetManager moveInstalledAsset:withVersion:]
installedAssetVersion
TQ,V_installedAssetVersion
v8@?0
com.apple.MobileAsset.TopLevelDomainDafsa.new-asset-installed
com.apple.MobileAsset.TopLevelDomainDafsa.cached-metadata-updated
systemgroup.com.apple.nsurlstoragedresources
Library/dafsaData.bin
DafsaData.bin
%@/Cache.db
file-read-data
file-write-data
Unable to access path %s
realpath() returned NULL for %s
NetworkStorageDB:_openDBWriteConnections: failed to open write connection to DB @ %s.  Error=%d. Cause=%s
NetworkStorageDB:_openDBReadConnections: failed to open read connection to DB @ %s.  Error=%d. Cause=%s
NetworkStorageDB:openReadWriteConnection: failed to open read connection to DB @ %s.  Error=%d. Cause=%s
CLOSE-WRITE-ERROR: self=%p _dbWriteConnection=%p, result=%d
_closeDBWriteConnections: Trying to close the DB connection but unexpected results returned. result=%d
_closeDBWriteConnections: UNEXPECTED close result for sql write connection. result=%d
UNEXPECTED: close of sql read connection result=%d
dbPathDirectory
T@"NSString",&,V_dbPathDirectory
dbPathFile
T@"NSString",&,V_dbPathFile
isDBOpen
TB,V_isDBOpen
maxDBSize
Tq,V_maxDBSize
auditToken
T{?=[8I]},V_auditToken
Failed to allocate extension-token for path-=%@.  Errno:%d
Failed to consume the sandbox extension for path-=%@.  Errno:%d
persistentDB
T@"NSURLStorageURLCacheDB",&,V_persistentDB
xpcConnectionToRemoteEndpoint
T@"NSXPCConnection",&,V_xpcConnectionToRemoteEndpoint
sandboxExtensionData
T@"NSData",&,V_sandboxExtensionData
hash
TQ,R
superclass
T#,R
description
T@"NSString",R,C
debugDescription
com.apple.nsurlstorage-cache
ERROR: failed to decode data into dictionary for key=%@. Error=%@
v12@?0B8
v16@?0@"NSArray"8
memoryPressureSource
T@"NSObject<OS_dispatch_source>",&,V_memoryPressureSource
lastMemoryPressureEvent
TQ,V_lastMemoryPressureEvent
idleTime
Td,V_idleTime
clientBundleID
T@"NSString",&,N,V_clientBundleID
xpcConnection
T@"NSXPCConnection",R,W,V_xpcConnection
com.apple.nsurlstoraged.IdleExitTimerQueue
keyForRequest
T@"NSString",&,V_keyForRequest
NSURLWriteStorageTaskManager
cachedKeyAndDataToWrite
T@"NSMutableArray",&,N,V_cachedKeyAndDataToWrite
com.apple.nsurlstoraged.cache-metrics
CC11
Failed to allocate extension-token for path=%@.  Errno:%d
Failed to consume the sandbox extension for path=%@.  Errno:%d
NSURLStorageURLCacheDB-read-connection-lock
NSURLStorageURLCacheDB-write-connection-lock
com.apple.nsurlstoraged
PerformTimeRelativeLookups
CFNETWORK_STORAGED_TIMERELOFF
NetworkStorageURLCacheDB-openCacheDB: size of DB specified too small (%ld).  No persistent DB opened at %@.
NetworkStorageURLCacheDB-openAndPrepareWriteCacheDB_NoLock: size of DB specified too small (%ld).  No persistent DB opened at %@.
ERROR: failed to get the path to the FS cached data at %@
%@-shm
%@-wal
DEBUG: there is no SQL cache DB located at %@.
SELECT schema_version from cfurl_cache_schema_version
SCHEMA:  SQL schema version read failed. Recoverable error. rc=%d
The read-connection to the DB=%@ is NOT valid.  Unable to determine schema version.
PRAGMA auto_vacuum = 2;
ERROR: NSURLStorageURLCacheDB _setDBSchema: _dbWriteConnection=%p DB=%@ pragma auto vacuum - %s. ErrCode: %d.
PRAGMA journal_mode=WAL;
ERROR: NSURLStorageURLCacheDB _setDBSchema: DB=%@ pragma wal enable - %s. ErrCode: %d.
DROP table IF EXISTS cfurl_cache_schema_version;
ERROR: NSURLStorageURLCacheDB _setDBSchema: _dbWriteConnection=%p DB=%@ drop schema table - %s. ErrCode: %d.
CREATE table cfurl_cache_schema_version(schema_version INTEGER);
ERROR: NSURLStorageURLCacheDB _setDBSchema: DB=%@ version create - %s. ErrCode: %d.
DROP table IF EXISTS cfurl_cache_response;
CREATE table cfurl_cache_response(entry_ID INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE, 
 version INTEGER, hash_value INTEGER, storage_policy INTEGER, request_key TEXT UNIQUE, 
 time_stamp NOT NULL DEFAULT CURRENT_TIMESTAMP, partition TEXT);
ERROR: NSURLStorageURLCacheDB _setDBSchema: DB=%@ response create - %s. ErrCode: %d.
DROP table IF EXISTS cfurl_cache_blob_data;
CREATE table cfurl_cache_blob_data(entry_ID INTEGER PRIMARY KEY, response_object BLOB, request_object BLOB, 
  proto_props BLOB, user_info BLOB);
ERROR: NSURLStorageURLCacheDB _setDBSchema: DB=%@ blob_data create - %s. ErrCode: %d.
DROP table IF EXISTS cfurl_cache_receiver_data;
CREATE table cfurl_cache_receiver_data(entry_ID INTEGER PRIMARY KEY, isDataOnFS INTEGER, receiver_data BLOB);
ERROR: NSURLStorageURLCacheDB _setDBSchema: DB=%@ receiver_data create - %s. ErrCode: %d.
CREATE INDEX request_key_index ON cfurl_cache_response(request_key);
ERROR: NSURLStorageURLCacheDB _setDBSchema: DB=%@ index on request_key - %s. ErrCode: %d.
CREATE INDEX time_stamp_index ON cfurl_cache_response(time_stamp);
ERROR: NSURLStorageURLCacheDB _setDBSchema: DB=%@ table index on time_stamp - %s. ErrCode: %d.
CREATE INDEX proto_props_index ON cfurl_cache_blob_data(entry_ID);
ERROR: NSURLStorageURLCacheDB _setDBSchema: DB=%@ table index on blob_data - %s. ErrCode: %d.
CREATE INDEX receiver_data_index ON cfurl_cache_receiver_data(entry_ID);
ERROR: NSURLStorageURLCacheDB _setDBSchema: DB=%@ table index on receiver_data - %s. ErrCode: %d.
INSERT INTO cfurl_cache_schema_version VALUES (%d)
ERROR: NSURLStorageURLCacheDB _setDBSchema: DB=%@ table schema version - %s. ErrCode: %d.
ERROR: NSURLStorageURLCacheDB _setDBSchema: DB=%@ table schema version string - %s. ErrCode: %d.
INSERT into cfurl_cache_response (version, hash_value, storage_policy, 
 request_key, partition) VALUES (%q, %q, %q, %q, %q);
INIT-FAIL: _sqlInsertStmtResponse=%p, DB=%@, error-code:%d.
INSERT into cfurl_cache_blob_data (entry_ID, response_object, request_object,
 proto_props, user_info) 
 VALUES (%q, %q, %q, %q, %q);
INSERT into cfurl_cache_receiver_data (entry_ID, isDataOnFS, receiver_data) 
 VALUES (%q, %q, %q);
UPDATE cfurl_cache_response SET version=%q, hash_value=%q, storage_policy=%q, partition=%q
 WHERE entry_ID=%q;
UPDATE cfurl_cache_blob_data SET response_object=%q, request_object=%q,
 proto_props=%q, user_info=%q WHERE entry_ID=%q;
UPDATE cfurl_cache_receiver_data SET receiver_data=%q, isDataOnFS=%q WHERE entry_ID=%q;
SELECT r.entry_ID, d.receiver_data, d.isDataOnFS FROM cfurl_cache_response r, cfurl_cache_receiver_data d WHERE r.request_key=%q AND d.entry_ID=r.entry_ID
SELECT isDataOnFS,receiver_data FROM cfurl_cache_receiver_data WHERE entry_ID=%q
SELECT receiver_data from %s WHERE isDataOnFS > 0 AND entry_ID in 
 (SELECT entry_ID from cfurl_cache_response WHERE entry_ID > 0 ORDER BY time_stamp ASC LIMIT %q)
cfurl_cache_receiver_data
SELECT r.version, r.storage_policy, b.response_object, b.proto_props, d.isDataOnFS, d.receiver_data, b.request_object, b.user_info, r.time_stamp FROM cfurl_cache_response r, cfurl_cache_blob_data b, cfurl_cache_receiver_data d WHERE r.request_key=%q AND b.entry_ID=r.entry_ID AND b.entry_ID=d.entry_ID;
SELECT r.version, r.storage_policy, b.response_object, b.proto_props,d.isDataOnFS, d.receiver_data, b.request_object, b.user_info, r.request_key FROM cfurl_cache_response r, cfurl_cache_blob_data b, cfurl_cache_receiver_data d WHERE r.time_stamp=%q AND b.entry_ID=r.entry_ID AND b.entry_ID=d.entry_ID LIMIT 200;
DELETE from cfurl_cache_response WHERE entry_ID=%s;
DELETE from cfurl_cache_blob_data WHERE entry_ID=%s;
DELETE from cfurl_cache_receiver_data WHERE entry_ID=%s;
ERROR: the provided task-manager is not valid.  Cannot shrink.
writeDBwithCachedResponse - no hash key provided
writeDBwithCachedResponse - no storage policy provided
writeDBwithCachedResponse - no user info length provided
writeDBwithCachedResponse - no user info data provided
-[NSURLStorageURLCacheDB writeDBwithCachedResponse_NoLock:withKey:taskManager:]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CFNetwork_nsurlstorage_Sim/CFNetwork-973.1/NetworkStorages/Cache_Storage/NSURLStorageURLCacheDB.mm
lenUserInfo == CFDataGetLength(dataUserInfo)
writeDBwithCachedResponse - no receiver data length provided
writeDBwithCachedResponse - receiver data length mismatch
writeDBwithCachedResponse - no receiver data provided
writeDBwithCachedResponse - no response object length provided
writeDBwithCachedResponse - no response data provided
dataResponseObjectLength == CFDataGetLength(dataResponseObjectBytes)
writeDBwithCachedResponse - no request length provided
CC10
writeDBwithCachedResponse - no request data provided
dataRequestObjectLength == CFDataGetLength(dataRequestObjectBytes)
writeDBwithCachedResponse - no proto props length provided
CC12
writeDBwithCachedResponse - no proto props data provided
dataProtoPropsLength == CFDataGetLength(dataProtoPropsBytes)
CC13
writeDBwithCachedResponse - invalid partition value provided
writeDBwithCachedResponse-ERROR: %d bind of response version for item: %@
writeDBwithCachedResponse-ERROR: bind of hash for item: %@
writeDBwithCachedResponse-ERROR: bind of storage policy for item: %@
writeDBwithCachedResponse-ERROR: bind of key for item: %@
writeDBwithCachedResponse-ERROR: NO key for item: %@
writeDBwithCachedResponse-ERROR: bind of partition value for item: %@
writeDBwithCachedResponse-ERROR: bind of 0 partition value for item: %@
writeDBwithCachedResponse-ERROR with UPDATE for item: %@.  Error-code:%d
ERROR: writeDBwithCachedResponse -bind Receiver-receiverData: %d
ERROR: failed to write cached response to %@. Falling back to old persistent store mechanism.
INSERT: ERROR: unable to obtain the persistent store directory.
writeDBwithCachedResponse-stored into DB FAILED-for item: %@. Error-code=%d
writeDBwithCachedResponse-ERROR: task-mgr=%@ (_dbWriteConnection=%p) insert SQL stmnt. is nil for storage: %@
ERROR: unable to allocate receiver data.
BEGIN IMMEDIATE
SELECT receiver_data, entry_ID from cfurl_cache_receiver_data WHERE isDataOnFS > 0 AND entry_ID in 
 (SELECT entry_ID from cfurl_cache_response WHERE entry_ID > 0 ORDER BY time_stamp ASC LIMIT %d)
ERROR: shrinkDB - shrink of file system cache did not fully complete.  Result: %d
DELETE from %s WHERE entry_ID in (%s)
cfurl_cache_blob_data
cfurl_cache_response
SELECT entry_ID from cfurl_cache_receiver_data WHERE isDataOnFS < 1 AND entry_ID in 
 (SELECT entry_ID from cfurl_cache_response WHERE entry_ID > 0 ORDER BY time_stamp ASC LIMIT %d)
COMMIT
PRAGMA incremental_vacuum(500);
ERROR: shrinkDB - unable to start a DB transaction.  Error-code=%d
'%@'
SELECT receiver_data from cfurl_cache_receiver_data WHERE isDataOnFS > 0 AND entry_ID in 
 (SELECT entry_ID from cfurl_cache_response WHERE request_key=%s AND partition=%s)
SELECT receiver_data from cfurl_cache_receiver_data WHERE isDataOnFS > 0 AND entry_ID in 
 (SELECT entry_ID from cfurl_cache_response WHERE request_key=%s)
'%%%@%%'
DELETE from cfurl_cache_receiver_data WHERE entry_ID in 
 (SELECT entry_ID from cfurl_cache_response WHERE request_key like %s AND 
 partition='%s')
DELETE from cfurl_cache_receiver_data WHERE entry_ID in 
 (SELECT entry_ID from cfurl_cache_response WHERE request_key like %s)
DELETE from cfurl_cache_blob_data WHERE entry_ID in
 (SELECT entry_ID FROM cfurl_cache_response WHERE request_key like %s AND 
 partition='%s')
DELETE from cfurl_cache_blob_data WHERE entry_ID in
 (SELECT entry_ID FROM cfurl_cache_response WHERE request_key like %s)
DELETE from cfurl_cache_response WHERE request_key like %s AND 
 partition='%s'
DELETE from cfurl_cache_response WHERE request_key like %s
deleteAllHostNames - ERROR(%d): %s
pragma wal_checkpoint;
ERROR:  did not get an result array to write into.
ERROR:  cannot create cannonical URL from %@
ERROR:  unable to create a URL from string.
ERROR:  unable to create string URL.
ERROR:  did not get an result from the select.
SELECT request_key FROM cfurl_cache_response WHERE partition='%s'
SELECT request_key from cfurl_cache_response
ERROR:  unable to create a string to hold the partition name.  Tried to allocate a %d string.
INFO: did not get an result from the select for partition names.
SELECT partition FROM cfurl_cache_response
SELECT receiver_data from cfurl_cache_receiver_data WHERE isDataOnFS > 0 AND entry_ID in (SELECT entry_ID FROM cfurl_cache_response WHERE time_stamp >= "%s")
ERROR: NSURLStorageURLCacheDB deleteResponsesSinceDate: dbConnection=%p DB=%@ Select for FS data failed:%s ErrCode: %d.
BEGIN IMMEDIATE;
ERROR: NSURLStorageURLCacheDB deleteResponsesSinceDate: dbConnection=%p DB=%@ Begin transaction failed:%s ErrCode: %d.
DELETE from cfurl_cache_receiver_data WHERE entry_ID in (SELECT entry_ID FROM cfurl_cache_response WHERE time_stamp >= "%s")
ERROR: NSURLStorageURLCacheDB deleteResponsesSinceDate: dbConnection=%p DB=%@ Delete failed:%s ErrCode: %d.
DELETE from cfurl_cache_blob_data WHERE entry_ID in (SELECT entry_ID FROM cfurl_cache_response WHERE time_stamp >= "%s")
DELETE from cfurl_cache_response WHERE time_stamp >= "%s"
COMMIT;
ERROR: NSURLStorageURLCacheDB deleteResponsesSinceDate: dbConnection=%p DB=%@ Commit transaction failed:%s ErrCode: %d.
ERROR: NSURLStorageURLCacheDB deleteResponsesSinceDate: dbConnection=%p DB=%@ Vacuum failed:%s ErrCode: %d.
PRAGMA wal_checkpoint;
ERROR: NSURLStorageURLCacheDB deleteResponsesSinceDate: dbConnection=%p DB=%@ Pragma checkpoint failed:%s ErrCode: %d.
ERROR: NSURLStorageURLCacheDB deleteAllResponses: dbConnection=%p DB=%@ Truncate Database failed:%s ErrCode: %d.
ERROR: stepSQLStatement:toCompletionWithRetry - nil statement, nothing to step.
Error: stepSQLStatement:toCompletionWithRetry - stepping returned unhandled result=%d, DB=%@
Error: execSQLStatement:onConnection:toCompletionWithRetry:writeLockHelp - SQL=%s, error-code=%d, error-message=%s
ERROR: _purgeAllFileSystemCacheData - failed to get the path to the FS cached data at %@
BEGIN IMMEDIATE TRANSACTION;
COMMIT TRANSACTION;
PRAGMA secure_delete=true;
ERROR: _activateSecureDelete: DB=%@ failed to set PRAGMA secure_delete=true - %s. ErrCode: %d.
currentFSBackedUsage
TQ,V_currentFSBackedUsage
currentSQLiteDBUsage
TQ,V_currentSQLiteDBUsage
currentTotalPersistentCacheUsage
TQ,V_currentTotalPersistentCacheUsage
minSizeForFileSystemBackedCacheItem
Tq,V_minSizeForFileSystemBackedCacheItem
performingShrink
TC,V_performingShrink
recentTimeStampLookups
T@"NSMutableSet",&,VrecentTimeStampLookups
performTimeRelativeLookups
TC,VperformTimeRelativeLookups
T@"NSString",&,N,V_key
dictData
T@"NSDictionary",&,N,V_dictData
NetworkStorageTaskWrite-run: no cached response or request.  Told to write but nothing was provided to persist.
%s: <%p>:: %s
%s: <%p>
%s: No asset information yet
%s: Error updating asset metadata: %@
%s: Empty results for asset update query
%s: Asset (state %ld  Version %ld),  Current version %ld,  best installed version %ld,  best not installed version %ld
Asset version %lu has compatibilty version set to %lu. Not supported on the current OS
%s: Purging asset version %@
%s: Failed to purge the asset with version %@
%s: Asset version %@ purged
%s: Download best not installed asset ver %lu
%s: Read installed asset ver %lu
%s: Asset download completed. Asset Version downloaded is %lu
%s: Asset download failed - error %@
%s: Asset download status %@
%s: Asset download requested
Reading from a file at location %@ failed. Error is %@ [%ld]
Writing to file at location %@ failed. Error is %@ [%ld]
The file contents of dafsa file are not the same as the mobile asset file
%s: Read Asset at %@
Error reading the TLD Asset version
TLD versions different. Old: [%u] New: [%d]  
Unable to get the system container for nsurlstoraged
Error getting the system group container for Group ID %@ 
handleAssetChangeNotification
registerForNotification0:NotificationName:
getAssetQueryResults:
findBestAssetFrom:
alloc
initWithAssetType:
setQueriesLocalAssetInformationOnly:
runQueryAndReturnError:
code
count
installedAssetVersion
countByEnumeratingWithState:objects:count:
attributes
objectForKeyedSubscript:
intValue
state
purge:
downloadAsset:
moveInstalledAsset:withVersion:
objectForKey:
isEqualToString:
setProgressHandler:
beginDownloadWithOptions:
dataWithContentsOfURL:options:error:
localizedDescription
writeToFile:options:error:
dataWithContentsOfFile:
isEqual:
defaultManager
removeItemAtPath:error:
setInstalledAssetVersion:
localURL
stringWithCString:encoding:
URLByAppendingPathComponent:
moveFileAtomicallyAndCheckIntegrity:toLocation:
registerForNotifications
_installedAssetVersion
init
UTF8String
path
fileURLWithFileSystemRepresentation:isDirectory:relativeToURL:
setMaxDBSize:
setIsDBOpen:
copy
setDbPathDirectory:
stringWithFormat:
setDbPathFile:
setAuditToken:
initWithDBPath:maxSize:auditToken:
_closeDB
dealloc
fileExistsAtPath:
fileSystemRepresentation
stringByDeletingLastPathComponent
auditToken
checkAccessToDatabaseFile
cStringUsingEncoding:
isDBOpen
lock
unlock
_closeDBReadConnections
_closeDBWriteConnections
initWithDBPath:maxSize:auditToken:schemaCheck:
_openDBWriteConnections
_openDBReadConnections
openReadWriteConnection
closeConnection:
.cxx_destruct
dbPathDirectory
dbPathFile
maxDBSize
_dbReadConnection
_dbWriteConnection
_dbReadConnectionLock
_dbWriteConnectionLock
_isDBOpen
_dbPathDirectory
_dbPathFile
_maxDBSize
_auditToken
initWithTaskManager:
setQueuePriority:
setQualityOfService:
beginXPCTransaction
persistentDB
copyAllPartitionNames
endXPCTransaction
addExecutionBlock:
addOperation:
runWithCompletion:
setPersistentDB:
setSandboxExtensionData:
length
getBytes:length:
cleanupAndShutdown_Lock
getcurrentTotalPersistentCacheUsage
initWithPersistentPath:maxSize:sandboxExtension:auditToken:
updateFileSystemUsageCounters
xpcConnectionToRemoteEndpoint
setXpcConnectionToRemoteEndpoint:
sandboxExtensionData
_sandboxExtensionHandle
_persistentDB
_xpcConnectionToRemoteEndpoint
_sandboxExtensionData
deleteResponseForRequestWithKey:
initWithRequestKey:andTaskManager:
_key
createStorageTaskManagerForPath:maxSize:extension:
addCachedResponseWithDictionary:key:
deleteResponseForRequestWithKey:completionHandler:
deleteAllResponses
deleteResponsesSinceDate:
deleteAllHostNames:forOptionalPartition:
copyAllHostNamesForOptionalPartition:completionHandler:
copyAllPartitionNamesWithCompletionHandler:
setMaxSize:
currentDiskUsageWithCompletionHandler:
setMinSizeForVMCachedResource:
performSchemaCheckAndUpdate
totalBytesWrittenToDiskWithCompletionHandler:
flushWithCompletionHandler:
interfaceWithProtocol:
setExportedInterface:
initWithConnection:
setExportedObject:
notifyCachedURLResponseBecameFileBacked:filePath:forUUID:
notifyCacheClientOfTimeRelativeResponses:
setRemoteObjectInterface:
remoteObjectInterface
class
setWithObjects:
setClasses:forSelector:argumentIndex:ofReply:
cleanupTaskManagers
setInvalidationHandler:
setInterruptionHandler:
setupMemoryPressureHandler
resume
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
description
debugDescription
listener:shouldAcceptNewConnection:
initWithMachServiceName:
setDelegate:
beginTransaction
_resetIdleExitTimer
endTransaction
_netStorageXPCObjectHandlerLock
cancelAllOperations
date
timeIntervalSinceReferenceDate
touchIdleExitTimer
lastMemoryPressureEvent
memoryPressureSource
setLastMemoryPressureEvent:
idleTime
xpcConnection
invalidate
touchTimers
currentConnection
initWithPath:size:auditToken:sandboxExtension:
initWithTaskManager:cacheData:key:
clientBundleID
recordCacheWrite:bundleID:
removeAllPendingWriteItems
initWithDate:andTaskManager:
initWithHostNames:optionalPartition:andTaskManager:
initWithOptionalPartition:andTaskManager:
setMinSizeForFileSystemBackedCacheItem:
isSchemaCurrent
updateToCurrentSchema
blockOperationWithBlock:
operations
addDependency:
setMemoryPressureSource:
setIdleTime:
setClientBundleID:
_readTaskManager
_writeTaskManager
_xpcConnection
_memoryPressureSource
_lastMemoryPressureEvent
_idleTime
_clientBundleID
keyForRequest
setKeyForRequest:
_taskManager
_keyForRequest
_date
operationCount
setPerformingShrink:
shrinkDB
updateFSBackedCacheUsageOnDisk
updateSQLiteDBCacheUsageOnDisk
setCacheDBInstanceToUpdateAfterShrink:
_cacheDBInstanceToUpdate
copyHostNamesForOptionalPartition:
_partition
array
setMaxConcurrentOperationCount:
removeAllObjects
cachedKeyAndDataToWrite
setCachedKeyAndDataToWrite:
_cachedKeyAndDataToWrite
unsignedLongLongValue
numberWithUnsignedLongLong:
setObject:forKeyedSubscript:
timeIntervalSinceDate:
newMetricContainerWithIdentifier:
setBundleID:
setTotalBytesWritten:
setMetric:
submitMetric:
dictionary
initWithComponentId:andBlockOnConfiguration:
initWithTaskManager:path:size:
_dbPath
_dbSize
_token
openAndPrepareReadCacheDB
_hostNames
initWithCapacity:
setName:
setWithCapacity:
setRecentTimeStampLookups:
openAndPrepareWriteCacheDB_NoLock
_setDBSchemaAndPragmas
standardUserDefaults
persistentDomainForName:
boolValue
setPerformTimeRelativeLookups:
_finalizeAllDBStatements
_finalizeWriteConnectionDBStatements
_activateSecureDelete
_prepareDBInsertUpdateStatements
_prepareDBDeleteStatements
_prepareDBSelectStatements
attributesOfItemAtPath:error:
integerValue
currentTotalPersistentCacheUsage
execSQLStatement:onConnection:toCompletionWithRetry:writeLockHeld:
cleanupWriteConnections_NoLock
_finalizeDBSelectStatements
_finalizeDBInsertUpdateStatements
_finalizeDBDeleteStatements
performingShrink
stepSQLStatement:toCompletionWithRetry:
getEntryIDandReceiverDataForRequestKey:
getMinSizeForVMCachedResource
currentFSBackedUsage
setCurrentFSBackedUsage:
initWithString:
remoteObjectProxy
setCurrentTotalPersistentCacheUsage:
_ensureDBCapacityConstraints:
minSizeForFileSystemBackedCacheItem
componentsJoinedByString:
addObject:
openCacheDB
_purgeAllFileSystemCacheData
_prepareDBStatements
writeDBwithCachedResponse_NoLock:withKey:taskManager:
beginTransaction_NoLock
commitTransaction_NoLock
writeLock
writeUnlock
recentTimeStampLookups
performTimeRelativeLookups
currentSQLiteDBUsage
setCurrentSQLiteDBUsage:
_sqlUpdateReceiverDataStmt
_sqlInsertStmtResponse
_sqlInsertStmtBlobData
_sqlInsertStmtReceiverData
_sqlUpdateResponseStmt
_sqlUpdateBlobDataStmt
_sqlSelectStmt
_sqlSelectEntry_idAndRecevierDataForKeyStmt
_sqlSelectIsDataOnFSForEntry_IDStmt
_sqlSelectFileSystemFileForDeletionStmt
_sqlSelectTimeStmt
_sqlDeleteStmtResponse
_sqlDeleteStmtBlobData
_sqlDeleteStmtReceiverData
_schemaVersion
_entryIDsToDelete
_timeRelativeLookupLock
_performingShrink
_currentFSBackedUsage
_currentSQLiteDBUsage
_currentTotalPersistentCacheUsage
_minSizeForFileSystemBackedCacheItem
initWithKey:dictData:
writeCacheItemWithKey:dictData:
setKey:
dictData
setDictData:
_dictData
arrayWithArray:
removeObjectsInRange:
processWriteItems:
_cacheData
TLDMobileAssetManager
NSURLStorageDB
NSURLStorageTaskCopyAllPartitionNames
NSURLStorageTaskManager
NSURLStorageTaskDeleteResponseForRequest
NetworkStorageXPCProtocol
NSURLStorageCacheClient
NetStorageXPCListenerDelegate
NSXPCListenerDelegate
NSObject
NetStorageXPCObjectHandler
NSURLStorageTask
NSURLStorageTaskDeleteResponsesSinceDate
NSURLStorageTaskDeleteAllResponses
NSURLStorageTaskShrink
NSURLStorageTaskCopyHostNames
NSURLWriteStorageTaskManager
NetworkStorageAWDReporter
NSURLStorageTaskSchemaCheck
NSURLReadStorageTaskManager
NSURLStorageTaskDeleteHostNames
NSURLStorageURLCacheDB
WriteCacheItem
NSURLStorageTaskWrite
v32@0:8^i16r*24
v16@0:8
@20@0:8B16
v24@0:8@16
v32@0:8@16@24
v32@0:8@16Q24
Q16@0:8
v24@0:8Q16
@16@0:8
@64@0:8@16q24{?=[8I]}32
@68@0:8@16q24{?=[8I]}32B64
B16@0:8
^{sqlite3=}16@0:8
v24@0:8^{sqlite3=}16
v20@0:8B16
q16@0:8
v24@0:8q16
{?=[8I]}16@0:8
v48@0:8{?=[8I]}16
^{sqlite3=}
@"NSLock"
@"NSString"
{?="val"[8I]}
@24@0:8@16
v24@0:8@?16
@72@0:8@16q24@32{?=[8I]}40
@"NSURLStorageURLCacheDB"
@"NSXPCConnection"
@"NSData"
@32@0:8@16@24
v40@0:8@16q24@32
v32@0:8@16@?24
v40@0:8@"NSString"16q24@"NSData"32
v32@0:8@"NSDictionary"16@"NSString"24
v32@0:8@"NSString"16@?<v@?B>24
v24@0:8@"NSDate"16
v32@0:8@"NSArray"16@"NSString"24
v32@0:8@"NSString"16@?<v@?@"NSArray">24
v24@0:8@?<v@?@"NSArray">16
v24@0:8@?<v@?q>16
v24@0:8@?<v@?Q>16
v24@0:8@?<v@?>16
v40@0:8@16@24@32
v40@0:8@"NSString"16@"NSString"24@"NSString"32
v24@0:8@"NSArray"16
B24@0:8@16
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
B32@0:8@16@24
B32@0:8@"NSXPCListener"16@"NSXPCConnection"24
d16@0:8
v24@0:8d16
@"NSURLReadStorageTaskManager"
@"NSURLWriteStorageTaskManager"
@"NSObject<OS_dispatch_source>"
@"NSURLStorageTaskManager"
@"NSDate"
@"NSMutableArray"
@40@0:8@16@24q32
@72@0:8@16q24{?=[8I]}32@64
@40@0:8@16@24@32
@"NSArray"
B40@0:8@16@24@32
^{_entry_idAndRecevierDataInfo=q*iB}24@0:8r*16
i32@0:8^{sqlite3_stmt=}16q24
i44@0:8r*16^{sqlite3=}24q32B40
C16@0:8
v20@0:8C16
^{sqlite3_stmt=}
@"NSMutableSet"
@"NSDictionary"
@(#)PROGRAM:nsurlstoraged  PROJECT:CFNetwork-973.1
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>com.apple.private.assets.accessible-asset-types</key>
<array>
<string>com.apple.MobileAsset.TopLevelDomainDafsa</string>
</array>
<key>com.apple.private.security.storage.HomeKit</key>
<true/>
<key>com.apple.private.security.storage.cookies</key>
<true/>
<key>com.apple.security.system-groups</key>
<array>
<string>systemgroup.com.apple.nsurlstoragedresources</string>
</array>
<key>mach-issue-extension</key>
<true/>
<key>seatbelt-profiles</key>
<array>
<string>nsurlstoraged</string>
</array>
</dict>
</plist>
