service starting...
com.apple.managedconfiguration.teslad
awaiting connections...
service stopping.
dstKey
T@"NSString",&,N,V_dstKey
srcKey
T@"NSString",&,N,V_srcKey
srcGroupKey
T@"NSString",&,N,V_srcGroupKey
required
TB,N,V_required
requiresNegation
TB,V_requiresNegation
https
isRequired
name
T@"NSString",&,N,V_name
TB,N,V_isRequired
validationInfo
T@"NSDictionary",&,N,V_validationInfo
v8@?0
rejecting connection because it came too soon since the last one
com.apple.managedconfiguration.teslad-access
rejecting connection because it is not entitled to use this service!
hash
TQ,R
superclass
T#,R
description
T@"NSString",R,C
debugDescription
Accepted new connection.
idling
idleTimer
T@"NSTimer",&,N,V_idleTimer
lastConnectionTimestamp
TQ,V_lastConnectionTimestamp
machTimeScaleFactor
Td,V_machTimeScaleFactor
NONCE_EXPIRED
Dealloc MCTeslaServicerServer
Invalidating and canceling the session
CLOUD_CONFIG_INTERNAL_ERROR
CLOUD_CONFIG_ABSINTHE_ERROR_P_OSSTATUS
CLOUD_CONFIG_BAD_FORMAT_ERROR
CLOUD_CONFIG_MAX_RETRIES_EXCEEDED
CLOUD_CONFIG_INVALID_DEVICE_ERROR
CLOUD_CONFIG_SERVER_DOWN_ERROR
CLOUD_CONFIG_SERVER_BUSY_ERROR
CLOUD_CONFIG_DAEMON_BUSY_ERROR
CLOUD_CONFIG_SERVER_TRUST_ERROR
CLOUD_CONFIG_NONCE_EXPIRED
action
RequestProfileConfiguration
Initial
Fetching certificate
Fetching configuration
Fetching session info
Waiting to retry certificate fetch
Waiting to retry session info fetch
Waiting to retry configuration fetch
Initialize session
Establish session
Done
Failed
Invalid state
Provisional Enrollment Request
Fetch Profile Configuration Request
Unenroll Request
Fetch Profile Configuration Request (in Absinthe)
Cloud configuration field %@.%@ failed validation!
No enrollment type information. There needs to be a %@ section in the response.
Enrollment type: %@
Enrollment expiry date is received: %@
No expiry date received
Legacy fetch configuration
Loading cloud configuration from defaults...
Retrieve client certificate for %@
teslad is busy and no completion block is passed. Exiting...
Starting HTTP request to URL: %@ Headers: %@
Retrying the request
Transitioning states %@ ==> %@
Failed to initialize Absinthe, err = %d
Start certificate fetch
Failed to retrieve the client certificate: %@.
Certificate and the reference key retrieved
Certificate or the reference key NOT retrieved!! 
v32@?0@8@"NSArray"16@"NSError"24
Nonce token missing
We shouldn't end up here
Error establishing provisional enrollment: %@
Starting the URL request for provisional enrollment
Nil request. Shouldn't end up here.
No request payload. Shouldn't end up here.
POST
Sending failure response back to client
Configuration: %@
Unable to decode Tesla response!
error-code
No Tesla configuration for this device: %@
Validating cloud configuration
Cloud configuration is bad
Sending configuration data back to client
Cloud configuration is invalid.
Provisional Enrollment Response: %@
Unable to decode Tesla provisional enrollment response!
Validating provisional enrollment response
Provisional Enrollment response is does not have the required fields
Sending provisional enrollment data back to client
Retry-After
Response Headers: %@
PE DEBUG: Canceling datatask ******: %@
Tesla server busy; wait time is about %.0f seconds
Received response %d for request to %@
Got %d response in state %@
Response 400
Response 401
Response 503
Response 500
Response %lu
Response 404, fallback to Absinthe
text/plain
Error response for provisional enrollment: %@
connection failed in state %@, error: %@, responseCode: %lu
Profile configuration request did fail with error. Error: %@
Do not send a failure notice to remote. Fallback to Absinthe.
Unenroll request did fail with error. Error: %@
remoteProcessConnection
T@"NSXPCConnection",&,N,V_remoteProcessConnection
completionBlock
T@?,C,N,V_completionBlock
userAgentString
T@"NSString",R,N,V_userAgentString
certificateURL
T@"NSURL",R
sessionURL
profileURL
state
Tq,N,V_state
requestType
Tq,N,V_requestType
certFetchCount
Tq,N,V_certFetchCount
sessionKeyFetchCount
Tq,N,V_sessionKeyFetchCount
configFetchCount
Tq,N,V_configFetchCount
certificateRetrievalRequestCount
Tq,N,V_certificateRetrievalRequestCount
provisionalEnrollmentRequestCount
Tq,N,V_provisionalEnrollmentRequestCount
context
T^v,N,V_context
timeoutTimer
T@"NSTimer",&,N,V_timeoutTimer
isDaemonBusy
TB,N,V_isDaemonBusy
certificateRetrievalFailed
TB,N,V_certificateRetrievalFailed
responseContentType
T@"NSString",&,N,V_responseContentType
urlSession
T@"NSURLSession",&,N,V_urlSession
retryAfterInterval
Td,N,V_retryAfterInterval
fatalError
T@"NSError",&,N,V_fatalError
certificate
T@"NSMutableData",&,N,V_certificate
sessionRequestInfo
T@"NSData",&,N,V_sessionRequestInfo
sessionInfo
T@"NSMutableData",&,N,V_sessionInfo
configurationData
T@"NSMutableData",&,N,V_configurationData
error
T@"NSError",&,N,V_error
nonce
T@"NSString",&,N,V_nonce
provisionalEnrollmentResponse
T@"NSMutableData",&,N,V_provisionalEnrollmentResponse
profileConfigurationResponse
T@"NSMutableData",&,N,V_profileConfigurationResponse
unenrollResponse
T@"NSMutableData",&,N,V_unenrollResponse
MCCloudConfigCertificateURL
MCCloudConfigSessionURL
MCCloudConfigProfileURL
MCCloudConfigAcceptAnyHTTPSCertificate
MCCloudConfigProfileData
https://iprofiles.apple.com/resource/certificate.cer
https://iprofiles.apple.com/session
https://iprofiles.apple.com/profile
https://deviceenrollment.apple.com/v2/enroll
https://iprofiles.apple.com/v2/profile
https://iprofiles.apple.com/v2/unenroll
department
address
phone
magic
email
support-phone-number
config
is-supervised
allow-pairing
is-mandatory
is-mdm-removable
await-device-configured
anchor-certs
supervising-host-cert
supervision-host-certs
skip-buddy-items
is-multi-user
auto-advance-setup
sysdiagnose-upload-url
enrollment
expiry
enrollment_type
ce_expiry_ts
X-Profile-Protocol-Version
User-Agent
Content-Type
Content-Length
 (%@)
ConfigClient/1.0%@
; %@
payload
payload_signature
sign_cert
intermediate_cert
Retrieve Client Certificate.
Signing the payload with the private key...
Failed to create signature: %s
No private key, can't sign the payload
Error while signing the request payload
No serial request data
Unknown error while serializing the request dictionary
Setting up the request.
Couldn't build up the URL from string: %@
No certificate, can't do the request
Cloud configuration is valid.
RequestProvisionalEnrollment
RequestUnenrollProvisionalDevice
device
serial_number
udid
/BuildRoot/Library/Caches/com.apple.xbs/Sources/ManagedConfigurationTools_Sim/ManagedConfiguration-1499/teslad/MCTeslaRequestPayload.m
<Unknown File>
Payload action needs to be overriden by the subclasses.
dictionary
T@"NSDictionary",R,N
T@"NSString",R,N
MCTeslaProvisionalEnrollmentURL
MCTeslaProfileConfigurationURL
MCTeslaUnenrollURL
/var/root/absinthe_stub.plist
Unable to read Absinthe stub configuration file
WARNING: ABSINTHE STUB IN USE; NOT FOR PRODUCTION USE!
expectedCertificate
expectedSessionInfo
[%@]
deviceID
sessionInfoRequest
stubInfo
T@"NSDictionary",&,N,V_stubInfo
readyToSign
TB,N,V_readyToSign
sessionRequest
T@"NSData",R,N
T@"NSData",&,N,V_certificate
session
T@"NSData",&,N,V_session
Create signature
Failed to copy public key.
Verify signature
Failed to verify signature: %s
Signature verified
validationType
destinationKey
***********
Cloud Config Key Name: %@
Required: %@
Validation Type: %@
Destination Key: %@
***********
TQ,N,V_validationType
T@"NSString",&,N,V_destinationKey
keyInfo
Validation error in the following part of cloud config dictionary: 
Validation information: %@
T@"NSArray",&,N,V_keyInfo
alloc
initWithMachServiceName:
sharedGatekeeper
setDelegate:
resume
invalidate
initWithDestinationKey:sourceKey:group:isRequired:
init
setDstKey:
setSrcKey:
setSrcGroupKey:
setRequired:
initWithBase64EncodedString:options:
ruleForDstKey:srcKey:group:isRequired:
applyRuleToCloudConfiguration:withResultDictionary:
decodeCertificateFromBase64String:
.cxx_destruct
srcKey
srcGroupKey
dstKey
required
_required
_srcKey
_srcGroupKey
_dstKey
objectForKeyedSubscript:
class
isKindOfClass:
setObject:forKeyedSubscript:
array
countByEnumeratingWithState:objects:count:
addObject:
setRequiresNegation:
requiresNegation
boolValue
numberWithBool:
ruleForDstKey:srcKey:group:isRequired:requiresNegation:
_requiresNegation
dictionary
URLWithString:
scheme
isEqualToString:
name
isRequired
validateSelfUsingValidationInfoWithDictionary:resultsDictionary:
initWithName:validationInfo:
validateSelfWithDictionary:resultsDictionary:
setName:
setIsRequired:
validationInfo
setValidationInfo:
_isRequired
_name
_validationInfo
action
resetIdleTimer
setLastConnectionTimestamp:
setMachTimeScaleFactor:
lastConnectionTimestamp
machTimeScaleFactor
valueForEntitlement:
isEqual:
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
description
debugDescription
provisionallyEnrollWithNonce:completionBlock:
fetchConfigurationWithCompletionBlock:
unenrollWithCompletionBlock:
interfaceWithProtocol:
setExportedInterface:
initWithXPCConnection:
setExportedObject:
idleTimer
dateWithTimeIntervalSinceNow:
idleTimerDidFire:
initWithFireDate:interval:target:selector:userInfo:repeats:
setIdleTimer:
mainRunLoop
addTimer:forMode:
listener:shouldAcceptNewConnection:
_idleTimer
_lastConnectionTimestamp
_machTimeScaleFactor
arrayWithObjects:count:
setRemoteProcessConnection:
setState:
context
setContext:
timeoutTimer
setTimeoutTimer:
urlSession
invalidateAndCancel
setUrlSession:
dealloc
MCErrorWithDomain:code:descriptionArray:errorType:
errorWithDomain:code:userInfo:
numberWithInteger:
MCErrorWithDomain:code:descriptionArray:underlyingError:errorType:
standardUserDefaults
stringForKey:
dictionaryWithObjects:forKeys:count:
requestType
validateCloudConfiguration:withResultDictionary:
cloudValidationRules
doubleValue
state
setIsDaemonBusy:
setCompletionBlock:
defaultSessionConfiguration
mainQueue
sessionWithConfiguration:delegate:delegateQueue:
dataUsingEncoding:
mutableCopy
setConfigurationData:
enterState:
daemonBusyError
isDaemonBusy
setRequestType:
setCertificateRetrievalFailed:
descriptionForRequest:
retrieveClientCertificate
setNonce:
_startRequestWithRequestType:completionBlock:
setFatalError:
retryIntervalForState:
setRetryAfterInterval:
dataTaskWithRequest:
allHTTPHeaderFields
internalError
setError:
certFetchCount
setCertFetchCount:
maxRetriesExceededError
sessionKeyFetchCount
setSessionKeyFetchCount:
configFetchCount
setConfigFetchCount:
certificateRetrievalRequestCount
setCertificateRetrievalRequestCount:
startRetryTimerWithInterval:
completionBlock
legacyFetchConfigurationWithCompletionBlock:
descriptionForState:
startCertificateFetch
initializeAbsinthe
startSessionKeyFetch
establishAbsintheSession
startConfigurationFetch
sendConfigurationInfoToRemote
retryAfterInterval
sendFailureNoticeToRemote
certificate
bytes
length
dataWithBytes:length:
base64EncodedStringWithOptions:
setSessionRequestInfo:
absintheErrorWithOSStatus:
sessionInfo
initWithData:encoding:
retrySessionKeyFetchIfAllowedAfterDelay:orFailWithError:
data
setCertificate:
certificateURL
requestWithURL:cachePolicy:timeoutInterval:
startURLRequest:
MCVerboseDescription
retryCertificateRetrievalIfAllowedAfterDelay:orFailWithError:
establishRequestWithPrivateKey:clientCertificates:
retrieveClientCertificateWithCompletion:
setProvisionalEnrollmentResponse:
nonce
setProfileConfigurationResponse:
setUnenrollResponse:
requestWithPayload:URL:privateKey:clientCertificates:outError:
setSessionInfo:
sessionURL
setHTTPMethod:
sessionRequestInfo
setHTTPBody:
userAgentString
setValue:forHTTPHeaderField:
profileRequestDictionary
dataWithJSONObject:options:error:
profileURL
initWithURL:cachePolicy:timeoutInterval:
error
_callCompletionBlockWithWasSuccessful:responseDictionary:error:
configurationData
JSONObjectWithData:options:error:
badFormatError
convertCloudConfigDictionary:toManagedConfiguration:
profileConfigurationResponse
provisionalEnrollmentResponse
validateProvisionalEnrollmentResponse:
statusCode
allHeaderFields
integerValue
setResponseContentType:
protectionSpace
authenticationMethod
serverTrust
objectForKey:
boolForKey:
serverTrustError
cancel
legacyStorageWithDataTask:didReceiveData:
unenrollResponse
appendData:
fallbackToAbsintheWithDataFetch:didFailWithError:
dataFetchCompleted:
teslaServiceDownError
invalidDeviceError
teslaServiceBusyError
retryConfigurationFetchIfAllowedAfterDelay:orFailWithError:
response
parseURLResponse:
currentRequest
legacyDataFetchCompletedWithResponseCode:
sendProvisionalEnrollmentInfoToRemote
_checkForSpecificProvisionalEnrollmentErrors
sendProfileConfigurationInfoToRemote
sendUnenrollmentSucceededInfoToRemote
responseContentType
containsString:
whitespaceCharacterSet
stringByTrimmingCharactersInSet:
nonceExpiredError
retryCertificateFetchIfAllowedAfterDelay:orFailWithError:
fatalError
legacyShouldRetry:orFailWithError:
timeoutTimerDidFire:
legacyTimeoutTimerDidFire:
certificateRetrievalFailed
URLSession:didBecomeInvalidWithError:
URLSession:didReceiveChallenge:completionHandler:
URLSessionDidFinishEventsForBackgroundURLSession:
URLSession:task:willBeginDelayedRequest:completionHandler:
URLSession:taskIsWaitingForConnectivity:
URLSession:task:willPerformHTTPRedirection:newRequest:completionHandler:
URLSession:task:didReceiveChallenge:completionHandler:
URLSession:task:needNewBodyStream:
URLSession:task:didSendBodyData:totalBytesSent:totalBytesExpectedToSend:
URLSession:task:didFinishCollectingMetrics:
URLSession:task:didCompleteWithError:
URLSession:dataTask:didReceiveResponse:completionHandler:
URLSession:dataTask:didBecomeDownloadTask:
URLSession:dataTask:didBecomeStreamTask:
URLSession:dataTask:didReceiveData:
URLSession:dataTask:willCacheResponse:completionHandler:
remoteProcessConnection
provisionalEnrollmentRequestCount
setProvisionalEnrollmentRequestCount:
_isDaemonBusy
_certificateRetrievalFailed
_remoteProcessConnection
_completionBlock
_userAgentString
_state
_requestType
_certFetchCount
_sessionKeyFetchCount
_configFetchCount
_certificateRetrievalRequestCount
_provisionalEnrollmentRequestCount
_context
_timeoutTimer
_responseContentType
_urlSession
_retryAfterInterval
_fatalError
_certificate
_sessionRequestInfo
_sessionInfo
_configurationData
_error
_nonce
_provisionalEnrollmentResponse
_profileConfigurationResponse
_unenrollResponse
stringWithFormat:
appendFormat:
UTF8String
count
_signPayloadData:withPrivateKey:outError:
base64EncodedDataWithOptions:
objectAtIndexedSubscript:
base64Encodedx509CertificateStringFromCertificate:
dictionaryWithDictionary:
numberWithUnsignedInteger:
cloudConfigurationValidationDictionary
_deviceInfoDictionary
stringWithUTF8String:
currentHandler
handleFailureInMethod:object:file:lineNumber:description:
dictionaryWithContentsOfFile:
setStubInfo:
stubInfo
setSession:
setReadyToSign:
session
dataWithCapacity:
installCertificate:
establishSessionWithSessionInfoData:
signData:
sessionRequest
readyToSign
_readyToSign
_stubInfo
_session
getBytes:length:
verifySignature:payload:clientCertificate:
destinationKey
validationType
_validateBooleanInDictionary:
_validateCertificateArrayInDictionary:
_validateHttpsURLStringInDictionary:
_validateNumberInDictionary:
_validateStringInDictionary:
_validateStringArrayInDictionary:
numberWithInt:
_certificateDataFromBase64EncodedString:
setValidationType:
setDestinationKey:
_validationType
_destinationKey
_mutableKeyInfoArrayFromValidationInfo:
keyInfo
setKeyInfo:
_keyInfo
MCTeslaValidationRule
MCTeslaStringValidationRule
MCTeslaCertificateArrayValidationRule
MCTeslaCertificateValidationRule
MCTeslaBooleanValidationRule
MCTeslaHTTPSURLValidationRule
MCTeslaStringArrayValidationRule
MCTeslaValidationInfo
MCTeslaUnenrollRequestPayload
MCTeslaServiceInterface
NSObject
MCTeslaGatekeeper
NSXPCListenerDelegate
MCTeslaServicerServer
NSURLSessionDelegate
NSURLSessionTaskDelegate
NSURLSessionDataDelegate
MCTeslaRequestSupport
MCUCRTSupport
MCTeslaProvisionalEnrollmentRequestPayload
MCTeslaValidation
MCTeslaRequestPayload
AbsintheStub
MCTeslaCertificateSupport
MCTeslaValidationKeyInfo
MCTeslaProfileConfigurationRequestPayload
MCTeslaValidationGroupInfo
@44@0:8@16@24@32B40
B32@0:8@16@24
@24@0:8@16
v16@0:8
@16@0:8
v24@0:8@16
B16@0:8
v20@0:8B16
@"NSString"
@48@0:8@16@24@32B40B44
@32@0:8@16@24
@"NSDictionary"
B24@0:8@16
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
v32@0:8@16@?24
v24@0:8@?16
v32@0:8@"NSString"16@?<v@?B@"NSDictionary"@"NSError">24
v24@0:8@?<v@?B@"NSDictionary"@"NSError">16
B32@0:8@"NSXPCListener"16@"NSXPCConnection"24
v24@0:8Q16
d16@0:8
v24@0:8d16
@"NSTimer"
v32@0:8@16@24
v40@0:8@16@24@?32
v32@0:8@"NSURLSession"16@"NSError"24
v40@0:8@"NSURLSession"16@"NSURLAuthenticationChallenge"24@?<v@?q@"NSURLCredential">32
v24@0:8@"NSURLSession"16
v48@0:8@16@24@32@?40
v56@0:8@16@24@32@40@?48
v56@0:8@16@24q32q40q48
v40@0:8@16@24@32
v48@0:8@"NSURLSession"16@"NSURLSessionTask"24@"NSURLRequest"32@?<v@?q@"NSURLRequest">40
v32@0:8@"NSURLSession"16@"NSURLSessionTask"24
v56@0:8@"NSURLSession"16@"NSURLSessionTask"24@"NSHTTPURLResponse"32@"NSURLRequest"40@?<v@?@"NSURLRequest">48
v48@0:8@"NSURLSession"16@"NSURLSessionTask"24@"NSURLAuthenticationChallenge"32@?<v@?q@"NSURLCredential">40
v40@0:8@"NSURLSession"16@"NSURLSessionTask"24@?<v@?@"NSInputStream">32
v56@0:8@"NSURLSession"16@"NSURLSessionTask"24q32q40q48
v40@0:8@"NSURLSession"16@"NSURLSessionTask"24@"NSURLSessionTaskMetrics"32
v40@0:8@"NSURLSession"16@"NSURLSessionTask"24@"NSError"32
v48@0:8@"NSURLSession"16@"NSURLSessionDataTask"24@"NSURLResponse"32@?<v@?q>40
v40@0:8@"NSURLSession"16@"NSURLSessionDataTask"24@"NSURLSessionDownloadTask"32
v40@0:8@"NSURLSession"16@"NSURLSessionDataTask"24@"NSURLSessionStreamTask"32
v40@0:8@"NSURLSession"16@"NSURLSessionDataTask"24@"NSData"32
v48@0:8@"NSURLSession"16@"NSURLSessionDataTask"24@"NSCachedURLResponse"32@?<v@?@"NSCachedURLResponse">40
@20@0:8i16
@24@0:8q16
B32@0:8@16^@24
v32@0:8q16@?24
v28@0:8B16@20
v24@0:8q16
v36@0:8B16@20@28
q24@0:8@16
d24@0:8q16
@?16@0:8
q16@0:8
^v16@0:8
v24@0:8^v16
@"NSXPCConnection"
@"NSURLSession"
@"NSError"
@"NSMutableData"
@"NSData"
@40@0:8@16@24^@32
@56@0:8@16@24@32@40^@48
B40@0:8@16@24@32
@"NSArray"
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>BuildMachineOSBuild</key>
<string>16B2657</string>
<key>CFBundleAllowMixedLocalizations</key>
<true/>
<key>CFBundleDevelopmentRegion</key>
<string>English</string>
<key>CFBundleExecutable</key>
<string>teslad</string>
<key>CFBundleIdentifier</key>
<string>com.apple.managedconfiguration.cloudconfigd</string>
<key>CFBundleInfoDictionaryVersion</key>
<string>6.0</string>
<key>CFBundlePackageType</key>
<string>com.apple.product-type.tool</string>
<key>CFBundleSignature</key>
<string>????</string>
<key>CFBundleSupportedPlatforms</key>
<array>
<string>AppleTVSimulator</string>
</array>
<key>CFBundleVersion</key>
<string>1.0</string>
<key>DTCompiler</key>
<string>com.apple.compilers.llvm.clang.1_0</string>
<key>DTPlatformBuild</key>
<string></string>
<key>DTPlatformName</key>
<string>appletvsimulator</string>
<key>DTPlatformVersion</key>
<string>11.0</string>
<key>DTSDKBuild</key>
<string>15J307</string>
<key>DTSDKName</key>
<string>appletvsimulator11.0</string>
<key>DTXcode</key>
<string>0900</string>
<key>DTXcodeBuild</key>
<string>9M136i</string>
<key>MinimumOSVersion</key>
<string>11.0</string>
<key>NSMainNibFile</key>
<string>MainWindow</string>
<key>UIDeviceFamily</key>
<array>
<integer>3</integer>
</array>
</dict>
</plist>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>abs-client</key>
<string>311791806</string>
<key>application-identifier</key>
<string>com.apple.managedconfiguration.cloudconfigd</string>
<key>com.apple.keystore.sik.access</key>
<true/>
<key>com.apple.mobileactivationd.device-identifiers</key>
<true/>
<key>com.apple.mobileactivationd.network-security-disabled</key>
<true/>
<key>com.apple.mobileactivationd.spi</key>
<true/>
<key>com.apple.private.MobileContainerManager.otherIdLookup</key>
<true/>
<key>com.apple.private.lockdown.finegrained-get</key>
<array>
<string>NULL/ActivationPrivateKey</string>
<string>NULL/DevicePrivateKey</string>
<string>NULL/DeviceCertificate</string>
<string>NULL/DeviceName</string>
</array>
<key>com.apple.security.attestation.access</key>
<true/>
<key>com.apple.security.system-groups</key>
<array>
<string>systemgroup.com.apple.configurationprofiles</string>
</array>
<key>keychain-access-groups</key>
<array>
<string>apple</string>
<string>com.apple.certificates</string>
<string>com.apple.identities</string>
<string>lockdown-identities</string>
</array>
</dict>
</plist>
