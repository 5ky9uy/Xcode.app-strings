AbstractModuleRecord
registryEntry
evaluated
dependenciesMap
value
Exported binding name '
' is not found.
Exported binding name 'default' cannot be resolved by star export entries.
Analyzing ModuleRecord key(
    Dependencies: 
 modules
      module(
    Import: 
 entries
      import(
), local(
), module(
    Export: 
      [Local] 
export(
      [Indirect] 
), import(
      [Star] module(
Property did get replaced
numberOfSlotsForLastOffset doesn't match totalSize
inlineOverflowAccordingToTotalSize doesn't match numberOfOutOfLineSlotsForLastOffset
Detected offset inconsistency: 
this = 
m_offset = 
m_inlineCapacity = 
propertyTable = 
numberOfSlotsForLastOffset = 
totalSize = 
inlineOverflowAccordingToTotalSize = 
numberOfOutOfLineSlotsForLastOffset = 
null
<nullopt>
Result:<
Int32
NegZeroDouble
NonNegZeroDouble
NonNumber
Int32Overflow
Int52Overflow
Took special fast path.
 LHS ObservedType:<
> RHS ObservedType:<
 LHS ResultType:<
> RHS ResultType:<
Cannot transfer a SharedArrayBuffer
Cannot transfer a WebAssembly.Memory
Cannot transfer an ArrayBuffer whose backing store has been accessed by the JavaScriptCore C API
ArrayBufferNeuteringWatchpoint
Array buffer was neutered
Function
Array size is not a small enough positive integer.
from
Array.isArray cannot be called on a Proxy that has been revoked
Array Iterator
next
<empty>
NonArray
NonArrayWithInt32
NonArrayWithDouble
NonArrayWithContiguous
NonArrayWithArrayStorage
NonArrayWithSlowPutArrayStorage
ArrayClass
ArrayWithUndecided
ArrayWithInt32
ArrayWithDouble
ArrayWithContiguous
ArrayWithArrayStorage
ArrayWithSlowPutArrayStorage
Int8ArrayMode
Int16ArrayMode
Int32ArrayMode
Uint8ArrayMode
Uint8ClampedArrayMode
Uint16ArrayMode
Uint32ArrayMode
Float32ArrayMode
Float64ArrayMode
Hole
OutOfBounds
Intercept
Original
Array
concat
fill
reverse
sort
splice
unshift
every
forEach
some
indexOf
lastIndexOf
filter
reduce
reduceRight
find
findIndex
includes
copyWithin
entries
keys
values
[object 
Cannot shift to offset greater than (2 ** 53) - 1
Set up array species watchpoint.
ArrayPrototype adaption of 
 failed: 
Species construction did not get a valid constructor
Was not able to set up array species watchpoint.
AsyncFunction
truncated
topCallFrameIsBoundary
parentStackTrace
callFrames
Atomics
compareExchange
exchange
isLockFree
load
store
wait
wake
Typed array for wait/wake must be an Int32Array.
Typed array for wait/wake must wrap a SharedArrayBuffer.
Atomics.wait cannot be called from the current thread.
not-equal
timed-out
Access index is not an integer.
Access index out of bounds for atomic access.
Typed array argument must be a cell.
Typed array argument must be an Int8Array, Int16Array, Int32Array, Uint8Array, Uint16Array, or Uint32Array.
Typed array argument must wrap a SharedArrayBuffer.
BasicBlock: [%d, %d] hasExecuted: %s, executionCount:%zu
true
false
Boolean
toString
Fatal error compiling builtin function '
(function () { })
(function (...args) { super(...args); })
Error compiling builtin: 
, offset = 
Cannot call a class constructor without |new|
undefined
boolean
number
string
symbol
object
function
Trying to add variable called 
 as 
 but it was already added as 
Cannot return a non-object type in the constructor of a derived class.
Out of memory
Iterator result interface is not an object.
Delegated generator does not have a 'throw' method.
Disabling watching in symbol table
Dumping bytecode liveness for 
Bytecode basic block %u: %p (offset: %u, length: %u)
Predecessors:
Successors:
Entry block %p
Exit block: %p
Live variables:
eval code
module code
global code
        
Clearing closure call to 
, stub routine 
Clearing call to 
 because the executable is dead.
(null)
Not Set
Statically Proved
Could Take Slow Path
Based On Stub
maxNumArguments = 
TailCall
Call
Construct
InternalFunction: 
(Function: 
; Executable: 
Executable: 
Arguments
CodeBlock
<global>
<eval>
<module>
function 
<no-hash>
 (ShouldAlwaysBeInlined)
 (NeverInline)
 (NeverOptimize)
 (NeverFTLOptimize)
 (DidTryToEnterInLoop)
 (StrictMode)
 (JITFail)
 (FTLFail)
 (HadFTLReplacement)
CodeBlock: 
m_instructions.data(): 
refCount: 
Clearing LLInt property access.
Clearing LLInt put transition.
Clearing LLInt to_this with structure %p.
Clearing LLInt create_this with cached callee %p.
Clearing dead symbolTable %p.
Clearing scope access with structure %p.
Clearing LLInt call from 
jettison
Jettisoning 
 and counting reoptimization
 due to 
 will be jettisoned because of the following dead references:
    Transition under 
 -> 
    Weak reference 
    Did invalidate 
    Did count reoptimization for 
    Did install baseline version of 
Noticing call link from 
 to 
    Clearing SABI because caller is native.
    Clearing SABI because caller is too large.
    Clearing SABI because caller is in LLInt.
    Clearing SABI bcause caller was already optimized.
    Clearing SABI because caller is not a function.
    Clearing SABI because recursion was detected.
In call from 
: caller's DFG capability level is not set.
    Clearing SABI because the caller is not a DFG candidate.
: instruction count is 
, scaling execution counter by 
: Optimizing next invocation.
: Not optimizing anytime soon.
: Optimizing after warm-up.
: Optimizing after long warm-up.
: Optimizing soon.
: Forcing slow path concurrently.
: expected to have baseline code but have 
: we have result = 
 but 
we are our own replacement.
our replacement is 
Unrecognized result: 
Considering optimizing 
Profile hotness: %lf (%u / %u), %lf (%u / %u)
this
    Wrong number of bits in result!
    Result: 
    Bit count: 
    Variable 
 is expected to be dead.
Validation failure in 
Validation failure.
<null codeBlock>
Linking put_to_scope in 
 for 
due to 
, counting = 
, detail = 
Firing watchpoint 
 on 
Parser error
<none>
 --> 
(closure) 
[[EngineCode]]
[[GlobalThunk]]
[[RegExpCode]]
[[DFGJIT]]
[[BaselineOnly]]
[[BaselineProfile]]
[[BaselineOSR]]
[[EngineFrame]]
<CodeProfiling %s:%d>
<unknown>
Total samples: %lld
</CodeProfiling %s:%d>
JSC::BytecodeGenerator::generate()
JSC::Parser<JSC::Lexer<unsigned char>>::parseInner()
WTF::fastMalloc(unsigned long)
WTF::calculateUTCOffset()
JSC::DFG::ByteCodeParser::parseCodeBlock()
    
% 8lld: %s (%lld stack top)
JSC_CODE_PROFILING
Global
Eval
Module
Eden
Full
__proto__
use strict
async
await
break
case
catch
class
const
continue
debugger
default
delete
else
enum
export
extends
finally
implements
import
instanceof
interface
package
private
protected
public
return
static
super
switch
throw
typeof
void
while
with
yield
Animation
AnimationEffectReadOnly
AnimationTimeline
ArrayBuffer
ArrayIterator
Audio
BYTES_PER_ELEMENT
Collator
Credential
CredentialsContainer
CustomElementRegistry
Date
DateTimeFormat
DocumentTimeline
Error
EvalError
FederatedCredential
Gamepad
GamepadButton
GamepadEvent
GeneratorFunction
Headers
HTMLAudioElement
HTMLSlotElement
IDBCursor
IDBCursorWithValue
IDBDatabase
IDBFactory
IDBIndex
IDBKeyRange
IDBObjectStore
IDBOpenDBRequest
IDBRequest
IDBTransaction
IDBVersionChangeEvent
Infinity
InputEvent
IntersectionObserver
IntersectionObserverEntry
Intl
JSON
Loader
MapIterator
Math
MediaEncryptedEvent
MediaKeyMessageEvent
MediaKeySession
MediaKeyStatusMap
MediaKeySystemAccess
MediaKeys
MediaStreamEvent
ModernMediaControls
NavigatorCredentials
NavigatorMediaDevices
NavigatorUserMedia
NumberFormat
Object
PasswordCredential
PerformanceEntry
PerformanceEntryList
PerformanceMark
PerformanceMeasure
PerformanceObserver
PerformanceObserverEntryList
PerformanceResourceTiming
Promise
Proxy
RangeError
ReferenceError
Reflect
RegExp
Request
Response
RTCDataChannel
RTCDataChannelEvent
RTCDTMFSender
RTCDTMFToneChangeEvent
RTCIceCandidate
RTCIceTransport
RTCPeerConnection
RTCRtpReceiver
RTCRtpSender
RTCRtpTransceiver
RTCSessionDescription
RTCStatsReport
RTCTrackEvent
SetIterator
ShadowRoot
SharedArrayBuffer
StaticRange
String
Symbol
SyntaxError
TypeError
URIError
WeakMap
WeakSet
WebGL2RenderingContext
WebGLVertexArrayObject
WebGPUBuffer
WebGPUCommandBuffer
WebGPUCommandQueue
WebGPUComputeCommandEncoder
WebGPUComputePipelineState
WebGPUDepthStencilDescriptor
WebGPUDepthStencilState
WebGPUDrawable
WebGPUFunction
WebGPULibrary
WebGPURenderCommandEncoder
WebGPURenderPassAttachmentDescriptor
WebGPURenderPassColorAttachmentDescriptor
WebGPURenderPassDepthAttachmentDescriptor
WebGPURenderPassDescriptor
WebGPURenderPipelineColorAttachmentDescriptor
WebGPURenderPipelineDescriptor
WebGPURenderPipelineState
WebGPURenderingContext
WebGPUSize
WebGPUTexture
WebGPUTextureDescriptor
WebSocket
WritableStream
__defineGetter__
__defineSetter__
__lookupGetter__
__lookupSetter__
additionalJettisonReason
anonymous
arguments
assign
back
bind
blur
buffer
byteLength
byteOffset
bytecode
bytecodeIndex
bytecodes
bytecodesID
calendar
callee
caller
caseFirst
clear
close
closed
collation
column
compilationKind
compilationUID
compilations
compile
configurable
constructor
count
counters
customElements
defineProperty
description
descriptions
detail
displayName
document
done
enumerable
eval
events
exec
executionCount
exitKind
fetch
flags
focus
formatMatcher
formatToParts
forward
frames
fromCharCode
global
hasOwnProperty
hash
header
hour
hour12
href
ignoreCase
ignorePunctuation
index
indexedDB
inferredName
input
instructionCount
isArray
isEnabled
isPrototypeOf
isSecureContext
isView
isWatchpoint
jettisonReason
join
KeyframeEffect
lastIndex
length
line
locale
localeMatcher
location
message
minute
month
multiline
name
numInlinedCalls
numInlinedGetByIds
numInlinedPutByIds
numberingSystem
numeric
opcode
opener
origin
osrExitSites
osrExits
parent
parse
parseInt
parseFloat
postMessage
profiledBytecodes
propertyIsEnumerable
prototype
reload
replace
resolve
second
self
sensitivity
showModalDialog
size
slice
source
sourceCode
sourceURL
stack
stackTraceLimit
sticky
subarray
summary
target
test
then
time
timeZone
timeZoneName
toISOString
toJSON
toLocaleString
unicode
usage
webkit
collectMatchingElementsInFlatTree
matchingElementInFlatTree
webkitIDBCursor
webkitIDBDatabase
webkitIDBFactory
webkitIDBIndex
webkitIDBKeyRange
webkitIDBObjectStore
webkitIDBRequest
webkitIDBTransaction
webkitIndexedDB
weekday
window
writable
year
advanceStringIndex
PrivateSymbol.advanceStringIndex
PrivateSymbol.all
allocateFloat32Array
PrivateSymbol.allocateFloat32Array
allocateFloat64Array
PrivateSymbol.allocateFloat64Array
allocateInt16Array
PrivateSymbol.allocateInt16Array
allocateInt32Array
PrivateSymbol.allocateInt32Array
allocateInt8Array
PrivateSymbol.allocateInt8Array
allocateUint16Array
PrivateSymbol.allocateUint16Array
allocateUint32Array
PrivateSymbol.allocateUint32Array
allocateUint8Array
PrivateSymbol.allocateUint8Array
allocateUint8ClampedArray
PrivateSymbol.allocateUint8ClampedArray
anchor
PrivateSymbol.anchor
apply
PrivateSymbol.apply
arrayIteratorKeyNext
PrivateSymbol.arrayIteratorKeyNext
arrayIteratorKeyValueNext
PrivateSymbol.arrayIteratorKeyValueNext
arrayIteratorValueNext
PrivateSymbol.arrayIteratorValueNext
asyncFunctionResume
PrivateSymbol.asyncFunctionResume
PrivateSymbol.big
PrivateSymbol.bind
blink
PrivateSymbol.blink
bold
PrivateSymbol.bold
call
PrivateSymbol.call
PrivateSymbol.catch
commitInstantiated
PrivateSymbol.commitInstantiated
PrivateSymbol.concat
concatSlowPath
PrivateSymbol.concatSlowPath
copyDataProperties
PrivateSymbol.copyDataProperties
PrivateSymbol.copyWithin
createArrayIterator
PrivateSymbol.createArrayIterator
createHTML
PrivateSymbol.createHTML
createResolvingFunctions
PrivateSymbol.createResolvingFunctions
deleteProperty
PrivateSymbol.deleteProperty
ensureRegistered
PrivateSymbol.ensureRegistered
PrivateSymbol.entries
PrivateSymbol.every
PrivateSymbol.fill
PrivateSymbol.filter
PrivateSymbol.find
PrivateSymbol.findIndex
fixed
PrivateSymbol.fixed
fontcolor
PrivateSymbol.fontcolor
fontsize
PrivateSymbol.fontsize
PrivateSymbol.forEach
forceFulfillPromise
PrivateSymbol.forceFulfillPromise
PrivateSymbol.from
fulfillFetch
PrivateSymbol.fulfillFetch
fulfillInstantiate
PrivateSymbol.fulfillInstantiate
fulfillPromise
PrivateSymbol.fulfillPromise
generatorResume
PrivateSymbol.generatorResume
getDefaultCollator
PrivateSymbol.getDefaultCollator
PrivateSymbol.has
hasObservableSideEffectsForRegExpMatch
PrivateSymbol.hasObservableSideEffectsForRegExpMatch
hasObservableSideEffectsForRegExpSplit
PrivateSymbol.hasObservableSideEffectsForRegExpSplit
hasObservableSideEffectsForStringReplace
PrivateSymbol.hasObservableSideEffectsForStringReplace
PrivateSymbol.includes
initializePromise
PrivateSymbol.initializePromise
instantiation
PrivateSymbol.instantiation
internalAll
PrivateSymbol.internalAll
PrivateSymbol.isArray
isDictionary
PrivateSymbol.isDictionary
isFinite
PrivateSymbol.isFinite
isNaN
PrivateSymbol.isNaN
isPromise
PrivateSymbol.isPromise
italics
PrivateSymbol.italics
PrivateSymbol.keys
link
PrivateSymbol.link
linkAndEvaluateModule
PrivateSymbol.linkAndEvaluateModule
loadAndEvaluateModule
PrivateSymbol.loadAndEvaluateModule
loadModule
PrivateSymbol.loadModule
localeCompare
PrivateSymbol.localeCompare
PrivateSymbol.map
match
PrivateSymbol.match
moduleEvaluation
PrivateSymbol.moduleEvaluation
newHandledRejectedPromise
PrivateSymbol.newHandledRejectedPromise
newPromiseCapability
PrivateSymbol.newPromiseCapability
newPromiseReaction
PrivateSymbol.newPromiseReaction
newRegistryEntry
PrivateSymbol.newRegistryEntry
PrivateSymbol.next
PrivateSymbol.of
padEnd
PrivateSymbol.padEnd
padStart
PrivateSymbol.padStart
performIteration
PrivateSymbol.performIteration
promiseFulfilled
PrivateSymbol.promiseFulfilled
promiseReactionJob
PrivateSymbol.promiseReactionJob
promiseRejected
PrivateSymbol.promiseRejected
promiseResolveThenableJob
PrivateSymbol.promiseResolveThenableJob
provide
PrivateSymbol.provide
race
PrivateSymbol.race
PrivateSymbol.raw
PrivateSymbol.reduce
PrivateSymbol.reduceRight
regExpExec
PrivateSymbol.regExpExec
reject
PrivateSymbol.reject
rejectPromise
PrivateSymbol.rejectPromise
repeat
PrivateSymbol.repeat
repeatCharactersSlowPath
PrivateSymbol.repeatCharactersSlowPath
repeatSlowPath
PrivateSymbol.repeatSlowPath
PrivateSymbol.replace
requestFetch
PrivateSymbol.requestFetch
requestImportModule
PrivateSymbol.requestImportModule
requestInstantiate
PrivateSymbol.requestInstantiate
requestLink
PrivateSymbol.requestLink
requestReady
PrivateSymbol.requestReady
requestSatisfy
PrivateSymbol.requestSatisfy
PrivateSymbol.resolve
PrivateSymbol.return
search
PrivateSymbol.search
setStateToMax
PrivateSymbol.setStateToMax
small
PrivateSymbol.small
PrivateSymbol.some
PrivateSymbol.sort
speciesConstructor
PrivateSymbol.speciesConstructor
speciesGetter
PrivateSymbol.speciesGetter
split
PrivateSymbol.split
strike
PrivateSymbol.strike
stringConcatSlowPath
PrivateSymbol.stringConcatSlowPath
PrivateSymbol.sub
PrivateSymbol.subarray
PrivateSymbol.sup
symbolHasInstance
PrivateSymbol.symbolHasInstance
symbolIteratorGetter
PrivateSymbol.symbolIteratorGetter
PrivateSymbol.test
PrivateSymbol.then
PrivateSymbol.throw
toInteger
PrivateSymbol.toInteger
toLength
PrivateSymbol.toLength
toLocaleDateString
PrivateSymbol.toLocaleDateString
PrivateSymbol.toLocaleString
toLocaleTimeString
PrivateSymbol.toLocaleTimeString
triggerPromiseReactions
PrivateSymbol.triggerPromiseReactions
typedArrayClampArgumentToStartOrEnd
PrivateSymbol.typedArrayClampArgumentToStartOrEnd
typedArraySpeciesConstructor
PrivateSymbol.typedArraySpeciesConstructor
PrivateSymbol.values
argument
PrivateSymbol.argument
argumentCount
PrivateSymbol.argumentCount
assert
PrivateSymbol.assert
isObject
PrivateSymbol.isObject
isJSArray
PrivateSymbol.isJSArray
isProxyObject
PrivateSymbol.isProxyObject
isDerivedArray
PrivateSymbol.isDerivedArray
isRegExpObject
PrivateSymbol.isRegExpObject
isMap
PrivateSymbol.isMap
isSet
PrivateSymbol.isSet
tailCallForwardArguments
PrivateSymbol.tailCallForwardArguments
throwTypeError
PrivateSymbol.throwTypeError
throwRangeError
PrivateSymbol.throwRangeError
throwOutOfMemoryError
PrivateSymbol.throwOutOfMemoryError
tryGetById
PrivateSymbol.tryGetById
putByValDirect
PrivateSymbol.putByValDirect
toNumber
PrivateSymbol.toNumber
PrivateSymbol.toString
newArrayWithSize
PrivateSymbol.newArrayWithSize
defineEnumerableWritableConfigurableDataProperty
PrivateSymbol.defineEnumerableWritableConfigurableDataProperty
PrivateSymbol.undefined
PrivateSymbol.Infinity
iterationKindKey
PrivateSymbol.iterationKindKey
iterationKindValue
PrivateSymbol.iterationKindValue
iterationKindKeyValue
PrivateSymbol.iterationKindKeyValue
MAX_ARRAY_INDEX
PrivateSymbol.MAX_ARRAY_INDEX
MAX_STRING_LENGTH
PrivateSymbol.MAX_STRING_LENGTH
MAX_SAFE_INTEGER
PrivateSymbol.MAX_SAFE_INTEGER
ModuleFetch
PrivateSymbol.ModuleFetch
ModuleTranslate
PrivateSymbol.ModuleTranslate
ModuleInstantiate
PrivateSymbol.ModuleInstantiate
ModuleSatisfy
PrivateSymbol.ModuleSatisfy
ModuleLink
PrivateSymbol.ModuleLink
ModuleReady
PrivateSymbol.ModuleReady
promiseRejectionReject
PrivateSymbol.promiseRejectionReject
promiseRejectionHandle
PrivateSymbol.promiseRejectionHandle
promiseStatePending
PrivateSymbol.promiseStatePending
promiseStateFulfilled
PrivateSymbol.promiseStateFulfilled
promiseStateRejected
PrivateSymbol.promiseStateRejected
GeneratorResumeModeNormal
PrivateSymbol.GeneratorResumeModeNormal
GeneratorResumeModeThrow
PrivateSymbol.GeneratorResumeModeThrow
GeneratorResumeModeReturn
PrivateSymbol.GeneratorResumeModeReturn
GeneratorStateCompleted
PrivateSymbol.GeneratorStateCompleted
GeneratorStateExecuting
PrivateSymbol.GeneratorStateExecuting
PrivateSymbol.add
arrayIteratorNextIndex
PrivateSymbol.arrayIteratorNextIndex
arrayIterationKind
PrivateSymbol.arrayIterationKind
arrayIteratorNext
PrivateSymbol.arrayIteratorNext
arrayIteratorIsDone
PrivateSymbol.arrayIteratorIsDone
arrayIteratorKind
PrivateSymbol.arrayIteratorKind
charCodeAt
PrivateSymbol.charCodeAt
PrivateSymbol.isView
iteratedObject
PrivateSymbol.iteratedObject
iteratedString
PrivateSymbol.iteratedString
stringIteratorNextIndex
PrivateSymbol.stringIteratorNextIndex
promise
PrivateSymbol.promise
fulfillmentHandler
PrivateSymbol.fulfillmentHandler
rejectionHandler
PrivateSymbol.rejectionHandler
PrivateSymbol.index
deferred
PrivateSymbol.deferred
countdownHolder
PrivateSymbol.countdownHolder
PrivateSymbol.Object
PrivateSymbol.Number
PrivateSymbol.Array
PrivateSymbol.ArrayBuffer
PrivateSymbol.String
PrivateSymbol.RegExp
PrivateSymbol.Map
PrivateSymbol.Promise
PrivateSymbol.Reflect
InternalPromise
PrivateSymbol.InternalPromise
PrivateSymbol.abs
floor
PrivateSymbol.floor
trunc
PrivateSymbol.trunc
create
PrivateSymbol.create
PrivateSymbol.defineProperty
getPrototypeOf
PrivateSymbol.getPrototypeOf
getOwnPropertyDescriptor
PrivateSymbol.getOwnPropertyDescriptor
getOwnPropertyNames
PrivateSymbol.getOwnPropertyNames
ownKeys
PrivateSymbol.ownKeys
PrivateSymbol.Error
PrivateSymbol.RangeError
PrivateSymbol.Set
PrivateSymbol.TypeError
typedArrayLength
PrivateSymbol.typedArrayLength
typedArraySort
PrivateSymbol.typedArraySort
typedArrayGetOriginalConstructor
PrivateSymbol.typedArrayGetOriginalConstructor
typedArraySubarrayCreate
PrivateSymbol.typedArraySubarrayCreate
BuiltinLog
PrivateSymbol.BuiltinLog
homeObject
PrivateSymbol.homeObject
templateRegistryKey
PrivateSymbol.templateRegistryKey
enqueueJob
PrivateSymbol.enqueueJob
hostPromiseRejectionTracker
PrivateSymbol.hostPromiseRejectionTracker
promiseIsHandled
PrivateSymbol.promiseIsHandled
promiseState
PrivateSymbol.promiseState
promiseReactions
PrivateSymbol.promiseReactions
promiseResult
PrivateSymbol.promiseResult
onFulfilled
PrivateSymbol.onFulfilled
onRejected
PrivateSymbol.onRejected
push
PrivateSymbol.push
repeatCharacter
PrivateSymbol.repeatCharacter
capabilities
PrivateSymbol.capabilities
starDefault
PrivateSymbol.starDefault
InspectorInstrumentation
PrivateSymbol.InspectorInstrumentation
PrivateSymbol.get
PrivateSymbol.set
shift
PrivateSymbol.shift
allocateTypedArray
PrivateSymbol.allocateTypedArray
Int8Array
PrivateSymbol.Int8Array
Int16Array
PrivateSymbol.Int16Array
Int32Array
PrivateSymbol.Int32Array
Uint8Array
PrivateSymbol.Uint8Array
Uint8ClampedArray
PrivateSymbol.Uint8ClampedArray
Uint16Array
PrivateSymbol.Uint16Array
Uint32Array
PrivateSymbol.Uint32Array
Float32Array
PrivateSymbol.Float32Array
Float64Array
PrivateSymbol.Float64Array
PrivateSymbol.exec
generator
PrivateSymbol.generator
generatorNext
PrivateSymbol.generatorNext
generatorState
PrivateSymbol.generatorState
generatorFrame
PrivateSymbol.generatorFrame
generatorValue
PrivateSymbol.generatorValue
generatorThis
PrivateSymbol.generatorThis
generatorResumeMode
PrivateSymbol.generatorResumeMode
PrivateSymbol.Collator
PrivateSymbol.DateTimeFormat
PrivateSymbol.NumberFormat
intlSubstituteValue
PrivateSymbol.intlSubstituteValue
thisTimeValue
PrivateSymbol.thisTimeValue
thisNumberValue
PrivateSymbol.thisNumberValue
newTargetLocal
PrivateSymbol.newTargetLocal
derivedConstructor
PrivateSymbol.derivedConstructor
isTypedArrayView
PrivateSymbol.isTypedArrayView
isBoundFunction
PrivateSymbol.isBoundFunction
hasInstanceBoundFunction
PrivateSymbol.hasInstanceBoundFunction
instanceOf
PrivateSymbol.instanceOf
isArraySlow
PrivateSymbol.isArraySlow
isArrayConstructor
PrivateSymbol.isArrayConstructor
isConstructor
PrivateSymbol.isConstructor
concatMemcpy
PrivateSymbol.concatMemcpy
appendMemcpy
PrivateSymbol.appendMemcpy
predictFinalLengthFromArgumunts
PrivateSymbol.predictFinalLengthFromArgumunts
print
PrivateSymbol.print
regExpCreate
PrivateSymbol.regExpCreate
PrivateSymbol.SetIterator
setIteratorNext
PrivateSymbol.setIteratorNext
replaceUsingRegExp
PrivateSymbol.replaceUsingRegExp
replaceUsingStringSearch
PrivateSymbol.replaceUsingStringSearch
PrivateSymbol.MapIterator
mapIteratorNext
PrivateSymbol.mapIteratorNext
regExpBuiltinExec
PrivateSymbol.regExpBuiltinExec
regExpMatchFast
PrivateSymbol.regExpMatchFast
regExpProtoFlagsGetter
PrivateSymbol.regExpProtoFlagsGetter
regExpProtoGlobalGetter
PrivateSymbol.regExpProtoGlobalGetter
regExpProtoIgnoreCaseGetter
PrivateSymbol.regExpProtoIgnoreCaseGetter
regExpProtoMultilineGetter
PrivateSymbol.regExpProtoMultilineGetter
regExpProtoSourceGetter
PrivateSymbol.regExpProtoSourceGetter
regExpProtoStickyGetter
PrivateSymbol.regExpProtoStickyGetter
regExpProtoUnicodeGetter
PrivateSymbol.regExpProtoUnicodeGetter
regExpPrototypeSymbolReplace
PrivateSymbol.regExpPrototypeSymbolReplace
regExpReplaceFast
PrivateSymbol.regExpReplaceFast
regExpSearchFast
PrivateSymbol.regExpSearchFast
regExpSplitFast
PrivateSymbol.regExpSplitFast
regExpTestFast
PrivateSymbol.regExpTestFast
stringIncludesInternal
PrivateSymbol.stringIncludesInternal
stringSplitFast
PrivateSymbol.stringSplitFast
stringSubstrInternal
PrivateSymbol.stringSubstrInternal
makeBoundFunction
PrivateSymbol.makeBoundFunction
hasOwnLengthProperty
PrivateSymbol.hasOwnLengthProperty
importModule
PrivateSymbol.importModule
PrivateSymbol.propertyIsEnumerable
WebAssembly
PrivateSymbol.WebAssembly
PrivateSymbol.Module
Instance
PrivateSymbol.Instance
Memory
PrivateSymbol.Memory
Table
PrivateSymbol.Table
CompileError
PrivateSymbol.CompileError
LinkError
PrivateSymbol.LinkError
RuntimeError
PrivateSymbol.RuntimeError
Symbol.hasInstance
hasInstanceSymbol
Symbol.isConcatSpreadable
isConcatSpreadableSymbol
Symbol.iterator
iteratorSymbol
Symbol.match
matchSymbol
Symbol.replace
replaceSymbol
Symbol.search
searchSymbol
Symbol.species
speciesSymbol
Symbol.split
splitSymbol
Symbol.toPrimitive
toPrimitiveSymbol
Symbol.toStringTag
toStringTagSymbol
Symbol.unscopables
unscopablesSymbol
PrivateSymbol.$vm
CommonSlowPaths
LLInt log full.
Allocated a scope
CompilationFailed
CompilationInvalidated
CompilationSuccessful
CompilationDeferred
EntryPointModule
(unknown)
NETWORK
CONSOLE
STORAGE
APPCACHE
RENDERING
SECURITY
OTHER
UNKNOWN
DEBUG
INFO
WARN
ERROR
TRACE
TABLE
console
<message collected>
type
repeatCount
networkRequestId
parameters
stackTrace
level
text
Console
debug
error
info
warn
dirxml
table
trace
profile
profileEnd
timeEnd
timeStamp
takeHeapSnapshot
group
groupCollapsed
groupEnd
Constant
Variable
sourceMappingURL
lineNumber
lineContent
/\*[#@][ 
]*([^\s'"]*)[ 
]*\*/
SourceID: 
CustomGetterSetter
None
Int52
StrictInt52
Double
Cell
Storage
JSInt32
JSDouble
JSCell
JSBoolean
Dead
 GMT
toUTCString
toGMTString
[Symbol.toPrimitive]
Invalid Date
%+07d-%02d-%02dT%02d:%02d:%02d.%03dZ
%04d-%02d-%02dT%02d:%02d:%02d.%03dZ
Date.prototype[Symbol.toPrimitive] expected |this| to be an object.
Date.prototype[Symbol.toPrimitive] expected a first argument.
toISOString is not a function
toISOString did not return a primitive value
toDateString
toTimeString
getTime
getFullYear
getUTCFullYear
getMonth
getUTCMonth
getDate
getUTCDate
getDay
getUTCDay
getHours
getUTCHours
getMinutes
getUTCMinutes
getSeconds
getUTCSeconds
getMilliseconds
getUTCMilliseconds
getTimezoneOffset
setTime
setMilliseconds
setUTCMilliseconds
setSeconds
setUTCSeconds
setMinutes
setUTCMinutes
setHours
setUTCHours
setDate
setUTCDate
setMonth
setUTCMonth
setFullYear
setUTCFullYear
setYear
getYear
custom
short
medium
long
full
Primitive hint is not a string.
Expected primitive hint to match one of 'default', 'number', 'string'.
jsc.vmtraps.signalling.thread
 on pid 
 received NeedDebuggerBreak trap
DebuggerScope
Inlined 
Compiled 
 at 
InvalidAbstractHeap
World
Stack
Heap
Butterfly_publicLength
Butterfly_vectorLength
GetterSetter_getter
GetterSetter_setter
JSCell_cellState
JSCell_indexingType
JSCell_structureID
JSCell_typeInfoFlags
JSCell_typeInfoType
JSObject_butterfly
JSPropertyNameEnumerator_cachedPropertyNames
RegExpObject_lastIndex
NamedProperties
IndexedInt32Properties
IndexedDoubleProperties
IndexedContiguousProperties
IndexedArrayStorageProperties
ArrayStorageProperties
DirectArgumentsProperties
ScopeProperties
TypedArrayProperties
HeapObjectCount
RegExpState
MathDotRandomState
InternalState
Absolute
DOMState
Watchpoint_fire
MiscFields
SideState
/BuildRoot/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/JavaScriptCore-7604.1.28.1/dfg/DFGAbstractValue.cpp
void JSC::DFG::AbstractValue::fixTypeForRepresentation(JSC::DFG::Graph &, NodeFlags, JSC::DFG::Node *)
Abstract value 
 for double node has type outside SpecFullDouble.
 for int52 node has type outside SpecAnyInt.
 for value node has type outside SpecBytecodeTop.
) on 
Adaptation of 
Phase %s took %.4f ms
Phase %s changed the IR.
m_graph.m_form == SSA
/BuildRoot/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/JavaScriptCore-7604.1.28.1/dfg/DFGClobberize.h
Bad use kind
impossible array mode for get
impossible array mode for put
Unrecognized node type: 
/BuildRoot/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/JavaScriptCore-7604.1.28.1/dfg/DFGArgumentsUtilities.cpp
JSC::DFG::Node *JSC::DFG::emitCodeToGetArgumentsArrayLength(JSC::DFG::InsertionSet &, JSC::DFG::Node *, unsigned int, JSC::DFG::NodeOrigin)
arguments->op() == CreateDirectArguments || arguments->op() == CreateScopedArguments || arguments->op() == CreateClonedArguments || arguments->op() == CreateRest || arguments->op() == PhantomDirectArguments || arguments->op() == PhantomClonedArguments || arguments->op() == PhantomCreateRest
NotSet
Unchecked
CheckOverflow
CheckOverflowAndNegativeZero
DoOverflow
Int32WithNegativeZeroCheck
Sinh
Cosh
Tanh
ASin
ASinh
ACos
ACosh
ATan
ATanh
Log10
Log1p
Log2
Cbrt
Expm1
API Marking Constraint #
SelectUsingPredictions
SelectUsingArguments
Unprofiled
Generic
ForceExit
Undecided
Contiguous
ArrayStorage
SlowPutArrayStorage
DirectArguments
ScopedArguments
AnyTypedArray
Unknown!
OriginalArray
OriginalNonArray
PossiblyArray
SaneChain
InBounds
ToHole
AsIs
Convert
Unavailable
{locals = 
; heap = 
backwards propagation
    Handling call at 
    Varargs call link status at 
/BuildRoot/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/JavaScriptCore-7604.1.28.1/dfg/DFGByteCodeParser.cpp
JSC::DFG::GetByOffsetMethod JSC::DFG::ByteCodeParser::planLoad(const JSC::ObjectPropertyCondition &)
condition.kind() == PropertyCondition::Presence
JSC::DFG::GetByOffsetMethod JSC::DFG::ByteCodeParser::planLoad(const JSC::ObjectPropertyConditionSet &)
!result
JSC::DFG::Node *JSC::DFG::ByteCodeParser::store(JSC::DFG::Node *, unsigned int, const JSC::PutByIdVariant &, JSC::DFG::Node *)
variant.kind() == PutByIdVariant::Replace
    parsing 
bool JSC::DFG::ByteCodeParser::parseBlock(unsigned int)
constantScope
static_cast<JSScope*>(currentInstruction[6].u.pointer) == constantScope
m_currentIndex == blockBegin
Parsing 
 for inlining at 
, isStrictMode = 
Jump targets: 
Done parsing 
 (fell off end)
        appended 
JSC::DFG::ByteCodeParser::DelayedSetLocal::DelayedSetLocal(const JSC::CodeOrigin &, JSC::VirtualRegister, JSC::DFG::Node *)
operand.isValid()
bool JSC::DFG::ByteCodeParser::attemptToInlineCall(JSC::DFG::Node *, int, JSC::CallVariant, int, int, unsigned int, InlineCallFrame::Kind, JSC::DFG::ByteCodeParser::CallerLinkability, SpeculatedType, unsigned int &, const ChecksFunctor &) [ChecksFunctor = (lambda at /BuildRoot/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/JavaScriptCore-7604.1.28.1/dfg/DFGByteCodeParser.cpp:1847:30)]
didInsertChecks
!didInsertChecks
    Handling constant internal function 
       The intrinsic is 
void JSC::DFG::ByteCodeParser::inlineCall(JSC::DFG::Node *, int, JSC::CallVariant, int, int, unsigned int, InlineCallFrame::Kind, JSC::DFG::ByteCodeParser::CallerLinkability, const ChecksFunctor &) [ChecksFunctor = (lambda at /BuildRoot/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/JavaScriptCore-7604.1.28.1/dfg/DFGByteCodeParser.cpp:1847:30)]
m_inlineStackTop->m_inlineCallFrame->isClosureCall == callee.isClosureCall()
calleeVariable
    Allowing parsing to continue in last inlined block.
        Repurposing last block from 
    Creating new block after inlining.
bool JSC::DFG::ByteCodeParser::attemptToInlineCall(JSC::DFG::Node *, int, JSC::CallVariant, int, int, unsigned int, InlineCallFrame::Kind, JSC::DFG::ByteCodeParser::CallerLinkability, SpeculatedType, unsigned int &, const ChecksFunctor &) [ChecksFunctor = (lambda at /BuildRoot/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/JavaScriptCore-7604.1.28.1/dfg/DFGByteCodeParser.cpp:2038:30)]
void JSC::DFG::ByteCodeParser::inlineCall(JSC::DFG::Node *, int, JSC::CallVariant, int, int, unsigned int, InlineCallFrame::Kind, JSC::DFG::ByteCodeParser::CallerLinkability, const ChecksFunctor &) [ChecksFunctor = (lambda at /BuildRoot/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/JavaScriptCore-7604.1.28.1/dfg/DFGByteCodeParser.cpp:2038:30)]
DFG rejecting opcode in 
 because of opcode 
control flow analysis
Graph before CFA:
   Widening state at OSR entry block.
   Found must-handle block: 
   Not live: 
   Widening 
 with 
CFA [%u]
   Block 
      head vars: 
      head regs: 
      %s @%u: 
(UNSAFE) 
         Expect OSR exit.
      tail regs: 
      tail vars: 
/BuildRoot/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/JavaScriptCore-7604.1.28.1/dfg/DFGAbstractInterpreterInlines.h
bool JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::executeEffects(unsigned int, JSC::DFG::Node *) [AbstractStateType = JSC::DFG::InPlaceAbstractState]
value.isType(typeFilterFor(variableAccessData->flushFormat()))
value.isType(typeFilterFor(data->format))
node->child1().useKind() == UntypedUse
Unexpected node type
status[i].conditionSet().isEmpty()
void JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::verifyEdge(JSC::DFG::Node *, JSC::DFG::Edge) [AbstractStateType = JSC::DFG::InPlaceAbstractState]
Edge verification error: 
 was expected to have type 
 but has type 
CFG simplification
/BuildRoot/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/JavaScriptCore-7604.1.28.1/dfg/DFGCFGSimplificationPhase.cpp
bool JSC::DFG::CFGSimplificationPhase::run()
m_graph.m_form != SSA
clean up
void JSC::DFG::clobberize(JSC::DFG::Graph &, JSC::DFG::Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &) [ReadFunctor = JSC::DFG::AbstractHeapOverlaps, WriteFunctor = JSC::DFG::AbstractHeapOverlaps, DefFunctor = JSC::DFG::NoOpClobberize]
void JSC::DFG::clobberize(JSC::DFG::Graph &, JSC::DFG::Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = JSC::DFG::AbstractHeapOverlaps, DefFunctor = JSC::DFG::NoOpClobberize]
void JSC::DFG::clobberize(JSC::DFG::Graph &, JSC::DFG::Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at /BuildRoot/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/JavaScriptCore-7604.1.28.1/dfg/DFGClobberize.cpp:64:9), DefFunctor = JSC::DFG::NoOpClobberize]
void JSC::DFG::clobberize(JSC::DFG::Graph &, JSC::DFG::Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &) [ReadFunctor = JSC::DFG::ClobberSetAdd, WriteFunctor = JSC::DFG::ClobberSetAdd, DefFunctor = JSC::DFG::NoOpClobberize]
void JSC::DFG::clobberize(JSC::DFG::Graph &, JSC::DFG::Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at /BuildRoot/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/JavaScriptCore-7604.1.28.1/dfg/DFGClobbersExitState.cpp:93:13), DefFunctor = JSC::DFG::NoOpClobberize]
BeforeFixpoint
FixpointNotConverged
FixpointConverged
LoadStore
ThreadedCPS
LocallyUnified
GloballyUnified
EverythingIsLive
ExactRefCount
(Compile of 
InvalidCompilationMode
DFGMode
FTLMode
FTLForOSREntryMode
constant folding
/BuildRoot/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/JavaScriptCore-7604.1.28.1/dfg/DFGConstantFoldingPhase.cpp
void JSC::DFG::ConstantFoldingPhase::emitPutByOffset(unsigned int, JSC::DFG::Node *, const JSC::DFG::AbstractValue &, const JSC::PutByIdVariant &, unsigned int)
origin.exitOK
void JSC::DFG::ConstantFoldingPhase::emitGetByOffset(unsigned int, JSC::DFG::Node *, const JSC::DFG::AbstractValue &, const JSC::GetByIdVariant &, unsigned int)
variant.conditionSet().isEmpty()
void JSC::DFG::ConstantFoldingPhase::fixUpsilons(JSC::DFG::BasicBlock *)
Bad Upsilon phi() pointer
CPS rethreading
/BuildRoot/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/JavaScriptCore-7604.1.28.1/dfg/DFGCPSRethreadingPhase.cpp
void JSC::DFG::CPSRethreadingPhase::computeIsFlushed()
Invalid node in flush graph
local common subexpression elimination
void JSC::DFG::clobberize(JSC::DFG::Graph &, JSC::DFG::Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::SmallMaps> >, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::SmallMaps> >, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::SmallMaps> >]
void JSC::DFG::clobberize(JSC::DFG::Graph &, JSC::DFG::Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::LargeMaps> >, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::LargeMaps> >, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::LargeMaps> >]
dead code elimination
Desired watchpoints:
    Watchpoint sets: 
    Inline watchpoint sets: 
    Inferred values: 
    Buffer views: 
    Object property conditions: 
    Inferred types: 
Generated DFG JIT code for 
, instruction count = 
    Optimized with execution counter = 
    Code at [
(End Of Main Path)
DFG(Driver) compiling 
, number of instructions = 
Preparing for DFG compilation.
Deferring DFG compilation of 
 with queue length 
Check:
Kill:
none
frequentExit
: Adding exit site: 
fixup
/BuildRoot/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/JavaScriptCore-7604.1.28.1/dfg/DFGFixupPhase.cpp
void JSC::DFG::FixupPhase::fixupNode(JSC::DFG::Node *)
Unexpected node during fixup
auto JSC::DFG::FixupPhase::fixupChecksInBlock(JSC::DFG::BasicBlock *)::(anonymous class)::operator()(JSC::DFG::Edge &) const
node->op() == Check
/BuildRoot/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/JavaScriptCore-7604.1.28.1/dfg/DFGFlowIndexing.cpp
void JSC::DFG::FlowIndexing::recompute()
m_shadowIndexToNodeIndex.size() + numNodeIndices == m_numIndices
m_shadowIndexToNodeIndex[shadowIndex - numNodeIndices] == nodeIndex
DeadFlush
FlushedInt32
FlushedInt52
FlushedDouble
FlushedCell
FlushedBoolean
FlushedJSValue
ConflictingFlush
<-- 
--> 
% 4d:<%c%u:
Type:
Rounding:
, ID:
invalid cell operand: 
<host function>
<non-function executable>
, inferredType = 
machine:
firstVarArgOffset = 
start = 
, count = 
, machineStart = 
, machineCount = 
, mandatoryMinimum = 
, limit = 
, domJIT = 
, F:
default:
ClobbersExit
exit: 
ExitInvalid
WasHoisted
  predicting 
Block 
 (skipped)
 (OSR target)
  Execution count: 
  Predecessors:
  Successors:
 <invalid>
  Dominated by: 
  Dominates: 
  Dominance Frontier: 
  Iterated Dominance Frontier: 
  Backwards dominates by: 
  Backwards dominates: 
  Control equivalent to:
  Pre/Post Numbering: 
  Loop header, contains:
  Containing loop headers:
  Phi Nodes:
>->(
DFG for 
  Fixpoint state: 
; Form: 
; Unification state: 
; Ref count state: 
  Argument formats: 
  Arguments: 
  States: 
, CurrentlyCFAUnreachable
, CFAUnreachable
  Vars Before: 
  Intersected Vars Before: 
  Var Links: 
  Availability: 
  Live: 
  Values: 
, CFAInvalidated
  Vars After: 
GC Values:
/BuildRoot/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/JavaScriptCore-7604.1.28.1/dfg/DFGGraph.cpp
void JSC::DFG::Graph::deleteNode(JSC::DFG::Node *)
!block->ssa->liveAtHead.contains(node)
!block->ssa->liveAtTail.contains(node)
Dethreading DFG graph.
void JSC::DFG::Graph::assertIsRegistered(JSC::Structure *)
m_plan.weakReferences.contains(structure)
Structure 
 is watchable but isn't being watched.
While handling node 
JSConstant
DoubleConstant
Int52Constant
LazyJSConstant
Identity
ToThis
CreateThis
GetCallee
GetArgumentCountIncludingThis
GetLocal
SetLocal
PutStack
KillStack
GetStack
MovHint
ZombieHint
ExitOK
Phantom
Check
Upsilon
Flush
PhantomLocal
LoopHint
ExtractOSREntryLocal
CheckTierUpInLoop
CheckTierUpAndOSREnter
CheckTierUpAtReturn
GetLocalUnlinked
SetArgument
InvalidationPoint
BitAnd
BitOr
BitXor
BitLShift
BitRShift
BitURShift
ValueToInt32
UInt32ToNumber
BooleanToNumber
DoubleAsInt32
DoubleRep
Int52Rep
ValueRep
FiatInt52
ArithAdd
ArithClz32
ArithSub
ArithNegate
ArithMul
ArithIMul
ArithDiv
ArithMod
ArithAbs
ArithMin
ArithMax
ArithFRound
ArithPow
ArithRandom
ArithRound
ArithFloor
ArithCeil
ArithTrunc
ArithSqrt
ArithUnary
ValueAdd
StrCat
GetByVal
GetByValWithThis
GetMyArgumentByVal
GetMyArgumentByValOutOfBounds
LoadVarargs
ForwardVarargs
PutByValDirect
PutByVal
PutByValAlias
TryGetById
GetById
GetByIdFlush
GetByIdWithThis
PutById
PutByIdFlush
PutByIdDirect
PutByIdWithThis
PutByValWithThis
PutGetterById
PutSetterById
PutGetterSetterById
PutGetterByVal
PutSetterByVal
DefineDataProperty
DefineAccessorProperty
DeleteById
DeleteByVal
CheckStructure
GetExecutable
PutStructure
AllocatePropertyStorage
ReallocatePropertyStorage
GetButterfly
NukeStructureAndSetButterfly
CheckArray
Arrayify
ArrayifyToStructure
GetIndexedPropertyStorage
ConstantStoragePointer
GetGetter
GetSetter
GetByOffset
GetGetterSetterByOffset
MultiGetByOffset
PutByOffset
MultiPutByOffset
GetArrayLength
GetVectorLength
GetTypedArrayByteOffset
GetScope
SkipScope
ResolveScope
ResolveScopeForHoistingFuncDeclInEval
GetGlobalObject
GetClosureVar
PutClosureVar
GetGlobalVar
GetGlobalLexicalVariable
PutGlobalVariable
GetDynamicVar
PutDynamicVar
NotifyWrite
GetRegExpObjectLastIndex
SetRegExpObjectLastIndex
RecordRegExpCachedResult
CheckCell
CheckNotEmpty
CheckBadCell
CheckInBounds
CheckStringIdent
CheckTypeInfoFlags
CheckSubClass
ParseInt
AtomicsAdd
AtomicsAnd
AtomicsCompareExchange
AtomicsExchange
AtomicsIsLockFree
AtomicsLoad
AtomicsOr
AtomicsStore
AtomicsSub
AtomicsXor
ArrayPush
ArrayPop
ArraySlice
ArrayIndexOf
RegExpExec
RegExpTest
StringReplace
StringReplaceRegExp
StringCharCodeAt
StringCharAt
StringFromCharCode
CompareLess
CompareLessEq
CompareGreater
CompareGreaterEq
CompareEq
CompareStrictEq
CompareEqPtr
DirectCall
DirectConstruct
CallVarargs
CallForwardVarargs
ConstructVarargs
ConstructForwardVarargs
TailCallInlinedCaller
DirectTailCallInlinedCaller
TailCallVarargsInlinedCaller
TailCallForwardVarargsInlinedCaller
CallEval
LogShadowChickenPrologue
LogShadowChickenTail
NewObject
NewArray
NewArrayWithSpread
NewArrayWithSize
NewArrayBuffer
NewTypedArray
NewRegexp
GetRestLength
CreateRest
Spread
PhantomNewObject
PutHint
CheckStructureImmediate
MaterializeNewObject
PhantomNewFunction
PhantomNewGeneratorFunction
PhantomNewAsyncFunction
PhantomCreateActivation
MaterializeCreateActivation
OverridesHasInstance
InstanceOf
InstanceOfCustom
IsCellWithType
IsEmpty
IsUndefined
IsBoolean
IsNumber
IsObject
IsObjectOrNull
IsFunction
IsTypedArrayView
TypeOf
LogicalNot
ToPrimitive
ToString
ToNumber
CallObjectConstructor
CallStringConstructor
NumberToStringWithRadix
NewStringObject
MakeRope
ProfileType
ProfileControlFlow
SetFunctionName
HasOwnProperty
CreateActivation
CreateDirectArguments
PhantomDirectArguments
PhantomCreateRest
PhantomSpread
PhantomNewArrayWithSpread
CreateScopedArguments
CreateClonedArguments
PhantomClonedArguments
GetFromArguments
PutToArguments
GetArgument
NewFunction
NewGeneratorFunction
NewAsyncFunction
Throw
ThrowStaticError
Jump
Branch
Switch
Return
DirectTailCall
TailCallVarargs
TailCallForwardVarargs
Unreachable
CountExecution
ForceOSRExit
BottomValue
CheckTraps
StoreBarrier
FencedStoreBarrier
GetEnumerableLength
HasIndexedProperty
HasStructureProperty
HasGenericProperty
GetDirectPname
GetPropertyEnumerator
GetEnumeratorStructurePname
GetEnumeratorGenericPname
ToIndexString
MapHash
GetMapBucket
LoadFromJSMapBucket
IsNonEmptyMapBucket
ToLowerCase
CallDOMGetter
CallDOM
DFG ASSERTION FAILED: 
) : 
Graph at time of failure:
#end
StructuresAreWatched
StructuresAreClobbered
InvalidBranchDirection
TakeTrue
TakeFalse
TakeBoth
Range-based domination check is broken
Lengauer-Tarjan domination is broken
DFG DOMINATOR VALIDATION FAILED:
For block domination relationships:
Control flow graph:
    Block 
: successors = [
], predecessors = [
Lengauer-Tarjan Dominators:
Naive Dominators:
DFG DOMINATOR VALIDATION FAILIED!
    Block #
: idom = 
, idomKids = [
], pre/post = 
<null>
/BuildRoot/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/JavaScriptCore-7604.1.28.1/dfg/DFGInferredTypeCheck.cpp
void JSC::DFG::insertInferredTypeCheck(JSC::DFG::InsertionSet &, unsigned int, JSC::DFG::NodeOrigin, JSC::DFG::Node *, const InferredType::Descriptor &)
Bad inferred type
/BuildRoot/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/JavaScriptCore-7604.1.28.1/dfg/DFGInPlaceAbstractState.cpp
void JSC::DFG::InPlaceAbstractState::initialize()
Bad flush format for argument
invalidation point injection
DFG JIT code for %s
Firing jump replacement watchpoint from %p, to %p.
Lazy:SingleCharacterString(
%04X
Lazy:KnownString(
Lazy:NewString(
live catch variable preservation phase
/BuildRoot/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/JavaScriptCore-7604.1.28.1/dfg/DFGLiveCatchVariablePreservationPhase.cpp
bool JSC::DFG::LiveCatchVariablePreservationPhase::run()
m_graph.m_form == LoadStore
node->op() == Phi
maximal flush insertion phase
/BuildRoot/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/JavaScriptCore-7604.1.28.1/dfg/DFGMaximalFlushInsertionPhase.cpp
bool JSC::DFG::MaximalFlushInsertionPhase::run()
void JSC::DFG::MaximalFlushInsertionPhase::treatRootBlock(JSC::DFG::BasicBlock *, JSC::DFG::InsertionSet &)
node->op() != SetLocal
initialAccessNodes.operand(operand)->op() == Flush
accessData
DoesNotExit
ExitsForExceptions
Exits
Invalid
Load
LoadFromPrototype
SwitchImm
SwitchChar
SwitchString
SwitchCell
<Double>
<Int52>
MustGen
VarArgs
PureInt
PureInt(w/ neg zero)
PureNum
UseAsOther
MayHaveDoubleResult
MayHaveNonNumberResult
MayOverflowInt52
MayOverflowInt32InBaseline
MayOverflowInt32InDFG
MayNegZeroInBaseline
MayNegZeroInDFG
UseAsInt
ReallyWantsInt
IsFlushed
shadow(
Executed NotifyWrite
Log Full, called from inside DFG.
Speculation failure in 
 @ exit #
 (bc#
) with 
executeCounter = 
, reoptimizationRetryCounter = 
, optimizationDelayCounter = 
no alternative code block (i.e. we've been jettisoned)
, osrExitCounter = 
    GPRs at time of exit:
    FPRs at time of exit:
%llx:%lf
: Entered reoptimize
: Not reoptimizing because we've already been jettisoned.
: Not reoptimizing 
 because it either didn't exit enough or didn't loop enough after exit.
xmm0
xmm1
xmm2
xmm3
xmm4
xmm5
xmm6
xmm7
xmm8
xmm9
xmm10
xmm11
xmm12
xmm13
xmm14
xmm15
Requested length is negative
ArrayBuffer length minus the byteOffset is not a multiple of the element size
Symbol.Iterator for the first argument cannot be called.
Length out of range of buffer
Byte offset is not aligned
Symbol.Iterator for the first argument did not return an object.
Underlying ArrayBuffer has been detached from the view
Range consisting of offset and length are out of bounds
 cannot be negative
 too large
, machine code offset = 
, stack rules = [
], machine stack used = 
DFG OSR in 
 from bc#
    OSR failed because the target code block is not DFG.
    OSR failed because the entrypoint was optimized out.
    OSR failed because argument %zu was not passed, expected 
    OSR failed because argument 
 is 
, expected 
    OSR failed because variable 
, expected number.
machine int.
    OSR failed because stack growth failed.
    OSR should succeed.
    OSR using target PC %p.
    OSR returning data buffer %p.
ignored
maps to 
overwritten
, forced double
, forced machine int
OSR entrypoint creation
/BuildRoot/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/JavaScriptCore-7604.1.28.1/dfg/DFGOSRExit.cpp
JSC::DFG::OSRExit::OSRExit(JSC::ExitKind, JSC::JSValueSource, JSC::MethodOfGettingAValueProfile, JSC::DFG::SpeculativeJIT *, unsigned int, unsigned int)
canExit
DFG OSR exit #%u (%s, %s) from %s, with operands = %s
phantom insertion
/BuildRoot/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/JavaScriptCore-7604.1.28.1/dfg/DFGPhantomInsertionPhase.cpp
bool JSC::DFG::(anonymous namespace)::PhantomInsertionPhase::run()
m_graph.m_refCountState == ExactRefCount
Beginning DFG phase 
Before 
DFG(Plan) compiling 
N/A (fail)
Cancelled
ftlCompile
dfgCompile
Optimized 
 using 
 into 
 bytes in 
 (DFG: 
, B3: 
Compiler must handle OSR entry from bc#
 with values: 
Graph after parsing:
Graph after optimization:
dfgFinalize
took 
 ms (DFG: 
 ms with 
invalidated
failed
succeeded
prediction injection
prediction propagation
/BuildRoot/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/JavaScriptCore-7604.1.28.1/dfg/DFGPredictionPropagationPhase.cpp
void JSC::DFG::(anonymous namespace)::PredictionPropagationPhase::processInvariantsForNode()
Unexpected node during prediction propagation
ForwardEdge
CrossEdge
BackEdge
InvalidPromotedLocationKind
StructurePLoc
ActivationSymbolTablePLoc
NamedPropertyPLoc
IndexedPropertyPLoc
ArgumentPLoc
ArgumentCountPLoc
ArgumentsCalleePLoc
FunctionExecutablePLoc
FunctionActivationPLoc
ActivationScopePLoc
ClosureVarPLoc
PublicLengthPLoc
VectorLengthPLoc
SpreadPLoc
NewArrayWithSpreadArgumentPLoc
Bailing compilation.
/BuildRoot/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/JavaScriptCore-7604.1.28.1/dfg/DFGSpeculativeJIT.cpp
JSC::DFG::SilentRegisterSavePlan JSC::DFG::SpeculativeJIT::silentSavePlanForGPR(JSC::VirtualRegister, GPRReg)
node->isCellConstant()
void JSC::DFG::SpeculativeJIT::compileTryGetById(JSC::DFG::Node *)
SpeculativeJIT generating Node @%d (bc#%u) at JIT offset 0x%x
OSR Entries:
void JSC::DFG::SpeculativeJIT::compileArithAbs(JSC::DFG::Node *)
void JSC::DFG::SpeculativeJIT::compileArithRounding(JSC::DFG::Node *)
void JSC::DFG::SpeculativeJIT::compileCheckStructure(JSC::DFG::Node *)
void JSC::DFG::SpeculativeJIT::emitSwitch(JSC::DFG::Node *)
Bad switch kind
Bad Variant index in get
/BuildRoot/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/JavaScriptCore-7604.1.28.1/dfg/DFGSpeculativeJIT64.cpp
GPRReg JSC::DFG::SpeculativeJIT::fillJSValue(JSC::DFG::Edge)
spillFormat & DataFormatJS
Bad data format
Corrupt data format
void JSC::DFG::SpeculativeJIT::emitCall(JSC::DFG::Node *)
bad node type
isFlushed()
Graph::parameterSlotsForArgCount(numAllocatedArgs) <= m_jit.graph().m_parameterSlots
GPRReg JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict(JSC::DFG::Edge)
mustBeDataFormatInt32 == DataFormatInt32
GPRReg JSC::DFG::SpeculativeJIT::fillSpeculateInt52(JSC::DFG::Edge, JSC::DataFormat)
spillFormat == DataFormatInt52 || spillFormat == DataFormatStrictInt52
FPRReg JSC::DFG::SpeculativeJIT::fillSpeculateDouble(JSC::DFG::Edge)
Expected 
 to have double format but instead it is spilled as 
info.registerFormat() == DataFormatDouble
GPRReg JSC::DFG::SpeculativeJIT::fillSpeculateCell(JSC::DFG::Edge)
GPRReg JSC::DFG::SpeculativeJIT::fillSpeculateBoolean(JSC::DFG::Edge)
info.spillFormat() & DataFormatJS
void JSC::DFG::SpeculativeJIT::compileLogicalNot(JSC::DFG::Node *)
void JSC::DFG::SpeculativeJIT::emitBranch(JSC::DFG::Node *)
void JSC::DFG::SpeculativeJIT::compile(JSC::DFG::Node *)
Bad flush format
Bad array mode type
node->op() == PutByVal || node->op() == PutByValDirect
structure->indexingType() == node->indexingType()
indexingType & IsArray
Unexpected tier-up node
Unexpected node
GPRReg JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal(JSC::DFG::Edge, JSC::DataFormat &) [strict = false]
(spillFormat & DataFormatJS) || spillFormat == DataFormatInt32
!(type & SpecInt52Only)
GPRReg JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal(JSC::DFG::Edge, JSC::DataFormat &) [strict = true]
stack layout
static execution count estimation
store barrier fencing
/BuildRoot/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/JavaScriptCore-7604.1.28.1/dfg/DFGStoreBarrierClusteringPhase.cpp
void JSC::DFG::(anonymous namespace)::StoreBarrierClusteringPhase::doBlock(JSC::DFG::BasicBlock *)
!node->origin.wasHoisted
node->child1().useKind() == KnownCellUse
fast store barrier insertion
/BuildRoot/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/JavaScriptCore-7604.1.28.1/dfg/DFGStoreBarrierInsertionPhase.cpp
bool JSC::DFG::(anonymous namespace)::StoreBarrierInsertionPhase<JSC::DFG::(anonymous namespace)::PhaseMode::Fast>::run() [mode = JSC::DFG::(anonymous namespace)::PhaseMode::Fast]
void JSC::DFG::(anonymous namespace)::StoreBarrierInsertionPhase<JSC::DFG::(anonymous namespace)::PhaseMode::Fast>::insertBarrier(unsigned int, JSC::DFG::Edge) [mode = JSC::DFG::(anonymous namespace)::PhaseMode::Fast]
isCell(base.useKind())
strength reduction
Clobbered:
DFG OSR exit generation thunk
DFG OSR entry thunk
tier-up check injection
structure check hoisting
unification
Untyped
KnownInt32
AnyInt
RealNumber
DoubleRepReal
DoubleRepAnyInt
KnownBoolean
KnownCell
CellOrOther
FinalObject
RegExpObject
ProxyObject
DerivedArray
MapObjectUse
SetObjectUse
ObjectOrOther
StringIdent
StringOrOther
KnownString
KnownPrimitive
StringObject
StringOrStringObject
NotStringVar
NotCell
Other
Misc
: validation failed: (%s = 
static_cast<Node*>(0)
) == (%s = 
root->variablesAtHead.local(i)
) (%s:%d).
/BuildRoot/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/JavaScriptCore-7604.1.28.1/dfg/DFGValidate.cpp
void JSC::DFG::(anonymous namespace)::Validate::validate()
static_cast<Node*>(0) == root->variablesAtHead.local(i)
: validation failed: %s (%s:%d).
block->isReachable
edge->hasInt52Result() == (edge.useKind() == Int52RepUse)
edge->hasResult()
edge->hasVariableAccessData(m_graph)
edge->variableAccessData() == node->variableAccessData()
edge->op() != SetLocal
m_myRefCounts.get(node)
node->adjustedRefCount()
m_myRefCounts.get(node) == node->adjustedRefCount()
node->op() == Phantom || node->op() == PhantomLocal || node->op() == Flush || node->op() == Check
foundTerminal
node->origin.isSet()
node->origin.semantic.isSet() == node->origin.forExit.isSet()
!(mayExit(m_graph, node) == Exits && !node->origin.exitOK)
!clobbersExitState(m_graph, previousNode) || !node->origin.exitOK || node->op() == ExitOK || node->origin.forExit != previousNode->origin.forExit
!(!previousNode->origin.exitOK && node->origin.exitOK) || node->op() == ExitOK || node->origin.forExit != previousNode->origin.forExit
!node->hasStructure() || !!node->structure().get()
!node->hasCellOperand() || node->cellOperand()->value().isCell()
!node->hasCellOperand() || !!node->cellOperand()->value()
!node->child3()
!node->child2()
canonicalResultRepresentation(node->result()) == canonicalResultRepresentation(node->child1()->result())
!!node->child1()
!"Bad use kind"
!!node->child2()
!!node->cellOperand()->value() && node->cellOperand()->value().isCell()
!node->transition()->previous->dfgShouldWatch()
!variant.oldStructureForTransition()->dfgShouldWatch()
structure->classInfo() == JSFinalObject::info() || structure->classInfo() == JSArray::info()
!hasAnyArrayStorage(structure->indexingType())
node->isNumberConstant()
!!m_graph.m_vm.hasOwnPropertyCache()
type == Array::ArrayStorage || type == Array::SlowPutArrayStorage
 in null Block 
 in Block 
Before phase:
At time of failure:
edge.useKind() == DoubleRepUse || edge.useKind() == DoubleRepRealUse || edge.useKind() == DoubleRepAnyIntUse
void JSC::DFG::(anonymous namespace)::Validate::validateEdgeWithDoubleResultIfNecessary(JSC::DFG::Node *, JSC::DFG::Edge)
shouldNotHaveTypeCheck(edge.useKind())
auto JSC::DFG::(anonymous namespace)::Validate::validate()::(anonymous class)::operator()(JSC::DFG::Edge) const
m_acceptableNodes.contains(edge.node())
void JSC::DFG::(anonymous namespace)::Validate::validateCPS()
edge->op() == SetLocal || edge->op() == SetArgument || edge->op() == Flush || edge->op() == Phi
edge->op() == SetLocal || edge->op() == SetArgument || edge->op() == Flush
prevBlock
prevNode
prevNode->shouldGenerate()
prevNode->op() == SetLocal || prevNode->op() == SetArgument || prevNode->op() == Phi
!prevBlock->isInBlock(edge.node())
found
!block->variablesAtHead.argument(i) || block->variablesAtHead.argument(i)->accessesStack(m_graph)
!block->variablesAtTail.argument(i) || block->variablesAtTail.argument(i)->accessesStack(m_graph)
!block->variablesAtHead.local(i) || block->variablesAtHead.local(i)->accessesStack(m_graph)
!block->variablesAtTail.local(i) || block->variablesAtTail.local(i)->accessesStack(m_graph)
node->op() != Phi
node->origin.forExit.isSet()
nodesInThisBlock.contains(edge.node())
!phisInThisBlock.contains(edge.node())
!"unexpected node type in CPS"
edge->isInt32Constant()
node->structureSet().size() == 1
!hasInt32(structure->indexingType())
!hasDouble(structure->indexingType())
m_graph.m_fixpointState != FixpointNotConverged
getLocalPositions.operand(node->local()) == notSet
getLocalPositions.operand(operand) < setLocalPositions.operand(operand)
void JSC::DFG::(anonymous namespace)::Validate::checkOperand(JSC::DFG::BasicBlock *, Operands<size_t> &, Operands<size_t> &, JSC::VirtualRegister)
 and 
block->phis.isEmpty()
void JSC::DFG::(anonymous namespace)::Validate::validateSSA()
!node->origin.exitOK
!didSeeExitOK
!"bad node type for SSA"
node->child1()->isPhantomAllocation()
node->child1()->op() == PhantomCreateRest
child->op() == PhantomSpread
!child->isPhantomAllocation()
bitVector->get(i)
!edge->isPhantomAllocation()
auto JSC::DFG::(anonymous namespace)::Validate::validateSSA()::(anonymous class)::operator()(const JSC::DFG::Edge &) const
void JSC::DFG::clobberize(JSC::DFG::Graph &, JSC::DFG::Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &) [ReadFunctor = (lambda at /BuildRoot/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/JavaScriptCore-7604.1.28.1/dfg/DFGValidate.cpp:356:21), WriteFunctor = (lambda at /BuildRoot/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/JavaScriptCore-7604.1.28.1/dfg/DFGValidate.cpp:357:21), DefFunctor = DefLambdaAdaptor]
location.heap().kind() != SideState
auto JSC::DFG::(anonymous namespace)::Validate::validate()::(anonymous class)::operator()(JSC::DFG::HeapLocation, JSC::DFG::LazyNode) const
location.heap().kind() != World
location.heap().kind() != Heap
Weak
Strong
varargs forwarding
/BuildRoot/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/JavaScriptCore-7604.1.28.1/dfg/DFGVarargsForwardingPhase.cpp
bool JSC::DFG::(anonymous namespace)::VarargsForwardingPhase::run()
void JSC::DFG::(anonymous namespace)::VarargsForwardingPhase::handleCandidate(JSC::DFG::BasicBlock *, unsigned int)
void JSC::DFG::clobberize(JSC::DFG::Graph &, JSC::DFG::Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at /BuildRoot/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/JavaScriptCore-7604.1.28.1/dfg/DFGVarargsForwardingPhase.cpp:223:21), DefFunctor = JSC::DFG::NoOpClobberize]
virtual register allocation
/BuildRoot/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/JavaScriptCore-7604.1.28.1/dfg/DFGVirtualRegisterAllocationPhase.cpp
bool JSC::DFG::VirtualRegisterAllocationPhase::run()
m_graph.m_form == ThreadedCPS
watchpoint collection
 Worker Thread
: Enqueueing plan to optimize 
: Waiting for all in VM to complete.
: Completing 
Worklist(
)[Queue Length = 
, Map Size = 
, Num Ready = 
, Num Active Threads = 
: Thread shutting down
: Compiling 
 asynchronously
Heap is stoped but here we are! (1)
Heap is stopped but here we are! (2)
: Compiled 
: Thread started
: Thread will stop
DFG Worklist
FTL Worklist
capturedArgumentInvalid
capturedArgument
%sdisassembly not available for range %p...%p
Asynchronous Disassembler
0x%x-0x%x
Not enough arguments
Syntax error
Type error
EvalCodeBlock
EvalExecutable
com.apple.JavaScriptCore.remote-inspector-runloop-mode
Exception
JSC EXCEPTION FUZZ: Throwing fuzz exception with call frame %p, seen in %s and return address %p.
Exception Fuzz
TerminatedExecutionError
JavaScript execution terminated.
Maximum call stack size exceeded.
Can't find private variable: @
Can't find variable: 
 (evaluating '
second argument to Function.prototype.apply must be an Array-like object
is not an Object.
 is not a function
[Symbol.hasInstance] is not a function, undefined, or null
is not a constructor
is not a function
is not an object
Cannot access uninitialized variable.
 (near '...
...')
 is not an Object. (evaluating '
. (evaluating '
 is not a function. (In '
', '
' is 
a Symbol
an instance of 
Will pretend to fail executable allocation.
Allocating 
 bytes of executable memory with 
 bytes allocated, 
 bytes reserved, and 
 committed.
 bytes of executable memory with JITCompilationMustSucceed.
Allocation failed because bytes allocated 
 bytes available.
Ran out of executable memory while allocating 
 bytes.
Executable
NativeExecutable:
EvalExecutable w/o CodeBlock
ProgramExecutable w/o CodeBlock
ModuleProgramExecutable w/o CodeBlock
FunctionExecutable w/o CodeBlock
%lf/%lf, %d
thresholdCheck
activeThreshold = 
, modifiedThreshold = 
, actualCount = 
, desiredCount = 
FromAnything
FromDFG
FromFTL
Unset
BadType
BadCell
BadIdent
BadExecutable
BadCache
BadConstantCache
BadIndexingType
BadTypeInfoFlags
Overflow
NegativeZero
StoreToHole
LoadFromHole
InadequateCoverage
ArgumentsEscaped
ExoticObjectMode
NotStringObject
VarargsOverflow
TDZFailure
HoistingFailed
Uncountable
UncountableInvalidation
WatchdogTimerFired
DebuggerEvent
ExceptionCheck
GenericUnwind
FunctionCodeBlock
function *
async function 
() {
() {
FunctionExecutable
<nogen>
functionOverrides 
IO ERROR
Failed to open file 
. Did you add the file-read-data entitlement to WebProcess.sb?
override
Failed to close file %s: %s
<overridden>
SYNTAX ERROR
Expecting '
' clause:
Cannot have any characters before '
' must be followed by a ' ':
Missing { after '
' clause start delimiter:
Delimiter '
' cannot have '{', '}', or whitespace:
Unexpected characters after '
' clause end delimiter '
' not found:
Are you missing a '}' before the delimiter?
[Symbol.hasInstance]
() {
    [native code]
async 
FunctionRareData
Failed to open file %s. Did you add the file-read-data entitlement to WebProcess.sb?
Basic
Verbose
Generator
, call = 
GetterSetter
HashMapBucket
[GC<
>: shutdown 
...]
FATAL: Shared collector mark stack not empty! It has 
 elements.
FATAL: Shared mutator mark stack not empty! It has 
Full sweep: 
kb, 
>: START 
Collection scope already set during GC: 
Fatal: SlotVisitor should think that GC should terminate before constraint solving, but it does not think this.
slotVisitor.isEmpty(): 
slotVisitor.collectorMarkStack().isEmpty(): 
slotVisitor.mutatorMarkStack().isEmpty(): 
m_numberOfActiveParallelMarkers: 
m_sharedCollectorMarkStack->isEmpty(): 
m_sharedMutatorMarkStack->isEmpty(): 
slotVisitor.didReachTermination(): 
kb (
) o=
ms (max 
)...]
), cycle 
ms END]
FATAL: world already stopped.
Fatal: collector does not believe that the world is stopped.
Fatal: hasAccess = 
, stopped = 
Fatal: mutator has the conn.
FATAL: Attempting to release access but the mutator does not have access.
FATAL: Attempting to release access but the mutator is stopped.
>: finalize 
FullCollection, 
EdenCollection, 
Conservative Scan
Misc Small Roots
Strong Handles
Debugger
JIT Stub Routines
Weak Sets
Weak Reference Harvesters
DFG Worklists
CodeBlocks
Mrms
Mutator+Race Mark Stack
>: starting 
JSC DEBUG Continuous GC
[unknown]
Sampling Profiler data:
DFG Worklists:
Auxiliary
<root>
"version":1
"nodes":
0,0,0,0
"nodeClassNames":
"edges":
"edgeTypes":
"edgeNames":
Internal
Property
Index
JSC ICStats
InvalidKind
GetByIdAddAccessCase
GetByIdReplaceWithJump
GetByIdSelfPatch
InAddAccessCase
InReplaceWithJump
OperationGetById
OperationGetByIdGeneric
OperationGetByIdBuildList
OperationGetByIdOptimize
OperationGetByIdWithThisOptimize
OperationInOptimize
OperationIn
OperationGenericIn
OperationPutByIdStrict
OperationPutByIdNonStrict
OperationPutByIdDirectStrict
OperationPutByIdDirectNonStrict
OperationPutByIdStrictOptimize
OperationPutByIdNonStrictOptimize
OperationPutByIdDirectStrictOptimize
OperationPutByIdDirectNonStrictOptimize
OperationPutByIdStrictBuildList
OperationPutByIdNonStrictBuildList
OperationPutByIdDirectStrictBuildList
OperationPutByIdDirectNonStrictBuildList
PutByIdAddAccessCase
PutByIdReplaceWithJump
PutByIdSelfPatch
ICStats:
<null identifier>
%s%s
|MayHaveIndexedAccessors
InferredType
Bottom
ObjectWithStructure
ObjectWithStructureOrOther
Inferred type changed on 
 for property 
: old type was 
 while desired type is 
InferredTypeTable
InferredValue
InferredValue clean-up during GC
InjectedScript
evaluate
callFunctionOn
evaluateOnCallFrame
getFunctionDetails
Internal error
functionDetails
getPreview
getProperties
getDisplayableProperties
getInternalProperties
getCollectionEntries
saveResult
wrapCallFrames
wrapObject
wrapTable
previewValue
setExceptionValue
clearExceptionValue
findObjectById
inspectObject
releaseObject
releaseObjectGroup
Object has too long reference chain (must not be longer than %d)
Exception while making a call.
Internal error: result value is empty
Internal error: result is not an Object
result
Internal error: result is not a pair of value and wasThrown flag
wasThrown
savedResultIndex
injectedScriptId
Failed to parse/execute InjectedScriptSource.js!
module
injectModule
property access
property replace
array length
InlineAccess: linking constant jump
InlineAccessType: '%s'
, bc#
, closure call
, known callee: 
, numArgs+this = 
, stackOffset = 
 maps to 
GetterCall
SetterCall
Inspector
Message must be in JSON format
Message must be a JSONified object
'id' property was not found
The type of 'id' property must be integer
method
'method' property wasn't found
The type of 'method' property must be string
The 'method' property was formatted incorrectly. It should be 'Domain.method'
' domain was not found
code
data
Integer
Value
'params' object must contain required parameter '%s' with type '%s'.
Parameter '%s' with type '%s' was not found.
Parameter '%s' has wrong type. It must be '%s'.
ApplicationCache
params
getFramesWithManifests
enable
getManifestForFrame
getApplicationCacheForFrame
' was not found
frameIds
frameId
Some arguments of method '%s' can't be processed
ApplicationCache.getManifestForFrame
manifestURL
ApplicationCache.getApplicationCacheForFrame
applicationCache
disable
getMatchedStylesForNode
getInlineStylesForNode
getComputedStyleForNode
getAllStyleSheets
getStyleSheet
getStyleSheetText
setStyleSheetText
setStyleText
setRuleSelector
createStyleSheet
addRule
getSupportedCSSProperties
getSupportedSystemFontFamilyNames
forcePseudoState
getNamedFlowCollection
nodeId
includePseudo
includeInherited
CSS.getMatchedStylesForNode
matchedCSSRules
pseudoElements
inherited
CSS.getInlineStylesForNode
inlineStyle
attributesStyle
CSS.getComputedStyleForNode
computedStyle
headers
styleSheetId
CSS.getStyleSheet
styleSheet
CSS.getStyleSheetText
CSS.setStyleSheetText
styleId
CSS.setStyleText
style
ruleId
selector
CSS.setRuleSelector
rule
CSS.createStyleSheet
CSS.addRule
cssProperties
fontFamilyNames
forcedPseudoClasses
CSS.forcePseudoState
documentNodeId
CSS.getNamedFlowCollection
namedFlows
Canvas
requestNode
requestContent
canvasId
Canvas.requestNode
Canvas.requestContent
content
clearMessages
setMonitoringXHREnabled
addInspectedNode
enabled
Console.setMonitoringXHREnabled
Console.addInspectedNode
getDocument
requestChildNodes
querySelector
querySelectorAll
setNodeName
setNodeValue
removeNode
setAttributeValue
setAttributesAsText
removeAttribute
getEventListenersForNode
getAccessibilityPropertiesForNode
getOuterHTML
setOuterHTML
performSearch
getSearchResults
discardSearchResults
setInspectModeEnabled
highlightRect
highlightQuad
highlightSelector
highlightNode
hideHighlight
highlightFrame
pushNodeByPathToFrontend
pushNodeByBackendIdToFrontend
releaseBackendNodeIds
resolveNode
getAttributes
moveTo
undo
redo
markUndoableState
root
depth
DOM.requestChildNodes
DOM.querySelector
DOM.querySelectorAll
nodeIds
DOM.setNodeName
DOM.setNodeValue
DOM.removeNode
DOM.setAttributeValue
DOM.setAttributesAsText
DOM.removeAttribute
objectGroup
DOM.getEventListenersForNode
listeners
DOM.getAccessibilityPropertiesForNode
properties
DOM.getOuterHTML
outerHTML
DOM.setOuterHTML
query
DOM.performSearch
searchId
resultCount
fromIndex
toIndex
DOM.getSearchResults
DOM.discardSearchResults
objectId
DOM.requestNode
highlightConfig
DOM.setInspectModeEnabled
width
height
color
outlineColor
usePageCoordinates
DOM.highlightRect
quad
DOM.highlightQuad
selectorString
DOM.highlightSelector
DOM.highlightNode
contentColor
contentOutlineColor
DOM.highlightFrame
path
DOM.pushNodeByPathToFrontend
backendNodeId
DOM.pushNodeByBackendIdToFrontend
nodeGroup
DOM.releaseBackendNodeIds
DOM.resolveNode
DOM.getAttributes
attributes
targetNodeId
insertBeforeNodeId
DOM.moveTo
DOM.focus
DOMDebugger
setDOMBreakpoint
removeDOMBreakpoint
setEventListenerBreakpoint
removeEventListenerBreakpoint
setInstrumentationBreakpoint
removeInstrumentationBreakpoint
setXHRBreakpoint
removeXHRBreakpoint
DOMDebugger.setDOMBreakpoint
DOMDebugger.removeDOMBreakpoint
eventName
DOMDebugger.setEventListenerBreakpoint
DOMDebugger.removeEventListenerBreakpoint
DOMDebugger.setInstrumentationBreakpoint
DOMDebugger.removeInstrumentationBreakpoint
isRegex
DOMDebugger.setXHRBreakpoint
DOMDebugger.removeXHRBreakpoint
DOMStorage
getDOMStorageItems
setDOMStorageItem
removeDOMStorageItem
storageId
DOMStorage.getDOMStorageItems
DOMStorage.setDOMStorageItem
DOMStorage.removeDOMStorageItem
Database
getDatabaseTableNames
executeSQL
databaseId
Database.getDatabaseTableNames
tableNames
columnNames
sqlError
Database.executeSQL
setAsyncStackTraceDepth
setBreakpointsActive
setBreakpointByUrl
setBreakpoint
removeBreakpoint
continueUntilNextRunLoop
continueToLocation
stepOver
stepInto
stepOut
pause
resume
searchInContent
getScriptSource
setPauseOnExceptions
setPauseOnAssertions
setOverlayMessage
Debugger.setAsyncStackTraceDepth
active
Debugger.setBreakpointsActive
urlRegex
columnNumber
options
Debugger.setBreakpointByUrl
breakpointId
locations
Debugger.setBreakpoint
actualLocation
Debugger.removeBreakpoint
Debugger.continueToLocation
scriptId
caseSensitive
Debugger.searchInContent
Debugger.getScriptSource
scriptSource
functionId
Debugger.getFunctionDetails
details
state
Debugger.setPauseOnExceptions
Debugger.setPauseOnAssertions
callFrameId
expression
includeCommandLineAPI
doNotPauseOnExceptionsAndMuteConsole
returnByValue
generatePreview
Debugger.evaluateOnCallFrame
Debugger.setOverlayMessage
snapshot
startTracking
stopTracking
getRemoteObject
timestamp
snapshotData
heapObjectId
Heap.getPreview
preview
Heap.getRemoteObject
IndexedDB
requestDatabaseNames
requestDatabase
requestData
clearObjectStore
databaseNames
securityOrigin
IndexedDB.requestDatabaseNames
databaseWithObjectStores
databaseName
IndexedDB.requestDatabase
objectStoreDataEntries
hasMore
objectStoreName
indexName
skipCount
pageSize
keyRange
IndexedDB.requestData
IndexedDB.clearObjectStore
initialized
LayerTree
layersForNode
reasonsForCompositingLayer
LayerTree.layersForNode
layers
layerId
LayerTree.reasonsForCompositingLayer
compositingReasons
Network
setExtraHTTPHeaders
getResponseBody
setResourceCachingDisabled
loadResource
resolveWebSocket
Network.setExtraHTTPHeaders
requestId
Network.getResponseBody
body
base64Encoded
disabled
Network.setResourceCachingDisabled
mimeType
status
Network.loadResource
Network.resolveWebSocket
Page
addScriptToEvaluateOnLoad
removeScriptToEvaluateOnLoad
navigate
getCookies
deleteCookie
getResourceTree
getResourceContent
searchInResource
searchInResources
setShowPaintRects
setEmulatedMedia
getCompositingBordersVisible
setCompositingBordersVisible
snapshotNode
snapshotRect
archive
Page.addScriptToEvaluateOnLoad
identifier
Page.removeScriptToEvaluateOnLoad
ignoreCache
revalidateAllResources
scriptToEvaluateOnLoad
Page.reload
Page.navigate
cookies
cookieName
Page.deleteCookie
frameTree
Page.getResourceContent
Page.searchInResource
Page.searchInResources
Page.setShowPaintRects
media
Page.setEmulatedMedia
visible
Page.setCompositingBordersVisible
Page.snapshotNode
dataURL
coordinateSystem
Page.snapshotRect
Runtime
getRuntimeTypesForVariablesAtOffsets
enableTypeProfiler
disableTypeProfiler
enableControlFlowProfiler
disableControlFlowProfiler
getBasicBlocks
Runtime.parse
range
contextId
Runtime.evaluate
functionDeclaration
Runtime.callFunctionOn
Runtime.getPreview
ownProperties
Runtime.getProperties
internalProperties
Runtime.getDisplayableProperties
startIndex
numberToFetch
Runtime.getCollectionEntries
Runtime.saveResult
Runtime.releaseObject
Runtime.releaseObjectGroup
Runtime.getRuntimeTypesForVariablesAtOffsets
types
sourceID
Runtime.getBasicBlocks
basicBlocks
ScriptProfiler
includeSamples
ScriptProfiler.startTracking
Timeline
start
stop
setAutoCaptureEnabled
setInstruments
maxCallStackDepth
Timeline.start
Timeline.setAutoCaptureEnabled
instruments
Timeline.setInstruments
Worker
sendMessageToWorker
workerId
Worker.initialized
Worker.sendMessageToWorker
%d console messages are not shown.
Timer "
" already exists
" does not exist
: %.3fms
backtrace
depth must be a positive number.
BreakpointAction of incorrect type, expected object
BreakpointAction had type missing
BreakpointAction had unknown type
Either url or urlRegex must be specified.
Breakpoint at specified location already exists.
condition
autoContinue
actions
ignoreCount
No script for id: 
Could not resolve breakpoint
Breakpoint at specified location already exists
Function object id is obsolete
Was not paused or waiting to pause
uncaught
Unknown pause on exceptions mode: 
Internal error. Could not change pause on exceptions state
Not paused
Could not find InjectedScript for callFrameId
Can only perform operation while paused.
scriptId and lineNumber are required.
breakpoint-action-
directive
__InjectedScript_
probeId
batchId
sampleId
payload
ApplicationCache.applicationCacheStatusUpdated
ApplicationCache.networkStateUpdated
isNowOnline
CSS.mediaQueryResultChanged
CSS.styleSheetChanged
CSS.styleSheetAdded
CSS.styleSheetRemoved
CSS.namedFlowCreated
namedFlow
CSS.namedFlowRemoved
flowName
CSS.regionOversetChanged
CSS.registeredNamedFlowContentElement
contentNodeId
nextContentNodeId
CSS.unregisteredNamedFlowContentElement
Canvas.canvasAdded
canvas
Canvas.canvasRemoved
Canvas.canvasMemoryChanged
memoryCost
Console.messageAdded
Console.messageRepeatCountUpdated
Console.messagesCleared
Console.heapSnapshot
title
DOM.documentUpdated
DOM.setChildNodes
parentId
nodes
DOM.attributeModified
DOM.attributeRemoved
DOM.inlineStyleInvalidated
DOM.characterDataModified
characterData
DOM.childNodeCountUpdated
childNodeCount
DOM.childNodeInserted
parentNodeId
previousNodeId
node
DOM.childNodeRemoved
DOM.shadowRootPushed
hostId
DOM.shadowRootPopped
rootId
DOM.customElementStateChanged
customElementState
DOM.pseudoElementAdded
pseudoElement
DOM.pseudoElementRemoved
pseudoElementId
DOMStorage.domStorageItemsCleared
DOMStorage.domStorageItemRemoved
DOMStorage.domStorageItemAdded
newValue
DOMStorage.domStorageItemUpdated
oldValue
Database.addDatabase
database
Debugger.globalObjectCleared
Debugger.scriptParsed
startLine
startColumn
endLine
endColumn
isContentScript
sourceMapURL
Debugger.scriptFailedToParse
errorLine
errorMessage
Debugger.breakpointResolved
Debugger.paused
reason
asyncStackTrace
Debugger.resumed
Debugger.didSampleProbe
sample
Debugger.playBreakpointActionSound
breakpointActionId
Heap.garbageCollected
collection
Heap.trackingStart
Heap.trackingComplete
Inspector.evaluateForTestInFrontend
script
Inspector.inspect
hints
Inspector.activateExtraDomains
domains
LayerTree.layerTreeDidChange
Memory.memoryPressure
severity
Memory.trackingStart
Memory.trackingUpdate
event
Memory.trackingComplete
Network.requestWillBeSent
loaderId
documentURL
request
initiator
redirectResponse
targetId
Network.responseReceived
response
Network.dataReceived
dataLength
encodedDataLength
Network.loadingFinished
metrics
Network.loadingFailed
errorText
canceled
Network.requestServedFromMemoryCache
resource
Network.webSocketWillSendHandshakeRequest
walltime
Network.webSocketHandshakeResponseReceived
Network.webSocketCreated
Network.webSocketClosed
Network.webSocketFrameReceived
Network.webSocketFrameError
Network.webSocketFrameSent
Page.domContentEventFired
Page.loadEventFired
Page.frameNavigated
frame
Page.frameDetached
Page.frameStartedLoading
Page.frameStoppedLoading
Page.frameScheduledNavigation
delay
Page.frameClearedScheduledNavigation
Runtime.executionContextCreated
context
ScriptProfiler.trackingStart
ScriptProfiler.trackingUpdate
ScriptProfiler.trackingComplete
samples
ScriptProfiler.programmaticCaptureStarted
ScriptProfiler.programmaticCaptureStopped
Timeline.eventRecorded
record
Timeline.recordingStarted
startTime
Timeline.recordingStopped
endTime
Timeline.autoCaptureStarted
Timeline.programmaticCaptureStarted
Timeline.programmaticCaptureStopped
Worker.workerCreated
Worker.workerTerminated
Worker.dispatchMessageFromWorker
No heap snapshot
No object for identifier, it may have been collected
Unable to get object details - Structure
Unable to get object details - GlobalObject
Unable to get object details - InjectedScript
Unable to get object details
implicit
parsedOk
priority
children
user
user-agent
inspector
regular
inactive
mediaRule
importRule
linkedSheet
inlineSheet
overset
empty
canvas-2d
webgl
javascript
network
console-api
storage
appcache
rendering
security
content-blocker
other
warning
startGroup
startGroupCollapsed
endGroup
timing
before
after
open
builtin
waiting
additions
removals
mixed
page
step
date
grammar
spelling
assertive
polite
subtree-modified
attribute-modified
node-removed
sound
probe
closure
functionName
globalLexicalEnvironment
nestedLexical
partial
array
images
unknown
memory-cache
disk-cache
high
Document
Stylesheet
Image
Font
Script
Fetch
parser
Viewport
regexp
weakmap
weakset
iterator
proxy
accessor
irrecoverable
unterminated-literal
recoverable
Microtask
EventDispatch
ScheduleStyleRecalculation
RecalculateStyles
InvalidateLayout
Layout
Paint
Composite
RenderingFrame
TimerInstall
TimerRemove
TimerFire
EvaluateScript
TimeStamp
Time
TimeEnd
FunctionCall
ProbeSample
ConsoleProfile
RequestAnimationFrame
CancelAnimationFrame
FireAnimationFrame
EventListener
exception
CSPViolation
DebuggerStatement
Breakpoint
PauseOnNextStatement
critical
non-critical
Could not find InjectedScript for objectId
The VM does not currently have Type Information.
User Query
Array of TypeLocation objects has an object that does not have type of TypeLocation.
typeInformationDescriptor
divot
The VM does not currently have a Control Flow Profiler.
startOffset
endOffset
leastCommonAncestor
structures
typeSet
isTruncated
isValid
hasExecuted
expressionLocation
stackFrames
stackTraces
\u%04X
Can't create duplicate global variable in eval: '
Executed eval, fired VarInjection watchpoint
Can't create duplicate variable in eval: '
usage must be either "sort" or "search"
lookup
best fit
localeMatcher must be either "lookup" or "best fit"
upper
lower
caseFirst must be either "upper", "lower", or "false"
failed to initialize Collator due to invalid locale
base
accent
variant
sensitivity must be either "base", "accent", "case", or "variant"
Failed to compare strings.
standard
dictionary
dict
gb2312han
gb2312
phonebook
phonebk
traditional
trad
supportedLocalesOf
compare
resolvedOptions
Intl.Collator.prototype.compare called on value that's not an object initialized as a Collator
Intl.Collator.prototype.resolvedOptions called on value that's not an object initialized as a Collator
failed to initialize DateTimeFormat due to invalid locale
gregory
gregorian
islamicc
islamic-civil
ethioaa
ethiopic-amete-alem
dataLocale
invalid time zone: %s
narrow
2-digit
weekday must be "narrow", "short", or "long"
EEEEE
EEEE
era must be "narrow", "short", or "long"
GGGGG
GGGG
year must be "2-digit" or "numeric"
month must be "2-digit", "numeric", "narrow", "short", or "long"
MMMMM
MMMM
day must be "2-digit" or "numeric"
hour must be "2-digit" or "numeric"
minute must be "2-digit" or "numeric"
second must be "2-digit" or "numeric"
timeZoneName must be "short" or "long"
zzzz
basic
formatMatcher must be either "basic" or "best fit"
failed to initialize DateTimeFormat
date value is not finite in DateTimeFormat format()
failed to format date value
dayPeriod
literal
date value is not finite in DateTimeFormat formatToParts()
failed to open field position iterator
Etc/UTC
Etc/GMT
format
Intl.DateTimeFormat.prototype.format called on value that's not an object initialized as a DateTimeFormat
Intl.DateTimeFormat.prototype.resolvedOptions called on value that's not an object initialized as a DateTimeFormat
Intl.DateTimeFormat.prototype.formatToParts called on value that's not an object initialized as a DateTimeFormat
failed to initialize NumberFormat due to invalid locale
decimal
percent
currency
style must be either "decimal", "percent", or "currency"
currency is not a well-formed currency code
currency must be a string
currencyDisplay
currencyDisplay must be either "code", "symbol", or "name"
minimumIntegerDigits
minimumFractionDigits
maximumFractionDigits
minimumSignificantDigits
maximumSignificantDigits
useGrouping
Failed to format a number.
Intl.NumberFormat.prototype.format called on value that's not an object initialized as a NumberFormat
Intl.NumberFormat.prototype.resolvedOptions called on value that's not an object initialized as a NumberFormat
getCanonicalLocales
 is out of range
locale value must be a string or object
invalid language tag: %s
en-gb-oed
en-GB-oed
i-ami
i-bnn
i-default
i-enochian
i-hak
i-klingon
i-lux
i-mingo
i-navajo
i-pwn
i-tao
i-tay
i-tsu
sgn-be-fr
sgn-be-nl
sgn-ch-de
art-lojban
cel-gaulish
no-bok
no-nyn
zh-guoyu
zh-hakka
zh-min
zh-min-nan
zh-xiang
Symbol.iterator property should be callable
Iterator
[Symbol.iterator]
 with Baseline JIT into 
 ms.
Baseline JIT code for %s
Preparing for JIT compilation.
Total Compile Time
Baseline Compile Time
DFG Compile Time
Host
LLInt
Baseline
Destroying JIT code at 
    (End Of Main Path)
    (S) 
    (End Of Slow Path)
Generated Baseline JIT code for 
   Source: 
   Code at [
In call frame 
 for code block 
 with null CodeBlock
Baseline has_indexed_property stub for %s, return point %p
Unexpected code block in Baseline->DFG tier-up: 
: Entered optimize with bytecodeIndex = 
, executeCounter = 
, exitCounter = 
delayOptimizeToDFG
Choosing not to optimize 
 yet, because the threshold hasn't been reached.
 yet, because m_shouldAlwaysBeInlined == true.
Code block 
 was compiled but it doesn't have an optimized replacement.
Considering OSR 
Triggering reoptimization of 
) (in loop).
Delaying optimization for 
 because of insufficient profiling.
Triggering optimized compilation of 
osrEntry
Performing OSR 
Optimizing 
 succeeded, OSR failed, after a delay of 
 (after OSR fail).
Executed op_put_scope<LocalClosureVar>
JITOperations
Log Full, called from inside baseline JIT
counter = 
debugger is stepping or has requests
should always be inlined
compiling
compiled and failed
should reoptimize from loop now
insufficient profiling
compilation failed
at bc#
should reoptimize now
OSR failed
JITMathIC: generating out of line fast IC snippet
JITMathIC: generating out of line IC snippet
JITMathIC: linking constant jump to out of line stub
String get_by_val stub
Baseline get_by_val stub for %s, return point %p
Baseline get_by_val with cached property name '%s' stub for %s, return point %p
Baseline put_by_val stub for %s, return point %p
Baseline put_by_val_direct stub for %s, return point %p
Baseline put_by_val%s with cached property name '%s' stub for %s, return point %p
_direct
Optimizing compilation of 
 did become ready.
 result: 
delayJITCompile
    JIT compilation failed.
    JIT compilation successful.
API Wrapper
JSAPIWrapperObject
hasProperty callback returned true for a property that doesn't exist.
Static function property defined with NULL callAsFunction callback.
Invalid array length
Attempting to define numeric property on array with non-writable length property.
Length exceeded the maximum array length
ArrayBufferPrototype
Receiver of slice must be an array buffer.
Slice requires at least one argument.
Receiver should be an array buffer but was not an object
Receiver should be an array buffer
Receiver should not be a shared array buffer
Receiver should be a shared array buffer
ArrayBufferView
FastTypedArray
OversizeTypedArray
WastefulTypedArray
DataViewMode
Allocating an async function
CallbackConstructor
CallbackFunction
CallbackObject
CallbackGlobalObject
Callee
(function ()
    "use strict";
    var length = arguments.length;
    var array = @isConstructor(this) ? new this(length) : @newArrayWithSize(length);
    for (var k = 0; k < length; ++k)
        @putByValDirect(array, k, arguments[k]);
    array.length = length;
    return array;
(function (items )
    "use strict";
    var thisObj = this;
    var mapFn = @argument(1);
    var thisArg;
    if (mapFn !== @undefined) {
        if (typeof mapFn !== "function")
            @throwTypeError("Array.from requires that the second argument, when provided, be a function");
        thisArg = @argument(2);
    }
    if (items == null)
        @throwTypeError("Array.from requires an array-like object - not null or undefined");
    var iteratorMethod = items.@iteratorSymbol;
    if (iteratorMethod != null) {
        if (typeof iteratorMethod !== "function")
            @throwTypeError("Array.from requires that the property of the first argument, items[Symbol.iterator], when exists, be a function");
        var result = @isConstructor(thisObj) ? new thisObj() : [];
        var k = 0;
        var iterator = iteratorMethod.@call(items);
        //
        //
        //
        var wrapper = {}
        wrapper.@iteratorSymbol = function() { return iterator; };
        for (var value of wrapper) {
            if (mapFn)
                @putByValDirect(result, k, thisArg === @undefined ? mapFn(value, k) : mapFn.@call(thisArg, value, k));
            else
                @putByValDirect(result, k, value);
            k += 1;
        }
        result.length = k;
        return result;
    }
    var arrayLike = @Object(items);
    var arrayLikeLength = @toLength(arrayLike.length);
    var result = @isConstructor(thisObj) ? new thisObj(arrayLikeLength) : @newArrayWithSize(arrayLikeLength);
    var k = 0;
    while (k < arrayLikeLength) {
        var value = arrayLike[k];
        if (mapFn)
            @putByValDirect(result, k, thisArg === @undefined ? mapFn(value, k) : mapFn.@call(thisArg, value, k));
        else
            @putByValDirect(result, k, value);
        k += 1;
    }
    result.length = arrayLikeLength;
    return result;
(function (array)
    "use strict";
    if (@isJSArray(array) || @isDerivedArray(array))
        return true;
    if (!@isProxyObject(array))
        return false;
    return @isArraySlow(array);
(function ()
    "use strict";
    var done = true;
    var value;
    var array = this.@iteratedObject;
    if (!this.@arrayIteratorIsDone) {
        var index = this.@arrayIteratorNextIndex;
        var length = array.length >>> 0;
        if (index >= length) {
            this.@arrayIteratorIsDone = true;
        } else {
            this.@arrayIteratorNextIndex = index + 1;
            done = false;
            value = array[index];
        }
    }
    return { done, value };
(function ()
    "use strict";
    if (this == null)
        @throwTypeError("%ArrayIteratorPrototype%.next requires that |this| not be null or undefined");
    let next = this.@arrayIteratorNext;
    if (next === @undefined)
        @throwTypeError("%ArrayIteratorPrototype%.next requires that |this| be an Array Iterator instance");
    return next.@call(this);
(function ()
    "use strict";
    var done = true;
    var value;
    var array = this.@iteratedObject;
    if (!this.@arrayIteratorIsDone) {
        var index = this.@arrayIteratorNextIndex;
        var length = array.length >>> 0;
        if (index >= length) {
            this.@arrayIteratorIsDone = true;
        } else {
            this.@arrayIteratorNextIndex = index + 1;
            done = false;
            value = index;
        }
    }
    return { done, value };
(function ()
    "use strict";
    var done = true;
    var value;
    var array = this.@iteratedObject;
    if (!this.@arrayIteratorIsDone) {
        var index = this.@arrayIteratorNextIndex;
        var length = array.length >>> 0;
        if (index >= length) {
            this.@arrayIteratorIsDone = true;
        } else {
            this.@arrayIteratorNextIndex = index + 1;
            done = false;
            value = [ index, array[index] ];
        }
    }
    return { done, value };
(function (iteratedObject, kind, iterationFunction)
    this.@iteratedObject = iteratedObject;
    this.@arrayIteratorKind = kind;
    this.@arrayIteratorNextIndex = 0;
    this.@arrayIteratorNext = iterationFunction;
    this.@arrayIteratorIsDone = false;
(function ()
    "use strict";
    if (this === null || this === @undefined)
        @throwTypeError("Array.prototype.values requires that |this| not be null or undefined");
    return new @createArrayIterator(@Object(this), "value", @arrayIteratorValueNext);
(function ()
    "use strict";
    if (this === null || this === @undefined)
        @throwTypeError("Array.prototype.keys requires that |this| not be null or undefined");
    return new @createArrayIterator(@Object(this), "key", @arrayIteratorKeyNext);
(function ()
    "use strict";
    if (this === null || this === @undefined)
        @throwTypeError("Array.prototype.entries requires that |this| not be null or undefined");
    return new @createArrayIterator(@Object(this), "key+value", @arrayIteratorKeyValueNext);
(function (callback )
    "use strict";
    if (this === null || this === @undefined)
        @throwTypeError("Array.prototype.reduce requires that |this| not be null or undefined");
    var array = @Object(this);
    var length = @toLength(array.length);
    if (typeof callback !== "function")
        @throwTypeError("Array.prototype.reduce callback must be a function");
    var argumentCount = @argumentCount();
    if (length === 0 && argumentCount < 2)
        @throwTypeError("reduce of empty array with no initial value");
    var accumulator, k = 0;
    if (argumentCount > 1)
        accumulator = @argument(1);
    else {
        while (k < length && !(k in array))
            k += 1;
        if (k >= length)
            @throwTypeError("reduce of empty array with no initial value");
        accumulator = array[k++];
    }
    while (k < length) {
        if (k in array)
            accumulator = callback.@call(@undefined, accumulator, array[k], k, array);
        k += 1;
    }
    return accumulator;
(function (callback )
    "use strict";
    if (this === null || this === @undefined)
        @throwTypeError("Array.prototype.reduceRight requires that |this| not be null or undefined");
    var array = @Object(this);
    var length = @toLength(array.length);
    if (typeof callback !== "function")
        @throwTypeError("Array.prototype.reduceRight callback must be a function");
    var argumentCount = @argumentCount();
    if (length === 0 && argumentCount < 2)
        @throwTypeError("reduceRight of empty array with no initial value");
    var accumulator, k = length - 1;
    if (argumentCount > 1)
        accumulator = @argument(1);
    else {
        while (k >= 0 && !(k in array))
            k -= 1;
        if (k < 0)
            @throwTypeError("reduceRight of empty array with no initial value");
        accumulator = array[k--];
    }
    while (k >= 0) {
        if (k in array)
            accumulator = callback.@call(@undefined, accumulator, array[k], k, array);
        k -= 1;
    }
    return accumulator;
(function (callback )
    "use strict";
    if (this === null || this === @undefined)
        @throwTypeError("Array.prototype.every requires that |this| not be null or undefined");
    
    var array = @Object(this);
    var length = @toLength(array.length);
    if (typeof callback !== "function")
        @throwTypeError("Array.prototype.every callback must be a function");
    
    var thisArg = @argument(1);
    
    for (var i = 0; i < length; i++) {
        if (!(i in array))
            continue;
        if (!callback.@call(thisArg, array[i], i, array))
            return false;
    }
    
    return true;
(function (callback )
    "use strict";
    if (this === null || this === @undefined)
        @throwTypeError("Array.prototype.forEach requires that |this| not be null or undefined");
    
    var array = @Object(this);
    var length = @toLength(array.length);
    if (typeof callback !== "function")
        @throwTypeError("Array.prototype.forEach callback must be a function");
    
    var thisArg = @argument(1);
    
    for (var i = 0; i < length; i++) {
        if (i in array)
            callback.@call(thisArg, array[i], i, array);
    }
(function (callback )
    "use strict";
    if (this === null || this === @undefined)
        @throwTypeError("Array.prototype.filter requires that |this| not be null or undefined");
    
    var array = @Object(this);
    var length = @toLength(array.length);
    if (typeof callback !== "function")
        @throwTypeError("Array.prototype.filter callback must be a function");
    
    var thisArg = @argument(1);
    //
    var result;
    var constructor;
    if (@isArray(array)) {
        constructor = array.constructor;
        //
        //
        //
        if (@isArrayConstructor(constructor) && @Array !== constructor)
            constructor = @undefined;
        if (@isObject(constructor)) {
            constructor = constructor.@speciesSymbol;
            if (constructor === null)
                constructor = @undefined;
        }
    }
    if (constructor === @Array || constructor === @undefined)
        result = @newArrayWithSize(0);
    else
        result = new constructor(0);
    var nextIndex = 0;
    for (var i = 0; i < length; i++) {
        if (!(i in array))
            continue;
        var current = array[i]
        if (callback.@call(thisArg, current, i, array)) {
            @putByValDirect(result, nextIndex, current);
            ++nextIndex;
        }
    }
    return result;
(function (callback )
    "use strict";
    if (this === null || this === @undefined)
        @throwTypeError("Array.prototype.map requires that |this| not be null or undefined");
    
    var array = @Object(this);
    var length = @toLength(array.length);
    if (typeof callback !== "function")
        @throwTypeError("Array.prototype.map callback must be a function");
    
    var thisArg = @argument(1);
    //
    var result;
    var constructor;
    if (@isArray(array)) {
        constructor = array.constructor;
        //
        //
        //
        if (@isArrayConstructor(constructor) && @Array !== constructor)
            constructor = @undefined;
        if (@isObject(constructor)) {
            constructor = constructor.@speciesSymbol;
            if (constructor === null)
                constructor = @undefined;
        }
    }
    if (constructor === @Array || constructor === @undefined)
        result = @newArrayWithSize(length);
    else
        result = new constructor(length);
    for (var i = 0; i < length; i++) {
        if (!(i in array))
            continue;
        var mappedValue = callback.@call(thisArg, array[i], i, array);
        @putByValDirect(result, i, mappedValue);
    }
    return result;
(function (callback )
    "use strict";
    if (this === null || this === @undefined)
        @throwTypeError("Array.prototype.some requires that |this| not be null or undefined");
    
    var array = @Object(this);
    var length = @toLength(array.length);
    if (typeof callback !== "function")
        @throwTypeError("Array.prototype.some callback must be a function");
    
    var thisArg = @argument(1);
    for (var i = 0; i < length; i++) {
        if (!(i in array))
            continue;
        if (callback.@call(thisArg, array[i], i, array))
            return true;
    }
    return false;
(function (value )
    "use strict";
    if (this === null || this === @undefined)
        @throwTypeError("Array.prototype.fill requires that |this| not be null or undefined");
    var array = @Object(this);
    var length = @toLength(array.length);
    var relativeStart = @toInteger(@argument(1));
    var k = 0;
    if (relativeStart < 0) {
        k = length + relativeStart;
        if (k < 0)
            k = 0;
    } else {
        k = relativeStart;
        if (k > length)
            k = length;
    }
    var relativeEnd = length;
    var end = @argument(2);
    if (end !== @undefined)
        relativeEnd = @toInteger(end);
    var final = 0;
    if (relativeEnd < 0) {
        final = length + relativeEnd;
        if (final < 0)
            final = 0;
    } else {
        final = relativeEnd;
        if (final > length)
            final = length;
    }
    for (; k < final; k++)
        array[k] = value;
    return array;
(function (callback )
    "use strict";
    if (this === null || this === @undefined)
        @throwTypeError("Array.prototype.find requires that |this| not be null or undefined");
    
    var array = @Object(this);
    var length = @toLength(array.length);
    if (typeof callback !== "function")
        @throwTypeError("Array.prototype.find callback must be a function");
    
    var thisArg = @argument(1);
    for (var i = 0; i < length; i++) {
        var kValue = array[i];
        if (callback.@call(thisArg, kValue, i, array))
            return kValue;
    }
    return @undefined;
(function (callback )
    "use strict";
    if (this === null || this === @undefined)
        @throwTypeError("Array.prototype.findIndex requires that |this| not be null or undefined");
    
    var array = @Object(this);
    var length = @toLength(array.length);
    if (typeof callback !== "function")
        @throwTypeError("Array.prototype.findIndex callback must be a function");
    
    var thisArg = @argument(1);
    for (var i = 0; i < length; i++) {
        if (callback.@call(thisArg, array[i], i, array))
            return i;
    }
    return -1;
(function (searchElement )
    "use strict";
    if (this === null || this === @undefined)
        @throwTypeError("Array.prototype.includes requires that |this| not be null or undefined");
    var array = @Object(this);
    var length = @toLength(array.length);
    if (length === 0)
        return false;
    var fromIndex = 0;
    var from = @argument(1);
    if (from !== @undefined)
        fromIndex = @toInteger(from);
    var index;
    if (fromIndex >= 0)
        index = fromIndex;
    else
        index = length + fromIndex;
    if (index < 0)
        index = 0;
    var currentElement;
    for (; index < length; ++index) {
        currentElement = array[index];
        //
        if (searchElement === currentElement || (searchElement !== searchElement && currentElement !== currentElement))
            return true;
    }
    return false;
(function (comparator)
    "use strict";
    function min(a, b)
    {
        return a < b ? a : b;
    }
    function stringComparator(a, b)
    {
        var aString = a.string;
        var bString = b.string;
        var aLength = aString.length;
        var bLength = bString.length;
        var length = min(aLength, bLength);
        for (var i = 0; i < length; ++i) {
            var aCharCode = aString.@charCodeAt(i);
            var bCharCode = bString.@charCodeAt(i);
            if (aCharCode == bCharCode)
                continue;
            return aCharCode - bCharCode;
        }
        return aLength - bLength;
    }
    //
    function compactSparse(array, dst, src, length)
    {
        var values = [ ];
        var seen = { };
        var valueCount = 0;
        var undefinedCount = 0;
        //
        for (var i = dst; i < src; ++i)
            delete array[i];
        for (var object = array; object; object = @Object.@getPrototypeOf(object)) {
            var propertyNames = @Object.@getOwnPropertyNames(object);
            for (var i = 0; i < propertyNames.length; ++i) {
                var index = propertyNames[i];
                if (index < length) { //
                    if (seen[index]) //
                        continue;
                    seen[index] = 1;
                    var value = array[index];
                    delete array[index];
                    if (value === @undefined) {
                        ++undefinedCount;
                        continue;
                    }
                    array[valueCount++] = value;
                }
            }
        }
        for (var i = valueCount; i < valueCount + undefinedCount; ++i)
            array[i] = @undefined;
        return valueCount;
    }
    function compactSlow(array, length)
    {
        var holeCount = 0;
        for (var dst = 0, src = 0; src < length; ++src) {
            if (!(src in array)) {
                ++holeCount;
                if (holeCount < 256)
                    continue;
                return compactSparse(array, dst, src, length);
            }
            var value = array[src];
            if (value === @undefined)
                continue;
            array[dst++] = value;
        }
        var valueCount = dst;
        var undefinedCount = length - valueCount - holeCount;
        for (var i = valueCount; i < valueCount + undefinedCount; ++i)
            array[i] = @undefined;
        for (var i = valueCount + undefinedCount; i < length; ++i)
            delete array[i];
        return valueCount;
    }
    //
    function compact(array, length)
    {
        for (var i = 0; i < array.length; ++i) {
            if (array[i] === @undefined)
                return compactSlow(array, length);
        }
        return length;
    }
    function merge(dst, src, srcIndex, srcEnd, width, comparator)
    {
        var left = srcIndex;
        var leftEnd = min(left + width, srcEnd);
        var right = leftEnd;
        var rightEnd = min(right + width, srcEnd);
        for (var dstIndex = left; dstIndex < rightEnd; ++dstIndex) {
            if (right < rightEnd) {
                if (left >= leftEnd) {
                    dst[dstIndex] = src[right++];
                    continue;
                }
                let comparisonResult = comparator(src[right], src[left]);
                if ((typeof comparisonResult === "boolean" && !comparisonResult) || comparisonResult < 0) {
                    dst[dstIndex] = src[right++];
                    continue;
                }
            }
            dst[dstIndex] = src[left++];
        }
    }
    function mergeSort(array, valueCount, comparator)
    {
        var buffer = [ ];
        buffer.length = valueCount;
        var dst = buffer;
        var src = array;
        for (var width = 1; width < valueCount; width *= 2) {
            for (var srcIndex = 0; srcIndex < valueCount; srcIndex += 2 * width)
                merge(dst, src, srcIndex, valueCount, width, comparator);
            var tmp = src;
            src = dst;
            dst = tmp;
        }
        if (src != array) {
            for(var i = 0; i < valueCount; i++)
                array[i] = src[i];
        }
    }
    function bucketSort(array, dst, bucket, depth)
    {
        if (bucket.length < 32 || depth > 32) {
            mergeSort(bucket, bucket.length, stringComparator);
            for (var i = 0; i < bucket.length; ++i)
                array[dst++] = bucket[i].value;
            return dst;
        }
        var buckets = [ ];
        for (var i = 0; i < bucket.length; ++i) {
            var entry = bucket[i];
            var string = entry.string;
            if (string.length == depth) {
                array[dst++] = entry.value;
                continue;
            }
            var c = string.@charCodeAt(depth);
            if (!buckets[c])
                buckets[c] = [ ];
            buckets[c][buckets[c].length] = entry;
        }
        for (var i = 0; i < buckets.length; ++i) {
            if (!buckets[i])
                continue;
            dst = bucketSort(array, dst, buckets[i], depth + 1);
        }
        return dst;
    }
    function comparatorSort(array, length, comparator)
    {
        var valueCount = compact(array, length);
        mergeSort(array, valueCount, comparator);
    }
    function stringSort(array, length)
    {
        var valueCount = compact(array, length);
        var strings = @newArrayWithSize(valueCount);
        for (var i = 0; i < valueCount; ++i)
            strings[i] = { string: @toString(array[i]), value: array[i] };
        bucketSort(array, 0, strings, 0);
    }
    if (this === null || this === @undefined)
        @throwTypeError("Array.prototype.sort requires that |this| not be null or undefined");
    var array = @Object(this);
    var length = array.length >>> 0;
    //
    //
    if (length < 2)
        return array;
    if (typeof comparator == "function")
        comparatorSort(array, length, comparator);
    else if (comparator === null || comparator === @undefined)
        stringSort(array, length);
    else
        @throwTypeError("Array.prototype.sort requires the comparsion function be a function or undefined");
    return array;
(function ()
    "use strict";
    if (this === null || this === @undefined)
        @throwTypeError("Array.prototype.concat requires that |this| not be null or undefined");
    var currentElement = @Object(this);
    var constructor;
    if (@isArray(currentElement)) {
        constructor = currentElement.constructor;
        //
        //
        //
        if (@isArrayConstructor(constructor) && @Array !== constructor)
            constructor = @undefined;
        else if (@isObject(constructor)) {
            constructor = constructor.@speciesSymbol;
            if (constructor === null)
                constructor = @Array;
        }
    }
    var argCount = arguments.length;
    var result;
    if (constructor === @Array || constructor === @undefined)
        result = @newArrayWithSize(0);
    else
        result = new constructor(0);
    var resultIsArray = @isJSArray(result);
    var resultIndex = 0;
    var argIndex = 0;
    do {
        let spreadable = @isObject(currentElement) && currentElement.@isConcatSpreadableSymbol;
        if ((spreadable === @undefined && @isArray(currentElement)) || spreadable) {
            let length = @toLength(currentElement.length);
            if (length + resultIndex > @MAX_ARRAY_INDEX)
                @throwRangeError("Length exceeded the maximum array length");
            if (resultIsArray && @isJSArray(currentElement)) {
                @appendMemcpy(result, currentElement, resultIndex);
                resultIndex += length;
            } else {
                for (var i = 0; i < length; i++) {
                    if (i in currentElement)
                        @putByValDirect(result, resultIndex, currentElement[i]);
                    resultIndex++;
                }
            }
        } else {
            if (resultIndex >= @MAX_ARRAY_INDEX)
                @throwRangeError("Length exceeded the maximum array length");
            @putByValDirect(result, resultIndex++, currentElement);
        }
        currentElement = arguments[argIndex];
    } while (argIndex++ < argCount);
    result.length = resultIndex;
    return result;
(function (first)
    "use strict";
    if (@argumentCount() === 1
        && @isJSArray(this)
        && this.@isConcatSpreadableSymbol === @undefined
        && (!@isObject(first) || first.@isConcatSpreadableSymbol === @undefined)) {
        let result = @concatMemcpy(this, first);
        if (result !== null)
            return result;
    }
    return @tailCallForwardArguments(@concatSlowPath, this);
(function (target, start )
    "use strict";
    function maxWithPositives(a, b)
    {
        return (a < b) ? b : a;
    }
    function minWithMaybeNegativeZeroAndPositive(maybeNegativeZero, positive)
    {
        return (maybeNegativeZero < positive) ? maybeNegativeZero : positive;
    }
    if (this === null || this === @undefined)
        @throwTypeError("Array.copyWithin requires that |this| not be null or undefined");
    var array = @Object(this);
    var length = @toLength(array.length);
    var relativeTarget = @toInteger(target);
    var to = (relativeTarget < 0) ? maxWithPositives(length + relativeTarget, 0) : minWithMaybeNegativeZeroAndPositive(relativeTarget, length);
    var relativeStart = @toInteger(start);
    var from = (relativeStart < 0) ? maxWithPositives(length + relativeStart, 0) : minWithMaybeNegativeZeroAndPositive(relativeStart, length);
    var relativeEnd;
    var end = @argument(2);
    if (end === @undefined)
        relativeEnd = length;
    else
        relativeEnd = @toInteger(end);
    var finalValue = (relativeEnd < 0) ? maxWithPositives(length + relativeEnd, 0) : minWithMaybeNegativeZeroAndPositive(relativeEnd, length);
    var count = minWithMaybeNegativeZeroAndPositive(finalValue - from, length - to);
    var direction = 1;
    if (from < to && to < from + count) {
        direction = -1;
        from = from + count - 1;
        to = to + count - 1;
    }
    for (var i = 0; i < count; ++i, from += direction, to += direction) {
        if (from in array)
            array[to] = array[from];
        else
            delete array[to];
    }
    return array;
(function (generator, promiseCapability, sentValue, resumeMode)
    "use strict";
    let state = generator.@generatorState;
    let value = @undefined;
    if (state === @GeneratorStateCompleted || (resumeMode !== @GeneratorResumeModeNormal && resumeMode !== @GeneratorResumeModeThrow))
        @throwTypeError("Async function illegally resumed");
    try {
        generator.@generatorState = @GeneratorStateExecuting;
        value = generator.@generatorNext.@call(generator.@generatorThis, generator, state, sentValue, resumeMode, generator.@generatorFrame);
        if (generator.@generatorState === @GeneratorStateExecuting) {
            generator.@generatorState = @GeneratorStateCompleted;
            promiseCapability.@resolve(value);
            return promiseCapability.@promise;
        }
    } catch (error) {
        generator.@generatorState = @GeneratorStateCompleted;
        promiseCapability.@reject(error);
        return promiseCapability.@promise;
    }
    let wrappedValue = @newPromiseCapability(@Promise);
    wrappedValue.@resolve.@call(@undefined, value);
    wrappedValue.@promise.@then(
        function(value) { @asyncFunctionResume(generator, promiseCapability, value, @GeneratorResumeModeNormal); },
        function(error) { @asyncFunctionResume(generator, promiseCapability, error, @GeneratorResumeModeThrow); });
    return promiseCapability.@promise;
(function ()
    "use strict";
    function toDateTimeOptionsAnyAll(opts)
    {
        //
        //
        var options;
        if (opts === @undefined)
            options = null;
        else if (opts === null)
            @throwTypeError("null is not an object");
        else
            options = @Object(opts);
        //
        var needsDefaults = !options || (
            options.weekday === @undefined &&
            options.year === @undefined &&
            options.month === @undefined &&
            options.day === @undefined &&
            options.hour === @undefined &&
            options.minute === @undefined &&
            options.second === @undefined
        );
        //
        if (needsDefaults) {
            options = @Object.@create(options);
            options.year = "numeric";
            options.month = "numeric";
            options.day = "numeric";
            options.hour = "numeric";
            options.minute = "numeric";
            options.second = "numeric";
        }
        //
        return options;
    }
    //
    //
    var value = @thisTimeValue.@call(this);
    if (@isNaN(value))
        return "Invalid Date";
    var options = toDateTimeOptionsAnyAll(@argument(1));
    var locales = @argument(0);
    var dateFormat = new @DateTimeFormat(locales, options);
    return dateFormat.format(value);
(function ()
    "use strict";
    function toDateTimeOptionsDateDate(opts)
    {
        //
        //
        var options;
        if (opts === @undefined)
            options = null;
        else if (opts === null)
            @throwTypeError("null is not an object");
        else
            options = @Object(opts);
        //
        var needsDefaults = !options || (
            options.weekday === @undefined &&
            options.year === @undefined &&
            options.month === @undefined &&
            options.day === @undefined
        );
        //
        if (needsDefaults) {
            options = @Object.@create(options);
            options.year = "numeric";
            options.month = "numeric";
            options.day = "numeric";
        }
        return options;
    }
    //
    //
    var value = @thisTimeValue.@call(this);
    if (@isNaN(value))
        return "Invalid Date";
    var options = toDateTimeOptionsDateDate(@argument(1));
    var locales = @argument(0);
    var dateFormat = new @DateTimeFormat(locales, options);
    return dateFormat.format(value);
(function ()
    "use strict";
    function toDateTimeOptionsTimeTime(opts)
    {
        //
        //
        var options;
        if (opts === @undefined)
            options = null;
        else if (opts === null)
            @throwTypeError("null is not an object");
        else
            options = @Object(opts);
        //
        var needsDefaults = !options || (
            options.hour === @undefined &&
            options.minute === @undefined &&
            options.second === @undefined
        );
        //
        if (needsDefaults) {
            options = @Object.@create(options);
            options.hour = "numeric";
            options.minute = "numeric";
            options.second = "numeric";
        }
        return options;
    }
    //
    //
    var value = @thisTimeValue.@call(this);
    if (@isNaN(value))
        return "Invalid Date";
    var options = toDateTimeOptionsTimeTime(@argument(1));
    var locales = @argument(0);
    var dateFormat = new @DateTimeFormat(locales, options);
    return dateFormat.format(value);
(function (thisArgument)
    "use strict";
    let argumentValues = [];
    //
    for (let i = 1; i < arguments.length; i++)
        @putByValDirect(argumentValues, i-1, arguments[i]);
    return this.@apply(thisArgument, argumentValues);
(function (thisValue, argumentValues)
    "use strict";
    return this.@apply(thisValue, argumentValues);
(function (value)
    "use strict";
    if (typeof this !== "function")
        return false;
    if (@isBoundFunction(this))
        return @hasInstanceBoundFunction(this, value);
    let target = this.prototype;
    return @instanceOf(value, target);
(function (thisValue)
    "use strict";
    let target = this;
    if (typeof target !== "function")
        @throwTypeError("|this| is not a function inside Function.prototype.bind");
    let argumentCount = arguments.length;
    let boundArgs = null;
    let numBoundArgs = 0;
    if (argumentCount > 1) {
        numBoundArgs = argumentCount - 1;
        boundArgs = @newArrayWithSize(numBoundArgs);
        for (let i = 0; i < numBoundArgs; i++)
            @putByValDirect(boundArgs, i, arguments[i + 1]);
    }
    let length = 0;
    if (@hasOwnLengthProperty(target)) {
        let lengthValue = target.length;
        if (typeof lengthValue === "number") {
            lengthValue = lengthValue | 0;
            //
            //
            if (lengthValue > numBoundArgs)
                length = lengthValue - numBoundArgs;
        }
    }
    let name = target.name;
    if (typeof name !== "string")
        name = "";
    return @makeBoundFunction(target, arguments[0], boundArgs, length, name);
(function (generator, sentValue, resumeMode)
    "use strict";
    let state = generator.@generatorState;
    let done = false;
    let value = @undefined;
    if (typeof state !== 'number')
        @throwTypeError("|this| should be a generator");
    if (state === @GeneratorStateExecuting)
        @throwTypeError("Generator is executing");
    if (state === @GeneratorStateCompleted) {
        if (resumeMode === @GeneratorResumeModeThrow)
            throw sentValue;
        done = true;
        if (resumeMode === @GeneratorResumeModeReturn)
            value = sentValue;
    } else {
        try {
            generator.@generatorState = @GeneratorStateExecuting;
            value = generator.@generatorNext.@call(generator.@generatorThis, generator, state, sentValue, resumeMode, generator.@generatorFrame);
            if (generator.@generatorState === @GeneratorStateExecuting) {
                generator.@generatorState = @GeneratorStateCompleted;
                done = true;
            }
        } catch (error) {
            generator.@generatorState = @GeneratorStateCompleted;
            throw error;
        }
    }
    return { done, value };
(function (value)
    "use strict";
    return @generatorResume(this, value, @GeneratorResumeModeNormal);
(function (value)
    "use strict";
    return @generatorResume(this, value, @GeneratorResumeModeReturn);
(function (exception)
    "use strict";
    return @generatorResume(this, exception, @GeneratorResumeModeThrow);
(function (value)
    "use strict";
    var numberValue = @toNumber(value);
    //
    if (numberValue !== numberValue)
        return false;
    return numberValue !== @Infinity && numberValue !== -@Infinity;
(function (value)
    "use strict";
    var numberValue = @toNumber(value);
    return numberValue !== numberValue;
(function (target)
    "use strict";
    var numberValue = +target;
    //
    if (numberValue !== numberValue)
        return 0;
    return @trunc(numberValue);
(function (target)
    "use strict";
    var length = @toInteger(target);
    //
    return +(length > 0 ? (length < @MAX_SAFE_INTEGER ? length : @MAX_SAFE_INTEGER) : 0);
(function (object)
    "use strict";
    return object == null || typeof object === "object";
(function ()
    return this;
(function (obj, defaultConstructor)
    var constructor = obj.constructor;
    if (constructor === @undefined)
        return defaultConstructor;
    if (!@isObject(constructor))
        @throwTypeError("|this|.constructor is not an Object or undefined");
    constructor = constructor.@speciesSymbol;
    if (constructor == null)
        return defaultConstructor;
    if (@isConstructor(constructor))
        return constructor;
    @throwTypeError("|this|.constructor[Symbol.species] is not a constructor");
(function (target, source, excludedSet)
    if (!@isObject(target))
        @throwTypeError("target needs to be an object");
    if (source == null) 
        return target;
    let from = @Object(source); 
    let keys = @Reflect.@ownKeys(from); 
    let keysLength = keys.length;
    for (let i = 0; i < keysLength; i++) {
        let nextKey = keys[i];
        if (!excludedSet.@has(nextKey)) {
            if (@propertyIsEnumerable(from, nextKey)) {
                let propValue = from[nextKey];
                @defineEnumerableWritableConfigurableDataProperty(target, nextKey, propValue);
            }
        }
    }
    return target;
(function (promise, value, reactions)
    "use strict";
    if (!this.isEnabled)
        return;
(function (promise, reason, reactions)
    "use strict";
    if (!this.isEnabled)
        return;
(function (array)
    //
    //
    //
    //
    //
    //
    //
    //
    "use strict";
    var promiseCapability = @newPromiseCapability(@InternalPromise);
    var values = [];
    var index = 0;
    var remainingElementsCount = 0;
    function newResolveElement(index)
    {
        var alreadyCalled = false;
        return function (argument)
        {
            if (alreadyCalled)
                return @undefined;
            alreadyCalled = true;
            @putByValDirect(values, index, argument);
            --remainingElementsCount;
            if (remainingElementsCount === 0)
                return promiseCapability.@resolve.@call(@undefined, values);
            return @undefined;
        }
    }
    try {
        if (array.length === 0)
            promiseCapability.@resolve.@call(@undefined, values);
        else {
            for (var index = 0, length = array.length; index < length; ++index) {
                var value = array[index];
                @putByValDirect(values, index, @undefined);
                var nextPromiseCapability = @newPromiseCapability(@InternalPromise);
                nextPromiseCapability.@resolve.@call(@undefined, value);
                var nextPromise = nextPromiseCapability.@promise;
                var resolveElement = newResolveElement(index);
                ++remainingElementsCount;
                nextPromise.then(resolveElement, promiseCapability.@reject);
            }
        }
    } catch (error) {
        promiseCapability.@reject.@call(@undefined, error);
    }
    return promiseCapability.@promise;
(function (iterable)
    "use strict";
    //
    //
    //
    let result = [];
    let iterator = iterable.@iteratorSymbol();
    let item;
    let index = 0;
    while (true) {
        item = iterator.next();
        if (!@isObject(item))
            @throwTypeError("Iterator result interface is not an object");
        if (item.done)
            return result;
        @putByValDirect(result, index++, item.value);
    }
(function ()
    "use strict";
    return this;
(function (callback )
    "use strict";
    if (!@isMap(this))
        @throwTypeError("Map operation called on non-Map object");
    if (typeof callback !== 'function')
        @throwTypeError("Map.prototype.forEach callback must be a function");
    var thisArg = @argument(1);
    var iterator = @MapIterator(this);
    //
    var value = [ @undefined, @undefined ];
    for (;;) {
        if (@mapIteratorNext.@call(iterator, value))
            break;
        callback.@call(thisArg, value[1], value[0], this);
    }
(function (entry, newState)
    //
    "use strict";
    if (entry.state < newState)
        entry.state = newState;
(function (key)
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    "use strict";
    return {
        key: key,
        state: @ModuleFetch,
        fetch: @undefined,
        instantiate: @undefined,
        satisfy: @undefined,
        dependencies: [], //
        dependenciesMap: @undefined,
        module: @undefined, //
        linkError: @undefined,
        linkSucceeded: true,
    };
(function (key)
    //
    "use strict";
    var entry = this.registry.@get(key);
    if (entry)
        return entry;
    entry = @newRegistryEntry(key);
    this.registry.@set(key, entry);
    return entry;
(function (promise, value)
    "use strict";
    if (promise.@promiseState === @promiseStatePending)
        @fulfillPromise(promise, value);
(function (entry, source)
    //
    "use strict";
    if (!entry.fetch)
        entry.fetch = @newPromiseCapability(@InternalPromise).@promise;
    this.forceFulfillPromise(entry.fetch, source);
    @setStateToMax(entry, @ModuleInstantiate);
(function (entry, optionalInstance, source)
    //
    "use strict";
    if (!entry.instantiate)
        entry.instantiate = @newPromiseCapability(@InternalPromise).@promise;
    this.commitInstantiated(entry, optionalInstance, source);
    //
    //
    //
    //
    //
    this.forceFulfillPromise(entry.instantiate, entry);
(function (entry, optionalInstance, source)
    //
    "use strict";
    var moduleRecord = this.instantiation(optionalInstance, source, entry);
    //
    //
    //
    //
    //
    //
    var dependencies = [];
    var dependenciesMap = moduleRecord.dependenciesMap;
    moduleRecord.registryEntry = entry;
    var requestedModules = this.requestedModules(moduleRecord);
    for (var i = 0, length = requestedModules.length; i < length; ++i) {
        var depKey = requestedModules[i];
        var pair = {
            key: depKey,
            value: @undefined
        };
        @putByValDirect(dependencies, dependencies.length, pair);
        dependenciesMap.@set(depKey, pair);
    }
    entry.dependencies = dependencies;
    entry.dependenciesMap = dependenciesMap;
    entry.module = moduleRecord;
    @setStateToMax(entry, @ModuleSatisfy);
(function (result, source, entry)
    //
    //
    //
    "use strict";
    return this.parseModule(entry.key, source);
(function (key, fetcher)
    //
    "use strict";
    var entry = this.ensureRegistered(key);
    if (entry.fetch)
        return entry.fetch;
    //
    //
    //
    //
    //
    //
    var fetchPromise = this.fetch(key, fetcher).then((source) => {
        @setStateToMax(entry, @ModuleInstantiate);
        return source;
    });
    entry.fetch = fetchPromise;
    return fetchPromise;
(function (key, fetcher)
    //
    "use strict";
    var entry = this.ensureRegistered(key);
    if (entry.instantiate)
        return entry.instantiate;
    var instantiatePromise = this.requestFetch(key, fetcher).then((source) => {
        //
        //
        //
        //
        //
        //
        //
        return this.instantiate(key, source, fetcher).then((optionalInstance) => {
            this.commitInstantiated(entry, optionalInstance, source);
            return entry;
        });
    });
    entry.instantiate = instantiatePromise;
    return instantiatePromise;
(function (key, fetcher)
    //
    "use strict";
    var entry = this.ensureRegistered(key);
    if (entry.satisfy)
        return entry.satisfy;
    var satisfyPromise = this.requestInstantiate(key, fetcher).then((entry) => {
        var depLoads = [];
        for (var i = 0, length = entry.dependencies.length; i < length; ++i) {
            let pair = entry.dependencies[i];
            //
            //
            //
            //
            //
            var promise = this.resolve(pair.key, key, fetcher).then((depKey) => {
                var depEntry = this.ensureRegistered(depKey);
                //
                //
                //
                //
                //
                //
                //
                //
                //
                if (depEntry.satisfy) {
                    return depEntry.instantiate.then((entry) => {
                        pair.value = entry.module;
                        return entry;
                    });
                }
                return this.requestSatisfy(depKey, fetcher).then((entry) => {
                    pair.value = entry.module;
                    return entry;
                });
            });
            @putByValDirect(depLoads, depLoads.length, promise);
        }
        return @InternalPromise.internalAll(depLoads).then((modules) => {
            @setStateToMax(entry, @ModuleLink);
            return entry;
        });
    });
    entry.satisfy = satisfyPromise;
    return satisfyPromise;
(function (key, fetcher)
    //
    "use strict";
    var entry = this.ensureRegistered(key);
    if (entry.state > @ModuleLink) {
        var deferred = @newPromiseCapability(@InternalPromise);
        deferred.@resolve.@call(@undefined, entry);
        return deferred.@promise;
    }
    return this.requestSatisfy(key, fetcher).then((entry) => {
        this.link(entry, fetcher);
        return entry;
    });
(function (key, fetcher)
    //
    "use strict";
    return this.requestLink(key, fetcher).then((entry) => {
        this.moduleEvaluation(entry.module, fetcher);
    });
(function (entry, fetcher)
    //
    "use strict";
    if (!entry.linkSucceeded)
        throw entry.linkError;
    if (entry.state === @ModuleReady)
        return;
    @setStateToMax(entry, @ModuleReady);
    try {
        //
        //
        //
        var dependencies = entry.dependencies;
        for (var i = 0, length = dependencies.length; i < length; ++i) {
            var pair = dependencies[i];
            this.link(pair.value.registryEntry, fetcher);
        }
        this.moduleDeclarationInstantiation(entry.module, fetcher);
    } catch (error) {
        entry.linkSucceeded = false;
        entry.linkError = error;
        throw error;
    }
(function (moduleRecord, fetcher)
    //
    "use strict";
    if (moduleRecord.evaluated)
        return;
    moduleRecord.evaluated = true;
    var entry = moduleRecord.registryEntry;
    //
    var dependencies = entry.dependencies;
    for (var i = 0, length = dependencies.length; i < length; ++i) {
        var pair = dependencies[i];
        var requiredModuleRecord = pair.value;
        this.moduleEvaluation(requiredModuleRecord, fetcher);
    }
    this.evaluate(entry.key, moduleRecord, fetcher);
(function (key, stage, value)
    "use strict";
    var entry = this.ensureRegistered(key);
    if (stage === @ModuleFetch) {
        if (entry.state > @ModuleFetch)
            @throwTypeError("Requested module is already fetched.");
        this.fulfillFetch(entry, value);
        return;
    }
    if (stage === @ModuleInstantiate) {
        if (entry.state > @ModuleInstantiate)
            @throwTypeError("Requested module is already instantiated.");
        this.fulfillFetch(entry, @undefined);
        entry.fetch.then((source) => {
            this.fulfillInstantiate(entry, value, source);
        });
        return;
    }
    @throwTypeError("Requested module is already ready to be executed.");
(function (moduleName, referrer, fetcher)
    "use strict";
    //
    //
    //
    //
    return this.resolve(moduleName, referrer, fetcher).then((key) => {
        return this.requestReady(key, fetcher);
    });
(function (moduleName, referrer, fetcher)
    "use strict";
    //
    //
    //
    //
    return this.resolve(moduleName, referrer, fetcher).then((key) => {
        return this.requestSatisfy(key, fetcher);
    }).then((entry) => {
        return entry.key;
    });
(function (key, fetcher)
    "use strict";
    var entry = this.ensureRegistered(key);
    if (entry.state < @ModuleLink)
        @throwTypeError("Requested module is not instantiated yet.");
    this.link(entry, fetcher);
    return this.moduleEvaluation(entry.module, fetcher);
(function (key, fetcher)
    "use strict";
    return this.requestSatisfy(key, fetcher).then((entry) => {
        this.linkAndEvaluateModule(entry.key, fetcher);
        return this.getModuleNamespaceObject(entry.module);
    });
(function (value)
    "use strict";
    if (typeof value !== "number")
        return false;
    //
    if (value !== value)
        return false;
    return value !== @Infinity && value !== -@Infinity;
(function (value)
    "use strict";
    return value !== value;
(function ()
    "use strict";
    //
    //
    //
    //
    var number = @thisNumberValue.@call(this);
    //
    //
    var numberFormat = new @NumberFormat(@argument(0), @argument(1));
    //
    return numberFormat.format(number);
(function (object)
    "use strict";
    if (object == null)
        @throwTypeError("Object.entries requires that input parameter not be null or undefined");
    var obj = @Object(object);
    var names = @getOwnPropertyNames(obj);
    var properties = [];
    for (var i = 0, length = names.length; i < length; ++i) {
        var name = names[i];
        if (@propertyIsEnumerable(obj, name))
            properties.@push([name, obj[name]]);
    }
    return properties;
(function (iterable)
    "use strict";
    if (!@isObject(this))
        @throwTypeError("|this| is not a object");
    var promiseCapability = @newPromiseCapability(this);
    var values = [];
    var index = 0;
    var remainingElementsCount = 1;
    function newResolveElement(index)
    {
        var alreadyCalled = false;
        return function (argument)
        {
            if (alreadyCalled)
                return @undefined;
            alreadyCalled = true;
            @putByValDirect(values, index, argument);
            --remainingElementsCount;
            if (remainingElementsCount === 0)
                return promiseCapability.@resolve.@call(@undefined, values);
            return @undefined;
        }
    }
    try {
        for (var value of iterable) {
            @putByValDirect(values, index, @undefined);
            var nextPromise = this.resolve(value);
            var resolveElement = newResolveElement(index);
            ++remainingElementsCount;
            nextPromise.then(resolveElement, promiseCapability.@reject);
            ++index;
        }
        --remainingElementsCount;
        if (remainingElementsCount === 0)
            promiseCapability.@resolve.@call(@undefined, values);
    } catch (error) {
        promiseCapability.@reject.@call(@undefined, error);
    }
    return promiseCapability.@promise;
(function (iterable)
    "use strict";
    if (!@isObject(this))
        @throwTypeError("|this| is not a object");
    var promiseCapability = @newPromiseCapability(this);
    try {
        for (var value of iterable) {
            var nextPromise = this.resolve(value);
            nextPromise.then(promiseCapability.@resolve, promiseCapability.@reject);
        }
    } catch (error) {
        promiseCapability.@reject.@call(@undefined, error);
    }
    return promiseCapability.@promise;
(function (reason)
    "use strict";
    if (!@isObject(this))
        @throwTypeError("|this| is not a object");
    var promiseCapability = @newPromiseCapability(this);
    promiseCapability.@reject.@call(@undefined, reason);
    return promiseCapability.@promise;
(function (value)
    "use strict";
    if (!@isObject(this))
        @throwTypeError("|this| is not a object");
    if (@isPromise(value)) {
        var valueConstructor = value.constructor;
        if (valueConstructor === this)
            return value;
    }
    var promiseCapability = @newPromiseCapability(this);
    promiseCapability.@resolve.@call(@undefined, value);
    return promiseCapability.@promise;
(function (promise)
    "use strict";
    return @isObject(promise) && !!promise.@promiseState;
(function (capability, onFulfilled, onRejected)
    "use strict";
    return {
        @capabilities: capability,
        @onFulfilled: onFulfilled,
        @onRejected: onRejected,
    };
(function (constructor)
    "use strict";
    if (!@isConstructor(constructor))
        @throwTypeError("promise capability requires a constructor function");
    var promiseCapability = {
        @promise: @undefined,
        @resolve: @undefined,
        @reject: @undefined
    };
    function executor(resolve, reject)
    {
        if (promiseCapability.@resolve !== @undefined)
            @throwTypeError("resolve function is already set");
        if (promiseCapability.@reject !== @undefined)
            @throwTypeError("reject function is already set");
        promiseCapability.@resolve = resolve;
        promiseCapability.@reject = reject;
    }
    var promise = new constructor(executor);
    if (typeof promiseCapability.@resolve !== "function")
        @throwTypeError("executor did not take a resolve function");
    if (typeof promiseCapability.@reject !== "function")
        @throwTypeError("executor did not take a reject function");
    promiseCapability.@promise = promise;
    return promiseCapability;
(function (error)
    let promise = @Promise.@reject(error);
    promise.@promiseIsHandled = true;
    return promise;
(function (state, reactions, argument)
    "use strict";
    for (var index = 0, length = reactions.length; index < length; ++index)
        @enqueueJob(@promiseReactionJob, [state, reactions[index], argument]);
(function (promise, reason)
    "use strict";
    var reactions = promise.@promiseReactions;
    promise.@promiseResult = reason;
    promise.@promiseReactions = @undefined;
    promise.@promiseState = @promiseStateRejected;
    @InspectorInstrumentation.promiseRejected(promise, reason, reactions);
    if (!promise.@promiseIsHandled)
        @hostPromiseRejectionTracker(promise, @promiseRejectionReject);
    @triggerPromiseReactions(@promiseStateRejected, reactions, reason);
(function (promise, value)
    "use strict";
    var reactions = promise.@promiseReactions;
    promise.@promiseResult = value;
    promise.@promiseReactions = @undefined;
    promise.@promiseState = @promiseStateFulfilled;
    @InspectorInstrumentation.promiseFulfilled(promise, value, reactions);
    @triggerPromiseReactions(@promiseStateFulfilled, reactions, value);
(function (promise)
    "use strict";
    var alreadyResolved = false;
    var resolve = function (resolution) {
        if (alreadyResolved)
            return @undefined;
        alreadyResolved = true;
        if (resolution === promise)
            return @rejectPromise(promise, new @TypeError("Resolve a promise with itself"));
        if (!@isObject(resolution))
            return @fulfillPromise(promise, resolution);
        var then;
        try {
            then = resolution.then;
        } catch (error) {
            return @rejectPromise(promise, error);
        }
        if (typeof then !== 'function')
            return @fulfillPromise(promise, resolution);
        @enqueueJob(@promiseResolveThenableJob, [promise, resolution, then]);
        return @undefined;
    };
    var reject = function (reason) {
        if (alreadyResolved)
            return @undefined;
        alreadyResolved = true;
        return @rejectPromise(promise, reason);
    };
    return {
        @resolve: resolve,
        @reject: reject
    };
(function (state, reaction, argument)
    "use strict";
    var promiseCapability = reaction.@capabilities;
    var result;
    var handler = (state === @promiseStateFulfilled) ? reaction.@onFulfilled: reaction.@onRejected;
    try {
        result = handler(argument);
    } catch (error) {
        return promiseCapability.@reject.@call(@undefined, error);
    }
    return promiseCapability.@resolve.@call(@undefined, result);
(function (promiseToResolve, thenable, then)
    "use strict";
    var resolvingFunctions = @createResolvingFunctions(promiseToResolve);
    try {
        return then.@call(thenable, resolvingFunctions.@resolve, resolvingFunctions.@reject);
    } catch (error) {
        return resolvingFunctions.@reject.@call(@undefined, error);
    }
(function (executor)
    "use strict";
    if (typeof executor !== 'function')
        @throwTypeError("Promise constructor takes a function argument");
    this.@promiseState = @promiseStatePending;
    this.@promiseReactions = [];
    this.@promiseIsHandled = false;
    var resolvingFunctions = @createResolvingFunctions(this);
    try {
        executor(resolvingFunctions.@resolve, resolvingFunctions.@reject);
    } catch (error) {
        return resolvingFunctions.@reject.@call(@undefined, error);
    }
    return this;
(function (onRejected)
    "use strict";
    return this.then(@undefined, onRejected);
(function (onFulfilled, onRejected)
    "use strict";
    if (!@isPromise(this))
        @throwTypeError("|this| is not a object");
    var constructor = @speciesConstructor(this, @Promise);
    var resultCapability = @newPromiseCapability(constructor);
    if (typeof onFulfilled !== "function")
        onFulfilled = function (argument) { return argument; };
    if (typeof onRejected !== "function")
        onRejected = function (argument) { throw argument; };
    var reaction = @newPromiseReaction(resultCapability, onFulfilled, onRejected);
    var state = this.@promiseState;
    if (state === @promiseStatePending)
        @putByValDirect(this.@promiseReactions, this.@promiseReactions.length, reaction);
    else {
        if (state === @promiseStateRejected && !this.@promiseIsHandled)
            @hostPromiseRejectionTracker(this, @promiseRejectionHandle);
        @enqueueJob(@promiseReactionJob, [state, reaction, this.@promiseResult]);
    }
    this.@promiseIsHandled = true;
    return resultCapability.@promise;
(function (target, thisArgument, argumentsList)
    "use strict";
    if (typeof target !== "function")
        @throwTypeError("Reflect.apply requires the first argument be a function");
    if (!@isObject(argumentsList))
        @throwTypeError("Reflect.apply requires the third argument be an object");
    return target.@apply(thisArgument, argumentsList);
(function (target, propertyKey)
    //
    //
    if (!@isObject(target))
        @throwTypeError("Reflect.deleteProperty requires the first argument be an object");
    return delete target[propertyKey];
(function (target, propertyKey)
    "use strict";
    if (!@isObject(target))
        @throwTypeError("Reflect.has requires the first argument be an object");
    return propertyKey in target;
(function (string, index, unicode)
    //
    "use strict";
    if (!unicode)
        return index + 1;
    if (index + 1 >= string.length)
        return index + 1;
    let first = string.@charCodeAt(index);
    if (first < 0xD800 || first > 0xDBFF)
        return index + 1;
    let second = string.@charCodeAt(index + 1);
    if (second < 0xDC00 || second > 0xDFFF)
        return index + 1;
    return index + 2;
(function (regexp, str)
    "use strict";
    let exec = regexp.exec;
    let builtinExec = @regExpBuiltinExec;
    if (exec !== builtinExec && typeof exec === "function") {
        let result = exec.@call(regexp, str);
        if (result !== null && !@isObject(result))
            @throwTypeError("The result of a RegExp exec must be null or an object");
        return result;
    }
    return builtinExec.@call(regexp, str);
(function (regexp) {
    //
    let regexpExec = @tryGetById(regexp, "exec");
    if (regexpExec !== @regExpBuiltinExec)
        return true;
    let regexpGlobal = @tryGetById(regexp, "global");
    if (regexpGlobal !== @regExpProtoGlobalGetter)
        return true;
    let regexpUnicode = @tryGetById(regexp, "unicode");
    if (regexpUnicode !== @regExpProtoUnicodeGetter)
        return true;
    return !@isRegExpObject(regexp);
(function (strArg)
    "use strict";
    if (!@isObject(this))
        @throwTypeError("RegExp.prototype.@@match requires that |this| be an Object");
    let regexp = this;
    //
    if (!@hasObservableSideEffectsForRegExpMatch(regexp))
        return @regExpMatchFast.@call(regexp, strArg);
    let str = @toString(strArg);
    if (!regexp.global)
        return @regExpExec(regexp, str);
    
    let unicode = regexp.unicode;
    regexp.lastIndex = 0;
    let resultList = [];
    //
    //
    //
    const maximumReasonableMatchSize = 100000000;
    while (true) {
        let result = @regExpExec(regexp, str);
        
        if (result === null) {
            if (resultList.length === 0)
                return null;
            return resultList;
        }
        if (resultList.length > maximumReasonableMatchSize)
            @throwOutOfMemoryError();
        if (!@isObject(result))
            @throwTypeError("RegExp.prototype.@@match call to RegExp.exec didn't return null or an object");
        let resultString = @toString(result[0]);
        if (!resultString.length)
            regexp.lastIndex = @advanceStringIndex(str, regexp.lastIndex, unicode);
        resultList.@push(resultString);
    }
(function (strArg, replace)
    "use strict";
    function getSubstitution(matched, str, position, captures, replacement)
    {
        "use strict";
        let matchLength = matched.length;
        let stringLength = str.length;
        let tailPos = position + matchLength;
        let m = captures.length;
        let replacementLength = replacement.length;
        let result = "";
        let lastStart = 0;
        for (let start = 0; start = replacement.indexOf("$", lastStart), start !== -1; lastStart = start) {
            if (start - lastStart > 0)
                result = result + replacement.substring(lastStart, start);
            start++;
            let ch = replacement.charAt(start);
            if (ch === "")
                result = result + "$";
            else {
                switch (ch)
                {
                case "$":
                    result = result + "$";
                    start++;
                    break;
                case "&":
                    result = result + matched;
                    start++;
                    break;
                case "`":
                    if (position > 0)
                        result = result + str.substring(0, position);
                    start++;
                    break;
                case "'":
                    if (tailPos < stringLength)
                        result = result + str.substring(tailPos);
                    start++;
                    break;
                default:
                    let chCode = ch.charCodeAt(0);
                    if (chCode >= 0x30 && chCode <= 0x39) {
                        start++;
                        let n = chCode - 0x30;
                        if (n > m)
                            break;
                        if (start < replacementLength) {
                            let nextChCode = replacement.charCodeAt(start);
                            if (nextChCode >= 0x30 && nextChCode <= 0x39) {
                                let nn = 10 * n + nextChCode - 0x30;
                                if (nn <= m) {
                                    n = nn;
                                    start++;
                                }
                            }
                        }
                        if (n == 0)
                            break;
                        if (captures[n] != @undefined)
                            result = result + captures[n];
                    } else
                        result = result + "$";
                    break;
                }
            }
        }
        return result + replacement.substring(lastStart);
    }
    if (!@isObject(this))
        @throwTypeError("RegExp.prototype.@@replace requires that |this| be an Object");
    let regexp = this;
    let str = @toString(strArg);
    let stringLength = str.length;
    let functionalReplace = typeof replace === 'function';
    if (!functionalReplace)
        replace = @toString(replace);
    let global = regexp.global;
    let unicode = false;
    if (global) {
        unicode = regexp.unicode;
        regexp.lastIndex = 0;
    }
    let resultList = [];
    let result;
    let done = false;
    while (!done) {
        result = @regExpExec(regexp, str);
        if (result === null)
            done = true;
        else {
            resultList.@push(result);
            if (!global)
                done = true;
            else {
                let matchStr = @toString(result[0]);
                if (!matchStr.length)
                    regexp.lastIndex = @advanceStringIndex(str, regexp.lastIndex, unicode);
            }
        }
    }
    let accumulatedResult = "";
    let nextSourcePosition = 0;
    let lastPosition = 0;
    for (let i = 0, resultListLength = resultList.length; i < resultListLength; ++i) {
        let result = resultList[i];
        let nCaptures = result.length - 1;
        if (nCaptures < 0)
            nCaptures = 0;
        let matched = @toString(result[0]);
        let matchLength = matched.length;
        let position = result.index;
        position = (position > stringLength) ? stringLength : position;
        position = (position < 0) ? 0 : position;
        let captures = [];
        for (let n = 1; n <= nCaptures; n++) {
            let capN = result[n];
            if (capN !== @undefined)
                capN = @toString(capN);
            captures[n] = capN;
        }
        let replacement;
        if (functionalReplace) {
            let replacerArgs = [ matched ].concat(captures.slice(1));
            replacerArgs.@push(position);
            replacerArgs.@push(str);
            let replValue = replace.@apply(@undefined, replacerArgs);
            replacement = @toString(replValue);
        } else
            replacement = getSubstitution(matched, str, position, captures, replace);
        if (position >= nextSourcePosition && position >= lastPosition) {
            accumulatedResult = accumulatedResult + str.substring(nextSourcePosition, position) + replacement;
            nextSourcePosition = position + matchLength;
            lastPosition = position;
        }
    }
    if (nextSourcePosition >= stringLength)
        return  accumulatedResult;
    return accumulatedResult + str.substring(nextSourcePosition);
(function (strArg)
    "use strict";
    let regexp = this;
    //
    if (@isRegExpObject(regexp) && @tryGetById(regexp, "exec") === @regExpBuiltinExec)
        return @regExpSearchFast.@call(regexp, strArg);
    //
    //
    if (!@isObject(this))
        @throwTypeError("RegExp.prototype.@@search requires that |this| be an Object");
    //
    let str = @toString(strArg)
    //
    let previousLastIndex = regexp.lastIndex;
    //
    //
    //
    if (previousLastIndex !== 0)
        regexp.lastIndex = 0;
    //
    let result = @regExpExec(regexp, str);
    //
    //
    //
    //
    if (regexp.lastIndex !== previousLastIndex)
        regexp.lastIndex = previousLastIndex;
    //
    if (result === null)
        return -1;
    //
    return result.index;
(function (regexp) {
    //
    let regexpExec = @tryGetById(regexp, "exec");
    if (regexpExec !== @regExpBuiltinExec)
        return true;
    
    //
    let regexpFlags = @tryGetById(regexp, "flags");
    if (regexpFlags !== @regExpProtoFlagsGetter)
        return true;
    
    //
    let regexpGlobal = @tryGetById(regexp, "global");
    if (regexpGlobal !== @regExpProtoGlobalGetter)
        return true;
    let regexpIgnoreCase = @tryGetById(regexp, "ignoreCase");
    if (regexpIgnoreCase !== @regExpProtoIgnoreCaseGetter)
        return true;
    let regexpMultiline = @tryGetById(regexp, "multiline");
    if (regexpMultiline !== @regExpProtoMultilineGetter)
        return true;
    let regexpSticky = @tryGetById(regexp, "sticky");
    if (regexpSticky !== @regExpProtoStickyGetter)
        return true;
    let regexpUnicode = @tryGetById(regexp, "unicode");
    if (regexpUnicode !== @regExpProtoUnicodeGetter)
        return true;
    
    //
    let regexpSource = @tryGetById(regexp, "source");
    if (regexpSource !== @regExpProtoSourceGetter)
        return true;
    
    return !@isRegExpObject(regexp);
(function (string, limit)
    "use strict";
    //
    //
    if (!@isObject(this))
        @throwTypeError("RegExp.prototype.@@split requires that |this| be an Object");
    let regexp = this;
    //
    let str = @toString(string);
    //
    let speciesConstructor = @speciesConstructor(regexp, @RegExp);
    if (speciesConstructor === @RegExp && !@hasObservableSideEffectsForRegExpSplit(regexp))
        return @regExpSplitFast.@call(regexp, str, limit);
    //
    let flags = @toString(regexp.flags);
    //
    //
    let unicodeMatching = @stringIncludesInternal.@call(flags, "u");
    //
    //
    let newFlags = @stringIncludesInternal.@call(flags, "y") ? flags : flags + "y";
    //
    let splitter = new speciesConstructor(regexp, newFlags);
    //
    //
    if (!@hasObservableSideEffectsForRegExpSplit(splitter))
        return @regExpSplitFast.@call(splitter, str, limit);
    //
    //
    let result = [];
    //
    limit = (limit === @undefined) ? 0xffffffff : limit >>> 0;
    //
    if (!limit)
        return result;
    //
    let size = str.length;
    //
    if (!size) {
        //
        let z = @regExpExec(splitter, str);
        //
        if (z != null)
            return result;
        //
        @putByValDirect(result, 0, str);
        //
        return result;
    }
    //
    let position = 0;
    //
    let matchPosition = 0;
    //
    while (matchPosition < size) {
        //
        splitter.lastIndex = matchPosition;
        //
        let matches = @regExpExec(splitter, str);
        //
        if (matches === null)
            matchPosition = @advanceStringIndex(str, matchPosition, unicodeMatching);
        //
        else {
            //
            let endPosition = @toLength(splitter.lastIndex);
            //
            endPosition = (endPosition <= size) ? endPosition : size;
            //
            if (endPosition === position)
                matchPosition = @advanceStringIndex(str, matchPosition, unicodeMatching);
            //
            else {
                //
                let subStr = @stringSubstrInternal.@call(str, position, matchPosition - position);
                //
                //
                @putByValDirect(result, result.length, subStr);
                //
                if (result.length == limit)
                    return result;
                //
                position = endPosition;
                //
                //
                let numberOfCaptures = matches.length > 1 ? matches.length - 1 : 0;
                //
                let i = 1;
                //
                while (i <= numberOfCaptures) {
                    //
                    let nextCapture = matches[i];
                    //
                    //
                    @putByValDirect(result, result.length, nextCapture);
                    //
                    if (result.length == limit)
                        return result;
                    //
                    i++;
                }
                //
                matchPosition = position;
            }
        }
    }
    //
    let remainingStr = @stringSubstrInternal.@call(str, position, size);
    //
    @putByValDirect(result, result.length, remainingStr);
    //
    return result;
(function (strArg)
    "use strict";
    let regexp = this;
    //
    if (@isRegExpObject(regexp) && @tryGetById(regexp, "exec") === @regExpBuiltinExec)
        return @regExpTestFast.@call(regexp, strArg);
    //
    //
    if (!@isObject(regexp))
        @throwTypeError("RegExp.prototype.test requires that |this| be an Object");
    //
    let str = @toString(strArg);
    //
    let match = @regExpExec(regexp, str);
    //
    if (match !== null)
        return true;
    return false;
(function (callback )
    "use strict";
    if (!@isSet(this))
        @throwTypeError("Set operation called on non-Set object");
    if (typeof callback !== 'function')
        @throwTypeError("Set.prototype.forEach callback must be a function");
    var thisArg = @argument(1);
    var iterator = @SetIterator(this);
    //
    var value = [ @undefined ];
    for (;;) {
        if (@setIteratorNext.@call(iterator, value))
            break;
        callback.@call(thisArg, value[0], value[0], this);
    }
(function (template)
    "use strict";
    if (template === null || template === @undefined)
        @throwTypeError("String.raw requires template not be null or undefined");
    var cookedSegments = @Object(template);
    var rawValue = cookedSegments.raw;
    if (rawValue === null || rawValue === @undefined)
        @throwTypeError("String.raw requires template.raw not be null or undefined");
    var rawSegments = @Object(rawValue);
    var numberOfSubstitutions = arguments.length - 1;
    var segmentCount = @toLength(rawSegments.length);
    if (segmentCount <= 0)
        return '';
    var stringElements = '';
    for (var i = 0; ; ++i) {
        var segment = @toString(rawSegments[i]);
        stringElements += segment;
        if ((i + 1) === segmentCount)
            return stringElements;
        if (i < numberOfSubstitutions) {
            var substitutionIndexInArguments = i + 1;
            var next = @toString(arguments[substitutionIndexInArguments]);
            stringElements += next;
        }
    }
(function ()
    "use strict";
    if (this == null)
        @throwTypeError("%StringIteratorPrototype%.next requires that |this| not be null or undefined");
    var position = this.@stringIteratorNextIndex;
    if (position === @undefined)
        @throwTypeError("%StringIteratorPrototype%.next requires that |this| be a String Iterator instance");
    var done = true;
    var value = @undefined;
    var string = this.@iteratedString;
    if (string !== @undefined) {
        var length = string.length >>> 0;
        if (position >= length) {
            this.@iteratedString = @undefined;
        } else {
            done = false;
            var first = string.@charCodeAt(position);
            if (first < 0xD800 || first > 0xDBFF || position + 1 === length)
                value = string[position];
            else {
                var second = string.@charCodeAt(position + 1);
                if (second < 0xDC00 || second > 0xDFFF)
                    value = string[position];
                else
                    value = string[position] + string[position + 1];
            }
            this.@stringIteratorNextIndex = position + value.length;
        }
    }
    return {done, value};
(function (regexp)
    "use strict";
    if (this == null)
        @throwTypeError("String.prototype.match requires that |this| not be null or undefined");
    if (regexp != null) {
        var matcher = regexp.@matchSymbol;
        if (matcher != @undefined)
            return matcher.@call(regexp, this);
    }
    let thisString = @toString(this);
    let createdRegExp = @regExpCreate(regexp, @undefined);
    return createdRegExp.@matchSymbol(thisString);
(function (string, count)
    "use strict";
    //
    if (count === 0 || string.length === 0)
        return "";
    //
    if (count === 1)
        return string;
    if (string.length * count > @MAX_STRING_LENGTH)
        @throwOutOfMemoryError();
    //
    //
    var result = "";
    var operand = string;
    while (true) {
        if (count & 1)
            result += operand;
        count >>= 1;
        if (!count)
            return result;
        operand += operand;
    }
(function (string, count)
    "use strict";
    var repeatCount = (count / string.length) | 0;
    var remainingCharacters = count - repeatCount * string.length;
    var result = "";
    var operand = string;
    //
    //
    while (true) {
        if (repeatCount & 1)
            result += operand;
        repeatCount >>= 1;
        if (!repeatCount)
            break;
        operand += operand;
    }
    if (remainingCharacters)
        result += @stringSubstrInternal.@call(string, 0, remainingCharacters);
    return result;
(function (count)
    "use strict";
    if (this == null)
        @throwTypeError("String.prototype.repeat requires that |this| not be null or undefined");
    var string = @toString(this);
    count = @toInteger(count);
    if (count < 0 || count === @Infinity)
        @throwRangeError("String.prototype.repeat argument must be greater than or equal to 0 and not be Infinity");
    if (string.length === 1)
        return @repeatCharacter(string, count);
    return @repeatSlowPath(string, count);
(function (maxLength)
    "use strict";
    if (this == null)
        @throwTypeError("String.prototype.padStart requires that |this| not be null or undefined");
    var string = @toString(this);
    maxLength = @toLength(maxLength);
    var stringLength = string.length;
    if (maxLength <= stringLength)
        return string;
    var filler;
    var fillString = @argument(1);
    if (fillString === @undefined)
        filler = " ";
    else {
        filler = @toString(fillString);
        if (filler === "")
            return string;
    }
    if (maxLength > @MAX_STRING_LENGTH)
        @throwOutOfMemoryError();
    var fillLength = maxLength - stringLength;
    var truncatedStringFiller;
    if (filler.length === 1)
        truncatedStringFiller = @repeatCharacter(filler, fillLength);
    else
        truncatedStringFiller = @repeatCharactersSlowPath(filler, fillLength);
    return truncatedStringFiller + string;
(function (maxLength)
    "use strict";
    if (this == null)
        @throwTypeError("String.prototype.padEnd requires that |this| not be null or undefined");
    var string = @toString(this);
    maxLength = @toLength(maxLength);
    var stringLength = string.length;
    if (maxLength <= stringLength)
        return string;
    var filler;
    var fillString = @argument(1);
    if (fillString === @undefined)
        filler = " ";
    else {
        filler = @toString(fillString);
        if (filler === "")
            return string;
    }
    if (maxLength > @MAX_STRING_LENGTH)
        @throwOutOfMemoryError();
    var fillLength = maxLength - stringLength;
    var truncatedStringFiller;
    if (filler.length === 1)
        truncatedStringFiller = @repeatCharacter(filler, fillLength);
    else
        truncatedStringFiller = @repeatCharactersSlowPath(filler, fillLength);
    return string + truncatedStringFiller;
(function (regexp, replacer) {
    if (replacer !== @regExpPrototypeSymbolReplace)
        return true;
    
    let regexpExec = @tryGetById(regexp, "exec");
    if (regexpExec !== @regExpBuiltinExec)
        return true;
    let regexpGlobal = @tryGetById(regexp, "global");
    if (regexpGlobal !== @regExpProtoGlobalGetter)
        return true;
    let regexpUnicode = @tryGetById(regexp, "unicode");
    if (regexpUnicode !== @regExpProtoUnicodeGetter)
        return true;
    return !@isRegExpObject(regexp);
(function (search, replace)
    "use strict";
    if (this == null)
        @throwTypeError("String.prototype.replace requires that |this| not be null or undefined");
    if (search != null) {
        let replacer = search.@replaceSymbol;
        if (replacer !== @undefined) {
            if (!@hasObservableSideEffectsForStringReplace(search, replacer))
                return @toString(this).@replaceUsingRegExp(search, replace);
            return replacer.@call(search, this, replace);
        }
    }
    let thisString = @toString(this);
    let searchString = @toString(search);
    return thisString.@replaceUsingStringSearch(searchString, replace);
(function ()
    return @getDefaultCollator.collator || (@getDefaultCollator.collator = new @Collator());
(function (that)
    "use strict";
    //
    //
    //
    if (this == null)
        @throwTypeError("String.prototype.localeCompare requires that |this| not be null or undefined");
    //
    //
    var thisString = @toString(this);
    //
    //
    var thatString = @toString(that);
    //
    var locales = @argument(1);
    var options = @argument(2);
    if (locales === @undefined && options === @undefined)
        return @getDefaultCollator().compare(thisString, thatString);
    //
    //
    var collator = new @Collator(locales, options);
    //
    return collator.compare(thisString, thatString);
(function (regexp)
    "use strict";
    if (this == null)
        @throwTypeError("String.prototype.search requires that |this| not be null or undefined");
    if (regexp != null) {
        var searcher = regexp.@searchSymbol;
        if (searcher != @undefined)
            return searcher.@call(regexp, this);
    }
    var thisString = @toString(this);
    var createdRegExp = @regExpCreate(regexp, @undefined);
    return createdRegExp.@searchSymbol(thisString);
(function (separator, limit)
    "use strict";
    
    if (this == null)
        @throwTypeError("String.prototype.split requires that |this| not be null or undefined");
    
    if (separator != null) {
        var splitter = separator.@splitSymbol;
        if (splitter != @undefined)
            return splitter.@call(separator, this, limit);
    }
    
    return @stringSplitFast.@call(this, separator, limit);
(function ()
    "use strict";
    var result = @toString(this);
    for (var i = 0, length = arguments.length; i < length; ++i)
        result += @toString(arguments[i]);
    return result;
(function (arg )
    "use strict";
    if (this == null)
        @throwTypeError("String.prototype.concat requires that |this| not be null or undefined");
    if (@argumentCount() === 1)
        return @toString(this) + @toString(arg);
    return @tailCallForwardArguments(@stringConcatSlowPath, this);
(function (func, string, tag, attribute, value)
    "use strict";
    if (string == null)
        @throwTypeError(`${func} requires that |this| not be null or undefined`);
    let S = @toString(string);
    let p1 = "<" + tag;
    if (attribute) {
        let V = @toString(value);
        let escapedV = V.@replaceUsingRegExp(/"/g, '&quot;');
        p1 = p1 + " " + @toString(attribute) + '="' + escapedV + '"'
    }
    let p2 = p1 + ">"
    let p3 = p2 + S;
    let p4 = p3 + "</" + tag + ">";
    return p4;
(function (url)
    "use strict";
    return @createHTML("String.prototype.link", this, "a", "name", url)
(function ()
    "use strict";
    return @createHTML("String.prototype.big", this, "big", "", "");
(function ()
    "use strict";
    return @createHTML("String.prototype.blink", this, "blink", "", "");
(function ()
    "use strict";
    return @createHTML("String.prototype.bold", this, "b", "", "");
(function ()
    "use strict";
    return @createHTML("String.prototype.fixed", this, "tt", "", "");
(function (color)
    "use strict";
    return @createHTML("String.prototype.fontcolor", this, "font", "color", color);
(function (size)
    "use strict";
    return @createHTML("String.prototype.fontsize", this, "font", "size", size);
(function ()
    "use strict";
    return @createHTML("String.prototype.italics", this, "i", "", "");
(function (url)
    "use strict";
    return @createHTML("String.prototype.link", this, "a", "href", url)
(function ()
    "use strict";
    return @createHTML("String.prototype.small", this, "small", "", "");
(function ()
    "use strict";
    return @createHTML("String.prototype.strike", this, "strike", "", "");
(function ()
    "use strict";
    return @createHTML("String.prototype.sub", this, "sub", "", "");
(function ()
    "use strict";
    return @createHTML("String.prototype.sup", this, "sup", "", "");
(function ()
    "use strict";
    let len = arguments.length;
    let constructFunction = this.@allocateTypedArray;
    if (constructFunction === @undefined)
        @throwTypeError("TypedArray.of requires its this argument to subclass a TypedArray constructor");
    let result = constructFunction(len);
    for (let i = 0; i < len; i++)
        result[i] = arguments[i];
    return result;
(function (items )
    "use strict";
    let mapFn = @argument(1);
    let thisArg;
    if (mapFn !== @undefined) {
        if (typeof mapFn !== "function")
            @throwTypeError("TypedArray.from requires that the second argument, when provided, be a function");
        thisArg = @argument(2);
    }
    if (items == null)
        @throwTypeError("TypedArray.from requires an array-like object - not null or undefined");
    let iteratorMethod = items.@iteratorSymbol;
    if (iteratorMethod != null) {
        if (typeof iteratorMethod !== "function")
            @throwTypeError("TypedArray.from requires that the property of the first argument, items[Symbol.iterator], when exists, be a function");
        let accumulator = [];
        let k = 0;
        let iterator = iteratorMethod.@call(items);
        //
        //
        //
        let wrapper = {};
        wrapper.@iteratorSymbol = function() { return iterator; }
        for (let value of wrapper) {
            if (mapFn)
                @putByValDirect(accumulator, k, thisArg === @undefined ? mapFn(value, k) : mapFn.@call(thisArg, value, k));
            else
                @putByValDirect(accumulator, k, value);
            k++;
        }
        let constructFunction = this.@allocateTypedArray;
        if (constructFunction === @undefined)
            @throwTypeError("TypedArray.from requires its this argument subclass a TypedArray constructor");
        let result = constructFunction(k);
        for (let i = 0; i < k; i++) 
            result[i] = accumulator[i];
        return result;
    }
    let arrayLike = @Object(items);
    let arrayLikeLength = @toLength(arrayLike.length);
    let constructFunction = this.@allocateTypedArray;
    if (constructFunction === @undefined)
        @throwTypeError("this does not subclass a TypedArray constructor");
    let result = constructFunction(arrayLikeLength);
    let k = 0;
    while (k < arrayLikeLength) {
        let value = arrayLike[k];
        if (mapFn)
            result[k] = thisArg === @undefined ? mapFn(value, k) : mapFn.@call(thisArg, value, k);
        else
            result[k] = value;
        k++;
    }
    return result;
(function (length)
    return new @Int8Array(length);
(function (length)
    return new @Int16Array(length);    
(function (length)
    return new @Int32Array(length);   
(function (length)
    return new @Uint32Array(length);
(function (length)
    return new @Uint16Array(length);   
(function (length)
    return new @Uint8Array(length);   
(function (length)
    return new @Uint8ClampedArray(length);
(function (length)
    return new @Float32Array(length);
(function (length)
    return new @Float64Array(length);
(function (value)
    "use strict";
    let constructor = value.constructor;
    if (constructor === @undefined)
        return @typedArrayGetOriginalConstructor(value);
    if (!@isObject(constructor))
        @throwTypeError("|this|.constructor is not an Object or undefined");
    constructor = constructor.@speciesSymbol;
    if (constructor == null)
        return @typedArrayGetOriginalConstructor(value);
    //
    //
    //
    //
    return constructor;
(function (value, length, undefinedValue)
    "use strict";
    if (value === @undefined)
        return undefinedValue;
    let int = @toInteger(value);
    if (int < 0) {
        int += length;
        return int < 0 ? 0 : int;
    }
    return int > length ? length : int;
(function ()
    "use strict";
    @typedArrayLength(this);
    return new @createArrayIterator(this, "value", @arrayIteratorValueNext);
(function ()
    "use strict";
    @typedArrayLength(this);
    return new @createArrayIterator(this, "key", @arrayIteratorKeyNext);
(function ()
    "use strict";
    @typedArrayLength(this);
    return new @createArrayIterator(this, "key+value", @arrayIteratorKeyValueNext);
(function (callback )
    "use strict";
    var length = @typedArrayLength(this);
    var thisArg = @argument(1);
    if (typeof callback !== "function")
        @throwTypeError("TypedArray.prototype.every callback must be a function");
    for (var i = 0; i < length; i++) {
        if (!callback.@call(thisArg, this[i], i, this))
            return false;
    }
    return true;
(function (value )
    "use strict";
    let length = @typedArrayLength(this);
    let start = @argument(1);
    let end = @argument(2);
    start = @typedArrayClampArgumentToStartOrEnd(start, length, 0);
    end = @typedArrayClampArgumentToStartOrEnd(end, length, length);
    for (let i = start; i < end; i++)
        this[i] = value;
    return this;
(function (callback )
    "use strict";
    var length = @typedArrayLength(this);
    var thisArg = @argument(1);
    if (typeof callback !== "function")
        @throwTypeError("TypedArray.prototype.find callback must be a function");
    for (var i = 0; i < length; i++) {
        let elem = this[i];
        if (callback.@call(thisArg, elem, i, this))
            return elem;
    }
    return @undefined;
(function (callback )
    "use strict";
    var length = @typedArrayLength(this);
    var thisArg = @argument(1);
    if (typeof callback !== "function")
        @throwTypeError("TypedArray.prototype.findIndex callback must be a function");
    for (var i = 0; i < length; i++) {
        if (callback.@call(thisArg, this[i], i, this))
            return i;
    }
    return -1;
(function (callback )
    "use strict";
    var length = @typedArrayLength(this);
    var thisArg = @argument(1);
    if (typeof callback !== "function")
        @throwTypeError("TypedArray.prototype.forEach callback must be a function");
    for (var i = 0; i < length; i++)
        callback.@call(thisArg, this[i], i, this);
(function (callback )
    //
    "use strict";
    var length = @typedArrayLength(this);
    var thisArg = @argument(1);
    if (typeof callback !== "function")
        @throwTypeError("TypedArray.prototype.some callback must be a function");
    for (var i = 0; i < length; i++) {
        if (callback.@call(thisArg, this[i], i, this))
            return true;
    }
    return false;
(function (comparator)
    //
    "use strict";
    function min(a, b)
    {
        return a < b ? a : b;
    }
    function merge(dst, src, srcIndex, srcEnd, width, comparator)
    {
        var left = srcIndex;
        var leftEnd = min(left + width, srcEnd);
        var right = leftEnd;
        var rightEnd = min(right + width, srcEnd);
        for (var dstIndex = left; dstIndex < rightEnd; ++dstIndex) {
            if (right < rightEnd) {
                if (left >= leftEnd || comparator(src[right], src[left]) < 0) {
                    dst[dstIndex] = src[right++];
                    continue;
                }
            }
            dst[dstIndex] = src[left++];
        }
    }
    function mergeSort(array, valueCount, comparator)
    {
        var buffer = [ ];
        buffer.length = valueCount;
        var dst = buffer;
        var src = array;
        for (var width = 1; width < valueCount; width *= 2) {
            for (var srcIndex = 0; srcIndex < valueCount; srcIndex += 2 * width)
                merge(dst, src, srcIndex, valueCount, width, comparator);
            var tmp = src;
            src = dst;
            dst = tmp;
        }
        if (src != array) {
            for(var i = 0; i < valueCount; i++)
                array[i] = src[i];
        }
    }
    var length = @typedArrayLength(this);
    if (length < 2)
        return;
    if (typeof comparator == "function")
        mergeSort(this, length, comparator);
    else
        @typedArraySort(this);
    
    return this;
(function (begin, end)
    "use strict";
    if (!@isTypedArrayView(this))
        @throwTypeError("|this| should be a typed array view");
    let start = @toInteger(begin);
    let finish;
    if (end !== @undefined)
        finish = @toInteger(end);
    let constructor = @typedArraySpeciesConstructor(this);
    return @typedArraySubarrayCreate.@call(this, start, finish, constructor);
(function (callback )
    //
    "use strict";
    var length = @typedArrayLength(this);
    if (typeof callback !== "function")
        @throwTypeError("TypedArray.prototype.reduce callback must be a function");
    var argumentCount = @argumentCount();
    if (length === 0 && argumentCount < 2)
        @throwTypeError("TypedArray.prototype.reduce of empty array with no initial value");
    var accumulator, k = 0;
    if (argumentCount > 1)
        accumulator = @argument(1);
    else
        accumulator = this[k++];
    for (; k < length; k++)
        accumulator = callback.@call(@undefined, accumulator, this[k], k, this);
    return accumulator;
(function (callback )
    //
    "use strict";
    var length = @typedArrayLength(this);
    if (typeof callback !== "function")
        @throwTypeError("TypedArray.prototype.reduceRight callback must be a function");
    var argumentCount = @argumentCount();
    if (length === 0 && argumentCount < 2)
        @throwTypeError("TypedArray.prototype.reduceRight of empty array with no initial value");
    var accumulator, k = length - 1;
    if (argumentCount > 1)
        accumulator = @argument(1);
    else
        accumulator = this[k--];
    for (; k >= 0; k--)
        accumulator = callback.@call(@undefined, accumulator, this[k], k, this);
    return accumulator;
(function (callback )
    //
    "use strict";
    var length = @typedArrayLength(this);
    if (typeof callback !== "function")
        @throwTypeError("TypedArray.prototype.map callback must be a function");
    var thisArg = @argument(1);
    //
    var constructor = this.constructor;
    var result;
    if (constructor === @undefined)
        result = new (@typedArrayGetOriginalConstructor(this))(length);
    else {
        var speciesConstructor = @Object(constructor).@speciesSymbol;
        if (speciesConstructor === null || speciesConstructor === @undefined)
            result = new (@typedArrayGetOriginalConstructor(this))(length);
        else {
            result = new speciesConstructor(length);
            //
            @typedArrayLength(result);
        }
    }
    for (var i = 0; i < length; i++) {
        var mappedValue = callback.@call(thisArg, this[i], i, this);
        result[i] = mappedValue;
    }
    return result;
(function (callback )
    "use strict";
    var length = @typedArrayLength(this);
    if (typeof callback !== "function")
        @throwTypeError("TypedArray.prototype.filter callback must be a function");
    var thisArg = @argument(1);
    var kept = [];
    for (var i = 0; i < length; i++) {
        var value = this[i];
        if (callback.@call(thisArg, value, i, this))
            kept.@push(value);
    }
    var constructor = this.constructor;
    var result;
    var resultLength = kept.length;
    if (constructor === @undefined)
        result = new (@typedArrayGetOriginalConstructor(this))(resultLength);
    else {
        var speciesConstructor = @Object(constructor).@speciesSymbol;
        if (speciesConstructor === null || speciesConstructor === @undefined)
            result = new (@typedArrayGetOriginalConstructor(this))(resultLength);
        else {
            result = new speciesConstructor(resultLength);
            //
            @typedArrayLength(result);
        }
    }
    for (var i = 0; i < kept.length; i++)
        result[i] = kept[i];
    return result;
(function ()
    "use strict";
    var length = @typedArrayLength(this);
    if (length == 0)
        return "";
    var string = this[0].toLocaleString();
    for (var i = 1; i < length; i++)
        string += "," + this[i].toLocaleString();
    return string;
<%p, %s>
<JSValue()>
Int32: %d
Double: %lld, %lf
 (rope)
 (atomic)
 (identifier)
 (symbol)
 (unresolved)
Symbol: 
Structure: 
Object: 
 with butterfly 
Cell: 
, ID: 
True
False
Null
Undefined
INVALID
(unresolved string)
Structure[ 
 ID: 
Cell[
Cannot convert a symbol to a string
v24@?0@"JSContext"8@"JSValue"16
globalObject
T@"JSValue",R
T@"JSValue",&
exceptionHandler
T@?,C,V_exceptionHandler
virtualMachine
T@"JSVirtualMachine",R
T@"NSString",C
wrapperMap
T@"JSWrapperMap",R,&
JavaScriptCore
() at 
get 
set 
DataView
Attempting to write to read-only typed array property.
Attempting to define read-only typed array property.
DataViewPrototype
DataView.prototype.buffer expects |this| to be a DataView object
getInt8
getUint8
getInt16
getUint16
getInt32
getUint32
getFloat32
getFloat64
setInt8
setUint8
setInt16
setUint16
setInt32
setUint32
setFloat32
setFloat64
Receiver of DataView method must be a DataView
Out of bounds access
: marks not empty!
Block lock is held: 
Marking version of block: 
Marking version of heap: 
DollarVM
DollarVMPrototype
crash
dfgTrue
llintTrue
jitTrue
edenGC
codeBlockFor
codeBlockForFrame
printSourceFor
printByteCodeFor
printCallFrame
printStack
getpid
ERROR: current thread does not own the JSLock
Invalid codeBlock: 
EnvironmentRecord
JSFixedArray
Allocating a function
Function.caller used to retrieve strict caller
Store to prototype property of a function
bound 
Allocating a generator function
JSGlobalLexicalEnvironment
GlobalObject
get [Symbol.species]
Having a bad time
escape
unescape
decodeURI
decodeURIComponent
encodeURI
encodeURIComponent
Object Property is changed.
Not supported for JavaScript context
Unnamed Profile already exists
Profile "
No profiles exist
console.timeStamp
 is currently ignored in JavaScript context inspection.
JSContext
Execution context id is not supported for JSContext inspection as there is only one execution context.
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!#$&'()*+,-./:;=?@_~
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!'()*-._~
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789*+-./@_
'arguments', 'callee', and 'caller' cannot be accessed in this context.
Object.prototype.__proto__ called on null or undefined
URI error
String contained an illegal UTF-16 sequence.
[native code]
Internal error: main world execution context not found.
InjectedScriptHost
InjectedScriptHost.evaluateWithScopeExtension first argument must be a string.
pending
resolved
rejected
targetFunction
boundThis
boundArgs
handler
kind
key+value
subtype
internalConstructorName
isHTMLAllCollection
proxyTargetValue
weakMapSize
weakMapEntries
weakSetSize
weakSetEntries
iteratorEntries
evaluateWithScopeExtension
JSInternalPromiseDeferred
InternalPromisePrototype
JavaScriptCallFrame
JSJavaScriptCallFrame.evaluateWithScopeExtension first argument must be a string.
program
scopeDescriptions
scopeChain
thisObject
isTailDeleted
JSLexicalEnvironment
Error in JSC Config file on or near line %u, parsing '%s'
Failed to open file JSC Config file '%s'.
jscOptions
logFile
%s/%s
processName
parentProcessName
build
Release
Map Iterator
JSModuleEnvironment
ModuleLoader
registry
Loader [import] 
Could not import the module '
Loader [resolve] 
Loader [fetch] 
Could not open the module '
Loader [instantiate] 
Loader [evaluate] 
ModuleNamespaceObject
ModuleRecord
Indirectly exported binding name '
' cannot be resolved due to ambiguous multiple bindings.
Indirectly exported binding name 'default' cannot be resolved by star export entries.
Importing binding name '
Importing binding name 'default' cannot be resolved by star export entries.
Attempting to define property on object that is not extensible.
Attempted to assign to readonly property.
Attempting to change value of a readonly property.
Unable to delete property.
Attempting to change access mechanism for an unconfigurable property.
Attempting to change configurable attribute of unconfigurable property.
Attempting to change enumerable attribute of unconfigurable property.
Attempting to change writable attribute of unconfigurable property.
Cannot set prototype of immutable prototype object
cyclic __proto__ value
No default value
instanceof called on an object with an invalid prototype property.
Attempting to change the setter of an unconfigurable property.
Attempting to change the getter of an unconfigurable property.
JSObject::visitButterfly
Symbol.toPrimitive returned an object
Symbol.toPrimitive is not a function, undefined, or null
JSON.stringify cannot serialize cyclic structures.
JSON.parse requires at least one parameter
No input to stringify
stringify
JSON Parse error: %s
JSON Parse error: Unable to parse JSON string
JSPromiseDeferred
PromisePrototype
JSPropertyNameEnumerator
JSProxy
: %lu m_instructions; %lu bytes; %d parameter(s); %d callee register(s); %d variable(s)
; scope at 
Identifiers:
  id%u = %s
Constants:
: in source as double
: in source as integer
   k%u = %s%s
m_regexps:
  re%u = %s
Exception Handlers:
 %d: { start: [%4d] end: [%4d] target: [%4d] } %s
Switch Jump Tables:
  %1d = {
%4d => %04d
      }
String Switch Jump Tables:
"%s" => %04d
%s, %s
%s, %s, %s
%s, %d(->%d)
get_by_id
get_by_id_proto_load
get_by_id_unset
array_length
 llint(array_length)
 llint(
struct
 proto(%p)
 (Reset By GC)
 jit(
stub
unset
ArrayLength
prev
replace, 
stub, 
 (this at 
 llint(%p, exec %p)
 jit(%p, exec %p)
enter
get_scope
create_direct_arguments
create_scoped_arguments
create_cloned_arguments
argument_count
, %d
create_rest
%s, %s, 
ArgumentsOffset: %u
get_rest_length
%s, 
create_this
%s, %s, %u, %u
to_this
, cache(struct = 
op_check_tdz
new_object
%s, %u
new_array
%s, %s, %d
new_array_with_spread
%s, %s, %d, 
BitVector:
spread
new_array_with_size
new_array_buffer
%s, %d, %d
new_regexp
bad_regexp(%d)
op_profile_type
profile_control_flow
[%d, %d]
eq_null
neq_null
stricteq
nstricteq
less
lesseq
greater
greatereq
to_number
to_string
negate
lshift
rshift
urshift
bitand
bitxor
bitor
overrides_has_instance
instanceof_custom
%s, %s, %s, %s
unsigned
is_empty
is_undefined
is_boolean
is_number
is_cell_with_type
is_object
is_object_or_null
is_function
try_get_by_id
get_by_id_with_this
get_by_val_with_this
put_by_id
put_by_id_with_this
put_by_val_with_this
put_getter_by_id
%s, %s, %d, %s
put_setter_by_id
put_getter_setter_by_id
%s, %s, %d, %s, %s
put_getter_by_val
put_setter_by_val
define_data_property
define_accessor_property
%s, %s, %s, %s, %s
del_by_id
get_by_val
put_by_val
put_by_val_direct
del_by_val
put_by_index
%s, %u, %s
%d(->%d)
jtrue
jfalse
jeq_null
jneq_null
jneq_ptr
%s, %d (%p), %d(->%d)
jless
%s, %s, %d(->%d)
jlesseq
jgreater
jgreatereq
jnless
jnlesseq
jngreater
jngreatereq
loop_hint
check_traps
log_shadow_chicken_prologue
log_shadow_chicken_tail
switch_imm
%d, %d(->%d), %s
switch_char
switch_string
new_func
%s, %s, f%d
new_generator_func
new_async_func
new_func_exp
new_generator_func_exp
new_async_func_exp
set_function_name
tail_call
call_eval
call_varargs
construct_varargs
tail_call_varargs
tail_call_forward_arguments
%s, %s, %s, %s, %d, %d
construct
strcat
to_primitive
op_get_enumerable_length
op_has_indexed_property
op_has_structure_property
op_has_generic_property
op_get_direct_pname
op_get_property_enumerator
op_enumerator_structure_pname
op_enumerator_generic_pname
op_to_index_string
push_with_scope
get_parent_scope
create_lexical_environment
throw_static_error
%s, %d
unreachable
resolve_scope_for_hoisting_func_decl_in_eval
resolve_scope
%s, %s, %s, <%s>, %d, %p
get_from_scope
, anonymous
put_to_scope
>, <structure>, 
get_from_arguments
put_to_arguments
%s, %d, %s
rare case: 
 !! frequent exits: 
 status(
synthesized catch
synthesized finally
GlobalProperty
GlobalVar
GlobalLexicalVar
ClosureVar
LocalClosureVar
ModuleVar
GlobalPropertyWithVarInjectionChecks
GlobalVarWithVarInjectionChecks
GlobalLexicalVarWithVarInjectionChecks
ClosureVarWithVarInjectionChecks
UnresolvedProperty
UnresolvedPropertyWithVarInjectionChecks
Dynamic
ThrowIfNotFound
DoNotThrowIfNotFound
Initialization
ConstInitialization
NotInitialization
results: 
(@re
didEnterCallFrame
willLeaveCallFrame
willExecuteStatement
willExecuteExpression
willExecuteProgram
didExecuteProgram
didReachBreakpoint
(@id
%s = %p
 (offset = %d)
chain = %p: [
predicting 
[%4d] %-17s 
JSScriptFetcher
Set Iterator
JSSourceCode
<%p, %s, [%u], 
[rope]
[8 %p]
[16 %p]
String Iterator
SymbolTableObject
TemplateRegistryKey
JSObjectMakeTypedArrayWithArrayBuffer expects buffer to be an Array Buffer object
Cannot get the backing buffer for a WebAssembly.Memory
DataView constructor requires at least one argument.
Expected ArrayBuffer for the first argument.
Prototype
Int8ArrayPrototype
Int16ArrayPrototype
Int32ArrayPrototype
Uint8ArrayPrototype
Uint8ClampedArrayPrototype
Uint16ArrayPrototype
Uint32ArrayPrototype
Float32ArrayPrototype
Float64ArrayPrototype
viaProxy = 
additionalSet = 
Attempting to store accessor property on a typed array at index: 
Attempting to configure non-configurable property on a typed array at index: 
Attempting to store non-enumerable or non-writable property on a typed array at index: 
TypedArray
%TypedArray% should not be called directly
Receiver should be a typed array view
Receiver should be a typed array view but was not an object
get [Symbol.toStringTag]
Expected at least one argument
Offset should not be negative
First argument should be an object
constructor Property should not be null
species is not a constructor
species constructor did not return a TypedArray View
T@"JSContext",R,V_context
isUndefined
TB,R
isNull
isBoolean
isNumber
isString
isDate
Cannot convert primitive to NSArray
Cannot convert primitive to NSDictionary
valueWith
:inContext:
v16@?0^{objc_method=}8
WithScope
structure = 
offset = 
conditions = 
This condition is no longer met: 
%sPrototype
v24@?0@"Protocol"8^B16
JSExport
NSBlock
%sConstructor
v24@?0:8r*16
ERROR: Class %@ exported more than one init family method via JSExport. Class %@ will not have a callable JavaScript constructor function.
init
v16@?0^{objc_property=}8
__JS_EXPORT_AS__
Multiline comment was not closed properly
No hexadecimal digits after '0x'
No space between hexadecimal literal and identifier
No binary digits after '0b'
No space between binary literal and identifier
No octal digits after '0o'
No space between octal literal and identifier
Decimal integer literals with a leading zero are forbidden in strict mode
Non-number found after exponent indicator
No identifiers allowed directly after numeric literal
Unterminated regular expression literal '
Invalid character: '\0'
Invalid character: '\n'
Invalid character: '\v'
Invalid character: '\r'
Invalid character: '#'
Invalid character: '@'
Invalid character: '`'
Invalid character '\u%04u'
Unexpected EOF
\x can only be followed by a hex character sequence
\u can only be followed by a Unicode character sequence
The only valid numeric escape in strict mode is '\0'
Unterminated string constant
Generated JIT code for 
    Code at [%p, %p):
Invalid number
Invalid digits after decimal point
Exponent symbols should be followed by an optional '+' or '-' and then by at least one number
Unexpected comma at the end of array expression
Expected ']'
Expected ':' before value in object property definition
Expected '}'
Property name must be a string literal
Expected ':'
Attempted to redefine __proto__ property
Unexpected token ']'
Unexpected token '}'
Unexpected identifier "%s"
Unexpected token ':'
Unexpected token '('
Unexpected token ')'
Unexpected token ','
Unexpected token '.'
Unexpected token '='
Unexpected token ';'
Could not parse value expression
Unexpected token '{'
Unexpected identifier
Unexpected token 'true'
Unexpected token 'false'
Unexpected token 'null'
Could not parse statement
Unexpected content at end of JSON literal
Unrecognized token '%c'
Unterminated string
\u must be followed by 4 hex digits
"\%s" is not a valid unicode escape
Invalid escape character %c
Single quotes (') are not allowed in JSON
ObjectToStringValue Adaptation of 
LLIntSlowPaths
entry_osr
entry_osr_function_for_call
entry_osr_function_for_construct
entry_osr_function_for_call_arityCheck
entry_osr_function_for_construct_arityCheck
: Entered loop_osr with executeCounter = 
: Entered replace with executeCounter = 
LLIntSlowPaths/call
: Entered 
 with executeCounter = 
OSR entry
in prologue
    JIT threshold should be lifted.
    Code was already compiled.
Unexpected code block in LLInt: 
threshold not reached, counter = 
function for call
function for construct
function for call with arity check
function for construct with arity check
module_program
LLInt %s prologue thunk
Static hashtable initialiation for 
 did not produce a property.
<null property name>
/BuildRoot/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/JavaScriptCore-7604.1.28.1/heap/MachineStackMarker.cpp
bool JSC::MachineThreads::tryCopyOtherThreadStacks(const WTF::AbstractLocker &, void *, size_t, size_t *)
JavaScript garbage collection encountered an invalid thread (err 0x%x): Thread [%d/%d: %p] id %u.
CodePtr
Cannot call MapIterator.next() on a non-MapIterator object
Map operation called on non-Map object
Cannot create a Map value iterator for a non-Map object.
Cannot create a Map entry iterator for a non-Map object.
Cannot create a Map key iterator for a non-Map object.
Live
Empty
Allocated
CanAllocateButNotEmpty
Unswept
MarkingNotEmpty
MarkingRetired
    Marked block payload size: 
    Next size class as a double: 
    Next size class as bytes: 
    Size class: 
    Possibly better size class: 
    Original wastage: 
, new wastage: 
    Choosing size class: 
JSC Heap MarkedSpace size class dump: 
Adding JSC MarkedSpace size class: 
LN10
LOG2E
LOG10E
SQRT1_2
SQRT2
acos
asin
atan
acosh
asinh
atanh
atan2
cbrt
ceil
clz32
cosh
expm1
fround
hypot
log10
log1p
log2
random
round
sign
sinh
sqrt
tanh
imul
moduleDeclarationInstantiation
getModuleNamespaceObject
parseModule
requestedModules
instantiate
Loader [link] 
ModuleProgramCodeBlock
ModuleProgramExecutable
NativeExecutable
NativeStdFunctionCell
'super()' can't be called more than once in a constructor.
Postfix ++ operator applied to value that is not a reference.
Postfix -- operator applied to value that is not a reference.
Cannot delete a super property
Prefix ++ operator applied to value that is not a reference.
Prefix -- operator applied to value that is not a reference.
Right hand side of instanceof is not an object
Left side of assignment is not a reference.
Left side of for-in statement is not a reference.
Left side of for-of statement is not a reference.
The superclass is not an object.
The value of the superclass's prototype property is not an object.
Right side of assignment cannot be destructured
Setting a property that has only a getter
EPSILON
MAX_VALUE
MIN_VALUE
MIN_SAFE_INTEGER
NEGATIVE_INFINITY
POSITIVE_INFINITY
isInteger
isSafeInteger
Number
0123456789abcdefghijklmnopqrstuvwxyz
thisNumberValue called on incompatible 
valueOf
toFixed
toExponential
toPrecision
toString() radix argument must be between 2 and 36
toFixed() argument must be between 0 and 20
toExponential() argument must be between 0 and 20
toPrecision() argument must be between 1 and 21
self type check failed for Objective-C instance method
Objective-C blocks called as constructors must return an object.
Malformed type encoding
@"NSString"16@?0@"NSString"8
NSString
Argument does not match Objective-C Class
Cannot set prototype of undefined or null
Prototype value can only be an object or null
Object.assign requires that input parameter not be null or undefined
Object.values requires that input parameter not be null or undefined
Property description must be an object.
Getter must be a function.
Setter must be a function.
Invalid property.  'value' present on property with getter or setter.
Invalid property.  'writable' present on property with getter or setter.
Properties can only be defined on Objects.
Object prototype may only be an Object or null.
Property descriptor list must be an Object.
Unable to prevent extension in Object.seal
Unable to prevent extension in Object.freeze
setPrototypeOf
getOwnPropertyDescriptors
getOwnPropertySymbols
defineProperties
seal
freeze
preventExtensions
isSealed
isFrozen
isExtensible
<invalid>
invalid getter usage
invalid setter usage
op_enter
op_get_scope
op_create_direct_arguments
op_create_scoped_arguments
op_create_cloned_arguments
op_create_this
op_get_argument
op_argument_count
op_to_this
op_new_object
op_new_array
op_new_array_with_size
op_new_array_with_spread
op_spread
op_new_array_buffer
op_new_regexp
op_mov
op_not
op_eq
op_eq_null
op_neq
op_neq_null
op_stricteq
op_nstricteq
op_less
op_lesseq
op_greater
op_greatereq
op_inc
op_dec
op_to_number
op_to_string
op_negate
op_add
op_mul
op_div
op_mod
op_sub
op_pow
op_lshift
op_rshift
op_urshift
op_unsigned
op_bitand
op_bitxor
op_bitor
op_overrides_has_instance
op_instanceof
op_instanceof_custom
op_typeof
op_is_empty
op_is_undefined
op_is_boolean
op_is_number
op_is_object
op_is_object_or_null
op_is_function
op_is_cell_with_type
op_in
op_get_array_length
op_get_by_id
op_get_by_id_proto_load
op_get_by_id_unset
op_get_by_id_with_this
op_get_by_val_with_this
op_try_get_by_id
op_put_by_id
op_put_by_id_with_this
op_del_by_id
op_get_by_val
op_put_by_val
op_put_by_val_with_this
op_put_by_val_direct
op_del_by_val
op_put_by_index
op_put_getter_by_id
op_put_setter_by_id
op_put_getter_setter_by_id
op_put_getter_by_val
op_put_setter_by_val
op_define_data_property
op_define_accessor_property
op_jmp
op_jtrue
op_jfalse
op_jeq_null
op_jneq_null
op_jneq_ptr
op_jless
op_jlesseq
op_jgreater
op_jgreatereq
op_jnless
op_jnlesseq
op_jngreater
op_jngreatereq
op_loop_hint
op_switch_imm
op_switch_char
op_switch_string
op_new_func
op_new_func_exp
op_new_generator_func
op_new_generator_func_exp
op_new_async_func
op_new_async_func_exp
op_set_function_name
op_call
op_tail_call
op_call_eval
op_call_varargs
op_tail_call_varargs
op_tail_call_forward_arguments
op_ret
op_construct
op_construct_varargs
op_strcat
op_to_primitive
op_resolve_scope
op_get_from_scope
op_put_to_scope
op_get_from_arguments
op_put_to_arguments
op_push_with_scope
op_create_lexical_environment
op_get_parent_scope
op_catch
op_throw
op_throw_static_error
op_debug
op_end
op_profile_control_flow
op_assert
op_unreachable
op_create_rest
op_get_rest_length
op_yield
op_check_traps
op_log_shadow_chicken_prologue
op_log_shadow_chicken_tail
op_resolve_scope_for_hoisting_func_decl_in_eval
op_nop
llint_program_prologue
llint_eval_prologue
llint_module_program_prologue
llint_function_for_call_prologue
llint_function_for_construct_prologue
llint_function_for_call_arity_check
llint_function_for_construct_arity_check
llint_generic_return_point
llint_throw_from_slow_path_trampoline
llint_throw_during_call_trampoline
llint_native_call_trampoline
llint_native_construct_trampoline
handleUncaughtException
WARNING: failed to parse %s=%s
 %u:%u
validateOptions
crashes if mis-typed JSC options were passed to the VM
dumpOptions
dumps JSC options (0 = None, 1 = Overridden only, 2 = All, 3 = Verbose)
configFile
file to configure JSC options and logging location
useLLInt
allows the LLINT to be used if true
useJIT
allows the executable pages to be allocated for JIT and thunks if true
useBaselineJIT
allows the baseline JIT to be used if true
useDFGJIT
allows the DFG JIT to be used if true
useRegExpJIT
allows the RegExp JIT to be used if true
useDOMJIT
allows the DOMJIT to be used if true
reportMustSucceedExecutableAllocations
maxPerThreadStackUsage
Max allowed stack usage by the VM
softReservedZoneSize
A buffer greater than reservedZoneSize that reserves space for stringifying exceptions.
reservedZoneSize
The amount of stack space we guarantee to our clients (and to interal VM code that does not call out to clients).
crashIfCantAllocateJITMemory
jitMemoryReservationSize
Set this number to change the executable allocation size in ExecutableAllocatorFixedVMPool. (In bytes.)
useSeparatedWXHeap
forceCodeBlockLiveness
forceICFailure
repatchCountForCoolDown
initialCoolDownCount
repatchBufferingCountdown
dumpGeneratedBytecodes
dumpBytecodeLivenessResults
validateBytecode
forceDebuggerBytecodeGeneration
dumpBytecodesBeforeGeneratorification
useFunctionDotArguments
useTailCalls
alwaysUseShadowChicken
shadowChickenLogSize
shadowChickenMaxTailDeletedFramesSize
dumpDisassembly
dumps disassembly of all JIT compiled code upon compilation
asyncDisassembly
dumpDFGDisassembly
dumps disassembly of DFG function upon compilation
dumpFTLDisassembly
dumps disassembly of FTL function upon compilation
dumpAllDFGNodes
bytecodeRangeToJITCompile
bytecode size range to allow compilation on, e.g. 1:100
bytecodeRangeToDFGCompile
bytecode size range to allow DFG compilation on, e.g. 1:100
bytecodeRangeToFTLCompile
bytecode size range to allow FTL compilation on, e.g. 1:100
jitWhitelist
file with list of function signatures to allow compilation on
dfgWhitelist
file with list of function signatures to allow DFG compilation on
ftlWhitelist
file with list of function signatures to allow FTL compilation on
dumpSourceAtDFGTime
dumps source code of JS function being DFG compiled
dumpBytecodeAtDFGTime
dumps bytecode of JS function being DFG compiled
dumpGraphAfterParsing
dumpGraphAtEachPhase
dumpDFGGraphAtEachPhase
dumps the DFG graph at each phase of DFG compilation (note this excludes DFG graphs during FTL compilation)
dumpDFGFTLGraphAtEachPhase
dumps the DFG graph at each phase of DFG compilation when compiling FTL code
dumpB3GraphAtEachPhase
dumps the B3 graph at each phase of compilation
dumpAirGraphAtEachPhase
dumps the Air graph at each phase of compilation
verboseDFGByteCodeParsing
safepointBeforeEachPhase
verboseCompilation
verboseFTLCompilation
logCompilationChanges
printEachOSRExit
validateGraph
validateGraphAtEachPhase
verboseValidationFailure
verboseOSR
verboseDFGOSRExit
verboseFTLOSRExit
verboseCallLink
verboseCompilationQueue
reportCompileTimes
dumps JS function signature and the time it took to compile in all tiers
reportBaselineCompileTimes
dumps JS function signature and the time it took to BaselineJIT compile
reportDFGCompileTimes
dumps JS function signature and the time it took to DFG and FTL compile
reportFTLCompileTimes
dumps JS function signature and the time it took to FTL compile
reportDFGPhaseTimes
dumps JS function name and the time is took for each DFG phase
reportTotalCompileTimes
verboseExitProfile
verboseCFA
verboseDFGFailure
verboseFTLToJSThunk
verboseFTLFailure
alwaysComputeHash
testTheFTL
verboseSanitizeStack
useGenerationalGC
useConcurrentBarriers
useConcurrentGC
collectContinuously
collectContinuouslyPeriodMS
forceFencedBarrier
verboseVisitRace
optimizeParallelSlotVisitorsForStoppedMutator
largeHeapSize
smallHeapSize
smallHeapRAMFraction
smallHeapGrowthFactor
mediumHeapRAMFraction
mediumHeapGrowthFactor
largeHeapGrowthFactor
criticalGCMemoryThreshold
percent memory in use the GC considers critical.  The collector is much more aggressive above this threshold
minimumMutatorUtilization
maximumMutatorUtilization
epsilonMutatorUtilization
concurrentGCMaxHeadroom
concurrentGCPeriodMS
useStochasticMutatorScheduler
minimumGCPauseMS
gcPauseScale
gcIncrementBytes
gcIncrementMaxBytes
gcIncrementScale
scribbleFreeCells
sizeClassProgression
largeAllocationCutoff
dumpSizeClasses
useBumpAllocator
stealEmptyBlocksFromOtherAllocators
eagerlyUpdateTopCallFrame
useOSREntryToDFG
useOSREntryToFTL
useFTLJIT
allows the FTL JIT to be used if true
useFTLTBAA
validateFTLOSRExitLiveness
defaultB3OptLevel
b3AlwaysFailsBeforeCompile
b3AlwaysFailsBeforeLink
ftlCrashes
clobberAllRegsInFTLICSlowPath
useAccessInlining
maxAccessVariantListSize
usePolyvariantDevirtualization
usePolymorphicAccessInlining
usePolymorphicCallInlining
usePolymorphicCallInliningForNonStubStatus
maxPolymorphicCallVariantListSize
maxPolymorphicCallVariantListSizeForTopTier
maxPolymorphicCallVariantListSizeForWebAssemblyToJS
maxPolymorphicCallVariantsForInlining
frequentCallThreshold
minimumCallToKnownRate
createPreHeaders
useMovHintRemoval
usePutStackSinking
useObjectAllocationSinking
logExecutableAllocation
useConcurrentJIT
allows the DFG / FTL compilation in threads other than the executing JS thread
numberOfDFGCompilerThreads
numberOfFTLCompilerThreads
priorityDeltaOfDFGCompilerThreads
priorityDeltaOfFTLCompilerThreads
priorityDeltaOfWasmCompilerThreads
useProfiler
disassembleBaselineForProfiler
useArchitectureSpecificOptimizations
breakOnThrow
maximumOptimizationCandidateInstructionCount
maximumFunctionForCallInlineCandidateInstructionCount
maximumFunctionForClosureCallInlineCandidateInstructionCount
maximumFunctionForConstructInlineCandidateInstructionCount
maximumFTLCandidateInstructionCount
maximumInliningDepth
maximum allowed inlining depth.  Depth of 1 means no inlining
maximumInliningRecursion
maximumInliningCallerSize
maximumVarargsForInlining
usePolyvariantCallInlining
usePolyvariantByIdInlining
useMaximalFlushInsertionPhase
Setting to true allows the DFG's MaximalFlushInsertionPhase to run.
maximumBinaryStringSwitchCaseLength
maximumBinaryStringSwitchTotalLength
jitPolicyScale
scale JIT thresholds to this specified ratio between 0.0 (compile ASAP) and 1.0 (compile like normal).
forceEagerCompilation
thresholdForJITAfterWarmUp
thresholdForJITSoon
thresholdForOptimizeAfterWarmUp
thresholdForOptimizeAfterLongWarmUp
thresholdForOptimizeSoon
executionCounterIncrementForLoop
executionCounterIncrementForEntry
thresholdForFTLOptimizeAfterWarmUp
thresholdForFTLOptimizeSoon
ftlTierUpCounterIncrementForLoop
ftlTierUpCounterIncrementForReturn
ftlOSREntryFailureCountForReoptimization
ftlOSREntryRetryThreshold
evalThresholdMultiplier
maximumEvalCacheableSourceLength
randomizeExecutionCountsBetweenCheckpoints
maximumExecutionCountsBetweenCheckpointsForBaseline
maximumExecutionCountsBetweenCheckpointsForUpperTiers
likelyToTakeSlowCaseMinimumCount
couldTakeSlowCaseMinimumCount
osrExitCountForReoptimization
osrExitCountForReoptimizationFromLoop
reoptimizationRetryCounterMax
minimumOptimizationDelay
maximumOptimizationDelay
desiredProfileLivenessRate
desiredProfileFullnessRate
doubleVoteRatioForDoubleFormat
structureCheckVoteRatioForHoisting
checkArrayVoteRatioForHoisting
maximumDirectCallStackSize
minimumNumberOfScansBetweenRebalance
numberOfGCMarkers
opaqueRootMergeThreshold
minHeapUtilization
minMarkedBlockUtilization
slowPathAllocsBetweenGCs
force a GC on every Nth slow path alloc, where N is specified by this option
percentCPUPerMBForFullTimer
percentCPUPerMBForEdenTimer
collectionTimerMaxPercentCPU
forceWeakRandomSeed
forcedWeakRandomSeed
useZombieMode
debugging option to scribble over dead objects with 0xbadbeef0
useImmortalObjects
debugging option to keep all objects alive forever
sweepSynchronously
debugging option to sweep all dead objects synchronously at GC end before resuming mutator
maxSingleAllocationSize
debugging option to limit individual allocations to a max size (0 = limit not set, N = limit size in bytes)
logGC
debugging option to log GC activity (0 = None, 1 = Basic, 2 = Verbose)
useGC
gcAtEnd
If true, the jsc CLI will do a GC before exiting
forceGCSlowPaths
If true, we will force all JIT fast allocations down their slow paths.
gcMaxHeapSize
forceRAMSize
recordGCPauseTimes
logHeapStatisticsAtExit
forceCodeBlockToJettisonDueToOldAge
If true, this means that anytime we can jettison a CodeBlock due to old age, we do.
useEagerCodeBlockJettisonTiming
If true, the time slices for jettisoning a CodeBlock due to old age are shrunk significantly.
useTypeProfiler
useControlFlowProfiler
useSamplingProfiler
sampleInterval
Time between stack traces in microseconds.
collectSamplingProfilerDataForJSCShell
This corresponds to the JSC shell's --sample option.
samplingProfilerTopFunctionsCount
Number of top functions to report when using the command line interface.
samplingProfilerTopBytecodesCount
Number of top bytecodes to report when using the command line interface.
samplingProfilerPath
The path to the directory to write sampiling profiler output to. This probably will not work with WK2 unless the path is in the whitelist.
sampleCCode
Causes the sampling profiler to record profiling data for C frames.
alwaysGeneratePCToCodeOriginMap
This will make sure we always generate a PCToCodeOriginMap for JITed code.
verifyHeap
numberOfGCCyclesToRecordForVerification
exceptionStackTraceLimit
Stack trace limit for internal Exception object
defaultErrorStackTraceLimit
The default value for Error.stackTraceLimit
useExceptionFuzz
fireExceptionFuzzAt
validateDFGExceptionHandling
Causes the DFG to emit code validating exception handling for each node that can exit
dumpSimulatedThrows
Dumps the call stack at each simulated throw for exception scope verification
validateExceptionChecks
Verifies that needed exception checks are performed.
unexpectedExceptionStackTraceLimit
Stack trace limit for debugging unexpected exceptions observed in the VM
useExecutableAllocationFuzz
fireExecutableAllocationFuzzAt
fireExecutableAllocationFuzzAtOrAfter
verboseExecutableAllocationFuzz
useOSRExitFuzz
fireOSRExitFuzzAtStatic
fireOSRExitFuzzAt
fireOSRExitFuzzAtOrAfter
logB3PhaseTimes
rareBlockPenalty
airLinearScanVerbose
airLinearScanSpillsEverything
airForceBriggsAllocator
airForceIRCAllocator
coalesceSpillSlots
logAirRegisterPressure
maxB3TailDupBlockSize
maxB3TailDupBlockSuccessors
useDollarVM
installs the $vm debugging tool in global objects
functionOverrides
file with debugging overrides for function bodies
useSigillCrashAnalyzer
logs data about SIGILL crashes
watchdog
watchdog timeout (0 = Disabled, N = a timeout period of N milliseconds)
usePollingTraps
use polling (instead of signalling) VM traps
useMachForExceptions
Use mach exceptions rather than signals to handle faults and pass thread messages. (This does nothing on platforms without mach)
useICStats
prototypeHitCountForLLIntCaching
Number of prototype property hits before caching a prototype in the LLInt. A count of 0 means never cache.
dumpModuleRecord
dumpModuleLoadingState
exposeInternalModuleLoader
expose the internal module loader object to the global space for debugging
useSuperSampler
reportLLIntStats
Reports LLInt statistics
llintStatsFile
File to collect LLInt statistics in
useSourceProviderCache
If false, the parser will not use the source provider cache. It's good to verify everything works when this is false. Because the cache is so successful, it can mask bugs.
useCodeCache
If false, the unlinked byte code cache will not be used.
useWebAssembly
Expose the WebAssembly global object.
failToCompileWebAssemblyCode
If true, no Wasm::Plan will sucessfully compile a function.
webAssemblyPartialCompileLimit
Limit on the number of bytes a Wasm::Plan::compile should attempt before checking for other work.
webAssemblyBBQOptimizationLevel
B3 Optimization level for BBQ Web Assembly module compilations.
webAssemblyOMGOptimizationLevel
B3 Optimization level for OMG Web Assembly module compilations.
useBBQTierUpChecks
Enables tier up checks for our BBQ code.
webAssemblyOMGTierUpCount
The countdown before we tier up a function to OMG.
webAssemblyLoopDecrement
The amount the tier up countdown is decremented on each loop backedge.
webAssemblyFunctionEntryDecrement
The amount the tier up countdown is decremented on each function entry.
useWebAssemblyFastMemory
If true, we will try to use a 32-bit address space with a signal handler to bounds check wasm memory.
webAssemblyFastMemoryRedzonePages
WebAssembly fast memories use 4GiB virtual allocations, plus a redzone (counted as multiple of 64KiB WebAssembly pages) at the end to catch reg+imm accesses which exceed 32-bit, anything beyond the redzone is explicitly bounds-checked
crashIfWebAssemblyCantFastMemory
If true, we will crash if we can't obtain fast memory for wasm.
webAssemblyFastMemoryPreallocateCount
WebAssembly fast memories can be pre-allocated at program startup and remain cached to avoid fragmentation leading to bounds-checked memory. This number is an upper bound on initial allocation as well as total count of fast memories. Zero means no pre-allocation, no caching, and no limit to the number of runtime allocations.
useWebAssemblyFastTLS
If true, we will try to use fast thread-local storage if available on the current platform.
useFastTLSForWasmContext
If true (and fast TLS is enabled), we will store context in fast TLS. If false, we will pin it to a register.
useCallICsForWebAssemblyToJSCalls
If true, we will use CallLinkInfo to inline cache Wasm to JS calls.
useObjectRestSpread
If true, we will enable Object Rest/Spread feature.
Overridden JSC options:
All JSC options:
All JSC options with descriptions:
'=' not found in option string: %p
Missing trailing '"' in option string: %p
Failed to set option : %s
enableFunctionDotArguments
enableTailCalls
showDisassembly
showDFGDisassembly
showFTLDisassembly
showAllDFGNodes
alwaysDoFullCollection
enableOSREntryToDFG
enableOSREntryToFTL
enableAccessInlining
enablePolyvariantDevirtualization
enablePolymorphicAccessInlining
enablePolymorphicCallInlining
enableMovHintRemoval
enableObjectAllocationSinking
enableConcurrentJIT
enableProfiler
enableArchitectureSpecificOptimizations
enablePolyvariantCallInlining
enablePolyvariantByIdInlining
enableMaximalFlushInsertionPhase
objectsAreImmortal
showObjectStatistics
dumpObjectStatistics
disableGC
enableExceptionFuzz
enableExecutableAllocationFuzz
enableOSRExitFuzz
enableDollarVM
enableWebAssembly
 (default: 
   ... 
INCOHERENT OPTIONS: at least one of useLLInt or useJIT must be true
verbose
JSC_
ERROR: invalid option: 
JSC_enableFunctionDotArguments
JSC_enableTailCalls
JSC_showDisassembly
JSC_showDFGDisassembly
JSC_showFTLDisassembly
JSC_showAllDFGNodes
JSC_alwaysDoFullCollection
JSC_enableOSREntryToDFG
JSC_enableOSREntryToFTL
JSC_enableAccessInlining
JSC_enablePolyvariantDevirtualization
JSC_enablePolymorphicAccessInlining
JSC_enablePolymorphicCallInlining
JSC_enableMovHintRemoval
JSC_enableObjectAllocationSinking
JSC_enableConcurrentJIT
JSC_enableProfiler
JSC_enableArchitectureSpecificOptimizations
JSC_enablePolyvariantCallInlining
JSC_enablePolyvariantByIdInlining
JSC_enableMaximalFlushInsertionPhase
JSC_objectsAreImmortal
JSC_showObjectStatistics
JSC_disableGC
JSC_enableTypeProfiler
JSC_enableControlFlowProfiler
JSC_enableExceptionFuzz
JSC_enableExecutableAllocationFuzz
JSC_enableOSRExitFuzz
JSC_enableDollarVM
JSC_enableWebAssembly
variable name
lexical variable name
Unexpected end of script
Incomplete unicode escape in identifier: '
Unterminated multiline comment
Unterminated numeric literal '
Unterminated string literal '
Invalid escape in identifier: '
Unexpected escaped characters in keyword tocken: '
Invalid unicode escape in identifier: '
Invalid numeric literal: '
Invalid use of octal: '
Invalid string literal: '
Unrecognized token '
Unexpected string literal 
Unexpected number '
Unexpected use of reserved word '
' in strict mode
Invalid private name '
Unexpected identifier '
Unexpected keyword '
Unexpected token '
Unparseable script
Cannot destructure to a parameter name '
Cannot declare a parameter named '
' as it shadows the name of a strict mode function
Cannot use the reserved word '
' as a 
parameter name
 in strict mode
Cannot use the keyword '
Cannot use 'let' as a 
Cannot use 'await' as a 
Cannot use 'yield' as a 
' in strict mode as it has already been declared
in strict mode
in an async function
in a module
in a generator function
 name
Expected an arrow function input parameter
Cannot parse parameters for this 
Expected a ')' or a ',' after a parameter declaration
Cannot parse parameter pattern
Expected an opening '(' before a 
's parameter list
getter functions must have no parameters
setter functions must have one parameter
Duplicate parameter '
' not allowed in function with non-simple parameter list
Expected a ')' after a parameter declaration
getter
setter
generator function
arrow function
async function
async method
async arrow function
Cannot use 'await' as a parameter name in an async function
Rest parameter should be the last parameter in a function declaration
' not allowed in function with default parameter values
' not allowed in function with destructuring parameters
' not allowed in function with a rest parameter
' not allowed in an arrow function
' not allowed in a method
Stack exhausted
Cannot parse this destructuring pattern
Expected a closing ']' following a rest element destructuring pattern
Expected either a closing ']' or a ',' following an element destructuring pattern
Cannot use 'let' as an identifier name for a LexicalDeclaration
Cannot modify '
Cannot parse computed property name
Expected ']' to end end a computed property name
Expected a property name
Cannot use abbreviated destructuring syntax for reserved name '
Cannot use abbreviated destructuring syntax for keyword '
Expected a ':' prior to a named destructuring property
Expected a closing '}' following a rest element destructuring pattern
Expected either a closing '}' or an ',' after a property destructuring pattern
Expected a parameter pattern or a ')' in parameter list
Invalid destructuring assignment target
Cannot use new with 
new.target is only valid inside functions
new.target is not valid inside arrow functions in global code
"new." can only followed with target
super is not valid in this context
import call expects exactly one argument
Cannot parse expression
Cannot parse base expression
Cannot parse subscript expression
Expected '
' to 
subscript expression
Cannot parse call arguments
Expected a property name after '.'
Cannot use super as tag for tagged templates
Cannot parse template literal
compound expression
Cannot use await expression within parameters
Invalid regular expression
Cannot parse function expression
Expected a '=>' after arrow function parameter declaration
Cannot declare function named 'await' 
Cannot declare async function named 'await'
Cannot declare generator function named 'yield'
' is not a valid 
 name in strict mode
Function statements must have a name
Async function statements must have a name
Expected an opening '{' at the start of a 
 body
Cannot parse the body of this 
' is not a valid function name in strict mode
Expected a closing '}' after a 
Cannot parse body of this arrow function
Cannot parse body of this function
Cannot parse the arrow function expression
Cannot name a function 'arguments' in strict mode
Cannot name a function 'eval' in strict mode
Cannot declare a variable named 'arguments' in strict mode
Cannot declare a variable named 'eval' in strict mode
'use strict' directive not allowed inside a function with a non-simple parameter list
Invalid parameters or function name in strict mode
Expected ';' after variable declaration
Cannot declare a variable named 
Cannot declare a let variable twice: '
Cannot declare a const variable twice: '
Cannot declare a var variable that shadows a let/const/class variable: '
Cannot export a duplicate name '
Expected expression as the intializer for the variable '
const declared variable '
 must have an initializer
Expected an initializer in destructuring variable declaration
Cannot parse expression statement
Cannot use 'await' as a label 
Cannot use 'yield' as a label 
Labels must be followed by a ':'
Attempted to redeclare the label '
Cannot find scope for the label '
Cannot parse statement
Failed to parse class
Cannot declare a class twice: '
Cannot export a duplicate class name: '
' is not a valid class name
Class statements must have a name
class name
Cannot parse the parent class name
Expected opening '{' at the start of a class body
computed property name
Cannot parse this method
Cannot declare an async method named 'prototype'
Cannot declare an async method named 'constructor'
Cannot declare a generator named 'prototype'
Cannot declare a generator named 'constructor'
Cannot declare multiple constructors in a single class
Cannot declare a static method named 'prototype'
Cannot declare a getter or setter named 'constructor'
Expected a parameter list for getter definition
Cannot parse getter definition
Expected a parameter list for setter definition
Cannot parse setter definition
Cannot parse this function
Cannot declare a function named '
Cannot declare a function that shadows a let/const/class/function variable '
Cannot export a duplicate function name: '
Cannot parse this async function
Cannot declare an async function named '
Cannot declare an async function that shadows a let/const/class/function variable '
Cannot parse the body of the block statement
Expected a closing '}' at the end of a block statement
Function declarations are only allowed inside blocks or switch statements in strict mode
Function declarations are only allowed inside block statements or at the top level of a program
Expected valid function statement after 'function' keyword
 an 
'if' condition
Expected a expression as the condition for an if statement
Expected a statement as the body of an if block
Expected a statement as the body of an else block
Expected a statement following 'do'
do-while loop
do-while loop condition
Must provide an expression as a do-while loop condition
Unable to parse do-while loop condition
while loop condition
Must provide an expression as a while loop condition
Unable to parse while loop condition
Expected a statement as the body of a while loop
for-loop header
can only declare a single variable in an enumeration
Expected either 'in' or 'of' in enumeration syntax
Cannot assign to the loop variable inside a for-of loop header
Cannot assign to the loop variable inside a for-in loop header
Expected expression to enumerate
for-of header
for-in header
Expected statement as body of for-
 statement
Cannot parse for loop declarations
const variables in for loops must have initializers
Cannot parse for loop condition expression
Expected a ';' after the for loop condition expression
Cannot parse for loop iteration expression
Expected a statement as the body of a for loop
Expected a reference on the left hand side of an enumeration statement
Cannot parse subject for-
Expected a statement as the body of a for-
loop
'continue' is only valid inside a loop statement
Expected an identifier as the target for a continue statement
Cannot use the undeclared label '
Cannot continue to the label '
' as it is not targeting a loop
Expected a ';' following a targeted continue statement
'break' is only valid inside a switch or loop statement
Expected an identifier as the target for a break statement
Expected a ';' following a targeted break statement
Return statements are only valid inside functions
Cannot parse the return expression
Expected a ';' following a return statement
'with' statements are not valid in strict mode
subject of a 'with' statement
Cannot parse 'with' subject expression
A 'with' statement must have a body
subject of a 'switch'
Cannot parse switch subject expression
body of a 'switch'
Cannot parse switch clause
Expected a ':' after switch clause expression
Cannot parse the body of a switch clause
Cannot parse switch case expression
Expected a ':' after switch default clause
Cannot parse the body of a switch default clause
Expected expression after 'throw'
Cannot have a newline after 'throw'
Cannot parse expression for throw statement
Expected a ';' after a throw statement
Expected a block statement as body of a try statement
Cannot parse the body of try block
'catch' target
Cannot declare a catch variable named '
Expected exception handler to be a block statement
Unable to parse 'catch' block
Expected block statement for finally body
Cannot parse finally body
Try statements must have at least a catch or finally block
Debugger keyword must be followed by a ';'
'class' declaration is not directly within a block statement
Parse error
Expected opening '{' at the start of an object literal
Cannot parse object literal property
object literal
Cannot parse expression for property declaration
Expected a parenthesis for argument list
Expected an identifier as property name
shorthand property name
Expected a property name following keyword 'async'
Expected a ':' following the property name '
Expected ':' after property name
Cannot parse assignment pattern
Expected '=' following assignment pattern
Left hand side of operator '
' must be a reference
new.target can't be the left hand side of an assignment expression
Cannot modify 'eval' in strict mode
Cannot modify 'arguments' in strict mode
Cannot parse the right hand side of an assignment expression
Cannot use yield expression out of generator
Cannot use yield expression within parameters
Cannot parse left hand side of ternary operator
Expected ':' in ternary operator
Cannot parse right hand side of ternary operator
Amiguous unary expression in the left hand side of the exponentiation expression; parenthesis must be used to disambiguate the expression
The 
 operator requires a reference expression
Cannot parse subexpression of 
operator
Cannot parse member expression
new.target can't come after a prefix operator
new.target can't come before a postfix operator
' cannot be modified in strict mode
Cannot delete unqualified property '
Failed to parse await expression
prefix-decrement
decrement
prefix-increment
increment
logical-not
bitwise-not
Cannot parse arrow function expression
Cannot parse subject of a spread operation
Cannot parse array literal element
Expected either a closing ']' or a ',' following an array element
The '...' operator should come before a target expression
Cannot parse async function expression
Cannot parse expression in a comma expression
Expected opening '(' at start of argument list
Cannot parse function argument
The '...' operator should come before the target expression
argument list
Cannot parse head template element
Template literal expression cannot be empty
Cannot parse expression in template literal
Cannot parse template element
Expected a closing '}' following an expression in template literal
Expected an template element
Expected a binding element
Cannot declare a variable named '
Cannot destructure to a variable named '
Cannot declare a lexical variable twice: '
catch parameter name
expression name
Cannot parse the body of async arrow function
Cannot parse the body of async function
Exported binding '
' needs to refer to a top-level declared variable
Expected 'from' before exported module name
Cannot parse the 'from' clause
Expected a ';' following a targeted export declaration
Only one 'default' export is allowed
Cannot parse the declaration
Expected a variable name for the export declaration
Cannot parse the named export
export list
Cannot use keyword as exported variable name
Expected 'function' keyword following 'async' keyword with no preceding line terminator
Expected either a declaration or a variable statement
Imported modules names must be string literals
Expected an exported name for the export declaration
Cannot parse the module name
Expected a ';' following a targeted import declaration
Cannot parse the default import
Cannot parse the namespace import
Expected an imported name for the import declaration
Cannot parse the named import
import list
Expected namespace import or import list
Expected 'from' before imported module name
Expected 'as' before imported binding name
Expected a variable name for the import declaration
Cannot use 'await' as an imported binding name
Cannot use keyword as imported binding name
Cannot declare an imported binding named 
Cannot declare an imported binding name twice: '
Cannot parse the body of a generator
Access stub for 
 with return point 
Transition
Replace
Miss
Getter
Setter
CustomValueGetter
CustomAccessorGetter
CustomValueSetter
CustomAccessorSetter
IntrinsicGetter
InHit
InMiss
StringLength
DirectArgumentsLength
ScopedArgumentsLength
ModuleNamespaceLoad
Primordial
Committed
Generated
Unlinking polymorphic call at 
Clearing call link info for polymorphic call at 
<variant = 
, codeBlock = 
Linking polymorphic call in 
FTLForOSREntry
NotJettisoned
WeakReference
DebuggerBreakpoint
DebuggerStepping
BaselineLoopReoptimizationTrigger
BaselineLoopReoptimizationTriggerOnOSREntryFail
OSRExit
ProfiledWatchpoint
UnprofiledWatchpoint
JettisonDueToOldAge
JettisonDueToVMTraps
ProgramCodeBlock
ProgramExecutable
Proxy is not allowed in the global prototype chain.
Can't create duplicate variable: '
Can't create duplicate variable that shadows a global property: '
 of 
 with attributes 
 with prototype 
Presence
Absence
Equivalence
PropertyTable
revocable
Proxy.revocable needs to be called with two arguments: the target and the handler
revoke
Proxy.revocable cannot be constructed. It can only be called
new.target of Proxy construct should not be undefined
A Proxy's 'target' should be an Object
If a Proxy's handler is another Proxy object, the other Proxy should not have been revoked
A Proxy's 'handler' should be an Object
'getOwnPropertyDescriptor' property of a Proxy's handler should be callable
result of 'getOwnPropertyDescriptor' call should either be an Object or undefined
When the result of 'getOwnPropertyDescriptor' is undefined the target must be configurable
When 'getOwnPropertyDescriptor' returns undefined, the 'target' of a Proxy should be extensible
Result from 'getOwnPropertyDescriptor' fails the IsCompatiblePropertyDescriptor test
Result from 'getOwnPropertyDescriptor' can't be non-configurable when the 'target' doesn't have it as an own property or if it is a configurable own property on 'target'
'has' property of a Proxy's handler should be callable
Proxy 'has' must return 'true' for non-configurable properties
Proxy 'has' must return 'true' for a non-extensible 'target' object with a configurable property
'preventExtensions' property of a Proxy's handler should be callable
Proxy's 'preventExtensions' trap returned true even though its target is extensible. It should have returned false
'isExtensible' property of a Proxy's handler should be callable
Proxy object's 'isExtensible' trap returned false when the target is extensible. It should have returned true
Proxy object's 'isExtensible' trap returned true when the target is non-extensible. It should have returned false
'defineProperty' property of a Proxy's handler should be callable
Proxy's 'defineProperty' trap returned true even though getOwnPropertyDescriptor of the Proxy's target returned undefined and the target is non-extensible
Proxy's 'defineProperty' trap returned true for a non-configurable field even though getOwnPropertyDescriptor of the Proxy's target returned undefined
Proxy's 'defineProperty' trap did not define a property on its target that is compatible with the trap's input descriptor
Proxy's 'defineProperty' trap did not define a non-configurable property on its target even though the input descriptor to the trap said it must do so
'ownKeys' property of a Proxy's handler should be callable
Proxy handler's 'ownKeys' method must return an array-like object containing only Strings and Symbols
Proxy object's 'target' has the non-configurable property '
' that was not in the result from the 'ownKeys' trap
Proxy object's non-extensible 'target' has configurable property '
Proxy handler's 'ownKeys' method returned a key that was not present in its non-extensible target
'setPrototypeOf' property of a Proxy's handler should be callable
Proxy 'setPrototypeOf' returned false indicating it could not set the prototype value. The operation was expected to succeed
Proxy 'setPrototypeOf' trap returned true when its target is non-extensible and the new prototype value is not the same as the current prototype value. It should have returned false
'getPrototypeOf' property of a Proxy's handler should be callable
Proxy handler's 'getPrototypeOf' trap should either return an object or null
Proxy's 'getPrototypeOf' trap for a non-extensible target should return the same value as the target's prototype
'get' property of a Proxy's handler object should be callable
Proxy handler's 'get' result of a non-configurable and non-writable property should be the same value as the target's property
Proxy handler's 'get' result of a non-configurable accessor property without a getter should be undefined
Proxy has already been revoked. No more operations are allowed to be performed on it
'apply' property of a Proxy's handler should be callable
'construct' property of a Proxy's handler should be constructible
Result from Proxy handler's 'construct' method should be an object
'set' property of a Proxy's handler should be callable
Proxy handler's 'set' on a non-configurable and non-writable property on 'target' should either return false or be the same value already on the 'target'
Proxy handler's 'set' method on a non-configurable accessor property without a setter should return false
'deleteProperty' property of a Proxy's handler should be callable
Proxy handler's 'deleteProperty' method should return false when the target's property is not configurable
ProxyRevoke
IsDirect
<Replace: 
<Transition: 
], offset = 
<Setter: 
Reflect.construct requires the first argument be a constructor
Reflect.construct requires the third argument be a constructor if present
Reflect.construct requires the second argument be an object
This error must not be raised
Reflect.defineProperty requires the first argument be an object
Reflect.get requires the first argument be an object
Reflect.getPrototypeOf requires the first argument be an object
Reflect.isExtensible requires the first argument be an object
Reflect.preventExtensions requires the first argument be an object
Reflect.set requires the first argument be an object
Reflect.setPrototypeOf requires the first argument be an object
Reflect.setPrototypeOf requires the second argument be either an object or null
Reflect.getOwnPropertyDescriptor requires the first argument be an object
Reflect.ownKeys requires the first argument be an object
lastMatch
lastParen
leftContext
rightContext
Invalid flags supplied to RegExp constructor.
[Symbol.match]
[Symbol.replace]
[Symbol.search]
[Symbol.split]
Builtin RegExp exec can only be called on a RegExp object
Cannot supply flags when constructing one RegExp from another.
The RegExp.prototype.global getter can only be called on a RegExp object
The RegExp.prototype.ignoreCase getter can only be called on a RegExp object
The RegExp.prototype.multiline getter can only be called on a RegExp object
The RegExp.prototype.sticky getter can only be called on a RegExp object
The RegExp.prototype.unicode getter can only be called on a RegExp object
The RegExp.prototype.flags getter can only be called on an object
(?:)
The RegExp.prototype.source getter can only be called on a RegExp object
u2028
u2029
v8@?0
com.apple.JavaScriptCore.remote-inspector-xpc
WIRPageIdentifierKey
WIRAutomaticInspectionCandidateMessage
WIRRawDataKey
WIRConnectionIdentifierKey
WIRDestinationKey
WIRRawDataMessage
com.apple.webinspectord.available
v12@?0i8
com.apple.webinspectord.availability_check
com.apple.webinspector
WIRPermissionDenied
WIRSocketDataMessage
WIRSocketSetupMessage
WIRWebPageCloseMessage
WIRApplicationGetListingMessage
WIRIndicateMessage
WIRProxyApplicationSetupMessage
WIRConnectionDiedMessage
WIRAutomaticInspectionConfigurationMessage
WIRAutomaticInspectionRejectMessage
WIRAutomationSessionRequestMessage
Unrecognized RemoteInspector XPC Message: %@
WIRTitleKey
WIRTypeJavaScript
WIRTypeKey
WIRURLKey
WIRTypeWeb
WIRHasLocalDebuggerKey
WIRSessionIdentifierKey
WIRTypeAutomation
WIRAutomationTargetIsPairedKey
WIRListingKey
WIRRemoteAutomationEnabledKey
WIRListingMessage
WIRSenderKey
WIRAutomaticallyPause
WIRSocketDataKey
WIRIndicateEnabledKey
WIRProxyApplicationSetupResponseMessage
WIRProxyApplicationParentPID
WIRProxyApplicationParentAuditData
WIRAutomaticInspectionEnabledKey
mach-lookup
com.apple.webinspectord.automatic_inspection_enabled
v16@?0@"NSObject<OS_xpc_object>"8
msgData
messageName
userInfo
Linking call in 
, entrypoint at 
Unlinking call at 
Linking virtual call at 
Polymorphic call stub for %s, return point %p, targets %s
jsc.sampling-profiler.thread
couldn't get a name
(host)
(program)
(module)
(anonymous function)
(eval)
JSCSampilingProfile-
.txt
Sampling rate: 
 microseconds
Top functions as <numSamples  'functionName:sourceID'>
%6zu 
   '
 <-- 
Hottest bytecodes as <numSamples   'functionName#hash:JITType:bytecodeIndex'>
<nil>
ScopedArgumentsTable
scopeInvalid
scope
[object Proxy]
ScriptExecutable
installCode
Installing 
Forced Failure
Cannot call SetIterator.next() on a non-SetIterator object
Set operation called on non-Set object
Cannot create a Set value iterator for a non-Set object.
Cannot create a Set entry iterator for a non-Set object.
BEGIN SIGILL analysis
ERROR: Unable to analyze SIGILL. Timed out while waiting to iterate VMs.
ERROR: Timed out: not able to determine if pc %p is in valid JIT executable memory
pc %p is NOT in valid JIT executable memory
pc %p is in valid JIT executable memory
ERROR: Timed out: not able to determine if pc %p is in a valid CodeBlock
The current thread does not own any VM JSLock
machine PC %p does not belong to any CodeBlock in the currently entered VM
pc %p belongs to CodeBlock %p of type %s
END SIGILL analysis
Register rax: %p
Register rbx: %p
Register rcx: %p
Register rdx: %p
Register rdi: %p
Register rsi: %p
Register rbp: %p
Register rsp: %p
Register r8: %p
Register r9: %p
Register r10: %p
Register r11: %p
Register r12: %p
Register r13: %p
Register r14: %p
Register r15: %p
Register rip: %p
Register rflags: %p
Register cs: %p
Register fs: %p
Register gs: %p
FATAL: attempting to drain when not in parallel mode.
FATAL: Attempting to donate when not in parallel mode.
GC visit race: 
Collector: [
], Mutator: [
GC scan found corrupt object: structureID is zero!
GC scan found object in bad state: structureID is nuked!
GC scan found corrupt object: structureID is out of bounds!
GC type: 
Object at: 
Structure ID: 
 (0x
Structure ID table size: 
Object contents:
0x%016llx
Is marked: 
Is newly allocated: 
Block: 
Is marked raw: 
Marking version: 
Heap marking version: 
Is newly allocated raw: 
Newly allocated version: 
Heap newly allocated version: 
[object Null]
[object Undefined]
%.0lf
%.3lf
SparseArrayValueMap
OtherCell
OtherObj
Final
Float32array
MapObject
SetObject
StringVar
BoolInt32
NonBoolInt32
BytecodeDouble
AnyIntAsDouble
NonIntAsdouble
DoublePureNan
DoubleImpureNan
Bool
<Final>
<Array>
<StringIdent>
<String>
<Function>
<Int8array>
<Int16array>
<Int32array>
<Uint8array>
<Uint16array>
<Uint32array>
<Float32array>
<Float64array>
<DirectArguments>
<ScopedArguments>
<StringObject>
<RegExpObject>
<StringOrStringObject>
<Object>
<Cell>
<BoolInt32>
<Int32>
<AnyIntAsDouble>
<AnyInt>
<Number>
<Boolean>
<Other>
<Misc>
[wasm code]
wasm function
wasm function: 
frame 0x0
frame 
name: 
sourceURL: 
isInlinedFrame: 
InlineCallFrame: 
callee: 
returnPC: 
callerFrame: 
rawLocationBits: 
codeBlock: 
bytecodeOffset: 
hasCodeOrigins: 
callSiteIndex: 
jitCode: 
 start 
 end 
line: 
column: 
vmEntryFrame: 
kb h=
fromCodePoint
Arguments contain a value that is out of range of code points
charAt
codePointAt
substr
substring
toLowerCase
toUpperCase
toLocaleLowerCase
toLocaleUpperCase
trim
trimLeft
trimRight
startsWith
endsWith
normalize
Argument to String.prototype.startsWith cannot be a RegExp
Argument to String.prototype.endsWith cannot be a RegExp
Argument to String.prototype.includes cannot be a RegExp
NFKC
NFKD
argument does not match any normalization form
Structure
Did cache property replacement
Structure transition from 
, Proto:
, Has been dictionary
, Dictionary
, UncacheableDictionary
, Leaf
, Shady leaf
Structures:
Detected in materializePropertyTable.
Found structure = 
structures = 
StructureChain
StructureRareData
Clearing structure cache (kind 
) in 
FATAL: attampting to allocate small object using large allocation.
Requested allocation size: 
JSC Super Sampler
Percent time behind super sampler flag: 
WARNING: Super sampler undercount detected!
Cannot convert a symbol to a number
Symbol(
hasInstance
isConcatSpreadable
species
toPrimitive
toStringTag
unscopables
keyFor
Symbol.keyFor requires that the first argument be a symbol
Symbol.prototype.toString requires that |this| be a symbol or a symbol object
Symbol.prototype.valueOf requires that |this| be a symbol or a symbol object
SymbolTable
Throw exception from call slow path thunk
Link call slow path thunk
Link polymorphic call slow path thunk
Virtual %s slow path thunk
tail call
fixup arity
Specialized thunk for bound function calls with no arguments
native %s%s trampoline
Tail With Saved Tags 
Tail Without Saved Tags 
Specialized thunk for %s
BeforeGC
BeforeMarking
AfterMarking
AfterGC
END 
Verifying heap in [p
] vm 
 GC @ 
    cell 
 is ZAPPED
 is zapped
 has NULL structureID
 is from a different VM: expected:
 actual:
 with structureID 
 maps to a NULL Structure pointer
 has ZAPPED structure 
 has structure 
 whose structureID is NULL
 from a different VM: expected:
 NOT found in the live cell list
 has DEAD structure 
 with a NULL structureID
 whose structure is NULL
 whose structure 
 has a NULL structureID
 is NOT found in the live cell list
 is DEAD
CodeBlock 
 has ZAPPED ValueProfile cell 
FOUND
 LIVE
 DEAD
 HeapCell 
 JSCell 
 structure:
 butterfly:
 (base:
 in 
 GC[
] in '
' list in VM 
 recorded at time 
Checking 
 GC<
>, cycle [
Cycle [
' list: 
cell NOT found
cell 
 NOT FOUND
ERROR: Timed out while waiting to iterate VMs.
Before Marking
After Marking
 @ phase 
: FAILED in cell list '
' (size 
Search for cell 
 in VM 
Conflicted
ClearedByGC
Found untracked reference: 
All tracked references: 
NotTypedArray
TypeInt8
TypeInt16
TypeInt32
TypeUint8
TypeUint8Clamped
TypeUint16
TypeUint32
TypeFloat32
TypeFloat64
TypeDataView
[Start, End]::[%u, %u]
[Entry IS in System]
[Entry IS NOT in system]
[Return Statement]
[Normal Statement]
#Local#
#Global#
"globalTypeSet":
"instructionTypeSet":
"isOverflown":
(Unreached Statement)
Function 
Undefined 
Null 
Boolean 
AnyInt 
Number 
String 
Object 
Symbol 
Structures:[ 
Least Common Ancestor: 
Function?
Boolean?
Integer?
Number?
String?
Symbol?
Object?
(many)
"displayTypeName":
"primitiveTypeNames":
"Undefined"
"Null"
"Boolean"
"Integer"
"Number"
"String"
"Symbol"
"structures":
__proto__ [
"constructorName":
"isInDictionaryMode":
"fields":
"optionalFields":
"proto":
fields
optionalFields
constructorName
isImprecise
prototypeStructure
isFunction
isSymbol
opctbl
/reg
/mod
/vendor
/3dnow
/sse
/vex
/vexl
/vexw
/x87
addpd
addps
addsd
addss
addsubpd
addsubps
aesdec
aesdeclast
aesenc
aesenclast
aesimc
aeskeygenassist
andnpd
andnps
andpd
andps
arpl
blendpd
blendps
blendvpd
blendvps
bound
bswap
cdqe
clflush
clgi
clts
cmova
cmovae
cmovb
cmovbe
cmovg
cmovge
cmovl
cmovle
cmovno
cmovnp
cmovns
cmovnz
cmovo
cmovp
cmovs
cmovz
cmppd
cmpps
cmpsb
cmpsd
cmpsq
cmpss
cmpsw
cmpxchg
cmpxchg16b
cmpxchg8b
comisd
comiss
cpuid
crc32
cvtdq2pd
cvtdq2ps
cvtpd2dq
cvtpd2pi
cvtpd2ps
cvtpi2pd
cvtpi2ps
cvtps2dq
cvtps2pd
cvtps2pi
cvtsd2si
cvtsd2ss
cvtsi2sd
cvtsi2ss
cvtss2sd
cvtss2si
cvttpd2dq
cvttpd2pi
cvttps2dq
cvttps2pi
cvttsd2si
cvttss2si
cwde
divpd
divps
divsd
divss
dppd
dpps
emms
extractps
f2xm1
fabs
fadd
faddp
fbld
fbstp
fchs
fclex
fcmovb
fcmovbe
fcmove
fcmovnb
fcmovnbe
fcmovne
fcmovnu
fcmovu
fcom
fcom2
fcomi
fcomip
fcomp
fcomp3
fcomp5
fcompp
fcos
fdecstp
fdiv
fdivp
fdivr
fdivrp
femms
ffree
ffreep
fiadd
ficom
ficomp
fidiv
fidivr
fild
fimul
fincstp
fist
fistp
fisttp
fisub
fisubr
fld1
fldcw
fldenv
fldl2e
fldl2t
fldlg2
fldln2
fldpi
fldz
fmul
fmulp
fndisi
fneni
fninit
fnop
fnsave
fnsetpm
fnstcw
fnstenv
fnstsw
fpatan
fprem
fprem1
fptan
frndint
frstor
frstpm
fscale
fsin
fsincos
fsqrt
fstp
fstp1
fstp8
fstp9
fsub
fsubp
fsubr
fsubrp
ftst
fucom
fucomi
fucomip
fucomp
fucompp
fxam
fxch
fxch4
fxch7
fxrstor
fxsave
fxtract
fyl2x
fyl2xp1
getsec
haddpd
haddps
hsubpd
hsubps
idiv
insb
insd
insertps
insw
int1
int3
into
invd
invept
invlpg
invlpga
invvpid
iretd
iretq
iretw
jcxz
jecxz
jrcxz
lahf
lddqu
ldmxcsr
leave
lfence
lgdt
lidt
lldt
lmsw
lock
lodsb
lodsd
lodsq
lodsw
loope
loopne
maskmovdqu
maskmovq
maxpd
maxps
maxsd
maxss
mfence
minpd
minps
minsd
minss
monitor
montmul
movapd
movaps
movbe
movd
movddup
movdq2q
movdqa
movdqu
movhlps
movhpd
movhps
movlhps
movlpd
movlps
movmskpd
movmskps
movntdq
movntdqa
movnti
movntpd
movntps
movntq
movq
movq2dq
movsb
movsd
movshdup
movsldup
movsq
movss
movsw
movsx
movsxd
movupd
movups
movzx
mpsadbw
mulpd
mulps
mulsd
mulss
mwait
orpd
orps
outsb
outsd
outsw
pabsb
pabsd
pabsw
packssdw
packsswb
packusdw
packuswb
paddb
paddd
paddq
paddsb
paddsw
paddusb
paddusw
paddw
palignr
pand
pandn
pavgb
pavgusb
pavgw
pblendvb
pblendw
pclmulqdq
pcmpeqb
pcmpeqd
pcmpeqq
pcmpeqw
pcmpestri
pcmpestrm
pcmpgtb
pcmpgtd
pcmpgtq
pcmpgtw
pcmpistri
pcmpistrm
pextrb
pextrd
pextrq
pextrw
pf2id
pf2iw
pfacc
pfadd
pfcmpeq
pfcmpge
pfcmpgt
pfmax
pfmin
pfmul
pfnacc
pfpnacc
pfrcp
pfrcpit1
pfrcpit2
pfrsqit1
pfrsqrt
pfsub
pfsubr
phaddd
phaddsw
phaddw
phminposuw
phsubd
phsubsw
phsubw
pi2fd
pi2fw
pinsrb
pinsrd
pinsrq
pinsrw
pmaddubsw
pmaddwd
pmaxsb
pmaxsd
pmaxsw
pmaxub
pmaxud
pmaxuw
pminsb
pminsd
pminsw
pminub
pminud
pminuw
pmovmskb
pmovsxbd
pmovsxbq
pmovsxbw
pmovsxdq
pmovsxwd
pmovsxwq
pmovzxbd
pmovzxbq
pmovzxbw
pmovzxdq
pmovzxwd
pmovzxwq
pmuldq
pmulhrsw
pmulhrw
pmulhuw
pmulhw
pmulld
pmullw
pmuludq
popa
popad
popcnt
popfd
popfq
popfw
prefetch
prefetchnta
prefetcht0
prefetcht1
prefetcht2
psadbw
pshufb
pshufd
pshufhw
pshuflw
pshufw
psignb
psignd
psignw
pslld
pslldq
psllq
psllw
psrad
psraw
psrld
psrldq
psrlq
psrlw
psubb
psubd
psubq
psubsb
psubsw
psubusb
psubusw
psubw
pswapd
ptest
punpckhbw
punpckhdq
punpckhqdq
punpckhwd
punpcklbw
punpckldq
punpcklqdq
punpcklwd
pusha
pushad
pushfd
pushfq
pushfw
pxor
rcpps
rcpss
rdmsr
rdpmc
rdrand
rdtsc
rdtscp
repne
retf
roundpd
roundps
roundsd
roundss
rsqrtps
rsqrtss
sahf
salc
scasb
scasd
scasq
scasw
seta
setae
setb
setbe
setg
setge
setl
setle
setno
setnp
setns
setnz
seto
setp
sets
setz
sfence
sgdt
shld
shrd
shufpd
shufps
sidt
skinit
sldt
smsw
sqrtpd
sqrtps
sqrtsd
sqrtss
stgi
stmxcsr
stosb
stosd
stosq
stosw
subpd
subps
subsd
subss
swapgs
syscall
sysenter
sysexit
sysret
ucomisd
ucomiss
unpckhpd
unpckhps
unpcklpd
unpcklps
vaddpd
vaddps
vaddsd
vaddss
vaddsubpd
vaddsubps
vaesdec
vaesdeclast
vaesenc
vaesenclast
vaesimc
vaeskeygenassist
vandnpd
vandnps
vandpd
vandps
vblendpd
vblendps
vblendvpd
vblendvps
vbroadcastsd
vbroadcastss
vcmppd
vcmpps
vcmpsd
vcmpss
vcomisd
vcomiss
vcvtdq2pd
vcvtdq2ps
vcvtpd2dq
vcvtpd2ps
vcvtps2dq
vcvtps2pd
vcvtsd2si
vcvtsd2ss
vcvtsi2sd
vcvtsi2ss
vcvtss2sd
vcvtss2si
vcvttpd2dq
vcvttps2dq
vcvttsd2si
vcvttss2si
vdivpd
vdivps
vdivsd
vdivss
vdppd
vdpps
verr
verw
vextractf128
vextractps
vhaddpd
vhaddps
vhsubpd
vhsubps
vinsertf128
vinsertps
vlddqu
vmaskmovdqu
vmaskmovpd
vmaskmovps
vmaxpd
vmaxps
vmaxsd
vmaxss
vmcall
vmclear
vminpd
vminps
vminsd
vminss
vmlaunch
vmload
vmmcall
vmovapd
vmovaps
vmovd
vmovddup
vmovdqa
vmovdqu
vmovhlps
vmovhpd
vmovhps
vmovlhps
vmovlpd
vmovlps
vmovmskpd
vmovmskps
vmovntdq
vmovntdqa
vmovntpd
vmovntps
vmovq
vmovsd
vmovshdup
vmovsldup
vmovss
vmovupd
vmovups
vmpsadbw
vmptrld
vmptrst
vmread
vmresume
vmrun
vmsave
vmulpd
vmulps
vmulsd
vmulss
vmwrite
vmxoff
vmxon
vorpd
vorps
vpabsb
vpabsd
vpabsw
vpackssdw
vpacksswb
vpackusdw
vpackuswb
vpaddb
vpaddd
vpaddq
vpaddsb
vpaddsw
vpaddusb
vpaddusw
vpaddw
vpalignr
vpand
vpandn
vpavgb
vpavgw
vpblendvb
vpblendw
vpclmulqdq
vpcmpeqb
vpcmpeqd
vpcmpeqq
vpcmpeqw
vpcmpestri
vpcmpestrm
vpcmpgtb
vpcmpgtd
vpcmpgtq
vpcmpgtw
vpcmpistri
vpcmpistrm
vperm2f128
vpermilpd
vpermilps
vpextrb
vpextrd
vpextrq
vpextrw
vphaddd
vphaddsw
vphaddw
vphminposuw
vphsubd
vphsubsw
vphsubw
vpinsrb
vpinsrd
vpinsrq
vpinsrw
vpmaddubsw
vpmaddwd
vpmaxsb
vpmaxsd
vpmaxsw
vpmaxub
vpmaxud
vpmaxuw
vpminsb
vpminsd
vpminsw
vpminub
vpminud
vpminuw
vpmovmskb
vpmovsxbd
vpmovsxbq
vpmovsxbw
vpmovsxwd
vpmovsxwq
vpmovzxbd
vpmovzxbq
vpmovzxbw
vpmovzxdq
vpmovzxwd
vpmovzxwq
vpmuldq
vpmulhrsw
vpmulhuw
vpmulhw
vpmulld
vpmullw
vpor
vpsadbw
vpshufb
vpshufd
vpshufhw
vpshuflw
vpsignb
vpsignd
vpsignw
vpslld
vpslldq
vpsllq
vpsllw
vpsrad
vpsraw
vpsrld
vpsrldq
vpsrlq
vpsrlw
vpsubb
vpsubd
vpsubq
vpsubsb
vpsubsw
vpsubusb
vpsubusw
vpsubw
vptest
vpunpckhbw
vpunpckhdq
vpunpckhqdq
vpunpckhwd
vpunpcklbw
vpunpckldq
vpunpcklqdq
vpunpcklwd
vpxor
vrcpps
vrcpss
vroundpd
vroundps
vroundsd
vroundss
vrsqrtps
vrsqrtss
vshufpd
vshufps
vsqrtpd
vsqrtps
vsqrtsd
vsqrtss
vstmxcsr
vsubpd
vsubps
vsubsd
vsubss
vtestpd
vtestps
vucomisd
vucomiss
vunpckhpd
vunpckhps
vunpcklpd
vunpcklps
vxorpd
vxorps
vzeroall
vzeroupper
wbinvd
wrmsr
xadd
xchg
xcryptcbc
xcryptcfb
xcryptctr
xcryptecb
xcryptofb
xgetbv
xlatb
xorpd
xorps
xrstor
xsave
xsetbv
xsha1
xsha256
xstore
invalid
3dnow
o32 
o16 
a32 
a16 
lock 
rep 
repe 
repne 
lret 
.byte 0x%x
$0x%x
%%%s
%%%s:
(%%%s
$0x%x, $0x%x
r10b
r11b
r12b
r13b
r14b
r15b
r10w
r11w
r12w
r13w
r14w
r15w
r10d
r11d
r12d
r13d
r14d
r15d
cr10
cr11
cr12
cr13
cr14
cr15
dr10
dr11
dr12
dr13
dr14
dr15
ymm0
ymm1
ymm2
ymm3
ymm4
ymm5
ymm6
ymm7
ymm8
ymm9
ymm10
ymm11
ymm12
ymm13
ymm14
ymm15
%s%+lld
0x%llx
-0x%llx
%s0x%llx
0x%lx
%s%16s: %s
UnlinkedCodeBlock
UnlinkedEvalCodeBlock
UnlinkedFunctionCodeBlock
UnlinkedFunctionExecutable
UnlinkedModuleProgramCodeBlock
UnlinkedProgramCodeBlock
int32(
int52(
strictInt52(
bool(
cell(
double(
*int32(
*int52(
*strictInt52(
*double(
*cell(
*bool(
DirectArguments(
ClonedArguments(
Write to 
Scope
DirectArgument
head
Destructible JSCell
JSString
JSDestructibleObject
JSSegmentedVariableObjectSpace
JSC_PROFILER_PATH
JSCProfile-
.json
Throwing exception in call frame 
Sanitizing stack with top call frame at 
, current stack pointer at 
, in 
 and last code origin = 
Impure property added
VM Dump Types
JavaScriptCoreUseJIT
jsc.watchdog.queue
customSlotBase = 
callLinkInfo = 
customAccessor = 
WeakMapData
Called WeakMap function on non-object
Called WeakMap function on a non-WeakMap object
Attempted to set a non-object key in a WeakMap
Called WeakSet function on non-object
Called WeakSet function on a non-WeakSet object
Attempted to add a non-object key to a WeakSet
NoIntrinsic
AbsIntrinsic
ACosIntrinsic
ASinIntrinsic
ATanIntrinsic
ACoshIntrinsic
ASinhIntrinsic
ATanhIntrinsic
MinIntrinsic
MaxIntrinsic
SqrtIntrinsic
SinIntrinsic
CbrtIntrinsic
Clz32Intrinsic
CosIntrinsic
TanIntrinsic
CoshIntrinsic
SinhIntrinsic
TanhIntrinsic
ArrayIndexOfIntrinsic
ArrayPushIntrinsic
ArrayPopIntrinsic
ArraySliceIntrinsic
CharCodeAtIntrinsic
CharAtIntrinsic
FromCharCodeIntrinsic
PowIntrinsic
FloorIntrinsic
CeilIntrinsic
RoundIntrinsic
ExpIntrinsic
Expm1Intrinsic
LogIntrinsic
Log10Intrinsic
Log1pIntrinsic
Log2Intrinsic
RegExpExecIntrinsic
RegExpTestIntrinsic
RegExpTestFastIntrinsic
StringPrototypeValueOfIntrinsic
StringPrototypeReplaceIntrinsic
StringPrototypeReplaceRegExpIntrinsic
StringPrototypeToLowerCaseIntrinsic
NumberPrototypeToStringIntrinsic
IMulIntrinsic
RandomIntrinsic
FRoundIntrinsic
TruncIntrinsic
IsTypedArrayViewIntrinsic
BoundThisNoArgsFunctionCallIntrinsic
JSMapGetIntrinsic
JSMapHasIntrinsic
JSSetHasIntrinsic
HasOwnPropertyIntrinsic
AtomicsAddIntrinsic
AtomicsAndIntrinsic
AtomicsCompareExchangeIntrinsic
AtomicsExchangeIntrinsic
AtomicsIsLockFreeIntrinsic
AtomicsLoadIntrinsic
AtomicsOrIntrinsic
AtomicsStoreIntrinsic
AtomicsSubIntrinsic
AtomicsWaitIntrinsic
AtomicsWakeIntrinsic
AtomicsXorIntrinsic
ParseIntIntrinsic
TypedArrayLengthIntrinsic
TypedArrayByteLengthIntrinsic
TypedArrayByteOffsetIntrinsic
DFGTrueIntrinsic
OSRExitIntrinsic
IsFinalTierIntrinsic
SetInt32HeapPredictionIntrinsic
CheckInt32Intrinsic
FiatInt52Intrinsic
Match-only 8-bit regular expression
Match-only 16-bit regular expression
8-bit regular expression
16-bit regular expression
Invalid regular expression: regular expression too large
Invalid regular expression: numbers out of order in {} quantifier
Invalid regular expression: nothing to repeat
Invalid regular expression: number too large in {} quantifier
Invalid regular expression: missing )
Invalid regular expression: unmatched parentheses
Invalid regular expression: unrecognized character after (?
Invalid regular expression: missing terminating ] for character class
Invalid regular expression: range out of order in character class
Invalid regular expression: \ at end of pattern
Invalid regular expression: invalid unicode {} escape
Invalid regular expression: invalid backreference for unicode pattern
Invalid regular expression: invalid escaped character for unicode pattern
Invalid regular expression: too many nested disjunctions
Invalid regular expression: pattern exceeds string length limits
Invalid regular expression: invalid flags
^$\.*+?()[]{}|/
ASSERTION FAILED: %s
SHOULD NEVER BE REACHED
ARGUMENT BAD: %s, %s
Unknown logging channel: %s
%s(%d) : %s
WTF::AutomaticThread
*** WebKit discarding exception: <%@> %@
Wall
Monotonic
AppleCollationOrder
%pid
*** DataLog output to "%s" ***
Warning: Could not open DataLog file %s for writing.
janfebmaraprmayjunjulaugsepoctnovdec
Total
Memory pressure relief: %s: (Unable to get dirty memory information for process)
Memory pressure relief: %s: res = %zu/%zu/%ld, res+swap = %zu/%zu/%ld
System is no longer under (%s) memory pressure.
Got memory pressure notification (%s)
org.WebKit.lowMemory
org.WebKit.lowMemory.begin
org.WebKit.lowMemory.end
Monotonic(
 sec)
WTF_numberOfProcessorCores
WARNING: failed to parse WTF_numberOfProcessorCores=%s
(null StringImpl*)
%lld
%llu
 sec
%02X
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789
%s%-3d %p %s
%s%-3d %p
WTF::String-based allocator
We somehow got called for an unknown signal 
, halp.
Unable to restore the default handler while proccessing signal 
 the process is probably deadlocked. (errno: 
xmlns
loose
normal
strict
AppleTextBreakLocale
/BuildRoot/Library/Caches/com.apple.xbs/Sources/WTF_Sim/WTF-7604.1.28.1/wtf/ThreadingPthreads.cpp
size_t WTF::Thread::getRegisters(PlatformRegisters &)
JavaScript garbage collection failed because thread_get_state returned an error (%d). This is probably the result of running inside Rosetta, which is not supported.
Wall(
Malloc
MallocLogFile
MallocGuardEdges
MallocDoNotProtectPrelude
MallocDoNotProtectPostlude
MallocStackLogging
MallocStackLoggingNoCompact
MallocStackLoggingDirectory
MallocScribble
MallocCheckHeapStart
MallocCheckHeapEach
MallocCheckHeapSleep
MallocCheckHeapAbort
MallocErrorAbort
MallocCorruptionAbort
MallocHelp
DYLD_INSERT_LIBRARIES
libgmalloc
WebKit Malloc Memory Pressure Handler
unique_lock::unlock: not locked
unique_lock::lock: references null mutex
unique_lock::lock: already locked
thread constructor failed
SimulateCrash
/System/Library/PrivateFrameworks/CrashReporterSupport.framework/CrashReporterSupport
WebKit Using System Malloc
WebKit Malloc
bmalloc: error reading remote process: 0x%x
__cpu_indicator_init
/BuildRoot/Library/Caches/com.apple.xbs/Sources/clang/clang-900.2.28.1/src/projects/compiler-rt/lib/builtins/cpu_model.c
__cpu_model.__cpu_type < CPU_TYPE_MAX
__cpu_model.__cpu_subtype < CPU_SUBTYPE_MAX
?`x%
0E[](){}+-*.,?\^$|
@wKA
MbP?
> constructor without new is inva
?UUUUUU
//# sourceURL=__InjectedScript_InjectedScriptSource.js
(function(InjectedScriptHost,inspectedGlobalObject,injectedScriptId){var Object={}.constructor;function toString(obj)
{return String(obj);}
function toStringDescription(obj)
{if(obj===0&&1/obj<0)
return"-0";return toString(obj);}
function isUInt32(obj)
{if(typeof obj==="number")
return obj>>>0===obj&&(obj>0||1/obj>0);return""+(obj>>>0)===obj;}
function isSymbol(obj)
{return typeof obj==="symbol";}
function isEmptyObject(object)
{for(let key in object)
return false;return true;}
var InjectedScript=function()
{this._lastBoundObjectId=1;this._idToWrappedObject={};this._idToObjectGroupName={};this._objectGroups={};this._modules={};this._nextSavedResultIndex=1;this._savedResults=[];}
InjectedScript.primitiveTypes={undefined:true,boolean:true,number:true,string:true,}
InjectedScript.CollectionMode={OwnProperties:1<<0,NativeGetterProperties:1<<1,AllProperties:1<<2,}
InjectedScript.prototype={isPrimitiveValue:function(object)
{return InjectedScript.primitiveTypes[typeof object]&&!this._isHTMLAllCollection(object);},previewValue:function(value)
{return InjectedScript.RemoteObject.createObjectPreviewForValue(value,true);},functionDetails:function(func)
{var details=InjectedScriptHost.functionDetails(func);if(!details)
return"Cannot resolve function details.";return details;},wrapObject:function(object,groupName,canAccessInspectedGlobalObject,generatePreview)
{if(canAccessInspectedGlobalObject)
return this._wrapObject(object,groupName,false,generatePreview);return this._fallbackWrapper(object);},setExceptionValue:function(value)
{this._exceptionValue=value;},clearExceptionValue:function()
{delete this._exceptionValue;},_fallbackWrapper:function(object)
{var result={};result.type=typeof object;if(this.isPrimitiveValue(object))
result.value=object;else
result.description=toString(object);return result;},wrapTable:function(canAccessInspectedGlobalObject,table,columns)
{if(!canAccessInspectedGlobalObject)
return this._fallbackWrapper(table);
var columnNames=null;if(typeof columns==="string")
columns=[columns];if(InjectedScriptHost.subtype(columns)==="array"){columnNames=[];for(var i=0;i<columns.length;++i)
columnNames.push(toString(columns[i]));}
return this._wrapObject(table,"console",false,true,columnNames);},inspectObject:function(object)
{if(this._commandLineAPIImpl)
this._commandLineAPIImpl.inspect(object);},_wrapObject:function(object,objectGroupName,forceValueType,generatePreview,columnNames)
{try{return new InjectedScript.RemoteObject(object,objectGroupName,forceValueType,generatePreview,columnNames);}catch(e){try{var description=injectedScript._describe(e);}catch(ex){var description="<failed to convert exception to string>";}
return new InjectedScript.RemoteObject(description);}},_bind:function(object,objectGroupName)
{var id=this._lastBoundObjectId++;this._idToWrappedObject[id]=object;var objectId="{\"injectedScriptId\":"+injectedScriptId+",\"id\":"+id+"}";if(objectGroupName){var group=this._objectGroups[objectGroupName];if(!group){group=[];this._objectGroups[objectGroupName]=group;}
group.push(id);this._idToObjectGroupName[id]=objectGroupName;}
return objectId;},_parseObjectId:function(objectId)
{return InjectedScriptHost.evaluate("("+objectId+")");},releaseObjectGroup:function(objectGroupName)
{if(objectGroupName==="console"){delete this._lastResult;this._nextSavedResultIndex=1;this._savedResults=[];}
var group=this._objectGroups[objectGroupName];if(!group)
return;for(var i=0;i<group.length;i++)
this._releaseObject(group[i]);delete this._objectGroups[objectGroupName];},dispatch:function(methodName,args)
{var argsArray=InjectedScriptHost.evaluate("("+args+")");var result=this[methodName].apply(this,argsArray);if(typeof result==="undefined"){if(inspectedGlobalObject.console)
inspectedGlobalObject.console.error("Web Inspector error: InjectedScript.%s returns undefined",methodName);result=null;}
return result;},getPreview:function(objectId)
{let parsedObjectId=this._parseObjectId(objectId);let object=this._objectForId(parsedObjectId);return InjectedScript.RemoteObject.createObjectPreviewForValue(object,true);},_getProperties:function(objectId,collectionMode,generatePreview,nativeGettersAsValues)
{var parsedObjectId=this._parseObjectId(objectId);var object=this._objectForId(parsedObjectId);var objectGroupName=this._idToObjectGroupName[parsedObjectId.id];if(!this._isDefined(object))
return false;if(isSymbol(object))
return false;var descriptors=this._propertyDescriptors(object,collectionMode,nativeGettersAsValues);for(var i=0;i<descriptors.length;++i){var descriptor=descriptors[i];if("get"in descriptor)
descriptor.get=this._wrapObject(descriptor.get,objectGroupName);if("set"in descriptor)
descriptor.set=this._wrapObject(descriptor.set,objectGroupName);if("value"in descriptor)
descriptor.value=this._wrapObject(descriptor.value,objectGroupName,false,generatePreview);if(!("configurable"in descriptor))
descriptor.configurable=false;if(!("enumerable"in descriptor))
descriptor.enumerable=false;if("symbol"in descriptor)
descriptor.symbol=this._wrapObject(descriptor.symbol,objectGroupName);}
return descriptors;},getProperties:function(objectId,ownProperties,generatePreview)
{var nativeGettersAsValues=false;var collectionMode=ownProperties?InjectedScript.CollectionMode.OwnProperties:InjectedScript.CollectionMode.AllProperties;return this._getProperties(objectId,collectionMode,generatePreview,nativeGettersAsValues);},getDisplayableProperties:function(objectId,generatePreview)
{var nativeGettersAsValues=true;var collectionMode=InjectedScript.CollectionMode.OwnProperties|InjectedScript.CollectionMode.NativeGetterProperties;return this._getProperties(objectId,collectionMode,generatePreview,nativeGettersAsValues);},getInternalProperties:function(objectId,generatePreview)
{var parsedObjectId=this._parseObjectId(objectId);var object=this._objectForId(parsedObjectId);var objectGroupName=this._idToObjectGroupName[parsedObjectId.id];if(!this._isDefined(object))
return false;if(isSymbol(object))
return false;var descriptors=this._internalPropertyDescriptors(object);if(!descriptors)
return[];for(var i=0;i<descriptors.length;++i){var descriptor=descriptors[i];if("value"in descriptor)
descriptor.value=this._wrapObject(descriptor.value,objectGroupName,false,generatePreview);}
return descriptors;},getCollectionEntries:function(objectId,objectGroupName,startIndex,numberToFetch)
{var parsedObjectId=this._parseObjectId(objectId);var object=this._objectForId(parsedObjectId);var objectGroupName=objectGroupName||this._idToObjectGroupName[parsedObjectId.id];if(!this._isDefined(object))
return;if(typeof object!=="object")
return;var entries=this._entries(object,InjectedScriptHost.subtype(object),startIndex,numberToFetch);return entries.map(function(entry){entry.value=injectedScript._wrapObject(entry.value,objectGroupName,false,true);if("key"in entry)
entry.key=injectedScript._wrapObject(entry.key,objectGroupName,false,true);return entry;});},saveResult:function(callArgumentJSON)
{this._savedResultIndex=0;try{var callArgument=InjectedScriptHost.evaluate("("+callArgumentJSON+")");var value=this._resolveCallArgument(callArgument);this._saveResult(value);}catch(e){}
return this._savedResultIndex;},getFunctionDetails:function(functionId)
{var parsedFunctionId=this._parseObjectId(functionId);var func=this._objectForId(parsedFunctionId);if(typeof func!=="function")
return"Cannot resolve function by id.";return injectedScript.functionDetails(func);},releaseObject:function(objectId)
{var parsedObjectId=this._parseObjectId(objectId);this._releaseObject(parsedObjectId.id);},_releaseObject:function(id)
{delete this._idToWrappedObject[id];delete this._idToObjectGroupName[id];},evaluate:function(expression,objectGroup,injectCommandLineAPI,returnByValue,generatePreview,saveResult)
{return this._evaluateAndWrap(InjectedScriptHost.evaluateWithScopeExtension,InjectedScriptHost,expression,objectGroup,false,injectCommandLineAPI,returnByValue,generatePreview,saveResult);},callFunctionOn:function(objectId,expression,args,returnByValue,generatePreview)
{var parsedObjectId=this._parseObjectId(objectId);var object=this._objectForId(parsedObjectId);if(!this._isDefined(object))
return"Could not find object with given id";if(args){var resolvedArgs=[];var callArgs=InjectedScriptHost.evaluate(args);for(var i=0;i<callArgs.length;++i){try{resolvedArgs[i]=this._resolveCallArgument(callArgs[i]);}catch(e){return String(e);}}}
try{var objectGroup=this._idToObjectGroupName[parsedObjectId.id];var func=InjectedScriptHost.evaluate("("+expression+")");if(typeof func!=="function")
return"Given expression does not evaluate to a function";return{wasThrown:false,result:this._wrapObject(func.apply(object,resolvedArgs),objectGroup,returnByValue,generatePreview)};}catch(e){return this._createThrownValue(e,objectGroup);}},_resolveCallArgument:function(callArgumentJSON)
{if("value"in callArgumentJSON)
return callArgumentJSON.value;var objectId=callArgumentJSON.objectId;if(objectId){var parsedArgId=this._parseObjectId(objectId);if(!parsedArgId||parsedArgId["injectedScriptId"]!==injectedScriptId)
throw"Arguments should belong to the same JavaScript world as the target object.";var resolvedArg=this._objectForId(parsedArgId);if(!this._isDefined(resolvedArg))
throw"Could not find object with given id";return resolvedArg;}
return undefined;},_evaluateAndWrap:function(evalFunction,object,expression,objectGroup,isEvalOnCallFrame,injectCommandLineAPI,returnByValue,generatePreview,saveResult)
{try{this._savedResultIndex=0;var returnObject={wasThrown:false,result:this._wrapObject(this._evaluateOn(evalFunction,object,objectGroup,expression,isEvalOnCallFrame,injectCommandLineAPI,saveResult),objectGroup,returnByValue,generatePreview)};if(saveResult&&this._savedResultIndex)
returnObject.savedResultIndex=this._savedResultIndex;return returnObject;}catch(e){return this._createThrownValue(e,objectGroup);}},_createThrownValue:function(value,objectGroup)
{var remoteObject=this._wrapObject(value,objectGroup);try{remoteObject.description=toStringDescription(value);}catch(e){}
return{wasThrown:true,result:remoteObject};},_evaluateOn:function(evalFunction,object,objectGroup,expression,isEvalOnCallFrame,injectCommandLineAPI,saveResult)
{var commandLineAPI=null;if(injectCommandLineAPI){if(this.CommandLineAPI)
commandLineAPI=new this.CommandLineAPI(this._commandLineAPIImpl,isEvalOnCallFrame?object:null);else
commandLineAPI=new BasicCommandLineAPI(isEvalOnCallFrame?object:null);}
var result=evalFunction.call(object,expression,commandLineAPI);if(saveResult)
this._saveResult(result);return result;},wrapCallFrames:function(callFrame)
{if(!callFrame)
return false;var result=[];var depth=0;do{result.push(new InjectedScript.CallFrameProxy(depth++,callFrame));callFrame=callFrame.caller;}while(callFrame);return result;},evaluateOnCallFrame:function(topCallFrame,callFrameId,expression,objectGroup,injectCommandLineAPI,returnByValue,generatePreview,saveResult)
{var callFrame=this._callFrameForId(topCallFrame,callFrameId);if(!callFrame)
return"Could not find call frame with given id";return this._evaluateAndWrap(callFrame.evaluateWithScopeExtension,callFrame,expression,objectGroup,true,injectCommandLineAPI,returnByValue,generatePreview,saveResult);},_callFrameForId:function(topCallFrame,callFrameId)
{var parsedCallFrameId=InjectedScriptHost.evaluate("("+callFrameId+")");var ordinal=parsedCallFrameId["ordinal"];var callFrame=topCallFrame;while(--ordinal>=0&&callFrame)
callFrame=callFrame.caller;return callFrame;},_objectForId:function(objectId)
{return this._idToWrappedObject[objectId.id];},findObjectById:function(objectId)
{var parsedObjectId=this._parseObjectId(objectId);return this._objectForId(parsedObjectId);},module:function(name)
{return this._modules[name];},injectModule:function(name,source,host)
{delete this._modules[name];var moduleFunction=InjectedScriptHost.evaluate("("+source+")");if(typeof moduleFunction!=="function"){if(inspectedGlobalObject.console)
inspectedGlobalObject.console.error("Web Inspector error: A function was expected for module %s evaluation",name);return null;}
var module=moduleFunction.call(inspectedGlobalObject,InjectedScriptHost,inspectedGlobalObject,injectedScriptId,this,host);this._modules[name]=module;return module;},_internalPropertyDescriptors:function(object,completeDescriptor)
{var internalProperties=InjectedScriptHost.getInternalProperties(object);if(!internalProperties)
return null;var descriptors=[];for(var i=0;i<internalProperties.length;i++){var property=internalProperties[i];var descriptor={name:property.name,value:property.value};if(completeDescriptor){descriptor.writable=false;descriptor.configurable=false;descriptor.enumerable=false;descriptor.isOwn=true;}
descriptors.push(descriptor);}
return descriptors;},_propertyDescriptors:function(object,collectionMode,nativeGettersAsValues)
{if(InjectedScriptHost.subtype(object)==="proxy")
return[];var descriptors=[];var nameProcessed=new Set;function createFakeValueDescriptor(name,symbol,descriptor,isOwnProperty,possibleNativeBindingGetter)
{try{var descriptor={name,value:object[name],writable:descriptor.writable||false,configurable:descriptor.configurable||false,enumerable:descriptor.enumerable||false};if(possibleNativeBindingGetter)
descriptor.nativeGetter=true;if(isOwnProperty)
descriptor.isOwn=true;if(symbol)
descriptor.symbol=symbol;if(descriptor.value instanceof Promise)
descriptor.value.catch(function(){});return descriptor;}catch(e){var errorDescriptor={name,value:e,wasThrown:true};if(isOwnProperty)
errorDescriptor.isOwn=true;if(symbol)
errorDescriptor.symbol=symbol;return errorDescriptor;}}
function processDescriptor(descriptor,isOwnProperty,possibleNativeBindingGetter)
{if(collectionMode&InjectedScript.CollectionMode.AllProperties){descriptors.push(descriptor);return;}
if(collectionMode&InjectedScript.CollectionMode.OwnProperties&&isOwnProperty){descriptors.push(descriptor);return;}
if(collectionMode&InjectedScript.CollectionMode.NativeGetterProperties){if(possibleNativeBindingGetter){descriptors.push(descriptor);return;}}}
function processProperties(o,properties,isOwnProperty)
{for(var i=0;i<properties.length;++i){var property=properties[i];if(nameProcessed.has(property)||property==="__proto__")
continue;nameProcessed.add(property);var name=toString(property);var symbol=isSymbol(property)?property:null;var descriptor=Object.getOwnPropertyDescriptor(o,property);if(!descriptor){var fakeDescriptor=createFakeValueDescriptor(name,symbol,{writable:false,configurable:false,enumerable:false},isOwnProperty);processDescriptor(fakeDescriptor,isOwnProperty);continue;}
if(nativeGettersAsValues){if(String(descriptor.get).endsWith("[native code]\n}")||(!descriptor.get&&descriptor.hasOwnProperty("get")&&!descriptor.set&&descriptor.hasOwnProperty("set"))){var fakeDescriptor=createFakeValueDescriptor(name,symbol,descriptor,isOwnProperty,true);processDescriptor(fakeDescriptor,isOwnProperty,true);continue;}}
descriptor.name=name;if(isOwnProperty)
descriptor.isOwn=true;if(symbol)
descriptor.symbol=symbol;processDescriptor(descriptor,isOwnProperty);}}
function arrayIndexPropertyNames(o,length)
{var array=[];for(var i=0;i<length;++i){if(i in o)
array.push(""+i);}
return array;}
var isArrayLike=false;try{isArrayLike=injectedScript._subtype(object)==="array"&&isFinite(object.length)&&object.length>0;}catch(e){}
for(var o=object;this._isDefined(o);o=Object.getPrototypeOf(o)){var isOwnProperty=o===object;if(isArrayLike&&isOwnProperty)
processProperties(o,arrayIndexPropertyNames(o,Math.min(object.length,100)),isOwnProperty);else{processProperties(o,Object.getOwnPropertyNames(o),isOwnProperty);if(Object.getOwnPropertySymbols)
processProperties(o,Object.getOwnPropertySymbols(o),isOwnProperty);}
if(collectionMode===InjectedScript.CollectionMode.OwnProperties)
break;}
try{if(object.__proto__)
descriptors.push({name:"__proto__",value:object.__proto__,writable:true,configurable:true,enumerable:false,isOwn:true});}catch(e){}
return descriptors;},_isDefined:function(object)
{return!!object||this._isHTMLAllCollection(object);},_isHTMLAllCollection:function(object)
{return(typeof object==="undefined")&&InjectedScriptHost.isHTMLAllCollection(object);},_subtype:function(obj)
{if(obj===null)
return"null";if(this.isPrimitiveValue(obj)||isSymbol(obj))
return null;if(this._isHTMLAllCollection(obj))
return"array";var preciseType=InjectedScriptHost.subtype(obj);if(preciseType)
return preciseType;try{if(typeof obj.splice==="function"&&isFinite(obj.length))
return"array";}catch(e){}
return null;},_classPreview:function(classConstructorValue)
{return"class "+classConstructorValue.name;},_nodePreview:function(node)
{var isXMLDocument=node.ownerDocument&&!!node.ownerDocument.xmlVersion;var nodeName=isXMLDocument?node.nodeName:node.nodeName.toLowerCase();switch(node.nodeType){case 1: if(node.id)
return"<"+nodeName+" id=\""+node.id+"\">";if(node.classList.length)
return"<"+nodeName+" class=\""+node.classList.toString().replace(/\s+/," ")+"\">";if(nodeName==="input"&&node.type)
return"<"+nodeName+" type=\""+node.type+"\">";return"<"+nodeName+">";case 3: return nodeName+" \""+node.nodeValue+"\"";case 8: return"<!--"+node.nodeValue+"-->";case 10: return"<!DOCTYPE "+nodeName+">";default:return nodeName;}},_describe:function(obj)
{if(this.isPrimitiveValue(obj))
return null;if(isSymbol(obj))
return toString(obj);var subtype=this._subtype(obj);if(subtype==="regexp")
return toString(obj);if(subtype==="date")
return toString(obj);if(subtype==="error")
return toString(obj);if(subtype==="proxy")
return"Proxy";if(subtype==="node")
return this._nodePreview(obj);var className=InjectedScriptHost.internalConstructorName(obj);if(subtype==="array")
return className;if(subtype==="iterator"&&Symbol.toStringTag in obj)
return obj[Symbol.toStringTag];if(typeof obj==="function")
return obj.toString();if(className==="Object"){var constructorName=obj.constructor&&obj.constructor.name;if(constructorName)
return constructorName;}
return className;},_getSetEntries:function(object,skip,numberToFetch)
{var entries=[];for(var value of object){if(skip>0){skip--;continue;}
entries.push({value});if(numberToFetch&&entries.length===numberToFetch)
break;}
return entries;},_getMapEntries:function(object,skip,numberToFetch)
{var entries=[];for(var[key,value]of object){if(skip>0){skip--;continue;}
entries.push({key,value});if(numberToFetch&&entries.length===numberToFetch)
break;}
return entries;},_getWeakMapEntries:function(object,numberToFetch)
{return InjectedScriptHost.weakMapEntries(object,numberToFetch);},_getWeakSetEntries:function(object,numberToFetch)
{return InjectedScriptHost.weakSetEntries(object,numberToFetch);},_getIteratorEntries:function(object,numberToFetch)
{return InjectedScriptHost.iteratorEntries(object,numberToFetch);},_entries:function(object,subtype,startIndex,numberToFetch)
{if(subtype==="set")
return this._getSetEntries(object,startIndex,numberToFetch);if(subtype==="map")
return this._getMapEntries(object,startIndex,numberToFetch);if(subtype==="weakmap")
return this._getWeakMapEntries(object,numberToFetch);if(subtype==="weakset")
return this._getWeakSetEntries(object,numberToFetch);if(subtype==="iterator")
return this._getIteratorEntries(object,numberToFetch);throw"unexpected type";},_saveResult:function(result)
{this._lastResult=result;if(result===undefined||result===null)
return;var existingIndex=this._savedResults.indexOf(result);if(existingIndex!==-1){this._savedResultIndex=existingIndex;return;}
this._savedResultIndex=this._nextSavedResultIndex;this._savedResults[this._nextSavedResultIndex++]=result;if(this._nextSavedResultIndex>=100)
this._nextSavedResultIndex=1;},_savedResult:function(index)
{return this._savedResults[index];}}
var injectedScript=new InjectedScript;InjectedScript.RemoteObject=function(object,objectGroupName,forceValueType,generatePreview,columnNames)
{this.type=typeof object;if(this.type==="undefined"&&injectedScript._isHTMLAllCollection(object))
this.type="object";if(injectedScript.isPrimitiveValue(object)||object===null||forceValueType){if(this.type!=="undefined")
this.value=object;if(object===null)
this.subtype="null";if(this.type==="number")
this.description=toStringDescription(object);return;}
this.objectId=injectedScript._bind(object,objectGroupName);var subtype=injectedScript._subtype(object);if(subtype)
this.subtype=subtype;this.className=InjectedScriptHost.internalConstructorName(object);this.description=injectedScript._describe(object);if(subtype==="array")
this.size=typeof object.length==="number"?object.length:0;else if(subtype==="set"||subtype==="map")
this.size=object.size;else if(subtype==="weakmap")
this.size=InjectedScriptHost.weakMapSize(object);else if(subtype==="weakset")
this.size=InjectedScriptHost.weakSetSize(object);else if(subtype==="class"){this.classPrototype=injectedScript._wrapObject(object.prototype,objectGroupName);this.className=object.name;}
if(generatePreview&&this.type==="object"){if(subtype==="proxy"){this.preview=this._generatePreview(InjectedScriptHost.proxyTargetValue(object));this.preview.lossless=false;}else
this.preview=this._generatePreview(object,undefined,columnNames);}};InjectedScript.RemoteObject.createObjectPreviewForValue=function(value,generatePreview,columnNames)
{var remoteObject=new InjectedScript.RemoteObject(value,undefined,false,generatePreview,columnNames);if(remoteObject.objectId)
injectedScript.releaseObject(remoteObject.objectId);if(remoteObject.classPrototype&&remoteObject.classPrototype.objectId)
injectedScript.releaseObject(remoteObject.classPrototype.objectId);return remoteObject.preview||remoteObject._emptyPreview();};InjectedScript.RemoteObject.prototype={_initialPreview:function()
{var preview={type:this.type,description:this.description||toString(this.value),lossless:true,};if(this.subtype){preview.subtype=this.subtype;if(this.subtype!=="null"){preview.overflow=false;preview.properties=[];}}
if("size"in this)
preview.size=this.size;return preview;},_emptyPreview:function()
{var preview=this._initialPreview();if(this.subtype==="map"||this.subtype==="set"||this.subtype==="weakmap"||this.subtype==="weakset"||this.subtype==="iterator"){if(this.size){preview.entries=[];preview.lossless=false;preview.overflow=true;}}
return preview;},_generatePreview:function(object,firstLevelKeys,secondLevelKeys)
{var preview=this._initialPreview();var isTableRowsRequest=secondLevelKeys===null||secondLevelKeys;var firstLevelKeysCount=firstLevelKeys?firstLevelKeys.length:0;var propertiesThreshold={properties:isTableRowsRequest?1000:Math.max(5,firstLevelKeysCount),indexes:isTableRowsRequest?1000:Math.max(10,firstLevelKeysCount)};try{if(this.subtype==="map"||this.subtype==="set"||this.subtype==="weakmap"||this.subtype==="weakset"||this.subtype==="iterator")
this._appendEntryPreviews(object,preview);preview.properties=[];var internalPropertyDescriptors=injectedScript._internalPropertyDescriptors(object,true);if(internalPropertyDescriptors){this._appendPropertyPreviews(object,preview,internalPropertyDescriptors,true,propertiesThreshold,firstLevelKeys,secondLevelKeys);if(propertiesThreshold.indexes<0||propertiesThreshold.properties<0)
return preview;}
if(preview.entries)
return preview;var nativeGettersAsValues=true;var descriptors=injectedScript._propertyDescriptors(object,InjectedScript.CollectionMode.AllProperties,nativeGettersAsValues);this._appendPropertyPreviews(object,preview,descriptors,false,propertiesThreshold,firstLevelKeys,secondLevelKeys);if(propertiesThreshold.indexes<0||propertiesThreshold.properties<0)
return preview;}catch(e){preview.lossless=false;}
return preview;},_appendPropertyPreviews:function(object,preview,descriptors,internal,propertiesThreshold,firstLevelKeys,secondLevelKeys)
{for(let i=0;i<descriptors.length;++i){let descriptor=descriptors[i];if(propertiesThreshold.indexes<0||propertiesThreshold.properties<0)
break;if(descriptor.wasThrown){preview.lossless=false;continue;}
var name=descriptor.name;if(name==="__proto__"){if(descriptor.value&&descriptor.value.constructor&&descriptor.value.constructor!==Object&&descriptor.value.constructor!==Array&&descriptor.value.constructor!==RegExp)
preview.lossless=false;continue;}
if(this.subtype==="array"&&!isUInt32(name))
continue;if(!descriptor.enumerable&&!descriptor.isOwn&&!(this.subtype==="array"||(this.subtype!=="regexp"&&descriptor.nativeGetter)))
continue;if(firstLevelKeys&&!firstLevelKeys.includes(name))
continue;if(!("value"in descriptor)){preview.lossless=false;this._appendPropertyPreview(preview,internal,{name,type:"accessor"},propertiesThreshold);continue;}
var value=descriptor.value;if(value===null){this._appendPropertyPreview(preview,internal,{name,type:"object",subtype:"null",value:"null"},propertiesThreshold);continue;}
var type=typeof value;if(!descriptor.enumerable&&type==="function")
continue;if(type==="undefined"&&injectedScript._isHTMLAllCollection(value))
type="object";const maxLength=100;if(InjectedScript.primitiveTypes[type]){if(type==="string"&&value.length>maxLength){value=this._abbreviateString(value,maxLength,true);preview.lossless=false;}
this._appendPropertyPreview(preview,internal,{name,type,value:toStringDescription(value)},propertiesThreshold);continue;}
if(isSymbol(value)){var symbolString=toString(value);if(symbolString.length>maxLength){symbolString=this._abbreviateString(symbolString,maxLength,true);preview.lossless=false;}
this._appendPropertyPreview(preview,internal,{name,type,value:symbolString},propertiesThreshold);continue;}
var property={name,type};var subtype=injectedScript._subtype(value);if(subtype)
property.subtype=subtype;if((secondLevelKeys===null||secondLevelKeys)||this._isPreviewableObject(value,object)){var subPreview=InjectedScript.RemoteObject.createObjectPreviewForValue(value,value!==object,secondLevelKeys);property.valuePreview=subPreview;if(!subPreview.lossless)
preview.lossless=false;if(subPreview.overflow)
preview.overflow=true;}else{var description="";if(type!=="function"||subtype==="class"){var fullDescription;if(subtype==="class")
fullDescription="class "+value.name;else if(subtype==="node")
fullDescription=injectedScript._nodePreview(value);else
fullDescription=injectedScript._describe(value);description=this._abbreviateString(fullDescription,maxLength,subtype==="regexp");}
property.value=description;preview.lossless=false;}
this._appendPropertyPreview(preview,internal,property,propertiesThreshold);}},_appendPropertyPreview:function(preview,internal,property,propertiesThreshold)
{if(toString(property.name>>>0)===property.name)
propertiesThreshold.indexes--;else
propertiesThreshold.properties--;if(propertiesThreshold.indexes<0||propertiesThreshold.properties<0){preview.overflow=true;preview.lossless=false;return;}
if(internal)
property.internal=true;preview.properties.push(property);},_appendEntryPreviews:function(object,preview)
{var entries=injectedScript._entries(object,this.subtype,0,6);if(!entries)
return;if(entries.length>5){entries.pop();preview.overflow=true;preview.lossless=false;}
function updateMainPreview(subPreview){if(!subPreview.lossless)
preview.lossless=false;}
preview.entries=entries.map(function(entry){entry.value=InjectedScript.RemoteObject.createObjectPreviewForValue(entry.value,entry.value!==object);updateMainPreview(entry.value);if("key"in entry){entry.key=InjectedScript.RemoteObject.createObjectPreviewForValue(entry.key,entry.key!==object);updateMainPreview(entry.key);}
return entry;},this);},_isPreviewableObject:function(value,object)
{let set=new Set;set.add(object);return this._isPreviewableObjectInternal(value,set,1);},_isPreviewableObjectInternal:function(object,knownObjects,depth)
{if(depth>3)
return false;if(injectedScript.isPrimitiveValue(object)||isSymbol(object))
return true;if(object===null)
return true;if(knownObjects.has(object))
return false;++depth;knownObjects.add(object);var subtype=injectedScript._subtype(object);if(subtype==="array"){var length=object.length;if(length>5)
return false;for(var i=0;i<length;++i){if(!this._isPreviewableObjectInternal(object[i],knownObjects,depth))
return false;}
return true;}
if(object.__proto__&&object.__proto__.__proto__)
return false;let ownPropertyNames=Object.getOwnPropertyNames(object);if(ownPropertyNames.length>3)
return false;for(let i=0;i<ownPropertyNames.length;++i){let propertyName=ownPropertyNames[i];if(!this._isPreviewableObjectInternal(object[propertyName],knownObjects,depth))
return false;}
return true;},_abbreviateString:function(string,maxLength,middle)
{if(string.length<=maxLength)
return string;if(middle){var leftHalf=maxLength>>1;var rightHalf=maxLength-leftHalf-1;return string.substr(0,leftHalf)+"\u2026"+string.substr(string.length-rightHalf,rightHalf);}
return string.substr(0,maxLength)+"\u2026";}}
InjectedScript.CallFrameProxy=function(ordinal,callFrame)
{this.callFrameId="{\"ordinal\":"+ordinal+",\"injectedScriptId\":"+injectedScriptId+"}";this.functionName=callFrame.functionName;this.location={scriptId:String(callFrame.sourceID),lineNumber:callFrame.line,columnNumber:callFrame.column};this.scopeChain=this._wrapScopeChain(callFrame);this.this=injectedScript._wrapObject(callFrame.thisObject,"backtrace");this.isTailDeleted=callFrame.isTailDeleted;}
InjectedScript.CallFrameProxy.prototype={_wrapScopeChain:function(callFrame)
{var scopeChain=callFrame.scopeChain;var scopeDescriptions=callFrame.scopeDescriptions();var scopeChainProxy=[];for(var i=0;i<scopeChain.length;i++)
scopeChainProxy[i]=InjectedScript.CallFrameProxy._createScopeJson(scopeChain[i],scopeDescriptions[i],"backtrace");return scopeChainProxy;}}
InjectedScript.CallFrameProxy._scopeTypeNames={0:"global", 1:"with", 2:"closure", 3:"catch", 4:"functionName", 5:"globalLexicalEnvironment", 6:"nestedLexical",};InjectedScript.CallFrameProxy._createScopeJson=function(object,{name,type,location},groupId)
{let scope={object:injectedScript._wrapObject(object,groupId),type:InjectedScript.CallFrameProxy._scopeTypeNames[type],};if(name)
scope.name=name;if(location)
scope.location=location;if(isEmptyObject(object))
scope.empty=true;return scope;}
function bind(func,thisObject,...outerArgs)
{return function(...innerArgs){return func.apply(thisObject,outerArgs.concat(innerArgs));};}
function BasicCommandLineAPI(callFrame)
{this.$_=injectedScript._lastResult;this.$exception=injectedScript._exceptionValue; for(let i=1;i<=injectedScript._savedResults.length;++i)
this.__defineGetter__("$"+i,bind(injectedScript._savedResult,injectedScript,i));for(let i=0;i<BasicCommandLineAPI.methods.length;++i){let method=BasicCommandLineAPI.methods[i];this[method.name]=method;}}
BasicCommandLineAPI.methods=[function dir(){return inspectedGlobalObject.console.dir(...arguments);},function clear(){return inspectedGlobalObject.console.clear(...arguments);},function table(){return inspectedGlobalObject.console.table(...arguments);},function profile(){return inspectedGlobalObject.console.profile(...arguments);},function profileEnd(){return inspectedGlobalObject.console.profileEnd(...arguments);},function keys(object){return Object.keys(object);},function values(object){let result=[];for(let key in object)
result.push(object[key]);return result;},];for(let i=0;i<BasicCommandLineAPI.methods.length;++i){let method=BasicCommandLineAPI.methods[i];method.toString=function(){return"function "+method.name+"() { [Command Line API] }";};}
return injectedScript;})
 !"#$%&'()*+,-./0123456789:;<=>?@abcdefghijklmnopqrstuvwxyz[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
0123456789abcdef
0123456789ABCDEF
 !"#$%&'()*+,-./
:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`a
cdeghijklm
yz{|}~
UUUU
UUUU
3333
3333
                
 !"#$%&'()*+,-./0123456789:;<=>?@abcdefghijklmnopqrstuvwxyz[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_
?456789:;<=
 !"#$%&'()*+,-./0123
456789:;<=
 !"#$%&'()*+,-./0123
-;eU
U1(\Q
mSx@
b}$l
~)p$w
11eU%
z^KD
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
 !"#$%&'()*+,-./0123456789:;<=>?@abcdefghijklmnopqrstuvwxyz[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
aCoc
vH7B
W4vC
O8M2
 !"#$%&'()*+,-./0123456789:;<=>?@abcdefghijklmnopqrstuvwxyz[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
 !"#$%&'()*+,-./0123456789:;<=>?@abcdefghijklmnopqrstuvwxyz[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
vH7B
W4vC
/libclang_rt.
asan_
tsan_
JSJavaScriptCoreFinder
JSContext
SubscriptSupport
Internal
JSManagedValue
JSValue
StructSupport
JSVMWrapperCache
JSVirtualMachine
JSObjCClassInfo
JSWrapperMap
JSExport
JSWTFMainThreadCaller
WTFLanguageChangeObserver
class
bundleForClass:
bundlePath
UTF8String
retain
JSGlobalContextRef
alloc
initWithGlobalContextRef:
release
init
autorelease
initWithVirtualMachine:
setException:
setExceptionHandler:
ensureWrapperMap
addContext:forGlobalContextRef:
dealloc
evaluateScript:withSourceURL:
absoluteString
valueFromNotifyException:
valueWithJSValueRef:inContext:
currentContext
initWithObjects:count:
copy
currentThis
currentCallee
currentArguments
evaluateScript:
exception
wrapperMap
globalObject
virtualMachine
name
setName:
_remoteInspectionEnabled
_setRemoteInspectionEnabled:
_includesNativeCallStackWhenReportingExceptions
_setIncludesNativeCallStackWhenReportingExceptions:
_debuggerRunLoop
_setDebuggerRunLoop:
.cxx_destruct
.cxx_construct
exceptionHandler
m_virtualMachine
m_context
m_exception
_exceptionHandler
objectForKeyedSubscript:
setObject:forKeyedSubscript:
virtualMachineWithContextGroupRef:
notifyException:
valueWithUndefinedInContext:
jsWrapperForObject:inContext:
objcWrapperForJSValueRef:inContext:
contextForGlobalContextRef:
boolFromNotifyException:
beginCallbackWithData:calleeValue:thisValue:argumentCount:arguments:
endCallbackWithData:
wrapperForObjCObject:
wrapperForJSObject:
contextWithJSGlobalContextRef:
initWithValue:
context
addManagedReference:withOwner:
initWithKeyOptions:valueOptions:capacity:
JSValueRef
value
keyEnumerator
countByEnumeratingWithState:objects:count:
removeManagedReference:withOwner:
disconnectValue
managedValueWithValue:
managedValueWithValue:andOwner:
didAddOwner:
didRemoveOwner:
m_globalObject
m_lock
m_weakValue
m_owners
toObject
isKindOfClass:
toDouble
arrayWithObjects:count:
invokeMethod:withArguments:
valueWithDouble:inContext:
toString
valueForProperty:
setValue:forProperty:
count
objectAtIndex:
valueWithObject:inContext:
valueWithBool:inContext:
valueWithInt32:inContext:
valueWithUInt32:inContext:
valueWithNewObjectInContext:
valueWithNewArrayInContext:
valueWithNewRegularExpressionFromPattern:flags:inContext:
valueWithNewErrorFromMessage:inContext:
valueWithNullInContext:
toObjectOfClass:
toBool
toInt32
toUInt32
toNumber
toDate
toArray
toDictionary
deleteProperty:
hasProperty:
defineProperty:descriptor:
valueAtIndex:
setValue:atIndex:
isUndefined
isNull
isBoolean
isNumber
isString
isObject
isArray
isDate
isEqualToObject:
isEqualWithTypeCoercionToObject:
isInstanceOf:
callWithArguments:
constructWithArguments:
m_value
_context
unsignedIntegerValue
toPoint
toSize
numberWithDouble:
dictionaryWithObjects:forKeys:count:
numberWithUnsignedInteger:
toRange
toRect
valueWithPoint:inContext:
valueWithRange:inContext:
valueWithRect:inContext:
valueWithSize:inContext:
objectAtIndexedSubscript:
setObject:atIndexedSubscript:
numberWithBool:
dateWithTimeIntervalSince1970:
array
dictionary
objectForKey:
description
selectorForStructToValue:
signatureWithObjCTypes:
invocationWithMethodSignature:
setSelector:
selectorForValueToStruct:
initWithValue:inContext:
null
addObject:
boolValue
doubleValue
timeIntervalSince1970
addWrapper:forJSContextGroupRef:
wrapperForJSContextGroupRef:
initWithContextGroupRef:
setObject:forKey:
isOldExternalObject:
addExternalRememberedObject:
removeObjectForKey:
m_group
m_externalDataMutex
m_contextCache
m_externalObjectGraph
m_externalRememberedSet
externalDataMutex
externalObjectGraph
externalRememberedSet
removeAllObjects
isSubclassOfClass:
classInfoForClass:
stringWithFormat:
prototypeInContext:
allocateConstructorAndPrototypeInContext:
initForClass:
wrapperForObject:inContext:
constructorInContext:
m_class
m_block
m_classRef
m_prototype
m_constructor
m_classMap
m_cachedJSWrappers
m_cachedObjCWrappers
stringWithUTF8String:
length
characterAtIndex:
uppercaseLetterCharacterSet
characterIsMember:
rangeOfString:
substringToIndex:
substringWithRange:
setTarget:
invoke
target
getReturnValue:
exceptionWithName:reason:userInfo:
setArgument:atIndex:
invokeWithTarget:
isMainThread
numberWithUnsignedInt:
dataUsingEncoding:
isEqualToString:
stringValue
isEqual:
unsignedIntValue
initWithData:encoding:
numberWithInt:
drain
reason
call
performSelectorOnMainThread:withObject:waitUntilDone:
performSelector:onThread:withObject:waitUntilDone:
currentThread
languagePreferencesDidChange:
mutableCopy
replaceCharactersInRange:withString:
getCFRunLoop
initWithBytes:length:encoding:
initWithCharacters:length:
initWithBytesNoCopy:length:encoding:freeWhenDone:
initWithCharactersNoCopy:length:freeWhenDone:
@16@0:8
^{OpaqueJSContext=}16@0:8
v16@0:8
@24@0:8@16
@32@0:8@16@24
v24@0:8@16
B16@0:8
v20@0:8B16
^{__CFRunLoop=}16@0:8
v24@0:8^{__CFRunLoop=}16
@?16@0:8
v24@0:8@?16
@"JSVirtualMachine"
^{OpaqueJSContext=}
{Strong<JSC::JSObject>="m_slot"^{JSValue}}
v32@0:8@16@24
@24@0:8^{OpaqueJSContext=}16
v24@0:8^{OpaqueJSValue=}16
@24@0:8^{OpaqueJSValue=}16
B24@0:8^{OpaqueJSValue=}16
v56@0:8^{CallbackData=^{CallbackData}@@^{OpaqueJSValue}^{OpaqueJSValue}Q^^{OpaqueJSValue}@}16^{OpaqueJSValue=}24^{OpaqueJSValue=}32Q40r^^{OpaqueJSValue}48
v24@0:8^{CallbackData=^{CallbackData}@@^{OpaqueJSValue}^{OpaqueJSValue}Q^^{OpaqueJSValue}@}16
{Weak<JSC::JSGlobalObject>="m_impl"^{WeakImpl}}
{RefPtr<JSC::JSLock>="m_ptr"^{JSLock}}
{WeakValueRef="m_tag"i"u"(WeakValueUnion="m_primitive"{JSValue="u"(EncodedValueDescriptor="asInt64"q"ptr"^{JSCell}"asBits"{?="payload"i"tag"i})}"m_object"{Weak<JSC::JSObject>="m_impl"^{WeakImpl}}"m_string"{Weak<JSC::JSString>="m_impl"^{WeakImpl}})}
@"NSMapTable"
@28@0:8B16@20
@32@0:8d16@24
@28@0:8i16@20
@28@0:8I16@20
@40@0:8@16@24@32
^{OpaqueJSValue=}16@0:8
@24@0:8#16
d16@0:8
i16@0:8
I16@0:8
B24@0:8@16
@24@0:8Q16
v32@0:8@16Q24
^{OpaqueJSValue=}
@"JSContext"
{CGPoint=dd}16@0:8
{_NSRange=QQ}16@0:8
{CGRect={CGPoint=dd}{CGSize=dd}}16@0:8
{CGSize=dd}16@0:8
@40@0:8{CGPoint=dd}16@32
@40@0:8{_NSRange=QQ}16@32
@56@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16@48
@40@0:8{CGSize=dd}16@32
@32@0:8^{OpaqueJSValue=}16@24
:24@0:8r*16
v32@0:8@16^{OpaqueJSContextGroup=}24
@24@0:8^{OpaqueJSContextGroup=}16
^{OpaqueJSContextGroup=}
{Lock="m_byte"{Atomic<unsigned char>="value"{atomic<unsigned char>="__a_"AC}}}
v32@0:8@16^{OpaqueJSContext=}24
^{Lock={Atomic<unsigned char>={atomic<unsigned char>=AC}}}16@0:8
{pair<JSC::JSObject *, JSC::JSObject *>=^{JSObject}^{JSObject}}24@0:8@16
^{JSObject=ICCCC{AuxiliaryBarrier<JSC::Butterfly *>=^{Butterfly}}}32@0:8@16@24
^{JSObject=ICCCC{AuxiliaryBarrier<JSC::Butterfly *>=^{Butterfly}}}24@0:8@16
^{OpaqueJSClass={atomic<unsigned int>=AI}^{OpaqueJSClass}^{OpaqueJSClass}^?^?^?^?^?^?^?^?^?^?^?{String={RefPtr<WTF::StringImpl>=^{StringImpl}}}{unique_ptr<WTF::HashMap<WTF::RefPtr<WTF::StringImpl>, std::__1::unique_ptr<StaticValueEntry, std::__1::default_delete<StaticValueEntry> >, WTF::StringHash, WTF::HashTraits<WTF::RefPtr<WTF::StringImpl> >, WTF::HashTraits<std::__1::unique_ptr<StaticValueEntry, std::__1::default_delete<StaticValueEntry> > > >, std::__1::default_delete<WTF::HashMap<WTF::RefPtr<WTF::StringImpl>, std::__1::unique_ptr<StaticValueEntry, std::__1::default_delete<StaticValueEntry> >, WTF::StringHash, WTF::HashTraits<WTF::RefPtr<WTF::StringImpl> >, WTF::HashTraits<std::__1::unique_ptr<StaticValueEntry, std::__1::default_delete<StaticValueEntry> > > > > >={__compressed_pair<WTF::HashMap<WTF::RefPtr<WTF::StringImpl>, std::__1::unique_ptr<StaticValueEntry, std::__1::default_delete<StaticValueEntry> >, WTF::StringHash, WTF::HashTraits<WTF::RefPtr<WTF::StringImpl> >, WTF::HashTraits<std::__1::unique_ptr<StaticValueEntry, std::__1::default_delete<StaticValueEntry> > > > *, std::__1::default_delete<WTF::HashMap<WTF::RefPtr<WTF::StringImpl>, std::__1::unique_ptr<StaticValueEntry, std::__1::default_delete<StaticValueEntry> >, WTF::StringHash, WTF::HashTraits<WTF::RefPtr<WTF::StringImpl> >, WTF::HashTraits<std::__1::unique_ptr<StaticValueEntry, std::__1::default_delete<StaticValueEntry> > > > > >=^{HashMap<WTF::RefPtr<WTF::StringImpl>, std::__1::unique_ptr<StaticValueEntry, std::__1::default_delete<StaticValueEntry> >, WTF::StringHash, WTF::HashTraits<WTF::RefPtr<WTF::StringImpl> >, WTF::HashTraits<std::__1::unique_ptr<StaticValueEntry, std::__1::default_delete<StaticValueEntry> > > >}}}{unique_ptr<WTF::HashMap<WTF::RefPtr<WTF::StringImpl>, std::__1::unique_ptr<StaticFunctionEntry, std::__1::default_delete<StaticFunctionEntry> >, WTF::StringHash, WTF::HashTraits<WTF::RefPtr<WTF::StringImpl> >, WTF::HashTraits<std::__1::unique_ptr<StaticFunctionEntry, std::__1::default_delete<StaticFunctionEntry> > > >, std::__1::default_delete<WTF::HashMap<WTF::RefPtr<WTF::StringImpl>, std::__1::unique_ptr<StaticFunctionEntry, std::__1::default_delete<StaticFunctionEntry> >, WTF::StringHash, WTF::HashTraits<WTF::RefPtr<WTF::StringImpl> >, WTF::HashTraits<std::__1::unique_ptr<StaticFunctionEntry, std::__1::default_delete<StaticFunctionEntry> > > > > >={__compressed_pair<WTF::HashMap<WTF::RefPtr<WTF::StringImpl>, std::__1::unique_ptr<StaticFunctionEntry, std::__1::default_delete<StaticFunctionEntry> >, WTF::StringHash, WTF::HashTraits<WTF::RefPtr<WTF::StringImpl> >, WTF::HashTraits<std::__1::unique_ptr<StaticFunctionEntry, std::__1::default_delete<StaticFunctionEntry> > > > *, std::__1::default_delete<WTF::HashMap<WTF::RefPtr<WTF::StringImpl>, std::__1::unique_ptr<StaticFunctionEntry, std::__1::default_delete<StaticFunctionEntry> >, WTF::StringHash, WTF::HashTraits<WTF::RefPtr<WTF::StringImpl> >, WTF::HashTraits<std::__1::unique_ptr<StaticFunctionEntry, std::__1::default_delete<StaticFunctionEntry> > > > > >=^{HashMap<WTF::RefPtr<WTF::StringImpl>, std::__1::unique_ptr<StaticFunctionEntry, std::__1::default_delete<StaticFunctionEntry> >, WTF::StringHash, WTF::HashTraits<WTF::RefPtr<WTF::StringImpl> >, WTF::HashTraits<std::__1::unique_ptr<StaticFunctionEntry, std::__1::default_delete<StaticFunctionEntry> > > >}}}}
{Weak<JSC::JSObject>="m_impl"^{WeakImpl}}
@"NSMutableDictionary"
{unique_ptr<JSC::WeakGCMap<id, JSC::JSObject, WTF::PtrHash<id>, WTF::HashTraits<id> >, std::__1::default_delete<JSC::WeakGCMap<id, JSC::JSObject, WTF::PtrHash<id>, WTF::HashTraits<id> > > >="__ptr_"{__compressed_pair<JSC::WeakGCMap<id, JSC::JSObject, WTF::PtrHash<id>, WTF::HashTraits<id> > *, std::__1::default_delete<JSC::WeakGCMap<id, JSC::JSObject, WTF::PtrHash<id>, WTF::HashTraits<id> > > >="__first_"^{WeakGCMap<id, JSC::JSObject, WTF::PtrHash<id>, WTF::HashTraits<id> >}}}
