.memgraph
Command args:    %@
Target process:  %s [%u]
Parent process:  %s [%u]
Parent process:  unable to determine
DYLD_INSERT_LIBRARIES=/usr/lib/libLeaksAtExit.dylib
SAMPLING_TOOLS_TARGET_PID
%s[%d]: [fatal] error acquiring target task port from parent.
%s[%d]: %s cannot find any existing process %s a name like '%s'%s.
you have access to which has
with
; try running with `sudo`
%s[%d]: cannot examine itself.
%s[%d]: Unable to deallocate target task port: %d (%s)
/usr/lib/system/libsystem_kernel.dylib
task_generate_corpse
%s[%d]: [fatal] Fail to generate corpse from the task, exiting
DYLD_ROOT_PATH
SIMULATOR_UDID
DT_NO_RESPAWN
%s[%d]: [fatal] respawning is disabled (because DYLD_ROOT_PATH or DT_NO_RESPAWN is set), but analysis process does not match architecture of target process %d.
DYLD_FRAMEWORK_PATH
DYLD_SHARED_REGION
avoid
x86_64
i386
posix_spawnattr_init
posix_spawnattr_setbinpref_np
%s[%d]: [fatal] 'mach_ports_register' failed: %s (%d)
__check_mach_ports_lookup
__check_parent_tool_v1
-atExit
%s[%d]: [fatal] posix_spawn: %s could not be launched as a %d-bit process with architecture %s: %s (%d)
%s[%d]: [fatal]  child process status could not be determined; exit code unavailable.
v20@?0I8I12I16
i24@?0r^v8r^v16
%s[%d]: [fatal] 'pid_for_task' failed: %s (%d)
for unknown reasons
for unknown reasons, even though it appears to exist
because it no longer appears to be running
because the process does not exist
because you do not have appropriate privileges to examine it
%s[%d]: %s cannot examine process %d (%s) %s%s.
%s[%d]: %s cannot examine process %d (with name like '%s') %s.
%s[%d]: %s cannot examine process %d %s.
%s/usr/bin/%s
%s%s
VMUOptionParserDomain
/BuildRoot/Library/Caches/com.apple.xbs/Sources/SamplingTools_Sim/SamplingTools-63075.1/VMUOptionParser.m
Invalid parameter not satisfying: %@
block && (longName || shortName)
!longName || ([longName length] && [longName characterAtIndex:0] != '-')
Option's long-name '%@' is invalid or already in use.
Option's short-name '%c' is invalid or already in use.
%s%@
%c%c%@%c
[@@@spacing@@@]%@
%s flag supplied with no argument
unrecognized option '%s'
[invalid usage]: %s
%s: %s
Usage: %s %s
[@@@spacing@@@]
purposeDescription
T@"NSString",C,N,V_purposeDescription
syntaxDescription
T@"NSString",C,N,V_syntaxDescription
discussion
T@"NSString",C,N,V_discussionDescription
singleHyphenLongNames
TB,N,V_singleHyphenLongNames
parametersShowAsAssignment
TB,N,V_parametersShowAsAssignment
v24@?0@"NSString"8^@16
launchd
coresymbolicationd
coreservicesd
UserEventAgent
rpc.lockd
launchservicesd
Activity Monitor
mdworker
spindump_agent
Search through a process for leaked memory.
[-hq] [--nocontext] [--nostacks] [--outputGraph=<path>] [--fullContent] [--forkCorpse] [--trace=<address>] [--atExit] <pid | partial-process-name | memory-graph-file | -- process-and-arguments>
exclude
exclude leaked blocks whose backtraces include the specified symbol
help
show this helpful usage message!
v8@?0
showTiming
initialization
quiet
suppress the process description header and footer
nocontext
do not print the binary contexts of discovered leaks
nostacks
do not print backtraces or save them in the memory graph file, even when available
nosources
do not show sourceFile:lineNumber in backtraces
outputGraph
path
save a memory graph file into the given directory or file
/tmp/
compress
fullContent
save allocation content descriptions into the memory graph file
nocontents
systemTest
conservative
noScanOverlay
DT_NO_SCAN_OVERLAY
forkCorpse
generate a corpse fork from process and run leaks on it
getCorpseFromParent
get_corpse
atExit
Launches the specified process and runs leaks when the process exits.  The process to launch must be the end of the command, and proceeded by '--'
trace
address
print chains of references from process 'roots' (e.g., global data) to the given block
traceTree
print a reverse tree of references, from the given block up to the process roots; can be imported into Instruments with Import Sampler Data
referenceTree
groupByType
debug
Modes of 'leaks <process> -debug'.  More than one different mode flag can be passed,
such as '-debug='.*Storage.*' -debug=references'.
    -debug            -- full output
    -debug=layout     -- full output, including object layout and values of ivars
    -debug=histogram  -- only show histogram of number of allocations having each reference count
    -debug=references -- only show references to the allocation (not content or layout), and only if reference count > 1
    -debug=contents   -- only show contents (reference from the allocation)
    -debug=<address>  -- only show the allocation at or containing <address>
    -debug=<classes-pattern>  -- show allocations whose class name matches pattern
    -debug=<region-description-pattern>  -- show non-malloc nodes (e.g. VM regions, threads) whose description matches pattern
layout
histogram
references
contents
error in -debug=<classes> pattern '%s': %s
Region
Thread
.*%@
%@.*
error in -debug=<region-description> pattern '%s': %s
maxInteriorOffset
suppressOutput
blacklist
outputFile
unable to open output file "%s" for writing: %s (%d)
ipsIncidentID
rateLimit
nonIPSMemgraphCount
vmalso
novm
vmonly
vmPageStatistics
checkAbandoned
postprocessGraph
unknown argument: %@
no process specified
%s[%d]: [fatal] unable to read input graph: %s
%s[%d]: Process %d is not debuggable.
Due to security restrictions, leaks cannot show memory contents of restricted processes.
-[scanner processSnapshotGraph]
v16@?0^v8
%s[%d]: [fatal] ignoring --outputGraph option as path provided would overwrite the source graph file
leaks Report Version:  2.0
v16@?0i8I12
gather VM region data
%s[%d]: [fatal] unable to instantiate a memory scanner.
addRootNodesFromTask
addMallocNodesFromTask
%s[%d]: [fatal] target process no longer exists; abandoning...
archiving graph
length
bug_type
memgraph
name
displayName
incidentID
%s[%d]: [fatal] unable to write JSON header: %s
write graph to file
%@[%d].XXXXXX.%@
%s[%d]: [fatal] unable to create file "%s" for memory graph: %d %s
%s[%d]: [fatal] unable to write graph to output file "%s": %s
%@_%@
LogType
Output graph successfully written to '%s' [%3.2f MB]
memgraph.%@
Will not upload memgraph. rate limits: global=%lf proc=%lf. rand=%lf
memgraph.CountLimit
memgraph.%@.CountLimit
Will not take memgraph, because the limit of %.0lf graphs has been reached
%@.t
%@.signal
%@.exponent
%@.numerator
%@.coef_denominator
com.apple.da
mobile
v68@?0I8I12I16{?=^{?}{?=QIQ}^{?}}20^B60
SCANNING %s
REFERENCES TO THIS: %u
   STRONG: %u  CONSERVATIVE: %u  WEAK UU etc: %u
   SELF: %u
  SELF-REF
   %s
v28@?0I8I12I16^B20
LAYOUT OF %s (%s)
%llu bytes into 
--> %@%@
%5u: %s%s%s  %s
v32@?0@"VMUFieldInfo"8Q16^B24
v16@?0@"VMUClassInfo"8
%5u: <extra space>[%llu]
CONTENTS:
%u POINTERS FROM %s
v20@?0I8^B12
NODE COUNT:  %u   OWNING-REFS COUNT: %u   AVERAGE OWNING-REFS PER NODE: %.2f
    %10u %s references
SELF-REFERENCES:  %u
%26lu   %8lu
   leaked blocks and VM regions
   %s
%s[%d]: [fatal] %s
v44@?0I8{?=Qb60b4@}12^B36
%s[%d]: [fatal] address provided for reference tracing (%#llx) not found in target process' heap
Tracing: %s
C16@?0I8C12
B28@?0I8I12I16*20
v12@?0I8
Found %u root%s referencing: %s
This is a reverse reference tree showing how the specified block is referenced.
The top node is the specified block, the next level down are blocks that reference that, and so on.
The number at the start of each line is the number of paths-to-roots going through that node.
This reverse reference tree can be imported into Instruments using Import Sample Data to allow data mining.
printReferenceTree identifying root regions
printReferenceTree building call tree from references
__DATA
%@ %@
Stack
Stack of %@
void printReferenceTree(VMUProcessObjectGraph *__strong)
<Unknown Function>
/BuildRoot/Library/Caches/com.apple.xbs/Sources/SamplingTools_Sim/SamplingTools-63075.1/leaks/leaks.m
<Unknown File>
Malloc blocks should not be root nodes of reference graph
__DATA __objc
%@ %@: '%@[]'
unaligned +%lld:  --> %@
 Storage)
 + %llu
%@%s --> %@
%@  dirty: %s  swapped: %s
printReferenceTree addChildCountsIntoNode
printReferenceTree printing call tree
printReferenceTree releasing tree
malloc-block
Call stack: 
[thread %#llx]: 
| %s 
| 0x%llx 
%s:%u 
%s: %#llx  size=%llu  
VM: unknown region type
VM: %@
zone: %s
   %s  %s  %s
  %s
v60@?0r*8I16{?=Qb60b4@}20@"VMUVMRegion"44^B52
%s[%d]: [fatal] unable to inspect heap ranges of target process; it may be using a malloc replacement library without the required support
Process %d: %u nodes malloced for %llu KB
scan for leaks
Process %d: %u leak%s for %llu total leaked bytes.
Process %d: %u object%s abandoned for %llu total abandoned bytes.
Leak
Abandoned
v52@?0I8{?=Qb60b4@}12@"VMUVMRegion"36^B44
%u leaks excluded (not printed)
MallocStackLoggingLite
0x%08x 
< content unavailable >
%5d: [%s]
v32@?0i8r*12B20I24I28
COUNT OF OWNING REFERENCES   NUMBER OF NODES WITH THAT COUNT
containsString:
hasSuffix:
defaultManager
fileExistsAtPath:isDirectory:
isExecutableFileAtPath:
dataWithContentsOfFile:options:error:
localizedDescription
UTF8String
string
processInfo
arguments
arrayWithArray:
objectAtIndexedSubscript:
lastPathComponent
setObject:atIndexedSubscript:
componentsJoinedByString:
appendFormat:
appendString:
length
class
isKindOfClass:
intValue
alloc
initWithTask:getBinariesList:
is64Bit
valueForEnvVar:
stringWithFormat:
numberWithInt:
stringValue
initWithFormat:arguments:
dictionaryWithObjects:forKeys:count:
errorWithDomain:code:userInfo:
init
initWithString:
dealloc
stringWithUTF8String:
currentHandler
handleFailureInMethod:object:file:lineNumber:description:
characterAtIndex:
objectForKey:
setObject:forKey:
rangeOfString:
stringWithString:
addObject:
removeAllObjects
userInfo
code
countByEnumeratingWithState:objects:count:
stringByReplacingOccurrencesOfString:withString:
registerOptionWithLongName:shortName:hasArgument:argumentName:optionDescription:handler:
parseArgumentsWithBlock:
usage:
.cxx_destruct
purposeDescription
setPurposeDescription:
syntaxDescription
setSyntaxDescription:
discussion
setDiscussion:
singleHyphenLongNames
setSingleHyphenLongNames:
parametersShowAsAssignment
setParametersShowAsAssignment:
_purposeDescription
_syntaxDescription
_discussionDescription
_optionDescriptions
_optionBlockByString
_longOptStructs
_shortOpts
_spacing
_singleHyphenLongNames
_parametersShowAsAssignment
arrayWithObjects:count:
mutableCopy
startWithMessage:
copy
boolValue
isEqualToString:
hasPrefix:
directedGraphWithData:error:
stackLogReader
initWithTask:
setDebugTimer:
setScanner:
setSaveNodeLabelsInGraph:
setScanningMask:
processSnapshotGraphWithMallocStackLogs:
defaultOverlay
refineTypesWithOverlay:
refineEdges:withOptions:markingInvalid:
removeMarkedEdges:
withEdgeMarkingMap:
processName
stop
processDescriptionString
binaryImagesDescription
initWithTask:options:
addRootNodesFromTask
addMallocNodesFromTask
setExactScanningEnabled:
setAbandonedMarkingEnabled:
setMaxInteriorOffset:
plistRepresentationWithOptions:
numberWithUnsignedInteger:
setValue:forKey:
dataWithJSONObject:options:error:
dataWithData:
appendBytes:length:
appendData:
stringByAppendingPathComponent:
fileSystemRepresentation
initWithFileDescriptor:closeOnDealloc:
writeData:
closeFile
pathExtension
stringByAppendingPathExtension:
writeToFile:options:error:
stringByStandardizingPath
numberWithDouble:
scannerWithString:
scanDouble:
isAtEnd
invertedGraph
mapTableWithKeyOptions:valueOptions:
nodeDetails:
nodeDescription:
enumerateReferencesOfNode:withBlock:
referenceInfoWithName:
nodeDescription:withDestinationNode:referenceInfo:
stringByAppendingString:
enumerateEdgesOfNode:withBlock:
instanceSize
pointerSize
contentForNode:
className
typeName
offset
bitfieldWidth
size
descriptionOfFieldValueInObjectMemory:scanner:
getLeafFieldAtOffset:leafOffset:
stride
scanType
infoType
fullIvarNameAtOffset:
typedDescription
enumerateTypeFieldsWithBlock:
enumerateClassHierarchyWithBlock:
referenceDescription:withSourceNode:destinationNode:alignmentSpacing:
enumerateNodesWithBlock:
count
displayName
enumerateObjectsWithBlock:
invertEdges
nodeNamespaceSize
breadthFirstSearch:nodeVisitBlock:edgeVisitBlock:
initWithSymbolicator:sampler:options:
addChildWithName:address:count:numBytes:toNode:
invertedNode
stringFromCallTreeIndentIfNoBranches:
withNodeMarkingMap:
nodeCount
vmuVMRegionForNode:
path
isSubmap
type
handleFailureInFunction:file:lineNumber:description:
binarySectionRangeContainingAddress:
binarySectionNameForAddress:
regionSymbolRangeContainingAddress:
addRange:
sort
addUniqueChildWithName:address:count:numBytes:toNode:
rangeForLocation:
regionSymbolNameForAddress:
is64bit
fieldAtOrBeforeOffset:
ivarName
addChildCountsIntoNode
printCallTreeToFile:
regionTracker
usesLiteMode
zoneNameForIndex:
vmRegionRangeInfoForRange:
stackIdentifier
getFramesForStackID:stackFramesBuffer:
getFramesForNode:inLiteZone:stackFramesBuffer:
functionNameForPCaddress:
initWithUTF8String:
containsObject:
sourceFileNameForPCaddress:
sourceLineNumberForPCaddress:
descriptionWithOptions:maximumLength:
binaryName
labelForNode:
copyUserMarked
markReachableNodesFromRoots:inMap:
enumerateMarkedObjects:withBlock:
VMUOptionParser
%s[%d]: [error] 'mach_port_allocate' failed: %s (%d)
%s[%d]: [error] 'mach_port_insert_right' failed: %s (%d)
%s[%d]: [error] 'mach_port_mod_refs' failed: %s (%d)
%s[%d]: [error] 'mach_msg_send' failed: %s (%d)
@16@0:8
v16@0:8
v56@0:8@16c24i28@32@40@?48
@24@0:8@?16
v24@0:8@16
B16@0:8
v20@0:8B16
@"NSString"
@"NSMutableArray"
@"NSMutableDictionary"
^{__CFArray=}
@"NSMutableString"
MbP?
0E@(#)PROGRAM:leaks  PROJECT:SamplingTools-63075.1
3333c
bplist00
BuildMachineOSBuild_
CFBundleDevelopmentRegion_
CFBundleIdentifier_
CFBundleInfoDictionaryVersion\CFBundleName_
CFBundleSupportedPlatforms_
CFBundleVersionZDTCompiler_
DTPlatformBuild^DTPlatformName_
DTPlatformVersionZDTSDKBuildYDTSDKNameWDTXcode\DTXcodeBuild_
MinimumOSVersion]SecTaskAccess^UIDeviceFamilyW16B2657WEnglish_
com.apple.SamplingToolsS6.0]SamplingTools
AppleTVSimulatorS1.0_
"com.apple.compilers.llvm.clang.1_0P_
appletvsimulatorT11.1V15J557_
appletvsimulator11.1T0900U9A229
$%WallowedTsafe
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>task_for_pid-allow</key>
<true/>
</dict>
</plist>
