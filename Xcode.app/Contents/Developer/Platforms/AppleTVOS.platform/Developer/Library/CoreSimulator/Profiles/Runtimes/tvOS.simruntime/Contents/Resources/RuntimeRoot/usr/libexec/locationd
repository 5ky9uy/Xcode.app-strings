% qO
%"qO
%$qO
%&qO
%(qO
%*qO
%,qO
%.qO
%0qO
%2qO
%4qO
%6qO
%8qO
%:qO
%<qO
%>qO
%@qO
%BqO
%DqO
%FqO
%HqO
%JqO
%LqO
%NqO
%PqO
%RqO
%TqO
%VqO
%XqO
%ZqO
%\qO
%^qO
%`qO
%bqO
%dqO
%fqO
%hqO
%jqO
%lqO
%nqO
%pqO
%rqO
%tqO
%vqO
%xqO
%zqO
%|qO
%~qO
%rO
% rO
%"rO
%$rO
%&rO
%(rO
%*rO
%,rO
%.rO
%0rO
%2rO
%4rO
%6rO
%8rO
%:rO
%<rO
%>rO
%@rO
%BrO
%DrO
%FrO
%HrO
%JrO
%LrO
%NrO
%PrO
%RrO
%TrO
%VrO
%XrO
%ZrO
%\rO
%^rO
%`rO
%brO
%drO
%frO
%hrO
%jrO
%lrO
%nrO
%prO
%rrO
%trO
%vrO
%xrO
%zrO
%|rO
%~rO
%sO
% sO
%"sO
%$sO
%&sO
%(sO
%*sO
%,sO
%.sO
%0sO
%2sO
%4sO
%6sO
%8sO
%:sO
%<sO
%>sO
%@sO
%BsO
%DsO
%FsO
%HsO
%JsO
%LsO
%NsO
%PsO
%RsO
%TsO
%VsO
%XsO
%ZsO
%\sO
%^sO
%`sO
%bsO
%dsO
%fsO
%hsO
%jsO
%lsO
%nsO
%psO
%rsO
%tsO
%vsO
%xsO
%zsO
%|sO
%~sO
%tO
% tO
%"tO
%$tO
%&tO
%(tO
%*tO
%,tO
%.tO
%0tO
%2tO
%4tO
%6tO
%8tO
%:tO
%<tO
%>tO
%@tO
%BtO
%DtO
%FtO
%HtO
%JtO
%LtO
%NtO
%PtO
%RtO
%TtO
%VtO
%XtO
%ZtO
%\tO
%^tO
%`tO
%btO
%dtO
%ftO
%htO
%jtO
%ltO
%ntO
%ptO
%rtO
%ttO
%vtO
%xtO
%ztO
%|tO
%~tO
%uO
% uO
%"uO
%$uO
%&uO
%(uO
%*uO
%,uO
%.uO
%0uO
%2uO
%4uO
%6uO
%8uO
%:uO
%<uO
%>uO
%@uO
%BuO
%DuO
%FuO
%HuO
%JuO
%LuO
%NuO
%PuO
%RuO
%TuO
%VuO
%XuO
%ZuO
%\uO
%^uO
%`uO
%buO
%duO
%fuO
%huO
%juO
%luO
%nuO
%puO
%ruO
%tuO
%vuO
%xuO
%zuO
%|uO
%~uO
%vO
% vO
%"vO
%$vO
%&vO
%(vO
%*vO
%,vO
%.vO
%0vO
%2vO
%4vO
%6vO
%8vO
%:vO
%<vO
%>vO
%@vO
%BvO
%DvO
%FvO
%HvO
%JvO
%LvO
%NvO
%PvO
%RvO
%TvO
%VvO
%XvO
%ZvO
%\vO
%^vO
%`vO
%bvO
%dvO
%fvO
%hvO
%jvO
%lvO
%nvO
%pvO
%rvO
%tvO
%vvO
%xvO
%zvO
%|vO
%~vO
%wO
% wO
%"wO
%$wO
%&wO
%(wO
%*wO
%,wO
%.wO
%0wO
%2wO
%4wO
%6wO
%8wO
%:wO
%<wO
%>wO
%@wO
%BwO
%DwO
%FwO
%HwO
%JwO
%LwO
%NwO
%PwO
%RwO
%TwO
%VwO
%XwO
%ZwO
%\wO
%^wO
%`wO
%bwO
%dwO
%fwO
%hwO
%jwO
%lwO
%nwO
%pwO
%rwO
%twO
%vwO
%xwO
%zwO
%|wO
%~wO
%xO
% xO
%"xO
%$xO
%&xO
%(xO
%*xO
%,xO
%.xO
%0xO
%2xO
%4xO
%6xO
%8xO
%:xO
%<xO
%>xO
%@xO
%BxO
%DxO
%FxO
%HxO
%JxO
%LxO
%NxO
%PxO
}x,C
N16CLMotionNotifier10DispatcherE
NSt3__120__shared_ptr_emplaceI10CLSettingsNS_9allocatorIS1_EEEE
?GyroCalibrationForceDoubleEntry
38CLGyroCalibrationDatabaseLocalMultiRun
NSt3__120__shared_ptr_emplaceIN30CLGyroCalibrationDatabase_Type16NotificationDataENS_9allocatorIS2_EEEE
N16CLMotionNotifier14SiloDispatcherIN14CLDeviceMotion6SampleEEE
N14CLDeviceMotion6SampleE
1475
30CLGyroCalibrationDatabaseLocal
NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE
NSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE
N16CLMotionNotifier18CallbackDispatcherIN15CLAccelerometer6SampleEEE
N16CLMotionNotifier18CallbackDispatcherIN6CLGyro6SampleEEE
N16CLMotionNotifier18CallbackDispatcherIN6CLGyro11TemperatureEEE
N16CLMotionNotifier18CallbackDispatcherIN14CLMagnetometer6SampleEEE
N16CLMotionNotifier14SiloDispatcherIN28CLMotionCoprocessorInterface16NotificationDataEEE
N28CLMotionCoprocessorInterface16NotificationDataE
NSt3__110__function6__baseIFviRKN18CLWifiService_Type12NotificationERKNS2_16NotificationDataEEEE
34CLGyroCalibrationDatabaseLocalBase
@UD!
23CLCompassDatabaseDaemon
27CLCompassDatabaseController
NSt3__120__shared_ptr_emplaceIN22CLCompassDatabase_Type16NotificationDataENS_9allocatorIS2_EEEE
20CLRunningBufferStatsIdE
17CLRunningVector3dIfE
20CLRunningBufferStatsIfE
NSt3__120__shared_ptr_pointerIP23CLCompassBiasClusteringNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI23CLCompassBiasClusteringEE
10CLVector3dIfE
30CLGyroBiasEstimatorClientLocal
32CLGeomagneticModelProviderDaemon
NSt3__120__shared_ptr_emplaceIN31CLGeomagneticModelProvider_Type16NotificationDataENS_9allocatorIS2_EEEE
39CLGyroCalibrationDatabaseLocalNonlinear
18CLCoverStateDaemon
14CLNotifierBase
19CLGestureDataLogger
10CLNotifierIN24CLGestureDataLogger_Type12NotificationENS0_16NotificationDataEccE
@(#)PROGRAM:locationd  PROJECT:CoreLocation-2201
NSt3__110__function6__funcIZN25CLMicroLocationAWDMetricsC1ER23CLMicroLocationDatabaseE3$_0NS_9allocatorIS5_EEFvNS_8functionIFbvEEEEEE
NSt3__110__function6__baseIFvNS_8functionIFbvEEEEEE
ZN25CLMicroLocationAWDMetricsC1ER23CLMicroLocationDatabaseE3$_0
NSt3__110__function6__funcIZN25CLMicroLocationAWDMetricsC1ER23CLMicroLocationDatabaseE3$_1NS_9allocatorIS5_EEFvNS_8functionIFbvEEEEEE
ZN25CLMicroLocationAWDMetricsC1ER23CLMicroLocationDatabaseE3$_1
NSt3__110__function6__funcIZN25CLMicroLocationAWDMetricsC1ER23CLMicroLocationDatabaseE3$_2NS_9allocatorIS5_EEFvNS_8functionIFbvEEEEEE
ZN25CLMicroLocationAWDMetricsC1ER23CLMicroLocationDatabaseE3$_2
31CLMicroLocationWifiScanStrategy
N13CLWifiScanner21IWifiScanningStrategyE
NSt3__110__function6__funcIN12_GLOBAL__N_124LocalizerChannelIteratorENS_9allocatorIS3_EEFNS_6vectorIiNS4_IiEEEEvEEE
NSt3__110__function6__baseIFNS_6vectorIiNS_9allocatorIiEEEEvEEE
N12_GLOBAL__N_124LocalizerChannelIteratorE
NSt3__110__function6__funcIZN31CLMicroLocationWifiScanStrategy9Recording19makeChannelIteratorENS_6vectorI35CLMicroLocationWiFiChannelHistogramNS_9allocatorIS5_EEEEE3$_0NS6_IS9_EEFNS4_IiNS6_IiEEEEvEEE
ZN31CLMicroLocationWifiScanStrategy9Recording19makeChannelIteratorENSt3__16vectorI35CLMicroLocationWiFiChannelHistogramNS1_9allocatorIS3_EEEEE3$_0
NSt3__120__shared_ptr_emplaceIN13CLWifiScanner16WifiScanSettingsENS_9allocatorIS2_EEEE
ePs(@5
Egk~)
=*.`
f(<=4
. Bc
m\R
%$rD
zeA,@
`>j'5
i+8h6
27aI
F)d;[F
N5boost16exception_detail10clone_implINS0_19error_info_injectorISt14overflow_errorEEEE
N5boost16exception_detail19error_info_injectorISt14overflow_errorEE
N5boost16exception_detail10clone_implINS0_19error_info_injectorISt12domain_errorEEEE
N5boost16exception_detail19error_info_injectorISt12domain_errorEE
N5boost4math14rounding_errorE
N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_4math14rounding_errorEEEEE
N5boost16exception_detail19error_info_injectorINS_4math14rounding_errorEEE
Xww0
Xww0
N12_GLOBAL__N_121BufferedInserterErrorE
NSt3__110__function6__funcIZN23CLMicroLocationDatabase9DbFlusherC1ERS2_E4$_22NS_9allocatorIS5_EEFvNS_8functionIFbvEEEEEE
ZN23CLMicroLocationDatabase9DbFlusherC1ERS_E4$_22
40CLMicroLocationFingerprintDatabaseSource
N37CLMicroLocationFingerprintDataSources24IInterruptibleDataSourceE
?25CLLaplacianKernelFunction
16CLKernelFunction
27CLEuclideanDistanceFunction
18CLDistanceFunction
34CLEuclideanSquaredDistanceFunction
24CLGaussianKernelFunction
27CLExponentialKernelFunction
23CLUniformKernelFunction
NSt3__110__function6__funcIPFdRK26CLMicroLocationFingerprintS4_ENS_9allocatorIS6_EES5_EE
NSt3__110__function6__baseIFdRK26CLMicroLocationFingerprintS4_EEE
PFdRK26CLMicroLocationFingerprintS1_E
FdRK26CLMicroLocationFingerprintS1_E
NSt3__110__function6__funcIZN25CLMicroLocationAlgorithms33createFingerprintDistanceFunctionERK25CLMicroLocationDictionaryE3$_0NS_9allocatorIS6_EEFdRK26CLMicroLocationFingerprintSB_EEE
ZN25CLMicroLocationAlgorithms33createFingerprintDistanceFunctionERK25CLMicroLocationDictionaryE3$_0
NSt3__110__function6__funcIZN25CLMicroLocationAlgorithms33createFingerprintDistanceFunctionERK25CLMicroLocationDictionaryE3$_1NS_9allocatorIS6_EEFdRK26CLMicroLocationFingerprintSB_EEE
ZN25CLMicroLocationAlgorithms33createFingerprintDistanceFunctionERK25CLMicroLocationDictionaryE3$_1
NSt3__110__function6__funcIPFfRK24CLDistanceMatrixTemplateI24CLSymmetricMatrixStorageIfEENS_4pairImmEES9_S9_ENS_9allocatorISB_EESA_EE
NSt3__110__function6__baseIFfRK24CLDistanceMatrixTemplateI24CLSymmetricMatrixStorageIfEENS_4pairImmEES9_S9_EEE
PFfRK24CLDistanceMatrixTemplateI24CLSymmetricMatrixStorageIfEENSt3__14pairImmEES7_S7_E
FfRK24CLDistanceMatrixTemplateI24CLSymmetricMatrixStorageIfEENSt3__14pairImmEES7_S7_E
NSt3__110__function6__funcIZN26CLMicroLocationMaintenanceC1ER23CLMicroLocationDatabaseE3$_0NS_9allocatorIS5_EEFvNS_8functionIFbvEEEEEE
ZN26CLMicroLocationMaintenanceC1ER23CLMicroLocationDatabaseE3$_0
NSt3__110__function6__funcIZN26CLMicroLocationMaintenanceC1ER23CLMicroLocationDatabaseE3$_1NS_9allocatorIS5_EEFvNS_8functionIFbvEEEEEE
ZN26CLMicroLocationMaintenanceC1ER23CLMicroLocationDatabaseE3$_1
NSt3__110__function6__funcIZN26CLMicroLocationMaintenanceC1ER23CLMicroLocationDatabaseE3$_2NS_9allocatorIS5_EEFvNS_8functionIFbvEEEEEE
ZN26CLMicroLocationMaintenanceC1ER23CLMicroLocationDatabaseE3$_2
39CLMicroLocationNearestNeighborAlgorithm
34CLMicroLocationDendrogramAlgorithm
30CLMicroLocationKMeansAlgorithm
N25CLMicroLocationAlgorithms8ILearnerE
N20CLMicroLocationProto8WiFiRssiE
N20CLMicroLocationProto9WiFiRangeE
N20CLMicroLocationProto23ATVAirplayBluetoothRssiE
N20CLMicroLocationProto20HomeKitBluetoothRssiE
N20CLMicroLocationProto11MeasurementE
N20CLMicroLocationProto11FingerprintE
N20CLMicroLocationProto17ClusterRecordingsE
N20CLMicroLocationProto5ModelE
N20CLMicroLocationProto16AccelerometerXYZE
N20CLMicroLocationProto19LocalizationRequestE
N20CLMicroLocationProto9AppLaunchE
N20CLMicroLocationProto14SiriInvocationE
N20CLMicroLocationProto11BacklightOnE
N20CLMicroLocationProto23BatteryChargerConnectedE
N20CLMicroLocationProto9StepCountE
N20CLMicroLocationProto15ForcedRecordingE
N20CLMicroLocationProto14FirstWakeOfDayE
N20CLMicroLocationProto16HomeKitAccessoryE
N20CLMicroLocationProto12HomeKitSceneE
N20CLMicroLocationProto11NotesLaunchE
N20CLMicroLocationProto14RecordingEventE
N20CLMicroLocationProto15ChannelAndCountE
N20CLMicroLocationProto13WifiHistogramE
N20CLMicroLocationProto13ConfigurationE
25CLMicroLocationDictionary
N37CLMicroLocationFingerprintDataSources24IInterruptibleDataSource18CancelledExceptionE
NSt3__110__function6__funcIZN22CLMicroLocationLearnerC1ERNS2_16ILearnerDelegateER23CLMicroLocationDatabaseE3$_0NS_9allocatorIS7_EEFvNS_8functionIFbvEEEEEE
ZN22CLMicroLocationLearnerC1ERNS_16ILearnerDelegateER23CLMicroLocationDatabaseE3$_0
NSt3__110__function6__funcIZN22CLMicroLocationLearnerC1ERNS2_16ILearnerDelegateER23CLMicroLocationDatabaseE3$_1NS_9allocatorIS7_EEFvNS_8functionIFbvEEEEEE
ZN22CLMicroLocationLearnerC1ERNS_16ILearnerDelegateER23CLMicroLocationDatabaseE3$_1
NSt3__110__function6__funcIZN22CLMicroLocationLearnerC1ERNS2_16ILearnerDelegateER23CLMicroLocationDatabaseE3$_2NS_9allocatorIS7_EEFvNS_8functionIFbvEEEEEE
ZN22CLMicroLocationLearnerC1ERNS_16ILearnerDelegateER23CLMicroLocationDatabaseE3$_2
NSt3__110__function6__funcIZZN23CLMicroLocationDatabase23bufferedInsertOrReplaceIN25CLMicroLocationModelTable5EntryEEEbNS_6vectorIT_NS_9allocatorIS7_EEEEENKUlvE_clEvEUlvE_NS8_ISC_EEFbvEEE
ZZN23CLMicroLocationDatabase23bufferedInsertOrReplaceIN25CLMicroLocationModelTable5EntryEEEbNSt3__16vectorIT_NS3_9allocatorIS5_EEEEENKUlvE_clEvEUlvE_
NSt3__110__function6__funcIZN24CLMicroLocationAnalyticsC1ERNS2_18IAnalyticsDelegateER23CLMicroLocationDatabaseE3$_0NS_9allocatorIS7_EEFvNS_8functionIFbvEEEEEE
ZN24CLMicroLocationAnalyticsC1ERNS_18IAnalyticsDelegateER23CLMicroLocationDatabaseE3$_0
NSt3__110__function6__funcIZZN23CLMicroLocationDatabase23bufferedInsertOrReplaceIN33CLMicroLocationConfigurationTable5EntryEEEbNS_6vectorIT_NS_9allocatorIS7_EEEEENKUlvE_clEvEUlvE_NS8_ISC_EEFbvEEE
ZZN23CLMicroLocationDatabase23bufferedInsertOrReplaceIN33CLMicroLocationConfigurationTable5EntryEEEbNSt3__16vectorIT_NS3_9allocatorIS5_EEEEENKUlvE_clEvEUlvE_
33CLMicroLocationNullSpaceAlgorithm
N25CLMicroLocationAlgorithms10ILocalizerE
NSt3__110__function6__funcIPFdRKNS_8multisetIdNS_4lessIdEENS_9allocatorIdEEEEENS5_ISB_EEFdS7_EEE
NSt3__110__function6__baseIFdNS_8multisetIdNS_4lessIdEENS_9allocatorIdEEEEEEE
PFdRKNSt3__18multisetIdNS_4lessIdEENS_9allocatorIdEEEEE
FdRKNSt3__18multisetIdNS_4lessIdEENS_9allocatorIdEEEEE
NSt3__110__function6__funcIZZN23CLMicroLocationDatabase23bufferedInsertOrReplaceIN35CLMicroLocationRecordingEventsTable5EntryEEEbNS_6vectorIT_NS_9allocatorIS7_EEEEENKUlvE_clEvEUlvE_NS8_ISC_EEFbvEEE
NSt3__110__function6__baseIFbvEEE
ZZN23CLMicroLocationDatabase23bufferedInsertOrReplaceIN35CLMicroLocationRecordingEventsTable5EntryEEEbNSt3__16vectorIT_NS3_9allocatorIS5_EEEEENKUlvE_clEvEUlvE_
NSt3__110__function6__funcIZZN23CLMicroLocationDatabase23bufferedInsertOrReplaceIN31CLMicroLocationMeasurementTable5EntryEEEbNS_6vectorIT_NS_9allocatorIS7_EEEEENKUlvE_clEvEUlvE_NS8_ISC_EEFbvEEE
ZZN23CLMicroLocationDatabase23bufferedInsertOrReplaceIN31CLMicroLocationMeasurementTable5EntryEEEbNSt3__16vectorIT_NS3_9allocatorIS5_EEEEENKUlvE_clEvEUlvE_
20CLMicroLocationLogic
44CLMicroLocationSettledStateEstimatorDelegate
0123456789ABCDEF
NSt3__120__shared_ptr_emplaceI31CLMicroLocationWifiScanStrategyNS_9allocatorIS1_EEEE
NSt3__110__function6__funcIPFNS_8functionIFNS_6vectorIiNS_9allocatorIiEEEEvEEENS3_I35CLMicroLocationWiFiChannelHistogramNS4_IS9_EEEEENS4_ISD_EESC_EE
NSt3__110__function6__baseIFNS_8functionIFNS_6vectorIiNS_9allocatorIiEEEEvEEENS3_I35CLMicroLocationWiFiChannelHistogramNS4_IS9_EEEEEEE
PFNSt3__18functionIFNS_6vectorIiNS_9allocatorIiEEEEvEEENS1_I35CLMicroLocationWiFiChannelHistogramNS2_IS7_EEEEE
FNSt3__18functionIFNS_6vectorIiNS_9allocatorIiEEEEvEEENS1_I35CLMicroLocationWiFiChannelHistogramNS2_IS7_EEEEE
NSt3__110__function6__funcIZN20CLMicroLocationLogic15onForegroundAppENS_6chrono10time_pointIN2cl6chrono19CFAbsoluteTimeClockENS3_8durationIeNS_5ratioILl1ELl1EEEEEEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE3$_6NSG_ISJ_EEFN20CLMicroLocationProto14RecordingEventEvEEE
NSt3__110__function6__baseIFN20CLMicroLocationProto14RecordingEventEvEEE
ZN20CLMicroLocationLogic15onForegroundAppENSt3__16chrono10time_pointIN2cl6chrono19CFAbsoluteTimeClockENS1_8durationIeNS0_5ratioILl1ELl1EEEEEEENS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEE3$_6
NSt3__110__function6__funcIZN20CLMicroLocationLogic15onForegroundAppENS_6chrono10time_pointIN2cl6chrono19CFAbsoluteTimeClockENS3_8durationIeNS_5ratioILl1ELl1EEEEEEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE3$_7NSG_ISJ_EEFN20CLMicroLocationProto14RecordingEventEvEEE
ZN20CLMicroLocationLogic15onForegroundAppENSt3__16chrono10time_pointIN2cl6chrono19CFAbsoluteTimeClockENS1_8durationIeNS0_5ratioILl1ELl1EEEEEEENS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEE3$_7
NSt3__110__function6__funcIZN20CLMicroLocationLogic25onForceRecordNotificationENS_6chrono10time_pointIN2cl6chrono19CFAbsoluteTimeClockENS3_8durationIeNS_5ratioILl1ELl1EEEEEEEE3$_9NS_9allocatorISD_EEFN20CLMicroLocationProto14RecordingEventEvEEE
ZN20CLMicroLocationLogic25onForceRecordNotificationENSt3__16chrono10time_pointIN2cl6chrono19CFAbsoluteTimeClockENS1_8durationIeNS0_5ratioILl1ELl1EEEEEEEE3$_9
NSt3__110__function6__funcIZN20CLMicroLocationLogic16onFirstWakeOfDayENS_6chrono10time_pointIN2cl6chrono19CFAbsoluteTimeClockENS3_8durationIeNS_5ratioILl1ELl1EEEEEEEE4$_10NS_9allocatorISD_EEFN20CLMicroLocationProto14RecordingEventEvEEE
ZN20CLMicroLocationLogic16onFirstWakeOfDayENSt3__16chrono10time_pointIN2cl6chrono19CFAbsoluteTimeClockENS1_8durationIeNS0_5ratioILl1ELl1EEEEEEEE4$_10
NSt3__110__function6__funcIZN20CLMicroLocationLogic14onHomeKitSceneENS_6chrono10time_pointIN2cl6chrono19CFAbsoluteTimeClockENS3_8durationIeNS_5ratioILl1ELl1EEEEEEERKN20CLMicroLocationProto12HomeKitSceneEE4$_12NS_9allocatorISH_EEFNSD_14RecordingEventEvEEE
ZN20CLMicroLocationLogic14onHomeKitSceneENSt3__16chrono10time_pointIN2cl6chrono19CFAbsoluteTimeClockENS1_8durationIeNS0_5ratioILl1ELl1EEEEEEERKN20CLMicroLocationProto12HomeKitSceneEE4$_12
NSt3__110__function6__funcIZN20CLMicroLocationLogic18onHomeKitAccessoryENS_6chrono10time_pointIN2cl6chrono19CFAbsoluteTimeClockENS3_8durationIeNS_5ratioILl1ELl1EEEEEEERKN20CLMicroLocationProto16HomeKitAccessoryEE4$_13NS_9allocatorISH_EEFNSD_14RecordingEventEvEEE
ZN20CLMicroLocationLogic18onHomeKitAccessoryENSt3__16chrono10time_pointIN2cl6chrono19CFAbsoluteTimeClockENS1_8durationIeNS0_5ratioILl1ELl1EEEEEEERKN20CLMicroLocationProto16HomeKitAccessoryEE4$_13
N5boost6detail17sp_counted_impl_pINS_6random23mersenne_twister_engineIjLm32ELm624ELm397ELm31ELj2567483615ELm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm18ELj1812433253EEEEE
N5boost6detail15sp_counted_baseE
N5boost16exception_detail10clone_implINS0_19error_info_injectorISt16invalid_argumentEEEE
N5boost16exception_detail19error_info_injectorISt16invalid_argumentEE
41CLMicroLocationFingerprintStdVectorSource
N30CLMicroLocationDatabaseColumns20InvalidDatabaseValueE
N5boost5uuids4uuidE
NSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE
NSt3__121__basic_string_commonILb1EEE
32CLCoarseCellTilesManagerExternal
33CLICoarseCellTilesManagerExternal
]R`)@K
?A/E
__'o
@*G%1
@BCt
a_'o
@)G%1
@BCt
u]g"
H+{5
__'o
@~5g
?)G%1
??Ct
s]g"
H+{5
`_'o
@~5g
?+G%1
?ACt
v]g"
H+{5
?enm
?g(EF
`_'o
?+G%1
?@Ct
Yp;#
B}z}
?$g!G
?46CLLogNormalNormalHypothesisTestUnlockEstimator
18CLIUnlockEstimator
18CLNatalieWalkModel
15CLSwimDataStore
19CLSwimDataInterface
NSt3__110__function6__funcIZNK15CLSwimDataStore16getStrokesPerLapE15CLSwimStyleTypeiE3$_0NS_9allocatorIS4_EEFbRK11CLSwimEntryEEE
NSt3__110__function6__baseIFbRK11CLSwimEntryEEE
ZNK15CLSwimDataStore16getStrokesPerLapE15CLSwimStyleTypeiE3$_0
@17CLTileSyncManager
18CLITileSyncManager
NSt3__120__shared_ptr_emplaceI19CLConnectionMessageNS_9allocatorIS1_EEEE
52CLStreamingAwareLocationProviderLocalGPSStateMachine
26CLStreamedLocationProvider
N31CLStreamedLocationProvider_Type6ClientE
N23CLLocationProvider_Type6ClientE
N18CLLocationProvider6ClientE
N10CLNotifierIN23CLLocationProvider_Type12NotificationENS0_16NotificationDataEcNS0_7RegInfoEE6ClientE
20CLNotifierClientBase
NSt3__120__shared_ptr_emplaceIN23CLLocationProvider_Type16NotificationDataENS_9allocatorIS2_EEEE
29CLSensorFusionService9AxisSPU
@19CLNatalieDanceModel
P@NSt3__120__shared_ptr_pointerIP26CLActivityLoggerSizePolicyNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI26CLActivityLoggerSizePolicyEE
NSt3__120__shared_ptr_pointerIP25CLActivityLoggerMsgPolicyNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI25CLActivityLoggerMsgPolicyEE
NSt3__120__shared_ptr_pointerIP26CLActivityLoggerRatePolicyNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI26CLActivityLoggerRatePolicyEE
31CLFenceMonitorWifiLogicExternal
32CLIFenceMonitorWifiLogicExternal
333333
18CLOdometerNotifier
10CLNotifierIN23CLOdometerNotifier_Type12NotificationENS0_16NotificationDataEccE
N23CLOdometerNotifier_Type6ClientE
N10CLNotifierIN23CLOdometerNotifier_Type12NotificationENS0_16NotificationDataEccE6ClientE
NSt3__120__shared_ptr_pointerIP21CLElevationRecorderDbNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI21CLElevationRecorderDbEE
NSt3__120__shared_ptr_pointerIP20CLActivityAggregatorI22CLSignificantElevationN12CLActivityDB22NoDataProtectionPolicyEENS_14default_deleteIS5_EENS_9allocatorIS5_EEEE
NSt3__114default_deleteI20CLActivityAggregatorI22CLSignificantElevationN12CLActivityDB22NoDataProtectionPolicyEEEE
NSt3__120__shared_ptr_emplaceIN23CLOdometerNotifier_Type16NotificationDataENS_9allocatorIS2_EEEE
vHGB(knN
55CLStreamingAwareLocationProviderPassthroughStateMachine
22CLCalorieSwimmingModel
Afffff
@<@A
15CLNameValuePair
14CLFileDownload
CLPrivateDataCapture.proto
CLPrivateData
CLGnssMeasApi.proto"
CLPrivateDataCapture
accel
.CLPrivateData.Accel
gyro
.CLPrivateData.Gyro
baro
.CLPrivateData.Baro
location
.CLPrivateData.Location
motion_state
.CLPrivateData.MotionState
motion_state_observer
2".CLPrivateData.MotionStateObserver
natalimetry
.CLPrivateData.Natalimetry
timer
.CLPrivateData.Timer
2$.CLPrivateData.DigitalElevationModel
map_vector
.CLPrivateData.MapVector
device_status
.CLPrivateData.DeviceStatus
signal_environment
2 .CLPrivateData.SignalEnvironment
gnss_meas
20.CLPrivateData.MeasurementReportCallbackContents
.CLPrivateData.Magnetometer
reset
.CLPrivateData.Reset"e
TimeStamp
cf_absolute_time_s
mach_absolute_time_s
mach_continuous_time_s
AccelSample
applicable_time
.CLPrivateData.TimeStamp
x_mps2
y_mps2
z_mps2
Accel
event_receipt_time
.CLPrivateData.TimeStamp
sample
.CLPrivateData.AccelSample"r
GyroSample
applicable_time
.CLPrivateData.TimeStamp
x_radps
y_radps
z_radps
Gyro
event_receipt_time
.CLPrivateData.TimeStamp
sample
.CLPrivateData.GyroSample"f
BaroSample
applicable_time
.CLPrivateData.TimeStamp
pressure
temperature
Baro
event_receipt_time
.CLPrivateData.TimeStamp
sample
.CLPrivateData.BaroSample"?
ClientLocationCoordinate
latitude
longitude
DaemonLocation
suitability
2;.CLPrivateData.DaemonLocation.ClientLocationSuitabilityType:
ST_UNKNOWN
coordinate
2'.CLPrivateData.ClientLocationCoordinate
horizontal_accuracy
altitude
vertical_accuracy
speed
speed_accuracy
course
course_accuracy
timestamp
confidence
lifespan
type
2*.CLPrivateData.DaemonLocation.LocationType
raw_coordinate
2'.CLPrivateData.ClientLocationCoordinate
raw_course
floor
integrity
23.CLPrivateData.DaemonLocation.LocationIntegrityType
reference_frame
2>.CLPrivateData.DaemonLocation.ClientLocationReferenceFrameType:
RF_UNKNOWN
raw_reference_frame
2>.CLPrivateData.DaemonLocation.ClientLocationReferenceFrameType:
RF_UNKNOWN"b
ClientLocationSuitabilityType
ST_UNKNOWN
ST_ROUTE_GUIDANCE
ST_OTHER
ST_ANY
LocationType
LT_UNKNOWN
LT_GPS
LT_NMEA
LT_ACCESSORY
LT_WIFI
LT_SKYHOOK_OBSOLETE
LT_CELL
LT_LAC
LT_MCC
LT_GPS_COARSE
LT_PIPELINE
LT_MAX
LocationIntegrityType
LI_NONE
LI_LOW
LI_MEDIUM
LI_HIGH
 ClientLocationReferenceFrameType
RF_UNKNOWN
RF_WGS84
RF_CHINA_SHIFTED
PressureSample
value
DaemonLocationPrivate
odometer
delta_distance
delta_distance_accuracy
timestamp_gps
mach_time
horz_unc_semi_maj
horz_unc_semi_min
horz_unc_semi_maj_az
is_fitness_match
match_quality
25.CLPrivateData.DaemonLocationPrivate.MatchQualityType
match_coordinate
2'.CLPrivateData.ClientLocationCoordinate
match_course
match_form_of_way
match_road_class
match_shifted
pressure
.CLPrivateData.PressureSample
undulation_model
28.CLPrivateData.DaemonLocationPrivate.UndulationModelType:
UM_INVALID
undulation
special_coordinate
2'.CLPrivateData.ClientLocationCoordinate
special_horizontal_accuracy
mach_continuous_time
origin_device
2C.CLPrivateData.DaemonLocationPrivate.ClientLocationOriginDeviceType:
OD_UNKNOWN
!is_matcher_propagated_coordinates
MatchQualityType
MQ_UNKNOWN
MQ_NONE
MQ_STRONG
MQ_AMBIGUOUS
UndulationModelType
UM_INVALID
UM_UNKNOWN
UM_DMA
UM_EGM08
ClientLocationOriginDeviceType
OD_UNKNOWN
OD_LOCAL
OD_REMOTE
TechnologyStatus
location_type
2,.CLPrivateData.TechnologyStatus.LocationType:
LT_UNKNOWN
active
LocationType
LT_UNKNOWN
LT_GPS
LT_NMEA
LT_ACCESSORY
LT_WIFI
LT_SKYHOOK_OBSOLETE
LT_CELL
LT_LAC
LT_MCC
LT_GPS_COARSE
LT_PIPELINE
VehicleSpeed
timestamp
speed
VehicleHeading
timestamp
true_heading
XtraFileAvailable
when
where
LocationDerivedSpeed
timestamp
speed
uncertainty
Location
event_receipt_time
.CLPrivateData.TimeStamp
client
location
.CLPrivateData.DaemonLocation
location_private
2$.CLPrivateData.DaemonLocationPrivate
status
.CLPrivateData.TechnologyStatus
active
odometer
signal_quality
2).CLPrivateData.Location.SignalQualityType:
SQ_UNKNOWN
vehicle_speed
.CLPrivateData.VehicleSpeed
vehicle_heading
.CLPrivateData.VehicleHeading
xtra_file_available
2 .CLPrivateData.XtraFileAvailable
motion_detected
2*.CLPrivateData.Location.MotionDetectedType:
MD_UNKNOWN
location_derived_speed
2#.CLPrivateData.LocationDerivedSpeed"=
SignalQualityType
SQ_UNKNOWN
SQ_POOR
SQ_GOOD
MotionDetectedType
MD_UNKNOWN
MD_YES
MD_NO
MotionActivity
type
2%.CLPrivateData.DominantMotionModeType:
DM_UNKNOWN
confidence
2,.CLPrivateData.MotionActivity.ConfidenceType:
C_UNKNOWN
mounted_state
2..CLPrivateData.MotionActivity.MountedStateType:
MO_UNKNOWN
mounted_confidence
2,.CLPrivateData.MotionActivity.ConfidenceType:
C_UNKNOWN
is_standing
tilt
timestamp
is_vehicle_connected
exit_state
22.CLPrivateData.MotionActivity.VehicleExitStateType:
VE_UNKNOWN
est_exit_time
start_time
raw_type
2%.CLPrivateData.DominantMotionModeType
raw_confidence
2,.CLPrivateData.MotionActivity.ConfidenceType:
C_UNKNOWN"F
MountedStateType
MO_UNKNOWN
MO_NOT_MOUNTED
MO_MOUNTED
ConfidenceType
C_UNKNOWN
C_LOW
C_MEDIUM
C_HIGH
VehicleExitStateType
VE_UNKNOWN
VE_NO_DETECTION
VE_PREHEAT
VE_DETECTED
MotionState
event_receipt_time
.CLPrivateData.TimeStamp
client
activity
.CLPrivateData.MotionActivity"m
WorkoutUpdate
activity_type
2%.CLPrivateData.DominantMotionModeType:
DM_UNKNOWN
start_time
MotionStateObserver
event_receipt_time
.CLPrivateData.TimeStamp
client
workout_update
.CLPrivateData.WorkoutUpdate"
BodyMetrics
gender
20.CLPrivateData.BodyMetrics.NatalimeterGenderType:
NG_UNKNOWN
height_m
weight_kg
vo2max
hrmin
hrmax
hronset
condition
2,.CLPrivateData.BodyMetrics.UserConditionType:
UC_UNKNOWN
run_vo2max
NatalimeterGenderType
NG_UNKNOWN
NG_MALE
NG_FEMALE
UserConditionType
UC_UNKNOWN
UC_ABLE_BODIED
UC_AMPUTATION
UC_SPINA_BIFIDA
UC_SPINAL_CORD_INJURY_HIGH
UC_SPINAL_CORD_INJURY_MED
UC_SPINAL_CORD_INJURY_LOW
UC_OTHER
Natalimetry
event_receipt_time
.CLPrivateData.TimeStamp
client
body_metrics
.CLPrivateData.BodyMetrics"=
Timer
event_receipt_time
.CLPrivateData.TimeStamp"
DigitalElevationModel
applicable_time
.CLPrivateData.TimeStamp
ground_altitude_above_wgs84_m
!ground_altitude_above_wgs84_unc_m
undulation_m
slope_in_direction_of_travel
max_abs_slope
client
DirectionOfTravel
applicable_time
.CLPrivateData.TimeStamp
latitude_deg
longitude_deg
course_deg
course_unc_deg
road_width_m
start_latitude_deg
start_longitude_deg
road_length_m
speed_mps
is_one_way
is_rail_way
is_tunnel
is_bridge
MapVector
event_receipt_time
.CLPrivateData.TimeStamp
client
dot_data
2 .CLPrivateData.DirectionOfTravel"
ReachabilityState
previous
21.CLPrivateData.ReachabilityState.ReachabilityType
current
21.CLPrivateData.ReachabilityState.ReachabilityType
about_to_sleep
recently_woke
ReachabilityType
RT_UNKNOWN
RT_UNAVAILABLE
RT_SMALL
RT_LARGE
RT_UNACHIEVABLE
Battery
level
charged
connected
charger_type
2).CLPrivateData.Battery.BatteryChargerType:
BC_UNKNOWN
was_connected
BatteryChargerType
BC_UNKNOWN
BC_NONE
BC_USB
BC_EXTERNAL
DeviceStatus
event_receipt_time
.CLPrivateData.TimeStamp
client
notification_data
2,.CLPrivateData.DeviceStatus.NotificationType:
NT_UNKNOWN
reachability
2 .CLPrivateData.ReachabilityState
battery
.CLPrivateData.Battery
airplane_mode
display_on
lock_screen
is_battery_saver_mode_enabled
push_service_connected
wireless_modem_clients
thermal_level
restricted_mode
NotificationType
NT_UNKNOWN
NT_INIT
NT_SHUTDOWN
NT_SLEEP
NT_WAKE
NT_LINGER
NT_PENALTY_FREE
NT_REACHABILITY
NT_BATTERY
NT_AIRPLANE_MODE
NT_MIGRATION
NT_DISPLAY
NT_LOCKSCREEN
NT_PUSH_SERVICE
NT_WIRELESS_MODEM
NT_THERMAL
NT_RESTRICTED_POWER_MODE
NT_BATTERY_SAVER_MODE
SignalEnvironment
applicable_time
.CLPrivateData.TimeStamp
coarse_signal_environment
26.CLPrivateData.SignalEnvironment.SignalEnvironmentType:
SE_UNKNOWN
"high_resolution_signal_environment
26.CLPrivateData.SignalEnvironment.SignalEnvironmentType:
SE_UNKNOWN
client
SignalEnvironmentType
SE_UNKNOWN
SE_RURAL
SE_URBAN
SE_DENSE_URBAN
SE_DENSE_URBAN_CANYON
SE_MARINE
MagSample
applicable_time
.CLPrivateData.TimeStamp
x_uT
y_uT
z_uT
Magnetometer
event_receipt_time
.CLPrivateData.TimeStamp
sample
.CLPrivateData.MagSample"=
Reset
event_receipt_time
.CLPrivateData.TimeStamp*
DominantMotionModeType
DM_UNKNOWN
DM_FROZEN
DM_STATIC
DM_MOVING
DM_WALKING
DM_DRIVING
DM_CYCLING
DM_SEMI_STATIONARY
DM_RUNNING
DM_MOVING_COARSE
DM_IN_VEHICLE_FROZEN
DM_IN_VEHICLE_STATIC
DM_WALKING_SLOW
DM_VEHICULAR_IN_HAND
DM_DRIVING_OTHER
DM_CYCLING_LEG
DM_YOGA
DM_DANCING
DM_CROSS_TRAINING
DM_ELLIPTICAL
DM_ROWING
DM_STAIR_CLIMBING
DM_STATIONARY_CYCLING
DM_INDOOR_RUNNING
DM_INDOOR_WALKING
DM_SWIMMING
DM_PUSHING_WHEELCHAIR
DM_OUTDOOR_WHEELCHAIR
N13CLPrivateData20CLPrivateDataCaptureE
N13CLPrivateData9TimeStampE
N13CLPrivateData11AccelSampleE
N13CLPrivateData5AccelE
N13CLPrivateData10GyroSampleE
N13CLPrivateData4GyroE
N13CLPrivateData10BaroSampleE
N13CLPrivateData4BaroE
N13CLPrivateData24ClientLocationCoordinateE
N13CLPrivateData14DaemonLocationE
N13CLPrivateData14PressureSampleE
N13CLPrivateData21DaemonLocationPrivateE
N13CLPrivateData16TechnologyStatusE
N13CLPrivateData12VehicleSpeedE
N13CLPrivateData14VehicleHeadingE
N13CLPrivateData17XtraFileAvailableE
N13CLPrivateData20LocationDerivedSpeedE
N13CLPrivateData8LocationE
N13CLPrivateData14MotionActivityE
N13CLPrivateData11MotionStateE
N13CLPrivateData13WorkoutUpdateE
N13CLPrivateData19MotionStateObserverE
N13CLPrivateData11BodyMetricsE
N13CLPrivateData11NatalimetryE
N13CLPrivateData5TimerE
N13CLPrivateData21DigitalElevationModelE
N13CLPrivateData17DirectionOfTravelE
N13CLPrivateData9MapVectorE
N13CLPrivateData17ReachabilityStateE
N13CLPrivateData7BatteryE
N13CLPrivateData12DeviceStatusE
N13CLPrivateData17SignalEnvironmentE
N13CLPrivateData9MagSampleE
N13CLPrivateData12MagnetometerE
N13CLPrivateData5ResetE
?NSt3__110__function6__funcIZN23CLMicroLocationPowerLogC1ER23CLMicroLocationDatabaseE3$_0NS_9allocatorIS5_EEFvNS_8functionIFbvEEEEEE
ZN23CLMicroLocationPowerLogC1ER23CLMicroLocationDatabaseE3$_0
24CLSedentaryTimerNotifier
10CLNotifierIN29CLSedentaryTimerNotifier_Type12NotificationENS0_16NotificationDataEccE
N29CLSedentaryTimerNotifier_Type6ClientE
N10CLNotifierIN29CLSedentaryTimerNotifier_Type12NotificationENS0_16NotificationDataEccE6ClientE
NSt3__120__shared_ptr_pointerIP26CLSedentaryAlarmRecorderDbNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI26CLSedentaryAlarmRecorderDbEE
NSt3__120__shared_ptr_emplaceIN29CLSedentaryTimerNotifier_Type16NotificationDataENS_9allocatorIS2_EEEE
30CLMotionStateObserverCompanion
CLGnssAssistance.proto
CLPublicData"
GnssAssistance
sensor_request_info
.CLPublicData.SensorRequestInfo
accel
.CLPublicData.AccelMeasurement
gyro
.CLPublicData.GyroMeasurement
baro
.CLPublicData.BaroMeasurement
2#.CLPublicData.DigitalElevationModel
motion_activity_context
2#.CLPublicData.MotionActivityContext
map_vector
.CLPublicData.MapVector
mach_time_offset
.CLPublicData.MachTimeOffset
signal_environment
.CLPublicData.SignalEnvironment
position_assistance
2 .CLPublicData.PositionAssistance
speed_assistance
.CLPublicData.SpeedAssistance
speed_constraint
.CLPublicData.SpeedConstraint
gpssa
.CLPublicData.GPSsa
turn_state_assistance
2!.CLPublicData.TurnStateAssistance
reset
.CLPublicData.Reset*
SensorRequestInfo
batching_rate_hz
sampling_rate_hz
request_type
21.CLPublicData.SensorRequestInfo.SensorRequestType:
SR_UNKNOWN
compensation_type
26.CLPublicData.SensorRequestInfo.SensorCompensationType:
SC_NONE"W
SensorRequestType
SR_UNKNOWN
SR_ACCEL
SR_GYRO
SR_BARO
SR_MAG
SensorCompensationType
SC_NONE
SC_STATIC
SC_ON_THE_FLY
TimeStamp
cf_absolute_time_s
mach_absolute_time_s
mach_continuous_time_s
AccelSample
applicable_time
.CLPublicData.TimeStamp
x_mps2
y_mps2
z_mps2
AccelMeasurement
sample
.CLPublicData.AccelSample"y
GyroSample
applicable_time
.CLPublicData.TimeStamp
x_radps
y_radps
z_radps
GyroMeasurement
sample
.CLPublicData.GyroSample"\
BaroSample
applicable_time
.CLPublicData.TimeStamp
pressure_hpa
BaroMeasurement
sample
.CLPublicData.BaroSample"
DigitalElevationModel
applicable_time
.CLPublicData.TimeStamp
altitude_wgs84_m
altitude_wgs84_unc_m
MotionActivityContext
activity_context
.CLPublicData.ActivityContext
mount_state
.CLPublicData.MountState"
ActivityContext
applicable_time
.CLPublicData.TimeStamp
motion_state
2-.CLPublicData.ActivityContext.MotionStateType:
MS_UNKNOWN
motion_state_confidence
2,.CLPublicData.ActivityContext.ConfidenceType:
C_UNKNOWN
dominant_motion_mode
24.CLPublicData.ActivityContext.DominantMotionModeType:
DM_UNKNOWN
dominant_motion_mode_confidence
2,.CLPublicData.ActivityContext.ConfidenceType:
C_UNKNOWN"R
MotionStateType
MS_UNKNOWN
MS_FROZEN
MS_NOT_MOVING
MS_MOVING
DominantMotionModeType
DM_UNKNOWN
DM_MOVING
DM_WALKING
DM_DRIVING
DM_CYCLING
DM_RUNNING
DM_SWIMMING
DM_WHEELCHAIR
ConfidenceType
C_UNKNOWN
C_LOW
C_MEDIUM
C_HIGH
MountState
applicable_time
.CLPublicData.TimeStamp
mount_state
2'.CLPublicData.MountState.MountStateType:
MO_UNKNOWN
mount_state_confidence
2'.CLPublicData.MountState.ConfidenceType:
C_UNKNOWN"D
MountStateType
MO_UNKNOWN
MO_NOT_MOUNTED
MO_MOUNTED
ConfidenceType
C_UNKNOWN
C_LOW
C_MEDIUM
C_HIGH
MapVector
applicable_time
.CLPublicData.TimeStamp
segment_start_latitude_deg
segment_start_longitude_deg
segment_start_altitude_m
segment_azimuth_deg
segment_length_m
segment_width_m
segment_is_one_way
segment_is_rail_way
segment_is_tunnel
segment_is_bridge
segment_is_freeway
MachTimeOffset
applicable_mach_absolute_time_s
/gps_cf_absolute_time_minus_mach_absolute_time_s
time_unc_s
SignalEnvironment
applicable_time
.CLPublicData.TimeStamp
signal_environment
25.CLPublicData.SignalEnvironment.SignalEnvironmentType:
SE_UNKNOWN"
SignalEnvironmentType
SE_UNKNOWN
SE_RURAL
SE_URBAN
SE_DENSE_URBAN
SE_DENSE_URBAN_CANYON
SE_MARINE
PositionAssistance
applicable_time
.CLPublicData.TimeStamp
latitude_deg
longitude_deg
altitude_wgs84_m
horizontal_unc_semimajor_m
$horizontal_orientation_semimajor_deg
horizontal_unc_semiminor_m
vertical_unc_m
reliability
20.CLPublicData.PositionAssistance.ReliabilityType:
R_UNKNOWN"d
ReliabilityType
R_UNKNOWN
R_NOT_SET
R_VERY_LOW
R_LOW
R_MEDIUM
R_HIGH
Speed
applicable_time
.CLPublicData.TimeStamp
speed_mps
speed_unc_mps
Course
applicable_time
.CLPublicData.TimeStamp
course_rad
course_unc_rad
Velocity
applicable_time
.CLPublicData.TimeStamp
velocity_mps
velocity_unc_mps
SpeedAssistance
horizontal_speed
.CLPublicData.Speed
course
.CLPublicData.Course
vertical_velocity
.CLPublicData.Velocity"
SpeedConstraint
applicable_time
.CLPublicData.TimeStamp
duration_validity_s
user_speed_lower_bound_mps
user_speed_upper_bound_mps
GPSsa
applicable_time
.CLPublicData.TimeStamp
latitude_deg
longitude_deg
horizontal_unc_m
speed_mps
course_deg
altitude_m
vertical_unc_m
distance_m
undulation_m
speed_unc_mps
course_unc_deg
horizontal_unc_semimajor_axis_m
horizontal_unc_semiminor_axis_m
$horizontal_unc_semimajor_azimuth_deg
gps_reliability
2&.CLPublicData.GPSsa.GpsReliabilityType:
GR_UNKNOWN
vertical_speed_mps
vertical_speed_unc_mps
GpsReliabilityType
GR_UNKNOWN
GR_NOT_SET
GR_VERY_LOW
GR_LOW
GR_MEDIUM
GR_HIGH
TurnStateAssistance
applicable_time
.CLPublicData.TimeStamp
device_turn_state
2/.CLPublicData.TurnStateAssistance.TurnStateType:
TS_UNKNOWN"3
TurnStateType
TS_UNKNOWN
TS_NOT_TURNING
Reset
applicable_time
.CLPublicData.TimeStamp
N12CLPublicData14GnssAssistanceE
N12CLPublicData17SensorRequestInfoE
N12CLPublicData9TimeStampE
N12CLPublicData11AccelSampleE
N12CLPublicData16AccelMeasurementE
N12CLPublicData10GyroSampleE
N12CLPublicData15GyroMeasurementE
N12CLPublicData10BaroSampleE
N12CLPublicData15BaroMeasurementE
N12CLPublicData21DigitalElevationModelE
N12CLPublicData21MotionActivityContextE
N12CLPublicData15ActivityContextE
N12CLPublicData10MountStateE
N12CLPublicData9MapVectorE
N12CLPublicData14MachTimeOffsetE
N12CLPublicData17SignalEnvironmentE
N12CLPublicData18PositionAssistanceE
N12CLPublicData5SpeedE
N12CLPublicData6CourseE
N12CLPublicData8VelocityE
N12CLPublicData15SpeedAssistanceE
N12CLPublicData15SpeedConstraintE
N12CLPublicData5GPSsaE
N12CLPublicData19TurnStateAssistanceE
N12CLPublicData5ResetE
33CLNetworkLocationProviderExternal
34CLINetworkLocationProviderExternal
10BasicMutex
5Mutex
11NonCopyable
21DestructionAwareMutex
NSt3__120__shared_ptr_pointerIP29DestructionAwareMutexInternalNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI29DestructionAwareMutexInternalEE
16CLDaemonSettings
NSt3__120__shared_ptr_pointerIP16CLDaemonSettingsN12_GLOBAL__N_112null_deleterENS_9allocatorIS1_EEEE
N12_GLOBAL__N_112null_deleterE
N13CLPreferences10OtherPrefsE
13CLPreferences
zD12CLDataSource
@13CLDaemonCache
zt?{
zt?{
?21CLSensorFusionService
C@17CLPersistentStore
17CLHomeKitProvider
10CLNotifierIN22CLHomeKitProvider_Type12NotificationENS0_16NotificationDataEccE
N22CLHomeKitProvider_Type6ClientE
N10CLNotifierIN22CLHomeKitProvider_Type12NotificationENS0_16NotificationDataEccE6ClientE
NSt3__120__shared_ptr_emplaceIN22CLHomeKitProvider_Type16NotificationDataENS_9allocatorIS2_EEEE
18CLTelephonyService
10CLNotifierIN23CLTelephonyService_Type12NotificationENS0_16NotificationDataEccE
N23CLTelephonyService_Type6ClientE
N10CLNotifierIN23CLTelephonyService_Type12NotificationENS0_16NotificationDataEccE6ClientE
NSt3__120__shared_ptr_emplaceIN23CLTelephonyService_Type16NotificationDataENS_9allocatorIS2_EEEE
13CLWifiService
10CLNotifierIN18CLWifiService_Type12NotificationENS0_16NotificationDataEcNS0_7RegInfoEE
21CLWifiServiceExternal
N13CLWifiService9IExternalE
N18CLWifiService_Type6ClientE
N10CLNotifierIN18CLWifiService_Type12NotificationENS0_16NotificationDataEcNS0_7RegInfoEE6ClientE
NSt3__120__shared_ptr_emplaceIN18CLWifiService_Type16NotificationDataENS_9allocatorIS2_EEEE
A5CLSPU
54CLStreamingAwareLocationProviderNoLocalGPSStateMachine
13CLMotionState
10CLNotifierIN18CLMotionState_Type12NotificationENS0_16NotificationDataEccE
N18CLMotionState_Type6ClientE
N10CLNotifierIN18CLMotionState_Type12NotificationENS0_16NotificationDataEccE6ClientE
NSt3__110__function6__funcINS_6__bindIM13CLMotionStateFviRKN18CLWifiService_Type12NotificationERKNS4_16NotificationDataEEJRPS3_RKNS_12placeholders4__phILi1EEERKNSG_ILi2EEERKNSG_ILi3EEEEEENS_9allocatorISQ_EEFviS7_SA_EEE
NSt3__16__bindIM13CLMotionStateFviRKN18CLWifiService_Type12NotificationERKNS2_16NotificationDataEEJRPS1_RKNS_12placeholders4__phILi1EEERKNSE_ILi2EEERKNSE_ILi3EEEEEE
NSt3__118__weak_result_typeIM13CLMotionStateFviRKN18CLWifiService_Type12NotificationERKNS2_16NotificationDataEEEE
NSt3__120__shared_ptr_emplaceIN18CLMotionState_Type16NotificationDataENS_9allocatorIS2_EEEE
12CLFileUpdate
18CLDataSourceSerial
20CLDataSourceBuffered
25CLGyroCalibrationDatabase
10CLNotifierIN30CLGyroCalibrationDatabase_Type12NotificationENS0_16NotificationDataEccE
N30CLGyroCalibrationDatabase_Type6ClientE
N10CLNotifierIN30CLGyroCalibrationDatabase_Type12NotificationENS0_16NotificationDataEccE6ClientE
NSt3__120__shared_ptr_pointerIP7NSErrorZN21CLObjNotificationDataIS1_EC1ES2_EUlS2_E_NS_9allocatorIS1_EEEE
ZN21CLObjNotificationDataI7NSErrorEC1EPS0_EUlS2_E_
19CLCompanionNotifier
10CLNotifierIN24CLCompanionNotifier_Type12NotificationENS0_16NotificationDataEcNS0_16RegistrationInfoEE
N24CLCompanionNotifier_Type6ClientE
N10CLNotifierIN24CLCompanionNotifier_Type12NotificationENS0_16NotificationDataEcNS0_16RegistrationInfoEE6ClientE
NSt3__120__shared_ptr_emplaceIN24CLCompanionNotifier_Type16NotificationDataENS_9allocatorIS2_EEEE
333333
25CLNoSqliteConnectionError
16CLSqliteDatabase
14CLDaemonStatus
10CLNotifierIN19CLDaemonStatus_Type12NotificationENS0_16NotificationDataEccE
N19CLDaemonStatus_Type6ClientE
N10CLNotifierIN19CLDaemonStatus_Type12NotificationENS0_16NotificationDataEccE6ClientE
NSt3__120__shared_ptr_emplaceIN19CLDaemonStatus_Type16NotificationDataENS_9allocatorIS2_EEEE
ffffff
v.L@
z$@{
29CLNetworkLocationRequesterALS
26CLNetworkLocationRequester
18CLLocationDatabase
24CLVO2MaxOutputRecorderDb
20CLActivityRecorderDbI12VO2MaxOutputN12CLActivityDB22NoDataProtectionPolicyEE
>19CMGyroBiasEstimator
18CLTimeZoneDatabase
17CLPolygonDatabase
19CLNatalieDummyModel
NSt3__120__shared_ptr_pointerIP27CLNatalieCrossTrainingModelNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI27CLNatalieCrossTrainingModelEE
NSt3__120__shared_ptr_pointerIP19CLNatalieCycleModelNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI19CLNatalieCycleModelEE
NSt3__120__shared_ptr_pointerIP19CLNatalieDanceModelNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI19CLNatalieDanceModelEE
NSt3__120__shared_ptr_pointerIP19CLNatalieDummyModelNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI19CLNatalieDummyModelEE
NSt3__120__shared_ptr_pointerIP24CLNataliePedestrianModelNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI24CLNataliePedestrianModelEE
NSt3__120__shared_ptr_pointerIP22CLNatalieSemiStatModelNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI22CLNatalieSemiStatModelEE
NSt3__120__shared_ptr_pointerIP18CLNatalieYogaModelNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI18CLNatalieYogaModelEE
NSt3__120__shared_ptr_pointerIP24CLNatalieEllipticalModelNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI24CLNatalieEllipticalModelEE
NSt3__120__shared_ptr_pointerIP20CLNatalieRowingModelNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI20CLNatalieRowingModelEE
NSt3__120__shared_ptr_pointerIP27CLNatalieStairClimbingModelNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI27CLNatalieStairClimbingModelEE
NSt3__120__shared_ptr_pointerIP27CLNatalieHighIntensityModelNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI27CLNatalieHighIntensityModelEE
NSt3__120__shared_ptr_pointerIP29CLNatalieStationaryCycleModelNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI29CLNatalieStationaryCycleModelEE
NSt3__120__shared_ptr_pointerIP22CLCalorieClimbingModelNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI22CLCalorieClimbingModelEE
NSt3__120__shared_ptr_pointerIP22CLCalorieSwimmingModelNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI22CLCalorieSwimmingModelEE
NSt3__120__shared_ptr_pointerIP28CLCalorieWheelchairPushModelNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI28CLCalorieWheelchairPushModelEE
NSt3__120__shared_ptr_pointerIP31CLCalorieOutdoorWheelchairModelNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI31CLCalorieOutdoorWheelchairModelEE
NSt3__120__shared_ptr_pointerIP26CLCalorieCalisthenicsModelNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI26CLCalorieCalisthenicsModelEE
13CLTimeManager
10CLNotifierIN18CLTimeManager_Type12NotificationENS0_16NotificationDataEccE
N18CLTimeManager_Type6ClientE
N10CLNotifierIN18CLTimeManager_Type12NotificationENS0_16NotificationDataEccE6ClientE
NSt3__120__shared_ptr_emplaceIN18CLTimeManager_Type16NotificationDataENS_9allocatorIS2_EEEE
?20CLLocationController
N25CLLocationController_Type6ClientE
@22CLWifiLocationProvider
N27CLWifiLocationProvider_Type6ClientE
NSt3__120__shared_ptr_emplaceI45CLNoCacheLookupWifiAccessPointLocationServiceNS_9allocatorIS1_EEEE
NSt3__120__shared_ptr_emplaceI18CLBatchedLocationsNS_9allocatorIS1_EEEE
9@33
23CLNatalieModelInterface
21CLMotionStateMediator
10CLNotifierIN26CLMotionStateMediator_Type12NotificationENS0_16NotificationDataEccE
N26CLMotionStateMediator_Type6ClientE
N10CLNotifierIN26CLMotionStateMediator_Type12NotificationENS0_16NotificationDataEccE6ClientE
NSt3__120__shared_ptr_emplaceIN26CLMotionStateMediator_Type16NotificationDataENS_9allocatorIS2_EEEE
18CLLocationProvider
10CLNotifierIN23CLLocationProvider_Type12NotificationENS0_16NotificationDataEcNS0_7RegInfoEE
22CLCellLocationDatabase
?22CLNmeaLocationProvider
N12CLDataSource8ListenerE
N27CLNmeaLocationProvider_Type6ClientE
22CLWifiLocationDatabase
25CLNetworkLocationProvider
10CLNotifierIN30CLNetworkLocationProvider_Type12NotificationENS0_16NotificationDataEccE
N30CLNetworkLocationProvider_Type6ClientE
N10CLNotifierIN30CLNetworkLocationProvider_Type12NotificationENS0_16NotificationDataEccE6ClientE
NSt3__120__shared_ptr_emplaceIN30CLNetworkLocationProvider_Type16NotificationDataENS_9allocatorIS2_EEEE
N23CLTelephonyService_Type4CellE
N23CLTelephonyService_Type8CdmaCellE
N23CLTelephonyService_Type7LteCellE
27CLAccessoryLocationProvider
N32CLAccessoryLocationProvider_Type6ClientE
@13CLDaemonStats
29CLSensorFusionServiceFastPath
24CLIoHidFastPathInterface
NSt3__120__shared_ptr_pointerIPN24CLIoHidFastPathInterface14FastPathDeviceENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE
NSt3__114default_deleteIN24CLIoHidFastPathInterface14FastPathDeviceEEE
28CLFilteredLocationController
N23CLLastConfidentLocation9INotifierE
N33CLFilteredLocationController_Type6ClientE
A27CLRegionPreloadManifestTile
14CLPlatformInfo
18CLOperatorSettings
10CLNotifierIN23CLOperatorSettings_Type12NotificationEN15CLNotifier_Type16NotificationDataEccE
NSt3__120__shared_ptr_emplaceIN15CLNotifier_Type16NotificationDataENS_9allocatorIS2_EEEE
?10CLCompass6
N16CLMotionNotifier26SingleSamplePollDispatcherIN15CLAccelerometer6SampleEEE
N16CLMotionNotifier26SingleSamplePollDispatcherIN14CLDeviceMotion6SampleEEE
30CLWifiLocationProviderExternal
N22CLWifiLocationProvider9IExternalE
N2CL15WifiPositioning13IPlatformInfoE
NSt3__120__shared_ptr_emplaceI30CLWifiLocationProviderExternalNS_9allocatorIS1_EEEE
26CLBTLEFenceManagerConcrete
23CLOdometerNotifierWatch
u"AQ
`OzkA
SBParentalControlsCapabilities
15CLClientManager
10CLNotifierIN20CLClientManager_Type12NotificationENS0_16NotificationDataEccE
N15CLClientManager6ClientE
N10CLNotifierIN20CLClientManager_Type12NotificationENS0_16NotificationDataEccE6ClientE
N20CLClientManager_Type6ClientE
NSt3__120__shared_ptr_emplaceIN20CLClientManager_Type16NotificationDataENS_9allocatorIS2_EEEE
23CLTileFileWithTraversal
17CLCarrierSettings
10CLNotifierIN22CLCarrierSettings_Type12NotificationEN15CLNotifier_Type16NotificationDataEccE
N22CLCarrierSettings_Type6ClientE
N10CLNotifierIN22CLCarrierSettings_Type12NotificationEN15CLNotifier_Type16NotificationDataEccE6ClientE
30CLFitnessTrackingNotifierWatch
@N4swan29BatchedGNSSDataSmootherConfigE
N8cnconfig12ConfigLoaderILj256EEE
N5boost16bad_lexical_castE
N5boost6detail17basic_unlockedbufINSt3__115basic_streambufIcNS2_11char_traitsIcEEEEcEE
N5boost6detail16basic_pointerbufIcNSt3__115basic_streambufIcNS2_11char_traitsIcEEEEEE
N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_16bad_lexical_castEEEEE
N5boost16exception_detail19error_info_injectorINS_16bad_lexical_castEEE
N12cnnavigation17ECEFToENUJacobianE
N12cnnavigation7details12JacobianBaseE
N8cnmatrix8CNMatrixILj3ELj3EdEE
N8cnmatrix12CNMatrixBaseIdEE
14CNSerializable
34CLWatchOrientationSettingsNotifier
10CLNotifierIN39CLWatchOrientationSettingsNotifier_Type12NotificationENS0_16NotificationDataEccE
N39CLWatchOrientationSettingsNotifier_Type6ClientE
N10CLNotifierIN39CLWatchOrientationSettingsNotifier_Type12NotificationENS0_16NotificationDataEccE6ClientE
NSt3__120__shared_ptr_emplaceIN39CLWatchOrientationSettingsNotifier_Type16NotificationDataENS_9allocatorIS2_EEEE
27CLNatalieStairClimbingModel
16CMOnBodyDetector
23CLSensorFusionServiceAP
26CLCachedLocationController
N16CLIRouteListener9INotifierE
10CLNotifierIN31CLCachedLocationController_Type12NotificationENS0_16NotificationDataEccE
N31CLCachedLocationController_Type6ClientE
N10CLNotifierIN31CLCachedLocationController_Type12NotificationENS0_16NotificationDataEccE6ClientE
NSt3__120__shared_ptr_emplaceIN31CLCachedLocationController_Type16NotificationDataENS_9allocatorIS2_EEEE
MbP?
22CLGeoAccessMapGeometry
9CLMapRoad
NSt3__120__shared_ptr_pointerIP9CLMapRoadNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI9CLMapRoadEE
NSt3__110__function6__funcIZN22CLGeoAccessMapGeometry19roadsWithinDistanceERNS_4listIN13CLMapGeometry19DistanceQueryResultENS_9allocatorIS5_EEEERK10CLMapCrumbdbE3$_0NS6_ISD_EEFP13GEOMapRequestU13block_pointerFvSG_EEEE
NSt3__110__function6__baseIFP13GEOMapRequestU13block_pointerFvS3_EEEE
ZN22CLGeoAccessMapGeometry19roadsWithinDistanceERNSt3__14listIN13CLMapGeometry19DistanceQueryResultENS0_9allocatorIS3_EEEERK10CLMapCrumbdbE3$_0
NSt3__120__shared_ptr_emplaceI17RoadFeatureObjectNS_9allocatorIS1_EEEE
NSt3__110__function6__funcIZNK22CLGeoAccessMapGeometry22roadsConnectedInternalERNS_4listIN13CLMapGeometry20ConnectedQueryResultENS_9allocatorIS5_EEEEPK17RoadFeatureObjectbddiE3$_1NS6_ISD_EEFP13GEOMapRequestU13block_pointerFvSG_EEEE
ZNK22CLGeoAccessMapGeometry22roadsConnectedInternalERNSt3__14listIN13CLMapGeometry20ConnectedQueryResultENS0_9allocatorIS3_EEEEPK17RoadFeatureObjectbddiE3$_1
NSt3__110__function6__funcIZNK22CLGeoAccessMapGeometry19roadsAtIntersectionER10CLMapCrumbPNS_4listIN13CLMapGeometry23IntersectionQueryResultENS_9allocatorIS7_EEEESB_bRKNS_10shared_ptrI9CLMapRoadEEbddRdE3$_2NS8_ISI_EEFP13GEOMapRequestU13block_pointerFvSL_EEEE
ZNK22CLGeoAccessMapGeometry19roadsAtIntersectionER10CLMapCrumbPNSt3__14listIN13CLMapGeometry23IntersectionQueryResultENS2_9allocatorIS5_EEEES9_bRKNS2_10shared_ptrI9CLMapRoadEEbddRdE3$_2
NSt3__110__function6__funcIZNK22CLGeoAccessMapGeometry19roadsAtIntersectionER10CLMapCrumbPNS_4listIN13CLMapGeometry23IntersectionQueryResultENS_9allocatorIS7_EEEESB_bRKNS_10shared_ptrI9CLMapRoadEEbddRdE3$_3NS8_ISI_EEFP13GEOMapRequestU13block_pointerFvSL_EEEE
ZNK22CLGeoAccessMapGeometry19roadsAtIntersectionER10CLMapCrumbPNSt3__14listIN13CLMapGeometry23IntersectionQueryResultENS2_9allocatorIS5_EEEES9_bRKNS2_10shared_ptrI9CLMapRoadEEbddRdE3$_3
NSt3__120__shared_ptr_emplaceI17RoadWithDirectionNS_9allocatorIS1_EEEE
NSt3__110__function6__funcIZNK22CLGeoAccessMapGeometry18moveOnRoadInternalEbddRNS_4listIN13CLMapGeometry8RoadInfoENS_9allocatorIS5_EEEERNS4_19DistanceQueryResultEibE3$_4NS6_ISC_EEFP13GEOMapRequestU13block_pointerFvSF_EEEE
ZNK22CLGeoAccessMapGeometry18moveOnRoadInternalEbddRNSt3__14listIN13CLMapGeometry8RoadInfoENS0_9allocatorIS3_EEEERNS2_19DistanceQueryResultEibE3$_4
vq+A
@NSt3__120__shared_ptr_pointerIP30CLWorkloadCalibratorRecorderDbNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI30CLWorkloadCalibratorRecorderDbEE
27CLOdometerNotifierCompanion
N5boost16exception_detail10clone_implINS0_19error_info_injectorISt13runtime_errorEEEE
N5boost16exception_detail19error_info_injectorISt13runtime_errorEE
N5boost9exceptionE
N5boost16exception_detail10clone_baseE
CAUUUUUU
?ffffff
?StrideCalibrationLastCalibration
StrideCalibrationLastCalibrationAttempt
LastStrideCalibrationConverge
24CLMapRouteHintController
25CLFitnessTrackingNotifier
10CLNotifierIN30CLFitnessTrackingNotifier_Type12NotificationENS0_16NotificationDataEccE
N30CLFitnessTrackingNotifier_Type6ClientE
N10CLNotifierIN30CLFitnessTrackingNotifier_Type12NotificationENS0_16NotificationDataEccE6ClientE
NSt3__120__shared_ptr_emplaceIN30CLFitnessTrackingNotifier_Type16NotificationDataENS_9allocatorIS2_EEEE
14CLFenceManager
10CLNotifierIN19CLFenceManager_Type12NotificationENS0_16NotificationDataEcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEE
N19CLFenceManager_Type6ClientE
N10CLNotifierIN19CLFenceManager_Type12NotificationENS0_16NotificationDataEcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEE6ClientE
NSt3__120__shared_ptr_emplaceIN19CLFenceManager_Type16NotificationDataENS_9allocatorIS2_EEEE
CSavedInitialMotionCalsToWatch
22CLMotionSyncStoreWatch
20CMFiniteStateMachine
18CLFenceMonitorCell
N23CLFenceMonitorCell_Type6ClientE
19CLSwimAlgController
>StrideCalAWD0
StrideCalAWD1
21CLMotionAlarmNotifier
10CLNotifierIN18CLMotionAlarm_Type12NotificationEN15CLNotifier_Type16NotificationDataEccE
26CLCdmaCellLocationDatabase
"!"!"
%/<=:3+
1A<9/)
-?>;/0*
!;4340#(!
5<:.$
!:IJ?2 $
#4DL@43
-:9?.
"'--&'
27CLSimulatedLocationProvider
N32CLSimulatedLocationProvider_Type6ClientE
16CLMotionNotifier
NSt3__120__shared_ptr_pointerIP10CLSettingsNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI10CLSettingsEE
24CLNatalieEllipticalModel
#@18CLVO2MaxInputCache
20CLActivityRecorderDbI11VO2MaxInputN12CLActivityDB22NoDataProtectionPolicyEE
18CLSensorRecorderDb
20CLActivityRecorderDbI26CLSensorRecorderDataPacketN12CLActivityDB22NoDataProtectionPolicyEE
NSt3__110__function6__funcIPFbPvbENS_9allocatorIS4_EES3_EE
NSt3__110__function6__baseIFbPvbEEE
PFbPvbE
FbPvbE
45CLICachedLookupWifiAccessPointLocationService
45CLNoCacheLookupWifiAccessPointLocationService
N24CLIoHidFastPathInterface14FastPathDeviceE
19CLCatherineNotifier
10CLNotifierIN24CLCatherineNotifier_Type12NotificationENS0_16NotificationDataEccE
N24CLCatherineNotifier_Type6ClientE
N10CLNotifierIN24CLCatherineNotifier_Type12NotificationENS0_16NotificationDataEccE6ClientE
NSt3__120__shared_ptr_emplaceIN24CLCatherineNotifier_Type16NotificationDataENS_9allocatorIS2_EEEE
26CLExerciseMinuteRecorderDb
20CLActivityRecorderDbI20CLExerciseMinuteDataN12CLActivityDB22NoDataProtectionPolicyEE
ADDED
16CLIoHidInterface
N16CLIoHidInterface6DeviceE
NSt3__120__shared_ptr_pointerIPN16CLIoHidInterface6DeviceENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE
NSt3__114default_deleteIN16CLIoHidInterface6DeviceEEE
18CLCompass7FastPath
14CLCompass7Base
21CMDeviceMotionVisitor
N20CMDeviceMotionReport7VisitorE
FallStatsEnabled
14CLFallNotifier
10CLNotifierIN19CLFallNotifier_Type12NotificationENS0_16NotificationDataEccE
NSt3__120__shared_ptr_emplaceIN19CLFallNotifier_Type16NotificationDataENS_9allocatorIS2_EEEE
LastKeyboardDisconnect
9CLCompass
@333C
@X9tB
ff&?
16CLRunningMaximumIfE
17CLCompassDatabase
10CLNotifierIN22CLCompassDatabase_Type12NotificationENS0_16NotificationDataEccE
N22CLCompassDatabase_Type6ClientE
N10CLNotifierIN22CLCompassDatabase_Type12NotificationENS0_16NotificationDataEccE6ClientE
29CLSensorFusionService6AxisSPU
20CLTilesManagerServer
pB33
N12CLPublicData19CLPublicDataCaptureE
N8cnmatrix8CNMatrixILj20ELj3EdEE
N8cnmatrix8CNMatrixILj20ELj20EdEE
N8cnmatrix8CNMatrixILj3ELj1EdEE
N8cnmatrix8CNMatrixILj1ELj3EdEE
N8cnmatrix8CNMatrixILj40ELj40EdEE
N8cnmatrix8CNMatrixILj40ELj3EdEE
N8cnmatrix8CNMatrixILj6665ELj1EdEE
N8cnmatrix8CNMatrixILj1ELj20EiEE
N8cnmatrix12CNMatrixBaseIiEE
N8cnmatrix8CNMatrixILj3ELj1EiEE
N8cnmatrix11CNSubMatrixILj1ELj20ELj3ELj1EdEE
N8cnmatrix8CNMatrixILj2645ELj1EdEE
PAff
31CLAttitudeDependentKFCalibrator
19CLCompassCalibrator
10CLVector3dIjE
10CLMatrix3dIfE
13CLPlosMatcher
uBA333333
5CLLog
NSt3__120__shared_ptr_pointerIP19CLCircularLogBufferNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI19CLCircularLogBufferEE
10CLSettings
ffffff
?32CLSwimDistanceEstimatorOpenWater
Hn?ff
28CLCalorieWheelchairPushModel
18CLNatalieYogaModel
=UUUUUU
?333333
18CLSensorFusionMekf
14CLSensorFusion
17CLRunningVector3dIdE
@27CLNatalieHighIntensityModel
kY@22CLEmptyMacAddressError
22CLMacAddressParseError
26CLMalformedMacAddressError
%@29CLNatalieStationaryCycleModel
N16CLBinaryLogTypes5AccelE
N16CLBinaryLogTypes12GyroOscarEmuE
N16CLBinaryLogTypes11GyroBiasFitE
N16CLBinaryLogTypes6GyroDtE
N16CLBinaryLogTypes7CompassE
N16CLBinaryLogTypes12DeviceMotionE
N16CLBinaryLogTypes15SessionOverrideE
N16CLBinaryLogTypes20EnhancedDeviceMotionE
N16CLBinaryLogTypes11NatalieDataE
N16CLBinaryLogTypes18OnsetHeartRateDataE
N16CLBinaryLogTypes12StrideCalBinE
N16CLBinaryLogTypes21CalorimetryPauseEventE
N16CLBinaryLogTypes8MetsInfoE
N16CLBinaryLogTypes9FallStatsE
N16CLBinaryLogTypes28StepCadenceToStrideLengthBinE
N16CLBinaryLogTypes13MotionLoiDataE
N16CLBinaryLogTypes13AccelOscarEmuE
N16CLBinaryLogTypes19GyroBiasAndVarianceE
N16CLBinaryLogTypes16CompassAlignmentE
31CLCalorieOutdoorWheelchairModel
29CLCompassDaemonClientNotifier
10CLNotifierIN34CLCompassDaemonClientNotifier_Type12NotificationENS0_16NotificationDataEccE
N16CLMotionNotifier14SiloDispatcherIN14CLCompass_Type6SampleEEE
N14CLCompass_Type6SampleE
NSt3__120__shared_ptr_emplaceIN34CLCompassDaemonClientNotifier_Type16NotificationDataENS_9allocatorIS2_EEEE
(-DT
NSt3__114basic_ifstreamIcNS_11char_traitsIcEEEE
NSt3__113basic_filebufIcNS_11char_traitsIcEEEE
N12cnnavigation10GPSAlmanacE
N12cnnavigation15GNSSSatelliteIDE
34CLFitnessTrackingNotifierCompanion
22CLTilesManagerExternal
23CLITilesManagerExternal
18CLSwimAlgSimulator
?333333
A21CLCallbackDropManager
NSt3__120__shared_ptr_emplaceIiNS_9allocatorIiEEEE
kCLConnectionMessage
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE3$_0NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
NSt3__110__function6__baseIFvP14CLDaemonClientNS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE3$_0
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE3$_1NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE3$_1
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE3$_2NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE3$_2
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE3$_3NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE3$_3
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE3$_4NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE3$_4
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE3$_5NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE3$_5
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE3$_6NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE3$_6
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE3$_7NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE3$_7
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE3$_8NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE3$_8
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE3$_9NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE3$_9
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_10NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_10
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_11NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_11
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_12NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_12
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_13NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_13
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_14NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_14
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_15NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_15
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_16NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_16
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_17NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_17
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_18NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_18
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_19NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_19
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_20NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_20
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_21NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_21
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_22NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_22
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_23NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_23
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_24NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_24
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_25NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_25
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_26NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_26
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_27NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_27
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_28NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_28
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_29NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_29
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_30NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_30
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_31NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_31
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_32NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_32
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_33NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_33
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_34NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_34
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_35NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_35
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_36NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_36
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_37NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_37
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_38NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_38
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_39NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_39
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_40NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_40
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_41NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_41
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_42NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_42
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_43NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_43
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_44NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_44
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_45NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_45
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_46NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_46
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_47NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_47
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_48NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_48
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_49NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_49
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_50NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_50
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_51NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_51
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_52NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_52
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_53NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_53
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_54NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_54
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_55NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_55
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_56NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_56
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_57NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_57
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_58NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_58
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_59NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_59
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_60NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_60
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_61NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_61
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_62NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_62
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_63NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_63
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_64NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_64
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_65NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_65
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_66NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_66
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_67NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_67
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_68NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_68
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_69NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_69
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_70NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_70
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_71NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_71
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_72NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_72
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_73NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_73
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_74NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_74
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_75NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_75
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_76NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_76
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_77NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_77
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_78NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_78
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_79NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_79
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_80NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_80
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_81NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_81
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_82NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_82
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_83NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_83
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_84NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_84
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_85NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_85
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_86NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_86
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_87NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_87
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_88NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_88
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_89NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_89
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_90NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_90
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_91NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_91
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_92NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_92
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_93NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_93
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_94NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_94
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_95NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_95
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_96NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_96
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_97NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_97
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_98NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_98
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE4$_99NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE4$_99
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE5$_100NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE5$_100
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE5$_101NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE5$_101
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE5$_102NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE5$_102
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE5$_103NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE5$_103
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE5$_104NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE5$_104
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE5$_105NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE5$_105
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE5$_106NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE5$_106
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE5$_107NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE5$_107
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE5$_108NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE5$_108
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE5$_109NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE5$_109
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE5$_110NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE5$_110
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE5$_111NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE5$_111
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE5$_112NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE5$_112
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE5$_113NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE5$_113
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE5$_114NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE5$_114
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE5$_115NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE5$_115
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE5$_116NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE5$_116
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE5$_117NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE5$_117
NSt3__110__function6__funcIZN14CLDaemonClient18populateHandlerMapEvE5$_118NS_9allocatorIS3_EEFvPS2_NS_10shared_ptrI19CLConnectionMessageEEEEE
ZN14CLDaemonClient18populateHandlerMapEvE5$_118
NSt3__120__shared_ptr_pointerIP17CLPersistentTimerNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI17CLPersistentTimerEE
24CLBundleLocationProvider
N29CLBundleLocationProvider_Type6ClientE
NSt3__120__shared_ptr_pointerIP18CLBatchedLocationsNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI18CLBatchedLocationsEE
SentInitialMotionCalsToWatch
26CLMotionSyncStoreCompanion
?333333
@18CLBluetoothService
10CLNotifierIN23CLBluetoothService_Type12NotificationENS0_16NotificationDataEccE
N23CLBluetoothService_Type6ClientE
N10CLNotifierIN23CLBluetoothService_Type12NotificationENS0_16NotificationDataEccE6ClientE
NSt3__120__shared_ptr_emplaceIN23CLBluetoothService_Type16NotificationDataENS_9allocatorIS2_EEEE
23CLSensorFusion9AxisMekf
28CLMotionCoprocessorInterface
33CLMotionCoprocessorAlarmInterface
20CLStepCountInterface
17CLOnBodyInterface
22CLNatalimetryInterface
25CLSedentaryAlarmInterface
19CLOdometerInterface
18CLCompassInterface
19CLGyroBiasInterface
ForceAPOnBodyDetection
16CLOnBodyNotifier
10CLNotifierIN21CLOnBodyNotifier_Type12NotificationENS0_16NotificationDataEccE
N21CLOnBodyNotifier_Type6ClientE
N10CLNotifierIN21CLOnBodyNotifier_Type12NotificationENS0_16NotificationDataEccE6ClientE
NSt3__120__shared_ptr_emplaceIN21CLOnBodyNotifier_Type16NotificationDataENS_9allocatorIS2_EEEE
@w+A
?333333
 E@333333:@
;E@T
MbP?
>@22CLDualModeKalmanFilter
N14CLKalmanFilter16KalmanTuningInfoE
N14CLKalmanFilter16KalmanParametersE
14CLKalmanFilter
26CLMotionStateObserverWatch
29CLPressureCalibrationDatabase
10CLNotifierIN34CLPressureCalibrationDatabase_Type12NotificationENS0_16NotificationDataEccE
N34CLPressureCalibrationDatabase_Type6ClientE
N10CLNotifierIN34CLPressureCalibrationDatabase_Type12NotificationENS0_16NotificationDataEccE6ClientE
N16CLMotionNotifier14SiloDispatcherIN10CLPressure6SampleEEE
N10CLPressure6SampleE
NSt3__120__shared_ptr_emplaceIN34CLPressureCalibrationDatabase_Type16NotificationDataENS_9allocatorIS2_EEEE
25CLGyroBiasEstimatorClient
NSt3__110__function6__funcIZN26CLLocationFilterControllerC1EPU30objcproto19CLIntersiloUniverse11objc_objectE3$_0NS_9allocatorIS5_EEFvRKNS_6vectorIxNS6_IxEEEEEEE
NSt3__110__function6__baseIFvRKNS_6vectorIxNS_9allocatorIxEEEEEEE
ZN26CLLocationFilterControllerC1EPU30objcproto19CLIntersiloUniverse11objc_objectE3$_0
21CLWifiFenceCalculator
N17CLRavenController20RavenControllerStateE
N17CLRavenController28RavenControllerDisabledStateE
N17CLRavenController30RavenControllerBestEffortStateE
N16CLMotionNotifier20SiloBufferDispatcherIN10CLPressure6SampleEEE
N16CLMotionNotifier20SiloBufferDispatcherIN14CLMagnetometer6SampleEEE
N16CLMotionNotifier20SiloBufferDispatcherIN6CLGyro6SampleEEE
26CLSignificantChangeManager
N31CLSignificantChangeManager_Type6ClientE
V3fff?
29CLGeoAccess3dBuildingGeometry
17CLGestureNotifier
44CLAccelerometerIntegrationSamplingDispatcher
N16CLMotionNotifier18CallbackDispatcherIN17CLRestingNotifier16NotificationDataEEE
26CLSensorFusionService9Axis
N16CLMotionNotifier18CallbackDispatcherIN14CLCompass_Type6SampleEEE
N16CLMotionNotifier18CallbackDispatcherIbEE
v@24CLCoarseCellTilesManager
10CLNotifierIN29CLCoarseCellTilesManager_Type12NotificationENS0_16NotificationDataEccE
N29CLCoarseCellTilesManager_Type6ClientE
N10CLNotifierIN29CLCoarseCellTilesManager_Type12NotificationENS0_16NotificationDataEccE6ClientE
NSt3__120__shared_ptr_emplaceIN29CLCoarseCellTilesManager_Type16NotificationDataENS_9allocatorIS2_EEEE
14CLDtwPrototype
 @:F
20CLEarGestureNotifier
N16CLMotionNotifier18CallbackDispatcherIN17CLGestureNotifier16NotificationDataEEE
26CLActivityLoggerSizePolicy
NSt3__120__shared_ptr_pointerIP22CLActivityLoggerWriterNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI22CLActivityLoggerWriterEE
ffffff
$@20CLNatalieInputBufferI24CLExtendedStepCountEntryE
14CLNatalieInputI24CLExtendedStepCountEntryE
15CLKeyboardState
kCMActivityAlarmId
kCMActivityAlarmTrigger
kCMActivityAlarmDuration
kCMPressureBiasId
14CMFFTProcessor
26CLFenceDataDownloadManager
10CLNotifierIN31CLFenceDataDownloadManager_Type12NotificationENS0_16NotificationDataEcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEE
N31CLFenceDataDownloadManager_Type6ClientE
N10CLNotifierIN31CLFenceDataDownloadManager_Type12NotificationENS0_16NotificationDataEcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEE6ClientE
NSt3__120__shared_ptr_emplaceIN31CLFenceDataDownloadManager_Type16NotificationDataENS_9allocatorIS2_EEEE
27CLFenceAuthorizationManager
10CLNotifierIN32CLFenceAuthorizationManager_Type12NotificationENS0_16NotificationDataEcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEE
N32CLFenceAuthorizationManager_Type6ClientE
N10CLNotifierIN32CLFenceAuthorizationManager_Type12NotificationENS0_16NotificationDataEcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEE6ClientE
NSt3__120__shared_ptr_emplaceIN32CLFenceAuthorizationManager_Type16NotificationDataENS_9allocatorIS2_EEEE
14CLFenceMonitor
10CLNotifierIN19CLFenceMonitor_Type12NotificationENS0_16NotificationDataEcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEE
N19CLFenceMonitor_Type6ClientE
N10CLNotifierIN19CLFenceMonitor_Type12NotificationENS0_16NotificationDataEcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEE6ClientE
NSt3__110__function6__funcIZN14CLFenceMonitor20getRequiredTechLevelERKNS_14__map_iteratorINS_15__tree_iteratorINS_12__value_typeIN19CLFenceManager_Type5FenceEN19CLFenceMonitorLogic21FenceMonitoringStatusEEEPNS_11__tree_nodeISA_PvEElEEEERK16CLDaemonLocationE3$_0NS_9allocatorISM_EEFbRKS7_SL_EEE
NSt3__110__function6__baseIFbRKN19CLFenceManager_Type5FenceERK16CLDaemonLocationEEE
ZN14CLFenceMonitor20getRequiredTechLevelERKNSt3__114__map_iteratorINS0_15__tree_iteratorINS0_12__value_typeIN19CLFenceManager_Type5FenceEN19CLFenceMonitorLogic21FenceMonitoringStatusEEEPNS0_11__tree_nodeIS8_PvEElEEEERK16CLDaemonLocationE3$_0
NSt3__110__function6__funcIZN14CLFenceMonitor20getRequiredTechLevelERKNS_14__map_iteratorINS_15__tree_iteratorINS_12__value_typeIN19CLFenceManager_Type5FenceEN19CLFenceMonitorLogic21FenceMonitoringStatusEEEPNS_11__tree_nodeISA_PvEElEEEERK16CLDaemonLocationE3$_1NS_9allocatorISM_EEFbRKS7_SL_EEE
ZN14CLFenceMonitor20getRequiredTechLevelERKNSt3__114__map_iteratorINS0_15__tree_iteratorINS0_12__value_typeIN19CLFenceManager_Type5FenceEN19CLFenceMonitorLogic21FenceMonitoringStatusEEEPNS0_11__tree_nodeIS8_PvEElEEEERK16CLDaemonLocationE3$_1
NSt3__110__function6__funcIZN14CLFenceMonitor20getRequiredTechLevelERKNS_14__map_iteratorINS_15__tree_iteratorINS_12__value_typeIN19CLFenceManager_Type5FenceEN19CLFenceMonitorLogic21FenceMonitoringStatusEEEPNS_11__tree_nodeISA_PvEElEEEERK16CLDaemonLocationE3$_2NS_9allocatorISM_EEFbRKS7_SL_EEE
ZN14CLFenceMonitor20getRequiredTechLevelERKNSt3__114__map_iteratorINS0_15__tree_iteratorINS0_12__value_typeIN19CLFenceManager_Type5FenceEN19CLFenceMonitorLogic21FenceMonitoringStatusEEEPNS0_11__tree_nodeIS8_PvEElEEEERK16CLDaemonLocationE3$_2
NSt3__120__shared_ptr_emplaceIN19CLFenceMonitor_Type16NotificationDataENS_9allocatorIS2_EEEE
18CLFenceMonitorWifi
N23CLFenceMonitorWifi_Type6ClientE
NSt3__110__function6__funcIZN18CLFenceMonitorWifi21calculateAPsForFencesERKNS_3mapIN19CLFenceManager_Type5FenceEbNS_4lessIS5_EENS_9allocatorINS_4pairIKS5_bEEEEEERNS_6vectorIN18CLWifiService_Type11AccessPointENS8_ISI_EEEESL_RKSK_dRbE3$_0NS8_ISP_EEFvRSA_EEE
NSt3__110__function6__baseIFvRKN19CLFenceManager_Type5FenceEEEE
ZN18CLFenceMonitorWifi21calculateAPsForFencesERKNSt3__13mapIN19CLFenceManager_Type5FenceEbNS0_4lessIS3_EENS0_9allocatorINS0_4pairIKS3_bEEEEEERNS0_6vectorIN18CLWifiService_Type11AccessPointENS6_ISG_EEEESJ_RKSI_dRbE3$_0
13CLSqliteError
26CLGeomagneticModelProvider
10CLNotifierIN31CLGeomagneticModelProvider_Type12NotificationENS0_16NotificationDataEccE
N31CLGeomagneticModelProvider_Type6ClientE
N10CLNotifierIN31CLGeomagneticModelProvider_Type12NotificationENS0_16NotificationDataEccE6ClientE
C20CLAWDMetricCollector
21CLMetricCollectorBase
KA27CLSignalEnvironmentProvider
10CLNotifierIN32CLSignalEnvironmentProvider_Type12NotificationENS0_16NotificationDataEccE
N32CLSignalEnvironmentProvider_Type6ClientE
N10CLNotifierIN32CLSignalEnvironmentProvider_Type12NotificationENS0_16NotificationDataEccE6ClientE
NSt3__120__shared_ptr_emplaceIN32CLSignalEnvironmentProvider_Type16NotificationDataENS_9allocatorIS2_EEEE
N22CLWifiLocationDatabase8WifiDataE
>fff@
339B
Afff@ff
17CLNatalieRunModel
17CLRestingNotifier
29CLUnifiedCellLocationProvider
N34CLUnifiedCellLocationProviderLogic21ICellLocationProviderE
N34CLUnifiedCellLocationProvider_Type6ClientE
25CLLteCellLocationDatabase
50CLSensorCalibrationStaticDetectorMotionCoprocessor
33CLSensorCalibrationStaticDetector
38CLSensorCalibrationStaticDetectorAccel
10CLVector3dIdE
@ffffff
17CLSwimPersistence
20CLActivityRecorderDbI11CLSwimEntryN12CLActivityDB22NoDataProtectionPolicyEE
12CLCoverState
NSt3__110__function6__funcIZN27CLSubHarvesterMicroLocationC1ERNS2_16IHarvestDelegateEPU30objcproto19CLIntersiloUniverse11objc_objectR23CLMicroLocationDatabaseE3$_0NS_9allocatorIS9_EEFvNS_8functionIFbvEEEEEE
ZN27CLSubHarvesterMicroLocationC1ERNS_16IHarvestDelegateEPU30objcproto19CLIntersiloUniverse11objc_objectR23CLMicroLocationDatabaseE3$_0
NSt3__117bad_function_callE
27CLNatalieCrossTrainingModel
N25CLManagedLocationDatabaseI22CLWifiLocationDatabaseNS0_8WifiDataEE8ExternalE
N25CLManagedLocationDatabaseI22CLWifiLocationDatabaseNS0_8WifiDataEE9IExternalE
N25CLManagedLocationDatabaseI22CLCellLocationDatabaseN23CLTelephonyService_Type4CellEE8ExternalE
N25CLManagedLocationDatabaseI22CLCellLocationDatabaseN23CLTelephonyService_Type4CellEE9IExternalE
N25CLManagedLocationDatabaseI26CLCdmaCellLocationDatabaseN23CLTelephonyService_Type8CdmaCellEE8ExternalE
N25CLManagedLocationDatabaseI26CLCdmaCellLocationDatabaseN23CLTelephonyService_Type8CdmaCellEE9IExternalE
N25CLManagedLocationDatabaseI25CLLteCellLocationDatabaseN23CLTelephonyService_Type7LteCellEE8ExternalE
N25CLManagedLocationDatabaseI25CLLteCellLocationDatabaseN23CLTelephonyService_Type7LteCellEE9IExternalE
44CLStreamingAwareLocationProviderStateMachine
NSt3__110__function6__funcIN44CLStreamingAwareLocationProviderStateMachine17fLocationCallbackMUlT_T0_T1_T2_E_ENS_9allocatorIS7_EEFvNS2_14LocationSourceEN23CLLocationProvider_Type12NotificationEbRKNSB_7RegInfoEEEE
N44CLStreamingAwareLocationProviderStateMachine17fLocationCallbackMUlT_T0_T1_T2_E_E
NSt3__110__function6__funcIN44CLStreamingAwareLocationProviderStateMachine20fMotionAlarmCallbackMUlT_E_ENS_9allocatorIS4_EEFvbEEE
N44CLStreamingAwareLocationProviderStateMachine20fMotionAlarmCallbackMUlT_E_E
NSt3__110__function6__funcIN44CLStreamingAwareLocationProviderStateMachine14fTimerCallbackMUlT_E_ENS_9allocatorIS4_EEFvdEEE
N44CLStreamingAwareLocationProviderStateMachine14fTimerCallbackMUlT_E_E
NSt3__110__function6__funcIN44CLStreamingAwareLocationProviderStateMachine18fStepCountCallbackMUlT_E_ENS_9allocatorIS4_EEFvbEEE
N44CLStreamingAwareLocationProviderStateMachine18fStepCountCallbackMUlT_E_E
23CLDataProtectionManager
10CLNotifierIN28CLDataProtectionManager_Type12NotificationENS0_16NotificationDataEccE
N28CLDataProtectionManager_Type6ClientE
N10CLNotifierIN28CLDataProtectionManager_Type12NotificationENS0_16NotificationDataEccE6ClientE
NSt3__120__shared_ptr_emplaceIN28CLDataProtectionManager_Type16NotificationDataENS_9allocatorIS2_EEEE
_)K;
*>,<
=jZ:
}A.@
>16CLPowerAssertion
32CLStreamingAwareLocationProvider
N37CLStreamingAwareLocationProvider_Type6ClientE
NSt3__110__function6__funcIZN32CLStreamingAwareLocationProviderC1EPU30objcproto19CLIntersiloUniverse11objc_objectE3$_0NS_9allocatorIS5_EEFvN44CLStreamingAwareLocationProviderStateMachine14LocationSourceEN23CLLocationProvider_Type12NotificationEbRKNSA_7RegInfoEEEE
NSt3__110__function6__baseIFvN44CLStreamingAwareLocationProviderStateMachine14LocationSourceEN23CLLocationProvider_Type12NotificationEbRKNS4_7RegInfoEEEE
ZN32CLStreamingAwareLocationProviderC1EPU30objcproto19CLIntersiloUniverse11objc_objectE3$_0
NSt3__110__function6__funcIZN32CLStreamingAwareLocationProviderC1EPU30objcproto19CLIntersiloUniverse11objc_objectE3$_1NS_9allocatorIS5_EEFvbEEE
NSt3__110__function6__baseIFvbEEE
ZN32CLStreamingAwareLocationProviderC1EPU30objcproto19CLIntersiloUniverse11objc_objectE3$_1
NSt3__110__function6__funcIZN32CLStreamingAwareLocationProviderC1EPU30objcproto19CLIntersiloUniverse11objc_objectE3$_2NS_9allocatorIS5_EEFvdEEE
NSt3__110__function6__baseIFvdEEE
ZN32CLStreamingAwareLocationProviderC1EPU30objcproto19CLIntersiloUniverse11objc_objectE3$_2
NSt3__110__function6__funcIZN32CLStreamingAwareLocationProviderC1EPU30objcproto19CLIntersiloUniverse11objc_objectE3$_3NS_9allocatorIS5_EEFvbEEE
ZN32CLStreamingAwareLocationProviderC1EPU30objcproto19CLIntersiloUniverse11objc_objectE3$_3
28CLWifiServerResponseListener
39CLNetworkLocationServerResponseListener
25CLServiceLocationProvider
N30CLServiceLocationProvider_Type6ClientE
033333
@333333
@24CLNataliePedestrianModel
NSt3__120__shared_ptr_pointerIP17CLNatalieRunModelNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI17CLNatalieRunModelEE
NSt3__120__shared_ptr_pointerIP18CLNatalieWalkModelNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI18CLNatalieWalkModelEE
10CLCompass7
28CLCompanionNotifierCompanion
25CLEarGestureClientManager
N16CLMotionNotifier18CallbackDispatcherIN20CLEarGestureNotifier16NotificationDataEEE
17CLSqliteStatement
27CLSqliteFinalizingStatement
26CLSqliteResettingStatement
26CLCalorieCalisthenicsModel
30CLCompassSessionStatsCollector
N16CLMotionNotifier18CallbackDispatcherIN24CMMotionCoprocessorReply18CompassCalibrationEEE
N16CLMotionNotifier18CallbackDispatcherIN28CLMotionCoprocessorInterface16NotificationDataEEE
ffffff
?GyroCalibrationMinBatteryLevel
GyroCalibrationStaticWait
GyroCalibrationMinimumInterval
GyroCalibrationDoubleCalInterval
GyroCalibrationOutOfBoxTimeout
GyroCalibrationUrgentMinBatteryLevel
GyroCalibrationUrgentStaticWait
GyroCalibrationUrgentAttemptMinimumInterval
GyroCalibrationRetryCalInterval
GyroCalibrationLastCalibration
GyroCalibrationLastUnpluggedCalibration
29CLSensorCalibrationController
10CLNotifierIN34CLSensorCalibrationController_Type12NotificationENS0_16NotificationDataEccE
N34CLSensorCalibrationController_Type6ClientE
N10CLNotifierIN34CLSensorCalibrationController_Type12NotificationENS0_16NotificationDataEccE6ClientE
NSt3__120__shared_ptr_emplaceIN34CLSensorCalibrationController_Type16NotificationDataENS_9allocatorIS2_EEEE
16CLOutdoorMatcher
N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_19bad_optional_accessEEEEE
N5boost16exception_detail19error_info_injectorINS_19bad_optional_accessEEE
N5boost19bad_optional_accessE
23CLMicroLocationNotifier
10CLNotifierIN28CLMicroLocationNotifier_Type12NotificationENS0_16NotificationDataEcNS0_7RegInfoEE
N35CLMicroLocationBackgroundActivities29IBackgroundActivitiesDelegateE
N22CLMicroLocationLearner16ILearnerDelegateE
N24CLMicroLocationAnalytics18IAnalyticsDelegateE
N20CLMicroLocationLogic14ILogicDelegateE
N24CLMicroLocationLocalizer18ILocalizerDelegateE
N19CLWifiServiceClient9IReceiverE
N28CLMicroLocationNotifier_Type6ClientE
N10CLNotifierIN28CLMicroLocationNotifier_Type12NotificationENS0_16NotificationDataEcNS0_7RegInfoEE6ClientE
NSt3__120__shared_ptr_emplaceINS_6vectorI29CLMicroLocationResultInternalNS_9allocatorIS2_EEEENS3_IS5_EEEE
NSt3__120__shared_ptr_emplaceIN28CLMicroLocationNotifier_Type16NotificationDataENS_9allocatorIS2_EEEE
26CLWifiTileAccessPointEntry
27CLIWifiTileAccessPointEntry
23CLOutdoorMatchingEngine
NSt3__120__shared_ptr_emplaceI29CLGeoAccess3dBuildingGeometryNS_9allocatorIS1_EEEE
NSt3__120__shared_ptr_emplaceI16CLOutdoorMatcherNS_9allocatorIS1_EEEE
NSt3__120__shared_ptr_emplaceI13CLPlosMatcherNS_9allocatorIS1_EEEE
CLGnssMeasApi.proto
CLPrivateData"Z
GlonassSlotInfo
slot_num
slot_source
2 .CLPrivateData.GlonassSlotSource"P
GlonassId
freq_num
slot_info
.CLPrivateData.GlonassSlotInfo"
ConstellationId
gps_prn
glonass_id
.CLPrivateData.GlonassId
beidou_ranging_code
galileo_spreading_code
qzss_prn
sbas_prn
SvId
system
constel_id
.CLPrivateData.ConstellationId"[
GpsL1SyncState
code_lock
nav_bit
subframe
tow_decoded
GpsL2CSyncState
cm_code_lock
cl_code_lock
c_nav_bit
c_nav_frame
tow_decoded
GpsL5SyncState
code_lock
c_nav_bit
c_nav_frame
tow_decoded
GlonassL1fSyncState
code_lock
symbol
nav_bit
string
tod_decoded
BeidouB1SyncState
code_lock
nav_bit
subframe
tow_decoded
BeidouB2SyncState
code_lock
nav_bit
subframe
tow_decoded
GalileoE1SyncState
e1bc_code_lock
e1c_code_lock
e1b_page
tow_decoded
GalileoE5SyncState
e5b_prim_code_lock
e5a_prim_code_lock
e5_alt_boc_prim_code_lock
e5b_data_bit
e5a_data_bit
e5b_sec_code_lock
e5a_sec_code_lock
e5b_page_sync
e5a_page_sync
tow_decoded
SbasL1SyncState
code_lock
symbol
message
SyncState
band
.CLPrivateData.Band
gps_l1
.CLPrivateData.GpsL1SyncState
gps_l2c
.CLPrivateData.GpsL2CSyncState
gps_l5
.CLPrivateData.GpsL5SyncState
glonass_l1f
2".CLPrivateData.GlonassL1fSyncState
beidou_b1
2 .CLPrivateData.BeidouB1SyncState
beidou_b2
2 .CLPrivateData.BeidouB2SyncState
galileo_e1
2!.CLPrivateData.GalileoE1SyncState
galileo_e5
2!.CLPrivateData.GalileoE5SyncState
sbas_l1
.CLPrivateData.SbasL1SyncState"@
SvTime
time_nanoseconds
time_unc_nanoseconds
FrequencyOffset
frequency_offset_ppb
frequency_offset_unc_ppb
PhaseTracking
phase_start_time_nanoseconds
phase_end_time_nanoseconds
accumulated_phase_nanoseconds
!accumulated_phase_unc_nanoseconds
cycle_slips_detected
FullSvTime
 derived_full_sv_time_nanoseconds
$derived_full_sv_time_unc_nanoseconds
full_sv_time_source
.CLPrivateData.FullSvTimeSource"U
SvMeasurementUsage
innovation
residual
final_uncertainty
MeasurementExtension
jammer_cn0_dbHz
snr_at_correlator_output
full_sv_time
.CLPrivateData.FullSvTime
sv_time_usage_nanoseconds
2!.CLPrivateData.SvMeasurementUsage
frequency_offset_usage_ppb
2!.CLPrivateData.SvMeasurementUsage
carrier_phase_usage_nanoseconds
2!.CLPrivateData.SvMeasurementUsage
noncoherent_interval_count
coherent_interval_count
sv_time_detection_method
2).CLPrivateData.MeasurementDetectionMethod
frequency_detection_method
2).CLPrivateData.MeasurementDetectionMethod"
Measurement
.CLPrivateData.SvId
sync_state
.CLPrivateData.SyncState
start_time_nanoseconds
end_time_nanoseconds
applicability_time_nanoseconds
sv_time
.CLPrivateData.SvTime
frequency_offset
.CLPrivateData.FrequencyOffset
phase_tracking
.CLPrivateData.PhaseTracking
extension
2#.CLPrivateData.MeasurementExtension
cn0_dbHz
multipath_indicator
2!.CLPrivateData.MultipathIndicator"
ReceiverClockModel
'frequency_noise_ppb_per_second_per_rtHz
phase_noise_ppb_per_rtHz
frequency_variance_ppb2
phase_variance_nanoseconds
ReceiverClockCorrections
frequency_correction_ppb
(cummulative_phase_correction_nanoseconds
ReceiverToGpsTimeConversion
offset_nanoseconds
!sub_nanosecond_offset_nanoseconds
offset_uncertainty_nanoseconds
drift_ppb
drift_uncertainty_ppb
Clock
clock_nanoseconds
model
2!.CLPrivateData.ReceiverClockModel
corrections
2'.CLPrivateData.ReceiverClockCorrections
receiver_to_gps_time
2*.CLPrivateData.ReceiverToGpsTimeConversion"j
MeasurementReport
clock
.CLPrivateData.Clock
measurements
.CLPrivateData.Measurement",
Wgs84Ecef
BandCorrections
band
.CLPrivateData.Band
tropospheric_nanoseconds
ionospheric_nanoseconds
tx_group_delay_nanoseconds
SvPositionAtTime
applicable_time_nanoseconds
position
.CLPrivateData.Wgs84Ecef"
SvInfo
.CLPrivateData.SvId
applicable_time_nanoseconds
position_source
.CLPrivateData.SvPositionSource
anchor_positions
.CLPrivateData.SvPositionAtTime
!clock_bias_correction_nanoseconds
clock_frequency_correction_ppb
-clock_frequency_change_correction_ppb_per_sec
range_accuracy_position_m
 range_accuracy_clock_nanoseconds
over_the_air_from_sv_health
2!.CLPrivateData.SvHealthIndication
!over_the_air_from_other_sv_health
2!.CLPrivateData.SvHealthIndication
assistance_file_health
2!.CLPrivateData.SvHealthIndication
ms_based_health
2!.CLPrivateData.SvHealthIndication
integrity_health
2!.CLPrivateData.SvHealthIndication
band_corrections
.CLPrivateData.BandCorrections"
ReceiverBandCorrections
band
.CLPrivateData.Band
rf_time_bias_nanoseconds
$rf_time_bias_uncertainty_nanoseconds
LeapSecondChange
time_of_change
new_leap_second
LeapSecondInfo
current_leap_second
change_knowledge
2(.CLPrivateData.LeapSecondChangeKnowledge
new_leap_second
.CLPrivateData.LeapSecondChange"
GpsToUtcConversion
applicable_time_nanoseconds
offset_nanoseconds
drift_ppb
accel_ppb_per_second
GpsTimeInfo
week
leap_second
.CLPrivateData.LeapSecondInfo
conversion
2!.CLPrivateData.GpsToUtcConversion"b
GlonassSubsecondConversion
collection_time_nanoseconds
offset_time_nanoseconds
GlonassTimeInfo
four_week_period
leap_second
2 .CLPrivateData.GlonassLeapSecond
gps_time_conversion
2).CLPrivateData.GlonassSubsecondConversion
utc_conversion
2).CLPrivateData.GlonassSubsecondConversion"i
SubSecondConversion
applicable_time_nanoSeconds
offset_nanoSeconds
drift_ppb
BeidouTimeInfo
week
leap_second
.CLPrivateData.LeapSecondInfo
gps_time_conversion
2".CLPrivateData.SubSecondConversion
glonass_time_conversion
2".CLPrivateData.SubSecondConversion
galileo_time_conversion
2".CLPrivateData.SubSecondConversion
utc_time_xonversion
2".CLPrivateData.SubSecondConversion"
GalileoTimeInfo
week
leapSecond
.CLPrivateData.LeapSecondInfo
gpsTimeConversion
2".CLPrivateData.SubSecondConversion
utcTimeConversion
2".CLPrivateData.SubSecondConversion"
TimeConversionInfo
.CLPrivateData.GpsTimeInfo
glonass
.CLPrivateData.GlonassTimeInfo
beidou
.CLPrivateData.BeidouTimeInfo
galileo
.CLPrivateData.GalileoTimeInfo"e
ReceivedTimeStamp
ios_absolute_sec
mach_absolute_sec
mach_continuous_sec
!MeasurementReportCallbackContents
received_timestamp
2 .CLPrivateData.ReceivedTimeStamp
meas_report
2 .CLPrivateData.MeasurementReport
sv_info
.CLPrivateData.SvInfo
band_corrections
2&.CLPrivateData.ReceiverBandCorrections
time_conversion
2!.CLPrivateData.TimeConversionInfo*
GlonassSlotSource
$GLONASS_SLOT_SOURCE_PROTOBUF_DEFAULT
GLONASS_SLOT_SOURCE_UNSET
GLONASS_SLOT_SOURCE_UNCLEAR
(GLONASS_SLOT_SOURCE_DECODED_OVER_THE_AIR
&GLONASS_SLOT_SOURCE_POSITION_KNOWLEDGE
SatelliteSystem
SATELLITE_SYSTEM_UNKNOWN
SATELLITE_SYSTEM_GPS
SATELLITE_SYSTEM_GLONASS
SATELLITE_SYSTEM_BEIDOU
SATELLITE_SYSTEM_GALILEO
SATELLITE_SYSTEM_QZSS
SATELLITE_SYSTEM_SBAS
Band
BAND_PROTOBUF_DEFAULT
BAND_UNSET
BAND_GPS_QZSS_L1
BAND_GPS_QZSS_L2C
BAND_GPS_QZSS_L5
BAND_GLONASS_L1F
BAND_BEIDOU_B1
BAND_BEIDOU_B2
BAND_GALILEO_E1
BAND_GALILEO_E5
BAND_SBAS_L1
FullSvTimeSource
$FULL_SV_TIME_SOURCE_PROTOBUF_DEFAULT
FULL_SV_TIME_SOURCE_UNSET
)FULL_SV_TIME_SOURCE_NEWLY_DECODED_FROM_SV
(FULL_SV_TIME_SOURCE_PREV_DECODED_FROM_SV
.FULL_SV_TIME_SOURCE_POSITION_AND_OTHER_SV_TIME
!FULL_SV_TIME_SOURCE_POSITION_ONLY
MeasurementDetectionMethod
-MEASUREMENT_DETECTION_METHOD_PROTOBUF_DEFAULT
"MEASUREMENT_DETECTION_METHOD_UNSET
)MEASUREMENT_DETECTION_METHOD_NOT_DETECTED
(MEASUREMENT_DETECTION_METHOD_ENERGY_BINS
*MEASUREMENT_DETECTION_METHOD_CODE_TRACKING
/MEASUREMENT_DETECTION_METHOD_FREQUENCY_TRACKING
+MEASUREMENT_DETECTION_METHOD_PHASE_TRACKING
MultipathIndicator
$MULTIPATH_INDICATOR_PROTOBUF_DEFAULT
MULTIPATH_INDICATOR_UNSET
MULTIPATH_INDICATOR_UNKNOWN
MULTIPATH_INDICATOR_PRESENT
MULTIPATH_INDICATOR_NOT_PRESENT
SvPositionSource
#SV_POSITION_SOURCE_PROTOBUF_DEFAULT
SV_POSITION_SOURCE_UNSET
)SV_POSITION_SOURCE_EPHEMERIS_OVER_THE_AIR
,SV_POSITION_SOURCE_EPHEMERIS_ASSISTANCE_FILE
.SV_POSITION_SOURCE_LONG_TERM_ORBIT_MOBILE_CALC
2SV_POSITION_SOURCE_LONG_TERM_ORBIT_ASSISTANCE_FILE
SvHealthIndication
%SV_HEALTH_INDICATION_PROTOBUF_DEFAULT
SV_HEALTH_INDICATION_UNSET
SV_HEALTH_INDICATION_UNKNOWN
SV_HEALTH_INDICATION_HEALTHY
SV_HEALTH_INDICATION_UNHEALTHY
LeapSecondChangeKnowledge
-LEAP_SECOND_CHANGE_KNOWLEDGE_PROTOBUF_DEFAULT
+LEAP_SECOND_CHANGE_KNOWLEDGE_PROTOBUF_UNSET
-LEAP_SECOND_CHANGE_KNOWLEDGE_PROTOBUF_UNKNOWN
2LEAP_SECOND_CHANGE_KNOWLEDGE_PROTOBUF_NOT_CHANGING
.LEAP_SECOND_CHANGE_KNOWLEDGE_PROTOBUF_CHANGING
GlonassLeapSecond
$GLONASS_LEAP_SECOND_PROTOBUF_DEFAULT
GLONASS_LEAP_SECOND_UNSET
GLONASS_LEAP_SECOND_NONE
GLONASS_LEAP_SECOND_POSITIVE
GLONASS_LEAP_SECOND_NEGATIVE
#GLONASS_LEAP_SECOND_NOT_YET_DEFINED
N13CLPrivateData15GlonassSlotInfoE
N13CLPrivateData9GlonassIdE
N13CLPrivateData15ConstellationIdE
N13CLPrivateData4SvIdE
N13CLPrivateData14GpsL1SyncStateE
N13CLPrivateData15GpsL2CSyncStateE
N13CLPrivateData14GpsL5SyncStateE
N13CLPrivateData19GlonassL1fSyncStateE
N13CLPrivateData17BeidouB1SyncStateE
N13CLPrivateData17BeidouB2SyncStateE
N13CLPrivateData18GalileoE1SyncStateE
N13CLPrivateData18GalileoE5SyncStateE
N13CLPrivateData15SbasL1SyncStateE
N13CLPrivateData9SyncStateE
N13CLPrivateData6SvTimeE
N13CLPrivateData15FrequencyOffsetE
N13CLPrivateData13PhaseTrackingE
N13CLPrivateData10FullSvTimeE
N13CLPrivateData18SvMeasurementUsageE
N13CLPrivateData20MeasurementExtensionE
N13CLPrivateData11MeasurementE
N13CLPrivateData18ReceiverClockModelE
N13CLPrivateData24ReceiverClockCorrectionsE
N13CLPrivateData27ReceiverToGpsTimeConversionE
N13CLPrivateData5ClockE
N13CLPrivateData17MeasurementReportE
N13CLPrivateData9Wgs84EcefE
N13CLPrivateData15BandCorrectionsE
N13CLPrivateData16SvPositionAtTimeE
N13CLPrivateData6SvInfoE
N13CLPrivateData23ReceiverBandCorrectionsE
N13CLPrivateData16LeapSecondChangeE
N13CLPrivateData14LeapSecondInfoE
N13CLPrivateData18GpsToUtcConversionE
N13CLPrivateData11GpsTimeInfoE
N13CLPrivateData26GlonassSubsecondConversionE
N13CLPrivateData15GlonassTimeInfoE
N13CLPrivateData19SubSecondConversionE
N13CLPrivateData14BeidouTimeInfoE
N13CLPrivateData15GalileoTimeInfoE
N13CLPrivateData18TimeConversionInfoE
N13CLPrivateData17ReceivedTimeStampE
N13CLPrivateData33MeasurementReportCallbackContentsE
A19CLAutopauseProvider
10CLNotifierIN24CLAutopauseProvider_Type12NotificationENS0_16NotificationDataEccE
N24CLAutopauseProvider_Type6ClientE
N10CLNotifierIN24CLAutopauseProvider_Type12NotificationENS0_16NotificationDataEccE6ClientE
NSt3__120__shared_ptr_emplaceIN24CLAutopauseProvider_Type16NotificationDataENS_9allocatorIS2_EEEE
N@10CLTileFile
21CLPeerRangingNotifier
10CLNotifierIN26CLPeerRangingNotifier_Type12NotificationENS0_16NotificationDataEcNS0_7RegInfoEE
28CLPeerRangingManagerDelegate
N26CLPeerRangingNotifier_Type6ClientE
N10CLNotifierIN26CLPeerRangingNotifier_Type12NotificationENS0_16NotificationDataEcNS0_7RegInfoEE6ClientE
NSt3__110__function6__funcINS_6__bindIM21CLPeerRangingNotifierFviRKN18CLWifiService_Type12NotificationERKNS4_16NotificationDataEEJRPS3_RKNS_12placeholders4__phILi1EEERKNSG_ILi2EEERKNSG_ILi3EEEEEENS_9allocatorISQ_EEFviS7_SA_EEE
NSt3__16__bindIM21CLPeerRangingNotifierFviRKN18CLWifiService_Type12NotificationERKNS2_16NotificationDataEEJRPS1_RKNS_12placeholders4__phILi1EEERKNSE_ILi2EEERKNSE_ILi3EEEEEE
NSt3__118__weak_result_typeIM21CLPeerRangingNotifierFviRKN18CLWifiService_Type12NotificationERKNS2_16NotificationDataEEEE
NSt3__120__shared_ptr_emplaceIN26CLPeerRangingNotifier_Type16NotificationDataENS_9allocatorIS2_EEEE
?14CLTilesManager
10CLNotifierIN19CLTilesManager_Type12NotificationENS0_16NotificationDataEccE
N19CLTilesManager_Type6ClientE
N10CLNotifierIN19CLTilesManager_Type12NotificationENS0_16NotificationDataEccE6ClientE
NSt3__120__shared_ptr_emplaceIN19CLTilesManager_Type16NotificationDataENS_9allocatorIS2_EEEE
19CLNatalieCycleModel
14CLWifiTileFile
N2CL3Log17logfile_streambufE
20CLLogEntry_TimeStamp
10CLLogEntry
?333333
@333333
@ffffff
(@17CLOnBodyNotifier7
21CLAutopauseCalculator
@24CLCompanionNotifierWatch
5CLBTA
10CLNotifierIN10CLBTA_Type12NotificationENS0_16NotificationDataEccE
N10CLBTA_Type6ClientE
N10CLNotifierIN10CLBTA_Type12NotificationENS0_16NotificationDataEccE6ClientE
NSt3__120__shared_ptr_emplaceIN10CLBTA_Type16NotificationDataENS_9allocatorIS2_EEEE
b*J@k
M@\z
S@t9
tdV@u
K]@ 
)c@!3I
`fp@
#l@ffff
;q@G
@9W
X9t?
14CLPressureBias
10CLNotifierIN19CLPressureBias_Type12NotificationENS0_16NotificationDataEccE
N19CLPressureBias_Type6ClientE
N10CLNotifierIN19CLPressureBias_Type12NotificationENS0_16NotificationDataEccE6ClientE
NSt3__120__shared_ptr_emplaceIN19CLPressureBias_Type16NotificationDataENS_9allocatorIS2_EEEE
19CLMotionCoprocessor
N24CMMotionCoprocessorReply7VisitorE
9CLDEMTile
22CLRavenEventSerializer
O@vO
h2P@
+QW@w-!
XAX@
17CLOdometerQuality
24CLTileDownloaderExternal
25CLITileDownloaderExternal
19NoopTileSyncManager
b?KY6
?ffffff
 n;^
Qkkbal
i]Wb
9a&g
MGiI
wn>Jj
#.zf
+o*7
N23CLDigitalElevationModel19CLDEMAltitudeFilterE
23CLDigitalElevationModel
N12_GLOBAL__N_115HarvestDelegateE
N27CLSubHarvesterMicroLocation16IHarvestDelegateE
NSt3__110__function6__funcIZN12_GLOBAL__N_116registerActivityI26CLMicroLocationMaintenanceZN35CLMicroLocationBackgroundActivities24registerForXPCActivitiesENSt12experimental15fundamentals_v18optionalINS_8functionIFvRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKN33CLMicroLocationXPCActivityHelpers11XPCCriteriaEEEEEEE3$_0EEvP6CLSiloSL_RNS5_29IBackgroundActivitiesDelegateERNS_6vectorINS_10unique_ptrINSI_15XPCRegistrationENS_14default_deleteISW_EEEENSD_ISZ_EEEESO_T0_EUlNSI_11XPCActivityEE_NSD_IS15_EEFvS14_EEE
NSt3__110__function6__baseIFvN33CLMicroLocationXPCActivityHelpers11XPCActivityEEEE
NSt3__110__function6__funcIZN35CLMicroLocationBackgroundActivities14ActivityRunnerIN33CLMicroLocationXPCActivityHelpers11XPCActivityE26CLMicroLocationMaintenanceEC1ES5_RS6_EUlvE_NS_9allocatorIS9_EEFbvEEE
ZN35CLMicroLocationBackgroundActivities14ActivityRunnerIN33CLMicroLocationXPCActivityHelpers11XPCActivityE26CLMicroLocationMaintenanceEC1ES2_RS3_EUlvE_
ZN12_GLOBAL__N_116registerActivityI26CLMicroLocationMaintenanceZN35CLMicroLocationBackgroundActivities24registerForXPCActivitiesENSt12experimental15fundamentals_v18optionalINSt3__18functionIFvRKNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEERKN33CLMicroLocationXPCActivityHelpers11XPCCriteriaEEEEEEE3$_0EEvP6CLSiloSJ_RNS2_29IBackgroundActivitiesDelegateERNS6_6vectorINS6_10unique_ptrINSG_15XPCRegistrationENS6_14default_deleteISU_EEEENSB_ISX_EEEESM_T0_EUlNSG_11XPCActivityEE_
NSt3__110__function6__funcIZN12_GLOBAL__N_116registerActivityI24CLMicroLocationAnalyticsZN35CLMicroLocationBackgroundActivities24registerForXPCActivitiesENSt12experimental15fundamentals_v18optionalINS_8functionIFvRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKN33CLMicroLocationXPCActivityHelpers11XPCCriteriaEEEEEEE3$_1EEvP6CLSiloSL_RNS5_29IBackgroundActivitiesDelegateERNS_6vectorINS_10unique_ptrINSI_15XPCRegistrationENS_14default_deleteISW_EEEENSD_ISZ_EEEESO_T0_EUlNSI_11XPCActivityEE_NSD_IS15_EEFvS14_EEE
NSt3__110__function6__funcIZN35CLMicroLocationBackgroundActivities14ActivityRunnerIN33CLMicroLocationXPCActivityHelpers11XPCActivityE24CLMicroLocationAnalyticsEC1ES5_RS6_EUlvE_NS_9allocatorIS9_EEFbvEEE
ZN35CLMicroLocationBackgroundActivities14ActivityRunnerIN33CLMicroLocationXPCActivityHelpers11XPCActivityE24CLMicroLocationAnalyticsEC1ES2_RS3_EUlvE_
ZN12_GLOBAL__N_116registerActivityI24CLMicroLocationAnalyticsZN35CLMicroLocationBackgroundActivities24registerForXPCActivitiesENSt12experimental15fundamentals_v18optionalINSt3__18functionIFvRKNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEERKN33CLMicroLocationXPCActivityHelpers11XPCCriteriaEEEEEEE3$_1EEvP6CLSiloSJ_RNS2_29IBackgroundActivitiesDelegateERNS6_6vectorINS6_10unique_ptrINSG_15XPCRegistrationENS6_14default_deleteISU_EEEENSB_ISX_EEEESM_T0_EUlNSG_11XPCActivityEE_
NSt3__110__function6__funcIZN12_GLOBAL__N_116registerActivityI22CLMicroLocationLearnerZN35CLMicroLocationBackgroundActivities24registerForXPCActivitiesENSt12experimental15fundamentals_v18optionalINS_8functionIFvRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKN33CLMicroLocationXPCActivityHelpers11XPCCriteriaEEEEEEE3$_2EEvP6CLSiloSL_RNS5_29IBackgroundActivitiesDelegateERNS_6vectorINS_10unique_ptrINSI_15XPCRegistrationENS_14default_deleteISW_EEEENSD_ISZ_EEEESO_T0_EUlNSI_11XPCActivityEE_NSD_IS15_EEFvS14_EEE
NSt3__110__function6__funcIZN35CLMicroLocationBackgroundActivities14ActivityRunnerIN33CLMicroLocationXPCActivityHelpers11XPCActivityE22CLMicroLocationLearnerEC1ES5_RS6_EUlvE_NS_9allocatorIS9_EEFbvEEE
ZN35CLMicroLocationBackgroundActivities14ActivityRunnerIN33CLMicroLocationXPCActivityHelpers11XPCActivityE22CLMicroLocationLearnerEC1ES2_RS3_EUlvE_
ZN12_GLOBAL__N_116registerActivityI22CLMicroLocationLearnerZN35CLMicroLocationBackgroundActivities24registerForXPCActivitiesENSt12experimental15fundamentals_v18optionalINSt3__18functionIFvRKNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEERKN33CLMicroLocationXPCActivityHelpers11XPCCriteriaEEEEEEE3$_2EEvP6CLSiloSJ_RNS2_29IBackgroundActivitiesDelegateERNS6_6vectorINS6_10unique_ptrINSG_15XPCRegistrationENS6_14default_deleteISU_EEEENSB_ISX_EEEESM_T0_EUlNSG_11XPCActivityEE_
NSt3__110__function6__funcIZN12_GLOBAL__N_116registerActivityI27CLSubHarvesterMicroLocationZN35CLMicroLocationBackgroundActivities24registerForXPCActivitiesENSt12experimental15fundamentals_v18optionalINS_8functionIFvRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKN33CLMicroLocationXPCActivityHelpers11XPCCriteriaEEEEEEE3$_3EEvP6CLSiloSL_RNS5_29IBackgroundActivitiesDelegateERNS_6vectorINS_10unique_ptrINSI_15XPCRegistrationENS_14default_deleteISW_EEEENSD_ISZ_EEEESO_T0_EUlNSI_11XPCActivityEE_NSD_IS15_EEFvS14_EEE
NSt3__110__function6__funcIZN35CLMicroLocationBackgroundActivities14ActivityRunnerIN33CLMicroLocationXPCActivityHelpers11XPCActivityE27CLSubHarvesterMicroLocationEC1ES5_RS6_EUlvE_NS_9allocatorIS9_EEFbvEEE
ZN35CLMicroLocationBackgroundActivities14ActivityRunnerIN33CLMicroLocationXPCActivityHelpers11XPCActivityE27CLSubHarvesterMicroLocationEC1ES2_RS3_EUlvE_
ZN12_GLOBAL__N_116registerActivityI27CLSubHarvesterMicroLocationZN35CLMicroLocationBackgroundActivities24registerForXPCActivitiesENSt12experimental15fundamentals_v18optionalINSt3__18functionIFvRKNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEERKN33CLMicroLocationXPCActivityHelpers11XPCCriteriaEEEEEEE3$_3EEvP6CLSiloSJ_RNS2_29IBackgroundActivitiesDelegateERNS6_6vectorINS6_10unique_ptrINSG_15XPCRegistrationENS6_14default_deleteISU_EEEENSB_ISX_EEEESM_T0_EUlNSG_11XPCActivityEE_
NSt3__110__function6__funcIZN12_GLOBAL__N_116registerActivityI23CLMicroLocationPowerLogZN35CLMicroLocationBackgroundActivities24registerForXPCActivitiesENSt12experimental15fundamentals_v18optionalINS_8functionIFvRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKN33CLMicroLocationXPCActivityHelpers11XPCCriteriaEEEEEEE3$_4EEvP6CLSiloSL_RNS5_29IBackgroundActivitiesDelegateERNS_6vectorINS_10unique_ptrINSI_15XPCRegistrationENS_14default_deleteISW_EEEENSD_ISZ_EEEESO_T0_EUlNSI_11XPCActivityEE_NSD_IS15_EEFvS14_EEE
NSt3__110__function6__funcIZN35CLMicroLocationBackgroundActivities14ActivityRunnerIN33CLMicroLocationXPCActivityHelpers11XPCActivityE23CLMicroLocationPowerLogEC1ES5_RS6_EUlvE_NS_9allocatorIS9_EEFbvEEE
ZN35CLMicroLocationBackgroundActivities14ActivityRunnerIN33CLMicroLocationXPCActivityHelpers11XPCActivityE23CLMicroLocationPowerLogEC1ES2_RS3_EUlvE_
ZN12_GLOBAL__N_116registerActivityI23CLMicroLocationPowerLogZN35CLMicroLocationBackgroundActivities24registerForXPCActivitiesENSt12experimental15fundamentals_v18optionalINSt3__18functionIFvRKNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEERKN33CLMicroLocationXPCActivityHelpers11XPCCriteriaEEEEEEE3$_4EEvP6CLSiloSJ_RNS2_29IBackgroundActivitiesDelegateERNS6_6vectorINS6_10unique_ptrINSG_15XPCRegistrationENS6_14default_deleteISU_EEEENSB_ISX_EEEESM_T0_EUlNSG_11XPCActivityEE_
NSt3__110__function6__funcIZN12_GLOBAL__N_116registerActivityIN23CLMicroLocationDatabase9DbFlusherEZN35CLMicroLocationBackgroundActivities24registerForXPCActivitiesENSt12experimental15fundamentals_v18optionalINS_8functionIFvRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKN33CLMicroLocationXPCActivityHelpers11XPCCriteriaEEEEEEE3$_5EEvP6CLSiloSM_RNS6_29IBackgroundActivitiesDelegateERNS_6vectorINS_10unique_ptrINSJ_15XPCRegistrationENS_14default_deleteISX_EEEENSE_IS10_EEEESP_T0_EUlNSJ_11XPCActivityEE_NSE_IS16_EEFvS15_EEE
NSt3__110__function6__funcIZN35CLMicroLocationBackgroundActivities14ActivityRunnerIN33CLMicroLocationXPCActivityHelpers11XPCActivityEN23CLMicroLocationDatabase9DbFlusherEEC1ES5_RS7_EUlvE_NS_9allocatorISA_EEFbvEEE
ZN35CLMicroLocationBackgroundActivities14ActivityRunnerIN33CLMicroLocationXPCActivityHelpers11XPCActivityEN23CLMicroLocationDatabase9DbFlusherEEC1ES2_RS4_EUlvE_
ZN12_GLOBAL__N_116registerActivityIN23CLMicroLocationDatabase9DbFlusherEZN35CLMicroLocationBackgroundActivities24registerForXPCActivitiesENSt12experimental15fundamentals_v18optionalINSt3__18functionIFvRKNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEERKN33CLMicroLocationXPCActivityHelpers11XPCCriteriaEEEEEEE3$_5EEvP6CLSiloSK_RNS3_29IBackgroundActivitiesDelegateERNS7_6vectorINS7_10unique_ptrINSH_15XPCRegistrationENS7_14default_deleteISV_EEEENSC_ISY_EEEESN_T0_EUlNSH_11XPCActivityEE_
NSt3__110__function6__funcIZN12_GLOBAL__N_116registerActivityI25CLMicroLocationAWDMetricsZN35CLMicroLocationBackgroundActivities24registerForXPCActivitiesENSt12experimental15fundamentals_v18optionalINS_8functionIFvRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKN33CLMicroLocationXPCActivityHelpers11XPCCriteriaEEEEEEE3$_6EEvP6CLSiloSL_RNS5_29IBackgroundActivitiesDelegateERNS_6vectorINS_10unique_ptrINSI_15XPCRegistrationENS_14default_deleteISW_EEEENSD_ISZ_EEEESO_T0_EUlNSI_11XPCActivityEE_NSD_IS15_EEFvS14_EEE
NSt3__110__function6__funcIZN35CLMicroLocationBackgroundActivities14ActivityRunnerIN33CLMicroLocationXPCActivityHelpers11XPCActivityE25CLMicroLocationAWDMetricsEC1ES5_RS6_EUlvE_NS_9allocatorIS9_EEFbvEEE
ZN35CLMicroLocationBackgroundActivities14ActivityRunnerIN33CLMicroLocationXPCActivityHelpers11XPCActivityE25CLMicroLocationAWDMetricsEC1ES2_RS3_EUlvE_
ZN12_GLOBAL__N_116registerActivityI25CLMicroLocationAWDMetricsZN35CLMicroLocationBackgroundActivities24registerForXPCActivitiesENSt12experimental15fundamentals_v18optionalINSt3__18functionIFvRKNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEERKN33CLMicroLocationXPCActivityHelpers11XPCCriteriaEEEEEEE3$_6EEvP6CLSiloSJ_RNS2_29IBackgroundActivitiesDelegateERNS6_6vectorINS6_10unique_ptrINSG_15XPCRegistrationENS6_14default_deleteISU_EEEENSB_ISX_EEEESM_T0_EUlNSG_11XPCActivityEE_
27CLVehicleConnectionNotifier
10CLNotifierIN32CLVehicleConnectionNotifier_Type12NotificationENS0_16NotificationDataEccE
NSt3__120__shared_ptr_emplaceIN32CLVehicleConnectionNotifier_Type16NotificationDataENS_9allocatorIS2_EEEE
sA-C
Zw+?(
Zwk?
TXA{
@17CLMotionSyncStore
10CLNotifierIN22CLMotionSyncStore_Type12NotificationENS0_16NotificationDataEccE
NSt3__120__shared_ptr_emplaceIN22CLMotionSyncStore_Type16NotificationDataENS_9allocatorIS2_EEEE
27CLLocationAwarenessProvider
10CLNotifierIN32CLLocationAwarenessProvider_Type12NotificationENS0_16NotificationDataEcNS0_7RegInfoEE
N32CLLocationAwarenessProvider_Type6ClientE
N10CLNotifierIN32CLLocationAwarenessProvider_Type12NotificationENS0_16NotificationDataEcNS0_7RegInfoEE6ClientE
NSt3__120__shared_ptr_emplaceIN32CLLocationAwarenessProvider_Type16NotificationDataENS_9allocatorIS2_EEEE
24CLFitnessMachineNotifier
10CLNotifierIN29CLFitnessMachineNotifier_Type12NotificationENS0_16NotificationDataEccE
N29CLFitnessMachineNotifier_Type6ClientE
N10CLNotifierIN29CLFitnessMachineNotifier_Type12NotificationENS0_16NotificationDataEccE6ClientE
NSt3__120__shared_ptr_emplaceIN29CLFitnessMachineNotifier_Type16NotificationDataENS_9allocatorIS2_EEEE
13CLMapGeometry
12CLMapMatcher
NSt3__120__shared_ptr_pointerIP18CLSimpleMapMatcherNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI18CLSimpleMapMatcherEE
NSt3__120__shared_ptr_pointerIP18CLScoredMapMatcherNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI18CLScoredMapMatcherEE
NSt3__120__shared_ptr_pointerIP20CLParticleMapMatcherNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI20CLParticleMapMatcherEE
NSt3__120__shared_ptr_pointerIP13CLPlosMatcherNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI13CLPlosMatcherEE
NSt3__120__shared_ptr_pointerIP16CLOutdoorMatcherNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI16CLOutdoorMatcherEE
21CLElevationRecorderDb
20CLActivityRecorderDbI22CLSignificantElevationN12CLActivityDB22NoDataProtectionPolicyEE
18CLSimpleMapMatcher
`f@fffff
833&@
@fffff
@18CLScoredMapMatcher
26CLCellTilesManagerExternal
27CLICellTilesManagerExternal
b@ffffff
20CLParticleMapMatcher
23CLMapMatchingEngineBase
19CLMapMatchingEngine
12CLAppMonitor
10CLNotifierIN17CLAppMonitor_Type12NotificationENS0_16NotificationDataEccE
N17CLAppMonitor_Type6ClientE
N10CLNotifierIN17CLAppMonitor_Type12NotificationENS0_16NotificationDataEccE6ClientE
NSt3__120__shared_ptr_emplaceIN17CLAppMonitor_Type16NotificationDataENS_9allocatorIS2_EEEE
20CLProtobufSerializer
21CMStrideCalRecorderDb
20CLActivityRecorderDbI16CLStrideCalEntryN12CLActivityDB22NoDataProtectionPolicyEE
LogMotionStateReplay
21CLMotionStateObserver
10CLNotifierIN26CLMotionStateObserver_Type12NotificationENS0_16NotificationDataEccE
N26CLMotionStateObserver_Type6ClientE
N10CLNotifierIN26CLMotionStateObserver_Type12NotificationENS0_16NotificationDataEccE6ClientE
NSt3__120__shared_ptr_emplaceIN26CLMotionStateObserver_Type16NotificationDataENS_9allocatorIS2_EEEE
@@33
Ga=fff?
l@33s?
 Aff&?
18CLCellTilesManager
10CLNotifierIN23CLCellTilesManager_Type12NotificationENS0_16NotificationDataEccE
N23CLCellTilesManager_Type6ClientE
N10CLNotifierIN23CLCellTilesManager_Type12NotificationENS0_16NotificationDataEccE6ClientE
12CLEntryCacheINSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE16CLDaemonLocationE
16CLEntryCacheBase
NSt3__120__shared_ptr_emplaceIN23CLCellTilesManager_Type16NotificationDataENS_9allocatorIS2_EEEE
27CLAutopauseProviderConcrete
MotionCalibration
com.apple.locationd.bundle-/System/Library/LocationBundles/MotionCalibration.bundle
?14CLDeviceMotion
26CLActivityLoggerRatePolicy
18CLTileParsingError
18CLWifiTilesManager
10CLNotifierIN23CLWifiTilesManager_Type12NotificationENS0_16NotificationDataEccE
15CLITilesManager
N23CLWifiTilesManager_Type6ClientE
N10CLNotifierIN23CLWifiTilesManager_Type12NotificationENS0_16NotificationDataEccE6ClientE
NSt3__120__shared_ptr_emplaceIN23CLWifiTilesManager_Type16NotificationDataENS_9allocatorIS2_EEEE
NSt3__111__end_stateIcEE
NSt3__16__nodeIcEE
NSt3__120__shared_ptr_pointerIPNS_13__empty_stateIcEENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE
NSt3__114default_deleteINS_13__empty_stateIcEEEE
NSt3__113__empty_stateIcEE
NSt3__116__owns_one_stateIcEE
NSt3__115__has_one_stateIcEE
NSt3__110__l_anchorIcEE
NSt3__110__r_anchorIcEE
NSt3__115__word_boundaryIcNS_12regex_traitsIcEEEE
NSt3__111__lookaheadIcNS_12regex_traitsIcEEEE
NSt3__123__match_any_but_newlineIcEE
NSt3__118__match_char_icaseIcNS_12regex_traitsIcEEEE
NSt3__120__match_char_collateIcNS_12regex_traitsIcEEEE
NSt3__112__match_charIcEE
NSt3__116__back_ref_icaseIcNS_12regex_traitsIcEEEE
NSt3__118__back_ref_collateIcNS_12regex_traitsIcEEEE
NSt3__110__back_refIcEE
NSt3__120__bracket_expressionIcNS_12regex_traitsIcEEEE
NSt3__128__begin_marked_subexpressionIcEE
NSt3__126__end_marked_subexpressionIcEE
NSt3__16__loopIcEE
NSt3__117__owns_two_statesIcEE
NSt3__117__repeat_one_loopIcEE
NSt3__111__alternateIcEE
NSt3__121__empty_non_own_stateIcEE
NSt3__111__match_anyIcEE
11CLBinaryLog
16CLBinaryLogTypes
25CLActivityLoggerMsgPolicy
22CLActivityLoggerPolicy
24CLAutopauseProviderDummy
4@21CLNatalimetryNotifier
10CLNotifierIN26CLNatalimetryNotifier_Type12NotificationENS0_16NotificationDataEccE
N26CLNatalimetryNotifier_Type6ClientE
N10CLNotifierIN26CLNatalimetryNotifier_Type12NotificationENS0_16NotificationDataEccE6ClientE
20CLNatalieInputBufferIN26CLMotionStateMediator_Type22MediatedMotionActivityEE
NSt3__120__shared_ptr_pointerIP23CLNatalimetryRecorderDbNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI23CLNatalimetryRecorderDbEE
NSt3__120__shared_ptr_pointerIP26CLExerciseMinuteRecorderDbNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI26CLExerciseMinuteRecorderDbEE
27CLNatalieSourceFromNotifierI22CLElevationChangeEntryE
20CLNatalieInputBufferI22CLElevationChangeEntryE
27CLNatalieSourceFromNotifierI28CLCoarseElevationChangeEntryE
14CLNatalieInputI28CLCoarseElevationChangeEntryE
20CLNatalieInputBufferI28CLCoarseElevationChangeEntryE
27CLNatalieSourceFromNotifierI15CLCatherineDataE
14CLNatalieInputI15CLCatherineDataE
20CLNatalieInputBufferI15CLCatherineDataE
27CLNatalieSourceFromNotifierI16CLStepCountEntryE
14CLNatalieInputI16CLStepCountEntryE
20CLNatalieInputBufferI16CLStepCountEntryE
14CLNatalieInputIN26CLMotionStateMediator_Type22MediatedMotionActivityEE
27CLNatalieSourceFromNotifierI11CLSwimEntryE
14CLNatalieInputI11CLSwimEntryE
20CLNatalieInputBufferI11CLSwimEntryE
27CLNatalieSourceFromNotifierI21_CLFitnessMachineDataE
14CLNatalieInputI21_CLFitnessMachineDataE
20CLNatalieInputBufferI21_CLFitnessMachineDataE
NSt3__120__shared_ptr_pointerIP19CLNatalieModelInputNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI19CLNatalieModelInputEE
NSt3__120__shared_ptr_emplaceIN26CLNatalimetryNotifier_Type16NotificationDataENS_9allocatorIS2_EEEE
22CLCalorieClimbingModel
N@ffffff*
Q=@fffff
a@fffff
`@fffff
9b@33333
m`@333333
33333
 @HP
s;V@333333L
`c@33333
f@33333
p=J:@
V@fffff&=@
uS@`
.8@J
@@L7
A`eQ@
&@33333
fffff
V~D@
s(S?@
zT<@d;
W'@j
K7)O
 %vmo
 @33333s1@33333
X@Nb
+Z@33333s3@fffff
(<Y@~
g$2@
P2@R
u=1@XSY
*Ral! P
~VV@J
|?5^
3*A@7
PSA@
QI-5
333333(
36@R
a\@ffffff\@
A@}?5^
33333sL@333333M@\
0@)\
0@fffff&O
333333
333333e
|?5^
ffffff0
0@5^
333333
@K@ffffffL@
ffffff-
+'@C
6@J
6@X9
v>6@b
`\@9
Mbp4@/
+wS@
nZ@=
QHQ@fffff.T@
8@fffff
\N@F
 P8@
@fffff
GAE@
?333333!@
@fffff6`@
33333
,@ffffff9@
.eB19CLGyroBiasEstimator
N16CLMotionNotifier18CallbackDispatcherIN28CLMotionCoprocessorInterface19GyroBiasAndVarianceEEE
EnablePmOnBodyDetection
ForceNoThrottlingOnBody
17CLOnBodyNotifier6
24CMAccelerometerProcessor
N16CLMotionNotifier20SiloBufferDispatcherIN15CLAccelerometer6SampleEEE
30CLCompassBiasClusteringMinDiam
18CLClusterAlgorithmI23CLCompassDatabaseRecordE
23CLCompassBiasClustering
NSt3__120__shared_ptr_pointerIPNS_6vectorI23CLCompassDatabaseRecordNS_9allocatorIS2_EEEENS_14default_deleteIS5_EENS3_IS5_EEEE
NSt3__114default_deleteINS_6vectorI23CLCompassDatabaseRecordNS_9allocatorIS2_EEEEEE
NSt3__120__shared_ptr_pointerIP20CLCompassBiasClusterNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI20CLCompassBiasClusterEE
20CLCompassBiasCluster
15CLSimpleClusterI23CLCompassDatabaseRecordE
KeepAllSensorCalibrationRoundsInDb
27CLSensorCalibrationDatabase
?20CLNatalieRowingModel
9CLLogBase
9CLGSMTile
23CLKeyLatLonTileTemplateIN19CLTilesManager_Type23KeyLatLonIndexEntry_GSMENS0_18KeyLatLonEntry_GSMEE
10CLCDMATile
23CLKeyLatLonTileTemplateIN19CLTilesManager_Type24KeyLatLonIndexEntry_CDMAENS0_19KeyLatLonEntry_CDMAEE
9CLLTETile
23CLKeyLatLonTileTemplateIN19CLTilesManager_Type23KeyLatLonIndexEntry_LTEENS0_18KeyLatLonEntry_LTEEE
24CLSensorRecorderNotifier
10CLNotifierIN29CLSensorRecorderNotifier_Type12NotificationENS0_16NotificationDataEccE
NSt3__120__shared_ptr_pointerIPhNS_14default_deleteIA_hEENS_9allocatorIhEEEE
NSt3__114default_deleteIA_hEE
NSt3__120__shared_ptr_emplaceIN29CLSensorRecorderNotifier_Type16NotificationDataENS_9allocatorIS2_EEEE
24CLBTLEBeaconProviderMock
NSt3__120__shared_ptr_emplaceIN25CLBTLEBeaconProvider_Type16NotificationDataENS_9allocatorIS2_EEEE
18CLBTLEFenceManager
10CLNotifierIN23CLBTLEFenceManager_Type12NotificationENS0_16NotificationDataEcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEE
N18CLBTLEFenceManager6ClientE
N10CLNotifierIN23CLBTLEFenceManager_Type12NotificationENS0_16NotificationDataEcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEE6ClientE
N23CLBTLEFenceManager_Type6ClientE
NSt3__120__shared_ptr_emplaceIN23CLBTLEFenceManager_Type16NotificationDataENS_9allocatorIS2_EEEE
24CLSpringTrackingNotifier
10CLNotifierIN29CLSpringTrackingNotifier_Type12NotificationENS0_16NotificationDataEccE
NSt3__120__shared_ptr_pointerIP25CLSpringTrackerRecorderDbNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI25CLSpringTrackerRecorderDbEE
NSt3__120__shared_ptr_emplaceIN29CLSpringTrackingNotifier_Type16NotificationDataENS_9allocatorIS2_EEEE
25CLSpringTrackerRecorderDb
20CLActivityRecorderDbI20CLSpringTrackerEntryN12CLActivityDB22NoDataProtectionPolicyEE
28CLBTLEBeaconProviderConcrete
14CLGpsAssistant
10CLNotifierIN19CLGpsAssistant_Type12NotificationENS0_16NotificationDataEccE
N19CLGpsAssistant_Type6ClientE
N10CLNotifierIN19CLGpsAssistant_Type12NotificationENS0_16NotificationDataEccE6ClientE
14CLMedianFilterIdE
NSt3__120__shared_ptr_emplaceIN19CLGpsAssistant_Type16NotificationDataENS_9allocatorIS2_EEEE
20CLBTLEBeaconProvider
10CLNotifierIN25CLBTLEBeaconProvider_Type12NotificationENS0_16NotificationDataEccE
N25CLBTLEBeaconProvider_Type6ClientE
N10CLNotifierIN25CLBTLEBeaconProvider_Type12NotificationENS0_16NotificationDataEccE6ClientE
16CLDarwinNotifier
10CLNotifierIN21CLDarwinNotifier_Type12NotificationEN15CLNotifier_Type16NotificationDataEccE
N21CLDarwinNotifier_Type6ClientE
N10CLNotifierIN21CLDarwinNotifier_Type12NotificationEN15CLNotifier_Type16NotificationDataEccE6ClientE
N16CLBinaryLogTypes10BinaryDataE
33CLBeaconFenceAuthorizationManager
10CLNotifierIN38CLBeaconFenceAuthorizationManager_Type12NotificationENS0_16NotificationDataEcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEE
N38CLBeaconFenceAuthorizationManager_Type6ClientE
N10CLNotifierIN38CLBeaconFenceAuthorizationManager_Type12NotificationENS0_16NotificationDataEcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEE6ClientE
N23CLBTLEBeaconRegion_Type15MonitoredRegionE
N23CLBTLEBeaconRegion_Type6RegionE
NSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE
NSt3__120__shared_ptr_emplaceIN38CLBeaconFenceAuthorizationManager_Type16NotificationDataENS_9allocatorIS2_EEEE
>26CLBTLERangeManagerConcrete
N26CLBTLERangeManagerConcrete16RegisteredRegionE
18CLBTLERangeManager
10CLNotifierIN23CLBTLERangeManager_Type12NotificationENS0_16NotificationDataEcNSt3__14listIN23CLBTLEBeaconRegion_Type15MonitoredRegionENS3_9allocatorIS6_EEEEE
N23CLBTLERangeManager_Type6ClientE
N10CLNotifierIN23CLBTLERangeManager_Type12NotificationENS0_16NotificationDataEcNSt3__14listIN23CLBTLEBeaconRegion_Type15MonitoredRegionENS3_9allocatorIS6_EEEEE6ClientE
NSt3__120__shared_ptr_emplaceIN23CLBTLERangeManager_Type16NotificationDataENS_9allocatorIS2_EEEE
|a2U
|a2U
|a2U
|a2U
333?
11CLTurnState
10CLNotifierIN16CLTurnState_Type12NotificationENS0_16NotificationDataEccE
14CLMedianFilterIfE
NSt3__120__shared_ptr_emplaceIN16CLTurnState_Type16NotificationDataENS_9allocatorIS2_EEEE
Q8>\
24CMTemperatureFitReceiver
26CLSwimDistanceEstimatorLap
23CLSwimDistanceEstimator
b*J@k
M@\z
S@t9
tdV@u
K]@ 
)c@!3I
`fp@
#l@ffff
;q@G
@9W
MinSessionLengthAWD
26CLSedentaryAlarmRecorderDb
20CLActivityRecorderDbI20CLSedentaryAlarmDataN12CLActivityDB22NoDataProtectionPolicyEE
37CLSensorFusionService3AxisDynamicGyro
#@q=
;,{@;T
i;'4
:<IkO<
d<yvz<
<yvz<
d<IkO<
i;,{@;
14CLNatalieInputI22CLElevationChangeEntryE
0?23CLMemoryMappedFileError
32CLWifiAccessPointLocationService
33CLIWifiAccessPointLocationService
NSt3__120__shared_ptr_emplaceI32CLWifiAccessPointLocationServiceNS_9allocatorIS1_EEEE
NSt3__110__function6__funcIZN32CLWifiAccessPointLocationService31_saveWifiTileAccessPointEntriesERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6chrono10time_pointIN2cl6chrono19CFAbsoluteTimeClockENSB_8durationIeNS_5ratioILl1ELl1EEEEEEEE3$_3NS6_ISL_EEFvRKN19CLTilesManager_Type10TileHeaderEiEEE
NSt3__110__function6__baseIFvRKN19CLTilesManager_Type10TileHeaderEiEEE
ZN32CLWifiAccessPointLocationService31_saveWifiTileAccessPointEntriesERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS0_6chrono10time_pointIN2cl6chrono19CFAbsoluteTimeClockENS9_8durationIeNS0_5ratioILl1ELl1EEEEEEEE3$_3
NSt3__110__function6__funcIZN32CLWifiAccessPointLocationService31_saveWifiTileAccessPointEntriesERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6chrono10time_pointIN2cl6chrono19CFAbsoluteTimeClockENSB_8durationIeNS_5ratioILl1ELl1EEEEEEEE3$_4NS6_ISL_EEFvRKN19CLTilesManager_Type16AccessPointEntryEEEE
NSt3__110__function6__baseIFvRKN19CLTilesManager_Type16AccessPointEntryEEEE
ZN32CLWifiAccessPointLocationService31_saveWifiTileAccessPointEntriesERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS0_6chrono10time_pointIN2cl6chrono19CFAbsoluteTimeClockENS9_8durationIeNS0_5ratioILl1ELl1EEEEEEEE3$_4
23CLNatalimetryRecorderDb
20CLActivityRecorderDbI13CLNatalieDataN12CLActivityDB22NoDataProtectionPolicyEE
26CLWifiTilesManagerExternal
27CLIWifiTilesManagerExternal
25CLTileSyncManagerExternal
N17CLTileSyncManager9IExternalE
22CLNatalieSemiStatModel
33CLNataliePedestrianModelInterface
?30CLWorkloadCalibratorRecorderDb
20CLActivityRecorderDbI25CLWorkloadCalibratorEntryN12CLActivityDB22NoDataProtectionPolicyEE
>30CLTransitTilePreloaderExternal
31CLITransitTilePreloaderExternal
16CLCoarseCellTile
23CLKeyLatLonTileTemplateIN19CLTilesManager_Type30KeyLatLonIndexEntry_CoarseCellENS0_25KeyLatLonEntry_CoarseCellEE
OXb=%n
9X$;
30CMAccelerometerProcessorOscar2
23CLAppRecommendationTile
25CLSpatialDataTileTemplateIN19CLTilesManager_Type27AppRecommendationIndexEntryENS0_22AppRecommendationEntryEE
NSt3__110__function6__funcIZ13wrap_receiverPN19CLWifiServiceClient9IReceiverEE3$_0NS_9allocatorIS5_EEFviRKN18CLWifiService_Type12NotificationERKNS8_16NotificationDataEEEE
Z13wrap_receiverPN19CLWifiServiceClient9IReceiverEE3$_0
21CLStepCountRecorderDb
20CLActivityRecorderDbI16CLStepCountEntryN12CLActivityDB22NoDataProtectionPolicyEE
19CLStepCountNotifier
10CLNotifierIN24CLStepCountNotifier_Type12NotificationENS0_16NotificationDataEccE
N24CLStepCountNotifier_Type6ClientE
N10CLNotifierIN24CLStepCountNotifier_Type12NotificationENS0_16NotificationDataEccE6ClientE
NSt3__120__shared_ptr_pointerIP21CLStepCountRecorderDbNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI21CLStepCountRecorderDbEE
27CLNatalieSourceFromNotifierI15CLOdometerEntryE
14CLNatalieInputI15CLOdometerEntryE
20CLNatalieInputBufferI15CLOdometerEntryE
NSt3__120__shared_ptr_emplaceIN24CLStepCountNotifier_Type16NotificationDataENS_9allocatorIS2_EEEE
o@14CLSwimNotifier
10CLNotifierIN19CLSwimNotifier_Type12NotificationENS0_16NotificationDataEccE
N19CLSwimNotifier_Type6ClientE
N10CLNotifierIN19CLSwimNotifier_Type12NotificationENS0_16NotificationDataEccE6ClientE
N16CLMotionNotifier14SiloDispatcherIN6CLGyro6SampleEEE
N6CLGyro6SampleE
N16CLMotionNotifier14SiloDispatcherIN15CLAccelerometer6SampleEEE
N15CLAccelerometer6SampleE
N16CLMotionNotifier14SiloDispatcherIN6CLGyro11TemperatureEEE
N6CLGyro11TemperatureE
NSt3__120__shared_ptr_emplaceIN19CLSwimNotifier_Type16NotificationDataENS_9allocatorIS2_EEEE
N5CMMsl5AccelE
N5CMMsl10AccelBatchE
N5CMMsl12AccelGestureE
N5CMMsl8AccelGpsE
N5CMMsl13AccelOscarEmuE
N5CMMsl12BTConnectionE
N5CMMsl13BasebandSpeedE
N5CMMsl11BodyMetricsE
N5CMMsl21CalorimetryPauseEventE
N5CMMsl21CoarseElevationChangeE
N5CMMsl7CompassE
N5CMMsl16CompassAlignmentE
N5CMMsl18CompassCalibrationE
N5CMMsl18CompassConstraintsE
N5CMMsl17CompassCorrectionE
N5CMMsl17CourseConstraintsE
N5CMMsl16CourseCorrectionE
N5CMMsl12DeviceMotionE
N5CMMsl22DeviceMotionCorrectionE
N5CMMsl15ElevationChangeE
N5CMMsl20EnhancedDeviceMotionE
N5CMMsl9FallStatsE
N5CMMsl11GestureHintE
N5CMMsl18GravityConstraintsE
N5CMMsl17GravityCorrectionE
N5CMMsl4GyroE
N5CMMsl19GyroBiasAndVarianceE
N5CMMsl19GyroBiasConstraintsE
N5CMMsl18GyroBiasCorrectionE
N5CMMsl11GyroBiasFitE
N5CMMsl11GyroCompassE
N5CMMsl6GyroDtE
N5CMMsl7GyroGpsE
N5CMMsl12GyroOscarEmuE
N5CMMsl15GyroTemperatureE
N5CMMsl4ItemE
N5CMMsl16LocationOscarEmuE
N5CMMsl12MagnetometerE
N5CMMsl8MetsInfoE
N5CMMsl17MotionGPSLocationE
N5CMMsl13MotionLoiDataE
N5CMMsl17MotionStateUpdateE
N5CMMsl21MotionWifiAssociationE
N5CMMsl18MotionWifiLocationE
N5CMMsl11NatalieDataE
N5CMMsl16NonlinearBiasFitE
N5CMMsl8OdometerE
N5CMMsl20OdometerWithAltitudeE
N5CMMsl18OnsetHeartRateDataE
N5CMMsl8PressureE
N5CMMsl16PressureFilteredE
N5CMMsl11PressureGpsE
N5CMMsl16PressureOscarEmuE
N5CMMsl4ProxE
N5CMMsl15SessionOverrideE
N5CMMsl28StepCadenceToStrideLengthBinE
N5CMMsl22StreamingHeartRateDataE
N5CMMsl12StrideCalBinE
N5CMMsl13TouchOscarEmuE
N5CMMsl14VibrationEventE
N5CMMsl24WatchOrientationSettingsE
N5CMMsl12WorkoutEventE
v8@?0
Generic
Assertion failed: i < fCapacity, file /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Oscar/CMQueue.h, line 174,i,%zu,capacity,%u.
CleanShutdown
CLDaemonCore
CLDaemonCore::CLDaemonCore()
#Warning multiple instances created - last instance %p
AutoShutdownDelay
ObsoleteDataCheckDelay
CLNetworkLocationProvider
CLLocationController
CLFilteredLocationController
CLTimeZoneManager
CLApplicationLifecycleManager
CLFenceManager
CLStatusBarIconManager
CLSimulationController
CLClientManager
CLTilesManager
CLCellTilesManager
CLCoarseCellTilesManager
CLWifiTilesManager
CLRoutineMonitor
CLSmootherMonitor
CLSignificantVisitManager
CLSuggestedActionManager
CLLocationStreamer
assert
(fMutex).__assertOwned()
activity
com.apple.locationd.synchronous
bool CLDaemonCore::startInitialize()
Could not create MIG background server dispatch source
com.apple.locationd.simulation
Could not create MIG simulation server dispatch source
com.apple.locationd.spi
could not create MIG SPI server run loop source
wrapRunLoopWithAutoreleasePoolHandler
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Daemon/Core/ClientManagement/CLDaemonCore.mm
count > 0
static void CLDaemonCore::profileObserverCallback(CFRunLoopObserverRef, CFRunLoopActivity, void *)
#Warning OBSERVER: TIMEOUT: %s => %s RunLoop is really busy time(%.8lf) tdiff(%.8lf)
void CLDaemonCore::installProfileObserver(CFStringRef)
Can't read mach_timebase_info = %{public}d
sTimebaseInfo.denom %d sTimebaseInfo.numer %d
void CLDaemonCore::startRun(os_activity_scope_state_t)
locationd was started after an unclean shutdown
com.apple.locationd.registration
RunLoopProfileObserver
OBSERVER: ProfileObserver = %d
starting idle shutdown timer of %d seconds
(fMutex).__assertNotOwned()
CLTelephonyService
CLWifiService
CLTimeManager
CLCarrierSettings
CLDarwinNotifier
CLDaemonStatus
void CLDaemonCore::onShutdownTimer(CFRunLoopTimerRef)
linger requested - not shutting down
void CLDaemonCore::scheduleShutdown(int)
no more clients, %d second(s) to auto-shutdown
ObsoleteDataDeleted
static void CLDaemonCore::deleteObsoleteData(bool)
Obsolete data has already been deleted; not deleting again
Deleting obsolete data
Obsolete data deleted in %.2f seconds
/System/Library/LaunchDaemons/com.apple.locationd.plist
LaunchEvents
void launchServicesWithLaunchEvents()
no LaunchEvents found
com.apple.xpc.activity
no xpc activities registered
 kCFRunLoopEntry
 kCFRunLoopBeforeTimers
 kCFRunLoopBeforeSources
 kCFRunLoopBeforeWaiting
 kCFRunLoopAfterWaiting
 kCFRunLoopExit
PreviousLocation
WifiLocationNearby
LocationEnabled
cells.plist
cells-local.plist
h-cells.plist
h-wifis.plist
clients-b.plist
c-trained.plist
cells.db
cells.db-journal
wifis.db
wifis.db-journal
cells-local.db
cells-local.db-journal
h-locations.db
h-locations.db-journal
h-cells.db
h-cells.db-journal
h-wifis.db
h-wifis.db-journal
compass.db
compass.db-journal
history.db
history.db-journal
glgps_nvs.bin
void _deleteObsoleteData()
#Notice Deleting %{public}s if present
wifi
Deleting obsolete wifi subdirectory
void _deleteObsoleteData()_block_invoke
Deleting %s
Could not delete file %{public}s
C16@?0r*8
SBLastSystemVersion
CLSignificantChangeManager
int main(int, const char **)
locationd does not take any command-line arguments. Use CFPreferences instead.
Setting location services to %d
Jun 10 2017
23:21:42
LastSystemVersion
EnableLockTimeDebugging
Lock time debugging is enabled
/cache_encryptedA.db
-journal
-shm
-wal
LowWaterLoopProtectionInterval
main.low-water-loop-protection
locationd.log
logs
locationd
com.apple.locationd.legacy-logging-dummy-settings
LogGyro
MotionLoggerGyroLoggingInterval
GyroCalibration
GyroMultiCalibration
virtual bool CLGyroCalibrationDatabaseLocalMultiRun::insert(const CLMotionTypeRotationRate &, const CLMotionTypeVector3 &, float, CFAbsoluteTime)
CLGyroCalibrationDatabaseLocalMultiRun insert x,%f,y,%f,z,%f,temperature,%f
fBuilding,%d
virtual bool CLGyroCalibrationDatabaseLocalMultiRun::wipeDatabase()
Wipe database during a build.
DELETE FROM GyroMultiCalibration
virtual void CLGyroCalibrationDatabaseLocalMultiRun::startFactoryGYTT()
CLGyroCalibrationDatabaseLocalMultiRun startFactoryGYTT
virtual bool CLGyroCalibrationDatabaseLocalMultiRun::getLastMiniCalibration(CFAbsoluteTime &) const
CLGyroCalibrationDatabaseLocalMultiRun getLastMiniCalibration
fFit.kind == kCLMotionTypeGyroBiasFitKindLinear
void CLGyroCalibrationDatabaseLocalMultiRun::logFit() const
GyroBiasFit: slope,%f,%f,%f,intercept,%f,%f,%f,seconds,%f
com.apple.CoreMotion.GyroCalibration.PostCal
com.apple.CoreMotion.GyroCalibration.PreCal
com.apple.CoreMotion.GyroCalibration.FactoryCal
com.apple.CoreMotion.GyroCalibration.UnknownCal
Intercept.X
Intercept.Y
Intercept.Z
Slope.X
Slope.Y
Slope.Z
TimeSinceLastCal
UrgentFlag
!fBuilding
SELECT MAX(Round) FROM GyroMultiCalibration
SELECT Round, Temperature, BiasX, BiasY, BiasZ FROM GyroMultiCalibration WHERE Round = ? OR (Round > ? AND Round <= ?)
void CLGyroCalibrationDatabaseLocalMultiRun::loadFromDatabase()
SQL error: %s
DELETE FROM GyroMultiCalibration WHERE Round <= ? AND Round <> ?
Round
Temperature
BiasX
BiasY
BiasZ
fPendingPoints.empty() || fPoints.empty() || fPoints.rbegin()->round < fPendingPoints.begin()->round
static void CLGyroCalibrationDatabaseLocalMultiRun::dropTableIfPresent(CLSqliteDatabase &)
Dropping GyroMultiCalibration.
fPoints.empty() || fPoints.rbegin()->round >= kFactoryRound
virtual void CLGyroCalibrationDatabaseLocalMultiRun::beginRun(bool)
fNextRound,%d,fIsUrgentCal,%d
fBuilding
virtual void CLGyroCalibrationDatabaseLocalMultiRun::endRun()
nonFactoryRoundCount,%d,kRoundLimit,%d,roundToRemove,%d,fIsUrgentCal,%d
Ending UrgentCal run, double entering this round
Double entry: nonFactoryRoundCount,%d,kRoundLimit,%d,roundToRemove,%d,secondRoundNum,%d
!v.empty()
B24@?0r^{?=fff}8r^{?=fff}16
static bool CLGyroCalibrationDatabaseLocalMultiRun::computeFullBias(const std::vector<BiasTemperatureRound>::const_iterator, const std::vector<BiasTemperatureRound>::const_iterator, const std::deque<BiasTemperatureRound> *, CLMotionTypeGyroBiasFit &)
ComputeFullBias: x,%f,y,%f,z,%f
std::is_sorted(rounds.begin(), rounds.end())
static bool CLGyroCalibrationDatabaseLocalMultiRun::computeIntercept(const std::vector<BiasTemperatureRound>::const_iterator, const std::vector<BiasTemperatureRound>::const_iterator, const std::deque<BiasTemperatureRound> *, CLMotionTypeGyroBiasFit &)
ComputeIntercept: x,%f,y,%f,z,%f
virtual void CLGyroCalibrationDatabaseLocalMultiRun::startCalibration(bool)
Starting gyro calibration, user initiated, %d
!fDeviceMotionDispatcher
virtual void CLGyroCalibrationDatabaseLocalMultiRun::teardown()
Stopped gyro calibration
allocator<T>::allocate(size_t n) 'n' exceeds maximum supported size
virtual void CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLGyroCalibrationDatabase_Type::Notification, NotificationData_T = CLGyroCalibrationDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
%s; client %d has deregistered, not notifying %s
void CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLGyroCalibrationDatabase_Type::Notification, NotificationData_T = CLGyroCalibrationDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
%{public}s; unknown client %{public}d
B8@?0
virtual void CLMotionNotifier::SiloDispatcher<CLDeviceMotion::Sample>::dispatchData(int, const void *, size_t) [T = CLDeviceMotion::Sample]
SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d
virtual void CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLGyroCalibrationDatabase_Type::Notification, NotificationData_T = CLGyroCalibrationDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
%{public}s; client %{public}d does not exist
virtual bool CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLGyroCalibrationDatabase_Type::Notification, NotificationData_T = CLGyroCalibrationDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLGyroCalibrationDatabase_Type::Notification, NotificationData_T = CLGyroCalibrationDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLGyroCalibrationDatabase_Type::Notification, NotificationData_T = CLGyroCalibrationDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
%{public}s; notification %{public}s not found
virtual void CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::listClients() [Notification_T = CLGyroCalibrationDatabase_Type::Notification, NotificationData_T = CLGyroCalibrationDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
%s; already shutdown; not listing clients
%s; listing clients, num clients: %zu
%s; clients, id: %d, notification: %d
SensorReplayMode
CLGyroCalibrationDatabaseLocal::CLGyroCalibrationDatabaseLocal(id<CLIntersiloUniverse>)
Removing outliers from database.
virtual bool CLGyroCalibrationDatabaseLocal::insert(const CLMotionTypeRotationRate &, const CLMotionTypeVector3 &, float, CFAbsoluteTime)
Insert into uncached database.
virtual bool CLGyroCalibrationDatabaseLocal::registerForNotificationInternal(const CLGyroCalibrationDatabase_Type::Notification &)
Client registered, caching database
virtual bool CLGyroCalibrationDatabaseLocal::unregisterForNotificationInternal(const CLGyroCalibrationDatabase_Type::Notification &)
No more clients, flushing cache to database
Database should be cached
SELECT 
Time
 FROM 
 WHERE 
>=? AND 
<=? ORDER BY 
void CLGyroCalibrationDatabaseLocal::insert(const CLMotionTypeRotationRate &, float)
CLGyroCalibrationDatabaseLocal insert x,%f,y,%f,z,%f,temperature,%f
void CLGyroCalibrationDatabaseLocal::cacheEntriesBetweenTemperatures(float, float, CLGyroCalibrationCache &)
void CLGyroCalibrationDatabaseLocal::cacheAllEntries(CLGyroCalibrationCache &)
Reading database into non-empty cache.
void CLGyroCalibrationDatabaseLocal::writeCacheToDatabase()
Attempting to write zero entries to Gyro database.
DELETE FROM 
Could not prepare cached insert statement
EnableGyroNonlinearCalibration
EnableGyroMultiRunCalibration
reset
/BuildRoot/Applications/Xcode.app/Contents/Developer/Platforms/AppleTVSimulator.platform/Developer/SDKs/AppleTVSimulator11.0.sdk/usr/local/include/boost/smart_ptr/scoped_ptr.hpp
p == 0 || p != px
false
hash
TQ,R
superclass
T#,R
description
T@"NSString",R,C
debugDescription
valid
TB,N
unentitled
_CLDaemonSetAuthorizationStatusByType
com.apple.locationd.authorizeapplications
kern_return_t _CLDaemonSetAuthorizationStatusByType(mach_port_t, const char *, const char *, int, audit_token_t)
Must provide a bundle identifier or bundle path for which to set location authorization status
{Name={basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}BBB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}BB}8@?0
_CLDaemonSetAuthorizationStatus
kern_return_t _CLDaemonSetAuthorizationStatus(mach_port_t, const char *, const char *, uint8_t, audit_token_t)
_CLDaemonResetAllClients
_CLDaemonConfigure
com.apple.locationd.configure
kern_return_t _CLDaemonConfigure(mach_port_t, CLMotionTypeCommandConfigure, audit_token_t)
Oscar not available
Unable to send configuration to Oscar
kern_return_t _CLDaemonOscarTimeSync(mach_port_t, uint64_t *, uint64_t *)
Unexpected null pointer. machTimestamp,%p,oscarTimestamp,%p
_CLDaemonGetAppsUsingLocation
com.apple.locationd.status
_CLDaemonGetTechnologiesInUse
kern_return_t _CLDaemonGetTechnologiesInUse(mach_port_t, cl_property_list_data_t *, mach_msg_type_number_t *, audit_token_t)
#warning Couldn't create active location technologies array
Could not serialize tech data (%s, %ld)
Could not serialize tech data
_CLDaemonSetPrivateMode
com.apple.CoreLocation.PrivateMode
_CLDaemonGetPrivateMode
_CLDaemonSetLocationServicesEnabled
enabled
disabled
kern_return_t _CLDaemonSetLocationServicesEnabled(mach_port_t, uint8_t, audit_token_t)
%s is setting location services to %s
_CLDaemonSetGestureServiceEnabled
kern_return_t _CLDaemonSetGestureServiceEnabled(mach_port_t, uint8_t, audit_token_t)
%s is setting ear gesture service to %s
kern_return_t _CLDaemonPingDaemon(mach_port_t, audit_token_t)
Pinged by external process %s
_CLDaemonGetAuthorizationStatus
com.apple.locationd.effective_bundle
kern_return_t _CLDaemonGetAuthorizationStatus(mach_port_t, const char *, const char *, uint32_t *, audit_token_t)
Authorization status for %s is %s
_CLDaemonGetAuthorizationStatusForService
CLClientAuthorizationCache
_CLDaemonPerformMigration
com.apple.locationd.integritycheck
elapsed
v24@?0Q8Q16
kern_return_t _CLDaemonShutdownDaemon(mach_port_t, audit_token_t)
Daemon shutdown requested by %s
kern_return_t _CLDaemonDisplayStatistics(mach_port_t, audit_token_t)
Daemon stats requested by %s
kern_return_t _CLDaemonDumpLogs(mach_port_t, const char *, audit_token_t)
Log dump requested by %s: %s
kern_return_t _CLDaemonCopyLastLog(mach_port_t, uint32_t, audit_token_t)
%s requested to copy locationd's last %u logs to crash reporter
_CLDaemonGetMonitoredRegions
kern_return_t _CLDaemonGetMonitoredRegions(mach_port_t, const char *, const char *, cl_property_list_data_t *, mach_msg_type_number_t *, audit_token_t)
#warning Couldn't get fences for client key %s
kCLConnectionMessageNameKey
kCLConnectionMessageOnBehalfOfKey
kCLConnectionMessageRegionTypeKey
kCLConnectionMessageLatitudeKey
kCLConnectionMessageLongitudeKey
kCLConnectionMessageRadiusKey
kCLConnectionMessageReferenceFrameKey
kCLConnectionMessageNotifyOnEntryKey
kCLConnectionMessageNotifyOnExitKey
kCLConnectionMessageConservativeEntry
kCLConnectionMessageCircularRegionKey
CLBTLEFenceManager
kCLConnectionMessageRegionDefinitionKey
kCLConnectionMessageProximityUUIDKey
kCLConnectionMessageMajorKey
kCLConnectionMessageMinorKey
kCLConnectionMessageNotifyEntryStateOnDisplayKey
kCLConnectionMessageBeaconRegionKey
_CLDaemonGetLocation
com.apple.locationd.preauthorized
kern_return_t _CLDaemonGetLocation(mach_port_t, const char *, const char *, uint8_t, uint8_t, CLClientLocation *, audit_token_t)
MiG GetLocation rejected for '%s(%d)': no way to establish effective authorization
MiG GetLocation rejected for '%s': insufficient effective authorization
v16@?0@"CLLocation"8
_CLDaemonSetLocationDefault
com.apple.locationd.defaults_access
kern_return_t _CLDaemonSetLocationDefault(mach_port_t, char *, cl_property_list_data_t, mach_msg_type_number_t, audit_token_t)
Setting default %s from %s
_CLDaemonGetLocationDefault
kern_return_t _CLDaemonGetLocationDefault(mach_port_t, char *, cl_property_list_data_t *, mach_msg_type_number_t *, audit_token_t)
Getting default %s for %s
_CLDaemonGetStatusBarIconState
_CLDaemonSetStatusBarIconEnabledForEntityClass
kern_return_t _CLDaemonSetStatusBarIconEnabledForEntityClass(mach_port_t, uint32_t, uint8_t, audit_token_t)
%s is setting the status bar icon enabled state for %d to %d
_CLDaemonGetStatusBarIconEnabledForEntityClass
kern_return_t _CLDaemonGetStatusBarIconEnabledForEntityClass(mach_port_t, uint32_t, uint8_t *, audit_token_t)
%s retrieved the status bar icon enabled state for %d
_CLDaemonSetMapMatchingRouteHint
com.apple.locationd.route_hint
kern_return_t _CLDaemonSetMapMatchingRouteHint(mach_port_t, cl_binary_data_t, mach_msg_type_number_t, audit_token_t)
Received %d route hints from %s
_CLDaemonGetActivities
kern_return_t _CLDaemonGetActivities(mach_port_t, cl_property_list_data_t *, mach_msg_type_number_t *, audit_token_t)
#warning _CLDaemonGetActivityAlarms called without support for activity alarms
_CLDaemonTimeZoneAtLocation
com.apple.locationd.time_zone
MIGResponseSilo
TB,N,V_valid
MotionCalibration
void CLMotionLogger::onLoiNotification(CLVisit *, CMMotionContext::Confidence)
Received an LOI notification:longitude,%f,lattitude,%f,
departureDate,%f,arrivalDate,%f,
horizontalAccuracy,%f,confidence,%d
CLMotionDefaultsWrite<bool>::CLMotionDefaultsWrite(const char *, const T &) [T = bool]
motion default,%s,set,%d,value,%s
CLMotionDefaultsWrite<double>::CLMotionDefaultsWrite(const char *, const T &) [T = double]
CLMotionDefaultsWrite<int>::CLMotionDefaultsWrite(const char *, const T &) [T = int]
virtual void CLMotionNotifier::SiloDispatcher<CLMotionCoprocessorInterface::NotificationData>::dispatchData(int, const void *, size_t) [T = CLMotionCoprocessorInterface::NotificationData]
CLSimulationDaemonSetLocationSimulationScenario
kern_return_t CLSimulationDaemonSetLocationSimulationScenario(mach_port_t, char *, audit_token_t)
Entitlement %{public}s required to use %{public}s
Simulation API called, but location simulation not supported
Got simulation request with invalid URL %{public}s
CLSimulationDaemonSetLocationSimulationType
kern_return_t CLSimulationDaemonSetLocationSimulationType(mach_port_t, uint32_t, audit_token_t)
CLSimulationDaemonSetIntermediateLocationDistance
kern_return_t CLSimulationDaemonSetIntermediateLocationDistance(mach_port_t, double, audit_token_t)
CLSimulationDaemonSetLocationInterval
kern_return_t CLSimulationDaemonSetLocationInterval(mach_port_t, CFTimeInterval, audit_token_t)
CLSimulationDaemonSetLocationTravellingSpeed
kern_return_t CLSimulationDaemonSetLocationTravellingSpeed(mach_port_t, double, audit_token_t)
CLSimulationDaemonSetLocationRepeatBehavior
kern_return_t CLSimulationDaemonSetLocationRepeatBehavior(mach_port_t, unsigned int, audit_token_t)
CLSimulationDaemonClearSimulatedLocations
kern_return_t CLSimulationDaemonClearSimulatedLocations(mach_port_t, audit_token_t)
CLSimulationDaemonAppendSimulatedLocations
kern_return_t CLSimulationDaemonAppendSimulatedLocations(mach_port_t, cl_property_list_data_t, mach_msg_type_number_t, audit_token_t)
CLSimulationDaemonStartLocationSimulation
kern_return_t CLSimulationDaemonStartLocationSimulation(mach_port_t, audit_token_t)
CLSimulationDaemonStopLocationSimulation
kern_return_t CLSimulationDaemonStopLocationSimulation(mach_port_t, audit_token_t)
CLSimulationDaemonFlush
kern_return_t CLSimulationDaemonFlush(mach_port_t, audit_token_t)
Location simulation flush requested
CLPrivacyManagerSilo
DisableCLPrivacyManager
CLPrivacyManager.B
CLPrivacyManager.C
CLPrivacyManager.D
ResetLocationPrivacy
LocationServicesStatus
v16@?0@"NSObject<OS_xpc_object>"8
CLPrivacyManager
[a[0] isEqualToString:@"CLPrivacyManager"]
silo
T@"CLDispatchSilo",R,&,D,N
virtual NSString *CLGyroCalibrationDatabaseLocalBase::dumpDatabase(NSString *)
Dumping gyro calibration database
%@-%@.db
GYTTOverride
IOPropertyMatch
static void CLGyroCalibrationDatabaseLocalBase::readFactoryData(std::vector<std::pair<float, CLMotionTypeRotationRate> > &)
Cannot get GYTT property
data not long enough to get version properly
GYTT version (%u) does not match expected version (%u)
Adding entry to database: %f,%f,%f,%f;
NOT adding entry to database: %f,%f,%f,%f;
GyroCalDbFile
static const CLSqliteDatabase::SqliteProperties CLGyroCalibrationDatabaseLocalBase::getSqlProperties()
No gyroCal database file set in preferences. Using the default database.
Using gyroCal database file: %s.
name
gyro
gyro-temp-table
CompassCalibration
CompassDatabaseMaximumMagnitudeDifference
CompassDatabaseMaximumInclinationDifference
CompassBiasClusteringEnabled
CompassBiasClusteringRadius
CompassBiasTemporalVarianceCheck
CompassCachedEntryLifetime
void CLCompassDatabaseController::init()
Max magnitude difference (%f), Max inclination difference (%f), CompassBiasClusteringEnabled (%d), CompassBiasTemporalVarianceCheck (%d)
bool CLCompassDatabaseController::lookupBias(const CLMotionTypeMagneticField &, const CLMotionTypeAcceleration &, CFAbsoluteTime, CLMotionTypeVector3 &, int &, bool &)
CompassBiasDB, begin lookups
Compass recently calibrated.  Using cached bias: (%f, %f, %f) with level: (%d).
search found: bestfit (%+.3f/%+.3f/%+.3f) bias (%+.3f/%+.3f/%+.3f) level (%d) using magneticField (%+.3f/%+.3f/%+.3f) acceleration (%+.3f/%+.3f/%+.3f) from %d entries. No: %llu. IsCluster: %d, 2D Check,%d
search failure: no result, saw bestfit (%+.3f/%+.3f/%+.3f) bias (%+.3f/%+.3f/%+.3f) level (%d) using magneticField (%+.3f/%+.3f/%+.3f) acceleration (%+.3f/%+.3f/%+.3f) from %d entries
search complete failure: no results from %d entries
void CLCompassDatabaseController::setBias(CLMotionTypeMagneticField, CLMotionTypeVector3, int, float, float)
CompassBiasDB, setBias has novel information, countdown to clustering: %d
CompassBiasDB, setBias is not novel.
NSString *CLCompassDatabaseController::dumpDatabase(NSString *)
Dumping compass database
void CLCompassDatabaseController::clusterBiasEntries()
CompassBiasDB, clusteralgo, started
CompassBiasDB, clusteralgo, finished, numbers of clusters found, %zu,  %d
bool CLCompassDatabaseController::temporalBiasVarianceCheckPassed(CFAbsoluteTime, bool, const CLCompassDatabaseRecord &)
search complete failure: too much variation in bias within a short time period, mean (%.3f) max (%.3f)
bool CLCompassDatabaseController::lookupBiasByCluster(const CLMotionTypeMagneticField &, const CLMotionTypeAcceleration &, bool, CLCompassDatabaseRecord &, float &, unsigned int &, sqlite3_int64 &)
CompassBiasDB, lookup, rowid, %llu, bias, %.3f, %.3f, %.3f, mag, %.3f, %.3f, incl, %.3f, %.3f, magDiff, %.3f, inclDiff, %.3f, score, %.3f, betterMatch, %d
bool CLCompassDatabaseController::lookupBiasIndividually(const CLMotionTypeMagneticField &, const CLMotionTypeAcceleration &, bool, CLCompassDatabaseRecord &, float &, unsigned int &, sqlite3_int64 &)
CompassBiasDB, lookupBiasIndividually
bool CLCompassDatabaseController::findClosestEntry(const CLMotionTypeMagneticField &, const CLMotionTypeAcceleration &, bool, sqlite3_int64 &)
Best fit values (will update timestamp): %llu, %f, %f
INSERT INTO 
void CLCompassDatabaseController::clearBias()
Clearing obsolete bias entries
float CLCompassDatabaseController::compareCalibration(const CLMotionTypeMagneticField &, const CLMotionTypeAcceleration &, bool, const CLCompassDatabaseRecord &, float &, float &)
search comparison: db level (%d) db age (%.3f), db mag (%.3f) est mag (%.3f) delta mag (%.3f), db inc (%.3f) est inc (%.3f) delta inc (%.3f)
virtual void CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLCompassDatabase_Type::Notification, NotificationData_T = CLCompassDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLCompassDatabase_Type::Notification, NotificationData_T = CLCompassDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLCompassDatabase_Type::Notification, NotificationData_T = CLCompassDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLCompassDatabase_Type::Notification, NotificationData_T = CLCompassDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLCompassDatabase_Type::Notification, NotificationData_T = CLCompassDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLCompassDatabase_Type::Notification, NotificationData_T = CLCompassDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::listClients() [Notification_T = CLCompassDatabase_Type::Notification, NotificationData_T = CLCompassDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLGyroBiasEstimatorClientLocal::registerWithGyroBiasEstimatorPrivate(CLGyroBiasEstimatorClientCallback, bool, void *)_block_invoke
GyroBias received by DeviceMotion in daemon
v16@?0r^{?={?=fff}{?=fff}B}8
CLSignificantVisitManagerSilo
significantVisitInterest
significantVisitAuth
-[CLSignificantVisitManager ensureStop]
#slv Stop monitoring or leeching
B24@?0@8@"NSDictionary"16
interest
type
v16@?0^{CLClientManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{CLPersistentStore=^^?^{__CFDictionary}@Bid^{__CFRunLoopTimer}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}i}{unique_ptr<CLDarwinNotifier_Type::Client, std::__1::default_delete<CLDarwinNotifier_Type::Client> >={__compressed_pair<CLDarwinNotifier_Type::Client *, std::__1::default_delete<CLDarwinNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLCarrierSettings_Type::Client, std::__1::default_delete<CLCarrierSettings_Type::Client> >={__compressed_pair<CLCarrierSettings_Type::Client *, std::__1::default_delete<CLCarrierSettings_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLBTLEFenceManager_Type::Client, std::__1::default_delete<CLBTLEFenceManager_Type::Client> >={__compressed_pair<CLBTLEFenceManager_Type::Client *, std::__1::default_delete<CLBTLEFenceManager_Type::Client> >=^{Client}}}{unique_ptr<CLFenceManager_Type::Client, std::__1::default_delete<CLFenceManager_Type::Client> >={__compressed_pair<CLFenceManager_Type::Client *, std::__1::default_delete<CLFenceManager_Type::Client> >=^{Client}}}{unique_ptr<CLAppMonitor_Type::Client, std::__1::default_delete<CLAppMonitor_Type::Client> >={__compressed_pair<CLAppMonitor_Type::Client *, std::__1::default_delete<CLAppMonitor_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLBluetoothService_Type::Client, std::__1::default_delete<CLBluetoothService_Type::Client> >={__compressed_pair<CLBluetoothService_Type::Client *, std::__1::default_delete<CLBluetoothService_Type::Client> >=^{Client}}}{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}B@{map<CLDaemonClient *, __CFUserNotification *, std::__1::less<CLDaemonClient *>, std::__1::allocator<std::__1::pair<CLDaemonClient *const, __CFUserNotification *> > >={__tree<std::__1::__value_type<CLDaemonClient *, __CFUserNotification *>, std::__1::__map_value_compare<CLDaemonClient *, std::__1::__value_type<CLDaemonClient *, __CFUserNotification *>, std::__1::less<CLDaemonClient *>, true>, std::__1::allocator<std::__1::__value_type<CLDaemonClient *, __CFUserNotification *> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLDaemonClient *, __CFUserNotification *>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLDaemonClient *, std::__1::__value_type<CLDaemonClient *, __CFUserNotification *>, std::__1::less<CLDaemonClient *>, true> >=Q}}}@{unordered_multimap<std::__1::basic_string<char>, std::__1::basic_string<char>, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::basic_string<char> > > >={__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> > > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::hash<std::__1::basic_string<char> >, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, true> >=f}}}@i{set<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > >={__tree<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::basic_string<char>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<std::__1::basic_string<char> > >=Q}}}{set<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > >={__tree<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::basic_string<char>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<std::__1::basic_string<char> > >=Q}}}iB^{CLConnectionServer}{map<CLConnection *, CLDaemonClient *, std::__1::less<CLConnection *>, std::__1::allocator<std::__1::pair<CLConnection *const, CLDaemonClient *> > >={__tree<std::__1::__value_type<CLConnection *, CLDaemonClient *>, std::__1::__map_value_compare<CLConnection *, std::__1::__value_type<CLConnection *, CLDaemonClient *>, std::__1::less<CLConnection *>, true>, std::__1::allocator<std::__1::__value_type<CLConnection *, CLDaemonClient *> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLConnection *, CLDaemonClient *>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLConnection *, std::__1::__value_type<CLConnection *, CLDaemonClient *>, std::__1::less<CLConnection *>, true> >=Q}}}@i{vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > >=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}{__compressed_pair<std::__1::basic_string<char> *, std::__1::allocator<std::__1::basic_string<char> > >=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{vector<CLClientManager::DaemonAppCoupling, std::__1::allocator<CLClientManager::DaemonAppCoupling> >=^{DaemonAppCoupling}^{DaemonAppCoupling}{__compressed_pair<CLClientManager::DaemonAppCoupling *, std::__1::allocator<CLClientManager::DaemonAppCoupling> >=^{DaemonAppCoupling}}}{vector<CLClientManager::ImproveAccuracyNotification, std::__1::allocator<CLClientManager::ImproveAccuracyNotification> >=^{ImproveAccuracyNotification}^{ImproveAccuracyNotification}{__compressed_pair<CLClientManager::ImproveAccuracyNotification *, std::__1::allocator<CLClientManager::ImproveAccuracyNotification> >=^{ImproveAccuracyNotification}}}BBBBii{unique_ptr<CLClientManager_Type::Name, std::__1::default_delete<CLClientManager_Type::Name> >={__compressed_pair<CLClientManager_Type::Name *, std::__1::default_delete<CLClientManager_Type::Name> >=^{Name}}}@B@@{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}d{map<std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider> >, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider> > > > >={__tree<std::__1::__value_type<std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider> > >, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider> > >, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider> > >, std::__1::less<std::__1::basic_string<char> >, true> >=Q}}}@@@@}8
-[CLSignificantVisitManager checkForMonitoring]
#slv Invalid interest type
SpoofSignificantVisit
Latitude
Longitude
Accuracy
ArrivalTimestamp
DepartureTimestamp
DetectionTimestamp
monitoring
TB,N,V_monitoring
leeching
TB,N,V_leeching
clientInterest
T^{CLPersistentStore=^^?^{__CFDictionary}@Bid^{__CFRunLoopTimer}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}i},N,V_clientInterest
clientAuthDate
T^{CLPersistentStore=^^?^{__CFDictionary}@Bid^{__CFRunLoopTimer}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}i},N,V_clientAuthDate
clientAuthorizationCache
T@"<CLClientAuthorizationCacheProtocol>",&,N,V_clientAuthorizationCache
recentVisits
T@"NSMutableArray",&,N,V_recentVisits
routineMonitor
T@"<CLRoutineMonitorServiceProtocol>",&,N,V_routineMonitor
clientManager
T@"<CLClientManagerPublicProtocol>",&,N,V_clientManager
armed
TB,N,V_armed
currentJournalIdentifier
TQ,N,V_currentJournalIdentifier
WMM.dat
https://iphone-ld.apple.com/wmm/WMM.dat
LogCompass
CLGeomagneticModelProviderDaemon::CLGeomagneticModelProviderDaemon(id<CLIntersiloUniverse>)
could not setup geomagnetic file download from %{public}s
void CLGeomagneticModelProviderDaemon::setLocation(const CLDaemonLocation &)
#Warning geomagnetic provider received a stale location <%+.8f,%+.8f,%+.3f> @ %.3f
geomagnetic information calculated for <%+.8f,%+.8f,%+.3f> @ %.3f, declination %f inclination %f will expire @ %.3f
Compass-Geomagnetic
Type,%s,lat,%+.8f,long,%+.8f,alt,%+.3f,x,%.3f,y,%.3f,z,%.3f,m,%.3f,h,%.3f,dec,%+.3f,inc,%+.3f,
#Warning no geomagnetic information available for <%+.8f,%+.8f,%+.3f>
virtual bool CLGeomagneticModelProviderDaemon::registerForNotificationInternal(const CLGeomagneticModelProvider_Type::Notification &)
Client requested notification %d
registered as location spectator to compute geomagnetic data
virtual bool CLGeomagneticModelProviderDaemon::unregisterForNotificationInternal(const CLGeomagneticModelProvider_Type::Notification &)
bool CLGeomagneticModelProviderDaemon::getGeomagneticField(const CLDaemonLocation &)
geomagnetic file expired, downloading new file now
void CLGeomagneticModelProviderDaemon::invalidateGeomagneticField()
Geomagnetic model data invalidated. Sending notification with timestamp %f
void CLGeomagneticModelProviderDaemon::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)
location services is now disabled; invalidating geomagnetic field data
void CLGeomagneticModelProviderDaemon::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)
Set location
virtual void CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLGeomagneticModelProvider_Type::Notification, NotificationData_T = CLGeomagneticModelProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLGeomagneticModelProvider_Type::Notification, NotificationData_T = CLGeomagneticModelProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLGeomagneticModelProvider_Type::Notification, NotificationData_T = CLGeomagneticModelProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLGeomagneticModelProvider_Type::Notification, NotificationData_T = CLGeomagneticModelProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLGeomagneticModelProvider_Type::Notification, NotificationData_T = CLGeomagneticModelProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLGeomagneticModelProvider_Type::Notification, NotificationData_T = CLGeomagneticModelProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::listClients() [Notification_T = CLGeomagneticModelProvider_Type::Notification, NotificationData_T = CLGeomagneticModelProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
GyroNonlinearTargetExpirationAge
GyroNonlinearMaxExpirationAge
GyroNonlinearFactoryDataAge
GyroNonlinearFlushTimeout
GyroNonlinearFirstPruneTimeout
GyroNonlinearPruneTimeout
com.apple.CoreMotion.NonlinearGyro
GyroNonlinearCalibration
DELETE FROM GyroNonlinearCalibration
virtual void CLGyroCalibrationDatabaseLocalNonlinear::startFactoryGYTT()
Start factory GYTT
virtual void CLGyroCalibrationDatabaseLocalNonlinear::startCalibration(bool)
virtual void CLGyroCalibrationDatabaseLocalNonlinear::teardown()
SELECT Id, Timestamp, Temperature, BiasX, BiasY, BiasZ FROM GyroNonlinearCalibration WHERE Active > 0
void CLGyroCalibrationDatabaseLocalNonlinear::loadFromDatabase()
Nonlinear gyro database load, SQL error: %s
Active
Timestamp
void CLGyroCalibrationDatabaseLocalNonlinear::flushPendingSamples()
flushPendingError: %s
Nonlinear gyro database flushed, %zu samples added.
duration >= 0.
void CLGyroCalibrationDatabaseLocalNonlinear::thinPendingSamples(CFTimeInterval)
Nonlinear gyro pending samples thinned.  %zu samples reduced to %zu.
Thinned
Inserted
UPDATE GyroNonlinearCalibration SET Active = 0 WHERE Id = ?
DELETE FROM GyroNonlinearCalibration WHERE Id = ?
TemperatureSpan
void CLGyroCalibrationDatabaseLocalNonlinear::prune()
Nonlinear gyro database prune, deleted %zu samples, %zu remain.
void CLGyroCalibrationDatabaseLocalNonlinear::computeFit()
Nonlinear gyro database computed fit.
MaxAgeOut
Overpopulated
NormalAgeOut
targetStratum * kStrataSize + target < samples.size()
PreviousCoverOpenTimestamp
virtual void CLCoverStateDaemon::setLastCoverStateChangeTimestamp(const CFAbsoluteTime &)
Setting property %s to %f
virtual CFAbsoluteTime CLCoverStateDaemon::getLastCoverStateChangeTimestamp()
Last cover open timestamp = %f
CLGestureDataLoggerSilo
__null != self.notifier
MagneticX
MagneticY
MagneticZ
Level
Magnitude
Inclination
MagnitudeStd
InclinationStd
Count
void CLClusterCompassCalibrationTable::setup(bool)
%s table creation.
 ORDER BY 
 DESC
 LIMIT 
UPDATE 
 SET 
void CLCompassCalibrationTable::setup(bool)
 AND 
 DESC LIMIT 100
!std::isinf(min_dist)
!distanceThresholdVector.empty()
minNumClusters>0
CLMicroLocationAWDMetrics
void CLMicroLocationAWDMetrics::computeMetrics()
AWD Metrics is not enabled so not computing microlocation metrics
Computing AWD metrics
void CLMicroLocationAWDMetrics::logMetrics() const
AWD Metrics is not enabled so not logging microlocation metrics
void CLMicroLocationAWDMetrics::pushMetrics()
AWD Metrics is not enabled so not pushing microlocation metrics
Pushing AWD metrics
MicroLocationsAWDMetricsEnabled
cl::chrono::CFAbsoluteTimeClock::time_point CLMicroLocationWifiScanStrategy::getExpectedNextScanEndTime(cl::chrono::CFAbsoluteTimeClock::time_point) const
Next scan expected to take %{public}.3Lfs (ending at %{public}0.3fs). Expected time that the scan timer will end: %{public}.03fs
cl::chrono::secondsf CLMicroLocationWifiScanStrategy::getScanDelay(cl::chrono::CFAbsoluteTimeClock::time_point, cl::chrono::CFAbsoluteTimeClock::time_point, CL::optional<WifiNotificationResults>) const
Not enough time for another scan
No wifi results so issue a scan without delay
Ignoring a cached notification
Got a scan error so returning a scan delay of %{public}0.3Lfs
Got a scan busy error so returning a scan delay of %{public}0.3Lfs
relevant
%{public}s. returning scan delay: %{public}03Lfs
%{public}s. issuing a scan without delay
%{public}s. scan type %{public}d, our scan is already in-flight
%{public}s. scan type %{public}d, returning scan delay: %{public}03Lfs
%{public}s. scan type %{public}d, returning scan delay: %{public}03LFs
virtual std::shared_ptr<CLWifiScanner::WifiScanSettings> CLMicroLocationWifiScanStrategy::getNextScanSettings(cl::chrono::CFAbsoluteTimeClock::time_point, CL::optional<WifiNotificationResults>)
Setting channels to scan: %{private}s
MicroLocationsLocalizing80211ScanType
MicroLocationsLocalizing80211Modes
MicroLocationsLocalizingScanLowPriority
MicroLocationsLocalizingWifiMaxAgeFirstScan
MicroLocationsRecording80211ScanType
MicroLocationsRecording80211Modes
MicroLocationsRecordingScanLowPriority
MicroLocationsRecordingWifiMaxAgeFirstScan
MicroLocationsWifiMaxAgeNextScan
MicroLocationsWifiBusyRetryDelay
MicroLocationsWifiErrorRetryDelay
MicroLocationsLocalizingTopChannels
CFGetTypeID(cfType) == CFArrayGetTypeID()
CFGetTypeID(cfType) == CFNumberGetTypeID()
didConvert
bool CLMicroLocationAccelerometerPowerDetector::configure(const CLMicroLocationAccelerometerPowerDetector::ConfigurationParameters &)
deltaAcceleration,%f
/BuildRoot/Applications/Xcode.app/Contents/Developer/Platforms/AppleTVSimulator.platform/Developer/SDKs/AppleTVSimulator11.0.sdk/usr/local/include/boost/array.hpp
(i < N)&&("out of range")
boost::math::tgamma<%1%>(%1%)
numeric overflow
Unknown function operating on type %1%
Cause unknown
double
Evaluation of tgamma at a negative integer %1%.
Result of tgamma is too large to represent.
Cause unknown: error caused by bad argument with value %1%
long double
sinpx
/BuildRoot/Applications/Xcode.app/Contents/Developer/Platforms/AppleTVSimulator.platform/Developer/SDKs/AppleTVSimulator11.0.sdk/usr/local/include/boost/math/special_functions/gamma.hpp
fl >= 0
Overflow Error
boost::math::itrunc<%1%>(%1%)
boost::math::trunc<%1%>(%1%)
Value %1% can not be represented in the target integer type.
RecordingTimestamp
MicroLocationMeasurements
 WHERE RecordingUUID in ( SELECT RecordingUUID FROM 
MicroLocationRecordingEvents
MicroLocationModels
GenerationTimestamp
MicroLocationConfiguration
com.apple.locationd.MicroLocationDatabase
CLMicroLocationDatabase::CLMicroLocationDatabase(std::string)
Failed to connect to database
onQueueOpenTransaction
CLSqliteTransaction CLMicroLocationDatabase::onQueueOpenTransaction()
#Warning Attempt to call %s without a backing database
void CLMicroLocationDatabase::dropTables()
#Warning Attempt to drop tables without a backing database
uint32_t CLMicroLocationDatabase::onQueueNumEntriesFromTriggerTable(const char *const)
#Warning Unable to get column count from trigger table
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Daemon/Positioning/MicroLocation/CLMicroLocationDatabase.mm
bool CLMicroLocationDatabase::deleteDataOlderThan(std::chrono::minutes)
#Warning Attempt to deleteDataOlderThan without a backing database
bool CLMicroLocationDatabase::deleteDataOlderThan(std::chrono::minutes)_block_invoke
MicroLocation database has no connection. %{public}s
MicroLocation database sqlite error. %{public}s
bool CLMicroLocationDatabase::deleteUnneededModels(uint32_t)
#Warning Attempt to deleteUnneededModels without a backing database
No LOIs found. Not deleting any models
std::vector<CLMicroLocationMeasurementTable::Entry> CLMicroLocationDatabase::selectLearningMeasurementsByLOIBetweenTimes(const std::string &, const std::string &, const std::string &)
#Warning Attempt to selectLearningMeasurementsByLOIBetweenTimes without a backing database
uint32_t CLMicroLocationDatabase::numLocalizationScansBetweenTimes(const std::string &, const std::string &)
#Warning Attempt to numLocalizationScansBetweenTimes without a backing database
uint32_t CLMicroLocationDatabase::numRecordingScansBetweenTimes(const std::string &, const std::string &)
#Warning Attempt to numRecordingScansBetweenTimes without a backing database
CL::optional<std::vector<CLMicroLocationModelTable::Entry> > CLMicroLocationDatabase::getMostRecentModelsForLOI(const std::string &)
#Warning Attempt to getMostRecentModelForLOI without a backing database
CL::optional<CLMicroLocationModelTable::Entry> CLMicroLocationDatabase::getMostRecentModelForLOIOfModelType(const std::string &, CLMicroLocationProto::Model::ModelType)
#Warning Attempt to getMostRecentModelForLOIOfModelType without a backing database
std::vector<std::string> CLMicroLocationDatabase::selectAllLOIs()
std::vector<CLMicroLocationMeasurementTable::Entry> CLMicroLocationDatabase::selectMeasurementsFromRecordingUUIDs(const std::vector<boost::uuids::uuid> &)
#Warning Attempt to selectMeasurementsFromRecordingUUIDs without a backing database
std::vector<CLMicroLocationRecordingEventsTable::Entry> CLMicroLocationDatabase::selectRecordingEventsFromRecordingUUIDs(const std::vector<boost::uuids::uuid> &)
std::vector<CLMicroLocationRecordingEventsTable::Entry> CLMicroLocationDatabase::selectRecordingEventTriggersForLearningMeasurementsByLOI(const std::string &, const std::vector<CLMicroLocationProto::RecordingEventType> &)
CL::optional<CLMicroLocationConfigurationTable::Entry> CLMicroLocationDatabase::getMostRecentWifiChannelHistogramForLOI(const std::string &)
void CLMicroLocationDatabase::connectIfNecessary()
#Warning Failed to connect to database
bool CLMicroLocationDatabase::onQueueFlushBufferedInserts()
#Warning Attempt to flushBufferedInserts without a backing database
Flushing buffered inserts (%llu)
Unable to save buffered entries into the MicroLocation database. Entries have been lost. %{public}s
bool CLMicroLocationDatabase::freeDatabaseSpace()
#Warning Attempt to freeDatabaseSpace() without a backing database
auto CLMicroLocationDatabase::deleteDataOlderThan(std::chrono::minutes)::(anonymous class)::operator()(const std::string &) const
Deleting microlocation data older than %.3Lf days
Error getting a prepared statement
Error binding to statement for sql %{private}s
MicroLocationsDatabaseSelectionLimit
auto CLMicroLocationDatabase::flushBufferedInsertsIfAppropriate()::(anonymous class)::operator()() const
Database buffer is full. Flushing buffered entries to disk
MicroLocationsDatabaseMaxBufferedEntries
bool CLMicroLocationDatabase::onQueueFreeTableSpace() [Table = CLMicroLocationMeasurementTable]
Need to clear %llu rows from the %s table
uint32_t CLMicroLocationDatabase::onQueueNumEntriesFromTriggerTable() [Table = CLMicroLocationMeasurementTable]
#Warning Attempt to get numEntries without a backing database
MicroLocationsMeasurementTableMaxRows
!std::isnan(freePercent) && freePercent >= 0 && freePercent <= 1.0
MicroLocationsDatabaseFreeSpacePercentage
bool CLMicroLocationDatabase::onQueueFreeTableSpace() [Table = CLMicroLocationRecordingEventsTable]
uint32_t CLMicroLocationDatabase::onQueueNumEntriesFromTriggerTable() [Table = CLMicroLocationRecordingEventsTable]
MicroLocationsRecordingEventsTableMaxRows
bool CLMicroLocationDatabase::onQueueFreeTableSpace() [Table = CLMicroLocationModelTable]
uint32_t CLMicroLocationDatabase::onQueueNumEntriesFromTriggerTable() [Table = CLMicroLocationModelTable]
MicroLocationsModelTableMaxRows
bool CLMicroLocationDatabase::onQueueFreeTableSpace() [Table = CLMicroLocationConfigurationTable]
uint32_t CLMicroLocationDatabase::onQueueNumEntriesFromTriggerTable() [Table = CLMicroLocationConfigurationTable]
MicroLocationsConfigurationTableMaxRows
fSettledStateMode == CLMicroLocationSettledStateMode::HighPower
MicroLocationsNumberOfWiFiSamplesInWindowThreshold
MicroLocationsAccelUpdateInterval
fFingerprintCache optional is empty, database likely changed since data source construction
MicroLocationsMinimumDurationForFingerprint
MicroLocationsMinimumNumberOfApsForFingerprint
MicroLocationsMinimumScanTimeDifferenceForFingerprintMeasurements
MicroLocationsMaximumScanTimeDifferenceForFingerprintMeasurements
static_cast<uint32_t>(learnerType) < static_cast<uint32_t>(LearnerType::kAlgorithmCount)
static_cast<uint32_t>(localizerType) < static_cast<uint32_t>(LocalizerType::kAlgorithmCount)
dict.get("type", primitiveType)
primitiveType < static_cast<uint32_t>(KernelFunctionType::kTypeCount)
sigma
dict.get("sigma", sigma)
dict.get("power", power)
primitiveType < static_cast<uint32_t>(FingerprintDistanceFunctionType::kTypeCount)
jaccard_threshold
dict.get("jaccard_threshold", jaccard_threshold)
jaccard_scale_factor
dict.get("jaccard_scale_factor", jaccard_scale_factor)
tanimoto_base
dict.get("tanimoto_base", tanimoto_base)
static_cast<uint32_t>(type) < static_cast<uint32_t>(LinkageFunctionType::kTypeCount)
CLLaplacianKernelFunction
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Daemon/Positioning/MachineLearning/CLKernelFunction.h
sigma > 0.0
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Daemon/Positioning/MachineLearning/CLDistanceFunction.h
a.size() == b.size()
CLGaussianKernelFunction
CLExponentialKernelFunction
power > 0.0
CLUniformKernelFunction
void CLMicroLocationConfigurationTable::initTable()
Sucessfully created table if necessary: %s
bool CLMicroLocationConfigurationTable::insertOrReplace(const std::vector<CLMicroLocationConfigurationTable::Entry> &)
CL::optional<CLMicroLocationConfigurationTable::Entry> CLMicroLocationConfigurationTable::getMostRecentWifiChannelHistogramForLOI(const std::string &)
#Warning Table is not valid so we can't get the most recent wifi channel histogram
AND 
ConfigurationType
bool CLMicroLocationConfigurationTable::deleteOldestRows(uint64_t)
Configuration
std::vector<CLMicroLocationConfigurationTable::Entry> (anonymous namespace)::selectEntries(CLSqliteDatabase &, const std::string &, uint32_t)
void CLMicroLocationMaintenance::deleteOldEntries()
Did %{poblic}sdelete old data
MicroLocation database sqlite error. error: %{public}s
void CLMicroLocationMaintenance::deleteUnneededModels()
Did %{public}sdelete unneeded models
void CLMicroLocationMaintenance::freeDatabaseSpace()
Did %{public}sfree database space
MicroLocationsRecordingPurgeAge
MicroLocationsNumModelsToKeepPerLOI
MicroLocationsMaximumNearestNeighbors
!clusterDistanceThresholdVector.empty()
pruneDistanceThreshold <= *std::min_element(clusterDistanceThresholdVector.begin(), clusterDistanceThresholdVector.end())
fingerprintVector.size() > 0
MicroLocationsClusterDistanceThresholdVector
MicroLocationsPruneDistanceThreshold
MicroLocationsLinkageFunction
virtual CLMicroLocationModel CLMicroLocationKMeansAlgorithm::learn(const CLMicroLocationFingerprintVector &, CLMicroLocationProto::Model::ModelType) const
error in mean shift algorithm
numberOfClusters > 0
numberOfClusters == initialClusterCenters.size()
error in kmeans algorithm
numberOfClusters == clusterCenters.size()
minClusterLabel < numberOfClusters
MicroLocationsUseKMeansClusterCenters
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc
CHECK failed: (&from) != (this): 
set_devicetype
::CLMicroLocationProto::HomeKitBluetoothRssi_DeviceType_IsValid(value)
set_hapversion
::CLMicroLocationProto::HomeKitBluetoothRssi_HAPVersion_IsValid(value)
/BuildRoot/Applications/Xcode.app/Contents/Developer/Platforms/AppleTVSimulator.platform/Developer/SDKs/AppleTVSimulator11.0.sdk/usr/local/include/google/protobuf/repeated_field.h
CHECK failed: (index) < (size()): 
set_generationalgorithm
::CLMicroLocationProto::Model_GenerationAlgorithm_IsValid(value)
set_modeltype
::CLMicroLocationProto::Model_ModelType_IsValid(value)
set_type
::CLMicroLocationProto::ConfigurationType_IsValid(value)
down_cast
/BuildRoot/Applications/Xcode.app/Contents/Developer/Platforms/AppleTVSimulator.platform/Developer/SDKs/AppleTVSimulator11.0.sdk/usr/local/include/google/protobuf/stubs/common.h
f == NULL || dynamic_cast<To>(f) != NULL
static CLMicroLocationModel CLMicroLocationModel::fromProtobuf(const CLMicroLocationProto::Model &)
#Warning The protobuf fingerprint does not have a valid cluster label uuid
#Warning The protobuf fingerprint is using a deprecated uint64 cluster label
#Warning The protobuf fingerprint does not have a cluster identifer
#Warning The protobuf cluster recording does not have a valid cluster label uuid
#Warning The protobuf cluster recording does not have a valid recording uuid
newClusterIterAndBool.second
MicroLocationsFingerprintDistanceFunction
{"type" : 2, "jaccard_threshold" : 0.75, "jaccard_scale_factor" : 20.0}
MicroLocationsClusterPersistenceDistanceThreshold
MicroLocationsUseClusterSizeRatio
MicroLocationsClusterSizeRatio
MicroLocationsClusterSizeThreshold
void CLMicroLocationLearner::learnFromModelType(CLMicroLocationLearner::ShouldCancelFunction, CLMicroLocationProto::Model::ModelType)
Tried to run learning, but learning is disabled
No recording events for model type %{public}d
Fingerprint vector empty for model type %d
Learning cancelled because %{private}s
Model generated successfully for type %{public}d
#Warning Model was not generated properly. Inserted: %{public}d, Flushed: %{public}d
No models were generated for model type %{public}d
MicroLocationsEnableLearning
MicroLocationsNumberOfModelIterations
MicroLocationsLearnerAlgorithm
MicroLocationsFingerprintDataSource
bool CLMicroLocationDatabase::insertOrReplace(std::vector<TableEntry>) [TableEntry = CLMicroLocationModelTable::Entry]
bool CLMicroLocationDatabase::onQueueFreeSpaceIfFull() [Table = CLMicroLocationModelTable]
void CLMicroLocationAnalytics::analyzeWiFiChannels(ShouldCancelFunction)
analyzing WiFi channels
no LOIs found
found LOIs
Wifi Channel Histogram generated successfully for type
#Warning Wifi Channel Histogram was not generated properly. Inserted: %{public}d, Flushed: %{public}d
MicroLocationsNumberDaysToAnalyzeWiFiChannels
bool CLMicroLocationDatabase::insertOrReplace(std::vector<TableEntry>) [TableEntry = CLMicroLocationConfigurationTable::Entry]
bool CLMicroLocationDatabase::onQueueFreeSpaceIfFull() [Table = CLMicroLocationConfigurationTable]
com.apple.mobileme.fmip1
com.apple.gamecenter
com.apple.facetime
com.apple.camera
com.apple.mobiletimer
com.apple.purplebuddy
com.apple.Preferences
com.apple.MobileAddressBook
com.apple.VoiceMemos
com.apple.Bridge
com.apple.MobileStore
com.apple.TapToRadar
com.apple.mobilesafari
com.apple.mobilemail
com.apple.MobileSMS
com.apple.quicklook.quicklookd
com.apple.airplaydiagnostics.app.EmbeddedAirPlayDiagnostics
com.apple.tips
modelTypeIndex < recordingEventsForModel.size()
MicroLocationsRecordingEventsForModel
void CLMicroLocationMeasurementTable::initTable()
Database is not connected so we can't intialize our table
RecordingUUID
bool CLMicroLocationMeasurementTable::insertOrReplace(const std::vector<Entry> &)
Failed to execute statement. %{public}s
 in 
(SELECT 
EventType
std::vector<CLMicroLocationMeasurementTable::Entry> CLMicroLocationMeasurementTable::selectLearningMeasurementsByLOIBetweenTimes(const std::string &, const std::string &, const std::string &, uint32_t)
std::vector<CLMicroLocationMeasurementTable::Entry> CLMicroLocationMeasurementTable::selectMeasurementsFromRecordingUUIDs(const std::vector<boost::uuids::uuid> &, uint32_t)
!recordingUUIDs.empty()
bool CLMicroLocationMeasurementTable::deleteOldestRows(uint64_t)
ScanMCTimestamp
uint32_t CLMicroLocationMeasurementTable::numLocalizationScansBetweenTimes(const std::string &, const std::string &)
#Warning Table is not valid so we can't numLocalizationScansBetweenTimes
uint32_t CLMicroLocationMeasurementTable::numRecordingScansBetweenTimes(const std::string &, const std::string &)
#Warning Table is not valid so we can't numRecordingScansBetweenTimes
ScanCFTimestamp
std::vector<CLMicroLocationMeasurementTable::Entry> (anonymous namespace)::selectEntries(CLSqliteDatabase &, const std::string &, uint32_t)
signedValue >= 0
signedValue <= std::numeric_limits<IntType>::max()
void CLMicroLocationLocalizer::localize(std::unique_ptr<CLMicroLocationFingerprint::MultiSet>)
Localizer has invalid model. Returning only the null microlocation
Localizer doesn't have any WiFi measurements to use. Returning a uniform distribution across all known microlocations
Skipping model type %{private}d because it is invalid
#Warning microlocation probability vector should sum to 1.0 %{public}f
void CLMicroLocationLocalizer::reloadModels(CL::optional<std::string>)
Told to reload the model for the current LOI but we don't have a current LOI. Ignoring request
{ModelsAndLOI={vector<CLMicroLocationLocalizer::ModelAndIds, std::__1::allocator<CLMicroLocationLocalizer::ModelAndIds> >=^{ModelAndIds}^{ModelAndIds}{__compressed_pair<CLMicroLocationLocalizer::ModelAndIds *, std::__1::allocator<CLMicroLocationLocalizer::ModelAndIds> >=^{ModelAndIds}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}8@?0
void CLMicroLocationLocalizer::reloadModels(CLMicroLocationLocalizer::ModelsAndLOI (^)())
Reloaded a new model for LOI: %{private}s
#Warning Told to reload the model but it is invalid. Not changing current model
MicroLocationsLocalizerAlgorithm
auto CLMicroLocationLocalizer::localize(std::unique_ptr<CLMicroLocationFingerprint::MultiSet>)::(anonymous class)::operator()(type-parameter-0-0, const type-parameter-0-1 &) const
#Warning microlocation probability should be non-negative %{public}f
static_cast<uint32_t>(type) < static_cast<uint32_t>(DataSourceType::kTypeCount)
void CLMicroLocationXPCActivityHelpers::XPCActivity::setState(xpc_activity_state_t)
#Warning Unable to mark activity as %{public}ld. current state is %{public}ld
auto CLMicroLocationXPCActivityHelpers::XPCRegistration::XPCRegistration(std::string, const CLMicroLocationXPCActivityHelpers::XPCCriteria &, XPCActivityHandler)::(anonymous class)::operator()(xpc_activity_t) const
Checking in for %{public}s
bool CLMicroLocationWiFiSettledStateSequentialEstimator::update(cl::chrono::CFAbsoluteTimeClock::time_point, const std::vector<CLMicroLocationProto::WiFiRssi> &)
prunedWifiMap size, %{public}lu,currentTime, %{public}f
access point results, t, %{private}f, mac, 0x%{private}012llx, exp, %{private}f, std, %{private}f, valid Samples, %{private}d, invalid Samples, %{private}d, settled Feature, %{private}.2f
access point results, overall Duty Cycle, %{public}f
Settled State, %{public}hu, PassCount,%{public}d, measuredOverallDutyCycle,%{public}f
Removing 0x%{private}012llx at time:%{private}f from time %{private}f
configuration.type() == CLMicroLocationProto::WIFI_HISTOGRAM
x.datatype() == y.datatype()
ii >= 0 && ii < size()
MAGICAL_MOMENTS
HOMEKIT
NOTES
model.isValid()
MicroLocationsNullSpaceDistanceReductionFunction
MicroLocationsNullSpaceKernelFunction
static_cast<uint32_t>(type) < static_cast<uint32_t>(ReducerFunctionType::kTypeCount)
minimumValueSorted
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Daemon/Positioning/MachineLearning/CLReducerFunction.h
container.size()>0
minimumValue
meanValue
maximumValueSorted
maximumValue
firstQuartileValueSorted
medianValueSorted
truncatedMeanValueSorted
numElements>0
fCurrentTransaction
bool CLMicroLocationDatabase::insertOrReplace(std::vector<TableEntry>) [TableEntry = CLMicroLocationRecordingEventsTable::Entry]
#Warning Can't insert because the database is invalid
bool CLMicroLocationDatabase::onQueueFreeSpaceIfFull() [Table = CLMicroLocationRecordingEventsTable]
%{public}s has been written to more than expected. Clearing up disk space. If this log is seen often that indicates a serious problem
bool CLMicroLocationDatabase::insertOrReplace(std::vector<TableEntry>) [TableEntry = CLMicroLocationMeasurementTable::Entry]
bool CLMicroLocationDatabase::onQueueFreeSpaceIfFull() [Table = CLMicroLocationMeasurementTable]
newState == ScanningState::RequestingRTLOI
newState == ScanningState::Spectating
static_cast<bool>(currentRTLOI())
newState == ScanningState::Localizing || newState == ScanningState::Recording
void CLMicroLocationLogic::State::advance(CLMicroLocationLogic::State::ScanningState)
Advanced from %{public}s to %{public}s
void CLMicroLocationLogic::State::reverse()
Reversed from %{public}s to %{public}s
void CLMicroLocationLogic::State::updateWifiScanStrategiesIfNecessary()
Updating localizing scan strategy
Updating recording scan strategy
void CLMicroLocationLogic::reloadSettings()
Settings updated so updating wifi strategies and checking enabled flags
void CLMicroLocationLogic::startProvidingMicroLocations()
MicroLocations are not enabled, so it won't start
Starting MicroLocation provider
Attempting to start MicroLocations but we're already started. In state '%{public}s'
void CLMicroLocationLogic::stopProvidingMicroLocations()
Stopping MicroLocations
bool CLMicroLocationLogic::canLocalize()
Requested to localize but there aren't any interested clients. Ignoring request
Notifier is not in a state where it can localize. It's in %{public}s. Ignoring request
Got request to localize but we don't know what LOI we're in so ignoring the request
void CLMicroLocationLogic::startSpectating()
Starting spectating mode
No LOI set so not transitioning to spectating
fState.currentRTLOI()
void CLMicroLocationLogic::startLocalizing(const CLMicroLocationProto::LocalizationRequest &)
Localization started
void CLMicroLocationLogic::stopLocalizing()
Localization stopped
void CLMicroLocationLogic::startRecordingIfAppropriate(const CLMicroLocationProto::RecordingEvent &)
Not recording since we're in low power mode
Received a recording trigger but we're not settled
void CLMicroLocationLogic::startRecording(const CLMicroLocationProto::RecordingEvent &)
Recording started
void CLMicroLocationLogic::stopRecording()
Rolling back recording because we weren't fully settled
Recording stopped
void CLMicroLocationLogic::setSupportedModelTypes(CL::optional<std::string>)
Model Type %{private}d disabled in settings
home
work
void CLMicroLocationLogic::setSupportedRecordingEventTriggers()
No model types are supported so no recording events are supported
Enabling recording trigger %{public}u
void CLMicroLocationLogic::setCurrentRTLOIString(CL::optional<boost::uuids::uuid>, CL::optional<std::string>, CL::optional<std::string>)
Got an LOI from an old request. Request ID: %{public}s. Current request ID: %{public}s
Setting the current LOI to %{private}s
No model types supported for this LOI type %{private}s
Not setting the LOI to %{public}s since we're in %{public}s state. Current LOI is %{private}s
!rtLOI
void CLMicroLocationLogic::onATVDevices(const std::vector<CLATVAirplayDeviceInternal> &)
Receiving ATV notifications but we shouldn't be subscribed to them! State %{public}s
void CLMicroLocationLogic::onResetLocationData()
Got request to reset Location data. Dropping microlocation tables
void CLMicroLocationLogic::onForceRecordNotification(cl::chrono::CFAbsoluteTimeClock::time_point)
Force Recording received
void CLMicroLocationLogic::onFirstWakeOfDay(cl::chrono::CFAbsoluteTimeClock::time_point)
First Wake of Day received
void CLMicroLocationLogic::recordEvent(std::function<CLMicroLocationProto::RecordingEvent ()>)
Not recording because our state is %{private}s
void CLMicroLocationLogic::onHomeKitDevices(const std::vector<CLHomeKitProvider_Type::HomeKitDevice> &)
Receiving homekit notifications but we shouldn't be subscribed to them! State %{public}s
virtual void CLMicroLocationLogic::onSettledStateChanged(CLMicroLocationSettledState)
Aggregated settled state
previousState
currentState
void CLMicroLocationLogic::onModelGenerated(CLMicroLocationProto::Model::ModelType)
Models have been regenerated. Telling localizer to reload
microLocationId,
,probability,
,domain,
void CLMicroLocationLogic::onMicroLocationsLocalized(const std::vector<CLMicroLocationResultInternal> &, dispatch_block_t)
Localizer results,%{private}s
void CLMicroLocationLogic::reloadWifiChannelHistogram()
Don't have a current LOI so not updating the current wifi channel histogram
Don't have a current wifi channel histogram for this LOI %{private}s
Reloaded wifi channel histogram
void CLMicroLocationLogic::updateEnabled()
Enabled state: microlocations defaults enabled: %{public}d; location services enabled: %{public}d; any system service enabled: %{public}d; overall enabled: %{public}d
MicroLocations have been disabled. Clients will no longer get notifications until we are enabled again.
MicroLocations are now re-enabled. Clients should begin getting notifications again
MicroLocationsLocalizingDuration
MicroLocationsRecordingDuration
set_localizationrequesttype
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.h
::CLMicroLocationProto::LocalizationRequestType_IsValid(value)
MicroLocationsEnableStationaryRecordingPrerequisite
MicroLocationsHomeKitScanDutyCycle
MicroLocationsEnabledModelTypes
CFGetTypeID(cfType) == CFBooleanGetTypeID()
MicroLocationsMagicalMomentsHomeEnabled
MicroLocationsMagicalMomentsWorkEnabled
set_datatype
::CLMicroLocationProto::DataType_IsValid(value)
MicroLocationsMaximumAgeForValidity
set_recordingeventtype
::CLMicroLocationProto::RecordingEventType_IsValid(value)
MicroLocationsEnabled
bitset set argument out of range
/dev/urandom
sha1 too many bytes
void boost::uuids::detail::sha1::process_byte(unsigned char)
/BuildRoot/Applications/Xcode.app/Contents/Developer/Platforms/AppleTVSimulator.platform/Developer/SDKs/AppleTVSimulator11.0.sdk/usr/local/include/boost/uuid/sha1.hpp
Not enough elements in call to seed.
operator*
/BuildRoot/Applications/Xcode.app/Contents/Developer/Platforms/AppleTVSimulator.platform/Developer/SDKs/AppleTVSimulator11.0.sdk/usr/local/include/boost/smart_ptr/shared_ptr.hpp
px != 0
nsObject != nullptr && [nsObject isKindOfClass:[NSDictionary class]]
CLMicroLocationFingerprint::CLMicroLocationFingerprint(const CLMicroLocationProto::Fingerprint &)
#Warning The protobuf fingerprint does not have a valid recording uuid
!multiSet.empty()
minimumScanTimeDifference < maximumScanTimeDifference
!recordingTriggers.empty()
static std::vector<CLMicroLocationFingerprint> CLMicroLocationFingerprint::createVector(const std::vector<CLMicroLocationMeasurementTable::Entry> &, const std::vector<CLMicroLocationRecordingEventsTable::Entry> &, cl::chrono::CFAbsoluteTimeClock::duration, cl::chrono::CFAbsoluteTimeClock::duration, cl::chrono::CFAbsoluteTimeClock::duration, size_t)
A measurement's recording UUID does not have a corresponding event entry
fingerprintVector.size() <= 1
measVector.size() == uniqueMeasurementSet.size()
void CLMicroLocationRecordingEventsTable::initTable()
Sucessfully created table if necessary: %{private}s
bool CLMicroLocationRecordingEventsTable::insertOrReplace(const std::vector<Entry> &)
Failed to bind on INSERT OR REPLACE with sql %{private}s
std::vector<std::string> CLMicroLocationRecordingEventsTable::selectAllLOIs(uint32_t)
#Warning Table is not valid so we can't select all LOIs
std::vector<CLMicroLocationRecordingEventsTable::Entry> CLMicroLocationRecordingEventsTable::selectRecordingEventsFromRecordingUUIDs(const std::vector<boost::uuids::uuid> &, uint32_t)
std::vector<CLMicroLocationRecordingEventsTable::Entry> CLMicroLocationRecordingEventsTable::selectRecordingEventTriggersForLearningMeasurementsByLOI(const std::string &, const std::vector<CLMicroLocationProto::RecordingEventType> &, uint32_t)
!eventTypes.empty()
bool CLMicroLocationRecordingEventsTable::deleteOldestRows(uint64_t)
ReceivedTimestamp
Event
std::vector<CLMicroLocationRecordingEventsTable::Entry> (anonymous namespace)::selectEntries(CLSqliteDatabase &, const std::string &, uint32_t, const std::string &)
CLMicroLocationFingerprintStdVectorSource::CLMicroLocationFingerprintStdVectorSource(CLMicroLocationFingerprintDataSources::ShouldCancelFunction, const std::vector<CLMicroLocationRecordingEventsTable::Entry> &, CLMicroLocationDatabase &)
Data source cancelled learning
void CLMicroLocationModelTable::initTable()
#Warning Database is not connected so we can't intialize our table
Failed to create table: %{public}s
Sucessfully created table if necessary: %{public}s
bool CLMicroLocationModelTable::insertOrReplace(const std::vector<Entry> &)
#Warning Table is not valid so we can't insert or replace
Failed to bind on INSERT OR REPLACE for sql %{private}s
Failed to execute statement. %{private}s
#Warning Table is not valid so we can't select all
CL::optional<std::vector<CLMicroLocationModelTable::Entry> > CLMicroLocationModelTable::getMostRecentModelsForLOI(const std::string &)
#Warning Table is not valid so we can't get the most recent model
CL::optional<CLMicroLocationModelTable::Entry> CLMicroLocationModelTable::getMostRecentModelForLOIOfModelType(const std::string &, CLMicroLocationProto::Model::ModelType)
RTLOI
ModelType
bool CLMicroLocationModelTable::deleteUnneededModels(const std::vector<std::string> &, uint32_t)
#Warning Table is not valid so we can't deleteUnneededModels()
Keeping %{public}d models per LOI per model type
ModelUUID
 NOT IN (
bool CLMicroLocationModelTable::deleteOldestRows(uint64_t)
#Warning Table is not valid so we can't deleteOldestRows
 IN (
Model
RowId
 DESC LIMIT 
) ORDER BY 
std::vector<CLMicroLocationModelTable::Entry> (anonymous namespace)::selectEntries(CLSqliteDatabase &, const std::string &, uint32_t)
Error converting database values. %{public}s
text
blob
auto CLMicroLocationModelTable::deleteUnneededModels(const std::vector<std::string> &, uint32_t)::(anonymous class)::operator()(const std::string &) const
deltaDays < 0 && "deltaDays must be negative"
CLCoarseCellTilesManagerExternal::CLCoarseCellTilesManagerExternal(CLCoarseCellTilesManager *, id<CLIntersiloUniverse>)
void CLCoarseCellTilesManagerExternal::onCleanupAgedTiles(CFRunLoopTimerRef)
double CLLogNormalNormalHypothesisTestUnlockEstimator::getScaleFactor(size_t, double) const
Error in numberOfMeasurements,%zu
Error in rangeIndex calculation, rangeIndex,%d
Error in index calculation, tableIndex,%d
kCMSpringDataCodingKeyRecordId
kCMSpringDataCodingKeySourceId
kCMSpringDataCodingKeySessionId
kCMSpringDataCodingKeyEventTime
kCMSpringDataCodingKeyEventType
OutOfBid
%@, <eventTime, %@, eventType, %@>
eventTime
eventType
WalkModelMetsScale
virtual float CLNatalieWalkModel::computeWorkRateMETS(const CLNatalieModelInput &)
Walk, WorkRate, %f, distance(m), %f, duration(s), %f, mets, %f, fMetsScaling, %f, endTime, %f, currentPace, %f, isStroller, %d, metsStrollerCorrected, %f
Walk, WorkRate, Grade type, %d, vertical speed %f, interval %f, workrate %f, mets %f, mets + grade %f, percent grade %f 
virtual float CLNatalieWalkModel::computeFitnessMachineMETS(const CLNatalieModelInput &)
Walk,fitness machine,computeTime,%.3f,startTime,%.3f,wr,%f,vertSpeed,%f,mets,%f
fUnlockEstimator != nullptr && "unlock estimator must be allocated"
00000000-0000-0000-0000-000000000000
bool CLSwimDataStore::reloadStateFromPersistentStore()
Historical-Distributions, loiUuid, %s, style, %d, poolLength, %f, median, %f, mean, %f, stddev, %f, min, %f, max, %f, samples, %d, prctile10, %f, prctile90, %f, uuid, %s
Historical median turns per session, median, %f, Nsessions, %lu
bool CLSwimDataStore::setFirstEntry()
Set first session entry
bool CLSwimDataStore::loadedStateFromPersistentStore()
Did not successfully load state from db!
bool CLSwimDataStore::setupSessionPersistence()
Cannot yet set first swim session entry
void CLSwimDataStore::setCurrentLOI(NSArray *)
Got %d swimming LOIs.
Checking swimming LOI with id '%s'.
Found swimming distributions for LOI with id '%s'.
fSwimLocation == kCMSwimWorkoutLocationPool
swimStyle == distribution.style
void CLSwimDataStore::persistSwimEntry(const CLSwimEntry &)
Failure to store lap due to database inaccessibility.
-[CLTileSyncSyChange setChangeType:]
@GtsSync, Unexpected change type, %{public}ld, set
objectIdentifier
T@"NSString",R,N
sequencer
changeType
Tq,R,N
syncKey
T@"NSString",&,V_syncKey
properties
T@"NSDictionary",&,V_properties
Tc,V_aud
-[CLTileSyncSySerializer dataFromChange:]
@GtsSync, CsSerial, dataFromChange, isKind, %{public}d
-[CLTileSyncSySerializer changeFromData:ofType:]
@GtsSync, CsSerial, changeFromData
-[CLTileSyncDelegate service:startSession:error:]
@GtsFlow, CS, startSession, 2
-[CLTileSyncDelegate service:sessionEnded:error:]
@GtsFlow, CS, endSession, 6
-[CLTileSyncDelegate serviceDidPairDevice:]
@GtsSync, CsService, serviceDidPairDevice, state, %{public}c
-[CLTileSyncDelegate serviceDidUnpairDevice:]
@GtsSync, CsService, serviceDidUnpairDevice, state, %{public}c
-[CLTileSyncDelegate service:encounteredError:context:]
@GtsSync, CsError, 2, service, %{public}s, underlying, %{public}s
-[CLTileSyncDelegate syncSession:enqueueChanges:error:]
@GtsSync, CsSession, enqueue failed
@GtsFlow, CS, enqueueComplete, 4
-[CLTileSyncDelegate syncSession:applyChanges:completion:]
@GtsSync, CsSession, applyChanges, %{public}lu
@GtsSync, CsSession, More than 1 incoming change, %{public}lu, #CloneMe
-[CLTileSyncDelegate syncSession:didEndWithError:]
@GtsSync, CsError, 0, didEndWithError, %{public}s, underlying, %{public}s
@GtsFlow, CS, sessionDidEnd, 5, error, %{public}d, synctrap, %{public}d
@GtsFlow, PS, syncDidCompleteTx, 2
-[CLTileSyncDelegate syncSession:resetDataStoreWithError:]
@GtsSync, CsSession, resetDataStoreWithError
-[CLTileSyncDelegate service:willSwitchFromPairingID:toPairingID:]
@GtsSync, CsService, willSwitchPairing, old, %{public}s, new, %{public}s
-[CLTileSyncDelegate service:didSwitchFromPairingID:toPairingID:]
@GtsSync, CsService, didSwitchPairing, old, %{public}s, new, %{public}s
-[CLTileSyncDelegate syncCoordinator:beginSyncSession:]
@GtsSync, PsCoord, beginSyncSession, %{public}lu
Initial
Reunion
-[CLTileSyncDelegate syncCoordinator:beginSyncSession:]_block_invoke
@GtsFlow, PS, handleSyncTrapTurn%s, 1
@GtsFlow, PS, syncDidCompleteTx, 2, skipped
-[CLTileSyncDelegate syncCoordinator:didInvalidateSyncSession:]
@GtsSync, PsCoord, didInvalidateSyncSession, %{public}d
@GtsFlow, PS, didInvalidateSession, 3, restriction, %{public}d
-[CLTileSyncDelegate syncCoordinatorDidChangeSyncRestriction:]
@GtsSync, PsCoord, syncCoordinatorDidChangeSyncRestriction, %{public}d
-[CLTileSyncDelegate syncCoordinatorDidChangeSyncRestriction:]_block_invoke
@GtsSync, PsCoord, RestrictionUnknown, %{public}ld, #CloneMe
-[CLTileSyncDelegate initialSyncStateObserver:initialSyncDidCompleteForPairingIdentifier:]
@GtsSync, PsObserver, initialSyncDidCompleteForPairingID
-[CLTileSyncDelegate initialSyncStateObserver:syncDidCompleteForPairingIdentifier:]
@GtsSync, PsObserver, syncDidCompleteForPairingID
@GtsFlow, PS, syncDidCompleteRx, 4
-[CLTileSyncDelegate initialSyncStateObserver:syncDidResetForPairingIdentifier:]
@GtsSync, PsObserver, syncDidResetForPairingID
-[CLTileSyncDelegate initialSyncStateObserverClientCanRetryFailedRequests:]
@GtsSync, PsObserver, initialSyncStateObserverClientCanRetryFailedRequests
void CLTileSyncAWD::loadMetrics(CFAbsoluteTime)
@GtsAwd, plist, error, load, %{public}lu
@GtsAwd, plist, clear, %{public}.1f, thresh, %{public}.0f, last, %{public}.1f
@GtsAwd, plist, error, time, %{public}.1f, now, %.1f
loadcache
void CLTileSyncAWD::startSession(CFAbsoluteTime)
@GtsAwd, started, %{public}d
void CLTileSyncAWD::tilesRequested(CFAbsoluteTime, int)
@GtsAwd, request, tiles, %{public}d, total, %{public}d, sessions, %{public}d
void CLTileSyncAWD::tileSynced(CFAbsoluteTime, int)
@GtsAwd, serialized, %{public}d, totalmb, %{public}.1f
report
void CLTileSyncAWD::weekLongLogging(const char *, CFAbsoluteTime)
@GtsAwd, snap, %{public}s, sessions, %{public}d, empty, %{public}d, completed, %{public}d, errored, %{public}d, requested, %{public}d, synced, %{public}d, sizemb, %{public}.1f, week, %{public}d, %{public}.1f, sinceweekly, %{public}0.1f, reset, %{public}d, lastSave, %{public}0.1f, %{public}0.1f
fExternal->isCompanion() || fExternal->isWatch()
ManifestRate
QwsPeriod
CLTileSyncManager::CLTileSyncManager(CLITilesManager *, id<CLIntersiloUniverse>, BasicMutex *, std::unique_ptr<IExternal>, std::shared_ptr<CLWifiAccessPointLocationService>)
@GtsInit, CG, %{public}d, %{public}d, preDay, %{public}d, rate, %{public}0.0f, state, %{public}d, %{public}d, %{public}c
CLTileSyncManager::CLTileSyncManager(CLITilesManager *, id<CLIntersiloUniverse>, BasicMutex *, std::unique_ptr<IExternal>, std::shared_ptr<CLWifiAccessPointLocationService>)_block_invoke
@GtsTimer, fired, %{public}s
Timer
virtual CLTileSyncManager::~CLTileSyncManager()
@GtsMgr, dtor
com.apple.pairedsync.locationd
bool CLTileSyncManager::psInitialize()
@GtsInit, PsObjects failed, C, %{public}d, O, %{public}d
com.apple.private.alloy.location.wifitilesync
bool CLTileSyncManager::csInitialize()
@GtsInit, CsObjects failed
void CLTileSyncManager::csRelease()
@GtsMgr, release
void CLTileSyncManager::csResume()
@GtsSync, CsError, 1, resume, %{public}s
bool CLTileSyncManager::handleSyncTrapTurn(bool)
@GtsSync, since last switched, hours, %{public}0.1f, days, %{public}0.1f
@GtsMgr, skip SyncTrap, days inactive, %{public}0.1f, thresh, %{public}0.1f, pending, %{public}d
@GtsFlow, CS, setNeedsReset, 1, BeginPair, state, %{public}c, %{public}c, queuewas, %{public}ld, inactive, %{public}0.1f
void CLTileSyncManager::handleRestrictionChange(bool)
@GtsSync, PsCoord, RestrictionLimitPush
@GtsSync, PsCoord, RestrictionNone
@GtsMgr, restriction, state was, %{public}c, now, %{public}c, restricted, %{public}d
CS Session
kSYDictionaryObjectSyncIDKey
kCLTileSyncControlRequest
Control
Request
GizmoReq
NSDictionary *CLTileSyncManager::handleStartSessionCompanion(NSDictionary *)
@GtsMgr, Mismatching keys, syncId, %{public}s, request, %{public}s
@GtsMgr, Crossing sessions, %{public}c, WARNING
kCLTileSyncControlManifestDict
@GtsManif, CompTx, %{public}ld
@GtsMgr, Unexpected Companion startSession flow, type, %{public}d, preDaytona, %{public}d
@GtsSync, CsService, startSession, %{public}c, mdin, %{public}ld, queue, %{public}ld, mdout, %{public}ld
NSDictionary *CLTileSyncManager::handleStartSessionGizmo(NSDictionary *)
@GtsManif, GizRx, %{public}ld, tilesInMap, %{public}ld
@GtsManif, GizTx, %{public}ld
@GtsMgr, Unexpected Gizmo startSession flow, type, %{public}c, hasIn, %{public}d, WARNING
CsErrorShort
CsErrorLong
bool CLTileSyncManager::handleSessionDidEnd(bool)
@GtsMgr, handleSessionDidEnd, error, %{public}d, %{public}d, change, %{public}c, pending, %{public}d, psActive, %{public}d, syncState, %{public}c, queue, %{public}ld, exchanged, %{public}d
NSDictionary *CLTileSyncManager::formRequestFromMetadata(NSDictionary *)
@GtsManif, nil request
@GtsManif, BadId, formG, %{public}s, #CloneMe
@GtsManif, GizRequest, %{public}s, found, %{public}d, cggen, %{public}0.1f, %{public}0.1f, refresh, %{public}d, ReqSize, %{public}ld
NSDictionary *CLTileSyncManager::requestForManifest()
@GtsManif, GizMetaRequest
std::tuple<bool, bool, bool> CLTileSyncManager::handleEnqueueChangesCompanion(NSDictionary *)
@GtsManif, CompRx, %{public}ld, queue, %{public}lu, metadata
@GtsManif, BadId, enqueueC, %{public}s, #CloneMe
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Daemon/Positioning/Tiles/CLTileSyncManager.mm
Assert Failed, %s, %d, %s
@GtsManif, CompReply, %s, have, %{public}d
@GtsFlow, CS, metadataX, 3
@GtsFlow, CS, enqueueChanges, 3, Manifest, %{public}c
@GtsFlow, CS, enqueueChanges, 3, TileData, %{public}c, queue, %{public}ld
@GtsSync, CsSession, %{public}c, llsw, %{private}.2lf, %{private}.2lf, queue, %{public}ld
@GtsFlow, CS, enqueueChanges, 3, SyncTrap
@GtsFlow, CS, enqueueChanges, 3, Unexpected change type, %{public}c
@GtsSync, enqueue return, change, %{public}d, complete, %{public}d, large, %{public}d
std::tuple<bool, bool, bool> CLTileSyncManager::handleEnqueueChangesGizmo(NSDictionary *)
void CLTileSyncManager::handleApplyChanges(CLTileSyncSyChange *)
@GtsMgr, change, syncId, %{public}s, type, %{public}ld, preDaytona, %{public}d
kCLTileSyncObjectDataKey
kCLTileSyncObjectSyncTimestampKey
@GtsCont, change with no data!!!
void CLTileSyncManager::handleSyncTrapEnd()
@GtsMgr, SyncTrapEnd, oldstate, %{public}c, preDay, %{public}d
ClosePS
void CLTileSyncManager::handleWillSwitch(NSUUID *)
@GtsMgr, willSwitch, new, %{public}s, days inactive, %{public}0.1f
void CLTileSyncManager::handlePairingSwitch(bool, bool)
@GtsMgr, handlePairSwitch, ids ,%{public}d, %{public}d, resume/suspend, %{public}c, state, %{public}c, %{public}c, restricted, %{public}d, inactive, %{public}0.1f
void CLTileSyncManager::handleServiceError()
@GtsSync, CsSync, handleServiceError, %{public}c
Indexed
void CLTileSyncManager::handleFirstUnlockGizmo()
@GtsGiz, reclearing
void CLTileSyncManager::handleNearbyCompanion()
@GtsMgr, Nearby, queue, %{public}lu, sessionErrors, %{public}d
Nearby
void CLTileSyncManager::handleToggleResetCompanion(int)_block_invoke
@GtsCont, ToggleReset, %{public}d, queuewas, %{public}ld
void CLTileSyncManager::handleToggleResetGizmo(int)
@GtsGiz, reclear pending
Toggle
Reset
virtual void CLTileSyncManager::handleTileAdded(const char *, double, double)
@GtsCont, %{public}s, llsw, %{private}.2lf, %{private}.2lf
void CLTileSyncManager::addTileSync(CLTileFile *)
@GtsPair, skipevent, add, blocking sync state, %{public}c
@GtsCont, replaceadd, llsw, %{private}.2lf, %{private}.2lf, size, %{public}ld
@GtsCont, add, llsw, %{private}.2lf, %{private}.2lf, size, %{public}ld, current, {public}%d
void CLTileSyncManager::setManifestFire(const char *, CFTimeInterval)
@GtsTimer, nextfire, %{public}.0f, %{public}s, state, %{public}c
virtual void CLTileSyncManager::sendCompanionManifest(const char *)
@GtsManif, return, not companion
@GtsManif, check, %{public}s, state, %{public}d, %{public}c, %{public}lu, sync, %{public}lu
@GtsManif, skip, %{public}s, state, %{public}d, sync, %{public}d
Syncing
@GtsFlow, CS, setHasChanges, 1, SendManifest
void CLTileSyncManager::createManifestInSyChange(bool)
@GtsManif, PrepTx, %{public}s, tiles, %{public}lu, %d, currentOnly, %{public}d
@GtsManif, entry, %{private}s, gentime, %{public}.1f
sendEventToGizmo
bool CLTileSyncManager::sendEventToGizmo(TileId &)
@GtsCont, addlost, llsw, %{private}.2lf, %{private}.2lf
TILE_SYNC
Unable to send tile. It is missing.
tileId
v24@?0^v8Q16
kCLTileSyncObjectAccessTimestampKey
@GtsComp, add, llsw, %{private}.2lf, %{private}.2lf, tile_x, %{private}d, tile_y, %{private}d, tilesize, %{public}ld, queue, %{public}lu
void CLTileSyncManager::processGizmoRequestFromManifest(NSArray *)
@GtsManif, CompRx, %{public}d, queue, %{public}lu
@GtsManif, BadId, gizmoRequestC, %{private}s, %{public}d, of, %{public}lu, #CloneMe
@GtsManif, CompReply, %{private}s, have, %{public}d
@GtsMgr, CsSync, setHasChanges, %{public}d, %{public}lu
void CLTileSyncManager::sendGizmoManifestRequest(const char *)
@GtsManif, skip, %{public}s, state, %{public}c, indexed, %{public}d, ls, %{public}d
@GtsManif, GizmoRequest, %{public}s
tileIdToAdd.tileType == CLTilesManager_Type::TileType::WIFI_Location
void CLTileSyncManager::addTile(const TileId &, NSData *, const CFAbsoluteTime &)
@GtsLock, drop add on LS off
@GtsSync, drop older add, timestamp, %{public}0.1f, toggle/reset, %{public}0.1f
@GtsError, Adding non-Wifi tile, %{public}d, #CloneMe
Failed writing tile to file.
filePath
fIndexedAvailableFiles
Successfully wrote tile file to disk.
Deleting added wifi tile.
filepath
Failed creating wifi tile object
TILES_MANAGER
Failed to save wifi tile in to database.
filename
@GtsGiz, add, llsw, %{private}.2lf, %{private}.2lf, sizes, %{public}lu, %{public}lu
@TileList, wifi, add, llsw, %{private}.2lf, %{private}.2lf, sync, size, %{public}lu
@GtsLock, add, llsw, %{private}.2lf, %{private}.2lf, mapsize, %{public}ld
SYDictionaryObject
/System/Library/PrivateFrameworks/CompanionSync.framework/CompanionSync
TileSyncAwd
PSYSyncCoordinator
/System/Library/PrivateFrameworks/PairedSync.framework/PairedSync
PSYInitialSyncStateObserver
SYService
null
No value written for object
true
%@ %@
elevationAscended
elevationDescended
gradeType
verticalSpeed
rawGradeType
source
TI,N,V_elevationAscended
hasElevationDescended
TI,N,V_elevationDescended
hasGradeType
Ti,N,V_gradeType
hasVerticalSpeed
Tf,N,V_verticalSpeed
hasRawGradeType
Ti,N,V_rawGradeType
hasSource
Ti,N,V_source
Unknown
Uphill
Flat
Downhill
(unknown: %i)
Phone
Watch
CoreMotion
com.apple.CoreMotion.CMMotionUtils.AsyncMessageQueue.
kCLConnectionMessageRegistration
v24@?0{shared_ptr<CLConnectionMessage>=^{CLConnectionMessage}^{__shared_weak_count}}8
com.apple.CoreMotion.CMMotionUtils.SyncMessageQueue.
+[CMMotionUtils sendMessageWithReplySync:]
Timeout (after 5 seconds) occurred during wait!
com.apple.locationd.activity
+[CMMotionUtils tccServiceMotionAccessWithLabel:]
Warning - invoking %@ on main may lead to deadlock.
v12@?0C8
+[CMMotionUtils tccServiceMotionAccessWithLabel:]_block_invoke
TCCServiceMotionAccess timeouts!
com.apple.CoreMotion.tcc
+[CMMotionUtils tccServiceMotionAccessWithBlock:]_block_invoke
+[CMMotionUtils featureAvailability:]
Response invalid.
+[CMMotionUtils fileHandleForWritingToURL:]
#Notice URL must specify a file.
#Notice File already exists at URL.
#Notice URL must point to a file path which you have access to write to.
#Notice Unable to get file handle for URL %{public}s: %{public}s
CLStreamedLocationProviderSilo
Streamed location provider
CLLocationStreamingConnectionManager
CLStreamedLocationProvider
void CLStreamedLocationProvider::logGPS(const CLLocationProvider_Type::NotificationData &)
Streamed,timestamp,%.3lf,timestampGps,%.3lf,odometer,%.3lf,deltaDist,%.3lf,deltaDistUnc,%.3lf,lat,%.8lf,lon,%.8lf,hunc,%.3lf,alt,%.3lf,vunc,%.3lf,speed,%.3lf,sunc,%.3lf,course,%.3lf,cunc,%.3lf
fFitnessAssertionCount >= 0
fFitnessAssertionCount > 0
fDisablementAssertionCount >= 0
fDisablementAssertionCount > 0
fEmergencyEnablementAssertionCount >= 0
fEmergencyEnablementAssertionCount > 0
proxy
T@"<CLStreamedLocationProviderProtocol>",&,N,V_proxy
virtual bool CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLLocationProvider_Type::Notification, NotificationData_T = CLLocationProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLLocationProvider_Type::RegInfo]
virtual bool CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLLocationProvider_Type::Notification, NotificationData_T = CLLocationProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLLocationProvider_Type::RegInfo]
virtual void CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::removeClient(int) [Notification_T = CLLocationProvider_Type::Notification, NotificationData_T = CLLocationProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLLocationProvider_Type::RegInfo]
virtual bool CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::clientRegistered(int, const Notification_T &) [Notification_T = CLLocationProvider_Type::Notification, NotificationData_T = CLLocationProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLLocationProvider_Type::RegInfo]
virtual void CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::listClients() [Notification_T = CLLocationProvider_Type::Notification, NotificationData_T = CLLocationProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLLocationProvider_Type::RegInfo]
motion
natalieFeatures
-[ALMotionState writeTo:]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/External/ActivityLogger/ALMotionState.m
self->_motion != nil
T@"ALCMMotionContextMotionState",&,N,V_motion
hasNatalieFeatures
T@"ALCLNatalieFeatures",&,N,V_natalieFeatures
confidence
mounted
mountedConfidence
turn
isVehicular
isMoving
exitState
startTime
Ti,N,V_type
Ti,N,V_confidence
hasMounted
Ti,N,V_mounted
hasMountedConfidence
Ti,N,V_mountedConfidence
hasTurn
Ti,N,V_turn
hasIsVehicular
TB,N,V_isVehicular
hasIsMoving
TB,N,V_isMoving
hasExitState
Ti,N,V_exitState
hasStartTime
TQ,N,V_startTime
kTypeUnknown
kTypeFrozen
kTypeStatic
kTypeMoving
kTypeSemiStationary
kTypeWalking
kTypeWalkingSlow
kTypeRunning
kTypeCycling
kTypeInVehicleFrozen
kTypeInVehicleStatic
kTypeDriving
kTypeVehicularInHand
kTypeDrivingOther
kTypeDrivingMounted
kTypeDrivingOrWalkingSlow
kTypeCyclingSeat
kTypeCyclingChassis
kTypeCyclingLeg
kTypeCyclingArm
kTypeCyclingTorso
kTypeDrivingSeat
kTypeDrivingArm
kTypeDrivingStowed
kTypeRunningLeg
kTypeRunningArm
kTypeWalkingLeg
kTypeWalkingArm
kTypeSemiStationaryPocket
kTypeSemiStationaryArm
kConfidenceLow
kConfidenceMedium
kConfidenceHigh
kNotMounted
kMounted
kTurnStateUnknown
kTurnStateStatic
kTurnStateTurning
kNoDetection
kExitPreheat
kExitDetected
recordId
pacebin
kvalue
kvalueTrack
score
endTime
distance
steps
session
speed
timestamp
regularEntry
hasRecordId
Ti,N,V_recordId
Td,N,V_startTime
hasPacebin
TI,N,V_pacebin
Tf,N,V_kvalue
Tf,N,V_kvalueTrack
Tf,N,V_score
Td,N,V_endTime
Tf,N,V_distance
Ti,N,V_steps
Ti,N,V_session
Tf,N,V_speed
hasTimestamp
Td,N,V_timestamp
hasRegularEntry
TB,N,V_regularEntry
CLPlatformInfo::motionCaps().deviceMotionService
count
floorsAscended
floorsDescended
pace
TI,N,V_count
Td,N,V_distance
TI,N,V_floorsAscended
TI,N,V_floorsDescended
hasPace
Td,N,V_pace
firedTime
didWake
Td,N,V_firedTime
TB,N,V_didWake
kAlarmTypeReminder
kAlarmTypeFinal
kAlarmTypeReset
kAlarmTypeActiveReminder
kAlarmTypeDrivingReminder
kAlarmTypeDeskReminder
kAlarmTypeTestSedentary
kAlarmTypeTestActive
virtual CLMetsInfo CLNatalieDanceModel::computeMETS(const CLNatalieModelInput &)
Dancing, Compendium METS, METS, %f
fVectorMagnitude
fIQRX
fIQRY
fIQRZ
fMachineFrequency
fEpochType
fStanding
Tf,N,V_fVectorMagnitude
Tf,N,V_fIQRX
Tf,N,V_fIQRY
Tf,N,V_fIQRZ
Tf,N,V_fMachineFrequency
Ti,N,V_fEpochType
TB,N,V_fStanding
kInvalidEpoch
K2560MsType
k10240MsType
gender
heightM
weightKG
vo2max
hrmin
hrmax
hronset
Ti,N,V_gender
Tf,N,V_heightM
Tf,N,V_weightKG
Tf,N,V_vo2max
Tf,N,V_age
Tf,N,V_hrmin
Tf,N,V_hrmax
Tf,N,V_hronset
Tf,N,V_pal
kGenderMale
kGenderFemale
mountedState
tilt
estExitTime
isVehicleConnected
hasConfidence
hasMountedState
Ti,N,V_mountedState
hasIsStanding
hasTilt
Tf,N,V_tilt
hasEstExitTime
Td,N,V_estExitTime
hasIsVehicleConnected
TB,N,V_isVehicleConnected
overrideAction
-[ALActivityOverrideMsg writeTo:]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/External/ActivityLogger/ALActivityOverrideMsg.m
self->_activity != nil
Ti,N,V_overrideAction
T@"ALCLMotionActivity",&,N,V_activity
kOverrideActionNone
kOverrideActionClear
kOverrideActionSet
activityOverrideMsg
bodyMetrics
motionState
stepCountData
sessionCatherineData
jacksonData
strideCalData
sedentaryAlarmData
allDayHeartRate
fitnessTracking
odometer
idsStatus
stairClimbingModel
rowingModel
exerciseMinute
workoutEvent
elevation
coarseElevation
calorieData
natalieData
sedentaryAlarmDataDeprecated
strideCalDataDeprecated
calorieDataDeprecated
coarseElevationDeprecated
elevationDeprecated
hasActivityOverrideMsg
TB,R,N
T@"ALActivityOverrideMsg",&,N,V_activityOverrideMsg
hasBodyMetrics
T@"ALCLBodyMetrics",&,N,V_bodyMetrics
hasMotionState
T@"ALMotionState",&,N,V_motionState
hasStepCountData
T@"ALCLStepCountEntry",&,N,V_stepCountData
hasSessionCatherineData
T@"ALCLSessionCatherine",&,N,V_sessionCatherineData
hasJacksonData
T@"ALCLJacksonData",&,N,V_jacksonData
hasStrideCalData
T@"ALCLStrideCalEntry",&,N,V_strideCalData
hasSedentaryAlarmData
T@"ALCLSedentaryAlarmData",&,N,V_sedentaryAlarmData
hasAllDayHeartRate
T@"ALCLAllDayHeartRate",&,N,V_allDayHeartRate
hasFitnessTracking
T@"ALCMFitnessTracking",&,N,V_fitnessTracking
hasOdometer
T@"ALCLOdometer",&,N,V_odometer
hasIdsStatus
T@"ALCLIDSStatus",&,N,V_idsStatus
hasStairClimbingModel
T@"ALCLStairClimbingModel",&,N,V_stairClimbingModel
hasRowingModel
T@"ALCLRowingModel",&,N,V_rowingModel
hasExerciseMinute
T@"ALCMExerciseMinute",&,N,V_exerciseMinute
hasWorkoutEvent
T@"ALCMWorkoutEvent",&,N,V_workoutEvent
hasElevation
T@"ALCMElevation",&,N,V_elevation
hasCoarseElevation
T@"ALCMCoarseElevation",&,N,V_coarseElevation
hasCalorieData
T@"ALCMCalorieData",&,N,V_calorieData
hasNatalieData
T@"ALCLNatalieDataDeprecated",&,N,V_natalieData
hasSedentaryAlarmDataDeprecated
T@"ALCLSedentaryAlarmDataDeprecated",&,N,V_sedentaryAlarmDataDeprecated
hasStrideCalDataDeprecated
T@"ALCLStrideCalEntryDeprecated",&,N,V_strideCalDataDeprecated
hasCalorieDataDeprecated
T@"ALCMCalorieDataDeprecated",&,N,V_calorieDataDeprecated
hasCoarseElevationDeprecated
T@"ALCMCoarseElevationDeprecated",&,N,V_coarseElevationDeprecated
hasElevationDeprecated
T@"ALCLElevationDeprecated",&,N,V_elevationDeprecated
ActLogger
MsgEnableBitMask
CLActivityLoggerWriter::CLActivityLoggerWriter(NSString *)
MsgEnabledBitMask is %s
MsgRateMask
bool CLActivityLoggerWriter::open()
CLActivityLoggerWriter open log file filePath is %s, file is %p.
bool CLActivityLoggerWriter::logData(PBCodable *)
CLActivityLoggerWriter logData, prepare to log %d bytes
CLActivityLoggerWriter failed to log data: %{public}s
activityLog.pb
CLActivityLoggerAdapterSilo
logger
T^{CLActivityLogger=@{unique_ptr<CLMotionStateMediator_Type::Client, std::__1::default_delete<CLMotionStateMediator_Type::Client> >={__compressed_pair<CLMotionStateMediator_Type::Client *, std::__1::default_delete<CLMotionStateMediator_Type::Client> >=^{Client}}}{CLActivityLoggerWriter=@@{shared_ptr<CLActivityLoggerPolicy>=^{CLActivityLoggerPolicy}^{__shared_weak_count}}{BasicMutex=^^?^{MutexInfo}}}{CLActivityDbExportAdapter=B@{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}},N,V_logger
CMActivityLog
CLActivityLogger::CLActivityLogger(id<CLIntersiloUniverse>)
CLActivityLogger being constructed.
NanoLifestyleEnableFitnessDataCollectionSettingDidChangeNotification
com.apple.managedconfiguration.defaultsdidchange
void CLActivityLogger::onMotionStateMediatorNotification(int, const CLMotionStateMediator_Type::Notification &, const CLMotionStateMediator_Type::NotificationData &)
CLActivityLogger, kNotificationActivityOverride,overrideAction,%d,activity{State,%d,Confidence,%d,MountedState,%d,MountedConfidence,%d,exitState,%d,estExitTime,%f,startTime,%f}
CLActivityLogger,log kNotificationActivityOverride:%s
#Warning CLActivityLogger, Unhandled notification %d
void CLActivityLogger::onFitnessDataCollectionSettingChangedNotification(CFNotificationCenterRef, CFStringRef, const void *, CFDictionaryRef)
CLActivityLogger, dataCollection setting changed
CLOdometerNotifierSilo
CLOdometerNotifier
Cycling
Elevation
CoarseElevation
MotionOdometer
action
Registration
Unregistration
client
notification
notificationClientCount
notificationString
void CLOdometerNotifier::logClient(int, const CLOdometerNotifier_Type::Notification &, bool)
%s, %s, %s, %s, %s, %s, %d, %s, %d, %s, %s
void CLOdometerNotifier::setUpDbUpdateFinishedHandler()_block_invoke
SignificantElevation,startTime,%.3f,endTime,%.3f,ascended,%d,descended,%d
v56@?0{CLSignificantElevation=i[16C]ddII}8
bool CLOdometerNotifier::checkAuthorization() const
Location services are disabled for motion classification
Motion calibration system service is disabled.
LocationBundles/
bundle
void CLActivityAggregator<CLSignificantElevation, CLActivityDB::NoDataProtectionPolicy>::setExpirationRule(CFTimeInterval) [T = CLSignificantElevation, DataProtectionPolicy = CLActivityDB::NoDataProtectionPolicy]
Programmer error, this expiration rule with time %{public}fis not valid.
virtual bool CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLOdometerNotifier_Type::Notification, NotificationData_T = CLOdometerNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
long CLActivityAggregator<CLSignificantElevation, CLActivityDB::NoDataProtectionPolicy>::aggregateRecords() [T = CLSignificantElevation, DataProtectionPolicy = CLActivityDB::NoDataProtectionPolicy]
Aggregating records start %f, count ~%d
Aggregating records stop %f, count ~%d
#Warning Number of records after aggregation is %d and it greatly exceeds the number of records estimated to be needed %d
int CLActivityRecorderDb<CLSignificantElevation, CLActivityDB::NoDataProtectionPolicy>::estimateRecordsNeeded(const CLAggregationRules &) [T = CLSignificantElevation, DataProtectionPolicy = CLActivityDB::NoDataProtectionPolicy]
#Warning No expiration rule was added so the number of records will be unbounded.
virtual void CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLOdometerNotifier_Type::Notification, NotificationData_T = CLOdometerNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLOdometerNotifier_Type::Notification, NotificationData_T = CLOdometerNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLOdometerNotifier_Type::Notification, NotificationData_T = CLOdometerNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLOdometerNotifier_Type::Notification, NotificationData_T = CLOdometerNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLOdometerNotifier_Type::Notification, NotificationData_T = CLOdometerNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::listClients() [Notification_T = CLOdometerNotifier_Type::Notification, NotificationData_T = CLOdometerNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNavModeEstimator::logStateChange(CLNavModeClassification, CLNavModeClassification) const
Changed from %s to %s:,
bool hasValidSpeedEstimate(const CLDaemonLocation &)
#Warning Latest speed is %lf but no information about speed uncertainty
!both
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Daemon/Positioning/Indoor/CLNavModeEstimator.mm
std::string cl::to_string(CLNavModeClassification)
unknown enum 
virtual CLMetsInfo CLCalorieSwimmingModel::computeMETS(const CLNatalieModelInput &)
startTime,%f,endTime,%f,numberOfStrokes,%d,strokeType,%d,epochMets,%f,timestamp,%f,speed,%f,metSource,%d,strokeLength,%f,strokeRate,%f,entryStartTime,%f,entryEndTime,%f,distance,%f,scaledMets,%f,historicalTurnsPerSession,%f
tileType
tileX
tileY
isAllowOverCellular
secKey
hasTileType
TI,N,V_tileType
hasTileX
TI,N,V_tileX
hasTileY
TI,N,V_tileY
hasIsAllowOverCellular
TB,N,V_isAllowOverCellular
hasSecKey
TQ,N,V_secKey
ERROR
WARNING
STATUS
INFO
VERBOSE
Direct
SENSOR
FENCE
LocationServicesEnabledIn8.0
GestureServiceEnabled
LocationServicesAvailable
PrivateMode
com.apple.locationd/Prefs
com.apple.ManagedConfiguration.profileListChanged
com.apple.locationd.DumpDiagnostics
com.apple.locationd.notbackedup
com.apple.carrier
com.apple.operator
NSLocationUsageDescription
NSLocationAlwaysUsageDescription
NSLocationWhenInUseUsageDescription
NSLocationAlwaysAndWhenInUseUsageDescription
gpsUtcLeapSeconds
CFRunLoopRef CLCommonGetRunLoop()
***no run loop available***
void CLCommonSetRunLoop(CFRunLoopRef)
Changing CLCommon's runloop after it was already established
#Warning Setting CLCommon's runloop after it was already established
CLCommonSetRunLoop, %p
int CLCommonCopyFile(const char *, const char *)
cannot open source file: %{public}s, errno %{public}d
cannot open target file: %{public}s, errno %{public}d
error reading source file: %{public}s
error writing target file: %{public}s
int CLCommonBzipFile(const char *, const char *)
cannot open compression stream: %{public}s, bzerror %{public}d
error writing target file: %{public}s, bzerror: %{public}d
error closing target file: %{public}s, bzerror: %{public}d
decompress:%@
bool CLCommonGzipDecompressFile(const char *, const char *)
CLCommonGzipDecompressFile, can't stat, %{public}s
CLCommonGzipDecompressFile, from, %s, to, %s, size, %llu, cTime, %.1lf, isOK, %d
CLCommonGzipDecompressFile, can't open, file_path_to, %{public}s, errno %{public}d
CLCommonGzipDecompressFile, can't open, file_path_from, %{public}s, errno, %{public}d
CLCommonGzipDecompressFile, error reading source file: %{public}s, errno, %{public}d, read, %{public}d
CLCommonGzipDecompressFile, can't write, %{public}s, errno, %{public}d, write, %{public}zu
CLCommonGzipDecompressFile, from, %s, to, %s, isOK, %d, fileSize, %llu, totalReadBytes, %u, totalWrittenBytes, %u, compression, %.4lf
compress:%@
%a, %d %b %Y %T %Z
Date
int CLCommonGetTimeFromHttpHeaderAndRtt(CFDictionaryRef, const CFTimeInterval *, CFAbsoluteTime *)
http date string is converted to timestamp %.3f and adjusted to %.3f by %.3fs RTT (%.3fs diff from systime)
Jun 10 2017 23:18:51
%b %d %Y %H:%M:%S
GpsNetworkCtrl
bool CLCommonIsGpsNetworkTestMode()
GPS_NETWORK: enabled %d found %d
void CLCommonSetTimerNowPlusDelay(CFRunLoopTimerRef, CFTimeInterval)
Timer set loop: %d %f %f %f %f
CFRunLoopTimerRef CLCommonCreateIntervalRunLoopTimer(CFTimeInterval, CFRunLoopTimerContext *, CFRunLoopTimerCallBack)
Boolean CLCommonCompareLocationEqualityClientWithTimeCheck(const CLClientLocation *, const CLClientLocation *, bool)
CLCommonCompareLocationEqualityClient compared two coordinates that were identical other than their reference frames: (%lf, %lf, %d) (%lf, %lf, %d)
bool CLCommonGetFileTimestamps(const char *, CFAbsoluteTime *, CFAbsoluteTime *, CFAbsoluteTime *, off_t *)
#Warning CLCommonGetFileTimestamps, failed to stat file, %s, ret, %d
void CLCommonDeleteFileIfExists(const char *)
TILE: delete file, %s
TILE: stat, %s, ret, %d, mtime, %lu, ctime, %lu, size, %lld
TILE: unlink, %s, ret, %d
bool CLCommonSetFileProtectionClass(const char *, int)
failed, invalid filename
failedToOpen, errno, %d
failed,fd,%d,origProtectionClass,%d,newProtectionClass,%d,ret,%d,errno,%d
done,fd,%d,origProtectionClass,%d,newProtectionClass,%d,ret,%d
kCLClientRegistrationResultAllowedAlways
kCLClientRegistrationResultAllowedWhenInUse
kCLClientRegistrationResultFailedUserDenied
kCLClientRegistrationResultFailedBlacklisted
kCLClientRegistrationResultFailedUnavailable
kCLClientRegistrationResultRequiresAgent
kCLClientRegistrationResultMissing
UNKNOWN
kCLClientAuthorizationStatusNotDetermined
kCLClientAuthorizationStatusRestricted
kCLClientAuthorizationStatusDenied
kCLClientAuthorizationStatusAuthorizedAlways
kCLClientAuthorizationStatusAuthorizedWhenInUse
__TEXT
Binary Images:
armv6
armv7
%16p - %lld %c%s %s <
%02X
> %s
static bool CLNameValuePair::encodeBase64(const void *, unsigned long, std::string &)
processed %p %d to (%s)
CLNameValuePair::CLNameValuePair()
could not create new mutable dictionary
CLNameValuePair::CLNameValuePair(CFDictionaryRef)
CLNameValuePair::CLNameValuePair(const CLNameValuePair &)
CLNameValuePair &CLNameValuePair::operator=(const CLNameValuePair &)
virtual bool CLNameValuePair::loadFromFile(const char *)
could not deserialize property list from %{public}s
file %s does not exist... clearing, error, %s
#Warning Error reading file %{public}s: %{public}s
bool CLNameValuePair::writeDataToFile(const char *, CFDataRef, CLNVPDataProtection) const
Could not create NSURL for file: %{public}s
Could not write data to disk %{public}s
virtual bool CLNameValuePair::saveToFile(const char *) const
Could not serialize data for file %{public}s
virtual bool CLNameValuePair::saveToBinaryFile(const char *, CLNVPDataProtection) const
virtual void CLNameValuePair::clearInternal(const CFStringRef, int)
key %{public}s does not have element %{public}d in array of size %{public}ld
key %{public}s does not have element %{public}d in non-array type %{public}lu
virtual bool CLNameValuePair::get(CFStringRef, CFArrayRef &) const
type IDs do not match for key %{public}s - %{public}lu vs %{public}lu
virtual bool CLNameValuePair::get(CFStringRef, CFDataRef &, int) const
virtual bool CLNameValuePair::get(CFStringRef, CFStringRef &, int) const
virtual bool CLNameValuePair::copyInternal(CFStringRef, CFTypeRef &, int) const
specified index is out of range for key %{public}s (%{public}d of %{public}ld)
specified index %{public}d not applicable to type %{public}lu for key %{public}s
virtual bool CLNameValuePair::set(CFStringRef, const bool &)
could not create cf type for key %{public}s
virtual bool CLNameValuePair::set(CFStringRef, const uint16_t &)
virtual bool CLNameValuePair::set(CFStringRef, const short &)
virtual bool CLNameValuePair::set(CFStringRef, const uint32_t &)
virtual bool CLNameValuePair::set(CFStringRef, const int64_t &)
virtual bool CLNameValuePair::set(CFStringRef, const int &)
virtual bool CLNameValuePair::set(CFStringRef, const long &)
virtual bool CLNameValuePair::set(CFStringRef, const double &)
virtual bool CLNameValuePair::set(CFStringRef, const char *)
virtual bool CLNameValuePair::set(CFStringRef, const CLNameValuePair &)
virtual bool CLNameValuePair::insert(CFStringRef, const bool &)
virtual bool CLNameValuePair::insert(CFStringRef, const uint16_t &)
virtual bool CLNameValuePair::insert(CFStringRef, const short &)
virtual bool CLNameValuePair::insert(CFStringRef, const uint32_t &)
virtual bool CLNameValuePair::insert(CFStringRef, const int64_t &)
virtual bool CLNameValuePair::insert(CFStringRef, const int &)
virtual bool CLNameValuePair::insert(CFStringRef, const long &)
virtual bool CLNameValuePair::insert(CFStringRef, const double &)
virtual bool CLNameValuePair::insert(CFStringRef, const char *)
virtual bool CLNameValuePair::insert(CFStringRef, const CLNameValuePair &)
virtual bool CLNameValuePair::serializeBinary(CFDataRef *) const
could not create write stream
could not open write stream
could not write data, error code, %{public}ld, error domain, %{public}s
unknown error
virtual bool CLNameValuePair::deserialize(const CFDataRef)
could not create intermediate property list - %{public}ld (%{public}s)
virtual void CLNameValuePair::print() const
<empty>
static void CLNameValuePair::printKeyValue(const void *, const void *, void *)
%s = <dictionary (%ld entries)>:
%s = %s
%s = %0.6f
%s = %d
%s = <unhandled value type %lu>
type ID does not match - %lu vs %lu
%s = <dictionary (%ld entries)>:
%s = %s
%s = %0.6f
%s = %d
%s = <unhandled value type %lu>
%s[%d]
static bool CLNameValuePair::fromCfType(const CFTypeRef, short &)
could not get value
static bool CLNameValuePair::fromCfType(const CFTypeRef, int64_t &)
static bool CLNameValuePair::fromCfType(const CFTypeRef, int &)
static bool CLNameValuePair::fromCfType(const CFTypeRef, long &)
static bool CLNameValuePair::fromCfType(const CFTypeRef, double &)
type IDs do not match - %{public}lu vs %{public}lu
static bool CLNameValuePair::fromCfType(const CFTypeRef, std::string &)
could not convert to C string
can't convert %{public}u data bytes
type IDs do not match - %{public}lu
static bool CLNameValuePair::fromCfType(const CFTypeRef, const char *&, unsigned int &)
static bool CLNameValuePair::fromCfType(const CFTypeRef, CLNameValuePair &)
v32@?0@"NSURL"8@"NSURLResponse"16@"NSError"24
CLHttpRequest
CLPrivateDataCapture.proto
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Daemon/Positioning/Raven/CLPrivateDataCapture.pb.cc
CHECK failed: file != NULL: 
set_previous
::CLPrivateData::ReachabilityState_ReachabilityType_IsValid(value)
set_current
set_charger_type
::CLPrivateData::Battery_BatteryChargerType_IsValid(value)
set_notification_data
::CLPrivateData::DeviceStatus_NotificationType_IsValid(value)
set_high_resolution_signal_environment
void CLMicroLocationPowerLog::logMetrics(CL::optional<ObserverPowerLogFunction>) const
PowerLog is not enabled so not writing microlocation metrics
FootprintsMetricsStart
FootprintsMetricsEnd
FootprintsNumChannelsAt50msDwell
FootprintsNumChannelsAt110msDwell
FootprintsTotalDurationActiveScansSecs
FootprintsTotalDurationPassiveScansSecs
FootprintsActiveScanDutyCycle
FootprintsPassiveScanDutyCycle
FootprintsTotalDurationWPHomeKitSecs
FootprintsTotalDurationWPAirplaySoloSecs
Footprints
Wrote microlocation metrics to power log: %{private}s
MicroLocationsPowerLogEnabled
MicroLocationsLocalizingWifiDutyCyclePercentage
MicroLocationsRecordingWifiDutyCyclePercentage
CLSedentaryTimerNotifierSilo
CLSedentaryTimerNotifier
v32@?0d8d16i24B28
SedentaryTimerAggregateInterval
CLActivityLogger
v40@?0{CLSedentaryAlarmData=ddiBd}8
com.apple.locationd.sedentarytimer
CMError CLSedentaryTimerNotifier::startTimer(const std::string &, NSDictionary *)
SedentaryAlarm,Error starting,client,%{public}s,fitness tracking,%{public}d
SedentaryAlarm,Error starting,client,%{public}s,armed,%{public}d
SedentaryAlarm,START,client,%s,offset,%d,period,%d,reminder,%d,autoReschedule,%d
CMError CLSedentaryTimerNotifier::stopTimer(const std::string &)
SedentaryAlarm,STOP
void CLSedentaryTimerNotifier::onSedentaryAlarm(const CFAbsoluteTime, const CFAbsoluteTime, const CLSedentaryAlarmType, const bool)
SedentaryAlarm,STOP,fitness tracking,%d
SedentaryAlarm,InVehicleReminder,now,%.3f,motionStateTime,%.3f
SedentaryTimerActiveWindow
SedentaryTimerActiveThreshold
SedentaryTimerStepCountThreshold
SedentaryTimerPushCountThreshold
SedentaryTimerHapticFeedback
void CLActivityAggregator<CLSedentaryAlarmData, CLActivityDB::NoDataProtectionPolicy>::setExpirationRule(CFTimeInterval) [T = CLSedentaryAlarmData, DataProtectionPolicy = CLActivityDB::NoDataProtectionPolicy]
long CLActivityAggregator<CLSedentaryAlarmData, CLActivityDB::NoDataProtectionPolicy>::aggregateRecords() [T = CLSedentaryAlarmData, DataProtectionPolicy = CLActivityDB::NoDataProtectionPolicy]
int CLActivityRecorderDb<CLSedentaryAlarmData, CLActivityDB::NoDataProtectionPolicy>::estimateRecordsNeeded(const CLAggregationRules &) [T = CLSedentaryAlarmData, DataProtectionPolicy = CLActivityDB::NoDataProtectionPolicy]
virtual void CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLSedentaryTimerNotifier_Type::Notification, NotificationData_T = CLSedentaryTimerNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLSedentaryTimerNotifier_Type::Notification, NotificationData_T = CLSedentaryTimerNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLActivityRecorderDb<CLSedentaryAlarmData, CLActivityDB::NoDataProtectionPolicy>::addSuspectRecord(const T &) [T = CLSedentaryAlarmData, DataProtectionPolicy = CLActivityDB::NoDataProtectionPolicy]
Maximum number of entries exceeded, throwing out oldest entry.
bool CLActivityRecorderDb<CLSedentaryAlarmData, CLActivityDB::NoDataProtectionPolicy>::isValidTime(CFAbsoluteTime &) const [T = CLSedentaryAlarmData, DataProtectionPolicy = CLActivityDB::NoDataProtectionPolicy]
#Notice CL database error, invalid time, %{public}lf
virtual void CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLSedentaryTimerNotifier_Type::Notification, NotificationData_T = CLSedentaryTimerNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLSedentaryTimerNotifier_Type::Notification, NotificationData_T = CLSedentaryTimerNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLSedentaryTimerNotifier_Type::Notification, NotificationData_T = CLSedentaryTimerNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLSedentaryTimerNotifier_Type::Notification, NotificationData_T = CLSedentaryTimerNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::listClients() [Notification_T = CLSedentaryTimerNotifier_Type::Notification, NotificationData_T = CLSedentaryTimerNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
CLMotionStateObserverCompanion::CLMotionStateObserverCompanion(id<CLIntersiloUniverse>)
Restoring session timer since we have a current activity.
virtual void CLMotionStateObserverCompanion::receiveMotionStateUpdate(NSData *)
Invalid data received.
void CLMotionStateObserverCompanion::startSessionTimer()_block_invoke
Timing out session since we have not heard a response in %f seconds.
void CLMotionStateObserverCompanion::startSessionTimer()
Starting update timer.
void CLMotionStateObserverCompanion::stopSessionAndTimer()
void CLMotionStateObserverCompanion::trackInVehicleState()
MotionStateObserver,in-vehicle tracking,START
MotionStateObserver,in-vehicle tracking,RESCHED,now,%.3f,alarmCount,%d
MotionStateObserver,in-vehicle tracking,STOP
void CLMotionStateObserverCompanion::onActivityAlarm(CMActivityAlarm *)
nPairs
lsest
sumest
fPal
TI,N,V_nPairs
hasLsest
Tf,N,V_lsest
hasSumest
Tf,N,V_sumest
hasFPal
TI,N,V_fPal
version
securityKey
generationTimeSecs
expirationAgeSecs
DEPRECATED_fingerprints
fingerprints
marketId
hasVersion
Ti,N,V_version
Ti,N,V_tileX
Ti,N,V_tileY
hasSecurityKey
TQ,N,V_securityKey
hasGenerationTimeSecs
Td,N,V_generationTimeSecs
hasExpirationAgeSecs
Ti,N,V_expirationAgeSecs
hasDEPRECATEDFingerprints
dEPRECATEDFingerprints
T@"TRANSITPbLocationFingerprintsV1",&,N,V_dEPRECATEDFingerprints
hasFingerprints
T@"TRANSITPbLocationFingerprints",&,N,V_fingerprints
hasMarketId
TQ,N,V_marketId
CLGnssAssistance.proto
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Shared/Protobuf/CLGnssAssistance.pb.cc
set_request_type
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Shared/Protobuf/CLGnssAssistance.pb.h
::CLPublicData::SensorRequestInfo_SensorRequestType_IsValid(value)
set_compensation_type
::CLPublicData::SensorRequestInfo_SensorCompensationType_IsValid(value)
set_motion_state
::CLPublicData::ActivityContext_MotionStateType_IsValid(value)
set_motion_state_confidence
::CLPublicData::ActivityContext_ConfidenceType_IsValid(value)
set_dominant_motion_mode
::CLPublicData::ActivityContext_DominantMotionModeType_IsValid(value)
set_dominant_motion_mode_confidence
set_mount_state
::CLPublicData::MountState_MountStateType_IsValid(value)
set_mount_state_confidence
::CLPublicData::MountState_ConfidenceType_IsValid(value)
set_signal_environment
::CLPublicData::SignalEnvironment_SignalEnvironmentType_IsValid(value)
set_reliability
::CLPublicData::PositionAssistance_ReliabilityType_IsValid(value)
set_gps_reliability
::CLPublicData::GPSsa_GpsReliabilityType_IsValid(value)
set_device_turn_state
::CLPublicData::TurnStateAssistance_TurnStateType_IsValid(value)
-[CLMescalSigner initInSilo:]
MESCAL: Could not derive hardware info for SAPInit
0 == [_worklist count]
dataIn
hdlr
!_session
!!success == !!_session
v12@?0B8
_keyExchangeComplete
-[CLMescalSigner _doSigningWhenReady]
MESCAL: SAPSign failed with: %{public}ld
-[CLMescalSigner _initializeMescalWithCompletion:]_block_invoke
MESCAL: churn failure: signing disabled
-[CLMescalSigner _initializeMescalWithCompletion:]
MESCAL: SAPInit failed with: %{public}ld
_session
exchangeData
-[CLMescalSigner _churnMescalExchangeData:withCompletion:]
MESCAL: SAPExchange failed with: %{public}ld
replaceAfter
Td,R,N,V_replaceAfter
launchReason
T@"NSString",&,N,V_launchReason
homeUUID
T@"NSString",&,N,V_homeUUID
actionSetUUID
T@"NSString",&,N,V_actionSetUUID
actionSetName
T@"NSString",&,N,V_actionSetName
actionSetType
T@"NSString",&,N,V_actionSetType
clientName
T@"NSString",&,N,V_clientName
sceneName
T@"NSString",&,N,V_sceneName
accessoryUUID
T@"NSString",&,N,V_accessoryUUID
accessoryName
T@"NSString",&,N,V_accessoryName
T@"NSString",&,N,V_serviceName
serviceType
T@"NSString",&,N,V_serviceType
characteristicType
T@"NSString",&,N,V_characteristicType
viewUUID
T@"NSString",&,N,V_viewUUID
viewName
T@"NSString",&,N,V_viewName
viewInformation
T@"NSString",&,N,V_viewInformation
-[CLKeychainItemWrapper initWithIdentifier:]
nil identifier given to CLKeychainItemWrapper
-[CLKeychainItemWrapper dictionaryToSecItemFormat:]
nil dictionary passed for converstion
Conversion of dictionary without kSecValueData key requested.
-[CLKeychainItemWrapper writeToKeychain]
Couldn't update the Keychain Item.
Couldn't add the Keychain Item.
keychainItemData
T@"NSMutableDictionary",&,N,V_keychainItemData
genericPasswordQuery
T@"NSMutableDictionary",&,N,V_genericPasswordQuery
write_escaped_str
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Shared/Logging/CLJsonLogging.cpp
next.first[0] == '\0'
nullptr != escapedControlChar(next.first[0])
CL::WifiPositioning::Policies::NotifyClients::Output CL::WifiPositioning::Policies::NotifyClients::HandleEvent::operator()(const Events::Wifi::ScanBuffer &) const
WsbCalc, filter, live, %{public}lu, was %{public}lu
CL::WifiPositioning::Policies::NotifyClients::Output CL::WifiPositioning::Policies::NotifyClients::HandleEvent::operator()(const Events::ReprocessWifiScanBuffer &) const
WsbCalc, filter, reproc, %{public}lu, was %{public}lu
wifiLocType
apsInSolution
_handler
handler
T@?,C,N,V_handler
nextFireTime
Td,N,V_nextFireTime
fireInterval
Td,N,V_fireInterval
error == 0
<unnamed>
virtual void BasicMutex::lock()
#Warning TIMEOUT: Waited %f seconds to aquire lock '%s' (%p)
info->fCount >= 0
(info->fCount == 0) || (info->fOwner == curThread)
(info->fCount > 0) || (info->fOwner == __null)
virtual void BasicMutex::unlock()
#Warning TIMEOUT: Held lock '%s' (%p) for %f seconds
info->fCount > 0
!_guts->valid
info->fCount == 0
kCLLocationStreamingMessageTypeRequestLocation
kCLLocationStreamingMessageGranularityKey
kCLLocationStreamingMessageIncludeMotionKey
kCLLocationStreamingMessageInFitnessSessionKey
kCLLocationStreamingMessageEmergencyEnablementKey
kCLLocationStreamingMessageTypeLocation
kCLLocationStreamingMessageLocationKey
kCLLocationStreamingMessageLocationPrivateKey
kCLLocationStreamingMessageLocationInternalKey
kCLLocationStreamingMessageTypeAliveAgain
kCLLocationStreamingMessageTypeSetMotionAlarm
kCLLocationStreamingMessageMotionAlarmStateKey
kCLLocationStreamingMessageTypeMotionAlarmUpdate
kCLLocationStreamingMessageInMotionKey
messageType
T@"NSString",&,N,V_messageType
payload
T@"NSDictionary",&,N,V_payload
priority
Tq,N,V_priority
idsOptions
T@"NSDictionary",&,N,V_idsOptions
protocolVersion
Ti,N,V_protocolVersion
CLLocationStreamingConnectionManagerSilo
com.apple.private.alloy.location.stream
v16@?0@"<CLLocationStreamingConnectionManagerClientProtocol>"8
kCLLocationStreamingMessageKeyType
kCLLocationStreamingMessageKeyVersion
kCLLocationStreamingMessageKeyPayload
service
T@"IDSService",&,N,V_service
unacknowledgedMessages
T@"NSMutableDictionary",&,N,V_unacknowledgedMessages
clients
T@"NSMutableSet",&,N,V_clients
pairIsNearby
TB,N,V_pairIsNearby
NRPairedDeviceRegistry
/System/Library/PrivateFrameworks/NanoRegistry.framework/NanoRegistry
NRWatchOSVersionForRemoteDevice
virtual bool CLPreferences::serialize(CFDataRef *) const
***not supported***
virtual bool CLPreferences::serializeBinary(CFDataRef *) const
virtual bool CLPreferences::deserialize(const CFDataRef)
virtual void CLPreferences::print() const
<empty>
virtual void CLPreferences::merge(const CLPreferences &, bool)
virtual bool CLPreferences::loadFromFile(const char *)
virtual bool CLPreferences::saveToFile(const char *) const
virtual bool CLPreferences::saveToBinaryFile(const char *) const
virtual void CLPreferences::setInternal(const CFStringRef, const CFTypeRef)
Attempt to set key %{public}s for read-only preferences %{public}s/%{public}s!
is not
Empty payload, returning
IoManager Mutex
IoManager Thread Parking
IoManager Shutdown Sync
fStarted == false
bool CLIoManager::deregisterSource(CLDataSource *)
Poll count underflow!!!
virtual void CLDataSource::watchBlock()
%{public}s: Need to override this method
virtual void CLDataSource::watchUnblock()
void CLDataSource::setState_nl(CLDataSource::State)
Trying to set the same state '%{public}s' for device '%{public}s'
kClosing
kClosed
kStopped
kStarted
kOpening
kOpened
static void CLDaemonCache::shutdownInstance()
could not store cached data 
CLDaemonCache
ClearLocationCache
CLDaemonCache::CLDaemonCache(id<CLIntersiloUniverse>)
#Warning clearing location cache
CLSensorFusionService::CLSensorFusionService(int)
Starting device motion service 0x%x
DeviceMotionUseThrottledInterval
DeviceMotionAccelerometerUpdateInterval
DeviceMotionGyroUpdateInterval
DeviceMotionCompassUpdateInterval
GyroUpdateInterval,%.4f,AccelerometerUpdateInterval,%.4f
DumpGyroCalibrationDatabaseOnDeviceMotionStart
CLSensorFusionService::CLSensorFusionService(int)_block_invoke
Dumped gyro cal database with id %@
virtual CLSensorFusionService::~CLSensorFusionService()
Stopping device motion service 0x%x
void CLSensorFusionService::publishSensorFusion(const CLSensorFusionService::Sample *)
[CLSensorFusionService] q.x,%10.10f,q.y,%10.10f,q.z,%10.10f,q.w,%10.10f,userAccel.x,%10.10f,userAccel.y,%10.10f,userAccel.z,%10.10f,rotationRate.x,%10.10f,rotationRate.y,%10.10f,rotationRate.z,%10.10f,magneticField.x,%10.10f,magneticField.y,%10.10f,magneticField.z,%10.10f,heading,%.3f,accuracy,%.3f,level,%d,mode,%d,status,%#02x,clientID,%d,timestamp,%lf,now,%lf
void CLSensorFusionService::updateSensorStatus(const CLSensorFusionService::SensorStatus &)
Set device motion sensor status %ld
adamId
bundleId
displayName
T@"NSNumber",R,C,N,V_adamId
T@"NSString",R,C,N,V_bundleId
T@"NSString",R,C,N,V_displayName
developerName
T@"NSString",R,C,N,V_developerName
lastUpdateTime
Td,R,N,V_lastUpdateTime
Metadata was incomplete for adam id: %@, bundle id: %@, display name: %@, artist name: %@
-[CLStoreServicesRequestor onStoreLookupResponse:error:adamIds:requestorResponse:]_block_invoke
SAMSSR: Resolved adamId, %s, name, %s, bundleId, %s, developerName, %s.
SAMSSR: Added adamId, %s, to cache.
SAMSSR: Missing response for adamId, %s in lookup request but not in the response
Missing response for adamId, %@ in lookup request but not in the response
v32@?0@"NSNumber"8Q16^B24
An adam ID is required to perform a item lookup.
-[CLStoreServicesRequestor performItemLookupWithAdamIds:response:]_block_invoke
SAMSSR: Result for adamid, %ld, in cache.
SAMSSR: Result for adamid, %ld, in cache but expired.
SAMSSR: Result for adamid, %ld, not in cache.
-[CLStoreServicesRequestor performItemLookupWithAdamIds:response:]_block_invoke_2
SAMSSR: Error performing lookup, %s
-[CLStoreServicesRequestor performItemLookupWithAdamIds:response:]_block_invoke_3
SAMSSR: Error parsing lookup response, %s
v24@?0@"NSArray"8@"NSError"16
v24@?0@"SSLookupResponse"8@"NSError"16
-[CLStoreServicesRequestor onPurgeTimer]
SAMSSR: Removing adamId, %ld, from cache since the entry has expired.
resultsCache
T@"NSMutableDictionary",&,N,V_resultsCache
purgeTimer
T@"CLTimer",&,N,V_purgeTimer
hero-app-item
void CLMapDataUtil::CovarInvDet::init(const double &, const double &, const double &)
invalid hunc
void CLMapDataUtil::CovarInvDet::init(const double &, const double &, const double &, const double &, const double &)
invalid inputs
void CLMapDataUtil::CovarInvDet::calcInvAndDet()
fVarEast <= 0.0
fVarNorth <= 0.0
fVarEastNorth < 0.0
CLMM, Unexpected determinant of 0
void CLMapDataUtil::calculateScoreAndVarFactor(const CLMapDataUtil::CovarInvDet &, const double &, const double &, const double &, const double &, double &, double &)
determinant <= 0.0
static std::string CLPersistentStore::getMutableStorePath(CLPersistentStoreType)
could not get mutable store path for type, %{public}d
/System/Library/Frameworks/CoreLocation.framework/Support/
/System/Library/Frameworks/CoreLocation.framework
/Library/locationd/
CLPersistentStore::CLPersistentStore(id<CLIntersiloUniverse>, const char *, CLPersistentStore::Domain, CLPersistentStoreType, CLPersistentStoreDataProtection)
Unknown persistent domain: %{public}d
virtual bool CLPersistentStore::refresh()
#Warning persistent store %s has been modified - refreshing will lose changes
virtual bool CLPersistentStore::store()
#Warning data set %s is not changeable - not storing
%s stored to disk %s
callback != __null
virtual void CLPersistentStore::setStoreInterval(const CFTimeInterval &, CFRunLoopTimerCallBack, void *)
scheduling to auto-store %s every %.3fs
disabling auto-store for %s
WPHomeKitScanDutyCycle
CLHomeKitProviderSilo
power
CLHomeKitProvider
void CLHomeKitProvider::startScan(CLHomeKitProvider::ScanningPolicy)
#Warning Got a request for a scan but no one is interested. Ignoring
void CLHomeKitProvider::onHomeKitDeviceFound(NSUUID *, CLHomeKitProvider_Type::HAPVersion, NSData *, int, cl::chrono::CFAbsoluteTimeClock::time_point, CLHomeKitProvider_Type::HomeKitType)
found device %{private}@, data: %{private}@, rssi: %{private}d, type: %{private}d
#Warning Got a device notification but not device data
FED4
Invalid Configuration Number
 (out of range [
]): 
Invalid Compatible Version
 got 
 expected 
Invalid Global State Number
Invalid Accessory Category Identifier
Invalid Advertising Interval and Length
Invalid Remaining Length
 got: 
 expected: 
Invalid Status Flags
Invalid Type
 exptected: 
Invalid Company Identifier
Valid
virtual void CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLHomeKitProvider_Type::Notification, NotificationData_T = CLHomeKitProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLHomeKitProvider_Type::Notification, NotificationData_T = CLHomeKitProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
bool (anonymous namespace)::addToScanCache(std::vector<CLHomeKitProvider_Type::HomeKitDevice> &, NSUUID *, NSData *, int, cl::chrono::CFAbsoluteTimeClock::time_point, CLHomeKitProvider_Type::HomeKitType) [HomeKitType = (anonymous namespace)::HomeKitServiceData]
#Warning Found invalid HomeKit device. Data length was invalid
#Warning Found invalid HomeKit device: %{private}s
bool (anonymous namespace)::addToScanCache(std::vector<CLHomeKitProvider_Type::HomeKitDevice> &, NSUUID *, NSData *, int, cl::chrono::CFAbsoluteTimeClock::time_point, CLHomeKitProvider_Type::HomeKitType) [HomeKitType = (anonymous namespace)::HomeKitManufacturerData]
virtual void CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLHomeKitProvider_Type::Notification, NotificationData_T = CLHomeKitProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLHomeKitProvider_Type::Notification, NotificationData_T = CLHomeKitProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLHomeKitProvider_Type::Notification, NotificationData_T = CLHomeKitProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLHomeKitProvider_Type::Notification, NotificationData_T = CLHomeKitProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::listClients() [Notification_T = CLHomeKitProvider_Type::Notification, NotificationData_T = CLHomeKitProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
Default
kCLTelephonyServiceConnectedNotification
kCLTelephonyServiceDisconnectedNotification
kCLTelephonyServiceResetNotification
CLTelephonyServiceSilo
-1 != fNotificationAsInt
CLTelephonyService::CLTelephonyService(id<CLIntersiloUniverse>)
CELL_LOC: fHardwareType, %d
notifyAllClients
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Daemon/Shared/TelephonyService/CLTelephonyService.mm
[expected containsObject:(NSString *)notification]
!notificationInfo
sending notification for %s
bool CLTelephonyService::onTelephonyInvalid(bool)
currently not connected to telephony service
bool CLTelephonyService::resetModem(const char *)
bool CLTelephonyService::getImsi(std::string &)
bool CLTelephonyService::getImei(std::string &)
bool CLTelephonyService::getLastKnownSubscriberMcc(int &)
virtual bool CLTelephonyService::getIsRegisteredOnCell()
Registration status: %d
virtual bool CLTelephonyService::getRegistrationStatus(CFStringRef &)
Serving
Neighbor
Monitor
Detected
Invalid
GSMCompact
UMTS
UTRAN
CDMA1x
CDMAEVDO
CDMAHybrid
SCDMA
bool CLTelephonyService::getRadioAccessTechnology(CFStringRef &)
bool CLTelephonyService::getServingOperator(std::string &)
bool CLTelephonyService::getServingProviderFromCarrierBundle(std::string &)
virtual bool CLTelephonyService::getServingMcc(int &)
virtual bool CLTelephonyService::getLastKnownServingMcc(int &)
virtual bool CLTelephonyService::getServingMnc(int &)
virtual bool CLTelephonyService::getServingCellLacCi(int &, int &)
bool CLTelephonyService::getSignalStrength(int &)
bool CLTelephonyService::getActiveCall(bool &)
bool CLTelephonyService::getEmergencyCallStatus(bool &)
enabled = %d success = %d
bool CLTelephonyService::refreshCellMonitor()
Refresh Cell Monitor
CLTelephonyService.NotificationMap
i8@?0
CFStringRef (anonymous namespace)::NotificationMap::notificationFromInt(int)_block_invoke
Request to decode unknown integer is a programmer error
r^{__CFString=}8@?0
virtual void CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLTelephonyService_Type::Notification, NotificationData_T = CLTelephonyService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLTelephonyService_Type::Notification, NotificationData_T = CLTelephonyService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLTelephonyService_Type::Notification, NotificationData_T = CLTelephonyService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLTelephonyService_Type::Notification, NotificationData_T = CLTelephonyService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLTelephonyService_Type::Notification, NotificationData_T = CLTelephonyService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLTelephonyService_Type::Notification, NotificationData_T = CLTelephonyService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::listClients() [Notification_T = CLTelephonyService_Type::Notification, NotificationData_T = CLTelephonyService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
CLWifiServiceSilo
{ScanStats=III[17I]}8@?0
{ScanResult=d{vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}^{AccessPoint}{__compressed_pair<CLWifiService_Type::AccessPoint *, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}}}}8@?0
CLWifiService internal state
WifiServiceLogScanResults
CLWifiService::CLWifiService(id<CLIntersiloUniverse>, std::unique_ptr<IExternal>)
dCOLLECT: fLogWifiScanResults =%d
fWifiDataCollection
dCOLLECT: fWifiDataCollection =%d
WifiBlackListedAp
WIFI: gBlackListedAP = %s
CLWifiService scanning
this->fDispatchQueue != __null
WifiService, ctor, fDpcSource is NULL
WifiMaxAge
WifiPassiveScansOnly
#Warning forcing to use passive WiFi scans only
virtual bool CLWifiService::unregisterForNotificationInternal(const CLWifiService_Type::Notification &)
WRTT: no active listeners
virtual bool CLWifiService::getPower(bool &)
WifiService, getPower, fDpcSource is NULL
bool CLWifiService::queryPowerState(bool &)
WifiService, queryPowerState, fDpcSource is NULL
void CLWifiService::setExitAndEntryScanNetworks(const std::vector<CLWifiService_Type::AccessPoint> &, const std::vector<CLWifiService_Type::AccessPoint> &)
setExitAndEntryScanNetworks, entry, %lu, exit, %lu
void CLWifiService::processTrackingAndPower()
WiFi tracking available now %d (was %d) (%d %d)
Start
Stop
WltNotify, Scanner, %s
scanStats, numOfScan, S1, 
, S2, 
, Fast, 
, Cached, 
, numOfScanErrors, 
, numOfScanBusies, 
, numOfReceivedScans, 
virtual bool CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLWifiService_Type::Notification, NotificationData_T = CLWifiService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLWifiService_Type::RegInfo]
virtual bool CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLWifiService_Type::Notification, NotificationData_T = CLWifiService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLWifiService_Type::RegInfo]
virtual void CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLWifiService_Type::Notification, NotificationData_T = CLWifiService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLWifiService_Type::RegInfo]
void CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLWifiService_Type::Notification, NotificationData_T = CLWifiService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLWifiService_Type::RegInfo]
virtual void CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::removeClient(int) [Notification_T = CLWifiService_Type::Notification, NotificationData_T = CLWifiService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLWifiService_Type::RegInfo]
virtual bool CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::clientRegistered(int, const Notification_T &) [Notification_T = CLWifiService_Type::Notification, NotificationData_T = CLWifiService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLWifiService_Type::RegInfo]
virtual void CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::listClients() [Notification_T = CLWifiService_Type::Notification, NotificationData_T = CLWifiService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLWifiService_Type::RegInfo]
Td,N,V_kvalue
Td,N,V_kvalueTrack
Td,N,V_score
NatalimetryMaxDelay
void CLCalorieController::pause()
pause
void CLCalorieController::resume()
resume
std::vector<CLNatalieData> CLCalorieController::updateCalorimetry(CFAbsoluteTime)
METS consumed,startTime,%.3f,computeTime,%.3f,now,%.3f,activity,%d, userMets,%f,rawUserMets,%f,rawTruthMets,%f,avgTruthMets,%f,basalMets,%f,duration,%lf,stored,%d,%s
#Warning Popping out an activity since there's no activity associated with current time.  This shouldn't happen
float CLCalorieController::sanitizeMets(float, float)
#Warning MET spike,%f,setting to basal,%f
#Warning In-human MET spike,%f,setting to upper bound,%f
com.apple.locationd.Motion
Calorimetry
ActivityAlarm
Motion
Pocket
Orientation
Gesture
EarGesture
WakeGesture
DeviceMotion
Sensors
Compass
Gyro
Accel
Pressure
Fall
Spring
SensorRecorder
MotionSync
MotionAlarm
Odometer
HeartRate
com.apple.locationd.Position
Position
Proximity
GeneralCLX
WifiPosition
GeoFencing
Gnss
Emergency
Raven
MapMatcher
Microlocation
com.apple.locationd.Core
Client
Core
Harvester
Notifier
com.apple.locationd.Utility
Database
Utility
com.apple.locationd.Legacy
Sensor
Fence
int declinationCalc(const float, const float, const float, const float, GeomagneticData *)
could not open geomagnetic data file
geomagnetic data file appears to be empty
geomag() encountered an error
geomg1() encountered an error
9999
%d%d%f%f%f%f
LogMotionStateReplay
CLMotionStateSilo
CLMotionState
DisableMotionStateNotify
CLMotionState::CLMotionState(id<CLIntersiloUniverse>)
DisableMotionStateNotifyDefaultsWrite,%d
void CLMotionState::updateVehicularState()
VEHICULAR: updateVehicularState, wifiAssociated, %d, loi, %d, lowConfLoi, %d, motionHint, %d, gpsHint, %d, basebandHint, %d, wifiHint, %d, btHint, %d
VEHICULAR: start false positive mitigation: wifiAssociated, %d, loi, %d, lowConfLoi, %d, type, %d, motionHint, %d, gpsHint, %d, basebandHint, %d, wifiHint, %d, btHint, %d
VEHICULAR: end false positive mitigation: wifiAssociated, %d, loi, %d, lowConfLoi, %d, type, %d, motionHint, %d, gpsHint, %d, basebandHint, %d, wifiHint, %d, btHint, %d
VEHICULAR: state, %lu, hints, %lu
void CLMotionState::notifyVehicularState()
VEHICULAR: failed notify_register_check, error, %d
VEHICULAR: failed notify_set_state, error, %d
VEHICULAR: successfully updated notification, %@, state, %lu
VEHICULAR: failed notify_post, error, %d
VEHICULAR: successfully posted notification, %@
Mode
VehicularDetection
void CLMotionState::notifyVehicularHints()
VEHICULAR HINTS: failed notify_register_check, error, %d
VEHICULAR HINTS: failed notify_set_state, error, %d
VEHICULAR HINTS: successfully updated notification, %@, state, %lu
virtual bool CLMotionState::registerForNotificationInternal(const CLMotionState_Type::Notification &)
DOMINANT ACTIVITY: start monitoring dominant activity
virtual bool CLMotionState::unregisterForNotificationInternal(const CLMotionState_Type::Notification &)
DOMINANT ACTIVITY: stop monitoring dominant activity
void CLMotionState::onWifiNotification(int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)
VEHICULAR: WiFi dis-associated, update vehicular state
void CLMotionState::onVisit(CLVisit *)
VEHICULAR: visit, confidence, high, exit
VEHICULAR: visit, confidence, high, entry
void CLMotionState::onLowConfidenceVisit(CLVisit *)
VEHICULAR: visit, confidence, low, exit
VEHICULAR: visit, confidence, low, entry
virtual void CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLMotionState_Type::Notification, NotificationData_T = CLMotionState_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLMotionState_Type::Notification, NotificationData_T = CLMotionState_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLMotionState_Type::Notification, NotificationData_T = CLMotionState_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLMotionState_Type::Notification, NotificationData_T = CLMotionState_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLMotionState_Type::Notification, NotificationData_T = CLMotionState_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLMotionState_Type::Notification, NotificationData_T = CLMotionState_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::listClients() [Notification_T = CLMotionState_Type::Notification, NotificationData_T = CLMotionState_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
CLFileUpdate
CLFileUpdate::CLFileUpdate(id<CLIntersiloUniverse>, OnUpdated, void *)_block_invoke
data reachability is not available - not downloading %s
#Warning could not download from %s to %s
void CLFileUpdate::onDownloaded(CLFileDownload *, bool)
***could not rename %{public}s to %{public}s***
download completed to %s
#Warning could not get modified time for %s
data reachability is not available - not retrying %s
retry count %d, will re-download for %s after delay of %f
virtual bool CLFileUpdate::setUpdateSource(const char *, const char *, const CFTimeInterval &)
%{public}s downloading in progress, cannot change update settings
FileUpdate.
.temp
virtual bool CLFileUpdate::setUpdateRate(const CFTimeInterval &, const CFTimeInterval &)
#Warning update rate %.3fs is shorter than WiFi update rate %.3fs - overriding WiFi update rate
virtual int CLDataSourceSerial::processError()
#Warning "%s"
virtual int CLDataSourceSerial::processRead()
could not read from %{public}s (errno 0x%{public}x)
virtual int CLDataSourceSerial::processWrite()
"%s": Failed to write entire buffer! (errno 0x%x) written=%d, processed=%d
virtual int CLDataSourceSerial::open_nl()
failed to open device "%s" with fd %d
virtual int CLDataSourceBuffered::processRead_nl(unsigned int)
"%s": Out of buffer space!
CLGyroCalibrationDatabaseSilo
CLGyroCalibrationDatabase
virtual bool CLGyroCalibrationDatabase::getGyroStats(CLMotionTypeRotationRate &, CLMotionTypeRotationRate &, CLMotionTypeRotationRate &, bool)
Warning: Not implemented.
virtual int CLGyroCalibrationDatabase::getMaxDynamicTemperature()
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Daemon/Positioning/PeerRanging/CLPeerRangingManager.mm
!isIMac
CLPeerRangingManager::CLPeerRangingManager(CLPeerRangingManagerDelegate &, bool, bool, bool, bool)
!isMacPro
WRTT: device type,%{public}d
void CLPeerRangingManager::requestRanging(const CLPeerRangeRequest &)
WRTT: request while wifi is off!
WRTT: mgr received request as initiator, timeout, %{public}lf [s]
WRTT: mgr received request as target
void CLPeerRangingManager::cancelRanging(const CLPeerRangeRequest &)
WRTT: mgr received cancel session
void CLPeerRangingManager::onTimerFired()
WRTT: timed out
void CLPeerRangingManager::onWifiPower(bool)
WRTT: WiFi power %{public}s
NSData *CLPeerRangingManager::findKeyID(const CLMacAddress &)
#Warning Multiple Peers in request with matching mac address, %s
void CLPeerRangingManager::onWifiRangeMeasurements(const std::vector<CLWifiRangeResult> &)
WRTT: RTT measurements for %{public}ld peer(s)
WRTT: unexpected status code %{public}d (%{public}#x)
WRTT: error status code %{public}d (%{public}#x) reported from WiFi, report kCLErrorPrivateRangingLowLevelError
WRTT: unknown status code %{public}d (%{public}#x)
WRTT: no individual measurements in burst
WRTT,range,%f
void CLPeerRangingManager::onWifiError(NSString *, NSInteger, const std::vector<CLRangingPeerInternal> &)
WRTT: recieved Wifi error %{public}ld for %{public}ld peers
errorCode && "Should only be called when we have an error"
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Daemon/Motion/Speed/CLLocationDerivedSpeedEstimator.mm
<Unknown File>
Use -initWithSilo:
Invalid parameter not satisfying: %@
universe
-[CLLocationDerivedSpeedEstimator initInUniverse:]
%s, %d, %s, %d
v12@?0i8
-[CLLocationDerivedSpeedEstimator startWsbClient]
startWsbClient
-[CLLocationDerivedSpeedEstimator stopWsbClient]
stopWsbClient
-[CLLocationDerivedSpeedEstimator updateWsbClient:]
ignore wifi association updates within %f seconds
-[CLLocationDerivedSpeedEstimator _feedLocation:]
leeched location, %s
disqualified leeched location, type, %d
location timestamp out of order
disqualified leeched location based, horizontal accuracy, %f
disqualified leeched location, age, %f
qualified leeched location, type, %d
first qualifying location
renew previous location
previous location, type, %d, %s
distanceMoved, %f, elapsedTime, %f
drop leeched location within %f sec
accept qualified leeched location, type, %d
outlier rejected: conservativeSpeed, %f, effectiveSpeed, %f, speedUncertainty, %f, distanceMoved, %f, elapsedTime, %f, type, %d
vehicular speed detected, consecutive observations, %d, elapsedTime, %f, lastElapsedTime, %f, delta, %f
conservativeSpeed, %f, effectiveSpeed, %f, speedUncertainty, %f, distanceMoved, %f, elapsedTime, %f, type, %d
+[CLLocationDerivedSpeedEstimator vehicularState]
VEHICULAR: failed notify_get_state, error, %d
VEHICULAR: failed notify_cancel, error, %d
-[CLLocationDerivedSpeedEstimator handleMotionStateNotification:]
MotionState, %s, type, %d, conf, %d, mounted, %d, startTime, %f
vehicularStartTime, %f
vehicularLastNoHintsTime, %f
skipping LatencyMetrics, seenNonVehicularState, %d
reset vehicular latency measures
-[CLLocationDerivedSpeedEstimator onWifiServiceNotification:data:]
notification ScanCache received %d
wifi associated state, %d
received unhandled WifiService notification %d
-[CLLocationDerivedSpeedEstimator onMotionStateNotification:data:]
received unhandled notification %d
currentEstimate
T{?=ddd},N,V_currentEstimate
prevLoc
T@"CLLocation",&,N,V_prevLoc
ShowActivityVehicular
ShowActivityVehicularMounted
CLCompanionNotifierSilo
CLCompanionNotifier
CompanionStateSyncInterval
CLDataProtectionManager
v20@?0S8@"NSData"12
iPhone5
iPhone6
iPhone8,4
Watch1
void CLCompanionNotifier::sendCompanionMessage(CLCompanionNotifier_Type::Type, NSData *, IDSMessagePriority, BOOL, BOOL, BOOL, CFTimeInterval) const
Sending message,type,%d,size,%lu,priority,%ld,fireAndForget,%d,encrypt,%d,bypassConnectionCheck,%d,timeout,%f
void CLCompanionNotifier::setStateSyncTimer(bool)
timer interval,%f
void CLCompanionNotifier::connectionUpdate(bool)
IDS connection update,status,%d,prevDisconnection,%f,modelID,%s,uniqueIDOverride,%s,localDeviceID,%s
virtual void CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLCompanionNotifier_Type::Notification, NotificationData_T = CLCompanionNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLCompanionNotifier_Type::RegistrationInfo]
void CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLCompanionNotifier_Type::Notification, NotificationData_T = CLCompanionNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLCompanionNotifier_Type::RegistrationInfo]
virtual void CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::removeClient(int) [Notification_T = CLCompanionNotifier_Type::Notification, NotificationData_T = CLCompanionNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLCompanionNotifier_Type::RegistrationInfo]
virtual bool CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLCompanionNotifier_Type::Notification, NotificationData_T = CLCompanionNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLCompanionNotifier_Type::RegistrationInfo]
virtual bool CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::clientRegistered(int, const Notification_T &) [Notification_T = CLCompanionNotifier_Type::Notification, NotificationData_T = CLCompanionNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLCompanionNotifier_Type::RegistrationInfo]
virtual bool CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLCompanionNotifier_Type::Notification, NotificationData_T = CLCompanionNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLCompanionNotifier_Type::RegistrationInfo]
virtual void CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::listClients() [Notification_T = CLCompanionNotifier_Type::Notification, NotificationData_T = CLCompanionNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLCompanionNotifier_Type::RegistrationInfo]
Counts
ROWID
void CLSqliteDatabase::logStmtStatus(sqlite3_stmt *, bool)
Query: %s, full table scans: %d, sorts: %d, File: %s
TableName
SoftwareVersion
SerialNumber
TableInfo
DatabaseIdentifier
SELECT * FROM DatabaseIdentifier;
INSERT INTO DatabaseIdentifier (uuid) VALUES ("
_encryptedA
_encryptedB
_encryptedC
:memory:
factory
_unencrypted
consolidated
gyroCal
timezone
sensorRecorder
lockCache
table
AUTOINCREMENT
Index
CREATE INDEX 
 ON 
DROP INDEX 
DROP TRIGGER 
IncrementRowCount
DecrementRowCount
Increment
Decrement
INSERT
CREATE TRIGGER IF NOT EXISTS 
RowCount
 AFTER 
 FOR EACH ROW BEGIN
 UPDATE 
1 WHERE rowid=1; END
SELECT COUNT(*) FROM 
 VALUES (
SELECT sql FROM 
sqlite_master
Type
=? AND 
Name
SELECT name FROM 
 WHERE name='
PRAGMA table_info(
_tmp
CREATE TEMPORARY TABLE 
 SELECT 
DROP TABLE 
dstName
CREATE TABLE 
) VALUES (
DROP TABLE IF EXISTS 
INSERT 
OR REPLACE 
INTO 
) VALUES (?
WHERE 
(*fConnectionMutex).__assertOwned()
BEGIN TRANSACTION
END TRANSACTION
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Daemon/Shared/Utilities/CLSqliteDatabase.mm
fTransactionCount == 0
int CLSqliteDatabase::endTransaction()
no database
sqlite3_step()
sqlite3_reset()
com.apple.locationd.CLSqliteDatabase.vacuum
pragma page_count;
pragma freelist_count;
VACUUM
pragma incremental_vacuum(
pragma secure_delete = 1;
pragma secure_delete = 0;
pragma auto_vacuum = 2;
pragma auto_vacuum = 0;
pragma auto_vacuum;
CREATE VIRTUAL TABLE 
 USING 
INTEGER
FLOAT
BLOB
NULL
TEXT
, PRIMARY KEY (
No database
 PRIMARY KEY
 AUTOINCREMENT
!_inTransaction
state_transition
DaemonStatus
init
lifecycle
batteryData
reachability
thermalLevel
airplaneMode
batterySaverModeEnabled
pushServiceConnected
restrictedMode
allStates
_CLDaemonStatusStateTrackerState
T{Battery=dBBiB},N
Ti,N
v16@?0^{CLDaemonStatus=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB@II^{IONotificationPort}^{__CFRunLoopSource}^{IONotificationPort}^{__CFRunLoopSource}^{__SCNetworkReachability}^{__SCDynamicStore}^{__CFRunLoopSource}B^{IONotificationPort}I@{set<long, std::__1::less<long>, std::__1::allocator<long> >={__tree<long, std::__1::less<long>, std::__1::allocator<long> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<long, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<long> >=Q}}}@B@qd@iii}8
CLDaemonStatusSilo
void CLDaemonStatus::airplaneModeChanged()
airplane mode not supported on non-embedded
void CLDaemonStatus::onPowerNotification(io_service_t, natural_t, void *)
system has powered on
#warning No sleep state tranaction on has powered on
system can sleep request
system entering sleep
Already holding sleep state transaction on will sleep
CLDaemonStatus.sleeping
system will power on
system exiting sleep
#warning No sleep state tranaction on will not sleep
void CLDaemonStatus::migrationPerformed()
Notifying clients that migration is being performed
virtual void CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLDaemonStatus_Type::Notification, NotificationData_T = CLDaemonStatus_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLDaemonStatus_Type::Notification, NotificationData_T = CLDaemonStatus_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLDaemonStatus_Type::Notification, NotificationData_T = CLDaemonStatus_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLDaemonStatus_Type::Notification, NotificationData_T = CLDaemonStatus_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLDaemonStatus_Type::Notification, NotificationData_T = CLDaemonStatus_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLDaemonStatus_Type::Notification, NotificationData_T = CLDaemonStatus_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::listClients() [Notification_T = CLDaemonStatus_Type::Notification, NotificationData_T = CLDaemonStatus_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
TypeKey
ConfidenceKey
MountedStateKey
MountedConfidenceKey
StandingKey
TiltKey
TimestampKey
VehicleConnectedKey
ExitStateKey
ExtExitTimeKey
StartTimeKey
RawTypeKey
kRawConfidenceKey
T{CLMotionActivity=iiiiBfdBiddii{?=b1b1b1b1b1}},N,V_activity
MacAddressKey
SsidKey
RssiKey
ChannelKey
AgeKey
ScanTimestampKey
ApplePersonalHotspotKey
ModeKey
macAddress
ssid
rssi
mode
channel
scanTimestamp
isApplePersonalHotspot
TQ,R,N,V_macAddress
T@"NSString",R,C,N,V_ssid
Ti,R,N,V_rssi
Ti,R,N,V_mode
Ti,R,N,V_channel
Td,R,N,V_age
Td,R,N,V_timestamp
TB,R,N,V_isApplePersonalHotspot
void CLCellLocationAWD::saveMetrics(CFAbsoluteTime)
@CellAwd, plistsave, attempts, %{public}d, als, %{public}d, tiles, %{public}d, unknown, %{public}d, alsreq, %{public}d, alscells, %{public}d, nCurrent, %{public}d, kbCurrent, %{public}.1f, nNeighbor, %{public}d, kbNeighbor, %{public}.01f, week, %{public}d, %{public}d, %{public}d, %{public}d, %{public}.1f
void CLCellLocationAWD::loadMetrics(CFAbsoluteTime)
@CellAwd, plist, error, load, %{public}lu
@CellAwd, plist, clear, %{public}.1f, thresh, %{public}.0f, last, %{public}.1f
@CellAwd, plist, error, time, %{public}.1f, now, %.1f
void CLCellLocationAWD::locationAttempt(int, int, int, CFAbsoluteTime)
@CellAwd, attempt, %{public}d, als, %{public}d, tiles, %{public}d, unknown, %{public}d, delta, %{public}.1f
void CLCellLocationAWD::alsReply(int, CFAbsoluteTime)
@CellAwd, als, %{public}d, cells, %{public}d
void CLCellLocationAWD::tileDownloaded(bool, int, CFAbsoluteTime)
@CellAwd, download, isCurrent, %{public}d, size, %{public}d, nCurrent, %{public}d, kbCurrent, %{public}.1f, nNeighbor, %{public}d, kbNeighbor, %{public}.01f
void CLCellLocationAWD::weekLongLogging(const char *, CFAbsoluteTime)
@CellAWD, plist, clear, %{public}.1f, thresh, %{public}.0f, last, %{public}.1f
@CellAwd, snap, %{public}s, attempts, %{public}d, network, %{public}d, tiles, %{public}d, unknown, %{public}d, nAls, %{pubic}d, cellsAls, %{public}d, nCurrent, %{public}d, kbCurrent, %{public}.1f, nNeighbor, %{public}d, kbNeighbor, %{public}.01f, weekly, %{public}d, %{public}d, %{public}d, %{public}d, %{public}.1f, hours, %{public}d
CellLocationAwd
NatalimetryUserInfoAge
NatalimetryUserInfoHeightM
NatalimetryUserInfoWeightKG
NatalimetryUserInfoGender
NatalimetryUserInfoHrmin
NatalimetryUserInfoHrmax
NatalimetryUserInfoPal
NatalimetryUserInfoVo2max
NatalimetryUserInfoRunVo2max
NatalimetryUserCondition
static float CLNatalieModelInput::computeDerivedVo2max(const CLBodyMetrics)
Derived Vo2max, %.1f, Revised Vo2max, %.1f, Minimum Vo2max, %.1f 
static float CLNatalieModelInput::estimateHRmin(const CLBodyMetrics &)
Estimated HRmin, %.1f 
void CLNatalieModelInput::setTime(CFAbsoluteTime)
ModelInput, Larger than expected gap between begin and end ts.  Setting end ts to some sane default. (%f, %f)
ModelInput, Event time, %.2f, GPS sample time, %.2f, distance, %.2f, speed, %.2f, altitude, %.2f
Act Dur(s), %.2f, Step Dur(s), %.2f, Step Counts, %d, Step Begin, %.2f, Step End, %.2f, distance, %.2f, Speed, %.2f, Grade type, %d, vertical speed, %.2f, HR, %f, coarse elevation, %d
void CLNatalieModelInput::updateBodyMetrics(const CLBodyMetrics &)
ModelInput,gender,%d,height,%f,weight,%f,vo2max,%f,age,%f,hrmin,%f,hrmax,%f,hronset,%f,pal,%f,condition,%d,runVo2max,%f
$GPGGA
$GPGSA
$GPGSV
$GPRMC
$PASCD
$PAGCD
$GPHDT
CLNmeaSentenceType CLNmeaParserParseSCD(CLNmeaData *, const char *, int)
STARK,PASCD,invalid fields
STARK,PASCD,invalid timestamp
STARK,PASCD,invalid sensorType
STARK,PASCD,invalid transmissionState
STARK,PASCD,invalid sampleCount
STARK,PASCD,sampleCount==0
#Warning STARK,PASCD,invalid sampleCount,%d,max,%d
STARK,PASCD,unexpected empty timeOffset field
STARK,PASCD,unexpected empty sample field
CLNmeaSentenceType CLNmeaParserParseGCD(CLNmeaData *, const char *, int)
STARK,PAGCD,invalid fields
STARK,PAGCD,invalid timestamp
STARK,PAGCD,invalid sampleCount
STARK,PAGCD,invalid sampleCount,%d,max,%d
STARK,PAGCD,invalid sample time offset
STARK,PAGCD,invalid sample set, all empty
CLNmeaSentenceType CLNmeaParserParseHDT(CLNmeaData *, const char *, int)
STARK,GPHDT,invalid fields
STARK,GPHDT,invalid heading
STARK,GPHDT,invalid degrees true indication
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Framework/CoreMotion/CMSwimData.mm
sourceId && sessionId && startDate && endDate && strokeType < kCMSwimStrokeTypeMax
kCMSwimDataCodingKeyRecordId
kCMSwimDataCodingKeySourceId
kCMSwimDataCodingKeySessionId
kCMSwimDataCodingKeyStartDate
kCMSwimDataCodingKeyEndDate
kCMSwimDataCodingKeyStrokeCount
kCMSwimDataCodingKeyDistance
kCMSwimDataCodingKeyAvgPace
kCMSwimDataCodingKeyLapCount
kCMSwimDataCodingKeyStrokeType
kCMSwimDataCodingKeySegmentCount
Freestyle
Backstroke
Breaststroke
Butterfly
Mixed
%@, <sessionId %@, startDate %@, endDate %@, strokeCount %lu, distance %.2f, avgPace %.2f, lapCount %lu, strokeType %@, segment %lu>
strokeCount
avgPace
lapCount
strokeType
segment
HARMAN
MIB2
CLU4_MMX2_VW
CLU4_MMX2_SK
CLU4_MMX2_SE
+[CLAccessoryObserverHelper isBlackListedAccessory:name:model:serialNumber:firmware:hardwareRevision:]
Rejecting blacklisted accessory: HARMAN
VOLKSWAGEN AG
MIB STD
1.0.0
EP.2015.1
Rejecting blacklisted accessory: Volkswagen AG, 1.0.0
SKODA AUTO a.s.
SEAT S.A.
2.0.0
Rejecting blacklisted accessory: Volkswagen AG, 2.0.0
BENTLEY
AISIN
CLU5_
Rejecting blacklisted accessory: BENTLEY
https://gs-loc.apple.com/clls/wloc
-[ALSLocationDelegate requester:didReceiveResponse:forRequest:]
AlsRequester, didReceiveResponse, tag, %d, RTT, %.3fs, gsmCells, %lu, cdmaCells, %lu, lteCells, %lu, scdmaCells, %lu, wifis, %lu
@AlsFlow, reply, tag, %{public}d, wifi, RTT, %{public}.1fs, watch, %{public}d, aps, %{public}lu
@AlsFlow, reply, tag, %{public}d, cell, RTT, %{public}.1fs, watch, %{public}d, gsm, %{public}lu, lte, %{public}lu, cdma, %{public}lu, scdma, %{public}lu
-[ALSLocationDelegate requester:didReceiveResponse:forRequest:]_block_invoke
AlsCdma, rx, %{public}lu
AlsCdma, %{public}d, unknown, %{private}s
AlsCdma, %{public}d, valid, %{private}s, location, %{private}s
AlsLte, rx, %{public}lu
AlsLte, %{public}d, unknown, %{private}s
AlsLte, %{public}d, valid, %{private}s, location, %{private}s
AlsGsm, unbatched, %{public}lu
AlsWifi, unbatched, %{public}lu
-[ALSLocationDelegate requesterDidFinish:]
Unknown pbrequester object received in delegate callback
AlsRequester, didFinish, payload, %lu, outstanding, %ld
-[ALSLocationDelegate requester:didFailWithError:]
#Warning query: response_error, domain %s code %ld
nearby
@AlsFlow, reply, tag, %{public}d, error, RTT, %{public}.1lfs, watch, %{public}d, desc, %{public}s, %{public}ld, type, %{public}s
query: received error for unknown requester type (tag %{public}d)
AlsRequester, didFailWithError, code, %s, outstanding, %ld
-[ALSLocationDelegate finished:]
AlsRequester, finished, outstanding, %ld
-[ALSLocationDelegate processCells:inRange:timeReceived:requestType:tag:]
AlsGsm, rx, %{public}lu
-[ALSLocationDelegate processCells:inRange:timeReceived:requestType:tag:]_block_invoke
AlsGsm, %{public}lu, unknown, %{private}s
AlsGsm, %{public}lu, valid, %{private}s, location, %{private}s
-[ALSLocationDelegate processScdmaCells:inRange:timeReceived:requestType:tag:]
AlsScdma, rx, %{public}lu
-[ALSLocationDelegate processScdmaCells:inRange:timeReceived:requestType:tag:]_block_invoke
AlsScdma, %{public}lu, unknown, %{private}s
AlsScdma, %{public}lu, valid, %{private}s, location, %{private}s
-[ALSLocationDelegate processWireless:inRange:timeReceived:requestType:tag:]
AlsWifi, rx, %{public}lu
AlsWifi, unknown, %{private}s, %{public}lu, hasInfoMask, %{public}d, infoMask, 0x%{public}x
AlsWifi, valid, location, %{private}s, %{public}lu, %{private}s, score, %{public}d, channel, %{public}d, alt, %{public}.2lf, reach, %{public}d, hasInfoMask, %{public}d, infoMask, 0x%{public}x, type, %{public}d
AppleLocationServer
AppleLocationServerTimeout
AppleLocationServerRequestLog
AppleLocationServerResponseLog
CLNetworkLocationRequesterALS::CLNetworkLocationRequesterALS(const CLNetworkLocationRequester::Listener &, id<CLIntersiloUniverse>)
AlsInit, server, %{private}s, timeout, %{public}d, log request/response, %{public}d, %{public}d
virtual int CLNetworkLocationRequesterALS::queryLocation(const CLDaemonLocation &, int, CLTelephonyService_Type::RadioAccessTechnology)
query: queryLocation, location, %14.8lf, %14.8lf, timeout, %d
CLAppleLocationServer
query: queryLocation, tag, %d, location, %14.8lf, %14.8lf, timeout, %d, payload, %lu, reachability, %d
@AlsFlow, request, tag, %{public}d, location, %{private}0.2lf, %{private}0.2lf, server, %{private}s, reach, %{public}d, watch, %{public}d
virtual int CLNetworkLocationRequesterALS::unifiedQuery(const std::vector<CLTelephonyService_Type::Cell> &, const std::vector<CLTelephonyService_Type::ScdmaCell> &, const std::vector<CLTelephonyService_Type::CdmaCell> &, const std::vector<CLTelephonyService_Type::LteCell> &, const std::vector<CLMacAddress> &, int)
AlsCell, query, cdma, %{public}lu, gsm, %{public}lu, scdma, %{public}lu, lte, %{public}lu, max, %{public}d
#Warning query: don't have derivedMcc - using %d
query: Adding single derivedMcc %d
query: Adding multi derivedMcc %d
AlsCdma, query, %{public}d, key, %{private}s
AlsCdma, dropping, %{public}u, key, %{private}s, #CloneMe
AlsGsm, query, %{public}d, key, %{private}s
AlsGsm, dropping, %{public}u, key, %{private}s, #CloneMe
AlsScdma, query, %{public}d, key, %{private}s
AlsScdma, dropping, %{public}u, key, %{private}s, #CloneMe
AlsLte, query, %{public}d, key, %{private}s
AlsLte, dropping, %{public}u, key, %{private}s, #CloneMe
AlsWifi, tx, %{public}lu, max, %{public}d
AlsWifi, query, %{private}s, %{public}d
AlsWifi, dropping, %{private}s, %{public}u, #CloneMe
@AlsFlow, server, %{private}s, tag, %{public}d, reach, %{public}d, watch, %{public}d
@AlsFlow, request, tag, %{public}d, wifi, %{public}lu, surrounding, %{public}lu
@AlsFlow, request, tag, %{public}d, cell, gsm, %{public}lu, lte, %{public}lu, cdma, %{public}lu, surrounding, %{public}lu
fListener.silo
virtual int CLNetworkLocationRequester::unifiedQuery(const std::vector<CLTelephonyService_Type::Cell> &, const std::vector<CLTelephonyService_Type::ScdmaCell> &, const std::vector<CLTelephonyService_Type::CdmaCell> &, const std::vector<CLTelephonyService_Type::LteCell> &, const std::vector<CLMacAddress> &, int)
Unimplemented CDMA NetworkLocationRequester
virtual int CLNetworkLocationRequester::queryLocation(const CLDaemonLocation &, int, CLTelephonyService_Type::RadioAccessTechnology)
nearby data query not supported
Band Class 
BSID 
RAT 
CellType 
Channel 
MCC 
MNC 
NID 
PN offset 
SID 
Zone ID 
Sector ID 
ltmOffset 
dayLightSaving 
derivedMccNum 
derivedMCC 
%03d,%03d,0x%x,0x%x
static void CLLocationCalculator::calculateWifiCentroidRssiMaxreach(const std::vector<CLWifiAPLocation> &, unsigned int, unsigned int, unsigned int, double, unsigned int &, unsigned int &, const CLDaemonLocation &, CLDaemonLocation &, CFAbsoluteTime, double)
#Warning WIFI_LOC: filtered by location hint, ap, %s, hint, %s
#Warning WIFI_LOC: revert hint, %lu, %lu
WIFI_LOC: apply b360repr, min, %.1lf, max, %.1lf
WIFI_LOC: apply b360repr, %14.8lf, %14.8lf
Altitude
VerticalAccuracy
Course
Confidence
Score
Reach
Boxes
ClearDatabaseTablesByAge
void CLLocationDatabase::prepareStatements()
#Warning Overriding clear tables by age to %d for %s
 WHERE rowid=
bool CLLocationDatabase::getLocation(const sqlite3_int64 &, CLDaemonLocation &) const
could not bind
bool CLLocationDatabase::resetBoundingBoxes()
Bounding boxes not enabled for this database
Resetting bounding box for row %lld, i, %u / %d, in, %s
bool CLLocationDatabase::setBoundingBox(const sqlite3_int64 &, const CLDaemonLocation &)
Couldn't bind row ID %{public}lld
can't create bounding box for location, %s
) VALUES (?, ?, ?, ?, ?)
Couldn't bind bounding box %lld (<%+.8f,%+.8f>,<%+.8f,%+.8f>)
could not bind %.3f <%+.8f,%+.8f> %.2f
UPDATE OR REPLACE 
=?, 
bool CLLocationDatabase::setLocation(const sqlite3_int64 &, const CLDaemonLocation &)
Could not prepare cached update statement
failed to setLocation, numModRows, %d, %s
bool CLLocationDatabase::clearLocation(const sqlite3_int64 &)
Can't clear location for read-only database
could not bind %{public}lld
static void CLLocationDatabase::clearLocations(CLSqliteDatabase &, const CLSqliteDatabase::SqliteProperties &, const std::string &, bool)
Can't clear locations in read-only database
static void CLLocationDatabase::clearLocationsByAge(const CFTimeInterval &, CLSqliteDatabase &, const CLSqliteDatabase::SqliteProperties &, const std::string &)
Can't clear locations by age in read-only database
 < ? OR 
 > ?
Clearing locations older than %.3f from %s
%lld total entries deleted
Performing incremental vacuum on %s
void CLLocationDatabase::prepareBoundingBoxTable()
No associated bounding box table
DeleteBoundingBoxes
rtree
 AFTER DELETE ON 
 DELETE FROM 
= OLD.
; END
Couldn't create bounding box deletion trigger for table %{public}s
VO2MaxHistory
DELETE FROM VO2MaxHistory WHERE startTime < ?
SELECT * from VO2MaxHistory ORDER BY id ASC
SELECT COUNT(*) FROM VO2MaxHistory
DELETE FROM VO2MaxHistory
DELETE FROM VO2MaxHistory WHERE startTime > ?
UPDATE VO2MaxHistory SET startTime = startTime + ?
INSERT INTO VO2MaxHistory (startTime, workoutType, estimatedVo2Max, durationInSeconds, hrMax, hrMin) VALUES (?, ?, ?, ?, ?, ?)
SELECT * FROM VO2MaxHistory ORDER BY startTime DESC LIMIT 1
estimatedVo2Max
durationInSeconds
hrMax
hrMin
CLActivityRecorderDb<VO2MaxOutput, CLActivityDB::NoDataProtectionPolicy>::CLActivityRecorderDb(const char *, bool, float, const std::string, const CLSqliteDatabase::SqlitePropertyPersistence) [T = VO2MaxOutput, DataProtectionPolicy = CLActivityDB::NoDataProtectionPolicy]
bool CLActivityRecorderDb<VO2MaxOutput, CLActivityDB::NoDataProtectionPolicy>::setDatabaseAccessible() [T = VO2MaxOutput, DataProtectionPolicy = CLActivityDB::NoDataProtectionPolicy]
bool CLActivityRecorderDb<VO2MaxOutput, CLActivityDB::NoDataProtectionPolicy>::isValidTime(CFAbsoluteTime &) const [T = VO2MaxOutput, DataProtectionPolicy = CLActivityDB::NoDataProtectionPolicy]
virtual void CLActivityRecorderDb<VO2MaxOutput, CLActivityDB::NoDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, bool) [T = VO2MaxOutput, DataProtectionPolicy = CLActivityDB::NoDataProtectionPolicy]
%s, %s, %s, %d, %s, %f, %s, %f
suggestedCount
lastSuggestedTimestamp
lastConsideredTimestamp
SuggestedAction
void CLSuggestedActionDatabase::initDatabase()
initalizing database table, %s
INSERT OR REPLACE INTO %s (%s) VALUES (%s)
SELECT * FROM %s WHERE %s == ?
SELECT * FROM %s
DELETE FROM %s
DELETE FROM %s WHERE %s <= ?
ResultCode CLSuggestedActionDatabase::setRecord(const CLSuggestedActionRecord &)
issue getting scoped statement
set suggested action, %s
ResultCode CLSuggestedActionDatabase::getRecord(std::string, CLSuggestedActionRecord &)
cannot get record of suggested action without identifier
ResultCode CLSuggestedActionDatabase::deleteAllRecordsNotConsideredSince(CFAbsoluteTime)
delete all suggested actions not considered since, %f
CMGyroBiasEstimator::CMGyroBiasEstimator()
CMGyroBiasEstimator::CMGyroBiasEstimator: cold start
CMGyroBiasEstimator::CMGyroBiasEstimator: dbias.x,%.2e,.y,%.2e,.z,%.2e,P.x,%.2e,.y,%.2e,.z,%.2e
void CMGyroBiasEstimator::reset(const uint64_t)
CMGyroBiasEstimator::reset: cold start
CMGyroBiasEstimator::reset: warm start [%f < %f]
CMGyroBiasEstimator::reset: dbias.x,%.2e,.y,%.2e,.z,%.2e,P.x,%.2e,.y,%.2e,.z,%.2e
virtual void CMGyroBiasEstimator::biasFitReset()
CMGyroBiasEstimator::CMGyroBiasEstimator: biasFitReset
void CMGyroBiasEstimator::notifyClients(uint64_t)
CMGyroBiasEstimator::feedGyro: converged!
CLTimeZoneDatabase
bool CLTimeZoneDatabase::getTimeZoneAndDistance(const CLDaemonLocation &, std::string &, double &)
Couldn't get time zone for point <%+.8f,%+.8f>
Point <%+.8f,%+.8f> not in any time zone polygon; closest polygon is %f meters away; default time zone is %s, but we're not using it
Not in any polygons; falling back to closest nearby time zone ID %lld (distance %f, %ld possibilities)
Point <%+.8f,%+.8f> not in any time zone polygon; default time zone is %s, but we're not using it
#Warning Point <%+.8f,%+.8f> in multiple time zone polygons
Could not get time zone name for zone ID %{public}lld
BoundingBoxes
MinimumLatitude
MaximumLatitude
MinimumLongitude
MaximumLongitude
Names
ZoneName
Points
ZoneID
PointID
properties.readOnly
bool CLPolygonDatabase::polygonsAndDistancesForPointWithUncertainty(const double &, const double &, const double &, std::vector<std::pair<sqlite3_int64, double> > &, const bool &)
Couldn't get list of candidates for point <%+.8f,%+.8f>
Couldn't determine if point <%+.8f,%+.8f> is in polygon %lld
bool CLPolygonDatabase::polygonCandidatesForPointWithUncertainty(const double &, const double &, const double &, std::vector<sqlite3_int64> &)
Getting polygons for point <%+.8f,%+.8f> acc %.2f
#Warning fBoundingBoxesSelectNearbyStatement not available - rtree module missing or db unavailable
#Warning Ignoring bogus location <%+.8f,%+.8f>
Could not bind <%+.8f,%+.8f> - <%+.8f,%+.8f>
bool CLPolygonDatabase::getPolygonName(const sqlite3_int64 &, std::string &)
#Warning fNamesSelectStatement not available - rtree module missing or db unavailable
Could not bind %{public}lld
Could not get polygon name
#Warning No entry in names table for polygon ID %lld
bool CLPolygonDatabase::getPolygonId(const std::string &, sqlite3_int64 &)
#Warning fNamesSelectOnNameStatement not available - rtree module missing or db unavailable
#Warning Could not bind %s
#Warning Polygon %s not found in names table
bool CLPolygonDatabase::pointInPolygon(const std::string &, const double &, const double &, bool &, double &)
#Warning No bounding box found for polygon %s
bool CLPolygonDatabase::pointInPolygon(const sqlite3_int64 &, const double, const double, bool &, double &)
#Warning fPointsSelectStatement not available - rtree module missing or db unavailable
#Warning Could not bind %lld
#Warning No points data found for polygon Id %lld
<=? AND 
virtual CLMetsInfo CLNatalieDummyModel::computeMETS(const CLNatalieModelInput &)
Dummy, Static, step count: %d, step distance: %f, activity: %d, type: %d, vm: %f
CLTimeManagerSilo
Sending along GPS time %.2f to CoreTime
void CLTimeManager::setGpsTime(uint64_t)
virtual void CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLTimeManager_Type::Notification, NotificationData_T = CLTimeManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLTimeManager_Type::Notification, NotificationData_T = CLTimeManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLTimeManager_Type::Notification, NotificationData_T = CLTimeManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLTimeManager_Type::Notification, NotificationData_T = CLTimeManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLTimeManager_Type::Notification, NotificationData_T = CLTimeManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLTimeManager_Type::Notification, NotificationData_T = CLTimeManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::listClients() [Notification_T = CLTimeManager_Type::Notification, NotificationData_T = CLTimeManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
CLLocationControllerSilo
controller
CLLocationController::CLLocationController(id<CLIntersiloUniverse>)
buildCFAbsoluteTime,%{public}.0f
RescalePipelinedRadiusForComparisonOnly
DynamicLocationProviders
ForcedHorizontalAccuracy
DisableIntegrityMonitoring
Integrity Monitoring is Disabled
GpsWifiKeepAlive
GpsWifiKeepAlive is no longer supported! If you want to leave all providers actively subscribed to, set DynamicLocationProviders to false
UseLocationKFAsDefaultProvider
UseLocationKFAsDefaultProvider is set
EnableMapMatching
CLMM,EnableMapMatching,%{public}d
ForceMapMatching
CLMM,ForceMapMatching,%{public}d
GpsConformanceTestMode
Warning: Conformance mode is enabled, this disables client based GPS applications.
GPS Conformance Mode
NotifyAllLocations
dynamic location providers,%{public}d,accuracy,%{public}.2f,gps test mode,%{public}d,always notify,%{public}d
location derived speed estimator enabled,%{public}d
could not create tech status run loop source
could not create check active run loop source
CLLC
virtual bool CLLocationController::registerForNotification(int, const CLLocationProvider_Type::Notification &)
virtual bool CLLocationController::registerForNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::RegInfo &)
virtual bool CLLocationController::unregisterForNotification(int, const CLLocationProvider_Type::Notification &)
virtual bool CLLocationController::registerForNotificationInternal(const CLLocationProvider_Type::Notification &)
CLIENT:registerForNotificationInternal,notification,%{public}d,%{public}s,granularity,%{public}d
Before register,required granularity,%{public}d,active granularity,%{public}d
BATCH:unsupported platform
CLMM,RunMapMatching is turned on
registering notification,%{public}d,location provider,%{public}s
wifi location batch,unsupported platform
CLIENT:registerForNotificationInternal,propagate,desiredAccuracy,%{public}.1lf,name,%{public}s,active,%{public}d,operating mode,%{public}d
virtual bool CLLocationController::unregisterForNotificationInternal(const CLLocationProvider_Type::Notification &)
CLIENT:unregisterForNotificationInternal,notification,%{public}d,%{public}s,granularity,%{public}d
Unregistered for notification,%{public}d,new required location granularity,%{public}d
After unregister,required granularity,%{public}d,active granularity,%{public}d
CLMM,RunMapMatching is turned off
unregistering notification,%{public}d,with,location provider,%{public}s
CLIENT:unregisterForNotificationInternal,propagate,desiredAccuracy,%{public}.1lf,name,%{public}s,active,%{public}d
void CLLocationController::onStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)
Device going to sleep,stop location unavailable timer
Device wake setting location unavailable timer to fire at %{public}.3f
#Warning,Unhandled status notification,%{public}u
void CLLocationController::onWifiServiceNotification(int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)
void CLLocationController::onDataProtectionNotification(int, const CLDataProtectionManager_Type::Notification &, const CLDataProtectionManager_Type::NotificationData &)
Local
virtual void CLLocationController::start()
@ClxVersion, Init, os, %{public}s, model, %{public}s, build, %{public}s, triage, %{public}d
CLWifiLocationProvider
v16@?0^{CLSimulatedLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBBBB}8
CLUnifiedCellLocationProvider
CLNmeaLocationProvider
v16@?0^{CLAccessoryLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBBBB{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocationPrivate=dddddfffBi{?=dd}diiB{?=dd}if{?=dd}ddiBddddddB}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}^{__CFRunLoopTimer}{CLAccessoryHeadingCorrector=iddddd}{CLFileUpdate=^^?{BasicMutex=^^?^{MutexInfo}}@^?^v{unique_ptr<CLFileDownload, std::__1::default_delete<CLFileDownload> >={__compressed_pair<CLFileDownload *, std::__1::default_delete<CLFileDownload> >=^{CLFileDownload}}}@iddddddB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}B}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{CLNmeaScreener=BB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}dd{CLDistanceCalc=ddddd}{ExternalLocationData=dddddd}{ExternalLocationData=dddddd}{ExternalLocationData=dddddd}{ExternalLocationData=dddddd}}{unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client> >={__compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> >=^{Client}}}{unique_ptr<CLTimeManager_Type::Client, std::__1::default_delete<CLTimeManager_Type::Client> >={__compressed_pair<CLTimeManager_Type::Client *, std::__1::default_delete<CLTimeManager_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}@BBB{GgaRmcInfo=iB}dddiB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}BBBBB}8
CLAccessoryLocationProvider
CLSimulatedLocationProvider
virtual void CLLocationController::shutdown()
shutting down %{public}s location provider
void CLLocationController::startLocation(const CLLocationController::Granularity &)
Starting all location providers up to threshold,%{public}d,desiredAccuracy,%{public}.1lf
@ClxProvider, start, %{private}s, granularity, %{public}d, active, %{public}d, desiredAccuracy, %{public}.1f
Not starting location provider,%{public}s,fRequiredLocationGranularity,%{public}d,fActiveLocationGranularity,%{public}d
void CLLocationController::stopLocation(const CLLocationController::Granularity &)
Stopping all location providers above threshold %{public}d
@ClxProvider, stop, %{private}s, granularity, %{public}d, active, %{public}d, desiredAccuracy, %{public}.1f
void CLLocationController::stopLessDesirableProviders(const CLLocationController::DynamicLocationProvider &, bool)
Stopping all location providers that are worse than kDynamicLocationProvider %{public}d
got better location provider,%{public}d,NOT stopping worse location provider,%{public}d,isAccessorySpecialCase,1
got better location provider,%{public}d,stopping worse location provider,%{public}d
void CLLocationController::restartLessDesirableProviders(const CLLocationController::DynamicLocationProvider &)
lost location from kDynamicLocationProvider,%{public}d,restarting all worse providers
restarting worse location provider kDynamicLocationProvider,%{public}d
void CLLocationController::startLocation(CLLocationController::LocationProvider, const CLLocationController::Granularity &)
#Warning,startLocation when provider is None
CLIENT:startLocation,registerForNotification,start reg info,client,%{public}p,desiredAccuracy,%{public}.1lf,name,%{public}s
registering location provider,%{public}s,as a bystander only
starting location provider,%{public}s,in mode,%{public}d
void CLLocationController::stopLocation(CLLocationController::LocationProvider)
#Warning,stopLocation when provider is None
Unregistering %s location provider as bystander
stopping location provider,%{public}s
void CLLocationController::onLocationUnavailableTimer(CFRunLoopTimerRef)
catch-all location unavailable timer fired
Location unavailable timer fired,required granularity is none,ignoring
#Warning,Location unavailable fired while sleeping
bool CLLocationController::notifyLocationUnavailable(CLLocationController::LocationProvider)
could not find provider from list
Got location unavailable notification for non-active provider,%{public}s,ignoring
Got location unavailable notification for location provider,%{public}s
provider,%{public}s,still available,lat,%{private}.7lf,lon,%{private}.7lf,lifespan,%{public}.1lf,age,%{public}.3fs
No location is available from any provider,notifying clients
bool CLLocationController::shouldNotify(CFAbsoluteTime, CLLocationController::LocationProvider, const CLLocationProvider_Type::NotificationData &)
#Warning,shouldNotify when provider is None
Got,lat,%{private}.7f,lon,%{private}.7f,for non-active location provider,%{public}s,ignoring
#Warning,Got future,lat,%{private}.7f,lon,%{private}.7f,from provider,%{public}s,age,%{public}.3fs,correcting to,%{public}.3fs
expiredLocation,provider,%{public}s,lat,%{private}.7lf,lon,%{private}.7lf,age,%{public}.3fs,lifespan,%{public}.1fs
current most confident provider,%{public}s,conf,%{public}d
#Warning,new,%{public}s,lat,%{private}.7lf,lon,%{private}.7lf,hunc,%{public}.2f,conf,%{public}d,conflicts with confident,%{public}s,lat,%{private}.7lf,lon,%{private}.7lf,hunc,%{public}.2f,conf,%{public}d,age,%{public}.3f,distance,%{public}.2f,discarding
#Warning,new,%{public}s,lat,%{private}.7lf,lon,%{private}.7lf,hunc,%{public}.2f,conf,%{public}d,conflicts with current,%{public}s lat,%{private}.7lf,lon,%{private}.7lf,hunc,%{public}.2f,conf,%{public}d,distance,%{public}.2f,notifying
new,%s,lat,%{private}.7lf,lon,%{private}.7lf,hunc,%{public}.2f,conf,%{public}d,coarser and agrees with current,%{public}s, lat,%{private}.7lf,lon,%{private}.7lf,hunc,%{public}.2f,conf,%{public}d,distance,%{public}.2f,discarding
#Warning,new,%s,lat,%{private}.7lf,lon,%{private}.7lf,hunc,%{public}.2f,conf,%{public}d,conflicts with current,%{public}s,lat,%{private}.7lf,lon,%{private}.7lf,hunc,%{public}.2f,conf,%{public}d,distance,%{public}.2f,discarding
new,%s,lat,%{private}.7lf,lon,%{private}.7lf,hunc,%{public}.2f,conf,%{public}d,coarser than current,%{public}s,lat,%{private}.7lf,lon,%{private}.7lf,hunc,%{public}.2f,conf,%{public}d,distance,%{public}.2f,discarding
got accessory,stopping everything less preferred,isShifted,%{public}d,isPropagatedSolution,%{public}d
(none)
changing to provider,%{public}s,from,%{public}s
bool CLLocationController::notifyLocation(CLLocationController::LocationProvider, const CLLocationProvider_Type::NotificationData &)
location rejected by IM,locationType,%{public}d,lat,%{private}.7lf,lon,%{private}.7lf
CL-filtered
Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Type,%d,%s,Speed,%.2f,Course,%.2f,Confidence,%d,Lifespan,%.3f,LocationTimestamp,%.3f,Age,%.3f,Altitude,%.1f,AltitudeAccuracy,%.1f,SpeedAccuracy,%.3f,CourseAccuracy,%.1f,timestampGps,%.3lf,integrity,%d
location rejected by KF,%{public}d,lat,%{private}.7lf,lon,%{private}.7lf
Notifying using location KF,but no location available
CL-mapmatched
@ClxClient, Fix, 1, ll, %{private}.7f, %{private}.7f, acc, %{public}.2f, speed, %{private}.1f, course, %{private}.1f, type, %{public}d
void CLLocationController::publishPropagatedCoordinates(int, CLLocationProvider_Type::NotificationData &)
%{public}.1lf,DeadReckoning,%{public}s,%{public}.2lf,Propagating solution,lastGPSTime,%{public}.2lf,lastAccessoryTime,%{public}.2lf
virtual void CLLocationController::notifyClientsWithData(const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &, bool, int, bool)
Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Type,%d,%s,Speed,%.2f,Course,%.2f,Confidence,%d,Lifespan,%.3f,Altitude,%.1f,AltitudeAccuracy,%.1f,LocationTimestamp,%.3f,Age,%.3f,timestampGps,%.3lf,floor,%d,SpeedAccuracy,%.3lf,CourseAccuracy,%.1lf,integrity,%d,rawLat,%.7lf,rawLon,%.7lf,rawCourse,%.2f,refFrame,%d,rawRefFrame,%d,propagated,%d
#Warning,Notifying clients of an already-expired location,age,%{public}.3f
void CLLocationController::gpsOdometerHelper(const CLLocationProvider_Type::NotificationData &)
GPSODOM,timestamp,%{public}.3lf,timestampGps,%{public}.3lf,odometer,%{public}.3lf,deltaDist,%{public}.3lf,deltaDistUnc,%{public}.3lf,lat,%{private}.7lf,lon,%{private}.7lf,hunc,%{public}.1lf,alt,%{private}.3lf,vunc,%{public}.1lf,speed,%{public}.3lf,sunc,%{public}.3lf,course,%{public}.3lf,cunc,%{public}.3lf
CL-unfiltered
void CLLocationController::notifyUnfilteredLocation(const CLLocationProvider_Type::NotificationData &)
void CLLocationController::onAccessoryNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)
Accessory,propagated on-device GPS,lat,%{private}.7lf,lon,%{private}.7lf,hunc,%{public}.1lf
bool CLLocationController::getActiveTechs(std::set<int> &)
GPSController indicates hardware active while client is not active
virtual void CLLocationController::setSimulationEnabled(bool)
Setting simulation to %{public}d for all location providers
void CLLocationController::sendTechStatusNotification()
Posting tech status change notification
void CLLocationController::checkActiveProviders()
Notifying clients of providers active update to %{public}d
void CLLocationController::clearAllLocationData()
#Warning,Clearing all location data from the controller
void CLLocationController::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)
#Warning,Location Services reset,clearing local cache
@ClxNotify, LpReset, 0
#Warning,Location Services state changed,clearing local cache
float CLLocationController::getDesiredAccuracy()
CLIENT:hasClients,%{public}d,hasFineClients,%{public}d,hasCoarseClients,%{public}d,desiredAccuracy,%{public}.1lf
void CLLocationController::handleStateEvent(NegativeEvent, bool)
@ClxEvent, %{public}s, %{public}d, last, %{public}.1f
void CLLocationController::checkStateLogging()
@ClxVersion, Timer, os, %{public}s, model, %{public}s, build, %{public}s, triage, %{public}d
@ClxSnapshot, %{public}s, %{public}d, last, %{public}.1f
LOCATION
WifiOff
ApSleep
Locked
NoReach
Unassociated
Airplane
ToggleOff
BatterySaver
BtOff
BtDisconnect
CGApart
Attempt to write value multiple times
value
map::at:  key not found
CLWifiLocationProviderSilo
float CLWifiLocationProvider::getCombinedDesiredAccuracy() const
no location clients, desiredAccuracy, %f
virtual bool CLWifiLocationProvider::registerForNotificationInternal(const CLLocationProvider_Type::Notification &)
@WifiLogic, entry, register, notification, %{public}s, desiredAccuracy, %{public}.1lf
virtual bool CLWifiLocationProvider::unregisterForNotificationInternal(const CLLocationProvider_Type::Notification &)
@WifiLogic, entry, unregister, notification, %{public}s
void CLWifiLocationProvider::onWifiTimer(CFRunLoopTimerRef)
@WifiLogic, entry, timer
bool CLWifiLocationProvider::requestLocationUpdateInternal(const CLWifiLocationUpdateRequest &, CLWifiLocationUpdateRequest::Source)
@WifiLogic, entry, requestLocationUpdate, %{public}s, source, %{public}d
void CLWifiLocationProvider::onWifiNotification(int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)
@WifiLogic, entry, wifiNotify, %{public}s
void CLWifiLocationProvider::onMotionNotification(int, const CLMotionState_Type::Notification &, const CLMotionState_Type::NotificationData &)
@WifiLogic, entry, motion
void CLWifiLocationProvider::onSignalEnvironmentNotification(int, const CLSignalEnvironmentProvider_Type::Notification &, const CLSignalEnvironmentProvider_Type::NotificationData &)
@WifiLogic, entry, signalEnvironment
void CLWifiLocationProvider::onDataProtectionNotification(int, const CLDataProtectionManager_Type::Notification &, const CLDataProtectionManager_Type::NotificationData &)
@WifiLogic, entry, dataProtection
void CLWifiLocationProvider::onWifiTileDownloadNotification(int, const CLWifiTilesManager_Type::Notification &, const CLWifiTilesManager_Type::NotificationData &)
@WifiLogic, entry, tileDownload
void CLWifiLocationProvider::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)
@WifiLogic, entry, clientNotify
void CLWifiLocationProvider::onNetworkLocationNotification(int, const CLNetworkLocationProvider_Type::Notification &, const CLNetworkLocationProvider_Type::NotificationData &)
@WifiLogic, entry, alsNotify
void CLWifiLocationProvider::onStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)
@WifiLogic, entry, reach, %{public}d
@WifiLogic, entry, batterysaver, %{public}d
void CLWifiLocationProvider::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)
@WifiLogic, entry, locationNotify
void CLWifiLocationProvider::handleEmergencyStateChange(CLEmergencyController::EmergencyState_t)
@WifiLogic, entry, emergencyState
CLWifiLocationProvider::HandleEventResults CLWifiLocationProvider::handleEvent(CL::WifiPositioning::Events::EventUnion)
@WifiLogic, handleInput, %{public}s
CLWifiLocationProvider::HandleEventResults CLWifiLocationProvider::handleLogicOutput(CL::WifiPositioning::Output)
@WifiLogic, handleOutput
@WifiLogic, decision, newUpdate, didStart, %{public}d
@WsbReproc, reason, %{public}s
@WifiLogic, decision, reprocWsb
@WifiLogic, decision, alsreq, aps, %{public}lu
@WifiLogic, decision, alswsb, aps, %{public}lu
high
value of didStartScan being reset to false after successfully beginning a scan
@WifiLogic, decision, scanreq, didStart, %{public}d
turn wifi auto-join off
turn wifi power on
turn wifi power off
turn wifi auto-join on
@WifiLogic, decision, wifipower, %{public}d
@WifiLogic, decision, tiledl, %{private}.02f, %{private}.02f
@WifiLogic, decision, timer, %{public}.1f
@WifiLogic, decision, timer, cancel
@ClxWifi, Fix, 0, ll, N/A
@WifiLogic, decision, notifyUnavail
WiFi
Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Confidence,%d,TTF,%.3Lf,sinceReg,%.3Lf,Confirmed,%d,Altitude,%.2lf,VerticalAccuracy,%.2lf,locationSimulated,%d,notifiedLocationAge,%Lf,integrity,%d
@ClxWifi, Fix, 1, ll, %{private}.7f, %{private}.7f, acc, %{public}.2f, course, -1.0
@WifiLogic, decision, notifyLoc
!batchedLocations.empty()
notifying clients of %{public}ld batched wifi locations
WsbCalc, notify, %{public}lu
@WifiLogic, decision, notifyBatched
CL::WifiPositioning::Types::SystemState CLWifiLocationProvider::updateStateFromSynchronousDependencies(CL::WifiPositioning::Types::SystemState) const
@WifiLogic, updateStateExternal
void CLWifiLocationProvider::scheduleNextTimer(CFAbsoluteTime, CFTimeInterval)
@WifiFlow, nexttimer, %{public}d
@WifiFlow, nexttimer, off
fIsQueryLocationServer
fIsSlowDownScansWhileAssociated
IsFeedInCPIScans
fIsQueryAllAPs
fIsInjectingScanResults
fIsActivelyScheduleWifiScans
IgnoreSignalEnvironment
void errorOnDeprecatedDefaultWrites()
%s is deprecated. setting this has no effect
fWifiScanForcedInterval
fMinIntervalBetweenLocationRequests
fMinIntervalBetweenScanCalculations
fScanTypeStage1
fScanTypeStage2
OnClientUpdateTimer
LocationRequest
ReprocessWifiScanBuffer
Wifi::ScanReady
Wifi::ScanError
Wifi::ScanErrorBusy
Wifi::Power
Wifi::LinkStatus
Wifi::Roam
Wifi::Scan
Wifi::ScanBuffer
Motion::CoarseMovement
SignalEnvironment::Change
System::LocationServicesReset
System::LocationServicesAuthorization
System::EncryptedDataAvailability
System::Reachability
System::BatterySaverMode
AlsRequest::NetworkLocationProviderResults
AlsResponse::Error
AlsResponse::WifiFinished
Location::Leech
Location::LocationOrLocationSpectatorClientRegistration
Location::LocationOrLocationSpectatorClientUnregistration
Emergency::StateChange
Tiles::WifiTileDownload
forced_return
/BuildRoot/Applications/Xcode.app/Contents/Developer/Platforms/AppleTVSimulator.platform/Developer/SDKs/AppleTVSimulator11.0.sdk/usr/local/include/boost/variant/detail/forced_return.hpp
adaptee != nullptr
Tiles
static bool CLUnifiedCellLocationProviderLogic::isAlsQueriable(CLTelephonyService_Type::RadioAccessTechnology)
CellLoc, Invalid rat, %{public}d, %{public}s, #CloneMe
CLMotionStateOverride
CLMotionStateOverride::CLMotionStateOverride(id<CLIntersiloUniverse>)
Workout, Taking power assertion due to session start.
v16@?0^{CLMotionStateMediator=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBB{CLCalorieActivityFilter={CLMotionActivity=iiiiBfdBiddii{?=b1b1b1b1b1}}{CLMotionActivity=iiiiBfdBiddii{?=b1b1b1b1b1}}{list<CLMotionActivity, std::__1::allocator<CLMotionActivity> >={__list_node_base<CLMotionActivity, void *>=^{__list_node_base<CLMotionActivity, void *>}^{__list_node_base<CLMotionActivity, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLMotionActivity, void *> > >=Q}}}B{CLWorkoutManager={WorkoutSettings=[16C]q(WorkoutAttrib={SwimAttrib=qd})}q}@{CLBodyMetrics=iffffffffif}{CLMotionDefaultsWrite<int>=Bi}^{Dispatcher}^{Dispatcher}^{Dispatcher}@{unique_ptr<CLNatalimetryNotifier_Type::Client, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >={__compressed_pair<CLNatalimetryNotifier_Type::Client *, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >=^{Client}}}}8
CLMotionStateOverride::~CLMotionStateOverride()
Workout, Releasing power assertion due to session end.
CLMotionStateMediatorSilo
ForceOtherWorkoutOverride
AutoPauseTestHaptic
void CLMotionStateMediator::addClientForPrepareSessionEnd(id<CLMotionStateMediatorClientProtocol>, CMWorkoutType)
Workout, Receiving addClientForPrepareSessionEnd after client list has been deleted!
void CLMotionStateMediator::removeClientForPrepareSessionEnd(id<CLMotionStateMediatorClientProtocol>, CMWorkoutType)
Workout, Receiving removeClientForPrepareSessionEnd after client list has been deleted!
Workout, Client for PrepareSessionEnd of session type %d does not exist!
void CLMotionStateMediator::prepareForSessionEnd(CMWorkoutType)
Workout, Prepared session client, end for session, %d, duration (s), %f, success, %d
void CLMotionStateMediator::overrideActivity(CLMotionStateMediator_Type::WorkoutSettings)
Workout, START, activity, %d, workout, %lu, sessionId, %s, location, %lu, length, %f, type override, %d
Workout, START, activity, %d, workout, %lu, sessionId, %s, type override, %d
void CLMotionStateMediator::clearActivityOverride(CLMotionStateMediator_Type::WorkoutSettings)
Workout, STOP
void CLMotionStateMediator::setWorkoutSuggestedStopTimeout(CFTimeInterval)
Workout,Setting suggested stop timeout for workout,%f
void CLMotionStateMediator::notifyWorkoutEvent(const CLMotionStateMediator_Type::WorkoutEvent &)
Workout,time,%{public}.3f,event,%{public}lu
virtual void CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLMotionStateMediator_Type::Notification, NotificationData_T = CLMotionStateMediator_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLMotionStateMediator_Type::Notification, NotificationData_T = CLMotionStateMediator_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLMotionStateMediator_Type::Notification, NotificationData_T = CLMotionStateMediator_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLMotionStateMediator_Type::Notification, NotificationData_T = CLMotionStateMediator_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLMotionStateMediator_Type::Notification, NotificationData_T = CLMotionStateMediator_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLMotionStateMediator_Type::Notification, NotificationData_T = CLMotionStateMediator_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::listClients() [Notification_T = CLMotionStateMediator_Type::Notification, NotificationData_T = CLMotionStateMediator_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
-[CLLocationProviderAdapter updateNotification:withRegistrationInfo:forClient:]
Failed to updateRegistrationInfoForClient %p (%d)
LocationProviders
bool CLLocationProvider::checkEnable(const char *)
#Warning provider %s disabled - will run but not send locations to clients
 Location Provider (%s) set to (%d)
virtual bool CLLocationProvider::registerForNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::RegInfo &)
CLIENT: registerForNotification, register for notification, %d, %s, desiredAccuracy, %.1lf, operatingMode, %d
virtual bool CLLocationProvider::updateRegistrationInfoForClient(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::RegInfo &)
CLIENT: updateRegistrationInfoForClient, client, %d, notification, %d, %s
CLIENT: updateRegistrationInfoForClient, client, %d, notification, %d, %s, from desiredAccuracy, %.1lf, to, %.1lf
CLIENT: updateRegistrationInfoForClient, no notification, client, %d, notification, %d, %s
virtual bool CLLocationProvider::getNotification(const CLLocationProvider_Type::Notification &, CLLocationProvider_Type::NotificationData &)
Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Type,%d,%s,LocationTimestamp,%.3f,Age,%.3f,Lifespan,%.3f,
virtual void CLLocationProvider::notifyClientsWithData(const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &, bool, int, bool)
Ignoring location for %s
Provider %s is notifying clients (type=%d) of an invalid position (<%+.8f,%+.8f>)
Provider %s is notifying clients (type=%d) of an invalid altitude %.2f (accuracy %.2f)
Provider %s is notifying clients (type=%d) of a <0,0> position
#Warning Should not be sending coarse and fine notifications directly
Sending location unavailable notification through for %s
virtual void CLLocationProvider::sendSimulatedLocation(const CLDaemonLocation &)
Sending through simulated location for %s
virtual void CLLocationProvider::setSimulationEnabled(bool)
Simulation is now %s for %s
Notifying
virtual void CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLLocationProvider_Type::Notification, NotificationData_T = CLLocationProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLLocationProvider_Type::RegInfo]
void CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLLocationProvider_Type::Notification, NotificationData_T = CLLocationProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLLocationProvider_Type::RegInfo]
UARFCN
CLCellLocationDatabase::CLCellLocationDatabase(const char *, const CLSqliteDatabase::SqliteProperties &, double)
#Warning Database is not valid; not initializing
bool CLCellLocationDatabase::getLocation(const CLTelephonyService_Type::Cell &, sqlite3_int64 &)
failed to bind %{public}s
INSERT OR REPLACE INTO 
) VALUES (?, ?, ?, ?, ?, ?)
bool CLCellLocationDatabase::setLocation(const CLTelephonyService_Type::Cell &, const CLDaemonLocation &)
CELL_LOC: fInsertStatement [%s]
bool CLCellLocationDatabase::getLocation(sqlite3_int64, CLTelephonyService_Type::Cell &) const
CLNmeaLocationProviderSilo
nmea
NmeaDeviceName
CLNmeaLocationProvider::CLNmeaLocationProvider(id<CLIntersiloUniverse>)
reading from %s
NmeaHorizontalAccuracy
NmeaSpeedAccuracy
NmeaCourseAccuracy
virtual int CLNmeaLocationProvider::sourceClosed()
#Warning data source closed
NMEA
virtual int CLNmeaLocationProvider::handleReadData(const char *, int)
Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Sentence,"%s",
CL-NMEA
Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Speed,%.2f,Course,%.2f,
none
lowpower
clientupdate
associate
emergency
Request, type, 
 lowPriority, 
 urgent, 
 numOfRequestedScans, 
 timestamp, 
nofix
nextstage
scanbusy
scanfail
static void CLWifiLocationUpdateRequest::logLocationRequestOutcome(CLWifiLocationUpdateRequest::Outcome)
@WifiFlow, outcome, %{public}s
InfoMask
CLWifiLocationDatabase::CLWifiLocationDatabase(const char *, const CLSqliteDatabase::SqliteProperties &, double)
platform supports WiFi location monitoring - creating bounding boxes, tableName, %s
read only database - not creating bounding boxes, tableName, %s
platform does not support WiFi location monitoring - not creating bounding boxes, tableName, %s
 VALUES 
(?,?,?,?,?,?,?,?,?,?,?,?,?,?);
 WHERE ROWID=?
 / 2.0 
std::vector<CLWifiAPLocation> CLWifiLocationDatabase::getNearbyWifisCoarse(double, double, double, int, bool, double)
Coarse wifi query center, %+.8lf, %+.8lf, nw, %+.8lf, %+.8lf, se, %+.8lf,%+.8lf, radius, %.8lf, bb, %d
.ROWID = 
.rowid  AND 
 >=? AND 
 <=? AND 
 <=?
 ORDER BY Score DESC LIMIT 
fSelectCoarseWifiStatementRTree = [%s]
  <= ? AND 
 >= ? AND 
  >= ? AND 
 <= ? 
fSelectCoarseWifiStatement = [%s]
Unknown WiFi AP. %s
Coarse wifi query center, %+.8lf, %+.8lf, nw, %+.8lf, %+.8lf, se, %+.8lf,%+.8lf, radius, %.8lf, aps, %ld
uint32_t CLWifiLocationDatabase::count()
invalid return value getting size of WifiLocation table
 IS NULL OR 
 = '' 
CellLocationLocal
CellLocation
ScdmaCellLocationLocal
ScdmaCellLocation
CdmaCellLocationLocal
CdmaCellLocation
LteCellLocationLocal
LteCellLocation
CLNetworkLocationProviderSilo
NetworkProvider
DisableTransactions
IgnoreServerWifiUpdates
CLNetworkLocationProvider::CLNetworkLocationProvider(id<CLIntersiloUniverse>, std::unique_ptr<CLINetworkLocationProviderExternal>, std::shared_ptr<CLWifiAccessPointLocationService>)
NETWORK: fIsIgnoreServerWifiUpdates = %d
UseEVDOTransmittedLocations
NETWORK: fIsUseEVDOTransmittedLocations = %d
IsExponentialRetryTimer
NETWORK: fIsExponentialRetryTimer, %d
fIsUseNetworkLocationProvider
NETWORK_LOCATION_PROVIDER
Data protection status
dataProtectionEnabled
NetworkLocationServerRefreshInterval
fServerRefreshInterval, %.1lf
NetworkLocationDebugSQLQueries
CLDaemonSettings::instance()->get("NetworkLocationDebugSQLQueries", debugSqlQueries) == false
Scheduling purge for %.3f and checking every %.3fs for older than %.3fs
void CLNetworkLocationProvider::getMetric(CLDaemonStats_Type::LocationNetworkQueries &)
NETWORK: stats: cellsQueried, %d, wifisQueried, %d, locationsQueried, %d, totalRequests, %d, totalRequestsSuccessful, %d
void CLNetworkLocationProvider::rescheduleOnReachability()
NETWORK: check reschedule, fQueryRetries, %d, sinceLastRetry, %.1lf
rescheduleOnReachability
bool CLNetworkLocationProvider::getLocation_GSM(const CLTelephonyService_Type::Cell &, CLDaemonLocation &)
cell %03d %03d 0x%x 0x%x is local <%+.8f,%+.8f> remote <%+.8f,%+.8f> %.2fm apart - using local
CELL_LOC: cell, %s, has local, but no remote - querying
CELL_LOC: found, %d, server, %d, cell, %s, location, %s
bool CLNetworkLocationProvider::getLocation_SCDMA(const CLTelephonyService_Type::ScdmaCell &, CLDaemonLocation &)
CELL_LOC: scdma, found, %d, server, %d, cell, %s, location, %s
bool CLNetworkLocationProvider::getLocation_CELL(const CLCell &, CLDaemonLocation &)
CELL_LOC: failed get location for, %s
CLNetworkLocationProvider::BestMatchLevel CLNetworkLocationProvider::getBestMatchLocation(const CLCell &, CLDaemonLocation &)
CELL_LOC: best match cell, %s, bestMatch, %d
CLNetworkLocationProvider::BestMatchLevel CLNetworkLocationProvider::getBestMatchLocation_SCDMA(const CLTelephonyService_Type::ScdmaCell &, CLDaemonLocation &)
CELL_LOC: SCDMA full match 0, %s, %s
CELL_LOC: SCDMA match 1, %s, %s
CELL_LOC: SCDMA match 2, %s, %s
CELL_LOC: SCDMA match 3, %s, %s
CELL_LOC: SCDMA match 4, %s, %s
CELL_LOC: SCDMA NO MATCH, %s
CLNetworkLocationProvider::BestMatchLevel CLNetworkLocationProvider::getBestMatchLocation_GSM(const CLTelephonyService_Type::Cell &, CLDaemonLocation &)
CELL_LOC: GSM full match 0, %s, %s
CELL_LOC: GSM match 1, %s, %s
CELL_LOC: GSM match 2, %s, %s
CELL_LOC: GSM match 3, %s, %s
CELL_LOC: GSM match 4, %s, %s
CELL_LOC: GSM NO MATCH, %s
CLNetworkLocationProvider::BestMatchLevel CLNetworkLocationProvider::getBestMatchLocation_LTE(const CLTelephonyService_Type::LteCell &, CLDaemonLocation &)
CELL_LOC: LTE full match 0, %s, %s
CELL_LOC: LTE match 1, %s, %s
CELL_LOC: LTE match 2, %s, %s
CELL_LOC: LTE match 3, %s, %s
CELL_LOC: LTE match 4, %s, %s
#Warning CELL_LOC: LTE NO MATCH, %s
CLNetworkLocationProvider::BestMatchLevel CLNetworkLocationProvider::getBestMatchLocation_CDMA(const CLTelephonyService_Type::CdmaCell &, CLDaemonLocation &)
CELL_LOC: match 8 (%s)
CELL_LOC: match 5.1 (%s)
CELL_LOC: match 7 (%s)
CELL_LOC: match 4.1 (%s)
CELL_LOC: match 4.2 (%s)
CELL_LOC: match 3 (%s)
CELL_LOC: match 2 (%s)
CELL_LOC: match 1 (%s)
CELL_LOC: match sector location, %s, location, %s
CELL_LOC: avoid using transmitted locations
CELL_LOC: NO MATCH (%s)
bool CLNetworkLocationProvider::getLocation_CDMA(const CLTelephonyService_Type::CdmaCell &, CLDaemonLocation &)
CELL_LOC: found in DB (%s) loc (%lf %lf) acc (%lf)
CELL_LOC: cell %03d %03d 0%03d %03d %03d is local <%+.8f,%+.8f> remote <%+.8f,%+.8f> %.2fm apart - using local
CELL_LOC: cell, %s, has local, but no remote - not querying, server doesn't server these
CELL_LOC: cell, %s, has local, but no remote -  pending query
bool CLNetworkLocationProvider::getLocation_LTE(const CLTelephonyService_Type::LteCell &, CLDaemonLocation &)
CELL_LOC: cell, [%s], is local <%+.8f,%+.8f> remote <%+.8f,%+.8f> %.2fm apart - using local
CELL_LOC: cell, %s, has local, but no remote -  querying
bool CLNetworkLocationProvider::setLocation_CDMA(const CLTelephonyService_Type::CdmaCell &, const CLDaemonLocation &)
CELL_LOC: cell (%s) is local <%+.8f,%+.8f> remote <%+.8f,%+.8f> only %.2fm apart - not storing locally
CELL_LOC: cell (%s) is local at <%+.8f,%+.8f>
#Warning Location Services disabled, not storing location entry
bool CLNetworkLocationProvider::setLocation_GSM(const CLTelephonyService_Type::Cell &, const CLDaemonLocation &)
cell %03d %03d 0x%x 0x%x is local <%+.8f,%+.8f> remote <%+.8f,%+.8f> only %.2fm apart - not storing locally
cell %03d %03d 0x%x 0x%x is local at <%+.8f,%+.8f>
bool CLNetworkLocationProvider::setLocation_SCDMA(const CLTelephonyService_Type::ScdmaCell &, const CLDaemonLocation &)
scdma cell %03d %03d 0x%x 0x%x is local <%+.8f,%+.8f> remote <%+.8f,%+.8f> only %.2fm apart - not storing locally
scdma cell %03d %03d 0x%x 0x%x is local at <%+.8f,%+.8f>
bool CLNetworkLocationProvider::setLocation_LTE(const CLTelephonyService_Type::LteCell &, const CLDaemonLocation &)
CELL_LOC: distance, %.1lf, not storing locally, %s, location, %s
CELL_LOC: distance, %.1lf, override local location, %s, location, %s
int CLNetworkLocationProvider::queryLocations(const std::vector<CLTelephonyService_Type::Cell> &, const std::vector<CLTelephonyService_Type::ScdmaCell> &, const std::vector<CLTelephonyService_Type::CdmaCell> &, const std::vector<CLTelephonyService_Type::LteCell> &, const std::vector<CLMacAddress> &, bool, bool, bool)
Unified query
gsmCellCount
scdmaCellCount
cdmaCellCount
macAddresses
piggybackNearbyWifis
piggybackNearbyCells
#Warning in private location mode; not querying for unknown cdmaCells or unknown wifis
#Warning Location Services disabled, not querying location
#Warning NETWORK: can't query, no reachability, %d
CELL_LOC: cdma cell, %s, last updated %.3f ago (%.3fs minimum), not re-querying
CELL_LOC: cdma cell, %s, last queried %.3f ago (%.3fs minimum), not re-querying
CELL_LOC: cdma cell, %s, re-querying
CELL_LOC: gsm cell, %s, last updated %.3f ago (%.3fs minimum), not re-querying
CELL_LOC: gsm cell, %s, last queried %.3f ago (%.3fs minimum), not re-querying
CELL_LOC: gsm cell, %s, re-querying
CELL_LOC: scdma cell, %s, last updated %.3f ago (%.3fs minimum), not re-querying
CELL_LOC: scdma cell, %s, last queried %.3f ago (%.3fs minimum), not re-querying
CELL_LOC: scdma cell, %s, re-querying
CELL_LOC: lte cell, %s, last updated %.3f ago (%.3fs minimum), not re-querying
CELL_LOC: lte cell, %s, last queried %.3f ago (%.3fs minimum), not re-querying
CELL_LOC: lte cell, %s, re-querying
Will not query ALS, timestamp is too recent.
minAgeBeforeRequery
Will not query ALS, because mac is already in the queue.
timeSpentInQueue
Adding mac address to queue to query ALS.
Ignoring ALS server queries.
CELL_LOC: query gsm cells, %lu
CELL_LOC: query scdma cells, %lu
CELL_LOC: query cdma cells, %lu
CELL_LOC: query lte cells, %lu
CELL_LOC: query wifi cells, %lu
WIFI_LOC: isPiggybackNearby, %d, %d, isBroadConnection, %d, nearbyWifis, %d, nearbyCells, %d
#Warning %ld pending wifis, clearing
pending %s from %.3f (%.3fs ago)
#Warning CELL_LOC: %ld pending gsm cells, clearing
CELL_LOC: pending gsm cell, %s, from, %.3f, %.3f, ago)
#Warning CELL_LOC: %ld pending scdma cells, clearing
CELL_LOC: pending scdma cell, %s, from, %.3f, %.3f, ago)
#Warning CELL_LOC: %ld pending cdma cells, clearing
CELL_LOC: pending cdma cell, %s, from, %.3f, %.3f, ago)
#Warning CELL_LOC: %ld pending lte cells, clearing
CELL_LOC: pending lte cell, %s, from, %.3f, %.3f, ago)
void CLNetworkLocationProvider::requeryLocations()
#Notice NETWORK: requery, %{public}lu, %{public}lu, %{public}lu, %{public}lu, %{public}lu, items, fQueryRetries, %{public}d, fLastRetryTimestamp, %{public}.1lf
#Warning NETWORK: in private location mode; not querying for unknown cells or unknown wifis
#Warning NETWORK: Location Services disabled, not querying location
requeryLocations
NETWORK: re-querying cells, %lu, %lu, %lu, %lu, wifis, %lu, retry count, %d
bool CLNetworkLocationProvider::isBroadConnection()
isBroadConnection, reachability, %d, %d, dataAccessTech, %d, %d, isBroadConnection, %d
int CLNetworkLocationProvider::queryNearbys(const CLDaemonLocation &)
#Warning in private location mode; not querying for unknown cells or unknown wifis
void CLNetworkLocationProvider::onLocationRequesterCellLocationSeries(CLNetworkLocationRequester *, bool, CLNetworkLocationRequester::RequestType, int)
CELL_LOC: start sequence, This, %p
transaction
series
CELL_LOC: beginning cell database %s
CELL_LOC: ending cell database %s (%lu cells still pending)
Network-Cell
void CLNetworkLocationProvider::onLocationRequesterScdmaCellLocation(CLNetworkLocationRequester *, const CLTelephonyService_Type::ScdmaCell &, const CLDaemonLocation &, CLNetworkLocationRequester::RequestType, int)
Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,MCC,%03d,MNC,%03d,LAC,0x%x,CI,0x%x,Confidence,%d,Count,%d,lock,%d
void CLNetworkLocationProvider::onLocationRequesterScdmaCellLocationUnknown(CLNetworkLocationRequester *, const CLTelephonyService_Type::ScdmaCell &, CLNetworkLocationRequester::RequestType, int)
Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,MCC,%03d,MNC,%03d,LAC,0x%x,CI,0x%x,
void CLNetworkLocationProvider::onLocationRequesterCellLocation(CLNetworkLocationRequester *, const CLTelephonyService_Type::Cell &, const CLDaemonLocation &, CLNetworkLocationRequester::RequestType, int)
void CLNetworkLocationProvider::onLocationRequesterCellLocationUnknown(CLNetworkLocationRequester *, const CLTelephonyService_Type::Cell &, CLNetworkLocationRequester::RequestType, int)
void CLNetworkLocationProvider::onLocationRequesterCdmaCellLocation(CLNetworkLocationRequester *, const CLTelephonyService_Type::CdmaCell &, const CLDaemonLocation &, CLNetworkLocationRequester::RequestType, int)
Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,MCC,%03d,MNC,%03d,SID,%03d,NID,%03d,BSID,%03d,Confidence,%d,Count,%d,lock,%d
CELL_LOC: server response cell(%s) loc (%lf %lf) acc(%lf)
void CLNetworkLocationProvider::onLocationRequesterCdmaCellLocationUnknown(CLNetworkLocationRequester *, const CLTelephonyService_Type::CdmaCell &, CLNetworkLocationRequester::RequestType, int)
Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,MCC,%03d,MNC,%03d,SID,%03d,NID,%03d,BSID,%03d
void CLNetworkLocationProvider::onLocationRequesterLteCellLocation(CLNetworkLocationRequester *, const CLTelephonyService_Type::LteCell &, const CLDaemonLocation &, CLNetworkLocationRequester::RequestType, int)
CELL_LOC: server response lte cell, %s, location, %s
Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,MCC,%03d,MNC,%03d,TAC,0x%x,CI,0x%x,Confidence,%d,Count,%d,lock,%d
NETWORK: pending, known, before, %lu, cell, %s
NETWORK: pending, known, after, %lu, cell, %s
void CLNetworkLocationProvider::onLocationRequesterLteCellLocationUnknown(CLNetworkLocationRequester *, const CLTelephonyService_Type::LteCell &, CLNetworkLocationRequester::RequestType, int)
Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,MCC,%03d,MNC,%03d,TAC,0x%x,CI,0x%x,
NETWORK: pending, unknown, before, %lu, cell, %s
NETWORK: pending, unknown, after, %lu, cell, %s
void CLNetworkLocationProvider::onLocationRequesterWifiLocationSeriesComplete(CLNetworkLocationRequester *, const std::vector<CLAlsWifiAccessPoint> &, const std::vector<CLAlsWifiAccessPoint> &, CLNetworkLocationRequester::RequestType, int)
AlsWifi, seriesComplete, known, %{public}lu, unknown, %{public}lu
Ignoring #als response, mac, %s, channel, %d, isNearbyQuery, %d, fDataProtectionEnabled, %d
Partial numer of ALS aps saved
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Daemon/Positioning/Network/CLNetworkLocationProvider.mm
#Warning Location Services disabled, not storing location entries
void CLNetworkLocationProvider::onLocationRequesterResponse(CLNetworkLocationRequester *, const CFTimeInterval &, CFDictionaryRef, CLNetworkLocationRequester::RequestType, int)
NETWORK: stats: onLocationRequesterResponse, %d
void CLNetworkLocationProvider::onLocationRequesterLocationError(CLNetworkLocationRequester *, CLNetworkLocationRequester::RequestType, int)
#Notice NETWORK: no response from server, reachability, %{public}d, queryRetries, %{public}d
queryFailed
NETWORK: data reachability is not available - not retrying
no.data.reachability
NETWORK: retry query, %d, %d
retry.query
NETWORK: retry count %d exceeded %d - not retrying
max.retries
void CLNetworkLocationProvider::onLocationRequesterNearbyError(CLNetworkLocationRequester *, CLNetworkLocationRequester::RequestType, int)
NETWORK: query failed for nearbys - not retrying
void CLNetworkLocationProvider::onLocationRequesterFinished(CLNetworkLocationRequester *, CLNetworkLocationRequester::RequestType, int)
NETWORK: query: finished, tag, %d, cells, %d, wifis, %d
onLocationRequesterFinished
bool CLNetworkLocationProvider::resetBoundingBoxes()
resetBoundingBoxes for wifi
void CLNetworkLocationProvider::onStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)
NETWORK: onStatusNotification, kNotificationReachability, from, %d, to, %d
@ClxLink, reach, %{public}d, last, %{public}d, retries, %{public}d
void CLNetworkLocationProvider::trimPendingQueries()
trimming pending gsm, %lu, scdma, %lu, cdma, %lu, lte, %lu, wifis, %lu, to, %d
int CLNetworkLocationProvider::query(const std::vector<CLTelephonyService_Type::Cell> &, const std::vector<CLTelephonyService_Type::ScdmaCell> &, const std::vector<CLTelephonyService_Type::CdmaCell> &, const std::vector<CLTelephonyService_Type::LteCell> &, const std::vector<CLMacAddress> &, bool, bool)
CELL_LOC: gsmCells, %lu, %lu, lteCells, %lu, cdmaCells, %lu
data protection currently enabled - don't request surroundings
query, broadDataConnection, %d, timeout, %d
#Notice NETWORK: query, cells, %{public}lu, %{public}lu, %{public}lu, %{public}lu, wifis, %{public}lu
queryLoc
void CLNetworkLocationProvider::onManagerNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)
#Warning Location Services reset, clearing all local cache
#Warning Location Services disabled, clearing all local cache
void CLNetworkLocationProvider::onCompanionNotification(int, const CLCompanionNotifier_Type::Notification &, const CLCompanionNotifier_Type::NotificationData &)
onCompanionNotification, notification, %d
@ClxLink, Nearby, %{public}d
void CLNetworkLocationProvider::handleDataProtectionStatusChanged(CLDataProtectionManager_Type::DataAvailability)
Data protection is now %s
clearAlsDatabaseEntries
void CLNetworkLocationProvider::clearDatabaseEntries()
Clear database entries
void CLNetworkLocationProvider::clearDatabaseEntriesByAge(CFTimeInterval)
Purging entries older than %.2fs.
Clear database entries by age
onRetryTimer
void CLNetworkLocationProvider::onRetryTimer(CFRunLoopTimerRef)
NETWORK: onRetryTimer, %s, %p, fQueryRetries, %d, pending, %lu, %lu, %lu, %lu, %lu
bool CLNetworkLocationProvider::isRetryTimerNeeded()
NETWORK: areQueryRetriesNeeded, fQueryRetries, %d, pending, %lu, %lu, %lu, %lu, %lu, currentRetry, %d, sinceRetrySequenceStart, %.2lf, needed, %d
void CLNetworkLocationProvider::scheduleRetryTimer(const char *)
NETWORK: scheduleRetryTimer, retry timer already scheduled
scheduleRetryTimer
NETWORK: scheduleRetryTimer, %s, %p, fQueryRetries, %d, pending, %lu, %lu, %lu, %lu, %lu, timerInterval, %.1lf, isTimerNeeded, %d
void CLNetworkLocationProvider::cancelRetryTimer(const char *)
NETWORK: cancelRetryTimer, %s, %p, fQueryRetries, %d, pending, %lu, %lu, %lu, %lu, %lu
NETWORK: cancelRetryTimer, no retry timer
void CLNetworkLocationProvider::resetRetryCounters(const char *)
NETWORK: resetRetryCounters, sinceLastReset, %.1lf
NETWORK: resetRetryCounters, %s, %p, fQueryRetries, %d, pending, %lu, %lu, %lu, %lu, sinceLastReset, %.1lf
resetRetryCounters
void CLNetworkLocationProvider::dropAbandonedCellAlsTables()
Dropping cell ALS tables from class A databases
/lockCache_encryptedA.db
NetworkLocationPurgeThreshold
NetworkLocationPurgeInterval
NetworkLocationFirstPurge
 AND LAC=
 AND PSC=
this->isCdma()
this->isGsm()
this->isScdma()
this->isLte()
 AND SID=
 AND NID=
 AND BSID=
 AND ZONEID=
 AND PNOFFSET=
 AND BANDCLASS=
 AND CHANNEL=
 AND SectorID='
void CLTelephonyService_Type::CdmaCell::applyDerivedMcc()
#Warning ignoring second MCC %d %d
virtual void CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLNetworkLocationProvider_Type::Notification, NotificationData_T = CLNetworkLocationProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLNetworkLocationProvider_Type::Notification, NotificationData_T = CLNetworkLocationProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNetworkLocationProvider::cleanPendingListByAge(Container &, CFTimeInterval, CFAbsoluteTime) [Container = std::__1::map<CLTelephonyService_Type::Cell, double, std::__1::less<CLTelephonyService_Type::Cell>, std::__1::allocator<std::__1::pair<const CLTelephonyService_Type::Cell, double> > >]
NETWORK: cleaning, curEntryAge, %.1lf, ageThreshold, %.1lf
void CLNetworkLocationProvider::cleanPendingListByAge(Container &, CFTimeInterval, CFAbsoluteTime) [Container = std::__1::map<CLTelephonyService_Type::ScdmaCell, double, std::__1::less<CLTelephonyService_Type::ScdmaCell>, std::__1::allocator<std::__1::pair<const CLTelephonyService_Type::ScdmaCell, double> > >]
void CLNetworkLocationProvider::cleanPendingListByAge(Container &, CFTimeInterval, CFAbsoluteTime) [Container = std::__1::map<CLTelephonyService_Type::CdmaCell, double, std::__1::less<CLTelephonyService_Type::CdmaCell>, std::__1::allocator<std::__1::pair<const CLTelephonyService_Type::CdmaCell, double> > >]
void CLNetworkLocationProvider::cleanPendingListByAge(Container &, CFTimeInterval, CFAbsoluteTime) [Container = std::__1::map<CLTelephonyService_Type::LteCell, double, std::__1::less<CLTelephonyService_Type::LteCell>, std::__1::allocator<std::__1::pair<const CLTelephonyService_Type::LteCell, double> > >]
void CLNetworkLocationProvider::cleanPendingListByAge(Container &, CFTimeInterval, CFAbsoluteTime) [Container = std::__1::map<CLMacAddress, double, std::__1::less<CLMacAddress>, std::__1::allocator<std::__1::pair<const CLMacAddress, double> > >]
void CLManagedLocationDatabase<CLCellLocationDatabase, CLTelephonyService_Type::Cell>::onDataAvailable() [Database = CLCellLocationDatabase, DataType = CLTelephonyService_Type::Cell]_block_invoke
Failed to find entry from in-memory database, table, %{public}s, type %{public}s, rowid, %{public}lld
Failed to save entry to persisted database, table %{public}s
v32@?0r^{CLLocationDatabase=^^?{SqliteProperties=iiBB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}Bd{CLSqliteDatabase=^^?^{sqlite3}^{Mutex}{list<sqlite3_stmt *, std::__1::allocator<sqlite3_stmt *> >={__list_node_base<sqlite3_stmt *, void *>=^{__list_node_base<sqlite3_stmt *, void *>}^{__list_node_base<sqlite3_stmt *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<sqlite3_stmt *, void *> > >=Q}}{SqliteProperties=iiBB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}i@}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}}8r^{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}16q24
sqlite
void CLManagedLocationDatabase<CLCellLocationDatabase, CLTelephonyService_Type::Cell>::onDataAvailable() [Database = CLCellLocationDatabase, DataType = CLTelephonyService_Type::Cell]
Failed to migrate in-memory database to persisted.
Successfully migrated %u rows from in-memory database to persisted for table %s
void CLManagedLocationDatabase<CLCdmaCellLocationDatabase, CLTelephonyService_Type::CdmaCell>::onDataAvailable() [Database = CLCdmaCellLocationDatabase, DataType = CLTelephonyService_Type::CdmaCell]_block_invoke
void CLManagedLocationDatabase<CLCdmaCellLocationDatabase, CLTelephonyService_Type::CdmaCell>::onDataAvailable() [Database = CLCdmaCellLocationDatabase, DataType = CLTelephonyService_Type::CdmaCell]
void CLManagedLocationDatabase<CLLteCellLocationDatabase, CLTelephonyService_Type::LteCell>::onDataAvailable() [Database = CLLteCellLocationDatabase, DataType = CLTelephonyService_Type::LteCell]_block_invoke
void CLManagedLocationDatabase<CLLteCellLocationDatabase, CLTelephonyService_Type::LteCell>::onDataAvailable() [Database = CLLteCellLocationDatabase, DataType = CLTelephonyService_Type::LteCell]
virtual void CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLNetworkLocationProvider_Type::Notification, NotificationData_T = CLNetworkLocationProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLNetworkLocationProvider_Type::Notification, NotificationData_T = CLNetworkLocationProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLNetworkLocationProvider_Type::Notification, NotificationData_T = CLNetworkLocationProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLNetworkLocationProvider_Type::Notification, NotificationData_T = CLNetworkLocationProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::listClients() [Notification_T = CLNetworkLocationProvider_Type::Notification, NotificationData_T = CLNetworkLocationProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
CLAccessoryLocationProviderSilo
accessory
ephemeris/
CLAccessoryLocationProvider::CLAccessoryLocationProvider(id<CLIntersiloUniverse>)
could not create path %{public}s
StarkNmeaPipeEnabled
EnableAccessoryNMEAScreening
EnableAccessoryNMEAScreening,%d
void CLAccessoryLocationProvider::registerForNotifications()
registered for unfiltered location notifications
registered for propagated location notifications
void CLAccessoryLocationProvider::unregisterForNotifications()
unregistered for unfiltered location notifications
unregistered for propagated location notifications
%X%X
Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Speed,%.2f,Course,%.2f,timestampGps,%.2lf,GgaOnly,integrity,%d
CLGpsAssistant
void CLAccessoryLocationProvider::sendReferenceTime()
#Warning no reference time available, not sending reference time
void CLAccessoryLocationProvider::sendReferenceLocation()
#Warning location services is disabled, not sending reference location
#Warning no reference location available, not sending reference location
void CLAccessoryLocationProvider::sendReferenceEphemeris()
#Warning ephemeris %s not available
could not create input stream for ephemeris file, %{public}s
could not create data from file %{public}s
void CLAccessoryLocationProvider::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)
#Warning received an unknown location notification %d
void CLAccessoryLocationProvider::openNmeaPipe()
Unable to open nmea fifo FD %d %s.
void CLAccessoryLocationProvider::onClientManagerNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)
Screener reset
CL-AccessoryPropagated
void CLAccessoryLocationProvider::sendPropagatedLocation(const CLLocationProvider_Type::NotificationData &)
static void CLDaemonStats::shutdownInstance()
could not store stats data 
stats
CLDaemonStats
Location Stats
void CLDaemonStats::submitMetric(const CLDaemonStats_Type::LocationServicesState &)
metric.valid,%d,metric.timestamp,%.3f,metric.bundleId,%s,enabled,%d,event,%d
void CLDaemonStats::submitMetric(const CLDaemonStats_Type::LocationServicesApproval &)
metric.valid,%d,metric.timestamp,%.3f,metric.bundleId,%s,bundleIdApproved,%s,approved,%d,authorization,%d,
void CLDaemonStats::submitMetric(const CLDaemonStats_Type::LocationUpdateSession &)
metric.valid,%d,metric.timestamp,%.3f,metric.bundleId,%s,cellAvailable,%d,wifiAvailable,%d,passcodeLocked,%d,airplaneMode,%d,reachability,%d,accessoryConnected,%d,powered,%d,gpsCoexWifi,%d,gpsCoexBt,%d,timestampEnd,%.3f,duration,%.3f,desiredAccuracy,%.2f,achievedAccuracy,%.2f,ttff,%.3f,ttffGps,%.3f,achievedSpeed,%.2f,autoStopped,%d,deferredLocations,%d,
void CLDaemonStats::submitMetric(const CLDaemonStats_Type::LocationMonitorSession &)
metric.valid,%d,metric.timestamp,%.3f,metric.bundleId,%s,fenceRadiusMin,%.2f,fenceRadiusMax,%.2f,numFences,%d,numFencesRemoved,%d,slc,%d,
void CLDaemonStats::submitMetric(const CLDaemonStats_Type::LocationMonitorTrigger &)
metric.valid,%d,metric.timestamp,%.3f,metric.bundleId,%s,cellAvailable,%d,wifiAvailable,%d,passcodeLocked,%d,airplaneMode,%d,eventType,%d,eventRadius,%.2f,eventDistance,%.2f,eventLatency,%.3f,eventMask,0x%x,
void CLDaemonStats::submitMetric(const CLDaemonStats_Type::LocationNetworkQueries &)
metric.valid,%d,metric.timestamp,%.3f,metric.bundleId,%s,cellsQueried,%d,wifisQueried,%d,locationsQueried,%d,totalRequests,%d,totalRequestsSuccessful,%d,wifiTilesDownloaded,%d,wifiTilesDownloaded3G,%d,wifiTilesCached,%d,cellTilesDownloaded,%d,cellTilesDownloaded3G,%d,cellTilesCached,%d,demTilesDownloaded,%d,
void CLDaemonStats::submitMetric(const CLDaemonStats_Type::LocationWifiUsage &)
metric.valid,%d,metric.timestamp,%.3f,metric.bundleId,%s,totalScans,%d,triggeredScans,%d,totalScansS2,%d,scanFailures,%d,scanBusies,%d
void CLDaemonStats::submitMetric(const CLDaemonStats_Type::LocationWifiTileSync &)
@GtsAwd, submit, metric.valid, %{public}d, metric.timestamp, %{public}.3f, metric.bundleId, %{private}s, sessions, %{public}d, empty, %{public}d, completed, %{public}d, errored, %{public}d, syncedN, %{public}d, syncedKb, %{public}d
void CLDaemonStats::submitMetric(const CLDaemonStats_Type::LocationMapMatching &)
metric.valid,%d,metric.timestamp,%.3f,metric.bundleId,%s,attempts,%d,noMatch,%d,noData,%d,
void CLDaemonStats::submitMetric(const CLDaemonStats_Type::CompassSession &)
metric.valid,%d,metric.timestamp,%.3f,metric.bundleId,%s,timestampEnd,%.3f,duration,%.3f,uncalibrations,%d,achievedCalibration,%d,minMagnetometerMagnitude,%.1f,maxMagnetometerMagnitude,%.1f,gyroDataValid,%d,gyroAge,%d,gyroFactoryBias,%f,%f,%f,gyroFactorySlope,%f,%f,%f,gyroFactoryL2Error,%f,%f,%f,gyroDeltaBias,%f,%f,%f,gyroDeltaSlope,%f,%f,%f,gyroDynamicL2Error,%f,%f,%f,gyroDynamicMaxTemp,%d,gyroMagnitudeMax,%d,quality2DMin,%f,quality2DMax,%f,quality2DMean,%f,quality3DMin,%f,quality3DMax,%f,quality3DMean,%f,num2dTo3dTransitions,%d,num3dTo2dTransitions,%d,isLocationAvailable,%d,initState,%d,initAccuracy,%f,percentSession2D,%d,percentSessionUncalibrated,%d,percentSessionOther,%d,percentSessionStill,%d,percentSessionPedestrian,%d,percentSessionDriving,%d,percentSessionCycling,%d,percentSessionIndoor,%d,percentSessionDrivingHC,%d,coverKeyboardState,%d
void CLDaemonStats::submitMetric(const CLDaemonStats_Type::MotionState &)
metric.valid,%d,metric.timestamp,%.3f,metric.bundleId,%s,motionType,%d,enabled,%d,
MotionTriggerMaxPrototypes
void CLDaemonStats::submitMetric(const CLDaemonStats_Type::MotionTrigger &)
Max prototypes overriden to %d
metric.valid,%d,metric.timestamp,%.3f,metric.bundleId,%s,timestampEnd,%.3f,duration,%.3f,motionType,%d,numTriggers,%d,prototypes,%zu,%s
void CLDaemonStats::submitMetric(const CLDaemonStats_Type::MotionGyroMiniCal &)
metric.valid,%d,metric.timestamp,%.3f,hoursElapsed,%d
void CLDaemonStats::submitMetric(const CLDaemonStats_Type::MotionPedometerCalibration &)
metric.valid,%d,metric.timestamp,%.3f,step,%d,distance,%.2f,timeLength,%.2f,score,%.2f,trackdistance,%.2f,kfactor,%.2f,kfactorupdated,%.2f
void CLDaemonStats::submitMetric(const CLDaemonStats_Type::MotionGyroBias &)
metric.valid,%d,metric.timestamp,%.3f,imageCaptures,[%d,%d,%d,%d,%d,%d],endConditions,[%d,%d,%d,%d,%d,%d],biasChanges,[%d,%d,%d,%d,%d,%d,%d,%d],minDuration,%llu,maxDuration,%llu,meanDuration,%llu,minTemperature,%5.2f,maxTemperature,%5.2f
void CLDaemonStats::submitMetric(const CLDaemonStats_Type::CompassSaturations &)
metric.valid,%d,metric.timestamp,%.3f,numSaturations,%d,meanDeltaTimeSaturationsMsec,%d,magMagnitudeMin,%d,magMagnitudeMax,%d,maxCalibrationQuality3D,%f,deltaBiasHighQuality3D,%d,deltaRadiusHighQuality3D,%d,numCoverAttachments,%d
void CLDaemonStats::submitMetric(const CLDaemonStats_Type::MotionGyroDaily &)
metric.valid,%d,metric.timestamp,%.3f,gyroMagMin,%d,gyroMagMax,%d,minsGyroActive,%d
static void CLDaemonStats::submitMetric(id<CLIntersiloUniverse>, CLDaemonStats_Type::MetricId, const std::string &)
submitting metric %x for %s
v16@?0^{CLWifiTilesManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB^^?{map<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> >, std::__1::less<TileId>, std::__1::allocator<std::__1::pair<const TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > > > >={__tree<std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > >, std::__1::__map_value_compare<TileId, std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > >, std::__1::less<TileId>, true>, std::__1::allocator<std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<TileId, std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > >, std::__1::less<TileId>, true> >=Q}}}{DownloadState=*Bd{unique_ptr<CLFileDownload, std::__1::default_delete<CLFileDownload> >={__compressed_pair<CLFileDownload *, std::__1::default_delete<CLFileDownload> >=^{CLFileDownload}}}}{DownloadState=*Bd{unique_ptr<CLFileDownload, std::__1::default_delete<CLFileDownload> >={__compressed_pair<CLFileDownload *, std::__1::default_delete<CLFileDownload> >=^{CLFileDownload}}}}BBd{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}ddiiB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{unique_ptr<CLIWifiTilesManagerExternal, std::__1::default_delete<CLIWifiTilesManagerExternal> >={__compressed_pair<CLIWifiTilesManagerExternal *, std::__1::default_delete<CLIWifiTilesManagerExternal> >=^{CLIWifiTilesManagerExternal}}}{CLTileDownloadPolicy=@dQ}{shared_ptr<CLWifiAccessPointLocationService>=^{CLWifiAccessPointLocationService}^{__shared_weak_count}}{unique_ptr<CLITileSyncManager, std::__1::default_delete<CLITileSyncManager> >={__compressed_pair<CLITileSyncManager *, std::__1::default_delete<CLITileSyncManager> >=^{CLITileSyncManager}}}B{CLTilesSetCollection={vector<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >, std::__1::allocator<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > > >=^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}{__compressed_pair<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > *, std::__1::allocator<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > > >=^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}}}}}8
stats: %s
stats: type, %d, %s, count, %d
v16@?0^{CLUnifiedCellLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBBBB^^?{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client> >={__compressed_pair<CLTelephonyService_Type::Client *, std::__1::default_delete<CLTelephonyService_Type::Client> >=^{Client}}}{unique_ptr<CLNetworkLocationProvider_Type::Client, std::__1::default_delete<CLNetworkLocationProvider_Type::Client> >={__compressed_pair<CLNetworkLocationProvider_Type::Client *, std::__1::default_delete<CLNetworkLocationProvider_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLCompanionNotifier_Type::Client, std::__1::default_delete<CLCompanionNotifier_Type::Client> >={__compressed_pair<CLCompanionNotifier_Type::Client *, std::__1::default_delete<CLCompanionNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLCellTilesManager_Type::Client, std::__1::default_delete<CLCellTilesManager_Type::Client> >={__compressed_pair<CLCellTilesManager_Type::Client *, std::__1::default_delete<CLCellTilesManager_Type::Client> >=^{Client}}}{unique_ptr<CLCoarseCellTilesManager_Type::Client, std::__1::default_delete<CLCoarseCellTilesManager_Type::Client> >={__compressed_pair<CLCoarseCellTilesManager_Type::Client *, std::__1::default_delete<CLCoarseCellTilesManager_Type::Client> >=^{Client}}}B{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}^{__CFRunLoopSource}B{CLCell=Bii{Cell=iiiiiiii}{ScdmaCell=iiiiiiii}{CdmaCell=i{vector<int, std::__1::allocator<int> >=^i^i{__compressed_pair<int *, std::__1::allocator<int> >=^i}}iiiiiiiii{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}iii{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}ii}{LteCell=iiiiiiiddii}}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{vector<CLCell, std::__1::allocator<CLCell> >=^{CLCell}^{CLCell}{__compressed_pair<CLCell *, std::__1::allocator<CLCell> >=^{CLCell}}}BB^{CLPersistentTimer}iB{CLCellLocationAWD=iiiiiiiiiiiiiiidd}}8
CLRunningAggregatorAWD
CLCompanionActivityAWDAggregator
CLCompanionPedometerAWDAggregator
v16@?0^{CLPressureCalibrationDatabase=^^?{unique_ptr<CLSensorCalibrationController_Type::Client, std::__1::default_delete<CLSensorCalibrationController_Type::Client> >={__compressed_pair<CLSensorCalibrationController_Type::Client *, std::__1::default_delete<CLSensorCalibrationController_Type::Client> >=^{Client}}}B^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{MotionBarometerCalibration={Metric=Bd{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}Ifff}{CLSqliteDatabase=^^?^{sqlite3}^{Mutex}{list<sqlite3_stmt *, std::__1::allocator<sqlite3_stmt *> >={__list_node_base<sqlite3_stmt *, void *>=^{__list_node_base<sqlite3_stmt *, void *>}^{__list_node_base<sqlite3_stmt *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<sqlite3_stmt *, void *> > >=Q}}{SqliteProperties=iiBB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}i@}i{TemperatureOffsetCoefficientRound=ffi}{vector<CLPressureCalibrationDatabase::TemperatureOffsetCoefficientRound, std::__1::allocator<CLPressureCalibrationDatabase::TemperatureOffsetCoefficientRound> >=^{TemperatureOffsetCoefficientRound}^{TemperatureOffsetCoefficientRound}{__compressed_pair<CLPressureCalibrationDatabase::TemperatureOffsetCoefficientRound *, std::__1::allocator<CLPressureCalibrationDatabase::TemperatureOffsetCoefficientRound> >=^{TemperatureOffsetCoefficientRound}}}B{?=ffd}^{Dispatcher}i{CLRobustSlopeEstimator=f{deque<float, std::__1::allocator<float> >={__split_buffer<float *, std::__1::allocator<float *> >=^^f^^f^^f{__compressed_pair<float **, std::__1::allocator<float *> >=^^f}}Q{__compressed_pair<unsigned long, std::__1::allocator<float> >=Q}}{map<int, std::__1::deque<CLPressure::Sample, std::__1::allocator<CLPressure::Sample> >, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, std::__1::deque<CLPressure::Sample, std::__1::allocator<CLPressure::Sample> > > > >={__tree<std::__1::__value_type<int, std::__1::deque<CLPressure::Sample, std::__1::allocator<CLPressure::Sample> > >, std::__1::__map_value_compare<int, std::__1::__value_type<int, std::__1::deque<CLPressure::Sample, std::__1::allocator<CLPressure::Sample> > >, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, std::__1::deque<CLPressure::Sample, std::__1::allocator<CLPressure::Sample> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, std::__1::deque<CLPressure::Sample, std::__1::allocator<CLPressure::Sample> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, std::__1::deque<CLPressure::Sample, std::__1::allocator<CLPressure::Sample> > >, std::__1::less<int>, true> >=Q}}}{map<int, int, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, int> > >={__tree<std::__1::__value_type<int, int>, std::__1::__map_value_compare<int, std::__1::__value_type<int, int>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, int> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, int>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, int>, std::__1::less<int>, true> >=Q}}}ii}}8
#Warning unknown metric %x requested for %s
void CLDaemonStats::submitMetric(const CLDaemonStats_Type::LocationCellTowerSources &)
@CellAwd, submit, metric.valid, %{public}d, metric.timestamp, %{public}.3f, metric.bundleId, %{private}s, attempts, %{public}d, network, %{public}d, tiles, %{public}d, uknown, %{public}d, nAls, %{public}d, cellsAls, %{public}d, nCurrent, %{public}d, kbCurrent, %{public}d, nNeighbor, %{public}d, kbNeighbor, %{public}d
CLPlatformInfo::motionCaps().deviceMotionFastPath
useMag
interval
virtual void CLSensorFusionServiceFastPath::start()
Unable to establish fast path with valid clientID,serviceRef,%p,properties,%@
Fast path has been initialized,clientID,%u,serviceRef,%p,useMag,%d,mode,%d,interval,%f
virtual void CLSensorFusionServiceFastPath::stop()
Fast path is being closed,clientID,%u,serviceRef,%p,useMag,%d,mode,%d,interval,%f
static bool CLSensorFusionServiceFastPath::populateDeviceMotion(IOHIDEventRef, uint32_t, CLSensorFusionService::Sample &)
Event ref invalid
Unexpected device motion report type %d, returning
virtual void CLSensorFusionServiceFastPath::applicationStateChanged(bool)
Application state changed, %d
virtual std::shared_ptr<CLIoHidInterface::Device> CLIoHidFastPathInterface::buildDevice(CLIoHidInterface::Device::Description)
[CLIoHidInterface] Adding new FastPathDevice
CLFilteredLocationControllerSilo
filtered
virtual bool CLFilteredLocationController::registerForNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::RegInfo &)
CLIENT: %d, registerForNotification, distanceFilter, %.1lf, checkInterval, %.1lf, sleepProof, %d, operatingMode, %d
CLIENT: Clearing cached notification for %d
CLIENT: register for notification, %d, %s
virtual bool CLFilteredLocationController::unregisterForNotification(int, const CLLocationProvider_Type::Notification &)
CLIENT: unregister for notification, %d, %s, wasRegistered, %d
virtual bool CLFilteredLocationController::shouldNotifyClient(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &, const char &, CLLocationProvider_Type::RegInfo &)
ignoring (equal|older) location,%.8lf,%.8lf,HorAcc,%.1lf,Type,%s,Confidence,%d,Timestamp,%.3f,Lifespan,%.3f,Age,%.3f,integrity,%d
<%+.8f,%+.8f> is stale from %.3fs ago, not using for distance filtering
distance filter %.2f not exceeded by <%+.8f,%+.8f> and <%+.8f,%+.8f> (distance %.2f)
regular
fine
coarse
void CLFilteredLocationController::onLocationTimer(CFRunLoopTimerRef)
Now registered for %s location notifications, operating mode %d
no more location clients - not re-registering
void CLFilteredLocationController::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)
leaving location as it would turn on in %.3fs anyway
turning off location requests and re-scheduling for %.3fs later
(this->fMutex).__assertOwned()
Best
Fine
Coarse
void CLFilteredLocationController::logRequiredNotificationLevel(bool)
@ClxClient, accuracy, %{public}d, %{public}d, %{public}d, level, %{public}s, reg?, %{public}d
kNotificationLocation
kNotificationLocationCoarse
kNotificationLocationFine
void CLFilteredLocationController::checkMinimumDistanceFilter()
CLIENT: notification, %s, clients, %lu, distanceFilter, %.1lf, sleepProof, %d
#Warning Ignoring request for sleep-proof location updates with no check interval
CLIENT: distanceFilter, %.1lf, fDistanceFilter, %.1lf
minimum distance unchanged from %.3f, still requesting location at %.3f (%.3fs away)
minimum distance changed to %.3f from %.3f
scheduling location requests for %.3fs later
no location currently available, starting it immediately
wake interval unchanged from %.3f, still waking at %.3f (%.3fs away)
wake interval changed to %.3f from %.3f
void CLFilteredLocationController::onManagerNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)
#Warning Location Services reset, clearing local cache
#Warning Location Services state changed, clearing local cache
virtual void CLFilteredLocationController::lastConfidentLocationNotification(const CLDaemonLocation &)
Cached location,%.8lf,%.8lf,HorAcc,%.1lf,Type,%s,Confidence,%d,Timestamp,%.3f,Lifespan,%.3f,Age,%.3f,integrity,%d
No valid last confident location
void CLNmeaScreener::ExternalLocationData::fillData(const CLLocationProvider_Type::NotificationData &)
CLNmeaScreener,type,%d,lat,%{private}.8lf,lon,%{private}.8lf,timestampGPS,%.1lf,machContTime,%.1lf,fHorizontalUncertainty,%.1lf
bool CLNmeaScreener::ExternalLocationData::isLocationWithinBounds(CLDistanceCalc &, double, double) const
currentMach,%.1lf,dataMach,%.1lf,posDiff,%.2lf,positionDiffBound,%.2lf
GpsSimulatorTestMode
CLNmeaScreener::CLNmeaScreener()
CLNmeaScreener,fSimulatorMode,1
GPGGA
GPRMC
bool CLNmeaScreener::screenData(CLNmeaSentenceType, double, double, bool, double)
%s,dataCFAbsoluteTime,%.2lf,Data latency check failed
%s,dataCFAbsoluteTime,%.2lf,location check failed
void CLNmeaScreener::updateExternalLocation(const CLLocationProvider_Type::NotificationData &)
%s,invalid location input,type,%d
bool CLNmeaScreener::verifyDataLatency(const CLNmeaSentenceType, const double)
%s,current time not available,dataCFAbsoluteTime,%.2lf
%s,derivedCFAbsTime,%.2lf,dataCFAbsoluteTime,%.2lf,timeDiff,%.1lf
bool CLNmeaScreener::verifyWithExternalLocation(const double, const double, const double)
%s,external location unavailable,gps,%.1lf,wifi,%.1lf,cell,%.1lf,LAC,%.1lf
CLRegionPreloadManifestTile-Mutex
pInput != nullptr
virtual bool CLRegionPreloadManifestTile::traverseTileFile(FILE *, const CLTileFile::TraverseDetails &)
Traversing preload manifest file
Preload manifest tile size = %lu
failed to allocate transit tile
failed to decode transit tile protobuf, encrypted=%{public}lu tile=%{public}s
failed to get fields in manifest
ver,%d,x,%d,y,%d,generated,%.01lf,age,%.01f,ageThresh,%d
Reading new market, {%.06lf,%.06lf}, {%.06lf,%.06lf}
Adding new tile to market, [%.06lf,%.06lf]
loaded transit tile %s with %lu regions
CLRegionPreloadManifestTile(
super=
, numMarkets=
^{os_state_data_s=I(?=b32I){os_state_data_decoder_s=[64c][64c]}[64c][0C]}16@?0^{os_state_hints_s=I*II}8
UnknownStateTracker
T^v,R,N
IsSimulator
%@ %@ (%@)
<null>
<name>
<version>
<build>
hw.model
IOPlatformExpertDevice
IOPlatformSerialNumber
CLPlatformInfo::Provider CLPlatformInfo::getProviders()_block_invoke
unknown hardware type %{private}d
watch-companion
ReleaseType
NonUI
InternalBuild
GpsForcePlosSupport
bool CLPlatformInfo::supportsPLOS()
#Warning PLOS: ignoring hw. forceSupport,%d
GpsForceSupportOutdoorMatching
bool CLPlatformInfo::supportsOutdoorMatching()
#Warning OBM, ignoring hw. forceSupport,%d
com.apple.demo-settings
StoreDemoMode
FProgramNumber
CLOperatorSettingsSilo
CLOperatorSettings
NewOperatorNotification
void CLOperatorSettings::onOperatorChangeNotification(CFNotificationCenterRef, CFStringRef, const void *, CFDictionaryRef)
Could not refresh settings
virtual void CLOperatorSettings::setInternal(const CFStringRef, const CFTypeRef)
should not write to operator bundle
virtual void CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLOperatorSettings_Type::Notification, NotificationData_T = CLNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLOperatorSettings_Type::Notification, NotificationData_T = CLNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLOperatorSettings_Type::Notification, NotificationData_T = CLNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLOperatorSettings_Type::Notification, NotificationData_T = CLNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLOperatorSettings_Type::Notification, NotificationData_T = CLNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLOperatorSettings_Type::Notification, NotificationData_T = CLNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::listClients() [Notification_T = CLOperatorSettings_Type::Notification, NotificationData_T = CLNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
kExerciseMinuteDataCodingKeyStartDate
kExerciseMinuteDataCodingKeyRecordId
kExerciseMinuteDataCodingKeySourceId
%@, <recordId %lu, startDate %@, sourceId %@>
!_enabled
-[CLRouteListener disable]
#Warning CLC: Disable CLRouteListener when already disabled, shutdown?
-[CLRouteListener navigationListener:didUpdateRouteSummary:]
CLC: Received a route
#Warning CLC: Starting route without an appoximate location
-[CLRouteListener navigationListener:didUpdateTransitSummary:]
CLC: Received a transit route
-[CLRouteListener navigationListener:didUpdateGuidanceState:]
CLC: Received a navigation state change
-[CLRouteListener logRoute:]
CLC: Route type        : %{private}d, %{private}@
Has origin
CLC: Route origin      : %{public}s
Has destination
CLC: Route destination : %{public}s
CLC: Route dest name   : %{private}@
CLC: Route travel time : %{private}.01lf
-[CLRouteListener logTransitRoute:]
CLC: Transit Stop:
CLC:     ID  : %{private}llu
CLC:     LAT : %{private}lf
CLC:     LON : %{private}lf
CLC: Transit Link:
CLC:     DEP : %{private}lf
CLC:     ARR : %{private}lf
CLC:     Stop From :
CLC:         ID  : %{private}llu
CLC:         LAT : %{private}lf
CLC:         LON : %{private}lf
CLC:     Stop To :
-[CLRouteListener logState:]
CLC: Guidance Level   : %{public}@
CLC: Navigation State : %{public}@
CLC: Transport Type   : %{private}@
AUTOMOBILE
TRANSIT
WALKING
BICYCLE
UNKNOWN_TRANSPORT_TYPE
FERRY
RIDESHARE
NONE
PREPARE_TO_TRAVEL
TRACKING
TURN_BY_TURN
NOT_NAVIGATING
PROCEEDING_TO_ROUTE
ON_ROUTE
OFF_ROUTE
BAD_ROUTE
RECALCULATING
END_OF_ROUTE
END_OF_LEG
DumpCompassCalibrationDatabaseOnCompassStart
CompassInterval
CompassIgnoreGyro
CLCompass6::CLCompass6()
Legacy compass, interval (%.3f) gyro (%d)
virtual void CLCompass6::start(bool)
Legacy compass started. Cover attached %d
%.0f
virtual void CLCompass6::start(bool)_block_invoke
Dumped compass cal database with id %@
Compass is requesting device motion with mode 0x%x
virtual void CLCompass6::stop()
Legacy compass stopped.
static void CLCompass6::onMagnetometerData(const CLMagnetometer::Sample *, void *)
Notify after %.3f seconds of no event.
CompassAlignment
Type,%s,compassJustAlignedToStableField,%d,timestamp,%20.20f
Type,%s,magneticHeading,%20.20f,trueHeading,%20.20f,accuracy,%20.20f,magneticField.x,%20.20f,magneticField.y,%20.20f,magneticField.z,%20.20f,bias.x,%20.20f,bias.y,%20.20f,bias.z,%20.20f,level,%d,magnitude,%20.20f,inclination,%20.20f,horizontal,%20.20f,timestamp,%20.20f
notified clients. sampleCount,%d,compass.compass.calibrationLevel,%d,compass.timestamp,%f
markets
T@"NSMutableArray",&,N,V_markets
CMAvailable
CMAuthorized
CMErrorMessage
CMReturnCode
CMOnBodyStatusManagerClassifierTheta0
CMOnBodyStatusManagerClassifierTheta1
CMOnBodyStatusManagerClassifierTheta2
CMOnBodyStatusManagerClassifierTheta3
CMOnBodyStatusManagerClassifierTheta4
CMOnBodyStatusManagerClassifierTheta5
CMOnBodyStatusManagerClassifierMinLowPower
CMOnBodyStatusManagerClassifierMaxLowPower
CMOnBodyStatusManagerClassifierMaxHighPower
CMOnBodyStatusManagerLowBandStart
CMOnBodyStatusManagerLowBandStop
CMOnBodyStatusManagerHighBandStart
CMOnBodyStatusManagerHighBandStop
CMOnBodyStatusManagerWakeThreshold
CMOnBodyStatusManagerOddsThreshold
CMOnBodyStatusManagerMedianFilterSize
CMOnBodyStatusManagerConfidenceThreshold
CMOnBodyStatusManagerUseHysteresis
CMOnBodyStatusManagerUseAngleOverride
CMOnBodyStatusManagerAngleMetricThreshold
CMOnBodyStatusManagerManufacturer
CMPedometerDataObject
CMPedometerDataArray
CMPedometerStartTime
CMPedometerStopTime
CMPedometerCalibrationBins
CLMotionSyncStoreLastUpdate
CMPedometerFetchRemoteCalibrations
CMPedometerCalibrationTypeId
CMNatalimetrySessionId
CMNatalimetryRecordId
CMNatalimetryNatalieDataStartDate
CMNatalimetryNatalieDataMets
CMNatalimetryNatalieDataNatalies
CMNatalimetryNatalieDataBasalNatalies
CMNatalimetryNatalieDataSourceId
CMNatalimetryNatalieDataArray
CMNatalimeterSetUserHeightMeter
CMNatalimeterSetUserWeightKG
CMNatalimeterSetUserAgeYr
CMNatalimeterSetUserBiologicalSex
CMNatalimeterSetUserCondition
CMNatalimeterSetUserPal
CMNatalimeterSetUserHrmin
CMNatalimeterSetUserHronset
CMNatalimeterSetUserVo2max
CMNatalimeterSetUserRunVo2max
CMNatalimeterSetUserOnsetVo2max
CMOnBodyStatusData
CMSedentaryTimerIsArmed
CMSedentaryTimerStartTime
CMSedentaryTimerPeriodInterval
CMSedentaryTimerReminderInterval
CMSedentaryTimerAutoReschedule
CMSedentaryTimerAlarmData
CMMotionActivityStartTime
CMMotionActivityStopTime
CMMotionActivityData
CMMotionActivityDataArray
CMActivityData
CMOverrideSidebandOverride
CMStateSidebandState
CMOverrideResult
CMSidebandSensorFusionEnable
CMSidebandSensorFusionLatency
CMSidebandSensorFusionSnoop
CMSidebandSensorFusionSuccess
CMMotionStateSim
CMMotionStateSimState
CMMotionStateSimResult
CMVehicleConnectionStartTime
CMVehicleConnectionEndTime
CMVehicleStateDeviceId
CMDeviceHasOriginalBackCamera
CMCameraVcmActuatorId
CMCompassCalibrationData
CMExerciseMinuteRecordId
CMExerciseMinuteStartDate
CMExerciseMinuteSourceId
CMExerciseMinuteDataArray
CMWorkoutAttributes
CMWorkoutTimeout
CMSwimKeyDataRecord
CMSwimKeyDataArray
CMSignificantElevationKeyQueryTimeRange
CMSignificantElevationKeySample
CMCaptureModeData
CMFallSetStatsEnabled
CMFallSetStatsNumberOfAvailableFiles
CMFallSetStatsNameOfCurrentFile
CMFallSetStatsSizeOfCurrentFile
CMFallStatsMode
CMFallStatsWakeAP
CMSpringKeyDataRecord
CMSpringKeyDataArray
CMFitnessMachineDataRecord
CMDatabaseType
CMFileSize
CMMotionAlarmKey
virtual CLWifiService_Type::AssociationState CLWifiLocationProviderExternal::getAssociatedState(bool) const
WIFI_LOC: failed to get power state
virtual bool CLWifiLocationProviderExternal::startWifiScan(CLWifiService_Type::ScanType, bool, bool) const
@WifiFlow, startscan, %{public}s
v16@?0^{CLMotionState=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{CLMotionActivity=iiiiBfdBiddii{?=b1b1b1b1b1}}QQii{CLWifiServiceClient=@{function<void (int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)>={type=[32C]}^{__base<void (int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)>}}{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{AssociationState={optional<CLWifiService_Type::AccessPoint>=(?=c{AccessPoint={CLMacAddress=Q}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}iiiddB})B}}B}@@BBBBBB{CLMotionActivity=iiiiBfdBiddii{?=b1b1b1b1b1}}{list<CLMotionActivity, std::__1::allocator<CLMotionActivity> >={__list_node_base<CLMotionActivity, void *>=^{__list_node_base<CLMotionActivity, void *>}^{__list_node_base<CLMotionActivity, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLMotionActivity, void *> > >=Q}}@}8
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Framework/CoreMotion/CMElevationData.mm
sample
sourceId && startDate && endDate
kCMElevationDataCodingKeyRecordId
kCMElevationDataCodingKeySourceId
kCMElevationDataCodingKeyStartDate
kCMElevationDataCodingKeyEndDate
kCMElevationDataCodingKeyElevationAscended
kCMElevationDataCodingKeyElevationDescended
%@, <startDate, %@, endDate, %@, elevationAscended, %lu, elevationDescended, %lu>
nCatherine
nVeryLowCatherine
nLowCatherine
nHighCatherine
nVeryHighCatherine
nGoodCatherine
nInterpolatedCatherine
nSampleAndHoldCatherine
minGoodCatherine
maxGoodCatherine
meanCatherine
meanGoodCatherine
firstCatherine
firstCatherineStartTime
longestDropout
totalDropoutTime
nDropout
onsetReason
onsetCatherine
userMaxCatherine
persistedMinHR
hasNCatherine
TI,N,V_nCatherine
hasNVeryLowCatherine
TI,N,V_nVeryLowCatherine
hasNLowCatherine
TI,N,V_nLowCatherine
hasNHighCatherine
TI,N,V_nHighCatherine
hasNVeryHighCatherine
TI,N,V_nVeryHighCatherine
hasNGoodCatherine
TI,N,V_nGoodCatherine
hasNInterpolatedCatherine
TI,N,V_nInterpolatedCatherine
hasNSampleAndHoldCatherine
TI,N,V_nSampleAndHoldCatherine
hasMinGoodCatherine
Tf,N,V_minGoodCatherine
hasMaxGoodCatherine
Tf,N,V_maxGoodCatherine
hasMeanCatherine
Tf,N,V_meanCatherine
hasMeanGoodCatherine
Tf,N,V_meanGoodCatherine
hasFirstCatherine
Tf,N,V_firstCatherine
hasFirstCatherineStartTime
Tf,N,V_firstCatherineStartTime
hasLongestDropout
Tf,N,V_longestDropout
hasTotalDropoutTime
Tf,N,V_totalDropoutTime
hasNDropout
TI,N,V_nDropout
hasOnsetReason
Ti,N,V_onsetReason
hasOnsetCatherine
Tf,N,V_onsetCatherine
hasUserMaxCatherine
Tf,N,V_userMaxCatherine
hasPersistedMinHR
Tf,N,V_persistedMinHR
kOnsetNotSet
kOnsetElevated
kOnsetActive
kOnsetNotElevated
kOnsetTimeout
CLBTLEFenceManagerConcrete::CLBTLEFenceManagerConcrete(id<CLIntersiloUniverse>)
#Warning Overriding FenceStartDelay,%{private}.2f
iB: Scheduling initialization delay,%{private}.2f, silo,%{private}p
void CLBTLEFenceManagerConcrete::unlockedInitialize()
iB: Already initialized
btle_fence_installed
btle_fence_uninstalled
virtual void CLBTLEFenceManagerConcrete::requestRegionState(const CLBTLEBeaconRegion_Type::MonitoredRegion &)
iB: Region,%{private}s, has state,%{private}d
#Warning Unable to find region,%{private}s, in the cache
#Warning Authorization error,%{public}d, while requesting state for region,%{private}s
void CLBTLEFenceManagerConcrete::onAuthorizationNotification(int, const CLBeaconFenceAuthorizationManager_Type::Notification &, const CLBeaconFenceAuthorizationManager_Type::NotificationData &)
Unable to monitor the zone for region,%{private}s
iB: Already resumed monitoring for fence,%{private}s
Unable to unmonitor the zone for fence,%{private}s
iB: Fence,%{private}s, is not being monitored, the suspension request will be ignored
btle_fence_resume
btle_fence_suspend
virtual bool CLBTLEFenceManagerConcrete::registerForNotification(int, const CLBTLEFenceManager_Type::Notification &, const std::string &)
iB: Pending notification for fence,%{private}s, state,%{private}d, has expired
Pending iBeacon notification
userMets
truthMets
userMetsSource
truthMetsSource
metsFM
Td,N,V_userMets
Td,N,V_truthMets
hasUserMetsSource
Ti,N,V_userMetsSource
hasTruthMetsSource
Ti,N,V_truthMetsSource
hasMetsFM
Tf,N,V_metsFM
kFitnessMachine
-[CRCollectionDelegate requester:didFailWithError:]
#warning: domain %s code %ld
tolerateIncompatibleData
TB,N,V_tolerateIncompatibleData
Connection
close
MicroLocation
v32@?0@8Q16^B24
v32@?0@8@16^B24
 MCC=
 AND MNC=
 AND TAC=
 AND CI=
 AND UARFCN=
 AND PID=
 AND RSCP=
 AND ECN0=
 AND BANDINFO=
Infinity
-Infinity
CLWifiTileHeaderDatabase::CLWifiTileHeaderDatabase(const std::string &, const std::string &)
not connected to wifi #tile header table
bool CLWifiTileHeaderDatabase::saveWifiTileHeader(const CLWifiTileHeaderEntry &)
bool CLWifiTileHeaderDatabase::deleteByTileXY(std::tuple<int, int>)
 = ? AND 
 = ? 
CL::optional<CLWifiTileHeaderEntry> CLWifiTileHeaderDatabase::selectByTileXY(std::tuple<int, int>)
int CLWifiTileHeaderDatabase::countTileHeaders()
failed to select count(*) from wifi #tile header table
isTimestampColumn
bool CLWifiTileHeaderDatabase::updateTimestampByTileXY(cl::chrono::CFAbsoluteTimeClock::time_point, std::tuple<int, int>, const std::string &)
 = ? WHERE 
 = ?
@TileList, touch, ignoring, 0, #CloneMe
failed to update timestamp of #tile header
CL::optional<cl::chrono::CFAbsoluteTimeClock::time_point> CLWifiTileHeaderDatabase::selectAccessTimestampByTileXY(std::tuple<int, int>)
std::vector<CLWifiTileHeaderEntry> CLWifiTileHeaderDatabase::selectAll()
static std::unique_ptr<CLSqliteDatabase> CLWifiTileHeaderDatabase::connectAndCreateTableIfNotExistsIfNecessary(const std::string &, const CLSqliteDatabase::ColumnInfo *, const CLSqliteDatabase::SqliteProperties &)
failed to connect to wifi #tile header database
failed to connect to wifi #tile heeaders table
successfully created wifi #tile headers table
TileX
TileY
SouthwestLatitude
SouthwestLongitude
DeltaLatitude
DeltaLongitude
MinimumAltitude
MaximumAltitude
ExpirationAge
Version
Flags
NumberOfIndexEntries
AccessTimestamp
GizmoSyncTimestamp
NumberOfInputPoints
kSedentaryTimerDataCodingKeyStartDate
kSedentaryTimerDataCodingKeyFiredDate
kSedentaryTimerDataCodingKeyAlarmType
kSedentaryTimerDataCodingKeyDidWake
Reminder
Final
ActiveReminder
InVehicleReminder
%@, <startDate %@, firedDate %@, alarmType %@, didWake %@>
firedDate
alarmType
v24@?0{shared_ptr<std::__1::vector<CLElevationChangeEntry, std::__1::allocator<CLElevationChangeEntry> > >=^{vector<CLElevationChangeEntry, std::__1::allocator<CLElevationChangeEntry> >}^{__shared_weak_count}}8
v24@?0{shared_ptr<std::__1::vector<CLCoarseElevationChangeEntry, std::__1::allocator<CLCoarseElevationChangeEntry> > >=^{vector<CLCoarseElevationChangeEntry, std::__1::allocator<CLCoarseElevationChangeEntry> >}^{__shared_weak_count}}8
void CLOdometerNotifierWatch::updateCoarseElevationSubscription()
CoarseElevation,phone,1,watch,1
CoarseElevation,src,phone,0,watch,1
CoarseElevation,src,phone,1,watch,0
CoarseElevation,src,phone,0,watch,0
void CLOdometerNotifierWatch::updateStateOnAuthorization(bool)
Update location authorization, current, %d, new, %d
void CLOdometerNotifierWatch::enableGPS()
Enable GPS; Start GPS subscription
void CLOdometerNotifierWatch::disableGPS()
Disable GPS; Stop GPS subscription
void CLOdometerNotifierWatch::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)
Location batch notification size %ld
#Warning Received unhandled location provider notification, %d
static bool CLOdometerNotifierWatch::updateOdometerWithEntry(CLOdometerEntry &, double &, CLOdometerEntry &, CFAbsoluteTime)
Incoming odometer, %.8f
#Warning Current odometer sample fails time check. Gps,%.2lf,%.2lf,startTime,%.2lf,%.2lf,odometer,%.2lf,%.2lf
Source may have reset. Gps,%.2lf,%.2lf,startTime,%.2lf,%.2lf,odometer,%.2lf,%.2lf
Odometer source change,previous,%lf,current,%lf
void CLOdometerNotifierWatch::notifyLocation(const CLDaemonLocation &, const CLDaemonLocationPrivate &)
Drop entry! distance, %.8f, startTime, %.8f, gps altitude, %.8f, odometer, %.8f, accuracy, %.8f, gpsSpeed, %.8f, gpsSpeedAccuracy, %.8f, timestampGps, %.8f, rawSpeed, %.8f, originDevice, %d, locationType: %d
Notifying odometer clients, distance, %.8f, startTime, %.8f, gps altitude, %.8f, odometer, %.8f, accuracy, %.8f, gpsSpeed, %.8f, gpsSpeedAccuracy, %.8f, timestampGps, %.8f, rawSpeed, %.8f, originDevice, %d, groundAltitude, %.8f, groundAltitudeUncertainty, %.8f, smoothedGPSAltitude, %.8f, smoothedGPSAltitudeUncertainty, %.8f
PressureSensorSettlingTime
ElevationSourceTimeoutInterval
LogAllDayElevationFromAllSources
CLCoarseElevationChangeEntry CLCoarseElevationFusion::feedSample(const CLCoarseElevationChangeEntry &)
onCoarseElevation,startTime,%.3f,ascended,%d,source,%d,fused,startTime,%.3f,ascended,%d,source,%d
avgInterCalibrationTime
pctTurnsRejected
avgLapCorrection
numLaps
numLapInsertions
numLapsForConvergence
pctStrokesFailCurvature
pctStrokesFailMA
pctStrokesFailAccel
static void CLMetricCollectorBase::logStats(const CLSwimSessionStats &)
SessionStats,%s,%f,%s,%f,%s,%u,%s,%u,%s,%u,%s,%f,%s,%u,%s,%u,%s,%u,%s,%u,%s,%u,%s,%u
com.apple.reminders
Authorization
v32@?0@"NSString"8Q16^B24
PromptedSettings
AuthorizationUpgradeAvailable
stopTime
void CLClientManager::synchronizeAuthorizationChangeTypeDelete(const std::string &, const std::string &)
#authsync deleteObject: %{public}s
void CLClientManager::sendResetNotification()
#authsync sending kNotificationReset to the watch
void CLClientManager::requestRemotePromptForClient(CLDaemonClient *, CLClientManager_Type::AuthorizationRequestType)
#warning Cannot request always upgrade for client, %{public}s, client is not authorized when in use.
com.apple.locationd.bundle-/System/Library/PrivateFrameworks/FindMyDevice.framework
CLClientManagerSilo
com.apple.Maps
lastWifiImproveAccuracyNotification
WifiImproveAccuracyNotificationInterval
lastBluetoothImproveAccuracyNotification
BluetoothImproveAccuracyNotificationInterval
CLClientManager::ImproveAccuracyNotification::ImproveAccuracyNotification(CLClientManagerTechnology)
last improve accuracy notification for %s, %f, retry interval, %f
void CLClientManager::ImproveAccuracyNotification::clear()
clear %s improve accuracy notification
static void CLClientManager::shutdownInstance()_block_invoke
could not store clients data
com.apple.locationd.executable-
com.apple.locationd.bundle-
com.apple.watchkit
CLCapabilityMonitor
CLClientManager::CLClientManager(id<CLIntersiloUniverse>)
#authsync initializing sync store
CLAuthSyncManager
CLUsageSyncManager
#authsync isWatch: %{public}d, isCompanion: %{public}d
com.apple.locationd/Restrictions
Could not register for lock state darwin notification error %{public}d
com.apple.springboard.homescreenunlocked
Could not register for homescreen unlocked darwin notification error %{public}d
DisableAppInstallationChecks
NumEnablePromptsPerApplication
#warning Maximum location services enabled prompts per application overridden to %{public}d
v16@?0^{CLConnection=@@@@?@?@?@?}8
/System/Library/Frameworks/Social.framework/XPCServices/com.apple.twitter.xpc
/System/Library/Frameworks/Social.framework/XPCServices/com.apple.weibo.xpc
/System/Library/Frameworks/Social.framework/XPCServices/com.apple.facebook.xpc
airplane mode enabled, %d.
failed to fetch airplane mode state.
/System/Library/PrivateFrameworks/Weather.framework
com.apple.weather
/Applications/AdSheet.app
/System/Library/PrivateFrameworks/iAdCore.framework
/System/Library/Frameworks/Twitter.framework
/System/Library/Frameworks/Weibo.framework
/System/Library/Frameworks/Facebook.framework
/System/Library/SocialServices/Twitter.socialplugin
/System/Library/SocialServices/Weibo.socialplugin
/System/Library/SocialServices/Facebook.socialplugin
com.apple.Shoebox
/System/Library/PrivateFrameworks/PassKitCore.framework
com.apple.Passbook
/System/Library/PrivateFrameworks/Parsec.framework
/System/Library/PrivateFrameworks/CoreParsec.framework
#warning Can't migrate "%{public}s" to "%{public}s": client already exists with an auth of "%{public}d"
BundleId
BundlePath
Executable
Can't migrate "%{public}s" to "%{public}s": NVP failure
Migrated "%{public}s" to "%{public}s"
"%{public}s" not found, skipping migration
nullptr == fCrashGraceAssertionTimer
void CLClientManager::prepareForReconnectionOfClients()
#warning Can't get clients for filing crash-grace CLInUseAssertions
#warning Can't get client state for key:%{public}s to file crash-grace CLInUseAssertions
BackgroundLocationTimeStarted
BackgroundLocationTimeStopped
Client %s had ongoing background location, taking temporary crash-grace CLInUseAssertion
void CLClientManager::sendAppStatusNotification()_block_invoke
Sending app status change notification
void CLClientManager::onWatchdogTimer()
#warning no watchdog event from %{public}s, deleting
void CLClientManager::handleNewConnection(CLConnection *)
Client %{public}s connected
void CLClientManager::handleDisconnection(CLConnection *)
Got disconnection for unknown client
Client %{public}s disconnected
void CLClientManager::resetClients()
#warning location services settings are frozen by restrictions - resetting
resetting and disconnecting all clients from daemon
Registered
Whitelisted
TimeMissing
SupportedAuthorizationMask
NSNull
CFDictionaryRef CLClientManager::copyClients()_block_invoke
Client record is '%{public}s' in CLClientManager::copyClients for clientKey %{public}@
void CLClientManager::updateClientAllowableAuthorizationMask(const CLClientManager_Type::Name &, CLLocationDictionaryUtilitiesAuthorizationMask)
Client %s allowable mask (%lu) no longer contains authorization level (%lu) downgrading to (%lu)
Client %{public}s missing for authorization update, but didn't we just create it?
void CLClientManager::markAlwaysAuthorizationUsedForClient(const CLClientManager_Type::Name &)
Considering whether to mark client, %s, for always power use
Not marking client %s as having used Always-powers (not Always authorized (%s))
TrialPeriodBegin
TrialPeriodNeedsReprompt
Purpose
LocationDesiredAccuracy
LocationTechnologiesInUse
LocationDistanceFilter
BatchEnabled
void CLClientManager::setClientState(const CLClientManager_Type::Name &, const CLClientManager_Type::ClientState &)
currently %{public}lu non-system location clients
RemoteUsage
bool CLClientManager::setClientServiceActiveAtTime(const CLClientManager_Type::Name &, CLClientServiceType, bool, bool, double, CLClientManager::Device)
Service: name, %s, type, %s, active, %d
void CLClientManager::markClientServiceUsed(const CLClientManager_Type::Name &, CLClientServiceType)
Service: name, %s, type, %s, marked as used
void CLClientManager::clearAllClientsRemoteLocation()
couldn't get keys for client dictionary
bool CLClientManager::wakeupLaunchdManagedClient(const std::string &)
Wakeup Launchd Managed Client: <%{public}s>
/usr/libexec/UserEventAgent
Can't find %{public}s connection
void CLClientManager::clearClientRegions(const std::string &)
clearing regions for client '%s'
void CLClientManager::clearClientSignificantLocationChange(const std::string &)
clearing significant location change for client '%s'
SignificantTimeStarted
void CLClientManager::setClientMissingTime(const std::string &, const CFAbsoluteTime &)
How can an app be missing if we don't have an entry for it?
bool CLClientManager::hasAuthorizedClients()
void CLClientManager::repromptOneEligibleAlwaysApp()
Should never be executed in this context
Skipping #reprompt iteration because one is already underway
Couldn't get keys for client dictionary
ClientRepromptAlwaysNotificationInterval
Not iterating for #reprompt: disabled
System Service %{public}s shouldn't be eligible for a reprompt, but is
Creating trial period #reprompt notification for %{public}s
bool CLClientManager::isClientWhitelisted(const CLClientManager_Type::Name &)
isClientWhitelisted, %{public}s, %{public}s, %{public}s
executable, %{public}s, strippedName, %{public}s, systemBase, %{public}s
CLTypeRegistrationResult CLClientManager::getClientEffectiveRegistrationResult(const CLClientManager_Type::Name &)
getClientEffectiveRegistrationResult, %{public}s, %{public}s, %{public}s, CLClientRegistrationResult, %{public}s, CLCommonLocationServicesEnabled, %{public}d
location disabled system-wide, denying internal executable %{public}s
location disabled system-wide, denying executable %{public}s
void CLClientManager::cacheStatusOfClients()
Couldn't get keys for client dictionary, deauthorizing all clients
CLTypeRegistrationResult CLClientManager::getClientStaticRegistrationResult(const CLClientManager_Type::Name &)
allowing internal executable %{public}s
#Error no bundle ID or bundle path found - denying %{public}s
platform does not support system service, %{public}s, required capabilities.
already denied executable %{public}s
already authorized WhenInUse executable %{public}s
already authorized Always executable %{public}s
!"Illegal dictionary-utility parse result"
LOCATION_CLIENT_PERMISSION_MESSAGE_REDUCED
LOCATION_CLIENT_PERMISSION_MESSAGE
CFStringRef CLClientManager::copyClientPurposeForRegistrationResult(const CLClientManager_Type::Name &, CLClientRegistrationResult, bool)
Requesting client (%{public}s) purpose for unsupported registration type %{public}d
purpose string from %s's bundle: '%s'
purpose string from %s's property: '%s'
unable to copy purpose string from client '%{public}s'
LOCATION_ACCURACY
wapi
IMPROVE_LOCATION_ACCURACY_WLAN
IMPROVE_LOCATION_ACCURACY_WIFI
IMPROVE_LOCATION_ACCURACY_BLUETOOTH
SETTINGS
void CLClientManager::ensureTechnologyEnabled(CLClientManagerTechnology, CLDaemonClient *)
ImproveAccuracyNotification object not created for technology, %{public}s
CLAppMonitor
post improve accuracy notification, technology, %s, client, %s
LOCATION_DISABLED
LOCATION_DISABLED_SETTINGS
LOCATION_DISABLED_CANCEL
CFUserNotificationRef CLClientManager::createAndPostClientPrefsNotification(const CLClientManager_Type::Name &)
Could not create client prefs notification for %{public}s
Could not create runloop source for client prefs notification for %{public}s
LOCATION_CLIENT_PERMISSION_REPROMPT
CONTINUE
LOCATION_CLIENT_PERMISSION
LOCATION_CLIENT_PERMISSION_ALWAYS_BUTTON
LOCATION_CLIENT_PERMISSION_WHENINUSE_BUTTON
LOCATION_CLIENT_PERMISSION_NEVER_BUTTON
LOCATION_CLIENT_PERMISSION_WHENINUSE
LOCATION_CLIENT_PERMISSION_OK
DONT_ALLOW
LOCATION_CLIENT_PERMISSION_UPGRADE_WHENINUSE_ALWAYS
CFUserNotificationRef CLClientManager::createAndPostClientUserNotification(const CLClientManager_Type::Name &, CLClientManager_Type::AuthorizationRequestType, notification_handler_method_t)
Could not create client user notification for %{public}s
Could not create runloop source for client user notification for %{public}s
CLTypeRegistrationResult CLClientManager::requestClientAuthorization(CLDaemonClient *, CLClientManager_Type::AuthorizationRequestType)
location services settings are frozen by restrictions - denying %{public}s
already presenting re-enable prompt for %s
presenting re-enable prompt for %s
%s authorization in progress
#warning Auto-denying %{public}s because %{public}s is already denied: app denied %{public}d daemon denied %{public}d
#Notice ERROR: %{public}s is depending on legacy on-demand authorization, which is not supported for new apps
Client %s requested a big switch prompt, but the big switch is already on
Unrecognized/invalid request type: %{public}d
request type %d for %s
CLTypeAuthorizationStatus CLClientManager::registrationResultToAuthorizationStatus(const CLTypeRegistrationResult &)
unknown registsration result %{public}d
void CLClientManager::cancelClientNotification(CLDaemonClient *)
canceling notification for %s
void CLClientManager::setClientAuthorization(const CLClientManager_Type::Name &, CLClientAuthorizationStatus, const char *, bool)
Never(because_invalid)
Invalid(Unset)
Never
WhenInUse
Always
Setting executable: %{public}s, bundle: %{public}s, bundle path: %{public}s authorization to %{public}d (%{public}s)
%{public}s application deauthorized; deauthorizing daemon as well
%{public}s application deauthorized; daemon not yet used
%{public}s daemon deauthorized; deauthorizing application as well
%{public}s daemon deauthorized; app not yet used
com.apple.locationd
fClientManager && !fClientKey.empty() && !fReason.empty()
void CLClientManager::markClientInUseTransition(const std::string &, const std::string &, bool)
CLIUA: Could not find InUseAssertion with reason '%{public}s' for '%{public}s' to remove it
CLEmergencyController
bool CLClientManager::getNonSystemLocationClientKey(std::string &)
retrieved empty non-system location client key
void CLClientManager::checkRestrictions(bool)
Location services available %d; parental controls enabled %d (refresh %d)
#warning location is restricted; freezing client states
location is not restricted
AppSwitcherQuitAppTime
SBParentalControlsEnabled
bool CLClientManager::areParentalControlsEnabled(bool)
NameValuePair::get failed despite our bounds checking
location
bool CLClientManager::checkServiceStopped(const std::string &, CLClientServiceType)
#warning %{public}s time started exists (%{public}.2f), but time stopped (%{public}.2f) doesn't exist or is earlier for %{public}s - setting to %{public}.2f
void CLClientManager::checkLocationStopped(bool)
Resuming client '%s'
locationd-resume-on-crash
void CLClientManager::checkLocationStopped(bool)_block_invoke
Failed to resume '%{public}s': assertion not acquired
Failed to resume '%{public}s': init failure
Non-app client is was a background client?
void CLClientManager::scheduleAppStatusEvent()
Scheduling pending app status event
void CLClientManager::checkRegionsStopped()
#warning %{public}s region time started exists (%{public}.2f), but time stopped (%{public}.2f) doesn't exist or is earlier for %{public}s - setting to %{public}.2f
void CLClientManager::checkSignificantLocationChangeStopped()
SignificantTimeStopped
#warning Significant time started exists (%{public}.2f), but time stopped (%{public}.2f) doesn't exist or is earlier for %{public}s - setting to %{public}.2f
void CLClientManager::checkRangeStopped()
RangeTimeStarted
stop range for client '%s'
RangeTimeStopped
void CLClientManager::checkAppInstallationStatus()
could not retrieve bundle IDs
installation check found %ld uninstalled apps (amongst %ld total clients and %ld bundle IDs)
%s is missing
%s was explicitly uninstalled
%s has been missing for %.3fs (safe harbor threshold: %.3fs) - clearing
Deleting entry for %s
%s has been missing for %.3fs (safe harbor thershold: %.3fs)
%s was missing for %.3fs (safe harbor threshold: %.3fs) - clearing
%s restored within safe harbor time of %.3fs - keeping
updated AppUninstallTimer; next timer will fire in %.3fs
void CLClientManager::getAggregateLocationAppInfo(CLDaemonClient *, bool, CLClientManager_Type::ClientState &)
client, '%s', app's client cnt, %d, active, %d, spectator, %d, batchEnabled, %d, desiredAccuracy, %.2f, distanceFilter, %.2f
kCLConnectionMessageRanging
void CLClientManager::getAggregateRangeAppInfo(CLDaemonClient *, bool, bool &)
client, '%s', app's client cnt, %d, active, %d
void CLClientManager::markSystemServicesAsAuthorized()
bool CLClientManager::mayTakeProcessAssertion(CLDaemonClient *)
mayTakeProcessAssertion,%d,background,%d,slc,%d
void CLClientManager::onClientTrialRepromptNotification(CFUserNotificationRef, CFOptionFlags)
Received trial reprompt notification without a designated promptee
User has authorized continued access for %s at reprompt
User has selected 'settings' on reprompt for %{public}s... taking them there
prefs:root=Privacy&path=LOCATION
#warning No user response to client %{public}s (flags 0x%{public}lx)
void CLClientManager::onClientUserNotification(CFUserNotificationRef, CFOptionFlags)
#warning received notification for unknown client
Received response (%{public}s) for invalid/unrecognized response type (%{public}d)
void CLClientManager::openPreferences(const char *const)
open preferences with url, %{public}s
Couldn't create Preferences URL, %{public}s
void CLClientManager::openPreferences(const char *const)_block_invoke
could not launch Preferences
void CLClientManager::onClientPrefsNotification(CFUserNotificationRef, CFOptionFlags)
received notification for unknown client
#warning no user response to client %{public}s (flags 0x%{public}lx)
void CLClientManager::onImproveAccuracyPrefsNotification(CFUserNotificationRef, CFOptionFlags)
ImproveAccuracyNotification object not created for notification, %{public}p
prefs:root=WIFI
prefs:root=Bluetooth
#warning no user response for improve accuracy prefs notification %{public}s (flags 0x%{public}lx)
void CLClientManager::checkLocationServicesEnabledState(bool)
GPS_NETWORK: currentStatus(%d) isGpsControlledByNetwork(%d)
static bool CLClientManager::getClientNameFromPid(const pid_t &, CLClientManager_Type::Name &)
Setting executable %s
Setting bundle ID %s and executable %s
void CLClientManager::onDarwinNotification(int, const CLDarwinNotifier_Type::Notification &, const CLDarwinNotifier_Type::NotificationData &)
Keep Apps Up To Date changed
Unknown notification: %{public}d
void CLClientManager::onBTLEFenceNotification(int, const CLBTLEFenceManager_Type::Notification &, const CLBTLEFenceManager_Type::NotificationData &)
Received state request for region,'%s/%s'.
Received state transition for region,'%s/%s'.
void CLClientManager::onFenceNotification(int, const CLFenceManager_Type::Notification &, const CLFenceManager_Type::NotificationData &)
void CLClientManager::onAppMonitorNotification(int, const CLAppMonitor_Type::Notification &, const CLAppMonitor_Type::NotificationData &)
AppMonitor notification, %d, %s, pid, %d, bundleId, %s
AppMonitor notification, %d, %s, pid, %d, bundleId, %s, client, %s, connection, %p
'%{public}s' task suspended: removing client
void CLClientManager::onWifiServiceNotification(int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)
wifi power state, %d.
wifi enabled
void CLClientManager::onBluetoothServiceNotification(int, const CLBluetoothService_Type::Notification &, const CLBluetoothService_Type::NotificationData &)
bluetooth power state, %d.
bluetooth enabled
com.apple.webapp
com.apple.AdSheet
com.apple.AdSheetPad
com.apple.AdSheetPhone
com.apple.springboard
/System/Library/PrivateFrameworks/Assistant.framework
/System/Library/PrivateFrameworks/AOSNotification.framework
void CLClientManager::performMigration()
Removing entry for bundle ID %{public}s if present
location-reminders
%{public}s not supported, removing entry for bundle ID %{public}s if present
Removing entry for bundle path %{public}s if present
#warning bundle path, '%{public}s', does not exist on disk;  clearing.
AuthMigrate(%{public}s): Skipping: could not get client nvp
AuthMigrate(%{public}s): Authorization mask contains Always but not WhenInUse
Authorized
AuthMigrate(%{public}s): Skipping: no Authorized key
AuthMigrate(%{public}s): Preserving Authorization over Authorized
AuthMigrate(%{public}s): Y => Always
AuthMigrate(%{public}s): N => Never
AuthMigrate(%{public}s): Authorization mask already available
AuthMigrate(%{public}s): Imputing default supported authorization mask
Unable to save clients list after migration, data loss due to crash possible
/System/Library/LocationBundles
/AppleInternal/Library/LocationBundles
void CLClientManager::enumerateBundles()_block_invoke_2
Setting client for bundle path %s
bool CLClientManager::updateStaticAuthorizationMaskForClient(const CLClientManager_Type::Name &, CLLocationDictionaryUtilitiesAuthorizationMask, bool, bool)
#warning New authMask %{public}lu for client %{public}s implicitly extends its supported mask (%{public}d) until next connection & slide
#warning Never auth of novel client %{public}s... providing default of SomeKindOfYes until next connection & slide
BeaconRegionTimeStarted
BeaconRegionTimeStopped
FenceTimeStarted
FenceTimeStopped
LocationTimeStarted
LocationTimeStopped
VisitTimeStarted
VisitTimeStopped
RemoteLocationTimeStarted
RemoteLocationTimeStopped
MicroLocationTimeStarted
MicroLocationTimeStopped
RemoteFenceTimeStarted
RemoteFenceTimeStopped
ReceivingLocationInformationTimeStarted
ReceivingLocationInformationTimeStopped
NonPersistentSignificantTimeStarted
NonPersistentSignificantTimeStopped
startKey && stopKey
DARmap.plist
void CLClientManager::reduceAccuracy(const CLClientLocation &, CLClientManagerReduceAccuracyReplyBlock)
DAR: could not read map file %{public}s
q24@?0@8@16
DAR map: %s
DAR map sorted keys: %s
void CLClientManager::reduceAccuracy(const CLClientLocation &, CLClientManagerReduceAccuracyReplyBlock)_block_invoke_2
DAR: original location: %.8f, %.8f, %.2f
DAR:  reduced location: %.8f, %.8f, %.2f
v176@?0{?=ii{?=dd}ddddddddddidi{?=dd}diIii}8d168
#Warning DAR: applying default quantization %f
void CLClientManager::reduceAccuracy(const CLClientLocation &, CLClientManagerReduceAccuracyReplyBlock)_block_invoke
DAR: applying new quantization %f based on ap count %d
DAR: applying cached quantization %f
static bool CLClientManager::isAlteredAccessoryLocation(const CLClientLocation &)
ALTERED: location: %.8f, %.8f, %.2f, %d, %d
static bool CLClientManager::unalterAccessoryLocation(CLClientLocation &, const CLDaemonLocationPrivate &)
ALTERED: original location: %.8f, %.8f, %.2f, %d, %d
ALTERED:  unaltered location: %.8f, %.8f, %.2f, %d, %d
TOGGLE
CFStringRef _copyDisplayNameFromBundlePath(CFStringRef)
#warning could not get localized string '%{public}s'!
could not get UN localized bundle name from bundle at '%{public}s'; soup cannot be given to them.
Beacon
Circular
Ranging
PersistentSLC
Location
BackgroundLocation
RemoteLocation
RemoteCircular
ReceivingLocationInformation
NonPersistentSLC
kCLClientServiceMax != service
/usr/
/AppleInternal/
/System/
/Applications/AdSheet.app/
/Applications/AdSheet~ipad.app/
void thunkDeliverCFUserNotification(CFUserNotificationRef, CFOptionFlags)
CFUserNotification event delivery for unknown notification
virtual void CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLClientManager_Type::Notification, NotificationData_T = CLClientManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLClientManager_Type::Notification, NotificationData_T = CLClientManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLClientManager_Type::Notification, NotificationData_T = CLClientManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLClientManager_Type::Notification, NotificationData_T = CLClientManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLClientManager_Type::Notification, NotificationData_T = CLClientManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLClientManager_Type::Notification, NotificationData_T = CLClientManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::listClients() [Notification_T = CLClientManager_Type::Notification, NotificationData_T = CLClientManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
kCMMotionActivityCodingKeyType
kCMMotionActivityCodingKeyConfidence
kCMMotionActivityCodingKeyStartTime
kCMMotionActivityCodingKeyVehicleConnected
kCMMotionActivityCodingKeyVehicularGpsHint
kCMMotionActivityCodingKeyVehicularBasebandHint
kCMMotionActivityCodingKeyVehicularWifiHint
kCMMotionActivityCodingKeyVehicularMotionHint
kCMMotionActivityCodingKeyVehicularBTHint
%@ @ %f,<startDate,%@,confidence,%ld,unknown,%d,stationary,%d,walking,%d,running,%d,automotive,%d,cycling,%d>
vehicleConnected
TB,R,N,GisVehicleConnected
vehicleWifiHint
TB,R,N,GisVehicleWifiHint
vehicleGpsHint
TB,R,N,GisVehicleGpsHint
vehicleBasebandHint
TB,R,N,GisVehicleBasebandHint
vehicleMotionHint
TB,R,N,GisVehicleMotionHint
vehicleBTHint
TB,R,N,GisVehicleBTHint
startDate
T@"NSDate",R,N
unknown
stationary
walking
running
automotive
cycling
static bool CLRunningTrackDetector::detectRunningTrack(const std::vector<swan::stGPSsa> &, bool &)
CLRTD,too few points to detect
CLRTD,failed to convert input points to enu coordinates
CLRTD,loopStartIndex,%lu,loopEndIndex,%lu,out of enuCoordinates size,%lu
CLRTD,loop detected from,%.1lf,to%.1lf
static bool CLRunningTrackDetector::convertLLA2ENU(const std::vector<swan::stGPSsa> &, std::vector<std::array<double, 3> > &)
#Warning,CLRTD,Could not convert LLA Coordinate %{Private}.7lf,%{Private}.7lf to ENU
static bool CLRunningTrackDetector::isRunningTrackByDistToCenter(const std::vector<std::array<double, 3> > &)
CLRTD,non-track detected,numOutOfBoundaryPoints,%d,numOfPoints,%lu
CLRTD,track detected,numOutOfBoundaryPoints,%d,numOfPoints,%lu
void *CLTileFileWithTraversal::mmapTile(size_t &, int &)
TILE: mmapTile, prefer local file name because it exists, %s
TILE: mmapTile, can't open, %s, errno, %d, %s
TILE: can't stat, %s, errno, %d, %s
bool CLTileFileWithTraversal::fileGetNextSection(CLTileFileWithTraversal::CLMappedFile &, CLTilesManager_Type::SectionHeader &)
TILE: corrupt header, fileGetNextSection, size, %zd, readto, %lld, %d
virtual bool CLTileFileWithTraversal::traverseTileFile(FILE *, const CLTileFile::TraverseDetails &)
TILE: traverseTileFile, start, message, %s, isHeadersOnly, %d, isBinarySearch, %d, macAddressToSearch, %012llx
TILE: traverseTileFile, can't open tile
TILE: traverseTileFile, file is empty
TILE: thisSection, message, %s, readBytes, %lu, section, signature, 0x%x, sectionId, %d, sizeBytes, %d, headerSizeBytes, %d, name, %s
TILE: Invalid section signature, readBytes, %lu, section, signature, 0x%x, sectionId, %d, sizeBytes, %d
TILE: invalid tile file, bad allocation size, totalBytesInSection, %lu, maxAllocationSize, %lu
TILE: failed to allocate memory for, %lu
TILE: failed to read pSectionH, %lu, %lu
TILE: section, signature, 0x%x, sectionId, %d, headerSizeBytes, %u, sizeBytes, %u
TILE: ERROR: failed to fseek to, currentFileOffset, %lu, %u
TILE: traverseTileFile, done
virtual void CLTileFileWithTraversal::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const CLTileFile::TraverseDetails &)
TILE: CLTileFile, sectionId, %d, %s
virtual void CLTileFileWithTraversal::onTraversingTileHeader(const CLTilesManager_Type::TileHeader &)
TILE: tile, version, %d, y, %u, x, %u, corner, %.8f, %.8f, detlas, %.2f, %.2f, altitude, %f,  minAltitude, %f, maxAltitude, %f, numOfInputPoints, %d, generationTime, %.1f, expirationAge, %d, %d, age, %.1lf
virtual void CLTileFileWithTraversal::onTraversingTileHeaderKeyLatLon(const CLTilesManager_Type::TileHeaderKeyLatLon &)
TILE: onTraversingTileHeaderKeyLatLon, tileid, %s
TILE: tile.keylatlon, version, %d, y, %u, x, %u, corner, %.8f, %.8f, detlas, %.2f, %.2f, generationTime, %.1f, expirationAge, %d, age, %.1lf, sec_key, %016llx
virtual void CLTileFileWithTraversal::onTraversingTileHeaderLocation(const CLTilesManager_Type::TileHeaderLocation &)
TILE: tile.location, tileid, %s, serverName, %s
TILE: tile.location, version, %d, y, %u, x, %u, corner, %.8f, %.8f, detlas, %.2f, %.2f, generationTime, %.1f, expirationAge, %d, age, %.1lf
virtual void CLTileFileWithTraversal::onTraversingTileIndexHeader(const CLTilesManager_Type::TileIndexMacHeader &)
TILE: tileMacIndexHeader, headerSizeBytes, %u, tileMacIndexHeader, entrySizeInBytes, %u, numOfEntries, %u
virtual void CLTileFileWithTraversal::onTraversingTileIndexEntry(const CLTilesManager_Type::AccessPointIndexEntry &)
TILE: idx, %3u, mac,%x:%x:%x:%x:%x:%x, offset, %u
virtual void CLTileFileWithTraversal::onTraversingTileAPTableHeader(const CLTilesManager_Type::TileAccessPointTable &)
TILE: tileAccessPointTable, headerSizeBytes, %u, tileAccessPointTable, entrySizeInBytes, %u, numOfEntries, %u
virtual void CLTileFileWithTraversal::onTraversingTileAPTableEntry(const CLTilesManager_Type::AccessPointEntry &)
TILE: mac, %3u, mac,%x:%x:%x:%x:%x:%x, y, %3d, x, %3d, loc, %14.10lf, %14.10lf
void *CLTileFileWithTraversal::readDataEntries(FILE *, const CLTilesManager_Type::SectionHeader &, unsigned int, unsigned int, unsigned int)
TILE: read data, sectionId, %d, entriesOffset, %u, entriesNumToRead, %u
TILE: ERROR: failed to skip entries pre read, %u, ret, %d
TILE: ERROR: failed to read bytes, %u, %u
CLLocalization
com.apple.language.changed
static void CLLocalization::onLanguageChanged(CFNotificationCenterRef, void *, CFStringRef, const void *, CFDictionaryRef)
language changed - refreshing
.GlobalPreferences
AppleLanguages
CFDictionaryRef CLLocalization::copyStringsDictionaryForBundle(CFBundleRef, CFStringRef)
could not use english as default language
#Warning could not get localizations array from bundle
#Warning could not get localizations for preferred languages
#Warning no localizations for preferred languages
getting '%s' localized strings for '%s'
strings
#Warning could not get resource URL for %s
could not create input stream for %{public}s
could not deserialize data from URL for %{public}s, error, %{public}s
InfoPlist
CFStringRef CLLocalization::copyStringFromBundle(CFBundleRef, CFStringRef)
#Warning issue retrieving localized strings for bundle '%s'
key %{public}s does not contain a string value
CFStringRef CLLocalization::copyString(CFStringRef)
no corresponding string for %{public}s
CLCarrierSettingsSilo
void CLCarrierSettings::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)
#Warning received unknown notification %s from telephony service
virtual void CLCarrierSettings::setInternal(const CFStringRef, const CFTypeRef)
should not write to carrier bundle
virtual void CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLCarrierSettings_Type::Notification, NotificationData_T = CLNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLCarrierSettings_Type::Notification, NotificationData_T = CLNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLCarrierSettings_Type::Notification, NotificationData_T = CLNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLCarrierSettings_Type::Notification, NotificationData_T = CLNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLCarrierSettings_Type::Notification, NotificationData_T = CLNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLCarrierSettings_Type::Notification, NotificationData_T = CLNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::listClients() [Notification_T = CLCarrierSettings_Type::Notification, NotificationData_T = CLNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
NanoLifestylePrivacyPreferencesChangedNotification
virtual bool CLFitnessTrackingNotifierWatch::isDeviceActivated() const
#Notice Overriding device activation status check.
#Notice Unable to query pairing id, suspending activity tracking.
#Notice Unable to obtain pairing id, suspending activity tracking.
EnableFitnessTracking
com.apple.nanolifestyle.privacy
virtual bool CLFitnessTrackingNotifierWatch::isFitnessTrackingEnabled() const
#Warning Failed to get fitness tracking state in Bridge->Motion&Fitness. It may not have been set yet. Assuming default.
#Notice Fitness tracking is disabled, suspending activity tracking.
void CLFitnessTrackingNotifierWatch::onBatteryNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)
#Notice Device on-charger, suspending activity tracking.
#Warning Un-handled notification,%d
NRPairedDeviceRegistryDeviceDidPairDarwinNotification
NRPairedDeviceRegistryDeviceDidUnpairDarwinNotification
locationFingerprint
locationFingerprints
T@"NSMutableArray",&,N,V_locationFingerprints
static CLSmootherErrorCode CLWindowedSmoother::smoothPoints(const std::vector<swan::stGPSsa> &, std::vector<CLClientLocation> &, bool)
HEALTH_SMOOTH,too few points to smooth
HEALTH_SMOOTH, corner detection failed
HEALTH_SMOOTH: Corner found at %{public}d, %{private}.7f, %{private}.7f
HEALTH_SMOOTH: Running track detection failed
CLRTD: Running track detected!
CLRTD,Running track detected!
CLRTD: horizontalPositionProcessNoise,%.3lf
HEALTH_SMOOTH, Indexing error
HEALTH_SMOOTH,Smoother Run Failed
HEALTH_SMOOTH,Indexing error
#Warning HEALTH_SMOOTH,Conversion Failed, excluding point at gpsSec %f
use_input_locationd_data_file
input_locationd_data_file
Invalid input_locationd_batched_data_file
load_batched_data_from_locationd
use_input_ascii_batched_data_file
input_ascii_batched_data_file
Invalid input_ascii_batched_data_file
save_results_to_disk
save_results_path
Invalid save_results_path
load_matlab_inputs
load_matlab_inputs_path
Invalid load_matlab_inputs_path
temp_writable_path
Invalid temp_writable_path
use_truth_reference
truth_reference_filename
Invalid truth_reference_filename
enable_data_editing
data_editing_sigma_threshold
Invalid data_editing_sigma_threshold
horizontal_position_process_noise
vertical_position_process_noise
velocity_sigma_fudge_factor
vertical_speed_limit
minimum_single_component_speed_standard_deviation
mimimum_driving_speed_that_requires_speed_uncertainty_inflation
minimum_driving_speed_standard_deviation
For config option 
 loaded value "
 using default "
INFINITY
infinity
bad lexical cast: source type value could not be interpreted as target
CLSmootherErrorCode runSmoother(swan::BatchedGNSSDataSmoother &, const std::vector<swan::stGPSsa> &, size_t, std::vector<f64> &, std::vector<f64> &, std::vector<s32> &, std::vector<swan::details::Vector<6> > &, std::vector<swan::details::Matrix<6, 6> > &, std::vector<bool> &)
HEALTH_SMOOTH,smoother is unhealthy
HEALTH_SMOOTH,samples rejected,%{public}lu
CNMatrix
/BuildRoot/Applications/Xcode.app/Contents/Developer/Platforms/AppleTVSimulator.platform/Developer/SDKs/AppleTVSimulator11.0.sdk/System/Library/PrivateFrameworks/CoreNavigation.framework/Headers/cnmatrix/cnmatrix.h
nr >= 0
nc >= 0
this->num_rows_ <= this->max_num_rows_
this->num_cols_ <= this->max_num_cols_
operator()
/BuildRoot/Applications/Xcode.app/Contents/Developer/Platforms/AppleTVSimulator.platform/Developer/SDKs/AppleTVSimulator11.0.sdk/System/Library/PrivateFrameworks/CoreNavigation.framework/Headers/cnmatrix/cnmatrixbase.h
data_ != __null
idx >= 0
idx < num_elements_
this != &(A)
this->allocated_data_ != NULL
this->allocated_scratch_ != NULL
this->max_num_rows_ >= A.num_rows_
this->max_num_cols_ >= A.num_cols_
Multiply
A.num_cols_ == B.num_rows_
&(A) != &(C)
&(B) != &(C)
FastResize
in_nr >= 0
in_nr <= max_nr
in_nc >= 0
in_nc <= max_nc
Transpose
&(A) != &(B)
operator=
CLWatchOrientationSettingsNotifierSilo
CLWatchOrientationSettingsNotifier
CLWatchOrientationSettingsNotifier::CLWatchOrientationSettingsNotifier(id<CLIntersiloUniverse>)
Watch Orientation,Orientation Notifier Instantiated
virtual void CLWatchOrientationSettingsNotifier::shutdown()
Watch Orientation,Orientation Notifier is shutting down.
virtual bool CLWatchOrientationSettingsNotifier::registerForNotificationInternal(const CLWatchOrientationSettingsNotifier_Type::Notification &)
Watch Orientation,Added client for %d, count %d
virtual bool CLWatchOrientationSettingsNotifier::unregisterForNotificationInternal(const CLWatchOrientationSettingsNotifier_Type::Notification &)
Watch Orientation,Removed client for %d, count %d
invertUI
com.apple.nano
void CLWatchOrientationSettingsNotifier::queryOrientationSettings()
Watch Orientation,Crown orientation setting key is invalid, defaulting to crown on right (not inverted)
wornOnRightArm
Watch Orientation,Wrist orientation setting key is invalid, defaulting to left wrist
Watch Orientation,crown,%{public}d,wrist,%{public}d
com.apple.nano.invertUIChangedNotification
com.apple.nano.wristOrientationChangedNotification
virtual void CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLWatchOrientationSettingsNotifier_Type::Notification, NotificationData_T = CLWatchOrientationSettingsNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLWatchOrientationSettingsNotifier_Type::Notification, NotificationData_T = CLWatchOrientationSettingsNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLWatchOrientationSettingsNotifier_Type::Notification, NotificationData_T = CLWatchOrientationSettingsNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLWatchOrientationSettingsNotifier_Type::Notification, NotificationData_T = CLWatchOrientationSettingsNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLWatchOrientationSettingsNotifier_Type::Notification, NotificationData_T = CLWatchOrientationSettingsNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLWatchOrientationSettingsNotifier_Type::Notification, NotificationData_T = CLWatchOrientationSettingsNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::listClients() [Notification_T = CLWatchOrientationSettingsNotifier_Type::Notification, NotificationData_T = CLWatchOrientationSettingsNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
EnableStepperLoadCal
EnableStepperHRModel
StairModelMetsScale
StepperVO2MaxScalingFactor
CLNatalieStairClimbingModel::CLNatalieStairClimbingModel()
Stair Climbing, load calibration, %d, HR mode, %d, mets scaling factor, %f, VO2max scaling factor, %f
virtual CLMetsInfo CLNatalieStairClimbingModel::computeMETS(const CLNatalieModelInput &)
Stair Climbing, Work Rate Model, timestamp, %f, step frequency, %f, WRMETS, %f, sinceLastGood, %f
Stair Climbing, HR Rate Model, timestamp, %f, catherine(cpm), %f, catherinemax(cpm), %f, catherinemin(cpm), %f, vo2max(METs), %f, METS, %f
Stair Climbing, timestamp, %f, HRMETs, %f, WRMETs, %f, calibrationValue, %f, loadCalStatus, %d
Stair Climbing, timestamp, %f, finalMETS, %f, fMetsScaling, %f
void CLElevationArbiter::reset()
Resetting elevation arbiter
void CLElevationArbiter::update(const CLElevationChangeEntry &)
Time rollback compared to fPrevStepCountElevation, currentTime, %f, previousTime, %f
Time rollback, currentTime compared to fFinalElevation, %f, previousTime, %f
-[CLDiagnosticManager beginService]
#diagnosticManager beginService
com.apple.locationd.diagnostic
-[CLDiagnosticManager endService]
#diagnosticManager endService
-[CLDiagnosticManager registerFileForCollection:]
Add file to #diagnosticManager: %{public}@
Trying to register a nil NSURL
-[CLDiagnosticManager unregisterFileForCollection:]
Remove file to #diagnosticManager: %{public}@
Trying to unregister a nil NSURL
-[CLDiagnosticManager copyRegisteredFilesWithHandler:]
Client requested #diagnosticManager file copy to dest: %@
diagnosticManager trying to copy file: %@
-[CLDiagnosticManager listener:shouldAcceptNewConnection:]
#diagnosticManager received new XPC Connection request
Why didn't we get a connection?
-[CLDiagnosticManager listener:shouldAcceptNewConnection:]_block_invoke
#diagnosticManager Interruption handler called
#diagnosticManager Invalidation handler called
#diagnosticManager Resuming XPC Connection: %@
-[CLDiagnosticManager fileManager:shouldCopyItemAtURL:toURL:]
#diagnosticManager fileManager asking if should copy from %@ to %@
Trying to move a file that is not in our cache directory: %@
mobile
Library
Logs
CrashReporter
yyyy-MM-dd_HH-mm-ss
mobileCrashReporterPath
T@"NSURL",R,N
listener
T@"NSXPCListener",&,N,V_listener
registeredFiles
T@"NSMutableSet",&,N,V_registeredFiles
fileManager
T@"NSFileManager",&,N,V_fileManager
connection
T@"NSXPCConnection",&,N,V_connection
void CMOnBodyDetector::printParameters() const
configuration: low band = [%d %d] high band [%d %d]
configuration: classifierMinLowPower = %f, classifierMaxLowPower = %f, classifierMaxHighPower = %f
configuration: theta = [%.2f %.2f %.2f %.2f %.2f %.2f]
configuration: oddsThreshold = %f, medianFilterSize = %zu, confidenceThreshold = %f, useHysteresis = %d, useAngleOverride = %d, angleMetricThreshold = %f
void CMQueue<bool>::setCapacity(size_t) [T = bool]
Assertion failed: fHeadAndSize.fSize == 0 && fHeadAndSize.fHead == 0, file /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Oscar/CMQueue.h, line 93,size,%u,head,%u.
const T &CMQueue<bool>::operator[](const size_t) const [T = bool]
GyroBias
void CLSensorFusionServiceAP::onBiasAndVariance(const CLMotionTypeGyroBiasAndVariance)_block_invoke
Type,%s,bias.x,%20.20f,bias.y,%20.20f,bias.z,%20.20f,variance.x,%20.20f,variance.y,%20.20f,variance.z,%20.20f,doingBiasEstimation,%d
compass
compass-calibration
CFDataRef CLMagnetometerCoexistenceLocal::copyCompassCalibrationData()
Invalid cpas data.
The cpas data is not a CFData type.
BOOL CLMagnetometerCoexistenceLocal::deviceStillHasOriginalCamera()
#Warning Cpas data is NULL.
#Warning Cpas pointer is NULL.
Unexpected cpas version: %u.
Original serial number data is NULL.
Original serial number pointer is NULL.
AppleH4CamIn
BackCameraSerialNumber
Invalid back camera serial number data.
Incorrect back camera serial number length. Actual length %ld. Expected length %lu.
Current serial number data is NULL.
BackCameraModuleFocusActuatorID
NSNumber *CLMagnetometerCoexistenceLocal::cameraVcmId()
Bailing while checking VCM actuator ID.
VCM actuator ID data type %d does not match expected type %d
NSData *CLMagnetometerCoexistenceLocal::sanitizedCompassCalibrationData()
#Warning CPAS data is NULL.
#Warning CPAS pointer is NULL.
northWestLatitude
northWestLongitude
southEastLatitude
southEastLongitude
hasNorthWestLatitude
Td,N,V_northWestLatitude
hasNorthWestLongitude
Td,N,V_northWestLongitude
hasSouthEastLatitude
Td,N,V_southEastLatitude
hasSouthEastLongitude
Td,N,V_southEastLongitude
T@"NSMutableArray",&,N,V_tiles
kCMOdometerDataCodingKeyStartDate
kCMOdometerDataCodingKeyEndDate
kCMOdometerDataCodingKeyDistance
kCMOdometerDataCodingKeyCurrentSpeed
kCMOdometerDataCodingKeyAverageSpeed
%@,<startDate %@, endDate %@, distance %@, currentSpeed %@, averageSpeed %@>
T@"NSDate",R,N,V_startDate
endDate
T@"NSDate",R,N,V_endDate
T@"NSNumber",R,N,V_distance
currentSpeed
T@"NSNumber",R,N,V_currentSpeed
averageSpeed
T@"NSNumber",R,N,V_averageSpeed
CLLocationStreamerSilo
kCLLocationStreamerLastAliveAgainMessageTimestamp
LocationStreamerMotionOverride
currentGranularity
Ti,N,V_currentGranularity
locationUpdatesIncludeMotionState
TB,N,V_locationUpdatesIncludeMotionState
clientIsInFitnessSession
TB,N,V_clientIsInFitnessSession
fitnessSessionNotificationClients
T@"NSMutableSet",&,N,V_fitnessSessionNotificationClients
motionAlarmActive
TB,N,V_motionAlarmActive
isSubscribedForMotion
TB,N,V_isSubscribedForMotion
resendMotionStateTimer
T@"CLTimer",&,N,V_resendMotionStateTimer
emergencyEnablementAssertionActive
TB,N,V_emergencyEnablementAssertionActive
aliveAgainThrottleTimer
T@"CLTimer",&,N,V_aliveAgainThrottleTimer
CLLocationStreamer::RollingPowerAssertion
com.apple.locationd.bundle-/System/Library/LocationBundles/Traffic.bundle
CLCachedLocationControllerSilo
CLCachedLocationController
CachedLocationController
Traffic
CLCachedLocationController::CLCachedLocationController(id<CLIntersiloUniverse>)
CLC: Init power state: off
void CLCachedLocationController::setStateAndUpdateDebounceTimout(CLCachedLocationController_Type::CachedLocationState, CFTimeInterval)
CLC: Debounce changed to %{private}lf [s]
CLC: Already in state %{private}s, %{private}lf
CLC: Cached Location changed state from %{private}s to %{private}s
void CLCachedLocationController::onTransitDebounceTimer()
CLC: Debounce timer fired, stopping
virtual void CLCachedLocationController::onStartTransitRoute(CFTimeInterval, const CLClientLocationCoordinate &)
CLC: Received start route
virtual void CLCachedLocationController::onEndTransitRoute()
CLC: Received end route
void CLCachedLocationController::onLocationUpdateNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)
CLC: Received unknown notification, %{public}d
void CLCachedLocationController::onClientManagerNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)
CLC: Recevied kNotificationAuthorization for %{private}s
CLC: Received Location Services status %{public}d
#Warning CLC: Received unknown notification, %{public}d
void CLCachedLocationController::resumeForException(CLCachedLocationController::CacheException)
CLC: Resume for exception, %{public}#x, oldExceptions %{public}#x
CLC: Resume
void CLCachedLocationController::suspendForException(CLCachedLocationController::CacheException)
CLC: Suspend for exception, %{public}#x, oldExceptions %{public}#x
CLC: Suspend
virtual void CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLCachedLocationController_Type::Notification, NotificationData_T = CLCachedLocationController_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLCachedLocationController_Type::Notification, NotificationData_T = CLCachedLocationController_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLCachedLocationController_Type::Notification, NotificationData_T = CLCachedLocationController_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLCachedLocationController_Type::Notification, NotificationData_T = CLCachedLocationController_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLCachedLocationController_Type::Notification, NotificationData_T = CLCachedLocationController_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLCachedLocationController_Type::Notification, NotificationData_T = CLCachedLocationController_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::listClients() [Notification_T = CLCachedLocationController_Type::Notification, NotificationData_T = CLCachedLocationController_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
allowsNetworkTileLoad
isNetworkTileLoadAllowed
TB,V_isNetworkTileLoadAllowed
CLGeoAccessMapGeometry::CLGeoAccessMapGeometry()_block_invoke
#Warning CLMM, Tile Error Reported:%{public}lld (%{public}@) "%{private}@"
v24@?0r^{_GEOTileKey=b6b26b26b6b8b8b8b1b7[4C]}8@"NSError"16
fGeoMapAccess!=nullptr
virtual void CLGeoAccessMapGeometry::disable()
CLMM, disabling tile loader
virtual void CLGeoAccessMapGeometry::enable()
CLMM, enabling tile loader
v16@?0@"GEOMapRequest"8
virtual bool CLGeoAccessMapGeometry::roadsWithinDistance(CLMapGeometry::DistanceQueryResultList &, const CLMapCrumb &, double, bool)
CLMM, GeoMapAccess did not have sufficient data available (roadsWithinDistance)
v16@?0@"<GEOMapRoad>"8
#Warning CLMM, query failed (roadsWithinDistance)
bool CLGeoAccessMapGeometry::roadsConnectedInternal(CLMapGeometry::ConnectedQueryResultList &, const RoadFeatureObject *, bool, double, double, int) const
CLMM, GeoMapAccess did not have sufficient data available (roadsConnected)
#Warning CLMM, query failed (roadsConnected)
virtual bool CLGeoAccessMapGeometry::roadsAtIntersection(CLMapCrumb &, CLMapGeometry::IntersectionQueryResultList *, CLMapGeometry::IntersectionQueryResultList *, bool, const CLMapRoadPtr &, bool, double, double, double &) const
CLMM, GeoMapAccess did not have sufficient data available (roadsAtIntersection)
v20@?0@"<GEOMapRoad>"8B16
#Warning CLMM, outgoing roads query failed (roadsAtIntersection)
#Warning CLMM, incoming roads query failed (roadsAtIntersection)
bool CLGeoAccessMapGeometry::moveOnRoadInternal(bool, double, double, CLMapGeometry::RoadInfoList &, CLMapGeometry::DistanceQueryResult &, int, bool) const
CLMM, GeoMapAccess did not have sufficient data available (moveOnRoad)
#Warning CLMM, query failed (moveOnRoad)
cl_geo_access_map_geometry_queue
bool performQuery(QueryFunction, GEOMapAccess *)
#Warning CLMM, GeoMapAccess query timed out
coordinateCount > 1
coordArray != __null
coordinateCount > 0
feature.coordinateCount > 1
bool CLGeoAccessCommon::isConnectedToStartOfRoad(CLDistanceCalc &, const int, const GEOLocationCoordinate2D *, const GEOLocationCoordinate2D &)
#Warning CLMM,isConnectedToStartOfRoad,disconnected road
i < coordinateCount - 2
kCMStrideCalDataContainerKeyTrack
kCMStrideCalDataContainerKeySession
kCMStrideCalDataContainerKeyGradient
kCMStrideCalDataContainerKeyGradientValidity
%@,Track,%@,Session,%@,Gradient,%0.6f,GradientValid,%ld
track
T@"CalibrationTrack",R,&,N,V_track
Tq,R,N,V_session
gradient
Td,N,V_gradient
gradientValidity
Tq,R,N,V_gradientValidity
float CLWorkloadCalibrator::computeCalibrationValue(const CLNatalieModelInput *, const CFAbsoluteTime, const float, const float, bool &)
WorkloadCalibration, timestamp, %f, HRMETs, %f, WRMETs, %f, calibrationValue, %f, calibratedMets, %f
void CLWorkloadCalibrator::bootstrapCalibrationValueFromDb()
Workload Calibrator, DB Delete Records Before, expirationTime, %f
Workload Calibrator, DB Get All Records By Activity Type And Maximum Standard Deviation, activityType, %u, standardDeviation, %f
Workload Calibrator, Bootstraping Calibration, Value, %f
void CLWorkloadCalibrator::persistCalibration(const float, const float)
Workload Calibrator, DB Insert, activityType, %u, valueAverage, %f, standardDeviation, %f, entry.startTime, %f
Workload Calibrator, DB Delete Keep Last N, kMaximumDbHistorySize, %lu, activityType, %u
Workload Calibrator, DB Update, activityType, %u, valueAverage, %f, standardDeviation, %f, entry.startTime, %f
virtual void CLOdometerNotifierCompanion::updateOdometerState()
Taking gps odometer power assertion.
Releasing gps odometer power assertion.
void CLOdometerNotifierCompanion::updateStateOnAuthorization(bool)
void CLOdometerNotifierCompanion::enableGPS()
void CLOdometerNotifierCompanion::disableGPS()
void CLOdometerNotifierCompanion::notifyCoarseElevation(std::shared_ptr<CLCoarseElevationVector>)
onCoarseElevation,startTime,%f,ascended,%d,source,%d
void CLOdometerNotifierCompanion::notifyLocation(const CLDaemonLocation &, const CLDaemonLocationPrivate &)
Odometer(GPS),%f,%f,%f,%f,%f
void CLOdometerNotifierCompanion::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)
#Warning Received unhandled location notification, %d
state
Tq,N,V_state
T{time_point<cl::chrono::CFAbsoluteTimeClock, std::__1::chrono::duration<long double, std::__1::ratio<1, 1> > >={duration<long double, std::__1::ratio<1, 1> >=D}},R,N,V_timestamp
RSSI
Ti,R,N,V_RSSI
uuid
T@"NSUUID",R,N,V_uuid
ipv4
TI,R,N,V_ipv4
WPPuckType
WPPuckTypeAirPlaySoloTargetPresence
CLATVAirplayMonitorSilo
-[CLATVAirplayMonitor startScan]
Bluetooth is OFF, ignoring request to scan
v16@?0@"<CLATVAirplayMonitorClientProtocol>"8
-[CLATVAirplayMonitor airPlaySolo:foundDevice:withData:]
Found device %{private}s withData: %{private}s
Found a device but its UUID is nil
WPPuckTypeAirPlaySoloAdvertisingData
No IP address provided. Ignoring device
Not enough data provided for advertisement data. Ignoring
WPPuckTypeAirPlaySoloRSSI
WPPuckTypeAirPlaySoloAdvertisingChannel
-[CLATVAirplayMonitor airPlaySoloStartedScanning:]
AirPlaySolo started scanning
-[CLATVAirplayMonitor airPlaySoloStoppedScanning:]
AirPlaySolo stopped scanning
-[CLATVAirplayMonitor airPlaySolo:failedToStartScanningWithError:]
Failed to start AirPlaySolo scanning. %{public}@
airplaySolo
T@"WPAirPlaySolo",&,N,V_airplaySolo
TB,N,V_power
scanDeliveryDelayTimer
T@"CLTimer",&,N,V_scanDeliveryDelayTimer
bufferedDevices
T@"NSMutableArray",&,N,V_bufferedDevices
invalid uuid string
void boost::uuids::string_generator::throw_invalid() const
/BuildRoot/Applications/Xcode.app/Contents/Developer/Platforms/AppleTVSimulator.platform/Developer/SDKs/AppleTVSimulator11.0.sdk/usr/local/include/boost/uuid/string_generator.hpp
0123456789abcdefABCDEF
ElevationLabel
void CLSignificantElevationEstimator::init()
init %s, %s
void CLSignificantElevationEstimator::reset()
Resetting significant elevation %s, %s
ReferenceAltitude
ElevationStartTime
ElevationEndTime
AscendedElevation
DescendedElevation
BufferedAscendedElevation
BufferedTimeStamp
AscendingState
ElevationDeviceSource
void CLSignificantElevationEstimator::update(CFAbsoluteTime, uint32_t, uint32_t, CLElevationSource)
%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%d,%s,%s,%s,%f
void CLSignificantElevationEstimator::bufferCurrentElevation(CFAbsoluteTime, double)
%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%s,%s,%f
-[CMStrideCalibrator initInUniverse:stepCountDb:]
Not companion or watch. Returning.
AutomaticStrideCalibration,Pass,CreatingDaemonCacheForCalibrationBins
AutomaticStrideCalibration,Success,AllChecksPassed
-[CMStrideCalibrator setSession:]
setSession,oldSession,%ld,newSession,%ld
-[CMStrideCalibrator addLatestCalData:]
A new calData is added: %s
-[CMStrideCalibrator checkForLocationStateTransition]
ForcingLocationDueToGizmoRequest,session,%ld,%s
StepRunNotification,Pass,LeechingLocation,Steps,%d
StepRunNotification,Pass,AttemptingToForceLocation,Steps,%d
[self outOfSession]
-[CMStrideCalibrator attemptForcedLocation]
AttemptForcedLocation,Fail,NotSufficientTimeSinceLastCalibrationSuccess,TimeSinceLastCalibrationSuccess,%0.3f
AttemptForcedLocation,Fail,NotSufficientTimeSinceLastCalibrationAttempt,TimeSinceLastCalibrationAttempt,%0.3f
AttemptForcedLocation,Fail,NotSufficientTimeSinceLastConverged,TimeSinceLastCalibrationAttempt,%0.3f
AttemptForcedLocation,Success,AllChecksPassed
-[CMStrideCalibrator quitForcedLocationState]
Terminated forced calibration.
-[CMStrideCalibrator fsm:didTransitionFromState:toState:]
LocationStateOld,%d,LocationStateNew,%d
-[CMStrideCalibrator fsm:didUpdateLocationAtTime:]
TrackClose,Pass,LocationTimeout,TimeSinceLastPosition,%0.3f
TrackClose,Pass,ForcedNotSufficientSteps,Steps,%d
TrackClose,Pass,EnabledNotSufficientSteps,Steps,%d
-[CMStrideCalibrator checkValidTrack:associatedEntry:]
TrackCalibration,Fail,Pedometer distance is zero,startTime,%f,endTime,%f
ZeroDistance
TrackCalibration,Fail,rawSpeed %f out of bounds,startTime,%f,endTime,%f
SpeedOutOfBounds
TrackCalibration,Fail,KFactorOutOfBounds,%s,KFactor,%0.4f,RawSpeed,%f,startTime,%f,endTime,%f
GainOutOfBounds
SessionMetrics,Fail,Pedometer,GainOutOfBounds,DistanceFusion,%0.6f,startTime,%f,endTime,%f
SessionMetrics,Fail,GPS,GainOutOfBounds,DistanceFusion,%0.6f,startTime,%f,endTime,%f
-[CMStrideCalibrator updateCalibrationBins:]
CalData, %s, stepEntryEpochTime, %f
GradientOutOfBounds
SessionMetrics,Fail,Gradient,DistanceFusion,startTime,%f,endTime,%f
FloorsAscended,%d,FloorsDescended,%d
Yay!
void CLTilesMap::erase(CLTilesMap::ConstIterator)
Erasing tileId from tiles maps.
void CLTilesMap::erase(const TileId &)
Erasing tileId from tiles map.
void CLTilesMap::unprotectedErase(const TileId &)
TileId doesn't not exist in tiles map.
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Daemon/Positioning/Tiles/CLTilesMap.mm
Removing tileId from unprotected map.
void CLTilesMap::unprotectedAdd(const TileId &)
bool CLDemTileAvailability::isTileAvailableBasedOnAvlFile(double, double)
DEM,Reading,%{public}s
#Warning,DEM,could not open,%{public}s
#Warning,DEM,avl byte index,%{public}d,is larger than the data available in the availabilty file
#Warning,DEM,Invalid CLDEM availability file - unable to get data byte
DEM,Unexpected case
DEM,availability file has expired - redownload
DEM,availability file version does not match expected
DEM,finished
static bool CLDemTileAvailability::readAvlHelper(FILE *, unsigned char *, CLDemTileAvailability::CLDEMTileAvailabilityData &, size_t &, size_t &)
DEM,fseek returned non-zero
#Warning,DEM,Invalid CLDEM availability file - header string
#Warning,DEM,Invalid CLDEM availability file - invalid header string
#Warning,DEM,Invalid CLDEM availability file - version
#Warning,DEM,Invalid CLDEM availability file - headerLength
#Warning,DEM,Invalid CLDEM availability file - minLat
#Warning,DEM,Invalid CLDEM availability file - maxLat
#Warning,DEM,Invalid CLDEM availability file - binsize
#Warning,DEM,coarse avl file is not 0.1 deg by 0.1 deg,spacing unexpected,%{public}.1f,re-download needed
#Warning,DEM,Invalid CLDEM availability file - timestamp
#Warning,DEM,Invalid CLDEM availability file - expiration age
#Warning,DEM,Invalid CLDEM availability file - data size
#Warning,DEM,Invalid CLDEM availability file - crc
DisableMapMatchingRouteHints
CLMapRouteHintController::CLMapRouteHintController()
CLMM, DisableMapMatchingRouteHints, %{public}d
CLFitnessTrackingNotifierSilo
CLFitnessTrackingNotifier
AllowUnactivatedFitnessTracking
CLFitnessTrackingNotifier::CLFitnessTrackingNotifier(id<CLIntersiloUniverse>)
Finished constructing CLFitnessTrackingNotifier
virtual bool CLFitnessTrackingNotifier::registerForNotificationInternal(const CLFitnessTrackingNotifier_Type::Notification &)
CLFitnessTrackingNotifier::client count [%d]: %d
CLFitnessTrackingNotifier::Invalid notification: %{public}d
virtual bool CLFitnessTrackingNotifier::unregisterForNotificationInternal(const CLFitnessTrackingNotifier_Type::Notification &)
virtual void CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLFitnessTrackingNotifier_Type::Notification, NotificationData_T = CLFitnessTrackingNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLFitnessTrackingNotifier_Type::Notification, NotificationData_T = CLFitnessTrackingNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLFitnessTrackingNotifier_Type::Notification, NotificationData_T = CLFitnessTrackingNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLFitnessTrackingNotifier_Type::Notification, NotificationData_T = CLFitnessTrackingNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLFitnessTrackingNotifier_Type::Notification, NotificationData_T = CLFitnessTrackingNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLFitnessTrackingNotifier_Type::Notification, NotificationData_T = CLFitnessTrackingNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::listClients() [Notification_T = CLFitnessTrackingNotifier_Type::Notification, NotificationData_T = CLFitnessTrackingNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
dataPayload
T@"NSDictionary",&,N,V_dataPayload
message
T@"CLClientManagerUsageSyncMessage",&,N,V_message
error
T@"NSError",&,N,V_error
recoverable
TB,N,V_recoverable
CLUsageSyncManagerSilo
com.apple.private.alloy.location.usage
kCLUsageSyncPairedDeviceID
kCLUsageSyncMessageTypeKey
kCLUsageSyncMessageDataKey
kCLUsageSyncNextSequenceNumberKey
kCLUsageSyncMessageSequenceNumberKey
kCLUsageSyncMessageUsageUpdateKey
kCLUsageSyncClientKey
kCLUsageSyncMessagePromptKey
kCLUsageSyncMessageResyncResponseKey
kCLUsageSyncMessageResyncRequestKey
kCLUsageSyncResyncRequestQueueIdentifierKey
kCLUsageSyncHighestReceivedSequenceNumberKey
kCLUsageSyncUsageKey
usage-
kCLUsageSyncAuthorizationStatusKey
kCLUsageSyncForcePromptKey
kCLUsageSyncResyncResponseQueueIdentifierKey
-[CLUsageSyncManager handleMessagePromptWithMessageData:]
#USESYNC Missing an expected argument.  Client %p, authorization %p
manager
T@"<CLClientManagerPublicProtocol>",&,N,V_manager
dirtyUsageSyncState
TB,N,V_dirtyUsageSyncState
needFullResync
TB,N,V_needFullResync
highestReceivedSequenceNumber
Tq,N
pairedDeviceID
T@"NSUUID",&,N,V_pairedDeviceID
pairedDeviceRegistry
T@,&,N,V_pairedDeviceRegistry
retryTimerSet
TB,N,V_retryTimerSet
retryTimer
T@"CLTimer",&,N,V_retryTimer
errorQueue
T@"NSMutableArray",&,N,V_errorQueue
messagesWaitingForAck
T@"NSMutableDictionary",&,N,V_messagesWaitingForAck
activeDeviceNearbyStatus
Ti,N,V_activeDeviceNearbyStatus
NRPairedDeviceRegistryDeviceDidUnpairNotification
NRPairedDeviceRegistryDeviceDidPairNotification
NRPairedDeviceRegistryDeviceDidBecomeActive
NRPairedDeviceRegistryDeviceDidBecomeInactive
NRDevicePropertyPairingID
NRDevicePropertySerialNumber
void DPPoint::convertLatLon()
Lat/lon is out of range for conversion.
void DouglasPeuckerPolygonSimplify(PointList &, const PointList &, double, int, int)
Input to Douglas-Peucker algorithm must have at least one vertex.
double curveSegmentCompare(const PointList &, int, int, SimplifyType, int &)
DynamicProgramArea distance is not implemented
void DynamicProgramPolygonSimplify(PointList &, const PointList &, double, SimplifyType)
#Warning Never achieved the desired simplification. Using the original curve.
Programming error. Number of points in backtrack do not match expected (1).
Programming error. Number of points in backtrack do not match expected (2): %{public}d, %{public}d
CLTimeZoneManager.MaximumTimeZoneChangeSpeed
CLTimeZoneManager.MaximumTimeZoneChangeAccuracy
CLTimeZoneManager.StartDelay
CLTimeZoneManager.MaxLocationDelay
CLTimeZoneManager.MaxFailures
CLTimeZoneManager.MinimumRetryDelay
CLTimeZoneManager.MaximumRetryDelay
CLTimeZoneManager.MaximumVerifyInterval
CLTimeZoneManager.MaximumCheckInterval
CLTimeZoneManager.EarlyCheckProportion
CLTimeZoneManager.ContinuousLocationDuration
CLTimeZoneManager.ReportPreviousTimezoneInterval
CLTimeZoneManager.ReachabilityRetryInterval
Network
Etc/GMT
CLTimeZoneManagerSilo
T^{CLTimeZoneManager=^{CLTimeZoneDatabase}{unique_ptr<CLDarwinNotifier_Type::Client, std::__1::default_delete<CLDarwinNotifier_Type::Client> >={__compressed_pair<CLDarwinNotifier_Type::Client *, std::__1::default_delete<CLDarwinNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLServiceLocationProvider_Type::Client, std::__1::default_delete<CLServiceLocationProvider_Type::Client> >={__compressed_pair<CLServiceLocationProvider_Type::Client *, std::__1::default_delete<CLServiceLocationProvider_Type::Client> >=^{Client}}}{unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client> >={__compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client> >={__compressed_pair<CLTelephonyService_Type::Client *, std::__1::default_delete<CLTelephonyService_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}@@dd{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}d{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLServiceLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBBBB^{__CLClient}^{__CLClient}^{__CLClient}^{__CFString}^{__CFString}@B}iiBB^{__CFRunLoopTimer}^{CLPersistentTimer}^{__CFRunLoopTimer}id^{__CFRunLoopTimer}ddddiddddddddd{CLDistanceCalc=ddddd}[29B]},N,V_manager
TimeZone
PreviousTimeZone
CLTimeZoneManager::CLTimeZoneManager(id<CLIntersiloUniverse>)
Loaded previous time zone %s
AutomaticTimeZoneUpdateNeeded
void CLTimeZoneManager::setStartTimer(const CFTimeInterval &)
Setting start timer to fire at %.2f (%.2fs away)
void CLTimeZoneManager::setActiveModeTimer(const CFTimeInterval &)
Setting active mode timer to fire at %.2f (%.2fs away)
void CLTimeZoneManager::setContinuousLocationTimer(const CFTimeInterval &)
Setting continuous location timer to fire at %.2f (%.2fs away)
void CLTimeZoneManager::onReachabilityTimer(CFRunLoopTimerRef)
ReachabilityTimer fired
void CLTimeZoneManager::onContinuousLocationTimer(CFRunLoopTimerRef)
Continuous location timer fired
#Warning Failed to get any fix while in continuous location mode
void CLTimeZoneManager::checkStatus()
Location services are disabled; stopping automatic time zone
Time Zone system service disabled; stopping automatic time zone
TimeZoneBorderDistance
TimeZoneBorderDistanceTimestamp
Automatic time zone starting in passive mode
Automatic time zone starting in active mode
Automatic time zone disabled
void CLTimeZoneManager::startActive()
Starting automatic time zone in active mode
Already have previous border distance and timestamp
void CLTimeZoneManager::enterActiveMode()
Entering active location mode
void CLTimeZoneManager::exitActiveMode()
Exiting active location mode
void CLTimeZoneManager::startPassive()
Starting automatic time zone in passive mode
void CLTimeZoneManager::stop()
Stopping automatic time zone
bool CLTimeZoneManager::shouldSetSystemTimeZone(const std::string &, const CLDaemonLocation &, double &)
We ran point-in-polygon on a location we threw out anyway!
Current time zone %s not in database; changing time because of acceptable location accuracy %.3f
bool CLTimeZoneManager::setSystemTimeZone(const std::string &)
Telling timed the time zone is "%s".
bool CLTimeZoneManager::setTimeZoneIfAppropriate(const std::string &, const CLDaemonLocation &)
bystander location, used to set time zone, billed to 'TimeZone' system service
Time Zone failed to retrieve location.
#Notice Potentially setting system time zone to %s based on <%+.8lf,%+.8lf> acc %.2f timestamp %.2f confidence %d
#Notice Potentially setting system time zone to %{public}s
Potentially setting system time zone to %s based on <%+.8lf,%+.8lf> acc %.2f timestamp %.2f confidence %d
void CLTimeZoneManager::handleNewLocation(const CLDaemonLocation &, bool)
#Warning Received invalid location for time zone
#Warning Disregarding location with accuracy: %.1f (> %.1f)
Received invalid location <%+.8f,%+.8f> for time zone
#Warning Disregarding location for timezone with speed: %.1f (> %.1f)
Handling new location <%+.8lf,%+.8lf>, acc %.2f, timestamp %.2f, lifespan %.2f, confidence %d
#Warning Couldn't get time zone for location <%+.8lf,%+.8lf>
Time zone from database was %s
Not using <%+.8lf,%+.8lf> (timestamp %.2f) because interval has not elapsed
Unconfirmed border distance is <= 0 yet we have an unconfirmed timezone label.
void CLTimeZoneManager::onStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)
Got data mode change notification; entering continuous location mode
Got data mode change notification, but haven't exceeded reachability interval(%.3f s).  Will try again in %.3f s
Got airplane entered notification
Got airplane mode exited notification; entering continuous location mode
void CLTimeZoneManager::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)
Ignoring expired location <%+.8f, %.8f>, acc %.2f, timestamp %.2f, lifespan %.2f
Ignoring unsure location <%+.8f, %.8f>, acc %.2f, timestamp %.2f, lifespan %.2f, confidence %d
Got kNotificationLocationUnavailable
Got kNotificationServiceAuthorization
#Warning Got unknown notification %d
void CLTimeZoneManager::onLocationTimeZoneActiveNotification(CFNotificationCenterRef, CFStringRef, const void *, CFDictionaryRef)
Automatic time is now in mode %d
void CLTimeZoneManager::onManagerNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)
#Warning location status reset; removing all clients
void CLTimeZoneManager::onImmediateCheckNotification(CFNotificationCenterRef, CFStringRef, const void *, CFDictionaryRef)
Got immediate check notification
void CLTimeZoneManager::enterContinuousLocationMode(ContinuousLocationMode, bool)
Transition from continuous active to continuous active with retry
Already in continuous location mode; not re-entering
Location services are disabled; not starting continuous location
Time Zone system service disabled; not starting continuous location
In bystander-only mode; not starting continuous location
Entering continuous location mode
Timezone is not confirmed.
void CLTimeZoneManager::exitContinuousLocationMode()
Not in continuous location mode; not exiting
Exiting continuous location mode
void CLTimeZoneManager::locationFailed(bool)
Not registered for location or fine location; ignoring location failure
Got location unavailable while in continuous location mode; ignoring location failure
AutomaticTimeZoneUpdateFailed
Location failed for time zone (exiting continuous mode %d; failure count now %d)
Maximum failure count not exceeded; retrying in %.2f seconds
Exceeded maximum failures; not retrying for %.2f seconds
kCMActivityCodingKeyType
kCMActivityCodingKeyConfidence
kCMActivityCodingKeyMounted
kCMActivityCodingKeyMountedConfidence
kCMActivityCodingKeyIsStanding
kCMActivityCodingKeyTiltAngle
kCMActivityCodingKeyTimestamp
kCMActivityCodingKeyVehicleExitState
kCMActivityCodingKeyEstExitTime
kCMActivityCodingKeyStartTime
%@ @ %f,<startDate,%@,type,%s,confidence,%s,mountedState,%d,mountedConfidence,%s,isStanding,%d,tiltAngle,%f,exitState,%d,estExitTime,%f>
Ti,R,N
isWalking
isRunning
isDriving
maybeExitingVehicle
hasExitedVehicle
CLFenceManagerSilo
FenceManager
FenceStartDelay
void CLFenceManager::init()
Overriding fence start delay to %{private}.2f
FenceShowTriggerDialog
setting FenceStartShowDialog to %{private}d
Setting fence start timer to fire at %.3f (%.2f seconds away)
void CLFenceManager::start()
Fence: Starting fence monitoring
Fence: Already started fence monitoring
virtual void CLFenceManager::shutdown()
Fence: CLFenceManager, shutdown
void CLFenceManager::resetFenceMonitoring_nl()
Fence: resetFenceMonitoring_nl
void CLFenceManager::startMonitoringAllFences_nl()
Fence: startMonitoringAllFences_nl
Starting to monitor all %{public}ld authorized fences
void CLFenceManager::startMonitoringFences_nl(CLFenceManager_Type::FencesVector)
Fence: startMonitoringFences_nl
void CLFenceManager::stopMonitoringFences_nl(CLFenceManager_Type::FencesVector)
Fence: stopMonitoringFences_nl
com.apple.mobileme.fmf1
com.apple.locationd.bundle-/System/Library/PrivateFrameworks/FMF.framework
com.apple.locationd.bundle-/System/Library/LocationBundles/RemindersAlerts.bundle
bool CLFenceManager::addFence(const CLFenceManager_Type::Fence &)
Fence: fence not added, too many fences, %{private}s, %{private}lu, %{private}u
Fence: monitoring is not supported on this platform; not adding fence %{private}s/%{private}s
Not adding fence %{private}s/%{private}s because coordinate is invalid
Fence: canPerformMonitoringForFence is true, fence, %{private}s
Fence: canPerformMonitoringForFence is false, fence, %{private}s
Fence: Adding fence %{private}s/%{private}s <%{private}+.8f,%{private}+.8f>
Fence: sending kNotificationFenceFailure, fence, %{private}s
Fence: sending kNotificationFenceSetupCompleted, fence, %{private}s
bool CLFenceManager::removeFence(const CLFenceManager_Type::Fence &)
Fence: Removing fence %{private}s/%{private}s
void CLFenceManager::requestRegionState(const CLFenceManager_Type::Fence &)
Fence: requestRegionState, %{private}s/%{private}s, registered, %{public}d, authorized, %{public}d
Fence: requestRegionState, fence, %{private}s/%{private}s, status, %{private}d, %{private}s
Fence: requestRegionState, fence, %{private}s/%{private}s, not authorized
Fence: requestRegionState, fence, %{private}s/%{private}s, not registered
Fence: requestRegionState, fence, %{private}s/%{private}s, error.
void CLFenceManager::fenceStatusChanged(const CLFenceManager_Type::Fence &, const CLFenceManager_Type::FenceStatus &, const CLDaemonLocation &)
Fence: fence, %{private}s, new status, %{private}s, isIssueNotification, %{private}d, fenceAge, %{private}.1lf, fLocationUpdatesStopTimestamp, %{private}.1lf, fLocationUpdatesStartTimestamp, %{private}.1lf
Fence: fence, %{private}s, new status, %{private}s, bundleId, %{private}s, not authorized, avoiding notification
bool CLFenceManager::sendFenceStatusNotification(const CLFenceManager_Type::Fence &, const CLFenceManager_Type::FenceStatus &, const CLDaemonLocation &, int)
#Warning Fence: avoid sending an unknown notification, fence, %s
Fence: pending, status, %{private}s, fence, %{private}s, timestamp, %{private}.1lf
entered
exited
 (all)
Sending %{private}s notification for %{private}s/%{private}s to client %{private}d%{private}s
void CLFenceManager::notifyFenceStatusChanged(const CLFenceManager_Type::Fence &, const CLFenceManager_Type::FenceStatus &, const CLDaemonLocation &)
#Warning Unknown fence status
ENTER
EXIT
Fence, %s, name, %s, date, %ld/%ld, time,%ld:%ld:%ld, loc, %.8lf, %.8lf, acc, %.2lf, distance, %.1lf
Fence Trigger
virtual bool CLFenceManager::registerForNotification(int, const CLFenceManager_Type::Notification &, const std::string &)
#Warning Fence: avoid sendFenceStatusNotification, fence, %s, status, %s, searchStatus, %s, client, %d, timestamp,%.1lf
Fence: sendFenceStatusNotification,fence,%s,fenceStatus,%s,searchStatus %s,client,%d
void CLFenceManager::onMonitorNotification(int, const CLFenceMonitor_Type::Notification &, const CLFenceMonitor_Type::NotificationData &)
Fence: got kNotificationFenceStatusChange
Fence: got kNotificationFenceDownloadRequest, fence, %s
void CLFenceManager::onDataDownloadNotification(int, const CLFenceDataDownloadManager_Type::Notification &, const CLFenceDataDownloadManager_Type::NotificationData &)
Fence: Got data downloaded notification for [%s]/%s/%s
#Warning Fence: Got data download failure notification for [%s]/%s/%s
Fence: Got data download invalidated notification
void CLFenceManager::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)
Got kNotificationLocationServicesStatus, enabled, %{public}d
Got fLocationUpdatesStopTimestamp, %.1lf, fLocationUpdatesStartTimestamp, %.1lf
Reauthorization requested, forcing start.
#Warning Got unknown client notification %d
void CLFenceManager::onAuthorizationNotification(int, const CLFenceAuthorizationManager_Type::Notification &, const CLFenceAuthorizationManager_Type::NotificationData &)
Got fence addition notification for %ld fences
Fence [%s]/%s/%s is authorized
Fence [%s]/%s/%s is not authorized
Got fence removal notification for %ld fences
Got fence reset notification
(Unknown)
(Inside)
(Outside)
(Invalid)
Pending geofence notification
virtual void CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLFenceManager_Type::Notification, NotificationData_T = CLFenceManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
void CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLFenceManager_Type::Notification, NotificationData_T = CLFenceManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
virtual bool CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLFenceManager_Type::Notification, NotificationData_T = CLFenceManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
virtual void CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::removeClient(int) [Notification_T = CLFenceManager_Type::Notification, NotificationData_T = CLFenceManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
virtual bool CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::clientRegistered(int, const Notification_T &) [Notification_T = CLFenceManager_Type::Notification, NotificationData_T = CLFenceManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
virtual bool CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::unregisterForNotification(int, const Notification_T &) [Notification_T = CLFenceManager_Type::Notification, NotificationData_T = CLFenceManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
virtual void CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::listClients() [Notification_T = CLFenceManager_Type::Notification, NotificationData_T = CLFenceManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
void CLMotionStateUtils::logChange(const CLMotionActivity &, const CLMotionActivity &, const char *)
MotionState,Motion,From,%d,To,%d,conf,%d,Mounted,From,%d,To,%d,conf,%d,tilt,%.1f,exitC,%d,exitTime,%f,startTime,%f,standing,%d,rawMotionType,%d,rawConfidence,%d,tag,%s
MotionSyncFireIntervalInSeconds
CLMotionSyncStoreWatch::CLMotionSyncStoreWatch(id<CLIntersiloUniverse>)
MotionSyncSendCalsFireIntervalInSeconds set to %f seconds.
CLMotionSyncStoreWatch::CLMotionSyncStoreWatch(id<CLIntersiloUniverse>)_block_invoke
Timer fired.
virtual void CLMotionSyncStoreWatch::deviceUnlocked()
unlocked
void CLMotionSyncStoreWatch::updateCalibrations()
Watch retrieved calibrations and saved them in memory, current version, %d
void CLMotionSyncStoreWatch::sendMotionCalsToCompanion()
%s, current version, %d, timestamp, %lf
void CLMotionSyncStoreWatch::persistCachedValues()
Watch did not persist Motion Cals, waiting until unlock, current version, %d, isDeviceCurrentlyUnlocked, %d
Begin persisting calibrations to disk on watch, current version, %d.
Persisted a reset Motion Cals
Finished setting user profile on watch = %s
Persisted raw speed to kValue bins
Persisted step cadence to stride length bins
Completed persistence of motion cals to disk on watch. %s
virtual void CLMotionSyncStoreWatch::receiveMotionCals(NSDictionary *)
Watch received motion calibrations from companion, %s, version, %d, timestamp, %lf, udid, %s
void CLMotionSyncStoreWatch::onUserInfoNotification(int, const CLNatalimetryNotifier_Type::Notification &, const CLNatalimetryNotifier_Type::NotificationData &)
user info notification
void CLMotionSyncStoreWatch::onMotionStateMediatorNotification(int, const CLMotionStateMediator_Type::Notification &, const CLMotionStateMediator_Type::NotificationData &)
Workout session ended on watch.
void CLMotionSyncStoreWatch::onCompanionNotification(int, const CLCompanionNotifier_Type::Notification &, const CLCompanionNotifier_Type::NotificationData &)
notification, %d
Unhandled notification
virtual void CLMotionSyncStoreWatch::rawSpeedToKValueBinsHaveChanged()
raw speed to kValue bins updated
virtual void CLMotionSyncStoreWatch::stepCadenceToStrideLengthBinsHaveChanged()
step cadence to stride length bins updated
void CLMotionSyncStoreWatch::doRestoreBackupMotionCals(const CLMotionSyncStoreWatch::EDeviceUnlocked *)
restore backup motion cals
void CLMotionSyncStoreWatch::doConnected(const CLMotionSyncStoreWatch::ECompanionConnected *)
connected
void CLMotionSyncStoreWatch::doUpdateMotionCals(const CLMotionSyncStoreWatch::EMotionCalsUpdated *)
updating motion cals
void CLMotionSyncStoreWatch::doRestoreBackupMotionCalsArbitrate(const CLMotionSyncStoreWatch::EDeviceUnlocked *)
restore and arbitrate
void CLMotionSyncStoreWatch::doBufferMotionCalsFromCompanion(const CLMotionSyncStoreWatch::ECalibrationFromCompanion *)
Buffered motion cals from companion
void CLMotionSyncStoreWatch::doDisconnected(const CLMotionSyncStoreWatch::ECompanionDisconnected *)
disconnected
void CLMotionSyncStoreWatch::doArbitrateMotionCals(const CLMotionSyncStoreWatch::ECalibrationFromCompanion *)
arbitrateMotionCals
void CLMotionSyncStoreWatch::restoreBackupMotionCals()
Restored backup calibrations, %s, version, %d, timestamp, %lf
motionCals[kCalibrationUDID]
currentMotionCals[kCalibrationUDID]
CLMotionSyncStoreWatch::ArbitrateResult CLMotionSyncStoreWatch::arbitrateMotionCals(NSDictionary *, NSDictionary *) const
No buffered Motion Cals, no arbitration
Ignoring update.  Phone Motion Cals UDID %s is different from current UDID %s, but version %d is not larger than current version %d
Buffered Motion Cals, version, %d, timestamp, %lf, udid, %s, Current Motion Cals, version, %d, timestamp, %lf, udid, %s, result, %d
void CLMotionSyncStoreWatch::scheduleFastSendToCompanion()
schedule send to companion
CLFenceMonitorCell
virtual void CLFenceMonitorCell::shutdown()
Fence: CLFenceMonitorCell, shutdown
bool CLFenceMonitorCell::lacMonitoringSufficient(const CLFenceManager_Type::Fence &, const CLDaemonLocation &)
Fence: distance = %.2f; compare = %.2f
not 
Fence: LAC monitoring is %ssufficient for %s/%s
bool CLFenceMonitorCell::cellMonitoringSufficient(const CLFenceManager_Type::Fence &, const CLDaemonLocation &)
distance = %.2f; compare = %.2f
Fence: no allowing wifi monitor for, %.1lf, fence, %s
Cell monitoring is %ssufficient for %s/%s
kCMCatherineDataCodingKeyCatherine
kCMCatherineDataCodingKeyConfidence
%@,<catherine %f confidence %f @ %f>
catherine
Td,R,N,V_catherine
Td,R,N,V_confidence
live
reproc
static std::vector<Types::ComputedLocation> CL::WifiPositioning::Policies::PositionCalculation::HandleEvent::processScanGroups(const std::vector<std::vector<CLWifiService_Type::AccessPoint> > &, const std::vector<CLWifiAPLocation> &, HandleEvent::ScanCacheType)
@WsbCalc, groups, %{public}lu, %{public}s
ap.hasValidLocation()
@WsbLoc, fix, aps, %{public}lu, reproc, %{public}d, time, %{public}.1f, hAcc, %{public}.1f, %{public}d, ll, %{private}.3lf, %{private}.3lf
@WsbLoc, none, aps, %{public}lu, %{public}lu, reproc, %{public}d, time, %{public}.3f, hAcc, %{public}.1f
WsbCalc, computed, %{public}d, of, %{public}lu, %{public}s
inputAps
locationHint
static Types::ComputedLocation CL::WifiPositioning::Policies::PositionCalculation::HandleEvent::computePosition(const std::vector<CLWifiAPLocation> &, const CLDaemonLocation &, cl::chrono::CFAbsoluteTimeClock::time_point)
@WifiAps, compute, %{public}lu, used, %{public}u
Types::ComputedLocation CL::WifiPositioning::Policies::PositionCalculation::HandleEvent::updateSingleShotLocation(Types::ComputedLocation, const char *) const
@WifiFlow, compute, %{public}u, hacc, %{public}.1f, conf, %{public}d, reason, %{public}s
CLFenceDatabase::CLFenceDatabase(const CLSqliteDatabase::SqliteProperties &)
Fence: No access to DB
Fences
bool CLFenceDatabase::addFence(const CLFenceManager_Type::Fence &)
Fence: addFence, %s
Distance
DesiredAccuracy
LastStatus
SetupComplete
MonitorFlags
OnBehalfBundleId
ReferenceFrame
) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
#Warning Fence: Couldn't bind statement for adding fence (bundle ID %s, name %s)
bool CLFenceDatabase::removeFence(const CLFenceManager_Type::Fence &)
Fence: Removing fence %s/%s
#Warning Fence: Couldn't bind statement for deleting fence (bundle ID %s, name %s)
bool CLFenceDatabase::removeAllFencesForBundleIncludingOnBehalf(const std::string &)
#Warning Fence: Couldn't bind statement for deleting fences for bundle ID %s
bool CLFenceDatabase::getAllFences(CLFenceManager_Type::FencesVector &)
Fence: Couldn't get fences from database
Fence: fetched fence, %s
Fence: Error in retrieving fences from database
bool CLFenceDatabase::getFencesForBundle(const std::string &, CLFenceManager_Type::FencesVector &)
Fence: Couldn't bind bundle ID %{public}s
Fence: fetched bundle fence, %s
Fence: Error in retrieving fences from database for bundle ID %{public}s
bool CLFenceDatabase::getFencesForBundleIncludingOnBehalf(const std::string &, CLFenceManager_Type::FencesVector &)
SELECT 1
bool CLFenceDatabase::isFenceRegistered(const std::string &, const std::string &, const std::string &)
Fence: Couldn't bind fence [%{public}s]/%{public}s/%{public}s
int CLFenceDatabase::numFencesForBundle(const std::string &)
#Warning Fence: Couldn't get number of fences for bundle ID %s
void CLFenceDatabase::clearAllFenceStatus()
#Warning Fence: Clearing status for all fences
= 0.0
void CLFenceDatabase::lastDownloadTimeChanged(const std::string &, const std::string &, const std::string &, const double)
Fence: Recording [%s]/%s/%s last download time change to %.2f
#Warning Fence: Couldn't update last download time for %s/%s in database
void CLFenceDatabase::markDataDownloadInvalid()
Fence: Marking all fence data download times as invalid
void CLFenceDatabase::markDataDownloadInvalidForBundleAndOnBehalf(const std::string &, const std::string &)
Fence: invalidate download date for, %s
UPDATE OR IGNORE 
Fence: failed to bind bundleId, %{public}s
bool CLFenceDatabase::getBundleIds(std::vector<std::string> &)
Fence: Couldn't get bundle IDs from database
Fence: Error in retrieving bundle IDs from database
void CLFenceDatabase::addMonitoredFlagsColumnIfNotExists()
Fence: addMonitoredFlagsColumnIfNotExists
Fence: addMonitoredFlagsColumnIfNotExists, table doesn't even exist
Fence: addMonitoredFlagsColumnIfNotExists, MonitorFlags already exists
void CLFenceDatabase::addOnBehalfBundleIdColumnIfNotExists()
addOnBehalfBundleIdColumnIfNotExists
addOnBehalfBundleIdColumnIfNotExists, table doesn't even exist
addOnBehalfBundleIdColumnIfNotExists, OnBehalfBundleId already exists
Re-create primary key to include OnBehalfBundleId
void CLFenceDatabase::addReferenceFrameColumnIfNotExists()
Fence: addReferenceFrameColumnIfNotExists
Fence: addReferenceFrameColumnIfNotExists, table doesn't even exist
Fence: addReferenceFrameColumnIfNotExists, ReferenceFrame already exists
hasKey
T@"NSString",&,N,V_key
hasValue
TI,N,V_value
kElevationSourcePhone
kElevationSourceWatch
machineFrequency
Tf,N,V_machineFrequency
virtual CLSwimAlgResultFlags CLSwimAlgController::processFusion(const CLSwimFusionInput &, CLSwimEntry &)
Stroke detected,timestamp,%.3f,count,%lu,startTime,%f,isSwim,%d,style,%d
Turn detected,timestamp,%f,startTime,%f,isSwimming,%d
void CLSwimAlgController::feedOdometer(const CLOdometerNotifier_Type::NotificationData &)
[SwimOdom] Received an odometer update,distance,%lf,accuracy,%lf,speed,%lf,rawspeed,%lf,odometer,%lf,gpsSpeedAccuracy,%lf,timestampGps,%lf
bool CLSwimAlgController::commitLaps(std::vector<CLSwimDetectedLap> &, CLMotionTypeTimestamp)
New lap entry, identifier, %llu, uuid, %s, sourceId, %s, startTime, %f, endTime, %f, timestamp, %f, pace, %f, distance, %f, paceSource, %d, style, %d, numberOfStrokes, %d, totalLaps, %d, inserted, %d, segment, %d
void CLSwimAlgController::logDistributionParameters(CLSwimStyleType, CLMotionTypeTimestamp, CLMotionTypeTimestamp, CLSwimStrokesPerTurnDistribution) const
style,%d,currentTimestamp,%f,turnTimestamp,%f,turnStartTime,%f,mean,%f,stddev,%f,min,%f,max,%f,median,%f,samples,%d,prctile10,%f,prctile90,%f
bool CLSwimAlgController::sessionUpdate(const CLMotionStateMediator_Type::MotionOverride &, CFAbsoluteTime, CLSwimSessionStats &)
Invalid pool length %f for pool swim.  Assuming pool swim but with invalid distances.
const T &CMQueue<CLSwimFusionInput>::operator[](const size_t) const [T = CLSwimFusionInput]
const T &CMQueue<CLSwimAlgController::BufferedStroke>::operator[](const size_t) const [T = CLSwimAlgController::BufferedStroke]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Framework/CoreMotion/CMMotionAlarm.mm
type == kCMMotionAlarmTypeTimer
type < kMotionAlarmTypeCount
kCMMotionAlarmName
kCMMotionAlarmType
kCMMotionAlarmDuration
kCMMotionAlarmRepeats
kCMMotionAlarmId
kCMMotionAlarmBundleId
kCMMotionAlarmState
Name: %@, Type: %d, Duration: %d, Repeats: %d, AlarmID: %llu, BundleID: %@, AlarmState: %@
supportsSecureCoding
TB,R
alarmId
TQ,N,V_alarmId
T@"NSString",&,N,V_bundleId
Ti,N,V_state
T@"CMMotionAlarmManager",&,N,V_manager
T@"NSString",R,&,N,V_name
duration
TI,R,N,V_duration
repeats
TB,R,N,V_repeats
TI,R,N,V_type
serviceName
T@"NSString",R,C,N,V_serviceName
activeSyncSession
T@"PSYServiceSyncSession",R,N,V_activeSyncSession
delegate
T@"<PSYSyncCoordinatorDelegate>",N,V_delegate
syncRestriction
TQ,N,V_syncRestriction
didComplete
TB,N,V_didComplete
syncSessionType
TQ,N,V_syncSessionType
CLStrideCalibrationSessionMetrics::CLStrideCalibrationSessionMetrics(CFTimeInterval, int32_t)
SessionMetrics,Start
-[CMStrideCalibrationStats endSessionMetrics:]
SessionMetrics,End,Summary,DistanceFusionSuccess,%0.6f,DistanceFusionOther,%0.6f,DistanceFusionGPS,%0.6f,DistanceFusionPedometer,%0.6f,DistanceFusionGradient,%0.6f,DistanceFusionGain,%0.6f,DistanceFusionSpeed,%0.6f,DistanceFusionLength,%0.6f,startTime,%0.6f,endTime,%0.6f
NoFailReason
Pedometer
Gradient
Gain
Speed
Length
Other
Success
Fail
-[CMStrideCalibrationStats awdLogDistance:status:description:]
SessionMetrics,%s,%s,%s,DistanceFusion,%0.4f
-[CMStrideCalibrationStats awdMotionFitnessStrideCalibration:]
Trying to send track with startTime %f. a %u b %u a == b %d
Trying to send track with startTime %f. now %f 2 %f 1 %f
const T &CMQueue<double>::operator[](const size_t) const [T = double]
clTimer
-[CLPersistentTimerInternal setTimerWithInterval:]
setTimerWithInterval, %s, interval, %.1lf
interval, %s, %.5lf, flooring to 1.0, interval
setTimerWithInterval, %s, interval, DBL_MAX
!_pcTimer
_clTimer
-[CLPersistentTimerInternal timerFired:]
timerFired: timer, _clTimer, %s, %p, %p
-[CLPersistentTimerInternal invalidate]
Scheduling invalidation, %s, %p
-[CLPersistentTimerInternal invalidate]_block_invoke
invalidate, %s, %p
void CLPersistentTimer::setNextFireDate(CFAbsoluteTime)
setNextFireDate, %s, %.1lf
void CLPersistentTimer::timerFired()
timerFired, fIdentifier, %s, f, %p
void CLPersistentTimer::invalidate()
Invalidate, %s
heartRate
TI,N,V_mode
Tf,N,V_confidence
Tf,N,V_heartRate
adapter
T@"<CLMotionAlarmNotifierClientProtocol>",&,N,V_adapter
T{Name={basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}BBB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}BB},N,V_name
CLMotionAlarmNotifierSilo
virtual void CLMotionAlarmNotifier::shutdown()
Shutting down alarm notifier.
bool CLMotionAlarmNotifier::registerClient(CLClientManager_Type::Name *, id<CLMotionAlarmNotifierClientProtocol>)
Invalid name.
Unable to create client bundle identifier.
Registering client: %{private}@.
bool CLMotionAlarmNotifier::unregisterClient(CLClientManager_Type::Name *)
Unregistering client: %{private}@.
bool CLMotionAlarmNotifier::registerAlarm(CMMotionAlarm *, CLMotionAlarmReplyHandler)
Registering alarm for client: %{private}@, name: %{private}@.
Invalid alarm to add!
Alarm already exists for client, firing: %{private}@, name: %{private}@.
Updating alarm for client: %{private}@, name: %{private}@.
v20@?0@"CMMotionAlarm"8i16
Failed to update or insert alarm for client: %{private}@ name: %{private}@.
Alarm construction failed!
Failed to remove alarm entry for id: %llu.
Construction of alarm failed for client: %{private}@ name: %{private}@.
bool CLMotionAlarmNotifier::unregisterAlarm(CMMotionAlarm *, CLMotionAlarmReplyHandler)
Unregistering alarm for client: %{private}@, name: %{private}@.
Invalid alarm to remove!
Unable to find alarm to remove!
Failed to remove activity alarm entry for id: %llu.
bool CLMotionAlarmNotifier::acknowledgeAlarm(CMMotionAlarm *, CLMotionAlarmReplyHandler)
Acknowledging alarm for client: %{private}@, name: %{private}@.
Invalid alarm to acknowledge!
Unable to find alarm entry to acknowledge!
Unable to acknowledge alarm in state: %@ for client: %{private}@ name: %{private}@, id: %llu.
Preconditions have been violated and we have a repeating activity alarm!
Setting alarm to %@ for client: %{private}@, id: %llu.
bool CLMotionAlarmNotifier::removeAllAlarmsForBundle(NSString *)
Removing all alarms for client: %{private}@.
bool CLMotionAlarmNotifier::addTimeAlarm(NSString *, NSString *, uint64_t, uint32_t, bool)
Time alarm already exists for id: %llu.
Saving persistent alarm for client: %{private}@, id: %llu, duration: %u, repeats: %d, fire: %f.
bool CLMotionAlarmNotifier::removeTimeAlarm(uint64_t)
Unable to find persistent alarm for id: %llu.
Removing persistent alarm for id: %llu.
bool CLMotionAlarmNotifier::addActivityAlarm(NSString *, NSString *, uint64_t, CMMotionAlarmType, uint32_t)
Invalid trigger type!
Unable to create activity alarm key.
Activity alarm already exists for id: %llu.
v24@?0@"CMActivityAlarm"8@"NSError"16
Failed to create activity alarm for client: %{private}@, id: %llu.
Saving activity alarm for client: %{private}@, id: %llu, trigger: %d duration: %u.
bool CLMotionAlarmNotifier::removeActivityAlarm(uint64_t)
Unable to find activity alarm for id: %llu.
Removing activity alarm for id: %llu.
bool CLMotionAlarmNotifier::restoreAlarms()
Unable to access database after first unlock!
Restoring alarms: %lu.
Removing expired alarms: %lu.
void CLMotionAlarmNotifier::onActivityAlarmFired(CMActivityAlarm *, NSError *)
Invalid alarm timer.
Invalid alarm identifier.
Activity alarm timer fired: %llu.
Activity alarm is pending acknowledgment. Not firing alarm.
void CLMotionAlarmNotifier::onPersistentTimerFired(CLPersistentTimer *)
Unexpected alarm identifier.
Persistent timer fired id: %llu.
Persistent timer is pending acknowledgment. Not firing alarm.
void CLMotionAlarmNotifier::incrementState(CMMotionAlarm *)
Alarm state is rolling over for alarm: %llu.
void CLMotionAlarmNotifier::fireAlarmWithRetry(uint64_t)
Unable to find alarm for id: %llu.
void CLMotionAlarmNotifier::fireAlarmWithRetry(CMMotionAlarm *)
Invalid fire state: %@.
Previous alarm state: %@, current state: %@.
Maximum launch attempts reached for: %{private}@.
Failed to update state for the alarm: %llu!
void CLMotionAlarmNotifier::fireAlarmOnClient(CMMotionAlarm *)
Firing alarm on client: %@, current state: %@.
Unable to fire alarm on client, client is not registered: %@, current state: %@.
void CLMotionAlarmNotifier::setupRetryTimerForAlarm(CMMotionAlarm *)_block_invoke
Re-firing alarm: %llu.
bool CLMotionAlarmNotifier::isApplicationInstalled(NSString *)
Application %{private}@ installed: %d.
bool CLMotionAlarmNotifier::launchRemoteApplication(NSString *, CLMotionAlarmLaunchHandler)
Application %{private}@ sending remote app launch.
v16@?0^{CLCompanionNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBBd@{unique_ptr<CLMotionStateObserver_Type::Client, std::__1::default_delete<CLMotionStateObserver_Type::Client> >={__compressed_pair<CLMotionStateObserver_Type::Client *, std::__1::default_delete<CLMotionStateObserver_Type::Client> >=^{Client}}}{unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client> >={__compressed_pair<CLDataProtectionManager_Type::Client *, std::__1::default_delete<CLDataProtectionManager_Type::Client> >=^{Client}}}{unique_ptr<CLFitnessTrackingNotifier_Type::Client, std::__1::default_delete<CLFitnessTrackingNotifier_Type::Client> >={__compressed_pair<CLFitnessTrackingNotifier_Type::Client *, std::__1::default_delete<CLFitnessTrackingNotifier_Type::Client> >=^{Client}}}@}8
bool CLMotionAlarmNotifier::launchApplication(NSString *)
Launching application: %{private}@.
bool CLMotionAlarmNotifier::launchApplication(NSString *)_block_invoke
Could not acquire task assertion for bundleId: %{private}@.
Acquired task assertion for bundleId: %{private}@.
Releasing process assertion for bundle: %{private}@.
watchkitextension
bool CLMotionAlarmNotifier::isBundleValid(NSString *)
Invalid alarm bundle identifier!
void CLMotionAlarmNotifier::onDataProtectionManagerNotification(int, const CLDataProtectionManager_Type::Notification &, const CLDataProtectionManager_Type::NotificationData &)
Device unlocked since boot: %{private}s.
CLMotionAlarmNotifier
virtual void CLNotifier<CLMotionAlarm_Type::Notification, CLNotifier_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLMotionAlarm_Type::Notification, NotificationData_T = CLNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLMotionAlarm_Type::Notification, CLNotifier_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLMotionAlarm_Type::Notification, NotificationData_T = CLNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLMotionAlarm_Type::Notification, CLNotifier_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLMotionAlarm_Type::Notification, NotificationData_T = CLNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLMotionAlarm_Type::Notification, CLNotifier_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLMotionAlarm_Type::Notification, NotificationData_T = CLNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLMotionAlarm_Type::Notification, CLNotifier_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLMotionAlarm_Type::Notification, NotificationData_T = CLNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLMotionAlarm_Type::Notification, CLNotifier_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLMotionAlarm_Type::Notification, NotificationData_T = CLNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLMotionAlarm_Type::Notification, CLNotifier_Type::NotificationData, char, char>::listClients() [Notification_T = CLMotionAlarm_Type::Notification, NotificationData_T = CLNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
BSID
ZONEID
BANDCLASS
CHANNEL
PNOFFSET
CLCdmaCellLocationDatabase::CLCdmaCellLocationDatabase(const char *, const CLSqliteDatabase::SqliteProperties &, double)
virtual CLCdmaCellLocationDatabase::~CLCdmaCellLocationDatabase()
Delete CLCdmaCellLocationDatabase
bool CLCdmaCellLocationDatabase::getLocation(const CLTelephonyService_Type::CdmaCell &, sqlite3_int64 &)
GET could not bind %d %d %d %d %d %d %d %d %d
bool CLCdmaCellLocationDatabase::setLocation(const CLTelephonyService_Type::CdmaCell &, const CLDaemonLocation &)
SET could not bind %d %d %d %d %d %d %d %d %d
bool CLCdmaCellLocationDatabase::getLocation(sqlite3_int64, CLTelephonyService_Type::CdmaCell &) const
getCell SID %d NID %d
bool CLGeoidModel::_static_check_dma_index(int)
Bad index into kkDefenseMappingAgencyTenByTenGeoid.
bool CLGeoidModel::getUndulationFromDefenseMappingAgency10by10Geoid(double, double, float &)
#Warning Input latitude = %.9lf is out of possible range
longitude %.9lf is not valid.
latitude %.9lf is not valid.
strokePower
strokeAmp
strokeFrequency
Tf,N,V_strokePower
hasStrokeAmp
Tf,N,V_strokeAmp
hasStrokeFrequency
Tf,N,V_strokeFrequency
CLSimulatedLocationProviderSilo
simulated
registrant
scanready
static CL::WifiPositioning::Events::Wifi::ScanBuffer CL::WifiPositioning::Events::Wifi::ScanBuffer::newFromBackgroundScanWith5GhzChannelFilter(const std::vector<CLWifiService_Type::AccessPoint> &)
@WsbGroup, add, %{public}lu, aps, %{public}lu, time, %{public}.1f
@WsbGroup, last, %{public}lu, aps, %{public}lu, time, %{public}.1f
request
scan
ssize_t CLMotionNotifier::numberOfClients(int)
Unknown notification %d
CFTimeInterval CLMotionNotifier::minimumUpdateInterval(int)
bool CLMotionNotifier::addDispatcherPrivate(int, CLMotionNotifier::Dispatcher *, const CFTimeInterval &)
Requested update interval cannot be == 0.0 and dispatcher cannot be NULL. Use interval < 0.0 for spectator.
CLMotionNotifier::addDispatcherPrivate UpdateInterval is zero!
CLMotionNotifier::addDispatcherPrivate Added dispatcher for notification:%d, Update Interval:%f(%.1fHz)
void CLMotionNotifier::updateSamplePeriods(int)
CLMotionNotifier::updateSamplePeriod UpdateInterval:%f
CLAuthSyncManagerSilo
/System/Library/Frameworks/CoreMotion.framework/Support
static void CLMotionCore::create()
Could not get parent thread parameters
Motion runloop ref still not set!
Could not get scheduling parameters for motion thread, error = %{public}d
LogSensorAscii
bool CLMotionCore::shouldLogSensorAscii()_block_invoke
LogSensorAscii,%d
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Shared/Motion/CLMotionCore.mm
com.apple.CoreMotion.MotionThread
com.apple.CoreMotion
MotionThreadPriority
static void *CLMotionCore::runMotionThread(void *)
could not create runloop source
static void *CLMotionCore::runMotionThread(void *)_block_invoke_2
Ping timer fired, resetting watchdog
UIApplicationWillResignActiveNotification
UIApplicationDidBecomeActiveNotification
Motion thread watchdog
static void *CLMotionCore::runMotionThread(void *)_block_invoke_3
Motion thread deadlock watchdog after %d petting
com.apple.CoreMotion.ThreadDeadlockCount
%@.%@
Failed to create watchdog timer
v16@?0^{__CFRunLoopTimer=}8
Motion thread exiting
void CLMotionCore::onSystemPowerChanged(io_service_t, uint32_t, void *)
CLMotionCore::SleepBounce
CLMotionCore::PoweredOnBounce
void CLMotionCore::willResignActive()_block_invoke
willResignActiveBounce
void CLMotionCore::didBecomeActive()_block_invoke
didBecomeActiveBounce
EnableEllipticalLoadCal
EllipticalModelMetsScale
EllipticalModelSwitchMargin
CLNatalieEllipticalModel::CLNatalieEllipticalModel()
Ellptical, Load Calibration Enabled status, %d, WR-HR switch margin, %f
virtual CLMetsInfo CLNatalieEllipticalModel::computeMETS(const CLNatalieModelInput &)
Elliptical, Linear Regression, timestamp, %f, duration, %f, stepcount, %d, steprate, %f, resistance, %f, weight, %f, feature2, %f, mets, %f
Elliptical, DT Regression, timestamp, %f, catherine(cpm), %f, catherinemax(cpm), %f, catherinemin(cpm), %f, vo2max(METs), %f, METS, %f
Elliptical, METs, timestamp, %f, hrMets, %f, wrMets, %f, calibrationValue, %f, calibrated wrMets, %f, HR-WR diff, %f, mets, %f, metsSource, %d, fMetsScaling, %f, loadCalStatus, %d
Unrecognized notification
INSERT INTO VO2MaxInputHistory (uuid, startTime, mets, metSource, hr, hrConfidence, gradeType, grade, gps, strideCal, workoutType) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
virtual void CLVO2MaxInputCache::insertRecordUL(const VO2MaxInput &, bool)
Unable to insert VO2Max Input record.
CLVO2MaxInputCache
SELECT * from VO2MaxInputHistory WHERE uuid = ?
CMError CLVO2MaxInputCache::getEntries(unsigned char *, std::vector<VO2MaxInput> &) const
Unable to get entries for uuid %{public}s
DELETE from VO2MaxInputHistory WHERE startTime < ?
long CLVO2MaxInputCache::aggregateRecordsInternal(const CLAggregationRules &, CFAbsoluteTime)
Unable to purge records.
VO2MaxInputHistory
DELETE FROM VO2MaxInputHistory
ALTER TABLE 
 ADD COLUMN 
 = 0;
SELECT * from VO2MaxInputHistory
SELECT * from VO2MaxInputHistory ORDER BY rowid DESC LIMIT 1
hrConfidence
grade
strideCal
CLActivityRecorderDb<VO2MaxInput, CLActivityDB::NoDataProtectionPolicy>::CLActivityRecorderDb(const char *, bool, float, const std::string, const CLSqliteDatabase::SqlitePropertyPersistence) [T = VO2MaxInput, DataProtectionPolicy = CLActivityDB::NoDataProtectionPolicy]
bool CLActivityRecorderDb<VO2MaxInput, CLActivityDB::NoDataProtectionPolicy>::setDatabaseAccessible() [T = VO2MaxInput, DataProtectionPolicy = CLActivityDB::NoDataProtectionPolicy]
bool CLActivityRecorderDb<VO2MaxInput, CLActivityDB::NoDataProtectionPolicy>::isValidTime(CFAbsoluteTime &) const [T = VO2MaxInput, DataProtectionPolicy = CLActivityDB::NoDataProtectionPolicy]
bool CLActivityRecorderDb<VO2MaxInput, CLActivityDB::NoDataProtectionPolicy>::migrateDbConstraints(const char *, const CLSqliteDatabase::ColumnInfo *, const char **) [T = VO2MaxInput, DataProtectionPolicy = CLActivityDB::NoDataProtectionPolicy]
#Notice %{public}s needs autoincrement migration
AutoIncr
) SELECT 
 RENAME TO 
#Notice %{public}s autoincrement migration succeeded
%{public}s autoincrement migration failed
virtual void CLActivityRecorderDb<VO2MaxInput, CLActivityDB::NoDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, bool) [T = VO2MaxInput, DataProtectionPolicy = CLActivityDB::NoDataProtectionPolicy]
CLSensorRecorderDb
Data
Meta
SensorRecorderCacheSizeBytes
CLSensorRecorderDb::CLSensorRecorderDb(bool, const std::string, CLSensorRecorder_Types::DataType)
SensorRecorderCacheSizeBytes, %d
SensorRecorderType, %s
virtual void CLSensorRecorderDb::prepareSQLStatements()
On root, skip purge.
1834
Table version is older than 1834. Purging.
Device is locked and we are unable to open the database
 WHERE dataId = 0
void CLSensorRecorderDb::storeToDb(bool)
Flushing to memory. %zu, %zu
 (startTime, timestamp, dataId, offset, size, movement) VALUES (?, ?, ?, ?, ?, ?)
Unable to insert meta data.
 (data) VALUES (?)
Unable to insert data.
Unable to get last accel data id.
 SET dataId = ? WHERE dataId = 0
Unable to update meta records dataId.
SELECT * FROM 
 WHERE id = ?
bool CLSensorRecorderDb::getSensorRecordMeta(uint64_t, CLSensorRecorderSensorMeta *)
Database is inaccessible
bool CLSensorRecorderDb::getSensorRecordData(CLSensorRecorderSensorData &, uint64_t) const
Invalid query, both data id and meta id are 0
 WHERE id >= ? ORDER BY id ASC
bool CLSensorRecorderDb::getSensorRecordMetaSinceId(uint64_t, CLSensorRecorderSensorMeta *)
 WHERE startTime >= ? ORDER BY id ASC LIMIT 1
 WHERE startTime < ? ORDER BY id DESC LIMIT 1
CLActivityDB::ActivityCode CLSensorRecorderDb::getSensorRecordMetaIdsBounds(CFAbsoluteTime, CFAbsoluteTime, CLSensorRecorderSensorMeta *, CLSensorRecorderSensorMeta *) const
Database upper and/or lower time bound query failed to bind.
Database upper and/or lower time bound query failed.
bool CLSensorRecorderDb::getSensorRecordMetaIds(CFAbsoluteTime, CFAbsoluteTime, NSMutableArray *)
Data request failed because db is not accessible.
Non-empty, endTime in memory, %d, current time, %f, endTime, %f, first entry startTime, %f, 
Data requested is in memory.  Writing incremental data out to disk.
 WHERE ? <= id AND id <= ? ORDER BY id ASC
SELECT dataId FROM 
 WHERE startTime < ? ORDER BY dataId DESC LIMIT 1
 WHERE id < ?
 WHERE dataId < ?
dataId
ActivityInMemoryBufferSize
CLActivityRecorderDb<CLSensorRecorderDataPacket, CLActivityDB::NoDataProtectionPolicy>::CLActivityRecorderDb(const char *, bool, float, const std::string, const CLSqliteDatabase::SqlitePropertyPersistence) [T = CLSensorRecorderDataPacket, DataProtectionPolicy = CLActivityDB::NoDataProtectionPolicy]
Buffer size: %d
%s.InMemoryTransaction
bool CLActivityRecorderDb<CLSensorRecorderDataPacket, CLActivityDB::NoDataProtectionPolicy>::setDatabaseAccessible() [T = CLSensorRecorderDataPacket, DataProtectionPolicy = CLActivityDB::NoDataProtectionPolicy]
In memory buffer should have been empty! Instead it had a size of %{public}lu.
dataLength < row.length
virtual void CLActivityRecorderDb<CLSensorRecorderDataPacket, CLActivityDB::NoDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, bool) [T = CLSensorRecorderDataPacket, DataProtectionPolicy = CLActivityDB::NoDataProtectionPolicy]
#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf
Potential CM database inconsistency, time jump
Entry being recorded has a startTime in the recent past.  Deleting records after %f.
Entry being recorded has a startTime in the substantial past.  Shift records by %f.
Failed to insert record due to failure from reading the most recent entry.
CLOldWifiScanner::WifiConfiguration::WifiConfiguration(CLWifiService_Type::ScanType, CLOldWifiScanner::WifiConfiguration::PassiveActiveType, CLOldWifiScanner::WifiConfiguration::PriorityType, cl::chrono::secondsf, std::vector<CLWifiService_Type::Notification>, cl::chrono::secondsf, cl::chrono::secondsf)
#Warning %p Scan delay of %Lf secs is invalid. Setting to the minimum of %Lf secs
CLOldWifiScanner::CLOldWifiScanner(id<CLIntersiloUniverse>, CLOldWifiScanner::ScanningPolicy)
%p INITIAL isWifiPowered=%d
void CLOldWifiScanner::start()
%p Start monitor for active scanning
void CLOldWifiScanner::stop()
%p Stop monitor for active scanning
void CLOldWifiScanner::onTimerTrigger()
%p TIMER TRIGGERED
void CLOldWifiScanner::scheduleNextScan(cl::chrono::secondsf)
%p WIFI EXECUTING IMMEDIATELY, now=%f nextRequestTime=%f
%p WIFI SCAN SCHEDULED FOR %f
bool CLIoHidFastPathInterface::FastPathDevice::initializeFastPath(NSDictionary *)
[FastPath] Already initialized
[FastPath] Cannot initialize fast path when service ref is null
[FastPath] Initialization failed,serviceRef,%@,properties,%@
void CLIoHidFastPathInterface::FastPathDevice::closeFastPath()
[FastPath] Not initialized, nothing to close
virtual id CLIoHidFastPathInterface::FastPathDevice::copyProperty(NSString *)
[FastPath] Fast path not initialized! Can't copy property
[FastPath] Cannot copy property when service ref is null
virtual void CLIoHidFastPathInterface::FastPathDevice::setProperty(NSString *, id)
[FastPath] Fast path not initialized! Can't set property %@ to %@
[FastPath] Set property failed! %@, %@
CLCatherineNotifierSilo
CLCatherineNotifier
virtual void CLCatherineNotifier::shutdown()
CLCatherineNotifier is shutting down.
virtual bool CLCatherineNotifier::registerForNotificationInternal(const CLCatherineNotifier_Type::Notification &)
CatherineNotifier Added client for %d, count %d
virtual bool CLCatherineNotifier::unregisterForNotificationInternal(const CLCatherineNotifier_Type::Notification &)
CatherineNotifier Removed client for %d, count %d
virtual void CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLCatherineNotifier_Type::Notification, NotificationData_T = CLCatherineNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLCatherineNotifier_Type::Notification, NotificationData_T = CLCatherineNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLCatherineNotifier_Type::Notification, NotificationData_T = CLCatherineNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLCatherineNotifier_Type::Notification, NotificationData_T = CLCatherineNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLCatherineNotifier_Type::Notification, NotificationData_T = CLCatherineNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLCatherineNotifier_Type::Notification, NotificationData_T = CLCatherineNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::listClients() [Notification_T = CLCatherineNotifier_Type::Notification, NotificationData_T = CLCatherineNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
CLExerciseMinuteRecorderDb
virtual long CLExerciseMinuteRecorderDb::aggregateRecords(const CLAggregationRules &)
ExerciseMinute, Failed to expire records.
CMError CLExerciseMinuteRecorderDb::queryExerciseMinuteDataSince(CLExerciseMinuteData &, std::vector<CLExerciseMinuteData> &) const
ExerciseMinute, DB not accessible.
ExerciseMinute, DB UUID un-initialized
ExerciseMinute, Potential DB reset / roll back, returning all records to clients,mru.recordId,%d,record.recordId,%d
ExerciseMinuteHistory
SELECT COUNT(*) FROM ExerciseMinuteHistory
SELECT * FROM ExerciseMinuteHistory ORDER BY startTime ASC
SELECT * FROM ExerciseMinuteHistory WHERE id >= ? ORDER BY id ASC LIMIT ?
DELETE FROM ExerciseMinuteHistory WHERE startTime < ?
DELETE FROM ExerciseMinuteHistory WHERE startTime > ?
DELETE FROM ExerciseMinuteHistory
INSERT INTO ExerciseMinuteHistory (startTime) VALUES (?)
UPDATE ExerciseMinuteHistory SET startTime = startTime + ?
SELECT * FROM ExerciseMinuteHistory ORDER BY startTime DESC LIMIT 1
virtual void CLExerciseMinuteRecorderDb::prepareSQLStatements()
ExerciseMinute, Device is locked and we are unable to open the database
virtual void CLExerciseMinuteRecorderDb::deleteRecordsAfterInsertUL(const CLExerciseMinuteData &)
ExerciseMinute, Failed to delete records
virtual void CLExerciseMinuteRecorderDb::shiftRecordsByUL(CFTimeInterval)
ExerciseMinute, Failed to shift records
CLActivityRecorderDb<CLExerciseMinuteData, CLActivityDB::NoDataProtectionPolicy>::CLActivityRecorderDb(const char *, bool, float, const std::string, const CLSqliteDatabase::SqlitePropertyPersistence) [T = CLExerciseMinuteData, DataProtectionPolicy = CLActivityDB::NoDataProtectionPolicy]
bool CLActivityRecorderDb<CLExerciseMinuteData, CLActivityDB::NoDataProtectionPolicy>::setDatabaseAccessible() [T = CLExerciseMinuteData, DataProtectionPolicy = CLActivityDB::NoDataProtectionPolicy]
virtual void CLActivityRecorderDb<CLExerciseMinuteData, CLActivityDB::NoDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, bool) [T = CLExerciseMinuteData, DataProtectionPolicy = CLActivityDB::NoDataProtectionPolicy]
kCLTriggerTypeUnknown
kCLTriggerTypePassbook
kCLTriggerTypeVisit
kCLHarvestDataPoiTriggerTypeUnknown
kCLHarvestDataPoiTriggerSubTypePassUnknown
kCLHarvestDataPoiTriggerSubTypePassApplePay
kCLHarvestDataPoiTriggerSubTypeVisitReverseGeocode
kCLHarvestDataPoiTriggerSubTypeVisitContacts
kCLHarvestDataPoiTriggerSubTypeVisitUser
kCLHarvestDataPoiTriggerSubTypeVisitMapsSupportFavorite
kCLHarvestDataPoiTriggerSubTypeVisitMapsSupportHistoryEntryRoute
kCLHarvestDataPoiTriggerSubTypeVisitMapsSupportHistoryEntryPlaceDisplay
kCLHarvestDataPoiTriggerSubTypeVisitEventKit
TiggerUUIDKey
TriggerTypeKey
TriggerSubTypeKey
MapsUniqueIdKey
ProviderIdKey
triggerType
triggerSubtype
mapsUniqueId
providerId
triggerUUID
T@"NSUUID",C,N,V_triggerUUID
Tq,N,V_triggerType
triggerSubType
Ti,N,V_triggerSubType
mapsUniqueIdentifier
TQ,N,V_mapsUniqueIdentifier
providerIdentifier
Ti,N,V_providerIdentifier
LocationKey
BundleIdsKey
RawMotionActivityKey
MotionActivityKey
DominantMotionActivityKey
bundleIds
T{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii},N,V_location
T@"NSSet",C,N,V_bundleIds
rawMotionActivity
T{CLMotionActivity=iiiiBfdBiddii{?=b1b1b1b1b1}},N,V_rawMotionActivity
motionActivity
T{CLMotionActivity=iiiiBfdBiddii{?=b1b1b1b1b1}},N,V_motionActivity
dominantMotionActivity
T{CLMotionActivity=iiiiBfdBiddii{?=b1b1b1b1b1}},N,V_dominantMotionActivity
AccessPointKey
acccessPoint
accessPoint
T@"CLHarvestDataAccessPoint",&,N,V_accessPoint
MuidKey
LocationDataKey
WifiDataKey
muid
locationData
wifiData
T@"CLHarvestDataPoiMuid",&,N,V_muid
T@"NSMutableArray",&,N,V_locationData
T@"NSMutableArray",&,N,V_wifiData
virtual std::shared_ptr<CLIoHidInterface::Device> CLIoHidInterface::buildDevice(CLIoHidInterface::Device::Description)
[CLIoHidInterface] Adding new Device with usage pair {%d, %d}
CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()
void CLIoHidInterface::initializeHidIfNecessary()
[CLIoHidInterface] Could not create event system client. All bets are off
PreserveTimestamp
[CLIoHidInterface] Event system client initialized successfully
void CLIoHidInterface::closeHid()
[CLIoHidInterface] Hid interface closed
void CLIoHidInterface::refreshDeviceServiceRefs()
[CLIoHidInterface] Refreshing service refs
[CLIoHidInterface] The device is gone!
PrimaryUsagePage
PrimaryUsage
[CLIoHidInterface] Check service ref %p with usage pair {%d,%d} as a potential match
[CLIoHidInterface] Service ref with usage pair {%d,%d} is %p
void CLIoHidInterface::invalidateDeviceServiceRefs()
[CLIoHidInterface] invalidating hid service refs
bool CLIoHidInterface::setPropertyIoHid(IOHIDServiceClientRef, CFStringRef, CFTypeRef)
[CLIoHidInterface] property can not be set for null hidServiceRef
[CLIoHidInterface] IOHIDServiceClientSetProperty() returned false
void CLIoHidInterface::applyAllDirtyDeviceProperties()
[CLIoHidInterface] apply all dirty device properties
[CLIoHidInterface] Service with for device with usage pair {%d,%d} is not ready
successfully
unsuccessfully
[CLIoHidInterface] Property for usage pair {%d,%d}: {%s = %@} was set %s
[CLIoHidInterface] Could not set all properties. Setting timer to fire %f seconds from now
[CLIoHidInterface] Could not set all properties after too many retries. Giving up.
void CLIoHidInterface::setMatchingForDevices()
[CLIoHidInterface] Prox: remove set matching multiple
[CLIoHidInterface] Adding match entry for usage pair {%d,%d}
[CLIoHidInterface] Setting matching multiple for %lu events
void CLIoHidInterface::onEvent(void *, void *, IOHIDEventRef)
[CLIoHidInterface] Received null sender
[CLIoHidInterface] Processing event %d
[CLIoHidInterface] Got null event,sender %p,registryID %llx
[CLIoHidInterface] Fetching historical events
[CLIoHidInterface] Did not fetch historical events
[CLIoHidInterface] The device has no event callback, skipping.
void CLIoHidInterface::onEventSystemReset(void *)
[CLIoHidInterface] It looks like our HID event system just become available (again)
void CLIoHidInterface::onEventSystemReset(void *)_block_invoke
void CLIoHidInterface::onServiceRegistration(void *, IOHIDServiceClientRef)
[CLIoHidInterface] New IOHIDServiceClientRef for usage pair {%d,%d} just became available.
[CLIoHidInterface] Device,usagePage,%d,usage,%d,hidserviceref,old,%p,new,%p
virtual CLIoHidInterface::Device::~Device()
[CLIoHidInterface] Releasing value for property %s, address = %p
void CLIoHidInterface::Device::setCallback(OnIoHidEvent, void *)
[CLIoHidInterface] setCallback should be called from motion thread
virtual void CLIoHidInterface::Device::setProperty(NSString *, id)
[CLIoHidInterface] Could not set property value for %@
[CLIoHidInterface] setProperty should be called from motion thread
virtual id CLIoHidInterface::Device::copyProperty(NSString *)
[CLIoHidInterface] copyProperty should be called from motion thread
eventType > 0
bool CLIoHidInterface::Device::initializeServiceRef()
[CLIoHidInterface] Service for usage pair {%d, %d} is not ready
void CLIoHidInterface::Device::print()
[CLIoHidInterface] Device,hidUsagePage,%d,hidUsage,%d,hasCallback,%d,serviceRef,%p
void CLIoHidInterface::Device::printProperties()
[CLIoHidInterface] 
%s = %@,dirty,%d
virtual void CLCompass7FastPath::start(bool)
[CLCompass7FastPath] Initializing fast path
DisableCourseBasedHeading
[CLCompass7FastPath] Failed fast path set up for CLCompass,serviceRef,%p
[CLCompass7FastPath] Unable to establish fast path with valid clientID,serviceRef,%p
[CLCompass7FastPath] Fast path has been initialized,clientID,%u,serviceRef,%p,course,%s
virtual void CLCompass7FastPath::stop()
[CLCompass7FastPath] Fast path has been closed,clientID,%u
virtual bool CLCompass7FastPath::setDeviceMotionServiceUpdateInterval(const CFTimeInterval &)
[CLCompass7FastPath] Setting fast path update interval to %f
virtual void CLCompass7Base::start(bool)
Compass for AOP started. CoverAttached %d
virtual void CLCompass7Base::stop()
Compass for AOP stopped.
virtual CFTimeInterval CLCompass7Base::minimumUpdateIntervalChanged(int, const CFTimeInterval &)
Setting compass update interval to %f
Unable to set compass update interval
static void CLCompass7Base::onDeviceMotionServiceIohidEvent(void *, void *, void *, IOHIDEventRef)
GyroCompass
CLMotionTypeCompass CLCompass7Base::populateMotionType(const CMDeviceMotionReport::Compass &, const CFTimeInterval &)
Type,%s,attitude.x,%.8f,.y,%.8f,.z,%.8f,.w,%.8f,calibrated.x,%.8f,.y,%.8f,.z,%.8f,uncalibrated.x,%.8f,.y,%.8f,.z,%.8f,gravity.x,%.8f,.y,%.8f,.z,%.8f,heading,%.1f,trueheading,%.1f,accuracy,%.1f,level,%d,biasEstimation,%d,yawCorrection,%d,gravityCorrection,%d,courseCorrection,%d,initalized,%d,accelSaturated,%d,gyroSaturated,%d,compassCalibration,%d,gyroCalibration,%d,course,%d,gmm,%d,timestamp,%f
CLFallNotifierSilo
FallStatsRequestors
CLFallNotifier
CLFallNotifier::CLFallNotifier(id<CLIntersiloUniverse>)_block_invoke
Releasing power assertion due to end of Heart Rate sampling.
virtual void CLFallNotifier::shutdown()
Releasing power assertion due to Fall Notifier deconstruction.
void CLFallNotifier::onCoprocessorData(const CLMotionCoprocessorInterface::NotificationData *)
Taking power assertion due to high impact Heart Rate subscription.
watchkitapp
void CLFallNotifier::onHeartRateNotification(int, const CLCatherineNotifier_Type::Notification &, const CLCatherineNotifier_Type::NotificationData &)
Recieved post hard impact HR : %f
virtual void CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLFallNotifier_Type::Notification, NotificationData_T = CLFallNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLFallNotifier_Type::Notification, NotificationData_T = CLFallNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLFallNotifier_Type::Notification, NotificationData_T = CLFallNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLFallNotifier_Type::Notification, NotificationData_T = CLFallNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLFallNotifier_Type::Notification, NotificationData_T = CLFallNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLFallNotifier_Type::Notification, NotificationData_T = CLFallNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::listClients() [Notification_T = CLFallNotifier_Type::Notification, NotificationData_T = CLFallNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
CLCompass
CLCompass::CLCompass()
Registered for keyboard state notifications
CompassForceCoverAttach
Forcing
NOT forcing
%s cover attached logic to %d
Registered for cover state notifications
virtual CFTimeInterval CLCompass::minimumUpdateIntervalChanged(int, const CFTimeInterval &)
Could not create timer
void CLCompass::startCompass()
Cover %s attached
AppleHIDKeyboardEventDriverV2
RequiresCompassResetOnConnect
open
closed
static void CLCompass::onCoverState(const bool *, void *)
Cover %s
connected
disconnected
void CLCompass::updateKeyboardState(bool, bool)
Keyboard %s
CLCompassCalculator::CLCompassCalculator(const CFTimeInterval &, bool, bool)
using attitude dependent KF calibrator
CompassIgnoreDatabase
compass ignoring database (%d)
CompassManualCalibration
CompassOffsetManualX
CompassOffsetManualY
CompassOffsetManualZ
compass using manual bias (%.3f/%.3f/%.3f)
CompassIgnoreCalibration
compass ignoring calibration (%d)
CompassInputFilter
compass input filter is using (%zuu) samples
CompassOutputFilterSize
CompassOutputFilterScale
compass heading output filter samples (%d) scale (%f)
apple compass calculator, sample rate (%.3f) ignoreDatabase (%d) manual (%d)
bool CLCompassCalculator::feedMagnetometerData(const CLMotionTypeMagneticField &)
XYDevice not stable. %d, %d, %.3f, Clearing search buffers.
storing new compass calibration, magneticField (%+.3f,%+.3f,%+.3f), bias (%+.3f/%+.3f/%+.3f), level (%d) magnitude (%+.3f) inclination (%+.3f)
bool CLCompassCalculator::getCompassData(CLMotionTypeCompass &)
rawHeading, %.3f, gyroHeading, %.3f, deltaRaw, %.3f, deltaGyro, %.3f, rawHeadingU, %.3f, gyroHeadingU, %.3f, filteredHeading, %.3f, alpha, %.3f, gamma, %.3f, rotVar, %.5f, rotMag, %.3f, deltaFiltered, %.3f
#Warning Heading  %.2f, is not in bound [0 360]
void CLCompassCalculator::updateInterferenceChecks()
magnitude max threshold exceeded (%+.3f), resetting calibration
magnitude threshold exceeded (%f) with (%f) from base value (%f), resetting calibration
inclination threshold exceeded (%f) with (%f) from base value (%f), resetting calibration
void CLCompassCalculator::feedCompassDatabaseNotificationWithData(int, const CLCompassDatabase_Type::Notification &, const CLCompassDatabase_Type::NotificationData &)
CompassDB restored bias (%+.3f/%+.3f/%+.3f)
connectionStatus
pairedModelId
TI,N,V_connectionStatus
hasPairedModelId
T@"NSString",&,N,V_pairedModelId
bool CLCachedLocationScanMode::setScanMode(CachedLocationScanPowerMode)
Already correct power mode, %d
Changing cached location power mode from %d to %d
CLCompassAccuracy::CLCompassAccuracy(const float, const float, const size_t, const size_t, const bool)
mean (%f) scale (%f) variance sample size (%zd) max sample length (%zd), coverAttached (%d)
void CLCompassAccuracy::init(const float, const float, const size_t, const size_t)
mean (%f) scale (%f) variance sample size (%zd) max sample length (%zd)
CLCompassDatabaseSilo
CLCompassDatabase
void CLThreshold::init(const float &, const float &, const float &, const unsigned int, const unsigned int, const unsigned int, const float &, const bool)
sample rate (%.3f) observation rate (%.3f) observation threshold (%.3f) deviation count threshold (%d) standard deviation threshold (%.3f)
bool CLThreshold::update(const float &)
threshold (%f) was exceeded with observed value (%f) and base value (%f) and standard deviation (%f) and count of (%d)
CLPlatformInfo::motionCaps().deviceMotion6Service
CLTilesManagerServerErrorDomain
com.apple.locationd.CLTilesManagerClient
static bool CLTilesManagerServer::isAuthorizedForLocationServices()
TILE_SER: g_isAppAvailabilityAuthorized, %d, isAuthorized, %d
static void CLTilesManagerServer::onAppAvailabilityAuthorized(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &, void *)_block_invoke
TILE_SER: onAppAvailabilityAuthorized, %d, authorizerd, %d
void CLTilesManagerServer::beginService()_block_invoke_2
TILE_SER: Removing request since it timed out, lat, %f, lon, %f, radius, %f.
void CLTilesManagerServer::setupXpcConnection()
TILE_SER: setupXpcConnection
EnableTilesManagerServer
#Warning TILE_SER: setupXpcConnection, g_isEnableTilesManagerServer, %d
TILE_SER: setupXpcConnection, tiles server is disabled by default, g_isEnableTilesManagerServer, %d
TILE_SER: setupXpcConnection, was already called
AppGenius
void CLTilesManagerServer::setupXpcConnection()_block_invoke
TILE_SER: setupXpcConnection, %p, %p
void CLTilesManagerServer::setupXpcConnection()_block_invoke_3
TILE_SER: server received connection, %p
TILE_SER : dictionary, XPC_TYPE_CONNECTION, %d, XPC_TYPE_ERROR, %d, XPC_TYPE_DICTIONARY, %d
TILE_SER : XPC_ERROR_CONNECTION_INTERRUPTED, %d, XPC_ERROR_CONNECTION_INVALID, %d, %s
TILE_SER: XPC_TYPE_CONNECTION, incomingConnection, %p
TILE_SER: posting, CLTILES_MANAGER_SHARED_NOTIFICATION_CLIENTS_RECONNECT
com.apple.locationd.CLTilesManagerClient.reconnect
static void CLTilesManagerServer::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &, void *)
TILE_SER: onLocationNotification, notification, %d, loc, %s
TILE_SER: onLocationNotification, ignore, shutdown, notification, %d, loc, %s
TILE_SER: why am i receiving this notification: %d
static void CLTilesManagerServer::checkAvailabilityStatus(bool, const CLDaemonLocation &)
TILE_SER: checkAvailabilityStatus, isAuthorized, %d, lastLocation, %s
TILE_SER: checkAvailabilityStatus, force, %d, newLocation, %s
TILE_SER: checkAvailabilityStatus, not authorized
TILE_SER: checkAvailabilityStatus, ignoring cell location
TILE_SER: checkAvailabilityStatus, ignoring uncertain location, %.1lf
TILE_SER: checkAvailabilityStatus, ignoring uncertain location, horizontalAccuracy, %.1lf
TILE_SER: checkAvailabilityStatus, ignoring close location, distanceFromPreviousLocation, %.1lf
TILE_SER: checkAvailabilityStatus, availabilityList, %lu
TILE_SER: checkAvailabilityStatus, loc, %.8lf, %.8lf, radius, %.3f, age, %d, %d, %d, %d, distance, %.3lf
TILE_SER: appAvailabilityUpdate, loc, %.8lf, %.8lf, radius, %.3f, age, %d, %d, %d, %d, hasChanged, %d
static void CLTilesManagerServer::handleIncomingConnection(xpc_connection_t)
TILE_SER: handleIncomingConnection, incomingConnection, %p
TILE_SER: handleIncomingConnection, token, 0x%08X-0x%08X, pid, %d
static void CLTilesManagerServer::handleIncomingMessage(xpc_connection_t, xpc_object_t)
TILE_SER: incoming, incomingConnection, %p, XPC_TYPE_CONNECTION, %d, XPC_TYPE_ERROR, %d, XPC_TYPE_DICTIONARY, %d
TILE_SER: release, incomingConnection, %p
rc.ok
requestType
notificationType
requestType.register
requestType.unregister
TILE_SER: processing request, locationd, %.8lf, %.8lf, requestType, %s, notificationType, %s, isRegister, %d, isUnRegister, %d
notification.app.availability.changed
TILE_SER: unknown notification, %{public}s
rc.error
TILE_SER: client, %{public}s, not authorized to, requestType, %{public}s
rc.not_authorized
requestType.query
dataType.apps_availability
dataType.apps
TILE_SER: CLTILES_MANAGER_SHARED_DATA_TYPE_APPS - un-supported
requestType.precache
TILE_SER: invalid requestType, %s
static NSArray *CLTilesManagerServer::getAppsForArea(double, double, float, bool)
TILE_SER: getAppsForArea, examining %zu candidate grids.
TILE_SER: getAppsForArea, query for exact grid containing lat = %f, lon = %f, gridLat = %f, gridLon = %f
#Warning TILE_SER: getAppsForArea, invalid age rating, lat, %f, lon, %f, adamId, %d
static void CLTilesManagerServer::fetchAppsForArea(double, double, float, bool, CLTilesManagerServerAppReplyHandler)_block_invoke
TILE_SER: fetchAppsForArea, tile is available for lat = %f, lon = %f.
TILE_SER: fetchAppsForArea, found %lu apps.
TILE_SER: fetchAppsForArea, tile does not exist on the server for lat = %f, lon = %f.
TILE_SER: fetchAppsForArea, tile is not available for lat = %f, lon = %f. Request for download.
static void CLTilesManagerServer::onTileWasDownloadedNotification(int, const CLTilesManager_Type::Notification &, const CLTilesManager_Type::NotificationData &, void *)
TILE_SER: onTileWasDownloadedNotification, activeRequests.count = %lu
TILE_SER: onTileWasDownloadedNotification, tile is available (or tile is 404) for lat = %f, lon = %f.
TILE_SER: onTileWasDownloadedNotification, found %lu apps.
#Warning TILE_SER: Got unexpected notification, %d
radius
static void CLTilesManagerServer::handleIncomingMessage_QUERY_AVAILABILITY(xpc_connection_t, xpc_object_t, xpc_object_t)
TILE_SER: handleIncomingMessage_QUERY_AVAILABILITY, loc, %.8lf, %.8lf, radius, %.2lf
TILE_SER: handleIncomingMessage_QUERY_AVAILABILITY, query for lat = %f, lon = %f, radius = %f.
Found 
 App(s)
hUnc
details
availability.age1
availability.age2
availability.age3
availability.age4
static void CLTilesManagerServer::handleIncomingMessage_QUERY_AVAILABILITY(xpc_connection_t, xpc_object_t, xpc_object_t)_block_invoke
TILE_SER: Got fetchAppsForArea response for lat = %f, lon = %f, %s.
Query specified lat/lon.
Query internal state.
TILE_SER: handleIncomingMessage_QUERY_AVAILABILITY, failed to blip icon for, %s
static void CLTilesManagerServer::sendAppAvailabilityChangedNotification()
TILE_SER: no registrations to, CLTILES_MANAGER_SHARED_NOTIFICATION_APP_AVAILABILITY_CHANGED
TILE_SER: not authorized to receive, CLTILES_MANAGER_SHARED_NOTIFICATION_APP_AVAILABILITY_CHANGED
TILE_SER: sending, CLTILES_MANAGER_SHARED_NOTIFICATION_APP_AVAILABILITY_CHANGED
static void CLTilesManagerServer::handleIncomingMessage_PRECACHE(xpc_connection_t, xpc_object_t, xpc_object_t)
requestDownload, %2.6f, %2.6f
void CLTilesManagerServer::terminateXpcConnection()
TILE_SER: terminateXpcConnection
void CLTilesManagerServer::terminateXpcConnection()_block_invoke
TILE_SER: terminateXpcConnection, already called
void CLTilesManagerServer::shutdown()
TILE_SER: shutdown
TILE_SER: shutdown, tiles server is disabled by default
ageRating
TI,N,V_ageRating
touristApp
TB,N,V_touristApp
TI,N,V_adamId
effectiveRadiusMetersIfInstalled
TI,N,V_effectiveRadiusMetersIfInstalled
heroAppRankInstalled
TI,N,V_heroAppRankInstalled
heroAppRankUnInstalled
TI,N,V_heroAppRankUnInstalled
spanLat
Td,N,V_spanLat
spanLon
Td,N,V_spanLon
Td,N,V_lat
Td,N,V_lon
radiusMeters
Tf,N,V_radiusMeters
includeRegionalApps
TB,N,V_includeRegionalApps
com.apple.locationd.bundle-/System/Library/LocationBundles/NearbyApps.bundle
void CLExerciseMinuteEstimator::feedBodyMetrics(const CLBodyMetrics &)
ExerciseMinute,intensity,threshold,%f,scaling factor,%f
void CLExerciseMinuteEstimator::recordExerciseMinute(CFAbsoluteTime, double, ALCMExerciseMinute_Mode)
ExerciseMinute,startTime,%.3f,avgIntensity,%f,mode,%d
double CLExerciseMinuteEstimator::computeExerciseMinutesUsingIntensity(double, const CLNatalieModelInput &)
ExerciseMinute,Intensity,computeTime,%.3f,raw,%f,scaled,%f,elevationAdjusted,%f,elevationCredit,%f,historicalElevationCredit,%f,windowSize,%lu,avgIntensity,%f
double CLExerciseMinuteEstimator::slideIntensityWindow(CFAbsoluteTime, CFTimeInterval, double)
#Warning Invalid timestamps,epochStartTime,%.3f,epochDuration,%.3f
#Warning ExerciseMinute,Time rolled back,past.front,%.3f,past.back,%.3f,current,%.3f
double CLExerciseMinuteEstimator::computeWheelchairPushExerciseMinutesAdjustedIntensity(double, const CLNatalieModelInput &)
ExerciseMinute,ComputeTime,%.3f,awardedExerciseMinuteMode,%d,fBurstBufferCount,%.3f,fBurstBufferDuration,%.3f,fPushBufferCount,%.3f,fPushBufferDuration,%.3f,BurstModelDuration,%.3f,BurstModelCount,%.3f,BurstModelThreshold,%d,ThresholdModelDuration,%.3f,ThresholdModelCount,%.3f,ThresholdModelThreshold,%d,CoverageModelDuration,%.3f,CoverageModelCount,%.3f,CoverageModelThreshold,%d
CLPublicDataCapture.proto
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Daemon/Positioning/Raven/CLPublicDataCapture.pb.cc
CLPublicDataCapture.proto
CLPublicData
CLGnssAssistance.proto"L
CLPublicDataCapture
gnss_assistance
.CLPublicData.GnssAssistance
bool CLSmootherCornerFinder::findCorners(const std::vector<swan::stGPSsa> &, std::vector<int> &)
HEALTH_SMOOTH: Could not convert LLA Coordinate %.7lf,%.7lf to ECEF
HEALTH_SMOOTH: Could not convert ECEF Coordinate %.3lf,%.3lf,%.3lf to ENU
HEALTH_SMOOTH: No corners found, input segment too short.
Zeros
nr <= Z.MaxNumRows()
nc <= Z.MaxNumCols()
WriteValue
&A != &Acopy
&A != &Work
&A != &U
&A != &S
&A != &V
&Acopy != &Work
&Acopy != &U
&Acopy != &S
&Acopy != &V
&Work != &U
&Work != &S
&Work != &V
&U != &S
&U != &V
&S != &V
ne >= 1
ne >= 3*minnrnc + maxnrnc
ne >= 5*minnrnc
Acopy.max_num_rows_ >= nrA
Acopy.max_num_cols_ >= ncA
U.max_num_rows_ >= nrA
U.max_num_cols_ >= nrA
S.max_num_rows_ >= nrA
S.max_num_cols_ >= ncA
V.max_num_rows_ >= ncA
V.max_num_cols_ >= ncA
Error using Svd: input argument %d invalid in gesvd.
Error using Svd: gesvd failed to converge on %d superdiagonals.
Warning: Svd optimal workspace size %u is greater than provided workspace size %u; performance may suffer.
info == 0
TransposeInPlace
A.max_num_rows_ >= A.num_cols_
A.max_num_cols_ >= A.num_rows_
Colon
idx.MaxNumRows() > 0
idx.MaxNumCols() > 0
static_cast<s32>(idx.MaxNumCols()) >= n
strcmp(c, ":") == 0
CNSubMatrix
/BuildRoot/Applications/Xcode.app/Contents/Developer/Platforms/AppleTVSimulator.platform/Developer/SDKs/AppleTVSimulator11.0.sdk/System/Library/PrivateFrameworks/CoreNavigation.framework/Headers/cnmatrix/cnsubmatrix.h
idx (%tu) is out of range (%tu)
latitude
longitude
latitudesCount
TQ,R,N
latitudes
T^d,R,N
longitudesCount
longitudes
self.cdRegistration != nullptr
-[CLDuetRegistration registerCallback]
Registered with CoreDuet for %{private}@ with predicate %{private}@
-[CLDuetRegistration deregisterCallback]
Deregistered with CoreDuet for %{private}@ with predicate %{private}@
context
T@"<_CDContext>",&,N,V_context
cdRegistration
T@"_CDContextualChangeRegistration",&,N,V_cdRegistration
CLDuetEventTypeAudioOutputRouteConnected
CLDuetEventTypeBluetoothConnected
CLDuetEventTypeDeviceFirstWakeOfDay
CLDuetEventTypeForegroundApp
CLDuetEventTypeHomeKitAppView
CLDuetEventTypeHomeKitAccessory
CLDuetEventTypeHomeKitScene
CLDuetEventTypeMicroLocations
%@/%@/%lu
com.apple.locationd.CLDuetMonitor
event
Tq,N,V_event
predicate
T@"_CDContextualPredicate",&,N,V_predicate
duetIdentifier
T@"NSString",&,N,V_duetIdentifier
CLDuetMonitorSilo
registration != nullptr
-[CLDuetMonitor registerClient:forEvent:withPredicate:]
Added %{private}@ client to the list of listeners for event type %{private}ld with predicate %{private}@
self.registeredEvents[regId] == nullptr
-[CLDuetMonitor registerWithDuetForEvent:andPredicate:]_block_invoke
Received callback for %{public}@
B16@?0@"NSString"8
-[CLDuetMonitor stopMonitoringEvent:withPredicate:forClient:]
Client %{private}@ is not registered for event %{public}ld
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Daemon/Positioning/Duet/CLDuetMonitor.mm
[start earlierDate:end] == start
Invalid duet stream type. %ld
v32@?0@"_DKEventQuery"8@"NSArray"16@"NSError"24
event != nullptr
eventType < CLDuetEventTypeCount && eventType >= CLDuetEventTypeUnknown
-[CLDuetMonitor notifyClient:ofForegroundAppWithValue:]
#Warning The app dictionary notification from CoreDuet has different information than we expect. This info should be added to the CLDuetForegroundApp class
bundleId or launchReason were nil so not processing this notification
-[CLDuetMonitor notifyClient:ofHomeKitScene:]
#Warning The scene dictionary notification from CoreDuet has different information than we expect. This info should be added to the CLDuetHomeKitScene class
some of the expected keys were not found so not processing this notification. %{private}@
-[CLDuetMonitor notifyClient:ofHomeKitAccessory:]
#Warning The accessory dictionary notification from CoreDuet has different information than we expect. This info should be added to the CLDuetHomeKitAccessory class
-[CLDuetMonitor notifyClient:ofHomeKitAppView:]
#Warning The app view dictionary notification from CoreDuet has different information than we expect. This info should be added to the CLDuetHomeKitAppView class
registeredEvents
T@"NSMutableDictionary",&,N,V_registeredEvents
(self.%@.value != NULL) AND (self.%@.value.%@ IN %@)
(self.%@.value != NULL) AND NOT (self.%@.value.%@ IN %@)
self.%@.value = %@
void CMLinearTemperatureFit::feedGyroTemperature(float)
Assertion failed: temperature != 3.40282347e+38F, file /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Oscar/CMLinearTemperatureFit.cpp, line 45,temperature,%f.
bool CLMotionAlarmDatabase::isDbAccessible() const
Database is not accessible.
bool CLMotionAlarmDatabase::upsertAlarm(CMMotionAlarm *)
Unable to update alarm because bundleId or name is empty.
SELECT id, state, duration, type, repeats, bundleId, name FROM MotionAlarm
SELECT id, state, duration, type, repeats, bundleId, name FROM MotionAlarm WHERE bundleId = ?
NSArray<CMMotionAlarm *> *CLMotionAlarmDatabase::alarmsFromStatement(sqlite3_stmt *) const
Unable to iterate through all rows for getAllAlarms!
SELECT id, state, duration, type, repeats, bundleId, name FROM MotionAlarm WHERE id = ?
SELECT id, state, duration, type, repeats, bundleId, name FROM MotionAlarm WHERE 1 = 1 AND bundleId = ? AND name = ?
DELETE FROM MotionAlarm WHERE 1 = 1 AND bundleId = ? AND name = ?
void CLMotionAlarmDatabase::prepareDatabase()
Unable to prepare due to invalid database.
CREATE UNIQUE INDEX IF NOT EXISTS ix_MotionAlarm_bundeId_name ON MotionAlarm(bundleId, name)
Successfully created database
INSERT INTO MotionAlarm (state, duration, type, repeats, bundleId, name) VALUES (?, ?, ?, ?, ?, ?)
UPDATE MotionAlarm SET state = ?, duration = ?, type = ?, repeats = ? WHERE 1 = 1 AND id = ? AND bundleId = ? AND name = ?
void CLAttitudeDependentKFCalibrator::init()
RotationStability buffer not set.
virtual void CLAttitudeDependentKFCalibrator::setBias(const CLVector3d<float> &, const CLMotionTypeCompassCalibrationLevel &, const CLVector3d<float> &, const CLClientQuaternion *)
Could not set bias retrieved from database
setting bias (%.3f/%.3f/%.3f) level (%d)
void CLAttitudeDependentKFCalibrator::resetInternal(const CLVector3d<float> &, const CLMatrix3d<float> &, CLMotionTypeCompassCalibrationLevel)
reset internal. levels-data(%d %d %d), pScale=%.3f 
virtual void CLAttitudeDependentKFCalibrator::reset()
compass calibrator reset
void CLAttitudeDependentKFCalibrator::resetCalibration(const CLVector3d<float> &, const CLMatrix3d<float> &)
Resetting calibrator states.
bool CLAttitudeDependentKFCalibrator::resync(float, bool, bool, bool, float, float, float, const CLVector3d<float> &, float, float, float, const CLVector3d<float> &)
Resync after long coasting with mag drift. mag/incDiffMean(%.3f/%.3f), measure(%.3f/%.3f/%.3f/%.3f), Age(%d,%d)
DRIFT DETECTED. numBad=%d,s=%.3f,delH(%.3f,%d,%.3f), expectedVec (%.3f/%.3f/%.3f), calibrated(%.3f/%.3f/%.3f), angleDiff(%.3f/%.3f), magDiff(%.3f/%.4f), incDiff(%.3f/%.3f), measure(%.3f/%.3f/%.3f/%.3f), coasting(%.3f/%d/%d), coastingCount(%d),deltaTime(%.3f)
fBackupInfoSet(%d), syncAge(%d)
Likely bad resync. Backup. 
RESYNC Rejected. numBad=%d,mag/incDiffMean(%.3f/%.3f), measure(%.3f/%.3f/%.3f/%.3f), syncAge(%d)
numBad(%d), delH(%.3f), coastVec(%.3f/%.3f/%.3f), expectedVec(%.3f/%.3f/%.3f), calibrated(%.3f/%.3f/%.3f), angleDiff(%.3f/%.3f), magDiff(%.3f/%.4f), incDiff(%.3f/%.3f), measure(%.3f/%.3f/%.3f), coasting(%.3f/%d/%d), coastingCount(%d)
bool CLAttitudeDependentKFCalibrator::handleInterference(const CLVector3d<float> &, const CLVector3d<float> &, bool, bool)
Coasting vector not set.
Prolonged high magDiff. Likely bad calibration. Resetting.
Extremely high magnitude.  magDiff (%.3f), magnitude (%.3f), calibrated (%.3f/%.3f/%.3f), coastVector (%.3f/%.3f/%.3f),coastingTime,%.3f,magDiffVar,%.3f,resetInternal,%d
Likely bad database lookup. Resetting. 
******* scale(%.3f),cAge(%d), magDiff(%.3f), dHeading(%.3f), deltaAngle(%.3f), numBad(%d), calInc(%.3f), incDiffIsStable(%d)
Steep inclination. Likely bad interference or bad database lookup. Resetting. 
Interference is gone.
**INTERFERENCE-1 dAngle=%.3f,dHeading=%.3f,magDiff=%.3f,incDiff=%.3f
**INTERFERENCE-0 dAngle=%.3f,dHeading=%.3f,magDiff=%.3f,incDiff=%.3f
void CLAttitudeDependentKFCalibrator::handleDivergence(const CLVector3d<float> &)
Divergence!!! Resetting.
int CLAttitudeDependentKFCalibrator::calcCalibrationLevel(const CLVector3d<float> &)
new internal estimates (%.3f %.3f %.3f)
taking new estimates, Internal. fIsCoasting (%d)
new estimates denied, fIsCoasting (%d)
taking new estimates, reached database. (%d)
new esitmates disagree with database. (%d,%d,%.3f)
calibrated, first estimates completed (%.3f/%.3f/%.3f/%.3f), conv(%d %d %d), level (%d)
taking new estimates, fIsCoasting (%d)
estimates improved.(%.3f/%.3f/%.3f), numImprov=%d 
new estimates needed, fIsCoasting (%d)
first estimates completed (%.3f/%.3f/%.3f/%.3f), conv(%d %d %d), level (%d)
bool CLAttitudeDependentKFCalibrator::sanityCheck(unsigned int *, CLMotionTypeCompassCalibrationLevel, float &)
new estimates calculated, converged(%d %d %d) Var (%.3f %.3f %.3f), remain (%.3f), level (%d), num=%d 
void CLAttitudeDependentKFCalibrator::resetAfterCoasting()
Bad heading divergence for too long. Prompt user to re-calibrate.
Waiting too long for internal re-calibration. Prompt user.
Waiting too long for high magnitude interference to go away. Exit coasting.
Coasting for too long. Exit coasting.
virtual void CLAttitudeDependentKFCalibrator::referenceAttitudeChanged(bool, const CLMotionTypeMagneticField &)
fCoastingVecPrint: %.3f, %.3f, %.3f, %.3f, %.3f, %.3f
virtual void CLAttitudeDependentKFCalibrator::addSample(const CLVector3d<float> &, const CLClientQuaternion *, const CFTimeInterval &)
Attitude data not set.
Compass-withFusion
Type,%s,Updating reference frame.
Updating during coasting, fIsResetInternal(%d)
BACKUP resync coasting vector
resync coasting vector. rotM,%.3f,rotV,%.3f
device status: (smooth static) = (%d %d), rotM,%.3f,rotV,%.3f, q.x,%.3f,q.y,%.3f,q.z,%.3f,q.w,%.3f)
coasting vector is mature, no more updating
numSamplesSkipped (%d), deltaQ (%.3f/%.3f/%.3f/%.3f), deltaReadingM (%.3f)
void CLAttitudeDependentKFCalibrator::setCalibrationValues()
bias.x,%.3f,bias.y,%.3f,bias.z,%.3f,scale.x,%.5f,scale.y,%.5f,scale.z,%.5f,extF.x,%.3f,extF.y,%.3f,extF.z,%.3f
void CLAttitudeDependentKFCalibrator::setCoastingVector(bool)
set coasting vector (%.3f/%.3f/%.3f), levels (%d %d) conv(%d %d %d) age (%d) syncAge (%d) DueTo (%d)
void CLAttitudeDependentKFCalibrator::enterCoasting()
enters coasting
CLCompassCalibrator::CLCompassCalibrator(const CFTimeInterval &)
compass calibrator logging (%d)
void CLAttitudeDependentKFCalibrator::exitCoasting()
exits coasting
CLPlosMatcher::CLPlosMatcher(CLMapGeometryPtr, const std::string &)
PLOS:kLowestElevationInDegrees,%.2f,kTallestBuildingHeight,%.2f,kLargestDistance,%.2f
GpsForcePlos
PLOS,GpsForcePlos,%d
virtual bool CLPlosMatcher::match(CLMapCrumb &)
PLOS, cannot estimate nav mode, disabling
PLOS, non-pedestrian, not matching
PLOS: no mapGeometry!
PLOS: no geometry!
#Warning PLOS: buildingsWithinDistance,%lf returned false!
#Warning PLOS: buildings.size() %ld > 500. too many buildings. Aborting
PLOS: no candidate svs for time %{public}lf
#Warning PLOS: polyPoint == candidatePoint
PLOS: unexpected to not find SV, %{public}d in fSvPlosMap!
static std::tuple<double, double, double> CLPlosMatcher::getSearchParameters(const CLMapCrumb &)
#Warning PLOS: majorAxis,%lf < minorAxis,%lf
#Warning PLOS: Clamping majorAxis,minorAxis,%fm
operator->
/BuildRoot/Applications/Xcode.app/Contents/Developer/Platforms/AppleTVSimulator.platform/Developer/SDKs/AppleTVSimulator11.0.sdk/usr/local/include/boost/optional/optional.hpp
this->is_initialized()
Home
Work
School
result
T@"CLTilesManagerServerAppRecommendationResult",&,N,V_result
distanceToCurrentLocation
Td,N,V_distanceToCurrentLocation
appProxy
T@"LSApplicationProxy",&,N,V_appProxy
+[CLSuggestedActionManager(IsSupported) isSupported]_block_invoke
SAM: %s not supported because no application with bundle identifier, %s, is installed
ContinuityCapability
SAM: %s not supported because device doesn't support continuity
SAM: %s not supported on this device type
CLSuggestedActionManagerSilo
AppSuggestions
_appStoreBundleLocationProvider
v16@?0@8
SuggestedActionPurgeDelay
SuggestedActionPurgeInterval
-[CLSuggestedActionManager beginService]
SAM: suggested actions purge timer, delay, %.1f, interval, %.1f
-[CLSuggestedActionManager endService]
SAM: notify_cancel did not succeed, %d
com.apple.spotlightui
SBSearchDisabledDomains
DOMAIN_ZKWS
com.apple.spotlightui.prefschanged
-[CLSuggestedActionManager _registerForZeroKeywordDisabledNotification]
SAM: notify_register_dispatch failed, %d
com.apple.AppPredictionWidget.extension
v24@?0@"NSSet"8@"NSError"16
-[CLSuggestedActionManager _updatePredictedApplicationExtensions:error:]
plugin query cancelled
#Error SAM: error matching extensions with attributes, %{public}s
discovered app prediction extension
app prediction extension is %s
-[CLSuggestedActionManager handleNudge]
SAM: Nudged
SAM: Nudged while preparing a recommendation, state, %d
SAM: Hero apps disabled, ignoring nudge.
SAM: Not checking beacons since installed apps are switched off.
-[CLSuggestedActionManager handleNudge]_block_invoke
SAM: Got reply from CLBTLEFenceManager
SAM: Active beacons are nearby.  Using beacon-based recommendation.
SAM: No active beacons.  Looking for a location-based recommendation.
v16@?0@"NSSet"8
-[CLSuggestedActionManager suggestLocationApp]
SAM: %f seconds since last location request. Not refreshing suggestions.
SAM: AppSuggestions not authorized. Ignoring nudge.
SAM: App store not authorized. Ignoring nudge.
-[CLSuggestedActionManager onLocation:]
SAM: Received, location, %s
SAM: Received an unexpected location, state, %d
SAM: Location is stale, age, %f
SAM: Location uncertainty too large, horizontalAccuracy, %f
SAMStartRegionalRecommendation
-[CLSuggestedActionManager onLocation:]_block_invoke
SAM: Clear RR key...
v24@?0q8@"NSError"16
-[CLSuggestedActionManager _suggestWithLocation:]
SAM: cannot suggest with nil location, returning.
-[CLSuggestedActionManager _suggestWithLocation:]_block_invoke_2
SAM: FetchAppsForArea error, %s, reset state.
SAM: Got app list, count, %lu
SAM: Received an unexpected app recommendation, state, %{public}d
SAM: appMaxRating, %ld, isAppInstallAllowed, %d
SAM: Not considering app %d due to age restrictions, ageRating, %d, maxRating, %ld
SAM: Converted adamId %d to bundleId %s
SAM: Not considering installed app %d (bundleId = %s) since it's out of range.
SAM: Not considering non-installed app %d since it's not in the grid.
SAM: candidateAppList count, %ld
SAM: %lu app recommendation candidate%s at location, <%f, %f>
-[CLSuggestedActionManager _suggestWithLocation:]_block_invoke_3
SAM: %lu, adamId, %d, score, %f, installed, %s
-[CLSuggestedActionManager _suggestWithLocation:]_block_invoke_5
SAM: returned %lu loi%s of type %s
-[CLSuggestedActionManager _suggestWithLocation:]_block_invoke_6
SAM: location, <%f, %f>, is within %.1fm of loi ,%s, with type, %s
-[CLSuggestedActionManager _suggestWithLocation:]_block_invoke
SAM: routine mode: %ld
SAM: suppressing suggestions because device is too close to an loi of type home or work
SAM: Recommendation complete
SAM: Create RR key...
SAM: Already started RR since %f, %f
SAM: Allowing tourist apps.
SAM: Ignoring tourist app %d.
SAM: Not recommending %s since installed apps are switched off.
SAM: Not recommending %d since uninstalled apps are switched off.
SAM: Candidate suggestion, %d
SAM: Recent suggestions: 
SAM: Adam ID, %ld, time since first recommended, %f
SAM: Not recommending hero apps since we've been recommending this app for >15 mins, timeSinceFirstRecommended, %f.
SAM: Performing store lookup for adam id %d
v32@?0@"CLSuggestedActionManagerAppRecommendationResult"8Q16^B24
SAM: Error performing store lookup for adam id %lld, dropping. Error %s
SAM: Finished store lookup for adam id %lld
v32@?0@"CLStoreServicesRequestorResult"8Q16^B24
SAM: Recommending installed app %s...
SAM: adamId, %u, identifier, %s, suggested, %s
SAM: Recommending uninstalled app %s...
com.apple.AppStore
Recommended App!
itms-apps://?action=lookup&ids=%u
SAM: Not recommending the uninstalled app with adamId, %d, since it's blacklisted
SAM: Recent suggestions: %lu
SAM: %lu apps recommended
SAM: adam id: %ld, bundle id: %s
v32@?0@"CLPredictedApplication"8Q16^B24
SAM: notifying %lu clients of %lu apps.
-[CLSuggestedActionManager shouldSuggestActionWithIdentifier:]
SAM: activity, %s, reached max attempts, %d, time until suggested again, %.2fs
-[CLSuggestedActionManager identifierForAdamId:atLocation:]
SAM: could not get device identifier for vendor
%@%@%.1f%.1f
%02x
-[CLSuggestedActionManager onUAUserActivityDidContinueToAppStoreNotification:]_block_invoke
SAM: Swipe-up into App Store with adamId, %s
SAM: Swipe-up into App Store with ... no adamId? Best guess is adamId, %s
SAM: Blipping the icon while App Store has been de-authorized.
-[CLSuggestedActionManager suggestBeaconAppWithBundleIdentifierSet:]
SAM: Got empty bundle identifier set
SAM: Most recent app is still active.
SAM: Most recent app is no longer active.  Suggesting arbitrary beacon app
bundleIdentifier
SAM: Suggesting iBeacon bundle identifier, %s
-[CLSuggestedActionManager beaconRegion:didTransitionToState:]
SAM: Setting bundle identifier, %s, to most recent
-[CLSuggestedActionManager _updateAppSuggestionsAllowed]
SAM: isInstalledAppSuggestionsAllowed, %d, isUninstalledAppSuggestionsAllowed, %d
SuggestedActionOldestAge
-[CLSuggestedActionManager onPurgeTimer]
SAM: delete all suggested actions not considered in %f wks
-[CLSuggestedActionManager onDaemonStatusDisplayOff]
SAM: Display off, invalidating previous activity.
-[CLSuggestedActionManager fetchPredictedApplicationsAtLocation:reply:]_block_invoke
SAM: returning app, adamid, %ld, bundleId, %s, name, %s.
-[CLSuggestedActionManager fetchPredictedApplicationsAtLocation:reply:]
SAM: returning no apps.
-[CLSuggestedActionManager startMonitoringPredictedApplicationsForClient:]
SAM: adding suggested application client, total clients, %lu.
-[CLSuggestedActionManager stopMonitoringPredictedApplicationsForClient:]
SAM: removing suggested application client, total clients, %lu.
T@,&,N,V_context
T@"NSUserActivity",&,N,V_activity
nudgeHandler
T@?,C,N,V_nudgeHandler
mostRecentBundleIdentifier
T@"NSString",C,N,V_mostRecentBundleIdentifier
isInstalledAppSuggestionsAllowed
TB,N,V_isInstalledAppSuggestionsAllowed
isUninstalledAppSuggestionsAllowed
TB,N,V_isUninstalledAppSuggestionsAllowed
tilesManagerProxy
T@"<CLTilesManagerProtocol>",&,N,V_tilesManagerProxy
mostRecentSuggestLocation
T@"CLLocation",C,N,V_mostRecentSuggestLocation
shouldUpdateRegionalRecommendationState
TB,N,V_shouldUpdateRegionalRecommendationState
recentlySuggestedAdamIds
T@"NSMutableArray",&,N,V_recentlySuggestedAdamIds
dateStartedSuggestingAdamIds
T@"NSMutableDictionary",&,N,V_dateStartedSuggestingAdamIds
storeRequestor
T@"CLStoreServicesRequestor",&,N,V_storeRequestor
mostRecentCachedLocation
T@"CLLocation",&,N,V_mostRecentCachedLocation
currentSuggestedApplications
T@"NSMutableArray",&,N,V_currentSuggestedApplications
suggestedApplicationClients
T@"NSMutableSet",&,N,V_suggestedApplicationClients
mostRecentLocationRequestTime
Td,N,V_mostRecentLocationRequestTime
spotlightPrefsChangedNotifyToken
Ti,N,V_spotlightPrefsChangedNotifyToken
driver
T@,&,N,V_driver
zeroKeywordEnabled
TB,N,V_zeroKeywordEnabled
applicationPredictionExtensionEnabled
TB,N,V_applicationPredictionExtensionEnabled
AppStore
System
User
LocationRequestCooldownInterval
void onServiceLocationNotification_bounce(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &, void *)
SAM: Got unexpected notification: %{public}d
void onBundleLocationNotification_bounce(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &, void *)
SAM: This should never be executed.
void onBTLEFenceNotification_bounce(int, const CLBTLEFenceManager_Type::Notification &, const CLBTLEFenceManager_Type::NotificationData &, void *)
void onDaemonStatusNotification_bounce(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &, void *)
LogLegacyRadar
LogFile
LogFileDirectory
LogFilePrefix
LogFileFlush
ShowError
LogFence
LogBufferSize
LogShowUI
LogFileLevel
LogBufferLevel
LogConsoleLevel
LogStackLevel
LogLocations
LogLocationsFile
LogLocationsFlush
.log
com.apple.locationd.log.compression
vlog
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Shared/Logging/CLLog.mm
newFullContentLength == fullContentLength
'\n' == buffer[fullContentLength - 1]
%s,%s,Time,%08.3f,Function,"%s",
%s,%s,Time,%08.3f,
RotationEnabled
LogLevel
%s,%s,logging locations to %s%s
NOTICE
CLLog
 and flushing immediately
 no flush
%s,%s,logging locations to an internal buffer with capacity %d
.bz2
%s,%s,Failed to move aside log file %s (%d)
%s/%s
Failed to delete log
%s,%s,Rotation path is too long, could not delete old logs.
%s,%s,Failed to write %s
%s,%s,could not open locations log %s, errno %d
Unplugged!
void CLLog::logHeader()
CoreLocation-%s
locationd was compiled on %s at %s
23:19:25
%s @ system model %s / version %s
/usr/libexec/locationd @ system model %s / version %s
IOPlatformSerialNumber: %s
Begin settings dump (read at construction of CLSettings or upon darwin notification 'com.apple.locationd/prefs')
End settings dump
com.apple.timed
%s,%s,dumping internal buffer
%s,%s,copying gll.log
LogNatalimetry
LogCalorimetry
/cache_encryptedC.db
cache
%s,%s,could not copy %s log
%s,%s,could not dump log file
%s,%s,Time,%08.3f,%d
0x%08lx %s + %lu
STACK
%s,%s,Time,%08.3f,%d
0x%08lx 0x%08lx + %lu
%s,%s,Time,%08.3f,%d
0x%08lx
PaceFusion_Epoch_Time
PaceFusion_Epoch_PedometerPace
PaceFusion_Epoch_PedometerPaceUncalibrated
PaceFusion_Epoch_SmoothOdometerPace
PaceFusion_Epoch_SmoothShortOdometerPace
PaceFusion_Epoch_LongMeanOdometerPace
PaceFusion_Epoch_ShortMeanOdometerPace
PaceFusion_Epoch_PaceResetTime
PaceFusion_Epoch_FinalFusedPace
PaceFusion_Epoch_OdometerPaceQuality
PaceFusion_Epoch_MeanPaceState
PaceFusion_Epoch_PaceFusionOutput
double CLPedometerPaceFusion::computeFusedPace(CFAbsoluteTime, const CLExtendedStepCountEntry &, CLPedometerPaceFusion::PaceSignalQuality)
%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f
double CLPedometerPaceFusion::computeMeanPace(const T_buffer &, CFAbsoluteTime, CFAbsoluteTime) const [T_buffer = CLNatalieInput<CLOdometerEntry>]
Odometer failed to compute a mean pace.
double CLPedometerPaceFusion::getOdometerDistance(const T_buffer &, CFAbsoluteTime, CFAbsoluteTime) const [T_buffer = CLNatalieInput<CLOdometerEntry>]
Time didn't move! time,%{public}f
void CLVO2MaxPreprocessor::logSinglePairStats(const CLVO2MaxPreprocessor::PairStats &, const CLVO2MaxPreprocessor::PairStats &, const VO2MaxInput &)
pairNumber,%d,startTime,%f,mets,%f,hr,%f,hrConfidence,%f,gradeType,%d,grade,%f,hasGPS,%d,hasStrideCal,%d,metSource,%d,workoutType,%d,warmupOK,%d,gradeOK,%d,metDeltaOK,%d,metsAboveMin,%d,pairInBounds,%d,hrAboveMin,%d,hrBelowMax,%d,metSourceOK,%d,hrOK,%d,pairOK,%d,hrmax,%f,hrmin,%f
virtual CLSwimDistanceEstimator::Estimates CLSwimDistanceEstimatorOpenWater::estimate() const
Session distance estimate,odometer,%lf,generic stroke lengths,%lf
CLCircularLogBuffer
virtual CLMetsInfo CLCalorieWheelchairPushModel::computeMETS(const CLNatalieModelInput &)
WheelchairPush, computeTime, %f, metsFromPushes, %.1f, Push Count, %d, pushEM, %.1f
virtual CLMetsInfo CLNatalieYogaModel::computeMETS(const CLNatalieModelInput &)
Yoga, Compendium METS, METS, %f
LogSensorFusion
CLSensorFusionMekf::CLSensorFusionMekf(const CFTimeInterval &, const CFTimeInterval &, bool)
Doing crude accel measurement update.
rotBufferSize, %zu, accelBufferSize, %zuu, peakCount, %d, fMaxStd, %.3f
gyroDt, %.4f, doAccelCheck, %d
virtual void CLSensorFusionMekf::feedGyroData(const double &, const double &, const double &, const CFTimeInterval &)
omegaMag6, %.3f, omega, %.3f, %.3f, %.3f
[AppleQuaternion] x,%f,y,%f,z,%f,w,%f,timestamp,%f
virtual void CLSensorFusionMekf::feedGyroBias(const CLMotionTypeRotationRate &, const CLMotionTypeVector3 &)
[Bias,Var] bias.x,%f,bias.y,%f,bias.z,%f,var.x,%f,var.y,%f,var.z,%f
virtual void CLSensorFusionMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)
[Accelerometer6] x,%.4f,y,%.4f,z,%.4f,lpf, %.4f, %.4f, %.4f, timestamp,%lf
[RotationRate6X] %.3f, %.3f, %.3f, %.3f, %.3f
rotating and going through.
it's been too long. go through.
grabing gravity, %.4f, %.4f, %.4f
std, %.3f, %.3f, %.3f, mag, %.3f, dot, %.3f, leftover, %.3f
sum, %.3f, %.3f, %.3f, dot, %.3f, leftover, %.3f
===========Skip ahead.
Skip ahead------.
Taking another look.
using mean accel
accM, (%.4f, %.4f, %.4f), mag, %.3f
Doing some crude updates to catch up.
[KalmanFilterStates] %f,%f,%f,%f,%f,%f,%f
IOHIDCompasssResetDAC
ReportInterval
virtual CLMetsInfo CLNatalieHighIntensityModel::computeMETS(const CLNatalieModelInput &)
High Intensity, CR DT Regression, catherine(cpm), %f, catherinemax(cpm), %f, catherinemin(cpm), %f, vo2max(METs), %f, METS, %f
malformed mac address error: 
CLMalformedMacAddressError::CLMalformedMacAddressError(std::string)
#Warning malformed mac address error: %{private}s
com.apple.locationd.appreset
com.apple.locationd.appstatus
com.apple.locationd.techstatus
com.apple.locationd.started
com.apple.locationd.statusbar
com.apple.locationd.authorization
StatCycleModelMetsScale
virtual CLMetsInfo CLNatalieStationaryCycleModel::computeMETS(const CLNatalieModelInput &)
Stationary Cycle, Begin Time, %f, End Time, %f, catherine(cpm), %f, catherinemax(cpm), %f, catherinemin(cpm), %f, vo2max(METs), %f, duration(s), %f, weight(kg), %f, METS, %f, HRstaleness, %f
Stationary Cycle, computeTime, %.3f, hrMets, %f, fmMets, %f, userMets, %f, Duration, %f
STATUS,SENSOR,Time,%.3lf,Type,AccelOscarEmu,x,%20.20f,y,%20.20f,z,%20.20f,timestamp,%20.20lf
STATUS,SENSOR,Time,%.3lf,Type,GyroOscarEmu,x,%20.20f,y,%20.20f,z,%20.20f,sampleNum,%d,fsync,%d,timestamp,%20.20lf
STATUS,SENSOR,Time,%.3lf,Type,GyroBias,bias.x,%20.20f,bias.y,%20.20f,bias.z,%20.20f,variance.x,%20.20f,variance.y,%20.20f,variance.z,%20.20f,doingBiasEstimation,%d
STATUS,SENSOR,Time,%.3lf,Type,GyroBiasFit,slope.x,%20.20f,slope.y,%20.20f,slope.z,%20.20f,intercept.x,%20.20f,intercept.y,%20.20f,intercept.z,%20.20f, lastMiniCal,%20.20f
STATUS,SENSOR,Time,%.3lf,Type,GyroDt,dt,%20.20f
STATUS,SENSOR,Time,%.3lf,Type,Compass,magneticHeading,%20.20f,trueHeading,%20.20f,accuracy,%20.20f,magneticField.x,%20.20f,magneticField.y,%20.20f,magneticField.z,%20.20f,bias.x,%20.20f,bias.y,%20.20f,bias.z,%20.20f,level,%d,magnitude,%20.20f,inclination,%20.20f,horizontal,%20.20f,timestamp,%20.20f
STATUS,SENSOR,Time,%.3lf,Type,CompassAlignment,compassJustAlignedToStableField,%d,timestamp,%20.20f
STATUS,SENSOR,Time,%.3lf,Type,DeviceMotion,q.x,%20.20f,q.y,%20.20f,q.z,%20.20f,q.w,%20.20f,userAccel.x,%20.20f,userAccel.y,%20.20f,userAccel.z,%20.20f,rotationRate.x,%20.20f,rotationRate.y,%20.20f,rotationRate.z,%20.20f,magneticField.x,%20.20f,magneticField.y,%20.20f,magneticField.z,%20.20f,magneticFieldCalibrationLevel,%d,heading,%.3f,trueheading,%.3f,accuracy,%.3f,mode,%d,clientID,%#02x,biasEstimation,%d,yawCorrection,%d,gravityCorrection,%d,courseCorrection,%d,initalized,%d,accelSaturated,%d,gyroSaturated,%d,compassCalibration,%d,gyroCalibration,%d,course,%d,gmm,%d,cachedCompassCalibration,%d,cachedGyroCalibration,%d,timestamp,%20.20f
STATUS,SENSOR,Time,%.3lf,Type,SessionOverride,sessionType,%d,timestamp,%.3lf
STATUS,SENSOR,Time,%.3lf,Type,CLDeviceMotion,q.x,%20.20f,q.y,%20.20f,q.z,%20.20f,q.w,%20.20f,userAccel.x,%20.20f,userAccel.y,%20.20f,userAccel.z,%20.20f,rotationRate.x,%20.20f,rotationRate.y,%20.20f,rotationRate.z,%20.20f,magneticField.x,%20.20f,magneticField.y,%20.20f,magneticField.z,%20.20f,magneticFieldCalibrationLevel,%d,timestamp,%20.20f,doingBiasEstimation,%d,doingYawCorrection,%d,type,%d
STATUS,SENSOR,Time,%.3lf,Type,NatalieData,startTime,%.3lf,activityType,%u,isStanding,%d,fractionalGrade,%f,gradeType,%u,rawGradeType,%u,metSource,%u,hrmin,%f,mets,%f,duration,%.3lf,fGpsAvailability,%d
STATUS,SENSOR,Time,%.3lf,Type,OnsetHeartRateData,dataSource,%u,interpolation,%u,HeartRate,%f,confidence,%f,error,%d,timestamp,%.3lf,startTime,%.3lf,sinceLastGood,%.3lf,mode,%u
STATUS,SENSOR,Time,%.3lf,Type,StrideCalBin,bin,%d,begin,%.3lf,end,%.3lf,state,%d,kValue,%.3lf
STATUS,SENSOR,Time,%.3lf,Type,CaloriemetryPauseEvent,pause,%d
STATUS,SENSOR,Time,%.3lf,Type,MetsInfo,mets,%f,metsHR,%f,metsWR,%f,source,%u,metsDiff,%f
STATUS,SENSOR,Time,%.3lf,Type,FallStats,timestamp,%f,version,%d,seq,%u,aopTsNow,%llu,aopTsSensor,%llu,magMax,%f,xMin,%f,xMax,%f,yMin,%f,yMax,%f,zMin,%f,zMax,%f,xZCTime,%f,yZCTime,%f,zZCTime,%f,jerkVectorMagMax,%f,xJerkScalarMagMax,%f,yJerkScalarMagMax,%f,zJerkScalarMagMax,%f
STATUS,SENSOR,Time,%.3lf,Type,StepCadenceToStrideLengthBin,bin,%d,begin,%.3lf,end,%.3lf,state,%d,strideLength,%.3lf
STATUS,SENSOR,Time,%.3lf,Type,MotionLoiData,longitude,%f,latitude,%f,departureDate,%.3lf,arrivalDate,%.3lf,horizontalAccuracy,%.3lf,confidence,%d
virtual CLMetsInfo CLCalorieOutdoorWheelchairModel::computeMETS(const CLNatalieModelInput &)
OutdoorWheelchair, beginTime, %f, endTime, %f, duration(s), %f,gpsSpeed,%.2f, gpsAvail, %d, elevAvail, %d, pushVM,%.1f, verticalSpeed, %.3f, gradeType, %d, metsFromGps,%.1f, metsFromPushes, %.1f, mets, %.1f
CLCompassDaemonClientNotifierSilo
CLCompassDaemonClientNotifier
virtual void CLMotionNotifier::SiloDispatcher<CLCompass_Type::Sample>::dispatchData(int, const void *, size_t) [T = CLCompass_Type::Sample]
virtual void CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLCompassDaemonClientNotifier_Type::Notification, NotificationData_T = CLCompassDaemonClientNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLCompassDaemonClientNotifier_Type::Notification, NotificationData_T = CLCompassDaemonClientNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLCompassDaemonClientNotifier_Type::Notification, NotificationData_T = CLCompassDaemonClientNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLCompassDaemonClientNotifier_Type::Notification, NotificationData_T = CLCompassDaemonClientNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLCompassDaemonClientNotifier_Type::Notification, NotificationData_T = CLCompassDaemonClientNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLCompassDaemonClientNotifier_Type::Notification, NotificationData_T = CLCompassDaemonClientNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::listClients() [Notification_T = CLCompassDaemonClientNotifier_Type::Notification, NotificationData_T = CLCompassDaemonClientNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
routineMode
loiType
Td,N,V_age
Tq,N,V_routineMode
Tq,N,V_loiType
T@"NSString",C,N,V_bundleId
uint16_t(header.endian)
uint16_t(header.headerLen)
header.warnVersion
uint16_t(header.xtraVersion)
header.cksum
header.fileSize
header.fileGpsWeek
header.fileMsec
header.dataGpsWeek
header.dataGpsMsec
uint16_t(header.lengthOfFitIntervalsInHours)
uint16_t(header.numFitGps)
uint16_t(header.contentMask)
header.glonassGpsWeek
header.glonassGpsMsec
uint16_t(header.numHoursInGloFitInterval)
uint16_t(header.numGloFits)
header.sp3file
header.sp3fileglonass
uint16_t(alm.prn)
uint16_t(alm.health)
alm.eccentircity
uint32_t(alm.toa)
alm.deltai
alm.omegadot
alm.sqrtA
alm.omega0
alm.omegaArgPer
alm.M0
alm.Af0
alm.Af1
alm.weekNumber
uint32_t(alm.prn)
uint32_t(alm.health)
alm.toa
uint16_t(alm.svSlotNumber)
uint16_t(alm.svType)
alm.tau_na
alm.longAsending
alm.inclCorrect
alm.orbitEcc
alm.perigee
alm.firstAscend
alm.dracCorrect
uint16_t(alm.dracRate)
uint16_t(alm.freqNum)
alm.nan4
alm.dracRate
int16_t(alm.freqNum)
alm.na
alm.n4
gpsalm.prn
bool CLParseXtra::readGpsAlmanac(std::istream &, CLParseXtra::GpsAlmanacInt &, CLParseXtra::Endian)
#Warning failed to read [%{public}s]
gpsalm.health
gpsalm.eccentircity
gpsalm.toa
gpsalm.deltai
gpsalm.omegadot
gpsalm.sqrtA
gpsalm.omega0
gpsalm.omegaArgPer
gpsalm.M0
gpsalm.Af0
gpsalm.Af1
gpsalm.weekNumber
gloalm.health
bool CLParseXtra::readGlonassAlmanac(std::istream &, CLParseXtra::GlonassAlmanacInt &, CLParseXtra::Endian)
gloalm.svType
gloalm.svSlotNumber
gloalm.tau_na
gloalm.longAsending
gloalm.inclCorrect
gloalm.orbitEcc
gloalm.perigee
gloalm.firstAscend
gloalm.dracCorrect
gloalm.dracRate
gloalm.freqNum
gloalm.nan4
bool CLParseXtra::readXtraHeader(std::istream &, CLParseXtra::XtraHeader &)
#Warning, PLOS: can't open file 
#Warning PLOS: endian
header.headerLen
header.xtraVersion
header.lengthOfFitIntervalsInHours
header.numFitGps
header.contentMask
header.numHoursInGloFitInterval
header.numGloFits
#Warning PLOS: sp3file
#Warning PLOS: sp3fileglonass
#Warning PLOS: header
bool CLParseXtra::readXtraData(std::istream &, CLParseXtra::GpsAlmanacXtraVector &, GlonassAlmanacXtraVector &, CLParseXtra::XtraHeader &)
#Warning PLOS_XTRA: header
PLOS: eof
#Warning PLOS: id
#Warning PLOS: id,%{public}d,dataSize,%{public}d
#Warning PLOS: GPS ALM
GpsAlmancInt:
#Warning PLOS: GLO ALM
GlonassAlmancInt:
CLParseXtra::CLParseXtra(std::string)
PLOS: seting xtra file %{public}s
void CLParseXtra::parse()
PLOS: XTRA: fPopulated,%{public}d,fParseError,%{public}d. nothing to do
#Warning XTRA: can't open [%{public}s]
#Warning PLOS: failed to parse [%{public}s]
Xtraheader:
PLOS:%{public}s
GpsAlmanac:
GlonassAlmanac:
std::vector<CLParseXtra::SvInfo> CLParseXtra::getVisibleSvs(const double, const double *, const float)
gpsWeek,%{public}d,gpsSec,%{public}d,gloDay,%{public}d,gloSec,%{public}lf
PLOS:svid,%{public}d,el,%{public}.2lf,az,%{public}.2lf,retval,%{public}d
bool CLParseXtra::read_from_file(std::istream &, DataType &, CLParseXtra::Endian) [DataType = unsigned char]
#Warning eof,n,%{public}ld,requested,%{public}ld
bool CLParseXtra::read_from_file(std::istream &, DataType &, CLParseXtra::Endian) [DataType = unsigned short]
bool CLParseXtra::read_from_file(std::istream &, DataType &, CLParseXtra::Endian) [DataType = unsigned int]
T@"CLSilo",R,N
vendor
T@"CLServiceVendor",R,N
T@"CLServiceVendor",R,N,V_vendor
com.apple.private.alloy.location.motion
-[CLCompanionTransport updateIDSStatus]
Fitness: Companion model is %s
-[CLCompanionTransport updateIDSStatusAndNotify]
prevConnectedState,%s,currConnectedState,%s
-[CLCompanionTransport sendMessage:type:priority:fireAndForget:encrypt:bypassConnectionCheck:timeout:]
Sending protobuf ID:%s size: %zd type: %d over IDSService - Status %d, md5 %s
No device locally connected - Ignore sending data
-[CLCompanionTransport receivedMessage:data:identifierString:]
Received message ID:%s, type:%d, size %zd, md5 %s
Unexpected message received while disconnected. Updating status.
-[CLCompanionTransport service:account:incomingData:fromID:context:]
Received data over IDSService size : %ld
-[CLCompanionTransport service:account:incomingUnhandledProtobuf:fromID:context:]
Received unhandled protobuf ID:%s, size:%zd
-[CLCompanionTransport service:account:identifier:didSendWithSuccess:error:]
Service sent data with ID:%s with success %d error %s
-[CLCompanionTransport service:account:identifier:hasBeenDeliveredWithContext:]
Service data ack on otherside with ID:%s
idsService
T@"IDSService",&,N,V_idsService
receivedMessageHandler
T@?,C,V_receivedMessageHandler
connectionUpdateHandler
T@?,C,V_connectionUpdateHandler
isConnected
TB,V_isConnected
pairedDevice
T@"IDSDevice",&,V_pairedDevice
pairedDeviceLastSeenTimestamp
Td,V_pairedDeviceLastSeenTimestamp
kCMLogItemCodingKeyTimestamp
Td,R,N
PRTTSampleTemperature
PRTTSamplePressure
std::deque<CLMotionTypePressure> CLRobustSlopeEstimator::computePRTT()
%s,%f,%s,%f
PopSampleTime
CalibrationBinCount
void CLRobustSlopeEstimator::addPoint(const CLPressure::Sample *)
%s,%f,%s,%d
CalibrationSampleTime
CalibrationSamplePressure
CalibrationSampleTemperature
CalibrationTemperatureRate
%s,%f,%s,%f,%s,%f,%s,%f,%s,%d
activityType
isStanding
mets
metSource
meanAngleX
energyMagnitude
metsHR
metsWR
Ti,N,V_activityType
TB,N,V_isStanding
Td,N,V_mets
Ti,N,V_metSource
Tf,N,V_meanAngleX
Tf,N,V_energyMagnitude
hasMetsHR
Tf,N,V_metsHR
hasMetsWR
Tf,N,V_metsWR
kTypeMovingCoarse
kTypeStationaryCycling
kTypeCalisthenics
kTypeElliptical
kTypeCrossTraining
kTypeStairClimbing
kTypeRowing
kTypeYoga
kTypeDancing
kTypePushingWheelchair
kTypeIndoorRunning
kTypeIndoorWalking
kTypeSwimming
kTypeSummer
kTypeOutdoorWheelchair
kWorkRate
kHeartRate
kCalibratedWorkRate
kDefaultValue
com.apple.tcc.access.changed
virtual bool CLFitnessTrackingNotifierCompanion::isDeviceActivated() const
#Notice Device is not activated, suspending activity tracking.
virtual bool CLFitnessTrackingNotifierCompanion::isFitnessTrackingEnabled() const
#Notice Failed to get TCC for motion, suspending activity tracking.
CleanupInterval
CLTilesManagerExternal::CLTilesManagerExternal(CLTilesManager *, id<CLIntersiloUniverse>)
Defaults write: fCleanupInterval.
cleanupInterval
Failed to allocate run loop timer.
void CLTilesManagerExternal::onCleanupAgedTiles(CFRunLoopTimerRef)
Timer ref mismatch.
GPS-coarse
pipelined
CLTypeLocation, 
, type, 
, latitude, 
, longitude, 
, altitude, 
, hAcc, 
, vAcc, 
, course, 
, speed, 
, timstamp, 
, lifespan, 
, confidence, 
<error>
static bool CMOQuaternion::northAndGravity(CMVector<float, 3>, CMVector<float, 3>, CMVector<float, 3>, const float *, CMOQuaternion &, CMMatrix<float, 3> &)
n and g are too close %f
Assertion failed: lambda2 != 0, file /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Oscar/Math/CMOQuaternion.cpp, line 208,invalid weights.
kappa zero!
macs
modes
TQ,N,V_locationId
macsCount
T^Q,R,N
modesCount
kCMPedometerBinCodingKeyValueOut
kCMPedometerBinCodingKeyBegin
kCMPedometerBinCodingKeyEnd
kCMPedometerBinCodingKeyState
Begin,%.4f,End,%.4f,State,%ld,ValueOut,%.4f
valueOut
Td,R,N,V_valueOut
begin
Td,R,N,V_begin
lowerQuartile
center
upperQuartile
Td,R,N,V_end
Tq,R,N,V_state
CLSwimAlgSimulator::CLSwimAlgSimulator(CLSwimDataStore *, float)
CLSwimAlgSimulator Instantiated
SimulateSwimmingStyle
SimulateSwimmingLapInsertion
virtual CLSwimAlgResultFlags CLSwimAlgSimulator::processFusion(const CLSwimFusionInput &, CLSwimEntry &)
Simulated stroke
Simulated turn
lastStatus, 
, started, 
, monitoring settled, 
, activeTech, 
, lastDistance, 
, lastTechCheckDis, 
, lastLocCheck, 
, settledInsideStatus, 
static MonitoringTechOptions CLFenceMonitorLogic::getRequiredTechLevel(const MonitoredFencesIter &, const CLDaemonLocation &, const MonitoringTechOptions, std::function<bool (const CLFenceManager_Type::Fence &, const CLDaemonLocation &)>, std::function<bool (const CLFenceManager_Type::Fence &, const CLDaemonLocation &)>, std::function<bool (const CLFenceManager_Type::Fence &, const CLDaemonLocation &)>)
Fence: fence, %s, is large, requesting, kFenceMonitoringOpportunistic
static CLFenceManager_Type::FenceStatus CLFenceMonitorLogic::getStatusFromLocation(const CLDaemonLocation &, const MonitoredFencesIter &, const double, const bool)
Fence: location, why are you unknown?, %s
CLFenceMonitorLogic
unsupported location type
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Daemon/Core/Fence/CLFenceMonitorLogic.mm
Fence: getStatusFromLocation, %s, fix, %c%c%c%c%c, isWifiPowered, %d,  effectiveDistance, %.2lf, distance, %.1f, entryRadius, %.1f, exitRadius, %.1f, adjDist, %.1lf, adjHorAcc, %.1lf, origHorAcc, %.1lf
Fence status changed to Inside, distToCenter, %.1lf, %s
Fence status changed to Outside, distToCenter, %.1lf, %s
Fence status remained unchanged, distToCenter, %.1lf, %s
double calcAdjustedHorizontalAccuracy(const CLLocationType &, const CLDaemonLocation &, const CLFenceManager_Type::FenceStatus &, const bool)
GPS: normalize unc value, %.1lf, %.1lf
void adjustEntryExitRadius(double &, double &, const bool, const bool, const CLFenceManager_Type::FenceStatus &, const CLLocationType &, const double)
double adjustDistanceToFenceCenter(const double, const double, const CLLocationType &, const CLFenceManager_Type::FenceStatus &, const bool, const bool)
void initialize(void)
CANDY: Could not derive hardware info for Init
+[CLCandy signData:]
CANDY: Compute failed with: %{public}ld
signature
+[CLCandy verifyData:matchesSignature:]
CANDY: Verify failed with: %{public}ld
__null == fConnection
__null == fDestructionHandler
fEventQueue
void CLConnection::handleMessage(std::shared_ptr<CLConnectionMessage>)
#Warning Unhandled message %s
kCLConnectionMessageWatchdog
bool CLConnection::sendMessageInternal(std::shared_ptr<CLConnectionMessage>, xpc_handler_t)
Couldn't create XPC message
kCLConnectionMessageInfoKey
kCLConnectionMessageFileDescriptorKey
id<NSSecureCoding> CLConnectionMessage::getObject() const
The received data object is invalid: %{public}s
bool CLConnectionMessage::sendReply(const std::string &, id<NSSecureCoding>)
Unable to send reply, a reply message does not exist.
bool CLConnectionMessage::sendReply(const std::string &, xpc_object_t)
void setEventHandler(xpc_connection_t, CLConnectionMessageHandler, CLConnectionEventHandler, CLConnectionEventHandler, CLConnectionEventHandler *)_block_invoke
#Warning Connection interrupted!
#Warning Location connection invalid!
Got unexpected location event
void handleXPCEvent(xpc_object_t, CLConnectionMessageHandler, CLConnection *)
Error on message reply (%{public}s)
Ignoring unexpected event
CLDaemonClient.AutopauseThreshold
DaemonClient
CLDaemonClient::CLDaemonClient(CLConnection *, CLClientManager *, BasicMutex &, id<CLIntersiloUniverse>)
Couldn't get information from PID %{public}u
bool CLDaemonClient::init()
Failed to become client of CLClientManager
RttBurstSize
WRTT: overriding burst size to %{public}d
fRttBurstSize <= kCLMaxNumberOfMeasurementsInBurst
PAUSE: BATCH: '%s' (%d, %p) started in the unknown state. Daemon?
#Warning PAUSE: BATCH: '%s' (%d, %p) started in unexpected state: %s
AutoPauseOverride
PAUSE: Override AutoPause to On for all clients
PAUSE: Override AutoPause to On for all clients linked with SDK that predates 6.0
PAUSE: Override AutoPause to Off for all clients
PAUSE: Override AutoPause to None
AutoPauseLogUI
PAUSE: AutoPause log UI Enabled
AutoPauseActivityType
PAUSE: activity type defaulted to %ld
OnBodyStatusOverride
CLDisableAuthorizationRequests
kCLConnectionMessageDesiredAccuracyKey
no longer 
void CLDaemonClient::setAssertedInUse(bool)
#CLIUA Client %{public}s now %{public}sbenefitting from an InUseAssertion
(!!value) != (!!fVisibilityAssertion)
StatusBarOverride
visibilityAssertion
kCLClientRegistrationResultFailedUnverified != fRegistrationResult
kCLConnectionMessageBatch
kCLConnectionMessageRegionState
kCLConnectionMessageInUseAssertion
kCLConnectionMessageEmergencyEnablementAssertion
kCLConnectionMessageLocationIndependenceAssertion
kCLConnectionMessageLocation
kCLConnectionMessageHeading
kCLConnectionMessageRegionMonitoring
kCLConnectionMessagePeerRanging
kCLConnectionMessageSignificantLocationChange
kCLConnectionMessageSignificantLocationVisit
kCLConnectionMessageVehicleHeading
kCLConnectionMessageVehicleSpeed
kCLConnectionMessageMicroLocation
kCLConnectionMessageMotionState
kCLConnectionMessageMotionActivityUpdate
kCLConnectionMessageMotionActivityQuery
kCLConnectionMessageMotionActivityAvailable
kCLConnectionMessageActivityAlarmStart
kCLConnectionMessageActivityAlarmAvailable
kCLConnectionMessageSidebandOverride
kCLConnectionMessageMotionStateSim
kCLConnectionMessageStartStepCountAvailable
kCLConnectionMessageStartStepCountUpdate
kCLConnectionMessageStepCountQuery
kCLConnectionMessageStepCountRecordQuery
kCLConnectionMessageStepCountReset
kCLConnectionMessageFloorCountAvailable
kCLConnectionMessagePaceAndCadenceAPIAvailable
kCLConnectionMessagePedometerEvent
kCLConnectionMessageSidebandSensorFusionEnable
kCLConnectionMessageGesture
kCLConnectionMessageGmm
kCLConnectionMessagePressureBias
kCLConnectionMessageGyroBiasEstimation
kCLConnectionMessageOnBodyDetection
kCLConnectionMessageOnBodyDetectionParams
kCLConnectionMessageNatalimetryAvailable
kCLConnectionMessageNatalimetryUpdate
kCLConnectionMessageNatalimetryQuery
kCLConnectionMessageNatalimetryGetUserProfile
kCLConnectionMessageNatalimetrySetUserProfile
kCLConnectionMessageNatalimetrySetSession
kCLConnectionMessageOdometerGpsAvailability
kCLConnectionMessageStartOdometerUpdate
kCLConnectionMessageSedentaryTimerIsAvailable
kCLConnectionMessageSedentaryTimerIsArmed
kCLConnectionMessageSedentaryTimerStart
kCLConnectionMessageSedentaryTimerStop
kCLConnectionMessageSedentaryTimerQuery
kCLConnectionMessageSedentaryTimerAlarm
kCLConnectionMessageVehicleStateIsAvailable
kCLConnectionMessageVehicleStateMostRecentVehicleConnection
kCLConnectionMessageVehicleStateMostRecentInVehicle
kCLConnectionMessageSensorRecorderWriteSensorDataToFileByDateRange
kCLConnectionMessageExerciseMinuteUpdate
kCLConnectionMessageExerciseMinuteQuery
kCLConnectionMessageWorkoutStart
kCLConnectionMessageWorkoutStop
kCLConnectionMessageWorkoutEvent
kCLConnectionMessageSwimDataUpdate
kCLConnectionMessageSignificantElevationUpdate
kCLConnectionMessageCaptureMode
kCLConnectionMessageFallStatsAvailable
kCLConnectionMessageFallStatsSetEnabled
kCLConnectionMessageSpringTrackerIsTracking
kCLConnectionMessageSpringTrackerStart
kCLConnectionMessageSpringTrackerStop
kCLConnectionMessageSpringTrackerQuery
kCLConnectionMessageMotionAlarmFire
void CLDaemonClient::shutdown()
#CLEEA Releasing EmergencyEnablementAssertion on behalf of %{public}s with reason %{public}s
ending metric session (LocationUpdateSession) for %s
ending metric session (LocationMonitorSession) for %s
iB: ending metric session (BeaconMonitorSession) for %s
iB: ending metric session (BeaconRangingSession) for %s
ending metric session (MotionTrigger) for %s
Client %s disconnected before delayed unvisibility transition
v16@?0q8
void CLDaemonClient::fetchLocationSystemStateWithReply(void (^)(const CLDaemonStats_Type::LocationSystemState &))_block_invoke
location system state, cell available, %d, wifi available, %d, passcode locked, %d, airplane mode enabled, %d, accessory connected, %d, reachability, %d, powered, %d, gpsCoexWifi, %d, gpsCoexBt, %d
kCLConnectionMessageDynamicAccuracyReductionKey
kCLConnectionMessageAlteredAccessoryLocationsKey
int CLDaemonClient::locationDataToNvp(const CLLocationProvider_Type::NotificationData &, CLNameValuePair &)
ALTERED: toNvp: %.8f, %.8f, %.2f, %d, %d, %lf, %lf, %d, %.8f, %.8f, %.2f
IsFitnessMatch
Failed to convert location to nvp
LocationsPrivate
Failed to convert location private to nvp
void CLDaemonClient::deliverLocationToClient(const CLLocationProvider_Type::NotificationData &)
Sending location to client <%{public}s>
BATCH: successfully ended for %s
v16@?0r^{NotificationData={CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocationPrivate=dddddfffBi{?=dd}diiB{?=dd}if{?=dd}ddiBddddddB}{shared_ptr<CLBatchedLocations>=^{CLBatchedLocations}^{__shared_weak_count}}{TechnologyStatus=iB}Bdi{?=dddd}{?=dd}{XtraFileAvailable=d{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}i{LocationDerivedSpeed=ddd}{shared_ptr<const GNSS::MeasurementData>=^{MeasurementData}^{__shared_weak_count}}i}8
void CLDaemonClient::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)
BATCH: location unavailable caused batch failure
kCLConnectionMessageVehicleSpeedKey
Sending,vehicle speed,to client,%{public}s,time,%{public}.3lf,speed,%{private}.3lf
kCLConnectionMessageVehicleHeadingKey
Sending,vehicle heading,to client,%{public}s,time,%{public}.3lf,heading,%{private}.3lf
Got active change notification; updating requests
void CLDaemonClient::onBTLEFenceNotification(int, const CLBTLEFenceManager_Type::Notification &, const CLBTLEFenceManager_Type::NotificationData &)
@iB: Sending kCLConnectionMessageRegionMonitoringError for region,'%{public}s/%{private}s'.
kCLConnectionMessageErrorKey
@iB: Sending kCLConnectionMessageRegionMonitoringSetupCompleted for region,'%{public}s/%{private}s'.
@iB: Sending kCLConnectionMessageRegionState for region,'%{public}s/%{private}s'.
kCLConnectionMessageStatusKey
@iB: Sending kCLConnectionMessageRegionMonitoring for region,'%{public}s/%{private}s'.
kCLConnectionMessageEventKey
Unsupported region transition state,%{public}d will not be reported.
ending metric session (BeaconMonitorSession) for %s
void CLDaemonClient::onBTLERangeNotification(int, const CLBTLERangeManager_Type::Notification &, const CLBTLERangeManager_Type::NotificationData &)
iB: Unable to find ranged region,%{private}s.
Sending kCLConnectionMessageRangingError for region,%{private}s with error,%{public}d.
kCLConnectionMessageBeaconsKey
@iB: Sending kCLConnectionMessageRanging for region,%{private}s, with beacons,%{public}d.
void CLDaemonClient::onPeerRangeNotification(int, const CLPeerRangingNotifier_Type::Notification &, const CLPeerRangingNotifier_Type::NotificationData &)
WRTT: %s received PeerRanging notification %d (fRegistrationResult %d)
void CLDaemonClient::sendPeerRangesAndErrors(const std::vector<CLPeerRangingResult> &, const std::vector<CLPeerRangingError> &)
WRTT: Send PeerRanges, %ld, Errors, %ld
peers && "Error code has to go with a peer"
[errors count] == [peers count] && "Number of peers and errors has to be same"
void CLDaemonClient::sendPeerRangingErrors(NSArray *, NSArray *)
WRTT: send Errors (%{public}lu) to client '%s'
kCLConnectionMessageErrorsKey
kCLConnectionMessageRangingPeersKey
void CLDaemonClient::sendPeerRangingRequestProcessed(bool, NSArray *)
WRTT: processed request processed, isStart,%d, nPeers,%lu
kCLConnectionMessageSubscribeKey
!rangeResults.empty()
void CLDaemonClient::sendPeerRangeResults(const std::vector<CLPeerRangingResult> &)
WRTT: send Results (%{public}ld) to client '%s'
WRTT: Sending PeerRanging info to client '%s'
void CLDaemonClient::onFenceNotification(int, const CLFenceManager_Type::Notification &, const CLFenceManager_Type::NotificationData &)
Fence: received, kNotificationRegionStateRequest, %s, state, %d, %s
Fence: unknown state, %{public}d
kCLConnectionMessageLocationKey
entry
exit
Notifying client of fence %s for %s/%s (location <%+.8f,%+.8f> acc %.2f type %d)
v16@?0r^{LocationSystemState=BBBBBiBii}8
Sending setup delayed message for %s/%s
Sending setup completed message for %s/%s
Fence: received, kNotificationFenceNotAuthorized
#Notice Fence: kNotificationFenceNotAuthorized, bundle not authorized for location, %{public}s, fence, %{public}s
Fence: received, kNotificationFenceFailure
#Notice Sending region monitoring error message for %{public}s/%{public}s
kCLConnectionMessageAlternateRegionKey
No alternate region available
void CLDaemonClient::sendSignificantLocationChange(const CLLocationProvider_Type::NotificationData &, bool)
Sending significant location change <%{private}+.8f,%{private}+.8f> acc %{private}.2f for %{public}s (pid %{public}04d)
v24@?0d8d16
Not notifying client %{public}s (pid %{public}04d) of significant location change because regular location updates are enabled
void CLDaemonClient::onActivityAlarm(int, CMActivityAlarm *, NSError *)
activity alarm triggered. (internal id %d)
%@, %s, %d, %p
void CLDaemonClient::onSedentaryTimerAlarm(int, const CLSedentaryTimerNotifier_Type::Notification &, const CLSedentaryTimerNotifier_Type::NotificationData &)
void CLDaemonClient::onEarGestureNotification(const CLEarGestureNotifier::CMEarGestureData &)
Sent ear gesture message (prototype %s)
com.apple.mobilephone
ignoring metric for phone pick-up
counting metric for non-phone pick-up
starting metric session (MotionTrigger) for %s
void CLDaemonClient::onGyroBiasEstimatorNotification(const CLMotionTypeGyroBiasAndVariance &)
Sent gyro bias estimation message
void CLDaemonClient::onGmmNotification(int, const CLGeomagneticModelProvider_Type::Notification &, const CLGeomagneticModelProvider_Type::NotificationData &)
Received GMM notification %d
void CLDaemonClient::onPressureBias(int, const CLPressureBias_Type::Notification &, const CLPressureBias_Type::NotificationData &)
Unexpected notification in onPressureBias,notification,%d
 overridden
void CLDaemonClient::onOnBodyNotification(int, const CLOnBodyNotifier_Type::Notification &, const CLOnBodyNotifier_Type::NotificationData &)
Sent%s onBodyDetection message to %s, %s
void CLDaemonClient::onPauseNotification(int, const CLAutopauseProvider_Type::Notification &, const CLAutopauseProvider_Type::NotificationData &)
PAUSE: %s received pause notification %d
void CLDaemonClient::onProactiveCompass(const CLCompass_Type::Sample *)
Compass calibration achieved (L%d) for client '%s'
kCLConnectionMessageSignificantLocationVisitKey
void CLDaemonClient::onBatchTimer(CLPersistentTimer *)
BATCH: Time criterion met, waiting for location event to notify client %s
void CLDaemonClient::onManagerNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)
'%{public}s' received unknown notification: %{public}d
void CLDaemonClient::onMicroLocationNotification(int, const CLMicroLocationNotifier_Type::Notification &, const CLMicroLocationNotifier_Type::NotificationData &)
MicroLocation: %s received microlocation notification %d (fRegistrationResult %d)
!microLocationResults.empty()
void CLDaemonClient::sendMicroLocations(const std::vector<CLMicroLocationResultInternal> &)
Client %{public}s is not authorized to receive microlocations
kCLConnectionMessageError
bool CLDaemonClient::checkEntitlement(const std::string &, bool &)
Couldn't get CFString for entitlement
entitled
not entitled
%s is %s for %s
void CLDaemonClient::setRegistrationResult(CLTypeRegistrationResult)
Authorization status for %s is now %s (was %s)
client authorized; sending out cached message %s
client authorized but no longer interested in cached message %s; discarding cache
#Warning %s is still not authorized for %s, dropping
UIBackgroundModes
void CLDaemonClient::assessClientCapabilities()
PID %u either doesn't specify UIBackgroundModes, or SB timed out fetching them
client '%s' supports background location
void CLDaemonClient::handleAuthorizationStatusChange()
fRegistrationResult != CLClientManager->getClientEffectiveRegistrationResult for %{public}s: %{public}d != %{public}d
void CLDaemonClient::sendDeniedErrorMessage()
Sending denied error message to %s
!fAuthorizationRequested
CLClientManager_Type::AuthorizationRequestTypeInvalid != requestType
fAuthorizationRequested
CLClientManager_Type::AuthorizationRequestTypeInvalid != fRequestTypeInFlight
void CLDaemonClient::enteredBackground()
PAUSE: Client %s entered background at %.1f
Client %s will transition to unvisible after grace period
 (belayed outstanding transition to invisible)
void CLDaemonClient::enteredForeground()
Client %s now visible, was %svisible%s
PAUSE: Client %s entered foreground (from %.1f)
PAUSE: Client '%{public}s' was paused but not in the background
kCLConnectionMessageDistanceFilterKey
void CLDaemonClient::sendMessage(CLDaemonClient::MessageRef)
Client not authorized for message %{public}s
#Warning Client '%s' is not interested in %s
didPause
willResume
void CLDaemonClient::sendAutopauseStatusMessage(bool)
PAUSE: AutoPause is overridden to off, reject %s message to client '%s'
locationd paused updates to '%s' at %ld:%ld:%ld %ld-%ld-%ld (%.2f). If you believe this was in error, file a radar with a screenshot and your locationd.log
Autopause
locationd paused updates to '%s' at %.2f. client autopause setting: %d, override setting: %d
PAUSE: Sending %s message to client '%s'
kCLConnectionMessageAutopauseStatusKey
kCLConnectionMessageAutopauseOverrideKey
void CLDaemonClient::sendBatchDidFinish(int)
BATCH: Not batching but tried to finish with error %{public}d
BATCH: Sending didFinishDeferredUpdatesWithError:%d message to client '%s'
void CLDaemonClient::wakeupDaemonClient(const std::string &)
Sending kCLConnectionMessageWakeClient for %{public}s to client '%{public}s'
kCLConnectionMessageClientNameKey
kCLConnectionMessageBundleIdentifierKey
kCLConnectionMessageBundlePathKey
kCLConnectionMessageClientSDKKey
void CLDaemonClient::handleMessageRegistration(std::shared_ptr<CLConnectionMessage>)
Client '%{public}s' does not have required entitlement '%{public}s' to set effective bundle identifier, '%{public}s', or effective bundle, '%{public}s'
Client '%{public}s' is setting effective bundle identifier to '%{public}s'
com.apple.webapp-
Client '%{public}s' is attempting to masquerade as uninstalled app with effective bundle identifier '%{public}s'
Client '%{public}s' is setting effective bundle path to '%{public}s'
Client '%{public}s' is registering as a system service
Client %{public}s is attempting to masquerade as uninstalled app with effective bundle path <%{public}s>
Client '%{public}s' is a plugin, auto-masquerading as its containing app
Could not access bundle for masquerading client %{public}s
B16@?0^{__CFString=}8
%{public}s is creating a CLLocationManager, but does not have any NSLocation*UsageDescription keys
OpaqueTags
CLDaemonClient registered
kCLConnectionMessagePurposeKey
void CLDaemonClient::handleMessagePurpose(std::shared_ptr<CLConnectionMessage>)
Couldn't get value for key %{public}s
void CLDaemonClient::handleMessageIsActuallyAWatchKitExtension(std::shared_ptr<CLConnectionMessage>)
Unentitled entity '%{public}s' trying to tell us they are WatchKit
kCLConnectionMessageEnabledKey
Setting client, %s, is actually a WatchKit extension, %d
void CLDaemonClient::handleMessageProxyForRemoteClient(std::shared_ptr<CLConnectionMessage>)
void CLDaemonClient::handleMessageMarkAsHavingReceivedLocation(std::shared_ptr<CLConnectionMessage>)
Unentitled entity '%{public}s' trying to mark itself as having received location?!
Request to mark '%{public}s' as having received location while it is not authorized
does not have
Marking '%s' as having received location without regard to authorization (it is %s, and presently %s authorization)
void CLDaemonClient::handleMessageRequestAuthorization(std::shared_ptr<CLConnectionMessage>)
Malformed authorization request from '%{public}s'
void CLDaemonClient::requestAuthorization(CLClientAuthorizationStatus)
Unrecognized authorization value (%{public}d) requested by '%{public}s'
#Notice Dropping -request%{public}sAuthorization from '%{public}s': NSLocation%{public}sUsageDescription Info.plist key not available?
Authorization value %{public}s requested by '%{public}s' ignored because not in its allowable mask (%{public}lu)
Authorization value %{public}s requested by '%{public}s' ignored because another authorization effort (%{public}d) is already in flight
Allowing one-shot attempt to update to %{public}s from %{public}s by '%{public}s'
Client %{public}s is denied.  Asking client manager to consider doing a big switch prompt
Authorization value %{public}s requested by '%{public}s' ignored because registration is already %{public}s
Client %{public}s requested that we show a prompt for %{public}s, but they already have authorization level %{public}s.
kCLConnectionMessageActivityTypeKey
void CLDaemonClient::handleMessageActivityType(std::shared_ptr<CLConnectionMessage>)
Client '%s' changed activity type from %ld to %ld
void CLDaemonClient::handleMessageWatchdog(std::shared_ptr<CLConnectionMessage>)
received watchdog from client '%s'
void CLDaemonClient::handleMessageMatchInfoEnabled(std::shared_ptr<CLConnectionMessage>)
Client %{public}s does not have appropriate entitlement to enable match info
Client %s is setting match info enabled to %d
void CLDaemonClient::handleMessagePersistentMonitoringEnabled(std::shared_ptr<CLConnectionMessage>)
Setting persistent monitoring enabled to %d
Client now interested in persistent monitoring; adding as a significant change client
Client no longer interested in persistent monitoring; removing as a significant change client
void CLDaemonClient::handleMessageAllowsLocationPrompts(std::shared_ptr<CLConnectionMessage>)
Client %{public}s does not have appropriate entitlement to change prompt behaviour
Client %s is setting location prompt allowed to %d
void CLDaemonClient::handleMessageShowLocationPrompt(std::shared_ptr<CLConnectionMessage>)
Client %s is setting location prompt show to %d
void CLDaemonClient::handleMessageRegisterAsLocationClient(std::shared_ptr<CLConnectionMessage>)
Client %{public}s is registering as a location client and will show up in Settings
kCLConnectionMessagePausesLocationUpdatesAutomaticallyKey
void CLDaemonClient::handleMessagePausesLocationUpdatesAutomatically(std::shared_ptr<CLConnectionMessage>)
Client %s is setting AutoPause to %d
kCLConnectionMessageAllowsBackgroundLocationUpdatesKey
void CLDaemonClient::handleMessageAllowsBackgroundLocationUpdates(std::shared_ptr<CLConnectionMessage>)
Client %s is setting ContinuousBackgroundLocationRequested to %d
void CLDaemonClient::startBatching(CLTypeOdometer, CFAbsoluteTime)
BATCH: startBatching called but we're already batching
BATCH: starting client %s
BATCH: scheduling odometer alarm for %.1f
void CLDaemonClient::startBatching(CLTypeOdometer, CFAbsoluteTime)_block_invoke_2
BATCH: Odometer errored (%{public}s) for client (%{public}s)
BATCH: Odometer criterion met, waiting for location event to notify client %s
BATCH: Odometer fired (%.1f,%s) but no longer relevant to us
v32@?0@"CLOdometerAlarm"8d16@"NSError"24
BATCH: scheduling timer for %.1f
BatchAlarm.
void CLDaemonClient::stopBatching()
BATCH: stopBatching called but we're not batching
BATCH: stopping client %s
kCLConnectionMessageBatchAllowedKey
void CLDaemonClient::handleMessageBatch(std::shared_ptr<CLConnectionMessage>)
BATCH: client %s disallowed Batch
kCLConnectionMessageBatchDistanceKey
kCLConnectionMessageBatchTimeoutKey
BATCH: request (%.1fm, %.1fs) will be based on %.1fm (%.1fs), %.1fs for client %s
BATCH: How were we not updating location?
BATCH: How were we batching accuracy was too low?
BATCH: How were we batching if a distance filter was on?
BATCH: distance or timeout was <= 0 (techincally exit criteria has already been satisfied.)
#Notice Location uncertainty too high to allow deferred updates now
#Warning BATCH: odometer is not running, we have no way to know what distance is relative to
BATCH: scheduled batch exit but not off-boarding
void CLDaemonClient::handleMessageRegisterLaunchdManagedClients(std::shared_ptr<CLConnectionMessage>)
Client %s is allowing message kCLConnectionMessageWakeClient
kCLConnectionMessageWakeClient
kCLConnectionMessageAllowsMapCorrectionKey
void CLDaemonClient::handleMessageAllowsMapCorrection(std::shared_ptr<CLConnectionMessage>)
CLMM,Client,'%s',pid,%u,allowsMapCorrection,%d,desiredAccuracy,%lf,kNotificationMapMatching,%d
void CLDaemonClient::handleMessageRegionState(std::shared_ptr<CLConnectionMessage>)
#Warning Couldn't get value for key %s, %s/%s
Client %{public}s does not have appropriate entitlement to act as a proxy service to %{public}s
Fence: requesting, kCLClientRegionCircular for, [%s]/%s/%s
{Fence={basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}dddddidddiQi}8@?0
Fence: requesting, kCLClientRegionBeacon for, [%s]/%s/%s
v16@?0^{CLBTLEFenceManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB}8
void CLDaemonClient::handleMessageUnknown(std::shared_ptr<CLConnectionMessage>)
Got unhandled mesage of type %{public}s
void CLDaemonClient::handleMessageInUseAssertion(std::shared_ptr<CLConnectionMessage>)
#warning #CLIUA Not entitled as usage oracle... ignoring InUseAssertion taken by %{public}s
#CLIUA InUseAssertion taken by %{public}s malformed: lacking required argument
#CLIUA Neither bundleIdentifier nor bundlePath specified... ignoring InUseAssertion taken by %{public}s
#CLIUA Assertion requested with no reason... ignoring InUseAssertion taken by %{public}s
void CLDaemonClient::handleMessageEmergencyEnablementAssertion(std::shared_ptr<CLConnectionMessage>)
#warning #CLEEA Not entitled as emergency enabler... ignoring EmergencyEnablementAssertion taken by %{public}s
#CLEEA InUseAssertion taken by %{public}s malformed: lacking required argument
#CLEEA Taking EmergencyEnablementAssertion on behalf of %{public}s with reason %{public}s
void CLDaemonClient::handleMessageLocation(std::shared_ptr<CLConnectionMessage>)
void CLDaemonClient::handleMessageHeading(std::shared_ptr<CLConnectionMessage>)
void CLDaemonClient::handleMessageRegionMonitoring(std::shared_ptr<CLConnectionMessage>)
void CLDaemonClient::handleMessageRanging(std::shared_ptr<CLConnectionMessage>)
void CLDaemonClient::handleMessagePeerRanging(std::shared_ptr<CLConnectionMessage>)
void CLDaemonClient::handleMessageSignificantLocationChange(std::shared_ptr<CLConnectionMessage>)
void CLDaemonClient::handleMessageSignificantLocationVisit(std::shared_ptr<CLConnectionMessage>)
void CLDaemonClient::handleMessageVehicleSpeed(std::shared_ptr<CLConnectionMessage>)
void CLDaemonClient::handleMessageVehicleHeading(std::shared_ptr<CLConnectionMessage>)
void CLDaemonClient::handleMessageMicroLocation(std::shared_ptr<CLConnectionMessage>)
void CLDaemonClient::handleMessageMotionState(std::shared_ptr<CLConnectionMessage>)
void CLDaemonClient::handleMessageStepCountUpdate(std::shared_ptr<CLConnectionMessage>)
void CLDaemonClient::handleMessagePedometerEvent(std::shared_ptr<CLConnectionMessage>)
void CLDaemonClient::handleMessageMotionActivityUpdate(std::shared_ptr<CLConnectionMessage>)
void CLDaemonClient::handleMessageActivityAlarm(std::shared_ptr<CLConnectionMessage>)
void CLDaemonClient::handleMessageGesture(std::shared_ptr<CLConnectionMessage>)
void CLDaemonClient::handleMessageGyroBiasEstimation(std::shared_ptr<CLConnectionMessage>)
void CLDaemonClient::handleMessageGmm(std::shared_ptr<CLConnectionMessage>)
void CLDaemonClient::handleMessagePressureBias(std::shared_ptr<CLConnectionMessage>)
void CLDaemonClient::handleMessageOnBodyDetection(std::shared_ptr<CLConnectionMessage>)
void CLDaemonClient::handleMessageNatalimetryUpdate(std::shared_ptr<CLConnectionMessage>)
void CLDaemonClient::handleMessageOdometerGpsAvailability(std::shared_ptr<CLConnectionMessage>)
void CLDaemonClient::handleMessageOdometerUpdate(std::shared_ptr<CLConnectionMessage>)
void CLDaemonClient::handleMessageSedentaryTimerAlarm(std::shared_ptr<CLConnectionMessage>)
void CLDaemonClient::handleMessageExerciseMinuteUpdate(std::shared_ptr<CLConnectionMessage>)
void CLDaemonClient::handleMessageWorkoutEvent(std::shared_ptr<CLConnectionMessage>)
void CLDaemonClient::handleMessageSwimDataUpdate(std::shared_ptr<CLConnectionMessage>)
void CLDaemonClient::handleMessageSignificantElevationUpdate(std::shared_ptr<CLConnectionMessage>)
void CLDaemonClient::handleMessageMotionAlarmFire(std::shared_ptr<CLConnectionMessage>)
kCLConnectionMessageLocationUnavailable
void CLDaemonClient::handleRequestLocation(bool, const CLNameValuePair &)
client '%s' subscribing to location desiredAccuracy %.2f distanceFilter %.2f dynamicAccuracyReductionEnabled %d allowsAlteredAccessoryLocations %d
client '%{public}s' unsubscribing from location
@ClxClient, unsubscribe, %{public}s
void CLDaemonClient::handleRequestRegionMonitoring(bool, const CLNameValuePair &)
#Warning Couldn't get value for key %{private}s, %{private}s/%{private}s
starting metric session (LocationMonitorSession) for %s
Adding geographic fence [%s]/%s/%s
Removing geographic fence [%s]/%s/%s
starting metric session (BeaconMonitorSession) for %s
Invalid beacon region request [%{public}s]/%{public}s/%{public}s.
kCLConnectionMessageRegionsKey
kCLConnectionMessageIdentifierKey
void CLDaemonClient::handleRequestRanging(bool, const CLNameValuePair &)
Client %{public}s is attempting ranging as a proxy service to %{public}s
Ranging any region,%{public}s, requires an entitlement.
Unable to parse ranged region,%{public}d.
#Warning Unable to subscribe to ranging.
bool CLDaemonClient::isEntitledForPeerRanging()
WRTT: couldn't get entitlement for Client %s
WRTT: client %s does not have appropriate entitlement to access SPI
void CLDaemonClient::handleRequestPeerRanging(bool, const CLNameValuePair &)
WRTT: daemon client received request,client,%s,subscribe,%{public}d
kCLConnectionMessageRangingPeerInitiatorKey
kCLConnectionMessageRangingPeerTimeoutKey
WRTT: peer %#llX, timeout %lf, len(keyID) %lu
WRTT: client '%s' subscribing to PeerRanging
WRTT: Client '%s' registered for PeerRanging notifications
v16@?0^{CLPeerRangingNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB^^?^^?{CLPeerRangingManager=^{CLPeerRangingManagerDelegate}{CLPeerRangeRequest={basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}Bd{vector<CLRangingPeerInternal, std::__1::allocator<CLRangingPeerInternal> >=^{CLRangingPeerInternal}^{CLRangingPeerInternal}{__compressed_pair<CLRangingPeerInternal *, std::__1::allocator<CLRangingPeerInternal> >=^{CLRangingPeerInternal}}}}BBi}^{CLPersistentTimer}{unique_ptr<CLWifiServiceClient, std::__1::default_delete<CLWifiServiceClient> >={__compressed_pair<CLWifiServiceClient *, std::__1::default_delete<CLWifiServiceClient> >=^{CLWifiServiceClient}}}}8
WRTT: client '%s' unsubscribing from PeerRanging
WRTT: Client '%s' unregistered from PeerRanging notifications
bool CLDaemonClient::isAuthorizedForMotionActivity()
#Warning Client %s did not pass entitlement/tcc checks.
bool CLDaemonClient::isAuthorizedForSensorRecorder()
Client %s did not pass entitlement/tcc checks.
Client %s cannot access sensor recorder, invalid target.
void CLDaemonClient::handleRequestMotionState(bool, const CLNameValuePair &)
Received MotionState request,client,%s,subscribe,%d
void CLDaemonClient::handleRequestMotionActivityUpdate(bool, const CLNameValuePair &)
Received MotionActivityUpdate request,client,%s,subscribe,%d
Cannot subscribe to motion activity updates, motion activity is not available
void CLDaemonClient::handleMessageMotionActivityQuery(std::shared_ptr<CLConnectionMessage>)
query for motion activity was received but motion activity is not available
Programmer error: Wrong parameters were passed!
CLDaemonClient.MotionActivityQuery
void CLDaemonClient::handleRequestActivityAlarm(bool, const CLNameValuePair &)
#Warning Activity alarms not available.  Requested alarm will not be listened for.
Primed for activity alarm %d with duration %f (internal id %d)
void CLDaemonClient::handleRequestActivityAlarm(bool, const CLNameValuePair &)_block_invoke
#Warning CLDaemonClient got activity alarm callback after destruction... ignoring
Invalidated activity alarm %d with duration %f (internal id %d)
void CLDaemonClient::handleRequestStepCountUpdate(bool, const CLNameValuePair &)
StepCount subscription changed, %s, %d, %p, %d
Cannot subscribe to step count updates, step counting is not available
Cannot subscribe to step count updates as step counting is not enabled
void CLDaemonClient::handleRequestPedometerEvent(bool, const CLNameValuePair &)
PedometerEvent subscription changed, %s, %d, %p, %d
void CLDaemonClient::handleRequestOdometerGpsAvailability(bool, const CLNameValuePair &)
OdometerGpsAvailability subscription changed, %d, %s, %d, %p
void CLDaemonClient::handleRequestOdometerUpdate(bool, const CLNameValuePair &)
Odometer subscription changed, %s, %d, %p, %d
bool CLDaemonClient::isEntitledForSedentaryTimer()
SedentaryAlarm,Failed entitlement check,%{public}s
bool CLDaemonClient::isEntitledForUserInfoAccess()
#Warning Client %s does not have appropriate entitlement to access user info spi
void CLDaemonClient::handleMessageSedentaryTimerStart(std::shared_ptr<CLConnectionMessage>)
SedentaryAlarm,Failed to start,nil dictionary
void CLDaemonClient::handleMessageSedentaryTimerQuery(std::shared_ptr<CLConnectionMessage>)
SedentaryAlarm,Failed to query,nil dictionary
void CLDaemonClient::handleRequestSedentaryTimerAlarm(bool, const CLNameValuePair &)
SedentaryAlarm,subscription changed, %d, %s, %d, %p
void CLDaemonClient::handleRequestMotionAlarmFire(bool, const CLNameValuePair &)
Motion alarm fire subscription changed, %s, %d, %p, %d
static NSString *CLDaemonClient::bundleIdForClient(CLClientManager_Type::Name)
Unable to find bundle identifier!
void CLDaemonClient::handleMessageSidebandOverride(std::shared_ptr<CLConnectionMessage>)
Invalid message recieved from framework.
void CLDaemonClient::handleMessageMotionStateSim(std::shared_ptr<CLConnectionMessage>)
void CLDaemonClient::handleMessageVehicleConnectionMostRecent(std::shared_ptr<CLConnectionMessage>)
#Warning Client %s does not have appropriate entitlement to access motion activity spi
void CLDaemonClient::handleMessageVehicleStateMostRecentInVehicle(std::shared_ptr<CLConnectionMessage>)
#Warning Client %s does not have access to motion activity spi because the platform is not supported
void CLDaemonClient::handleMessageStepCountQuery(std::shared_ptr<CLConnectionMessage>)
query for step count was received but step counts were not available
Error querying step count data
void CLDaemonClient::handleMessageStepCountRecordQuery(std::shared_ptr<CLConnectionMessage>)
CLDaemonClient.StepCountRecordQuery
Error querying pedometer data, %{public}d
void CLDaemonClient::handleMessageStepCountReset(std::shared_ptr<CLConnectionMessage>)
Step count reset failed as it was not available!
void CLDaemonClient::handleMessageStrideCalibrationDump(std::shared_ptr<CLConnectionMessage>)
CLDaemonClient received StrideCalibrationDump request,client,%s
Step count notifier not available
history
rawSpeedToKValueBins
stepCadenceToStrideLengthBins
v32@?0@"NSMutableArray"8@"NSMutableArray"16@"NSMutableArray"24
Cannot find step count proxy
void CLDaemonClient::handleMessagePedometerCalibrationQuery(std::shared_ptr<CLConnectionMessage>)
received request for remote pedometer calibrations
void CLDaemonClient::handleMessagePedometerCalibrationQuery(std::shared_ptr<CLConnectionMessage>)_block_invoke
No remote pedometer calibrations available
received request for pedometer calibrations
No pedometer calibrations available
void CLDaemonClient::handleMessageSidebandSensorFusionEnable(std::shared_ptr<CLConnectionMessage>)
[SidebandSensorFusion], Wrong parameters were passed!
#Notice [SidebandSensorFusion], Request failed, enabled, %d, snoop, %d, latency, %d, success, %d
void CLDaemonClient::handleRequestGesture(bool, const CLNameValuePair &)
Received Gesture request,client,%s,subscribe,%d
kCLConnectionMessagePriorityKey
Priority not set
Got gesture subscription request, priority = %d, Client = %s
void CLDaemonClient::handleRequestGesture(bool, const CLNameValuePair &)_block_invoke_2
#Warning CLDaemonClient got ear gesture callback after destruction... ignoring
v28@?0{?=[16c]i}8
Got gesture unsubscription request, Client = %s
void CLDaemonClient::handleRequestGyroBiasEstimation(bool, const CLNameValuePair &)
CLDaemonClient received GyroBiasEstimation request,client,%s,subscribe,%d
kCLConnectionMessageBuildGYTTKey
isBuildingGYTT not set
CLDaemonClient got gyro bias estimation subscription request,isBuildingGYTT,%d
void CLDaemonClient::handleRequestGyroBiasEstimation(bool, const CLNameValuePair &)_block_invoke_2
Warning: CLDaemonClient got gyro bias callback after destruction... ignoring
CLDaemonClient got gyro bias estimation unsubscription request
void CLDaemonClient::handleRequestGmm(bool, const CLNameValuePair &)
Received GMM request,client,%s,subscribe,%d
void CLDaemonClient::handleRequestPressureBias(bool, const CLNameValuePair &)
Recieved pressure bias estimation request.,client,%s,subscribe,%d
bool CLDaemonClient::isEntitledForOnBodyDetection()
#Warning Client %s does not have appropriate entitlement to access on body detection SPI
void CLDaemonClient::handleRequestOnBodyDetection(bool, const CLNameValuePair &)
Received OnBodyDetection request,client,%s,subscribe,%d
void CLDaemonClient::handleMessageOnBodyDetectionParams(std::shared_ptr<CLConnectionMessage>)
Wrong parameters were passed!
v16@?0^{CLOnBodyNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBB}8
bool CLDaemonClient::isEntitledForNatalimetry()
Client failed entitlement check for calorimetry, %s, %d, %p
com.apple.locationd.bundle-/System/Library/LocationBundles/MotionCalibration.bundle
bool CLDaemonClient::isNatalimetryCalibrationAuthorized()
Location services are disabled preventing motion calibration.
void CLDaemonClient::handleRequestNatalimetryUpdate(bool, const CLNameValuePair &)
Calorie subscription changed, %d, %s, %d, %p
void CLDaemonClient::handleMessageNatalimetryQuery(std::shared_ptr<CLConnectionMessage>)
Error in query request.
CLDaemonClient.NatalimetryQuery
Error querying calorie data, %{public}d
CLDaemonClient.SpringTrackingNotifierIsTracking
CLDaemonClient.SpringTrackingNotifierStart
void CLDaemonClient::handleMessageSpringTrackerStart(std::shared_ptr<CLConnectionMessage>)
Tracking START, %s, %d, %p, %d
CLDaemonClient.SpringTrackingNotifierStop
void CLDaemonClient::handleMessageSpringTrackerStop(std::shared_ptr<CLConnectionMessage>)
Tracking STOP, %s, %d, %p, %d
void CLDaemonClient::handleMessageSpringTrackerQuery(std::shared_ptr<CLConnectionMessage>)
CLDaemonClient.SpringTrackingNotifierQuery
void CLDaemonClient::handleMessageSpringTrackerQuery(std::shared_ptr<CLConnectionMessage>)_block_invoke
void CLDaemonClient::handleMessageFitnessMachineData(std::shared_ptr<CLConnectionMessage>)
Error receiving data from fitness machine
CLDaemonClient.FitnessMachineData
void CLDaemonClient::handleMessageNatalimetryGetUserProfile(std::shared_ptr<CLConnectionMessage>)
Getting user profile, %@, %s, %d, %p
void CLDaemonClient::handleMessageNatalimetrySetUserProfile(std::shared_ptr<CLConnectionMessage>)
Setting user profile, %{private}@, %s, %d, %p
void CLDaemonClient::handleMessageNatalimetrySetSession(std::shared_ptr<CLConnectionMessage>)
#Notice Setting calorie session %d %p %p
#Warning Unable to clear activity when session was not previously set.
#Warning Unable to override activity.  Another client has already requested an activity session.
void CLDaemonClient::handleMessageWorkoutStart(std::shared_ptr<CLConnectionMessage>)
Workout, Duplicate START, %@, %s, %d, %p
Workout, STARTING, %@, %s, %d, %p
Unable to start workout, another client has an active workout.
void CLDaemonClient::handleMessageWorkoutStop(std::shared_ptr<CLConnectionMessage>)
No active workouts to stop, requested, %@, %p, %p
Workout, STOPPING, %@, %p, %p
void CLDaemonClient::handleRequestWorkoutEvent(bool, const CLNameValuePair &)
Workout, event subscription changed, %d, %s, %d, %p
void CLDaemonClient::handleMessageSetWorkoutTimeout(std::shared_ptr<CLConnectionMessage>)
No active workouts to set a timeout for!
Workout, setting workout timeout %f.
void CLDaemonClient::handleMessageNatalimetryCalibrationPromptsNeeded(std::shared_ptr<CLConnectionMessage>)
Calibration prompt, isConnectedToCompanion: %d, promptsNeeded: %ld.
void CLDaemonClient::handleMessageNatalimetryResetCalibration(std::shared_ptr<CLConnectionMessage>)
Resetting calibration.
void CLDaemonClient::handleMessageNatalimetryResetCalibration(std::shared_ptr<CLConnectionMessage>)_block_invoke
#Notice Calibrations were successfully cleared.
void CLDaemonClient::handleRequestExerciseMinuteUpdate(bool, const CLNameValuePair &)
ExerciseMinute, Subscription changed, %s, %d, %p, %d
void CLDaemonClient::handleMessageExerciseMinuteQuery(std::shared_ptr<CLConnectionMessage>)
ExerciseMinute, Error in query request.
CLDaemonClient.ExerciseMinuteQuery
ExerciseMinute, Error query response, %{public}d, %s, %d, %p
void CLDaemonClient::handleRequestSwimDataUpdate(bool, const CLNameValuePair &)
SwimData subscription changed, %s, %d, %p, %d
#Warning Failed to subscribe to swim updates.
void CLDaemonClient::handleMessageSwimDataQuery(std::shared_ptr<CLConnectionMessage>)
Programmer error: Wrong parameters were passed.
CLDaemonClient.SwimNotifierQuery
void CLDaemonClient::handleMessageSwimDataQuery(std::shared_ptr<CLConnectionMessage>)_block_invoke
Query: id, %llu, session, %s, db, %s, Response (numel): %lu
void CLDaemonClient::handleRequestSignificantElevationUpdate(bool, const CLNameValuePair &)
SignificantElevation subscription changed, %s, %d, %p, %d
#Warning Failed to subscribe to significant elevation updates.
void CLDaemonClient::handleMessageSignificantElevationDeltaQuery(std::shared_ptr<CLConnectionMessage>)
CLDaemonClient.OdometerNotifier.SignificantElevationDeltaQuery
v16@?0@"CMSignificantElevationSample"8
void CLDaemonClient::handleMessageHasRunMiniCal(std::shared_ptr<CLConnectionMessage>)
bool CLDaemonClient::isEntitledToProvideCatherine()
Client %{public}s does not have appropriate entitlement to access catherine provider SPI
void CLDaemonClient::handleMessageCatherineData(std::shared_ptr<CLConnectionMessage>)
kCLConnectionMessageCatherineDataKey
#Warning Packet contains nil catherine data
v16@?0^{CLCatherineNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{CLBodyMetrics=iffffffffif}@B{unique_ptr<CLNatalimetryNotifier_Type::Client, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >={__compressed_pair<CLNatalimetryNotifier_Type::Client *, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >=^{Client}}}}8
bool CLDaemonClient::isEntitledForMiniCal()
#Warning Client %s does not have appropriate entitlement to run miniCal
void CLDaemonClient::handleMessageStartMiniCal(std::shared_ptr<CLConnectionMessage>)
v16@?0^{CLSensorRecorderNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{CLSensorRecorderDb=^^?{auto_ptr<CLSqliteDatabase>=^{CLSqliteDatabase}}*{BasicMutex=^^?^{MutexInfo}}B{deque<CLSensorRecorderDataPacket, std::__1::allocator<CLSensorRecorderDataPacket> >={__split_buffer<CLSensorRecorderDataPacket *, std::__1::allocator<CLSensorRecorderDataPacket *> >=^^{CLSensorRecorderDataPacket}^^{CLSensorRecorderDataPacket}^^{CLSensorRecorderDataPacket}{__compressed_pair<CLSensorRecorderDataPacket **, std::__1::allocator<CLSensorRecorderDataPacket *> >=^^{CLSensorRecorderDataPacket}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLSensorRecorderDataPacket> >=Q}}ifi{CLSensorRecorderDataPacket=dQI{shared_ptr<unsigned char>=*^{__shared_weak_count}}}i@{NoDataProtectionPolicy=}i{list<CLSensorRecorderDataPacket, std::__1::allocator<CLSensorRecorderDataPacket> >={__list_node_base<CLSensorRecorderDataPacket, void *>=^{__list_node_base<CLSensorRecorderDataPacket, void *>}^{__list_node_base<CLSensorRecorderDataPacket, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLSensorRecorderDataPacket, void *> > >=Q}}Qi{__list_iterator<CLSensorRecorderDataPacket, void *>=^{__list_node_base<CLSensorRecorderDataPacket, void *>}}i{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}{CLSensorRecorderDb=^^?{auto_ptr<CLSqliteDatabase>=^{CLSqliteDatabase}}*{BasicMutex=^^?^{MutexInfo}}B{deque<CLSensorRecorderDataPacket, std::__1::allocator<CLSensorRecorderDataPacket> >={__split_buffer<CLSensorRecorderDataPacket *, std::__1::allocator<CLSensorRecorderDataPacket *> >=^^{CLSensorRecorderDataPacket}^^{CLSensorRecorderDataPacket}^^{CLSensorRecorderDataPacket}{__compressed_pair<CLSensorRecorderDataPacket **, std::__1::allocator<CLSensorRecorderDataPacket *> >=^^{CLSensorRecorderDataPacket}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLSensorRecorderDataPacket> >=Q}}ifi{CLSensorRecorderDataPacket=dQI{shared_ptr<unsigned char>=*^{__shared_weak_count}}}i@{NoDataProtectionPolicy=}i{list<CLSensorRecorderDataPacket, std::__1::allocator<CLSensorRecorderDataPacket> >={__list_node_base<CLSensorRecorderDataPacket, void *>=^{__list_node_base<CLSensorRecorderDataPacket, void *>}^{__list_node_base<CLSensorRecorderDataPacket, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLSensorRecorderDataPacket, void *> > >=Q}}Qi{__list_iterator<CLSensorRecorderDataPacket, void *>=^{__list_node_base<CLSensorRecorderDataPacket, void *>}}i{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}@@{vector<std::__1::vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> >, std::__1::allocator<std::__1::vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> > > >=^{vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> >}^{vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> >}{__compressed_pair<std::__1::vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> > *, std::__1::allocator<std::__1::vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> > > >=^{vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> >}}}ddddddiIiIBBB{unique_ptr<CLFitnessTrackingNotifier_Type::Client, std::__1::default_delete<CLFitnessTrackingNotifier_Type::Client> >={__compressed_pair<CLFitnessTrackingNotifier_Type::Client *, std::__1::default_delete<CLFitnessTrackingNotifier_Type::Client> >=^{Client}}}B{unique_ptr<CLDarwinNotifier_Type::Client, std::__1::default_delete<CLDarwinNotifier_Type::Client> >={__compressed_pair<CLDarwinNotifier_Type::Client *, std::__1::default_delete<CLDarwinNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLMotionState_Type::Client, std::__1::default_delete<CLMotionState_Type::Client> >={__compressed_pair<CLMotionState_Type::Client *, std::__1::default_delete<CLMotionState_Type::Client> >=^{Client}}}^{CLPersistentTimer}}8
void CLDaemonClient::handleMessageSensorRecorderGetMetasByDateRange(std::shared_ptr<CLConnectionMessage>)_block_invoke
(%f, %f), %d records returned
void CLDaemonClient::handleMessageSensorRecorderGetDataByID(std::shared_ptr<CLConnectionMessage>)
Allocating mmap buffer.
CLDaemonClient.SensorRecorderAccel
void CLDaemonClient::handleMessageSensorRecorderGetDataByID(std::shared_ptr<CLConnectionMessage>)_block_invoke
Requesting id, %llu, meta id, %llu
void CLDaemonClient::handleMessageSetUrgentCalFlag(std::shared_ptr<CLConnectionMessage>)
void CLDaemonClient::handleMessageCaptureMode(std::shared_ptr<CLConnectionMessage>)
[CaptureMode], Wrong parameters were passed!
v16@?0^{CLFallNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB@@B{CLPowerAssertion=^^?i^v^{__CFString}dd@}^{Dispatcher}{unique_ptr<CLAppMonitor_Type::Client, std::__1::default_delete<CLAppMonitor_Type::Client> >={__compressed_pair<CLAppMonitor_Type::Client *, std::__1::default_delete<CLAppMonitor_Type::Client> >=^{Client}}}{unique_ptr<CLCatherineNotifier_Type::Client, std::__1::default_delete<CLCatherineNotifier_Type::Client> >={__compressed_pair<CLCatherineNotifier_Type::Client *, std::__1::default_delete<CLCatherineNotifier_Type::Client> >=^{Client}}}}8
fatEgg
v16@?0@"NSString"8
kCLConnectionMessageHeadingFilterKey
void CLDaemonClient::handleRequestHeading(bool, const CLNameValuePair &)
client '%s' subscribing to compass filter %.2f
client '%s' unsubscribing from compass
kCLConnectionMessageSLCDistanceKey
kCLConnectionMessageSLCPowerBudgetKey
void CLDaemonClient::handleRequestSignificantLocationChange(bool, const CLNameValuePair &)
client '%{public}s' unsubscribing from significant location change notifications (persistent %{public}d)
#Notice client '%{public}s' stopping significant location changes
kCLConnectionMessageSignificantLocationVisitTypeKey
bool CLDaemonClient::isEntitledForVehicleData()
#Warning Client %s does not have appropriate entitlement to access vehicle data SPI
void CLDaemonClient::handleRequestVehicleSpeed(bool, const CLNameValuePair &)
Received VehicleSpeed request,client,%s,subscribe,%d
client '%s' subscribing to vehicle speed
client '%s' unsubscribing from vehicle speed
void CLDaemonClient::handleRequestVehicleHeading(bool, const CLNameValuePair &)
Received VehicleHeading request,client,%s,subscribe,%d
client '%s' subscribing to vehicle heading
client '%s' unsubscribing from vehicle heading
bool CLDaemonClient::isEntitledForMicroLocations()
#Warning Client %s does not have appropriate entitlement to access MicroLocation SPI
void CLDaemonClient::handleRequestMicroLocation(bool, const CLNameValuePair &)
Received MicroLocation request,client,%{public}s,subscribe,%{public}d
MicroLocations are not available on this platform. %s
kCLConnectionMessageLOIIdentifierKey
No LOI identifier sent. Unable to start updating microlocations
client '%{public}s' subscribing to MicroLocations for LOI: %{public}s
client '%{public}s' unsubscribing from MicroLocations
void CLDaemonClient::handleMessageRequestCurrentMicroLocation(std::shared_ptr<CLConnectionMessage>)
Received Current MicroLocation request from client '%{public}s'
MicroLocations are not available on this platform. %{public}s
fRegistrationResult == fClientManager->getClientEffectiveRegistrationResult(getClientName())
void CLDaemonClient::startMicroLocationMode(NSString *)
Client '%{public}s' not authorized for microlocation notifications
Client '%{public}s' registered for MicroLocation notifications for LOI: %{public}s
void CLDaemonClient::stopMicroLocationMode()
Client '%{public}s' unregistered from MicroLocation notifications
CLDC.%p.%s
!isClientSideAssertionObject()
bool CLDaemonClient::modifySubscription(const char *const, bool)
Client %{public}s (%{public}p) is %{public}ssubscribing to notification %{public}s
kCLConnectionMessageAuthorizationStatus
kCLConnectionMessageRegionMonitoringError
kCLConnectionMessageRegionMonitoringResponseDelayed
kCLConnectionMessageRegionMonitoringSetupCompleted
kCLConnectionMessageRangingError
kCLConnectionMessagePeerRangingRequestProcessed
kCLConnectionMessagePeerRangingError
kCLConnectionMessageAutopauseStatus
void CLDaemonClient::startRanging_nl()
client '%s' has an incomplete registration result; not starting ranging yet
missing client '%{public}s' is attempting to start ranging updates
client '%s' not authorized for ranging; not starting yet
Starting ranging for regions,%lu.
iB: start metric session (BeaconRangingSession) for %s
iB: update ranged regions (BeaconRangingSession) for %s
#Warning There are no regions to range.
void CLDaemonClient::stopRanging_nl()
Stopping ranging.
void CLDaemonClient::startLocation_nl()
client '%{public}s' has an incomplete registration result; not starting location yet
missing client '%{public}s' is attempting to start location updates
client '%{public}s' not authorized for location; not starting yet
Client '%{public}s' paused, not starting location
client '%{public}s' authorized for location; starting now
client '%{public}s' authorized for location; starting now, desiredAccuracy, %{public}.1lf, distanceFilter, %{public}.1lf, operatingMode %{public}d, dynamicAccuracyReductionEnabled %{public}d, allowsAlteredAccessoryLocations %{public}d
@ClxClient, register, %{public}s, accuracy, %{public}.1lf
@WsbReg, DaemonOpportunistic, %{public}s
@WsbReg, DaemonActive, %{public}s
Not registering for location updates for %{public}s; the planets don't align
Not registering for location updates for %{public}s; desiredAccuracy is too high
BATCH: stop because accuracy changed %s
register for notification, %d, %s, desiredAccuracy, %.1f
BATCH: stop because distance filtered %s
starting metric session (LocationUpdateSession) for %s
void CLDaemonClient::startLocation_nl()_block_invoke
received location system state of LocationUpdateSession for %s
void CLDaemonClient::stopLocation_nl()
BATCH: stop because stopping location for %s
void CLDaemonClient::registerForAutopause()
Client %s registered for autopause notifications
'%{public}s' failed to become client of CLAutopauseProvider
void CLDaemonClient::unregisterForAutopause()
PAUSE: Client '%s' unregistered for autopause notifications
#Warning PAUSE: Unregistering for autopause notification when client '%s' does not exist
void CLDaemonClient::checkPauseState()
PAUSE: '%s' not a location client (%d), or not authorized (%d).
PAUSE: '%s' overridden to off.
PAUSE: '%s' not allowed to pause.
PAUSE: '%s' not backgrounded right now (%.1f).
PAUSE: now clock %f timestamp %f thresh %f.
PAUSE: client: '%s' type: %ld states: veh %d fit %d oth %d
PAUSE: '%s' not changing state wasPaused: %d lastState: %d now clock: %f timestamp: %f thresh: %f.
PAUSE: %s (%p) changed from %d to %d
PAUSE: Pausing client '%s'
PAUSE: Resuming client '%{public}s' (This should be handled on framework side)
void CLDaemonClient::performProcessAssertion(CLClientProcessAssertionReasons)
initializing process assertion to support background location for client '%s' (pid %u)
Couldn't initialize process assertion for client '%{public}s' (pid %{public}u)!
Client,%s, pid,%u, is performing batch location, allowing idle sleep.
#Warning Client,%s, pid,%u, is performing batch without location.
Client,%s, pid,%u, is not performing batch location, preventing task suspend.
void CLDaemonClient::releaseProcessAssertion(CLClientProcessAssertionReasons)
void CLDaemonClient::releaseProcessAssertion(CLClientProcessAssertionReasons)_block_invoke
Releasing process assertion for pid %u
Acquiring
void CLDaemonClient::updateVisibilityAssertion()
Creation of status bar assertion failed synchronously for %{public}s (PID:%{public}d)
Acquire Failed
void CLDaemonClient::updateVisibilityAssertion()_block_invoke
Completed async acquire of status bar assertion for %{public}s (PID:%{public}d)
Failed async acquire of status bar assertion for %{public}s (PID:%{public}d)
oldValue == nullptr
#visibility Completing async release of visibility assertion for %{public}s (PID:%{public}d, ptr:%p)
#visibility For %s (PID:%d)  Background:%s  Started:%s  Qualified:%s > Needed:%s  Action:%s
bool CLDaemonClient::mayTakeProcessAssertion()
Allowing process assertion for %s in foreground.
Allowing process assertion for %s because they are in use.
Allowing process assertion for %s due to client manager.
#Warning Denying process assertion to %s
void CLDaemonClient::startProactiveCompass()
Scheduling proactive compass start for client '%{public}s' with delay %{public}.2f
void CLDaemonClient::startProactiveCompassForReal()
Starting compass proactively for client '%{public}s'
void CLDaemonClient::startProactiveCompassForReal()_block_invoke
Proactive compass timer fired
void CLDaemonClient::stopProactiveCompass()
Stopped proactive compass timer for client '%{public}s'
Stopped proactive compass for client '%{public}s'
void CLDaemonClient::setBatching_nl(const bool)
BATCH: client, '%s', batchEnabled, %d
NSData *CLRangingPeerInternal::getSecureRangingKeyID() const
WRTT: No key when retrieving data
[key length] == kCLMaxNumberOfBytesInSecureKey
CLRangingPeerInternal::CLRangingPeerInternal(uint64_t, NSData *, int)
WRTT: peer without a key
secondaryKey
TileId(
type=
, typeStr=
, corner=(
, tileY=
, tileX=
, skey=
, path=
isValid()
o.isValid()
std::string TileId::getServerFileName() const
TmmFile, name, path, %s, servername, %s
kern_return_t get_serialized_nvp(CLNameValuePair *, cl_property_list_data_t *, mach_msg_type_number_t *)
Could not serialize data
TB,R,N,GisValid
provider
T^{CLBundleLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBBBB^{__CLClient}^{__CLClient}^{__CLClient}^{__CFString}^{__CFString}@B},R,N,V_provider
CLBundleLocationProvider::CLBundleLocationProvider(const char *, id<CLIntersiloUniverse>, CFStringRef, CFStringRef)
#BLP attempting to create bundle location provider with NULL bundle path and NULL bundle identifier
#BLP bundle path does not exist, %{public}s
#BLP no application installed backed by bundle identifier, %{public}s
CLClientRef CLBundleLocationProvider::createClient()
BLP: Need a bundle path or a bundle identifier.
CLClientRef CLBundleLocationProvider::createClient()_block_invoke
BLP: Couldn't create client for bundle path %{public}s
void CLBundleLocationProvider::registerForAppropriateLocationAccuracy()
BLP: Registering with desired accuracy %d (%s)
BLP: Location distance filter is now %.2f (%s)
BLP: Stopping location updates (%s)
#Warning BLP: CLBundleLocationProvider does not support spectators (%s)
BLP: Bystander distance filter is now %.2f (%s)
BLP: Stopping bystander location updates (%s)
@WsbReg, bundleId, %{public}s, active, %{public}d, clients, %{public}ld
BLP: starting wifi location batch, bundleId, %s
BLP: stopping wifi location batch, bundleId, %s
void CLBundleLocationProvider::handleClientEvent(CLClientRef, CLClientEvent)
#Warning Could not get location from location event (%s)
#Warning BLP: Could not get authorization status (%s)
LocationCount
CLTypeAuthorizationStatus CLBundleLocationProvider::authorizationStatus()
BLP: Couldn't retrieve authorization status for %{public}s
bool CLBundleLocationProvider::retrieveLocation(CLDaemonLocation *)
#Warning BLP: Couldn't retrieve location for %s
bundleIdentifier, %@, bundlePath, %@
B24@?0@"RTLocationOfInterest"8r^{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}16
v32@?0@"RTLocationOfInterest"8Q16^B24
T@"CLSilo",&,N,V_silo
seedLocationsAtIndex
T@"NSMutableDictionary",&,N,V_seedLocationsAtIndex
wifi_tile_([0-9]{7})_([0-9]{7})
WIFI_TILES_DATABASE
static std::string CLWifiTileTableName::getTableName(std::tuple<int, int>)
tile x bound violation
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Daemon/Positioning/Network/CLWifiTileDatabase.mm
tile y bound violation
wifi_tile_%07d_%07d
CLWifiTileRepository::CLWifiTileRepository(const std::string &)
not connected to wifi #tile tables database
std::unique_ptr<CLSqliteDatabase> CLWifiTileRepository::openConnection(const CLSqliteDatabase::SqliteProperties &)
bool CLWifiTileRepository::tileExists(const CLWifiTileTableName &) const
bool CLWifiTileRepository::deleteTile(const CLWifiTileTableName &)
int CLWifiTileRepository::countAccessPointsInTile(const CLWifiTileTableName &)
bool CLWifiTileRepository::createTableForTile(const CLWifiTileTableName &)
CL::optional<CLWifiAccessPointInserter> CLWifiTileRepository::accessPointInserter(const CLWifiTileTableName &)
CL::optional<CLWifiTileAccessPointEntry> CLWifiTileRepository::selectAccessPointEntry(const CLWifiTileTableName &, CLMacAddress)
std::vector<CLWifiTileTableName> CLWifiTileRepository::selectAll() const
SELECT NAME FROM sqlite_master WHERE type='table' AND name LIKE 'wifi_tile_%'
MacAddress
AccessPointData
fDatabase && fStatement && fStatement->getStatement()
CLConnectionServer::CLConnectionServer(std::string, dispatch_queue_t, CLConnectionServerConnectHandler, CLConnectionServerDisconnectHandler)
Couldn't create XPC service
void CLConnectionServer::handleEvent(xpc_object_t)
Got error: %{public}s
Unexpected event type %{public}s
XPC_TYPE_CONNECTION
XPC_TYPE_NULL
XPC_TYPE_BOOL
XPC_TYPE_INT64
XPC_TYPE_UINT64
XPC_TYPE_DOUBLE
XPC_TYPE_DATE
XPC_TYPE_DATA
XPC_TYPE_STRING
XPC_TYPE_UUID
XPC_TYPE_FD
XPC_TYPE_SHMEM
XPC_TYPE_ARRAY
XPC_TYPE_DICTIONARY
XPC_TYPE_ERROR
Unknown type
CLFitnessTrackingAllDayAWD
CLSimulationControllerSilo
T^{CLSimulationController={BasicMutex=^^?^{MutexInfo}}@@@@@@@{list<CLDaemonLocation, std::__1::allocator<CLDaemonLocation> >={__list_node_base<CLDaemonLocation, void *>=^{__list_node_base<CLDaemonLocation, void *>}^{__list_node_base<CLDaemonLocation, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLDaemonLocation, void *> > >=Q}}Bd{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}^{__CFRunLoopTimer}dddddii^{__CFURL}},N,V_controller
SimulationController
SimulatedLocationLatitude
SimulatedLocationLongitude
SimulatedLocationAccuracy
SimulatedLocationType
SimulatedLocationAltitude
SimulatedLocationAltitudeAccuracy
CLSimulationController::CLSimulationController(id<CLIntersiloUniverse>)
Using simulated location <%+.8f,%+.8f> acc %.2f alt %.1f vacc. %.2f type %d
CLGnssProvider
void CLSimulationController::startScenarioInternal_nl()
Attempt to start scenario, but no scenario is loaded!
Couldn't set simulation scenario
Couldn't parse simulation scenario data
Locations
Options
Couldn't get locations array for simulation scenario
Applying new simulation scenario with %ld locations
Location %{public}d for simulation scenario is of incorrect format
Location %{public}d for simulation scenario is of incorrect type (%{public}s)
Simulation-Received
Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Type,%d,%s,Speed,%.2f,Course,%.2f,Confidence,%d,Lifespan,%.3f,LocationTimestamp,%.3f,Age,%.3f,
LocationDeliveryBehavior
LocationRepeatBehavior
LocationInterval
LocationSpeed
LocationIntermediateDistance
Setting simulation type to %d
Setting repeat behaviour to %d
Setting location interval to %.2f
Setting location speed to %.2f
Setting intermediate distance to %.2f
void CLSimulationController::sendFirstLocation_nl()
fNextLocation is <%+.8f,%+.8f> acc %.2f timestamp %.2f
Time delta is %.2fs
void CLSimulationController::startSimulation()
Simulation start request received
void CLSimulationController::stopSimulation()
Simulation stop request received
void CLSimulationController::setSimulationType(CLSimulationDaemonCommLocationSimulationType)
Simulation type changed from %d to %d
void CLSimulationController::setRepeatBehavior(CLSimulationDaemonCommLocationRepeatBehavior)
Repeat behaviour changed from %d to %d
void CLSimulationController::setIntermediateLocationDistance(const double &)
Intermediate distance changed from %.2f to %.2f
void CLSimulationController::setLocationInterval(const CFTimeInterval &)
Interval changed from %.2f to %.2f
void CLSimulationController::setTravellingSpeed(const double &)
Travelling speed changed from %.2f to %.2f
double CLSimulationController::getEffectiveNotificationInterval_nl()
interval = %.2f, fNextLocation.timestamp = %.2f, time = %.2f
void CLSimulationController::clearPendingLocationsInternal_nl(bool)
Clearing all pending locations and settings
void CLSimulationController::prepareNextLocation_nl()
Preparing next location
No more pending locations
void CLSimulationController::handleNoMoreLocations_nl()
Scheduling send of location unavailable notification
void CLSimulationController::handleNoMoreLocations_nl()_block_invoke
Sending appropriate location unavailable notification
Repeat location behavior selected; repeating last location
Looping repeat behavior selected; starting scenario again
void CLSimulationController::sendNextLocation()
Simulation is not running
Nowhere to go; not preparing next location
Adjusting next location timestamp (%.2f) forward by %.2fs
snl: fNextLocation is <%+.8f,%+.8f> acc %.2f timestamp %.2f
snl: fCurrentLocation is <%+.8f,%+.8f> acc %.2f timestamp %.2f
snl: speed is %.2f, timeElapsed = %.2f
distance is %.2f
Reached location <%+.8f,%+.8f>, preparing next
Next location is <%+.8f,%+.8f>
Propogating <%+.8f,%+.8f> acc %.2f for %.2f seconds at %.2f m/s course %.2f
Notify location is %+.8f,%+.8f (speed %.2f, course %.2f, timestamp %.2f)
Notifying in %.2f seconds
void CLSimulationController::notifySimulatedLocation_nl(const CLDaemonLocation &)
Unknown simulation type %{public}d
#Warning No location provider found for <%+.8f,%+.8f> acc %.2f timestamp %.2f type %d
Sent simulated location to service %@
CLMotionSyncStoreCompanion::CLMotionSyncStoreCompanion(id<CLIntersiloUniverse>)
CLMotionSyncStoreCompanion::CLMotionSyncStoreCompanion(id<CLIntersiloUniverse>)_block_invoke
Timer fired on companion,currentMotionCalsVersion,%d
user
void CLMotionSyncStoreCompanion::onPalUpdateNotification(int, const CLNatalimetryNotifier_Type::Notification &, const CLNatalimetryNotifier_Type::NotificationData &)
void CLMotionSyncStoreCompanion::onCompanionNotification(int, const CLCompanionNotifier_Type::Notification &, const CLCompanionNotifier_Type::NotificationData &)
void CLMotionSyncStoreCompanion::sendMotionCalsToWatch()
Phone converted RawSpeedToKValueTable to StrideCalibrationBins to comply with Watch (Major:%d Minor:%d).
Companion sent calibrations to watch: %s
virtual void CLMotionSyncStoreCompanion::deviceUnlocked()
Device is now unlocked.
void CLMotionSyncStoreCompanion::restoreBackupMotionCals()
Clearing a stale vo2max of 0 value.
Loaded Motion Cals from backup: fMotionCals, %s, current version, %d
No motion cal backup file was found at path: %s. Restore PAL.
void CLMotionSyncStoreCompanion::doRestoreBackupMotionCals(const CLMotionSyncStoreCompanion::EDeviceUnlocked *)
restoring backup motion cals
void CLMotionSyncStoreCompanion::doConnected(const CLMotionSyncStoreCompanion::EWatchConnected *)
quickswitch protocol %d
void CLMotionSyncStoreCompanion::doUpdatePAL(const CLMotionSyncStoreCompanion::EPalUpdated *)
PAL is updated from %f to %f
PAL not loaded or changed.
void CLMotionSyncStoreCompanion::doRestoreBackupArbitrate(const CLMotionSyncStoreCompanion::EDeviceUnlocked *)
Restore & Arbitrate
void CLMotionSyncStoreCompanion::doBufferMotionCalsFromWatch(const CLMotionSyncStoreCompanion::ECalibrationFromWatch *)
processing motion cals received from watch
void CLMotionSyncStoreCompanion::doDisconnected(const CLMotionSyncStoreCompanion::EWatchDisconnected *)
void CLMotionSyncStoreCompanion::doArbitrateMotionCals(const CLMotionSyncStoreCompanion::ECalibrationFromWatch *)
arbitration
void CLMotionSyncStoreCompanion::restoreBackupPal()
restore pal
Loaded Motion Cals from PAL: fMotionCals, %s, current version, %d.
void CLMotionSyncStoreCompanion::persistCachedValues()
Asked to persist Motion Cals, current version, %d, isDeviceCurrentlyUnlocked, %d
Companion did not persist Motion Cals, waiting until next unlock, current version, %d, isDeviceCurrentlyUnlocked, %d
Companion persisted calibrations to disk, fMotionCals = %s
virtual void CLMotionSyncStoreCompanion::receiveMotionCals(NSDictionary *)
Companion received calibrations from watch: %s
void CLMotionSyncStoreCompanion::clearMotionCalibrations()
clearing motion calibrations
#Warning Failed to retreive default raw speed to kValue bins.
#Warning Failed to retreive default step cadence to stride length bins.
CLMotionSyncStoreCompanion::ArbitrateResult CLMotionSyncStoreCompanion::arbitrateMotionCals(NSDictionary *, NSDictionary *) const
Buffered: version, %d, UDID, %s, timestamp, %lf, Current: version, %d, UDID, %s, timestamp, %lf, result, %d
void CLMotionSyncStoreCompanion::scheduleFastSendToWatch()
Scheduled send to watch.
user.plist
-[CLStepDistanceEstimator updateEntryDistanceAndPace:]
#Warning Step count went backwards (%u -> %u). locationd starting? Motion Co-processor reboot?
startTime,%f,timestamp,%f,firstStepTime,%f,lastStepTime,%f,stepsDelta,%u,calibratedDistanceDelta,%f,calibratedPace,%f,rawStrideLength,%f,activeTimeDelta,%f,rawPaceCurrent,%f,rawPaceActive,%f,rawPaceDidJump,%d,stepCadenceCurrent,%f,stepCadenceActive,%f,kValue,%f,pedometerArmConstrainedState,%d,strideLengthFromStepCadence,%f,useStrideLengthFromStepCadence,%d
CLBluetoothServiceSilo
CLBluetoothService
CLBluetoothService::CLBluetoothService(id<CLIntersiloUniverse>)
could not create dpc source
virtual void CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLBluetoothService_Type::Notification, NotificationData_T = CLBluetoothService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLBluetoothService_Type::Notification, NotificationData_T = CLBluetoothService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLBluetoothService_Type::Notification, NotificationData_T = CLBluetoothService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLBluetoothService_Type::Notification, NotificationData_T = CLBluetoothService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLBluetoothService_Type::Notification, NotificationData_T = CLBluetoothService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLBluetoothService_Type::Notification, NotificationData_T = CLBluetoothService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::listClients() [Notification_T = CLBluetoothService_Type::Notification, NotificationData_T = CLBluetoothService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
kCMPedometerDataCodingKeyStartDate
kCMPedometerDataCodingKeyEndDate
kCMPedometerDataCodingKeyNumberOfSteps
kCMPedometerDataCodingKeyDistance
kCMPedometerDataCodingKeyFloorAscended
kCMPedometerDataCodingKeyFloorDescended
kCMPedometerDataCodingKeyRecordId
kCMPedometerDataCodingKeyPace
kCMPedometerDataCodingKeyCurrentCadence
kCMPedometerDataCodingKeyActiveTime
kCMPedometerDatacodingKeyUUID
kCMPedometerDataCodingKeyIsOdometerDistance
kCMPedometerDataCodingKeyIsOdometerPace
kCMPedometerDataCodingKeyNumberOfPushes
kCMPedometerDataCodingKeyWorkoutType
%@,<startDate %@ endDate %@ steps %@ distance %@ floorsAscended %@ floorsDescended %@ currentPace %@ currentCadence %@ averageActivePace %@>
sourceId
T@"NSUUID",R,N
numberOfPushes
T@"NSNumber",R,N
workoutType
numberOfSteps
currentPace
currentCadence
averageActivePace
kCMPedometerEventKeyEventDate
kCMPedometerEventKeyEventType
Pause
Resume
%@,<eventDate, %@, eventType, %@>
date
T@"NSDate",R,N,VfDate
Tq,R,N,VfType
CLSensorFusion9AxisMekf::CLSensorFusion9AxisMekf(const CFTimeInterval &, const CFTimeInterval &, const CFTimeInterval &, bool)
rotBufferSize9, %zu, accelBufferSize, %zuu, peakCount, %d, compassBufferSize, %zu
gyroDt9, %.4f, doAccelCheck, %d
virtual void CLSensorFusion9AxisMekf::reset()
fAccelBuffer,size,%zu
virtual void CLSensorFusion9AxisMekf::feedGyroData(const double &, const double &, const double &, const CFTimeInterval &)
omegaMag9, %.3f, omega, %.3f, %.3f, %.3f
[AppleQuaternion9] x,%f,y,%f,z,%f,w,%f,timestamp,%f
virtual void CLSensorFusion9AxisMekf::feedGyroBias(const CLMotionTypeRotationRate &, const CLMotionTypeVector3 &)
virtual void CLSensorFusion9AxisMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)
[Accelerometer9] x,%f,y,%f,z,%f,timestamp,%lf
[RotationRate9] %.3f, %.3f, %.3f, %.3f
[KalmanFilterStates9] %f,%f,%f,%f,%f,%f,%f
void CLSensorFusion9AxisMekf::doAccelerometerMeasurementUpdate(double *, double)
[KalmanFilterStates9-AccelUpdate] %f,%f,%f,%f,%f,%f,%f
virtual bool CLSensorFusion9AxisMekf::feedCompassData(const CLMotionTypeCompass &, const bool &, const bool &, const CFTimeInterval &)
[CompassIntoKF] timestamp,%f,calibration level %d, compassHasAlignedToStableField %d, useMagneticRefX %d
[CompassIntoKF] fLastAccelTime,%f
[CompassIntoKF] magneticFieldAdjusted!
rotAroundGrav, %.3f, sum, %.3f
[CompassIntoKF] omegaMag, %.3f, omegaVar, %.3f
FieldDiff, %.3f, %.3f, %.3f, %.3f
Aborted yawUpdate.
Checking again for magField. checkcount, %d
fCorrected, %.3f, %.3f, %.3f
[!!!CompassInertialReference] x,%f,y,%f,z,%f,calibrationLevel,%d,timestamp,%lf
Warning: Compass outputs field magnitude 0.
[!!!CompassInertialReference] x,%f,y,%f,z,%f
UpdatingYaw!
[Magnetometer9] x,%f,y,%f,z,%f,timestamp,%lf
Warning: Hey! Compass outputs field magnitude 0.
float CLSensorFusion9AxisMekf::doCompassMeasurementUpdate(double *, double, int, bool)
[ExpectedCompass] %f,%f,%f,%f
[TrueCompass] %f,%f,%f,%d,%f
[MagCCross] %f,%f,%f,%f,%f,%f,%f,%f,%f,%f
[MagCorrectionDX] %f,%f,%f,angle,%.3f,sumRot,%.3f,%f
entry != input.mostRecentScanEntryForMac.end()
sources
tiles_and_als
als_only
macs.size
notindb
CL::WifiPositioning::Policies::WifiApLookup::Output CL::WifiPositioning::Policies::WifiApLookup::HandleEvent::lookupMacAddresses(const std::unordered_set<CLMacAddress> &, const CLDaemonLocation, CL::WifiPositioning::Policies::WifiApLookup::HandleEvent::Sources) const
WifiAps, aplookup, %{private}s, %{public}s
@WifiAps, lookup, %{public}lu, valid, %{public}lu, invalid, %{public}lu, notInDb, %{public}lu
macsWithValidLocations.size
macsWithNoValidLocation.size
macsNotInLocalTilesOrDatabases.size
macsWithNoValidLocation
macsNotInLocalTilesOrDatabases
unordered_map::at: key not found
LogOnBody
CLOnBodyNotifierSilo
CLOnBodyNotifier
virtual void CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLOnBodyNotifier_Type::Notification, NotificationData_T = CLOnBodyNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLOnBodyNotifier_Type::Notification, NotificationData_T = CLOnBodyNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLOnBodyNotifier_Type::Notification, NotificationData_T = CLOnBodyNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLOnBodyNotifier_Type::Notification, NotificationData_T = CLOnBodyNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLOnBodyNotifier_Type::Notification, NotificationData_T = CLOnBodyNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLOnBodyNotifier_Type::Notification, NotificationData_T = CLOnBodyNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::listClients() [Notification_T = CLOnBodyNotifier_Type::Notification, NotificationData_T = CLOnBodyNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
com.apple.CoreLocation.ConnectionClient.%p
com.apple.CoreLocation.ConnectionClient.%p.events
static void CLConnectionClient::handleDaemonStart(CFNotificationCenterRef, void *, CFStringRef, const void *, CFDictionaryRef)
received daemon start notification for service %s
void CLConnectionClient::createConnection_onQueue()
Creating connection
void CLConnectionClient::destroyConnection_onQueue()
Destroying connection
void CLConnectionClient::sendCachedMessages_onQueue()
#Warning No cached registration message
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Framework/CoreMotion/CMFitnessMachineData.mm
kCMFitnessMachineDataKeyTimestamp
kCMFitnessMachineDataKeyElapsedTime
kCMFitnessMachineDataKeyTotalEnergy
kCMFitnessMachineDataKeyTotalDistance
kCMFitnessMachineDataKeyTotalElevationAscended
kCMFitnessMachineDataKeyTotalStrideCount
kCMFitnessMachineDataKeyTotalStrokeCount
kCMFitnessMachineDataKeyTotalFloorsClimbed
kCMFitnessMachineDataKeyInstantaneousSpeed
kCMFitnessMachineDataKeyInstantaneousCadence
kCMFitnessMachineDataKeyInstantaneousPower
kCMFitnessMachineDataKeyInclination
kCMFitnessMachineDataKeyResistanceLevel
%@, <timestamp, %f, elapsedTime, %f, totalEnergy, %f, totalDistance, %f, totalElevationAscended, %f,  totalStrideCount, %ld, totalStokeCount, %ld,totalFloorsClimbed, %ld, instantaneousSpeed, %f, instantaneousCadence, %f, instantaneousPower, %f, inclination, %f, resistanceLevel, %f>
elapsedTime
Td,N,V_elapsedTime
totalEnergy
Td,N,V_totalEnergy
totalDistance
Td,N,V_totalDistance
totalElevationAscended
Td,N,V_totalElevationAscended
totalStrideCount
Tq,N,V_totalStrideCount
totalStrokeCount
Tq,N,V_totalStrokeCount
totalFloorsClimbed
Tq,N,V_totalFloorsClimbed
instantaneousSpeed
Td,N,V_instantaneousSpeed
instantaneousCadence
Td,N,V_instantaneousCadence
instantaneousPower
Td,N,V_instantaneousPower
inclination
Td,N,V_inclination
resistanceLevel
Td,N,V_resistanceLevel
bool CLDualModeKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &)
KF:Attempting update,type,%{public}d,lat,%{private}.7f,lon,%{private}.7f,hunc,%{public}.1f,conf,%{public}d
KF:Single AP,Dual input rejection,lat,%{private}.7f,lon,%{private}.7f
KF:input should not be rejected after a hard reset
airTravelMode,ltn
KF:Dual rejection,type,%{public}d,lat,%{private}.7f,lon,%{private}.7f,blunder detected
intervalOfInterest,ltn
#Warning,KF:longTermStatic should not fail if longTermNormal succeeded
unexpected,ltn
staticAssumed,lts
notStatic,ltn
bool CLDualModeKalmanFilter::debugPrint(const CLDaemonLocation &, const CLDaemonLocation &, const char *)
KF:Dual,%{public}.3f,%{public}d,%{public}d,%{public}d,%{private}.7f,%{private}.8f,%{private}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}s
KF:calcTPTQ failed
KF:calc_dNdE failed
KF:boundLatitude failed
KF:boundLongitude failed
bool CLKalmanFilter::updateMotion(const CFAbsoluteTime &, const CLMotionActivity::Type &, const CLMotionActivity::Confidence &)
KF:updateMotion failed unexpectedly
KF:Prediction failed
propagation for motion
KF:re-init,uncertainty growth>%{public}.0lf
motion update
activeCellUpdate complete
bool CLKalmanFilter::zupt()
KF:ZUPT failed
KF:ZUPT innovation update failed
KF:updateP failed
zupt, vn update
ZUPT, ve update
bool CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, bool &, bool)
#Warning,KF:update with null island,not allowed
#Warning,KF:input horizontal accuracy == 0. Using horizontalAccuracy = 9999000.0 m
KF:P is not dimensioned
KF:x is not dimensioned
KF:input horizontalAccuracy < 0
lts rejected by distance check
KF:too many consecutive update rejections,KF reset
KF:update with same cell location ignored
KF:increment num rejections by half
KF:re-init,dT>%{public}.0lf
KF:non-GPS within %{public}.1f of GPS,ignoring.
KF:diverged compared to med/high conf WiFi,resetting
KF:seedTheFilter failed
prediction
KF:Transition,coarse GPS to WiFi,hunc bumped,%{public}.1f
KF:computePht_and_hPht failed
KF:sigma2_v <= 0
KF:diverged,%{public}.3lf,reseeding,inputType,%{public}d,lat,v2,%{public}.1lf
KF:reseed,type,%{public}d,%{private}.7lf,%{private}.7lf,%{private}.3lf,hunc,%{public}.1lf,vunc,%{public}.1lf,conf,%{public}d
KF:lt%{public}c,%{public}.3lf,inputType,%{public}d,lat,v2,%{public}.1lf
KF:Input is not consistent with prior input. Filter reseeding.
KF:lat innovation update failed
lat update
KF:sanityTestP failed
KF:diverged,%{public}.3lf,reseeding,inputType,%{public}d,lon,v2,%{public}.1lf
KF:lt%{public}c,%{public}.3lf,inputType,%{public}d,lon,v2,%{public}.1lf
KF:Input is not consistent with prior input,filter reseeding
KF:lon innovation update failed
lon update
KF:lt%{public}c,%{public}.3lf,inputType,%{public}d,vn,v2,%{public}.1lf
KF:vn innovation update failed
vn update
KF:lt%{public}c,%{public}.3lf,inputType,%{public}d,ve,v2,%{public}.1lf
KF:ve innovation update failed
ve update
Applying uncertainty floor to stop averaging
KF:Not applying the uncertainty floor
KF:lt%{public}c,%{public}.3lf,inputType,%{public}d,alt,v2,%.1lf
KF:getResult failed
KF:Filter corrobarated by type,rejects now allowed
KF:Filter corrobarated by position,rejects now allowed
bool CLKalmanFilter::areRejectedLocationsConsistentAndIndependent()
KF:rejected cell and wifi locations are consistent,filter should reset
KF:rejected cell and coarse-gps locations are consistent,filter should reset
KF:rejected wifi and coarse-gps locations are consistent,filter should reset
bool CLKalmanFilter::sanityTestP()
KF:diagonal element of P < 0
bool CLKalmanFilter::getResult(CLDaemonLocation &, bool)
bool CLKalmanFilter::applyInnovation(const double &, const std::vector<double> &, const double &, const double &, std::vector<double> &)
KF:dN == 0
KF:x is not dimensioned, innovation not applied
KF:k is not dimensioned, innovation not applied
bool CLKalmanFilter::boundLatitude(double &)
KF:latRads,%{private}.7f,out of bounds
bool CLKalmanFilter::boundLongitude(double &)
KF:lonRads,%{private}.7f,out of bounds
bool CLKalmanFilter::seedTheFilter(CLDaemonLocation &)
KF:init P failed
bool CLKalmanFilter::computePht_and_hPht(const std::vector<double> &, const unsigned int &, std::vector<double> &, double &)
#Warning,KF:Pht is not dimensioned
KF:h_index exceeds bounds
bool CLKalmanFilter::updateP(std::vector<double> &, std::vector<double> &, const unsigned int &)
#Warning,KF:P is not dimensioned
KF:k is not dimensioned
bool CLKalmanFilter::initP(std::vector<double> &, const double &, const double &)
KF:hunc == 0
KF:speedUnc == 0
#Warning,P was not dimensioned
bool CLKalmanFilter::setQ(const bool &, std::vector<double> &, const CLKalmanFilter::KalmanTuningInfo &, const double &)
KF:dT < 0
KF:tuning invalid
#Warning,KF:Q was not dimensioned
KF:tuning invalid, beta == 0
bool CLKalmanFilter::predictAhead(const CFAbsoluteTime &)
KF:fKalman.dN == 0.0 || fKalman.dE == 0.0
bool CLKalmanFilter::calcTPTQ(const double &, const bool &, std::vector<double> &, std::vector<double> &, const CLKalmanFilter::KalmanTuningInfo &, double &, double &)
#Warning,Q is not dimensioned
KF:beta is zero
KF:setQ failed
#Warning,KF:P is not symmetric
static bool CLKalmanFilter::isLocationTypeNotFiltered(CLLocationType)
unsupported location type,%{public}d
bool CLKalmanFilter::debugPrint(const char *, double)
%%1:KF:,2:lts-or-ltn,3:timestamp(s),4:inType,5:outType,6:motionState,7:latitude(deg),8:longitude(deg),9:altitude(m),10:speed(km/hr),11:course(deg),12:hunc(m),13:vunc(m),14:sunc(m/s),15:cunc(deg),16:v_standardized^2
KF:,lt%{public}c,%{public}.3f,%{public}d,%{public}d,%{public}d,%{private}.7f,%{private}.7f,%{private}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}s
-[CMPedometerTable valueOutForValueIn:]
#Warning bin %lu for valueIn %f invalid
ValueInName,%@,ValueOutName,%@,Bin,%02lu,%@,RetrievedValueOut,%f
-[CMPedometerTable updateBinsWithValueOut:valueIn:alpha:]
binIndex %{public}lu invalid
%s,Updated,With,%s,%0.4f,%s,%0.4f,Alpha,%0.4f,NativeBinIndex,%lu,OldBinStatus,%s,NewBinStatus,%s
com.apple.store.Jolly
Fence, 
, refFrame, 
, distance, 
, eFistance, 
, lStatus, 
, lDown, 
, time, 
, ctime, 
, flags, 
double CLFenceManager_Type::CombinedFence::distanceTo(double, double) const
#Warning Fence: why is this used?, %s, %lf
bool CLFenceManager_Type::CombinedFence::removeFence(const std::string &, const std::string &, const std::string &)
Fence: fence, %s, became empty
southwestLatitude
southwestLongitude
deltaLatitude
deltaLongitude
generationTimestamp
minimum_altitude
maximum_altitude
expiration_age
accessTimestamp
gizmoTimestamp
flags
numberOfInputPoints
com.apple.locationd.vehicle.exit
com.apple.locationd.vehicular.state
com.apple.locationd.vehicular.hints
com.apple.locationd.vehicular.changed
void CLMotionStateObserverWatch::onMotionStateMediatorNotification(int, const CLMotionStateMediator_Type::Notification &, const CLMotionStateMediator_Type::NotificationData &)
#Warning Unhandled notification %d.
void CLMotionStateObserverWatch::stopSessionAndTimer()
Disabling update timer.
void CLMotionStateObserverWatch::sendSessionUpdate()
Sending session update.
virtual void CLMotionStateObserverWatch::handleCompanionNotification(const CLCompanionNotifier_Type::Notification &, const CLCompanionNotifier_Type::NotificationData &)
MotionStateObserver,remote state,startTime,%.3f,type,%d
clientKey
authMask
clearClient
operationType
vectorClocks
-[CLCompanionSyncAuthObject writeTo:]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/External/SyncObjects/CLCompanionSyncAuthObject.m
nil != self->_clientKey
T@"NSString",&,N,V_clientKey
hasAuthMask
TI,N,V_authMask
hasClearClient
TB,N,V_clearClient
hasNotification
Ti,N,V_notification
Ti,N,V_operationType
T@"NSMutableArray",&,N,V_vectorClocks
RESET
UPDATE
DELETE
CLPressureCalibrationDatabaseSilo
CLPressureCalibrationDatabase
PressureCalibration
virtual void CLPressureCalibrationDatabase::startCalibration(bool)
Starting pressure calibration, user initiated, %d
Pressure dispatcher was expected to be null.
fPoints.empty() || fPoints.rbegin()->round >= 0
virtual void CLPressureCalibrationDatabase::endRun()
temperatureOffsetCoefficient,%f,medianAbsoluteDeviation,%f,minTemp,%d,maxTemp,%d,valid,%d
virtual void CLPressureCalibrationDatabase::teardown()
Stopped pressure calibration
SELECT Round, TemperatureOffsetCoefficient, MedianAbsoluteDeviation FROM PressureCalibration WHERE Round IN (SELECT DISTINCT Round FROM PressureCalibration ORDER BY Round DESC LIMIT ?) ORDER BY Round
void CLPressureCalibrationDatabase::loadFromDatabase()
static void CLPressureCalibrationDatabase::readFactoryData(CLMotionTypePressureBiasFit &)
Cannot get PRTT property
PRTT version (%u) does not match expected versions (%u, %u)
factory calibrated temperature from syscfg: %f
Warning: factory calibrated temperature (%f) is not within acceptable bounds: [%f, %f], using default: %f
Warning: using default factory calibrated temperature: %f
DELETE FROM PressureCalibration WHERE Round <= ?
TemperatureOffsetCoefficient
MedianAbsoluteDeviation
fPoints.empty() || fPoints.rbegin()->round < fPendingPoint.round
static bool CLPressureCalibrationDatabase::computeMedianTemperatureOffsetCoefficient(const std::vector<TemperatureOffsetCoefficientRound>, CLMotionTypePressureBiasFit &)
size of tco list (%lu) is less than minimum (%d) required for median computation
void CLPressureCalibrationDatabase::computeTemperatureOffsetCoefficientDrift(const std::vector<TemperatureOffsetCoefficientRound>)
TocMedian,%f,TocDrift,%f,TocDriftMAD,%f,TocCount,%u
void CLPressureCalibrationDatabase::onPressureData(const CLPressure::Sample *)
pressure,%f,temperature,%f,timestamp,%f
pressure-offset-calibration
virtual void CLMotionNotifier::SiloDispatcher<CLPressure::Sample>::dispatchData(int, const void *, size_t) [T = CLPressure::Sample]
getMedianInPlace
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Oscar/CMPressureUtilities.h
size > 0
virtual void CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLPressureCalibrationDatabase_Type::Notification, NotificationData_T = CLPressureCalibrationDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLPressureCalibrationDatabase_Type::Notification, NotificationData_T = CLPressureCalibrationDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLPressureCalibrationDatabase_Type::Notification, NotificationData_T = CLPressureCalibrationDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLPressureCalibrationDatabase_Type::Notification, NotificationData_T = CLPressureCalibrationDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLPressureCalibrationDatabase_Type::Notification, NotificationData_T = CLPressureCalibrationDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLPressureCalibrationDatabase_Type::Notification, NotificationData_T = CLPressureCalibrationDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::listClients() [Notification_T = CLPressureCalibrationDatabase_Type::Notification, NotificationData_T = CLPressureCalibrationDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
CLCapabilityMonitorSilo
-[CLCapabilityMonitor setSupervised:]
supervised capability changed from, %d, to, %d
v32@?0@"ACAccount"8Q16^B24
v24@?0@"ACAccountType"8@"NSError"16
-[CLCapabilityMonitor setICloudManagedAppleID:]
iCloud managed apple ID capability changed from, %d, to, %d
com.apple.education
v32@?0@"MCPayload"8Q16^B24
-[CLCapabilityMonitor setInstalledEducationProfile:]
installed education profile capability changed from, %d, to, %d
-[CLCapabilityMonitor setITunesManagedAppleID:]
iTunes managed apple ID capability changed from, %d, to, %d
-[CLCapabilityMonitor onDarwinNotification:data:]
received unhandled notification, %{public}d
CLNONEDU
CLSupervised
CLNonSupervised
CLInstalledProfileEducation
CLNonManagedAppleID
v24@?0@"<CLCapabilityMonitorClientProtocol>"8^B16
supervised
TB,N,V_supervised
iCloudManagedAppleID
TB,N,V_iCloudManagedAppleID
iTunesManagedAppleID
TB,N,V_iTunesManagedAppleID
installedEducationProfile
TB,N,V_installedEducationProfile
mobileGestaltAnswersCache
T@"NSMutableDictionary",&,N,V_mobileGestaltAnswersCache
capabilityChangeClients
T@"NSMutableSet",&,N,V_capabilityChangeClients
CL::optional<CL::WifiPositioning::Decisions::AlsRequest> CL::WifiPositioning::Policies::AlsQuery::HandleEvent::defaultAlsRequestLogicUsedWhenComputingLocation(const CL::WifiPositioning::Policies::AlsQuery::Input &) const
#alsquery, unknown associated AP
#alsquery, no query, stop criteria met
#alsquery, no query during CPI
#alsquery, number of aps with known locations less than desired, valid, %ld, no_locations, %ld
#alsquery, create_request, %lu, use_cache, %d, query_nearbys, %d
EnableAlwaysOnActivityContext
CLLocationFilterController::CLLocationFilterController(id<CLIntersiloUniverse>)
registered for kNotificationContext
registered for kNotificationContextSpectator
MapMatchingGeometryType
CLMM,MapMatchingGeometryType,%s
CLMM, PlatformSupportsMapMatching, %d
OBM,fPlatformSupportsOutdoorMatching,%d
EnableNMEAMapMatching
CLMM, EnableNMEAMapMatching, %d
EnableVerboseMapMatching
CLMM, EnableVerboseMapMatching, %d
ObmVerboseLogging
PLOS, ObmVerboseLogging, %d
MapMatchingNetworkUsageThermalLevelHighThreshold
CLMM, MapMatchingNetworkUsageThermalLevelHighThreshold, %d
MapMatchingNetworkUsageThermalLevelLowThreshold
CLMM, MapMatchingNetworkUsageThermalLevelLowThreshold, %d
void CLLocationFilterController::onMotionNotification(int, const CLMotionState_Type::Notification &, const CLMotionState_Type::NotificationData &)
#Warning unexpected kNotificationMovementCoarse
Unhandled case
Going to sleep. Not providing motion state, %d, to the location KF
CLMM, MotionState,type,%d,confidence,%d,mountedState,%d,mountedConfidence,%d
OBM, MotionState,type,%d,confidence,%d,mountedState,%d,mountedConfidence,%d
#Warning Unknown notification %d
void CLLocationFilterController::onDaemonStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)
device entering sleep - no longer has active cell
device wake - checking for corresponding sleep
#Warning wake detected with no prior sleep known, sending unknown motion to location KF at time, %.3lf
void CLLocationFilterController::onSignalEnvironmentNotification(int, const CLSignalEnvironmentProvider_Type::Notification &, const CLSignalEnvironmentProvider_Type::NotificationData &)
priorSignalEnvironment,%d,newSignalEnvironment,%d
void CLLocationFilterController::MapMatcherNetworkUsage::log() const
CLMM,AllowNetworkUsage,%d,batterySaverMode,%d,thermalVoteToAllow,%d,signalEnv,%d,isMapsForeground,%d
static void CLWifiFenceCalculator::initStaticGlobals()
FenceCal: init globals
WifiFenceCalculatorDebug
FenceCal: WifiFenceCalculatorDebug =%d
WifiFenceCalculatorDebugVerbose
FenceCal: WifiFenceCalculatorDebugVerbose =%d
WifiFenceCalculatorMinNumAPs
FenceCal: WifiFenceCalculatorMinNumAPs =%d
WifiFenceCalculatorSTDFactorMeters
FenceCal: WifiFenceCalculatorSTDFactorMeters = %5.1lf
WifiFenceCalculatorRadiusFactor
FenceCal: WifiFenceCalculatorRadiusFactor = %5.1lf
WifiFenceCalculatorMaxFenceRadius
FenceCal: WifiFenceCalculatorMaxFenceRadius = %5.1lf
WifiFenceCalculatorMaxChosenAPs
FenceCal: WifiFenceCalculatorMaxChosenAPs = %d
WifiFenceCalculatorMaxApsPerTileFactor
FenceCal: WifiFenceCalculatorMaxApsPerTileFactor = %lf
WifiFenceCalculatorSignificantScoreUpdateThresh
FenceCal: WifiFenceCalculatorSignificantScoreUpdateThresh = %lf
WifiFenceCalculatorGroupWeightForExit
FenceCal: WifiFenceCalculatorGroupWeightForExit = %d
WifiFenceCalculatorMinApsPerFence
FenceCal: WifiFenceCalculatorMinApsPerFence = %d
WifiFenceCalculatorDefaultMaxChannelSetSize
FenceCal: WifiFenceCalculatorDefaultMaxChannelSetSize = %d
WifiFenceCalculatorDefaultChannelFilter
FenceCal: WifiFenceCalculatorDefaultChannelFilter = %d
WifiFenceCalculatorAPsScoreFilter
FenceCal: WifiFenceCalculatorAPsScoreFilter = %d
FenceCal: gBlackListedAP = %s
FenceCal: init globals - done
CLWifiFenceCalculator::CLWifiFenceCalculator(unsigned int, int)
FenceCal: fMaxChannelSetSize, %d, kMaxChannel, %d, fChannelFilter, 0x%X, fDefaultChannelFilter, 0x%X
bool CLWifiFenceCalculator::calculateScore(CLWifiFenceCalculator::Score &)
bad CLStandardNormalDistribution(%{public}lf) = %{public}lf
bool CLWifiFenceCalculator::addScore()
FenceCal: Adding score, fence, %20s, score, %.8lf, min, %.8lf, avg, %.8lf, max, %.8lf, scores, %lu, aps, %zu
#Warning fChosenAPs is empty
bool CLWifiFenceCalculator::calculate(CLWifiAccessPointLocationService &, const CLFenceManager_Type::Fence &, bool, bool)
FenceCal: start calculate fence, %-24s, C, center, %.8lf, %.8lf, radius, %.8lf, isMonitorForExit, %d
FenceCal: isExit, %d, fRadiusFactor, %.1lf, fenceRadius, %.1lf
FenceCal: really bad fence, %s
FenceCal: limit ePNO fence size, fence, %s, fMaxRadius, %.1lf
calculate
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Daemon/Core/Fence/CLWifiFenceCalculator.mm
dTileLon > 0.0
Invalid fence name, %s, latitude, %lf, longitude, %lf, radius, %lf
FenceCal: tile, y, %d, x, %d, index, %d, distanceFromCenter, %5.5lf, maxApsPerTile, %d, ApsFactor, %.5lf
FenceCal: fetch APs start
FenceCal: fetched, %ld, APs, forceFetchingExpectedAps, %d
FenceCal: expectedAp, %s
FenceCal: Where did you come from : %s
FenceCal: ap2Tile, %s, maxApsPerTile, %2d, left, %4d, top, %4d, tile, %4d, mac, %-24s, numAPs %4zu
FenceCal: calTile, %2zu : %3d / %3zu, %.8lf, %.8lf, FF0000FF
FenceCal: end calculate fence, %-24s, C, center, %.8lf, %.8lf, radius, %.8lf, isMonitorForExit, %d
static bool CLWifiFenceCalculator::addAPToOutput(const CLWifiAPLocation &, bool, std::map<CLMacAddress, CLWifiAPLocation> &, std::map<CLMacAddress, CLWifiAPLocation> &, unsigned int, const std::map<CLMacAddress, CLWifiAPLocation> &, unsigned int, const char *)
#Warning FenceCal: ignore black listed AP, %s
FenceCal: avoid adding moving AP as an exit AP, %s
FenceCal: adding non-2GHz, reason: %s, %s
FenceCal: reason, %s, no budget / channel for, currentCount, %zu, apsBudget, %u, channelFilter, 0x%08x, isAddChannel, %d, isBlacklisted, %d, apLocation, %s
FenceCal: Adding AP, reason, %s, channelFilter, 0x%08x, isExit, %d, currentCount, %zu, apsBudget, %u , mac, %s, hAcc, %.2lf, channel, %d, location, %12.8lf, %12.8lf, added, %d
static unsigned int CLWifiFenceCalculator::calculateChannelHistogram(const std::vector<CLWifiFenceCalculator> &, ChannelHistogram &)
FenceCal: isAddChannel, %d, maxChannelSetSize, %d, totalAps, %.0lf, channelHistogram, sorted, channel, %2d, weight, %.3lf
FenceCal: addedChannels, %d, channelFilter, 0x%08x, totalWeight, %.3lf
bool CLWifiFenceCalculator::calculateGroup(CLWifiAccessPointLocationService &, std::vector<CLWifiFenceCalculator> &, const unsigned int, const std::vector<CLWifiService_Type::AccessPoint> &, CL::optional<CLWifiService_Type::AccessPoint>, std::map<CLMacAddress, CLWifiAPLocation> &, std::map<CLMacAddress, CLWifiAPLocation> &, const CLDaemonLocation &, double)
FenceCal: calculateGroup, start, group size, %zu, apsBudget, %u, currentlySeen, %zu, minScoreThresh, %.4lf
FenceCal: calculateGroupLocation, %s
FenceCal: channelFilter, 0x%08X,countNumOfSetBits,%d
fencecalculator timestamp is 0
associated
FenceCal: CurrentlySeen, %2d, %2lu, known, %2d, reached, %2u, %2d, isUseAP, %d, channels, %d, %s
CurrentlySeen
FenceCal: before Blacklist, apLocation, %s
FenceCal: Blacklist, distanceToExpectedApLocation, %.1lf, distanceToFenceCenter, %.1lf
FenceCal: after Blacklist, apLocation, %s
FenceCal: Blacklist, fence, %s, result.fChosenAPs, %lu, isExit, %d
FenceCal: fence, %s, group pass, %3d, currentWeight, %3d, %3d, score, %+.4lf, newScore, %+.4lf, minScoreThresh, %+.4lf, totalChosenAps, %d, apsBudget, %d
FenceCal: fence, %s, group pass, %3d, currentWeight, %3d, %3d, upgrading score from, %.4lf, to, %.4lf, from, %4zu, to, %4zu, APs, index, %2d, totalChosenAps, %d, apsBudget, %d
FenceCal: fence, %s, score too close, currentScore, %lf, newScore, %lf, significantUpdateThresh, %lf, updating next step to, %d
FenceCal: passNum, %d, commitedAPs, %d, totalChosenAps, %d, numOfAps, %zu
FenceCal: group result, %30s, totalChosenAps, %4d, apsBudget, %4d, index, %4zu , %4zu, aps, %4zu, %4zu, score, %.2lf, index, %4d, dbgCounter, %4d
FenceCal: group result, %30s, can't be monitored
#Warning FenceCal: no score for, %s, fChosenAps, %4zu
FenceCal: chosenScore, %-16s, fChosenScoreIndex, %4d, numOfAps, %4zu, %4zu, score, %.2lf
FenceCal: topping, %zu, apsBudget, %u
FenceCal: Topping, %s, fChosenScoreIndex, %d, total, %zu
FenceCal: topping, from APs, %zu, to APs, %zu
FenceCal: finised topping, %zu, apsBudget, %u
FenceCal: fence, %s, isExit, %d, fChosenScoreIndex, %d, fChosenAPs, %zu, fChosenAPsScores, %zu, canBeMonitored, %d, canBeMonitoredInGroup, %d, numOfExitFences, %u
FenceCal: calculateGroup, end, return val, isOK, %d, numOfFences, %zu, numOfExitFences, %d, combinedCanMonitor, %d, combinedCanMonitorGroup, %d, combinedCanMonitorExitGroup, %d
Return entry AP, index, %2zu, %2zu, %s
Return exit AP, index, %2zu, %2zu, %s
static bool CLWifiFenceCalculator::removeFenceFromCombinedList(CLFenceManager_Type::CombinedFencesList &, const std::string &, const std::string &)
Fence: remove %s/%s from %s, remaining fences, %lu
Fence: kill combinedFence, %s, remaining fences, %lu
static bool CLWifiFenceCalculator::addFenceToCombinedList(CLFenceManager_Type::CombinedFencesList &, const CLFenceManager_Type::Fence &, bool)
FenceCal: combining fence, %s
FenceCal: combine fine fence, distance, %.1lf, %s
FenceCal: combine large fences, distance, %.1lf, %s
FenceCal: combine non-fine non-large fence, distance, %.1lf, %s
FenceCal: do not combine combine fence, distance, %.1lf
FenceCal: creating a new combined fence for, %s
FenceCal: adding to, %s, isExit, %d
static bool CLWifiFenceCalculator::finalizeCombinedFencesList(CLFenceManager_Type::CombinedFencesList &)
FenceCal: No fences
FenceCal: finalizedCombinedFence, %s
static void CLWifiFenceCalculator::sortCalculatorGroup(const CLDaemonLocation &, std::vector<CLWifiFenceCalculator> &)
FenceCal: fDistanceFromCurrentLocation, %.2lf, %s
calculateWeightedScore
uncertainty > 0.0f
score > -1.0f
const CLWifiFenceCalculator::Score &CLWifiFenceCalculator::getChosenGroupScore() const
dCOLLECT: no chosen score, was calculateGroup called?
CLRavenController::CLRavenController(id<CLIntersiloUniverse>)
Raven: constructing CLRavenController
fUniverse != nullptr && "Raven: encountered null universe"
EnableRavenEstimator
Raven: EnableRavenEstimator,%d
Raven: Raven estimator enabled
Raven: Raven estimator disabled
EnableRavenRecorder
Raven: EnableRavenRecorder,%d
Raven: Raven recorder enabled
Raven: Raven recorder disabled
fRCTimer != nullptr && "Raven: encountered null timer"
fRCState != nullptr && "Raven: encountered null state"
CLRavenController::~CLRavenController()
Raven: destructing CLRavenController
newState != nullptr && "Raven: encountered null state"
void CLRavenController::ChangeState(CLRavenController::RavenControllerState *const)
#Warning Raven: could not handle exiting %s
Raven: entering %s
#Warning Raven: could not handle entering %s
EnableRaven
static CLRavenController::CLRavenControllerPointer CLRavenController::CreateRavenController(id<CLIntersiloUniverse>)
Raven: EnableRaven,%d
Raven: feature enabled
Raven: feature disabled
void CLRavenController::DisableRaven()
Raven: received external disable command
void CLRavenController::EnableRavenBestEffort()
Raven: received external enable best effort command
void CLRavenController::HandleAccelerometerNotification(const CLAccelerometer::Sample *, unsigned int)
#Warning Raven: encountered empty accelerometer notification
#Warning Raven: encountered unexpected accelerometer batch size of %u
void CLRavenController::HandleBarometerNotification(const CLPressure::Sample *, unsigned int)
#Warning Raven: encountered empty barometer notification
#Warning Raven: encountered unexpected barometer batch size of %u
void CLRavenController::HandleMagnetometerNotification(const CLMagnetometer::Sample *, unsigned int)
#Warning Raven: encountered empty magnetometer notification
#Warning Raven: encountered unexpected magnetometer batch size of %u
void CLRavenController::HandleRateGyroNotification(const CLGyro::Sample *, unsigned int)
#Warning Raven: encountered empty rate gyro notification
#Warning Raven: encountered unexpected rate gyro batch size of %u
void CLRavenController::Reset()
Raven: resetting CLRavenController
void CLRavenController::SerializeDEMUpdate(const CFTimeInterval &, const int &, const CLDaemonLocation &)
Raven: mach absolute time to mach continuous time conversion of DEM update failed
Raven: mach absolute time to cf absolute time conversion of DEM notification failed
Raven: Dem unavailable at,lat,%{Private}.8lf,lon,%{Private}.8lf
void CLRavenController::SerializeMeasurementNotification(const CFTimeInterval &, const int &, const CLLocationProvider_Type::NotificationData &)
Raven: missing gnss meas data
void CLRavenController::SerializeSignalEnvironmentNotification(const CFTimeInterval &, const int &, const CLSignalEnvironmentProvider_Type::NotificationData &)
Raven: mach absolute time to mach continuous time conversion of signal environment notification failed
Raven: mach absolute time to cf absolute time conversion of signal environment notification failed
CLSignificantChangeManagerSilo
significant
SLCAwarenessParameters
SLCShowUI
CLSignificantChangeManager::CLSignificantChangeManager(id<CLIntersiloUniverse>)
#SLC gSLCShowUI, %d
SLCStartDelay
#Warning #SLC Overriding fence start delay to %.2f
%d significant location change clients
SLCConsolidateTriggersEnabled
#SLC fIsConsolidateTriggersEnabled, %d
SLCConsolidatedTriggersTimeInterval
#SLC fConsolidatedTriggersTimeInterval, %.1lf
#SLC failed to allocate, fConsolidatedTrigger
virtual void CLSignificantChangeManager::shutdown()
#SLC Could not store significant change clients
void CLSignificantChangeManager::handleSignificantLocationChange(CLDaemonLocation)
#SLC handleSignificantLocationChange, distance, %.1lf, timeDelta, %.1lf, maxFactor, %.1lf
#SLC <%+.8f,%+.8f> acc %.2f timestamp %.2f is stale, discarding
#SLC <%+.8f,%+.8f> acc %.2f moved only %.2fm from previous significant location <%+.8f,%+.8f> acc %.2f, discarding
#SLC Lifespan of previous significant location <%+.8f,%+.8f> acc %.2f has not expired (timestamp %.2f, lifespan %.2f), discarding <%+.8f,%+.8f> acc %.2f
#SLC Timestamp %.2f of previous significant location <%+.8f,%+.8f> is less than %.2f seconds ago; discarding <%+.8f,%+.8f> acc %.2f
#Warning #SLC Location <%+.8f,%+.8f> acc %.2f is too far (distance %.2f) from previous location <%+.8f,%+.8f> acc %.2f from %.3fs ago, discarding
#SLC avoiding too frequent SLC notificaitons, age, %.1f, prev location, <%+.8f,%+.8f>, acc, %.2lf, new location, <%+.8f,%+.8f>, acc, %.2f
#SLC issue notificaiton, distance, %.1lf
#SLC got first location, sending SLC notification
#SLC no location change
#SLC reporting a location change
#SLC new location is not useful
slcUpdate
hAcc
secondsSinceLastSLC
SignificantChange
Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Lifespan,%.2f,LocationType,%d,PrevLocation,%+.8f,%+.8f,%.2f,Distance,%.2f,DeltaTime,%.3f,Clients,%d,
void CLSignificantChangeManager::reconsiderAllPersistenMonitoringClients()
Couldn't get list of significant location change clients
void CLSignificantChangeManager::migrateData()
#SLC Couldn't get list of clients
powerBudget
void CLSignificantChangeManager::removeAllSignificantChangeClients()
#SLC Couldn't get list of SLC clients
void CLSignificantChangeManager::onStartSLC(CLPersistentTimer *)
#SLC Booting up
void CLSignificantChangeManager::onSettingsNotification(int, const CLDarwinNotifier_Type::Notification &, const CLDarwinNotifier_Type::NotificationData &)
#SLC onSettingsNotification
SpoofSignificantLocationChange
HorizontalAccuracy
#SLC Spoofing a Significant Location Change: %s
void CLSignificantChangeManager::onStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)
#SLC Got kNotificationMigration, fBigSwitchIsOn, %d
#Warning #SLC unknown notification, %d
{CLWifiLocationUpdateRequest=iBdiB}8@?0
void CLSignificantChangeManager::onStoreTimer(CFRunLoopTimerRef)
#SLC onStoreTimer, info, %p
void CLSignificantChangeManager::onConsolidatedTrigger(CFRunLoopTimerRef)
#SLC ignore, onConsolidatedTrigger, shutdown?
#SLC onConsolidatedTrigger, calling requestLocationUpdate
bool CMSensorFusionSwimMekf::initializeAttitude(const CMVector3d &, const CMVector3d &, float)
northAndGravity failed
invalid initializeDown covariance !(P > 0), reseting
Assertion failed: row < M, file /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Oscar/Math/CMMatrix.h, line 64,invalid row %zu > %zu.
Assertion failed: col < N, file /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Oscar/Math/CMMatrix.h, line 65,invalid col %zu > %zu.
const T &CMQueue<float>::operator[](const size_t) const [T = float]
const Element CMVectorBufferBase<float, 3>::mean(size_t, size_t) const [T = float, N = 3]
Assertion failed: !empty(), file /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Oscar/CMVectorBuffer.h, line 96,mean() on empty buffer.
bool CMFactoredMatrix<float, 3>::factor(const CMMatrix<T, N, N> &) [T = float, N = 3]
D(%zu) <= 0 non-positive definite matrix!
T CMMatrix<float, 3, 3>::operator()(size_t, size_t) const [T = float, M = 3, N = 3]
T &CMFactoredMatrix<float, 3>::U(size_t, size_t) [T = float, N = 3]
Assertion failed: col > row, file /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Oscar/Math/CMFactoredMatrix.h, line 123,invalid element %zu <= %zu.
Element CMVectorBufferBase<float, 3>::back() const [T = float, N = 3]
Assertion failed: !empty(), file /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Oscar/CMVectorBuffer.h, line 148,back() on empty buffer.
T CMFactoredMatrix<float, 3>::U(size_t, size_t) const [T = float, N = 3]
Assertion failed: col > row, file /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Oscar/Math/CMFactoredMatrix.h, line 117,invalid element %zu <= %zu.
T &CMMatrix<float, 3, 3>::operator()(size_t, size_t) [T = float, M = 3, N = 3]
Assertion failed: row < M, file /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Oscar/Math/CMMatrix.h, line 71,invalid row %zu > %zu.
Assertion failed: col < N, file /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Oscar/Math/CMMatrix.h, line 72,invalid col %zu > %zu.
T CMMatrix<float, 3, 3>::operator[](size_t) const [T = float, M = 3, N = 3]
Assertion failed: ldx < M*N, file /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Oscar/Math/CMMatrix.h, line 78,invalid element %zu >= %zu.
void CMFactoredMatrix<float, 3>::thorntonTemporalUpdate(CMMatrix<T, N, N> &, const CMVector<T, N> &) [T = float, N = 3]
D[%zu] <= 0, matrix ! positive definite
T &CMVector<float, 3>::operator[](const size_t) [T = float, N = 3]
Assertion failed: i < N, file /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Oscar/Math/CMVector.h, line 278,invalid index %zu >= %zu.
bool CMFactoredMatrix<float, 3>::solve(CMVector<T, N> &) const [T = float, N = 3]
D[%zu] == 0, semidefinite matrix!
CMVector<T, N> CMFactoredMatrix<float, 3>::biermanObservationalUpdate(const CMMatrix<T, P, N> &, const CMVector<T, P> &, const CMVector<T, P> &) [T = float, N = 3, P = 3]
%zu: alpha <= 0, matrix ! positive definite
bool CLGeoAccess3dBuildingGeometry::buildingsWithinDistance(ExtrudedFootprintsList &, const double &, const double &, const double &)
CLMM, GeoMapAccess did not have sufficient data available (buildingsWithinDistance)
v16@?0@"<GEOMapBuilding>"8
#Warning CLMM,GeoMapAccess query returned,nullptr
kCMStrideCalibrationDataCodingKeyBegin
kCMStrideCalibrationDataCodingKeyEnd
kCMStrideCalibrationDataCodingKeyState
kCMStrideCalibrationDataCodingKeyKValue
kValue
Td,N,V_kValue
Td,N,V_begin
Td,N,V_end
CLApplicationLifecycleManagerSilo
T^{CLApplicationLifecycleManager=@{unique_ptr<CLAppMonitor_Type::Client, std::__1::default_delete<CLAppMonitor_Type::Client> >={__compressed_pair<CLAppMonitor_Type::Client *, std::__1::default_delete<CLAppMonitor_Type::Client> >=^{Client}}}{unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client> >={__compressed_pair<CLDataProtectionManager_Type::Client *, std::__1::default_delete<CLDataProtectionManager_Type::Client> >=^{Client}}}{list<CLApplicationLifecycleManager::PendingLaunch, std::__1::allocator<CLApplicationLifecycleManager::PendingLaunch> >={__list_node_base<CLApplicationLifecycleManager::PendingLaunch, void *>=^{__list_node_base<CLApplicationLifecycleManager::PendingLaunch, void *>}^{__list_node_base<CLApplicationLifecycleManager::PendingLaunch, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLApplicationLifecycleManager::PendingLaunch, void *> > >=Q}}B},N,V_manager
locationd.fence
void CLApplicationLifecycleManager::takeProcessAssertion(const pid_t &)
#Warning ALM: Couldn't create assertion for process ID %{public}u
void CLApplicationLifecycleManager::launchApplication(const std::string &)
%s doesn't have a bundle ID; not going to bug SpringBoard.
CLLaunchOptionsLocation
%s isn't running; launching...
#Warning Couldn't launch application %s (%d)
Application state for %s is %d
Got PID %{public}d for bundle ID %{public}s, but application is terminated!
#Warning Couldn't get application state for bundle ID %s
Application %s was task-suspended
Taking process assertion for %s...
void CLApplicationLifecycleManager::onAppMonitorNotification(int, const CLAppMonitor_Type::Notification &, const CLAppMonitor_Type::NotificationData &)
notification, %d, %s, pid, %d, bundleId, %s
#Warning unhandled app monitor notification, %d, %s
void CLApplicationLifecycleManager::onDataProtectionManagerNotification(int, const CLDataProtectionManager_Type::Notification &, const CLDataProtectionManager_Type::NotificationData &)
ALM: device unlocked since boot, %{private}s, application launch capability, %{private}sabled
CLGestureNotifier
GestureRecognitionAccelerometerInterval
GestureRecognitionEnableDynamicAccelerometerRate
CLGestureNotifier::CLGestureNotifier()
Enable dynamic accelerometer rate = %d
.dat
void CLGestureNotifier::setGestureClassifier(const std::string &)_block_invoke
Using prototype: %s
void CLGestureNotifier::startDetectingGestures()
Not starting gesture detection since requested accelerometer interval < 0
No accelerometer; not detecting gestures
Gesture prototype was not setup. Using default prototype
void CLGestureNotifier::stopDetectingGestures()
virtual void CLGestureNotifier::numberOfSpectatorsChanged(int, size_t)
CLSensorFusionService9Axis::CLSensorFusionService9Axis(bool, int, bool)
9-axis sensor fusion is not supported on this platform.  Returning.
virtual void CLSensorFusionService9Axis::useNorthRef(bool)
North reference overridden as %d by first client
void CLSensorFusionService9Axis::onBiasAndVariance(const CLMotionTypeGyroBiasAndVariance)_block_invoke
void CLSensorFusionService9Axis::onCompass(const CLCompass_Type::Sample *)
correctedCompassExt, %.3f, %.3f, %.3f, %u, %u
tiles_cell
CLCoarseCellTilesManagerSilo
CLCoarseCellTilesManager::isSupportedTileType(tileType)
AncientTilesThreshold
CLCoarseCellTilesManager::CLCoarseCellTilesManager(id<CLIntersiloUniverse>, std::unique_ptr<CLICoarseCellTilesManagerExternal>, CL::optional<CLTilesSetCollection>)
TILE: fMaxTileDataAge, %.1lf
CellTilesActive
TileCoarse, isActive, %{public}d
MTimeModificationPeriod
TILE: MTimeModificationPeriod, %.1lf
CellTilesServerUrl
CLTilesSetCollection CLCoarseCellTilesManager::initializeProductionTilesSetCollection()
TILE: fDefaultCellTilesServerUrl, %s
TILE: mkdir, %s, ret, %d
/coarse-gsm
/6/v1
/coarse-cdma
/8/v1
/coarse-lte
/7/v1
virtual void CLCoarseCellTilesManager::shutdown()
TILE: CLCoarseCellTilesManager::shutdown
com.apple.location.CoarseCellTiles
void CLCoarseCellTilesManager::onDataProtectionNotification(int, const CLDataProtectionManager_Type::Notification &, const CLDataProtectionManager_Type::NotificationData &)
TileCoarse, unexpected, dataprotection, %{public}d
TileCoarse, kNotificationEncryptedDataAvailability, %d, changed, %d
void CLCoarseCellTilesManager::onStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)
TileCoarse, unexpected, status, %{public}d
TileCoarse, kNotificationReachability, %{public}d, was, %{public}d
void CLCoarseCellTilesManager::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)
TileCoarse, kNotificationReset
TileCoarse, kNotificationLocationServicesStatus, %{public}d
void CLCoarseCellTilesManager::onCompanionNotification(int, const CLCompanionNotifier_Type::Notification &, const CLCompanionNotifier_Type::NotificationData &)
TileCoarse, unexpected, companion, %{public}d
void CLCoarseCellTilesManager::onCleanupAgedTiles(CFRunLoopTimerRef)
TileCoarse, Cleanup
void CLCoarseCellTilesManager::traverseAllTilesSets(const char *, CLTileManagerTraverseTilesSetBlock)
TILE: performing, sAction, %s, tilesSet, %s
void CLCoarseCellTilesManager::listAvailableFilesAllTypes(CFAbsoluteTime)
TileCoarse, listAvailableFilesAllTypes, indexed, %{public}d
indexTiles
v16@?0^{CLTilesSet=Bi{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}ddfIdfiddIIBBB{CLTilesMap={map<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> >, std::__1::less<TileId>, std::__1::allocator<std::__1::pair<const TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > > > >={__tree<std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > >, std::__1::__map_value_compare<TileId, std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > >, std::__1::less<TileId>, true>, std::__1::allocator<std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<TileId, std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > >, std::__1::less<TileId>, true> >=Q}}}{set<TileId, std::__1::less<TileId>, std::__1::allocator<TileId> >={__tree<TileId, std::__1::less<TileId>, std::__1::allocator<TileId> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<TileId, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<TileId> >=Q}}}}{CLDebugBytes={BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}IIII}ii{unique_ptr<CLEntryCacheBase, std::__1::default_delete<CLEntryCacheBase> >={__compressed_pair<CLEntryCacheBase *, std::__1::default_delete<CLEntryCacheBase> >=^{CLEntryCacheBase}}}{unique_ptr<CLEntryCacheBase, std::__1::default_delete<CLEntryCacheBase> >={__compressed_pair<CLEntryCacheBase *, std::__1::default_delete<CLEntryCacheBase> >=^{CLEntryCacheBase}}}}8
TileCoarse, clear on index
TileCoarse, listAvailableFilesAllTypes, done
bool CLCoarseCellTilesManager::indexTiles(CLTilesSet &, CFAbsoluteTime)
TileCoarse, indexTiles, rootDirectory, %{public}s, name, %{public}s
TileCoarse, indexTiles, can't open dir, %{public}s, #CloneMe
TileCoarse, indexTiles, absoluteFilename, '%{public}s', d_type, %{public}d
TileCoarse, indexTiles, invalid filename  %{public}s
TileCoarse, convert to class C, first unlock, %{public}s, files, %{public}d
TileCoarse, indexTiles, failed to stat file, %{public}s, ret, %{public}d, #CloneMe
@TileList, %{public}s, add, llsw, %{private}.2lf, %{private}.2lf, index, size, %{public}lu
TileCoarse, indexTiles, done, %{public}s, size, %{public}lu, unprotected, %{public}lu
void CLCoarseCellTilesManager::predownloadTiles(CFAbsoluteTime)
TileCoarse, skip predownload, fIndexedAvailableFiles, %{public}d, fIsActive, %{public}d
predownloadTiles (Coarse)
bool CLCoarseCellTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, sec_key_t, CFAbsoluteTime)
@TileError, RequestID, ll, %{private}.3lf, %{private}.3lf, tid, %d, %d, %d
TileDl, requestDownload, type, %{public}d, %{public}s, location, %{private}14.8lf, %{private}14.8lf, id, %{private}s, updated, %{public}d, reachbility, %{public}d
bool CLCoarseCellTilesManager::checkDownloadSchedule(CFAbsoluteTime, bool)
@TileDl, coarse, failed criteria
static void CLCoarseCellTilesManager::tileDownloadCallback(CLFileDownload *, bool, void *)_block_invoke
TileDl, tileDownloadedCallback, success, %{public}d
void CLCoarseCellTilesManager::tileDownloadCompleted(CLFileDownload *, bool, void *)
@TileReq, %{public}s, downloaded, llsw, %{private}.2lf, %{private}.2lf, success, %{public}d, NSURLErrorCode, %{public}d
@TileDl, tileDecompressionCompleted, tile, %{private}s, decompress done, success, %{public}d, NSURLErrorCode, %{public}d, tileDoesNotExist, %{public}d, reachability, %{public}d, validId, %{public}d, locked, %{public}d, fileSize, %{public}d
@TileError, DecompressionID
gotTile
success
protection
download
@TileList, %{public}s, add, llsw, %{private}.2lf, %{private}.2lf, download, size, %{public}lu
@TileReq, %{public}s, add, llsw, %{private}.2lf, %{private}.2lf, download, size, %{public}lu
@TileError, tile not on download list, #CloneMe
void CLCoarseCellTilesManager::sendNotificationTileWasDownloaded(bool, const CLTileFile &, const CLTilesSet &, unsigned int)
@TileDl, kNotificationTileWasDownloaded, tileid, %{private}s, tileHeaderParsed, %{public}d, tileType, %{public}d, serverUrl, %{private}s, serverFilename, %{private}s, absoluteLocalFilename, %{private}s
refreshTilesDataIfNeeded
TileCtsInterval
void CLCoarseCellTilesManager::registerForCts()
TileCts, coarsecell, registering, interval, %{public}.2f, grace, %{public}.2f
void CLCoarseCellTilesManager::checkCtsDownloadRequest()
TileCts, coarsecell, request, %{public}d, state, %{public}ld
TileCts, coarsecell, setting, DONE
TileCts, coarsecell, failed, DONE, %{public}ld
void CLCoarseCellTilesManager::checkCtsOnDownloadComplete()
TileCts, coarsecell, complete, state, %{public}ld
TileCts, coarsecell, setting, DEFER
TileCts, coarsecell, failed, DEFER, %{public}ld
bool CLCoarseCellTilesManager::getLocationByCellFromTile(CLTileFile *, const CLCell &, CLCoarseCellTilesManager::SearchContext &, CLDaemonLocation &)
TILE: getLocationByCellFromTile, searching, sec_key, %016llX, %s
TILE: getLocationByCellFromTile, in tile, accessible, %d, %s
TILE: no lac tile for, %s
TILE: getLocationByCellFromTile, isFound, %d, locationd, %s
bool CLCoarseCellTilesManager::getLocationByCell(const CLCell &, const CLDaemonLocation &, CLCoarseCellTilesManager::SearchContext &, CLDaemonLocation &)
TILE: getLocationByCell, index is not available, can't search tiles (locationd launched when device was locked?), fDataProtectionEnabled, %d
TILE: no tiles for, %s
CoarseTile, getLocationByCell, un-supported cell type, %{private}s, #CloneMe
TILE: getLocationByCell, search for LAC
TILE: getLocationByCell, LAC tiles for, %s, are not active
TILE: getLocationByCell, search for LAC, isFound, %d
clearLocationInformation
void CLCoarseCellTilesManager::clearLocationInformation()
TileCoarse, clearLocationInformation
isSupportedTileType(type)
void CLCoarseCellTilesManager::removeAllTiles(bool, CLTilesManager_Type::TileType)
TileCoarse, %{public}s, removeAllTiles, size, %{public}lu
@TileList, %{public}s, delete, llsw, %{private}.2lf, %{private}.2lf, all, size, %{public}lu
TILE: removeAllTiles, end, name, %s, size, %lu, unprot size, %lu
void CLCoarseCellTilesManager::deleteAgedTiles(CFAbsoluteTime)_block_invoke
TileCoarse, deleteAgedTiles, dispatch, %{public}s
void CLCoarseCellTilesManager::deleteAgedTiles(CFAbsoluteTime)_block_invoke_2
TileCoarse, deleteAgedTiles, start, name, %{public}s, size, %{public}lu
deleteAgedTiles
void CLCoarseCellTilesManager::agedTileDeleter(CLTilesSet &, CFAbsoluteTime)
TILE: deleteAgedTiles, tileDataAge, %.1lf, %.1lf, corrupt, %d, isDelete, %d, tile, %s
corrupt
@TileList, %{public}s, delete, llsw, %{private}.2lf, %{private}.2lf, %{public}s, size, %{public}lu
TILE: deleteAgedTiles, too many tiles, %lu, tile, %s
@TileList, %{public}s, delete, llsw, %{private}.2lf, %{private}.2lf, limits, size, %{public}lu
TILE: deleteAgedTiles, end, numOfDeletedTiles, %u, remain, %lu, name, %s
isSupportedTileType(tileType)
TILES
std::tuple<bool, CLTileFile *> CLCoarseCellTilesManager::createTileFileObject(CLTilesManager_Type::TileType, const std::string &, const std::string &, CFAbsoluteTime)
Unable to read tile file.
directory
lister
@TileList, %{public}s, create, llsw, %{private}.2lf, %{private}.2lf, size, %{public}lu
updateTileRelevancy
void CLCoarseCellTilesManager::updateTileRelevancy()_block_invoke
TILE: tiles, %s, not active
TILE: updating mtime, %d, type, %d, tileid, %s
CoarseTile, Invalid tile id!, #CloneMe
auto CLCoarseCellTilesManager::registerForCts()::(anonymous class)::operator()(xpc_activity_t) const
TileCts, coarsecell, state, CHECK_IN
TileCts, coarsecell, state, RUN
TileCts, coarsecell, setting, CONTINUE
TileCts, coarsecell, failed, CONTINUE, %{public}ld
virtual void CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLCoarseCellTilesManager_Type::Notification, NotificationData_T = CLCoarseCellTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLCoarseCellTilesManager_Type::Notification, NotificationData_T = CLCoarseCellTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLCoarseCellTilesManager_Type::Notification, NotificationData_T = CLCoarseCellTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLCoarseCellTilesManager_Type::Notification, NotificationData_T = CLCoarseCellTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLCoarseCellTilesManager_Type::Notification, NotificationData_T = CLCoarseCellTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLCoarseCellTilesManager_Type::Notification, NotificationData_T = CLCoarseCellTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::listClients() [Notification_T = CLCoarseCellTilesManager_Type::Notification, NotificationData_T = CLCoarseCellTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLPrototypeSet::addSampleToSubset(const CLDtwSample &, int, int, float &, float &, const char *&, double &)
#Warning Cost of match %{public}f exceeds max of %{public}f allowed for prototype %{public}s
void CLPrototypeSet::readFromFile(const char *)
#Warning Could not open prototype file
#Warning Error reading magic number or number (%{public}x) does not match expected number (0x%{public}x)
#Warning Error reading number of prototypes
#Warning Error reading name length of prototype %{public}d
#Warning Error reading name of prototype %{public}d
#Warning Error reading rawName length of prototype %{public}d
#Warning Error reading rawName of prototype %{public}d
#Warning Error reading max distance
You are reading an older prototype file.
#Warning Error reading number of accelerometer samples for prototype %{public}d
#Warning Error reading %{public}d accelerometer samples for prototype %{public}d
#Warning Could not initialize prototype instance %{public}d
-[CMStrideCalLocationFSM requestTransitionToLocationState:]
fLocationState %d state %d
v16@?0@"CalibrationTrack"8
T@"<CMStrideCalLocationFSMDelegate>",N,V_delegate
locationState
Ti,R,N,VfLocationState
LogProx
CLEarGestureNotifier
EnableEarGesture
CLEarGestureNotifier::CLEarGestureNotifier()
Ear gesture enabled: %d
EarGestureIgnoreProx
Ignoring prox: %d
EarGestureMaxProxBeforeMotionInterval
Max prox before motion interval = %f
EarGestureMaxMotionBeforeProxInterval
Max motion before prox interval = %f
void CLEarGestureNotifier::startDetectingGestures()
Starting ear gesture detection
Setting prox mode to PassiveMonitoring
void CLEarGestureNotifier::stopDetectingGestures()
Stopping ear gesture detection. Setting prox mode to none
void CLEarGestureNotifier::hasBlankedScreenOrIsLockedUpdated()
Has blanked screen = %d, Is locked = %d
Screen is blanked and device is locked. Stopping gesture detection.
Screen is unblanked or device is not locked. Starting gesture detection if necessary.
virtual void CLEarGestureNotifier::numberOfSpectatorsChanged(int, size_t)
%@.%@.%@
void CLEarGestureNotifier::checkEndPoseInReadyState(const CLAccelerometer::Sample *)
endPose,%.2f,%.2f,%.2f,tilt,%.2f,timestamp,%.3f
Failed end pose sanity check. Set state to %s
FailedEndPoseCheck
Sending gesture notification. Matched prototype name, %s
MatchFound
void CLEarGestureNotifier::detectCancelAfterSend(const CLAccelerometer::Sample *)
Sending gesture notification. Gesture cancelled due to unlikely end pose, %.2f, %.2f, %.2f
CancelledPose
Sending gesture notification. Gesture cancelled due to high dynamics, %.3f, %.3f, %.3f
CancelledDynamics
Waiting for Motion
Detected Motion Waiting For Prox
Ready To Send Notification
Sent Notification
static void CLEarGestureNotifier::onGestureNotification(const CLGestureNotifier::NotificationData *, void *)
Readying gesture notification. Ignoring prox
Setting prox mode to PassiveEngaged.
Readying gesture notification. Prox triggered before motion. dt = %.3f
ProxToEarGestureDelta
Set timer for %f seconds.
static void CLEarGestureNotifier::onTimer(CFRunLoopTimerRef, void *)
Gesture timer expired. State = %s
Timer fired while in state %s.
Prox timer expired. Setting prox mode to PassiveMonitoring
ProxTimerExpired
virtual bool CLActivityLoggerSizePolicy::shouldILog(NSData *)
currentSize is %llu, log msg size is %lu
Log msg size exceeds limit %d, skip loging %lu bytes
Log size exceeded %llu, skip log of %lu bytes
changesAvailable
TB,N,V_changesAvailable
suspended
TB,N,V_suspended
sessionStalenessInterval
Tq,N,V_sessionStalenessInterval
maxConcurrentMessages
Tq,N,V_maxConcurrentMessages
T@"<SYSessionDelegate>",&,N,V_delegate
serializer
T@"<SYChangeSerializer>",&,N,V_serializer
targetQueue
T@"NSObject<OS_dispatch_queue>",N,V_targetQueue
perMessageTimeout
Tq,N,V_perMessageTimeout
fullSessionTimeout
Tq,N,V_fullSessionTimeout
sessionMetadata
T@"NSDictionary",N,V_sessionMetadata
T@"NSDictionary",&,N,V_properties
syncId
T@"NSString",C,N,V_syncId
CLDebugBytes::CLDebugBytes(const char *)
Bytes: construct, name, %s
void CLDebugBytes::clear()
Bytes: clear, name, %s
void CLDebugBytes::log(const std::string &, CLDaemonStatus_Type::Reachability)
Bytes: log, name, %s, m, %s, s, %d, r, %d, t, %d, ts, %d, reachability, %d
PedestrianStepCountBuffer
std::vector<CLStepCountEntry> CLStepDistanceFusion::feedStepCountEntry(const CLExtendedStepCountEntry &)
StepCount, %f, %f, %d, %f, %f, %u, %f, %f, %f, %f, %d
time
deltaCount
deltaDist(m)
calPed
fused
totalDist(m)
usedGps
pace(s/m)
StepDistancePedometerFusedPace
rawGps
StepDistanceFinalFusedPace
StepDistanceUsedOdometerPace
odometerPaceStdError
pedometerPaceStdError
residual
output
tolerance
activeTime
ratio
vehicular
firstStepTime
lastStepTime
pedometerArmConstrainedState
unified,%s,%0.3f,%s,%u,%s,%u,%s,%s,%0.2f,%s,%0.2f,%s,%0.2f,%s,%0.2f,%s,%s,%0.2f,%s,%0.2f,%s,%0.2f,%s,%u,%s,%s,%0.4f,%s,%0.4f,%s,%0.4f,%s,%0.4f,%s,%0.4f,%s,%u,%s,%0.4f,%s,%0.4f,%s,%0.4f,%s,%0.4f,%s,%0.4f,%s,%0.3f,%s,%0.4f,%s,%0.2f,%s,%u,%s,%0.3f,%s,%0.3f,%s,%d
rawDistance
calDistance
odomDistance
fusedDistance
odometerDistanceForSlowPaceCheckWindow
pedometerRawDistanceForSlowPaceCheckWindow
odometerError
rawPace
calPace
odomPace
fusedPace
#Warning Potential StepDistanceFusion error. File a radar if you are not walking/running in place. %s, %f, %s, %u, %s, %u, %s, %f, %s, %f, %s, %f, %s, %f, %s, %f, %s, %f, %s, %d, %s, %f, %s, %f, %s, %f, %s, %f
#Warning Inconsistency found between steps and clock. Ignoring.
void CLStepDistanceFusion::feedSession(const CLMotionStateMediator_Type::MotionOverride &)
action,%d,type,%d
bool CLStepDistanceFusion::isOdometerQualityUsable(CFAbsoluteTime, bool)
Classifying %lu odometer entries
OdometerQuality,%d,MostRecentOdometerEntry,timestamp,%.3lf,timestampGps,%.3lf,odometer,%.3lf,deltaDist,%.3lf,deltaDistUnc,%.3lf
bool CLStepDistanceFusion::getOdometerDistance(CFAbsoluteTime, CFAbsoluteTime, double &) const
#Warning Time rolled back! t1,%{public}f,t2,%{public}f
bool CLStepDistanceFusion::shouldUseOdometerPace(CFAbsoluteTime, bool, double &, double &)
StepCountBuffer lookup time not successful,%0.3f
bool CLStepDistanceFusion::updateVehicularStateMachine(double, double, double)
How can we generate pedometer distance with no time at all?
virtual void CLNatalieInput<CLExtendedStepCountEntry>::update(CFAbsoluteTime) [Data_T = CLExtendedStepCountEntry]
frozen
static
moving
driving
semi-stationary
moving coarse
in vehicle frozen
in vehicle static
walking slow
vehicular in hand
driving other
cycling leg
Stationary Cycling
Cross Training
Stair Climbing
Indoor Running
Indoor Walking
Pushing Wheelchair
Outdoor Wheelchair Activity
medium
isAssociated
Available
Power
ScanReady
Scan
ScanError
ScanErrorBusy
LinkStatus
Roam
BgExit
BgEntry
TrackingAvailable
ScanCache
UnthrottledScan
PeerRanging
Harvest2GhzSet1
Harvest2GhzSet2
Harvest5GhzSet1
Harvest5GhzSet2
Harvest5GhzSet3
Cached
LowPriority
Channel
Fast
Stage1
Stage2
Thorough
Normal
Exhaustive
Passive
PassiveExhaustive
CustomScanParameters
CLKeyboardState
void CLKeyboardState::registerForKeyboardUpdates()
registering for keyboard updates
IOServiceFirstMatch
IOServiceTerminate
void CLKeyboardState::registerForKeyboardUpdates()_block_invoke
#Warning Failed to register for keyboard updates. Could not register for AppleHIDKeyboardEventDriverV2 service kIOFirstMatchNotification and kIOTerminatedNotification.
#Warning Failed to register for keyboard updates. Could not create KeyboardConnectNotificationPort and KeyboardConnectNotificationPort
void CLKeyboardState::unregisterForKeyboardUpdates()
unregistering for keyboard updates
void CLWriteStackshot(const char *, _Bool)
#Warning stackshot only available on device
-[CMStrideCalibrationDatabase initWithSilo:]
StrideCalDb init
-[CMStrideCalibrationDatabase initWithSilo:]_block_invoke
Finished insertion startTime %f
v112@?0{CLStrideCalEntry=idIdddddiiddid}8
-[CMStrideCalibrationDatabase addEntry:]
insertion startTime %f
-[CMStrideCalibrationDatabase isCalibrationConvergedStdForBinWithSpeed:]
Speed,%f,KFactorStd,%0.4f
-[CMStrideCalibrationDatabase isCalibrationConvergedMedianForSpeed:]
Median kValue pacebin with rawSpeed %f: %f
T@"<CMStrideCalibrationDatabaseDelegate>",N,V_delegate
void CLActivityRecorderDb<CLStrideCalEntry, CLActivityDB::NoDataProtectionPolicy>::addSuspectRecord(const T &) [T = CLStrideCalEntry, DataProtectionPolicy = CLActivityDB::NoDataProtectionPolicy]
bool CLActivityRecorderDb<CLStrideCalEntry, CLActivityDB::NoDataProtectionPolicy>::isValidTime(CFAbsoluteTime &) const [T = CLStrideCalEntry, DataProtectionPolicy = CLActivityDB::NoDataProtectionPolicy]
-[CMStrideCalibrator(DataInput) onLocationNotification:data:]
#Warning Received unhandled notification, %d
kCLMotionTypeGeomagneticModelDataXKey
kCLMotionTypeGeomagneticModelDataYKey
kCLMotionTypeGeomagneticModelDataZKey
kCLMotionTypeGeomagneticModelDataMagnitudeKey
kCLMotionTypeGeomagneticModelDataHorizontalKey
kCLMotionTypeGeomagneticModelDataDeclinationKey
kCLMotionTypeGeomagneticModelDataInclinationKey
kCLMotionTypeGeomagneticModelDataTimestampKey
kCLBiasXKey
kCLBiasYKey
kCLBiasZKey
kCLVarianceXKey
kCLVarianceYKey
kCLVarianceZKey
KCLDoingBiasEstimationKey
virtual CMFFTProcessor::~CMFFTProcessor()
CMFFTProcessor is being cleaned up.  Subsequent calls to CMAccelerometerProcessor::computeFrequencyFeatures will lead to undefined behavior.
RTRoutineManager
CLRoutineMonitorSilo
LocationBundles/Routine.bundle
Routine
com.apple.locationd.routine
SLVAwarenessParameters
v32@?0@"NSNumber"8@"NSMutableArray"16^B24
-[CLRoutineMonitor startMonitoringVisitsForClient:]
#slv telling routined to start visit monitoring
-[CLRoutineMonitor startMonitoringVisitsForClient:]_block_invoke_2
#slv got error from routined: %@
#slv received visit from routined
v24@?0@"RTVisit"8@"NSError"16
-[CLRoutineMonitor stopMonitoringVisitsForClient:]
#slv telling routined to stop visit monitoring
-[CLRoutineMonitor startLeechingVisitsForClient:]
SLV: Telling routined to start visit leeching
-[CLRoutineMonitor startLeechingVisitsForClient:]_block_invoke_2
SLV: Got error from routined: %{public}s
SLV: Received leeched visit from routined, visit, %@
-[CLRoutineMonitor stopLeechingVisitsForClient:]
SLV: Telling routined to stop visit leeching
-[CLRoutineMonitor startLeechingLowConfidenceVisitsForClient:]
SLV: Telling routined to start low confidence visit leeching
-[CLRoutineMonitor startLeechingLowConfidenceVisitsForClient:]_block_invoke_2
SLV: Received leeched low confidence visit from routined, visit, %@
-[CLRoutineMonitor stopLeechingLowConfidenceVisitsForClient:]
SLV: Telling routined to stop low confidence visit leeching
-[CLRoutineMonitor addLocation:]
dropping duplicate location, %{private}@
received location, %{private}@
#warning in-memory cache has exceeded threshold of %{public}lu, removing oldest fix
-[CLRoutineMonitor onClientManagerNotification:data:]
received unhandled notification %{public, location:CLClientManager_Type::Notification}d
-[CLRoutineMonitor onLocationNotification:data:]
received unhandled notification %{public, location:CLLocationProvider_Type::Notification}d
-[CLRoutineMonitor flush]
flushing routine data
-[CLRoutineMonitor checkAuthorization]
Location services are disabled; stopping routine data collection
Routine system service disabled; stopping routine data collection
-[CLRoutineMonitor listener:shouldAcceptNewConnection:]
LocationServer received incoming connection
Why didn't we get a connection
-[CLRoutineMonitor listener:shouldAcceptNewConnection:]_block_invoke
Connection interrupted
-[CLRoutineMonitor startUpdatingLocation]
start updating location
-[CLRoutineMonitor stopUpdatingLocation]
stop updating location
-[CLRoutineMonitor sendLocations]_block_invoke
#warning locations not delivered %@
v16@?0@"NSError"8
-[CLRoutineMonitor startWakeRoutinedTimer]
start wakeRoutinedTimer
-[CLRoutineMonitor stopWakeRoutinedTimer]
stop wakeRoutinedTimer
-[CLRoutineMonitor onWakeRoutinedTimer]
wake routined
-[CLRoutineMonitor setDiminishedMode:]
entering diminished mode; starting data collection
exiting diminished mode; stopping data collection
-[CLRoutineMonitor startMonitoringScenarioTriggerOfType:forClient:]
#scenarioTrigger Telling routined to start monitoring trigger of type, %lu
-[CLRoutineMonitor startMonitoringScenarioTriggerOfType:forClient:]_block_invoke_2
#scenarioTrigger Got error from routined, %@
#scenarioTrigger Received trigger of type %lu from routined
v24@?0@"RTScenarioTrigger"8@"NSError"16
-[CLRoutineMonitor stopMonitoringScenarioTriggerOfType:forClient:]
#scenarioTrigger Telling routined to stop monitoring trigger of type, %lu
-[CLRoutineMonitor startUpdatingPredictedApplications]
start updating predicted applications
-[CLRoutineMonitor stopUpdatingPredictedApplications]
stop updating predicted applications
-[CLRoutineMonitor _sendPredictedApplications]_block_invoke
predicted applications not delivered %p
-[CLRoutineMonitor fetchPredictedApplicationsAtLocation:reply:]
fetch predicted applications at location %{private}@
v16@?0@"NSArray"8
locations
T@"NSMutableArray",&,N,V_locations
lastLocation
T@"CLLocation",&,N,V_lastLocation
predictedApplications
T@"NSArray",&,N,V_predictedApplications
updating
TB,N,V_updating
updatingPredictedApplications
TB,N,V_updatingPredictedApplications
authorized
TB,N,V_authorized
diminishedMode
TB,N,V_diminishedMode
routineManager
T@"RTRoutineManager",&,N,V_routineManager
visitClients
T@"NSMutableSet",&,N,V_visitClients
leechClients
T@"NSMutableSet",&,N,V_leechClients
lowConfidenceVisitLeechClients
T@"NSMutableSet",&,N,V_lowConfidenceVisitLeechClients
scenarioTriggerClients
T@"NSMutableDictionary",&,N,V_scenarioTriggerClients
suggestedActionManager
T@"<CLSuggestedActionServiceProtocol>",&,N,V_suggestedActionManager
CLFenceDataDownloadManager
virtual CLFenceDataDownloadManager::~CLFenceDataDownloadManager()
Fence: delete CLFenceDataDownloadManager
void CLFenceDataDownloadManager::addFencesForDataDownload(CLFenceManager_Type::FenceDownloadMap)
Fence: Adding %{public}ld fences for download
Fence: Adding fence to download, %{private}s
Fence: Adding fence to download, restored fence, %{private}s
Fence: first fence added, enable download timer
void CLFenceDataDownloadManager::removeFencesForDataDownload(CLFenceManager_Type::FencesVector)
Fence: Removing %{public}ld fences for download
Fence: Removing fence from download, [%{private}s]/%{private}s/%{private}s
Fence: last fence removed, disabled download timer
void CLFenceDataDownloadManager::refreshDataForFence(const CLFenceManager_Type::Fence &)
Fence: refreshDataForFence, %{private}s
void CLFenceDataDownloadManager::removeAllFencesForDataDownload()
Fence: Removing all fences for download, fences, %{public}lu
Fence: disable download timer
void CLFenceDataDownloadManager::checkDownloadState()
Fence: avoid download check, isLocationServicesEnabled, %{public}d
Fence: no reachability, download not possbile
Download error too fresh, avoid new downloads, dt, %{private}.1lf
Fence: checkDownloadState, currentQueries, %{private}d
Fence: avoiding more concurrent downloads, %{private}d, max, %{private}d
Fence: already downloading fence, %{private}s
FenceDownloadState, %{private}s, r, %{private}.1lf, age, %{private}.1lf, reachability, %{private}d
Fence: ignoring fence, %s, downloads, %d, max, %d, reachability, %d
Fence: request tile download, %{private}s
Fence: fence, %s, urgent refresh, distance, %.1lf
Fence: Urgent refresh, %{private}s
Fence: fence, %s, is fresh for reachability, %d, age, %.1lf, thresh, %.1lf
Fence: fence, %s, need refresh, %d, age, %.1lf, num %d, %d, isRealtime, %d, isLarge, %d, isUrgentDownload, %d
Fence: request ALS/tile download, %{private}s
#Warning Fence: can't start query, %s, tag, %d
Fence: can't start query
Fence: request tile download, %s
Fence: checkDownloadState, currentNumOfQueries, %d, newNumOfQueries, %d, numOfStartedQueries, %d, nSmall, %d, nLarge, %d
int CLFenceDataDownloadManager::queryNearbyDataForFence(const CLFenceManager_Type::Fence &)
Fence: startQuery, fence, %s, tag, %d
Fence: Not querying nearbys for %s/%s; location services is disabled
unsigned int CLFenceDataDownloadManager::getNumOfPendingQueries()
Fence: getNumOfPendingQueries, numOfQueries, %u
void CLFenceDataDownloadManager::networkQueryDone(int, bool, int, int)
Fence: done tag, %d, isSuccess, %d, numOfAps, %d, numOfCells, %d
Fence: networkQueryDone, tag, %d, %s, isSuccess, %d
Fence: networkQueryDone, %{private}d, %{private}s, fence, %{private}s, success, %{private}d
Fence: networkQueryDone, newNumOfQueries, %u, isAvoidUpcomingFenceDownloads, %d, doesTagBelongToFence, %d
void CLFenceDataDownloadManager::onNetworkLocationNotification(int, const CLNetworkLocationProvider_Type::Notification &, const CLNetworkLocationProvider_Type::NotificationData &)
Fence: notificaiton, %d
#Warning Fence: Got kNotificationQueryResponseError tag %d
Fence: Got kNotificationQueryResponseFinished tag %d
void CLFenceDataDownloadManager::onFenceDownloadTimer(CLPersistentTimer *)
Fence: ignore onFenceDownloadTimer, shutdown?
Fence: onFenceDownloadTimer, since last, %{private}.1lf
void CLFenceDataDownloadManager::scheduleNextTimer()
Fence: scheduleNextTimer, interval, %.1lf, isLocaationServicesEnabled, %d
Schedule next download timer
Cancel next download timer
void CLFenceDataDownloadManager::onStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)
Fence: kNotificationReachability, notification, %{private}d, reachability, from, %{private}d, to, %{private}d
Fence: kNotificationMigration
void CLFenceDataDownloadManager::onManagerNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)
Fence: kNotificationLocationServicesStatus, locationd services, %d
void CLFenceDataDownloadManager::onBTANotification(int, const CLBTA_Type::Notification &, const CLBTA_Type::NotificationData &)
Fence: onBTANotifications, notification, %d
Fence: onBTANotifications, kNotificationConnectionState, realtime, %d, %d, large, %d, %d
void CLFenceDataDownloadManager::startMonitoringDownloadConditions()
Fence: startMonitoringDownloadConditions
void CLFenceDataDownloadManager::stopMonitoringDownloadConditions()
Fence: stopMonitoringDownloadConditions
virtual void CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLFenceDataDownloadManager_Type::Notification, NotificationData_T = CLFenceDataDownloadManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
void CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLFenceDataDownloadManager_Type::Notification, NotificationData_T = CLFenceDataDownloadManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
virtual void CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::removeClient(int) [Notification_T = CLFenceDataDownloadManager_Type::Notification, NotificationData_T = CLFenceDataDownloadManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
virtual bool CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLFenceDataDownloadManager_Type::Notification, NotificationData_T = CLFenceDataDownloadManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
virtual bool CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::clientRegistered(int, const Notification_T &) [Notification_T = CLFenceDataDownloadManager_Type::Notification, NotificationData_T = CLFenceDataDownloadManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
virtual bool CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::unregisterForNotification(int, const Notification_T &) [Notification_T = CLFenceDataDownloadManager_Type::Notification, NotificationData_T = CLFenceDataDownloadManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
virtual void CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::listClients() [Notification_T = CLFenceDataDownloadManager_Type::Notification, NotificationData_T = CLFenceDataDownloadManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
FenceAuthorizationManager
CLFenceAuthorizationManager
CLFenceAuthorizationManager::CLFenceAuthorizationManager(id<CLIntersiloUniverse>)
void CLFenceAuthorizationManager::onStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)
Fence: sMessage, %{public}s, fFenceDatabase is NULL
this->fFenceDatabase
Fence: Got kNotificationAirplaneMode, airplaneMode, %d, %d
kNotificationMigration
Fence: Got kNotificationMigration
void CLFenceAuthorizationManager::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)
Fence: onClientNotification, %s
kNotificationUninstallation
Removing fences for uninstalled app %s
kNotificationAuthorization
Fence: kNotificationAuthorization, exec, %s, bundleId, %s, bundlePath, %s, clientKey, %s
#Warning Could not retrieve fences from database for client %s
There are no fences for client %s
Fence: kNotificationAuthorization cleaning, %s
Removing fences,%lu, for bundle,%s.
Disabling all fences for denied app %s
Enabling all fences for newly authorized app %s
Adding fences,%lu, for bundle,%s.
kNotificationReset
#Warning Reset received; sending reset notification
kNotificationLocationServicesStatus
Location services is now %s; sending reset notification
Fence: Location services is now disabled; clearing fence status
Fence: invalidating download date
Reauthorizing clients by triggering fence reset
void CLFenceAuthorizationManager::onDataProtectionNotification(int, const CLDataProtectionManager_Type::Notification &, const CLDataProtectionManager_Type::NotificationData &)
Fence: notification, kNotificationEncryptedDataAvailability, data.availability, %d, unlockedSinceBoot, from, %d, to, %d, isStartMonitoring, %d
kNotificationEncryptedDataAvailability
void CLFenceAuthorizationManager::updateAuthorizedClients()
Fence: updateAuthorizedClients, can't add fence before the first unlock
Fence: updateAuthorizedClients, locationServicesEnabled, %d
Fence: checkClientStatus, %s
bool CLFenceAuthorizationManager::addFence(const CLFenceManager_Type::Fence &)
Fence: addFence, can't add fence before the first unlock
Adding fence, %s
Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Add,1,BundleId,%s,Name,%s,
bool CLFenceAuthorizationManager::removeFence(const CLFenceManager_Type::Fence &)
Fence: removeFence, can't remove fence before the first unlock
Removing fence %s/%s
bool CLFenceAuthorizationManager::removeFences(const std::string &)
Fence: removeFences, can't remove fence before the first unlock
Removing all fences for %s
numFences
int CLFenceAuthorizationManager::numFences(const std::string &, bool)
void CLFenceAuthorizationManager::getAuthorizedFences(CLFenceManager_Type::FencesVector &)
Fence: getAuthorizedFences, no region monitoring before the first unlock
Location services are disabled; no monitored fences
Retrieved %ld fences from database
%s/%s is not authorized; removing from authorized fences list
void CLFenceAuthorizationManager::getFencesForBundle(const std::string &, CLFenceManager_Type::FencesVector &)
Fence: getFencesForBundle, no region monitoring before the first unlock
void CLFenceAuthorizationManager::getAllFencesForBundle(const std::string &, CLFenceManager_Type::FencesVector &)
Fence: getAllFencesForBundle, no region monitoring before the first unlock
void CLFenceAuthorizationManager::isFenceAuthorized(const CLFenceManager_Type::Fence &, bool &, bool &)
Fence: isFenceAuthorized, no region monitoring before the first unlock
Fence: isFenceAuthorized, [%s]/%s/%s, isRegistered, %d, isAuthorized, %d
void CLFenceAuthorizationManager::lastDownloadTimeChanged(const std::string &, const std::string &, const std::string &, const double &)
Fence: lastDownloadTimeChanged, no region monitoring before the first unlock
void CLFenceAuthorizationManager::markDataDownloadInvalid()
Fence: markDataDownloadInvalid, no region monitoring before the first unlock
bool CLFenceAuthorizationManager::isClientAuthorized(const std::string &)
Fence: isClientAuthorized, %s, %s, %s, CLClientRegistrationResult, %d
bool CLFenceAuthorizationManager::isOnBehalfBundleAuthorized(const std::string &)
#Warning Empty bundle identifier should be passed in here
bool CLFenceAuthorizationManager::hasMonitoredFences(const std::string &)
Fence: hasMonitoredFences, no region monitoring before the first unlock
%d fences for %s; authorized %d
void CLFenceAuthorizationManager::checkClientStatusInternal(const std::string &, bool)
%s: hasMonitoredFences %d, monitoringAdded %d airplane %d
%s is now a fence client, airplane, %d
%s is no longer a fence client, airplane, %d
void CLFenceAuthorizationManager::createFenceDatabase(const char *)
Fence: releaseFenceDatabase, fFenceDatabase, %p, fWasUnlockedSinceBoot, %d, reason, %s
virtual void CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLFenceAuthorizationManager_Type::Notification, NotificationData_T = CLFenceAuthorizationManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
void CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLFenceAuthorizationManager_Type::Notification, NotificationData_T = CLFenceAuthorizationManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
virtual void CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::removeClient(int) [Notification_T = CLFenceAuthorizationManager_Type::Notification, NotificationData_T = CLFenceAuthorizationManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
virtual bool CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLFenceAuthorizationManager_Type::Notification, NotificationData_T = CLFenceAuthorizationManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
virtual bool CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::clientRegistered(int, const Notification_T &) [Notification_T = CLFenceAuthorizationManager_Type::Notification, NotificationData_T = CLFenceAuthorizationManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
virtual bool CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::unregisterForNotification(int, const Notification_T &) [Notification_T = CLFenceAuthorizationManager_Type::Notification, NotificationData_T = CLFenceAuthorizationManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
virtual void CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::listClients() [Notification_T = CLFenceAuthorizationManager_Type::Notification, NotificationData_T = CLFenceAuthorizationManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
LastFenceActivityTimestamp
fenceMonitor
T^{CLFenceMonitor=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{map<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<std::__1::pair<const CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus> > >={__tree<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>, std::__1::less<CLFenceManager_Type::Fence>, true>, std::__1::allocator<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>, std::__1::less<CLFenceManager_Type::Fence>, true> >=Q}}}{list<CLFenceManager_Type::CombinedFence, std::__1::allocator<CLFenceManager_Type::CombinedFence> >={__list_node_base<CLFenceManager_Type::CombinedFence, void *>=^{__list_node_base<CLFenceManager_Type::CombinedFence, void *>}^{__list_node_base<CLFenceManager_Type::CombinedFence, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLFenceManager_Type::CombinedFence, void *> > >=Q}}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLFenceMonitorCell=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{map<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<std::__1::pair<const CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus> > >={__tree<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus>, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus>, std::__1::less<CLFenceManager_Type::Fence>, true>, std::__1::allocator<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus>, std::__1::less<CLFenceManager_Type::Fence>, true> >=Q}}}I{map<CLCell, CLFenceMonitorCell::CellStatus, std::__1::less<CLCell>, std::__1::allocator<std::__1::pair<const CLCell, CLFenceMonitorCell::CellStatus> > >={__tree<std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus>, std::__1::__map_value_compare<CLCell, std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus>, std::__1::less<CLCell>, true>, std::__1::allocator<std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLCell, std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus>, std::__1::less<CLCell>, true> >=Q}}}{set<CLCell, std::__1::less<CLCell>, std::__1::allocator<CLCell> >={__tree<CLCell, std::__1::less<CLCell>, std::__1::allocator<CLCell> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<CLCell, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<CLCell> >=Q}}}{set<CLCell, std::__1::less<CLCell>, std::__1::allocator<CLCell> >={__tree<CLCell, std::__1::less<CLCell>, std::__1::allocator<CLCell> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<CLCell, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<CLCell> >=Q}}}^{__CFRunLoopTimer}{unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client> >={__compressed_pair<CLTelephonyService_Type::Client *, std::__1::default_delete<CLTelephonyService_Type::Client> >=^{Client}}}@{CLDistanceCalc=ddddd}}{CLFenceMonitorWifi=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{map<CLFenceManager_Type::Fence, bool, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<std::__1::pair<const CLFenceManager_Type::Fence, bool> > >={__tree<std::__1::__value_type<CLFenceManager_Type::Fence, bool>, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, bool>, std::__1::less<CLFenceManager_Type::Fence>, true>, std::__1::allocator<std::__1::__value_type<CLFenceManager_Type::Fence, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLFenceManager_Type::Fence, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, bool>, std::__1::less<CLFenceManager_Type::Fence>, true> >=Q}}}B@{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}@{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}BBBd{CLPowerAssertion=^^?i^v^{__CFString}dd@}dIB{vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}^{AccessPoint}{__compressed_pair<CLWifiService_Type::AccessPoint *, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}}}dB{AssociationState={optional<CLWifiService_Type::AccessPoint>=(?=c{AccessPoint={CLMacAddress=Q}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}iiiddB})B}}BddddddB{shared_ptr<CLWifiAccessPointLocationService>=^{CLWifiAccessPointLocationService}^{__shared_weak_count}}{CLFenceMonitorWifiLogicExternal=^^?@}{CLFenceMonitorWifiLogic=}}i{unique_ptr<CLBluetoothService_Type::Client, std::__1::default_delete<CLBluetoothService_Type::Client> >={__compressed_pair<CLBluetoothService_Type::Client *, std::__1::default_delete<CLBluetoothService_Type::Client> >=^{Client}}}{unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client> >={__compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> >=^{Client}}}{unique_ptr<CLFenceMonitorCell_Type::Client, std::__1::default_delete<CLFenceMonitorCell_Type::Client> >={__compressed_pair<CLFenceMonitorCell_Type::Client *, std::__1::default_delete<CLFenceMonitorCell_Type::Client> >=^{Client}}}{unique_ptr<CLFenceMonitorWifi_Type::Client, std::__1::default_delete<CLFenceMonitorWifi_Type::Client> >={__compressed_pair<CLFenceMonitorWifi_Type::Client *, std::__1::default_delete<CLFenceMonitorWifi_Type::Client> >=^{Client}}}{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLCompanionNotifier_Type::Client, std::__1::default_delete<CLCompanionNotifier_Type::Client> >={__compressed_pair<CLCompanionNotifier_Type::Client *, std::__1::default_delete<CLCompanionNotifier_Type::Client> >=^{Client}}}@@@BBBBBBB^{CLPersistentTimer}^{CLPersistentTimer}^{CLPersistentTimer}dd^{CLPersistentTimer}{CLPowerAssertion=^^?i^v^{__CFString}dd@}Bd{unique_ptr<CLGnssProvider_Type::Client, std::__1::default_delete<CLGnssProvider_Type::Client> >={__compressed_pair<CLGnssProvider_Type::Client *, std::__1::default_delete<CLGnssProvider_Type::Client> >=^{Client}}}diidiiddBBddBBBBdd^{__CFRunLoopTimer}BccdB^{CLPersistentTimer}ddddddddB@{CLDistanceCalc=ddddd}@@},N,V_fenceMonitor
FenceMonitor
FenceMonitorWatchdog
FenceUseCellPositioning
CLFenceMonitor::CLFenceMonitor(id<CLIntersiloUniverse>)
Fence: Overriding cell positioning usage to %{private}d
FenceUseWifiPositioning
Fence: Overriding WiFi positioning usage to %{private}d
FenceUseGpsPositioning
Fence: Overriding GPS positioning usage to %{private}d
FenceUsePipelinePositioning
Fence: Overriding Pipeline positioning usage to %{private}d
FenceUseContinuousPositioning
Fence: Overriding continuous positioning usage to %{private}d
FenceIssueDelayedTriggers
Fence: Overriding FenceIssueDelayedTriggers to %{private}d
FenceContinousTrackingInterval
Fence: fWakeIntervalSeconds, %.1lf
FenceMonitorDelayedTriggerCountMax
Fence: fDelayedTriggerCountMax, %d
FenceMonitorDelayedTriggerIntervalSeconds
Fence: fDelayedTriggerIntervalSeconds, %.1lf
FenceMonitorNormalScan
Fence: fNormalScan, %d
FenceMonitorLowPriorityScan
Fence: fLowPriorityScan, %d
FenceMonitorIsConsolidateTriggersEnabled
Fence: fIsConsolidateTriggersEnabled, %d
FenceMonitorConsolidatedTriggersTimeInterval
Fence: fConsolidatedTriggersTimeInterval, %.1lf
FenceMonitorIsScheduleContTrackingWakes
Fence: fIsScheduleContTrackingWakes, %d
FenceMonitorIsTriggerOnTether
Fence: fIsTriggerOnTether, %d
FenceMonitorUseActivityAlarm
Fence: fIsUseActivityAlarm, %d, activityAlarmAvailable, %d
Fence: failed to allocate, fConsolidatedTrigger
Fence: can't check airplane mode
~CLFenceMonitor
void CLFenceMonitor::startMonitoringFences(const CLFenceManager_Type::FencesVector &)
Fence: startMonitoringFences, fences, %{public}lu, status, %{private}s
void CLFenceMonitor::restartMonitoringForAllFences()
Fence: restartMonitoringForAllFences
void CLFenceMonitor::stopMonitoringFences(const CLFenceManager_Type::FencesVector &)
Fence: stopMonitoringFences, fences, %{public}lu
void CLFenceMonitor::startMonitoring(const CLFenceManager_Type::Fence &, const CLFenceMonitorLogic::FenceMonitoringStatus &, bool)
Fence: startMonitoring, fence, %{private}s
void CLFenceMonitor::updateSubscriptions(const size_t, const size_t)
Fence: registerForNotification, location, numOfFencesOld, %{private}lu, numOfFenceNew, %{private}lu
Fence: unregisterForNotification, location, numOfFencesOld, %{private}lu, numOfFenceNew, %{private}lu
void CLFenceMonitor::stopMonitoringAFenceNow(const CLFenceManager_Type::Fence &)
Fence: stopMonitoringNow, fence, %{private}s
Fence: stopMonitoringNow, no such fence, %{private}s
void CLFenceMonitor::startMonitoringNow(const CLFenceManager_Type::Fence &, const CLFenceMonitorLogic::FenceMonitoringStatus &)
Fence: startMonitoringNow, fence, %{private}s, status, %{private}s
Fence: startMonitoringNow, fence, %{private}s, is already in fMonitoredFences
Fence: crirital error!
Fence: Location services is disabled; not starting monitoring for %{private}s/%{private}s
Fence: startMonitoringNow, %{private}s
Fence: filtered fLastLocation, %{private}s
Fence: Seeding fence %s/%s with location <%+.8f,%+.8f> acc %.2f timestamp %.2f lifespan %.1lf
Fence: request scan, current location, %{private}s
Fence: Started monitoring fence, %s
Fence: Started monitoring monitoringStatus, %s
Fence: Started monitoring fence %s/%s (<%+.8f,%+.8f>, radius %.3f, eff radius %.3f, accuracy %.3f, active tech %d)
Fence: fence is already monitored, %{private}s
void CLFenceMonitor::stopMonitoringAFence(CLFenceMonitorLogic::MonitoredFencesIter &)
Fence: stopMonitoring, %{private}s
void CLFenceMonitor::handleMonitoringDataChanged(const CLFenceManager_Type::Fence &)
Fence: Got monitoring data changed for %{private}s/%{private}s
MonitoringTechOptions CLFenceMonitor::getAvailableTech()
Fence: location services is disabled, no tech available
MonitoringTechOptions CLFenceMonitor::getRequiredTechLevel(const CLFenceMonitorLogic::MonitoredFencesIter &, const CLDaemonLocation &)
Fence: fence, %s, requiredTech, %s, fine, %d, large, %d
void CLFenceMonitor::adjustTechLevel(const CLFenceMonitorLogic::MonitoredFencesIter &, MonitoringTechOptions, bool)
Fence: adjustTechLevel, fence, %s, newOptions, %s, availableTech, %s, statusChanged, %d
Fence: stopOptions, %s
Fence: Stopping tech 0x%x (active is 0x%x) for %s/%s
Fence: startOptions, %s
Fence: Starting tech 0x%x (active is 0x%x) for %s/%s
Fence: fence, %s, newTech, %s, status, %s
Fence: Tech level for, %s, adjusted to, 0x%x, %s
void CLFenceMonitor::handleLocation(const CLDaemonLocation &)
Fence: handleLocation, location, %{private}s, services, %{private}d, airplane, %{private}d, connected, %{private}d
Fence: handleLocation, Ignoring cell or LAC position as per defaults
Fence: handleLocation, Ignoring WiFi position as per defaults
Fence: handleLocation, Ignoring GPS position as per defaults
Fence: handleLocation, Ignoring Pipeline position as per defaults
Fence: cancelLocationWatchdog, num fences, %lu, location type, %s
Fence: Handling location, %{private}+.8f, %{private}+.8f, acc, %{private}.2f, timestamp, %{private}.1lf
Fence: dispatch, handleLocation, fence, %s, monitoringStarted, %d, slc, %d, distanceFromPrevHandledLocaiton, %.1lf
Fence: ignore location update, kFenceMonitorFarFarAway, %lf
Fence: ignore location update, locationChangedSignificantly, %d
Fence: request a scan to comfirm cell location, fences, %lu
Fence: cancelLocationWatchdog, wifi off, minDistance, %lf
Fence: requesting a scan, numOfFencesNeedScan, %d, minDistanceToFence, %.1lf
handleLocation.cell2wifi
Fence: avoid a scan, numOfFencesNeedScan, %d, minDistanceToFence, %.1lf
fenceUpdate
horizontalAccuracy
numOfDispatchedChecks
minDistanceToFence
Fence: Dispatch continuous engagement
void CLFenceMonitor::handleLocationFence(const CLDaemonLocation &, const CLFenceManager_Type::Fence &)
#Warning Fence: Attempt to handle location <%+.8f,%+.8f> acc %.2f for non-present fence %s/%s
void CLFenceMonitor::handleLocationMonitoredFence(const CLDaemonLocation &, CLFenceMonitorLogic::MonitoredFencesIter &)
Fence: %s, filtering unwanted, %s, nofitication, not interested in entry
Fence: %s, filtering unwanted, %s, nofitication, not interested in exit
Fence: %s, filtering unwanted, %s, nofitication, has not achieved settled state yet
Fence: %s, filtering unwanted, %s, nofitication, never achieved settled state for entry notification
Fence: %s, filtering unwanted, %s, nofitication, not interested in conservative entry
Fence: fenceUpdate, %s, bundle, %s, type, %-16s, loc, %12.7lf, %12.7lf, acc, %4.0lf, distance, %9.0lf, tech, %4s%s, change, %d, cont, %d, fence, %12.8lf, %12.8lf, %.1lf, %.1lf, sCount, %d, %d, trig, %d, %d, sinceLastLoc, %.1lf, events, 0x%08x, status, %-10s => %-10s, settled state, %s ==> %s, cantShiftButNeedTo, %d
Fence: Adjusting technologies based on, %+.8f,%+.8f, acc, %.2f, distance, %.1lf
CLFenceMonitor
skyhook is no longer supported
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Daemon/Core/Fence/CLFenceMonitor.mm
void CLFenceMonitor::handleNoWifiApsArea()
Fence: handleNoWifiApsArea, recalculated, %d, fMinDistanceToFence, %.1lf, fMinDistanceToFenceTimestamp, %.1lf
void CLFenceMonitor::checkPostponeContinuousTracking(const CLLocationType &, const bool)
Fence: postpone tracking timer
void CLFenceMonitor::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)
Fence: Ignoring expired location <%+.8f, %.8f>, acc %.2f, timestamp %.2f, lifespan %.2f
#Warning Fence: Got unknown location notification %d
void CLFenceMonitor::onCellMonitorNotification(int, const CLFenceMonitor_Type::Notification &, const CLFenceMonitor_Type::NotificationData &)
#Warning Fence: Cell monitoring is disabled; ignoring cell monitor notification %d
Fence: Got kNotificationTriggerReceived from cell
cell.kNotificationTriggerReceived
Fence: Got kNotificationDelayTriggerReceived from cell
Fence: Got cell kNotificationMonitoringAvailable, available, %d
cell.kNotificationMonitoringAvailable
#Warning Got unknown cell monitor notification %d
void CLFenceMonitor::onWifiMonitorNotification(int, const CLFenceMonitor_Type::Notification &, const CLFenceMonitor_Type::NotificationData &)
#Warning WiFi monitoring is disabled; ignoring cell monitor notification %d
Fence: Got kNotificationTriggerReceived from WIFI, cancelDelayedDeAssociationTrigger, %d
wifi.kNotificationTriggerReceived
Fence: Got kNotificationDelayTriggerReceived from WIFI
Fence: Got WiFi kNotificationMonitoringAvailable, available, %d
wifi.kNotificationMonitoringAvailable
Fence: Got kNotificationReCheckContinuousEngagement
Fence: Got kNotificationNoLocationAfterScan
Fence: Got kNotificationFenceDownloadRequest
#Warning Fence: Got unknown WiFi monitor notification %d
void CLFenceMonitor::engageContinuousTrackingIfNeeded()
Fence: engageContinuousTrackingIfNeeded, now, %d, FenceMonitoWifi, %d, kNotoficationLocationChanged, %d, wifiTracking, %d, isLocationEnabled, %d, isWifiPowered , %d
Fence: location services disabled, no continous tracking, %d, isAirplaneMode, %d, cConnected, %d
Fence: FenceMonitorWifi needs tracking
Fence: SLC wants to track the current location
Fence: numOfMonitoredFences, %d, simple, enable cont tracking
Fence: engageContinuousTrackingIfNeeded, isEngageContinousTracking, %d, numOfMonitoredFences, %d
Fence: engageContinuousTrackingIfNeeded, timeToNextTimer, %lf
engageContinuousTrackingIfNeeded
#Warning Unhandled notification %d
void CLFenceMonitor::onStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)
Fence: Got kNotificationAirplaneMode, airplaneMode, %{public}d, %{public}d, %{public}d
kNotificationAirplaneMode
Fence: invalidate location watchdog
Fence: Got kNotificationBattery, level, %{private}lf, charged, %{private}d, connected, %{private}d, wasConnected, %{private}d
kNotificationBattery
Fence: tether triggers are disabled
#Warning Fence: unknown notification, %d
void CLFenceMonitor::onWifiNotificationScan(int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)
Fence: cached isWifiPowered, %d, isLocationEnabled, %d, numOfFences, %lu, notificaiton, %d, fIsWaitingForLocationCount, %d, fScanRetryCounter, %d, reachability, %d
scan result, count, wait, %{public}d, retry, %{public}d, error
#Warning Fence: monitor, got kNotificationScanError
Fence: monitor, got kNotificationScan, scanResultVector, %{private}lu, scanTimestamp, %{private}.1lf, age, %{private}.1lf
#Warning Fence: monitor, got unhandled, %d
Fence: no reachability, expedite watchdog, %.1lf
Fence: no urgent watchdog, GPS client, %p, urgentWatchdogActivation, %.1lf
Fence: startScan, requesting a scan due to an error / empty scan, fScanRetryCounter, %d
onWifiNotification
Fence: expedite location watchdog due to empty / error scan , %d, %d, urgentWatchdogActivation, %.1lf
void CLFenceMonitor::onWifiNotificationState(int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)
Fence: cached isWifiPowered, %{public}d, isLocationEnabled, %{public}d, numOfFences, %{public}lu, notification, %{public}d, wait, %{public}d, count, %{public}d, reachability, %{public}d
Fence: Got kNotificationPower, isWifiPowered, %{public}d
void CLFenceMonitor::triggerReceived(const char *, bool)
Fence: triggerReceived, reason, %{private}s, schedule a consolidated trigger, %{private}p, fIsConsolidatedTriggerPending, %{private}d, fConsolidatedTriggersTimeInterval, %{private}.2lf, isLocationWatchdogNeeded, %{private}d, %{private}d
void CLFenceMonitor::triggerReceivedNow()
Fence: triggerReceivedNow, isWifiPowered, %{public}d, isLocationEnabled, %{public}d, numOfFences, %{public}lu, airplane, %{public}d, connected, %{private}d, watchdogNeeded, %{private}d, minDist, %{private}.1lf, %{private}.1lf, minDistNextWake, %{private}.1lf
Fence: triggerReceivedNow, isWifiPowered, %d, isLocationEnabled, %d, numOfFences, %lu, airplane, %d, fIsLocationWatchdogNeeded, %d, fMinDistanceToFence, %.1lf, %.1lf, minDistanceToFencesOnNextWake, %.1lf
Fence: Trigger received; performing WiFi scan, minDistanceToFence, %.1lf
Fence: ignoring trigger event, isWifiPowered, %d, locationServicesEnabled, %d, airplane, %d, cConnected, %d, numOfFences, %zu, fMinDistanceToFence, %.1lf, %.1lf
bool CLFenceMonitor::canPerformMonitoringForFence(const CLFenceManager_Type::Fence &, CLFenceManager_Type::Fence &)
Fence: Cannot monitor %{public}s/%{private}s because the radius is too large, suggesting, %{private}.1lf
void CLFenceMonitor::requestScan()
Fence: last watchdog fired, %.1lf, ago, watchdogInterval, %1lf
need a scan, count, %{public}d, %{public}d, lwatchdog, %{private}.1lf, interval, %{private}.1lf, needWatchdog, %{public}d
Fence: startScan, type, %d, requesting a scan, %.1lf, %.1lf, since last scan, watchdog armed in, %.1lf, at, %.1lf, numOfFences, %lu, fIsWaitingForLocationCount, %d, isWifiPowered, %d, fScanRetryCounter, %d, airplane, %d, cConnected, %d
requestScan
Fence: startScan, requesting a receovery scan
requestScan.recovery
void CLFenceMonitor::scheduleLocationWatchdog(CFTimeInterval)
Fence: scheduleLocationWatchdog, at %{private}.1lf, in, %{private}.1lf, seconds
Fence: scheduleLocationWatchdog, ignore, shutdown?
void CLFenceMonitor::cancelLocationWatchdog()
Fence: loc watchdog cancel, count, %{public}d, %{public}d, client, %{public}p
Fence: cancelLocationWatchdog
Fence: cancelLocationWatchdog, ignore, shutdown?
void CLFenceMonitor::onLocationWatchdogExpired(CLPersistentTimer *)
loc watchdog expired, count, %{public}d, %{public}d
Fence: onLocationWatchdogExpired, since last, %.1lf, isLocationEnabled, %d, last scan, %.1lf, fIsWaitingForLocationCount, %d, sinceLastGpsSession, %.1lf, %.1lf, sinceLastContTimer, %.1lf, %.1lf, fScanRetryCounter, %d
onLocationWatchdogExpired
sinceLastGpsSession
kSecondsBetweenGPSSessions
sinceLastContTimer
Fence: startScan, fIsWaitingForLocationCount, %d, request one more scan, next date, %.1lf, watchDogInterval, %.1lf
Fence: onLocationWatchdogExpired, increment fIsWaitingForLocationCount, %d
void CLFenceMonitor::onDelayedTriggerTimer(CLPersistentTimer *)
Fence: onDelayedTriggerTimer, sleep period, %.1lf, isLocationEnabled, %d, count, %d, %d, sinceLastTrigger, %.1lf
onDelayedTriggerTimer
Fence: onDelayedTriggerTimer, trigger already processed, sinceLastTrigger, %.1lf
void CLFenceMonitor::onDeAssTriggerTimer(CLPersistentTimer *)
Fence: onDeAssTriggerTimer, sleep period, %.1lf, isLocationEnabled, %d, count, %d, %d, sinceLastTrigger, %.1lf
onDeAssTriggerTimer
Fence: onDeAssTriggerTimer, trigger already processed, sinceLastTrigger, %.1lf
void CLFenceMonitor::onContinousTrackingTimer(CLPersistentTimer *)
Fence: onContinousTrackingTimer, sleep period, %.1lf, isLocationEnabled, %d, sinceLastTrigger, %.1lf
onContinousTrackingTimer
Fence: onContinousTrackingTimer, trigger already processed, sinceLastTrigger, %.1lf
virtual void CLFenceMonitor::shutdown()
Fence: CLFenceMonitor, shutdown
void CLFenceMonitor::onConsolidatedTrigger(CFRunLoopTimerRef)
Fence: where is my timer?
Fence: ignore, onConsolidatedTrigger, shutdown?
Fence: onConsolidatedTrigger, calling triggerReceivedNow
void CLFenceMonitor::requestWifiLocationUpdate(const char *)
Fence: requestWifiLocationUpdate, reason, %s
Fence: request update, reason, %{private}s
CLFenceManager_Type::FenceStatus CLFenceMonitor::getCurrentFenceState(const CLFenceManager_Type::Fence &)
Fence: requestRegionState, %{private}s/%{private}s
Fence: requestRegionState, %{public}s/%{public}s, NOT FOUND
Fence: requestRegionState, %s/%s, currentState, %d, %s
void CLFenceMonitor::createActivityAlarm(const char *)
Fence: createActivityAlarm, %{private}s, %{private}p, fIsUseActivityAlarm, %{private}d
void CLFenceMonitor::createActivityAlarm(const char *)_block_invoke
Fence: activityAlarmHandler, %{private}p, %{private}s, trigger, %{private}d
activityAlarmHandler
createActivityAlarm-cleanup
Fence: createActivityAlarm, %s, created, %p, trigger, %d
void CLFenceMonitor::releaseActivityAlarm(const char *)
Fence: releaseActivityAlarm, %{private}s, %{private}p
void CLFenceMonitor::monitorSettled(bool)
Fence: start monitoring scenario trigger settled
Fence: stop monitoring scenario trigger settled
void CLFenceMonitor::onScenarioTrigger(RTScenarioTrigger *)
Fence: received scenario trigger, %{private}s
void CLFenceMonitor::onSettledTimerExpired(CLPersistentTimer *)
Fence: settled timer expired
void CLFenceMonitor::handleSettled()
Fence: dispatch, handleSettled, fence, %s, monitoringStarted, %d, monitoringSettled, %d
void CLFenceMonitor::stopGps()
Fence: unregister gps client, %{private}p
(No)
(Yes)
virtual void CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLFenceMonitor_Type::Notification, NotificationData_T = CLFenceMonitor_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
void CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLFenceMonitor_Type::Notification, NotificationData_T = CLFenceMonitor_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
virtual void CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::removeClient(int) [Notification_T = CLFenceMonitor_Type::Notification, NotificationData_T = CLFenceMonitor_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
virtual bool CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLFenceMonitor_Type::Notification, NotificationData_T = CLFenceMonitor_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
virtual bool CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::clientRegistered(int, const Notification_T &) [Notification_T = CLFenceMonitor_Type::Notification, NotificationData_T = CLFenceMonitor_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
virtual bool CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::unregisterForNotification(int, const Notification_T &) [Notification_T = CLFenceMonitor_Type::Notification, NotificationData_T = CLFenceMonitor_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
virtual void CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::listClients() [Notification_T = CLFenceMonitor_Type::Notification, NotificationData_T = CLFenceMonitor_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
CLFenceMonitorWifi
FenceWiFiScanOnWake
CLFenceMonitorWifi::CLFenceMonitorWifi(id<CLIntersiloUniverse>)
Performing WiFi scan on system wake
WIFI_LOC: fIsUseNetworkLocationProvider = %d
#Warning Fence: failed to getAssociatedNetwork
Fence: failed to determine airplane mode
virtual void CLFenceMonitorWifi::shutdown()
Fence: CLFenceMonitorWifi, shutdown
void CLFenceMonitorWifi::setAirplaneMode(bool)
Fence: airplane mode is now, %d, was, %d
bool CLFenceMonitorWifi::startMonitoring(const CLFenceManager_Type::Fence &, bool)
Fence: Starting to monitor %{private}s/%{private}s for %{private}s
bool CLFenceMonitorWifi::stopMonitoring(const CLFenceManager_Type::Fence &)
Fence: Stopping monitoring for %{private}s/%{private}s
void CLFenceMonitorWifi::handleMonitoringDataChanged(const CLFenceManager_Type::Fence &)
Fence: Got monitoring data changed for %{private}s/%{private}s; recalculating
bool CLFenceMonitorWifi::recalculateIfNeeded()
Fence: isRecalculate, %{private}d, fIsRecalculationPending, %{private}d, sinceLastRecalculationTrigger, %{private}.1lf
Fence: power assertion no longer needed
void CLFenceMonitorWifi::recalculate()
Fence: recalculate, take power assertion
Fence: ignore recalculation, shut down?
void CLFenceMonitorWifi::resetConsecutiveExits()
Fence: resetConsecutiveExits start, %.1lf, count, %d
void CLFenceMonitorWifi::recalculateNow()
Fence: ignoring recalculateNow, shut down?
Fence: Recalculating monitored WiFis for %{private}ld monitored fences
Fence: Visible APs are stale (from %{private}.2f), not using for fence calculation
Fence: Last visible APs are stale (from %{private}.2f), not using for fence calculation
Fence: Including %{private}ld visible APs in fence calculation (from %{private}.2f)
Fence: avoid fence calculateAPsForFences, numOfFences, %{private}lu, airplane, %{public}d
Fence: isWifiTrackingAvailable is false
Fence: no visible APs, need continuous tracking
Fence: fIsContinuousMonitoringNeeded, %d
Fence: exit sequence is too long, reset, sinceSequenceStart, %.1lf, %.1lf
Fence: countUpdate, countUpdated, %d, sinceSequenceStart, %6.1lf, sequenceThresh, %6.1lf, sequenceCount, %3d, newCount, %3d, airplane, %d, e, %lu, x, %lu, v, %lu
Fence: Setting %{private}ld background scan entry networks
Fence: Setting %{private}ld background scan exit networks
{vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}^{AccessPoint}{__compressed_pair<CLWifiService_Type::AccessPoint *, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}}}8@?0
Fence: recalculate, release power assertion
Fence: sending kNotificationReCheckContinuousEngagement
void CLFenceMonitorWifi::onStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)
Fence: Device woke; sending trigger
Fence: WiFi just lost (from %{private}d to %{private}d); sending trigger, aboutToSleep, %{private}d, recentlyWoke, %{private}d,
Disconnection
Fence: kNotificationReachability, aboutToSleep, request a delayed trigger as well, sinceLastDelayedTrigger, %f, isDeAssTriggerWanted, %d
Fence: about to sleep or recently woke without WoW, ignoring, kNotificationReachability
Fence: WiFi just connected (from %{private}d to %{private}d); sending trigger, aboutToSleep, %{private}d, recentlyWoke, %{private}d,
void CLFenceMonitorWifi::takePowerAssertionIfNeeded_nl(bool, const char *)
Fence: take power assertion, reason, %{private}s, airplane, %{private}d
Fence: power assertion not needed, reason, %{private}s, airplane, %{private}d, isMonitoringFences, %{private}d
db != nullptr
BEGIN EXCLUSIVE TRANSACTION
void CLSqliteTransaction::beginTransaction()
#sqlitetransaction, begin exclusive transaction failed
COMMIT
void CLSqliteTransaction::commit()
#sqlitetransaction, commit failed
void CLSqliteTransaction::rollback()
rollback #sqlitetransaction
ROLLBACK TRANSACTION
#sqlitetransaction, rollback transaction failed
resultCode
path
main
Path unavailable
locationServicesAuthEvent.isLocationServicesEnabled() == fInput.isLocationServicesEnabled
CLGeomagneticModelProviderSilo
CLGeomagneticModelProvider
const T &CMQueue<CLSwimStrokeCounter::VectorSample>::operator[](const size_t) const [T = CLSwimStrokeCounter::VectorSample]
com.apple.locationd.CLSEUnzipQueue
https://cl3.apple.com/1/v1/
clsef.bin.gz
clsef.bin
CLSignalEnvironmentProviderSilo
CLSignalEnvironmentProvider
virtual bool CLSignalEnvironmentProvider::registerForNotificationInternal(const CLSignalEnvironmentProvider_Type::Notification &)
CLSE, Client registered for notification %{public}d
virtual bool CLSignalEnvironmentProvider::unregisterForNotificationInternal(const CLSignalEnvironmentProvider_Type::Notification &)
CLSE, Client unregistered for notification %{public}d
void CLSignalEnvironmentProvider::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)
CLSE,fromSignalEnv,%{public}d,toSignalEnv,%{public}d
void CLSignalEnvironmentProvider::downloadFileIfNeeded()
CLSE,download request,url,%{public}s,storeTo,%{public}s,retryInterval,%{public}.1lf
CLSE,could not setUpdateSource AVL file updater
CLSE,could not setUpdateRate AVl file updater
void CLSignalEnvironmentProvider::onSignalEnvironmentUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)
CLSE,download status,NONE
CLSE,download status,STARTED
CLSE,download status,COMPLETED
CLSE,downloaded,%{public}s
#Warning,Cannot set protection class for CLSE downloaded file,%{public}s
void CLSignalEnvironmentProvider::onSignalEnvironmentUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)_block_invoke
CLSE,decompressed,%{public}s,to,%{public}s
#Warning,Cannot set protection class for CLSE decompressed file,%{public}s
CLSE,download status,FAILED
CLSE,download request failed,%{public}s,retryMultiplier,%{public}d
CLSE,download status,%{public}d
virtual void CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLSignalEnvironmentProvider_Type::Notification, NotificationData_T = CLSignalEnvironmentProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLSignalEnvironmentProvider_Type::Notification, NotificationData_T = CLSignalEnvironmentProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLSignalEnvironmentProvider_Type::Notification, NotificationData_T = CLSignalEnvironmentProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLSignalEnvironmentProvider_Type::Notification, NotificationData_T = CLSignalEnvironmentProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLSignalEnvironmentProvider_Type::Notification, NotificationData_T = CLSignalEnvironmentProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLSignalEnvironmentProvider_Type::Notification, NotificationData_T = CLSignalEnvironmentProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::listClients() [Notification_T = CLSignalEnvironmentProvider_Type::Notification, NotificationData_T = CLSignalEnvironmentProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLManagedLocationDatabase<CLWifiLocationDatabase, CLWifiLocationDatabase::WifiData>::onDataAvailable() [Database = CLWifiLocationDatabase, DataType = CLWifiLocationDatabase::WifiData]_block_invoke
void CLManagedLocationDatabase<CLWifiLocationDatabase, CLWifiLocationDatabase::WifiData>::onDataAvailable() [Database = CLWifiLocationDatabase, DataType = CLWifiLocationDatabase::WifiData]
wifiPowerEvent.isPoweredOff()
CL::WifiPositioning::Policies::ScheduleClientUpdateTimer::Output CL::WifiPositioning::Policies::ScheduleClientUpdateTimer::HandleEvent::operator()(const Events::Wifi::ScanErrorBusy &) const
TlurError, ScanErrorBusy, %s, retry in, %lld
CL::WifiPositioning::Policies::ScheduleClientUpdateTimer::Output CL::WifiPositioning::Policies::ScheduleClientUpdateTimer::HandleEvent::operator()(const Events::Motion::CoarseMovement &) const
@WifiTimer, motion, update, %{public}d, interval, %{public}d
CL::WifiPositioning::Policies::ScheduleClientUpdateTimer::Output CL::WifiPositioning::Policies::ScheduleClientUpdateTimer::HandleEvent::operator()(const Events::LocationRequest &) const
@WifiTimer, locreq, update, %{public}d, %{public}d, interval, %{public}d
RunModelMetsScale
RunVMThreshold
virtual float CLNatalieRunModel::computeWorkRateMETS(const CLNatalieModelInput &)
Run, WorkRate, %f, distance(m), %f, duration(s), %f, mets, %f, fMetsScaling, %f, endTime, %f, currentPace, %f, isStroller, %d, metsStrollerCorrected, %f
Run, WorkRate, Grade type, %d, vertical speed %f, interval %f, workrate %f, mets %f, mets + grade %f, percent grade %f
Run, WorkRate, energy, %.1f,mets from intensity, %.1f
virtual float CLNatalieRunModel::computeFitnessMachineMETS(const CLNatalieModelInput &)
Run,fitness machine,computeTime,%.3f,startTime,%.3f,wr,%f,vertSpeed,%f,mets,%f
CLRestingNotifier
CLRemoteMotionAlarmSilo
streamingConnection
T@"<CLLocationStreamingConnectionManagerServiceProtocol>",&,N,V_streamingConnection
motionAlarmClients
T@"NSMutableSet",&,N,V_motionAlarmClients
lastKnownMotionState
Ti,N,V_lastKnownMotionState
resendTimer
T@"CLTimer",&,N,V_resendTimer
revertToUnknownTimer
T@"CLTimer",&,N,V_revertToUnknownTimer
CLUnifiedCellLocationProviderSilo
+[CLUnifiedCellLocationProviderAdapter(IsSupported) isSupported]
@ClxCell, supported, %{public}d
UnifiedCell
CellShowUIUnknownCell
CLUnifiedCellLocationProvider::CLUnifiedCellLocationProvider(id<CLIntersiloUniverse>)
CellLoc, fCellShowUIUnknownCell, %{public}d
CellIsUseNetworkLocationProvider
CellLoc, fIsUseNetworkLocationProvider, %{public}d
CellIsUseTilesManager
CellLoc, fIsUseTilesManager, %{public}d
CellLoc, Location Provider %{public}s set to %{public}d
@ClxCell, enabled, %{public}d
virtual CLUnifiedCellLocationProvider::~CLUnifiedCellLocationProvider()
CellLoc, delete CLUnifiedCellLocationProvider
virtual bool CLUnifiedCellLocationProvider::registerForNotificationInternal(const CLLocationProvider_Type::Notification &)
CellLoc, registerForNotificationInternal, notification, %{public}d
virtual bool CLUnifiedCellLocationProvider::unregisterForNotificationInternal(const CLLocationProvider_Type::Notification &)
CellLoc, unregisterForNotificationInternal, notification, %{public}d
virtual void CLUnifiedCellLocationProvider::shutdown()
CellLoc, shutdown
void CLUnifiedCellLocationProvider::onDpcSource()
CellLoc, onDpcSource
CellLoc, calling onDpcSource, refreshCellMonitor
Cell 
acc 
virtual void CLUnifiedCellLocationProvider::showCellUIDialog(const CLCell &, const CLDaemonLocation &, bool)
CellLoc, SHOW CELL UI : (%{private}s) <%{private}lf, %{private}lf> acc %{public}lf
CELL_LOC
Unknown Cell 
CellLoc, SHOW UNKNOWN CELL UI, %{private}s
Unknown Cell
void CLUnifiedCellLocationProvider::refreshCellState(const char *, bool)
CellLoc, refresh cell state
@CellFlow, refresh, %{public}s
ctfail
nonetwork
virtual void CLUnifiedCellLocationProvider::logCellRefreshOutcome(const char *)
@CellFlow, outcome, %{public}s
virtual CLNetworkLocationProvider::BestMatchLevel CLUnifiedCellLocationProvider::getCellFromTilesManager(const CLCell &, CLDaemonLocation &)
CellLoc, getCellFromTilesManager, fIsUseTilesManager, is false
v16@?0^{CLCellTilesManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{unique_ptr<CLFileDownload, std::__1::default_delete<CLFileDownload> >={__compressed_pair<CLFileDownload *, std::__1::default_delete<CLFileDownload> >=^{CLFileDownload}}}BBdddB^{CLPersistentTimer}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}ddiBBii{unique_ptr<CLICellTilesManagerExternal, std::__1::default_delete<CLICellTilesManagerExternal> >={__compressed_pair<CLICellTilesManagerExternal *, std::__1::default_delete<CLICellTilesManagerExternal> >=^{CLICellTilesManagerExternal}}}{unique_ptr<CLTileDownloader, std::__1::default_delete<CLTileDownloader> >={__compressed_pair<CLTileDownloader *, std::__1::default_delete<CLTileDownloader> >=^{CLTileDownloader}}}{CLTileDownloaderExternal=^^?}{CLTileDownloadPolicy=@dQ}{CLTilesSetCollection={vector<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >, std::__1::allocator<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > > >=^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}{__compressed_pair<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > *, std::__1::allocator<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > > >=^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}}}}B@B}8
v16@?0^{CLCoarseCellTilesManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{unique_ptr<CLFileDownload, std::__1::default_delete<CLFileDownload> >={__compressed_pair<CLFileDownload *, std::__1::default_delete<CLFileDownload> >=^{CLFileDownload}}}BBdBiBBii{unique_ptr<CLICoarseCellTilesManagerExternal, std::__1::default_delete<CLICoarseCellTilesManagerExternal> >={__compressed_pair<CLICoarseCellTilesManagerExternal *, std::__1::default_delete<CLICoarseCellTilesManagerExternal> >=^{CLICoarseCellTilesManagerExternal}}}{unique_ptr<CLTileDownloader, std::__1::default_delete<CLTileDownloader> >={__compressed_pair<CLTileDownloader *, std::__1::default_delete<CLTileDownloader> >=^{CLTileDownloader}}}{CLTileDownloaderExternal=^^?}{CLTileDownloadPolicy=@dQ}{CLTilesSetCollection={vector<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >, std::__1::allocator<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > > >=^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}{__compressed_pair<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > *, std::__1::allocator<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > > >=^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}}}}B@B}8
CellLoc, getCellFromTilesManager, isFound, %{public}d, cell, %{private}s, location, %{private}s
virtual void CLUnifiedCellLocationProvider::handleLocationFailed(const char *)
@ClxCell, Fix, 0, ll, N/A, Failed
bool CLUnifiedCellLocationProvider::isRegisteredOnNetwork()
CellLoc, TelephonyService is ready
CellLoc, not registered, cannot deduce cell fix, #CloneMe
virtual bool CLUnifiedCellLocationProvider::getCurrentCells()
CellLoc, current cell, %{private}s, isUse, %{public}d, index, %{public}zu
Cell
void CLUnifiedCellLocationProvider::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)
ClientManager notification received.
Location privacy reset, clearing location data.
Location services disabled, clearing location data.
Unhandled ClientManagerNotification.
status
void CLUnifiedCellLocationProvider::onCompanionNotification(int, const CLCompanionNotifier_Type::Notification &, const CLCompanionNotifier_Type::NotificationData &)
CellLoc, onCompanionNotification, notification, %{public}d, Tiles
void CLUnifiedCellLocationProvider::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)
CellLoc, received %{public}s
telNotification
CellLoc, location services are disabled, ignore scan result
CellLoc, disconnected from CT, cannot deduce cell fix, #CloneMe
disconnect
CellLoc, unknown CT notification %{public}s, #CloneMe
CellLoc, refresh cell monitor
ctnotify
void CLUnifiedCellLocationProvider::onDelayedCellPropagationTimer(CLPersistentTimer *)
CellLoc, ignoring, onDelayedCellPropagationTimer, timer, %{public}p, %{public}p
CellLoc, call refreshCellState
delayed
CellLoc, onDelayedCellPropagationTimer,since last trigger,%{public}.1lf,nextWakeDate,%{public}.1lf
void CLUnifiedCellLocationProvider::onNetworkLocationNotification(int, const CLNetworkLocationProvider_Type::Notification &, const CLNetworkLocationProvider_Type::NotificationData &)
CellLoc, cell queries failed, #CloneMe
alserror
CellLoc, recalculating current cell location, by waking the DPC, %{public}p
CellLoc, no client to report to
CLLteCellLocationDatabase::CLLteCellLocationDatabase(const char *, const CLSqliteDatabase::SqliteProperties &, double)
bool CLLteCellLocationDatabase::getLocation(const CLTelephonyService_Type::LteCell &, sqlite3_int64 &)
CELL_LOC: failed to bind %s
bool CLLteCellLocationDatabase::setLocation(const CLTelephonyService_Type::LteCell &, const CLDaemonLocation &)
CELL_CEN: adding cell, %s, rowid, %lld
bool CLLteCellLocationDatabase::getLocation(sqlite3_int64, CLTelephonyService_Type::LteCell &) const
0 && "Invalid trigger type."
CLSensorCalibrationStaticDetectorAccel
trigger != kTriggerTypeMoving || duration == 0.
LogGyroCalibrationStaticDetectorAccelState
void CLSensorCalibrationStaticDetectorAccel::processStaticMoving(bool, CLMotionTypeTimestamp)
moving,%d,now,%f
void CLSensorCalibrationStaticDetectorAccel::fire()
CLSensorCalibrationStaticDetectorAccel::fire()
readyX == readyY && readyX == readyZ
void CLSensorCalibrationStaticDetectorAccel::onAccelerometerData(const CLAccelerometer::Sample *, unsigned int)
RawAccelerometer,x,%20.20f,y,%20.20f,z,%20.20f,timestamp,%20.20f
FilteredAccelerometer,x,%20.20f,y,%20.20f,z,%20.20f,timestamp,%20.20f,readyX,%d
Variance,x,%20.20f,y,%20.20f,z,%20.20f,timestamp,%20.20f,Moving,%d
Accepted
Rejected
Replaced
AcceptedAndInsertMissing
std::vector<CLSwimDetectedLap> CLSwimLapDetect::addTurn(CLSwimDetectedTurn)
(stddev samples) w/ turn, %f, %d, w/o turn, %f, %d, threshold, %f, %f
Turn, %s, Time, %f, Total Strokes, %d, Current Strokes, %d, Style, %d, Result, %d
Converged,freestyle,%d,backstroke,%d,breaststroke,%d,butterfly,%d
bool CLSwimLapDetect::convergedHistoricalSessionTurns(CLSwimDetectedTurn, CLSwimStrokesPerTurnDistribution &) const
searchMedian, %f, historicalDistributionCount, %lu, historicalMatchingDistributionCount, %lu
std::pair<float, float> CLSwimLapDetect::getLapStrokeThreshold(CLSwimDetectedTurn) const
distribution,localLimits,min,%f,max,%f
distribution,historicalSessionLimits,min,%d,max,%f
distribution,lastGood-populationLimits,min,%d,max,%f
0.f <= val && val <= 1.f
std::vector<CLSwimDataInterface::StrokeEntry> CLSwimLapDetect::getStrokesInLap(float &, CLSwimDetectedLap) const
lap detected with one or less strokes,strokes,%lu,lapType,%d
merge_azimuth_ranges
merged=
, mergedRange 
AzimuthRangeSet CLPlosPolygon::blockedAzimuth(const Point &, const Polygon &)
az_prev is not initialized before usage
blockedAzimuth
origin 
, point 
, az,
, prev point,
merging start range 
 and end range 
blockedRanges has following contents:
getClosestPointOnPolygon
point,
, prev_point,
, point_iter,
, distanceSqr,
,min distance,
,closest,
,minClosestPoint,
std::vector<CLPlosPolygon::Particle> CLPlosPolygon::sampleExteriorPoints(const PolygonReal2D &, const float &, const float &)
#Warning, PLOS: invalid outside offset %{public}f
#Warning, PLOS: bad poly, bad!
std::vector<CLPlosPolygon::Particle> CLPlosPolygon::sampleParticlesOnPolygon(const PolygonReal2D &, float)
#Warning, PLOS: invalid step size %{public}f
#Warning, PLOS: miniscule edge!
CLPlosPolygon::PolygonReal2D CLPlosPolygon::inflatePolygon(const PolygonReal2D &, float)
#Warning, PLOS: invalid distance %{public}F
#Warning, PLOS: invalid polygon size %{public}d
#Warning, PLOS: edge too small!
CL::WifiPositioning::Policies::PrePositionCalculationStateUpdate::Output CL::WifiPositioning::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::Wifi::Scan &) const
TlurState, ScanNotify, %s, aps, %lu, state, %d, tte, %.1f
TlurState, unexpected emergency state, onWifiNotification, %d, WARNING
TlurState, Skip Process, %s
@WifiFlow, scanusage, aps, %{public}lu, type, %{public}s, lastscan, %{public}llu, use, %{public}d, bystander+, %{public}d, spectator+, %{public}d, reqtype, %{public}s
CL::WifiPositioning::Policies::PrePositionCalculationStateUpdate::Output CL::WifiPositioning::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::Wifi::ScanError &) const
#warning, scan error event, resetting current location update request
CL::WifiPositioning::Policies::PrePositionCalculationStateUpdate::Output CL::WifiPositioning::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::Wifi::ScanErrorBusy &) const
TlurError, ScanErrorBusy, %s
CL::WifiPositioning::Policies::PrePositionCalculationStateUpdate::Output CL::WifiPositioning::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::System::LocationServicesAuthorization &) const
TlurEmer, ToggleOn, tte, %.1f
CL::WifiPositioning::Policies::PrePositionCalculationStateUpdate::Output CL::WifiPositioning::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::AlsRequest::NetworkLocationProviderResults &) const
#pre-wifi-position-calculation-state-update, als request results indicate failure to request
normal
CL::WifiPositioning::Policies::PrePositionCalculationStateUpdate::Output CL::WifiPositioning::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::AlsResponse::WifiFinished &) const
TlurEmer, unexpected emergency state, onNetworkNotification, %d, WARNING
TlurState, AlsReply, aps, %d, tag, %d, state, %d, queryType, %d, tte, %.1f
CL::WifiPositioning::Policies::PrePositionCalculationStateUpdate::Output CL::WifiPositioning::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::LocationRequest &) const
@WifiFlow, locreq, %{public}s, %{public}s, current, %{public}s
CL::WifiPositioning::Policies::PrePositionCalculationStateUpdate::Output CL::WifiPositioning::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::Emergency::StateChange &) const
TlurEmer, StateChange, new, %d, prev, %d, now, %d
TlurEmer, Wifi, RequestOn
TlurEmer, EmergencyOff, ttff, %.1f, session, %.1f
TlurEmer, Wifi, RequestOff
Frozen
Static
cl::chrono::secondsf CL::WifiPositioning::Policies::PrePositionCalculationStateUpdate::HandleEvent::selectNextScanInterval(CLMotionActivity::Type) const
WifiTimer, %{public}d, motion, %{public}d, assoc, %{public}d
@WifiFlow, nextscan, %{public}d, emer, %{public}d, unassoc, %{public}d, movingap, %{public}d, assoc, %{public}d, motion, %{public}s
static void CL::WifiPositioning::Policies::PrePositionCalculationStateUpdate::HandleEvent::removeOldApsFromWifiScanHistory(cl::chrono::CFAbsoluteTimeClock::time_point, Types::WifiScanHistory *)
remove old APs from scan history, count, %{public}ld, max_secs, %{public}lld
CLRunningAggregatorAWDSilo
CLStepCountNotifier
CLSwimPersistence
SELECT * FROM SwimDistributions ORDER BY id DESC
INSERT INTO SwimDistributions (loiUuid, poolLength, style, mean, median, min, max, stddev, samples, prctile10, prctile90, uuid) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
bool CLSwimPersistence::insertDistribution(const CLSwimStrokesPerTurnDistribution &)
Unable to persist swim distribution
recordsToRetain < maxRecords
DELETE From SwimDistributions WHERE id <= (SELECT MAX(id) From SwimDistributions) - ?
void CLSwimPersistence::purgeDistributions(int, int)
Unable to purge old records.
SELECT COUNT(*) FROM SwimDistributions
int CLSwimPersistence::countDistributions() const
Unable to get the number of distributions
DELETE FROM SwimDistributions
void CLSwimPersistence::deleteAllDistributions()
Unable to delete all distributions!
SELECT * from SwimHistory ORDER by rowid DESC limit ?
CMError CLSwimPersistence::getEntries(int, std::vector<CLSwimEntry> &) const
CLSwimPersistence,getEntries,unable to get entries,numberOfRecords,%d
SELECT * from SwimHistory WHERE uuid = ?
CMError CLSwimPersistence::getEntries(unsigned char *, std::vector<CLSwimEntry> &) const
CLSwimPersistence,unable to get entries for uuid %{public}s
SELECT * from SwimHistory WHERE id >= ?
CMError CLSwimPersistence::querySince(const CLSwimEntry &, std::vector<CLSwimEntry> &) const
CLSwimPersistence, querySince, failed to bind id in query, %{public}llu
SELECT * from SwimHistory ORDER BY rowid DESC LIMIT 1
DELETE from SwimHistory WHERE startTime < ?
long CLSwimPersistence::aggregateRecordsInternal(const CLAggregationRules &, CFAbsoluteTime)
CLSwimPersistence, aggregateRecordsInternal, unable to purge records.
SELECT * from SwimHistory
SwimHistory
SwimDistributions
DELETE FROM SwimHistory
INSERT INTO SwimHistory (uuid, startTime, endTime, timestamp, pace, distance, poolLength, entryType, style, numberOfStrokes, totalLaps, segment) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
virtual void CLSwimPersistence::insertRecordUL(const CLSwimEntry &, bool)
CLSwimPersistance, unable to insert swim record.
entryType
style
numberOfStrokes
totalLaps
loiUuid
mean
median
stddev
samples
prctile10
prctile90
CLActivityRecorderDb<CLSwimEntry, CLActivityDB::NoDataProtectionPolicy>::CLActivityRecorderDb(const char *, bool, float, const std::string, const CLSqliteDatabase::SqlitePropertyPersistence) [T = CLSwimEntry, DataProtectionPolicy = CLActivityDB::NoDataProtectionPolicy]
bool CLActivityRecorderDb<CLSwimEntry, CLActivityDB::NoDataProtectionPolicy>::setDatabaseAccessible() [T = CLSwimEntry, DataProtectionPolicy = CLActivityDB::NoDataProtectionPolicy]
bool CLActivityRecorderDb<CLSwimEntry, CLActivityDB::NoDataProtectionPolicy>::isValidTime(CFAbsoluteTime &) const [T = CLSwimEntry, DataProtectionPolicy = CLActivityDB::NoDataProtectionPolicy]
bool CLActivityRecorderDb<CLSwimEntry, CLActivityDB::NoDataProtectionPolicy>::migrateDbConstraints(const char *, const CLSqliteDatabase::ColumnInfo *, const char **) [T = CLSwimEntry, DataProtectionPolicy = CLActivityDB::NoDataProtectionPolicy]
virtual void CLActivityRecorderDb<CLSwimEntry, CLActivityDB::NoDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, bool) [T = CLSwimEntry, DataProtectionPolicy = CLActivityDB::NoDataProtectionPolicy]
CLCoverState
void SqliteDatabase_Helper_performIntegrityCheck()
#Warning Database isn't valid; not perfomring integrity check
performIntegrityCheck took %f seconds.
void SqliteDatabase_Helper_recoverFromCorruptionIfNecessary(const std::string &, bool)
Database doesn't exist yet; not performing integrity check
Failed to close connection after integrity check: %{public}d
Failed to open database '%{public}s' after restoring from backup: %{public}d
#Notice Killing locationd to resolve corrupted database.
void SqliteDatabase_Helper_dropObsoleteTablesFromConsolidatedDatabase()
#Warning Database isn't valid; not dropping obsolete tables
Couldn't setSecureDeleteEnabled(%{public}d) for old database!
CellLocationCounts
CellLocationBoxes
CellLocationLocalCounts
CellLocationLocalBoxes
CdmaCellLocationCounts
CdmaCellLocationBoxes
CdmaCellLocationLocalCounts
CdmaCellLocationLocalBoxes
WifiLocation
WifiLocationCounts
WifiLocationBoxes
WifiLocationLocal
WifiLocationLocalCounts
WifiLocationLocalBoxes
CellLocationHarvest
CellLocationHarvestCounts
CdmaCellLocationHarvest
CdmaCellLocationHarvestCounts
WifiLocationHarvest
WifiLocationHarvestCounts
WtwLocationHarvest
WtwLocationHarvestCounts
LocationHarvest
LocationHarvestCounts
Wifi
CompassSettings
Couldn't vacuum old database!
SensorRecorderAccelData
SensorRecorderAccelMeta
SensorRecorderGyroData
SensorRecorderGyroMeta
void SqliteDatabase_Helper_dropObsoleteTablesFromClassCDatabase()
Found obsolete table, deleting
Database not valid; unable to drop obsolete tables
CLDuetMonitor
void CLSubHarvesterMicroLocation::collectAndSubmit(ShouldCancelFunction)
Harvest should only be running on an internal install
file
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Daemon/Shared/Harvester/MicroLocation/CLSubHarvesterMicroLocation.mm
line
MicroLocation harvest was cancelled
virtual CLMetsInfo CLNatalieCrossTrainingModel::computeMETS(const CLNatalieModelInput &)
Cross Training, Compendium METS, METS, %f
CLGnssProviderSilo
-[CLGnssProviderAdapter init]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Daemon/Positioning/GPS/CLGnssProviderStub.mm
-[CLGnssProviderAdapter beginService]
-[CLGnssProviderAdapter endService]
-[CLGnssProviderAdapter resetControlPlaneStatus]
-[CLGnssProviderAdapter syncgetControlPlaneStatusReport:]
-[CLGnssProviderAdapter emergencyStateChange:]
addClient
CLManagedLocationDatabase<CLWifiLocationDatabase, CLWifiLocationDatabase::WifiData>::CLManagedLocationDatabase(std::string, bool, std::unique_ptr<IExternal>, std::string) [Database = CLWifiLocationDatabase, DataType = CLWifiLocationDatabase::WifiData]
CLManagedLocationDatabase<CLCellLocationDatabase, CLTelephonyService_Type::Cell>::CLManagedLocationDatabase(std::string, bool, std::unique_ptr<IExternal>, std::string) [Database = CLCellLocationDatabase, DataType = CLTelephonyService_Type::Cell]
Creating managed location database %s (count triggers %d, use cache %d)
Data protection is enabled, creating in-memory database for table %s
Persistent database failed to create despite data protection not enabled. Falling back to in-memory database
fDatabase && fDatabase->isDatabaseValid()
fInMemoryTransaction == nullptr
-InMemoryDatabase
CLManagedLocationDatabase<CLCdmaCellLocationDatabase, CLTelephonyService_Type::CdmaCell>::CLManagedLocationDatabase(std::string, bool, std::unique_ptr<IExternal>, std::string) [Database = CLCdmaCellLocationDatabase, DataType = CLTelephonyService_Type::CdmaCell]
CLManagedLocationDatabase<CLLteCellLocationDatabase, CLTelephonyService_Type::LteCell>::CLManagedLocationDatabase(std::string, bool, std::unique_ptr<IExternal>, std::string) [Database = CLLteCellLocationDatabase, DataType = CLTelephonyService_Type::LteCell]
CLDataProtectionManagerSilo
-[CLDataProtectionManagerAdapter postDataAvailability]
client of CLDataProtectionManager is requesting a re-broadcast of data availability
DataProtectionManager
void CLDataProtectionManager::postDataAvailability()
Data availability is now %d
bool CLDataProtectionManager::deviceUnlockedSinceBoot()
device unlocked since boot, %d
virtual void CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLDataProtectionManager_Type::Notification, NotificationData_T = CLDataProtectionManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLDataProtectionManager_Type::Notification, NotificationData_T = CLDataProtectionManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLDataProtectionManager_Type::Notification, NotificationData_T = CLDataProtectionManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLDataProtectionManager_Type::Notification, NotificationData_T = CLDataProtectionManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLDataProtectionManager_Type::Notification, NotificationData_T = CLDataProtectionManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLDataProtectionManager_Type::Notification, NotificationData_T = CLDataProtectionManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::listClients() [Notification_T = CLDataProtectionManager_Type::Notification, NotificationData_T = CLDataProtectionManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
static CLOnBodyNotifier_Type::Params CLOnBodyNotifier_Type::Params::getParams(NSDictionary *, NSString *)
Using the manufacturer specific parameters (%s): %s
Using the default parameters: %s
#Warning Using the hardcoded parameters
static bool CLOnBodyNotifier_Type::Params::isValid(NSDictionary *)
Invalid parameters received:
%{public}s
com.apple.locationd.%s.%lx
bool CLPowerAssertion::takePowerAssertion(std::string)
Took, inc ref, %d, %s, thisReason, %s
%@(%s)
Took
%s, %s
bool CLPowerAssertion::releasePowerAssertion()
Release power assertion, %s, heldFor, %.2lf
Release power assertion, dec ref, %d, %s
HiddenKey
BundleIdKey
MotionStateVehicleStateChangedKey
MotionVehicleKey
hidden
TQ,N,V_macAddress
Ti,N,V_channel
Ti,N,V_hidden
Td,N,V_scanTimestamp
CLStatusBarIconManagerSilo
T^{CLStatusBarIconManager={BasicMutex=^^?^{MutexInfo}}@{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLGnssProvider_Type::Client, std::__1::default_delete<CLGnssProvider_Type::Client> >={__compressed_pair<CLGnssProvider_Type::Client *, std::__1::default_delete<CLGnssProvider_Type::Client> >=^{Client}}}^{__CFRunLoopTimer}BB[6B]i{CLNameValuePair=^^?^{__CFDictionary}}[6[3d]]},N,V_manager
StatusBarIconManager
StatusBarIconStates
void CLStatusBarIconManager::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)
Got client notification
void CLStatusBarIconManager::onDelayTimer(CFRunLoopTimerRef)
Delay timer fired
void CLStatusBarIconManager::sendStatusBarIconNotification()
Posting status bar icon visibility change notification
void CLStatusBarIconManager::handleReset()
Clearing status bar icon enabled states
StatusBarIconState CLStatusBarIconManager::iconStateFromClients()
%s is in state '%s'.
Notify delay of %.2fs for state '%s'; upgrading icon state
Waiting %.2f seconds for location indicator to change states
iconStateFromClients, overallIconState, '%s', overallNotifyDelay, %.4lf
void CLStatusBarIconManager::checkIconVisibleStatus(bool)
E911 is active; forcing icon on.
#Notice Location icon should now be in state '%{public}s'
Application
Bundle
SystemService
FindMyiPhone
EmergencyService
Inactive
RequestingLocationInformation
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Framework/CoreMotion/CMWorkout.mm
sessionId
type < kCMWorkoutTypeMax
kCMWorkoutDataCodingKeySessionId
kCMWorkoutDataCodingKeyType
None
Walking
Running
OutdoorCycling
IndoorCycling
Yoga
Dancing
CrossTraining
Elliptical
Climbing
StairClimbing
Rowing
ResistanceTraining
GenericWorkout
OutdoorWalking
IndoorWalking
OutdoorRunning
IndoorRunning
Swimming
OutdoorWheelchairWalk
OutdoorWheelchairRun
Calisthenics
Unhandled workout type
%@, <sessionId %@, type, %@>
type >= kCMWorkoutTypeNone && type <= kCMWorkoutTypeMax
session >= kCMNatalieDataSessionNone && session <= kCMNatalieDataSessionMax
location < kCMSwimWorkoutLocationMax
-[CMSwimWorkout initWithSessionId:location:poolLength:]
Workout, pool length %f for workout is too small and may lead to undefined behavior.
kCMWorkoutDataCodingKeySwimLocation
kCMWorkoutDataCodingKeyPoolLength
Pool
OpenWater
%@, <sessionId %@, type, kCMWorkoutTypeSwimming, location, %@, poolLength, %f>
poolLength
workoutType == kCMWorkoutTypeIndoorRunning || workoutType == kCMWorkoutTypeIndoorWalking || workoutType == kCMWorkoutTypeIndoorCycling || workoutType == kCMWorkoutTypeElliptical || workoutType == kCMWorkoutTypeStairClimbing || workoutType == kCMWorkoutTypeRowing
kCMWorkoutDataCodingKeyFitnessMachineManufacturerName
kCMFitnessMachineWorkoutDataCodingKeyModel
%@, <sessionId %@, type, %@, manufacturerName, %@, model, %@>
manufacturerName
model
CLStreamingAwareLocationProviderSilo
CLStreamingAwareLocationProvider
Streaming aware location provider
CLRemoteMotionAlarm
auto CLStreamingAwareLocationProvider::CLStreamingAwareLocationProvider(id<CLIntersiloUniverse>)::(anonymous class)::operator()(bool) const
Turning on step count notifications
Turning off step count notifications
TileDL
void CLWifiServerResponseListener::beginSeries()
TILE: beginSeries
void CLWifiServerResponseListener::endSeries()
TILE: endSeries, size, %lu
TILE: endSeries, checking tile, count, %u,  localLocation, %14.8lf, %14.8lf
TILES: requestDownload, %.8f, %.8f
virtual void CLWifiServerResponseListener::onWifiAlsResponse(const std::vector<CLAlsWifiAccessPoint>, bool)
@WifiAps, als, %{public}lu, isNearby, %{public}d
TILE: macAddressResolved, invalid hash value, %s
WifiServerResponseListener
Adding tile
WifiServerResponseListner
Increment count tile
NSString *bundlePathFromServiceName(const char *)
attempting to create service location provider with NULL service name
SqliteDatabaseManager
_SqliteDatabaseUseSecureDelete
_SqliteDatabaseUseIncrementalVacuum
int CLSqliteDatabaseManager::openDatabase(CLSqliteDatabase::SqliteProperties, const std::string &, sqlite3 *&)
Attempted to open an encrypted database
pragma page_size = 4096;
pragma journal_mode=WAL;
pragma secure_delete = 
pragma cache_size = 5;
pragma cache_size = 100;
pragma cache_spill = 1000;
pragma recursive_triggers = true;
_SqliteTrace
Walk
virtual CLMetsInfo CLNataliePedestrianModel::computeMETS(const CLNatalieModelInput &)
Pedestrian, Using %s model
CompanionConnectionKeepAliveInterval
virtual void CLCompanionNotifierCompanion::receiveCompanionMessage(CLCompanionNotifier_Type::Type, NSData *)
Received message,type,%d,size,%lu
#Warning Error deserializing session override: %s
void CLCompanionNotifierCompanion::onOdometerNotification(int, const CLOdometerNotifier_Type::Notification &, const CLOdometerNotifier_Type::NotificationData &)
#Warning error serializing Odometer(GPS) entry
#Warning error serializing Odometer(Elevation) entry
#Warning error serializing Odometer(Coarse Elevation) entry
virtual void CLCompanionNotifierCompanion::handleStateSyncTimerExpiry()
Time to the last received message from Watch is %lf. Lost connection to Watch.
void CLCompanionNotifierCompanion::checkAndToggleSpectatorSources()
void CLCompanionNotifierCompanion::toggleCoarseElevationSource(bool)
coarse elevation src,enable,%d,elevationSpectator,%d,fitnessTracking,%d
Enabling
Disabling
void CLEarGestureClientManager::setEnabledInternal(bool)
%s ear gesture
std::string CLEarGestureClientManager::getClassifierForSiri() const
hwType, %d
Device should not have instantiated this.
void CLEarGestureClientManager::removeClientInternal(const void *)
Removing client %p
Unknown client instance %p
void CLEarGestureClientManager::addClientInternal(const void *, int, CLEarGestureClientManager::Handler)
Adding client %p with priority %d
void CLEarGestureClientManager::refreshDispatcherIfNecessaryInternal()
Registering for ear gesture notifications
Unregistering for ear gesture notifications
void CLEarGestureClientManager::updateEnabledStatusForTopClient()
Ear Gesture EnabledForTopClient: %d (%s)
SiriCalled
KeyboardCalled
MessagesTranscriptCalled
MessagesSpringBoardCalled
PriorityNotSupported!
static void CLEarGestureClientManager::onEarGesture(const CLEarGestureNotifier::NotificationData *, void *)
Dispatching ear gesture to instance %p from prototype %s
sqlite3_finalize()
sqlite3_clear_bindings()
bool PropagationDataHistory::shallPropagateAccessory(const CFTimeInterval)
%.1lf,DeadReckoning,%.2lf,fLastPASCDVelocityNotificationTime,%.2lf,fLastAccessoryLocation,%.2lf,fLastGPSLocationTime,%.2lf,fLastGPSPropagationTime,%.2lf
not saved
saved
void PropagationDataHistory::saveData(const CLLocationProvider_Type::NotificationData &)
%.1lf,DeadReckoning,%s,%s,time,%.1lf,machCont,%.1lf,%{private}.8lf,%{private}.8lf
virtual CLMetsInfo CLCalorieCalisthenicsModel::computeMETS(const CLNatalieModelInput &)
Calisthenics (HIIT), METS, %f, %d
void CLCompassSessionStatsCollector::start(const std::string &)_block_invoke
starting metric session (CompassSession) for %s
void CLCompassSessionStatsCollector::stop()_block_invoke
ending metric session (CompassSession) for %s
void CLCompassSessionStatsCollector::submit()_block_invoke_2
submitting metric session (CompassSession) for %s
kKeyLocation
kKeyOperatorName
kKeyBundleId
kKeyRawMotionActivity
kKeyMotionActivity
kKeyDominantMotionActivity
kKeyVehicleConnected
kKeyVehicleConnectedChanged
operatorName
T@"NSString",&,N,V_operatorName
motionVehicleConnectedStateChanged
TB,N,V_motionVehicleConnectedStateChanged
motionVehicleConnected
TB,N,V_motionVehicleConnected
kKeyTimestamp
kKeyRssi
kKeyArfcn
kKeyPsc
kKeyRscp
kKeyEcn0
cell
T{Cell=iiiiiiii},N,V_cell
measurements
T{CLHarvestCellMeasurementsGsm=iiiii},N,V_measurements
Ti,N,V_rat
transmit
Ti,N,V_transmit
Ti,N,V_rssi
kKeyMcc
kKeyMnc
kKeySid
KeyNid
KeyBsid
kKeyBsLatitude
kKeyBsLongitude
kKeyZoneId
kKeySectorId
kKeySectorLatitude
kKeySectorLongitude
kKeyBandClass
kKeyRat
kKeyCellType
kKeyPnoffset
kKeyChannel
kKeyLtmOffset
kKeyDaylightSaving
T{CdmaCell=i{vector<int, std::__1::allocator<int> >=^i^i{__compressed_pair<int *, std::__1::allocator<int> >=^i}}iiiiiiiii{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}iii{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}ii},N,V_cell
kKeyPilotPhase
T{CLHarvestCellMeasurementsCdma=iiiii},N,V_measurements
kKeyTac
kKeyCi
kKeyBandInfo
kKeyUarfcn
kKeyPid
kKeyCellLatitude
kKeyCellLongitude
T{LteCell=iiiiiiiddii},N,V_cell
T{CLHarvestCellMeasurementsLte=iiiii},N,V_measurements
kKeyLac
T{ScdmaCell=iiiiiiii},N,V_cell
T{CLHarvestCellMeasurementsScdma=iiiii},N,V_measurements
kKeyGsmNeighbors
kKeyScdmaNeighbors
kKeyLteNeighbors
kKeyCdamaNeighbors
gsmNeighbors
T@"NSArray",R,N,V_gsmNeighbors
scdmaNeighbors
T@"NSArray",R,N,V_scdmaNeighbors
cdmaNeighbors
T@"NSArray",R,N,V_cdmaNeighbors
lteNeighbors
T@"NSArray",R,N,V_lteNeighbors
MslEnable
MslFile
MslFlushTimeout
CLMotionDefaultsWrite<std::__1::basic_string<char> >::CLMotionDefaultsWrite(const char *, const T &) [T = std::__1::basic_string<char>]
CLMotionDefaultsWrite<long long>::CLMotionDefaultsWrite(const char *, const T &) [T = long long]
bool CLNmeaLocation(const char *, CLDaemonLocation &, CLDaemonLocationPrivate &, CLNmeaScreener *)
Accessory,bad checksum for NMEA sentence '%{public}s' - expected %{public}s
Accessory,only GPGGA GPRMC supported
#Warning Accessory,repeated GPRMC timestamp at,hhmmss,%02d%02d%02.1f
GPRMC NMEA Screening failed, dataAbsTimeStamp, %.1lf
#Warning Accessory,null island,not allowed
Invalid speed,%{public}.3lf
Invalid course,%{public}.3lf
bool extractLocationInfoFromGga(const CLNmeaGGA &, CLDaemonLocation &, CLDaemonLocationPrivate &, bool, CLNmeaTimestamp &, CLNmeaScreener *)
#Warning Accessory,repeated GPGGA timestamp at,hhmmss,%02d%02d%02.1f
GPGGA NMEA Screening failed, dataAbsTimeStamp, %.1lf
Accessory,invalid altitude,%{public}.3lf
bsid
zoneid
hasSid
Ti,N,V_sid
hasNid
Ti,N,V_nid
hasBsid
Ti,N,V_bsid
hasZoneid
Ti,N,V_zoneid
sectorid
bandclass
pnoffset
hasSectorid
T@"NSString",&,N,V_sectorid
hasBandclass
Ti,N,V_bandclass
hasChannel
hasPnoffset
Ti,N,V_pnoffset
hasLocation
T@"ALSLocation",&,N,V_location
CLSensorCalibrationControllerSilo
CLSensorCalibrationController
com.apple.CoreMotion.GyroCalibration
CLSensorCalibrationController::CLSensorCalibrationController(id<CLIntersiloUniverse>)
fStaticWait,%f,fMinimumInterval,%f,fDoubleCalInterval,%f,fOutOfBoxTimeout,%f,fMinBatteryLevel,%f,fRetryCalInterval,%f,fUrgentStaticWait,%f,fUrgentMinBatteryLevel,%f,fUrgentAttemptMinimumInterval,%f,fUrgentCalScheduled,%d,fLastCalibration,%f
bool CLSensorCalibrationController::start(bool)
fState,%d
Status
start
MotionSensorCalibration
!fGyroDispatcher
!fPowerAssertion.isPowerAssertionTaken()
!fStaticReady
fUrgentCalScheduled || fUserInitiatedCalibration
UrgentCal.Start
RegularCal.Start
com.apple.CoreMotion.gyrocal.start
void CLSensorCalibrationController::tryStartCalibration()
is already running
never
BatteryReady,%d,ThermalReady,%d,DisplayReady,%d,StaticReady,%d,MinimumIntervalReady,%d,UrgentMiniCalScheduled,%d,timeToIntervalReady,%f,sinceLastCal,%s,sinceLastUnpluggedCal,%s
Still waiting for long wait timer
timeToIntervalReady > 0
Starting long wait timer for %llu seconds
void CLSensorCalibrationController::tryStartCalibration()_block_invoke
Long wait timer trigger.
fStaticAlarmDuration != 0.
Resetting static timer. Wait duration changed %f -> %f
Still waiting for static timer of %f
!fStaticAlarm
Starting static timer for %f
void CLSensorCalibrationController::tryStartCalibration()_block_invoke_2
Static timer fired
BatteryDisconnected
Movement
Thermal
Shutdown
void CLSensorCalibrationController::abort(CLSensorCalibrationController_Type::AbortReason)
reason,%d,%s
Ignoring abort for user initiated calibration
!fTempController
!fMovingAlarm
UrgentCal.Abort
RegularCal.Abort
void CLSensorCalibrationController::teardown(bool)
Stopped sensor calibration, fState, %d, successful, %d
stop
FinishFlag
VirusRunTime.PluggedIn
VirusRunTime.OnBattery
Scheduling double calibration,fLastCalibration,%f,expectedNextCalibration,%f
UrgentCal.Finish
RegularCal.Finish
Scheduling retry calibration after previous aborted run,fLastCalibration,%f,expectedNextCalibration,%f
com.apple.CoreMotion.gyrocal.abort
void CLSensorCalibrationController::onGyroTemperature(const CLGyro::Temperature *)
state,%d,temperature,%f
Warning: Bad state,%d
void CLSensorCalibrationController::onTimer()
state,%d,elapsed,%f
fState == kWaitingForHysteresis || fState == kRunning
void CLSensorCalibrationController::forceBatteryUpdate(double, bool)
level,%f,connected,%d
void CLSensorCalibrationController::onStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)
Warning: Unexpected notification %d
void CLSensorCalibrationController::setUrgentCalFlag(bool)
UrgentFlag,%d
UrgentCal.Request
virtual void CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLSensorCalibrationController_Type::Notification, NotificationData_T = CLSensorCalibrationController_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLSensorCalibrationController_Type::Notification, NotificationData_T = CLSensorCalibrationController_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLSensorCalibrationController_Type::Notification, NotificationData_T = CLSensorCalibrationController_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLSensorCalibrationController_Type::Notification, NotificationData_T = CLSensorCalibrationController_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLSensorCalibrationController_Type::Notification, NotificationData_T = CLSensorCalibrationController_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLSensorCalibrationController_Type::Notification, NotificationData_T = CLSensorCalibrationController_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::listClients() [Notification_T = CLSensorCalibrationController_Type::Notification, NotificationData_T = CLSensorCalibrationController_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
CLWifiService_Type::ScanParameters
void CLWifiService_Type::ScanParameters::setChannels(std::vector<int>)
Can't have a scan of no channels
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Daemon/Shared/WifiService/CLWifiServiceScanParameters.mm
CLWifiServiceScanParameters
cl::chrono::secondsf (anonymous namespace)::computeExpectedScanDelay(float, cl::chrono::milliseconds, uint64_t)
Duty cycle percentage should be between 0 and 1
dutyCycle
Duty cycle is NaN
static void CLGeoMapAccessTileLoader::setTileMemoryCacheAndCountLimits()
CLMM, memory cache and tile count limit already set
CLMM,GEOTileLoader memory cache,%d,tile count limit,%d
static void CLGeoMapAccessTileLoader::enable()
CLMM, first client enabled openning tile loader
CLMM, enabled count,%{public}d
static void CLGeoMapAccessTileLoader::disable()
#Warning CLMM, Trying to disable tile loader when none enabled
CLMM, no clients remaining, closing tile loader
geomapaccess_loader
desiredAccuracy
GpsForceOutdoorMatching
ObmAllowPositionOverride
ObmSearchRadius
ObmMinHorizontalUncertaintyAmidstBuildings
ObmAverageBuildingHeightForUncertaintyBump
ObmBumpHorizontalUncertaintyAmidstBuildings
ObmMinBuildingsForUncBump
CLOutdoorMatcher::CLOutdoorMatcher(CLMapGeometryPtr, const std::string &)
OBM,GpsForceOutdoorMatching,%{public}d,ObmAllowPositionOverride,%{public}d,fBumpHorizontalUncertaintyAmidstBuildings,%{public}d,fMinBuildingsForBump,%{public}u,fSearchRadiusInMeters,%{public}f,fMinHorizontalUncertaintyAmidstBuildings,%{public}f,fMinAverageBuildingHeightForUncertaintyBump,%{public}f
CLOutdoorMatcher::CLOutdoorMatcher(std::shared_ptr<CLGeoAccess3dBuildingGeometry>, const std::string &)
OBM, forcing building geometry
virtual bool CLOutdoorMatcher::match(CLMapCrumb &)
#Warning, OBM, cannot estimate nav mode, disabling
OBM, non-pedestrian, not matching
#Warning, OBM, no mapGeometry!
#Warning, OBM, no geometry!
#Warning, OBM, buildingsWithinDistance,%{public}lf returned false!
OBM, %{private}.13lf,%{private}.13lf,numbuildings,%{public}zu,radius,%{public}lf
#Warning, OBM, buildings.size() %{public}ld > 500. too many buildings. Aborting
OBM,averageBuildingHeight,%{public}.2lf,fNeighborhoodCharacter.type,%{public}d
OBM, not in any building
OBM, %{private}.13lf,%{private}.13lf,building,%{public}zu
OBM, a-priori,%{private}.6lf,%{private}.6lf,hacc,%{public}.2lf,a-posteriori,hacc,%{public}.2lf
#Warning, OBM, no building but point in building!
OBM, initialSize,%{public}ld,finalSize,%{public}ld
#Warning, OBM, no exterior particles remaining
OBM,particleCourse,%{public}.2lf,crumbCourse,%{public}.2lf,deltaCourse,%{public}.2lf,particle,%{public}.6lf,%{public}.6lf,crumb,%{public}.6lf,%{public}.6lf,deltaPos,%{public}.6lf,%{public}.6lf,score,%{public}.5lg,bestScore,%{public}.5lg,varFactor,%{public}.5lg
#Warning, OBM, LonLat conversion failed,point,%{public}lf,%{public}lf
OBM, inflatedHacc, %{public}.2lf, fMinHorizontalUncertaintyAmidstBuildings, %{public}.2lf. choosing max
OBM, a-priori,%{private}.6lf,%{private}.6lf,course,%{public}.2lf,hacc,%{public}.2lf,a-posteriori,%{private}.6lf,%{private}.6lf,course,%{public}.2lf,hacc,%{public}.2lf,bestScore,%{public}.6lg,bestLonLat,%{public}.6lf,%{public}.6lf,bestCourseInDegrees,%{public}.2lf,fAllowPositionOverride,%{public}d,
void CLOutdoorMatcher::setObservationCovarMatrix(CLMapCrumb &)
OBM, a11,%{public}.5lf,a12,%{public}.5lf,a22,%{public}.5lf,a33,%{public}.5lf
virtual void CLOutdoorMatcher::updateLocation(const CLDaemonLocation &, const CLDaemonLocationPrivate &)
OBM,update
virtual void CLOutdoorMatcher::updateMotion(const CLMotionActivity &)
Attempted to access the value of an uninitialized optional object.
locationType
altitude
verticalAccuracy
reach
infoMask
Ti,N,V_accuracy
hasLocationType
Ti,N,V_locationType
hasAltitude
Ti,N,V_altitude
hasVerticalAccuracy
Ti,N,V_verticalAccuracy
hasScore
TI,N,V_score
hasReach
Ti,N,V_reach
hasInfoMask
TI,N,V_infoMask
cellTowers
wirelessAPs
numberOfSurroundingCells
appBundleId
cdmaCellTowers
cdmaEvdoTowers
numberOfSurroundingCdmaCells
numberOfSurroundingCdmaEvdoCells
lteCellTowers
numberOfSurroundingLteCells
scdmaCellTowers
numberOfSurroundingScdmaCells
T@"NSMutableArray",&,N,V_cellTowers
T@"NSMutableArray",&,N,V_wirelessAPs
hasNumberOfSurroundingCells
Ti,N,V_numberOfSurroundingCells
hasAppBundleId
T@"NSString",&,N,V_appBundleId
T@"NSMutableArray",&,N,V_cdmaCellTowers
T@"NSMutableArray",&,N,V_cdmaEvdoTowers
hasNumberOfSurroundingCdmaCells
Ti,N,V_numberOfSurroundingCdmaCells
hasNumberOfSurroundingCdmaEvdoCells
Ti,N,V_numberOfSurroundingCdmaEvdoCells
T@"NSMutableArray",&,N,V_lteCellTowers
hasNumberOfSurroundingLteCells
Ti,N,V_numberOfSurroundingLteCells
T@"NSMutableArray",&,N,V_scdmaCellTowers
hasNumberOfSurroundingScdmaCells
Ti,N,V_numberOfSurroundingScdmaCells
cellID
tacID
uarfcn
hasMcc
Ti,N,V_mcc
hasMnc
Ti,N,V_mnc
hasCellID
Ti,N,V_cellID
hasTacID
Ti,N,V_tacID
hasUarfcn
Ti,N,V_uarfcn
hasPid
Ti,N,V_pid
needCellsTowers
numberOfSurroundingWifis
technology
wifiGranularity
Tq,N,V_latitude
Tq,N,V_longitude
hasNeedCellsTowers
TB,N,V_needCellsTowers
hasNumberOfSurroundingWifis
Ti,N,V_numberOfSurroundingWifis
hasTechnology
Ti,N,V_technology
hasWifiGranularity
Ti,N,V_wifiGranularity
hasRadius
Ti,N,V_radius
CLMicroLocationNotifierSilo
CLMicroLocationNotifier
virtual void CLMicroLocationNotifier::shutdown()
MicroLocation: shutdown
com.apple.locationd.MicroLocationAction-localize
com.apple.locationd.MicroLocationAction-purge
RTLocationsOfInterestDidChangeNotification
CLATVAirplayMonitor
virtual void CLMicroLocationNotifier::startSpectating()
Recording event %{public}d not enabled
Registering for app launch notifications
Registering for first wake of day events
Registering for forced recordings
com.apple.locationd.MicroLocationAction-record
Registering for HomeKit Accessory notifications
Registering for HomeKit Scene notifications
Registering for notification of notes app launch
Registering for notifications of battery state
virtual void CLMicroLocationNotifier::stopSpectating()
Unregistering for forced recordings
Unregistering for notifications of battery state
virtual void CLMicroLocationNotifier::onWifiNotification(int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)
Location services are disabled, ignore WiFi scan result
Received wifi notification %{public}d
#Warning Received unknown wifi service notification %{public}d
virtual void CLMicroLocationNotifier::startScanning(CLMicroLocationLogic::ILogicDelegate::ScanActivity)
Not scanning Wifi RSSI because it's not enabled
Not scanning Wifi RTT because it's not enabled
Not scanning HomeKit because it's not enabled
Not scanning for Apple TVs because it's not enabled
void CLMicroLocationNotifier::turnOnAccelerometer()
MicroLocation: Enabling accelerometer
void CLMicroLocationNotifier::turnOffAccelerometer()
MicroLocation: Disabling accelerometer
void CLMicroLocationNotifier::startWifiRssiScanning(CLMicroLocationLogic::ILogicDelegate::ScanActivity)
Wifi is powered off - not scanning
void CLMicroLocationNotifier::startHomeKitScanning()
HomeKit is powered off - not scanning
v16@?0^{CLHomeKitProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB@@@{vector<CLHomeKitProvider_Type::HomeKitDevice, std::__1::allocator<CLHomeKitProvider_Type::HomeKitDevice> >=^{HomeKitDevice}^{HomeKitDevice}{__compressed_pair<CLHomeKitProvider_Type::HomeKitDevice *, std::__1::allocator<CLHomeKitProvider_Type::HomeKitDevice> >=^{HomeKitDevice}}}@@}8
void CLMicroLocationNotifier::onNotificationCenterNotification(CFNotificationCenterRef, CFStringRef, const void *, CFDictionaryRef)
Received a forced localization request
#Warning Got a notification center notification that we weren't expecting: %s
void CLMicroLocationNotifier::onHomeKitNotification(int, const CLHomeKitProvider_Type::Notification &, const CLHomeKitProvider_Type::NotificationData &)
Received unhandled homekit notification
virtual void CLMicroLocationNotifier::cancelRecordingTimer()
Recording timer cancelled
void CLMicroLocationNotifier::stopRecordingTimer()
Recording timer stopped
void CLMicroLocationNotifier::onForegroundAppLaunched(CLDuetForegroundApp *)
bundle: %s, launch reason: %s
com.apple.locationd.microlocation.reload-models
!microlocationResults.empty()
(Null Microlocation)
void CLMicroLocationNotifier::saveLocalizationResultsToDuet(const std::vector<CLMicroLocationResultInternal> &)_block_invoke
#Warning Unable to save localization results to duet. %{private}s
Successfully logged to duet
v20@?0B8@"NSError"12
void CLMicroLocationNotifier::clearDuetStream()
Deleting all entries in the MicroLocation CoreDuet event stream
#Warning Unable to clear MicroLocation CoreDuet Event Stream. %{private}s
Deleted %{public}lu events from MicroLocation Event Stream
MicroLocationsOverrideCurrentRTLOI
MicroLocationsOverrideCurrentRTLOIType
MicroLocationsAppBlacklist
CFGetTypeID(cfType) == CFStringGetTypeID()
com.apple.mobilenotes
MicroLocationsUseAccelForSettledEstimation
MicroLocationsScanWifiRSSIEnabled
MicroLocationsScanWifiRTTEnabled
MicroLocationsScanHomeKitEnabled
MicroLocationsScanATVEnabled
bitset test argument out of range
virtual bool CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLMicroLocationNotifier_Type::Notification, NotificationData_T = CLMicroLocationNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLMicroLocationNotifier_Type::RegInfo]
virtual void CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLMicroLocationNotifier_Type::Notification, NotificationData_T = CLMicroLocationNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLMicroLocationNotifier_Type::RegInfo]
void CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLMicroLocationNotifier_Type::Notification, NotificationData_T = CLMicroLocationNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLMicroLocationNotifier_Type::RegInfo]
virtual void CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::removeClient(int) [Notification_T = CLMicroLocationNotifier_Type::Notification, NotificationData_T = CLMicroLocationNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLMicroLocationNotifier_Type::RegInfo]
virtual bool CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::clientRegistered(int, const Notification_T &) [Notification_T = CLMicroLocationNotifier_Type::Notification, NotificationData_T = CLMicroLocationNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLMicroLocationNotifier_Type::RegInfo]
virtual bool CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLMicroLocationNotifier_Type::Notification, NotificationData_T = CLMicroLocationNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLMicroLocationNotifier_Type::RegInfo]
virtual void CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::listClients() [Notification_T = CLMicroLocationNotifier_Type::Notification, NotificationData_T = CLMicroLocationNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLMicroLocationNotifier_Type::RegInfo]
CL::WifiPositioning::Policies::FilterScanHistory::Output CL::WifiPositioning::Policies::FilterScanHistory::HandleEvent::operator()(const Events::Wifi::Scan &) const
@WifiFlow, scannotify, aps, %{public}lu, %{public}s, clients, %{public}d, doCalc, %{public}d, ls, %{public}d
fInput.isLocationServicesEnabled == locationServicesAuthorizationEvent.isLocationServicesEnabled()
CL::WifiPositioning::Policies::FilterScanHistory::Output CL::WifiPositioning::Policies::FilterScanHistory::HandleEvent::selectApsForLocationComputation(const CL::WifiPositioning::Policies::FilterScanHistory::Input &) const
@WifiAps, history, %{public}lu, 2ghz, %{public}llu, 5ghz, %{public}llu, usable, %{public}lu, agethresh, %{public}llu,
macID
-[ALSWirelessAP writeTo:]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/External/ALS/ALSWirelessAP.m
nil != self->_macID
T@"NSString",&,N,V_macID
TI,N,V_channel
Market, Bounds
, nwLat, 
, nwLon, 
, seLat, 
, seLon, 
Ti,Vtag
Ti,Vtype
Td,Vtimestamp
processingCellTowers
TB,VprocessingCellTowers
processingWirelessAPs
TB,VprocessingWirelessAPs
finished
TB,Vfinished
coordinate
lifespan
referenceFrame
suitability
speeed
speedAccuracy
course
courseAccuracy
rawCoordinate
rawCourse
floor
integrity
horzUncSemiMaj
horzUncSemiMin
horzUncSemiMajAz
Medium
High
WGS84
ChinaShifted
RouteGuidance
Accessory
Skyhook
WiFi2
JSON_SERIALIZATION
void recordInvalidEnum(CL::Log::JSON::value_ostream &, std::string, T) [T = CLLocationIntegrity]_block_invoke
Uninitialized variable.
enum
void recordInvalidEnum(CL::Log::JSON::value_ostream &, std::string, T) [T = CLClientLocationReferenceFrame]_block_invoke
void recordInvalidEnum(CL::Log::JSON::value_ostream &, std::string, T) [T = CLClientLocationSuitability]_block_invoke
locationId
macModes
hasLocationId
T@"NSString",&,N,V_locationId
hasLatitude
Td,N,V_latitude
hasLongitude
Td,N,V_longitude
T@"NSMutableArray",&,N,V_macModes
kNatalieDataCodingKeyStartDate
kNatalieDataCodingKeyRecordId
kNatalieDataCodingKeySession
kNatalieDataCodingKeyMets
kNatalieDataCodingKeyNatalies
kNatalieDataCodingKeyBasalNatalies
kNatalieDataCodingKeySourceId
%@, <recordId %lu, startDate %@, session %@, mets %@, natalies %@, basalNatalies %@, sourceId %@>
natalies
basalNatalies
CLEmergencyControllerAdapterSilo
Releasing
void CLEmergencyController::updateEmergencyCarrierBundleSettings()
fIsHELOEnabledFlag,%d
bool CLEmergencyController::getHELOEnabled()
HELO enabled due to CLEEA
bool CLEmergencyController::getHELOEnabledFromCT()
emergencyenablementassertion
CLOutdoorMatchingEngine
fMatcher
fOutdoorMatcher
plos
CLOutdoorMatchingEngine::CLOutdoorMatchingEngine(id<CLIntersiloUniverse>)
PLOS, fPlatformSupportsPlosEstimation, %{public}d
virtual bool CLOutdoorMatchingEngine::match(CLDaemonLocation &, CLDaemonLocationPrivate &)
PLOS: match returned false!
virtual void CLOutdoorMatchingEngine::setForceNetworkUsage(bool)
OBM, ForceNetworkUsage %{public}d
virtual void CLOutdoorMatchingEngine::setDisallowNetworkUsage(bool)
OBM, DisallowNetworkUsage %{public}d
void CLOutdoorMatchingEngine::onGpsNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)
handling notification %{public}s
CLGnssMeasApi.proto
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Daemon/Positioning/Raven/CLGnssMeasApi.pb.cc
set_multipath_indicator
::CLPrivateData::MultipathIndicator_IsValid(value)
set_position_source
::CLPrivateData::SvPositionSource_IsValid(value)
set_over_the_air_from_sv_health
::CLPrivateData::SvHealthIndication_IsValid(value)
set_over_the_air_from_other_sv_health
set_assistance_file_health
set_ms_based_health
set_integrity_health
set_change_knowledge
::CLPrivateData::LeapSecondChangeKnowledge_IsValid(value)
set_leap_second
::CLPrivateData::GlonassLeapSecond_IsValid(value)
void CLTransitTilePreloader::makeRequestIfNeeded(bool, const CLDaemonLocation &, const CFAbsoluteTime &)
Request region preload manifest, no manifest
isStart,%d,manifest,%d,LastTime,%lf,LastLat,%.05lf,LastLon,%.05lf
Request region preload manifest, update
Found a preload region %s
void CLTransitTilePreloader::requestDownloadManifest(const bool, const CFAbsoluteTime &)
Requesting download of preload manifest, allowCell,%d
void CLTransitTilePreloader::requestDownloadWifiTile(const bool, const CLDaemonLocation &, const CFAbsoluteTime &)
Request tiles at lat,%.06lf,lon,%.06lf, allowCell,%d
CLAutopauseProviderSilo
CLAutopauseProvider
virtual void CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLAutopauseProvider_Type::Notification, NotificationData_T = CLAutopauseProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLAutopauseProvider_Type::Notification, NotificationData_T = CLAutopauseProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLAutopauseProvider_Type::Notification, NotificationData_T = CLAutopauseProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLAutopauseProvider_Type::Notification, NotificationData_T = CLAutopauseProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLAutopauseProvider_Type::Notification, NotificationData_T = CLAutopauseProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLAutopauseProvider_Type::Notification, NotificationData_T = CLAutopauseProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::listClients() [Notification_T = CLAutopauseProvider_Type::Notification, NotificationData_T = CLAutopauseProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
DontSkip
InProgress
WifiNotPowered
Attempts
TileHeader
TileIndex_Mac
TileAccessPointTable
TileHeaderLocation
TileHeaderKeyLatLon
TileKeyLatLonIndex
TileKeyLatLonEntriesTable
TileApplicationsIndex
TileApplicationsEntries
TileApplicationsRegionalEntries
?unknown?
mcc, 
, mnc, 
, lac, 
, subY, 
, subX, 
, hUnc, 
, offset, 
, ci, 
, tac, 
, sid, 
, bsid, 
TileDownloadCoolOffPeriod
static void CLTileFile::initStaticGlobals()
TileFile, fTileDownloadCoolOffPeriod, %{public}.1lf
TileDownloadExtendedCoolOffPeriod
TileFile, fTileDownloadExtendedCoolOffPeriod, %{public}.1lf
TileForceExpirationPeriod
TileFile, fTileForceExpirationPeriod, %{public}.1lf
TileMinExpirationPeriod
TileFile, fTileMinExpirationPeriod, %{public}.1lf
bool CLTileFile::hasDataExpired(CFAbsoluteTime, bool, float)
@TileQueue, hasDataExpired, %{public}d, isLargeConnectivity, %{public}d, fExpirationAge, %{public}d, dataExpirationPeriod, %{public}.1lf, dataAge, %{public}.1lf, tile, %{private}s
bool CLTileFile::canRequestBasedOnAttempts(bool, float, CFAbsoluteTime)
TileFile, canRequestBasedOnAttempts, tile, %{private}s, age, %{public}.1lf, needs to be refreshed - retry
1st/Re-Try
TileFile, canRequestBasedOnAttempts, tile, %{private}s, age, %{public}.1lf, expirationAge, %d
Aged
TileFile, canRequestBasedOnAttempts, tile, %{private}s, sinceLastDownload, %{public}.1lf, %{public}d, needs to be refreshed, TileDoesNotExistOnTheServer
DoesntExist
Empty
@TileReq, %{public}s, attempts, llsw, %{private}.2lf, %{private}.2lf, lastSuccess, %{public}d, existsOnServer, %{public}d, sinceLastDownload, %{public}.1lf, cooloff1, %{public}d, cooloff2, %{public}d, cooloff3, %{public}d, expired, %{public}d, path, %{private}s
bool CLTileFile::startDownloading(const std::string &, CLFileDownload *)
TileFile, startDownloading, tile, %{private}s, localFilename, %{public}s, tempFilename, %{public}s
TileFile, startDownloading, failed to download without a downloadRequest, %{private}s, #CloneMe
TileFile, startDownloading, tile is already being downloaded, %{private}s, #CloneMe
TileFile, startDownloading, tile, %{private}s, started, %{public}d, strFileUrl, %{private}s
virtual bool CLTileFile::decompress(unsigned int &)
TileFile, decompress, failed to move, %{public}s, %{public}s, errno, %{public}d, %{public}s, #CloneMe
TileFile, decompress, from, %{public}s, to, %{public}s, failed, errno, %{public}d, %{public}s, #CloneMe
TileFile, decompress, in, %{public}.6lf, seconds, size, %{public}u, to, %{public}u, tile, %{private}s
TileFile, decompress, from, %{public}s, to, %{public}s, failed, %{public}u byte file, #CloneMe
TileFile, decompress, file is not compressed, %{private}s
bool CLTileFile::generateUniqueFileName(const std::string &)
TileFile, generateUniqueFileName, trying, %{public}s, tile, %{private}s
TileFile, generateUniqueFileName, end, localFilename, %{public}s, temp, %{public}s
void CLTileFile::deleteFile()
TileFile, deleteFile, unlink, %{public}s
void CLTileFile::deleteTempFile()
TileFile, deleteTempFile, unlink, %{public}s
bool CLTileFile::onDownloadCompleted(bool, bool, CFAbsoluteTime)
TileFile, onDownloadCompleted, success, %{public}d, fDownloadRequest, %{public}p, tileDoesNotExist, %{public}d, details, %{public}s
TileFile, copy from, %{public}s, to, %{public}s, start
CLTileFile::onDownloadCompleted
TileFile, onDownloadCompleted, tile version, %{public}d, min version, %{public}d, isVersionOk, %{public}d, tile, %{private}s
TileFile, onDownloadCompleted, tile version, %{public}d, min version, %{public}d, isVersionOk, %{public}d, type, %{public}d, %{public}s, #CloneMe
TileFile, tile, %{private}s, download failed, #CloneMe
TileFile, failed to move from, %{public}s, to, %{public}s, errno, %{public}d, %{public}s, #CloneMe
void CLTileFile::setLocalfilename(const char *)
TileFile, setLocalfilename, localFilename, %{public}s, tempFilename, %{public}s
void CLTileFileUtility::initTileIdWithLatitudeAndLongitude(TileId &, double, double, double, double, sec_key_t)
TileFile, Delta lat/lon zero, %{public}d, %{public}d, #CloneMe
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Daemon/Positioning/Tiles/CLTileFile.mm
void CLTileFile::extractPropertiesFromTileHeader(CLTilesManager_Type::TileType, const CLWifiTileHeaderEntry &, CFAbsoluteTime)
bool CLTileFile::extractTileIdFromFile(const char *, const char *, CLTilesManager_Type::TileType, bool, CFAbsoluteTime)
TileFile,: extractTileIdFromFile, prefer local file name because it exists, %{public}s
extractTileIdFromFile
TileFile, extractTileIdFromFile, directory, %{public}s, filename, %{public}s, absFilename, %{public}s, type, %{public}d, isHeadersOnly, %{public}d
TileFile, extractTileIdFromFile, failed, %{public}s, #CloneMe
TileFile, extractTileIdFromFile, failed to open file, %{public}s, errno, %{public}d, %{public}s, #CloneMe
TileFile, extractTileIdFromFile, tile version, %{public}d, min version, %{public}d, isVersionOk, %{public}d, dLat, %{public}.5lf, dLon, %{public}.5lf
TileFile, extractTileIdFromFile, invalid hash value for, %{private}s, #CloneMe
TileFile, extractTileIdFromFile, read tileid from file, %{private}s
TileFile, extractTileIdFromFile, read, absFilenameParams, %{public}s
bool CLTileFile::readTileFileByFileName(const std::string &, const CLTileFile::TraverseDetails &)
TileFile, readTileFileByFileName, start, file, %{public}s, isHeadersOnly, %{public}d, isBinarySearch, %d
TileFile, readTileFileByFileName, reading input from stdin
TileFile, failed to open, %{public}s, errno, %{public}d, %{public}s, #CloneMe
TileFile, readTileFileByFileName, done, file, %{public}s, isHeadersOnly, %{public}d, isBinarySearch, %{public}d, isOK, %{public}d
static bool CLTileFile::setProtectionClass(const char *, CLTileFile::ProtectionClass)
TileFile, setProtectionClass, failed to open, %{public}s, fd, %{public}d, errno, %{public}d, %{public}s, #CloneMe
TileFile, setProtectionClass, unable to open for protected file change, %{public}s, %{public}d, fd, %{public}d, errno, %{public}d, %{public}s
TileFile, setProtectionClass, failed to set protection class, %{public}d, #CloneMe
TileFile, setProtectionClass, failed to set class, %{public}s, %{public}d, %{public}d
bool CLTileFile::setProtectionClass(CLTileFile::ProtectionClass)
TileFile, setProtectionClass, tile, %{private}s, newClass, %{public}d, curClass, %{public}d
TileFile, setProtectionClass, invalid protectionClass, %{public}d, #CloneMe
locked
unlocked
bool CLTileFile::lockTile(bool)
@TileList, %{public}s, %{public}s, llsw, %{private}.2lf, %{private}.2lf, Class%{public}c
bool CLTileFile::unlockTile()
@TileList, %{public}s, unlocked, llsw, %{private}.2lf, %{private}.2lf, ClassC
CLTileFile::ProtectionClass CLTileFile::getProtectionClass()
TileFile, getProtectionClass, failed to open, %{public}s
TileFile, getProtectionClass, failed to set protection class, %{public}d, #CloneMe
bool CLTileFile::doesLocationIntersectWithTile(const CLDaemonLocation &, float)
TileFile, no location / coordinates, tile, %{private}s, scaledLocation, %{private}.8lf, %{private}.8lf, #CloneMe
TileFile, doesLocationIntersectWithTile, distance, %{public}.1lf, deltas, %{public}.1lf, %{public}.1lf
getTileId().tileType != CLTilesManager_Type::TileType::WIFI_Location
bool CLTileFile::touchMTime(const CFAbsoluteTime &, const CFAbsoluteTime &)
@TileList, %{public}s, touch, ignoring, %{public}.2lf, #CloneMe
@TileList, %{public}s, touch, llsw, %{private}.2lf, %{private}.2lf
void CLTileFile::savePersistentPropertiesToFile()
TileFile, saving, %{public}s
void CLTileFile::loadPersistentPropertiesFromFile(const std::string &)
TileFile, paramsFileExist, %{public}d, loading, %{public}s, accessTimestamp, %{public}.1lf
void CLTileFile::setSkipDownloadReason(char)
@TileReq, %{public}s, skip, llsw, %{private}.2lf, %{private}.2lf, reason, %{public}s, last, %{public}s
atime
stime
CLTileFile(
tileId=
, localFilename=
, tempFilename=
virtual bool CLTileFile::TEST_testBinarySearch(const char *)
This instance has no : TEST_testBinarySearch
CLPeerRangingNotifierSilo
CLPeerRangingNotifier
-[CLPeerRangingNotifierAdapter(CLPeerRangingNotifierProtocol) newRequest:]
WRTT: No peer range notifier.
-[CLPeerRangingNotifierAdapter(CLPeerRangingNotifierProtocol) cancelRequest:]
void CLPeerRangingNotifier::newRequest(const CLPeerRangingNotifier_Type::RegInfo &)
WRTT: start ranging request
void CLPeerRangingNotifier::cancelRequest(const CLPeerRangingNotifier_Type::RegInfo &)
WRTT: stop ranging session
virtual void CLPeerRangingNotifier::sendRangeMeasurements(const std::vector<CLPeerRangingResult> &, const std::vector<CLPeerRangingError> &)
WRTT: send range meas, %ld, and errors, %ld
virtual void CLPeerRangingNotifier::initiateRanging(const std::vector<CLRangingPeerInternal> &, double)
WRTT: request, numPeers, %ld
virtual void CLPeerRangingNotifier::allowBeingRanged(const std::vector<CLRangingPeerInternal> &, bool)
WRTT: rangeable, numPeers, %ld
virtual void CLPeerRangingNotifier::setTimer(CFAbsoluteTime)
WRTT: scheduling timer
void CLPeerRangingNotifier::onTimer(CLPersistentTimer *)
WRTT: timeout
virtual void CLPeerRangingNotifier::registerForRangeMeasurements()
WRTT: register
virtual void CLPeerRangingNotifier::unregisterForRangeMeasurements()
WRTT: unregister
void CLPeerRangingNotifier::onWifiRangeMeasurements(const CLWifiService_Type::NotificationData &)
WRTT: received meas, %ld, or error %s
void CLPeerRangingNotifier::onWifiPower(const CLWifiService_Type::NotificationData &)
WRTT: received wifi power, %d
virtual void CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLPeerRangingNotifier_Type::Notification, NotificationData_T = CLPeerRangingNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLPeerRangingNotifier_Type::RegInfo]
void CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLPeerRangingNotifier_Type::Notification, NotificationData_T = CLPeerRangingNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLPeerRangingNotifier_Type::RegInfo]
virtual void CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::removeClient(int) [Notification_T = CLPeerRangingNotifier_Type::Notification, NotificationData_T = CLPeerRangingNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLPeerRangingNotifier_Type::RegInfo]
virtual bool CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLPeerRangingNotifier_Type::Notification, NotificationData_T = CLPeerRangingNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLPeerRangingNotifier_Type::RegInfo]
virtual bool CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::clientRegistered(int, const Notification_T &) [Notification_T = CLPeerRangingNotifier_Type::Notification, NotificationData_T = CLPeerRangingNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLPeerRangingNotifier_Type::RegInfo]
virtual bool CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLPeerRangingNotifier_Type::Notification, NotificationData_T = CLPeerRangingNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLPeerRangingNotifier_Type::RegInfo]
virtual void CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::listClients() [Notification_T = CLPeerRangingNotifier_Type::Notification, NotificationData_T = CLPeerRangingNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLPeerRangingNotifier_Type::RegInfo]
adsf
tiles_app_v2
tiles_preload_manifest
CLTilesManagerSilo
CLTilesManager::isSupportedTileType(tileType)
CLTilesManager::CLTilesManager(id<CLIntersiloUniverse>, std::unique_ptr<CLITilesManagerExternal>, CL::optional<CLTilesSetCollection>)
initialize
CLTilesManager::CLTilesManager(id<CLIntersiloUniverse>, std::unique_ptr<CLITilesManagerExternal>, CL::optional<CLTilesSetCollection>)_block_invoke
TILE: registered, tilesSet, %s
TmmMgr, ctor
TILE: fMinEncryptionGracePeriod, %.2lf
AppTilesActive
CLTilesSetCollection CLTilesManager::initializeProductionTilesSetCollection()
TILE: isAppTilesActive, %d
TilePreloadManifestTilesActive
TILE: isTilePreloadManifestActive, %d
DEMTilesServerUrl
TILE: fDefaultDEMTilesServerUrl, %s
DEMTilesRootDirectory
TILE: fDefaultDEMTilesRootDirectory, %s
AppTilesServerUrl
TILE: fDefaultAppTilesServerUrl, %s
AppTilesRootDirectory
TILE: fDefaultAppTilesRootDirectory, %s
TilePreloadManifestServerUrl
TILE: fDefaultTilePreloadManifestServerUrl, %s
TilePreloadManifestRootDirectory
TILE: fDefaultTilePreloadManifestRootDirectory, %s
TILE: fDefaultMaxTileAge, %.1lf
TILE: fDefaultMaxTileDataAge, %.1lf
MaxNumOfTiles
TILE: fMaxNumOfTiles, %d
NumOfSurroundingCirclesDEM
TILE: DEM,fDefaultNumOfSurroundingCirclesDEM, %d
void CLTilesManager::onDataProtectionNotification(int, const CLDataProtectionManager_Type::Notification &, const CLDataProtectionManager_Type::NotificationData &)
void CLTilesManager::onCleanupAgedTiles(CFRunLoopTimerRef)
TILE: onCleanupAgedTiles, %p
void CLTilesManager::clearLocationInformation()
void CLTilesManager::onCompanionNotification(int, const CLCompanionNotifier_Type::Notification &, const CLCompanionNotifier_Type::NotificationData &)
onCompanionNotification, notification, %d, Tiles
void CLTilesManager::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)
void CLTilesManager::deleteAgedDownloadItems(std::map<TileId, std::unique_ptr<CLTileFile> > &, CFAbsoluteTime)
@TileReq, %{public}s, rmlist, llsw, %{private}.2lf, %{private}.2lf, aged, size, %{public}ld
void CLTilesManager::agedTileDeleter(CLTilesSet &, CFAbsoluteTime)
TILE: deleteAgedTiles, delete, age, %.1lf, %.1lf, tileDataAge, %.1lf, %.1lf, tile, %s
void CLTilesManager::deleteAgedTilesForTilesSet(CLTilesSet &, CFAbsoluteTime)
void CLTilesManager::traverseAllTilesSets(const char *, CLTileManagerTraverseTilesSetBlock)
void CLTilesManager::deleteAgedTiles(CFAbsoluteTime)_block_invoke
void CLTilesManager::deleteAgedTiles(CFAbsoluteTime)
void CLTilesManager::cancelAllDownloads()
void CLTilesManager::removeAllTiles(bool, CLTilesManager_Type::TileType)
bool CLTilesManager::listTilesDirectory(const std::string &, CLTilesManager_Type::TileType, CFAbsoluteTime)
bool CLTilesManager::listAvailableFilesAllTypes(CFAbsoluteTime)
TILE: listAvailableFilesAllTypes, start
TILE: listAvailableFilesAllTypes, can't list tiles while locked, wait for unlock
bool CLTilesManager::listAvailableFilesAllTypes(CFAbsoluteTime)_block_invoke
TILE: convert to class A, first unlock, %s
TILE: convert to class C, first unlock, %s
B24@?0r*8I16B20
listerSetClass
listAvailableFilesAllTypes
bool CLTilesManager::listAvailableFilesAllTypes(CFAbsoluteTime)_block_invoke_2
@TileEvent, %{public}s, indexed, %{public}lu
TILE: listAvailableFilesAllTypes, done
bool CLTilesManager::listAvailableFilesByLister(const char *, CLTilesSet &, CLTileManagerFilesListerBlock)
TILE: listAvailableFilesByLister, reason, %s, rootDirectory, %s, name, %s
TileMgr, listAvailableFilesByLister, reason, %{public}s, can't open dir, %{public}s, #CloneMe
TILE: listAvailableFilesByLister, start
TILE: listAvailableFilesByLister, found tile file, filesNum, %u, absoluteFilename, '%s', d_type, %d
bool CLTilesManager::listAvailableFiles(const std::string &, CLTilesManager_Type::TileType, CFAbsoluteTime)
TileMgr, listAvailableFiles, can't open dir, %{public}s
TILE: listAvailableFiles, start
TILE: listAvailableFiles, found tile file, filesNum, %u, absoluteFilename, '%s', d_type, %d
TileMgr, listAvailableFiles, failed to stat file, %{public}s, ret, %{public}d, #CloneMe
TILE: listAvailableFiles, end
void CLTilesManager::refreshTilesDataIfNeeded()_block_invoke_2
void CLTilesManager::checkDownloadSchedule(CFAbsoluteTime)
TILE: checkDownloadSchedule, no data connectivity, avoiding downloads
TILE: checkDownloadSchedule, checking, numOfActiveDownloads, %u, small, %d, large, %d
CLTilesManager::isSupportedTileType(tile->getTileType())
TILE: checkDownloadSchedule, isShouldDownload is not true, exists on server, %d
TILE: checkDownloadSchedule, isShouldDownload, %d, isAllowDownload, %d, isCurrentTile, %d, isAllowCellular, %d, check, %s, details, %s
@TileReq, %{public}s, start, llsw, %{private}.2lf, %{private}.2lf, reach, %{public}d
void CLTilesManager::tileDownloadCompleted(CLFileDownload *, bool, void *)
TileMgr, where did this download request come from?, download, %{public}p, #CloneMe
void CLTilesManager::tileDecompressionCompleted(CLFileDownload *, bool, void *, CFAbsoluteTime)
TileMgr, tileDecompressionCompleted, no tile for download, %{public}p, #CloneMe
@TileReq, %{public}s, mapped, llsw, %{private}.2lf, %{private}.2lf
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Daemon/Positioning/Tiles/CLTilesManager.mm
TileMgr, tileDecompressionCompleted, where the file, was it deleted, %{private}s, #CloneMe
void CLTilesManager::sendNotificationTileWasDownloaded(bool, const CLTileFile &, const CLTilesSet &)
static void CLTilesManager::_tileDownloadCompleted(CLFileDownload *, bool, void *)
static void CLTilesManager::_tileDownloadCompleted(CLFileDownload *, bool, void *)_block_invoke
unsigned int CLTilesManager::getNumOfActiveDownloads()
bool CLTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, sec_key_t, const std::string &, const CLTileFileDownloadDetails &, CFAbsoluteTime)
@TileReq, %{public}s, request, llsw, %{private}.2lf, %{private}.2lf
TILE: requestDownload, ignoring request, no sec_key
TILE: requestDownload, tileid, %s, is locked will be redownloaded, details, %s, allowRedownload, %d, isAddToDownloadList, %d
ForceDownloadDEMTiles
TILE: DEM,fForceDownloadDEMTiles, %d
@TileReq, %{public}s, onlist, llsw, %{private}.2lf, %{private}.2lf, center, size, %{public}ld
@TileReq, %{public}s, onlist, llsw, %{private}.2lf, %{private}.2lf, neighbor, size, %{public}ld
CLTileFile *CLTilesManager::getRawTileFile(const CLTilesManager_Type::TileType &, const double &, const double &, std::string &, bool &, bool &)
TILE: getTileFile, index is not available until first unlock, fDataProtectionEnabled, %d
TILE: getTileFile, tile, %s, isAvailable, %d, isFileAccessible, %d
TILE: getTileFile, tileid, %s, not available
bool CLTilesManager::deleteTileFile(const CLTilesManager_Type::TileType &, const char *)
TileMgr, deleteTileFile, tileType, %{public}d, %{private}s, localPathToFile, %{public}s, #CloneMe
this->fTilesToDownload.find(tileIdToDownload) == this->fTilesToDownload.end()
bool CLTilesManager::addToDownloadList(std::unique_ptr<CLTileFile>, const TileId &, const CLTileFileDownloadDetails &)
void CLTilesManager::updateProtectionClass(const char *, const CLDaemonLocation &, bool)
void CLTilesManager::updateProtectionClass(const char *, const CLDaemonLocation &, bool)_block_invoke
TileMgr, updateProtectionClass, start, %s, reason, %s, isAboutToLock, %d, locationAge, %.1lf, doLocCheck, %d, sizes, %lu, %lu, knownLocation, %s
TileMgr, tile ptr is NULL, #CloneMe
TileMgr, updateProtectionClass, failed unlocking tileid, %{private}s, size, %{public}lu, #CloneMe
TileMgr, updateProtectionClass, unable to lock tile, locking tileid, %{private}s, #CloneMe
TileMgr, updateProtectionClass, lockstats, %{public}s, lock, %{public}d, unlock, %{public}d, size, %{public}lu
TileMgr, updateProtectionClass, unable to lock tile, locking tileid, %{pricate}s, #CloneMe
TileMgr, Unable to lock all unprotected files!, #CloneMe
void CLTilesManager::scheduleExpiredLocationTimer(const char *)
TILE: scheduleExpiredLocationTimer, no valid location
TILE: scheduleExpiredLocationTimer, reason, %s, locationAge, %.1lf, secondsFromNow, %.1lf, lastKnownLocation, %s
void CLTilesManager::cancelExpiredLocationTimer()
TILE: cancelExpiredLocationTimer
void CLTilesManager::onExpiredLocationTimerFired()
TILE: onExpiredLocationTimerFired, isLocked, %d
TILE: onExpiredLocationTimerFired
void CLTilesManager::onPCTimerFired(CLPersistentTimer *)
TILE: onPCTimerFired
void CLTilesManager::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)
void CLTilesManager::onStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)
TileMgr, onStatusNotification, unknown notification, %{public}d, #CloneMe
virtual void CLTilesManager::shutdown()
TILE: CLTilesManager::shutdown
void CLTilesManager::getTileStats(CLDaemonStats_Type::LocationNetworkQueries &)
TILE: stats: getTileStats, demTilesDownloaded, %d
CLTilesSet &CLTilesManager::getTilesSet(CLTilesManager_Type::TileType)
TileMgr, invalid tileType, %{public}d, #CloneMe
predownloadTilesForLocation
void CLTilesManager::predownloadTilesForLocation(const CLDaemonLocation &, CFAbsoluteTime)_block_invoke
void CLTilesManager::updateTileLocationRelevancy(const CLDaemonLocation &)
void CLTilesManager::updateTileLocationRelevancy(const CLDaemonLocation &)_block_invoke
TILE: updating dem neighbor mtime, %d, type, %d, tileid, %s
Invalid dem neighbor tile id!
TileMgr, Invalid tile id!, #CloneMe
bool CLTilesManager::getAppAvailabilityForArea(double, double, float, CLTilesManager::SearchContext &, std::list<AppAvailability> &, bool)
TILE: getAppAvailabilityForArea, index is not available until first unlock, fDataProtectionEnabled, %d
TILE: getAppAvailabilityForArea, tiles, %d, %s, are not active on this device
TILE: getAppAvailabilityForArea, loc, %.8lf, %.8lf, radius, %.3f
TILE: getAppAvailabilityForArea, tile, %s
TILE: getAppAvailabilityForArea, ctile, %s
TILE: already been searched
TILE: getAppAvailabilityForArea, y, %d, x, %d, ntile, %s
TILE: getAppAvailabilityForArea, appRecommendation, %lu, %s, loc, %.10lf, %.10lf, span, %.10lf, %.10lf
143441
std::string CLTilesManager::composeFullAppTilesServerUrl()
TILE: fullAppTilesServerUrl, %s
void CLTilesManager::storeFrontDidChange()
TILE: onStoreFrontDidChangeNotification, new fServerUrl, %s
void CLTilesManager::enableAppTilesDownload(bool)
TILE: shouldEnableAppTiles, %d, fAppTilesEnabled, %d
pMarkets != nullptr
bool CLTilesManager::getRegionPreloadManifest(std::vector<CLMarketRegion> *)
Get manifest tile, %lu
tilesSet.fTilesMap.size() == 1 && "Why do we have more than one, we only want one"
static std::tuple<bool, bool> CLTilesManager::isValidTileFilename(const std::string &)
Ignoring file- contiains ignore suffix.
Ignoring file- plist.
Invalid file name found in a tiles directory not otherwise specific- deleting.
fileName
static bool CLTilesManager::isValidTileFilenameWithPossibleDeletion(const std::string &, const std::string &)
Deleting invalid file found in tiles directory.
rootDirectory
Skipping non-tile file.
std::tuple<bool, CLTileFile *> CLTilesManager::createTileFileObject(CLTilesManager_Type::TileType, const std::string &, const std::string &, CFAbsoluteTime)
void CLTilesManager::lockTileIfNeeded(CLTileFile *, CLTilesSet &, CFAbsoluteTime, const char *)
@TileList, %{public}s, add, llsw, %{private}.2lf, %{private}.2lf, %{public}s, size, %{public}lu, 
cldavl.avl
sw_cor, 
, adamId, 
, radiusIns, 
, rankIns, 
, rankUnIns, 
, age, 
, touristApp, 
virtual void CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLTilesManager_Type::Notification, NotificationData_T = CLTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLTilesManager_Type::Notification, NotificationData_T = CLTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLTilesManager_Type::Notification, NotificationData_T = CLTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLTilesManager_Type::Notification, NotificationData_T = CLTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLTilesManager_Type::Notification, NotificationData_T = CLTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLTilesManager_Type::Notification, NotificationData_T = CLTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::listClients() [Notification_T = CLTilesManager_Type::Notification, NotificationData_T = CLTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
float CLNatalieCycleModel::computeHRMets(const CLNatalieModelInput &) const
Cycle, CR DT Regression, %f, %f, catherine(cpm), %f, catherinemax(cpm), %f, catherinemin(cpm), %f, vo2max(METs), %f, duration(s), %f, weight(kg), %f, METS, %f
virtual CLMetsInfo CLNatalieCycleModel::computeMETS(const CLNatalieModelInput &)
Cycle, GPS speed at time, %f, %f is too high,  set to maximum default, %f
Cycle, Uphill vertical speed at time, %f, %f is too high, set to maximum default %f
Cycle, WR Linear Regression, %f, %f, Grade type, %d, GPS Speed, %f, Vertical Speed, %f, Duration(s), %f, Weight(kg), %f, WR METS, %f
Cycle, Model switcher input availability, StartTime, %f, EndTime, %f, ModelSwitcherInputCase, %d, gradeType, %d, hspeed, %f, vspeed, %f, isCatherineAvailable, %d, isCatherineReliable, %d, isGpsAvailable, %d, HRstaleness, %f
Cycle, Fused, %f, %f, HR METS, %f, WR METS, %f, Fused METS, %f, Grade type, %d, GPS Speed, %f, Vertical Speed, %f, Duration(s), %f, Weight(kg), %f, Steps, %d, ModelSwitcherInputCase, %d, distance, %f, altitude, %f, HRstaleness, %f, HR, %f, metSource, %d
float CLNatalieCycleModel::computeLinearRegressionWR(float, float, const CLNatalieModelInput &) const
Cycle, RollingResistance,%f,gravity,%f,wind,%f,totalWR,%f,startTime,%f,endTime,%f
mac, 
, lat, 
, lon, 
, alt, 
, acc, 
, vacc, 
, channel, 
, score, 
, reach, 
, rssi, 
, qTime, 
, sTime, 
, flg, -
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Daemon/Positioning/XPlatform/CLWifiAPLocation.cpp
fScore != UNINITIALIZED_SCORE
queryTimestamp
locationWasFoundInTile
TilesSetGlobalProperties
static const std::string &CLTilesSetGlobalProperties::getRootDirectoryForTileType(CLTilesManager_Type::TileType)
No root directory set for tile type.
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Daemon/Positioning/Tiles/CLTilesSetGlobalProperties.cpp
static void CLWifiTileFile::initStaticGlobals()
TILE: running initStaticGlobals
kMinimumSupportedTilesVersion
TILE: fMinimumSupportedTilesVersion, %d
CLWifiTileFile-Mutex
virtual void CLWifiTileFile::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const CLTileFile::TraverseDetails &)
TILE: CLWifiTileFile, sectionId, %d, %s
TILE: tileMacIndexHeader, entrySizeInBytes, %u
TILE: headers only, avoid reading SectionID_TileIndex_Mac
TILE: headers only, avoid reading SectionID_TileAccessPointTable
virtual void CLWifiTileFile::onTraversingTileIndexEntry(const CLTilesManager_Type::AccessPointIndexEntry &)
TILE: idx, %3lu, %3u, mac, %s, offset, %u
virtual void CLWifiTileFile::onTraversingTileAPTableEntry(const CLTilesManager_Type::AccessPointEntry &)
TILE: mac, %3u, mac,%x:%x:%x:%x:%x:%x, y, %3d, x, %3d, loc, %14.10lf, %14.10lf, unc, %.1lf, reach, %.1lf
bool CLWifiTileFile::binarySearchAP(CLTilesManager_Type::AccessPointEntry *, unsigned int, const CLTileFile::TraverseDetails &, const CLTilesManager_Type::TileAccessPointTable &)
TILE: binarySearchAP, match, %012llx, %012llx
bool CLWifiTileFile::binarySearchIndex(const CLTilesManager_Type::AccessPointIndexEntryVector &, const CLTileFile::TraverseDetails &, unsigned int &, unsigned int &)
WifiTile, binarySearchIndex, ==================> indexFailed <==================, size, %{public}4lu, a, %{public}4lu, b, %{public}4lu, c, %{public}4lu,  A, %{public}012llx,  S, %{public}012llx, B, %{public}012llx, #CloneMe
TILE: binarySearchIndex, indexFound, isFound, %d, wasSearched, %d, size, %4lu, a, %4lu, b, %4lu, c, %4lu, searchAr, %4u, A, %012llx,  S, %012llx, B, %012llx
virtual bool CLWifiTileFile::traverseTileFile(FILE *, const CLTileFile::TraverseDetails &)
TILE: traverseTileFile, message, %s, isHeadersOnly, %d, isBinarySearch, %d, macAddressToSearch, %012llx, cachedIndex, %d
TILE: traverseTileFile, indexVector cached, seek to the APs table, %lld
TILE: traverseTileFile, re-using cached index vector
TILE: traverseTileFile, searched index, A, %012llx, mac, %012llx, B, %012llx, indexSize, %lu, halting search
WifiTile, Invalid section signature, readBytes, %{public}lu, section, signature, 0x%{public}x, sectionId, %{public}d, sizeBytes, %{public}d, #CloneMe
WifiTile, message, %{public}s, readBytes, %{public}lu, section, signature, 0x%{public}x, sectionId, %{public}d, sizeBytes, %{public}d, headerSizeBytes, %{public}d, sectionId, %{public}d, #CloneMe
WifiTile, traverseTileFile, invalid tile file, bad allocation size, bytesToAllocate, %{public}lu, maxAllocationSize, %{public}lu, #CloneMe
TILE: skip section, message, %s, signature, 0x%x, sectionId, %d, sizeBytes, %d, headerSizeBytes, %d
WifiTile, failed to allocate memory for, %{public}lu, #CloneMe
WifiTile, failed to read, %{public}lu, %{public}lu, #CloneMe
this->fCurrentIndexVector != __null
TILE: searched index, A, %012llx, mac, %012llx, B, %012llx, indexSize, %lu, halting search
TILE: searched index, A, %012llx, mac, %012llx, B, %012llx, indexSize, %lu
TILE: headers only, avoid reading the APs
TILE: unknown section : %d
TILE: traverseTileFile, finished traversing, file, index entries, %lu, apEntries, %lu
_lvl
_cat
_msg
CLLogEntry.proto
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Daemon/Positioning/Raven/CLLogEntry.pb.cc
CLLogEntry.proto
CLPublicDataCapture.proto
CLPrivateDataCapture.proto"
CLLogEntry
event_record_time
.CLLogEntry.TimeStamp
public_data_capture
2!.CLPublicData.CLPublicDataCapture
private_data_capture
2#.CLPrivateData.CLPrivateDataCapture
TimeStamp
cf_absolute_time_s
mach_absolute_time_s
mach_continuous_time_s
rawCoordinateLatitude
rawCoordinateLongitude
hasRawCoordinateLatitude
Td,N,V_rawCoordinateLatitude
hasRawCoordinateLongitude
Td,N,V_rawCoordinateLongitude
RawSpeedToKValueTable
RawSpeed
KValue
StrideCalibrationDataBins
-[CMPedometerTableRawSpeedToKValue logBins]_block_invoke
v32@?0@"CMPedometerBin"8Q16^B24
CLMotionSyncStore
v16@?0^{CLMotionSyncStore=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBB@{unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client> >={__compressed_pair<CLDataProtectionManager_Type::Client *, std::__1::default_delete<CLDataProtectionManager_Type::Client> >=^{Client}}}}8
-[CMPedometerTableRawSpeedToKValue updateBinsWithTrack:]
%s,Updated,With,%s,%0.4f,%s,%0.4f,Alpha,%0.4f,%s
v32@?0@"CMStrideCalibrationData"8Q16^B24
CLWifiScanner::CLWifiScanner(id<CLIntersiloUniverse>, std::shared_ptr<IWifiScanningStrategy>)
%s INITIAL isWifiPowered=%d
void CLWifiScanner::start()
%s Start monitor for active scanning
void CLWifiScanner::stop()
%s Stop monitor for active scanning
void CLWifiScanner::onTimerTriggered()
%s TIMER TRIGGERED
void CLWifiScanner::onWifiNotification(int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)
%p WIFI POWER NOTIFICATION RECEIVED, power=%d nextFire=%f
void CLWifiScanner::scheduleNextScan(std::shared_ptr<WifiScanSettings>)
%s WIFI EXECUTING IMMEDIATELY, now=%f nextRequestTime=%f
%s WIFI SCAN SCHEDULED FOR %f
bool CLWifiScanner::requestScan(std::shared_ptr<WifiScanSettings>)
%s WIFI IS POWERED OFF - NOT ISSUING SCAN REQUEST
{ScanParameters=iii{vector<int, std::__1::allocator<int> >=^i^i{__compressed_pair<int *, std::__1::allocator<int> >=^i}}{duration<long long, std::__1::ratio<1, 1000> >=q}{duration<long long, std::__1::ratio<1, 1> >=q}Bc}8@?0
virtual void CLOnBodyNotifier7::startOnBodyDetection()
Registering with Motion Coprocessor
virtual void CLOnBodyNotifier7::stopOnBodyDetection()
Unregistering with Motion Coprocessor
void CLOnBodyNotifier7::onMotionCoprocessorData(const CLMotionCoprocessorInterface::NotificationData *)
onBodyStatusData->onBodyStatus,%d,onBodyStatusData->confidence,%d,onBodyStatusData->timestamp,%f
AutopauseRequiredDuration
static bool CLAutopauseCalculator::isLocationTypeSupported(CLLocationType)
Unknown whether or not provider %{public}d is a candidate for autopause
void CLAutopauseCalculator::aggregation(CLAutopauseCalculator::AggregateCoord &, const std::deque<CoordAndMotion> &)
PKAUTOPAUSE MEAN coord: %f %f %f %f %f %f %f %d %d 
virtual void CLCompanionNotifierWatch::receiveCompanionMessage(CLCompanionNotifier_Type::Type, NSData *)
Received companion message,type,%d,size,%lu
#Warning error serializing OdometerCyclingData
#Warning error deserializing OdometerElevationData
#Warning error deserializing CoarseElevationData
v16@?0^{CLMotionStateObserver=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBid@BB{unique_ptr<CLCompanionNotifier_Type::Client, std::__1::default_delete<CLCompanionNotifier_Type::Client> >={__compressed_pair<CLCompanionNotifier_Type::Client *, std::__1::default_delete<CLCompanionNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLFitnessTrackingNotifier_Type::Client, std::__1::default_delete<CLFitnessTrackingNotifier_Type::Client> >={__compressed_pair<CLFitnessTrackingNotifier_Type::Client *, std::__1::default_delete<CLFitnessTrackingNotifier_Type::Client> >=^{Client}}}}8
virtual bool CLCompanionNotifierWatch::registerForNotification(int, const CLCompanionNotifier_Type::Notification &, const CLCompanionNotifier_Type::RegistrationInfo &)
Registering for companion notification type %d
Last Overridden Session,%ld, Registration Info Overridden Session,%ld
virtual bool CLCompanionNotifierWatch::unregisterForNotification(int, const CLCompanionNotifier_Type::Notification &)
Unregistering for companion notification type %d
virtual void CLCompanionNotifierWatch::handleStateSyncTimerExpiry()
Sync state with Companion
void CLCompanionNotifierWatch::sendLastOverriddenSession() const
#Warning Error serializing session override (%ld): %s
void CLCompanionNotifierWatch::checkAndToggleSpectatorSubscriptions()
#Warning Spectator subscriptions expired
void CLCompanionNotifierWatch::toggleCoarseElevationSubscription(bool)
coarse elevation sub,enable,%d,transport,%d,subsCompleted,%d,unlockSinceBoot,%d,fitnessTracking,%d,numClients,%d
CLBTASilo
CLBTA
IsUseBTA
CLBTA::CLBTA(id<CLIntersiloUniverse>)
BTA: fIsUseBTA, %d
virtual bool CLBTA::unregisterForNotificationInternal(const CLBTA_Type::Notification &)
BTA: unregisterForNotificationInternal, notificaiton, %d
void CLBTA::startMonitoringAll()
BTA: startMonitoringAll
BTA: startMonitoringAll, isActive, %d, fIsMonitoringActive, %d
bool CLBTA::startMonitoring(const bool, const bool)
#Warning BTA: startMonitoring, jobName, no BTA in the simulator
void CLBTA::setUseBTA(bool)
BTA: setUseBTA, isUseBTA, %d
virtual void CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLBTA_Type::Notification, NotificationData_T = CLBTA_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLBTA_Type::Notification, NotificationData_T = CLBTA_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLBTA_Type::Notification, NotificationData_T = CLBTA_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLBTA_Type::Notification, NotificationData_T = CLBTA_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLBTA_Type::Notification, NotificationData_T = CLBTA_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLBTA_Type::Notification, NotificationData_T = CLBTA_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::listClients() [Notification_T = CLBTA_Type::Notification, NotificationData_T = CLBTA_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
fileHandle != nullptr
fileHandle->isOpen()
bool CLWifiTileParser::parseWifiTile(CLWifiTileParser::MemoryMappedFileHandle *, std::function<void (const CLTilesManager_Type::TileHeader &, int)>, std::function<void (const CLTilesManager_Type::AccessPointEntry &)>)
Section signature does not match required value.
actual
expected
SectionID_TileHeader headerSizeBytes field is incorrect.
Not enough data left to read a TileHeader.
SectionID_TileIndex_Mac headerSizeBytes field is incorrect.
Not enough data left to read a TileIndexMacHeader.
SectionID_TileAccessPointTable headerSizeBytes field is incorrect.
Not enough data left to read a TileAccessPointTable.
Skip reading tile access point index table
Not enough data left to read an AccessPointEntry.
currentIndex
totalIndices
Invalid SectionId value.
sectionId
static std::unique_ptr<CLWifiTileParser::MemoryMappedFileHandle> CLWifiTileParser::MemoryMappedFileHandle::openMemoryMappedFile(const std::string &)
Opening and memory mapping %s
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Daemon/Positioning/Tiles/CLWifiTileParser.cpp
errorMessage
errno
WifiTileBuilder
void CLSerializedWifiTileBuilder::addOrderedAccessPointEntry(const CLWifiTileAccessPointEntry &)
Tile Header must be written before adding access points.
std::unique_ptr<std::vector<uint8_t> > CLSerializedWifiTileBuilder::build()
Tile Header never written
Number of APs written does not match expected
x <= 0xFFF
y <= 0xFFF
DataBlock CLWifiTileParser::readNextBlock(CLWifiTileParser::MemoryMappedFileHandle *, off_t) const [DataBlock = CLTilesManager_Type::SectionHeader]
Not enough data left to read block.
bytesRead
bytesNeeded
filesSize
Not enough data left to read block of size 
 in wifi tile: 
DataBlock CLWifiTileParser::readNextBlock(CLWifiTileParser::MemoryMappedFileHandle *, off_t) const [DataBlock = CLTilesManager_Type::TileHeader]
DataBlock CLWifiTileParser::readNextBlock(CLWifiTileParser::MemoryMappedFileHandle *, off_t) const [DataBlock = CLTilesManager_Type::TileIndexMacHeader]
DataBlock CLWifiTileParser::readNextBlock(CLWifiTileParser::MemoryMappedFileHandle *, off_t) const [DataBlock = CLTilesManager_Type::TileAccessPointTable]
DataBlock CLWifiTileParser::readNextBlock(CLWifiTileParser::MemoryMappedFileHandle *, off_t) const [DataBlock = CLTilesManager_Type::AccessPointEntry]
CLVO2MaxEstimator::Result CLVO2MaxEstimator::feedWorkoutEvent(const CLMotionStateMediator_Type::WorkoutEvent &)
workoutEvent,%ld,workoutType,%ld
VO2MaxEstimationError CLVO2MaxEstimator::estimateVO2Max(float &, float &, float &, float &, float &)
Vo2Max,%f,numPairs,%lu,status,%d,LSEst,%f,SumEst,%f,divergence,%f,consistency,%f,PredEst,%f
void CLVO2MaxEstimator::logSessionStats(double, double, double, VO2MaxEstimationError)
VO2Max,pctHRSamplesValidMin,%d,pctHRSamplesValidMax,%d,pctHRSamplesWithRecentHR,%d,pctMETSamplesWithValidDelta,%d
VO2Max,longitudinalConsistency,%d,old,%f,new,%f
void CLVO2MaxPreprocessor::log(T &) [T = CLVO2MaxStats]
PreProcessor,PairStats,total,%d,warmup,%d,grade,%d,flat,%d,delta,%d,metsAboveMin,%d,pairInBounds,%d,hrAboveMin,%d,hrBelowMax,%d,gps,%d,stride,%d,distance,%d,source,%d,hrOK,%d,totalGood,%d
Use the designated initializer
CLOdometerAlarmManager
odometerTarget
Td,N,VodometerTarget
T@?,C,N,Vhandler
invalid
TB,N,Vinvalid
T@"<CLOdometerAlarmManagerProtocol>",&,N,V_manager
CLPressureBiasSilo
CLPressureBias
bool CLPressureBias::readFactoryData(CLPRTT::Syscfg &)
Cannot find pressure registry entry
temp-compensation-table
PRTT property is not CFData
PRTT property too small
void CLPressureBias::onDb(int, const CLPressureCalibrationDatabase_Type::Notification &, const CLPressureCalibrationDatabase_Type::NotificationData &)
Unexpected notification from pressure db.notification,%d
virtual void CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLPressureBias_Type::Notification, NotificationData_T = CLPressureBias_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLPressureBias_Type::Notification, NotificationData_T = CLPressureBias_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLPressureBias_Type::Notification, NotificationData_T = CLPressureBias_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLPressureBias_Type::Notification, NotificationData_T = CLPressureBias_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLPressureBias_Type::Notification, NotificationData_T = CLPressureBias_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLPressureBias_Type::Notification, NotificationData_T = CLPressureBias_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::listClients() [Notification_T = CLPressureBias_Type::Notification, NotificationData_T = CLPressureBias_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
-[CLOdometerAlarmManager handleLocationData:]
BATCH: received locations w/ odometer: %f, %f
#Warning BATCH: odometer ran from %f to %f
#Warning BATCH: Received a location (%s) without an odometer while odometer alarm was set
-[CLOdometerAlarmManager handleOdometerData:]
#Warning BATCH: odometer reset: %.2f
BATCH: received odometer: %f
lastOdometer
Td,N,VlastOdometer
currentlyScheduled
T@"CLOdometerAlarm",N,VcurrentlyScheduled
firstAlarm
T@"CLOdometerAlarm",R,N
void (anonymous namespace)::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &, void *)
BATCH: Should not be registered for location
BATCH: Unexpected notification: %{public}d
index < fNumEntries
CL::WifiPositioning::Output CLWifiPositioningSystemLogic::apply(const CL::WifiPositioning::Input &)
@WifiLogic, applyInput, %{public}s
@WifiLogic, setoutputs
CLDEMTile-Mutex
virtual void CLDEMTile::clear()
TILE: clear, tile, %sd
CLBundleKeyValueCache
CLSystemService
CLHarvestableSystemService
CLIsFindMyiPhone
CLIsCoreRoutine
CLEmergencyService
CLRequiredCapabilities
kCMCalibrationTrackCodingKeyStart
kCMCalibrationTrackCodingKeyStop
kCMCalibrationTrackCodingKeyDistanceGps
kCMCalibrationTrackCodingKeyDistanceRawPed
kCMCalibrationTrackCodingKeySteps
kCMCalibrationTrackCodingKeyGpsSource
%@,TimeStart,%0.2f,TimeEnd,%0.2f,DistanceGps,%0.2f,DistanceRawPed,%0.2f,Steps,%0.2f,GpsSource,%ld
T@"NSDate",&,N,V_start
T@"NSDate",&,N,V_stop
distanceGps
Td,N,V_distanceGps
distanceRawPed
Td,N,V_distanceRawPed
Td,N,V_steps
Ti,N,V_gpsSource
-[CalTrackFinder init]
initialize
-[CalTrackFinder stop]
CloseTrack,Stop
CL-GPS-UnfilteredMultipleSources
-[CalTrackFinder updateGpsLocationBuffer:gpsSource:]
Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Speed,%0.3f,Course,%0.3f,Altitude,%0.3f,VerticalAccuracy,%0.3f,Timestamp,%0.3f,Source,%d
CloseTrack,GpsSourceChange,GpsSourceOld,%ld,GpsSourceNew,%ld
CL-GPS-Filtered
-[CalTrackFinder _filterGpsLocationBuffer]
-[CalTrackFinder _closeTrackCheckGpsLocation]
CloseTrack,GpsLocationEntryTimeOut,TimeSinceLastEntry,%0.2f
-[CalTrackFinder _closeTrackCheckGpsLocationFiltered]
CloseTrack,GpsFilteredHorizontalAccuracyOutOfBounds,HorizontalAccuracy,%0.2f
CloseTrack,GpsFilteredSpeedOutOfBounds,Speed,%0.2f
CloseTrack,NumSamplesMaxGpsFilteredLocation,NumSamples,%d
-[CalTrackFinder _closeTrackCheckGpsOdometer]
CloseTrack,GpsOdometerEntryTimeOut,TimeSinceLastEntry,%0.2f
CloseTrack,DistanceGpsRoughMax,DistanceGpsRough,%0.2f
CloseTrack,TimeSpanMax,Timespan,%0.2f
CloseTrack,NumSamplesMaxGpsOdometer,NumSamples,%d
-[CalTrackFinder _closeTrackCheckPedometer]
CloseTrack,PedometerEntryTimeOut,TimeSinceLastEntry,%0.2f
CloseTrack,NoStepsForTwoPedometerEntries
CloseTrack,PedometerSpeedCurrentZero
CloseTrack,PedometerSpeedCurrentJump,SpeedCurrentPrev,%0.2f,SpeedCurrent,%0.2f,SpeedCurrentJumpPercent,%0.2f
CloseTrack,PedometerArmConstrainedState,%d
CloseTrack,NumSamplesMaxPedometer,NumSamples,%d
-[CalTrackFinder _closeCurrentTrack]
CloseTrack,NumAdditionalPedometerEntriesRemoved,%ld
CloseTrack,TrackMetrics,TimeStartGpsLocationSegment,%0.2f,TimeEndGpsLocationSegment,%0.2f,%s
CloseTrack,Fail,DistanceGpsNotSufficient,DistanceGps,%0.2f
CloseCurrentTrack,Fail,GpsSpeedDiscrepancyDetected,SpeedGpsRawMean,%0.2f,GpsDistanceOverTime,%0.2f,SpeedErrorPercent,%0.2f
CloseTrack,Success
gpsLocationBuffer
T@"NSMutableArray",&,V_gpsLocationBuffer
gpsLocationBufferFiltered
T@"NSMutableArray",&,V_gpsLocationBufferFiltered
gpsOdometerBuffer
T@"NSMutableArray",&,V_gpsOdometerBuffer
pedometerBuffer
T@"NSMutableArray",&,V_pedometerBuffer
timeStart
T@"NSDate",&,V_timeStart
timeEnd
T@"NSDate",&,V_timeEnd
timeStartGpsLocationSegment
T@"NSDate",&,V_timeStartGpsLocationSegment
timeEndGpsLocationSegment
T@"NSDate",&,V_timeEndGpsLocationSegment
Td,V_distanceGps
Td,V_distanceRawPed
Td,V_steps
Ti,V_gpsSource
calTrackHandler
T@?,C,V_calTrackHandler
CLRavenEventSerializer::CLRavenEventSerializer(std::string)
Recording raven events to %s
void CLRavenEventSerializer::populateTimeStamp(CLLogEntry_TimeStamp *)
basalMETs
hasMets
hasBasalMETs
Tf,N,V_basalMETs
Tq,N,V_natalies
hasBasalNatalies
Tq,N,V_basalNatalies
hasDuration
Td,N,V_duration
bool CLOdometerQuality::cdfCalculator(const std::vector<unsigned int> &, const double &, std::vector<double> &)
noSamples < 1 || hist.empty()
void CLOdometerQuality::classifySamples(std::vector<double> &)
unexpected trained cdf data size issue
OdometerQualityIndicator,%d,r2,%f
%@:%@
hostValue
Host
kCFURLConnectionSocketStreamProperties
kCFStreamPropertySSLSettings
kCFStreamSSLPeerName
-[CLCustomAuthPBRequester connection:willSendRequestForAuthenticationChallenge:]
Unable to create SecPolicyRef
Unable to create policy list
SecTrustEvaluate() failed with securityResult=%{public}u
SecTrustEvaluate() failed with status=%{public}d
sslHostname
T@"NSString",&,N,V_sslHostname
fConnectionSession
T@"CLURLConnectionSession",&,N,VfConnectionSession
CLTileDownloader::CLTileDownloader(CLTileDownloaderPolicy, CLITileDownloaderExternal *, CLTilesSetCollection *, CLTileDownloadPolicy *)
TileError, connectivity, current, %{public}d, neighbor, %{public}d
TileError, connectivity, neighbor, %{public}d, nonneighbor, %{public}d
TileQueue, policy, %{public}s
bool CLTileDownloader::requestTiles(TileId, CFAbsoluteTime)
TileDl, preindexskip, request, #CloneMe
@TileQueue, usable, %{public}d, tileid, %{private}s
@TileQueue, onlist, tileid, %{private}s
@TileQueue, unreadable, %{public}d, tileid, %{private}s
@TileQueue, queue, 1
@TileQueue, skip, alreadyDownloaded, %{public}d, accessible, %{private}d, inqueue, %{public}d, locked, %{private}d
@TileDl, skipneighbor, %{private}.2lf, %{private}.2lf, locked, %{public}d, dled, %{public}d, pending, %{public}d, outbounds, %{public}d
void CLTileDownloader::addToDownloadList(std::unique_ptr<CLTileFile>, const TileId &, CFAbsoluteTime)
TileDl, preindexskip, addToDownloadList, #CloneMe
fDownloadList.find(tileId) == fDownloadList.end()
bool CLTileDownloader::areDownloadConditionsMet() const
@TileDl, skipall, first unlock
@TileDl, skipall, on connectivity
@TileDl, skipall, in progress
DlProgress
Refresh
bool CLTileDownloader::canRequestBasedOnAttempts(CLTileFile *, CFAbsoluteTime)
@TileReq, %{public}s, attempts, llsw, %{private}.2lf, %{private}.2lf, isDownload, %{public}d, lastSuccess, %{public}d, existsOnServer, %{public}d, sinceLastDownload, %{public}.1lf, path, %{public}s
void CLTileDownloader::checkAndMakeState(TileId, bool, const char *)
@TileError, %{public}s, nostate, %s, llsw, %{private}.2lf, %{private}.2lf, nlist, %{public}ld, nstate, %{public}lu
@TileDl, %{public}s, makestate, %s, llsw, %{private}.2lf, %{private}.2lf, nlist, %{public}ld, nstate, %{public}lu
TileId CLTileDownloader::downloadNextEligibleTile(CLFileDownload *, CLDaemonLocation, CFAbsoluteTime, bool)
@TileDl, %{public}s, checkNextEligible, tilesToDownload, %{public}lu, tilesCanBeDownloaded, %{public}lu, ncurrent, %{public}d, connectivity, %{public}d, background, %{public}d, neighbors, %{public}d, location, %{private}0.1f, %{private}0.1f, %{public}1.f
downloading
@TileReq, %{public}s, start, llsw, %{private}.2lf, %{private}.2lf, allowOverCellular, %{public}d, isCurrentTile, %{public}d
@TileDl, cell, skipall
completed
std::unique_ptr<CLTileFile> CLTileDownloader::downloadCompleted(TileId, bool, bool, CFAbsoluteTime)
@TileDl, %{public}s, completed, llsw, %{private}.2lf, %{private}.2lf, success, %{public}d, nlist, %{public}ld, nstate, %{public}lu, rtt, %{public}.1f
bool CLTileDownloader::shouldRefresh(CLTileFile *, CFAbsoluteTime)
TileDl, preindexskip, refresh, #CloneMe
@TileDl, checkRefresh, llsw, %{private}.2lf, %{private}.2lf, expired, %{public}d, onlist, %{public}d
void CLTileDownloader::deleteAgedDownloads(CFAbsoluteTime)
@TileQueue, deleteAged, startsize, %{public}lu
aged
TileQueue, %{public}s, reqage, llsw, %{private}.2lf, %{private}.2lf, age, %{public}0.1f, time, %{public}0.1f, size, %{public}lu
@TileQueue, deleteAged, %{public}d, endsize, %{public}lu
void CLTileDownloader::cancelAllDownloads()
@TileQueue, cancelAll, size, %lu
void CLTileDownloader::setLockState(bool)
TileQueue, firstUnlock
CLTileDownloaderPolicy
, currentRequirement, 
, neighborRequirement, 
, nonneighborRequirement, 
, slowCell, 
, redownloadLocked, 
, neighbors, 
, maxlist,
, maxage,
, cooloff, 
, refreshMultiplier, 
, decompress, 
static std::unique_ptr<CLITileSyncManager> CLITileSyncManager::createProduction(CLWifiTilesManager *, id<CLIntersiloUniverse>, BasicMutex *, std::shared_ptr<CLWifiAccessPointLocationService>)
Instantiating CLTileSyncManager
Instantiating NoopTileSyncManager
-[CLURLConnection cancelAuthenticationChallenge:]
_authCb is NULL!
-[CLURLConnection continueWithoutCredentialForAuthenticationChallenge:]
-[CLURLConnection useCredential:forAuthenticationChallenge:]
-[CLURLConnection performDefaultHandlingForAuthenticationChallenge:]
-[CLURLConnection rejectProtectionSpaceAndContinueWithChallenge:]
v24@?0^{__CFURLConnectionSession=}8^{__CFString=}16
void connection_delegate(CLURLConnectionSession *, _CFURLConnectionSessionRef, CFStringRef, __va_list_tag *)
Error converting connection event string
B40@?0@"NSObject<OS_dispatch_data>"8Q16r^v24Q32
static float CLNatalieHeartRateModel::computeNormMETS(float, float)
HR,fhr,%{private}0.2f,userAge,%{private}0.2f,normalizedMets,%{private}0.2f
deltaDistance
deltaDistanceAccuracy
Td,N,V_odometer
hasDeltaDistance
Td,N,V_deltaDistance
hasDeltaDistanceAccuracy
Td,N,V_deltaDistanceAccuracy
T^{CLDaemonClient=^{CLClientManager}{DestructionAwareMutex=^^?{shared_ptr<DestructionAwareMutexInternal>=^{DestructionAwareMutexInternal}^{__shared_weak_count}}}@@@{Name={basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}BBB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}BB}BBBBQiB{unique_ptr<CLClientManager::InUseAssertion, std::__1::default_delete<CLClientManager::InUseAssertion> >={__compressed_pair<CLClientManager::InUseAssertion *, std::__1::default_delete<CLClientManager::InUseAssertion> >=^{InUseAssertion}}}@BBi{list<CLDaemonClient::MessageRef, std::__1::allocator<CLDaemonClient::MessageRef> >={__list_node_base<CLDaemonClient::MessageRef, void *>=^{__list_node_base<CLDaemonClient::MessageRef, void *>}^{__list_node_base<CLDaemonClient::MessageRef, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLDaemonClient::MessageRef, void *> > >=Q}}@Q{map<std::__1::basic_string<char>, bool, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, bool> > >={__tree<std::__1::__value_type<std::__1::basic_string<char>, bool>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, bool>, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, bool>, std::__1::less<std::__1::basic_string<char> >, true> >=Q}}}IBB{unique_ptr<CLClientManager::InUseAssertion, std::__1::default_delete<CLClientManager::InUseAssertion> >={__compressed_pair<CLClientManager::InUseAssertion *, std::__1::default_delete<CLClientManager::InUseAssertion> >=^{InUseAssertion}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@iiBi@BBB@@iBB{unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client> >={__compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> >=^{Client}}}{unique_ptr<CLFilteredLocationController_Type::Client, std::__1::default_delete<CLFilteredLocationController_Type::Client> >={__compressed_pair<CLFilteredLocationController_Type::Client *, std::__1::default_delete<CLFilteredLocationController_Type::Client> >=^{Client}}}{unique_ptr<CLSignificantChangeManager_Type::Client, std::__1::default_delete<CLSignificantChangeManager_Type::Client> >={__compressed_pair<CLSignificantChangeManager_Type::Client *, std::__1::default_delete<CLSignificantChangeManager_Type::Client> >=^{Client}}}{unique_ptr<CLCompassDaemonClientNotifier_Type::Client, std::__1::default_delete<CLCompassDaemonClientNotifier_Type::Client> >={__compressed_pair<CLCompassDaemonClientNotifier_Type::Client *, std::__1::default_delete<CLCompassDaemonClientNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLBTLEFenceManager_Type::Client, std::__1::default_delete<CLBTLEFenceManager_Type::Client> >={__compressed_pair<CLBTLEFenceManager_Type::Client *, std::__1::default_delete<CLBTLEFenceManager_Type::Client> >=^{Client}}}{unique_ptr<CLBTLERangeManager_Type::Client, std::__1::default_delete<CLBTLERangeManager_Type::Client> >={__compressed_pair<CLBTLERangeManager_Type::Client *, std::__1::default_delete<CLBTLERangeManager_Type::Client> >=^{Client}}}{unique_ptr<CLFenceManager_Type::Client, std::__1::default_delete<CLFenceManager_Type::Client> >={__compressed_pair<CLFenceManager_Type::Client *, std::__1::default_delete<CLFenceManager_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLGeomagneticModelProvider_Type::Client, std::__1::default_delete<CLGeomagneticModelProvider_Type::Client> >={__compressed_pair<CLGeomagneticModelProvider_Type::Client *, std::__1::default_delete<CLGeomagneticModelProvider_Type::Client> >=^{Client}}}{unique_ptr<CLPressureBias_Type::Client, std::__1::default_delete<CLPressureBias_Type::Client> >={__compressed_pair<CLPressureBias_Type::Client *, std::__1::default_delete<CLPressureBias_Type::Client> >=^{Client}}}{unique_ptr<CLAutopauseProvider_Type::Client, std::__1::default_delete<CLAutopauseProvider_Type::Client> >={__compressed_pair<CLAutopauseProvider_Type::Client *, std::__1::default_delete<CLAutopauseProvider_Type::Client> >=^{Client}}}{unique_ptr<CLMotionState_Type::Client, std::__1::default_delete<CLMotionState_Type::Client> >={__compressed_pair<CLMotionState_Type::Client *, std::__1::default_delete<CLMotionState_Type::Client> >=^{Client}}}{unique_ptr<CLOnBodyNotifier_Type::Client, std::__1::default_delete<CLOnBodyNotifier_Type::Client> >={__compressed_pair<CLOnBodyNotifier_Type::Client *, std::__1::default_delete<CLOnBodyNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLStepCountNotifier_Type::Client, std::__1::default_delete<CLStepCountNotifier_Type::Client> >={__compressed_pair<CLStepCountNotifier_Type::Client *, std::__1::default_delete<CLStepCountNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLOdometerNotifier_Type::Client, std::__1::default_delete<CLOdometerNotifier_Type::Client> >={__compressed_pair<CLOdometerNotifier_Type::Client *, std::__1::default_delete<CLOdometerNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLSedentaryTimerNotifier_Type::Client, std::__1::default_delete<CLSedentaryTimerNotifier_Type::Client> >={__compressed_pair<CLSedentaryTimerNotifier_Type::Client *, std::__1::default_delete<CLSedentaryTimerNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLMotionState_Type::Client, std::__1::default_delete<CLMotionState_Type::Client> >={__compressed_pair<CLMotionState_Type::Client *, std::__1::default_delete<CLMotionState_Type::Client> >=^{Client}}}{unique_ptr<CLNatalimetryNotifier_Type::Client, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >={__compressed_pair<CLNatalimetryNotifier_Type::Client *, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLMotionStateMediator_Type::Client, std::__1::default_delete<CLMotionStateMediator_Type::Client> >={__compressed_pair<CLMotionStateMediator_Type::Client *, std::__1::default_delete<CLMotionStateMediator_Type::Client> >=^{Client}}}{unique_ptr<CLMicroLocationNotifier_Type::Client, std::__1::default_delete<CLMicroLocationNotifier_Type::Client> >={__compressed_pair<CLMicroLocationNotifier_Type::Client *, std::__1::default_delete<CLMicroLocationNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLPeerRangingNotifier_Type::Client, std::__1::default_delete<CLPeerRangingNotifier_Type::Client> >={__compressed_pair<CLPeerRangingNotifier_Type::Client *, std::__1::default_delete<CLPeerRangingNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLSidebandOverride, std::__1::default_delete<CLSidebandOverride> >={__compressed_pair<CLSidebandOverride *, std::__1::default_delete<CLSidebandOverride> >=^{CLSidebandOverride}}}{unique_ptr<CLSidebandSensorFusion, std::__1::default_delete<CLSidebandSensorFusion> >={__compressed_pair<CLSidebandSensorFusion *, std::__1::default_delete<CLSidebandSensorFusion> >=^{CLSidebandSensorFusion}}}{unique_ptr<CLMotionStateOverride, std::__1::default_delete<CLMotionStateOverride> >={__compressed_pair<CLMotionStateOverride *, std::__1::default_delete<CLMotionStateOverride> >=^{CLMotionStateOverride}}}{unique_ptr<CLMotionStateSim, std::__1::default_delete<CLMotionStateSim> >={__compressed_pair<CLMotionStateSim *, std::__1::default_delete<CLMotionStateSim> >=^{CLMotionStateSim}}}{unique_ptr<CLSwimNotifier_Type::Client, std::__1::default_delete<CLSwimNotifier_Type::Client> >={__compressed_pair<CLSwimNotifier_Type::Client *, std::__1::default_delete<CLSwimNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLCompanionNotifier_Type::Client, std::__1::default_delete<CLCompanionNotifier_Type::Client> >={__compressed_pair<CLCompanionNotifier_Type::Client *, std::__1::default_delete<CLCompanionNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLCaptureMode, std::__1::default_delete<CLCaptureMode> >={__compressed_pair<CLCaptureMode *, std::__1::default_delete<CLCaptureMode> >=^{CLCaptureMode}}}@@@@@@@@@@@@@@@@@@@BdB^{Dispatcher}@d{?=ddddddddddi}{CLNameValuePair=^^?^{__CFDictionary}}{CLNameValuePair=^^?^{__CFDictionary}}BiiBBBBB@@^{CLConnection}iid@q@dB{PauseState=BBB}B{map<int, CMActivityAlarm *, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CMActivityAlarm *> > >={__tree<std::__1::__value_type<int, CMActivityAlarm *>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CMActivityAlarm *>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CMActivityAlarm *> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CMActivityAlarm *>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CMActivityAlarm *>, std::__1::less<int>, true> >=Q}}}Bdddd@{shared_ptr<CLPersistentTimer>=^{CLPersistentTimer}^{__shared_weak_count}}BBBdiBBBB{LocationUpdateSession={Metric=Bd{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}{LocationSystemState=BBBBBiBii}ddddddBi}{LocationMonitorSession={Metric=Bd{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}ddiiB}{BeaconMonitorSession={Metric=Bd{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}SSSSSSSS}{BeaconRangingSession={Metric=Bd{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}ISSC{vector<signed char, std::__1::allocator<signed char> >=**{__compressed_pair<signed char *, std::__1::allocator<signed char> >=*}}}{MotionTrigger={Metric=Bd{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}dii{map<std::__1::basic_string<char>, int, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, int> > >={__tree<std::__1::__value_type<std::__1::basic_string<char>, int>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, int>, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, int> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, int>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, int>, std::__1::less<std::__1::basic_string<char> >, true> >=Q}}}}^{CLCompassSessionStatsCollector}^v@@{map<CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> >, std::__1::less<CLBTLEBeaconRegion_Type::Region>, std::__1::allocator<std::__1::pair<const CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > > > >={__tree<std::__1::__value_type<CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >, std::__1::__map_value_compare<CLBTLEBeaconRegion_Type::Region, std::__1::__value_type<CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >, std::__1::less<CLBTLEBeaconRegion_Type::Region>, true>, std::__1::allocator<std::__1::__value_type<CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLBTLEBeaconRegion_Type::Region, std::__1::__value_type<CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >, std::__1::less<CLBTLEBeaconRegion_Type::Region>, true> >=Q}}}{CLCallbackDropManager=^^?{shared_ptr<int>=^i^{__shared_weak_count}}}di},N,V_client
com.apple.locationd.CLDEMUnzipQueue
bool CLDigitalElevationModel::CLDEMAltitudeFilter::update(const double, double, const double, const double, const double, double &, double &)
DEM,latitude_degs > 90.0
DEM,latitude_degs < -90.0
DEM,heightDEM < -500. Lowest point on Earth is approximately -420 m (Dead Sea).
DEM,heightVariance <= 0
#Warning,DEM,deltaT < 0. DEM height filter was internal_reset.
#Warning,DEM, Height filter timed out. DEM height filter was internal_reset.
DEM, Height filter exceeded maximum change in horizontal position. DEM height filter was internal_reset.
cldem
bool CLDigitalElevationModel::isUseOfDemInappropriate() const
DEM,isUseOfDemInappropriate,true,TBA,currentTime,%{public}.1lf,TBA machContinuousTime,%{public}.1lf,isCloseToOrAtTunnelBridge,%{public}d,lat,%{private}.8lf,lon,%{private}.8lf
static bool CLDigitalElevationModel::getAltitude(CLDigitalElevationModel::CLDEMTile &, double, double, double &, double &)
#Warning,DEM,current tile is not valid
#Warning,DEM,cellsize == 0
#Warning,DEM,latitude,%{private}.9lf,out of range
#Warning,DEM,latitude,%{private}.9lf,lessThanMin,%{public}.9lf
#Warning,DEM,latitude,%{private}.9lf,exceedsMax,%{public}.9lf
#Warning,DEM,longitude,%{private}.9lf,lessThanMin,%{public}.9lf
#Warning,DEM,longitude,%{private}.9lf,exceedsMax,%{public}.9lf
#Warning,DEM,dem.data.size() != dem.header.nrows*dem.header.ncols
#Warning,DEM,longitude,%{private}.9lf,invalid,minLongitude,%{public}.9lf
#Warning,DEM,latitude,%{private}.9lf,invalid,minLatitude,%{public}.9lf
#Warning,DEM,longitude,%{private}.9lf,invalid,maxLongitude,%{public}.9lf
#Warning,DEM,latitude,%{private}.9lf,invalid,maxLatitude,%{public}.9lf
#Warning,DEM,Reached unexpected case
#Warning,DEM,unexpected noData
bool CLDigitalElevationModel::updateSlopeAndUncertainty(GNSS::DaemonLocation &)
DEM,populateSlope,fail,lat,%{private}.8lf,lon,%{private}.8lf,testLocationLatDegs,%{private}.8lf,testLocationLonDegs,%{private}.8lf
DEM,lat,%{private}.8lf,lon,%{private}.8lf,alt,%{public}.2lf,hunc,%{public}.1lf,vunc,%{public}.1f,i,%zu,slope,%{public}.2f,dist2TestLoc,%{public}.1lf,altAtTestLoc,%{public}.1f,maxAbsSlope,%{public}.2f
bool CLDigitalElevationModel::getAltitude(GNSS::DaemonLocation &, CLDigitalElevationModel::ReliabilityIndication &, double &)
DEM,fForceDownloadDEMTiles, %d
DEM,invalidInput,timestamp,%{public}.1lf,lat,%{private}.8lf,lon,%{private}.8lf
DEM,not on the current in-memory tile,lat,%{private}.7lf,lon,%{private}.7lf,minLat,%{public}.7lf,maxLat,%{public}.7lf,minLon,%{public}.7lf,maxLon,%{public}.7lf
DEM,tile not available
DEM,Need to load tile
DEM,tile download needed
DEM,skipping loadTile query,skipCount,%{public}d
DEM,Tile not loaded yet
DEM,good to go!
DEM,Alt(m),%{public}.2lf,AltUnc(m),%{public}.2lf,filterAlt(m),%{public}.2lf,filterAltVariance(m^2),%{public}.2lf,IsFiltered,%{public}d,RawDemAlt(m),%{public}.2lf,undulation,%{public}.3lf,slope,%{public}.3lf,maxAbsSlope,%{public}.3lf,lat,%{private}.8lf,lon,%{private}.8lf
bool CLDigitalElevationModel::loadTile(double, double, bool &)
DEM,loadTile,lat,%{private}.7lf,lon,%{private}.7lf
DEM,loadTile,CLTilesManager,getTileFile,took,%{public}.1lf
#Warning,Unexpected, this tile should be on disk,%{public}s
static bool CLDigitalElevationModel::CheckIndexIntoCLDEM_Tile(const CLDigitalElevationModel::CLDEMTile &, int)
DEM,Index into the DEM cannot be negative.
DEM,Index exceeds the DEM size.
static bool CLDigitalElevationModel::calculateCLDEM_CRC(unsigned char *, const size_t, const size_t, unsigned int &)
DEM,indexCrcInBuffer,%zu,exceeds (bufferSize-4) bytes,%zu
#Warning,DEM,Unable to load %{public}s
static bool CLDigitalElevationModel::readCLDEMTileHeaderHelper(FILE *, CLDigitalElevationModel::CLDEMTileFileHeader &, unsigned char *, size_t, size_t &, bool &, size_t &, size_t &)
#Warning,DEM,Invalid CLDEM tile file - header string
#Warning,DEM,Invalid CLDEM tile file - version
#Warning,DEM,Invalid CLDEM tile file - headerLength
#Warning,DEM,tile.header.dataSizeBytes > tile.header.nrows*tile.header.ncols
static bool CLDigitalElevationModel::readCLDEMTileFromFile(CLDigitalElevationModel::CLDEMTile &, const std::string &, bool &)
#Warning,DEM,Invalid CLDEM tile file - file size does not match headerLength+dataSizeBytes
DEM,tile is larger than the allowed maximum
#Warning,DEM,Invalid CLDEM tile file - did not read all of dataSizeBytes of data
#Warning,DEM,Invalid CLDEM tile file - count of bytes stored does not match the expect size based on the header
#Warning,DEM,calculateCLDEM_CRC returned false unexpectedly.
#Warning,DEM,Invalid CLDEM tile file - crc check failed,calculated,%X,received,%X
DEM,expected the 16 bit count to exceed 255
DEM,expansion of the compressed data has exceeded the expected tile size
DEM,bad index into the compressed data
DEM,The uncompressed data does not have the expected number of elements
bool CLDigitalElevationModel::loadPartialTile(const double &, const double &)
#Warning,DEM,longitude %{public}.9lf is not contained in the DEM,Min longitude,%{private}.9lf
#Warning,DEM,latitude %{public}.9lf is not contained in the DEM,Min latitude,%{private}.9lf
#Warning,DEM,longitude %{public}.9lf is not contained in the DEM,Max longitude,%{private}.9lf
#Warning,DEM,latitude %{public}.9lf is not contained in the DEM,Max latitude,%{private}.9lf
#Warning,DEM,cannot load a partial tile for a tile with all the same values (empty data)
void CLDigitalElevationModel::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)
DEM,avl download status,NONE
DEM,avl download status,STARTED
DEM,avl download status,COMPLETED
DEM,avl downloaded,%{public}s
#Warning,DEM,Cannot set protection class for DEM avl file,%{public}s
void CLDigitalElevationModel::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)_block_invoke
DEM,avl file decompressed,%{public}s,to,%{public}s
#Warning,DEM,Cannot set protection class for DEM decompressed avl file,%{public}s
#Warning,DEM,avl download status,FAILED
#Warning,DEM,avl download request failed,%{public}s,retryMultiplier,%{public}d
#Warning,DEM,avl download status,%{public}d
void CLDigitalElevationModel::downloadAvailabilityFile(const CFAbsoluteTime &)
DEM,download request,url,%{public}s,storeTo,%{public}s,retryInterval,%{public}.1lf
#Warning,DEM,could not setUpdateSource AVL file updater
#Warning,DEM,could not setUpdateRate AVl file updater
void CLDigitalElevationModel::onManagerNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)
Notification,%{public}d
com.apple.locationd.MicroLocationBackgroundActivities
MicroLocationsMaintenanceInterval
MicroLocationsAnalyticsInterval
MicroLocationsLearningInterval
MicroLocationsHarvestEnabled
MicroLocationsHarvestInterval
MicroLocationsPowerLogInterval
MicroLocationsDatabaseFlushInterval
MicroLocationsDatabaseFlushGracePeriod
MicroLocationsAWDMetricsInterval
CLMicroLocationBackgroundActivities::ActivityRunner<CLMicroLocationXPCActivityHelpers::XPCActivity, CLSubHarvesterMicroLocation>::~ActivityRunner() [ActivityT = CLMicroLocationXPCActivityHelpers::XPCActivity, WorkT = CLSubHarvesterMicroLocation]
#Warning Activity didn't complete before the runner was destroyed. Most likely this means there was an exception during the activity. Please check the logs.
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Daemon/Positioning/MicroLocation/CLMicroLocationBackgroundActivities.h
MicroLocationMaintenance
void (anonymous namespace)::registerActivity(CLSilo *, const CLMicroLocationXPCActivityHelpers::XPCCriteria &, CLMicroLocationBackgroundActivities::IBackgroundActivitiesDelegate &, std::vector<std::unique_ptr<XPCRegistration> > &, CL::optional<ObserverRegistrationFunction>, RunActivity) [WorkT = CLMicroLocationMaintenance, RunActivity = (lambda at /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Daemon/Positioning/MicroLocation/CLMicroLocationBackgroundActivities.mm:139:15)]
Registering for XPC Activity %s
Attempting to run %s but Microlocations are disabled.
CLMicroLocationBackgroundActivities::ActivityRunner<CLMicroLocationXPCActivityHelpers::XPCActivity, CLMicroLocationMaintenance>::~ActivityRunner() [ActivityT = CLMicroLocationXPCActivityHelpers::XPCActivity, WorkT = CLMicroLocationMaintenance]
MicroLocationAnalytics
void (anonymous namespace)::registerActivity(CLSilo *, const CLMicroLocationXPCActivityHelpers::XPCCriteria &, CLMicroLocationBackgroundActivities::IBackgroundActivitiesDelegate &, std::vector<std::unique_ptr<XPCRegistration> > &, CL::optional<ObserverRegistrationFunction>, RunActivity) [WorkT = CLMicroLocationAnalytics, RunActivity = (lambda at /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Daemon/Positioning/MicroLocation/CLMicroLocationBackgroundActivities.mm:158:16)]
auto (anonymous namespace)::registerActivity(CLSilo *, const CLMicroLocationXPCActivityHelpers::XPCCriteria &, CLMicroLocationBackgroundActivities::IBackgroundActivitiesDelegate &, std::vector<std::unique_ptr<XPCRegistration> > &, CL::optional<ObserverRegistrationFunction>, (lambda at /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Daemon/Positioning/MicroLocation/CLMicroLocationBackgroundActivities.mm:158:16))::(anonymous class)::operator()(CLMicroLocationXPCActivityHelpers::XPCActivity)::(anonymous class)::operator()()
CLMicroLocationBackgroundActivities::ActivityRunner<CLMicroLocationXPCActivityHelpers::XPCActivity, CLMicroLocationAnalytics>::~ActivityRunner() [ActivityT = CLMicroLocationXPCActivityHelpers::XPCActivity, WorkT = CLMicroLocationAnalytics]
MicroLocationLearning
void (anonymous namespace)::registerActivity(CLSilo *, const CLMicroLocationXPCActivityHelpers::XPCCriteria &, CLMicroLocationBackgroundActivities::IBackgroundActivitiesDelegate &, std::vector<std::unique_ptr<XPCRegistration> > &, CL::optional<ObserverRegistrationFunction>, RunActivity) [WorkT = CLMicroLocationLearner, RunActivity = (lambda at /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Daemon/Positioning/MicroLocation/CLMicroLocationBackgroundActivities.mm:179:14)]
auto (anonymous namespace)::registerActivity(CLSilo *, const CLMicroLocationXPCActivityHelpers::XPCCriteria &, CLMicroLocationBackgroundActivities::IBackgroundActivitiesDelegate &, std::vector<std::unique_ptr<XPCRegistration> > &, CL::optional<ObserverRegistrationFunction>, (lambda at /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Daemon/Positioning/MicroLocation/CLMicroLocationBackgroundActivities.mm:179:14))::(anonymous class)::operator()(CLMicroLocationXPCActivityHelpers::XPCActivity)::(anonymous class)::operator()()
CLMicroLocationBackgroundActivities::ActivityRunner<CLMicroLocationXPCActivityHelpers::XPCActivity, CLMicroLocationLearner>::~ActivityRunner() [ActivityT = CLMicroLocationXPCActivityHelpers::XPCActivity, WorkT = CLMicroLocationLearner]
MicroLocationHarvest
void (anonymous namespace)::registerActivity(CLSilo *, const CLMicroLocationXPCActivityHelpers::XPCCriteria &, CLMicroLocationBackgroundActivities::IBackgroundActivitiesDelegate &, std::vector<std::unique_ptr<XPCRegistration> > &, CL::optional<ObserverRegistrationFunction>, RunActivity) [WorkT = CLSubHarvesterMicroLocation, RunActivity = (lambda at /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Daemon/Positioning/MicroLocation/CLMicroLocationBackgroundActivities.mm:207:16)]
auto (anonymous namespace)::registerActivity(CLSilo *, const CLMicroLocationXPCActivityHelpers::XPCCriteria &, CLMicroLocationBackgroundActivities::IBackgroundActivitiesDelegate &, std::vector<std::unique_ptr<XPCRegistration> > &, CL::optional<ObserverRegistrationFunction>, (lambda at /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Daemon/Positioning/MicroLocation/CLMicroLocationBackgroundActivities.mm:207:16))::(anonymous class)::operator()(CLMicroLocationXPCActivityHelpers::XPCActivity)::(anonymous class)::operator()()
MicroLocationPowerLog
void (anonymous namespace)::registerActivity(CLSilo *, const CLMicroLocationXPCActivityHelpers::XPCCriteria &, CLMicroLocationBackgroundActivities::IBackgroundActivitiesDelegate &, std::vector<std::unique_ptr<XPCRegistration> > &, CL::optional<ObserverRegistrationFunction>, RunActivity) [WorkT = CLMicroLocationPowerLog, RunActivity = (lambda at /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Daemon/Positioning/MicroLocation/CLMicroLocationBackgroundActivities.mm:225:15)]
auto (anonymous namespace)::registerActivity(CLSilo *, const CLMicroLocationXPCActivityHelpers::XPCCriteria &, CLMicroLocationBackgroundActivities::IBackgroundActivitiesDelegate &, std::vector<std::unique_ptr<XPCRegistration> > &, CL::optional<ObserverRegistrationFunction>, (lambda at /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Daemon/Positioning/MicroLocation/CLMicroLocationBackgroundActivities.mm:225:15))::(anonymous class)::operator()(CLMicroLocationXPCActivityHelpers::XPCActivity)::(anonymous class)::operator()()
CLMicroLocationBackgroundActivities::ActivityRunner<CLMicroLocationXPCActivityHelpers::XPCActivity, CLMicroLocationPowerLog>::~ActivityRunner() [ActivityT = CLMicroLocationXPCActivityHelpers::XPCActivity, WorkT = CLMicroLocationPowerLog]
MicroLocationDatabaseFlusher
void (anonymous namespace)::registerActivity(CLSilo *, const CLMicroLocationXPCActivityHelpers::XPCCriteria &, CLMicroLocationBackgroundActivities::IBackgroundActivitiesDelegate &, std::vector<std::unique_ptr<XPCRegistration> > &, CL::optional<ObserverRegistrationFunction>, RunActivity) [WorkT = CLMicroLocationDatabase::DbFlusher, RunActivity = (lambda at /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Daemon/Positioning/MicroLocation/CLMicroLocationBackgroundActivities.mm:248:10)]
auto (anonymous namespace)::registerActivity(CLSilo *, const CLMicroLocationXPCActivityHelpers::XPCCriteria &, CLMicroLocationBackgroundActivities::IBackgroundActivitiesDelegate &, std::vector<std::unique_ptr<XPCRegistration> > &, CL::optional<ObserverRegistrationFunction>, (lambda at /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Daemon/Positioning/MicroLocation/CLMicroLocationBackgroundActivities.mm:248:10))::(anonymous class)::operator()(CLMicroLocationXPCActivityHelpers::XPCActivity)::(anonymous class)::operator()()
CLMicroLocationBackgroundActivities::ActivityRunner<CLMicroLocationXPCActivityHelpers::XPCActivity, CLMicroLocationDatabase::DbFlusher>::~ActivityRunner() [ActivityT = CLMicroLocationXPCActivityHelpers::XPCActivity, WorkT = CLMicroLocationDatabase::DbFlusher]
MicroLocationAWDMetrics
void (anonymous namespace)::registerActivity(CLSilo *, const CLMicroLocationXPCActivityHelpers::XPCCriteria &, CLMicroLocationBackgroundActivities::IBackgroundActivitiesDelegate &, std::vector<std::unique_ptr<XPCRegistration> > &, CL::optional<ObserverRegistrationFunction>, RunActivity) [WorkT = CLMicroLocationAWDMetrics, RunActivity = (lambda at /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Daemon/Positioning/MicroLocation/CLMicroLocationBackgroundActivities.mm:267:14)]
CLMicroLocationBackgroundActivities::ActivityRunner<CLMicroLocationXPCActivityHelpers::XPCActivity, CLMicroLocationAWDMetrics>::~ActivityRunner() [ActivityT = CLMicroLocationXPCActivityHelpers::XPCActivity, WorkT = CLMicroLocationAWDMetrics]
CLVehicleConnectionNotifierSilo
CLVehicleConnectionNotifier
CLVehicleConnectionNotifier::CLVehicleConnectionNotifier(id<CLIntersiloUniverse>)
CLVehicleConnectionNotifier is being constructed
CLStarkManager
CLVehicleConnectionNotifier::CLVehicleConnectionNotifier(id<CLIntersiloUniverse>)_block_invoke_2
#fmc CarKit connection status, %d
v20@?0B8@"NSString"12
virtual CLVehicleConnectionNotifier::~CLVehicleConnectionNotifier()
CLVehicleConnectionNotifier is shutting down
void CLVehicleConnectionNotifier::setCarKitConnectionStatus(ConnectionStatus, NSString *)
CarKitConnectionStatus,%d,HandsfreeConnectionStatus,%d,current VehicleConnectionStatus,%d
void CLVehicleConnectionNotifier::postVehicleExitNotification()
#fmc Posting notification upon vehicle exit
#fmc startTime,%f,endTime,%f,exitTime,%f
bool CLVehicleConnectionNotifier::setVehicleConnectionStatus(ConnectionStatus, ConnectionStatus, NSString *)
CarKitConnectionStatus,%d,HandsfreeConnectionStatus,%d,current VehicleConnectionStatus,%d,new VehicleConnectionStatus,%d
LastVehicleConnection
virtual void CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLVehicleConnectionNotifier_Type::Notification, NotificationData_T = CLVehicleConnectionNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLVehicleConnectionNotifier_Type::Notification, NotificationData_T = CLVehicleConnectionNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLVehicleConnectionNotifier_Type::Notification, NotificationData_T = CLVehicleConnectionNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLVehicleConnectionNotifier_Type::Notification, NotificationData_T = CLVehicleConnectionNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLVehicleConnectionNotifier_Type::Notification, NotificationData_T = CLVehicleConnectionNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLVehicleConnectionNotifier_Type::Notification, NotificationData_T = CLVehicleConnectionNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::listClients() [Notification_T = CLVehicleConnectionNotifier_Type::Notification, NotificationData_T = CLVehicleConnectionNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
double CLDistanceCalc::calculateDistance(const CLDaemonLocation &, const CLDaemonLocation &)
#Warning refAlt < %.1lf,refAlt,%.1lf,using the min
#Warning refAlt > %.1lf,refAlt,%.1lf,using the max
bool CLDistanceCalc::calc_dNdE(double, double, double &, double &)
latitude,%.7lf,is out of bounds
CLMotionSyncStoreSilo
DebugMotionSync
CLNatalimetryNotifier
CLMotionSyncStore::CLMotionSyncStore(id<CLIntersiloUniverse>)_block_invoke
Forcing a raw speed to kValue bins update.
Forcing a step cadence to stride length bins update.
void CLMotionSyncStore::onDataProtectionNotification(int, const CLDataProtectionManager_Type::Notification &, const CLDataProtectionManager_Type::NotificationData &)
Received CLDataProtectionManager_Type %d, data availability %d
CalibrationVersion,
CalibrationUDID,
CalibrationTimestamp,
CMNatalimeterSetUserPal,
CMNatalimeterSetUserVo2max,
RawSpeedToKValueTable,
avail
StepCadenceToStrideLengthTable,
CalibrationResetRequested,
CalibrationResetRequested
HasSavedInitialMotionCalsToDisk,
HasSavedInitialMotionCalsToDisk
CalibrationUDID
unset
static void CLMotionSyncStore::setCurrentVersion(NSMutableDictionary *, int)
Setting the current Motion Cals version to, %d
CalibrationVersion
CalibrationTimestamp
virtual void CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLMotionSyncStore_Type::Notification, NotificationData_T = CLMotionSyncStore_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLMotionSyncStore_Type::Notification, NotificationData_T = CLMotionSyncStore_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLMotionSyncStore_Type::Notification, NotificationData_T = CLMotionSyncStore_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLMotionSyncStore_Type::Notification, NotificationData_T = CLMotionSyncStore_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLMotionSyncStore_Type::Notification, NotificationData_T = CLMotionSyncStore_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLMotionSyncStore_Type::Notification, NotificationData_T = CLMotionSyncStore_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::listClients() [Notification_T = CLMotionSyncStore_Type::Notification, NotificationData_T = CLMotionSyncStore_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
CLLocationAwarenessProviderSilo
CLLocationAwarenessProvider
SettledLatencyBudget
UnsettledLatencyBudget
SettledRetryRate
UnsettledRetryRate
SettledQueryALS
UnsettledQueryALS
Awareness
AwarenessMinimumTimerChange
AwarenessEarlyFireSlop
virtual bool CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLLocationAwarenessProvider_Type::Notification, NotificationData_T = CLLocationAwarenessProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLLocationAwarenessProvider_Type::RegInfo]
virtual bool CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLLocationAwarenessProvider_Type::Notification, NotificationData_T = CLLocationAwarenessProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLLocationAwarenessProvider_Type::RegInfo]
virtual void CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLLocationAwarenessProvider_Type::Notification, NotificationData_T = CLLocationAwarenessProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLLocationAwarenessProvider_Type::RegInfo]
void CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLLocationAwarenessProvider_Type::Notification, NotificationData_T = CLLocationAwarenessProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLLocationAwarenessProvider_Type::RegInfo]
virtual void CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::removeClient(int) [Notification_T = CLLocationAwarenessProvider_Type::Notification, NotificationData_T = CLLocationAwarenessProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLLocationAwarenessProvider_Type::RegInfo]
virtual bool CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::clientRegistered(int, const Notification_T &) [Notification_T = CLLocationAwarenessProvider_Type::Notification, NotificationData_T = CLLocationAwarenessProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLLocationAwarenessProvider_Type::RegInfo]
virtual void CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::listClients() [Notification_T = CLLocationAwarenessProvider_Type::Notification, NotificationData_T = CLLocationAwarenessProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLLocationAwarenessProvider_Type::RegInfo]
CLFitnessMachineNotifierSilo
CLFitnessMachineNotifier
virtual void CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLFitnessMachineNotifier_Type::Notification, NotificationData_T = CLFitnessMachineNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLFitnessMachineNotifier_Type::Notification, NotificationData_T = CLFitnessMachineNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLFitnessMachineNotifier_Type::Notification, NotificationData_T = CLFitnessMachineNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLFitnessMachineNotifier_Type::Notification, NotificationData_T = CLFitnessMachineNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLFitnessMachineNotifier_Type::Notification, NotificationData_T = CLFitnessMachineNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLFitnessMachineNotifier_Type::Notification, NotificationData_T = CLFitnessMachineNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::listClients() [Notification_T = CLFitnessMachineNotifier_Type::Notification, NotificationData_T = CLFitnessMachineNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
static CLMapGeometryPtr CLMapGeometry::create(const std::string &)
CLMapGeometryPtr
simple
scored
particle
CLElevationRecorderDb
virtual long CLElevationRecorderDb::aggregateRecords(const CLAggregationRules &)
Programmer error, we expect an expiration record!
(silo != nullptr && handler != nullptr)||(silo == nullptr && handler == nullptr)
ElevationHistory
SELECT * FROM ElevationHistory WHERE ? <= startTime AND endTime <= ? ORDER BY startTime ASC
SELECT * FROM ElevationHistory ORDER BY startTime ASC
DELETE FROM ElevationHistory WHERE startTime < ?
DELETE FROM ElevationHistory
INSERT INTO ElevationHistory (startTime, endTime, elevationAscended, elevationDescended) VALUES (?, ?, ?, ?)
SELECT * FROM ElevationHistory ORDER BY startTime DESC LIMIT 1
UPDATE ElevationHistory SET startTime = startTime + ?, endTime = endTime + ?
virtual void CLElevationRecorderDb::prepareSQLStatements()
virtual void CLElevationRecorderDb::shiftRecordsByUL(CFTimeInterval)
Failed to shift records.
virtual void CLElevationRecorderDb::insertRecordUL(const CLSignificantElevation &, bool)
Error setting elevation offsets.
CLActivityRecorderDb<CLSignificantElevation, CLActivityDB::NoDataProtectionPolicy>::CLActivityRecorderDb(const char *, bool, float, const std::string, const CLSqliteDatabase::SqlitePropertyPersistence) [T = CLSignificantElevation, DataProtectionPolicy = CLActivityDB::NoDataProtectionPolicy]
bool CLActivityRecorderDb<CLSignificantElevation, CLActivityDB::NoDataProtectionPolicy>::setDatabaseAccessible() [T = CLSignificantElevation, DataProtectionPolicy = CLActivityDB::NoDataProtectionPolicy]
bool CLActivityRecorderDb<CLSignificantElevation, CLActivityDB::NoDataProtectionPolicy>::isValidTime(CFAbsoluteTime &) const [T = CLSignificantElevation, DataProtectionPolicy = CLActivityDB::NoDataProtectionPolicy]
virtual void CLActivityRecorderDb<CLSignificantElevation, CLActivityDB::NoDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, bool) [T = CLSignificantElevation, DataProtectionPolicy = CLActivityDB::NoDataProtectionPolicy]
void CLGyroCalibrationCache::removeOutliers()
Begin.
Too few points.  End.
temperature,%f,bias.x,%f,bias.y,%f,bias.z,%f,deleted,1
temperature,%f,bias.x,%f,bias.y,%f,bias.z,%f,deleted,0
End.
CLScoredMapMatcher::CLScoredMapMatcher(CLMapGeometryPtr, const std::string &)
CLMM, m_fSkipRMSECheckForScalingEntryThresholds,%{public}d
bool CLScoredMapMatcher::shouldOverrideCourseUnc(double &)
CLMM, holdCourseEngaged,%d,fabsCourseDiffWithPriorSnap,%.1lf,rawCourseUnc,%.1lf,newCourseUnc, %.1f
void CLScoredMapMatcher::prefilterCourse(CLMapCrumb &)
%.1lf CLMM, high course rate,course,%.1lf,priorCourse,%.1lf,speed,%.1lf,fabsCourseRate,%.1lf
CLMM, course,%.1lf,courseUnc,%.1lf,lastSnapCourse,%.1lf,speed,%.1lf,acrossTrack,%.1f,onRoad,%d,widthUsed,%.1lf
CLMM, Detected course swing after a recent dismount,intervalSinceDismount,%.1lf
CLMM, holdCourse,engaged, large course diff when static,fabsCourseDiffWithPriorSnap,%.1lf
CLMM, holdCourse,engaged,%d,speed,%.1lf,distance,%.1lf
CLMM, holdCourse,using prior snap,course,%.1lf,courseUnc,%.1lf,fabsCourseDiff,%.1lf
bool CLScoredMapMatcher::evaluateMatch(const CLMapCrumb &, bool)
CLMM, varFactorCheck,oldOffRoadCount,%d,newOffRoadCount,%d
CLMM, courseCheck,oldOffRoadCount,%d,newOffRoadCount,%d
CLMM, stopSnapping,timeout,dT,%.1lf,threshold1,%.1lf,threshold2,%.1lf,static,%d
CLMM, stopSnapping,distance > %.0lfm,Intersection,%d
CLMM, jumpDistanceCheck,oldOffRoadCount,%d,newOffRoadCount,%.0f
CLMM, stopSnapping,varFactor,%.1lf,threshold,%.1lf
CLMM, stopSnapping,offRoadCount,%d,threshold,%.0f
CLMM, stopSnapping,isAmbiguous,1,acrossTrack,%.1lf,acrossTrackThreshold,%.1lf
CLMM, reseting offRoadCount,%d
CLMM, startSnapping
void CLScoredMapMatcher::calculateScoreAndVarFactor(const struct CLMapGeometry::DistanceQueryResult &, const CLMapCrumb &, double &, double &, double &, double &, double &, double &, bool)
#Warning CLMM, NULL road
std::vector<VO2MaxInput> CLVO2MaxInputStore::add(const VO2MaxInput &)
failed to write VO2MaxInput entry, error %d
CLCellTilesManagerExternal::CLCellTilesManagerExternal(CLCellTilesManager *, id<CLIntersiloUniverse>)
void CLCellTilesManagerExternal::onCleanupAgedTiles(CFRunLoopTimerRef)
bool CLParticleMapMatcher::ActivityContextHandler::shallMapMatch(CLMapCrumb &, bool, bool)
CLMM, not matching, activity context, running
CLMM, not matching, activity context, walking, confidence, %d
CLMM, not starting matching due to low speed threshold,speed,%.3lf,thres,%.3lf
bool CLParticleMapMatcher::SolutionPropagator::findTunnelEndPoint(double, CLGpsAssistant_Type::TunnelEndPositionAssistance &, CLMapGeometryPtr, bool)
CLMM,no TEPA,isTunnel,%d,isSnapUsable,%d,lastAssistanceTime,%.1lf
CLMM,TEPA,outgoing reached max iterations,%d
CLMM,no TEPA,multi-outbound,%d
CLMM,TEPA,incoming reached max iterations,%d
CLMM,no TEPA,multi-inbound,%d
CLMM,%.1lf,TEPA,%d,lat,%{private}.7lf,lon,%{private}.7lf,alt,%.1lf,vUnc,%.1lf,tunnelLength,%.1lf,distFromCurrentParticle,%.1lf,travelledPercentage,%.1lf,iterCountOut,%d,iterCountIn,%d
bool CLParticleMapMatcher::SolutionPropagator::propagateSolution(CLDaemonLocation &, CLMapGeometryPtr, bool)
CLMM,%.2lf,NotPropagating,isTunnel,%d,isSnapUsable,%d,particleTime,%.2lf,particleTimeOut,%.1lf,speed,%.2lf,speedTime,%.2lf,speedTimeOut,%.1lf,speedLimit,%.1lf
CLMM,%.2lf,NotPropagating, shifting is required but accessory is outputting  unshifted coordinates
CLMM,%.2lf,NotPropagating,time lower than particleTime, %.2lf
CLMM,%.2lf,limit distance to propagate,orig,%.1lf,new,%.1lf
CLMM,NotPropagating,roadsAtIntersection returned false
CLMM,NotPropagating,multi-outbound,%lu,intersection within the distance,%.2lf, needed to be travelled returned
CLMM,NotPropagating,moveOnRoad returned false
CLMM,NotPropagating,NULL road
CLMM,NotPropagating,solution moved away from tunnel
CLMM,%.2lf,Propagating,lat,%.8lf,lon,%.8lf,course,%.8lf,speed,%.1lf,speedLimit,%.1lf
CLParticleMapMatcher::CLParticleMapMatcher(CLMapGeometryPtr, const std::string &)
CLMM, Constructor, fUseSpeedCheckForDOT,%{public}d,fMaxDistanceForTIntersectionForDOT,%{public}.1lf
void CLParticleMapMatcher::updateCandidate(const CLMapRoadPtr &, bool, double, double, double)
CLMM, Unexpected out of bounds array access attempt
bool CLParticleMapMatcher::assessCandidates()
CLMM, Assessing candidates
CLMM, NULL road, bad candidate
CLMM, interpolateOnRoad returned false, determining mean road position
CLMM, Time,%.1lf,candidate,roadID,%llu,fwd,%d,countAroundMean,%d
CLMM, roadsAtIntersection returned false, searching for connected candidates
CLMM, unexpected incomingCount < 1
CLMM, Time,%.1lf,roadID,%llu,incoming,countAroundMean,%d
CLMM, Time,%.1lf,combinedBest,roadID,%llu,incomingCount,%d,outgoingCount,%d
CLMM, interpolateOnRoad returned false, determining outgoing road position
CLMM, Time,%.1lf,roadID,%llu,no particles after the intersection
CLMM, Time,%.1lf,roadID,%llu,isCombined,%d,isMulti,%d
bool CLParticleMapMatcher::StuckAtEndOfRoad::isStuckAtEndOfRoad(const bool)
#Warning CLMM, %.1lf,detected stuck,alongTrackRawToSnap,%.1lf,deltaPosChange,%.1lf,deltaSnapChange,%.1lf,thresholdDiff,%.1lf
CLMM, %.1lf,isMovingAway,%d,deltaPosChange,%.1lf,deltaSnapChange,%.1lf,thresholdDiff,%.1lf
bool CLParticleMapMatcher::predictionAndUpdate()
#Warning CLMM, Position jump(m),%.1lf,dT(s),%.1lf
CLMM,%.1lf,predictionAndUpdate, distance,%.1lf,distBasedOnSpeed,%.1lf,distBasedOnPos,%.1lf
CLMM, dT2 limited,from,%.1lf,to,%.1lf
#Warning CLMM, unexpected,dT,%.1lf,minMoreThan,0,threshold1,%.1lf,threshold2,%.1lf
CLMM, railway search, roadsWithinDistance returned false
CLMM, railwayParticle,timestamp,%.3lf,lat,%.8lf,lon,%.8lf,course,%.3lf,rseg,%lld
CLMM, prediction,NrParticles,%d,NrStandard,%d,NrNew,%d,NrPriorIntersectionParticles,%d,NrNewAlternateCandidateNoiseParticles,%d,NrNewFwdIntersectionParticles,%d,NrNewBiasedToPrior,%d,NrNewAmbiguous,%d,NrNewRouteParticles,%d
CLMM, moveOnRoad returned false, standard particles
CLMM, moveOnRoad returned false, prior intersection particles
CLMM, moveOnRoad returned false, fwd intersection particles
CLMM, moveOnRoad returned false, prior snap particles
CLMM, moveOnRoad returned false, alternate ambiguous particles
CLMM, NULL road
CLMM, Unexpected particle with snapLat == snapLon == 0
#Warning CLMM, totalScore<=0,%.1lf
bool CLParticleMapMatcher::resample()
CLMM, resample
CLMM, Unexpected number of particles after resampling,%d
bool CLParticleMapMatcher::extractSolution()
CLMM, extractSolution
CLMM, Unexpected bestCount<=0
CLMM, Unexpected no best candidate found
CLMM, Unexpected. There should be an outgoing road
CLMM, Unexpected NULL outgoing road candidate
CLMM, Unexpected outgoing snapLat==snapLon==0
CLMM,Time,%.1lf,snapCourse,%.2lf,outgoingSnapCourse,%.2lf, crumbCourse,%.2lf, outgoingDistanceFromIntersection,%.2lf,outgoingCondition,%d,crumbCourseUnc,%.2lf,significantCourseChange,%d,isCourseAligned,%d, isMeanCandidateAlignedWithCourse,%d
CLMM, Time,%.1lf,exit distance check,distance,%.2lf,exitDistance,%.2lf
CLMM, Time,%.1lf,outgoing condition,%d
CLMM, %.1lf, Using outgoing,incomingID,%lld,outgoingID,%lld
CLMM, %.1lf, Using particle on outgoing,incomingID,%lld,outgoingID,%lld
CLMM, %.1lf, bestParticleRoadID,%lld
CLMM, ambiguous solution not detected,fabsCourseDiff,%.1lf,acrossTrack,%.1lf,ratio,%.3lf,alongTrackToAlt,%.1lf
CLMM, ambiguous solution detected,fabsCourseDiff,%.1lf,acrossTrack,%.1lf,ratio,%.3lf,alongTrackToAlt,%.1lf
CLMM, ambiguous solution hysteresis
CLMM, dismounted recently,doNotSnapCourse,%d
CLMM, distToNextMulti,%.1lf, distFromPriorCrumb,%.1lf
CLMM, not snapping course,reason,distanceToIntersection,%.1lf
CLMM, not snapping course,reason,at intersection,fabsCourseDifference,%.1lf
CLMM, not snapping course,reason,turning,fabsCourseDifference,%.1lf
CLMM, %.1lf, snapping course, reason, gps course not reliable,%.1lf,fabsCourseDiffWithPriorSnap,%.1lf
CLMM, %.1lf, overwriting unreliable GPS course, static case, priorCourse,%.1lf, newCourse,%.1lf
CLMM, %.1lf, snapping course, reason, gps course flipping at low speeds,%.1lf,fabsCourseDiffWithPriorSnap,%.1lf
CLMM, %.1lf, overwriting unreliable GPS course, low speed case, priorCourse,%.1lf, newCourse,%.1lf
void CLParticleMapMatcher::adjustSolutionforRoadWidth()
CLMM, adjustSolutionforRoadWidth
void CLParticleMapMatcher::performPartialMatching()
CLMM, performPartialMatching
CLMM, partial snapping,poorVarFactorCount,%d,weightGPS,%.2lf,weightSnap,%.2lf
bool CLParticleMapMatcher::assessParallelRoadsWithinDist(const double &, const double &, bool &)
CLMM, roadsWithinDistance returned false
#Warning CLMM, Unexpected roadsWithinDistance returned empty list
CLMM, Unexpected NULL road
#Warning CLMM, Unexpected roadsWithinDistance returned only railways
bool CLParticleMapMatcher::prepareSeeding()
CLMM, prepareSeeding
CLMM, Unexpected crumb lat==lon==0
CLMM, Unexpected crumb snapLat==snapLon==0
CLMM, Unexpected maxDistance,%{public}.1lf
CLMM, including railway
bool CLParticleMapMatcher::assessMatchAndNeedForReseed(bool &)
CLMM, assessMatchAndNeedForReseed
CLMM, postEvaluateMatch,%s
CLMM, Reseeding due to varFactor,%.1lf,max,%.1lf
CLMM, Reseeding due to badMatchCount,max,%d
CLMM, Reseeding due to Neff
CLMM, Reseeding due to stuck at dead-end while observations move away
bool CLParticleMapMatcher::reseed()
CLMM, reseed
CLMM, Unexpected number of particles after resampling,%{public}d
bool CLParticleMapMatcher::shallMapMatch(CLMapCrumb &)
CLMM, not matching, speedMps,%.1lf,threshold,%.1lf
CLMM, matching, routetime,%.1lf
virtual bool CLParticleMapMatcher::match(CLMapCrumb &)
CLMM, aPriori,%s
CLMM, %.1lf, not matching
CLMM, opportunistic tile download only, favorable GPS conditions
CLMM, opportunistic tile download only, high speed threshold
CLMM, match,%.1lf, allowsNetworkUsage, %d
#Warning CLMM, Time difference between updates is zero. Update ignored.
CLMM, %.1lf,hopping check,connecting roads,%d, current road %lld,prior road %lld
CLMM, %.1lf,hopping check,prior road, %lld, connected to the incoming road, %lld, of the current solution road, %lld
CLMM, %.1lf,hopping between roads detected,reset,%d,priorfullSnapCourse,%.1lf,currentFullSnapCourse,%.1lf,priorId,%llu,currentId,%llu
CLMM, holdCourse engaged but not snapping course
CLMM, aPosteriori, %s
bool CLParticleMapMatcher::runDirectionOfTravelHelper(double, double, double, double &)
CLMM, no DOT, course is not aligned
CLMM, across track too large, not suitable DOT assistance
bool CLParticleMapMatcher::modifyHorizontalUncertainty(CLMapCrumb &)
CLMM,%.1lf,lat,%.8lf,lon,%.8lf,alt,%.2lf,course,%.1lf,snapLat,%.8lf,snapLon,%.8lf,snapCourse,%.1lf,horizontalError,%.2lf,hunc,%.2lf,ratio,%.2lf
void CLParticleMapMatcher::computeSnapSolutionFromRawGPS(CLMapCrumb &)
CLMM, %.1lf, not matching, unable to compute snap from raw positions
bool CLParticleMapMatcher::computeSnapCoordinatesFromRawGPSCoordinates(const std::string, double, double, double &, double &)
CLMM, %.1lf, New Snap Coordinates,%s,inSnapLat,%.8lf,inSnapLon,%.8lf,outSnapLat,%.8lf,outSnapLon,%.8lf
virtual bool CLParticleMapMatcher::getDirectionOfTravelAssistance(CLGpsAssistant_Type::DirectionOfTravelAssistance &)
CLMM, no DOT,feedback interval check
CLMM, no DOT,frc,0
CLMM, no DOT, too close to prior intersection
CLMM, no DOT, course not aligned to full snap
CLMM, no DOT, assessParallelRoadsWithinDist returned false, unexpected
CLMM, no DOT, too close to a road with similar course
CLMM, no DOT, too close to next intersection
CLMM, no DOT, too slow when nearing intersection
CLMM, moveOnRoad returned false, DOT particle assistance
CLMM, no DOT, too close large road direction change
CLMM, no DOT, computeSnapCoordinatesFromRawGPSCoordinates lookBehind returned false
CLMM, no DOT, predicted point is too close to intersection
CLMM, Unexpected calculateNewPosUsingAcrossTrack fail
CLMM, no DOT, current particle within the stopDistanceFromIntersection
CLMM, no DOT, computeSnapCoordinatesFromRawGPSCoordinates predicted returned false
CLMM, DOT,%.1lf,lat,%.7lf,lon,%.7lf,course,%.1lf,courseUnc,%.1lf,rw,%.1lf,startLat,%.7lf,startLon,%.7lf,length,%.1lf,speed,%.3lf,isOneWay,%d,isRailWay,%d,isTunnel,%d,isBridge,%d,distFromIntersection,%.1lf
virtual bool CLParticleMapMatcher::getPosAssistanceForGps(CLGpsAssistant_Type::MapMatchedPositionAssistance &)
CLMM, MMPA,%.1lf,lat,%.7lf,lon,%.7lf,a,%.2lf,b,%.2lf,az,%.3lf,course,%.3lf
virtual bool CLParticleMapMatcher::getTunnelBridgeAssistance(CLGpsAssistant_Type::TunnelBridgeAssistance &)
CLMM, TBA,roadsWithinDistance returns query failed,lat,%{private}.8lf,lon,%{private}.8lf,searchRadius,%{public}.1lf
CLMM, TBA,lat,%{private}.8lf,lon,%{private}.8lf,unc,%{public}.8lf,searchRadius,%{public}.1lf,isCloseToTunnel,%{public}d,isCloseToBridge,%{public}d,isTunnel,%{public}d,isBridge,%{public}d
Trip,%lld
,Time,%.1lf
,Lat,%.8lf
,Lon,%.8lf
,Alt,%.1lf
,hunc,%.1lf
,vunc,%.1lf
,speedKph,%.3lf
,course,%.1lf
,rseg,%lld
,frc,%d
,fow,%d
,rname,"%s"
,snapLat,%.8lf
,snapLon,%.8lf
,snapCourse,%.1lf
,score,%.1lf
,ratio,%.1lf
,speedUncMps,%.1lf
,courseUnc,%.1lf
,a95,%.1lf
,b95,%.1lf
,theta,%.1lf
,ActivityContext,%d
,isStatic,%d
,isMounted,%d
,varFactor,%.7g
,deltaAzimuth,%.3lf
,alongTrack,%.3lf
,acrossTrack,%.3lf
,isSnapUsable,%d
,isAmbiguous,%d
,snapProj,%.3lf
,snapType,%d
,fullSnapLat,%.8lf
,fullSnapLon,%.8lf
,fullSnapCourse,%.3lf
,rwSnapLat,%.8lf
,rwSnapLon,%.8lf
,partialSnapLat,%.8lf
,partialSnapLon,%.8lf
,ActivityConfidence,%d
,isFavorableGps,%d
,isRailway,%d
,isFitnessMatch,%d
,isShifted,%d
,gpsWeek,%d
,gpsTowMs,%d
,staticActivitySetTime,%.lf
,rawLat,%.8lf
,rawLon,%.8lf
,isMatcherPropagated,%d
,isBridge,%d
,isTunnel,%d
,rawLatWithSnapOffset,%.8lf
,rawLonWithSnapOffset,%.8lf
,rawLatWithFullSnapOffset,%.8lf
,rawLonWithFullSnapOffset,%.8lf
void CLActivityRecorderDb<VO2MaxOutput, CLActivityDB::NoDataProtectionPolicy>::addSuspectRecord(const T &) [T = VO2MaxOutput, DataProtectionPolicy = CLActivityDB::NoDataProtectionPolicy]
int CLActivityDbExportAdapter::readIntValueForMotionPreferenceKey(const char *)
CLActivityLogger read %s as CFStringRef failed
LastDumped
MotionMetricsExportDetailedLogging
AppleInternalDataCollectionEnabled
void CLActivityDbExportAdapter::startExportTimerIfNeeded()
CLActivityLogger managed should enable data collection setting is %s.
com.apple.nanolifestyle
#Warning CLActivityLogger Failed to get data collections enabled setting. It may not have been set yet.
CLActivityLogger exporting %s is disabled MotionMetricsExportInterval, %d, MotionMetricsExportTimerInterval, %d
CLActivityLogger should enable data collection is is %s.
CLActivityLogger exporting %s is disabled 
CLActivityLogger exporting %s is already enabled 
CLActivityLogger exporting %s is only enabled in internal build
CLActivityLogger exporting %s: MotionMetricsExportTimerInterval = %d, MotionMetricsExportInterval = %d
Skipping
Dumping
void CLActivityDbExportAdapter::startExportTimerIfNeeded()_block_invoke
CLActivityLogger exporting %s is %f, currentTime is %f, next dumping time is %f, %s
CLActivityLogger exporting %s metrics with OSAWriteLogForSubmission
#Warning CLActivityLogger failed to submit iOS data analysis with type kOSAProblemTypeMotionState
CLActivityLogger exporting timer enabled 
MotionMetricsExportInterval
MotionMetricsExportTimerInterval
/Library/Managed Preferences/mobile/com.apple.nanolifestyle.plist
MapMatchingEngine
UseFullSnap
CLMapMatchingEngine::CLMapMatchingEngine(id<CLIntersiloUniverse>, const std::string &)
CLMM, UseFullSnap, %{public}d
enableDotGpsFeedback
CLMM, enableDotGpsFeedback,%{public}d
virtual void CLMapMatchingEngineBase::setForceNetworkUsage(bool)
CLMM, ForceNetworkUsage %{public}d
virtual void CLMapMatchingEngineBase::setDisallowNetworkUsage(bool)
CLMM, DisallowNetworkUsage %{public}d
virtual bool CLMapMatchingEngineBase::match(CLDaemonLocation &, CLDaemonLocationPrivate &, CLMapCrumb &)
CLMM, calling match()
CLMM, shift() returned false
CLMM, match() returned false
void CLMapMatchingEngine::provideTunnelBridgeAssistance(const CLDaemonLocation &)
CLMM,TBA,setTunnelBridgeAssistance,lat,%{private}.8lf,lon,%{private}.8lf,isCloseToTunnel,%{public}d,isCloseToBridge,%{public}d,isTunnel,%{public}d,isBridge,%{public}d
CL::WifiPositioning::Policies::PostPositionCalculationStateUpdate::Output CL::WifiPositioning::Policies::PostPositionCalculationStateUpdate::HandleEvent::operator()(const Events::ReprocessWifiScanBuffer &) const
@WsbReproc, inrange, %{public}.1f, count, %{public}d, dt, %{public}d
@WsbReproc, discard, %{public}.1f, count, %{public}d
@WsbReproc, remain, groups, %{public}lu, unknownAPs, %{public}lu, deleted, %{public}d
fInput.batchedComputedLocations.size() == scanBufferEvent.scanGroups.size()
fInput.shouldComputeLocationFromLocationUpdateEvent
!fInput.shouldComputeLocationFromLocationUpdateEvent
CL::WifiPositioning::Policies::PostPositionCalculationStateUpdate::Output CL::WifiPositioning::Policies::PostPositionCalculationStateUpdate::HandleEvent::operator()(const Events::LocationRequest &) const
WIFI_LOC, scan request blocked
TlurEmer, Request, %d, urgent, %d, tte, %.1f, type, %s
TlurAssoc, Request, %d, urgent, %d, type, %s
static Types::ScanBuffer CL::WifiPositioning::Policies::PostPositionCalculationStateUpdate::HandleEvent::updateScanBuffer(const CL::WifiPositioning::Policies::PostPositionCalculationStateUpdate::Input &, const std::vector<std::vector<CLWifiService_Type::AccessPoint> > &, bool)
@WsbReproc, drops, groups, %d, aps, %d
@WsbALS, settime, empty, %{public}.1f
@WsbReproc, update, groups, %{public}lu, unknownAPs, %{public}lu
static std::tuple<Types::Emergency, CLWifiLocationUpdateRequest, Types::AlsQueryType> CL::WifiPositioning::Policies::PostPositionCalculationStateUpdate::HandleEvent::updateEmergencyStateCurrentLocationUpdateRequestAndApQueryType(const Types::Emergency &, const CLWifiLocationUpdateRequest &, Types::AlsQueryType, const Types::ComputedLocation &, cl::chrono::CFAbsoluteTimeClock::time_point)
TlurEmer, unexpected emergency state, processScanResult, %d, WARNING
gizmo
desired
default
bool CL::WifiPositioning::Policies::PostPositionCalculationStateUpdate::HandleEvent::isStopCriteriaSatisfied(const Types::ComputedLocation &, float) const
@WifiFlow, satisfied, %{public}d, %{public}s
isStopCriteriaMet
location.horizontalAccuracy
numberOfApsUsedInPositionCalculation
kWifisKnownIprodDesired
kWifisKnownDesired
kWifisHorizontalAccuracyDesired
CL::WifiPositioning::Policies::PostPositionCalculationStateUpdate::Output CL::WifiPositioning::Policies::PostPositionCalculationStateUpdate::HandleEvent::operator()(const Events::Wifi::Scan &) const
#post-wifi-position-calculation-state-update, location update not in progress, will not issue scan
#post-wifi-position-calculation-state-update, #emergency location update in progress, skipping state transition logic
#post-wifi-position-calculation-state-update, previous decision made to skip using wifi scan, skipping state transition logic
#post-wifi-position-calculation-state-update, stop criteria has been satisfied
@WifiFlow, locreq, nextstage, %{public}s, current, %{public}s
fInput.computedLocation.location.horizontalAccuracy == kCLClientLocationInvalid.horizontalAccuracy && fInput.computedLocation.numberOfApsUsedInCalculation == 0
LSApplicationProxy *getLSApplicationProxy(CFStringRef)
no app proxy available for %{public}s
CLAppMonitorSilo
CLAppMonitor::CLAppMonitor(id<CLIntersiloUniverse>)_block_invoke
App foregrounded for %.2fs.  Post %s (%d), pid, %d, bundleId, %s
com.apple.LaunchServices.applicationRegistered
com.apple.LaunchServices.applicationUnregistered
Terminated
BackgroundTaskSuspended
BackgroundRunning
ForegroundRunning
ProcessServer
ForegroundRunningObscured
Unregistered
ForegroundRunningForSomeTime
void CLAppMonitor::onApplicationStateChanged(CFNotificationCenterRef, CFStringRef, const void *, CFDictionaryRef)
cannot find SBApplicationStateKey
unknown application state %{public}d
failed to retrieve pid
failed to retrieve bundle ID
Post Application State Change Notification, %d, %s, pid, %d, bundleId, %s
bundleIDs
void CLAppMonitor::onApplicationRegistered(CFNotificationCenterRef, CFStringRef, const void *, CFDictionaryRef)
cannot find bundle ID for %{public}d
void CLAppMonitor::onApplicationUnregistered(CFNotificationCenterRef, CFStringRef, const void *, CFDictionaryRef)
static CLAppMonitor_Type::AppType CLAppMonitor::getAppType(CFStringRef)
#Warning no app type available for %s
Internal
com.apple.mobileinstallation.companion_placeholder
virtual void CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLAppMonitor_Type::Notification, NotificationData_T = CLAppMonitor_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLAppMonitor_Type::Notification, NotificationData_T = CLAppMonitor_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLAppMonitor_Type::Notification, NotificationData_T = CLAppMonitor_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLAppMonitor_Type::Notification, NotificationData_T = CLAppMonitor_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLAppMonitor_Type::Notification, NotificationData_T = CLAppMonitor_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLAppMonitor_Type::Notification, NotificationData_T = CLAppMonitor_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::listClients() [Notification_T = CLAppMonitor_Type::Notification, NotificationData_T = CLAppMonitor_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLTransitWsbClient::startWsb()
Start active dynamic Wsb
void CLTransitWsbClient::stopWsb()
Stop active dynamic Wsb
void CLTransitWsbClient::onWifiNotification(int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)
Received kNotificationPower, isWifiPowered, %d
Received kNotificationScanCache
Unknown notification received, %{public}d
CLProtobufSerializer
std::string CLProtobufSerializer::getUniqueLogFileName(std::string)
CLProtobufSerializer - could not read device serial number
CLProtobufSerializer - could not obtain UTC time
CMStrideCalRecorderDb
CMStrideCalRecorderDb::CMStrideCalRecorderDb(bool)
CMStrideCalRecorderDb init
void CMStrideCalRecorderDb::deleteRecordsBefore(CFTimeInterval)
StrideCalHistory
SELECT COUNT(*) FROM StrideCalHistory
SELECT * FROM StrideCalHistory ORDER BY startTime ASC
SELECT * FROM StrideCalHistory WHERE pacebin == ? ORDER BY startTime DESC
SELECT * FROM StrideCalHistory WHERE speed > ? AND speed <= ? ORDER BY startTime DESC
DELETE FROM StrideCalHistory WHERE startTime < ?
DELETE FROM StrideCalHistory WHERE startTime > ?
DELETE FROM StrideCalHistory
INSERT INTO StrideCalHistory (startTime, pacebin, kvalue, kvalueTrack, score, endTime, distance, steps, session, speed, percentGrade, gpsSource) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
SELECT * FROM StrideCalHistory ORDER BY startTime DESC LIMIT 1
UPDATE StrideCalHistory SET startTime = startTime + ?
virtual void CMStrideCalRecorderDb::prepareSQLStatements()
void CMStrideCalRecorderDb::alterTableIfNecessary()
StrideCalHistory table doesn't even exist
ALTER TABLE StrideCalHistory
UPDATE StrideCalHistory SET 
 = CAST(pacebin AS FLOAT);
virtual void CMStrideCalRecorderDb::deleteRecordsAfterInsertUL(const CLStrideCalEntry &)
virtual void CMStrideCalRecorderDb::shiftRecordsByUL(CFTimeInterval)
virtual void CMStrideCalRecorderDb::insertRecordUL(const CLStrideCalEntry &, bool)
StrideCalDb (%f,%d,%f,%f,%f,%f,%f,%d,%d,%f,%f,%d).
CLActivityRecorderDb<CLStrideCalEntry, CLActivityDB::NoDataProtectionPolicy>::CLActivityRecorderDb(const char *, bool, float, const std::string, const CLSqliteDatabase::SqlitePropertyPersistence) [T = CLStrideCalEntry, DataProtectionPolicy = CLActivityDB::NoDataProtectionPolicy]
bool CLActivityRecorderDb<CLStrideCalEntry, CLActivityDB::NoDataProtectionPolicy>::setDatabaseAccessible() [T = CLStrideCalEntry, DataProtectionPolicy = CLActivityDB::NoDataProtectionPolicy]
virtual void CLActivityRecorderDb<CLStrideCalEntry, CLActivityDB::NoDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, bool) [T = CLStrideCalEntry, DataProtectionPolicy = CLActivityDB::NoDataProtectionPolicy]
CLMotionStateObserverSilo
CLMotionStateObserver
void CLMotionStateObserver::startSession(const CLMotionActivity::Type, const CFAbsoluteTime)
Started session type,%d,startTime,%f,activity,%s
void CLMotionStateObserver::stopSession()
Stopped session type,%d,startTime,%f,activity,%s
virtual void CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLMotionStateObserver_Type::Notification, NotificationData_T = CLMotionStateObserver_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLMotionStateObserver_Type::Notification, NotificationData_T = CLMotionStateObserver_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLMotionStateObserver_Type::Notification, NotificationData_T = CLMotionStateObserver_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLMotionStateObserver_Type::Notification, NotificationData_T = CLMotionStateObserver_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLMotionStateObserver_Type::Notification, NotificationData_T = CLMotionStateObserver_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLMotionStateObserver_Type::Notification, NotificationData_T = CLMotionStateObserver_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::listClients() [Notification_T = CLMotionStateObserver_Type::Notification, NotificationData_T = CLMotionStateObserver_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
bool CLSwimClassifier::estimatePeriod(int &, float) const
Period Estimate Update,period,%f,confidence,%f,timestamp,%f,startTime,%f
CLSwimStyleType CLSwimClassifier::classify(float)
ClassificationResult,%d,startTime,%f,timestamp,%f
void CLSwimClassifier::setDeviceOrientation(const CLGizmoOrientation &)
Swimming device orientaion set,wrist,%d,crown,%d
tier1_0
tier1_1
tier1_2
tier2_0
tier2_1
CLSwimStyleType CLSwimClassifier::runTieredClassifiers(const float (&)[14]) const
Classification,%s,%d,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f
const T &CMQueue<CMVector<float, 3> >::operator[](const size_t) const [T = CMVector<float, 3>]
T CMVector<float, 3>::operator[](const size_t) const [T = float, N = 3]
Assertion failed: i < N, file /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Oscar/Math/CMVector.h, line 272,invalid index %zu >= %zu.
CLCellTilesManagerSilo
CLCellTilesManager::isSupportedTileType(tileType)
MaxTileAge
CLCellTilesManager::CLCellTilesManager(id<CLIntersiloUniverse>, std::unique_ptr<CLICellTilesManagerExternal>, CL::optional<CLTilesSetCollection>)
TILE: fMaxTileSecurityAge, %.1lf
TILE: fEncryptionGracePeriod, %.1lf
TileCell, isActive, %{public}d
CLTilesSetCollection CLCellTilesManager::initializeProductionTilesSetCollection()
/gsm
/3/v1
/cdma
/5/v1
/lte
/4/v1
virtual void CLCellTilesManager::shutdown()
TILE: CLCellTilesManager::shutdown
com.apple.location.CellTiles
void CLCellTilesManager::onDataProtectionNotification(int, const CLDataProtectionManager_Type::Notification &, const CLDataProtectionManager_Type::NotificationData &)
TileCell, unexpected, dataprotection, %{public}d
TileCell, kNotificationEncryptedDataAvailability, %d, changed, %d
@TileEvent, all, locked, %{public}d
void CLCellTilesManager::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)
TileCell, unexpected, location, %{public}d, %{public}s
TileCell, kNotificationLocationLeech, fLastLocationDownloadCheckTimestamp, %{public}.1lf, isForceLocationCheck, %{public}d, fLastLocationProtectionCheckTimestamp, %{public}.1f, leech location, %{private}s
onLocationNotification
void CLCellTilesManager::onStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)
TileCell, unexpected, status, %{public}d
TileCell, kNotificationReachability, %{public}d, was, %{public}d
void CLCellTilesManager::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)
TileCell, kNotificationReset
TileCell, kNotificationLocationServicesStatus, %{public}d
void CLCellTilesManager::onCompanionNotification(int, const CLCompanionNotifier_Type::Notification &, const CLCompanionNotifier_Type::NotificationData &)
TileCell, unexpected, companion, %{public}d
void CLCellTilesManager::onTimerFired(CLPersistentTimer *)
TileCell, Timer, %{public}d, locked, %{public}d
onExpiredLocationTimerFired
void CLCellTilesManager::onCleanupAgedTiles(CFRunLoopTimerRef)
TileCell, Cleanup
onCleanupAgedTiles
void CLCellTilesManager::traverseAllTilesSets(const char *, CLTileManagerTraverseTilesSetBlock)
void CLCellTilesManager::getTileStats(CLDaemonStats_Type::LocationNetworkQueries &)
TILE: stats: getTileStats, cellTilesDownloaded, %d, cellTilesDownloaded3G, %d, cellTilesCached, %d
resetStats
void CLCellTilesManager::listAvailableFilesAllTypes(CFAbsoluteTime)
TileCell, listAvailableFilesAllTypes, indexed, %{public}d
TileCell, clear on index
TileCell, listAvailableFilesAllTypes, done
bool CLCellTilesManager::indexTiles(CLTilesSet &, CFAbsoluteTime)
index
bool CLCellTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, sec_key_t, CFAbsoluteTime)
TileDl, ignore before first unlock, fDataProtectionEnabled, %{public}d
@TileDl, requestDownload, type, %{public}d, %{private}s, not active
TileDl, requestDownload, type, %{public}d, %{public}s, location, %{private}14.8lf, %{private}14.8lf, id, %{private}s, reachbility, %{public}d
bool CLCellTilesManager::checkDownloadSchedule(CFAbsoluteTime, bool)
@TileDl, cell, failed criteria
static void CLCellTilesManager::tileDownloadCallback(CLFileDownload *, bool, void *)_block_invoke
void CLCellTilesManager::tileDownloadCompleted(CLFileDownload *, bool, void *)
void CLCellTilesManager::sendNotificationTileWasDownloaded(bool, const CLTileFile &, const CLTilesSet &, unsigned int)
@TileDl, kNotificationTileWasDownloaded, tileid, %{private}s, tileHeaderParsed, %{public}d, tileType, %{public}d, serverUrl, %{private}s, serverFilename, %{private}s, absoluteLocalFilename, %{private}s, size, %{public}d, current, %{public}d
void CLCellTilesManager::registerForCts()
TileCts, cell, registering, interval, %{public}.2f, grace, %{public}.2f
void CLCellTilesManager::checkCtsDownloadRequest()
TileCts, cell, request, %{public}d, state, %{public}ld
TileCts, cell, setting, DONE
TileCts, cell, failed, DONE, %{public}ld
void CLCellTilesManager::checkCtsOnDownloadComplete()
TileCts, cell, complete, state, %{public}ld
TileCts, cell, setting, DEFER
TileCts, cell, failed, DEFER, %{public}ld
bool CLCellTilesManager::getLocationByCellFromTile(CLTileFile *, const CLCell &, CLCellTilesManager::SearchContext &, CLDaemonLocation &)
TILE: no cell tiles for, %s
bool CLCellTilesManager::getLocationByCell(const CLCell &, const CLDaemonLocation &, CLCellTilesManager::SearchContext &, CLDaemonLocation &)
CellTile, getLocationByCell, un-supported cell type, %{private}s, #CloneMe
TILE: getLocationByCell, tiles, %d, are not active on this device
TILE: getLocationByCell, isInKnownCache, %d, isInUnKnownCache, %d
TILE: getLocationByCell, using locationHint, %s
TILE: getLocationByCell, out of boundary, %s
TILE: getLocationByCell, search neighbor, step, %2d, y, %+2d, x, %+2d
TILE: getLocationByCell, search remaining tiles, %s
void CLCellTilesManager::clearLocationInformation()
TileCell, clearLocationInformation
void CLCellTilesManager::removeAllTiles(bool, CLTilesManager_Type::TileType)
TileCell, %{public}s, removeAllTiles, size, %{public}lu
void CLCellTilesManager::deleteAgedTiles(CFAbsoluteTime)_block_invoke
TileCell, deleteAgedTiles, dispatch, %{public}s
void CLCellTilesManager::deleteAgedTiles(CFAbsoluteTime)_block_invoke_2
TileCell, deleteAgedTiles, start, name, %{public}s, size, %{public}lu
void CLCellTilesManager::agedTileDeleter(CLTilesSet &, CFAbsoluteTime)
TILE: deleteAgedTiles, age, %.1lf, %.1lf, tileDataAge, %.1lf, %.1lf, corrupt, %d, isDelete, %d, tile, %s
void CLCellTilesManager::updateProtectionClass(const char *, const CLDaemonLocation &, bool)
#Warning TILE: updateProtectionClass, called on when not locked
void CLCellTilesManager::updateProtectionClass(const char *, const CLDaemonLocation &, bool)_block_invoke
TILE: updateProtectionClass, start, %s, reason, %s, isAboutToLock, %d, locationAge, %.1lf, doLocCheck, %d, sizes, %lu, %lu, knownLocation, %s
CellTile, tile ptr is NULL, #CloneMe
CellTile, updateProtectionClass, failed unlocking tileid, %{private}s, size, %{public}lu, #CloneMe
CellTile, updateProtectionClass, unable to lock tile, locking tileid, %{private}s, #CloneMe
updateProtectionClass, lockstats, %s, lock, %d, unlock, %d, size, %lu
TILE: updateProtectionClass, location moved, locking tileid, %s
Locking tiles.
numberOfTilesToLock
tileIdsToLock
TILE: updateProtectionClass, clearing unprotected map
CellTile, Unable to lock all unprotected files!, #CloneMe
TILE: updateProtectionClass, end, %s, total, %lu, numOfUnProtectedTiles, %d
@TileEvent, %{public}s, locking, %{public}d, readable, %{public}lu
updateProtectionClass
TILE: updateProtectionClass, done, isAboutToLock, %d, numOfUnProtectedTiles, %d
void CLCellTilesManager::lockTileIfNeeded(CLTileFile *, CLTilesSet &, CFAbsoluteTime, const char *)
TILE: tileDecompressionCompleted, added to unprotected list, tileid, %s, size, %lu
@TileList, %{public}s, unprotect, llsw, %{private}.2lf, %{private}.2lf, %{public}s, size, %{public}lu
void CLCellTilesManager::scheduleExpiredLocationTimer(const char *)
TileTimer, skip, location, %{public}d
TileTimer, schedule, reason, %s, locationAge, %.1lf, secondsFromNow, %.1lf, lastKnownLocation, %s
void CLCellTilesManager::cancelExpiredLocationTimer()
TileTimer, cancel
std::tuple<bool, CLTileFile *> CLCellTilesManager::createTileFileObject(CLTilesManager_Type::TileType, const std::string &, const std::string &, CFAbsoluteTime)
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Daemon/Positioning/Tiles/CLCellTilesManager.mm
void CLCellTilesManager::updateTileLocationRelevancy(const CLDaemonLocation &)
updateTileLocationRelevancy
void CLCellTilesManager::updateTileLocationRelevancy(const CLDaemonLocation &)_block_invoke
CellTile, Invalid tile id!, #CloneMe
auto CLCellTilesManager::registerForCts()::(anonymous class)::operator()(xpc_activity_t) const
TileCts, cell, state, CHECK_IN
TileCts, cell, state, RUN
TileCts, cell, setting, CONTINUE
TileCts, cell, failed, CONTINUE, %{public}ld
virtual void CLEntryCache<std::__1::basic_string<char>, CLDaemonLocation>::clear() [Key_T = std::__1::basic_string<char>, DataEntry_T = CLDaemonLocation]
CACHE: name, %s, clear, size, %lu
virtual void CLEntryCache<std::__1::basic_string<char>, CLDaemonLocation>::deleteAgedEntries() [Key_T = std::__1::basic_string<char>, DataEntry_T = CLDaemonLocation]
CACHE: name, %s, deleteAgedEntries, size, %lu
void CLEntryCache<std::__1::basic_string<char>, CLDaemonLocation>::evict() [Key_T = std::__1::basic_string<char>, DataEntry_T = CLDaemonLocation]
CACHE: name, %s, evict, aged, age, %.1lf, size, %lu, %lu, key, %s
CACHE: name, %s, evict, size, age, %.1lf, size, %lu, %lu, key, %s
virtual void CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLCellTilesManager_Type::Notification, NotificationData_T = CLCellTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLCellTilesManager_Type::Notification, NotificationData_T = CLCellTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
bool CLEntryCache<std::__1::basic_string<char>, CLDaemonLocation>::getEntry(const Key_T &, DataEntry_T &) [Key_T = std::__1::basic_string<char>, DataEntry_T = CLDaemonLocation]
CACHE: name, %s, getEntry, end, size, %lu, %s, entry, %s
void CLEntryCache<std::__1::basic_string<char>, CLDaemonLocation>::insertToAgeSet(const CLEntryCache::SetDataEntry &, CLEntryCache::MapDataEntry &) [Key_T = std::__1::basic_string<char>, DataEntry_T = CLDaemonLocation]
#Warning CACHE: name, %s, colision...
ret.first != this->fAgeSet.end()
void CLEntryCache<std::__1::basic_string<char>, CLDaemonLocation>::addEntry(const Key_T &, const DataEntry_T &) [Key_T = std::__1::basic_string<char>, DataEntry_T = CLDaemonLocation]
CACHE: name, %s, bad set iterator - recovering, size, %lu, %s
CACHE: name, %s, cache too large, evicting, size, %lu
CACHE: name, %s, addEntry, end, size, %lu, %s, entry, %s
virtual void CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLCellTilesManager_Type::Notification, NotificationData_T = CLCellTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLCellTilesManager_Type::Notification, NotificationData_T = CLCellTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLCellTilesManager_Type::Notification, NotificationData_T = CLCellTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLCellTilesManager_Type::Notification, NotificationData_T = CLCellTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::listClients() [Notification_T = CLCellTilesManager_Type::Notification, NotificationData_T = CLCellTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
CLAutopauseProviderConcrete::CLAutopauseProviderConcrete(id<CLIntersiloUniverse>)
PAUSE: Constructing CLAutopauseProviderConcrete
void CLAutopauseProviderConcrete::startMonitoringPauseState()
PAUSE: Starting auto-pause monitoring.
void CLAutopauseProviderConcrete::stopMonitoringPauseState()
PAUSE: Stopping auto-pause monitoring.
void CLAutopauseProviderConcrete::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)
PAUSE: Batched notification response in auto-pause with %zu locations.
void CLAutopauseProviderConcrete::onLocationNotificationHelper(const CLDaemonLocation &)
PAUSE: Pause state changed, notifying - fitness: %d navigation: %d other: %d
void CLAutopauseProviderConcrete::onMotionNotification(int, const CLMotionState_Type::Notification &, const CLMotionState_Type::NotificationData &)
#Warning PAUSE: unexpected notification %d
#Warning PAUSE: Unknown notification %d
void CLAutopauseProviderConcrete::onLocationTimer(CFRunLoopTimerRef)
PAUSE: Autopause provider has no location updates for 15 minutes.
void CLAutopauseProviderConcrete::onStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)
PAUSE: got kNotificationSleep.
PAUSE: got kNotificationWake.
void CLVehicleSpeedFilter::update(const CFAbsoluteTime &, const double &, bool &, double &)
unexpected,vehicleSpeed < 0
-[CMStrideCalibrator(CLNotifiers) checkLocationAuthorization]
EnableLocationServices,Success,AllChecksPassed
-[CMStrideCalibrator(CLNotifiers) isAuthorizedForLocation]
EnableLocationServices,Fail,AllLocationServicesDisabled
EnableLocationServices,Fail,PedometerCalibrationLocationServicesDisabled
EnableLocationServices,Success
-[CMStrideCalibrator(Callbacks) onMotionStateMediatorNotification:data:]
StrideCal - Register tracks activity %d, override action, %d, session, %@
void onCompanionNotification_bounce(int, const CLCompanionNotifier_Type::Notification &, const CLCompanionNotifier_Type::NotificationData &, void *)
CDMA
LAC_GSM
LAC_CDMA
LAC_LTE
AppRecommendation
PreloadManifest
Last
Transit
TransitManifest
Invalid enum value CLDaemonStatus_Type::ThermalLevel(
cdma
coarse-gsm
coarse-cdma
coarse-lte
preload manifest
static bool CLTilesManagerUtility::isCurrentTile(const CLTileFile *, CFTimeInterval, CLDaemonLocation, CFAbsoluteTime)
@TileDl, isCurrent, %{public}d, inside, %{public}d, %{public}d, locknown, %{public}d, %{public}d, %{public}d, %{public}d, tile, %{private}s, delta, %{public}.02f
static CLTilesSet &CLTilesManagerUtility::getTilesSet(CLTilesManager_Type::TileType, CLTilesSetCollection *)
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Daemon/Positioning/Tiles/CLTilesManagerUtility.mm
static std::tuple<bool, bool> CLTilesManagerUtility::isValidTileFilename(const std::string &)
static bool CLTilesManagerUtility::isValidTileFilenameWithPossibleDeletion(const std::string &, const std::string &)
static void CLTilesManagerUtility::deleteIfDuplicate(CLTileFile *, CLTilesSet &, const char *)
@TileList, %{public}s, duplicate, llsw, %{private}.2lf, %{private}.2lf, %{public}s, size, %{public}lu
static std::unique_ptr<CLTileFile> CLTilesManagerUtility::allocateTile(CLTilesManager_Type::TileType, CLTileDownloadPolicy *)
TILE: allocate tile type, %d
Attempting to assert invalid tile type.
TileMgr, failed to allocate a tile for type, %{public}d, #CloneMe
LogDeviceMotion
GyroOnly
6Axis
9Axis
9AxisWithNorthReference
BuildGYTT
3AxisDynamicGyro
6AxisThrottledGyro
CLDeviceMotionProperties<DeviceMotion=%@>
Ti,N,VfMode
CLDeviceMotion
static CLDeviceMotion::CLDeviceMotionNotification CLDeviceMotion::CLMotionTypeDeviceMotionModeToCLDeviceMotionNotification(const CLMotionTypeDeviceMotionMode)
No viable convertion for mode 0x%x
static CLMotionTypeDeviceMotionMode CLDeviceMotion::CLDeviceMotionNotificationToCLMotionTypeDeviceMotionMode(const int)
No viable convertion for notification 0x%x
properties != nullptr
void CLDeviceMotion::addDeviceMotionDispatcher(CLDeviceMotion::Dispatcher *, CFTimeInterval)_block_invoke
CLDeviceMotion::addDeviceMotionDispatcher adding dispatcher with property: %s
void CLDeviceMotion::removeDeviceMotionDispatcher(CLDeviceMotion::Dispatcher *)_block_invoke
CLDeviceMotion::removeDeviceMotionDispatcher removing dispatcher with property: %s
virtual CFTimeInterval CLDeviceMotion::minimumUpdateIntervalChanged(int, const CFTimeInterval &)
CLDeviceMotion::minimumUpdateIntervalChanged,notification,%d,minimumUpdateInterval,%f
virtual void CLDeviceMotion::numberOfClientsChanged(int, size_t, size_t)
CLDeviceMotion::numberOfClientsChanged notification:%d, from:%zu, to:%zu
numberOfClients GyroOnly:%zd, 3AxisDynamicGyro:%zd, 6Axis:%zd, 6AxisThrottledGyro:%zd, 9Axis:%zd, 9AxisWithNorthReference:%zd, BuildGYTT:%zd
fSensorFusionService9Axis->isRunning()
Device motion mode (%d) not supported, can't process client change
bool CLDeviceMotion::isModeValid(const CLMotionTypeDeviceMotionMode &) const
Unsupported mode (%d). Returning.
Unsupported mode (%d). Compass not found. Returning.
Unsupported mode (%d). Couldn't do DeviceMotion without Gyro. Returning.
void CLDeviceMotion::enableSensorFusionWithMode(const CLMotionTypeDeviceMotionMode &)
Starting device motion, mode=0x%{public}x,useAccelerometer=%{public}d,useGyro=%{public}d,useCompass=%{public}d,fUseNorthRef=%{public}d,buildingGYTT=%{public}d
void CLDeviceMotion::disableSensorFusionWithMode(const CLMotionTypeDeviceMotionMode &)
Stopping device motion, mode=0x%x
Device motion mode (%d) not supported, unable to disable sensor fusion
virtual bool CLActivityLoggerRatePolicy::shouldILog(NSData *)
shouldILog returned %d for tag %d, last %f now %f, threshold is %lu
tiles
CLWifiTilesManagerSilo
MaxDownloadListSize
CLWifiTilesManager::CLWifiTilesManager(id<CLIntersiloUniverse>, std::unique_ptr<CLIWifiTilesManagerExternal>, std::shared_ptr<CLWifiAccessPointLocationService>, CL::optional<CLTilesSetCollection>, CL::optional<std::unique_ptr<CLITileSyncManager> >)
TILE: fDefaultMaxDownloadListSize, %d
@TileEvent, wifi, locked, %d
Small
Large
WifiTilesServerUrl
CLTilesSetCollection CLWifiTilesManager::initializeProductionTilesSetCollection()
TILE: fDefaultWifiTilesServerUrl, %s
WifiTilesRootDirectory
TILE: fDefaultWifiTilesRootDirectory, %s
EncryptionGracePeriod
TILE: fDefaultEncryptionGracePeriod, %.1lf
DisableTilesWhileLocked
TILE: fDefaultDisableTilesWhileLocked, %d
void CLWifiTilesManager::onDataProtectionNotification(int, const CLDataProtectionManager_Type::Notification &, const CLDataProtectionManager_Type::NotificationData &)
TILE: onDataProtectionNotification, %p, notification, %d
TILE: onDataProtectionNotification, kNotificationEncryptedDataAvailability, was, %d, now, %d, availability, %d
@GtsLock, lock, unprotected, %{public}lu, total, %{public}lu
TILE: updateProtectionClass, skip on unlock
Unlock
void CLWifiTilesManager::onCompanionNotification(int, const CLCompanionNotifier_Type::Notification &, const CLCompanionNotifier_Type::NotificationData &)
void CLWifiTilesManager::onCleanupAgedTiles(CFRunLoopTimerRef)
Cleanup timer- Attempting to add raw wifi tiles to the database if unlocked.
virtual void CLWifiTilesManager::clearLocationInformation()
TILE: clearLocationInformation
void CLWifiTilesManager::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)
TILE: onClientNotification, %p, notification, %d
TILE: kNotificationReset
TILE: kNotificationLocationServicesStatus, areLocationServicesEnabled, %d
@GtsPair, LS Toggle, %{public}d
TILE: location services off, remove all the tiles
void CLWifiTilesManager::deleteAgedDownloadItems(std::map<TileId, std::unique_ptr<CLTileFile> > &, CFAbsoluteTime)
TILE: deleteAgedDownloadItems, start
tile->getTileType() == CLTilesManager_Type::TileType::WIFI_Location
TILE: deleteAgedDownloadItems, delete, age, %.1lf, %.1lf, tile, %s
@TileReq, wifi, rmlist, llsw, %{private}.2lf, %{private}.2lf, aged, size, %{public}ld
TILE: deleteAgedDownloadItems, deleted, %u, done
void CLWifiTilesManager::deleteTilesExceedingLimits(CFAbsoluteTime)
TILE: deleteAgedTiles, start, name, %s, size, %lu
Missing wifi #tile, x, %{private}d, y, %{private}d, #CloneMe
Deleted wifi #tile isFileExistsOnServer is false. x, %{private}d, y, %{private}d, #CloneMe
@TileList, wifi, delete, llsw, %{private}.2lf, %{private}.2lf, limits, size, %{public}lu
TILE: deleteAgedTiles, end, numOfDeletedTiles, %lu, remain, %lu, name, %s
virtual bool CLWifiTilesManager::isCurrentTile(CLTileFile *)
TILE: isCurrentTile, degreesFromCornerLat, %.8lf, degreesFromCornerLon, %.8lf, inside, %d, %d, isCurrentTile, %d, %d, isCurrentLocationKnown, %d, %s
virtual void CLWifiTilesManager::deleteAgedTiles(CFAbsoluteTime)
TILE: dispatch, deleteAgedTiles, for, %s
TILE: deleteAgedTiles, fTilesToDownload
void CLWifiTilesManager::cancelAllDownloads()
TILE: cancelAllDownloads, planned, %lu
virtual void CLWifiTilesManager::removeAllTiles(bool, CLTilesManager_Type::TileType)
TILE: removeAllTiles, cleaning map, %d, %s
@TileList, wifi, delete, llsw, %{private}.2lf, %{private}.2lf, all, size, %{public}lu
TILE: removeAllTiles, end, name, %s, size, %lu, unprot size, %lu, downloadSize, %lu
TILE: listTilesDirectory, tileType, %d, %s
void CLWifiTilesManager::populateTilesSet(CFAbsoluteTime)
wifi #tiles, populateTilesSet
@TileEvent, wifi, indexed, %{public}lu
bool CLWifiTilesManager::listAvailableFiles(const std::string &, CLTilesManager_Type::TileType, CFAbsoluteTime)
Listing available wifi tiles.
Done listing wifi tiles.
numberOfTilesInMap
void CLWifiTilesManager::refreshTilesDataIfNeeded()
TILE: refreshTilesDataIfNeeded, isTileDataExpired, %d, isShouldBeDownloaded, %d, tile, %s
void CLWifiTilesManager::checkDownloadSchedule(CFAbsoluteTime)
TILE: checkDownloadSchedule, location services disabled - no tile downloads
TILE: checkDownloadSchedule, index is not available until first unlock, fDataProtectionEnabled, %d
TILE: checkDownloadSchedule, no tiles while locked
TILE: checkDownloadSchedule, no data connectivity, avoiding downloads, reachability, %d
TILE: checkDownloadSchedule, no download on none broadband cellular connections
TILE: checkDownloadSchedule, checking, numOfActiveDownloads, %u, small, %d, large, %d, realtime, %d, wifiPower, %d
TILE: checkDownloadSchedule, numOfActiveDownloads, %d, not scheduling more
TILE: checkDownloadSchedule, both download requests are already in use
TILE: checkDownloadSchedule, both download requests null, shutdown?
TILE: checkDownloadSchedule, isLocationValid, %d, isDeviceLocked, %d
TILE: checkDownloadSchedule, lastLocation, %s
TILE: checkDownloadSchedule, chose, downloadState, %s
TILE: checkDownloadSchedule, started downloading, numOfActiveDownloads, %d, tile, %s
getTile
isCurrentTile
isAllowCellular
@TileReq, wifi, start, llsw, %{private}.2lf, %{private}.2lf, reach, %{public}d
TILE: checkDownloadSchedule, numOfActiveDownloads, %d, tilesToDownload, %lu, small, %d, large, %d
TILE: checkDownloadSchedule, kNotificationNoActiveDownloads
int CLWifiTilesManager::getDownloadConnectionType(CLTileFile *)
TILE: checkDownloadSchedule, rule, isCurrent, isAllowCellularIfCurrent,  IsOkToDownloadRealtime, %s
TILE: checkDownloadSchedule, rule, isCurrent, fDownloadCurrentTileOverCell, IsOkToDownloadRealtime, %s
TILE: checkDownloadSchedule, rule, isCurrent, IsOkToDownloadLarge, %s
TILE: checkDownloadSchedule, rule, isAllowCellularIfNotCurrent, IsOkToDownloadRealtime, %s
TILE: checkDownloadSchedule, rule, IsOkToDownloadLarge, %s
void CLWifiTilesManager::tileDownloadCompleted(CLFileDownload *, bool, void *)
TILE: tileDownloadCompleted, tile, %s, download done, success, %d, NSURLErrorCode, %d, tileDoesNotExist, %d, reachability, %d, locked, %d, fileSize, %d
@TileReq, wifi, downloaded, llsw, %{private}.2lf, %{private}.2lf, success, %{public}d, NSURLErrorCode, %{public}d
WifiTile, where did this download request come from?, download, %{public}p, #CloneMe
void CLWifiTilesManager::tileDecompressionCompleted(CLFileDownload *, bool, void *, CFAbsoluteTime)
Null pointer in fTilesToDownload.
WifiTile, tileDecompressionCompleted, no tile for download, %{public}p, #CloneMe
tileRef.getTileType() == CLTilesManager_Type::TileType::WIFI_Location
TILE: tileDecompressionCompleted, tile, %s, decompress done, tileDownloadWasSuccessful, %d, NSURLErrorCode, %d, tileDoesNotExist, %d, reachability, %d
TILE: tileDecompressionCompleted, tile, %s, reachability, %d, isLocked, %d, downloadDuration, %.1lf, downloadState, %s, progress, s, %d, l, %d
decompressed completed.
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Daemon/Positioning/Tiles/CLWifiTilesManager.mm
TILE: tileDecompressionCompleted, replacing from, %s
TILE: tileDecompressionCompleted, replacing to, %s
decompressed wifi tile
saving access points in wifi tile.
TILE: tileDecompressionCompleted, added, tileid, %s, tilesMap.size, %lu
Download
@TileReq, wifi, mapped, llsw, %{private}.2lf, %{private}.2lf
@TileList, wifi, add, llsw, %{private}.2lf, %{private}.2lf, download, size, %{public}lu
void CLWifiTilesManager::sendNotificationTileWasDownloaded(bool, const CLTileFile &, const CLTilesSet &)
TILE: kNotificationTileWasDownloaded, tileid, %s, tileHeaderParsed, %d, tileType, %d, serverUrl, %s, serverFilename, %s, absoluteLocalFilename, %s
static void CLWifiTilesManager::_tileDownloadCompleted(CLFileDownload *, bool, void *)
TILE: _tileDownloadCompleted, success, %d
static void CLWifiTilesManager::_tileDownloadCompleted(CLFileDownload *, bool, void *)_block_invoke
unsigned int CLWifiTilesManager::getNumOfActiveDownloads()
TILE: getNumOfActiveDownloads, tile, %s, is being downloaded, %d, total, %d, download, %p
tileType == CLTilesManager_Type::TileType::WIFI_Location
bool CLWifiTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, const std::string &, const CLTileFileDownloadDetails &, CFAbsoluteTime)
GnrTiles, block request
TILE: requestDownload, type, %d, %s, not active
@TileReq, wifi, request, llsw, %{private}.2lf, %{private}.2lf
TILE: requestDownload, type, %d, %s, location, %14.8lf, %14.8lf, id, %s, reachbility, %d, details, %s
TILE: requestDownload, index is not available until first unlock, fDataProtectionEnabled, %d
!tilesSet.fSecKeyActive
TILE: requestDownload, tileId=%s isAlreadyDownloaded, %d, isBeingDownloaded, %d, shouldDownloadedBasedOnPermissions, %d, isAlreadyDownloaded, %d
TILE: requestDownload, tileid, %s, already available, isUpdateMTimestamp, %d, isShouldBeRefreshed, %d, isBeingDownloaded, %d
TILE: requestDownload, refresh download, %s
TILE: requestDownload, tileid, %s, will be downloaded, details, %s
TILE: requestDownload, tileid, %.8lf, %8lf, will be downloaded, details, %s
@TileReq, wifi, onlist, llsw, %{private}.2lf, %{private}.2lf, center, size, %{public}ld
TILE: requestDownload, out of boundaries, y, %d, x, %d, tile_y, %d, tile_x, %d, neighbourTileID, %s
TILE: requestDownload, y, %d, x, %d, tile_y, %d, tile_x, %d, neighbourTileID, %s
TILE: requestDownload, adding neighbour, %s
@TileReq, wifi, onlist, llsw, %{private}.2lf, %{private}.2lf, neighbor, size, %{public}ld
TILE: deleteTileFile, deleting, tileid, %s
fTilesToDownload.find(tileIdToDownload) == fTilesToDownload.end()
bool CLWifiTilesManager::addToDownloadList(std::unique_ptr<CLTileFile>, const TileId &, const CLTileFileDownloadDetails &)
TILE: addToDownloadList, added, %s, fTilesToDownload.size, %lu
void CLWifiTilesManager::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)
TILE: onLocationNotification, index is not available until first unlock, fDataProtectionEnabled, %d
TILE: onLocationNotification, fLastLocationDownloadCheckTimestamp, %.1lf, isForceLocationCheck, %d, fLastLocationProtectionCheckTimestamp, %.1f, leech location, %s
TILE: onLocationNotification, unknown notificaiton, %d, %s
void CLWifiTilesManager::onStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)
TILE: onStatusNotification, kNotificationReachability, from, %d, to, %d
WifiTile, onStatusNotification, unknown notification, %d, #CloneMe
void CLWifiTilesManager::cleanUpDownloadList(CFAbsoluteTime)
TILE: cleanUpDownloadList, start, isLocked, %d
TILES: cleanUpDownloadList, download list is too large, %lu
tileFile->getTileType() == CLTilesManager_Type::TileType::WIFI_Location
TILE: cleanUpDownloadList, tileid, %s, available on disc, no need to download
TILE: cleanUpDownloadList, done,  isLocked, %d, cleanedFiles, %u
virtual void CLWifiTilesManager::shutdown()
TILE: CLWifiTilesManager::shutdown
void CLWifiTilesManager::getTileStats(CLDaemonStats_Type::LocationNetworkQueries &)
TILE: stats: getTileStats, wifiTilesDownloaded, %d, wifiTilesDownloaded3G, %d, wifiTilesCached, %d
virtual CLTilesSet &CLWifiTilesManager::getTilesSet()
WifiTile, invalid tileType, %{private}d, #CloneMe
void CLWifiTilesManager::predownloadTilesForLocation(const CLDaemonLocation &, CFAbsoluteTime)
Predownloading tiles.
tileSet
numberOfCircles
location.horizontalAccuracy > 0.0
void CLWifiTilesManager::updateTileLocationRelevancy(const CLDaemonLocation &)
TILE: location not relevant
Updating neighbor tiles access timestamps if necessary.
neighborTiles
void CLWifiTilesManager::addAnyRawWifiTilesToDatabaseThenDeleteRecursive(CFAbsoluteTime, std::vector<std::string>)
Data protection enabled, ending side load.
Finished side-loading raw wifi tiles from disk.
Side loading wifi tile from disk.
void CLWifiTilesManager::addAnyRawWifiTilesToDatabaseThenDelete(CFAbsoluteTime)
Side loading already in progress.
Files found in tiles directory
files
void CLWifiTilesManager::addWifiTileToDatabaseAndDelete(const std::string &, CFAbsoluteTime)
Failed to unlock wifi tile.
Added raw wifi tile from disk to database.
tileHeader
plistExisted
updateGizmoSyncTimestamp
@TileList, wifi, add, llsw, %{private}.2lf, %{private}.2lf, rawfile, size, %{public}lu
RawFile
.plist
static std::string CLWifiTilesManager::generateUniqueTileFileName(const TileId &)
Invalid tile type
([0-9]{8})
fWifiAccessPointLocationService->fConfirmedCorrectSchemaInUse
std::map<TileId, CLTileFile *> CLWifiTilesManager::discoverWifiTilesAvailable(cl::chrono::CFAbsoluteTimeClock::time_point)
Failed to create tile file object for wifi tile.
@TileList, wifi, add, llsw, %{private}.2lf, %{private}.2lf, database, size, %{public}lu
TILE: db to map, %lu, %lu
void CLWifiTilesManager::touchMTime(CFAbsoluteTime, CLTileFile *, bool *)
@TileList, wifi, touch, llsw, %{private}.2lf, %{private}.2lf, time, %{public}.1f
TILE: tileDecompressionCompleted, unable to unlock, tileid, %s, size, %lu
TILE: tileDecompressionCompleted, unlocked tile type, tileid, %s, unlocked, %d
static std::vector<std::string> CLWifiTilesManager::listFilesInDirectory(const std::string &)
Failed to read directory.
CLTileFileDownloadDetails(
cellIfCurrent=
, cellIfNotCurrent=
, redownload=
, timeout=
, numNeighbors=
, timestamp=
, age=, 
, decompress=
virtual void CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLWifiTilesManager_Type::Notification, NotificationData_T = CLWifiTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLWifiTilesManager_Type::Notification, NotificationData_T = CLWifiTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
%13.3lf
virtual void CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLWifiTilesManager_Type::Notification, NotificationData_T = CLWifiTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLWifiTilesManager_Type::Notification, NotificationData_T = CLWifiTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLWifiTilesManager_Type::Notification, NotificationData_T = CLWifiTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLWifiTilesManager_Type::Notification, NotificationData_T = CLWifiTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::listClients() [Notification_T = CLWifiTilesManager_Type::Notification, NotificationData_T = CLWifiTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
static void CLBinaryLog::create()
creating the BinaryLog instance
creating fInstance = new CLBinaryLog()
CLBinaryLog::CLBinaryLog()
#Notice Logging binary sensor data to %{public}s
com.apple.locationd.binlog.compression
void CLBinaryLog::rotateIfNeeded(const double &)
Failed to determine if log rotation is needed. errno, %{public}d, %{public}s
#Warning Failed to move aside log file %s to %s (%d)
%s,%s,Failed to delete log: %s
void CLBinaryLog::open()
#Warning Unable to open %s
LogFileRotationSizeBinary
LogFileStorageCountBinary
%s,%s,Failed to write CLBinaryLog Buffer to disk
%s,%s,Failed to move file %s to %s (%d)
.bin
locationdSensors
virtual bool CLActivityLoggerMsgPolicy::shouldILog(NSData *)
tagEnabled returns %d for tag %d
CLAutopauseProviderDummy::CLAutopauseProviderDummy(id<CLIntersiloUniverse>)
PAUSE: Autopause not suppored on this platform, constructing CLAutopauseProviderDummy
virtual bool CLAutopauseProviderDummy::registerForNotificationInternal(const CLAutopauseProvider_Type::Notification &)
PAUSE: Client registered for %s
virtual bool CLAutopauseProviderDummy::unregisterForNotificationInternal(const CLAutopauseProvider_Type::Notification &)
PAUSE: Client unregistered for %s
CLNatalimetryNotifierSilo
LogBinaryNatalimetryOutputs
SimulateVo2MaxEstimates
Catherine
StepCount
Activity
Swim
FitnessMachine
ActiveJacksonCalibration
CLNatalimetryNotifier::CLNatalimetryNotifier(id<CLIntersiloUniverse>)
Found vo2max calibration override flag,%d 
NanolifestyleSessionTrackerForegroundTransitionNotification
CalorieAggregationTimeInterval
void CLNatalimetryNotifier::setUpdateFinishedHandler()_block_invoke
CalorieHistory,recordId,%d,startTime,%.3f,activityType,%d,userMets,%lf,basalMETs,%f,calories,%lld,basalCalories,%lld
v136@?0{CLNatalieData=i^{__CFString}diBBiddfqqddiiddB}8
void CLNatalimetryNotifier::setUpdateFinishedHandler()_block_invoke_2
ExerciseMinuteHistory,recordId,%d,startTime,%.3f
v32@?0{CLExerciseMinuteData=id^{__CFString}}8
TimeFirstPAL
void CLNatalimetryNotifier::sanitizeUserProfile()
UserProfile, Error in user info,heightM,%f
UserProfile, Error in user info,ageYr,%f
CLBodyMetrics CLNatalimetryNotifier::setUserProfileToBodyMetrics(NSDictionary *, const CLBodyMetrics &, bool) const
UserProfile,runVo2maxVal,%f,runVo2maxFlag,%d,runVo2maxUpdatedFlag,%d,hronsetVo2max,%f,hronsetVo2maxFlag,%d,derivedVo2max,%f,derivedVo2maxFlag,%d,oldVo2max,%f,estimatedVo2max,%f,mergedVo2max,%f,boundedVo2max,%f,doMerge,%d
UserProfile, update completed with result, %{private}@
NumActiveCalibrations
float CLNatalimetryNotifier::mergeVo2max(float, float) const
UserProfile, Number of active vo2max calibrations, %d, first PAL estimate at, %.3f, VO2max delta, %f
bool CLNatalimetryNotifier::readFromDisk(CLBodyMetrics &)
UserProfile, read before device unlock
userinfo
void CLNatalimetryNotifier::resetUserProfileForKeys(NSArray<NSString *> *)
UserProfile, Resetting to defaults for keys, %@
UserProfile, Resetting ActiveVo2Calibration, NumActiveCalibrations, and TimeFirstPAL.
bool CLNatalimetryNotifier::persistCachedValues()
UserProfile, Persistent store not yet initialized 
UserCondition
void CLNatalimetryNotifier::readUserProfile()
UserProfile, Unable to read from disk!
void CLNatalimetryNotifier::setActiveVo2maxOverride(bool)
fActiveVo2maxOverride has been set to %d
void CLNatalimetryNotifier::checkAndNotifyGpsAvailability()
GPS availability at time %lf, companion time, %lf, GPS timestamp, %lf, %d
GPS not available at time %lf
void CLNatalimetryNotifier::onMotionStateMediatorNotification(int, const CLMotionStateMediator_Type::Notification &, const CLMotionStateMediator_Type::NotificationData &)
ActivitySpectator,activity{State,%d,Confidence,%d,MountedState,%d,MountedConfidence,%d,exitState,%d,estExitTime,%f,startTime,%f},nataliFeatures{fVectorMagnitude,%f,fEpochType,%d,fStanding,%d,fMachineFrequency,%f,fRowStrokeFrequency,%f,fRowStrokeAmplitude,%f,fRowStrokePower,%f,fPushVectorMagnitude,%f}
Vo2MaxCalLevel
void CLNatalimetryNotifier::onCatherineNotification(int, const CLCatherineNotifier_Type::Notification &, const CLCatherineNotifier_Type::NotificationData &)
Received Onset notification from CatherineNotifier (%f bpm)!
Updating min. HR, %f
void CLNatalimetryNotifier::onDataProtectionNotification(int, const CLDataProtectionManager_Type::Notification &, const CLDataProtectionManager_Type::NotificationData &)
UserProfile, Encrypted data availability, was, %d, now, %d, availability, %d
void CLNatalimetryNotifier::onStoredUserInfo(const CLMotionCoprocessorInterface::NotificationData *)
UserProfile, Received from SPU, data protection enabled %d
void CLNatalimetryNotifier::refreshMetrics()
UserProfile, Forcing a pal update.
UserProfile, Forcing a vo2max clear.
UserProfile, Forcing a vo2max update.
UserProfile, Forcing a run vo2max clear.
UserProfile, Forcing a run vo2max update.
void CLNatalieSourceFromNotifier<CLElevationChangeEntry>::startSpectator() [Data_T = CLElevationChangeEntry]
virtual void CLNatalieInput<CLElevationChangeEntry>::update(CFAbsoluteTime)
#Warning Input, elevation, time rolled back. Delta %f, Previous Time %f, Current Time %f, Always Active %d.
virtual bool CLNatalieSourceFromNotifier<CLElevationChangeEntry>::startActive() [Data_T = CLElevationChangeEntry]
virtual bool CLNatalieSourceFromNotifier<CLElevationChangeEntry>::stopActive() [Data_T = CLElevationChangeEntry]
void CLNatalieSourceFromNotifier<CLCoarseElevationChangeEntry>::startSpectator() [Data_T = CLCoarseElevationChangeEntry]
virtual void CLNatalieInput<CLCoarseElevationChangeEntry>::update(CFAbsoluteTime)
#Warning Input, all-day elevation, time rolled back. Delta %f, Previous Time %f, Current Time %f, Always Active %d.
virtual bool CLNatalieInput<CLCoarseElevationChangeEntry>::isReady(CFAbsoluteTime)
%s is not ready at, %f, timeout, %f
%s is ready at, %f, timeout, %f
void CLNatalieSourceFromNotifier<CLCatherineData>::startSpectator() [Data_T = CLCatherineData]
virtual void CLNatalieInput<CLCatherineData>::update(CFAbsoluteTime) [Data_T = CLCatherineData]
virtual bool CLNatalieSourceFromNotifier<CLCatherineData>::startActive() [Data_T = CLCatherineData]
virtual bool CLNatalieSourceFromNotifier<CLCatherineData>::stopActive() [Data_T = CLCatherineData]
void CLNatalieSourceFromNotifier<CLStepCountEntry>::startSpectator() [Data_T = CLStepCountEntry]
virtual void CLNatalieInput<CLStepCountEntry>::update(CFAbsoluteTime) [Data_T = CLStepCountEntry]
virtual void CLNatalieInput<CLMotionStateMediator_Type::MediatedMotionActivity>::update(CFAbsoluteTime) [Data_T = CLMotionStateMediator_Type::MediatedMotionActivity]
virtual void CLNatalieInput<CLSwimEntry>::update(CFAbsoluteTime) [Data_T = CLSwimEntry]
virtual bool CLNatalieSourceFromNotifier<CLSwimEntry>::startActive() [Data_T = CLSwimEntry]
virtual bool CLNatalieSourceFromNotifier<CLSwimEntry>::stopActive() [Data_T = CLSwimEntry]
virtual void CLNatalieInput<_CLFitnessMachineData>::update(CFAbsoluteTime) [Data_T = _CLFitnessMachineData]
virtual bool CLNatalieSourceFromNotifier<_CLFitnessMachineData>::startActive() [Data_T = _CLFitnessMachineData]
virtual bool CLNatalieSourceFromNotifier<_CLFitnessMachineData>::stopActive() [Data_T = _CLFitnessMachineData]
void CLActivityAggregator<CLNatalieData, CLActivityDB::NoDataProtectionPolicy>::setExpirationRule(CFTimeInterval) [T = CLNatalieData, DataProtectionPolicy = CLActivityDB::NoDataProtectionPolicy]
void CLActivityAggregator<CLExerciseMinuteData, CLActivityDB::NoDataProtectionPolicy>::setExpirationRule(CFTimeInterval) [T = CLExerciseMinuteData, DataProtectionPolicy = CLActivityDB::NoDataProtectionPolicy]
long CLActivityAggregator<CLNatalieData, CLActivityDB::NoDataProtectionPolicy>::aggregateRecords() [T = CLNatalieData, DataProtectionPolicy = CLActivityDB::NoDataProtectionPolicy]
int CLActivityRecorderDb<CLNatalieData, CLActivityDB::NoDataProtectionPolicy>::estimateRecordsNeeded(const CLAggregationRules &) [T = CLNatalieData, DataProtectionPolicy = CLActivityDB::NoDataProtectionPolicy]
long CLActivityAggregator<CLExerciseMinuteData, CLActivityDB::NoDataProtectionPolicy>::aggregateRecords() [T = CLExerciseMinuteData, DataProtectionPolicy = CLActivityDB::NoDataProtectionPolicy]
int CLActivityRecorderDb<CLExerciseMinuteData, CLActivityDB::NoDataProtectionPolicy>::estimateRecordsNeeded(const CLAggregationRules &) [T = CLExerciseMinuteData, DataProtectionPolicy = CLActivityDB::NoDataProtectionPolicy]
virtual void CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLNatalimetryNotifier_Type::Notification, NotificationData_T = CLNatalimetryNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLNatalimetryNotifier_Type::Notification, NotificationData_T = CLNatalimetryNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLActivityRecorderDb<CLExerciseMinuteData, CLActivityDB::NoDataProtectionPolicy>::addSuspectRecord(const T &) [T = CLExerciseMinuteData, DataProtectionPolicy = CLActivityDB::NoDataProtectionPolicy]
bool CLActivityRecorderDb<CLExerciseMinuteData, CLActivityDB::NoDataProtectionPolicy>::isValidTime(CFAbsoluteTime &) const [T = CLExerciseMinuteData, DataProtectionPolicy = CLActivityDB::NoDataProtectionPolicy]
void CLActivityRecorderDb<CLNatalieData, CLActivityDB::NoDataProtectionPolicy>::addSuspectRecord(const T &) [T = CLNatalieData, DataProtectionPolicy = CLActivityDB::NoDataProtectionPolicy]
bool CLActivityRecorderDb<CLNatalieData, CLActivityDB::NoDataProtectionPolicy>::isValidTime(CFAbsoluteTime &) const [T = CLNatalieData, DataProtectionPolicy = CLActivityDB::NoDataProtectionPolicy]
virtual void CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLNatalimetryNotifier_Type::Notification, NotificationData_T = CLNatalimetryNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLNatalimetryNotifier_Type::Notification, NotificationData_T = CLNatalimetryNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLNatalimetryNotifier_Type::Notification, NotificationData_T = CLNatalimetryNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLNatalimetryNotifier_Type::Notification, NotificationData_T = CLNatalimetryNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::listClients() [Notification_T = CLNatalimetryNotifier_Type::Notification, NotificationData_T = CLNatalimetryNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
float CLCalorieClimbingModel::estimateClimbingMETs(CFAbsoluteTime, const CLCoarseElevationChangeEntry &, bool)
Climbing,deltaElevation,%f,ascentDuration,%f,climbingMets,%f,len,%lu
Climbing,epochMets,%f,bufferLength,%lu
Climbing,epochMets,%f,historicalBufferLength,%lu
com.apple.locationd.CoreMotion.CLGyroBiasEstimator
DisableDynamicGyroBias
void CLGyroBiasEstimator::removeClientInternal(const void *)
CLGyroBiasEstimator removing client %p
CLGyroBiasEstimator unknown client instance %p
void CLGyroBiasEstimator::addClientInternal(const void *, const bool, CLGyroBiasEstimator::Handler)
CLGyroBiasEstimator adding client %p, sending out cached gyro bias,bias.x,%f,bias.y,%f,bias.z,%f,var.x,%f,var.y,%f,var.z,%f
CLGyroBiasEstimator adding client %p, no cached gyro bias available
void CLGyroBiasEstimator::refreshDispatchersIfNecessaryInternal()
CLGyroBiasEstimator,SPUEnabled,%d,BuildingGYTT,%d,NumClients,%lu
AOP/SPU gyro bias not available on this platform.
void CLGyroBiasEstimator::registerInputNotificationsInternal()
GyroBiasFit,slope.x,%20.20f,slope.y,%20.20f,slope.z,%20.20f,intercept.x,%20.20f,intercept.y,%20.20f,intercept.z,%20.20f, lastMiniCal,%20.20f
Registering for gyro notifications
Registering for gyro temperature notifications
Registering for magnetometer notifications
void CLGyroBiasEstimator::unregisterInputNotificationsInternal()
Unregistering for gyro notifications
Unregistering for gyro temperature notifications
Unregistering for magnetometer notifications
void CLGyroBiasEstimator::feedGyroTemperature(const CLGyro::Temperature *)
Notifying clients on temperature update,temperature,%f
void CLGyroBiasEstimator::notifyClients(CFTimeInterval)
GyroBias,time,%f,temperature,%f,bias.x,%f,bias.y,%f,bias.z,%f,dbias.x,%f,dbias.y,%f,dbias.z,%f,var.x,%f,var.y,%f,var.z,%f,client,%p
void CLGyroBiasEstimator::tryBuildGYTT(CLVector3d<float>, float)
Warning: Temperature is changing too quickly, clearing GYTT buffers
Warning: Could not insert GYTT because bump was detected.
void CLGyroBiasEstimator::tryBuildGYTT(CLVector3d<float>, float)_block_invoke
Bias estimate inserted: bias,%f,%f,%f,variance,%f,%f,%f,temperature,%f
v16@?0^{CLGyroCalibrationDatabase=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB}8
void CLGyroBiasEstimator::feedGyroBiasFit(CLMotionTypeGyroBiasFit)
Expected linear fit.
void CLGyroBiasEstimator::notifySPUClients(const CLMotionCoprocessorInterface::GyroBiasAndVariance *)
SPUGyroBias,temperature,%f,bias.x,%f,bias.y,%f,bias.z,%f,var.x,%f,var.y,%f,var.z,%f,client,%p
void CLGyroBiasEstimator::notifySPUClients(const CLMotionCoprocessorInterface::GyroBiasAndVariance *)_block_invoke
SPU bias estimate inserted: bias,%f,%f,%f,variance,%f,%f,%f,temperature,%f
it != fSamples.end()
CLOnBodyNotifier6::CLOnBodyNotifier6(id<CLIntersiloUniverse>)
configuration: wake threshold = %f
Registering with daemon status
virtual void CLOnBodyNotifier6::feedParams(NSDictionary *)
void CLOnBodyNotifier6::startOnBodyDetectionHelper(bool)
Registering with CLAccelerometer
Registering throttledDispatcher with CLAccelerometer
void CLOnBodyNotifier6::stopOnBodyDetectionHelper(bool)
Unregistering with CLAccelerometer
Unregistering throttleDispatcher with CLAccelerometer
void CLOnBodyNotifier6::onAccelerometerData(const CLAccelerometer::Sample *, unsigned int)
detection @ %llu : low %f high %f status %d confidence %d odds %.2f
Failed to add throttled dispatcher
void CLOnBodyNotifier6::onThrottledAccelerometerData(const CLAccelerometer::Sample *)
throttled @ %llu: accel = [%.2f %.2f %.2f] = %.2f ? %.2f
Failed to add dispatcher
void CLOnBodyNotifier6::onDaemonStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)
kNotificationSleep. Turning off on body detector
kNotificationWake. Turning on on body detector
virtual void CLClusterAlgorithm<CLCompassDatabaseRecord>::buildClusterAroundIndex(const std::list<int> &, int, std::list<int> &, std::list<int> &, float) const [T = CLCompassDatabaseRecord]
Unable to find index (%{public}d) to value on which we want to build a cluster around!  Returning from function.
Cluster Size 
RowingModelMetsScale
virtual CLMetsInfo CLNatalieRowingModel::computeMETS(const CLNatalieModelInput &)
Rowing, Speed Model, timestamp, %f, stroke power, %f, strokes amplitude, %f, stroke rate (spm), %f, height (m), %f, gender, %d, speed, %f
Rowing, WR Model, timestamp, %f, stroke speed (m/s), %f, strokes amplitude, %f, weight (KG), %f, METS, %f, fMetsScaling, %f
CLElevationChangeEntry CLElevationController::elevationUpdatePhone(CLElevationChangeEntry)
onElevationPhone,arbiterInput,startTime,%.3f,ascended,%d,descended,%d
onElevationPhone,arbiterOutput,startTime,%.3f,ascended,%d,descended,%d
void CLElevationController::detailedConnectionUpdate(bool, bool)
previouslyPhoneConnected, %d, currentlyPhoneConnected, %d,phoneSupportsElevation, %d
void CLElevationController::elevationUpdateWatch(std::vector<CLElevationChangeEntry>::const_iterator, std::vector<CLElevationChangeEntry> &)
onElevationWatch,arbiterInput,startTime,%.3f,ascended,%d,descended,%d
onElevationWatch,arbiterOutput,startTime,%.3f,ascended,%d,descended,%d
bool CLElevationController::updateElevationSubscriptionClient(int)
updateElevationSubscriptionClient, number of clients,%d
void CLElevationController::doEnableTimerAndResetArbiter(const CLElevationController::ESourceUnavailable *)
doEnableTimerAndResetArbiter
void CLElevationController::doCancelTimerAndResetArbiter(const CLElevationController::ESourceAvailable *)
doCancelTimerAndResetArbiter
void CLElevationController::doResetSignificantElevation(const CLElevationController::ETimerExpires *)
doResetSignificantElevation(const ETimerExpires *event)
void CLElevationController::doResetSignificantElevationAndResetArbiter(const CLElevationController::ESourceAvailable *)
doResetSignificantElevationAndResetArbiter
void CLElevationController::doResetArbiter(const T *) [T = CLElevationController::ENoActiveClients]
doResetArbiter
void CLElevationController::doResetArbiter(const T *) [T = CLElevationController::EClientActive]
void CLElevationController::doDisableTimer(const T *) [T = CLElevationController::ENoActiveClients]
doDisableTimer
void CLActivityRecorderDb<CLSignificantElevation, CLActivityDB::NoDataProtectionPolicy>::addSuspectRecord(const T &) [T = CLSignificantElevation, DataProtectionPolicy = CLActivityDB::NoDataProtectionPolicy]
CMLinearTemperatureFit::CMLinearTemperatureFit(CMTemperatureFitReceiver *)
Assertion failed: receiver, file /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Oscar/CMLinearTemperatureFit.h, line 27,receiver must not be null..
void CLLastConfidentLocation::onNewLocations(const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)
Received kNotificationWifiLocationBatched, num,%u,Size, %lu
Received unknown notification %d
bool CLLastConfidentLocation::isQualifiedAsConfident(const CLDaemonLocation &)
Skipping new location with invalid coordinate
Skipping new location with invalid rawCoordinate
Skipping new location with coordinate in null-island
Skipping new location with rawCoordinate in null-island
bool CLLastConfidentLocation::isPreviousLocationPreferred(const CLDaemonLocation &, bool)
#Warning Last confident location is in future, timestamp,%.03lf
Skipping new location with an older timestamp,%.03lf,cached,%.03lf
Skipping new location, since having recent more confident location
bool CLLastConfidentLocation::isLastConfidentLocationValid()
Last confident location not available
Last confident location too old, maxAge = %.1lf
void CLLastConfidentLocation::notifyConfidentLocationIfNecessary()
Notifying cached location,num,%u,accuracy,%.01lf,timestamp,%.03lf,lifespan,%.04lf
void CLLastConfidentLocation::onCachedLocationControllerNotification(int, const CLCachedLocationController_Type::Notification &, const CLCachedLocationController_Type::NotificationData &)
Received a kNotificationCachedLocationControllerStateUpdate notification, state, %d
Recieved unknown notification %d
LogFileRotationSize
LogFileStorageCount
CLLogBase
LogDumpOnUnload
LogDumpOnLoad
/Library/Logs/CrashReporter
Caches
move
%s,%s,could not %s log file %s to %s
%s,%s,could not stat %s
%s,%s,failed to open %s
CLCellTile-Mutex
virtual bool CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_GSM, CLTilesManager_Type::KeyLatLonEntry_GSM>::TEST_testBinarySearch(const char *) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_GSM, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_GSM]
TILE: result: tilestool: TEST_testBinarySearch, entries, %lu, file, %s
tilestool: mmap, %lu, file, %lu
TEST_testBinarySearch
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Daemon/Positioning/Tiles/CLKeyLatLonTileTemplate.h
isFound == isFoundMmap
TILE: result: tilestool: prog, %3lu, %3lu, ===============> isFound, %d, location, %14.8lf, %14.8lf, entry, %s
isFound
TILE: result: tilestool: pass, %d, tests, %lu, %lu
virtual void CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_GSM, CLTilesManager_Type::KeyLatLonEntry_GSM>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const CLTileFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_GSM, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_GSM]
TILE: index entry, %3lu, %3u, %s
TILE: searched, numOfEntries, %u, offsetEntries, %d
onTraversingSection
offsetEntries + numOfEntries <= entriesHeader.numOfEntries
TILE: avoid data search
TILE: entry, %3lu, %3u, %3lu, %s, loc, %.8lf, %.8lf, delta, %.5lf, %.5lf, grid, %u, %u
TILE: getLocationByKey, isFound, %d, searchedArea, %d, key, %s
bool CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_GSM, CLTilesManager_Type::KeyLatLonEntry_GSM>::binarySearchIndex(std::vector<IndexEntry_T> &, unsigned int &, unsigned int &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_GSM, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_GSM]
TILE: binarySearchIndex, size, %lu, searchedIndexEntry, %s, %d
TILE: index search, match, %s
TILE: index search, not found
bool CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_GSM, CLTilesManager_Type::KeyLatLonEntry_GSM>::binarySearchData(const DataEntry_T *, unsigned int, unsigned int, const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_GSM, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_GSM]
TILE: binarySearchData, search data, isFound, %d, numOfCompares, %u
virtual bool CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_GSM, CLTilesManager_Type::KeyLatLonEntry_GSM>::getLocationByKey_mmap(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_GSM, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_GSM]
TILE: ......................................................................., getLocationByKey_mmap, key, %s
TILE: getLocationByKey_mmap, failed to mmap, #CloneMe
TILE: getLocationByKey_mmap, not found in index, a, %u, b, %u, %s
TILE: getLocationByKey_mmap, nothing to search, a, %u, b, %u, %s
TILE: getLocationByKey_mmap, isFound, %d, searchedArea, %u, key, %s, entry, %s
search
virtual bool CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_GSM, CLTilesManager_Type::KeyLatLonEntry_GSM>::getLocationByKey_traverse(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_GSM, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_GSM]
TILE: ......................................................................., getLocationByKey_traverse, key, %s
TILE: getLocationByKey_traverse, prefer local file name because it exists, %s
TILE: getLocationByKey_traverse, isFound, %d, searchedArea, %u, key, %s, entry, %s
virtual bool CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, CLTilesManager_Type::KeyLatLonEntry_CDMA>::TEST_testBinarySearch(const char *) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CDMA]
virtual void CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, CLTilesManager_Type::KeyLatLonEntry_CDMA>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const CLTileFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CDMA]
bool CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, CLTilesManager_Type::KeyLatLonEntry_CDMA>::binarySearchIndex(std::vector<IndexEntry_T> &, unsigned int &, unsigned int &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CDMA]
bool CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, CLTilesManager_Type::KeyLatLonEntry_CDMA>::binarySearchData(const DataEntry_T *, unsigned int, unsigned int, const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CDMA]
virtual bool CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, CLTilesManager_Type::KeyLatLonEntry_CDMA>::getLocationByKey_mmap(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CDMA]
virtual bool CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, CLTilesManager_Type::KeyLatLonEntry_CDMA>::getLocationByKey_traverse(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CDMA]
virtual bool CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_LTE, CLTilesManager_Type::KeyLatLonEntry_LTE>::TEST_testBinarySearch(const char *) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_LTE, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_LTE]
virtual void CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_LTE, CLTilesManager_Type::KeyLatLonEntry_LTE>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const CLTileFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_LTE, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_LTE]
bool CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_LTE, CLTilesManager_Type::KeyLatLonEntry_LTE>::binarySearchIndex(std::vector<IndexEntry_T> &, unsigned int &, unsigned int &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_LTE, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_LTE]
bool CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_LTE, CLTilesManager_Type::KeyLatLonEntry_LTE>::binarySearchData(const DataEntry_T *, unsigned int, unsigned int, const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_LTE, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_LTE]
virtual bool CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_LTE, CLTilesManager_Type::KeyLatLonEntry_LTE>::getLocationByKey_mmap(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_LTE, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_LTE]
virtual bool CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_LTE, CLTilesManager_Type::KeyLatLonEntry_LTE>::getLocationByKey_traverse(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_LTE, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_LTE]
CLTilesSet::CLTilesSet(CLTilesManager_Type::TileType, const std::string &, const std::string &)
TILE: creating directory, %s, ret, %d
CLTilesSetCollection::CLTilesSetCollection()
Initialize CLTilesSetCollection.
CLTilesSet *CLTilesSetCollection::getTilesSet(CLTilesManager_Type::TileType)
Invalid TileType value.
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Daemon/Positioning/Tiles/CLTilesSet.mm
Index out of bounds
size
void CLTilesSetCollection::addTilesSet(CLTilesManager_Type::TileType, std::unique_ptr<CLTilesSet>)
Mismatch of tile type inserting CLTilesSet.
avgIntensity
Td,N,V_avgIntensity
Ti,N,V_mode
kModeThreshold
kModeBurst
kModeCoverage
CLSensorRecorderNotifierSilo
CLSensorRecorderNotifier
SensorRecorderAggregationInterval
SensorRecorderAggregationExpiration
SensorRecorderAccelSamplingRate
SensorRecorderGyroSamplingRate
SensorRecorderAccelAlwaysSubscribed
SensorRecorderGyroAlwaysSubscribed
kAccelSampleRate
kGyroSampleRate
v36@?0d8Q16r*24I32
CLSensorRecorderNotifier::CLSensorRecorderNotifier(id<CLIntersiloUniverse>)_block_invoke
Aggregating accel sensor recorder samples.
CLSensorRecorderNotifier::CLSensorRecorderNotifier(id<CLIntersiloUniverse>)_block_invoke_2
Aggregating gyro sensor recorder samples.
bool CLSensorRecorderNotifier::recordSensorData(CLSensorRecorder_Types::DataType, CFTimeInterval, bool)
Record %s data for %f
kAccelBufferSubscriptionOverride
kAccelBufferSubscription
kGyroBufferSubscriptionOverride
kGyroBufferSubscription
bool CLSensorRecorderNotifier::setSensorSampleRate(CLSensorRecorder_Types::DataType, unsigned int)
requested sampling rate of %{public}d is greater than the max allowed of %{public}d
Invalid data type.
setting desired accel sampling rate to %dhz
bool CLSensorRecorderNotifier::writeSensorRecordDataToFile(CLSensorRecorder_Types::DataType, NSFileHandle *, CFAbsoluteTime, CFAbsoluteTime)
Error accessing sensor recorder data from %{private}f, %{private}f
Error occurred while retrieving data record %{private}llu
Wrote %lu meta records across %d data containers to %s
void CLSensorRecorderNotifier::updateSubscriptionType(CLSensorRecorder_Types::DataType)
Updating %s sampling rate %d, fitness tracking enabled, %d
Updated %s subscription due to invalid time.
Updated %s subscription override due to invalid time.
void CLSensorRecorderNotifier::onSysdiagnoseStarted(int, const CLDarwinNotifier_Type::Notification &, const CLDarwinNotifier_Type::NotificationData &)
#error Failed to schedule sensor recorder dump on sysdiagnose trigger because newly scheduled time (%f) < 0
yyyyMMdd_HH-mm-ss
%s/CoreMotionDebug_SensorRecorder_%@_accel.dat
void CLSensorRecorderNotifier::writeAccelToDiskTriggeredBySysdiagnose()
Failed to dump sensor recorder (accel) to disk because fileHandle is nil.
bool CLActivityRecorderDb<CLSensorRecorderDataPacket, CLActivityDB::NoDataProtectionPolicy>::isValidTime(CFAbsoluteTime &) const [T = CLSensorRecorderDataPacket, DataProtectionPolicy = CLActivityDB::NoDataProtectionPolicy]
virtual void CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLSensorRecorderNotifier_Type::Notification, NotificationData_T = CLSensorRecorderNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLSensorRecorderNotifier_Type::Notification, NotificationData_T = CLSensorRecorderNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLSensorRecorderNotifier_Type::Notification, NotificationData_T = CLSensorRecorderNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLSensorRecorderNotifier_Type::Notification, NotificationData_T = CLSensorRecorderNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLSensorRecorderNotifier_Type::Notification, NotificationData_T = CLSensorRecorderNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLSensorRecorderNotifier_Type::Notification, NotificationData_T = CLSensorRecorderNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::listClients() [Notification_T = CLSensorRecorderNotifier_Type::Notification, NotificationData_T = CLSensorRecorderNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
CLBTLEBeaconProviderMockSilo
CLBTLEBeaconProviderMock-Notifier
void CLBTLEBeaconProviderMock::onEventSource()
Attempting to fulfill scan requests,%lu.
Fulfilled scan requests,%d.
Processing events for %lu proximity zones.
Processed %d proximity zone events.
Bluetooth is powered off, no events will be processed.
virtual void CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLBTLEBeaconProvider_Type::Notification, NotificationData_T = CLBTLEBeaconProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLBTLEBeaconProvider_Type::Notification, NotificationData_T = CLBTLEBeaconProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLBTLEBeaconProvider_Type::Notification, NotificationData_T = CLBTLEBeaconProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLBTLEBeaconProvider_Type::Notification, NotificationData_T = CLBTLEBeaconProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLBTLEBeaconProvider_Type::Notification, NotificationData_T = CLBTLEBeaconProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLBTLEBeaconProvider_Type::Notification, NotificationData_T = CLBTLEBeaconProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::listClients() [Notification_T = CLBTLEBeaconProvider_Type::Notification, NotificationData_T = CLBTLEBeaconProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
-[CMStrideCalibrationElevationBuffer feedElevationData:]
Elevation, %f, %f, %d, %d
-[CMStrideCalibrationElevationBuffer updateGradient:]
TrackCalibration,%s,CalData,%s,ElevationAscended,%d,ElevationDescended,%d
TripTimestampKey
TripIdKey
RatKey
MccKey
MncKey
ContextKey
MotionVehicleStateChangedKey
tripTimestamp
tripId
Td,N,V_tripTimestamp
T@"NSString",C,N,V_tripId
Ti,N,V_context
T@"NSString",C,N,V_bundleIds
CLBTLEFenceManagerSilo
CLBTLEFenceManager-Notifier
virtual void CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::removeClient(int) [Notification_T = CLBTLEFenceManager_Type::Notification, NotificationData_T = CLBTLEFenceManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
virtual bool CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLBTLEFenceManager_Type::Notification, NotificationData_T = CLBTLEFenceManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
virtual bool CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::clientRegistered(int, const Notification_T &) [Notification_T = CLBTLEFenceManager_Type::Notification, NotificationData_T = CLBTLEFenceManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
virtual bool CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::unregisterForNotification(int, const Notification_T &) [Notification_T = CLBTLEFenceManager_Type::Notification, NotificationData_T = CLBTLEFenceManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
virtual void CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLBTLEFenceManager_Type::Notification, NotificationData_T = CLBTLEFenceManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
void CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLBTLEFenceManager_Type::Notification, NotificationData_T = CLBTLEFenceManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
virtual void CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::listClients() [Notification_T = CLBTLEFenceManager_Type::Notification, NotificationData_T = CLBTLEFenceManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
CLSpringTrackingNotifierSilo
reply != nullptr
CLSpringTrackingNotifier
SpringTrackerWakeHysteresis
void CLSpringTrackingNotifier::setUpdateFinishedHandler()_block_invoke
id,%llu,startTime,%lf,eventType,%ld
com.apple.locationd.lorievent
v64@?0{CLSpringTrackerEntry=Q[16C][16C]dq}8
CMError CLSpringTrackingNotifier::startTracking()
Started tracking,duration,%.3f
CMError CLSpringTrackingNotifier::stopTracking()
Stopped tracking
void CLActivityAggregator<CLSpringTrackerEntry, CLActivityDB::NoDataProtectionPolicy>::setExpirationRule(CFTimeInterval) [T = CLSpringTrackerEntry, DataProtectionPolicy = CLActivityDB::NoDataProtectionPolicy]
void CLActivityRecorderDb<CLSpringTrackerEntry, CLActivityDB::NoDataProtectionPolicy>::addSuspectRecord(const T &) [T = CLSpringTrackerEntry, DataProtectionPolicy = CLActivityDB::NoDataProtectionPolicy]
bool CLActivityRecorderDb<CLSpringTrackerEntry, CLActivityDB::NoDataProtectionPolicy>::isValidTime(CFAbsoluteTime &) const [T = CLSpringTrackerEntry, DataProtectionPolicy = CLActivityDB::NoDataProtectionPolicy]
long CLActivityAggregator<CLSpringTrackerEntry, CLActivityDB::NoDataProtectionPolicy>::aggregateRecords() [T = CLSpringTrackerEntry, DataProtectionPolicy = CLActivityDB::NoDataProtectionPolicy]
int CLActivityRecorderDb<CLSpringTrackerEntry, CLActivityDB::NoDataProtectionPolicy>::estimateRecordsNeeded(const CLAggregationRules &) [T = CLSpringTrackerEntry, DataProtectionPolicy = CLActivityDB::NoDataProtectionPolicy]
virtual void CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLSpringTrackingNotifier_Type::Notification, NotificationData_T = CLSpringTrackingNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLSpringTrackingNotifier_Type::Notification, NotificationData_T = CLSpringTrackingNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLSpringTrackingNotifier_Type::Notification, NotificationData_T = CLSpringTrackingNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLSpringTrackingNotifier_Type::Notification, NotificationData_T = CLSpringTrackingNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLSpringTrackingNotifier_Type::Notification, NotificationData_T = CLSpringTrackingNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLSpringTrackingNotifier_Type::Notification, NotificationData_T = CLSpringTrackingNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::listClients() [Notification_T = CLSpringTrackingNotifier_Type::Notification, NotificationData_T = CLSpringTrackingNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
SleepHistory
DELETE FROM SleepHistory WHERE startTime < ?
virtual long CLSpringTrackerRecorderDb::aggregateRecords(const CLAggregationRules &)
Error expiring records.
SELECT * from SleepHistory ORDER BY id ASC
CMError CLSpringTrackerRecorderDb::querySince(const CLSpringTrackerEntry &, std::vector<CLSpringTrackerEntry> &) const
History not accessible
DB UUID un-initialized
Non-existent query record, returning all records.
SELECT * FROM SleepHistory WHERE id >= ? ORDER BY id ASC
Error querying records.
SELECT COUNT(*) FROM SleepHistory
(silo != nullptr && handler != nullptr)
DELETE FROM SleepHistory
DELETE FROM SleepHistory WHERE startTime > ?
UPDATE SleepHistory SET startTime = startTime + ?
INSERT INTO SleepHistory (startTime, eventType) VALUES (?, ?)
SELECT * FROM SleepHistory ORDER BY startTime DESC LIMIT 1
CLActivityRecorderDb<CLSpringTrackerEntry, CLActivityDB::NoDataProtectionPolicy>::CLActivityRecorderDb(const char *, bool, float, const std::string, const CLSqliteDatabase::SqlitePropertyPersistence) [T = CLSpringTrackerEntry, DataProtectionPolicy = CLActivityDB::NoDataProtectionPolicy]
bool CLActivityRecorderDb<CLSpringTrackerEntry, CLActivityDB::NoDataProtectionPolicy>::setDatabaseAccessible() [T = CLSpringTrackerEntry, DataProtectionPolicy = CLActivityDB::NoDataProtectionPolicy]
virtual void CLActivityRecorderDb<CLSpringTrackerEntry, CLActivityDB::NoDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, bool) [T = CLSpringTrackerEntry, DataProtectionPolicy = CLActivityDB::NoDataProtectionPolicy]
CLBTLEBeaconProviderConcrete-Notifier
CLBTLEBeaconProviderConcrete
BTLEBeaconProvider
BeaconFenceBestEffortScheduleEnabled
CLBTLEBeaconProviderConcrete::CLBTLEBeaconProviderConcrete(id<CLIntersiloUniverse>)
#Warning Overriding BeaconFenceBestEffortScheduleEnabled,%{private}d
BeaconFenceBestEffortInterval
#Warning Overriding BeaconFenceBestEffortInterval,%{private}.2f
virtual bool CLBTLEBeaconProviderConcrete::addProximityZone(const CLBTLEBeaconProvider_Type::ProximityZone &)
iB: Adding zone,%{private}s
Invalid region definition for zone monitoring
iB: Registering zone,%{private}s, with Bluetooth
virtual bool CLBTLEBeaconProviderConcrete::removeProximityZone(const CLBTLEBeaconProvider_Type::ProximityZone &)
iB: Removing zone,%{private}s
#Warning Unable to remove zone,%{private}s, it wasn't found.
void CLBTLEBeaconProviderConcrete::onZoneDetectionTimer(CLPersistentTimer *)
iB: Zone detection timer woke up
void CLBTLEBeaconProviderConcrete::onDaemonStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)
iB: Received a wake event
void CLBTLEBeaconProviderConcrete::unlockedStartScan()
iB: Resuming scan, reference count,%{public}d,lastScan,%{private}.0lf,lastScheduled,%{private}.0lf
iB: Scan is already resumed, reference count,%{public}d,lastScan,%{private}.0lf,lastScheduled,%{private}.0lf
void CLBTLEBeaconProviderConcrete::unlockedStopScan()
iB: Suspending scan, reference count,%{public}d
iB: Scan is already suspended, reference count,%{public}d
void CLBTLEBeaconProviderConcrete::unlockedPostAndClearScanCache()
iB: Posting notification with proximity devices,%{public}lu
void CLBTLEBeaconProviderConcrete::unlockedPerformZoneDetectionWithCache()
iB: Best effort zone,%{private}s, firstExit,%{private}f, now,%{private}f, has not reached exitThreshold,%{private}f
iB: Best effort zone,%{private}s, subject to exit
venues
T@"NSMutableArray",&,N,V_venues
CLGpsAssistantSilo
void CLGpsAssistant::setVehicleSpeedAssistance(const double &, const CLNmeaSCD &)
STARK,SpeedTO,isOffsetValid,%d,offsetUncSecs,%.9g,filteredOffsetSecs,%.4lf,machTime,%.4lf,vehicleTime,%.4lf
void CLGpsAssistant::setVehicleGyroAssistance(const double &, const CLNmeaGCD &)
STARK,GyroTO,isOffsetValid,%d,offsetUncSecs,%.9g,filteredOffsetSecs,%.4lf,machTime,%.4lf,vehicleTime,%.4lf
virtual void CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLGpsAssistant_Type::Notification, NotificationData_T = CLGpsAssistant_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLGpsAssistant_Type::Notification, NotificationData_T = CLGpsAssistant_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLGpsAssistant_Type::Notification, NotificationData_T = CLGpsAssistant_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLGpsAssistant_Type::Notification, NotificationData_T = CLGpsAssistant_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLGpsAssistant_Type::Notification, NotificationData_T = CLGpsAssistant_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLGpsAssistant_Type::Notification, NotificationData_T = CLGpsAssistant_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::listClients() [Notification_T = CLGpsAssistant_Type::Notification, NotificationData_T = CLGpsAssistant_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
kCMOnBodyStatusResult
kCMOnBodyStatusConfidence
result %d confidence %d timestamp %f
CLActivityAlarmConcentrator
d24@?0I8d12B20
void CLActivityAlarmConcentrator::removeAlarm(CMActivityAlarm *)
Removing an alarm which has not been added.
Remove
NSTimeInterval CLActivityAlarmConcentrator::alarmHandler(CMActivityAlarmTrigger, NSTimeInterval, bool)
#Warning Invalid trigger.trigger,%u
Wake
Fire
Action
MotionActivityAlarm
BundleID
AlarmTrigger
AlarmDuration
hasMac
T@"NSString",&,N,V_mac
hasMode
Td,N,V_mode
-[CMActivityAlarm initWithTrigger:duration:onQueue:withHandler:]
trigger,%d,duration,%f
<locationd internal>
trigger
TI,N,V_trigger
executable
T@"NSString",C,N,V_executable
CLBTLEBeaconProviderSilo
CLBTLEBeaconProvider
CLDarwinNotifierSilo
virtual bool CLDarwinNotifier::registerForNotificationInternal(const CLDarwinNotifier_Type::Notification &)
Unknown registration requested: %{public}d
virtual bool CLDarwinNotifier::unregisterForNotificationInternal(const CLDarwinNotifier_Type::Notification &)
Unknown unregistration requested: %{public}d
void CLDarwinNotifier::registerForDaemonSettings(bool)
Attempted to re-register for daemon settings while already registered
#Warning Attempted to unregister for daemon settings while not registered
com.apple.locationd.appleAccountDidChange
void CLDarwinNotifier::registerForAppleAccountDidChange(bool)
Attempted to re-register for AppleAccountDidChange while already registered
#Warning Attempted to unregister for AppleAccountDidChange while not registered
virtual void CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLDarwinNotifier_Type::Notification, NotificationData_T = CLNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLDarwinNotifier_Type::Notification, NotificationData_T = CLNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLDarwinNotifier_Type::Notification, NotificationData_T = CLNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLDarwinNotifier_Type::Notification, NotificationData_T = CLNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLDarwinNotifier_Type::Notification, NotificationData_T = CLNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLDarwinNotifier_Type::Notification, NotificationData_T = CLNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::listClients() [Notification_T = CLDarwinNotifier_Type::Notification, NotificationData_T = CLNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
CLBTLERSSIRangeCalculator-Mutex
VerboseRangeLoggingEnabled
bool CLBTLERSSIRangeCalculator::getRangeMeasurement(const CLMotionActivity &, CFTimeInterval, CLBTLERSSIRangeCalculator_Type::RangeMeasurement &, const std::string &, const uint16_t &, const uint16_t &)_block_invoke
#Warning Overriding VerboseRangeLoggingEnabled,%{private}d
time,%f,
uuid,%s,
major,%hd,
observable,%d,
range,%d,
unc,%f,
filteredRSSI,%d,
activity,%d,
confidence,%d,
activityFactor,%f,
fFilterPk_pre,%f,
tx,%f,
cntImmediate,%d,
cntNear,%d,
cntMid,%d,
cntFar,%d,
pImmediate,%f,
pNear,%f,
pMid,%f,
pFar,%f,
number rssi,%lu,
rssi,
%f,%d,%d,
bool CLBTLERSSIRangeCalculator::getRangeMeasurement(const CLMotionActivity &, CFTimeInterval, CLBTLERSSIRangeCalculator_Type::RangeMeasurement &, const std::string &, const uint16_t &, const uint16_t &)
iB: %{private}s
/var/root/Library/Caches/locationd/logs/newtonStats
CLFallLogger
-[CLFallLogger logFallStats:]
STATUS,SENSOR,Time,%.3lf,Type,FallStats,timestamp,%f,version,%d,seq,%u,aopTsNow,%llu,aopTsSensor,%llu,magMax,%f,xMin,%f,xMax,%f,yMin,%f,yMax,%f,zMin,%f,zMax,%f,xZCTime,%f,yZCTime,%f,zZCTime,%f,jerkVectorMagMax,%f,xJerkScalarMagMax,%f,yJerkScalarMagMax,%f,zJerkScalarMagMax,%f
%@.v%d.%lld.%@
newtonStats
%@/%@
CLBeaconFenceDatabase::CLBeaconFenceDatabase()
iB: No access to DB
BeaconFences
void CLBeaconFenceDatabase::cleanDatabase()
Cleaning DB: invalid proximity zone for fence, %{private}s
bool CLBeaconFenceDatabase::addFence(const CLBTLEBeaconRegion_Type::MonitoredRegion &)
iB: Adding fence,%{private}s
Error, invalid proximity zone for fence,%{private}s
BundleIdentifier
Identifier
ProximityUUID
Major
Minor
DefinitionMask
OnBehalfBundleIdentifier
) VALUES (?, ?, ?, ?, ?, ?, ?, ?)
#Warning Unable to bind SQL for adding fence,%{private}s
bool CLBeaconFenceDatabase::removeFence(const CLBTLEBeaconRegion_Type::MonitoredRegion &)
iB: Removing fence,%{private}s
#Warning Unable to bind SQL for removing fence,%{private}s
bool CLBeaconFenceDatabase::removeAllFencesForBundleIncludingOnBehalf(const std::string &)
iB: Removing all fences for bundle,%{private}s
=? OR 
#Warning Unable to bind SQL for removing all fences for bundle,%{private}s
SELECT DISTINCT 
bool CLBeaconFenceDatabase::getAllFences(CLBTLEBeaconRegion_Type::MonitoredRegions &)
iB: Retrieving all fences
Unable to get fences from the database
An error was encountered when retrieving fences from the database
bool CLBeaconFenceDatabase::getFencesForBundle(const std::string &, CLBTLEBeaconRegion_Type::MonitoredRegions &)
iB: Retrieving fences for bundle,%{private}s
Unable to bind SQL for retrieving fences for bundle,%{private}s
Unable to get fences from database for bundle,%{private}s
An error was encountered when retrieving fences from the database for bundle,%{private}s
bool CLBeaconFenceDatabase::getFencesForBundleIncludingOnBehalf(const std::string &, CLBTLEBeaconRegion_Type::MonitoredRegions &)
bool CLBeaconFenceDatabase::getFencesForBundleAndOnBehalf(const std::string &, const std::string &, CLBTLEBeaconRegion_Type::MonitoredRegions &)
bool CLBeaconFenceDatabase::getFenceForBundleAndOnBehalf(const std::string &, const std::string &, const std::string &, CLBTLEBeaconRegion_Type::MonitoredRegion &)
iB: Retrieving fence,%{private}s/%{private}s
Unable to bind SQL for retrieving fence,[%{private}s]/%{private}s/%{private}s
Unable to get fence,[%{private}s]/%{private}s/%{private}s, from database
int CLBeaconFenceDatabase::fenceCountForBundle(const std::string &)
Unable to get the fence count for bundle,%{private}s
void CLBeaconFenceDatabase::addOnBehalfBundleIdColumnIfNotExists()
iB: addOnBehalfBundleIdColumnIfNotExists
CLBeaconFenceAuthorizationManagerSilo
CLBeaconFenceAuthorizationManager-Notifier
CLBeaconFenceAuthorizationManager::CLBeaconFenceAuthorizationManager(id<CLIntersiloUniverse>)
Unable to initialize authorization manager with airplane mode status
bool CLBeaconFenceAuthorizationManager::addFence(const CLBTLEBeaconRegion_Type::MonitoredRegion &)
Unable to get fences for bundle,%{private}s. Fence,%{private}s, will not be added
com.apple.locationd.bundle-/AppleInternal/Library/LocationBundles/FenceTester.bundle
com.apple.locationd.bundle-/AppleInternal/Library/Frameworks/CoreAutomationDevice.framework
com.apple.locationd.bundle-/System/Library/PrivateFrameworks/BulletinBoard.framework
Bundle,%{public}s, exceeds its fence limit,%{private}d. Fence,%{private}s, will not be added
iB: Added fence,%{private}s, to the database
Unable to add fence,%{private}s, to the database
bool CLBeaconFenceAuthorizationManager::removeFence(const CLBTLEBeaconRegion_Type::MonitoredRegion &)
iB: Removed fence,%{private}s, from the database
#Warning Unable to remove fence,%{private}s, from the database
void CLBeaconFenceAuthorizationManager::onClientManagerNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)
iB: Received uninstall for bundle,%{private}s
iB: Received authorization for bundle,%{private}s
iB: Received location services status,%{public}d
void CLBeaconFenceAuthorizationManager::onDaemonStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)
iB: Received airplane status,%{public}d
Unable to update authorization manager with airplane mode status
com.apple.CooLtool
bool CLBeaconFenceAuthorizationManager::unlockedIsOnBehalfBundleAuthorized(std::string)
Empty bundle identifier should not be passed in here
void CLBeaconFenceAuthorizationManager::unlockedSetFenceIconStateForBundle(const std::string &, bool)
iB: Setting icon state,%{public}d, for bundle,%{public}s
void CLBeaconFenceAuthorizationManager::unlockedRemoveAllFencesForBundle(const std::string &)
Unable to remove all fences from the database for bundle,%{public}s
void CLBeaconFenceAuthorizationManager::unlockedNotifyAllWithResumeFences()
#Warning Unable to retrieve all fences from the database
#Warning No fences will be resumed due to exception,%{public}d
void CLBeaconFenceAuthorizationManager::unlockedNotifyResumeFence(const std::string &, const std::string &, const std::string &)
Unable to get fence,[%{public}s]/%{public}s/%{private}s, from the database
#Warning Bundle(s) not authorized, fence,[%{public}s]/%{public}s/%{private}s, will not be resumed
#Warning Fence,[%{public}s]/%{public}s/%{private}s, will not be resumed due to exception,%{public}d
iB: Resuming fence,[%{public}s]/%{public}s/%{private}s
void CLBeaconFenceAuthorizationManager::unlockedNotifyAllWithSuspendFences()
Unable to get all fences from database
void CLBeaconFenceAuthorizationManager::unlockedNotifyBundleAppropriatelyWithFences(const std::string &)
Unable to get fences from database for bundle,%{public}s
iB: Resuming fences,%{public}lu, for bundle,%{public}s
void CLBeaconFenceAuthorizationManager::unlockedSuspendForException(MonitoringExceptions)
iB: Adding exception,%{public}#x, to stored exceptions %{public}#x
void CLBeaconFenceAuthorizationManager::unlockedResumeForException(MonitoringExceptions)
iB: Removing exception,%{public}#x, from stored exceptions %{public}#x
CLBeaconFenceAuthorizationManager
virtual void CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLBeaconFenceAuthorizationManager_Type::Notification, NotificationData_T = CLBeaconFenceAuthorizationManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
void CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLBeaconFenceAuthorizationManager_Type::Notification, NotificationData_T = CLBeaconFenceAuthorizationManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
virtual void CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::removeClient(int) [Notification_T = CLBeaconFenceAuthorizationManager_Type::Notification, NotificationData_T = CLBeaconFenceAuthorizationManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
virtual bool CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLBeaconFenceAuthorizationManager_Type::Notification, NotificationData_T = CLBeaconFenceAuthorizationManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
virtual bool CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::clientRegistered(int, const Notification_T &) [Notification_T = CLBeaconFenceAuthorizationManager_Type::Notification, NotificationData_T = CLBeaconFenceAuthorizationManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
virtual bool CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::unregisterForNotification(int, const Notification_T &) [Notification_T = CLBeaconFenceAuthorizationManager_Type::Notification, NotificationData_T = CLBeaconFenceAuthorizationManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
virtual void CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::listClients() [Notification_T = CLBeaconFenceAuthorizationManager_Type::Notification, NotificationData_T = CLBeaconFenceAuthorizationManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
ranging_register
virtual bool CLBTLERangeManagerConcrete::registerForNotification(int, const CLBTLERangeManager_Type::Notification &, const CLBTLEBeaconRegion_Type::MonitoredRegions &)
Unable to register with base-class
ranging_unregister
virtual bool CLBTLERangeManagerConcrete::unregisterForNotification(int, const CLBTLERangeManager_Type::Notification &)
#Warning Unable to retrieve registration info for client,%{public}d
void CLBTLERangeManagerConcrete::onBeaconNotification(int, const CLBTLEBeaconProvider_Type::Notification &, const CLBTLEBeaconProvider_Type::NotificationData &)
iB: Received Bluetooth LE power,%{public}d
iB: Notifying region proximityUUID,'%{private}s', major,%{private}d, minor,%{private}d, mask,%{public}d with beacons,%{public}zu
void CLBTLERangeManagerConcrete::onMotionStateNotification(int, const CLMotionState_Type::Notification &, const CLMotionState_Type::NotificationData &)
iB: Received activity update of activity,%{private}d
#Warning Unexpected notification %{public}d
#Warning Unhandled notification %{public}d
void CLBTLERangeManagerConcrete::unlockedStartIfInterested()
iB: Starting the manager if there's an interest in ranging
iB: There's no interest in ranging, the manager wont be started
iB: The manager is already started
void CLBTLERangeManagerConcrete::unlockedStopIfNotInterested()
iB: Stopping the manager if there's no interest in ranging
iB: There's an interest in ranging, the manager wont be stopped
iB:The manager is already stopped
void CLBTLERangeManagerConcrete::unlockedSuspendForException(RangingExceptions)
void CLBTLERangeManagerConcrete::unlockedResumeForException(RangingExceptions)
iB: Removing exception,%{public}#x, from stored exceptions %{public}#x.
lacID
arfcn
Ti,N,V_lacID
hasArfcn
Ti,N,V_arfcn
hasPsc
Ti,N,V_psc
CLBTLERangeManagerSilo
CLBTLERangeManager-Notifier
virtual void CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::removeClient(int) [Notification_T = CLBTLERangeManager_Type::Notification, NotificationData_T = CLBTLERangeManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> >]
virtual bool CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLBTLERangeManager_Type::Notification, NotificationData_T = CLBTLERangeManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> >]
virtual bool CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::clientRegistered(int, const Notification_T &) [Notification_T = CLBTLERangeManager_Type::Notification, NotificationData_T = CLBTLERangeManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> >]
virtual bool CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::unregisterForNotification(int, const Notification_T &) [Notification_T = CLBTLERangeManager_Type::Notification, NotificationData_T = CLBTLERangeManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> >]
virtual void CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLBTLERangeManager_Type::Notification, NotificationData_T = CLBTLERangeManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> >]
void CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLBTLERangeManager_Type::Notification, NotificationData_T = CLBTLERangeManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> >]
virtual void CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::listClients() [Notification_T = CLBTLERangeManager_Type::Notification, NotificationData_T = CLBTLERangeManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> >]
StepCadenceToStrideLengthTable
StepCadence
StrideLength
-[CMPedometerTableStepCadenceToStrideLength logBins]_block_invoke
-[CMPedometerTableStepCadenceToStrideLength updateBinsWithTrack:]
-[CMPedometerTableStepCadenceToStrideLength updateStrideLengthRun]
%s,%sRun,%0.4f
void CLIntegrityMonitor::crossCheck(const CLDaemonLocation &, const CLDaemonLocation &, double &, bool &, double &)
#Warning deltaTime = %0.3f, but most negative allowed is %0.3lf, resetting Integrity Monitor
bool CLIntegrityMonitor::updateIM(CLDaemonLocation &)
locationType,integrityPrior,%d,integrityNew,%d
location type,%d,not supported
not reliable or very low reliable,locationType,%d,lat,%.8lf,lon,%.8lf
Location rejected by IM,Reason,disagrees with GPS,location type,%d
huncBump,fromHunc,%.1lf,toHunc,%.1lf
Location rejected by IM,Reason,disagrees with high confidence wifi,location type,%d
Location rejected by IM,Reason,low confidence wifi strongly disagrees with cell,location type,%d
CLTurnStateSilo
CLTurnState
virtual bool CLTurnState::registerForNotificationInternal(const CLTurnState_Type::Notification &)
Client registered for notification %d
virtual bool CLTurnState::unregisterForNotificationInternal(const CLTurnState_Type::Notification &)
Client unregistered for notification %d
virtual void CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLTurnState_Type::Notification, NotificationData_T = CLTurnState_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLTurnState_Type::Notification, NotificationData_T = CLTurnState_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLTurnState_Type::Notification, NotificationData_T = CLTurnState_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLTurnState_Type::Notification, NotificationData_T = CLTurnState_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLTurnState_Type::Notification, NotificationData_T = CLTurnState_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLTurnState_Type::Notification, NotificationData_T = CLTurnState_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::listClients() [Notification_T = CLTurnState_Type::Notification, NotificationData_T = CLTurnState_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
bool CLWorkoutManager::stopWorkout(CLMotionStateMediator_Type::WorkoutEvent &)
Workout, Error stopping, no active workouts
std::is_sorted(samples.begin(), samples.end())
n <= 65
buffer.capacity() == std::max<size_t>(1, n * (n - 1))
subfitCount <= Fit::kFitSegments - 2
CLSignalEnvironmentProvider_Type::SignalEnvironmentType CLSignalEnvironmentDataManager::GetSignalEnvironment(double, double, std::string, bool &)
CLSE,Reading,%{public}s
#Warning,CLSE,could not open,%{public}s
CLSE,file has expired - redownload
CLSE,file version does not match expected
#Warning,CLSE,avl byte index,%{public}d,is larger than the data available in the availabilty file
#Warning,CLSE,Invalid CLDEM file - unable to get data byte
CLSE,Unexpected case, potential file corruption
CLSE,finished
static bool CLSignalEnvironmentDataManager::readSignalEnvHelper(CLSignalEnvironmentDataManager::SignalEnvironment &)
#Warning,CLSE,fseek returned non-zero
#Warning,CLSE,Invalid CLSE file - header string
#Warning,CLSE,Invalid CLSE file - version
#Warning,CLSE,Invalid CLSE file - headerLength
#Warning,CLSE,Invalid CLSE file - minLat
#Warning,CLSE,Invalid CLSE file - maxLat
#Warning,CLSE,Invalid CLSE file - binsize
#Warning,CLSE,coarse avl file is not %{public}f deg by %{public}f deg,spacing unexpected,%{public}f,re-download needed
#Warning,CLSE,Invalid CLSE file - timestamp
#Warning,CLSE,Invalid CLSE file - expiration age
#Warning,CLSE,Invalid CLSE file - data size
#Warning,CLSE,Invalid CLSE file - crc
CLCell::CLCell(const CLTelephonyService_Type::Cell &, CLTelephonyService_Type::RadioAccessTechnology)
bad RAT for GSM: %{public}s
CLCell::CLCell(const CLTelephonyService_Type::ScdmaCell &, CLTelephonyService_Type::RadioAccessTechnology)
bad RAT for SCDMA: %{public}s
CLCell::CLCell(const CLTelephonyService_Type::CdmaCell &, CLTelephonyService_Type::RadioAccessTechnology)
bad RAT for CDMA: %{public}s
CLCell::CLCell(const CLTelephonyService_Type::LteCell &, CLTelephonyService_Type::RadioAccessTechnology)
bad RAT for LTE: %{public}s
Cell, RAT, 
, valid , 
, cellType , 
, Unknow / Invalid Cell
void CLCell::overrideUarfcnPsc(int, int, int, int)
CELL_LOC: override to, %s
unsigned long long CLCell::getSecKey() const
CELL_LOC: which cell is that, %s
CELL_LOC: sec_key, 0x%016llX
com.apple.CLFitnessTrackingAWD
void CLFitnessTrackingAWD::describe()
AWD: workout:%d, companion:%d, %s, GPS:%u, HR:%u, Onset:%d, HRUtil:%u, VO2Avail:%d, HRSrc:%d, VO2Cons:%u, PALStat:%d, VO2Stat:%d, loadUtil:%u, strideAvail:%u, walkAvail:%d, runAvail:%d, walkStat:%d, runStat:%d, VO2Grade:%d, idsAvail:%d, defaultUtil:%d, WRHR:%d, PedGPSAvailable:%d, DistTrackUsed:%d, DistTrackInvalidGradient:%d, DistTrackInvalidGain:%d, DistTrackInvalidSpeed:%d, DistTrackInvalidLength:%d, SeshDuration:%d, PedCalibrated:%d, PaceFail:%d, PedMetSourceDiff:%f, PedMetSourceDiff:%f, HrBoundsFail:%d, SeshUp:%d, SeshDown:%d, SeshCaloriesFromGrade:%d, SeshGPSSourcePhone:%d, SeshGPSSourceWatch:%d, ElevationError:%lld, HRSamplesValidMin: %d, HRSamplesValidMax: %d, METSamplesWithRecentHR: %d, METSamplesValidDelta: %d, VO2DeltaPercentage: %d, HRMetPairs: %d
Swimmming: Free:%d, Breast:%d, Butter:%d, Back:%d, Other:%d, Swimming:%d
Auto-pause: Enabled:%d, WillResume:%d, WillPause:%d, Fast:%d, Normal:%d, Slow:%d, ResumeFast:%d, ResumeNormal:%d, ResumeFalse:%d
NOT 
void CLFitnessTrackingAWD::submitSessionStats()
%sSubmitted session stats; session length, %f
EnableAutoPause
com.apple.nanolifestyle.sessiontrackerapp
EnableWheelchairAWDCollection
operator[]
/BuildRoot/Applications/Xcode.app/Contents/Developer/Platforms/AppleTVSimulator.platform/Developer/SDKs/AppleTVSimulator11.0.sdk/usr/local/include/boost/range/iterator_range_core.hpp
at >= 0
static_cast<typename base_type::size_type>(at) < size()
CLSedentaryAlarmRecorderDb
SedentaryAlarmHistory
SELECT COUNT(*) FROM SedentaryAlarmHistory
SELECT * FROM SedentaryAlarmHistory ORDER BY startTime ASC
DELETE FROM SedentaryAlarmHistory WHERE startTime < ?
DELETE FROM SedentaryAlarmHistory WHERE startTime > ?
DELETE FROM SedentaryAlarmHistory
INSERT INTO SedentaryAlarmHistory (startTime, firedTime, alarmType, didWake) VALUES (?, ?, ?, ?)
SELECT * FROM SedentaryAlarmHistory ORDER BY startTime DESC LIMIT 1
SELECT * FROM SedentaryAlarmHistory WHERE startTime >= ? and startTime < ? ORDER BY startTime ASC
virtual void CLSedentaryAlarmRecorderDb::deleteRecordsAfterInsertUL(const CLSedentaryAlarmData &)
SedentaryAlarm, Failed to delete records
virtual void CLSedentaryAlarmRecorderDb::shiftRecordsByUL(CFTimeInterval)
#Warning SedentaryAlarm, Time rolled back, deleting records in the future
SedentaryAlarm, Failed to shift records
virtual void CLSedentaryAlarmRecorderDb::insertRecordUL(const CLSedentaryAlarmData &, bool)
SedentaryAlarm, Failed to insert record
virtual void CLSedentaryAlarmRecorderDb::sanitizeAndStoreRecordUL(const CLSedentaryAlarmData &, bool)
SedentaryAlarm, Failed to insert record due to failure from reading the most recent entry.
CLActivityRecorderDb<CLSedentaryAlarmData, CLActivityDB::NoDataProtectionPolicy>::CLActivityRecorderDb(const char *, bool, float, const std::string, const CLSqliteDatabase::SqlitePropertyPersistence) [T = CLSedentaryAlarmData, DataProtectionPolicy = CLActivityDB::NoDataProtectionPolicy]
bool CLActivityRecorderDb<CLSedentaryAlarmData, CLActivityDB::NoDataProtectionPolicy>::setDatabaseAccessible() [T = CLSedentaryAlarmData, DataProtectionPolicy = CLActivityDB::NoDataProtectionPolicy]
virtual void CLActivityRecorderDb<CLSedentaryAlarmData, CLActivityDB::NoDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, bool) [T = CLSedentaryAlarmData, DataProtectionPolicy = CLActivityDB::NoDataProtectionPolicy]
CLSilo: %@
T@"NSString",R,N,V_identifier
-[CLDispatchTimerScheduler reflectNextFireTime:fireInterval:]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Shared/Intersilo/CLDispatchSilo.m
_source
timer
T@"CLTimer",W,N
T@"NSObject<OS_dispatch_source>",&,N,V_source
T@"CLTimer",W,N,Vtimer
MainSilo
%@.NSOperationQueue
CLDispatchSilo: %s
32 > _numArguments
syncget
0 != _returnValueSize
0 == _returnValueSize
withReply:
0 == _returnAddressIndex
T:,R,N,V_sel
numArguments
Ti,R,N,V_numArguments
replyBlockIndex
Ti,R,N,V_replyBlockIndex
returnAddressIndex
Ti,R,N,V_returnAddressIndex
returnValueSize
Ti,R,N,V_returnValueSize
T@"NSMethodSignature",R,&,N,V_sig
T@"NSString",R,&,N,V_str
Protocol: %p
Name: %s
Selectors: (
protocol
T@"Protocol",R,N,V_protocol
virtual void CLSensorFusionService3AxisDynamicGyro::start()
%s is enabling power conservative device motion for parallax.
virtual void CLSensorFusionService3AxisDynamicGyro::stop()
%s is disabling power conservation for parallax.
void CLSensorFusionService3AxisDynamicGyro::onAccelerometerData(const CLAccelerometer::Sample *)_block_invoke_3
Device is stationary and Timeout exceeded, turning off device motion gyro heartbeat and bias estimator.
void CLSensorFusionService3AxisDynamicGyro::onBiasAndVariance(const CLMotionTypeGyroBiasAndVariance)_block_invoke
postInit == initiatorProxy
postInit == recipientProxy
[_last sel] == [inv selector]
![inv argumentsRetained]
_delegate
_delegateSilo
CLService: Block was not compiled using a compiler that inserts type information about arguments. (%@)
v16@?0@"NSInvocation"8
(id)[NSNull null] != _delegate
_delegate == (id)[NSNull null] && !_delegateSilo
<%@: peer silo:%@, peer tag:%lu>
_opaqueTag == 0
T@"<CLIntersiloProxyDelegateProtocol>",R,W,N,V_delegate
delegateSilo
T@"CLSilo",R,W,N,V_delegateSilo
delegateInterface
T@"CLIntersiloInterface",R,C,N,V_delegateInterface
proxiedInterface
T@"CLIntersiloInterface",R,C,N,V_proxiedInterface
((void *)0)
((void *)0) == _inboundInterface
((void *)0) == _outboundInterface
_inboundInterface
_outboundInterface
!_silo
!_vendor
Silo: %@
Inbound: %@
Outbound: %@
T@"<CLIntersiloUniverse>",R,N
inboundInterface
T@"CLIntersiloInterface",R,N,V_inboundInterface
outboundInterface
T@"CLIntersiloInterface",R,N,V_outboundInterface
self.keyedPayloads
![self.keyedPayloads objectForKey:key]
keyedPayloads
T@"NSMutableDictionary",&,N,V_keyedPayloads
virtual void CLNatalieInputBuffer<CLCatherineData>::add(const CLCatherineData &) [Data_T = CLCatherineData]
Input, HR = %.8f, timestamp = %.8lf, starttime = %.8lf, source = %d, interpolation = %d, srcName = %s
virtual void CLNatalieInputBuffer<CLOdometerEntry>::add(const CLOdometerEntry &) [Data_T = CLOdometerEntry]
Input, Odometer, time stamp, %.8lf, distance, %.8f, GPS altitude, %.8lf, estimated speed(m/s), %.8lf, odometer, %.8lf, accuracy, %.8lf, speed accuracy, %.8lf, timestampGps, %.8lf, rawSpeed, %.8f, srcName, %s
virtual void CLNatalieInput<CLElevationChangeEntry>::add(const CLElevationChangeEntry &)
Input, Elevation, time stamp, %.2lf, elevationAscended, %d, elevationDescended, %d, srcName, %s, source, %d
Input, Elevation, beyond time window, buffer size, %lu, deltaTime, %f
Input, Elevation, Online grade estimation regime change, time start, %.2lf, elevationAscended, %d, elevationDescended, %d,input_altitude, %.4f, Prediction Error, %.4f
Input, Elevation, Online grade estimation, gradeType, %d, time start, %.2lf, altitude delta, %.2f, vspeed, %.2f, param_m, %f, param_b, %f,xbufferFront, %f,xbufferBack, %f, elevationAscended, %d, elevationDescended, %d, input_altitude, %.4f
Input, Elevation, Hardware gradeTypeFilter, rawGradeType, %d, gradeType, %d, vspeed, %.4f
virtual bool CLNatalieInput<CLElevationChangeEntry>::isReady(CFAbsoluteTime)
Input, Elevation, ready at time, %.2f, no data point
Input, Elevation, not ready at time, %.2f 
Input, Elevation, ready at time, %.2f, nearest data point at time, %.2f
void _CLFitnessMachineData::log() const
Fitness Machine datum,startTime,%.3f,elapsedTime,%.3f,calories,%f,distance,%f,elevationAscended,%f,strideCount,%ld,strokeCount,%ld,floors,%ld,speed,%f,cadence,%f,power,%f,incline,%f,resistance,%f,verticalSpeed,%f
passTypeId
associatedStoreIds
passSource
T{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii},V_location
T@"NSString",&,V_passTypeId
T@"NSString",&,V_associatedStoreIds
Ti,V_passSource
Td,V_age
CLWifiAccessPointLocationService
WIFI_LOCATION
void CLWifiAccessPointLocationService::processDefaultsWrites()
Defaults applied.
virtual std::map<CLMacAddress, CLWifiAPLocation> CLWifiAccessPointLocationService::findLocationsOfMacAddresses(const std::vector<CLMacAddress> &, const CLDaemonLocation &, cl::chrono::CFAbsoluteTimeClock::time_point) const
Tile not available to search, but wasn't previously identified as missing
tile_x
tile_y
Mac address location found in tile.
apLocation
Mac addresses found in neighbor list, will not search remaining tiles
Remaining tile not available to search, but wasn't previously identified as missing
Mac address location found in remaining tile.
Finished searching tiles of mac addresses
numberOftilesWithMacsFoundInside
tilesWithMacsFoundInside
Mac address found in both ALS and Tiles. Will use ALS location
tileLocation
alsLocation
@TileSearch, wifi, results, searched, %{public}ld, neighbor, %{public}d, remaining, %{public}d, ALS, %{public}d
virtual std::map<CLMacAddress, CLWifiAPLocation> CLWifiAccessPointLocationService::findLocationsOfMacAddressesFromAls(const std::vector<CLMacAddress> &) const
Mac address found in ALS database.
uint32_t CLWifiAccessPointLocationService::saveAlsAccessPoints(const std::vector<CLAlsWifiAccessPoint> &, cl::chrono::CFAbsoluteTimeClock::time_point)
@WifiAps, dbadd, %{public}lu, was, %{public}u, now, %{public}u
no sqilte connection
sqlite error.
upgrade-wifi-tiles-schema
CL::optional<CLWifiTileHeaderEntry> CLWifiAccessPointLocationService::saveWifiTileAccessPointEntries(const std::string &, cl::chrono::CFAbsoluteTimeClock::time_point)
no connection to database.
error memory mapping file.
Failed to delete tile.
bool CLWifiAccessPointLocationService::deleteByTileId(const TileId &)
runtime error.
no connection error.
sqlite error; failed to delete tile.
sqliteError
tileId.tileType == CLTilesManager_Type::TileType::WIFI_Location
bool CLWifiAccessPointLocationService::updateAccessTimestampIfNecessary(const TileId &, cl::chrono::CFAbsoluteTimeClock::time_point, cl::chrono::seconds) const
Attempted to update timestamp for tile that does not exist.
Will not update timestamp; too early.
durationNecessaryInSeconds
actualDurationInSeconds
int CLWifiAccessPointLocationService::numberOfInputApsUsedInWifiTileForCoordinate(const CLClientLocationCoordinate &) const
Tile for coordintes does not exist.
coordinates
std::unique_ptr<std::vector<uint8_t> > CLWifiAccessPointLocationService::getTileForTileId(const TileId &)
Cannot serialize unavailable tile
bool CLWifiAccessPointLocationService::_deleteByTileIdNoTransaction(const TileId &)
Deleting tile by id results.
headerDeleted
tileDeleted
void CLWifiAccessPointLocationService::establishWifiTileDatabaseConnectionsIfNecessary()
failed to establish a valid database connection, expect wifi positioning accuracy to be significantly degraded
fWifiTileHeaderRepository->isConnected()
fWifiTileRepository->isConnected()
void CLWifiAccessPointLocationService::dropTilesIfWifiTilesHeaderSchemaChanged()
Error upgrading wifi #tile database schemas
std::tuple<int, int, int> CLWifiAccessPointLocationService::errorOnRemainingAndDelete()
Remaining tile header still in database. Will now delete.
header
Failed to delete tile header
Remaining tile still in database. Will now delete.
tableName
Failed to delete tile table: 
Remaining entries still in ALS database. Will now delete.
std::vector<CLWifiTileHeaderEntry> CLWifiAccessPointLocationService::deleteTilesExceedingLimits(cl::chrono::CFAbsoluteTimeClock::time_point)
Deleting aged wifi tiles based on age of access timestamp
Deleting  aged wifi tiles based on age of download timestamp
Decision to delete wifi tiles because we're over the limit
tileCount
removeCount
CLWifiTileHeaderEntry CLWifiAccessPointLocationService::_saveWifiTileAccessPointEntries(const std::string &, cl::chrono::CFAbsoluteTimeClock::time_point)
Parse complete
parseIsSuccessful
NewTile
void CLWifiTileQueryLogic::resetScanMisses(const char *)
@TileSearch, wifi, missreset, %{public}s
void CLWifiTileQueryLogic::incrementScanMisses()
@TileSearch, wifi, misscount, %{public}d
Rollover
std::tuple<std::vector<TileId>, std::vector<TileId>, std::vector<TileId> > CLWifiTileQueryLogic::getTilesToSearch(const std::vector<CLWifiTileHeaderEntry>, const CLDaemonLocation &, cl::chrono::CFAbsoluteTimeClock::time_point)
Invalid location provided and complete miss, will not return any tiles to search.
No valid location provided, finished deciding which are neighbor tiles and what's left over.
remainingTilesToSearch
@TileSearch, wifi, nrx, %{public}ld, %{public}ld, %{public}ld, loc, 0, completemiss, %{public}d
Using location to determine tiles to search.
Finished deciding which are neighbor tiles and what's left over.
neighborTilesToSearch
tilesNotAvailable
tileSetIsCompleteMiss
@TileSearch, wifi, nrx, %{public}ld, %{public}ld, %{public}ld, loc, 1, completemiss, %{public}d
void CLWifiAccessPointLocationService::deleteEmptyOrNullMacAddressFromALSDatabase()
Deleting empty or null mac addresses in database if found.
entries
!tileHeaderAndAPInserter
auto CLWifiAccessPointLocationService::_saveWifiTileAccessPointEntries(const std::string &, cl::chrono::CFAbsoluteTimeClock::time_point)::(anonymous class)::operator()(const CLTilesManager_Type::TileHeader &, int) const
Failed to delete previous tile before inserting new one.
Failed to save tile header.
Tile doesn't exist, creating new table.
Failed to create new wifi tile table
Tile exists, will not create new table.
Couldn't create batch inserter
void ConvertCLAccelerometerSampleToProtobuf(const CLAccelerometer::Sample &, CLPrivateData::AccelSample *)
pSample,Invalid pointer
void ConvertCLBodyMetricsToProtobuf(const CLBodyMetrics &, CLPrivateData::BodyMetrics *)
pBodyMetrics,Invalid pointer
void ConvertCLDaemonLocationToProtobuf(const CLDaemonLocation &, CLPrivateData::DaemonLocation *)
pLocation,Invalid pointer
void ConvertCLDaemonLocationPrivateToProtobuf(const CLDaemonLocationPrivate &, CLPrivateData::DaemonLocationPrivate *)
pLocationPrivate,Invalid pointer
void ConvertCLDaemonStatusToProtobuf(const CLDaemonStatus_Type::NotificationData &, CLPrivateData::DeviceStatus *)
pDeviceStatus,Invalid pointer
void ConvertCLDirectionOfTravelAssistanceToProtobuf(const CLGpsAssistant_Type::DirectionOfTravelAssistance &, CLPrivateData::DirectionOfTravel *)
pDotData,Invalid pointer
void ConvertCLGnssMeasurementToProtobuf(const GNSS::MeasurementData &, CLPrivateData::MeasurementReportCallbackContents *)
pMeas,Invalid pointer
void ConvertCLGyroSampleToProtobuf(const CLGyro::Sample &, CLPrivateData::GyroSample *)
void ConvertCLLocationProviderToProtobuf(const CLLocationProvider_Type::NotificationData &, CLPrivateData::Location *)
void ConvertCLMagnetometerSampleToProtobuf(const CLMagnetometer::Sample &, CLPrivateData::MagSample *)
void ConvertCLMotionActivityToProtobuf(const CLMotionActivity &, CLPrivateData::MotionActivity *)
pActivity,Invalid pointer
void ConvertCLPressureSampleToProtobuf(const CLPressure::Sample &, CLPrivateData::BaroSample *)
void ConvertCLWorkoutUpdateToProtobuf(const CLWorkoutUpdate &, CLPrivateData::WorkoutUpdate *)
pWorkoutUpdate,Invalid pointer
void ConvertMachAbsoluteTimeToProtobuf(const CFTimeInterval &, CLPrivateData::TimeStamp *)
pTimeStamp,Invalid pointer
mach absolute to mach continuous time conversion failed
mach absolute to cf absolute time conversion failed
set_gender
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Daemon/Positioning/Raven/CLPrivateDataCapture.pb.h
::CLPrivateData::BodyMetrics_NatalimeterGenderType_IsValid(value)
set_condition
::CLPrivateData::BodyMetrics_UserConditionType_IsValid(value)
set_suitability
::CLPrivateData::DaemonLocation_ClientLocationSuitabilityType_IsValid(value)
::CLPrivateData::DaemonLocation_LocationType_IsValid(value)
set_integrity
::CLPrivateData::DaemonLocation_LocationIntegrityType_IsValid(value)
set_reference_frame
::CLPrivateData::DaemonLocation_ClientLocationReferenceFrameType_IsValid(value)
set_raw_reference_frame
set_match_quality
::CLPrivateData::DaemonLocationPrivate_MatchQualityType_IsValid(value)
set_undulation_model
::CLPrivateData::DaemonLocationPrivate_UndulationModelType_IsValid(value)
set_origin_device
::CLPrivateData::DaemonLocationPrivate_ClientLocationOriginDeviceType_IsValid(value)
set_band
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Daemon/Positioning/Raven/CLGnssMeasApi.pb.h
::CLPrivateData::Band_IsValid(value)
set_slot_source
::CLPrivateData::GlonassSlotSource_IsValid(value)
set_full_sv_time_source
::CLPrivateData::FullSvTimeSource_IsValid(value)
set_sv_time_detection_method
::CLPrivateData::MeasurementDetectionMethod_IsValid(value)
set_frequency_detection_method
set_location_type
::CLPrivateData::TechnologyStatus_LocationType_IsValid(value)
set_signal_quality
::CLPrivateData::Location_SignalQualityType_IsValid(value)
set_motion_detected
::CLPrivateData::Location_MotionDetectedType_IsValid(value)
::CLPrivateData::DominantMotionModeType_IsValid(value)
set_confidence
::CLPrivateData::MotionActivity_ConfidenceType_IsValid(value)
set_mounted_state
::CLPrivateData::MotionActivity_MountedStateType_IsValid(value)
set_mounted_confidence
set_exit_state
::CLPrivateData::MotionActivity_VehicleExitStateType_IsValid(value)
set_raw_type
set_raw_confidence
set_coarse_signal_environment
::CLPrivateData::SignalEnvironment_SignalEnvironmentType_IsValid(value)
set_activity_type
CLNatalimetryRecorderDb
virtual long CLNatalimetryRecorderDb::aggregateRecords(const CLAggregationRules &)
DB, Error expiring records.
CMError CLNatalimetryRecorderDb::queryNatalieDataSince(CLNatalieData &, std::vector<CLNatalieData> &) const
DB, CalorimetryHistory not accessible
DB, UUID un-initialized
DB, Potential DB reset, returning all records to clients
DB, CalorimetryHistory has rolled back, returning mru to clients,mru.recordId,%d,record.recordId,%d,mru.natalies,%lld,record.natalies,%lld
Calorie history has rolled back!!
NatalieHistory
SELECT COUNT(*) FROM NatalieHistory
SELECT * FROM NatalieHistory ORDER BY startTime ASC
SELECT * FROM NatalieHistory WHERE id >= ? ORDER BY id ASC LIMIT ?
DELETE FROM NatalieHistory WHERE startTime < ?
DELETE FROM NatalieHistory WHERE startTime > ?
DELETE FROM NatalieHistory
INSERT INTO NatalieHistory (startTime, activityType, isStanding, mets, natalies, basalNatalies, overrideSet, truthMets) VALUES (?, ?, ?, ?, ?, ?, ?, ?)
UPDATE NatalieHistory SET startTime = startTime + ?
SELECT * FROM NatalieHistory ORDER BY startTime DESC LIMIT 1
SELECT * FROM NatalieHistory WHERE startTime >= ? and startTime < ? ORDER BY startTime ASC
virtual void CLNatalimetryRecorderDb::prepareSQLStatements()
DB, Device is locked and we are unable to open the database
void CLNatalimetryRecorderDb::alterTableIfNecessary()
DB, doesn't exist yet.
ALTER TABLE NatalieHistory
UPDATE NatalieHistory SET 
virtual void CLNatalimetryRecorderDb::deleteRecordsAfterInsertUL(const CLNatalieData &)
DB, Failed to delete records
virtual void CLNatalimetryRecorderDb::shiftRecordsByUL(CFTimeInterval)
DB, Failed to shift records
void CLNatalimetryRecorderDb::insertNataliesForGap(const CFAbsoluteTime, const CFAbsoluteTime)
DB, Inserting basal calories %f for gap (%lf - %lf, %lfs)
overrideSet
CLActivityRecorderDb<CLNatalieData, CLActivityDB::NoDataProtectionPolicy>::CLActivityRecorderDb(const char *, bool, float, const std::string, const CLSqliteDatabase::SqlitePropertyPersistence) [T = CLNatalieData, DataProtectionPolicy = CLActivityDB::NoDataProtectionPolicy]
bool CLActivityRecorderDb<CLNatalieData, CLActivityDB::NoDataProtectionPolicy>::setDatabaseAccessible() [T = CLNatalieData, DataProtectionPolicy = CLActivityDB::NoDataProtectionPolicy]
bool CLActivityRecorderDb<CLNatalieData, CLActivityDB::NoDataProtectionPolicy>::migrateDbConstraints(const char *, const CLSqliteDatabase::ColumnInfo *, const char **) [T = CLNatalieData, DataProtectionPolicy = CLActivityDB::NoDataProtectionPolicy]
virtual void CLActivityRecorderDb<CLNatalieData, CLActivityDB::NoDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, bool) [T = CLNatalieData, DataProtectionPolicy = CLActivityDB::NoDataProtectionPolicy]
CLWifiTilesManagerExternal::CLWifiTilesManagerExternal(CLWifiTilesManager *, id<CLIntersiloUniverse>)
void CLWifiTilesManagerExternal::onCleanupAgedTiles(CFRunLoopTimerRef)
T@"CLSilo",R,N,V_silo
svcClass
T#,R,N,V_svcClass
residentCount
Ti,N,V_residentCount
synCount
Ti,R,N,V_synCount
ackCount
Ti,R,N,V_ackCount
0 == [fellows count]
__objc_no
0 <= dewrappedDeficit
record.svcClass
v32@?0@"CLSilo"8@"CLServiceVendorHeartbeatRecord"16^B24
HeartAttack
Locationd
LocationdAdapter
Adapter
_CLUnSupportedService
CLServiceVendorQueue
CLServiceVendor.HeartbeatCheckInterval
HeartAttackStackshot
remapping
newEffectiveSvcName
oldEffectiveSvcName
[oldEffectiveSvcName isEqual:newEffectiveSvcName]
Test
Mock
Ti,N,V_workoutEvent
hasWorkoutType
Ti,N,V_workoutType
hasSessionId
T@"NSData",&,N,V_sessionId
kDidStart
kDidStop
kWillPause
kWillResume
kSuggestedStart
kSuggestedStop
data
T^v,N,V_data
destructor
T@?,C,N,V_destructor
_client
CLNotifierClientBase: %p
virtual bool CLTileSyncManagerExternal::isPairingActive() const
@GtsMgr, nrIsPairingActive, %{public}d
virtual bool CLTileSyncManagerExternal::isPreDaytonaPair() const
@GtsMgr, nrIsPreDaytona, %{public}d, (always false, unsupported platform)
virtual CFTimeInterval CLTileSyncManagerExternal::getWatchInactiveTime() const
@GtsSync, inactive nil
NRDevicePropertyLastInactiveDate
nullptr == _notifier
[self valid]
_notifier
ClientIntegerMap: (
%p = %d
notifier
T^{CLNotifierBase=^^?},R,N,V_notifier
SemiStatVMThreshold
virtual CLMetsInfo CLNatalieSemiStatModel::computeMETS(const CLNatalieModelInput &)
Semistationary, Standing, %d, metsFromIntensity, %.1f, metsFromSteps, %.1f, metsFromPosture, %.1f, metsFinal, %.1f, metsFromPushes, %.1f, computeTime, %f
virtual CLMetsInfo CLNataliePedestrianModelInterface::computeMETS(const CLNatalieModelInput &)
Pedestrian, wrMets, %f,  fmMets, %f, hrMets, %f, hrwrDiff, %f, hrConfidence, %f, useHrMets, %d, output, %f
void kf_work(kiss_fft_cpx *, const CMQueue<scalar_32> &, int, const size_t, int, int *, const kiss_fft_cfg)
Error in FFT,p,%d
class
<%@: %p>
v32@?0@"NSObject"8@"NSObject"16^B24
code
domain
userInfo
nullptr key not allowed
CLWorkloadCalibratorRecorderDb
void CLWorkloadCalibratorRecorderDb::deleteRecordsBefore(CFTimeInterval)
WorkloadCalibratorHistory
SELECT COUNT(*) FROM WorkloadCalibratorHistory WHERE activityType == ?
SELECT * FROM WorkloadCalibratorHistory ORDER BY startTime ASC
SELECT * FROM WorkloadCalibratorHistory WHERE activityType == ? AND standardDeviation <= ? ORDER BY startTime ASC
DELETE FROM WorkloadCalibratorHistory WHERE startTime < ?
DELETE FROM WorkloadCalibratorHistory WHERE startTime > ?
DELETE FROM WorkloadCalibratorHistory
INSERT INTO WorkloadCalibratorHistory (activityType, valueAverage, standardDeviation, startTime) VALUES (?, ?, ?, ?)
SELECT * FROM WorkloadCalibratorHistory ORDER BY startTime DESC LIMIT 1
UPDATE WorkloadCalibratorHistory SET startTime = startTime + ?
DELETE FROM WorkloadCalibratorHistory WHERE id not in (SELECT id FROM WorkloadCalibratorHistory ORDER BY id DESC LIMIT ?) AND activityType = ?
UPDATE WorkloadCalibratorHistory SET valueAverage= ?, standardDeviation= ? WHERE startTime = ? AND activityType = ?
virtual void CLWorkloadCalibratorRecorderDb::prepareSQLStatements()
Device is locked and we are unable to open the database.
virtual void CLWorkloadCalibratorRecorderDb::deleteRecordsAfterInsertUL(const CLWorkloadCalibratorEntry &)
Failed to delete records.
virtual void CLWorkloadCalibratorRecorderDb::shiftRecordsByUL(CFTimeInterval)
virtual void CLWorkloadCalibratorRecorderDb::insertRecordUL(const CLWorkloadCalibratorEntry &, bool)
WorkloadCalibratorDb (%d,%f,%f,%f).
valueAverage
standardDeviation
CLActivityRecorderDb<CLWorkloadCalibratorEntry, CLActivityDB::NoDataProtectionPolicy>::CLActivityRecorderDb(const char *, bool, float, const std::string, const CLSqliteDatabase::SqlitePropertyPersistence) [T = CLWorkloadCalibratorEntry, DataProtectionPolicy = CLActivityDB::NoDataProtectionPolicy]
bool CLActivityRecorderDb<CLWorkloadCalibratorEntry, CLActivityDB::NoDataProtectionPolicy>::setDatabaseAccessible() [T = CLWorkloadCalibratorEntry, DataProtectionPolicy = CLActivityDB::NoDataProtectionPolicy]
bool CLActivityRecorderDb<CLWorkloadCalibratorEntry, CLActivityDB::NoDataProtectionPolicy>::isValidTime(CFAbsoluteTime &) const [T = CLWorkloadCalibratorEntry, DataProtectionPolicy = CLActivityDB::NoDataProtectionPolicy]
virtual void CLActivityRecorderDb<CLWorkloadCalibratorEntry, CLActivityDB::NoDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, bool) [T = CLWorkloadCalibratorEntry, DataProtectionPolicy = CLActivityDB::NoDataProtectionPolicy]
kCalorieUserInfoCodingKeyAge
kCalorieUserInfoCodingKeyGender
kCalorieUserInfoCodingKeyHeight
kCalorieUserInfoCodingKeyWeight
kCalorieUserInfoCodingKeyCondition
Male
Female
%@, <age %f, gender %@, height %f, weight %f, condition %ld>
height
weight
condition
polygon
-[CLHarvestAppRealtimeHarvestRegion writeTo:]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Daemon/Shared/Harvester/AppRealtime/proto/CLHarvestAppRealtimeHarvestRegion.m
self->_polygon != nil
Ti,N,V_index
T@"CLHarvestAppRealtimePolygon",&,N,V_polygon
hasName
T@"NSString",&,N,V_name
auth
mask
CLClientAuthorizationCacheSilo
auth && services
-[CLClientAuthorizationCache syncgetAuthorizationOfClient:forServiceMask:]
syncgetAuthorizationOfClient, %s, forServiceMask, %lx, authorized, %d
-[CLClientAuthorizationCache setAllClients:]
setAllClients, %s
-[CLClientAuthorizationCache setClient:authorization:forMask:]
setClient, %s, authorization, %d, forMask, %lX
Attempted to setClient before the cache has been fully populated.
T@"NSMutableDictionary",&,N,V_clients
cachePopulationReplyBlocks
T@"NSMutableArray",&,N,V_cachePopulationReplyBlocks
populated
TB,N,V_populated
fitnessTrackingEnabled
powerSource
TB,N,V_fitnessTrackingEnabled
hasPowerSource
Ti,N,V_powerSource
kChargerTypeUnknown
kChargerTypeNone
kChargerTypeUsb
kChargerTypeExternal
bool CMAccelerometerProcessor::computeFrequencyFeatures()
Assertion failed: !(ignoreHamming && node->requiresHammingWindow(samples[r]->sampleFreq)), file /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Oscar/CMAccelerometerProcessor.cpp, line 197,Hamming required but ignored..
void CLFenceMonitorWifiLogic::calculateAPsForFences(CLWifiAccessPointLocationService &, const std::map<CLFenceManager_Type::Fence, bool> &, const CLWifiService_Type::AssociationState &, const CLDaemonLocation &, std::vector<CLWifiService_Type::AccessPoint> &, std::vector<CLWifiService_Type::AccessPoint> &, const std::vector<CLWifiService_Type::AccessPoint> &, double, bool &, std::function<void (const CLFenceManager_Type::Fence &)>)
Fence: combined fences, %lu, fences to, %lu, fences
Fence: combined, isExit, %d, %s
Fence: Failed to calculate fence %s
Fence: combined fence, %s
Fence: Calculator for %s/%s returned %ld desired APs for %s
Fence: Using associated AP %s, channel %d for exit
Fence: Not associated, or not monitoring for exit, %d, %d
Fence: calculateGroup, currentLocation, %s
Fence: isContinuousMonitoringNeeded = %d
#Warning Fence: Continuous monitoring is needed in order to supported the monitored fences
Fence: WifiFenceCalculator: Adding exit AP, mac, %s, hAcc, %.2lf, channel, %d, location, %12.8lf, %12.8lf, isLocallyAdministered, %d
#Warning Fence: WifiFenceCalculator: ignoring locally administered AP, %s
Fence: WifiFenceCalculator: Skipped non-2GHz AP, channel, %d, mac, %s
Fence: WifiFenceCalculator: Adding entry AP, mac, %s, hAcc, %.2lf, channel, %d, location, %12.8lf, %12.8lf
Fence: Fence calculator returned more APs (%{public}zu) than maximum (%{public}lf)
#Warning Fence: no visible APs, can't use PNO for exit criteria, exitAPs, %lu
Fence: request a download for, %s, fChosenAPs, %lu
Fence: calculateAPsForFences end
bool CLTimeOffsetFilter::update(const double &, const double &, double &, double &)
Estimated,time offset measurement variance(s^2),%.12g
#Warning Unacceptable,time offset measurement variance(s^2),%.12g
Unexpected,state plus measurement covariance < 0.
internalTimeSecs,%.6lf,externalTimeSecs,%.6lf,filteredOffsetSecs,%.6lf,offsetUncertaintySecs,%.9g,R,%.9g,Q,%.9g,v,%.9g,vtest2,%.9g
kCMAltitudeCodingKeyAltitude
kCMAltitudeCodingKeyPressure
Altitude %f Pressure %f @ %f
relativeAltitude
pressure
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Framework/CoreMotion/CMAltitude.mm
sourceId && startDate && endDate && elevationAscended && elevationDescended
kCMSignificantElevationCodingKeyRecordId
kCMSignificantElevationCodingKeySourceId
kCMSignificantElevationCodingKeyStartDate
kCMSignificantElevationCodingKeyEndDate
kCMSignificantElevationCodingKeyElevationAscended
kCMSignificantElevationCodingKeyElevationDescended
%@, <startDate, %@, endDate, %@, elevationAscended, %@ elevationDescended, %@>
TQ,R,N,VfRecordId
T@"NSUUID",R,N,VfSourceId
T@"NSDate",R,N,VfStartDate
T@"NSDate",R,N,VfEndDate
T@"NSNumber",R,N,VfElevationAscended
T@"NSNumber",R,N,VfElevationDescended
identifier
dataIdentifier
offset
dataSize
dataType
movement
%@,<identifier, %llu, startTime, %f, timestamp, %llu, dataIdentifier, %llu, offset, %u, dataSize, %u, dataType, %d, movement, %d>
TQ,V_identifier
Td,V_startTime
TQ,V_timestamp
TQ,V_dataIdentifier
TI,V_offset
TI,V_dataSize
Ti,V_dataType
TB,V_movement
Td,V_endTime
metaIdentifier
TQ,V_metaIdentifier
Td,V_duration
rate
TI,V_rate
LOCATION_PROVIDER
const char *CLLocationProvider_Type::toString(CLLocationProvider_Type::Notification)
Invalid CLLocationProvider notification.
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Daemon/Shared/LocationProvider/CLLocationProvider_Type.mm
LocationFine
LocationCoarse
LocationSpectator
LocationBystander
LocationLeech
LocationInfo
TechnologyStatus
Navigation
LocationUnavailable
LocationUnfiltered
ControlPlaneRequest
Simulation
ServiceAuthorization
LocationBatched
MapMatching
SignalQuality
UserPlaneRequest
VehicleSpeed
VehicleHeading
WifiLocationBatched
OdometerBuffered
XtraFileAvailable
accuracy
gpsAltitude
rawSpeed
gpsSpeedAccuracy
timestampGps
quality
hasDistance
hasAccuracy
Tf,N,V_accuracy
hasGpsAltitude
Tf,N,V_gpsAltitude
hasSpeed
hasRawSpeed
Tf,N,V_rawSpeed
Tf,N,V_odometer
hasGpsSpeedAccuracy
Tf,N,V_gpsSpeedAccuracy
hasTimestampGps
Td,N,V_timestampGps
hasQuality
Ti,N,V_quality
kUnknown
kGood
kMed
kPoor
ReadyToFire
Pending0
Pending1
Pending2
Pending3
Pending4
Pending5
Pending6
Pending7
Pending8
Pending9
Expired
StateMax
CLSmootherMonitorSilo
-[CLSmootherMonitor beginService]
beginService
com.apple.locationd.smoother
-[CLSmootherMonitor endService]
endService
-[CLSmootherMonitor listener:shouldAcceptNewConnection:]
shouldAcceptNewConnection
process is not entitled to use CLLocationSmoother, pid, %{public}d, executable, %{public}s
-[CLSmootherMonitor listener:shouldAcceptNewConnection:]_block_invoke
Connection Interrupted
Connection Invalidated
-[CLSmootherMonitor smoothLocations:useType:]
smoothLocations
-[CLSmootherMonitor smoothLocations:useType:]_block_invoke
#Warning Locations not delivered %p
#Warning Invalid Smoother Type using CLSmootherTypeNone
visitMonitorWakeTimerEnabled
TB,N,V_visitMonitorWakeTimerEnabled
wifiPowerEnabled
TB,N,V_wifiPowerEnabled
lastUpdateVisitMonitorWakeTimerDate
T@"NSDate",&,N,V_lastUpdateVisitMonitorWakeTimerDate
T@"CLDispatchSilo",R,D,N
CLCoarseCellTile-Mutex
virtual bool CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, CLTilesManager_Type::KeyLatLonEntry_CoarseCell>::TEST_testBinarySearch(const char *) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CoarseCell]
virtual void CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, CLTilesManager_Type::KeyLatLonEntry_CoarseCell>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const CLTileFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CoarseCell]
bool CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, CLTilesManager_Type::KeyLatLonEntry_CoarseCell>::binarySearchIndex(std::vector<IndexEntry_T> &, unsigned int &, unsigned int &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CoarseCell]
bool CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, CLTilesManager_Type::KeyLatLonEntry_CoarseCell>::binarySearchData(const DataEntry_T *, unsigned int, unsigned int, const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CoarseCell]
virtual bool CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, CLTilesManager_Type::KeyLatLonEntry_CoarseCell>::getLocationByKey_mmap(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CoarseCell]
virtual bool CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, CLTilesManager_Type::KeyLatLonEntry_CoarseCell>::getLocationByKey_traverse(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CoarseCell]
SampleType CMSymmetricFirFilter<float>::batchFilter(const CMQueue<SampleType> &, int) const [T = float, SampleType = float]
Assertion failed: (offset >= 0) && (offset + fFullTapCount - 1 < samples.size()), file /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Oscar/CMSymmetricFirFilter.h, line 37,offset,%d,fullTapCount,%d,samplesSize,%zu.
void CMQueue<float>::deepCopy(const CMQueue<T> &) [T = float]
Assertion failed: rhs.capacity() == capacity(), file /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Oscar/CMQueue.h, line 85,capacity,%zu,%zu.
CLAppRecommendationTile-Mutex
virtual bool CLSpatialDataTileTemplate<CLTilesManager_Type::AppRecommendationIndexEntry, CLTilesManager_Type::AppRecommendationEntry>::TEST_testBinarySearch(const char *) [IndexEntry_T = CLTilesManager_Type::AppRecommendationIndexEntry, DataEntry_T = CLTilesManager_Type::AppRecommendationEntry]
TILE: result: tilestool: TEST_testBinarySearch, entries, %lu, file, %s, id, %s
TILE: searched for, location, %.10lf, %.10lf, setLinear, %lu, setIndex, %lu
TILE: not in index, %s, count, %3u, locationd, %.10lf, %.10lf
TILE: result: tilestool: pass, %d, tests, %u, %d
virtual void CLSpatialDataTileTemplate<CLTilesManager_Type::AppRecommendationIndexEntry, CLTilesManager_Type::AppRecommendationEntry>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const CLTileFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::AppRecommendationIndexEntry, DataEntry_T = CLTilesManager_Type::AppRecommendationEntry]
TILE: CLSpatialDataTileTemplate, parsing, sectionId, %d, %s
TILE: CLSpatialDataTileTemplate, index, height, %u, width, %u
TILE: index entry, %3lu, %3u, step, %04d, %s
TILE: CLSpatialDataTileTemplate, entries, numOfEntries, %u
TILE: CLSpatialDataTileTemplate, headers only, give up
TILE: entry, %3lu, %3u, %3lu, %s, swLoc, %.8lf, %.8lf
TILE: CLSpatialDataTileTemplate, regionalEntries, numOfEntries, %u
TILE: entry, %3lu, %3u, %3lu, %s
entriesOffset, 
virtual void CLSpatialDataTileTemplate<CLTilesManager_Type::AppRecommendationIndexEntry, CLTilesManager_Type::AppRecommendationEntry>::getEntriesForArea(const double &, const double &, const double &, const double &, bool, bool, std::list<DataEntry_T> &) [IndexEntry_T = CLTilesManager_Type::AppRecommendationIndexEntry, DataEntry_T = CLTilesManager_Type::AppRecommendationEntry]
TILE: getEntriesForArea, input, swLatitude, %.8lf, swLongitude, %.8lf, search, %.8lf, %.8lf, isUseIndex, %d, includeRegionalEntries, %d, entries, %lu
TILE: doesIntersectWithTile, %d, no intersection with the tile
TILE: invalid section, signature, 0x%x, stopping
TILE: getEntriesForArea, invalid tile file, bad allocation size, totalBytesInSection, %lu, maxSectionSize, %lu
TILE: getEntriesForArea, version, %d, y, %u, x, %u, corner, %.8f, %.8f, detlas, %.2f, %.2f, genTime, %.2lf, expAge, %d, age, %.2lf
TILE: getEntriesForArea, numEntriesHeight, %d, numEntriesWidth, %d, entrySizeInBytes, %d
TILE: getEntriesForArea, numOfEntries, %d, entrySizeInBytes, %d, numOfLargeEntries, %d
TILE: getEntriesForArea, numOfRegionalEntries, %d, entrySizeInBytes, %d
TILE: getEntriesForArea, asked not to use index
TILE: getEntriesForArea, pIndexEntries, 0x%lx, pEntries, 0x%lx
TILE: getEntriesForArea, line, %d, searched_min_y, %d, %d, searched_min_x, %d, %d, index_y, %d, index_x, %d, entriesOffset, %d
TILE: getEntriesForArea, entryId, %d, isIntersect, %d, examinedEntries, %d, entry, %s
TILE: getEntriesForArea, nothing to search, %s
TILE: getEntriesForArea, examinedEntries, %5u, foundEntries, %5lu, isUseIndex, %d, clocks, %10lu, extra, %3d, %3d
CLWifiServiceClient
CLWifiServiceClient::ReceiverFunc wrap_receiver(CLWifiServiceClient::IReceiver *)
receiver object cannot be null
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Daemon/Shared/WifiService/CLWifiServiceClient.mm
void CLWifiServiceClient::registerForNotification(const CLWifiService_Type::Notification &)
users of CLWifiServiceClient should not register for kNotificationPower directly
users of CLWifiServiceClient should not register for kNotificationLinkStatus directly
users of CLWifiServiceClient should not register for kNotificationRoam directly
void CLWifiServiceClient::unregisterForNotification(const CLWifiService_Type::Notification &)
users of CLWifiServiceClient should not unregister for kNotificationPower directly
users of CLWifiServiceClient should not unregister for kNotificationLinkStatus directly
users of CLWifiServiceClient should not unregister for kNotificationRoam directly
void CLWifiServiceClient::onWifiNotification(int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)
notification, %d, kNotificationPower, fIsWifiPowered, %d, data.power, %d
notification, %{public}d, kNotificationLinkStatus/Roam, wasAssociated, %{public}d, isAssociated, %{public}d
CLStepCountRecorderDb
StepCountHistory
SELECT COUNT(*) FROM StepCountHistory
SELECT * FROM StepCountHistory ORDER BY startTime DESC
SELECT * FROM StepCountHistory ORDER BY startTime ASC
SELECT * FROM StepCountHistory WHERE id >= ? ORDER BY id ASC LIMIT ?
DELETE FROM StepCountHistory WHERE id = ?
DELETE FROM StepCountHistory WHERE startTime > ?
DELETE FROM StepCountHistory
INSERT INTO StepCountHistory (startTime, timestamp, count, distance, rawdistance, floorsAscended, floorsDescended, pace, activeTime, firstStepTime, pushCount, workoutType) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
UPDATE StepCountHistory SET startTime = startTime + ?
SELECT * FROM StepCountHistory ORDER BY startTime DESC LIMIT 1
SELECT * FROM StepCountHistory ORDER BY startTime ASC LIMIT 1
SELECT * FROM StepCountHistory WHERE startTime >= ? ORDER BY startTime ASC LIMIT 1
SELECT * FROM StepCountHistory WHERE startTime <= ? ORDER BY startTime DESC LIMIT 1
SELECT * FROM StepCountHistory WHERE firstStepTime >= ? ORDER BY startTime ASC LIMIT 1
SELECT * FROM StepCountHistory WHERE firstStepTime <= ? ORDER BY startTime DESC LIMIT 1
SELECT * FROM StepCountHistory WHERE startTime >= ? and startTime < ? ORDER BY startTime ASC
virtual void CLStepCountRecorderDb::prepareSQLStatements()
void CLStepCountRecorderDb::alterTableIfNecessary()
StepCountHistory table doesn't even exist
ALTER TABLE StepCountHistory
UPDATE StepCountHistory SET 
CLStepDistance CLStepCountRecorderDb::queryStepCount(CFAbsoluteTime, CFAbsoluteTime, CLStepCountRecorderDb::QueryTimeType) const
Assumption failed: startTime (%{public}f) was found to be newer than endTime (%{public}f), queryTimeType %{public}d
#Warning First step time invalid.
Steps were found to be non monotonically increasing - start:%{public}f, end:%{public}f, queryTimeType:%{public}d
CMError CLStepCountRecorderDb::queryStepCountSince(const CLStepCountEntry &, std::vector<CLStepCountEntry> &) const
StepCountHistory not accessible
#Warning DB UUID un-initialized
#Warning Potential DB reset, returning all records to clients
#Warning Step count has rolled back, returning mru to clients,mru.recordId,%d,record.recordId,%d,mru.count,%u,record.count,%u,mru.distance,%f,record.distance,%f,mru.activeTime,%f,record.activeTime,%f,mru.pushCount,%d,record.pushCount,%d
Step count has rolled back!!
virtual void CLStepCountRecorderDb::deleteRecordsAfterInsertUL(const CLStepCountEntry &)
Failed to delete records
virtual void CLStepCountRecorderDb::shiftRecordsByUL(CFTimeInterval)
Failed to shift records
FirstStepTime
StartTime
bool CLStepCountRecorderDb::searchListUL(CLStepCountRecorderDb::QueryTimeType, CFAbsoluteTime, CLStepCountEntry &, CLStepCountEntry &) const
Failed to search list for %{public}s %{public}f
virtual long CLStepCountRecorderDb::aggregateRecords(const CLAggregationRules &)
Failed to examine the most last record for data aggregation.
Failed to examine the second to last record for data aggregation.
Failed to iterate through records for data aggregation.
Failed to retrieve most recent record for data aggregation.
Failed to delete marked records with timestamp of %{public}f
CLActivityDB::ActivityCode CLStepCountRecorderDb::getCountOffset(uint32_t, int &, CLStepCountEntry &)
Reset requested.  Counts (prev: %d cur:%d). New fOffset (%d).
Reset current step count.  Counts (prev: %d cur:%d). New fOffset (%d).
Oscar restart detected.  Count (prev: %d cur:%d). New fOffset (%d).
An error in step counts is highly likely.  Treating current count as new 0.  Count (prev: %{public}d cur:%{public}d). New fOffset (%{public}d).
CLActivityDB::ActivityCode CLStepCountRecorderDb::getFloorsAndActiveTimeOffset(CLStepCountEntry, CLStepCountEntry)
Reset requested.  New offset (%d, %d, %f).
Locationd restart detected.  New offset (%d, %d, %f).
Oscar restart detected.  New offset (%d, %d, %f).
An error in floor counts is highly likely.  Treating current count as new 0.  New offset (%{public}d, %{public}d, %{public}f).
rawdistance
pushCount
CLActivityRecorderDb<CLStepCountEntry, CLActivityDB::NoDataProtectionPolicy>::CLActivityRecorderDb(const char *, bool, float, const std::string, const CLSqliteDatabase::SqlitePropertyPersistence) [T = CLStepCountEntry, DataProtectionPolicy = CLActivityDB::NoDataProtectionPolicy]
bool CLActivityRecorderDb<CLStepCountEntry, CLActivityDB::NoDataProtectionPolicy>::setDatabaseAccessible() [T = CLStepCountEntry, DataProtectionPolicy = CLActivityDB::NoDataProtectionPolicy]
bool CLActivityRecorderDb<CLStepCountEntry, CLActivityDB::NoDataProtectionPolicy>::migrateDbConstraints(const char *, const CLSqliteDatabase::ColumnInfo *, const char **) [T = CLStepCountEntry, DataProtectionPolicy = CLActivityDB::NoDataProtectionPolicy]
virtual void CLActivityRecorderDb<CLStepCountEntry, CLActivityDB::NoDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, bool) [T = CLStepCountEntry, DataProtectionPolicy = CLActivityDB::NoDataProtectionPolicy]
CLStepCountNotifierSilo
-[CLStepCountNotifierAdapter getPedometerCalibrationBins:withReply:]
Requested calibration type not recognized
percentGrade
gpsSource
strideLength
PedestrianOdometer
CLStepCountNotifier::CLStepCountNotifier(id<CLIntersiloUniverse>)
CLStepCountNotifier is being constructed
StepCountingDisableAggregation
StepCountingDisableExpiration
StepCountingEmulationTimeRate
StepCountingDetailedLogging
Configuration: speedUpRate %f, aggregationDisabled %d, expirationDisabled %d, detailedLogging %d
virtual CLStepCountNotifier::~CLStepCountNotifier()
CLStepCountNotifier is shutting down
StepCountingAggregateTimerInterval
void CLStepCountNotifier::setUpAggregateOnTimer()_block_invoke
Aggregating records due to timer!
void CLStepCountNotifier::setUpdateFinishedHandler()_block_invoke
StepCount, %f, %d, %f, %d, %d, %d, %d
v152@?0{CLStepCountEntry=dddIddIIdddi^{__CFString}BB{CLAccelerometerPace=ddd}IIC}8
void CLStepCountNotifier::update(std::shared_ptr<CLStepCountVector>)
Adding Fused entry, time, %f, count, %d, raw_dist(m), %f, fused_dist(m), %f, cadence(steps/s), %f
CLStepDistance CLStepCountNotifier::query(CFAbsoluteTime &, CFAbsoluteTime &) const
Query (%f, %f): %d, %f, %f, %d, %d, %f
v24@?0{shared_ptr<std::__1::vector<CLStepCountEntry, std::__1::allocator<CLStepCountEntry> > >=^{vector<CLStepCountEntry, std::__1::allocator<CLStepCountEntry> >}^{__shared_weak_count}}8
!pace || isAvailable()
void CLStepCountNotifier::onMotionStateMediatorNotification(int, const CLMotionStateMediator_Type::Notification &, const CLMotionStateMediator_Type::NotificationData &)
Restarting step counting after activity session %lu
step counting overrideActivityType,%lu,
void CLStepCountNotifier::onUserInfoUpdate(int, const CLNatalimetryNotifier_Type::Notification &, const CLNatalimetryNotifier_Type::NotificationData &)
#Warning Unhandled notification type, %d
NatalieInputSrc
void CLNatalieSourceFromNotifier<CLOdometerEntry>::startSpectator() [Data_T = CLOdometerEntry]
Start spectator for src %s
virtual void CLNatalieInput<CLOdometerEntry>::update(CFAbsoluteTime) [Data_T = CLOdometerEntry]
#Warning Input, time rolled back. Delta %f, Previous Time %f, Current Time %f, Always Active %d.
virtual bool CLNatalieSourceFromNotifier<CLOdometerEntry>::startActive() [Data_T = CLOdometerEntry]
Activate src %s
virtual bool CLNatalieSourceFromNotifier<CLOdometerEntry>::stopActive() [Data_T = CLOdometerEntry]
Inactivate src %s
void CLActivityAggregator<CLStepCountEntry, CLActivityDB::NoDataProtectionPolicy>::addAggregationRule(CFTimeInterval, CFTimeInterval) [T = CLStepCountEntry, DataProtectionPolicy = CLActivityDB::NoDataProtectionPolicy]
Programmer error, this rule is not valid (age: %{public}f, interval:%{public}f).
addAggregationRule
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Daemon/Motion/Activity/CLActivityAggregator.h
fRules.back().timeFromCurrentS < timeFromCurrentS
fRules.back().minimumIntervalS < minimumIntervalS
void CLActivityAggregator<CLStepCountEntry, CLActivityDB::NoDataProtectionPolicy>::setExpirationRule(CFTimeInterval) [T = CLStepCountEntry, DataProtectionPolicy = CLActivityDB::NoDataProtectionPolicy]
long CLActivityAggregator<CLStepCountEntry, CLActivityDB::NoDataProtectionPolicy>::aggregateRecords() [T = CLStepCountEntry, DataProtectionPolicy = CLActivityDB::NoDataProtectionPolicy]
int CLActivityRecorderDb<CLStepCountEntry, CLActivityDB::NoDataProtectionPolicy>::estimateRecordsNeeded(const CLAggregationRules &) [T = CLStepCountEntry, DataProtectionPolicy = CLActivityDB::NoDataProtectionPolicy]
virtual void CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLStepCountNotifier_Type::Notification, NotificationData_T = CLStepCountNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLStepCountNotifier_Type::Notification, NotificationData_T = CLStepCountNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLActivityRecorderDb<CLStepCountEntry, CLActivityDB::NoDataProtectionPolicy>::addSuspectRecord(const T &) [T = CLStepCountEntry, DataProtectionPolicy = CLActivityDB::NoDataProtectionPolicy]
bool CLActivityRecorderDb<CLStepCountEntry, CLActivityDB::NoDataProtectionPolicy>::isValidTime(CFAbsoluteTime &) const [T = CLStepCountEntry, DataProtectionPolicy = CLActivityDB::NoDataProtectionPolicy]
virtual void CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLStepCountNotifier_Type::Notification, NotificationData_T = CLStepCountNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLStepCountNotifier_Type::Notification, NotificationData_T = CLStepCountNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLStepCountNotifier_Type::Notification, NotificationData_T = CLStepCountNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLStepCountNotifier_Type::Notification, NotificationData_T = CLStepCountNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::listClients() [Notification_T = CLStepCountNotifier_Type::Notification, NotificationData_T = CLStepCountNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
CLSwimNotifierSilo
-[CLSwimNotifierAdapter syncget_prepareSessionEndForSessionType:]
SwimNotifier, Requested finalize before end.
CLSwimNotifier
CLMotionStateMediator
SwimAggregateTimerInterval
SwimAggregateTimerExpiration
SwimDistributionsByLOI
CLSwimNotifier::CLSwimNotifier(id<CLIntersiloUniverse>)
SwimDistributionsByLOI set to %d
Swim Notifier instantiated
LogSwimming
LogMotionStateReplay and LogSwimming are both set - LogMotionStateReplay takes precedence in the Swim Notifier
SimulateSwimming
virtual void CLSwimNotifier::shutdown()
CLSwimNotifier is shutting down.
virtual bool CLSwimNotifier::registerForNotificationInternal(const CLSwimNotifier_Type::Notification &)
Added client for %d, count %d
void CLSwimNotifier::getLOIsForLocation(CLLocation *)
[LOI] Calling fetchLocationsOfInterestWithinDistance
void CLSwimNotifier::getLOIsForLocation(CLLocation *)_block_invoke_2
Error retrieving the RT LOIs. %@
[LOI] Found nil locationsOfInterest
void CLSwimNotifier::requestLocation()
[LOI] Registering for location updates
void CLSwimNotifier::turnOnSwimTrackingIfNecessary(const CLMotionStateMediator_Type::MotionOverride &)
SwimController is ready
[SwimOdom] Registering for odometer updates
virtual bool CLSwimNotifier::unregisterForNotificationInternal(const CLSwimNotifier_Type::Notification &)
Removed client for %d, count %d
void CLSwimNotifier::turnOffSwimTrackingIfNecessary()
[SwimOdom] Unregistering for odometer updates
[LOI] Unregistering for location updates
Swim Controller released
void CLSwimNotifier::setupSensorFusion()
swim fusion setup
void CLSwimNotifier::teardownSensorFusion()
swim fusion teardown
fSwimAlg
fFusion
void CLSwimNotifier::onMotionStateMediatorNotification(int, const CLMotionStateMediator_Type::Notification &, const CLMotionStateMediator_Type::NotificationData &)
Swimming workout started, location, %lu, poolLength, %f
Swimming workout has ended
void CLSwimNotifier::onOdometerNotification(int, const CLOdometerNotifier_Type::Notification &, const CLOdometerNotifier_Type::NotificationData &)
[SwimOdom] Received an odometer update of type: %d
[SwimOdom] Received unhandled notification, %d
void CLSwimNotifier::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)
[LOI] Received a location,lat: %{private}lf, long: %{private}lf, accuracy: %lf, lifespan: %lf, timestamp: %lf
Received unhandled notification, %d
virtual void CLMotionNotifier::SiloDispatcher<CLGyro::Sample>::dispatchData(int, const void *, size_t) [T = CLGyro::Sample]
virtual void CLMotionNotifier::SiloDispatcher<CLAccelerometer::Sample>::dispatchData(int, const void *, size_t) [T = CLAccelerometer::Sample]
virtual void CLMotionNotifier::SiloDispatcher<CLGyro::Temperature>::dispatchData(int, const void *, size_t) [T = CLGyro::Temperature]
virtual void CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLSwimNotifier_Type::Notification, NotificationData_T = CLSwimNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLSwimNotifier_Type::Notification, NotificationData_T = CLSwimNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLSwimNotifier_Type::Notification, NotificationData_T = CLSwimNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLSwimNotifier_Type::Notification, NotificationData_T = CLSwimNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLSwimNotifier_Type::Notification, NotificationData_T = CLSwimNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLSwimNotifier_Type::Notification, NotificationData_T = CLSwimNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::listClients() [Notification_T = CLSwimNotifier_Type::Notification, NotificationData_T = CLSwimNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
CMMsl.Writer
1.2.8
setFlushTimeout_block_invoke
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Shared/Motion/Msl/CMMslWriter.cpp
(fFd == -1) && ("Writer::setFlushTimeout() must be called before ::open().")
Cannot open Msl file
Cannot seek to end of Msl file
Cannot seek to start of Msl file
Short signature in Msl file
Bad signature in Msl file
Cannot create dispatch_io for Msl file
zstream status? Msl %d
Msl dispatch io write error %s
v24@?0B8^{dispatch_data_s=}12i20
batch
super
fConnected
fEndTime
fStartTime
reserved
scaledValue
speedRange
speedThreshold
runVo2max
pause
biasX
biasY
biasZ
calibrationLevel
horizontal
magneticFieldX
magneticFieldY
magneticFieldZ
magneticHeading
magnitude
trueHeading
compassJustAlignedToStableField
cost
coverage
earthDiffRatio
poseX
poseY
poseZ
scaleX
scaleY
scaleZ
calibratedField
predictedField
scale
unitDistance
vertical
correction
writeTo
/BuildRoot/Library/Caches/com.apple.xbs/Binaries/CoreLocation_Sim/install/TempContent/Objects/CoreLocation.build/Msl.build/DerivedSources/CMMslSens.gen.cpp
_correction
clientID
magneticFieldCalibrationLevel
quaternionW
quaternionX
quaternionY
quaternionZ
rotationRateX
rotationRateY
rotationRateZ
userAccelerationX
userAccelerationY
userAccelerationZ
estimate
measurement
noisevariance
statevariance
doingBiasEstimation
doingYawCorrection
variant
aopTsNow
aopTsSensor
magMax
xMax
xMin
xZCTime
yMax
yMin
yZCTime
zMax
zMin
zZCTime
gyroMaxMean
magnitudeDiffUnity
maxAccelStdAxis
sampleNumMod3
subType
triggerEnabled
triggerOn
varianceX
varianceY
varianceZ
allowRelaxedGyroMean
gyroMean
gyroVariance
stillOnAll
temperatureBias
axis
intercept
lastMiniCal
slope
fsync
sampleNum
temperature
accel
accelBatch
accelGesture
accelGps
accelOscarEmu
bTConnection
basebandSpeed
calorimetryPauseEvent
cftime
coarseElevationChange
compassAlignment
compassCalibration
compassConstraints
compassCorrection
courseConstraints
courseCorrection
deviceMotion
elevationChange
enhancedDeviceMotion
fallStats
gestureHint
gravityConstraints
gravityCorrection
gyroBiasAndVariance
gyroBiasConstraints
gyroBiasCorrection
gyroBiasFit
gyroCompass
gyroDt
gyroGps
gyroOscarEmu
gyroTemperature
locationOscarEmu
magnetometer
metsInfo
motionGPSLocation
motionLoiData
motionStateUpdate
motionWifiAssociation
motionWifiLocation
nonlinearBiasFit
odometerWithAltitude
onsetHeartRateData
pressureFiltered
pressureGps
pressureOscarEmu
prox
sessionOverride
stepCadenceToStrideLengthBin
streamingHeartRateData
strideCalBin
touchOscarEmu
vibrationEvent
watchOrientationSettings
locationLoggingEnabled
metsDiff
originDevice
undulation
undulationModel
arrivalDate
departureDate
caltype
hidTimestamp
motionType
rowStrokeAmplitude
rowStrokeFrequency
rowStrokePower
standing
vectorMagnitude
wallStartTime
isWifiAssociated
fGpsAvailability
fractionalGrade
overlap
groundAltitude
groundAltitudeUncertainty
smoothedGPSAltitude
smoothedGPSAltitudeUncertainty
dataSource
interpolation
sinceLastGood
detectionMask
sessionType
touchDetected
isDeviceVibrating
crown
wrist
Assertion failed: i < fCapacity, file /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Oscar/CMQueue.h, line 174,i,%zu,capacity,%u.
#Warning multiple instances created - last instance %p
{"msg%{public}.0s":"CSI assertion failed", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
CL: startInitialize
{"msg%{public}.0s":"startInitialize", "event":%{public, location:escape_only}s}
Could not create MIG background server dispatch source
Could not create MIG simulation server dispatch source
could not create MIG SPI server run loop source
#Warning OBSERVER: TIMEOUT: %s => %s RunLoop is really busy time(%.8lf) tdiff(%.8lf)
Can't read mach_timebase_info = %{public}d
sTimebaseInfo.denom %d sTimebaseInfo.numer %d
CL: startRun
{"msg%{public}.0s":"startRun", "event":%{public, location:escape_only}s}
locationd was started after an unclean shutdown
OBSERVER: ProfileObserver = %d
starting idle shutdown timer of %d seconds
CL: startCleanup
{"msg%{public}.0s":"startCleanup", "event":%{public, location:escape_only}s}
CL: locationd shutting down
{"msg%{public}.0s":"locationd shutting down", "event":%{public, location:escape_only}s, "force":%{public}hhd, "killerPid":%{public}d}
linger requested - not shutting down
no more clients, %d second(s) to auto-shutdown
Obsolete data has already been deleted; not deleting again
Deleting obsolete data
Obsolete data deleted in %.2f seconds
CL: CLDaemonCore::onStatusNotification
{"msg%{public}.0s":"CLDaemonCore::onStatusNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLDaemonCore::onShutdownTimer
{"msg%{public}.0s":"CLDaemonCore::onShutdownTimer", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLDaemonCore::onObsoleteDataCheckTimer
{"msg%{public}.0s":"CLDaemonCore::onObsoleteDataCheckTimer", "event":%{public, location:escape_only}s, "this":"%{public}p"}
no LaunchEvents found
{"msg%{public}.0s":"ensure service is running for xpc activity", "service":%{public, location:escape_only}@, "identifier":%{public, location:escape_only}@}
no xpc activities registered
#Notice Deleting %{public}s if present
Deleting obsolete wifi subdirectory
Deleting %s
Could not delete file %{public}s
CL: locationd main - setup
{"msg%{public}.0s":"locationd main - setup"}
locationd does not take any command-line arguments. Use CFPreferences instead.
Setting location services to %d
{"msg%{public}.0s":"locationd information", "CoreLocation":%{public, location:escape_only}s, "compilation date":%{public, location:escape_only}s, "compilation time":%{public, location:escape_only}s}
{"msg%{public}.0s":"system information", "model":%{public, location:escape_only}s, "system":%{public, location:escape_only}s, "IOPlatformSerialNumber":%{private, location:escape_only}s}
Lock time debugging is enabled
CL: locationd main - teardown
{"msg%{public}.0s":"locationd main - teardown", "event":%{public, location:escape_only}s}
{"msg%{public}.0s":"Legacy logging enabled", "radar":%{public}d}
{"msg%{public}.0s":"Invalid radar", "radar":%{public}d}
{"msg%{public}.0s":"Legacy log settings found", "key":%{public, location:escape_only}s, "clearing":%{public}hhd}
CLGyroCalibrationDatabaseLocalMultiRun insert x,%f,y,%f,z,%f,temperature,%f
fBuilding,%d
Wipe database during a build.
CLGyroCalibrationDatabaseLocalMultiRun startFactoryGYTT
CLGyroCalibrationDatabaseLocalMultiRun getLastMiniCalibration
GyroBiasFit: slope,%f,%f,%f,intercept,%f,%f,%f,seconds,%f
{"msg%{public}.0s":"Assertion failed", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
SQL error: %s
Dropping GyroMultiCalibration.
fNextRound,%d,fIsUrgentCal,%d
nonFactoryRoundCount,%d,kRoundLimit,%d,roundToRemove,%d,fIsUrgentCal,%d
Ending UrgentCal run, double entering this round
Double entry: nonFactoryRoundCount,%d,kRoundLimit,%d,roundToRemove,%d,secondRoundNum,%d
ComputeFullBias: x,%f,y,%f,z,%f
ComputeIntercept: x,%f,y,%f,z,%f
Starting gyro calibration, user initiated, %d
Stopped gyro calibration
CL: notifyClientsWithData (Fallback)
{"msg%{public}.0s":"notifyClientsWithData", "event":%{public, location:escape_only}s, "name":%{public, location:escape_only}s, "notification":%{public}lld}
%s; client %d has deregistered, not notifying %s
%{public}s; unknown client %{public}d
SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d
%{public}s; client %{public}d does not exist
%{public}s; notification %{public}s not found
%s; already shutdown; not listing clients
%s; listing clients, num clients: %zu
%s; clients, id: %d, notification: %d
Removing outliers from database.
Insert into uncached database.
Client registered, caching database
No more clients, flushing cache to database
Database should be cached
CLGyroCalibrationDatabaseLocal insert x,%f,y,%f,z,%f,temperature,%f
Reading database into non-empty cache.
Attempting to write zero entries to Gyro database.
Could not prepare cached insert statement
{"msg%{public}.0s":"This delegate cannot be invalidated", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
CL: _CLDaemonGetControlPlaneStatusReport (Fallback)
{"msg%{public}.0s":"_CLDaemonGetControlPlaneStatusReport", "event":%{public, location:escape_only}s}
CL: _CLDaemonSetAuthorizationStatusByType (Fallback)
{"msg%{public}.0s":"_CLDaemonSetAuthorizationStatusByType", "event":%{public, location:escape_only}s}
{"msg%{public}.0s":"unentitled process", "event":%{public, location:escape_only}s, "calledFunction":%{public, location:escape_only}s, "missingEntitlement":%{public, location:escape_only}s, "clientName":%{public, location:escape_only}s}
Must provide a bundle identifier or bundle path for which to set location authorization status
{"msg%{public}.0s":"Invalid authorization", "auth":%{public, location:CLClientAuthorizationStatus}lld}
CL: _CLDaemonSetAuthorizationStatus (Fallback)
{"msg%{public}.0s":"_CLDaemonSetAuthorizationStatus", "event":%{public, location:escape_only}s}
CL: _CLDaemonResetAllClients (Fallback)
{"msg%{public}.0s":"_CLDaemonResetAllClients", "event":%{public, location:escape_only}s}
CL: _CLDaemonGyroCalibrationDatabaseGetBiasFitAtTemperature (Fallback)
{"msg%{public}.0s":"_CLDaemonGyroCalibrationDatabaseGetBiasFitAtTemperature", "event":%{public, location:escape_only}s}
CL: _CLDaemonGyroCalibrationDatabaseInsertBiasEstimateIfValid (Fallback)
{"msg%{public}.0s":"_CLDaemonGyroCalibrationDatabaseInsertBiasEstimateIfValid", "event":%{public, location:escape_only}s}
CL: _CLDaemonGyroCalibrationDatabaseWipe (Fallback)
{"msg%{public}.0s":"_CLDaemonGyroCalibrationDatabaseWipe", "event":%{public, location:escape_only}s}
CL: _CLDaemonGyroCalibrationDatabaseGetNumTemperatures (Fallback)
{"msg%{public}.0s":"_CLDaemonGyroCalibrationDatabaseGetNumTemperatures", "event":%{public, location:escape_only}s}
CL: _CLDaemonGyroCalibrationDatabaseSupportsMiniCalibration (Fallback)
{"msg%{public}.0s":"_CLDaemonGyroCalibrationDatabaseSupportsMiniCalibration", "event":%{public, location:escape_only}s}
CL: _CLDaemonCompassCalibrationDatabaseGetBias (Fallback)
{"msg%{public}.0s":"_CLDaemonCompassCalibrationDatabaseGetBias", "event":%{public, location:escape_only}s}
CL: _CLDaemonCompassCalibrationDatabaseSetBias (Fallback)
{"msg%{public}.0s":"_CLDaemonCompassCalibrationDatabaseSetBias", "event":%{public, location:escape_only}s}
CL: _CLDaemonConfigure (Fallback)
{"msg%{public}.0s":"_CLDaemonConfigure", "event":%{public, location:escape_only}s}
Oscar not available
Unable to send configuration to Oscar
CL: _CLDaemonOscarTimeSync (Fallback)
{"msg%{public}.0s":"_CLDaemonOscarTimeSync", "event":%{public, location:escape_only}s}
Unexpected null pointer. machTimestamp,%p,oscarTimestamp,%p
CL: _CLDaemonGetAppsUsingLocation (Fallback)
{"msg%{public}.0s":"_CLDaemonGetAppsUsingLocation", "event":%{public, location:escape_only}s}
CL: _CLDaemonGetTechnologiesInUse (Fallback)
{"msg%{public}.0s":"_CLDaemonGetTechnologiesInUse", "event":%{public, location:escape_only}s}
#warning Couldn't create active location technologies array
Could not serialize tech data (%s, %ld)
Could not serialize tech data
CL: _CLDaemonSetPrivateMode (Fallback)
{"msg%{public}.0s":"_CLDaemonSetPrivateMode", "event":%{public, location:escape_only}s}
{"msg%{public}.0s":"private mode changed", "privateModeEnabled":%{public}hhd}
CL: _CLDaemonGetPrivateMode (Fallback)
{"msg%{public}.0s":"_CLDaemonGetPrivateMode", "event":%{public, location:escape_only}s}
{"msg%{public}.0s":"getPrivateMode called", "privateMode":%{public}hhd}
CL: _CLDaemonSetLocationServicesEnabled (Fallback)
{"msg%{public}.0s":"_CLDaemonSetLocationServicesEnabled", "event":%{public, location:escape_only}s}
%s is setting location services to %s
CL: _CLDaemonGetLocationServicesCapable (Fallback)
{"msg%{public}.0s":"_CLDaemonGetLocationServicesCapable", "event":%{public, location:escape_only}s}
{"msg%{public}.0s":"macOS thing...", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
CL: _CLDaemonGetLocationServicesEnabled (Fallback)
{"msg%{public}.0s":"_CLDaemonGetLocationServicesEnabled", "event":%{public, location:escape_only}s}
CL: _CLDaemonSetGestureServiceEnabled (Fallback)
{"msg%{public}.0s":"_CLDaemonSetGestureServiceEnabled", "event":%{public, location:escape_only}s}
%s is setting ear gesture service to %s
CL: _CLDaemonGetGestureServiceEnabled (Fallback)
{"msg%{public}.0s":"_CLDaemonGetGestureServiceEnabled", "event":%{public, location:escape_only}s}
CL: _CLDaemonPingDaemon (Fallback)
{"msg%{public}.0s":"_CLDaemonPingDaemon", "event":%{public, location:escape_only}s}
Pinged by external process %s
CL: _CLDaemonGetAuthorizationStatus (Fallback)
{"msg%{public}.0s":"_CLDaemonGetAuthorizationStatus", "event":%{public, location:escape_only}s}
{"msg%{public}.0s":"client getting effective client name", "clientName":%{public, location:escape_only}s, "bundleId":%{public, location:escape_only}s, "bundlePath":%{public, location:escape_only}s}
Authorization status for %s is %s
CL: _CLDaemonGetAuthorizationStatusForService (Fallback)
{"msg%{public}.0s":"_CLDaemonGetAuthorizationStatusForService", "event":%{public, location:escape_only}s}
{"msg%{public}.0s":"getting auth status for service", "clientName":%{public, location:escape_only}s, "serviceMask":%{public, location:CLClientServiceTypeMask}lld, "authorizationStatus":%{public, location:escape_only}s}
CL: _CLDaemonPerformMigration (Fallback)
{"msg%{public}.0s":"_CLDaemonPerformMigration", "event":%{public, location:escape_only}s}
{"msg%{public}.0s":"triggered migration", "event":%{public, location:escape_only}s, "begin_mach":%{public}llu, "end_mach":%{public}llu, "elapsed_s":"%{public}.09f", "clientName":%{public, location:escape_only}s}
CL: _CLDaemonShutdownDaemon (Fallback)
{"msg%{public}.0s":"_CLDaemonShutdownDaemon", "event":%{public, location:escape_only}s}
Daemon shutdown requested by %s
CL: _CLDaemonDisplayStatistics (Fallback)
{"msg%{public}.0s":"_CLDaemonDisplayStatistics", "event":%{public, location:escape_only}s}
Daemon stats requested by %s
CL: _CLDaemonDumpLogs (Fallback)
{"msg%{public}.0s":"_CLDaemonDumpLogs", "event":%{public, location:escape_only}s}
Log dump requested by %s: %s
CL: _CLDaemonCopyLastLog (Fallback)
{"msg%{public}.0s":"_CLDaemonCopyLastLog", "event":%{public, location:escape_only}s}
%s requested to copy locationd's last %u logs to crash reporter
CL: _CLDaemonGetMonitoredRegions (Fallback)
{"msg%{public}.0s":"_CLDaemonGetMonitoredRegions", "event":%{public, location:escape_only}s}
#warning Couldn't get fences for client key %s
CL: _CLDaemonGetLocation (Fallback)
{"msg%{public}.0s":"_CLDaemonGetLocation", "event":%{public, location:escape_only}s}
MiG GetLocation rejected for '%s(%d)': no way to establish effective authorization
MiG GetLocation rejected for '%s': insufficient effective authorization
{"msg%{public}.0s":"altered getLocation", "location":%{private, location:CLClientLocation}.*P, "timestampGps":"%{private}f", "machTime":"%{private}f", "gotLocation":%{private}hhd, "specialCoordinateLat":"%{private}f", "specialCoordinateLon":"%{private}f", "specialHorizontalAccuracy":"%{private}f"}
CL: _CLDaemonSetLocationDefault (Fallback)
{"msg%{public}.0s":"_CLDaemonSetLocationDefault", "event":%{public, location:escape_only}s}
Setting default %s from %s
CL: _CLDaemonGetLocationDefault (Fallback)
{"msg%{public}.0s":"_CLDaemonGetLocationDefault", "event":%{public, location:escape_only}s}
Getting default %s for %s
CL: _CLDaemonGetStatusBarIconState (Fallback)
{"msg%{public}.0s":"_CLDaemonGetStatusBarIconState", "event":%{public, location:escape_only}s}
CL: _CLDaemonSetStatusBarIconEnabledForEntityClass (Fallback)
{"msg%{public}.0s":"_CLDaemonSetStatusBarIconEnabledForEntityClass", "event":%{public, location:escape_only}s}
%s is setting the status bar icon enabled state for %d to %d
CL: _CLDaemonGetStatusBarIconEnabledForEntityClass (Fallback)
{"msg%{public}.0s":"_CLDaemonGetStatusBarIconEnabledForEntityClass", "event":%{public, location:escape_only}s}
%s retrieved the status bar icon enabled state for %d
CL: _CLDaemonSetMapMatchingRouteHint (Fallback)
{"msg%{public}.0s":"_CLDaemonSetMapMatchingRouteHint", "event":%{public, location:escape_only}s}
Received %d route hints from %s
CL: _CLDaemonGetActivities (Fallback)
{"msg%{public}.0s":"_CLDaemonGetActivities", "event":%{public, location:escape_only}s}
#warning _CLDaemonGetActivityAlarms called without support for activity alarms
CL: _CLDaemonTimeZoneAtLocation (Fallback)
{"msg%{public}.0s":"_CLDaemonTimeZoneAtLocation", "event":%{public, location:escape_only}s}
CL: _CLDaemonStartStopAdvertisingBeacon (Fallback)
{"msg%{public}.0s":"_CLDaemonStartStopAdvertisingBeacon", "event":%{public, location:escape_only}s}
Received an LOI notification:longitude,%f,lattitude,%f,
departureDate,%f,arrivalDate,%f,
horizontalAccuracy,%f,confidence,%d
motion default,%s,set,%d,value,%s
Entitlement %{public}s required to use %{public}s
Simulation API called, but location simulation not supported
Got simulation request with invalid URL %{public}s
Location simulation flush requested
{"msg%{public}.0s":"#warning CLPrivacyManager is disabled by defaults write!"}
{"msg%{public}.0s":"CLISP bug: CLPrivacyManager still receiving messages after invalidation by the service vendor"}
CL: Scheduling vacuum
{"msg%{public}.0s":"Scheduling vacuum", "event":%{public, location:escape_only}s, "reason":%{public, location:escape_only}@}
{"msg%{public}.0s":"#warning Not vacuuming due to defaults-based disablement"}
{"msg%{public}.0s":"Deferring previously scheduled vacuum"}
{"msg%{public}.0s":"Vacuuming all"}
{"msg%{public}.0s":"failed to copy criteria", "encryptionClass":%{public, location:escape_only}@}
{"msg%{public}.0s":"retrying activity", "encryptionClass":%{public, location:escape_only}@, "reason":%{public}d}
{"msg%{public}.0s":"failed to get activity", "encryptionClass":%{public, location:escape_only}@}
CL: CLPrivacyManager activity handler
{"msg%{public}.0s":"CLPrivacyManager activity handler", "event":%{public, location:escape_only}s, "job identifier":%{public, location:escape_only}@, "state":%{public}ld}
{"msg%{public}.0s":"Unexpected activity state. XPC bug?"}
{"msg%{public}.0s":"activity deferred", "encryptionClass":%{public, location:escape_only}@}
{"msg%{public}.0s":"Vacuuming database", "class":%{public, location:escape_only}@}
{"msg%{public}.0s":"Unexpected encryption class", "class":%{public, location:escape_only}@, "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
Dumping gyro calibration database
Cannot get GYTT property
data not long enough to get version properly
GYTT version (%u) does not match expected version (%u)
Adding entry to database: %f,%f,%f,%f;
NOT adding entry to database: %f,%f,%f,%f;
No gyroCal database file set in preferences. Using the default database.
Using gyroCal database file: %s.
Max magnitude difference (%f), Max inclination difference (%f), CompassBiasClusteringEnabled (%d), CompassBiasTemporalVarianceCheck (%d)
CompassBiasDB, begin lookups
Compass recently calibrated.  Using cached bias: (%f, %f, %f) with level: (%d).
search found: bestfit (%+.3f/%+.3f/%+.3f) bias (%+.3f/%+.3f/%+.3f) level (%d) using magneticField (%+.3f/%+.3f/%+.3f) acceleration (%+.3f/%+.3f/%+.3f) from %d entries. No: %llu. IsCluster: %d, 2D Check,%d
search failure: no result, saw bestfit (%+.3f/%+.3f/%+.3f) bias (%+.3f/%+.3f/%+.3f) level (%d) using magneticField (%+.3f/%+.3f/%+.3f) acceleration (%+.3f/%+.3f/%+.3f) from %d entries
search complete failure: no results from %d entries
CompassBiasDB, setBias has novel information, countdown to clustering: %d
CompassBiasDB, setBias is not novel.
Dumping compass database
CompassBiasDB, clusteralgo, started
CompassBiasDB, clusteralgo, finished, numbers of clusters found, %zu,  %d
search complete failure: too much variation in bias within a short time period, mean (%.3f) max (%.3f)
CompassBiasDB, lookup, rowid, %llu, bias, %.3f, %.3f, %.3f, mag, %.3f, %.3f, incl, %.3f, %.3f, magDiff, %.3f, inclDiff, %.3f, score, %.3f, betterMatch, %d
CompassBiasDB, lookupBiasIndividually
Best fit values (will update timestamp): %llu, %f, %f
Clearing obsolete bias entries
search comparison: db level (%d) db age (%.3f), db mag (%.3f) est mag (%.3f) delta mag (%.3f), db inc (%.3f) est inc (%.3f) delta inc (%.3f)
CL: CLCompassDatabaseController::onClearBiasTimer
{"msg%{public}.0s":"CLCompassDatabaseController::onClearBiasTimer", "event":%{public, location:escape_only}s, "this":"%{public}p"}
GyroBias received by DeviceMotion in daemon
{"msg%{public}.0s":"#slv Malformed visit", "visit":%{private, location:escape_only}@}
{"msg%{public}.0s":"#slv key not found after we were told it was there", "key":%{public, location:escape_only}s}
{"msg%{public}.0s":"#slv Could not store client auth dates"}
{"msg%{public}.0s":"#slv Could not store significant location visit clients"}
{"msg%{public}.0s":"#slv ensureMonitoringWithType", "type":%{public}d, "monitoring":%{public}hhd, "leeching":%{public}hhd}
{"msg%{public}.0s":"#slv Currently leeching. Stop leeching and switch to monitoring"}
{"msg%{public}.0s":"#slv Begin monitoring"}
{"msg%{public}.0s":"#slv Currently monitoring. Stop monitoring and switch to leeching"}
{"msg%{public}.0s":"#slv Begin leeching"}
{"msg%{public}.0s":"#slv ensureStop", "monitoring":%{public}hhd, "leeching":%{public}hhd}
#slv Stop monitoring or leeching
{"msg%{public}.0s":"#slv Dropping old visit", "visit":%{private, location:escape_only}@}
{"msg%{public}.0s":"#slv Client in store with no interest", "key":%{public, location:escape_only}s}
{"msg%{public}.0s":"#slv Can't deliver visit to client that hasn't connected"}
{"msg%{public}.0s":"#slv Client has no interest", "key":%{public, location:escape_only}s}
{"msg%{public}.0s":"#slv Client is interested", "key":%{public, location:escape_only}s}
{"msg%{public}.0s":"#slv Cannot deliver a visit to a client without a key"}
{"msg%{public}.0s":"#slv Not delivering visit to client... not interested", "key":%{public, location:escape_only}s}
{"msg%{public}.0s":"#slv Client not authorized for visit", "key":%{public, location:escape_only}s, "authDate_s":"%{public}.09f"}
{"msg%{public}.0s":"#slv Delivering visit to client", "key":%{public, location:escape_only}s, "authDate_s":"%{public}.09f", "mangled":%{private, location:escape_only}@}
{"msg%{public}.0s":"#slv Client is connecting", "key":%{public, location:escape_only}s}
{"msg%{public}.0s":"#slv Tried to start monitoring for a client that isn't connected"}
{"msg%{public}.0s":"#slv Client start", "key":%{public, location:escape_only}s}
{"msg%{public}.0s":"#slv Tried to stop monitoring for a client that isn't connected"}
{"msg%{public}.0s":"#slv client stop", "key":%{public, location:escape_only}s}
{"msg%{public}.0s":"#slv programmer error.  Only call this function after setting client interest to PendingDelete", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
{"msg%{public}.0s":"#slv Sending out visit", "visit":%{private, location:escape_only}@}
{"msg%{public}.0s":"#slv Launching", "key":%{public, location:escape_only}s}
{"msg%{public}.0s":"#slv Client not eligible to receive visit", "key":%{public, location:escape_only}s, "interested":%{public}hhd, "authDate_s":"%{public}.09f"}
{"msg%{public}.0s":"#slv Sending to clients", "visit":%{private, location:escape_only}@}
{"msg%{public}.0s":"#slv #warning Can't produce a meaningful authorization date before arming is complete.  Returning nil"}
{"msg%{public}.0s":"#slv Not checking for monitoring... not armed"}
{"msg%{public}.0s":"#slv Checking if SLV should be active"}
#slv Invalid interest type
{"msg%{public}.0s":"#slv should be monitoring"}
{"msg%{public}.0s":"#slv should be leeching"}
{"msg%{public}.0s":"#slv should be off"}
{"msg%{public}.0s":"#slv Couldn't get list of clients"}
{"msg%{public}.0s":"#slv Migrated value for key to a dictionary", "key":%{public, location:escape_only}s}
{"msg%{public}.0s":"#slv invalid value found in plist"}
{"msg%{public}.0s":"#slv Received visit from routined", "visit":%{private, location:escape_only}@}
{"msg%{public}.0s":"#slv received unhandled notification", "notification":%{public}d}
{"msg%{public}.0s":"#slv Spoofing a Significant Visit", "visit":%{private, location:escape_only}@}
could not setup geomagnetic file download from %{public}s
#Warning geomagnetic provider received a stale location <%+.8f,%+.8f,%+.3f> @ %.3f
geomagnetic information calculated for <%+.8f,%+.8f,%+.3f> @ %.3f, declination %f inclination %f will expire @ %.3f
Type,%s,lat,%+.8f,long,%+.8f,alt,%+.3f,x,%.3f,y,%.3f,z,%.3f,m,%.3f,h,%.3f,dec,%+.3f,inc,%+.3f,
#Warning no geomagnetic information available for <%+.8f,%+.8f,%+.3f>
Client requested notification %d
registered as location spectator to compute geomagnetic data
geomagnetic file expired, downloading new file now
Geomagnetic model data invalidated. Sending notification with timestamp %f
location services is now disabled; invalidating geomagnetic field data
Set location
CL: CLGeomagneticModelProviderDaemon::onGeomagneticFileUpdated
{"msg%{public}.0s":"CLGeomagneticModelProviderDaemon::onGeomagneticFileUpdated", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLGeomagneticModelProviderDaemon::onStatusNotification
{"msg%{public}.0s":"CLGeomagneticModelProviderDaemon::onStatusNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLGeomagneticModelProviderDaemon::onClientNotification
{"msg%{public}.0s":"CLGeomagneticModelProviderDaemon::onClientNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLGeomagneticModelProviderDaemon::onLocationNotification
{"msg%{public}.0s":"CLGeomagneticModelProviderDaemon::onLocationNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
Start factory GYTT
Nonlinear gyro database load, SQL error: %s
flushPendingError: %s
Nonlinear gyro database flushed, %zu samples added.
Nonlinear gyro pending samples thinned.  %zu samples reduced to %zu.
Nonlinear gyro database prune, deleted %zu samples, %zu remain.
Nonlinear gyro database computed fit.
Setting property %s to %f
Last cover open timestamp = %f
%s table creation.
{"msg%{public}.0s":"CLClusterCompassCalibrationTable::deleteAll", "event":%{public, location:escape_only}s, "begin_mach":%{public}llu, "end_mach":%{public}llu, "elapsed_s":"%{public}.09f"}
{"msg%{public}.0s":"CLCompassCalibrationTable::clearBias", "event":%{public, location:escape_only}s, "begin_mach":%{public}llu, "end_mach":%{public}llu, "elapsed_s":"%{public}.09f"}
{"msg%{public}.0s":"min_dist should not be infinity", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
{"msg%{public}.0s":"distanceThresholdVector must not be empty", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
{"msg%{public}.0s":"minNumCluster must be greater than zero", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
AWD Metrics is not enabled so not computing microlocation metrics
Computing AWD metrics
AWD Metrics is not enabled so not logging microlocation metrics
AWD Metrics is not enabled so not pushing microlocation metrics
Pushing AWD metrics
Next scan expected to take %{public}.3Lfs (ending at %{public}0.3fs). Expected time that the scan timer will end: %{public}.03fs
Not enough time for another scan
No wifi results so issue a scan without delay
Ignoring a cached notification
Got a scan error so returning a scan delay of %{public}0.3Lfs
Got a scan busy error so returning a scan delay of %{public}0.3Lfs
%{public}s. returning scan delay: %{public}03Lfs
%{public}s. issuing a scan without delay
%{public}s. scan type %{public}d, our scan is already in-flight
%{public}s. scan type %{public}d, returning scan delay: %{public}03Lfs
%{public}s. scan type %{public}d, returning scan delay: %{public}03LFs
Setting channels to scan: %{private}s
{"msg%{public}.0s":"CFType must be a CFArrayRef to convert to a const char*", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
{"msg%{public}.0s":"CFType must be a CFNumber to convert to an int", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
{"msg%{public}.0s":"Unable to get the value from a CFNumber", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
{"msg%{public}.0s":"wifiScanResults", "ap":%{private, location:escape_only}s, "isValid":%{private}d, "isNotTooOld":%{private}d, "isGood":%{private}d}
deltaAcceleration,%f
Failed to connect to database
#Warning Attempt to call %s without a backing database
#Warning Attempt to drop tables without a backing database
#Warning Unable to get column count from trigger table
#Warning Attempt to deleteDataOlderThan without a backing database
MicroLocation database has no connection. %{public}s
MicroLocation database sqlite error. %{public}s
#Warning Attempt to deleteUnneededModels without a backing database
No LOIs found. Not deleting any models
#Warning Attempt to selectLearningMeasurementsByLOIBetweenTimes without a backing database
#Warning Attempt to numLocalizationScansBetweenTimes without a backing database
#Warning Attempt to numRecordingScansBetweenTimes without a backing database
#Warning Attempt to getMostRecentModelForLOIOfModelType without a backing database
#Warning Attempt to getMostRecentModelForLOI without a backing database
#Warning Attempt to selectMeasurementsFromRecordingUUIDs without a backing database
#Warning Failed to connect to database
#Warning Attempt to flushBufferedInserts without a backing database
Flushing buffered inserts (%llu)
Unable to save buffered entries into the MicroLocation database. Entries have been lost. %{public}s
#Warning Attempt to freeDatabaseSpace() without a backing database
Deleting microlocation data older than %.3Lf days
Error getting a prepared statement
Error binding to statement for sql %{private}s
Database buffer is full. Flushing buffered entries to disk
Need to clear %llu rows from the %s table
#Warning Attempt to get numEntries without a backing database
{"msg%{public}.0s":"DatabaseFreeSpacePercentage needs to be a valid percentage", "percentage":%{public}d, "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
{"msg%{public}.0s":"Settled State", "mode":%{public}d, "modeName":%{public, location:escape_only}s}
{"msg%{public}.0s":"Aggregated Settled State", "motionSettledState":%{public}d, "wifiSettledState":%{public}d, "accelSettledStateValid":%{public}d, "accelIsPowerful":%{public}d, "previousSettledState":%{public}d, "currentSettledState":%{public}d}
{"msg%{public}.0s":"Invalid algorithm chosen", "enum value":%{public}d, "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
{"msg%{public}.0s":"No type provided in dictionary", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
{"msg%{public}.0s":"No sigma provided in dictionary", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
{"msg%{public}.0s":"No power provided in dictionary", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
{"msg%{public}.0s":"No jaccard_threshold provided in dictionary", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
{"msg%{public}.0s":"No jaccard_scale_factor provided in dictionary", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
{"msg%{public}.0s":"No tanimoto_base provided in dictionary", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
{"msg%{public}.0s":"Invalid type chosen", "enum value":%{public}d, "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
Sucessfully created table if necessary: %s
#Warning Table is not valid so we can't get the most recent wifi channel histogram
Did %{poblic}sdelete old data
MicroLocation database sqlite error. error: %{public}s
Did %{public}sdelete unneeded models
Did %{public}sfree database space
{"msg%{public}.0s":"cluster distance threshold must not be empty", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
{"msg%{public}.0s":"prune threshold must be less than or equal to clusterDistance threshold", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
{"msg%{public}.0s":"fingerprintVector must be non-empty", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
{"msg%{public}.0s":"CFType must be a CFNumber to convert to a double", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
error in mean shift algorithm
error in kmeans algorithm
#Warning The protobuf fingerprint does not have a valid cluster label uuid
#Warning The protobuf fingerprint is using a deprecated uint64 cluster label
#Warning The protobuf fingerprint does not have a cluster identifer
#Warning The protobuf cluster recording does not have a valid cluster label uuid
#Warning The protobuf cluster recording does not have a valid recording uuid
{"msg%{public}.0s":"mapped cluster identifer already exists", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
Tried to run learning, but learning is disabled
{"msg%{public}.0s":"Learning", "LOI UUID":%{private, location:escape_only}s, "ModelType":%{private}d}
No recording events for model type %{public}d
Fingerprint vector empty for model type %d
{"msg%{public}.0s":"model", "size":%{private}lu, "numClusters":%{private}lu, "type":%{private}d}
{"msg%{public}.0s":"modelFingerprint", "recordingUUID":%{private, location:escape_only}s, "clusterUUID":%{private, location:escape_only}s, "size":%{private}lu, "duration":%{private}d, "start":%{private}d, "end":%{private}d}
Learning cancelled because %{private}s
Model generated successfully for type %{public}d
#Warning Model was not generated properly. Inserted: %{public}d, Flushed: %{public}d
No models were generated for model type %{public}d
analyzing WiFi channels
no LOIs found
found LOIs
Wifi Channel Histogram generated successfully for type
#Warning Wifi Channel Histogram was not generated properly. Inserted: %{public}d, Flushed: %{public}d
{"msg%{public}.0s":"Invalid model index", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
{"msg%{public}.0s":"Failed to get a long value for key", "key":%{public, location:escape_only}s, "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
Database is not connected so we can't intialize our table
Failed to execute statement. %{public}s
{"msg%{public}.0s":"Expecting some UUIDs to be passed in", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
#Warning Table is not valid so we can't numLocalizationScansBetweenTimes
#Warning Table is not valid so we can't numRecordingScansBetweenTimes
{"msg%{public}.0s":"Assigning a negative value to an unsigned type is probably not what you intended", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
{"msg%{public}.0s":"Trying to assign a value that is bigger than the provided type can hold", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
Localizer has invalid model. Returning only the null microlocation
Localizer doesn't have any WiFi measurements to use. Returning a uniform distribution across all known microlocations
{"msg%{public}.0s":"testFingerprint", "size":%{private}lu, "duration":%{private}d, "start":%{private}d, "end":%{private}d}
Skipping model type %{private}d because it is invalid
#Warning microlocation probability vector should sum to 1.0 %{public}f
Told to reload the model for the current LOI but we don't have a current LOI. Ignoring request
Reloaded a new model for LOI: %{private}s
#Warning Told to reload the model but it is invalid. Not changing current model
{"msg%{public}.0s":"TimeProfile", "action":%{public, location:escape_only}s, "durationSecs":%{public}d}
#Warning microlocation probability should be non-negative %{public}f
#Warning Unable to mark activity as %{public}ld. current state is %{public}ld
Checking in for %{public}s
prunedWifiMap size, %{public}lu,currentTime, %{public}f
access point results, t, %{private}f, mac, 0x%{private}012llx, exp, %{private}f, std, %{private}f, valid Samples, %{private}d, invalid Samples, %{private}d, settled Feature, %{private}.2f
access point results, overall Duty Cycle, %{public}f
Settled State, %{public}hu, PassCount,%{public}d, measuredOverallDutyCycle,%{public}f
Removing 0x%{private}012llx at time:%{private}f from time %{private}f
{"msg%{public}.0s":"Expecting a wifi channel histogram", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
{"msg%{public}.0s":"Computing distances between datatype not supported", "datatype":%{public}d, "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
{"msg%{public}.0s":"index out of bounds", "ii":%{public}llu, "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
{"msg%{public}.0s":"did not expect measurement type", "measurement type":%{private}d, "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
{"msg%{public}.0s":"Can't find a model type that corresponds to string", "string":%{private, location:escape_only}s, "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
{"msg%{public}.0s":"Cannot localize on invalid model!", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
{"msg%{public}.0s":"Unsupported reducer function", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
#Warning Can't insert because the database is invalid
%{public}s has been written to more than expected. Clearing up disk space. If this log is seen often that indicates a serious problem
{"msg%{public}.0s":"Don't know what state to advance to. You must call advance() with a state", "currentState":%{public, location:escape_only}s, "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
{"msg%{public}.0s":"Can't advance to this state", "currentState":%{public, location:escape_only}s, "providedNextState":%{public, location:escape_only}s, "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
{"msg%{public}.0s":"Must have an LOI to move into this state", "currentState":%{public, location:escape_only}s, "providedNextState":%{public, location:escape_only}s, "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
Advanced from %{public}s to %{public}s
{"msg%{public}.0s":"Can't reverse anymore - already in a terminating state", "currentState":%{public, location:escape_only}s, "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
Reversed from %{public}s to %{public}s
Updating localizing scan strategy
Updating recording scan strategy
Settings updated so updating wifi strategies and checking enabled flags
MicroLocations are not enabled, so it won't start
Starting MicroLocation provider
Attempting to start MicroLocations but we're already started. In state '%{public}s'
Stopping MicroLocations
Requested to localize but there aren't any interested clients. Ignoring request
Notifier is not in a state where it can localize. It's in %{public}s. Ignoring request
Got request to localize but we don't know what LOI we're in so ignoring the request
{"msg%{public}.0s":"Not in a good state to start spectating", "state":%{public, location:escape_only}s, "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
Starting spectating mode
No LOI set so not transitioning to spectating
{"msg%{public}.0s":"Should not be localizing if there are no clients interested", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
{"msg%{public}.0s":"Should not be in this state if localizing", "state":%{public, location:escape_only}s, "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
Localization started
Localization stopped
Not recording since we're in low power mode
Received a recording trigger but we're not settled
{"msg%{public}.0s":"Should not be recording if there are no clients interested", "state":%{public, location:escape_only}s, "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
Recording started
Rolling back recording because we weren't fully settled
Recording stopped
{"msg%{public}.0s":"Should not be stopping recording in this state", "state":%{public, location:escape_only}s, "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
{"msg%{public}.0s":"Asking for HomeKit scan type in incorrect state", "state":%{public, location:escape_only}s, "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
Model Type %{private}d disabled in settings
No model types are supported so no recording events are supported
Enabling recording trigger %{public}u
Got an LOI from an old request. Request ID: %{public}s. Current request ID: %{public}s
Setting the current LOI to %{private}s
No model types supported for this LOI type %{private}s
Not setting the LOI to %{public}s since we're in %{public}s state. Current LOI is %{private}s
{"msg%{public}.0s":"Should not be getting a current LOI string in this state", "state":%{public, location:escape_only}s, "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
{"msg%{public}.0s":"Receiving wifi notifications but we shouldn't be subscribed to them!", "state":%{public, location:escape_only}s, "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
Receiving ATV notifications but we shouldn't be subscribed to them! State %{public}s
{"msg%{public}.0s":"Should not be starting a recording in this state", "state":%{public, location:escape_only}s, "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
Got request to reset Location data. Dropping microlocation tables
{"msg%{public}.0s":"appLaunch", "bundleId":%{private, location:escape_only}s}
Force Recording received
First Wake of Day received
Not recording because our state is %{private}s
Receiving homekit notifications but we shouldn't be subscribed to them! State %{public}s
{"msg%{public}.0s":"HomeKit Scene", "actionSetUUID":%{private, location:escape_only}s, "actionSetName":%{private, location:escape_only}s, "actionSetType":%{private, location:escape_only}s, "sceneName":%{private, location:escape_only}s, "clientName":%{private, location:escape_only}s}
{"msg%{public}.0s":"HomeKit Accessory", "accessoryUUID":%{private, location:escape_only}s, "accessoryName":%{private, location:escape_only}s, "serviceName":%{private, location:escape_only}s, "serviceType":%{private, location:escape_only}s, "characteristicType":%{private, location:escape_only}s}
{"msg%{public}.0s":"Receiving settled state changes but the settled state estimator shouldn't be getting callbacks", "state":%{public, location:escape_only}s, "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
Models have been regenerated. Telling localizer to reload
Localizer results,%{private}s
Don't have a current LOI so not updating the current wifi channel histogram
Don't have a current wifi channel histogram for this LOI %{private}s
Reloaded wifi channel histogram
Enabled state: microlocations defaults enabled: %{public}d; location services enabled: %{public}d; any system service enabled: %{public}d; overall enabled: %{public}d
MicroLocations have been disabled. Clients will no longer get notifications until we are enabled again.
MicroLocations are now re-enabled. Clients should begin getting notifications again
{"msg%{public}.0s":"CFType must be a CFBoolean to convert to a bool", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
{"msg%{public}.0s":"AppleTV detected", "rssi":%{private}d, "uuid":%{private, location:escape_only}s, "ipv4":%{private, location:escape_only}s, "channel":%{private}d}
{"msg%{public}.0s":"HomeKit accessory detected", "timestamp":"%{private}f", "truncatedUUID":%{private, location:escape_only}s, "rssi":%{private}d, "category":%{private}d}
{"msg%{public}.0s":"json string is invalid", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
{"msg%{public}.0s":"This measurement is not tied to a unique id so it can't be used in a hash table", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
#Warning The protobuf fingerprint does not have a valid recording uuid
{"msg%{public}.0s":"This fingerprint does not have any measurements, you have probably done something wrong", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
{"msg%{public}.0s":"Minimum scan time difference must be less than the maximum", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
{"msg%{public}.0s":"No Recording Events provided", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
A measurement's recording UUID does not have a corresponding event entry
{"msg%{public}.0s":"fingerprintVector size is not either zero or one", "size":%{public}llu, "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
{"msg%{public}.0s":"Accumulating datatype not supported", "datatype":%{public}d, "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
{"msg%{public}.0s":"fAccumulatedWeight is not positive", "accumulated weight":"%{public}f", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
{"msg%{public}.0s":"Reducing datatype not supported", "datatype":%{public}d, "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
Sucessfully created table if necessary: %{private}s
Failed to bind on INSERT OR REPLACE with sql %{private}s
#Warning Table is not valid so we can't select all LOIs
{"msg%{public}.0s":"No event types passed in", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
Data source cancelled learning
#Warning Database is not connected so we can't intialize our table
Failed to create table: %{public}s
Sucessfully created table if necessary: %{public}s
#Warning Table is not valid so we can't insert or replace
Failed to bind on INSERT OR REPLACE for sql %{private}s
Failed to execute statement. %{private}s
#Warning Table is not valid so we can't select all
#Warning Table is not valid so we can't get the most recent model
#Warning Table is not valid so we can't deleteUnneededModels()
Keeping %{public}d models per LOI per model type
#Warning Table is not valid so we can't deleteOldestRows
Error converting database values. %{public}s
CL: CLCoarseCellTilesManager::onClientNotification
{"msg%{public}.0s":"CLCoarseCellTilesManager::onClientNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLCoarseCellTilesManager::onDataProtectionNotification
{"msg%{public}.0s":"CLCoarseCellTilesManager::onDataProtectionNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLCoarseCellTilesManager::onCompanionNotification
{"msg%{public}.0s":"CLCoarseCellTilesManager::onCompanionNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLCoarseCellTilesManager::onStatusNotification
{"msg%{public}.0s":"CLCoarseCellTilesManager::onStatusNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLCoarseCellTilesManagerExternal::onCleanupAgedTiles
{"msg%{public}.0s":"CLCoarseCellTilesManagerExternal::onCleanupAgedTiles", "event":%{public, location:escape_only}s, "this":"%{public}p"}
Error in numberOfMeasurements,%zu
Error in rangeIndex calculation, rangeIndex,%d
Error in index calculation, tableIndex,%d
Walk, WorkRate, %f, distance(m), %f, duration(s), %f, mets, %f, fMetsScaling, %f, endTime, %f, currentPace, %f, isStroller, %d, metsStrollerCorrected, %f
Walk, WorkRate, Grade type, %d, vertical speed %f, interval %f, workrate %f, mets %f, mets + grade %f, percent grade %f 
Walk,fitness machine,computeTime,%.3f,startTime,%.3f,wr,%f,vertSpeed,%f,mets,%f
Historical-Distributions, loiUuid, %s, style, %d, poolLength, %f, median, %f, mean, %f, stddev, %f, min, %f, max, %f, samples, %d, prctile10, %f, prctile90, %f, uuid, %s
Historical median turns per session, median, %f, Nsessions, %lu
Set first session entry
Did not successfully load state from db!
Cannot yet set first swim session entry
Got %d swimming LOIs.
Checking swimming LOI with id '%s'.
Found swimming distributions for LOI with id '%s'.
Failure to store lap due to database inaccessibility.
@GtsSync, Unexpected change type, %{public}ld, set
@GtsSync, CsSerial, dataFromChange, isKind, %{public}d
@GtsSync, CsSerial, changeFromData
@GtsFlow, CS, startSession, 2
@GtsFlow, CS, endSession, 6
@GtsSync, CsService, serviceDidPairDevice, state, %{public}c
@GtsSync, CsService, serviceDidUnpairDevice, state, %{public}c
@GtsSync, CsError, 2, service, %{public}s, underlying, %{public}s
@GtsSync, CsSession, enqueue failed
@GtsFlow, CS, enqueueComplete, 4
@GtsSync, CsSession, applyChanges, %{public}lu
@GtsSync, CsSession, More than 1 incoming change, %{public}lu, #CloneMe
@GtsSync, CsError, 0, didEndWithError, %{public}s, underlying, %{public}s
@GtsFlow, CS, sessionDidEnd, 5, error, %{public}d, synctrap, %{public}d
@GtsFlow, PS, syncDidCompleteTx, 2
@GtsSync, CsSession, resetDataStoreWithError
@GtsSync, CsService, willSwitchPairing, old, %{public}s, new, %{public}s
@GtsSync, CsService, didSwitchPairing, old, %{public}s, new, %{public}s
@GtsSync, PsCoord, beginSyncSession, %{public}lu
@GtsFlow, PS, handleSyncTrapTurn%s, 1
@GtsFlow, PS, syncDidCompleteTx, 2, skipped
@GtsSync, PsCoord, didInvalidateSyncSession, %{public}d
@GtsFlow, PS, didInvalidateSession, 3, restriction, %{public}d
@GtsSync, PsCoord, syncCoordinatorDidChangeSyncRestriction, %{public}d
@GtsSync, PsCoord, RestrictionUnknown, %{public}ld, #CloneMe
@GtsSync, PsObserver, initialSyncDidCompleteForPairingID
@GtsSync, PsObserver, syncDidCompleteForPairingID
@GtsFlow, PS, syncDidCompleteRx, 4
@GtsSync, PsObserver, syncDidResetForPairingID
@GtsSync, PsObserver, initialSyncStateObserverClientCanRetryFailedRequests
@GtsAwd, plist, error, load, %{public}lu
@GtsAwd, plist, clear, %{public}.1f, thresh, %{public}.0f, last, %{public}.1f
@GtsAwd, plist, error, time, %{public}.1f, now, %.1f
@GtsAwd, started, %{public}d
@GtsAwd, request, tiles, %{public}d, total, %{public}d, sessions, %{public}d
@GtsAwd, serialized, %{public}d, totalmb, %{public}.1f
@GtsAwd, snap, %{public}s, sessions, %{public}d, empty, %{public}d, completed, %{public}d, errored, %{public}d, requested, %{public}d, synced, %{public}d, sizemb, %{public}.1f, week, %{public}d, %{public}.1f, sinceweekly, %{public}0.1f, reset, %{public}d, lastSave, %{public}0.1f, %{public}0.1f
@GtsInit, CG, %{public}d, %{public}d, preDay, %{public}d, rate, %{public}0.0f, state, %{public}d, %{public}d, %{public}c
@GtsTimer, fired, %{public}s
@GtsMgr, dtor
@GtsInit, PsObjects failed, C, %{public}d, O, %{public}d
@GtsInit, CsObjects failed
@GtsMgr, release
@GtsSync, CsError, 1, resume, %{public}s
@GtsSync, since last switched, hours, %{public}0.1f, days, %{public}0.1f
@GtsMgr, skip SyncTrap, days inactive, %{public}0.1f, thresh, %{public}0.1f, pending, %{public}d
@GtsFlow, CS, setNeedsReset, 1, BeginPair, state, %{public}c, %{public}c, queuewas, %{public}ld, inactive, %{public}0.1f
@GtsSync, PsCoord, RestrictionLimitPush
@GtsSync, PsCoord, RestrictionNone
@GtsMgr, restriction, state was, %{public}c, now, %{public}c, restricted, %{public}d
@GtsMgr, Mismatching keys, syncId, %{public}s, request, %{public}s
@GtsMgr, Crossing sessions, %{public}c, WARNING
@GtsManif, CompTx, %{public}ld
@GtsMgr, Unexpected Companion startSession flow, type, %{public}d, preDaytona, %{public}d
@GtsSync, CsService, startSession, %{public}c, mdin, %{public}ld, queue, %{public}ld, mdout, %{public}ld
@GtsManif, GizRx, %{public}ld, tilesInMap, %{public}ld
@GtsManif, GizTx, %{public}ld
@GtsMgr, Unexpected Gizmo startSession flow, type, %{public}c, hasIn, %{public}d, WARNING
@GtsMgr, handleSessionDidEnd, error, %{public}d, %{public}d, change, %{public}c, pending, %{public}d, psActive, %{public}d, syncState, %{public}c, queue, %{public}ld, exchanged, %{public}d
@GtsManif, nil request
@GtsManif, BadId, formG, %{public}s, #CloneMe
@GtsManif, GizRequest, %{public}s, found, %{public}d, cggen, %{public}0.1f, %{public}0.1f, refresh, %{public}d, ReqSize, %{public}ld
@GtsManif, GizMetaRequest
@GtsManif, CompRx, %{public}ld, queue, %{public}lu, metadata
@GtsManif, BadId, enqueueC, %{public}s, #CloneMe
Assert Failed, %s, %d, %s
@GtsManif, CompReply, %s, have, %{public}d
@GtsFlow, CS, metadataX, 3
@GtsFlow, CS, enqueueChanges, 3, Manifest, %{public}c
@GtsFlow, CS, enqueueChanges, 3, TileData, %{public}c, queue, %{public}ld
@GtsSync, CsSession, %{public}c, llsw, %{private}.2lf, %{private}.2lf, queue, %{public}ld
@GtsFlow, CS, enqueueChanges, 3, SyncTrap
@GtsFlow, CS, enqueueChanges, 3, Unexpected change type, %{public}c
@GtsSync, enqueue return, change, %{public}d, complete, %{public}d, large, %{public}d
@GtsMgr, change, syncId, %{public}s, type, %{public}ld, preDaytona, %{public}d
@GtsCont, change with no data!!!
@GtsMgr, SyncTrapEnd, oldstate, %{public}c, preDay, %{public}d
@GtsMgr, willSwitch, new, %{public}s, days inactive, %{public}0.1f
@GtsMgr, handlePairSwitch, ids ,%{public}d, %{public}d, resume/suspend, %{public}c, state, %{public}c, %{public}c, restricted, %{public}d, inactive, %{public}0.1f
@GtsSync, CsSync, handleServiceError, %{public}c
@GtsGiz, reclearing
@GtsMgr, Nearby, queue, %{public}lu, sessionErrors, %{public}d
@GtsCont, ToggleReset, %{public}d, queuewas, %{public}ld
@GtsGiz, reclear pending
@GtsCont, %{public}s, llsw, %{private}.2lf, %{private}.2lf
@GtsPair, skipevent, add, blocking sync state, %{public}c
@GtsCont, replaceadd, llsw, %{private}.2lf, %{private}.2lf, size, %{public}ld
@GtsCont, add, llsw, %{private}.2lf, %{private}.2lf, size, %{public}ld, current, {public}%d
@GtsTimer, nextfire, %{public}.0f, %{public}s, state, %{public}c
@GtsManif, return, not companion
@GtsManif, check, %{public}s, state, %{public}d, %{public}c, %{public}lu, sync, %{public}lu
@GtsManif, skip, %{public}s, state, %{public}d, sync, %{public}d
@GtsFlow, CS, setHasChanges, 1, SendManifest
@GtsManif, PrepTx, %{public}s, tiles, %{public}lu, %d, currentOnly, %{public}d
@GtsManif, entry, %{private}s, gentime, %{public}.1f
@GtsCont, addlost, llsw, %{private}.2lf, %{private}.2lf
@GtsComp, add, llsw, %{private}.2lf, %{private}.2lf, tile_x, %{private}d, tile_y, %{private}d, tilesize, %{public}ld, queue, %{public}lu
@GtsManif, CompRx, %{public}d, queue, %{public}lu
@GtsManif, BadId, gizmoRequestC, %{private}s, %{public}d, of, %{public}lu, #CloneMe
@GtsManif, CompReply, %{private}s, have, %{public}d
@GtsMgr, CsSync, setHasChanges, %{public}d, %{public}lu
@GtsManif, skip, %{public}s, state, %{public}c, indexed, %{public}d, ls, %{public}d
@GtsManif, GizmoRequest, %{public}s
@GtsLock, drop add on LS off
@GtsSync, drop older add, timestamp, %{public}0.1f, toggle/reset, %{public}0.1f
@GtsError, Adding non-Wifi tile, %{public}d, #CloneMe
@GtsGiz, add, llsw, %{private}.2lf, %{private}.2lf, sizes, %{public}lu, %{public}lu
@TileList, wifi, add, llsw, %{private}.2lf, %{private}.2lf, sync, size, %{public}lu
@GtsLock, add, llsw, %{private}.2lf, %{private}.2lf, mapsize, %{public}ld
Timeout (after 5 seconds) occurred during wait!
Warning - invoking %@ on main may lead to deadlock.
TCCServiceMotionAccess timeouts!
Response invalid.
#Notice URL must specify a file.
#Notice File already exists at URL.
#Notice URL must point to a file path which you have access to write to.
#Notice Unable to get file handle for URL %{public}s: %{public}s
{"msg%{public}.0s":"#Stream Changing state", "new state":%{public, location:CLStreamingAwareLocationProviderLocalGPSStateMachine::LocationSourceState}lld, "old state":%{public, location:CLStreamingAwareLocationProviderLocalGPSStateMachine::LocationSourceState}lld}
{"msg%{public}.0s":"#Stream Clearing motion sample data"}
{"msg%{public}.0s":"#Stream Setting motion alarm state", "enabled":%{public}d}
{"msg%{public}.0s":"#Stream Starting providers", "state":%{public, location:CLStreamingAwareLocationProviderLocalGPSStateMachine::LocationSourceState}lld}
{"msg%{public}.0s":"#Stream Determining state", "current state":%{public, location:CLStreamingAwareLocationProviderLocalGPSStateMachine::LocationSourceState}lld}
{"msg%{public}.0s":"#Stream Received motion rich location notification", "source":%{public, location:CLStreamingAwareLocationProviderStateMachine::LocationSource}lld, "notification":%{public, location:CLLocationProvider_Type::Notification}lld, "motion data":%{public, location:CLLocationProvider_Type::MotionDetected}lld, "timestamp":"%{public}f"}
{"msg%{public}.0s":"#Stream Workout begin"}
{"msg%{public}.0s":"#Stream Workout end"}
{"msg%{public}.0s":"#Stream Motion alarm fired", "detected motion":%{public, location:CLLocationProvider_Type::MotionDetected}lld}
{"msg%{public}.0s":"#Stream In pedestrian workout, Motion compatible?", "remote motion":%{public, location:CLLocationProvider_Type::MotionDetected}lld, "sample time_s":"%{public}.09f", "now_s":"%{public}.09f", "prefer remote":%{public}hhd, "prefer local":%{public}hhd}
{"msg%{public}.0s":"#Stream Scheduling timer for motion confidence", "now_s":"%{public}.09f", "fire time_s":"%{public}.09f", "delta_s":"%{public}.09f"}
{"msg%{public}.0s":"#Stream Refreshing location request"}
{"msg%{public}.0s":"#Stream Unexpected registration", "notification":%{public, location:CLLocationProvider_Type::Notification}lld, "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
Streamed,timestamp,%.3lf,timestampGps,%.3lf,odometer,%.3lf,deltaDist,%.3lf,deltaDistUnc,%.3lf,lat,%.8lf,lon,%.8lf,hunc,%.3lf,alt,%.3lf,vunc,%.3lf,speed,%.3lf,sunc,%.3lf,course,%.3lf,cunc,%.3lf
{"msg%{public}.0s":"#Stream Changing requested granularity", "granularity":%{public, location:CLLocationStreamingGranularity}lld}
{"msg%{public}.0s":"#Stream Missing data", "payload":%{private, location:escape_only}@}
{"msg%{public}.0s":"#Stream Dropping expired location", "timestamp":"%{public}f", "lifespan":"%{public}f"}
{"msg%{public}.0s":"#Stream Assertion count must be non-negative", "count":%{public}d, "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
{"msg%{public}.0s":"#Stream Client took fitness assertion", "before change":%{public}d}
{"msg%{public}.0s":"#Stream Assertion count must be positive", "count":%{public}d, "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
{"msg%{public}.0s":"#Stream Client released fitness assertion", "before change":%{public}d}
{"msg%{public}.0s":"#Stream Client took disablement assertion", "before change":%{public}d}
{"msg%{public}.0s":"#Stream Client released disablement assertion", "before change":%{public}d}
{"msg%{public}.0s":"#Stream Client took emergency enablement assertion", "before change":%{public}d}
{"msg%{public}.0s":"#Stream Client released emergency enablement assertion", "before change":%{public}d}
{"msg%{public}.0s":"Must be overridden", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
{"msg%{public}.0s":"Device motion service is not supported on this platform!", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
Dancing, Compendium METS, METS, %f
MsgEnabledBitMask is %s
CLActivityLoggerWriter open log file filePath is %s, file is %p.
CLActivityLoggerWriter logData, prepare to log %d bytes
CLActivityLoggerWriter failed to log data: %{public}s
CLActivityLogger being constructed.
CLActivityLogger, kNotificationActivityOverride,overrideAction,%d,activity{State,%d,Confidence,%d,MountedState,%d,MountedConfidence,%d,exitState,%d,estExitTime,%f,startTime,%f}
CLActivityLogger,log kNotificationActivityOverride:%s
#Warning CLActivityLogger, Unhandled notification %d
CLActivityLogger, dataCollection setting changed
CL: CLActivityLogger::onFitnessDataCollectionSettingChangedNotification
{"msg%{public}.0s":"CLActivityLogger::onFitnessDataCollectionSettingChangedNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLActivityLogger::onMotionStateMediatorNotification
{"msg%{public}.0s":"CLActivityLogger::onMotionStateMediatorNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
%s, %s, %s, %s, %s, %s, %d, %s, %d, %s, %s
SignificantElevation,startTime,%.3f,endTime,%.3f,ascended,%d,descended,%d
Location services are disabled for motion classification
Motion calibration system service is disabled.
Programmer error, this expiration rule with time %{public}fis not valid.
Aggregating records start %f, count ~%d
Aggregating records stop %f, count ~%d
#Warning Number of records after aggregation is %d and it greatly exceeds the number of records estimated to be needed %d
#Warning No expiration rule was added so the number of records will be unbounded.
Changed from %s to %s:,
#Warning Latest speed is %lf but no information about speed uncertainty
startTime,%f,endTime,%f,numberOfStrokes,%d,strokeType,%d,epochMets,%f,timestamp,%f,speed,%f,metSource,%d,strokeLength,%f,strokeRate,%f,entryStartTime,%f,entryEndTime,%f,distance,%f,scaledMets,%f,historicalTurnsPerSession,%f
***no run loop available***
Changing CLCommon's runloop after it was already established
#Warning Setting CLCommon's runloop after it was already established
CLCommonSetRunLoop, %p
cannot open source file: %{public}s, errno %{public}d
cannot open target file: %{public}s, errno %{public}d
error reading source file: %{public}s
error writing target file: %{public}s
cannot open compression stream: %{public}s, bzerror %{public}d
error writing target file: %{public}s, bzerror: %{public}d
error closing target file: %{public}s, bzerror: %{public}d
CLCommonGzipDecompressFile, can't stat, %{public}s
CLCommonGzipDecompressFile, from, %s, to, %s, size, %llu, cTime, %.1lf, isOK, %d
CLCommonGzipDecompressFile, can't open, file_path_to, %{public}s, errno %{public}d
CLCommonGzipDecompressFile, can't open, file_path_from, %{public}s, errno, %{public}d
CLCommonGzipDecompressFile, error reading source file: %{public}s, errno, %{public}d, read, %{public}d
CLCommonGzipDecompressFile, can't write, %{public}s, errno, %{public}d, write, %{public}zu
CLCommonGzipDecompressFile, from, %s, to, %s, isOK, %d, fileSize, %llu, totalReadBytes, %u, totalWrittenBytes, %u, compression, %.4lf
http date string is converted to timestamp %.3f and adjusted to %.3f by %.3fs RTT (%.3fs diff from systime)
GPS_NETWORK: enabled %d found %d
Timer set loop: %d %f %f %f %f
CLCommonCompareLocationEqualityClient compared two coordinates that were identical other than their reference frames: (%lf, %lf, %d) (%lf, %lf, %d)
#Warning CLCommonGetFileTimestamps, failed to stat file, %s, ret, %d
TILE: delete file, %s
TILE: stat, %s, ret, %d, mtime, %lu, ctime, %lu, size, %lld
TILE: unlink, %s, ret, %d
failed, invalid filename
failedToOpen, errno, %d
failed,fd,%d,origProtectionClass,%d,newProtectionClass,%d,ret,%d,errno,%d
done,fd,%d,origProtectionClass,%d,newProtectionClass,%d,ret,%d
processed %p %d to (%s)
could not create new mutable dictionary
could not deserialize property list from %{public}s
file %s does not exist... clearing, error, %s
#Warning Error reading file %{public}s: %{public}s
Could not create NSURL for file: %{public}s
Could not write data to disk %{public}s
Could not serialize data for file %{public}s
key %{public}s does not have element %{public}d in array of size %{public}ld
key %{public}s does not have element %{public}d in non-array type %{public}lu
type IDs do not match for key %{public}s - %{public}lu vs %{public}lu
specified index is out of range for key %{public}s (%{public}d of %{public}ld)
specified index %{public}d not applicable to type %{public}lu for key %{public}s
could not create cf type for key %{public}s
could not create write stream
could not open write stream
could not write data, error code, %{public}ld, error domain, %{public}s
could not create intermediate property list - %{public}ld (%{public}s)
%s = <dictionary (%ld entries)>:
%s = %s
%s = %0.6f
%s = %d
%s = <unhandled value type %lu>
could not get value
type IDs do not match - %{public}lu vs %{public}lu
could not convert to C string
can't convert %{public}u data bytes
type IDs do not match - %{public}lu
{"msg%{public}.0s":"Ignoring new #filedownload request with invalid timeout", "Timeout_s":"%{public}.09f"}
{"msg%{public}.0s":"Ignoring new #filedownload request with invalid src string", "URLString":%{private, location:escape_only}s}
{"msg%{public}.0s":"Ignoring new #filedownload request with invalid src url", "URL":%{private, location:escape_only}@}
{"msg%{public}.0s":"Dropping uncancelled #filedownload to service new request", "OriginalRequest":%{private, location:escape_only}@, "NewRequest":%{private, location:escape_only}@}
{"msg%{public}.0s":"Ignoring new #filedownload request with invalid dst string", "NewRequest":%{private, location:escape_only}@, "LocalFileString":%{private, location:escape_only}s}
{"msg%{public}.0s":"Created task for #filedownload request", "NewRequest":%{private, location:escape_only}@, "LocalFile":%{private, location:escape_only}@}
{"msg%{public}.0s":"Could not create task for #filedownload request", "NewRequest":%{private, location:escape_only}@, "LocalFile":%{private, location:escape_only}@}
{"msg%{public}.0s":"Cancelling task for #filedownload request", "OriginalRequest":%{private, location:escape_only}@}
{"msg%{public}.0s":"Error on #filedownload task completion", "Response":%{private, location:escape_only}@, "LocalFile":%{private, location:escape_only}@, "Error":%{private, location:escape_only}@}
{"msg%{public}.0s":"Protocol error on #filedownload task completion", "Response":%{private, location:escape_only}@, "LocalFile":%{private, location:escape_only}@, "ResultCode":%{private}d}
{"msg%{public}.0s":"#filedownload task completed successfully", "Response":%{private, location:escape_only}@, "LocalFile":%{private, location:escape_only}@}
{"msg%{public}.0s":"Error persisting file for completed #filedownload task", "Response":%{private, location:escape_only}@, "LocalFile":%{private, location:escape_only}@, "LostAndFile":%{private, location:escape_only}@, "TempFile":%{private, location:escape_only}@, "Error":%{private, location:escape_only}@}
PowerLog is not enabled so not writing microlocation metrics
Wrote microlocation metrics to power log: %{private}s
SedentaryAlarm,Error starting,client,%{public}s,fitness tracking,%{public}d
SedentaryAlarm,Error starting,client,%{public}s,armed,%{public}d
SedentaryAlarm,START,client,%s,offset,%d,period,%d,reminder,%d,autoReschedule,%d
SedentaryAlarm,STOP
SedentaryAlarm,STOP,fitness tracking,%d
SedentaryAlarm,InVehicleReminder,now,%.3f,motionStateTime,%.3f
CL: CLSedentaryTimerNotifier::onFitnessTrackingNotification
{"msg%{public}.0s":"CLSedentaryTimerNotifier::onFitnessTrackingNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLSedentaryTimerNotifier::onMotionStateObserverNotification
{"msg%{public}.0s":"CLSedentaryTimerNotifier::onMotionStateObserverNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
Maximum number of entries exceeded, throwing out oldest entry.
#Notice CL database error, invalid time, %{public}lf
Restoring session timer since we have a current activity.
Invalid data received.
Timing out session since we have not heard a response in %f seconds.
Starting update timer.
MotionStateObserver,in-vehicle tracking,START
MotionStateObserver,in-vehicle tracking,RESCHED,now,%.3f,alarmCount,%d
MotionStateObserver,in-vehicle tracking,STOP
MESCAL: Could not derive hardware info for SAPInit
MESCAL: SAPSign failed with: %{public}ld
MESCAL: churn failure: signing disabled
MESCAL: SAPInit failed with: %{public}ld
MESCAL: SAPExchange failed with: %{public}ld
nil identifier given to CLKeychainItemWrapper
nil dictionary passed for converstion
Conversion of dictionary without kSecValueData key requested.
{"msg%{public}.0s":"Serious error, no matching item found in the keychain.", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
Couldn't update the Keychain Item.
Couldn't add the Keychain Item.
CL: CLNetworkLocationProvider::onStatusNotification
{"msg%{public}.0s":"CLNetworkLocationProvider::onStatusNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLNetworkLocationProvider::onManagerNotification
{"msg%{public}.0s":"CLNetworkLocationProvider::onManagerNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLNetworkLocationProvider::onCompanionNotification
{"msg%{public}.0s":"CLNetworkLocationProvider::onCompanionNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLNetworkLocationProvider::onDataProtectionNotification
{"msg%{public}.0s":"CLNetworkLocationProvider::onDataProtectionNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
{"msg%{public}.0s":"Invalid batched location", "location":%{private, location:CLClientLocation}.*P}
{"msg%{public}.0s":"Batched locations are supposed to be ordered from oldest to more recent", "t0":"%{private}f", "t1":"%{private}f"}
WsbCalc, filter, live, %{public}lu, was %{public}lu
WsbCalc, filter, reproc, %{public}lu, was %{public}lu
#Warning TIMEOUT: Waited %f seconds to aquire lock '%s' (%p)
#Warning TIMEOUT: Held lock '%s' (%p) for %f seconds
{"msg%{public}.0s":"#Stream Nearby status change", "is nearby":%{public}d}
{"msg%{public}.0s":"#Stream Dropping message due to incompatible remote device"}
{"msg%{public}.0s":"#Stream No error, but also no identifier", "message type":%{public, location:escape_only}s}
{"msg%{public}.0s":"#warning #Stream Got error from IDS", "error":%{public, location:escape_only}@, "message type":%{public, location:escape_only}s}
{"msg%{public}.0s":"#Stream Handed off message to IDS", "message type":%{public, location:escape_only}s, "identifier":%{public, location:escape_only}s}
{"msg%{public}.0s":"#Stream Missing message type", "message":%{private, location:escape_only}@}
{"msg%{public}.0s":"#Stream Got message", "type":%{public, location:escape_only}s}
{"msg%{public}.0s":"#Stream Received message of unsupported version", "type":%{public, location:escape_only}s, "declared version":%{public}d, "minimum version":%{public}d, "maximum version":%{public}d}
{"msg%{public}.0s":"#Stream Missing identifier"}
{"msg%{public}.0s":"#warning #Stream Send failure", "identifier":%{public, location:escape_only}s, "success":%{public}d, "error":%{public, location:escape_only}@, "type":%{public, location:escape_only}s}
{"msg%{public}.0s":"#Stream Send success", "identifier":%{public, location:escape_only}s, "type":%{public, location:escape_only}s}
***not supported***
<empty>
Attempt to set key %{public}s for read-only preferences %{public}s/%{public}s!
Empty payload, returning
Poll count underflow!!!
%{public}s: Need to override this method
Trying to set the same state '%{public}s' for device '%{public}s'
could not store cached data 
#Warning clearing location cache
CL: CLDaemonCache::onStoreTimer
{"msg%{public}.0s":"CLDaemonCache::onStoreTimer", "event":%{public, location:escape_only}s, "this":"%{public}p"}
Starting device motion service 0x%x
GyroUpdateInterval,%.4f,AccelerometerUpdateInterval,%.4f
Dumped gyro cal database with id %@
Stopping device motion service 0x%x
[CLSensorFusionService] q.x,%10.10f,q.y,%10.10f,q.z,%10.10f,q.w,%10.10f,userAccel.x,%10.10f,userAccel.y,%10.10f,userAccel.z,%10.10f,rotationRate.x,%10.10f,rotationRate.y,%10.10f,rotationRate.z,%10.10f,magneticField.x,%10.10f,magneticField.y,%10.10f,magneticField.z,%10.10f,heading,%.3f,accuracy,%.3f,level,%d,mode,%d,status,%#02x,clientID,%d,timestamp,%lf,now,%lf
Set device motion sensor status %ld
SAMSSR: Resolved adamId, %s, name, %s, bundleId, %s, developerName, %s.
SAMSSR: Added adamId, %s, to cache.
SAMSSR: Missing response for adamId, %s in lookup request but not in the response
SAMSSR: Result for adamid, %ld, in cache.
SAMSSR: Result for adamid, %ld, in cache but expired.
SAMSSR: Result for adamid, %ld, not in cache.
SAMSSR: Error performing lookup, %s
SAMSSR: Error parsing lookup response, %s
SAMSSR: Removing adamId, %ld, from cache since the entry has expired.
invalid hunc
invalid inputs
fVarEast <= 0.0
fVarNorth <= 0.0
fVarEastNorth < 0.0
CLMM, Unexpected determinant of 0
determinant <= 0.0
could not get mutable store path for type, %{public}d
Unknown persistent domain: %{public}d
#Warning persistent store %s has been modified - refreshing will lose changes
#Warning data set %s is not changeable - not storing
%s stored to disk %s
scheduling to auto-store %s every %.3fs
disabling auto-store for %s
#Warning Got a request for a scan but no one is interested. Ignoring
found device %{private}@, data: %{private}@, rssi: %{private}d, type: %{private}d
#Warning Got a device notification but not device data
{"msg%{public}.0s":"No way to convert an internal unknown enum value to a valid WPHomeKitType", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
#Warning Found invalid HomeKit device. Data length was invalid
#Warning Found invalid HomeKit device: %{private}s
{"msg%{public}.0s":"attempt to reset modem", "success":%{public}hhd, "reason":%{private, location:escape_only}s}
CELL_LOC: fHardwareType, %d
sending notification for %s
Registration status: %d
{"msg%{public}.0s":"DaemonNotReady for CT SPI", "fDaemonReady":%{public}hhd}
currently not connected to telephony service
enabled = %d success = %d
Refresh Cell Monitor
Request to decode unknown integer is a programmer error
CL: CLTelephonyService::ctTimerCallBack
{"msg%{public}.0s":"CLTelephonyService::ctTimerCallBack", "event":%{public, location:escape_only}s, "this":"%{public}p"}
dCOLLECT: fLogWifiScanResults =%d
dCOLLECT: fWifiDataCollection =%d
WIFI: gBlackListedAP = %s
WifiService, ctor, fDpcSource is NULL
#Warning forcing to use passive WiFi scans only
WRTT: no active listeners
WifiService, getPower, fDpcSource is NULL
WifiService, queryPowerState, fDpcSource is NULL
setExitAndEntryScanNetworks, entry, %lu, exit, %lu
WiFi tracking available now %d (was %d) (%d %d)
WltNotify, Scanner, %s
CL: CLWifiService::onDpcSource
{"msg%{public}.0s":"CLWifiService::onDpcSource", "event":%{public, location:escape_only}s, "this":"%{public}p"}
pause
resume
METS consumed,startTime,%.3f,computeTime,%.3f,now,%.3f,activity,%d, userMets,%f,rawUserMets,%f,rawTruthMets,%f,avgTruthMets,%f,basalMets,%f,duration,%lf,stored,%d,%s
#Warning Popping out an activity since there's no activity associated with current time.  This shouldn't happen
#Warning MET spike,%f,setting to basal,%f
#Warning In-human MET spike,%f,setting to upper bound,%f
{"msg%{public}.0s":"#Stream Transitioned state", "old state":%{public, location:CLStreamingAwareLocationProviderNoLocalGPSStateMachine::LocationSourceState}lld, "new state":%{public, location:CLStreamingAwareLocationProviderNoLocalGPSStateMachine::LocationSourceState}lld}
could not open geomagnetic data file
geomagnetic data file appears to be empty
geomag() encountered an error
geomg1() encountered an error
DisableMotionStateNotifyDefaultsWrite,%d
VEHICULAR: updateVehicularState, wifiAssociated, %d, loi, %d, lowConfLoi, %d, motionHint, %d, gpsHint, %d, basebandHint, %d, wifiHint, %d, btHint, %d
VEHICULAR: start false positive mitigation: wifiAssociated, %d, loi, %d, lowConfLoi, %d, type, %d, motionHint, %d, gpsHint, %d, basebandHint, %d, wifiHint, %d, btHint, %d
VEHICULAR: end false positive mitigation: wifiAssociated, %d, loi, %d, lowConfLoi, %d, type, %d, motionHint, %d, gpsHint, %d, basebandHint, %d, wifiHint, %d, btHint, %d
VEHICULAR: state, %lu, hints, %lu
VEHICULAR: failed notify_register_check, error, %d
VEHICULAR: failed notify_set_state, error, %d
VEHICULAR: successfully updated notification, %@, state, %lu
VEHICULAR: failed notify_post, error, %d
VEHICULAR: successfully posted notification, %@
VEHICULAR HINTS: failed notify_register_check, error, %d
VEHICULAR HINTS: failed notify_set_state, error, %d
VEHICULAR HINTS: successfully updated notification, %@, state, %lu
DOMINANT ACTIVITY: start monitoring dominant activity
DOMINANT ACTIVITY: stop monitoring dominant activity
VEHICULAR: WiFi dis-associated, update vehicular state
VEHICULAR: visit, confidence, high, exit
VEHICULAR: visit, confidence, high, entry
VEHICULAR: visit, confidence, low, exit
VEHICULAR: visit, confidence, low, entry
data reachability is not available - not downloading %s
#Warning could not download from %s to %s
***could not rename %{public}s to %{public}s***
download completed to %s
#Warning could not get modified time for %s
data reachability is not available - not retrying %s
retry count %d, will re-download for %s after delay of %f
%{public}s downloading in progress, cannot change update settings
#Warning update rate %.3fs is shorter than WiFi update rate %.3fs - overriding WiFi update rate
CL: CLFileUpdate::onDownloaded
{"msg%{public}.0s":"CLFileUpdate::onDownloaded", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLFileUpdate::onStatusNotification
{"msg%{public}.0s":"CLFileUpdate::onStatusNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
#Warning "%s"
could not read from %{public}s (errno 0x%{public}x)
"%s": Failed to write entire buffer! (errno 0x%x) written=%d, processed=%d
failed to open device "%s" with fd %d
"%s": Out of buffer space!
Warning: Not implemented.
WRTT: device type,%{public}d
WRTT: request while wifi is off!
WRTT: mgr received request as initiator, timeout, %{public}lf [s]
WRTT: mgr received request as target
WRTT: mgr received cancel session
WRTT: timed out
WRTT: WiFi power %{public}s
#Warning Multiple Peers in request with matching mac address, %s
WRTT: RTT measurements for %{public}ld peer(s)
WRTT: unexpected status code %{public}d (%{public}#x)
WRTT: error status code %{public}d (%{public}#x) reported from WiFi, report kCLErrorPrivateRangingLowLevelError
WRTT: unknown status code %{public}d (%{public}#x)
WRTT: no individual measurements in burst
WRTT,range,%f
{"msg%{public}.0s":"WRTT:", "peer":%{private, location:escape_only}s, "notify":%{public}d, "shouldUnlock":%{public}d, "rangeEstimate":"%{public}f", "threshold":"%{public}f"}
WRTT: recieved Wifi error %{public}ld for %{public}ld peers
%s, %d, %s, %d
startWsbClient
stopWsbClient
ignore wifi association updates within %f seconds
leeched location, %s
disqualified leeched location, type, %d
location timestamp out of order
disqualified leeched location based, horizontal accuracy, %f
disqualified leeched location, age, %f
qualified leeched location, type, %d
first qualifying location
renew previous location
previous location, type, %d, %s
distanceMoved, %f, elapsedTime, %f
drop leeched location within %f sec
accept qualified leeched location, type, %d
outlier rejected: conservativeSpeed, %f, effectiveSpeed, %f, speedUncertainty, %f, distanceMoved, %f, elapsedTime, %f, type, %d
vehicular speed detected, consecutive observations, %d, elapsedTime, %f, lastElapsedTime, %f, delta, %f
conservativeSpeed, %f, effectiveSpeed, %f, speedUncertainty, %f, distanceMoved, %f, elapsedTime, %f, type, %d
VEHICULAR: failed notify_get_state, error, %d
VEHICULAR: failed notify_cancel, error, %d
MotionState, %s, type, %d, conf, %d, mounted, %d, startTime, %f
vehicularStartTime, %f
vehicularLastNoHintsTime, %f
skipping LatencyMetrics, seenNonVehicularState, %d
reset vehicular latency measures
notification ScanCache received %d
wifi associated state, %d
received unhandled WifiService notification %d
received unhandled notification %d
Sending message,type,%d,size,%lu,priority,%ld,fireAndForget,%d,encrypt,%d,bypassConnectionCheck,%d,timeout,%f
timer interval,%f
IDS connection update,status,%d,prevDisconnection,%f,modelID,%s,uniqueIDOverride,%s,localDeviceID,%s
CL: CLCompanionNotifier::onDataProtectionNotification
{"msg%{public}.0s":"CLCompanionNotifier::onDataProtectionNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLCompanionNotifier::onFitnessTrackingNotification
{"msg%{public}.0s":"CLCompanionNotifier::onFitnessTrackingNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLCompanionNotifier::onMotionStateObserverNotification
{"msg%{public}.0s":"CLCompanionNotifier::onMotionStateObserverNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
Query: %s, full table scans: %d, sorts: %d, File: %s
{"msg%{public}.0s":"open", "path":%{public, location:escape_only}s, "protection":%{public}d, "persistence":%{public}d}
{"msg%{public}.0s":"Requested filename", "expected":%{public, location:escape_only}s, "actual":%{public, location:escape_only}s}
{"msg%{public}.0s":"Returned database", "path":%{public, location:escape_only}s}
{"msg%{public}.0s":"#warning Could not open database", "path":%{public, location:escape_only}s, "rc":%{public, location:SqliteResult}.*P}
{"msg%{public}.0s":"Could not open database", "path":%{public, location:escape_only}s, "rc":%{public, location:SqliteResult}.*P}
{"msg%{public}.0s":"#warning Failed to create UUID select statement"}
{"msg%{public}.0s":"initUUID", "path":%{public, location:escape_only}s, "uuid":%{private, location:escape_only}s}
{"msg%{public}.0s":"#warning Failed to create UUID insert statement"}
{"msg%{public}.0s":"UUID initialized", "path":%{public, location:escape_only}s, "uuid":%{private, location:escape_only}s}
{"msg%{public}.0s":"Failed to initialize DB UUID", "path":%{public, location:escape_only}s}
{"msg%{public}.0s":"unknown protection type", "protection":%{public}d}
{"msg%{public}.0s":"unsupported persistence type", "persistence":%{public}d, "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
{"msg%{public}.0s":"unknown persistence type", "persistence":%{public}d}
{"msg%{public}.0s":"could not create path", "path":%{public, location:escape_only}s}
{"msg%{public}.0s":"displaySqlResult", "function":%{public, location:escape_only}s, "rc":%{public, location:SqliteResult}.*P, "query":%{private, location:escape_only}s}
{"msg%{public}.0s":"#warning displaySqlResult", "function":%{public, location:escape_only}s, "rc":%{public, location:SqliteResult}.*P, "query":%{private, location:escape_only}s}
{"msg%{public}.0s":"handleSqlError on read-only db", "path":%{public, location:escape_only}s, "rc":%{public, location:SqliteResult}.*P}
{"msg%{public}.0s":"database error; deleting and exiting", "path":%{public, location:escape_only}s, "rc":%{public, location:SqliteResult}.*P}
{"msg%{public}.0s":"Killing locationd to resolve corrupted database", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
{"msg%{public}.0s":"Could not delete the database with CPSqliteDatabaseDelete()"}
{"msg%{public}.0s":"Falling back to file deletion", "path":%{public, location:escape_only}s}
{"msg%{public}.0s":"could not remove file", "path":%{public, location:escape_only}s, "errno":%{public}d, "error":%{public, location:escape_only}s}
{"msg%{public}.0s":"createTableIfNecessary", "table":%{private, location:escape_only}s, "specificToSerialNumber":%{public}hhd}
{"msg%{public}.0s":"Index already exists; not re-creating", "index":%{private, location:escape_only}s}
{"msg%{public}.0s":"Index already exists but is different; dropping", "index":%{private, location:escape_only}s, "actual":%{private, location:escape_only}s, "expected":%{private, location:escape_only}s}
{"msg%{public}.0s":"Index does not exist; creating", "index":%{private, location:escape_only}s}
{"msg%{public}.0s":"#warning Couldn't create index statement", "table":%{private, location:escape_only}s, "columns":%{public, location:escape_only}s}
{"msg%{public}.0s":"#warning Couldn't create drop index statement", "index":%{private, location:escape_only}s}
{"msg%{public}.0s":"Trigger does not exist", "trigger":%{public, location:escape_only}s}
{"msg%{public}.0s":"#warning Couldn't create drop trigger statement", "trigger":%{public, location:escape_only}s}
{"msg%{public}.0s":"Couldn't create add count trigger statement", "table":%{private, location:escape_only}s}
{"msg%{public}.0s":"Couldn't create select count statement", "table":%{private, location:escape_only}s}
{"msg%{public}.0s":"Couldn't get row count for", "table":%{private, location:escape_only}s}
{"msg%{public}.0s":"Couldn't prepare row count insertion statement"}
{"msg%{public}.0s":"Need at least one column in table", "table":%{private, location:escape_only}s}
{"msg%{public}.0s":"#warning Existing table's column does not match expected", "table":%{private, location:escape_only}s, "index":%{public}d, "expected name":%{public, location:escape_only}s, "expected type":%{public, location:escape_only}s, "expected primary key":%{public}hhd, "actual name":%{public, location:escape_only}s, "actual type":%{public, location:escape_only}s, "actual primary key":%{public}hhd}
{"msg%{public}.0s":"#warning Existing table's schema does not have the same number of columns as the requested schema", "table":%{private, location:escape_only}s}
{"msg%{public}.0s":"#warning Table exists but does not have matching schema", "table":%{private, location:escape_only}s}
{"msg%{public}.0s":"Re-recreating table to fix primary key", "table":%{private, location:escape_only}s}
{"msg%{public}.0s":"Destination name should not be NULL", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
{"msg%{public}.0s":"Did not successfully finish backup", "rc":%{public, location:SqliteResult}.*P}
{"msg%{public}.0s":"Unable to open", "path":%{private, location:escape_only}s}
{"msg%{public}.0s":"Creating table", "table":%{private, location:escape_only}s}
{"msg%{public}.0s":"version and serial number", "table":%{private, location:escape_only}s, "path":%{public, location:escape_only}s, "rc":%{public, location:SqliteResult}.*P, "version":%{public, location:escape_only}s, "serial number":%{private, location:escape_only}s}
{"msg%{public}.0s":"Created row in TableInfo", "table":%{private, location:escape_only}s}
{"msg%{public}.0s":"Dropping table", "table":%{private, location:escape_only}s}
{"msg%{public}.0s":"Invalid parameters", "table":%{private, location:escape_only}s, "columnNames[0]":%{public, location:escape_only}s}
{"msg%{public}.0s":"Invalid parameters", "table":%{private, location:escape_only}s, "columnNames[0]":%{public, location:escape_only}s, "key":%{public, location:escape_only}s}
{"msg%{public}.0s":"Invalid parameters", "table":%{private, location:escape_only}s, "key":%{public, location:escape_only}s}
{"msg%{public}.0s":"Could not prepare statement", "query":%{private, location:escape_only}s, "rc":%{public, location:SqliteResult}.*P, "errmsg":%{private, location:escape_only}s}
{"msg%{public}.0s":"Preparing statement for database", "query":%{private, location:escape_only}s, "path":%{public, location:escape_only}s}
{"msg%{public}.0s":"Prepared statement", "statement":"%{public}p"}
{"msg%{public}.0s":"beginTransaction", "path":%{public, location:escape_only}s, "count":%{public}d, "rc":%{public, location:SqliteResult}.*P}
{"msg%{public}.0s":"endTransaction", "path":%{public, location:escape_only}s, "count":%{public}d, "rc":%{public, location:SqliteResult}.*P}
{"msg%{public}.0s":"rollbackTransaction", "path":%{public, location:escape_only}s, "count":%{public}d, "rc":%{public, location:SqliteResult}.*P}
{"msg%{public}.0s":"We should only have one transaction at a time and thus should be back at zero", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
{"msg%{public}.0s":"#warning Finalized statement previously failed", "rc":%{public, location:SqliteResult}.*P, "errmsg":%{private, location:escape_only}s}
{"msg%{public}.0s":"Could not find prepared statement", "statement":"%{public}p"}
{"msg%{public}.0s":"start vacuum", "page_count":%{public}lld, "freelist_count":%{public}lld, "path":%{public, location:escape_only}s}
{"msg%{public}.0s":"vacuum", "event":%{public, location:escape_only}s, "begin_mach":%{public}llu, "end_mach":%{public}llu, "elapsed_s":"%{public}.09f", "rc":%{public, location:SqliteResult}.*P, "page_count":%{public}lld, "freelist_count":%{public}lld, "path":%{public, location:escape_only}s}
{"msg%{public}.0s":"incrementalVacuum", "event":%{public, location:escape_only}s, "begin_mach":%{public}llu, "end_mach":%{public}llu, "elapsed_s":"%{public}.09f", "pages":%{public}lld, "path":%{public, location:escape_only}s}
{"msg%{public}.0s":"incrementalVacuum", "result":%{public}d}
{"msg%{public}.0s":"Attempt to reduceFreePages on readonly database", "path":%{public, location:escape_only}s}
{"msg%{public}.0s":"reduceFreePages", "event":%{public, location:escape_only}s, "begin_mach":%{public}llu, "end_mach":%{public}llu, "elapsed_s":"%{public}.09f"}
{"msg%{public}.0s":"reduceFreePages", "path":%{public, location:escape_only}s, "page_count":%{public}lld, "freelist_count":%{public}lld, "loadFactor":"%{public}f"}
{"msg%{public}.0s":"Cannot reduceFreePages", "path":%{public, location:escape_only}s}
{"msg%{public}.0s":"setIncrementalVacuumEnabled", "enabled":%{public}hhd, "rc":%{public, location:SqliteResult}.*P}
{"msg%{public}.0s":"Actual auto-vacuum state does not match desired state", "actual":%{public}d, "expected":%{public}d, "vacuumNow":%{public}hhd}
{"msg%{public}.0s":"Must provide a table name"}
{"msg%{public}.0s":"Table does not exist but its metadata does", "table":%{private, location:escape_only}s}
{"msg%{public}.0s":"#warning Table was created by a different device (serial numbers do not match). Deleting", "table":%{private, location:escape_only}s, "expected":%{private, location:escape_only}s, "actual":%{private, location:escape_only}s}
{"msg%{public}.0s":"Table was created by this device (serial numbers match). Keeping", "table":%{private, location:escape_only}s}
{"msg%{public}.0s":"Table was created by an unknown device (table info missing). Deleting", "table":%{private, location:escape_only}s}
{"msg%{public}.0s":"The CL version has not changed since CLSqliteDatabase::createTableIfNecessary() was last invoked for this pair, so not creating table", "path":%{public, location:escape_only}s, "table":%{private, location:escape_only}s}
{"msg%{public}.0s":"The CL version has changed since CLSqliteDatabase::createTableIfNecessary() was last invoked for this pair. Checking schema", "path":%{public, location:escape_only}s, "table":%{private, location:escape_only}s}
{"msg%{public}.0s":"Must provide a table name and a module"}
{"msg%{public}.0s":"#warning Virtual table exists but does not have matching schema", "table":%{private, location:escape_only}s}
{"msg%{public}.0s":"Could not bind", "value":%{private}d, "index":%{public}d, "rc":%{public, location:SqliteResult}.*P, "query":%{private, location:escape_only}s}
{"msg%{public}.0s":"Could not bind", "value":%{private}u, "index":%{public}d, "rc":%{public, location:SqliteResult}.*P, "query":%{private, location:escape_only}s}
{"msg%{public}.0s":"Could not bind", "value":"%{private}f", "index":%{public}d, "rc":%{public, location:SqliteResult}.*P, "query":%{private, location:escape_only}s}
{"msg%{public}.0s":"Could not bind", "value":%{private, location:escape_only}s, "index":%{public}d, "rc":%{public, location:SqliteResult}.*P, "query":%{private, location:escape_only}s}
{"msg%{public}.0s":"Could not bind", "value":%{private}lld, "index":%{public}d, "rc":%{public, location:SqliteResult}.*P, "query":%{private, location:escape_only}s}
{"msg%{public}.0s":"Could not bind", "value":%{private, location:escape_only}@, "index":%{public}d, "rc":%{public, location:SqliteResult}.*P, "query":%{private, location:escape_only}s}
{"msg%{public}.0s":"getColumnInfo", "table":%{private, location:escape_only}s, "name":%{public, location:escape_only}s}
{"msg%{public}.0s":"getColumnInfo", "index":%{public}u, "name":%{public, location:escape_only}s, "type":%{public, location:escape_only}s, "isPrimaryKey":%{public}hhd}
{"msg%{public}.0s":"getColumnInfo", "table":%{private, location:escape_only}s, "name":%{public, location:escape_only}s, "isFound":%{public}hhd}
{"msg%{public}.0s":"Already in a transaction. DaemonStatus threading bug?", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
{"msg%{public}.0s":"state transition", "event":%{public, location:escape_only}s, "state":%{public, location:escape_only}s, "id":"%{public}p", "property":%{public, location:escape_only}s, "new":%{public, location:_CLDaemonStatusStateTrackerState}.*P}
{"msg%{public}.0s":"state transition", "event":%{public, location:escape_only}s, "state":%{public, location:escape_only}s, "id":"%{public}p", "property":%{public, location:escape_only}s, "old":"%{public}p", "new":"%{public}p"}
{"msg%{public}.0s":"state transition", "event":%{public, location:escape_only}s, "state":%{public, location:escape_only}s, "id":"%{public}p", "property":%{public, location:escape_only}s, "old":%{public, location:CLDaemonStatus_Type::Battery}.*P, "new":%{public, location:CLDaemonStatus_Type::Battery}.*P}
{"msg%{public}.0s":"state transition", "event":%{public, location:escape_only}s, "state":%{public, location:escape_only}s, "id":"%{public}p", "property":%{public, location:escape_only}s, "old":%{public, location:CLDaemonStatus_Type::Reachability}lld, "new":%{public, location:CLDaemonStatus_Type::Reachability}lld}
{"msg%{public}.0s":"state transition", "event":%{public, location:escape_only}s, "state":%{public, location:escape_only}s, "id":"%{public}p", "property":%{public, location:escape_only}s, "old":%{public}d, "new":%{public}d}
{"msg%{public}.0s":"state transition", "event":%{public, location:escape_only}s, "state":%{public, location:escape_only}s, "id":"%{public}p", "property":%{public, location:escape_only}s, "old":%{public}hhd, "new":%{public}hhd}
{"msg%{public}.0s":"state transition", "event":%{public, location:escape_only}s, "state":%{public, location:escape_only}s, "id":"%{public}p", "property":%{public, location:escape_only}s, "old":%{public, location:_CLDaemonStatusStateTrackerState}.*P, "new":%{public, location:_CLDaemonStatusStateTrackerState}.*P}
{"msg%{public}.0s":"state dump failure", "expected_size":%{public}lld, "provided_size":%{public}lld}
airplane mode not supported on non-embedded
{"msg%{public}.0s":"received IOKit notification", "sleepNotification":%{public, location:IOMessage}lld, "keepAliveClientCount":%{public}lu}
system has powered on
#warning No sleep state tranaction on has powered on
system can sleep request
system entering sleep
Already holding sleep state transaction on will sleep
system will power on
system exiting sleep
#warning No sleep state tranaction on will not sleep
Notifying clients that migration is being performed
CL: CLDaemonStatus::onPowerNotification
{"msg%{public}.0s":"CLDaemonStatus::onPowerNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
@CellAwd, plistsave, attempts, %{public}d, als, %{public}d, tiles, %{public}d, unknown, %{public}d, alsreq, %{public}d, alscells, %{public}d, nCurrent, %{public}d, kbCurrent, %{public}.1f, nNeighbor, %{public}d, kbNeighbor, %{public}.01f, week, %{public}d, %{public}d, %{public}d, %{public}d, %{public}.1f
@CellAwd, plist, error, load, %{public}lu
@CellAwd, plist, clear, %{public}.1f, thresh, %{public}.0f, last, %{public}.1f
@CellAwd, plist, error, time, %{public}.1f, now, %.1f
@CellAwd, attempt, %{public}d, als, %{public}d, tiles, %{public}d, unknown, %{public}d, delta, %{public}.1f
@CellAwd, als, %{public}d, cells, %{public}d
@CellAwd, download, isCurrent, %{public}d, size, %{public}d, nCurrent, %{public}d, kbCurrent, %{public}.1f, nNeighbor, %{public}d, kbNeighbor, %{public}.01f
@CellAWD, plist, clear, %{public}.1f, thresh, %{public}.0f, last, %{public}.1f
@CellAwd, snap, %{public}s, attempts, %{public}d, network, %{public}d, tiles, %{public}d, unknown, %{public}d, nAls, %{pubic}d, cellsAls, %{public}d, nCurrent, %{public}d, kbCurrent, %{public}.1f, nNeighbor, %{public}d, kbNeighbor, %{public}.01f, weekly, %{public}d, %{public}d, %{public}d, %{public}d, %{public}.1f, hours, %{public}d
Derived Vo2max, %.1f, Revised Vo2max, %.1f, Minimum Vo2max, %.1f 
Estimated HRmin, %.1f 
ModelInput, Larger than expected gap between begin and end ts.  Setting end ts to some sane default. (%f, %f)
ModelInput, Event time, %.2f, GPS sample time, %.2f, distance, %.2f, speed, %.2f, altitude, %.2f
ModelInput,gender,%d,height,%f,weight,%f,vo2max,%f,age,%f,hrmin,%f,hrmax,%f,hronset,%f,pal,%f,condition,%d,runVo2max,%f
STARK,PASCD,invalid fields
STARK,PASCD,invalid timestamp
STARK,PASCD,invalid sensorType
STARK,PASCD,invalid transmissionState
STARK,PASCD,invalid sampleCount
STARK,PASCD,sampleCount==0
#Warning STARK,PASCD,invalid sampleCount,%d,max,%d
STARK,PASCD,unexpected empty timeOffset field
STARK,PASCD,unexpected empty sample field
STARK,PAGCD,invalid fields
STARK,PAGCD,invalid timestamp
STARK,PAGCD,invalid sampleCount
STARK,PAGCD,invalid sampleCount,%d,max,%d
STARK,PAGCD,invalid sample time offset
STARK,PAGCD,invalid sample set, all empty
STARK,GPHDT,invalid fields
STARK,GPHDT,invalid heading
STARK,GPHDT,invalid degrees true indication
Rejecting blacklisted accessory: HARMAN
Rejecting blacklisted accessory: Volkswagen AG, 1.0.0
Rejecting blacklisted accessory: Volkswagen AG, 2.0.0
Rejecting blacklisted accessory: BENTLEY
AlsRequester, didReceiveResponse, tag, %d, RTT, %.3fs, gsmCells, %lu, cdmaCells, %lu, lteCells, %lu, scdmaCells, %lu, wifis, %lu
@AlsFlow, reply, tag, %{public}d, wifi, RTT, %{public}.1fs, watch, %{public}d, aps, %{public}lu
@AlsFlow, reply, tag, %{public}d, cell, RTT, %{public}.1fs, watch, %{public}d, gsm, %{public}lu, lte, %{public}lu, cdma, %{public}lu, scdma, %{public}lu
AlsCdma, rx, %{public}lu
AlsCdma, %{public}d, unknown, %{private}s
AlsCdma, %{public}d, valid, %{private}s, location, %{private}s
AlsLte, rx, %{public}lu
AlsLte, %{public}d, unknown, %{private}s
AlsLte, %{public}d, valid, %{private}s, location, %{private}s
AlsGsm, unbatched, %{public}lu
AlsWifi, unbatched, %{public}lu
Unknown pbrequester object received in delegate callback
AlsRequester, didFinish, payload, %lu, outstanding, %ld
#Warning query: response_error, domain %s code %ld
@AlsFlow, reply, tag, %{public}d, error, RTT, %{public}.1lfs, watch, %{public}d, desc, %{public}s, %{public}ld, type, %{public}s
query: received error for unknown requester type (tag %{public}d)
AlsRequester, didFailWithError, code, %s, outstanding, %ld
AlsRequester, finished, outstanding, %ld
AlsGsm, rx, %{public}lu
AlsGsm, %{public}lu, unknown, %{private}s
AlsGsm, %{public}lu, valid, %{private}s, location, %{private}s
AlsScdma, rx, %{public}lu
AlsScdma, %{public}lu, unknown, %{private}s
AlsScdma, %{public}lu, valid, %{private}s, location, %{private}s
AlsWifi, rx, %{public}lu
AlsWifi, unknown, %{private}s, %{public}lu, hasInfoMask, %{public}d, infoMask, 0x%{public}x
AlsWifi, valid, location, %{private}s, %{public}lu, %{private}s, score, %{public}d, channel, %{public}d, alt, %{public}.2lf, reach, %{public}d, hasInfoMask, %{public}d, infoMask, 0x%{public}x, type, %{public}d
AlsInit, server, %{private}s, timeout, %{public}d, log request/response, %{public}d, %{public}d
query: queryLocation, location, %14.8lf, %14.8lf, timeout, %d
query: queryLocation, tag, %d, location, %14.8lf, %14.8lf, timeout, %d, payload, %lu, reachability, %d
@AlsFlow, request, tag, %{public}d, location, %{private}0.2lf, %{private}0.2lf, server, %{private}s, reach, %{public}d, watch, %{public}d
AlsCell, query, cdma, %{public}lu, gsm, %{public}lu, scdma, %{public}lu, lte, %{public}lu, max, %{public}d
#Warning query: don't have derivedMcc - using %d
query: Adding single derivedMcc %d
query: Adding multi derivedMcc %d
AlsCdma, query, %{public}d, key, %{private}s
AlsCdma, dropping, %{public}u, key, %{private}s, #CloneMe
AlsGsm, query, %{public}d, key, %{private}s
AlsGsm, dropping, %{public}u, key, %{private}s, #CloneMe
AlsScdma, query, %{public}d, key, %{private}s
AlsScdma, dropping, %{public}u, key, %{private}s, #CloneMe
AlsLte, query, %{public}d, key, %{private}s
AlsLte, dropping, %{public}u, key, %{private}s, #CloneMe
AlsWifi, tx, %{public}lu, max, %{public}d
AlsWifi, query, %{private}s, %{public}d
AlsWifi, dropping, %{private}s, %{public}u, #CloneMe
@AlsFlow, server, %{private}s, tag, %{public}d, reach, %{public}d, watch, %{public}d
@AlsFlow, request, tag, %{public}d, wifi, %{public}lu, surrounding, %{public}lu
@AlsFlow, request, tag, %{public}d, cell, gsm, %{public}lu, lte, %{public}lu, cdma, %{public}lu, surrounding, %{public}lu
Unimplemented CDMA NetworkLocationRequester
nearby data query not supported
#Warning WIFI_LOC: filtered by location hint, ap, %s, hint, %s
#Warning WIFI_LOC: revert hint, %lu, %lu
WIFI_LOC: apply b360repr, min, %.1lf, max, %.1lf
WIFI_LOC: apply b360repr, %14.8lf, %14.8lf
#Warning Overriding clear tables by age to %d for %s
Bounding boxes not enabled for this database
Resetting bounding box for row %lld, i, %u / %d, in, %s
Couldn't bind row ID %{public}lld
can't create bounding box for location, %s
Couldn't bind bounding box %lld (<%+.8f,%+.8f>,<%+.8f,%+.8f>)
could not bind %.3f <%+.8f,%+.8f> %.2f
Could not prepare cached update statement
failed to setLocation, numModRows, %d, %s
Can't clear location for read-only database
could not bind %{public}lld
Can't clear locations in read-only database
Can't clear locations by age in read-only database
{"msg%{public}.0s":"CLLocationDatabase::clearLocationsByAge", "event":%{public, location:escape_only}s, "begin_mach":%{public}llu, "end_mach":%{public}llu, "elapsed_s":"%{public}.09f", "age_s":"%{public}.09f", "tableName":%{private, location:escape_only}s}
Clearing locations older than %.3f from %s
%lld total entries deleted
Performing incremental vacuum on %s
No associated bounding box table
Couldn't create bounding box deletion trigger for table %{public}s
initalizing database table, %s
issue getting scoped statement
set suggested action, %s
cannot get record of suggested action without identifier
delete all suggested actions not considered since, %f
CMGyroBiasEstimator::CMGyroBiasEstimator: cold start
CMGyroBiasEstimator::CMGyroBiasEstimator: dbias.x,%.2e,.y,%.2e,.z,%.2e,P.x,%.2e,.y,%.2e,.z,%.2e
CMGyroBiasEstimator::reset: cold start
CMGyroBiasEstimator::reset: warm start [%f < %f]
CMGyroBiasEstimator::reset: dbias.x,%.2e,.y,%.2e,.z,%.2e,P.x,%.2e,.y,%.2e,.z,%.2e
CMGyroBiasEstimator::CMGyroBiasEstimator: biasFitReset
CMGyroBiasEstimator::feedGyro: converged!
Couldn't get time zone for point <%+.8f,%+.8f>
Point <%+.8f,%+.8f> not in any time zone polygon; closest polygon is %f meters away; default time zone is %s, but we're not using it
Not in any polygons; falling back to closest nearby time zone ID %lld (distance %f, %ld possibilities)
Point <%+.8f,%+.8f> not in any time zone polygon; default time zone is %s, but we're not using it
#Warning Point <%+.8f,%+.8f> in multiple time zone polygons
Could not get time zone name for zone ID %{public}lld
Couldn't get list of candidates for point <%+.8f,%+.8f>
Couldn't determine if point <%+.8f,%+.8f> is in polygon %lld
Getting polygons for point <%+.8f,%+.8f> acc %.2f
#Warning fBoundingBoxesSelectNearbyStatement not available - rtree module missing or db unavailable
#Warning Ignoring bogus location <%+.8f,%+.8f>
Could not bind <%+.8f,%+.8f> - <%+.8f,%+.8f>
#Warning fNamesSelectStatement not available - rtree module missing or db unavailable
Could not bind %{public}lld
Could not get polygon name
#Warning No entry in names table for polygon ID %lld
#Warning fNamesSelectOnNameStatement not available - rtree module missing or db unavailable
#Warning Could not bind %s
#Warning Polygon %s not found in names table
#Warning No bounding box found for polygon %s
#Warning fPointsSelectStatement not available - rtree module missing or db unavailable
#Warning Could not bind %lld
#Warning No points data found for polygon Id %lld
Dummy, Static, step count: %d, step distance: %f, activity: %d, type: %d, vm: %f
Sending along GPS time %.2f to CoreTime
buildCFAbsoluteTime,%{public}.0f
Integrity Monitoring is Disabled
GpsWifiKeepAlive is no longer supported! If you want to leave all providers actively subscribed to, set DynamicLocationProviders to false
UseLocationKFAsDefaultProvider is set
CLMM,EnableMapMatching,%{public}d
CLMM,ForceMapMatching,%{public}d
dynamic location providers,%{public}d,accuracy,%{public}.2f,gps test mode,%{public}d,always notify,%{public}d
location derived speed estimator enabled,%{public}d
could not create tech status run loop source
could not create check active run loop source
CLIENT:registerForNotificationInternal,notification,%{public}d,%{public}s,granularity,%{public}d
Before register,required granularity,%{public}d,active granularity,%{public}d
BATCH:unsupported platform
CLMM,RunMapMatching is turned on
registering notification,%{public}d,location provider,%{public}s
wifi location batch,unsupported platform
CLIENT:registerForNotificationInternal,propagate,desiredAccuracy,%{public}.1lf,name,%{public}s,active,%{public}d,operating mode,%{public}d
CLIENT:unregisterForNotificationInternal,notification,%{public}d,%{public}s,granularity,%{public}d
Unregistered for notification,%{public}d,new required location granularity,%{public}d
After unregister,required granularity,%{public}d,active granularity,%{public}d
CLMM,RunMapMatching is turned off
unregistering notification,%{public}d,with,location provider,%{public}s
CLIENT:unregisterForNotificationInternal,propagate,desiredAccuracy,%{public}.1lf,name,%{public}s,active,%{public}d
Device going to sleep,stop location unavailable timer
Device wake setting location unavailable timer to fire at %{public}.3f
#Warning,Unhandled status notification,%{public}u
@ClxVersion, Init, os, %{public}s, model, %{public}s, build, %{public}s, triage, %{public}d
shutting down %{public}s location provider
Starting all location providers up to threshold,%{public}d,desiredAccuracy,%{public}.1lf
@ClxProvider, start, %{private}s, granularity, %{public}d, active, %{public}d, desiredAccuracy, %{public}.1f
Not starting location provider,%{public}s,fRequiredLocationGranularity,%{public}d,fActiveLocationGranularity,%{public}d
Stopping all location providers above threshold %{public}d
@ClxProvider, stop, %{private}s, granularity, %{public}d, active, %{public}d, desiredAccuracy, %{public}.1f
Stopping all location providers that are worse than kDynamicLocationProvider %{public}d
got better location provider,%{public}d,NOT stopping worse location provider,%{public}d,isAccessorySpecialCase,1
got better location provider,%{public}d,stopping worse location provider,%{public}d
lost location from kDynamicLocationProvider,%{public}d,restarting all worse providers
restarting worse location provider kDynamicLocationProvider,%{public}d
#Warning,startLocation when provider is None
CLIENT:startLocation,registerForNotification,start reg info,client,%{public}p,desiredAccuracy,%{public}.1lf,name,%{public}s
registering location provider,%{public}s,as a bystander only
starting location provider,%{public}s,in mode,%{public}d
#Warning,stopLocation when provider is None
Unregistering %s location provider as bystander
stopping location provider,%{public}s
catch-all location unavailable timer fired
Location unavailable timer fired,required granularity is none,ignoring
#Warning,Location unavailable fired while sleeping
could not find provider from list
Got location unavailable notification for non-active provider,%{public}s,ignoring
Got location unavailable notification for location provider,%{public}s
provider,%{public}s,still available,lat,%{private}.7lf,lon,%{private}.7lf,lifespan,%{public}.1lf,age,%{public}.3fs
No location is available from any provider,notifying clients
#Warning,shouldNotify when provider is None
Got,lat,%{private}.7f,lon,%{private}.7f,for non-active location provider,%{public}s,ignoring
#Warning,Got future,lat,%{private}.7f,lon,%{private}.7f,from provider,%{public}s,age,%{public}.3fs,correcting to,%{public}.3fs
expiredLocation,provider,%{public}s,lat,%{private}.7lf,lon,%{private}.7lf,age,%{public}.3fs,lifespan,%{public}.1fs
current most confident provider,%{public}s,conf,%{public}d
#Warning,new,%{public}s,lat,%{private}.7lf,lon,%{private}.7lf,hunc,%{public}.2f,conf,%{public}d,conflicts with confident,%{public}s,lat,%{private}.7lf,lon,%{private}.7lf,hunc,%{public}.2f,conf,%{public}d,age,%{public}.3f,distance,%{public}.2f,discarding
#Warning,new,%{public}s,lat,%{private}.7lf,lon,%{private}.7lf,hunc,%{public}.2f,conf,%{public}d,conflicts with current,%{public}s lat,%{private}.7lf,lon,%{private}.7lf,hunc,%{public}.2f,conf,%{public}d,distance,%{public}.2f,notifying
new,%s,lat,%{private}.7lf,lon,%{private}.7lf,hunc,%{public}.2f,conf,%{public}d,coarser and agrees with current,%{public}s, lat,%{private}.7lf,lon,%{private}.7lf,hunc,%{public}.2f,conf,%{public}d,distance,%{public}.2f,discarding
#Warning,new,%s,lat,%{private}.7lf,lon,%{private}.7lf,hunc,%{public}.2f,conf,%{public}d,conflicts with current,%{public}s,lat,%{private}.7lf,lon,%{private}.7lf,hunc,%{public}.2f,conf,%{public}d,distance,%{public}.2f,discarding
new,%s,lat,%{private}.7lf,lon,%{private}.7lf,hunc,%{public}.2f,conf,%{public}d,coarser than current,%{public}s,lat,%{private}.7lf,lon,%{private}.7lf,hunc,%{public}.2f,conf,%{public}d,distance,%{public}.2f,discarding
got accessory,stopping everything less preferred,isShifted,%{public}d,isPropagatedSolution,%{public}d
changing to provider,%{public}s,from,%{public}s
location rejected by IM,locationType,%{public}d,lat,%{private}.7lf,lon,%{private}.7lf
location rejected by KF,%{public}d,lat,%{private}.7lf,lon,%{private}.7lf
Notifying using location KF,but no location available
Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Type,%d,%s,Speed,%.2f,Course,%.2f,Confidence,%d,Lifespan,%.3f,LocationTimestamp,%.3f,Age,%.3f,Altitude,%.1f,AltitudeAccuracy,%.1f,SpeedAccuracy,%.3f,CourseAccuracy,%.1f,timestampGps,%.3lf,integrity,%d
@ClxClient, Fix, 1, ll, %{private}.7f, %{private}.7f, acc, %{public}.2f, speed, %{private}.1f, course, %{private}.1f, type, %{public}d
%{public}.1lf,DeadReckoning,%{public}s,%{public}.2lf,Propagating solution,lastGPSTime,%{public}.2lf,lastAccessoryTime,%{public}.2lf
Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Type,%d,%s,Speed,%.2f,Course,%.2f,Confidence,%d,Lifespan,%.3f,Altitude,%.1f,AltitudeAccuracy,%.1f,LocationTimestamp,%.3f,Age,%.3f,timestampGps,%.3lf,floor,%d,SpeedAccuracy,%.3lf,CourseAccuracy,%.1lf,integrity,%d,rawLat,%.7lf,rawLon,%.7lf,rawCourse,%.2f,refFrame,%d,rawRefFrame,%d,propagated,%d
{"msg%{public}.0s":"Notifying clients with location", "location":%{private, location:CLClientLocation}.*P, "notification":%{public, location:CLLocationProvider_Type::Notification}lld}
#Warning,Notifying clients of an already-expired location,age,%{public}.3f
GPSODOM,timestamp,%{public}.3lf,timestampGps,%{public}.3lf,odometer,%{public}.3lf,deltaDist,%{public}.3lf,deltaDistUnc,%{public}.3lf,lat,%{private}.7lf,lon,%{private}.7lf,hunc,%{public}.1lf,alt,%{private}.3lf,vunc,%{public}.1lf,speed,%{public}.3lf,sunc,%{public}.3lf,course,%{public}.3lf,cunc,%{public}.3lf
Accessory,propagated on-device GPS,lat,%{private}.7lf,lon,%{private}.7lf,hunc,%{public}.1lf
GPSController indicates hardware active while client is not active
Setting simulation to %{public}d for all location providers
Posting tech status change notification
Notifying clients of providers active update to %{public}d
#Warning,Clearing all location data from the controller
#Warning,Location Services reset,clearing local cache
@ClxNotify, LpReset, 0
#Warning,Location Services state changed,clearing local cache
CLIENT:hasClients,%{public}d,hasFineClients,%{public}d,hasCoarseClients,%{public}d,desiredAccuracy,%{public}.1lf
@ClxEvent, %{public}s, %{public}d, last, %{public}.1f
@ClxVersion, Timer, os, %{public}s, model, %{public}s, build, %{public}s, triage, %{public}d
@ClxSnapshot, %{public}s, %{public}d, last, %{public}.1f
CL: CLLocationController::onStatusNotification
{"msg%{public}.0s":"CLLocationController::onStatusNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLLocationController::onWifiServiceNotification
{"msg%{public}.0s":"CLLocationController::onWifiServiceNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLLocationController::onClientNotification
{"msg%{public}.0s":"CLLocationController::onClientNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLLocationController::onDataProtectionNotification
{"msg%{public}.0s":"CLLocationController::onDataProtectionNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLLocationController::onBluetoothNotification
{"msg%{public}.0s":"CLLocationController::onBluetoothNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLLocationController::onCompanionNotification
{"msg%{public}.0s":"CLLocationController::onCompanionNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLLocationController::onLocationUnavailableTimer
{"msg%{public}.0s":"CLLocationController::onLocationUnavailableTimer", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLLocationController::sendTechStatusNotification
{"msg%{public}.0s":"CLLocationController::sendTechStatusNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLLocationController::checkActiveProviders
{"msg%{public}.0s":"CLLocationController::checkActiveProviders", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLLocationController::onWifiNotification
{"msg%{public}.0s":"CLLocationController::onWifiNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLLocationController::onCellNotification
{"msg%{public}.0s":"CLLocationController::onCellNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLLocationController::onNmeaNotification
{"msg%{public}.0s":"CLLocationController::onNmeaNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLLocationController::onAccessoryNotification
{"msg%{public}.0s":"CLLocationController::onAccessoryNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLLocationController::onSimulatedNotification
{"msg%{public}.0s":"CLLocationController::onSimulatedNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
no location clients, desiredAccuracy, %f
@WifiLogic, entry, register, notification, %{public}s, desiredAccuracy, %{public}.1lf
@WifiLogic, entry, unregister, notification, %{public}s
@WifiLogic, entry, timer
@WifiLogic, entry, requestLocationUpdate, %{public}s, source, %{public}d
@WifiLogic, entry, wifiNotify, %{public}s
@WifiLogic, entry, motion
@WifiLogic, entry, signalEnvironment
@WifiLogic, entry, dataProtection
@WifiLogic, entry, tileDownload
@WifiLogic, entry, clientNotify
@WifiLogic, entry, alsNotify
@WifiLogic, entry, reach, %{public}d
@WifiLogic, entry, batterysaver, %{public}d
@WifiLogic, entry, locationNotify
@WifiLogic, entry, emergencyState
@WifiLogic, handleInput, %{public}s
@WifiLogic, handleOutput
@WifiLogic, decision, newUpdate, didStart, %{public}d
@WsbReproc, reason, %{public}s
@WifiLogic, decision, reprocWsb
@WifiLogic, decision, alsreq, aps, %{public}lu
@WifiLogic, decision, alswsb, aps, %{public}lu
{"msg%{public}.0s":"requesting wifi scan", "scan_type":%{public}d, "priority":%{public, location:escape_only}s, "is_passive":%{public}hhd, "scan_request_successful":%{public}hhd}
value of didStartScan being reset to false after successfully beginning a scan
@WifiLogic, decision, scanreq, didStart, %{public}d
turn wifi auto-join off
turn wifi power on
turn wifi power off
turn wifi auto-join on
@WifiLogic, decision, wifipower, %{public}d
{"msg%{public}.0s":"requesting wifi tile download", "latitude":"%{private}f", "longitude":"%{private}f"}
@WifiLogic, decision, tiledl, %{private}.02f, %{private}.02f
{"msg%{public}.0s":"update schedule of refresh timer", "delay_s":"%{public}.09f"}
@WifiLogic, decision, timer, %{public}.1f
@WifiLogic, decision, timer, cancel
@ClxWifi, Fix, 0, ll, N/A
@WifiLogic, decision, notifyUnavail
Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Confidence,%d,TTF,%.3Lf,sinceReg,%.3Lf,Confirmed,%d,Altitude,%.2lf,VerticalAccuracy,%.2lf,locationSimulated,%d,notifiedLocationAge,%Lf,integrity,%d
@ClxWifi, Fix, 1, ll, %{private}.7f, %{private}.7f, acc, %{public}.2f, course, -1.0
@WifiLogic, decision, notifyLoc
{"msg%{public}.0s":"should not send out an empty container of batched wifi locations", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
notifying clients of %{public}ld batched wifi locations
WsbCalc, notify, %{public}lu
@WifiLogic, decision, notifyBatched
@WifiLogic, updateStateExternal
@WifiFlow, nexttimer, %{public}d
@WifiFlow, nexttimer, off
%s is deprecated. setting this has no effect
CL: CLWifiLocationProvider::onWifiTimer
{"msg%{public}.0s":"CLWifiLocationProvider::onWifiTimer", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CellLoc, Invalid rat, %{public}d, %{public}s, #CloneMe
Workout, Taking power assertion due to session start.
Workout, Releasing power assertion due to session end.
Workout, Receiving addClientForPrepareSessionEnd after client list has been deleted!
Workout, Receiving removeClientForPrepareSessionEnd after client list has been deleted!
Workout, Client for PrepareSessionEnd of session type %d does not exist!
Workout, Prepared session client, end for session, %d, duration (s), %f, success, %d
Workout, START, activity, %d, workout, %lu, sessionId, %s, location, %lu, length, %f, type override, %d
Workout, START, activity, %d, workout, %lu, sessionId, %s, type override, %d
Workout, STOP
Workout,Setting suggested stop timeout for workout,%f
Workout,time,%{public}.3f,event,%{public}lu
CL: CLMotionStateMediator::onOldMotionCoprocessorData
{"msg%{public}.0s":"CLMotionStateMediator::onOldMotionCoprocessorData", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLMotionStateMediator::onActivePedStateCoprocessorData
{"msg%{public}.0s":"CLMotionStateMediator::onActivePedStateCoprocessorData", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLMotionStateMediator::onUserInfoNotification
{"msg%{public}.0s":"CLMotionStateMediator::onUserInfoNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
Failed to updateRegistrationInfoForClient %p (%d)
#Warning provider %s disabled - will run but not send locations to clients
 Location Provider (%s) set to (%d)
CLIENT: registerForNotification, register for notification, %d, %s, desiredAccuracy, %.1lf, operatingMode, %d
CLIENT: updateRegistrationInfoForClient, client, %d, notification, %d, %s
CLIENT: updateRegistrationInfoForClient, client, %d, notification, %d, %s, from desiredAccuracy, %.1lf, to, %.1lf
CLIENT: updateRegistrationInfoForClient, no notification, client, %d, notification, %d, %s
Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Type,%d,%s,LocationTimestamp,%.3f,Age,%.3f,Lifespan,%.3f,
Ignoring location for %s
Provider %s is notifying clients (type=%d) of an invalid position (<%+.8f,%+.8f>)
Provider %s is notifying clients (type=%d) of an invalid altitude %.2f (accuracy %.2f)
Provider %s is notifying clients (type=%d) of a <0,0> position
#Warning Should not be sending coarse and fine notifications directly
Sending location unavailable notification through for %s
Sending through simulated location for %s
Simulation is now %s for %s
Notifying
#Warning Database is not valid; not initializing
failed to bind %{public}s
CELL_LOC: fInsertStatement [%s]
could not bind
reading from %s
#Warning data source closed
Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Sentence,"%s",
Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Speed,%.2f,Course,%.2f,
@WifiFlow, outcome, %{public}s
platform supports WiFi location monitoring - creating bounding boxes, tableName, %s
read only database - not creating bounding boxes, tableName, %s
platform does not support WiFi location monitoring - not creating bounding boxes, tableName, %s
Coarse wifi query center, %+.8lf, %+.8lf, nw, %+.8lf, %+.8lf, se, %+.8lf,%+.8lf, radius, %.8lf, bb, %d
fSelectCoarseWifiStatementRTree = [%s]
fSelectCoarseWifiStatement = [%s]
Unknown WiFi AP. %s
Coarse wifi query center, %+.8lf, %+.8lf, nw, %+.8lf, %+.8lf, se, %+.8lf,%+.8lf, radius, %.8lf, aps, %ld
invalid return value getting size of WifiLocation table
NETWORK: fIsIgnoreServerWifiUpdates = %d
NETWORK: fIsUseEVDOTransmittedLocations = %d
NETWORK: fIsExponentialRetryTimer, %d
fServerRefreshInterval, %.1lf
Scheduling purge for %.3f and checking every %.3fs for older than %.3fs
NETWORK: stats: cellsQueried, %d, wifisQueried, %d, locationsQueried, %d, totalRequests, %d, totalRequestsSuccessful, %d
NETWORK: check reschedule, fQueryRetries, %d, sinceLastRetry, %.1lf
cell %03d %03d 0x%x 0x%x is local <%+.8f,%+.8f> remote <%+.8f,%+.8f> %.2fm apart - using local
CELL_LOC: cell, %s, has local, but no remote - querying
CELL_LOC: found, %d, server, %d, cell, %s, location, %s
CELL_LOC: scdma, found, %d, server, %d, cell, %s, location, %s
CELL_LOC: failed get location for, %s
CELL_LOC: best match cell, %s, bestMatch, %d
CELL_LOC: SCDMA full match 0, %s, %s
CELL_LOC: SCDMA match 1, %s, %s
CELL_LOC: SCDMA match 2, %s, %s
CELL_LOC: SCDMA match 3, %s, %s
CELL_LOC: SCDMA match 4, %s, %s
CELL_LOC: SCDMA NO MATCH, %s
CELL_LOC: GSM full match 0, %s, %s
CELL_LOC: GSM match 1, %s, %s
CELL_LOC: GSM match 2, %s, %s
CELL_LOC: GSM match 3, %s, %s
CELL_LOC: GSM match 4, %s, %s
CELL_LOC: GSM NO MATCH, %s
CELL_LOC: LTE full match 0, %s, %s
CELL_LOC: LTE match 1, %s, %s
CELL_LOC: LTE match 2, %s, %s
CELL_LOC: LTE match 3, %s, %s
CELL_LOC: LTE match 4, %s, %s
#Warning CELL_LOC: LTE NO MATCH, %s
CELL_LOC: match 8 (%s)
CELL_LOC: match 5.1 (%s)
CELL_LOC: match 7 (%s)
CELL_LOC: match 4.1 (%s)
CELL_LOC: match 4.2 (%s)
CELL_LOC: match 3 (%s)
CELL_LOC: match 2 (%s)
CELL_LOC: match 1 (%s)
CELL_LOC: match sector location, %s, location, %s
CELL_LOC: avoid using transmitted locations
CELL_LOC: NO MATCH (%s)
CELL_LOC: found in DB (%s) loc (%lf %lf) acc (%lf)
CELL_LOC: cell %03d %03d 0%03d %03d %03d is local <%+.8f,%+.8f> remote <%+.8f,%+.8f> %.2fm apart - using local
CELL_LOC: cell, %s, has local, but no remote - not querying, server doesn't server these
CELL_LOC: cell, %s, has local, but no remote -  pending query
CELL_LOC: cell, [%s], is local <%+.8f,%+.8f> remote <%+.8f,%+.8f> %.2fm apart - using local
CELL_LOC: cell, %s, has local, but no remote -  querying
CELL_LOC: cell (%s) is local <%+.8f,%+.8f> remote <%+.8f,%+.8f> only %.2fm apart - not storing locally
CELL_LOC: cell (%s) is local at <%+.8f,%+.8f>
cell %03d %03d 0x%x 0x%x is local <%+.8f,%+.8f> remote <%+.8f,%+.8f> only %.2fm apart - not storing locally
cell %03d %03d 0x%x 0x%x is local at <%+.8f,%+.8f>
#Warning Location Services disabled, not storing location entry
scdma cell %03d %03d 0x%x 0x%x is local <%+.8f,%+.8f> remote <%+.8f,%+.8f> only %.2fm apart - not storing locally
scdma cell %03d %03d 0x%x 0x%x is local at <%+.8f,%+.8f>
CELL_LOC: distance, %.1lf, not storing locally, %s, location, %s
CELL_LOC: distance, %.1lf, override local location, %s, location, %s
#Warning in private location mode; not querying for unknown cdmaCells or unknown wifis
CELL_LOC: cdma cell, %s, last updated %.3f ago (%.3fs minimum), not re-querying
CELL_LOC: cdma cell, %s, last queried %.3f ago (%.3fs minimum), not re-querying
CELL_LOC: cdma cell, %s, re-querying
CELL_LOC: gsm cell, %s, last updated %.3f ago (%.3fs minimum), not re-querying
CELL_LOC: gsm cell, %s, last queried %.3f ago (%.3fs minimum), not re-querying
CELL_LOC: gsm cell, %s, re-querying
CELL_LOC: scdma cell, %s, last updated %.3f ago (%.3fs minimum), not re-querying
CELL_LOC: scdma cell, %s, last queried %.3f ago (%.3fs minimum), not re-querying
CELL_LOC: scdma cell, %s, re-querying
CELL_LOC: lte cell, %s, last updated %.3f ago (%.3fs minimum), not re-querying
CELL_LOC: lte cell, %s, last queried %.3f ago (%.3fs minimum), not re-querying
CELL_LOC: lte cell, %s, re-querying
CELL_LOC: query gsm cells, %lu
CELL_LOC: query scdma cells, %lu
CELL_LOC: query cdma cells, %lu
CELL_LOC: query lte cells, %lu
CELL_LOC: query wifi cells, %lu
WIFI_LOC: isPiggybackNearby, %d, %d, isBroadConnection, %d, nearbyWifis, %d, nearbyCells, %d
#Warning %ld pending wifis, clearing
pending %s from %.3f (%.3fs ago)
#Warning CELL_LOC: %ld pending gsm cells, clearing
CELL_LOC: pending gsm cell, %s, from, %.3f, %.3f, ago)
#Warning CELL_LOC: %ld pending scdma cells, clearing
CELL_LOC: pending scdma cell, %s, from, %.3f, %.3f, ago)
#Warning CELL_LOC: %ld pending cdma cells, clearing
CELL_LOC: pending cdma cell, %s, from, %.3f, %.3f, ago)
#Warning CELL_LOC: %ld pending lte cells, clearing
CELL_LOC: pending lte cell, %s, from, %.3f, %.3f, ago)
#Notice NETWORK: requery, %{public}lu, %{public}lu, %{public}lu, %{public}lu, %{public}lu, items, fQueryRetries, %{public}d, fLastRetryTimestamp, %{public}.1lf
#Warning NETWORK: in private location mode; not querying for unknown cells or unknown wifis
#Warning NETWORK: Location Services disabled, not querying location
NETWORK: re-querying cells, %lu, %lu, %lu, %lu, wifis, %lu, retry count, %d
isBroadConnection, reachability, %d, %d, dataAccessTech, %d, %d, isBroadConnection, %d
#Warning in private location mode; not querying for unknown cells or unknown wifis
#Warning Location Services disabled, not querying location
#Warning NETWORK: can't query, no reachability, %d
CELL_LOC: start sequence, This, %p
CELL_LOC: beginning cell database %s
CELL_LOC: ending cell database %s (%lu cells still pending)
Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,MCC,%03d,MNC,%03d,LAC,0x%x,CI,0x%x,Confidence,%d,Count,%d,lock,%d
Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,MCC,%03d,MNC,%03d,LAC,0x%x,CI,0x%x,
Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,MCC,%03d,MNC,%03d,SID,%03d,NID,%03d,BSID,%03d,Confidence,%d,Count,%d,lock,%d
CELL_LOC: server response cell(%s) loc (%lf %lf) acc(%lf)
Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,MCC,%03d,MNC,%03d,SID,%03d,NID,%03d,BSID,%03d
CELL_LOC: server response lte cell, %s, location, %s
Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,MCC,%03d,MNC,%03d,TAC,0x%x,CI,0x%x,Confidence,%d,Count,%d,lock,%d
NETWORK: pending, known, before, %lu, cell, %s
NETWORK: pending, known, after, %lu, cell, %s
Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,MCC,%03d,MNC,%03d,TAC,0x%x,CI,0x%x,
NETWORK: pending, unknown, before, %lu, cell, %s
NETWORK: pending, unknown, after, %lu, cell, %s
AlsWifi, seriesComplete, known, %{public}lu, unknown, %{public}lu
Ignoring #als response, mac, %s, channel, %d, isNearbyQuery, %d, fDataProtectionEnabled, %d
#Warning Location Services disabled, not storing location entries
NETWORK: stats: onLocationRequesterResponse, %d
#Notice NETWORK: no response from server, reachability, %{public}d, queryRetries, %{public}d
NETWORK: data reachability is not available - not retrying
NETWORK: retry query, %d, %d
NETWORK: retry count %d exceeded %d - not retrying
NETWORK: query failed for nearbys - not retrying
NETWORK: query: finished, tag, %d, cells, %d, wifis, %d
resetBoundingBoxes for wifi
NETWORK: onStatusNotification, kNotificationReachability, from, %d, to, %d
@ClxLink, reach, %{public}d, last, %{public}d, retries, %{public}d
trimming pending gsm, %lu, scdma, %lu, cdma, %lu, lte, %lu, wifis, %lu, to, %d
CELL_LOC: gsmCells, %lu, %lu, lteCells, %lu, cdmaCells, %lu
data protection currently enabled - don't request surroundings
query, broadDataConnection, %d, timeout, %d
#Notice NETWORK: query, cells, %{public}lu, %{public}lu, %{public}lu, %{public}lu, wifis, %{public}lu
#Warning Location Services reset, clearing all local cache
#Warning Location Services disabled, clearing all local cache
onCompanionNotification, notification, %d
@ClxLink, Nearby, %{public}d
Data protection is now %s
Purging entries older than %.2fs.
NETWORK: onRetryTimer, %s, %p, fQueryRetries, %d, pending, %lu, %lu, %lu, %lu, %lu
NETWORK: areQueryRetriesNeeded, fQueryRetries, %d, pending, %lu, %lu, %lu, %lu, %lu, currentRetry, %d, sinceRetrySequenceStart, %.2lf, needed, %d
NETWORK: scheduleRetryTimer, retry timer already scheduled
NETWORK: scheduleRetryTimer, %s, %p, fQueryRetries, %d, pending, %lu, %lu, %lu, %lu, %lu, timerInterval, %.1lf, isTimerNeeded, %d
NETWORK: cancelRetryTimer, %s, %p, fQueryRetries, %d, pending, %lu, %lu, %lu, %lu, %lu
NETWORK: cancelRetryTimer, no retry timer
NETWORK: resetRetryCounters, sinceLastReset, %.1lf
NETWORK: resetRetryCounters, %s, %p, fQueryRetries, %d, pending, %lu, %lu, %lu, %lu, sinceLastReset, %.1lf
CL: CLNetworkLocationProvider::onLocationRequesterCellLocationSeries
{"msg%{public}.0s":"CLNetworkLocationProvider::onLocationRequesterCellLocationSeries", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLNetworkLocationProvider::onLocationRequesterCellLocation
{"msg%{public}.0s":"CLNetworkLocationProvider::onLocationRequesterCellLocation", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLNetworkLocationProvider::onLocationRequesterCellLocationUnknown
{"msg%{public}.0s":"CLNetworkLocationProvider::onLocationRequesterCellLocationUnknown", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLNetworkLocationProvider::onLocationRequesterWifiLocationSeriesComplete
{"msg%{public}.0s":"CLNetworkLocationProvider::onLocationRequesterWifiLocationSeriesComplete", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLNetworkLocationProvider::onLocationRequesterResponse
{"msg%{public}.0s":"CLNetworkLocationProvider::onLocationRequesterResponse", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLNetworkLocationProvider::onLocationRequesterLocationError
{"msg%{public}.0s":"CLNetworkLocationProvider::onLocationRequesterLocationError", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLNetworkLocationProvider::onLocationRequesterNearbyError
{"msg%{public}.0s":"CLNetworkLocationProvider::onLocationRequesterNearbyError", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLNetworkLocationProvider::onLocationRequesterFinished
{"msg%{public}.0s":"CLNetworkLocationProvider::onLocationRequesterFinished", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLNetworkLocationProvider::onLocationRequesterCdmaCellLocation
{"msg%{public}.0s":"CLNetworkLocationProvider::onLocationRequesterCdmaCellLocation", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLNetworkLocationProvider::onLocationRequesterCdmaCellLocationUnknown
{"msg%{public}.0s":"CLNetworkLocationProvider::onLocationRequesterCdmaCellLocationUnknown", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLNetworkLocationProvider::onLocationRequesterLteCellLocation
{"msg%{public}.0s":"CLNetworkLocationProvider::onLocationRequesterLteCellLocation", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLNetworkLocationProvider::onLocationRequesterLteCellLocationUnknown
{"msg%{public}.0s":"CLNetworkLocationProvider::onLocationRequesterLteCellLocationUnknown", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLNetworkLocationProvider::onLocationRequesterScdmaCellLocation
{"msg%{public}.0s":"CLNetworkLocationProvider::onLocationRequesterScdmaCellLocation", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLNetworkLocationProvider::onLocationRequesterScdmaCellLocationUnknown
{"msg%{public}.0s":"CLNetworkLocationProvider::onLocationRequesterScdmaCellLocationUnknown", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLNetworkLocationProvider::onPurgeTimer
{"msg%{public}.0s":"CLNetworkLocationProvider::onPurgeTimer", "event":%{public, location:escape_only}s, "this":"%{public}p"}
#Warning ignoring second MCC %d %d
CL: CLNetworkLocationProvider::onRetryTimer
{"msg%{public}.0s":"CLNetworkLocationProvider::onRetryTimer", "event":%{public, location:escape_only}s, "this":"%{public}p"}
NETWORK: cleaning, curEntryAge, %.1lf, ageThreshold, %.1lf
Failed to find entry from in-memory database, table, %{public}s, type %{public}s, rowid, %{public}lld
Failed to save entry to persisted database, table %{public}s
Successfully migrated %u rows from in-memory database to persisted for table %s
could not create path %{public}s
EnableAccessoryNMEAScreening,%d
registered for unfiltered location notifications
registered for propagated location notifications
unregistered for unfiltered location notifications
unregistered for propagated location notifications
Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Speed,%.2f,Course,%.2f,timestampGps,%.2lf,GgaOnly,integrity,%d
#Warning no reference time available, not sending reference time
#Warning location services is disabled, not sending reference location
#Warning no reference location available, not sending reference location
#Warning ephemeris %s not available
could not create input stream for ephemeris file, %{public}s
could not create data from file %{public}s
#Warning received an unknown location notification %d
Unable to open nmea fifo FD %d %s.
Screener reset
CL: CLAccessoryLocationProvider::onEphemerisUpdated
{"msg%{public}.0s":"CLAccessoryLocationProvider::onEphemerisUpdated", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLAccessoryLocationProvider::onLocationUnavailableTimer
{"msg%{public}.0s":"CLAccessoryLocationProvider::onLocationUnavailableTimer", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLAccessoryLocationProvider::onLocationNotification
{"msg%{public}.0s":"CLAccessoryLocationProvider::onLocationNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLAccessoryLocationProvider::onTimeNotification
{"msg%{public}.0s":"CLAccessoryLocationProvider::onTimeNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLAccessoryLocationProvider::onClientManagerNotification
{"msg%{public}.0s":"CLAccessoryLocationProvider::onClientManagerNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
could not store stats data 
metric.valid,%d,metric.timestamp,%.3f,metric.bundleId,%s,enabled,%d,event,%d
metric.valid,%d,metric.timestamp,%.3f,metric.bundleId,%s,bundleIdApproved,%s,approved,%d,authorization,%d,
metric.valid,%d,metric.timestamp,%.3f,metric.bundleId,%s,cellAvailable,%d,wifiAvailable,%d,passcodeLocked,%d,airplaneMode,%d,reachability,%d,accessoryConnected,%d,powered,%d,gpsCoexWifi,%d,gpsCoexBt,%d,timestampEnd,%.3f,duration,%.3f,desiredAccuracy,%.2f,achievedAccuracy,%.2f,ttff,%.3f,ttffGps,%.3f,achievedSpeed,%.2f,autoStopped,%d,deferredLocations,%d,
metric.valid,%d,metric.timestamp,%.3f,metric.bundleId,%s,fenceRadiusMin,%.2f,fenceRadiusMax,%.2f,numFences,%d,numFencesRemoved,%d,slc,%d,
metric.valid,%d,metric.timestamp,%.3f,metric.bundleId,%s,cellAvailable,%d,wifiAvailable,%d,passcodeLocked,%d,airplaneMode,%d,eventType,%d,eventRadius,%.2f,eventDistance,%.2f,eventLatency,%.3f,eventMask,0x%x,
{"msg%{public}.0s":"iB: submit monitor session", "metric.valid":%{public}d, "metric.timestamp":"%{public}f", "metric.bundleId":%{private, location:escape_only}s, "onbehalfbundleid":%{private, location:escape_only}s, "addedRegions":%{public}d, "addedWildCarded":%{public}d, "addedEntryState":%{public}d, "addedConservative":%{public}d, "removedRegions":%{public}d, "removedWildCarded":%{public}d, "removedEntryState":%{public}d, "removedConservative":%{public}d}
{"msg%{public}.0s":"iB: submit monitor trigger", "metric.valid":%{public}d, "metric.timestamp":"%{public}f", "metric.bundleId":%{private, location:escape_only}s, "onBehalfBundleId":%{private, location:escape_only}s, "eventType":%{public}d, "regionMask":%{public}d, "monitoredRegionsClient":%{public}d, "monitoredZonesDevice":%{public}d}
{"msg%{public}.0s":"iB: submit ranging session", "metric.valid":%{public}d, "metric.timstamp":"%{public}f", "metric.bundleId":%{private, location:escape_only}s, "regions":%{public}d, "beacons":%{public}d, "measurements":%{public}d, "duration":%{public}d, "trace size":%{public}lu, "trace sample":%{public}d}
metric.valid,%d,metric.timestamp,%.3f,metric.bundleId,%s,cellsQueried,%d,wifisQueried,%d,locationsQueried,%d,totalRequests,%d,totalRequestsSuccessful,%d,wifiTilesDownloaded,%d,wifiTilesDownloaded3G,%d,wifiTilesCached,%d,cellTilesDownloaded,%d,cellTilesDownloaded3G,%d,cellTilesCached,%d,demTilesDownloaded,%d,
metric.valid,%d,metric.timestamp,%.3f,metric.bundleId,%s,totalScans,%d,triggeredScans,%d,totalScansS2,%d,scanFailures,%d,scanBusies,%d
@GtsAwd, submit, metric.valid, %{public}d, metric.timestamp, %{public}.3f, metric.bundleId, %{private}s, sessions, %{public}d, empty, %{public}d, completed, %{public}d, errored, %{public}d, syncedN, %{public}d, syncedKb, %{public}d
metric.valid,%d,metric.timestamp,%.3f,metric.bundleId,%s,attempts,%d,noMatch,%d,noData,%d,
metric.valid,%d,metric.timestamp,%.3f,metric.bundleId,%s,timestampEnd,%.3f,duration,%.3f,uncalibrations,%d,achievedCalibration,%d,minMagnetometerMagnitude,%.1f,maxMagnetometerMagnitude,%.1f,gyroDataValid,%d,gyroAge,%d,gyroFactoryBias,%f,%f,%f,gyroFactorySlope,%f,%f,%f,gyroFactoryL2Error,%f,%f,%f,gyroDeltaBias,%f,%f,%f,gyroDeltaSlope,%f,%f,%f,gyroDynamicL2Error,%f,%f,%f,gyroDynamicMaxTemp,%d,gyroMagnitudeMax,%d,quality2DMin,%f,quality2DMax,%f,quality2DMean,%f,quality3DMin,%f,quality3DMax,%f,quality3DMean,%f,num2dTo3dTransitions,%d,num3dTo2dTransitions,%d,isLocationAvailable,%d,initState,%d,initAccuracy,%f,percentSession2D,%d,percentSessionUncalibrated,%d,percentSessionOther,%d,percentSessionStill,%d,percentSessionPedestrian,%d,percentSessionDriving,%d,percentSessionCycling,%d,percentSessionIndoor,%d,percentSessionDrivingHC,%d,coverKeyboardState,%d
metric.valid,%d,metric.timestamp,%.3f,metric.bundleId,%s,motionType,%d,enabled,%d,
Max prototypes overriden to %d
metric.valid,%d,metric.timestamp,%.3f,metric.bundleId,%s,timestampEnd,%.3f,duration,%.3f,motionType,%d,numTriggers,%d,prototypes,%zu,%s
metric.valid,%d,metric.timestamp,%.3f,hoursElapsed,%d
metric.valid,%d,metric.timestamp,%.3f,step,%d,distance,%.2f,timeLength,%.2f,score,%.2f,trackdistance,%.2f,kfactor,%.2f,kfactorupdated,%.2f
metric.valid,%d,metric.timestamp,%.3f,imageCaptures,[%d,%d,%d,%d,%d,%d],endConditions,[%d,%d,%d,%d,%d,%d],biasChanges,[%d,%d,%d,%d,%d,%d,%d,%d],minDuration,%llu,maxDuration,%llu,meanDuration,%llu,minTemperature,%5.2f,maxTemperature,%5.2f
metric.valid,%d,metric.timestamp,%.3f,numSaturations,%d,meanDeltaTimeSaturationsMsec,%d,magMagnitudeMin,%d,magMagnitudeMax,%d,maxCalibrationQuality3D,%f,deltaBiasHighQuality3D,%d,deltaRadiusHighQuality3D,%d,numCoverAttachments,%d
metric.valid,%d,metric.timestamp,%.3f,gyroMagMin,%d,gyroMagMax,%d,minsGyroActive,%d
submitting metric %x for %s
stats: %s
stats: type, %d, %s, count, %d
#Warning unknown metric %x requested for %s
@CellAwd, submit, metric.valid, %{public}d, metric.timestamp, %{public}.3f, metric.bundleId, %{private}s, attempts, %{public}d, network, %{public}d, tiles, %{public}d, uknown, %{public}d, nAls, %{public}d, cellsAls, %{public}d, nCurrent, %{public}d, kbCurrent, %{public}d, nNeighbor, %{public}d, kbNeighbor, %{public}d
CL: CLDaemonStats::onStoreTimer
{"msg%{public}.0s":"CLDaemonStats::onStoreTimer", "event":%{public, location:escape_only}s, "this":"%{public}p"}
{"msg%{public}.0s":"Fast path unsupported on this platform!", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
Unable to establish fast path with valid clientID,serviceRef,%p,properties,%@
Fast path has been initialized,clientID,%u,serviceRef,%p,useMag,%d,mode,%d,interval,%f
Fast path is being closed,clientID,%u,serviceRef,%p,useMag,%d,mode,%d,interval,%f
Event ref invalid
Unexpected device motion report type %d, returning
Application state changed, %d
{"msg%{public}.0s":"[CLIoHidFastPathInterface] buildDevice should be running on motion thread", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
[CLIoHidInterface] Adding new FastPathDevice
CLIENT: %d, registerForNotification, distanceFilter, %.1lf, checkInterval, %.1lf, sleepProof, %d, operatingMode, %d
CLIENT: Clearing cached notification for %d
CLIENT: register for notification, %d, %s
CLIENT: unregister for notification, %d, %s, wasRegistered, %d
ignoring (equal|older) location,%.8lf,%.8lf,HorAcc,%.1lf,Type,%s,Confidence,%d,Timestamp,%.3f,Lifespan,%.3f,Age,%.3f,integrity,%d
<%+.8f,%+.8f> is stale from %.3fs ago, not using for distance filtering
distance filter %.2f not exceeded by <%+.8f,%+.8f> and <%+.8f,%+.8f> (distance %.2f)
Now registered for %s location notifications, operating mode %d
no more location clients - not re-registering
leaving location as it would turn on in %.3fs anyway
@ClxClient, accuracy, %{public}d, %{public}d, %{public}d, level, %{public}s, reg?, %{public}d
CLIENT: notification, %s, clients, %lu, distanceFilter, %.1lf, sleepProof, %d
#Warning Ignoring request for sleep-proof location updates with no check interval
CLIENT: distanceFilter, %.1lf, fDistanceFilter, %.1lf
minimum distance unchanged from %.3f, still requesting location at %.3f (%.3fs away)
minimum distance changed to %.3f from %.3f
turning off location requests and re-scheduling for %.3fs later
scheduling location requests for %.3fs later
no location currently available, starting it immediately
wake interval unchanged from %.3f, still waking at %.3f (%.3fs away)
wake interval changed to %.3f from %.3f
#Warning Location Services reset, clearing local cache
#Warning Location Services state changed, clearing local cache
Cached location,%.8lf,%.8lf,HorAcc,%.1lf,Type,%s,Confidence,%d,Timestamp,%.3f,Lifespan,%.3f,Age,%.3f,integrity,%d
No valid last confident location
CL: CLFilteredLocationController::onLocationNotification
{"msg%{public}.0s":"CLFilteredLocationController::onLocationNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLFilteredLocationController::onManagerNotification
{"msg%{public}.0s":"CLFilteredLocationController::onManagerNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLFilteredLocationController::onLocationTimer
{"msg%{public}.0s":"CLFilteredLocationController::onLocationTimer", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CLNmeaScreener,type,%d,lat,%{private}.8lf,lon,%{private}.8lf,timestampGPS,%.1lf,machContTime,%.1lf,fHorizontalUncertainty,%.1lf
currentMach,%.1lf,dataMach,%.1lf,posDiff,%.2lf,positionDiffBound,%.2lf
CLNmeaScreener,fSimulatorMode,1
%s,dataCFAbsoluteTime,%.2lf,Data latency check failed
%s,dataCFAbsoluteTime,%.2lf,location check failed
%s,invalid location input,type,%d
%s,current time not available,dataCFAbsoluteTime,%.2lf
%s,derivedCFAbsTime,%.2lf,dataCFAbsoluteTime,%.2lf,timeDiff,%.1lf
%s,external location unavailable,gps,%.1lf,wifi,%.1lf,cell,%.1lf,LAC,%.1lf
Traversing preload manifest file
Preload manifest tile size = %lu
failed to allocate transit tile
failed to decode transit tile protobuf, encrypted=%{public}lu tile=%{public}s
failed to get fields in manifest
ver,%d,x,%d,y,%d,generated,%.01lf,age,%.01f,ageThresh,%d
Reading new market, {%.06lf,%.06lf}, {%.06lf,%.06lf}
Adding new tile to market, [%.06lf,%.06lf]
loaded transit tile %s with %lu regions
{"msg%{public}.0s":"Subclass should have overriden this", "class":%{public, location:escape_only}s, "SEL":%{public, location:escape_only}s}
unknown hardware type %{private}d
#Warning PLOS: ignoring hw. forceSupport,%d
#Warning OBM, ignoring hw. forceSupport,%d
Could not refresh settings
should not write to operator bundle
CL: CLOperatorSettings::onOperatorChangeNotification
{"msg%{public}.0s":"CLOperatorSettings::onOperatorChangeNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
{"msg%{public}.0s":"CLC: Enable CLRouteListener when already enabled", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
#Warning CLC: Disable CLRouteListener when already disabled, shutdown?
CLC: Received a route
#Warning CLC: Starting route without an appoximate location
CLC: Received a transit route
CLC: Received a navigation state change
CLC: Route type        : %{private}d, %{private}@
CLC: Route origin      : %{public}s
CLC: Route destination : %{public}s
CLC: Route dest name   : %{private}@
CLC: Route travel time : %{private}.01lf
CLC: Transit Stop:
CLC:     LAT : %{private}lf
CLC:     LON : %{private}lf
CLC: Transit Link:
CLC:     ID  : %{private}llu
CLC:     DEP : %{private}lf
CLC:     ARR : %{private}lf
CLC:     Stop From :
CLC:     Stop To :
CLC:         ID  : %{private}llu
CLC:         LAT : %{private}lf
CLC:         LON : %{private}lf
CLC: Guidance Level   : %{public}@
CLC: Navigation State : %{public}@
CLC: Transport Type   : %{private}@
Legacy compass, interval (%.3f) gyro (%d)
Legacy compass started. Cover attached %d
Dumped compass cal database with id %@
Compass is requesting device motion with mode 0x%x
Legacy compass stopped.
Notify after %.3f seconds of no event.
Type,%s,compassJustAlignedToStableField,%d,timestamp,%20.20f
Type,%s,magneticHeading,%20.20f,trueHeading,%20.20f,accuracy,%20.20f,magneticField.x,%20.20f,magneticField.y,%20.20f,magneticField.z,%20.20f,bias.x,%20.20f,bias.y,%20.20f,bias.z,%20.20f,level,%d,magnitude,%20.20f,inclination,%20.20f,horizontal,%20.20f,timestamp,%20.20f
notified clients. sampleCount,%d,compass.compass.calibrationLevel,%d,compass.timestamp,%f
WIFI_LOC: failed to get power state
@WifiFlow, startscan, %{public}s
CL: CLWifiLocationProvider::onWifiNotification
{"msg%{public}.0s":"CLWifiLocationProvider::onWifiNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLWifiLocationProvider::onClientNotification
{"msg%{public}.0s":"CLWifiLocationProvider::onClientNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLWifiLocationProvider::onNetworkLocationNotification
{"msg%{public}.0s":"CLWifiLocationProvider::onNetworkLocationNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLWifiLocationProvider::onStatusNotification
{"msg%{public}.0s":"CLWifiLocationProvider::onStatusNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLWifiLocationProvider::onMotionNotification
{"msg%{public}.0s":"CLWifiLocationProvider::onMotionNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLWifiLocationProvider::onLocationNotification
{"msg%{public}.0s":"CLWifiLocationProvider::onLocationNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLWifiLocationProvider::onDataProtectionNotification
{"msg%{public}.0s":"CLWifiLocationProvider::onDataProtectionNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLWifiLocationProvider::onWifiTileDownloadNotification
{"msg%{public}.0s":"CLWifiLocationProvider::onWifiTileDownloadNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLWifiLocationProvider::onSignalEnvironmentNotification
{"msg%{public}.0s":"CLWifiLocationProvider::onSignalEnvironmentNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
#Warning Overriding FenceStartDelay,%{private}.2f
iB: Scheduling initialization delay,%{private}.2f, silo,%{private}p
{"msg%{public}.0s":"iB: Initializing"}
iB: Already initialized
{"msg%{public}.0s":"@iB: Adding monitored region", "region":%{private, location:escape_only}s, "totalRegions":%{public}lu}
{"msg%{public}.0s":"iB: Retrieved monitored regions", "numRegions":%{public}lu, "bundle":%{public, location:escape_only}s}
{"msg%{public}.0s":"@iB: Removing monitored region", "region":%{private, location:escape_only}s, "totalRegions":%{public}lu}
iB: Region,%{private}s, has state,%{private}d
#Warning Unable to find region,%{private}s, in the cache
#Warning Authorization error,%{public}d, while requesting state for region,%{private}s
{"msg%{public}.0s":"iB: Resuming monitoring for fence", "region":%{private, location:escape_only}s}
Unable to monitor the zone for region,%{private}s
iB: Already resumed monitoring for fence,%{private}s
{"msg%{public}.0s":"iB: Suspending monitoring for fence", "region":%{private, location:escape_only}s}
Unable to unmonitor the zone for fence,%{private}s
iB: Fence,%{private}s, is not being monitored, the suspension request will be ignored
{"msg%{public}.0s":"@iB: Zone state transition", "region":%{private, location:escape_only}s, "fromState":%{private}d, "toState":%{private}d, "totalRegions":%{public}lu}
{"msg%{public}.0s":"@iB: Launching application for notification (if necessary)", "bundle":%{private, location:escape_only}s}
{"msg%{public}.0s":"iB: Reauthorization requested, forcing initialization"}
{"msg%{public}.0s":"iB: Received display on notification"}
{"msg%{public}.0s":"@iB: Display turned on, notifying region", "region":%{private, location:escape_only}s}
iB: Pending notification for fence,%{private}s, state,%{private}d, has expired
{"msg%{public}.0s":"iB: Sending cached notification for fence", "region":%{private, location:escape_only}s, "state":%{private}d, "type":%{private}d}
CL: CLBTLEFenceManagerConcrete::onClientManagerNotification
{"msg%{public}.0s":"CLBTLEFenceManagerConcrete::onClientManagerNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLBTLEFenceManagerConcrete::onAuthorizationNotification
{"msg%{public}.0s":"CLBTLEFenceManagerConcrete::onAuthorizationNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLBTLEFenceManagerConcrete::onBeaconNotification
{"msg%{public}.0s":"CLBTLEFenceManagerConcrete::onBeaconNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLBTLEFenceManagerConcrete::onDaemonStatusNotification
{"msg%{public}.0s":"CLBTLEFenceManagerConcrete::onDaemonStatusNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
#warning: domain %s code %ld
not connected to wifi #tile header table
failed to select count(*) from wifi #tile header table
{"msg%{public}.0s":"Usage of incorrect column to update timestamp", "column":%{private, location:escape_only}s, "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
@TileList, touch, ignoring, 0, #CloneMe
failed to update timestamp of #tile header
failed to connect to wifi #tile header database
failed to connect to wifi #tile heeaders table
successfully created wifi #tile headers table
CoarseElevation,phone,1,watch,1
CoarseElevation,src,phone,0,watch,1
CoarseElevation,src,phone,1,watch,0
CoarseElevation,src,phone,0,watch,0
Update location authorization, current, %d, new, %d
Enable GPS; Start GPS subscription
Disable GPS; Stop GPS subscription
Location batch notification size %ld
#Warning Received unhandled location provider notification, %d
Incoming odometer, %.8f
#Warning Current odometer sample fails time check. Gps,%.2lf,%.2lf,startTime,%.2lf,%.2lf,odometer,%.2lf,%.2lf
Source may have reset. Gps,%.2lf,%.2lf,startTime,%.2lf,%.2lf,odometer,%.2lf,%.2lf
Odometer source change,previous,%lf,current,%lf
Drop entry! distance, %.8f, startTime, %.8f, gps altitude, %.8f, odometer, %.8f, accuracy, %.8f, gpsSpeed, %.8f, gpsSpeedAccuracy, %.8f, timestampGps, %.8f, rawSpeed, %.8f, originDevice, %d, locationType: %d
Notifying odometer clients, distance, %.8f, startTime, %.8f, gps altitude, %.8f, odometer, %.8f, accuracy, %.8f, gpsSpeed, %.8f, gpsSpeedAccuracy, %.8f, timestampGps, %.8f, rawSpeed, %.8f, originDevice, %d, groundAltitude, %.8f, groundAltitudeUncertainty, %.8f, smoothedGPSAltitude, %.8f, smoothedGPSAltitudeUncertainty, %.8f
CL: CLOdometerNotifierWatch::onCompanionNotification
{"msg%{public}.0s":"CLOdometerNotifierWatch::onCompanionNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLOdometerNotifierWatch::onLocationNotification
{"msg%{public}.0s":"CLOdometerNotifierWatch::onLocationNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
onCoarseElevation,startTime,%.3f,ascended,%d,source,%d,fused,startTime,%.3f,ascended,%d,source,%d
SessionStats,%s,%f,%s,%f,%s,%u,%s,%u,%s,%u,%s,%f,%s,%u,%s,%u,%s,%u,%s,%u,%s,%u,%s,%u
{"msg%{public}.0s":"#usesync Couldn't get nvp", "client":%{public, location:escape_only}s}
{"msg%{public}.0s":"#usesync Merging remote location usage", "client":%{public, location:escape_only}s}
{"msg%{public}.0s":"#usesync Expected a start time xor a stop time", "start time_s":"%{public}.09f", "stop time_s":"%{public}.09f", "service":%{public}lu}
{"msg%{public}.0s":"#usesync Starting remote location service", "client":%{public, location:escape_only}s, "start time_s":"%{public}.09f", "service":%{public}lu}
{"msg%{public}.0s":"#usesync Stopping remote location service", "client":%{public, location:escape_only}s, "stop time_s":"%{public}.09f", "service":%{public}lu}
{"msg%{public}.0s":"#usesync Didn't expect a start and stop time in usage dictionary", "data":%{public, location:escape_only}@}
{"msg%{public}.0s":"#usesync Prompting", "client":%{public, location:escape_only}s, "authorization":%{public}d, "force":%{public}hhd}
{"msg%{public}.0s":"#usesync #warning Failed to masquerade for prompt request", "client":%{public, location:escape_only}s}
#authsync deleteObject: %{public}s
#authsync sending kNotificationReset to the watch
{"msg%{public}.0s":"#usesync Cannot request a remote prompt on this device"}
{"msg%{public}.0s":"#usesync Dropping unsupported request", "type":%{public}d}
{"msg%{public}.0s":"#usesync Cannot prompt", "type":%{public}d}
{"msg%{public}.0s":"#usesync Requesting when in use", "client":%{public, location:escape_only}s}
#warning Cannot request always upgrade for client, %{public}s, client is not authorized when in use.
last improve accuracy notification for %s, %f, retry interval, %f
clear %s improve accuracy notification
could not store clients data
#authsync initializing sync store
#authsync isWatch: %{public}d, isCompanion: %{public}d
Could not register for lock state darwin notification error %{public}d
Could not register for homescreen unlocked darwin notification error %{public}d
#warning Maximum location services enabled prompts per application overridden to %{public}d
airplane mode enabled, %d.
failed to fetch airplane mode state.
#warning Can't get clients for filing crash-grace CLInUseAssertions
#warning Can't get client state for key:%{public}s to file crash-grace CLInUseAssertions
Client %s had ongoing background location, taking temporary crash-grace CLInUseAssertion
Sending app status change notification
#warning no watchdog event from %{public}s, deleting
Client %{public}s connected
Got disconnection for unknown client
Client %{public}s disconnected
#warning location services settings are frozen by restrictions - resetting
resetting and disconnecting all clients from daemon
Client record is '%{public}s' in CLClientManager::copyClients for clientKey %{public}@
Client %s allowable mask (%lu) no longer contains authorization level (%lu) downgrading to (%lu)
Considering whether to mark client, %s, for always power use
Not marking client %s as having used Always-powers (not Always authorized (%s))
{"msg%{public}.0s":"started receiving location information", "client":%{public, location:escape_only}@}
{"msg%{public}.0s":"stopped receiving location information", "client":%{public, location:escape_only}@}
currently %{public}lu non-system location clients
Service: name, %s, type, %s, active, %d
Service: name, %s, type, %s, marked as used
Wakeup Launchd Managed Client: <%{public}s>
Can't find %{public}s connection
clearing regions for client '%s'
clearing significant location change for client '%s'
How can an app be missing if we don't have an entry for it?
couldn't get keys for client dictionary
Should never be executed in this context
Skipping #reprompt iteration because one is already underway
Couldn't get keys for client dictionary
{"msg%{public}.0s":"Commencing #reprompt iteration", "Interval":"%{public}f"}
Not iterating for #reprompt: disabled
System Service %{public}s shouldn't be eligible for a reprompt, but is
Creating trial period #reprompt notification for %{public}s
isClientWhitelisted, %{public}s, %{public}s, %{public}s
executable, %{public}s, strippedName, %{public}s, systemBase, %{public}s
getClientEffectiveRegistrationResult, %{public}s, %{public}s, %{public}s, CLClientRegistrationResult, %{public}s, CLCommonLocationServicesEnabled, %{public}d
location disabled system-wide, denying internal executable %{public}s
location disabled system-wide, denying executable %{public}s
Couldn't get keys for client dictionary, deauthorizing all clients
allowing internal executable %{public}s
#Error no bundle ID or bundle path found - denying %{public}s
platform does not support system service, %{public}s, required capabilities.
already denied executable %{public}s
already authorized WhenInUse executable %{public}s
already authorized Always executable %{public}s
Requesting client (%{public}s) purpose for unsupported registration type %{public}d
purpose string from %s's bundle: '%s'
purpose string from %s's property: '%s'
unable to copy purpose string from client '%{public}s'
ImproveAccuracyNotification object not created for technology, %{public}s
post improve accuracy notification, technology, %s, client, %s
Could not create client prefs notification for %{public}s
Could not create runloop source for client prefs notification for %{public}s
Could not create client user notification for %{public}s
Could not create runloop source for client user notification for %{public}s
already presenting re-enable prompt for %s
presenting re-enable prompt for %s
%s authorization in progress
#warning Auto-denying %{public}s because %{public}s is already denied: app denied %{public}d daemon denied %{public}d
#Notice ERROR: %{public}s is depending on legacy on-demand authorization, which is not supported for new apps
Client %s requested a big switch prompt, but the big switch is already on
Unrecognized/invalid request type: %{public}d
request type %d for %s
unknown registsration result %{public}d
canceling notification for %s
location services settings are frozen by restrictions - denying %{public}s
Setting executable: %{public}s, bundle: %{public}s, bundle path: %{public}s authorization to %{public}d (%{public}s)
%{public}s application deauthorized; deauthorizing daemon as well
%{public}s application deauthorized; daemon not yet used
%{public}s daemon deauthorized; deauthorizing application as well
%{public}s daemon deauthorized; app not yet used
{"msg%{public}.0s":"#CLIUA Required parameter missing", "clientManager":%{public}hhd, "clientKey":%{public, location:escape_only}s, "reason":%{public, location:escape_only}s, "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
{"msg%{public}.0s":"#CLIUA Marking change", "clientKey":%{public, location:escape_only}s, "reason":%{public, location:escape_only}s, "coming":%{public}hhd}
CLIUA: Could not find InUseAssertion with reason '%{public}s' for '%{public}s' to remove it
retrieved empty non-system location client key
Location services available %d; parental controls enabled %d (refresh %d)
#warning location is restricted; freezing client states
location is not restricted
{"msg%{public}.0s":"Removing obsolete client record key from client", "ClientKey":%{public, location:escape_only}@, "ClientRecordKey":%{public, location:escape_only}@, "ClientRecordValue":%{private, location:escape_only}@}
NameValuePair::get failed despite our bounds checking
#warning %{public}s time started exists (%{public}.2f), but time stopped (%{public}.2f) doesn't exist or is earlier for %{public}s - setting to %{public}.2f
Resuming client '%s'
Failed to resume '%{public}s': assertion not acquired
Failed to resume '%{public}s': init failure
Non-app client is was a background client?
Scheduling pending app status event
#warning %{public}s region time started exists (%{public}.2f), but time stopped (%{public}.2f) doesn't exist or is earlier for %{public}s - setting to %{public}.2f
#warning Significant time started exists (%{public}.2f), but time stopped (%{public}.2f) doesn't exist or is earlier for %{public}s - setting to %{public}.2f
stop range for client '%s'
installation check found %ld uninstalled apps (amongst %ld total clients and %ld bundle IDs)
%s is missing
%s was explicitly uninstalled
%s has been missing for %.3fs (safe harbor threshold: %.3fs) - clearing
Deleting entry for %s
%s has been missing for %.3fs (safe harbor thershold: %.3fs)
%s was missing for %.3fs (safe harbor threshold: %.3fs) - clearing
%s restored within safe harbor time of %.3fs - keeping
updated AppUninstallTimer; next timer will fire in %.3fs
client, '%s', app's client cnt, %d, active, %d, spectator, %d, batchEnabled, %d, desiredAccuracy, %.2f, distanceFilter, %.2f
client, '%s', app's client cnt, %d, active, %d
mayTakeProcessAssertion,%d,background,%d,slc,%d
Received trial reprompt notification without a designated promptee
User has authorized continued access for %s at reprompt
User has selected 'settings' on reprompt for %{public}s... taking them there
#warning No user response to client %{public}s (flags 0x%{public}lx)
#warning received notification for unknown client
{"msg%{public}.0s":"User responded to prompt for client", "key":%{public, location:escape_only}s, "requestType":%{public}d, "response":%{public}d}
{"msg%{public}.0s":"User dismissed prompt for client", "key":%{public, location:escape_only}s}
Received response (%{public}s) for invalid/unrecognized response type (%{public}d)
open preferences with url, %{public}s
Couldn't create Preferences URL, %{public}s
could not launch Preferences
received notification for unknown client
#warning no user response to client %{public}s (flags 0x%{public}lx)
ImproveAccuracyNotification object not created for notification, %{public}p
#warning no user response for improve accuracy prefs notification %{public}s (flags 0x%{public}lx)
GPS_NETWORK: currentStatus(%d) isGpsControlledByNetwork(%d)
{"msg%{public}.0s":"#authsync sending kNotificationLocationServicesStatus"}
Setting executable %s
Setting bundle ID %s and executable %s
Keep Apps Up To Date changed
Unknown notification: %{public}d
Received state request for region,'%s/%s'.
Received state transition for region,'%s/%s'.
AppMonitor notification, %d, %s, pid, %d, bundleId, %s
AppMonitor notification, %d, %s, pid, %d, bundleId, %s, client, %s, connection, %p
'%{public}s' task suspended: removing client
wifi power state, %d.
wifi enabled
bluetooth power state, %d.
bluetooth enabled
#warning Can't migrate "%{public}s" to "%{public}s": client already exists with an auth of "%{public}d"
Can't migrate "%{public}s" to "%{public}s": NVP failure
Migrated "%{public}s" to "%{public}s"
"%{public}s" not found, skipping migration
Removing entry for bundle ID %{public}s if present
%{public}s not supported, removing entry for bundle ID %{public}s if present
Removing entry for bundle path %{public}s if present
#warning bundle path, '%{public}s', does not exist on disk;  clearing.
AuthMigrate(%{public}s): Skipping: could not get client nvp
AuthMigrate(%{public}s): Authorization mask contains Always but not WhenInUse
AuthMigrate(%{public}s): Skipping: no Authorized key
AuthMigrate(%{public}s): Preserving Authorization over Authorized
AuthMigrate(%{public}s): Y => Always
AuthMigrate(%{public}s): N => Never
AuthMigrate(%{public}s): Authorization mask already available
AuthMigrate(%{public}s): Imputing default supported authorization mask
Client %{public}s missing for authorization update, but didn't we just create it?
{"msg%{public}.0s":"#usesync Failed to retrieve client info for migration", "key":%{public, location:escape_only}s}
could not retrieve bundle IDs
Unable to save clients list after migration, data loss due to crash possible
Setting client for bundle path %s
{"msg%{public}.0s":"update client authorization mask", "name":%{public, location:escape_only}s, "old":%{public}d, "new":%{public}lu, "localAuthorizationChange":%{public}d}
#warning New authMask %{public}lu for client %{public}s implicitly extends its supported mask (%{public}d) until next connection & slide
#warning Never auth of novel client %{public}s... providing default of SomeKindOfYes until next connection & slide
{"msg%{public}.0s":"Unsupported CLClientServiceType", "serviceType":%{public}lu, "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
DAR: could not read map file %{public}s
DAR map: %s
DAR map sorted keys: %s
DAR: original location: %.8f, %.8f, %.2f
DAR:  reduced location: %.8f, %.8f, %.2f
#Warning DAR: applying default quantization %f
DAR: applying new quantization %f based on ap count %d
DAR: applying cached quantization %f
ALTERED: location: %.8f, %.8f, %.2f, %d, %d
ALTERED: original location: %.8f, %.8f, %.2f, %d, %d
ALTERED:  unaltered location: %.8f, %.8f, %.2f, %d, %d
CL: CLClientManager::onDarwinNotification
{"msg%{public}.0s":"CLClientManager::onDarwinNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLClientManager::onCarrierNotification
{"msg%{public}.0s":"CLClientManager::onCarrierNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLClientManager::onStatusNotification
{"msg%{public}.0s":"CLClientManager::onStatusNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLClientManager::onBTLEFenceNotification
{"msg%{public}.0s":"CLClientManager::onBTLEFenceNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLClientManager::onFenceNotification
{"msg%{public}.0s":"CLClientManager::onFenceNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLClientManager::onRestrictionsChangedNotification
{"msg%{public}.0s":"CLClientManager::onRestrictionsChangedNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLClientManager::onAppMonitorNotification
{"msg%{public}.0s":"CLClientManager::onAppMonitorNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLClientManager::onDaemonStatusNotification
{"msg%{public}.0s":"CLClientManager::onDaemonStatusNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLClientManager::onWifiServiceNotification
{"msg%{public}.0s":"CLClientManager::onWifiServiceNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLClientManager::onBluetoothServiceNotification
{"msg%{public}.0s":"CLClientManager::onBluetoothServiceNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLClientManager::onStoreTimer
{"msg%{public}.0s":"CLClientManager::onStoreTimer", "event":%{public, location:escape_only}s, "this":"%{public}p"}
#warning could not get localized string '%{public}s'!
could not get UN localized bundle name from bundle at '%{public}s'; soup cannot be given to them.
CFUserNotification event delivery for unknown notification
CLRTD,too few points to detect
CLRTD,failed to convert input points to enu coordinates
CLRTD,loopStartIndex,%lu,loopEndIndex,%lu,out of enuCoordinates size,%lu
CLRTD,loop detected from,%.1lf,to%.1lf
#Warning,CLRTD,Could not convert LLA Coordinate %{Private}.7lf,%{Private}.7lf to ENU
CLRTD,non-track detected,numOutOfBoundaryPoints,%d,numOfPoints,%lu
CLRTD,track detected,numOutOfBoundaryPoints,%d,numOfPoints,%lu
TILE: mmapTile, prefer local file name because it exists, %s
TILE: mmapTile, can't open, %s, errno, %d, %s
TILE: can't stat, %s, errno, %d, %s
TILE: corrupt header, fileGetNextSection, size, %zd, readto, %lld, %d
TILE: traverseTileFile, start, message, %s, isHeadersOnly, %d, isBinarySearch, %d, macAddressToSearch, %012llx
TILE: traverseTileFile, can't open tile
TILE: traverseTileFile, file is empty
TILE: thisSection, message, %s, readBytes, %lu, section, signature, 0x%x, sectionId, %d, sizeBytes, %d, headerSizeBytes, %d, name, %s
TILE: Invalid section signature, readBytes, %lu, section, signature, 0x%x, sectionId, %d, sizeBytes, %d
TILE: invalid tile file, bad allocation size, totalBytesInSection, %lu, maxAllocationSize, %lu
TILE: failed to allocate memory for, %lu
TILE: failed to read pSectionH, %lu, %lu
TILE: section, signature, 0x%x, sectionId, %d, headerSizeBytes, %u, sizeBytes, %u
TILE: ERROR: failed to fseek to, currentFileOffset, %lu, %u
TILE: traverseTileFile, done
TILE: CLTileFile, sectionId, %d, %s
TILE: tile, version, %d, y, %u, x, %u, corner, %.8f, %.8f, detlas, %.2f, %.2f, altitude, %f,  minAltitude, %f, maxAltitude, %f, numOfInputPoints, %d, generationTime, %.1f, expirationAge, %d, %d, age, %.1lf
TILE: onTraversingTileHeaderKeyLatLon, tileid, %s
TILE: tile.keylatlon, version, %d, y, %u, x, %u, corner, %.8f, %.8f, detlas, %.2f, %.2f, generationTime, %.1f, expirationAge, %d, age, %.1lf, sec_key, %016llx
TILE: tile.location, tileid, %s, serverName, %s
TILE: tile.location, version, %d, y, %u, x, %u, corner, %.8f, %.8f, detlas, %.2f, %.2f, generationTime, %.1f, expirationAge, %d, age, %.1lf
TILE: tileMacIndexHeader, headerSizeBytes, %u, tileMacIndexHeader, entrySizeInBytes, %u, numOfEntries, %u
TILE: idx, %3u, mac,%x:%x:%x:%x:%x:%x, offset, %u
TILE: tileAccessPointTable, headerSizeBytes, %u, tileAccessPointTable, entrySizeInBytes, %u, numOfEntries, %u
TILE: mac, %3u, mac,%x:%x:%x:%x:%x:%x, y, %3d, x, %3d, loc, %14.10lf, %14.10lf
TILE: read data, sectionId, %d, entriesOffset, %u, entriesNumToRead, %u
TILE: ERROR: failed to skip entries pre read, %u, ret, %d
TILE: ERROR: failed to read bytes, %u, %u
language changed - refreshing
could not use english as default language
#Warning could not get localizations array from bundle
#Warning could not get localizations for preferred languages
#Warning no localizations for preferred languages
getting '%s' localized strings for '%s'
#Warning could not get resource URL for %s
could not create input stream for %{public}s
could not deserialize data from URL for %{public}s, error, %{public}s
#Warning issue retrieving localized strings for bundle '%s'
key %{public}s does not contain a string value
no corresponding string for %{public}s
#Warning received unknown notification %s from telephony service
should not write to carrier bundle
CL: CLCarrierSettings::onTelephonyNotification
{"msg%{public}.0s":"CLCarrierSettings::onTelephonyNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
#Notice Overriding device activation status check.
#Notice Unable to query pairing id, suspending activity tracking.
#Notice Unable to obtain pairing id, suspending activity tracking.
#Warning Failed to get fitness tracking state in Bridge->Motion&Fitness. It may not have been set yet. Assuming default.
#Notice Fitness tracking is disabled, suspending activity tracking.
#Notice Device on-charger, suspending activity tracking.
#Warning Un-handled notification,%d
CL: CLFitnessTrackingNotifier::fitnessTrackingStateChanged
{"msg%{public}.0s":"CLFitnessTrackingNotifier::fitnessTrackingStateChanged", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLFitnessTrackingNotifierWatch::pairingStateChanged
{"msg%{public}.0s":"CLFitnessTrackingNotifierWatch::pairingStateChanged", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLFitnessTrackingNotifierWatch::onBatteryNotification
{"msg%{public}.0s":"CLFitnessTrackingNotifierWatch::onBatteryNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
HEALTH_SMOOTH,too few points to smooth
HEALTH_SMOOTH, corner detection failed
HEALTH_SMOOTH: Corner found at %{public}d, %{private}.7f, %{private}.7f
HEALTH_SMOOTH: Running track detection failed
CLRTD: Running track detected!
CLRTD: horizontalPositionProcessNoise,%.3lf
HEALTH_SMOOTH, Indexing error
HEALTH_SMOOTH,Smoother Run Failed
HEALTH_SMOOTH,Indexing error
#Warning HEALTH_SMOOTH,Conversion Failed, excluding point at gpsSec %f
HEALTH_SMOOTH,smoother is unhealthy
HEALTH_SMOOTH,samples rejected,%{public}lu
Watch Orientation,Orientation Notifier Instantiated
Watch Orientation,Orientation Notifier is shutting down.
Watch Orientation,Added client for %d, count %d
Watch Orientation,Removed client for %d, count %d
Watch Orientation,Crown orientation setting key is invalid, defaulting to crown on right (not inverted)
Watch Orientation,Wrist orientation setting key is invalid, defaulting to left wrist
Watch Orientation,crown,%{public}d,wrist,%{public}d
CL: CLWatchOrientationSettingsNotifier::onOrientationSettingsChanged
{"msg%{public}.0s":"CLWatchOrientationSettingsNotifier::onOrientationSettingsChanged", "event":%{public, location:escape_only}s, "this":"%{public}p"}
Stair Climbing, load calibration, %d, HR mode, %d, mets scaling factor, %f, VO2max scaling factor, %f
Stair Climbing, Work Rate Model, timestamp, %f, step frequency, %f, WRMETS, %f, sinceLastGood, %f
Stair Climbing, HR Rate Model, timestamp, %f, catherine(cpm), %f, catherinemax(cpm), %f, catherinemin(cpm), %f, vo2max(METs), %f, METS, %f
Stair Climbing, timestamp, %f, HRMETs, %f, WRMETs, %f, calibrationValue, %f, loadCalStatus, %d
Stair Climbing, timestamp, %f, finalMETS, %f, fMetsScaling, %f
Resetting elevation arbiter
Time rollback compared to fPrevStepCountElevation, currentTime, %f, previousTime, %f
Time rollback, currentTime compared to fFinalElevation, %f, previousTime, %f
#diagnosticManager beginService
#diagnosticManager endService
Add file to #diagnosticManager: %{public}@
Trying to register a nil NSURL
Remove file to #diagnosticManager: %{public}@
Trying to unregister a nil NSURL
Client requested #diagnosticManager file copy to dest: %@
diagnosticManager trying to copy file: %@
{"msg%{public}.0s":"Failed to copy diagnostic file", "srcURL":%{public, location:escape_only}@, "dstURL":%{public, location:escape_only}@, "error":%{public, location:escape_only}@}
#diagnosticManager received new XPC Connection request
Why didn't we get a connection?
{"msg%{public}.0s":"#diagnosticManager missing entitlement", "entitlement":%{public, location:escape_only}s, "pid":%{public}d}
#diagnosticManager Interruption handler called
#diagnosticManager Invalidation handler called
#diagnosticManager Resuming XPC Connection: %@
#diagnosticManager fileManager asking if should copy from %@ to %@
Trying to move a file that is not in our cache directory: %@
configuration: low band = [%d %d] high band [%d %d]
configuration: classifierMinLowPower = %f, classifierMaxLowPower = %f, classifierMaxHighPower = %f
configuration: theta = [%.2f %.2f %.2f %.2f %.2f %.2f]
configuration: oddsThreshold = %f, medianFilterSize = %zu, confidenceThreshold = %f, useHysteresis = %d, useAngleOverride = %d, angleMetricThreshold = %f
Assertion failed: fHeadAndSize.fSize == 0 && fHeadAndSize.fHead == 0, file /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Oscar/CMQueue.h, line 93,size,%u,head,%u.
Type,%s,bias.x,%20.20f,bias.y,%20.20f,bias.z,%20.20f,variance.x,%20.20f,variance.y,%20.20f,variance.z,%20.20f,doingBiasEstimation,%d
Invalid cpas data.
The cpas data is not a CFData type.
#Warning Cpas data is NULL.
#Warning Cpas pointer is NULL.
Unexpected cpas version: %u.
Original serial number data is NULL.
Original serial number pointer is NULL.
Invalid back camera serial number data.
Incorrect back camera serial number length. Actual length %ld. Expected length %lu.
Current serial number data is NULL.
Bailing while checking VCM actuator ID.
VCM actuator ID data type %d does not match expected type %d
#Warning CPAS data is NULL.
#Warning CPAS pointer is NULL.
{"msg%{public}.0s":"#Stream Stop timer fired"}
{"msg%{public}.0s":"#Stream Motion alarm stop timer fired"}
{"msg%{public}.0s":"#Stream Repeating motion state"}
{"msg%{public}.0s":"#Stream Sending alive again after a delay", "last timestamp":"%{public}f"}
{"msg%{public}.0s":"#Stream Sending alive again"}
{"msg%{public}.0s":"#Stream Shut down location"}
{"msg%{public}.0s":"#Stream #CLEEA change", "needed":%{public}hhd}
{"msg%{public}.0s":"#Stream Notifying remote client fitness session status", "in session":%{public}hhd}
{"msg%{public}.0s":"#Stream Starting", "new granularity":%{public, location:CLLocationStreamingGranularity}lld, "current granularity":%{public, location:CLLocationStreamingGranularity}lld}
{"msg%{public}.0s":"#Stream Unexpected granularity", "granularity":%{public, location:CLLocationStreamingGranularity}lld}
{"msg%{public}.0s":"#Stream Dropping location due to expiration", "timestamp":"%{public}f", "lifespan":"%{public}f"}
{"msg%{public}.0s":"#Stream Unexpected notification", "notification":%{public, location:CLLocationProvider_Type::Notification}lld}
{"msg%{public}.0s":"#Stream Motion state subscription", "is subscribed":%{public}d}
{"msg%{public}.0s":"#Stream Start motion alarm", "currently active":%{public}d}
{"msg%{public}.0s":"#Stream Stop motion alarm", "currently active":%{public}d}
{"msg%{public}.0s":"#Stream Unexpected motion notification", "notification":%{public}d}
{"msg%{public}.0s":"#Stream Missing data", "key":%{public, location:escape_only}s}
{"msg%{public}.0s":"#Stream Unrecognized message type", "type":%{public, location:escape_only}s}
{"msg%{public}.0s":"#warning #Stream Message failed to send", "type":%{public, location:escape_only}s, "error":%{public, location:escape_only}@, "fatal":%{public}d}
{"msg%{public}.0s":"#Stream Message sent", "type":%{public, location:escape_only}s}
{"msg%{public}.0s":"#Stream Paired device has left us, stopping location"}
CLC: Init power state: off
{"msg%{public}.0s":"CLC: Unknown CLCachedLocationController::CachedLocationState value", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
CLC: Debounce changed to %{private}lf [s]
CLC: Already in state %{private}s, %{private}lf
CLC: Cached Location changed state from %{private}s to %{private}s
CLC: Debounce timer fired, stopping
CLC: Received start route
CLC: Received end route
CLC: Received unknown notification, %{public}d
CLC: Recevied kNotificationAuthorization for %{private}s
CLC: Received Location Services status %{public}d
#Warning CLC: Received unknown notification, %{public}d
CLC: Resume for exception, %{public}#x, oldExceptions %{public}#x
CLC: Resume
CLC: Suspend for exception, %{public}#x, oldExceptions %{public}#x
CLC: Suspend
CL: CLCachedLocationController::onClientManagerNotification
{"msg%{public}.0s":"CLCachedLocationController::onClientManagerNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLCachedLocationController::onAppMonitorNotification
{"msg%{public}.0s":"CLCachedLocationController::onAppMonitorNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLCachedLocationController::onLocationUpdateNotification
{"msg%{public}.0s":"CLCachedLocationController::onLocationUpdateNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
#Warning CLMM, Tile Error Reported:%{public}lld (%{public}@) "%{private}@"
CLMM, disabling tile loader
CLMM, enabling tile loader
CLMM, GeoMapAccess did not have sufficient data available (roadsWithinDistance)
#Warning CLMM, query failed (roadsWithinDistance)
CLMM, GeoMapAccess did not have sufficient data available (roadsConnected)
#Warning CLMM, query failed (roadsConnected)
CLMM, GeoMapAccess did not have sufficient data available (roadsAtIntersection)
#Warning CLMM, outgoing roads query failed (roadsAtIntersection)
#Warning CLMM, incoming roads query failed (roadsAtIntersection)
CLMM, GeoMapAccess did not have sufficient data available (moveOnRoad)
#Warning CLMM, query failed (moveOnRoad)
#Warning CLMM, GeoMapAccess query timed out
{"msg%{public}.0s":"Assertion failed,coordinateCount <= 1", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
{"msg%{public}.0s":"Assertion failed,NULL CoordArray", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
{"msg%{public}.0s":"Assertion failed, distanceCalc is NULL", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
{"msg%{public}.0s":"Assertion failed, coordinateCount <= 0", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
#Warning CLMM,isConnectedToStartOfRoad,disconnected road
{"msg%{public}.0s":"Assertion failed, incorrect coordinateCount", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
{"msg%{public}.0s":"Assertion failed, could not interpolate to intended projection", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
WorkloadCalibration, timestamp, %f, HRMETs, %f, WRMETs, %f, calibrationValue, %f, calibratedMets, %f
Workload Calibrator, DB Delete Records Before, expirationTime, %f
Workload Calibrator, DB Get All Records By Activity Type And Maximum Standard Deviation, activityType, %u, standardDeviation, %f
Workload Calibrator, Bootstraping Calibration, Value, %f
Workload Calibrator, DB Insert, activityType, %u, valueAverage, %f, standardDeviation, %f, entry.startTime, %f
Workload Calibrator, DB Delete Keep Last N, kMaximumDbHistorySize, %lu, activityType, %u
Workload Calibrator, DB Update, activityType, %u, valueAverage, %f, standardDeviation, %f, entry.startTime, %f
Taking gps odometer power assertion.
Releasing gps odometer power assertion.
onCoarseElevation,startTime,%f,ascended,%d,source,%d
Odometer(GPS),%f,%f,%f,%f,%f
#Warning Received unhandled location notification, %d
CL: CLOdometerNotifierCompanion::onLocationNotification
{"msg%{public}.0s":"CLOdometerNotifierCompanion::onLocationNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
Bluetooth is OFF, ignoring request to scan
Found device %{private}s withData: %{private}s
Found a device but its UUID is nil
No IP address provided. Ignoring device
Not enough data provided for advertisement data. Ignoring
AirPlaySolo started scanning
AirPlaySolo stopped scanning
Failed to start AirPlaySolo scanning. %{public}@
init %s, %s
Resetting significant elevation %s, %s
%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%d,%s,%s,%s,%f
%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%s,%s,%f
Not companion or watch. Returning.
AutomaticStrideCalibration,Pass,CreatingDaemonCacheForCalibrationBins
AutomaticStrideCalibration,Success,AllChecksPassed
setSession,oldSession,%ld,newSession,%ld
A new calData is added: %s
ForcingLocationDueToGizmoRequest,session,%ld,%s
StepRunNotification,Pass,LeechingLocation,Steps,%d
StepRunNotification,Pass,AttemptingToForceLocation,Steps,%d
AttemptForcedLocation,Fail,NotSufficientTimeSinceLastCalibrationSuccess,TimeSinceLastCalibrationSuccess,%0.3f
AttemptForcedLocation,Fail,NotSufficientTimeSinceLastCalibrationAttempt,TimeSinceLastCalibrationAttempt,%0.3f
AttemptForcedLocation,Fail,NotSufficientTimeSinceLastConverged,TimeSinceLastCalibrationAttempt,%0.3f
AttemptForcedLocation,Success,AllChecksPassed
Terminated forced calibration.
LocationStateOld,%d,LocationStateNew,%d
TrackClose,Pass,LocationTimeout,TimeSinceLastPosition,%0.3f
TrackClose,Pass,ForcedNotSufficientSteps,Steps,%d
TrackClose,Pass,EnabledNotSufficientSteps,Steps,%d
TrackCalibration,Fail,Pedometer distance is zero,startTime,%f,endTime,%f
TrackCalibration,Fail,rawSpeed %f out of bounds,startTime,%f,endTime,%f
TrackCalibration,Fail,KFactorOutOfBounds,%s,KFactor,%0.4f,RawSpeed,%f,startTime,%f,endTime,%f
SessionMetrics,Fail,Pedometer,GainOutOfBounds,DistanceFusion,%0.6f,startTime,%f,endTime,%f
SessionMetrics,Fail,GPS,GainOutOfBounds,DistanceFusion,%0.6f,startTime,%f,endTime,%f
CalData, %s, stepEntryEpochTime, %f
SessionMetrics,Fail,Gradient,DistanceFusion,startTime,%f,endTime,%f
FloorsAscended,%d,FloorsDescended,%d
DEM,Reading,%{public}s
#Warning,DEM,could not open,%{public}s
#Warning,DEM,avl byte index,%{public}d,is larger than the data available in the availabilty file
#Warning,DEM,Invalid CLDEM availability file - unable to get data byte
DEM,Unexpected case
DEM,availability file has expired - redownload
DEM,availability file version does not match expected
DEM,finished
DEM,fseek returned non-zero
#Warning,DEM,Invalid CLDEM availability file - header string
#Warning,DEM,Invalid CLDEM availability file - invalid header string
#Warning,DEM,Invalid CLDEM availability file - version
#Warning,DEM,Invalid CLDEM availability file - headerLength
#Warning,DEM,Invalid CLDEM availability file - minLat
#Warning,DEM,Invalid CLDEM availability file - maxLat
#Warning,DEM,Invalid CLDEM availability file - binsize
#Warning,DEM,coarse avl file is not 0.1 deg by 0.1 deg,spacing unexpected,%{public}.1f,re-download needed
#Warning,DEM,Invalid CLDEM availability file - timestamp
#Warning,DEM,Invalid CLDEM availability file - expiration age
#Warning,DEM,Invalid CLDEM availability file - data size
#Warning,DEM,Invalid CLDEM availability file - crc
CLMM, DisableMapMatchingRouteHints, %{public}d
Finished constructing CLFitnessTrackingNotifier
CLFitnessTrackingNotifier::client count [%d]: %d
CLFitnessTrackingNotifier::Invalid notification: %{public}d
{"msg%{public}.0s":"#usesync UUIDs found", "on disk":%{public, location:escape_only}s, "current":%{public, location:escape_only}s}
{"msg%{public}.0s":"#usesync Serial", "serial":%{private, location:escape_only}s}
{"msg%{public}.0s":"#usesync Non-active device unpaired", "current id":%{public, location:escape_only}s}
{"msg%{public}.0s":"#usesync Unpair", "current id":%{public, location:escape_only}s, "active id":%{public, location:escape_only}s}
{"msg%{public}.0s":"#usesync Pairing", "new id":%{public, location:escape_only}s, "old id":%{public, location:escape_only}s}
{"msg%{public}.0s":"#usesync Setting 5 minute error retry timer"}
{"msg%{public}.0s":"#usesync Adding a message to the error queue", "type":%{public, location:escape_only}s}
{"msg%{public}.0s":"#usesync Draining the error queue", "count":%{public}lu}
{"msg%{public}.0s":"#usesync Error queue drained"}
{"msg%{public}.0s":"#usesync Message was replaced"}
{"msg%{public}.0s":"#usesync Message timed out.  Retrying"}
{"msg%{public}.0s":"#usesync #warning Got error from IDS, attempting to recover", "error":%{public, location:escape_only}@}
{"msg%{public}.0s":"#usesync #warning Had to drop a prompt request, unrecoverable error", "error":%{public, location:escape_only}@}
{"msg%{public}.0s":"#usesync Unrecognized type message failed to send.  Cannot recover.", "type":%{public, location:escape_only}s}
{"msg%{public}.0s":"#usesync Dropping a message because we aren't paired", "type":%{public, location:escape_only}s}
{"msg%{public}.0s":"#usesync Didn't get an identifier for message", "type":%{public, location:escape_only}s}
{"msg%{public}.0s":"#usesync Full resync requested"}
{"msg%{public}.0s":"#usesync Got empty usage dictionary", "client":%{public, location:escape_only}s}
{"msg%{public}.0s":"#usesync Mapped client", "original":%{public, location:escape_only}s, "result":%{public, location:escape_only}s}
{"msg%{public}.0s":"#usesync Enqueued usage update message", "client":%{public, location:escape_only}s, "usage":%{public, location:escape_only}@}
{"msg%{public}.0s":"#usesync Attempting to send prompt request from bad device"}
{"msg%{public}.0s":"#usesync Requested prompt", "client":%{public, location:escape_only}s, "authorization status":%{public}d}
{"msg%{public}.0s":"#usesync Enqueued all usage data"}
{"msg%{public}.0s":"#usesync Unknown message failed", "error":%{public, location:escape_only}@}
{"msg%{public}.0s":"#usesync Message from past life failed", "identifier":%{public, location:escape_only}s, "error":%{public, location:escape_only}@}
{"msg%{public}.0s":"#usesync Message sent", "identifier":%{public, location:escape_only}s}
{"msg%{public}.0s":"#usesync Got usage update"}
{"msg%{public}.0s":"#usesync Didn't get an expected parameter", "client key":%{public}hhd, "usage data":%{public}hhd}
{"msg%{public}.0s":"#usesync Got prompt request"}
{"msg%{public}.0s":"#usesync Got unexpected message for this device"}
#USESYNC Missing an expected argument.  Client %p, authorization %p
{"msg%{public}.0s":"#usesync Got request for full resync of data"}
{"msg%{public}.0s":"#usesync Got full resync data"}
{"msg%{public}.0s":"#usesync #warning Failure", "identifier":%{public, location:escape_only}s, "succeeded":%{public}hhd, "error":%{public, location:escape_only}@}
{"msg%{public}.0s":"#usesync sent", "identifier":%{public, location:escape_only}s}
{"msg%{public}.0s":"#usesync Got invalid message from IDS", "message":%{public, location:escape_only}@}
{"msg%{public}.0s":"#usesync Sequence number is old.  Ignoring message"}
{"msg%{public}.0s":"#usesync Unrecognized message", "type":%{public, location:escape_only}s, "payload":%{private, location:escape_only}@}
{"msg%{public}.0s":"#usesync Paired device nearby change", "is nearby":%{public}hhd}
Lat/lon is out of range for conversion.
Input to Douglas-Peucker algorithm must have at least one vertex.
DynamicProgramArea distance is not implemented
#Warning Never achieved the desired simplification. Using the original curve.
Programming error. Number of points in backtrack do not match expected (1).
Programming error. Number of points in backtrack do not match expected (2): %{public}d, %{public}d
Loaded previous time zone %s
Setting start timer to fire at %.2f (%.2fs away)
Setting active mode timer to fire at %.2f (%.2fs away)
Setting continuous location timer to fire at %.2f (%.2fs away)
ReachabilityTimer fired
Continuous location timer fired
#Warning Failed to get any fix while in continuous location mode
Location services are disabled; stopping automatic time zone
Time Zone system service disabled; stopping automatic time zone
Automatic time zone starting in passive mode
Automatic time zone starting in active mode
Automatic time zone disabled
Starting automatic time zone in active mode
Already have previous border distance and timestamp
Entering active location mode
Exiting active location mode
Starting automatic time zone in passive mode
Stopping automatic time zone
We ran point-in-polygon on a location we threw out anyway!
Current time zone %s not in database; changing time because of acceptable location accuracy %.3f
Telling timed the time zone is "%s".
bystander location, used to set time zone, billed to 'TimeZone' system service
Time Zone failed to retrieve location.
#Notice Potentially setting system time zone to %s based on <%+.8lf,%+.8lf> acc %.2f timestamp %.2f confidence %d
#Notice Potentially setting system time zone to %{public}s
Potentially setting system time zone to %s based on <%+.8lf,%+.8lf> acc %.2f timestamp %.2f confidence %d
#Warning Received invalid location for time zone
#Warning Disregarding location with accuracy: %.1f (> %.1f)
Received invalid location <%+.8f,%+.8f> for time zone
#Warning Disregarding location for timezone with speed: %.1f (> %.1f)
Handling new location <%+.8lf,%+.8lf>, acc %.2f, timestamp %.2f, lifespan %.2f, confidence %d
#Warning Couldn't get time zone for location <%+.8lf,%+.8lf>
Time zone from database was %s
Unconfirmed border distance is <= 0 yet we have an unconfirmed timezone label.
Not using <%+.8lf,%+.8lf> (timestamp %.2f) because interval has not elapsed
Got data mode change notification; entering continuous location mode
Got data mode change notification, but haven't exceeded reachability interval(%.3f s).  Will try again in %.3f s
Got airplane entered notification
Got airplane mode exited notification; entering continuous location mode
Ignoring expired location <%+.8f, %.8f>, acc %.2f, timestamp %.2f, lifespan %.2f
Ignoring unsure location <%+.8f, %.8f>, acc %.2f, timestamp %.2f, lifespan %.2f, confidence %d
Got kNotificationLocationUnavailable
Got kNotificationServiceAuthorization
#Warning Got unknown notification %d
Automatic time is now in mode %d
#Warning location status reset; removing all clients
Got immediate check notification
Transition from continuous active to continuous active with retry
Already in continuous location mode; not re-entering
Location services are disabled; not starting continuous location
Time Zone system service disabled; not starting continuous location
In bystander-only mode; not starting continuous location
Entering continuous location mode
Timezone is not confirmed.
Not in continuous location mode; not exiting
Exiting continuous location mode
Not registered for location or fine location; ignoring location failure
Got location unavailable while in continuous location mode; ignoring location failure
Location failed for time zone (exiting continuous mode %d; failure count now %d)
Maximum failure count not exceeded; retrying in %.2f seconds
Exceeded maximum failures; not retrying for %.2f seconds
CL: CLTimeZoneManager::onSettingsNotification
{"msg%{public}.0s":"CLTimeZoneManager::onSettingsNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLTimeZoneManager::onLocationNotification
{"msg%{public}.0s":"CLTimeZoneManager::onLocationNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLTimeZoneManager::onStatusNotification
{"msg%{public}.0s":"CLTimeZoneManager::onStatusNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLTimeZoneManager::onManagerNotification
{"msg%{public}.0s":"CLTimeZoneManager::onManagerNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLTimeZoneManager::onStartTimer
{"msg%{public}.0s":"CLTimeZoneManager::onStartTimer", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLTimeZoneManager::onActiveModeTimer
{"msg%{public}.0s":"CLTimeZoneManager::onActiveModeTimer", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLTimeZoneManager::onContinuousLocationTimer
{"msg%{public}.0s":"CLTimeZoneManager::onContinuousLocationTimer", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLTimeZoneManager::onReachabilityTimer
{"msg%{public}.0s":"CLTimeZoneManager::onReachabilityTimer", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLTimeZoneManager::onImmediateCheckNotification
{"msg%{public}.0s":"CLTimeZoneManager::onImmediateCheckNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLTimeZoneManager::onLocationTimeZoneActiveNotification
{"msg%{public}.0s":"CLTimeZoneManager::onLocationTimeZoneActiveNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
Overriding fence start delay to %{private}.2f
setting FenceStartShowDialog to %{private}d
Setting fence start timer to fire at %.3f (%.2f seconds away)
Fence: Starting fence monitoring
Fence: Already started fence monitoring
Fence: CLFenceManager, shutdown
Fence: resetFenceMonitoring_nl
Fence: startMonitoringAllFences_nl
Starting to monitor all %{public}ld authorized fences
Fence: startMonitoringFences_nl
Fence: stopMonitoringFences_nl
Fence: fence not added, too many fences, %{private}s, %{private}lu, %{private}u
Fence: monitoring is not supported on this platform; not adding fence %{private}s/%{private}s
Not adding fence %{private}s/%{private}s because coordinate is invalid
Fence: canPerformMonitoringForFence is true, fence, %{private}s
Fence: canPerformMonitoringForFence is false, fence, %{private}s
Fence: Adding fence %{private}s/%{private}s <%{private}+.8f,%{private}+.8f>
Fence: sending kNotificationFenceFailure, fence, %{private}s
Fence: sending kNotificationFenceSetupCompleted, fence, %{private}s
Fence: Removing fence %{private}s/%{private}s
Fence: requestRegionState, %{private}s/%{private}s, registered, %{public}d, authorized, %{public}d
Fence: requestRegionState, fence, %{private}s/%{private}s, status, %{private}d, %{private}s
Fence: requestRegionState, fence, %{private}s/%{private}s, not authorized
Fence: requestRegionState, fence, %{private}s/%{private}s, not registered
Fence: requestRegionState, fence, %{private}s/%{private}s, error.
Fence: fence, %{private}s, new status, %{private}s, isIssueNotification, %{private}d, fenceAge, %{private}.1lf, fLocationUpdatesStopTimestamp, %{private}.1lf, fLocationUpdatesStartTimestamp, %{private}.1lf
Fence: fence, %{private}s, new status, %{private}s, bundleId, %{private}s, not authorized, avoiding notification
#Warning Fence: avoid sending an unknown notification, fence, %s
Fence: pending, status, %{private}s, fence, %{private}s, timestamp, %{private}.1lf
Sending %{private}s notification for %{private}s/%{private}s to client %{private}d%{private}s
#Warning Unknown fence status
Fence, %s, name, %s, date, %ld/%ld, time,%ld:%ld:%ld, loc, %.8lf, %.8lf, acc, %.2lf, distance, %.1lf
#Warning Fence: avoid sendFenceStatusNotification, fence, %s, status, %s, searchStatus, %s, client, %d, timestamp,%.1lf
Fence: sendFenceStatusNotification,fence,%s,fenceStatus,%s,searchStatus %s,client,%d
Fence: got kNotificationFenceStatusChange
Fence: got kNotificationFenceDownloadRequest, fence, %s
Fence: Got data downloaded notification for [%s]/%s/%s
#Warning Fence: Got data download failure notification for [%s]/%s/%s
Fence: Got data download invalidated notification
Got kNotificationLocationServicesStatus, enabled, %{public}d
Got fLocationUpdatesStopTimestamp, %.1lf, fLocationUpdatesStartTimestamp, %.1lf
Reauthorization requested, forcing start.
#Warning Got unknown client notification %d
Got fence addition notification for %ld fences
Fence [%s]/%s/%s is authorized
Fence [%s]/%s/%s is not authorized
Got fence removal notification for %ld fences
Got fence reset notification
CL: CLFenceManager::onClientNotification
{"msg%{public}.0s":"CLFenceManager::onClientNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLFenceManager::onStartTimer
{"msg%{public}.0s":"CLFenceManager::onStartTimer", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLFenceManager::onMonitorNotification
{"msg%{public}.0s":"CLFenceManager::onMonitorNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLFenceManager::onDataDownloadNotification
{"msg%{public}.0s":"CLFenceManager::onDataDownloadNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLFenceManager::onAuthorizationNotification
{"msg%{public}.0s":"CLFenceManager::onAuthorizationNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
MotionState,Motion,From,%d,To,%d,conf,%d,Mounted,From,%d,To,%d,conf,%d,tilt,%.1f,exitC,%d,exitTime,%f,startTime,%f,standing,%d,rawMotionType,%d,rawConfidence,%d,tag,%s
MotionSyncSendCalsFireIntervalInSeconds set to %f seconds.
Timer fired.
unlocked
Watch retrieved calibrations and saved them in memory, current version, %d
%s, current version, %d, timestamp, %lf
Watch did not persist Motion Cals, waiting until unlock, current version, %d, isDeviceCurrentlyUnlocked, %d
Begin persisting calibrations to disk on watch, current version, %d.
Persisted a reset Motion Cals
Finished setting user profile on watch = %s
Persisted raw speed to kValue bins
Persisted step cadence to stride length bins
Completed persistence of motion cals to disk on watch. %s
Watch received motion calibrations from companion, %s, version, %d, timestamp, %lf, udid, %s
user info notification
Workout session ended on watch.
notification, %d
Unhandled notification
raw speed to kValue bins updated
step cadence to stride length bins updated
restore backup motion cals
connected
updating motion cals
restore and arbitrate
Buffered motion cals from companion
disconnected
arbitrateMotionCals
Restored backup calibrations, %s, version, %d, timestamp, %lf
No buffered Motion Cals, no arbitration
Ignoring update.  Phone Motion Cals UDID %s is different from current UDID %s, but version %d is not larger than current version %d
Buffered Motion Cals, version, %d, timestamp, %lf, udid, %s, Current Motion Cals, version, %d, timestamp, %lf, udid, %s, result, %d
schedule send to companion
CL: CLMotionSyncStoreWatch::onMotionStateMediatorNotification
{"msg%{public}.0s":"CLMotionSyncStoreWatch::onMotionStateMediatorNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLMotionSyncStoreWatch::onUserInfoNotification
{"msg%{public}.0s":"CLMotionSyncStoreWatch::onUserInfoNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLMotionSyncStoreWatch::onCompanionNotification
{"msg%{public}.0s":"CLMotionSyncStoreWatch::onCompanionNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
Fence: CLFenceMonitorCell, shutdown
Fence: distance = %.2f; compare = %.2f
Fence: LAC monitoring is %ssufficient for %s/%s
distance = %.2f; compare = %.2f
Fence: no allowing wifi monitor for, %.1lf, fence, %s
Cell monitoring is %ssufficient for %s/%s
@WsbCalc, groups, %{public}lu, %{public}s
{"msg%{public}.0s":"Input expected to contain all APs with valid locations", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
@WsbLoc, fix, aps, %{public}lu, reproc, %{public}d, time, %{public}.1f, hAcc, %{public}.1f, %{public}d, ll, %{private}.3lf, %{private}.3lf
@WsbLoc, none, aps, %{public}lu, %{public}lu, reproc, %{public}d, time, %{public}.3f, hAcc, %{public}.1f
WsbCalc, computed, %{public}d, of, %{public}lu, %{public}s
{"msg%{public}.0s":"computed wifi position", "numberOfInputAps":%{public}ld, "validLocationHint":%{public}hhd, "computedValidLocation":%{public}hhd, "numberOfApsActuallyUsed":%{public}d}
{"msg%{public}.0s":"computed wifi position, verbose", "data":%{private, location:escape_only}s}
@WifiAps, compute, %{public}lu, used, %{public}u
@WifiFlow, compute, %{public}u, hacc, %{public}.1f, conf, %{public}d, reason, %{public}s
Fence: No access to DB
Fence: addFence, %s
#Warning Fence: Couldn't bind statement for adding fence (bundle ID %s, name %s)
Fence: Removing fence %s/%s
#Warning Fence: Couldn't bind statement for deleting fence (bundle ID %s, name %s)
#Warning Fence: Couldn't bind statement for deleting fences for bundle ID %s
Fence: Couldn't get fences from database
Fence: fetched fence, %s
Fence: Error in retrieving fences from database
Fence: Couldn't bind bundle ID %{public}s
Fence: fetched bundle fence, %s
Fence: Error in retrieving fences from database for bundle ID %{public}s
Fence: Couldn't bind fence [%{public}s]/%{public}s/%{public}s
#Warning Fence: Couldn't get number of fences for bundle ID %s
#Warning Fence: Clearing status for all fences
Fence: Recording [%s]/%s/%s last download time change to %.2f
#Warning Fence: Couldn't update last download time for %s/%s in database
Fence: Marking all fence data download times as invalid
Fence: invalidate download date for, %s
Fence: failed to bind bundleId, %{public}s
Fence: Couldn't get bundle IDs from database
Fence: Error in retrieving bundle IDs from database
Fence: addMonitoredFlagsColumnIfNotExists
Fence: addMonitoredFlagsColumnIfNotExists, table doesn't even exist
Fence: addMonitoredFlagsColumnIfNotExists, MonitorFlags already exists
addOnBehalfBundleIdColumnIfNotExists
addOnBehalfBundleIdColumnIfNotExists, table doesn't even exist
addOnBehalfBundleIdColumnIfNotExists, OnBehalfBundleId already exists
Re-create primary key to include OnBehalfBundleId
Fence: addReferenceFrameColumnIfNotExists
Fence: addReferenceFrameColumnIfNotExists, table doesn't even exist
Fence: addReferenceFrameColumnIfNotExists, ReferenceFrame already exists
Stroke detected,timestamp,%.3f,count,%lu,startTime,%f,isSwim,%d,style,%d
Turn detected,timestamp,%f,startTime,%f,isSwimming,%d
[SwimOdom] Received an odometer update,distance,%lf,accuracy,%lf,speed,%lf,rawspeed,%lf,odometer,%lf,gpsSpeedAccuracy,%lf,timestampGps,%lf
New lap entry, identifier, %llu, uuid, %s, sourceId, %s, startTime, %f, endTime, %f, timestamp, %f, pace, %f, distance, %f, paceSource, %d, style, %d, numberOfStrokes, %d, totalLaps, %d, inserted, %d, segment, %d
style,%d,currentTimestamp,%f,turnTimestamp,%f,turnStartTime,%f,mean,%f,stddev,%f,min,%f,max,%f,median,%f,samples,%d,prctile10,%f,prctile90,%f
Invalid pool length %f for pool swim.  Assuming pool swim but with invalid distances.
SessionMetrics,Start
SessionMetrics,End,Summary,DistanceFusionSuccess,%0.6f,DistanceFusionOther,%0.6f,DistanceFusionGPS,%0.6f,DistanceFusionPedometer,%0.6f,DistanceFusionGradient,%0.6f,DistanceFusionGain,%0.6f,DistanceFusionSpeed,%0.6f,DistanceFusionLength,%0.6f,startTime,%0.6f,endTime,%0.6f
SessionMetrics,%s,%s,%s,DistanceFusion,%0.4f
Trying to send track with startTime %f. a %u b %u a == b %d
Trying to send track with startTime %f. now %f 2 %f 1 %f
interval, %s, %.5lf, flooring to 1.0, interval
setTimerWithInterval, %s, interval, DBL_MAX
setTimerWithInterval, %s, interval, %.1lf
timerFired: timer, _clTimer, %s, %p, %p
Scheduling invalidation, %s, %p
invalidate, %s, %p
setNextFireDate, %s, %.1lf
timerFired, fIdentifier, %s, f, %p
Invalidate, %s
Shutting down alarm notifier.
Invalid name.
Unable to create client bundle identifier.
Registering client: %{private}@.
Unregistering client: %{private}@.
Registering alarm for client: %{private}@, name: %{private}@.
Invalid alarm to add!
Alarm already exists for client, firing: %{private}@, name: %{private}@.
Updating alarm for client: %{private}@, name: %{private}@.
Failed to update or insert alarm for client: %{private}@ name: %{private}@.
Alarm construction failed!
Failed to remove alarm entry for id: %llu.
Construction of alarm failed for client: %{private}@ name: %{private}@.
Unregistering alarm for client: %{private}@, name: %{private}@.
Invalid alarm to remove!
Unable to find alarm to remove!
Failed to remove activity alarm entry for id: %llu.
Acknowledging alarm for client: %{private}@, name: %{private}@.
Invalid alarm to acknowledge!
Unable to find alarm entry to acknowledge!
Unable to acknowledge alarm in state: %@ for client: %{private}@ name: %{private}@, id: %llu.
Preconditions have been violated and we have a repeating activity alarm!
Setting alarm to %@ for client: %{private}@, id: %llu.
Removing all alarms for client: %{private}@.
Time alarm already exists for id: %llu.
Saving persistent alarm for client: %{private}@, id: %llu, duration: %u, repeats: %d, fire: %f.
Unable to find persistent alarm for id: %llu.
Removing persistent alarm for id: %llu.
Invalid trigger type!
Unable to create activity alarm key.
Activity alarm already exists for id: %llu.
Failed to create activity alarm for client: %{private}@, id: %llu.
Saving activity alarm for client: %{private}@, id: %llu, trigger: %d duration: %u.
Unable to find activity alarm for id: %llu.
Removing activity alarm for id: %llu.
Unable to access database after first unlock!
Restoring alarms: %lu.
Removing expired alarms: %lu.
Invalid alarm timer.
Invalid alarm identifier.
Activity alarm timer fired: %llu.
Activity alarm is pending acknowledgment. Not firing alarm.
Unexpected alarm identifier.
Persistent timer fired id: %llu.
Persistent timer is pending acknowledgment. Not firing alarm.
Alarm state is rolling over for alarm: %llu.
Unable to find alarm for id: %llu.
Previous alarm state: %@, current state: %@.
Maximum launch attempts reached for: %{private}@.
Failed to update state for the alarm: %llu!
Invalid fire state: %@.
Firing alarm on client: %@, current state: %@.
Unable to fire alarm on client, client is not registered: %@, current state: %@.
Re-firing alarm: %llu.
Application %{private}@ installed: %d.
Application %{private}@ sending remote app launch.
Launching application: %{private}@.
Could not acquire task assertion for bundleId: %{private}@.
Acquired task assertion for bundleId: %{private}@.
Releasing process assertion for bundle: %{private}@.
Invalid alarm bundle identifier!
Device unlocked since boot: %{private}s.
CL: CLMotionAlarmNotifier::onAppMonitorNotification
{"msg%{public}.0s":"CLMotionAlarmNotifier::onAppMonitorNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLMotionAlarmNotifier::onDataProtectionManagerNotification
{"msg%{public}.0s":"CLMotionAlarmNotifier::onDataProtectionManagerNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLMotionAlarmNotifier::onCompanionNotification
{"msg%{public}.0s":"CLMotionAlarmNotifier::onCompanionNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLMotionAlarmNotifier::onPersistentTimerFired
{"msg%{public}.0s":"CLMotionAlarmNotifier::onPersistentTimerFired", "event":%{public, location:escape_only}s, "this":"%{public}p"}
Delete CLCdmaCellLocationDatabase
GET could not bind %d %d %d %d %d %d %d %d %d
SET could not bind %d %d %d %d %d %d %d %d %d
getCell SID %d NID %d
Bad index into kkDefenseMappingAgencyTenByTenGeoid.
#Warning Input latitude = %.9lf is out of possible range
longitude %.9lf is not valid.
latitude %.9lf is not valid.
{"msg%{public}.0s":"filtering access point our of from scan buffer based on channel", "mac":%{private, location:escape_only}s, "channel":%{public}d}
@WsbGroup, add, %{public}lu, aps, %{public}lu, time, %{public}.1f
@WsbGroup, last, %{public}lu, aps, %{public}lu, time, %{public}.1f
Unknown notification %d
Requested update interval cannot be == 0.0 and dispatcher cannot be NULL. Use interval < 0.0 for spectator.
CLMotionNotifier::addDispatcherPrivate UpdateInterval is zero!
CLMotionNotifier::addDispatcherPrivate Added dispatcher for notification:%d, Update Interval:%f(%.1fHz)
CLMotionNotifier::updateSamplePeriod UpdateInterval:%f
Could not get parent thread parameters
Motion runloop ref still not set!
LogSensorAscii,%d
Could not get scheduling parameters for motion thread, error = %{public}d
could not create runloop source
Ping timer fired, resetting watchdog
Motion thread deadlock watchdog after %d petting
Failed to create watchdog timer
Motion thread exiting
CLMotionCore::SleepBounce
CLMotionCore::PoweredOnBounce
willResignActiveBounce
didBecomeActiveBounce
Ellptical, Load Calibration Enabled status, %d, WR-HR switch margin, %f
Elliptical, Linear Regression, timestamp, %f, duration, %f, stepcount, %d, steprate, %f, resistance, %f, weight, %f, feature2, %f, mets, %f
Elliptical, DT Regression, timestamp, %f, catherine(cpm), %f, catherinemax(cpm), %f, catherinemin(cpm), %f, vo2max(METs), %f, METS, %f
Elliptical, METs, timestamp, %f, hrMets, %f, wrMets, %f, calibrationValue, %f, calibrated wrMets, %f, HR-WR diff, %f, mets, %f, metsSource, %d, fMetsScaling, %f, loadCalStatus, %d
Unrecognized notification
Unable to insert VO2Max Input record.
Unable to get entries for uuid %{public}s
Unable to purge records.
#Notice %{public}s needs autoincrement migration
#Notice %{public}s autoincrement migration succeeded
%{public}s autoincrement migration failed
SensorRecorderCacheSizeBytes, %d
SensorRecorderType, %s
On root, skip purge.
Table version is older than 1834. Purging.
Device is locked and we are unable to open the database
Flushing to memory. %zu, %zu
Unable to insert meta data.
Unable to insert data.
Unable to get last accel data id.
Unable to update meta records dataId.
Database is inaccessible
Invalid query, both data id and meta id are 0
Database upper and/or lower time bound query failed to bind.
Database upper and/or lower time bound query failed.
Data request failed because db is not accessible.
Non-empty, endTime in memory, %d, current time, %f, endTime, %f, first entry startTime, %f, 
Data requested is in memory.  Writing incremental data out to disk.
Buffer size: %d
{"msg%{public}.0s":"Database can now be opened!", "name":%{public, location:escape_only}s}
{"msg%{public}.0s":"Database is already opened.", "name":%{public, location:escape_only}s}
In memory buffer should have been empty! Instead it had a size of %{public}lu.
{"msg%{public}.0s":"Inserting entries into database", "name":%{public, location:escape_only}s, "size":%{private}llu}
{"msg%{public}.0s":"Unexpected error condition! Device has been unlocked but database remains unreadable!", "name":%{public, location:escape_only}s}
#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf
Entry being recorded has a startTime in the recent past.  Deleting records after %f.
Entry being recorded has a startTime in the substantial past.  Shift records by %f.
Failed to insert record due to failure from reading the most recent entry.
#Warning %p Scan delay of %Lf secs is invalid. Setting to the minimum of %Lf secs
%p INITIAL isWifiPowered=%d
%p Start monitor for active scanning
%p Stop monitor for active scanning
%p TIMER TRIGGERED
%p WIFI EXECUTING IMMEDIATELY, now=%f nextRequestTime=%f
%p WIFI SCAN SCHEDULED FOR %f
[FastPath] Already initialized
[FastPath] Cannot initialize fast path when service ref is null
[FastPath] Initialization failed,serviceRef,%@,properties,%@
[FastPath] Not initialized, nothing to close
[FastPath] Fast path not initialized! Can't copy property
[FastPath] Cannot copy property when service ref is null
[FastPath] Fast path not initialized! Can't set property %@ to %@
[FastPath] Set property failed! %@, %@
CLCatherineNotifier is shutting down.
CatherineNotifier Added client for %d, count %d
CatherineNotifier Removed client for %d, count %d
ExerciseMinute, Failed to expire records.
ExerciseMinute, DB not accessible.
ExerciseMinute, DB UUID un-initialized
ExerciseMinute, Potential DB reset / roll back, returning all records to clients,mru.recordId,%d,record.recordId,%d
{"msg%{public}.0s":"ExerciseMinute, Un-initialized DB update finished handler.", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
ExerciseMinute, Device is locked and we are unable to open the database
ExerciseMinute, Failed to delete records
ExerciseMinute, Failed to shift records
[CLIoHidInterface] Adding new Device with usage pair {%d, %d}
{"msg%{public}.0s":"[CLIoHidInterface] initializeHidIfNecessary should be running on motion thread", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
[CLIoHidInterface] Could not create event system client. All bets are off
[CLIoHidInterface] Event system client initialized successfully
{"msg%{public}.0s":"[CLIoHidInterface] closeHid should be running on motion thread", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
[CLIoHidInterface] Hid interface closed
{"msg%{public}.0s":"[CLIoHidInterface] refreshDeviceServiceRefs should be running on motion thread", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
[CLIoHidInterface] Refreshing service refs
[CLIoHidInterface] Check service ref %p with usage pair {%d,%d} as a potential match
[CLIoHidInterface] Service ref with usage pair {%d,%d} is %p
{"msg%{public}.0s":"[CLIoHidInterface] invalidateDeviceServiceRefs should be running on motion thread", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
[CLIoHidInterface] invalidating hid service refs
{"msg%{public}.0s":"[CLIoHidInterface] setPropertyIoHid should be running on motion thread", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
[CLIoHidInterface] property can not be set for null hidServiceRef
[CLIoHidInterface] IOHIDServiceClientSetProperty() returned false
{"msg%{public}.0s":"[CLIoHidInterface] applyAllDirtyDeviceProperties should be running on motion thread", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
[CLIoHidInterface] apply all dirty device properties
[CLIoHidInterface] Service with for device with usage pair {%d,%d} is not ready
[CLIoHidInterface] Property for usage pair {%d,%d}: {%s = %@} was set %s
[CLIoHidInterface] Could not set all properties. Setting timer to fire %f seconds from now
[CLIoHidInterface] Could not set all properties after too many retries. Giving up.
{"msg%{public}.0s":"[CLIoHidInterface] setMatchingForDevices should be running on motion thread", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
[CLIoHidInterface] The device is gone!
[CLIoHidInterface] Prox: remove set matching multiple
[CLIoHidInterface] Adding match entry for usage pair {%d,%d}
[CLIoHidInterface] Setting matching multiple for %lu events
[CLIoHidInterface] Received null sender
[CLIoHidInterface] Processing event %d
[CLIoHidInterface] Got null event,sender %p,registryID %llx
[CLIoHidInterface] Fetching historical events
[CLIoHidInterface] Did not fetch historical events
[CLIoHidInterface] The device has no event callback, skipping.
[CLIoHidInterface] It looks like our HID event system just become available (again)
[CLIoHidInterface] New IOHIDServiceClientRef for usage pair {%d,%d} just became available.
[CLIoHidInterface] Device,usagePage,%d,usage,%d,hidserviceref,old,%p,new,%p
[CLIoHidInterface] Releasing value for property %s, address = %p
[CLIoHidInterface] setCallback should be called from motion thread
[CLIoHidInterface] Could not set property value for %@
[CLIoHidInterface] setProperty should be called from motion thread
[CLIoHidInterface] copyProperty should be called from motion thread
{"msg%{public}.0s":"[FastPath] should be running on motion thread", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
{"msg%{public}.0s":"[CLIoHidInterface] must have event type set", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
{"msg%{public}.0s":"[CLIoHidInterface] should be running on motion thread", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
[CLIoHidInterface] Service for usage pair {%d, %d} is not ready
[CLIoHidInterface] Device,hidUsagePage,%d,hidUsage,%d,hasCallback,%d,serviceRef,%p
[CLIoHidInterface] 
%s = %@,dirty,%d
{"msg%{public}.0s":"[CLCompass7FastPath] Fast path unsupported on this platform!", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
[CLCompass7FastPath] Initializing fast path
[CLCompass7FastPath] Failed fast path set up for CLCompass,serviceRef,%p
[CLCompass7FastPath] Unable to establish fast path with valid clientID,serviceRef,%p
[CLCompass7FastPath] Fast path has been initialized,clientID,%u,serviceRef,%p,course,%s
[CLCompass7FastPath] Fast path has been closed,clientID,%u
[CLCompass7FastPath] Setting fast path update interval to %f
{"msg%{public}.0s":"CLCompass7 requires deviceMotionService", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
Compass for AOP started. CoverAttached %d
Compass for AOP stopped.
Setting compass update interval to %f
Unable to set compass update interval
Type,%s,attitude.x,%.8f,.y,%.8f,.z,%.8f,.w,%.8f,calibrated.x,%.8f,.y,%.8f,.z,%.8f,uncalibrated.x,%.8f,.y,%.8f,.z,%.8f,gravity.x,%.8f,.y,%.8f,.z,%.8f,heading,%.1f,trueheading,%.1f,accuracy,%.1f,level,%d,biasEstimation,%d,yawCorrection,%d,gravityCorrection,%d,courseCorrection,%d,initalized,%d,accelSaturated,%d,gyroSaturated,%d,compassCalibration,%d,gyroCalibration,%d,course,%d,gmm,%d,timestamp,%f
Releasing power assertion due to end of Heart Rate sampling.
Releasing power assertion due to Fall Notifier deconstruction.
Taking power assertion due to high impact Heart Rate subscription.
Recieved post hard impact HR : %f
CL: CLFallNotifier::onCoprocessorData
{"msg%{public}.0s":"CLFallNotifier::onCoprocessorData", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLFallNotifier::onAppMonitorNotification
{"msg%{public}.0s":"CLFallNotifier::onAppMonitorNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLFallNotifier::onHeartRateNotification
{"msg%{public}.0s":"CLFallNotifier::onHeartRateNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
Registered for keyboard state notifications
%s cover attached logic to %d
Registered for cover state notifications
Could not create timer
Cover %s attached
Cover %s
Keyboard %s
using attitude dependent KF calibrator
compass ignoring database (%d)
compass using manual bias (%.3f/%.3f/%.3f)
compass ignoring calibration (%d)
compass input filter is using (%zuu) samples
compass heading output filter samples (%d) scale (%f)
apple compass calculator, sample rate (%.3f) ignoreDatabase (%d) manual (%d)
XYDevice not stable. %d, %d, %.3f, Clearing search buffers.
storing new compass calibration, magneticField (%+.3f,%+.3f,%+.3f), bias (%+.3f/%+.3f/%+.3f), level (%d) magnitude (%+.3f) inclination (%+.3f)
rawHeading, %.3f, gyroHeading, %.3f, deltaRaw, %.3f, deltaGyro, %.3f, rawHeadingU, %.3f, gyroHeadingU, %.3f, filteredHeading, %.3f, alpha, %.3f, gamma, %.3f, rotVar, %.5f, rotMag, %.3f, deltaFiltered, %.3f
#Warning Heading  %.2f, is not in bound [0 360]
magnitude max threshold exceeded (%+.3f), resetting calibration
magnitude threshold exceeded (%f) with (%f) from base value (%f), resetting calibration
inclination threshold exceeded (%f) with (%f) from base value (%f), resetting calibration
CompassDB restored bias (%+.3f/%+.3f/%+.3f)
Already correct power mode, %d
Changing cached location power mode from %d to %d
mean (%f) scale (%f) variance sample size (%zd) max sample length (%zd), coverAttached (%d)
mean (%f) scale (%f) variance sample size (%zd) max sample length (%zd)
{"msg%{public}.0s":"lookupBias was called on the base CLCompassDatabase class"}
sample rate (%.3f) observation rate (%.3f) observation threshold (%.3f) deviation count threshold (%d) standard deviation threshold (%.3f)
threshold (%f) was exceeded with observed value (%f) and base value (%f) and standard deviation (%f) and count of (%d)
{"msg%{public}.0s":"Device motion 6 service is not supported on this platform!", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
{"msg%{public}.0s":"First-accessor must provide a valid universe", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
TILE_SER: g_isAppAvailabilityAuthorized, %d, isAuthorized, %d
TILE_SER: onAppAvailabilityAuthorized, %d, authorizerd, %d
TILE_SER: Removing request since it timed out, lat, %f, lon, %f, radius, %f.
TILE_SER: setupXpcConnection
#Warning TILE_SER: setupXpcConnection, g_isEnableTilesManagerServer, %d
TILE_SER: setupXpcConnection, tiles server is disabled by default, g_isEnableTilesManagerServer, %d
TILE_SER: setupXpcConnection, was already called
TILE_SER: setupXpcConnection, %p, %p
TILE_SER: server received connection, %p
TILE_SER : dictionary, XPC_TYPE_CONNECTION, %d, XPC_TYPE_ERROR, %d, XPC_TYPE_DICTIONARY, %d
TILE_SER : XPC_ERROR_CONNECTION_INTERRUPTED, %d, XPC_ERROR_CONNECTION_INVALID, %d, %s
TILE_SER: XPC_TYPE_CONNECTION, incomingConnection, %p
TILE_SER: posting, CLTILES_MANAGER_SHARED_NOTIFICATION_CLIENTS_RECONNECT
TILE_SER: onLocationNotification, notification, %d, loc, %s
TILE_SER: onLocationNotification, ignore, shutdown, notification, %d, loc, %s
TILE_SER: why am i receiving this notification: %d
TILE_SER: checkAvailabilityStatus, isAuthorized, %d, lastLocation, %s
TILE_SER: checkAvailabilityStatus, force, %d, newLocation, %s
TILE_SER: checkAvailabilityStatus, not authorized
TILE_SER: checkAvailabilityStatus, ignoring cell location
TILE_SER: checkAvailabilityStatus, ignoring uncertain location, %.1lf
TILE_SER: checkAvailabilityStatus, ignoring uncertain location, horizontalAccuracy, %.1lf
TILE_SER: checkAvailabilityStatus, ignoring close location, distanceFromPreviousLocation, %.1lf
TILE_SER: checkAvailabilityStatus, availabilityList, %lu
TILE_SER: checkAvailabilityStatus, loc, %.8lf, %.8lf, radius, %.3f, age, %d, %d, %d, %d, distance, %.3lf
TILE_SER: appAvailabilityUpdate, loc, %.8lf, %.8lf, radius, %.3f, age, %d, %d, %d, %d, hasChanged, %d
TILE_SER: handleIncomingConnection, incomingConnection, %p
TILE_SER: handleIncomingConnection, token, 0x%08X-0x%08X, pid, %d
TILE_SER: incoming, incomingConnection, %p, XPC_TYPE_CONNECTION, %d, XPC_TYPE_ERROR, %d, XPC_TYPE_DICTIONARY, %d
TILE_SER: release, incomingConnection, %p
TILE_SER: processing request, locationd, %.8lf, %.8lf, requestType, %s, notificationType, %s, isRegister, %d, isUnRegister, %d
TILE_SER: unknown notification, %{public}s
TILE_SER: client, %{public}s, not authorized to, requestType, %{public}s
TILE_SER: CLTILES_MANAGER_SHARED_DATA_TYPE_APPS - un-supported
TILE_SER: invalid requestType, %s
TILE_SER: getAppsForArea, examining %zu candidate grids.
TILE_SER: getAppsForArea, query for exact grid containing lat = %f, lon = %f, gridLat = %f, gridLon = %f
#Warning TILE_SER: getAppsForArea, invalid age rating, lat, %f, lon, %f, adamId, %d
TILE_SER: fetchAppsForArea, tile is available for lat = %f, lon = %f.
TILE_SER: fetchAppsForArea, found %lu apps.
TILE_SER: fetchAppsForArea, tile does not exist on the server for lat = %f, lon = %f.
TILE_SER: fetchAppsForArea, tile is not available for lat = %f, lon = %f. Request for download.
TILE_SER: onTileWasDownloadedNotification, activeRequests.count = %lu
TILE_SER: onTileWasDownloadedNotification, tile is available (or tile is 404) for lat = %f, lon = %f.
TILE_SER: onTileWasDownloadedNotification, found %lu apps.
#Warning TILE_SER: Got unexpected notification, %d
TILE_SER: handleIncomingMessage_QUERY_AVAILABILITY, loc, %.8lf, %.8lf, radius, %.2lf
TILE_SER: handleIncomingMessage_QUERY_AVAILABILITY, query for lat = %f, lon = %f, radius = %f.
TILE_SER: Got fetchAppsForArea response for lat = %f, lon = %f, %s.
TILE_SER: handleIncomingMessage_QUERY_AVAILABILITY, failed to blip icon for, %s
TILE_SER: no registrations to, CLTILES_MANAGER_SHARED_NOTIFICATION_APP_AVAILABILITY_CHANGED
TILE_SER: not authorized to receive, CLTILES_MANAGER_SHARED_NOTIFICATION_APP_AVAILABILITY_CHANGED
TILE_SER: sending, CLTILES_MANAGER_SHARED_NOTIFICATION_APP_AVAILABILITY_CHANGED
requestDownload, %2.6f, %2.6f
TILE_SER: terminateXpcConnection
TILE_SER: terminateXpcConnection, already called
TILE_SER: shutdown
TILE_SER: shutdown, tiles server is disabled by default
{"msg%{public}.0s":"#tilerequest, decision to request tile", "computedLocation.horizontalAccuracy":"%{public}f", "isCpiRequest":%{public}hhd, "isBatterySaverModeEnabled":%{public}hhd, "signalEnvironmentType":%{private}d, "numberOfApsInCurrentWifiScan":%{public}lu, "lastFilteredLocation.horizontalAccuracy":"%{public}f", "scanAge_s":"%{public}.09f"}
{"msg%{public}.0s":"#tilerequest, will request wifi tile download", "downloadRequestDetails":%{private, location:escape_only}s}
ExerciseMinute,intensity,threshold,%f,scaling factor,%f
ExerciseMinute,startTime,%.3f,avgIntensity,%f,mode,%d
ExerciseMinute,Intensity,computeTime,%.3f,raw,%f,scaled,%f,elevationAdjusted,%f,elevationCredit,%f,historicalElevationCredit,%f,windowSize,%lu,avgIntensity,%f
#Warning Invalid timestamps,epochStartTime,%.3f,epochDuration,%.3f
#Warning ExerciseMinute,Time rolled back,past.front,%.3f,past.back,%.3f,current,%.3f
ExerciseMinute,ComputeTime,%.3f,awardedExerciseMinuteMode,%d,fBurstBufferCount,%.3f,fBurstBufferDuration,%.3f,fPushBufferCount,%.3f,fPushBufferDuration,%.3f,BurstModelDuration,%.3f,BurstModelCount,%.3f,BurstModelThreshold,%d,ThresholdModelDuration,%.3f,ThresholdModelCount,%.3f,ThresholdModelThreshold,%d,CoverageModelDuration,%.3f,CoverageModelCount,%.3f,CoverageModelThreshold,%d
HEALTH_SMOOTH: Could not convert LLA Coordinate %.7lf,%.7lf to ECEF
HEALTH_SMOOTH: Could not convert ECEF Coordinate %.3lf,%.3lf,%.3lf to ENU
HEALTH_SMOOTH: No corners found, input segment too short.
{"msg%{public}.0s":"This class doesn't have a callback to register -- you must assign one first", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
Registered with CoreDuet for %{private}@ with predicate %{private}@
{"msg%{public}.0s":"This class doesn't have a callback to deregister -- you must assign one first", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
Deregistered with CoreDuet for %{private}@ with predicate %{private}@
{"msg%{public}.0s":"Couldn't find a string for event type", "event type":%{public}d, "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
{"msg%{public}.0s":"Unable to register for a CoreDuet notification", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
Added %{private}@ client to the list of listeners for event type %{private}ld with predicate %{private}@
{"msg%{public}.0s":"Attempting to register for Duet event but already registered", "event":%{public}d, "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
Received callback for %{public}@
Client %{private}@ is not registered for event %{public}ld
{"msg%{public}.0s":"Couldn't find a keypath for event type", "event type":%{public}d, "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
{"msg%{public}.0s":"Couldn't find a predicate for event type", "event type":%{public}d, "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
{"msg%{public}.0s":"Start date isn't before end date", "startDate":%{public, location:escape_only}@, "endDate":%{public, location:escape_only}@, "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
{"msg%{public}.0s":"Event is nil", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
{"msg%{public}.0s":"Invalid event value", "eventType":%{public}d, "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
{"msg%{public}.0s":"Event type does not have a corresponding notification.", "event type":%{public}d, "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
#Warning The app dictionary notification from CoreDuet has different information than we expect. This info should be added to the CLDuetForegroundApp class
bundleId or launchReason were nil so not processing this notification
#Warning The scene dictionary notification from CoreDuet has different information than we expect. This info should be added to the CLDuetHomeKitScene class
some of the expected keys were not found so not processing this notification. %{private}@
#Warning The accessory dictionary notification from CoreDuet has different information than we expect. This info should be added to the CLDuetHomeKitAccessory class
#Warning The app view dictionary notification from CoreDuet has different information than we expect. This info should be added to the CLDuetHomeKitAppView class
Assertion failed: temperature != 3.40282347e+38F, file /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Oscar/CMLinearTemperatureFit.cpp, line 45,temperature,%f.
Database is not accessible.
Unable to update alarm because bundleId or name is empty.
Unable to iterate through all rows for getAllAlarms!
Unable to prepare due to invalid database.
Successfully created database
RotationStability buffer not set.
Could not set bias retrieved from database
setting bias (%.3f/%.3f/%.3f) level (%d)
reset internal. levels-data(%d %d %d), pScale=%.3f 
compass calibrator reset
Resetting calibrator states.
Resync after long coasting with mag drift. mag/incDiffMean(%.3f/%.3f), measure(%.3f/%.3f/%.3f/%.3f), Age(%d,%d)
DRIFT DETECTED. numBad=%d,s=%.3f,delH(%.3f,%d,%.3f), expectedVec (%.3f/%.3f/%.3f), calibrated(%.3f/%.3f/%.3f), angleDiff(%.3f/%.3f), magDiff(%.3f/%.4f), incDiff(%.3f/%.3f), measure(%.3f/%.3f/%.3f/%.3f), coasting(%.3f/%d/%d), coastingCount(%d),deltaTime(%.3f)
fBackupInfoSet(%d), syncAge(%d)
Likely bad resync. Backup. 
RESYNC Rejected. numBad=%d,mag/incDiffMean(%.3f/%.3f), measure(%.3f/%.3f/%.3f/%.3f), syncAge(%d)
numBad(%d), delH(%.3f), coastVec(%.3f/%.3f/%.3f), expectedVec(%.3f/%.3f/%.3f), calibrated(%.3f/%.3f/%.3f), angleDiff(%.3f/%.3f), magDiff(%.3f/%.4f), incDiff(%.3f/%.3f), measure(%.3f/%.3f/%.3f), coasting(%.3f/%d/%d), coastingCount(%d)
Coasting vector not set.
Prolonged high magDiff. Likely bad calibration. Resetting.
Extremely high magnitude.  magDiff (%.3f), magnitude (%.3f), calibrated (%.3f/%.3f/%.3f), coastVector (%.3f/%.3f/%.3f),coastingTime,%.3f,magDiffVar,%.3f,resetInternal,%d
******* scale(%.3f),cAge(%d), magDiff(%.3f), dHeading(%.3f), deltaAngle(%.3f), numBad(%d), calInc(%.3f), incDiffIsStable(%d)
Steep inclination. Likely bad interference or bad database lookup. Resetting. 
Interference is gone.
**INTERFERENCE-1 dAngle=%.3f,dHeading=%.3f,magDiff=%.3f,incDiff=%.3f
**INTERFERENCE-0 dAngle=%.3f,dHeading=%.3f,magDiff=%.3f,incDiff=%.3f
Likely bad database lookup. Resetting. 
Divergence!!! Resetting.
new internal estimates (%.3f %.3f %.3f)
taking new estimates, Internal. fIsCoasting (%d)
new estimates denied, fIsCoasting (%d)
taking new estimates, reached database. (%d)
new esitmates disagree with database. (%d,%d,%.3f)
calibrated, first estimates completed (%.3f/%.3f/%.3f/%.3f), conv(%d %d %d), level (%d)
taking new estimates, fIsCoasting (%d)
estimates improved.(%.3f/%.3f/%.3f), numImprov=%d 
new estimates needed, fIsCoasting (%d)
first estimates completed (%.3f/%.3f/%.3f/%.3f), conv(%d %d %d), level (%d)
new estimates calculated, converged(%d %d %d) Var (%.3f %.3f %.3f), remain (%.3f), level (%d), num=%d 
Bad heading divergence for too long. Prompt user to re-calibrate.
Waiting too long for internal re-calibration. Prompt user.
Waiting too long for high magnitude interference to go away. Exit coasting.
Coasting for too long. Exit coasting.
fCoastingVecPrint: %.3f, %.3f, %.3f, %.3f, %.3f, %.3f
Attitude data not set.
Type,%s,Updating reference frame.
Updating during coasting, fIsResetInternal(%d)
BACKUP resync coasting vector
resync coasting vector. rotM,%.3f,rotV,%.3f
device status: (smooth static) = (%d %d), rotM,%.3f,rotV,%.3f, q.x,%.3f,q.y,%.3f,q.z,%.3f,q.w,%.3f)
coasting vector is mature, no more updating
numSamplesSkipped (%d), deltaQ (%.3f/%.3f/%.3f/%.3f), deltaReadingM (%.3f)
bias.x,%.3f,bias.y,%.3f,bias.z,%.3f,scale.x,%.5f,scale.y,%.5f,scale.z,%.5f,extF.x,%.3f,extF.y,%.3f,extF.z,%.3f
set coasting vector (%.3f/%.3f/%.3f), levels (%d %d) conv(%d %d %d) age (%d) syncAge (%d) DueTo (%d)
enters coasting
compass calibrator logging (%d)
exits coasting
PLOS:kLowestElevationInDegrees,%.2f,kTallestBuildingHeight,%.2f,kLargestDistance,%.2f
PLOS,GpsForcePlos,%d
PLOS, cannot estimate nav mode, disabling
PLOS, non-pedestrian, not matching
PLOS: no mapGeometry!
PLOS: no geometry!
#Warning PLOS: buildingsWithinDistance,%lf returned false!
#Warning PLOS: buildings.size() %ld > 500. too many buildings. Aborting
PLOS: no candidate svs for time %{public}lf
#Warning PLOS: polyPoint == candidatePoint
PLOS: unexpected to not find SV, %{public}d in fSvPlosMap!
#Warning PLOS: majorAxis,%lf < minorAxis,%lf
#Warning PLOS: Clamping majorAxis,minorAxis,%fm
SAM: %s not supported because no application with bundle identifier, %s, is installed
SAM: %s not supported because device doesn't support continuity
SAM: %s not supported on this device type
{"msg%{public}.0s":"#SAM Failed to masquerade", "authorizingBundle":%{public, location:escape_only}s, "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
SAM: suggested actions purge timer, delay, %.1f, interval, %.1f
SAM: notify_cancel did not succeed, %d
SAM: notify_register_dispatch failed, %d
plugin query cancelled
#Error SAM: error matching extensions with attributes, %{public}s
discovered app prediction extension
app prediction extension is %s
SAM: Nudged
SAM: Nudged while preparing a recommendation, state, %d
SAM: Hero apps disabled, ignoring nudge.
SAM: Not checking beacons since installed apps are switched off.
SAM: Got reply from CLBTLEFenceManager
SAM: Active beacons are nearby.  Using beacon-based recommendation.
SAM: No active beacons.  Looking for a location-based recommendation.
SAM: %f seconds since last location request. Not refreshing suggestions.
SAM: AppSuggestions not authorized. Ignoring nudge.
SAM: App store not authorized. Ignoring nudge.
SAM: Received, location, %s
SAM: Received an unexpected location, state, %d
SAM: Location is stale, age, %f
SAM: Location uncertainty too large, horizontalAccuracy, %f
SAM: Clear RR key...
SAM: cannot suggest with nil location, returning.
SAM: FetchAppsForArea error, %s, reset state.
SAM: Got app list, count, %lu
SAM: Received an unexpected app recommendation, state, %{public}d
SAM: appMaxRating, %ld, isAppInstallAllowed, %d
SAM: Not considering app %d due to age restrictions, ageRating, %d, maxRating, %ld
SAM: Converted adamId %d to bundleId %s
SAM: Not considering installed app %d (bundleId = %s) since it's out of range.
SAM: Not considering non-installed app %d since it's not in the grid.
SAM: candidateAppList count, %ld
SAM: %lu app recommendation candidate%s at location, <%f, %f>
SAM: %lu, adamId, %d, score, %f, installed, %s
SAM: returned %lu loi%s of type %s
SAM: location, <%f, %f>, is within %.1fm of loi ,%s, with type, %s
SAM: routine mode: %ld
SAM: suppressing suggestions because device is too close to an loi of type home or work
SAM: Recommendation complete
SAM: Create RR key...
SAM: Already started RR since %f, %f
SAM: Allowing tourist apps.
SAM: Ignoring tourist app %d.
SAM: Not recommending %s since installed apps are switched off.
SAM: Not recommending %d since uninstalled apps are switched off.
SAM: Candidate suggestion, %d
SAM: Recent suggestions: 
SAM: Adam ID, %ld, time since first recommended, %f
SAM: Not recommending hero apps since we've been recommending this app for >15 mins, timeSinceFirstRecommended, %f.
SAM: Performing store lookup for adam id %d
SAM: Error performing store lookup for adam id %lld, dropping. Error %s
SAM: Finished store lookup for adam id %lld
SAM: Recommending installed app %s...
SAM: adamId, %u, identifier, %s, suggested, %s
SAM: Recommending uninstalled app %s...
SAM: Not recommending the uninstalled app with adamId, %d, since it's blacklisted
SAM: Recent suggestions: %lu
SAM: %lu apps recommended
SAM: adam id: %ld, bundle id: %s
SAM: notifying %lu clients of %lu apps.
SAM: activity, %s, reached max attempts, %d, time until suggested again, %.2fs
SAM: could not get device identifier for vendor
SAM: Swipe-up into App Store with adamId, %s
SAM: Swipe-up into App Store with ... no adamId? Best guess is adamId, %s
SAM: Blipping the icon while App Store has been de-authorized.
SAM: Got empty bundle identifier set
SAM: Most recent app is still active.
SAM: Most recent app is no longer active.  Suggesting arbitrary beacon app
SAM: Suggesting iBeacon bundle identifier, %s
SAM: Setting bundle identifier, %s, to most recent
SAM: isInstalledAppSuggestionsAllowed, %d, isUninstalledAppSuggestionsAllowed, %d
SAM: delete all suggested actions not considered in %f wks
SAM: Display off, invalidating previous activity.
SAM: returning app, adamid, %ld, bundleId, %s, name, %s.
SAM: returning no apps.
SAM: adding suggested application client, total clients, %lu.
SAM: removing suggested application client, total clients, %lu.
SAM: Got unexpected notification: %{public}d
SAM: This should never be executed.
Failed parse os_log format specifier for shimming:missing closing brace,format,%{public}s
%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f
Odometer failed to compute a mean pace.
Time didn't move! time,%{public}f
pairNumber,%d,startTime,%f,mets,%f,hr,%f,hrConfidence,%f,gradeType,%d,grade,%f,hasGPS,%d,hasStrideCal,%d,metSource,%d,workoutType,%d,warmupOK,%d,gradeOK,%d,metDeltaOK,%d,metsAboveMin,%d,pairInBounds,%d,hrAboveMin,%d,hrBelowMax,%d,metSourceOK,%d,hrOK,%d,pairOK,%d,hrmax,%f,hrmin,%f
Session distance estimate,odometer,%lf,generic stroke lengths,%lf
WheelchairPush, computeTime, %f, metsFromPushes, %.1f, Push Count, %d, pushEM, %.1f
Yoga, Compendium METS, METS, %f
Doing crude accel measurement update.
rotBufferSize, %zu, accelBufferSize, %zuu, peakCount, %d, fMaxStd, %.3f
gyroDt, %.4f, doAccelCheck, %d
omegaMag6, %.3f, omega, %.3f, %.3f, %.3f
[AppleQuaternion] x,%f,y,%f,z,%f,w,%f,timestamp,%f
[Bias,Var] bias.x,%f,bias.y,%f,bias.z,%f,var.x,%f,var.y,%f,var.z,%f
[Accelerometer6] x,%.4f,y,%.4f,z,%.4f,lpf, %.4f, %.4f, %.4f, timestamp,%lf
[RotationRate6X] %.3f, %.3f, %.3f, %.3f, %.3f
rotating and going through.
it's been too long. go through.
grabing gravity, %.4f, %.4f, %.4f
std, %.3f, %.3f, %.3f, mag, %.3f, dot, %.3f, leftover, %.3f
sum, %.3f, %.3f, %.3f, dot, %.3f, leftover, %.3f
===========Skip ahead.
Skip ahead------.
Taking another look.
using mean accel
accM, (%.4f, %.4f, %.4f), mag, %.3f
Doing some crude updates to catch up.
[KalmanFilterStates] %f,%f,%f,%f,%f,%f,%f
High Intensity, CR DT Regression, catherine(cpm), %f, catherinemax(cpm), %f, catherinemin(cpm), %f, vo2max(METs), %f, METS, %f
#Warning malformed mac address error: %{private}s
Stationary Cycle, Begin Time, %f, End Time, %f, catherine(cpm), %f, catherinemax(cpm), %f, catherinemin(cpm), %f, vo2max(METs), %f, duration(s), %f, weight(kg), %f, METS, %f, HRstaleness, %f
Stationary Cycle, computeTime, %.3f, hrMets, %f, fmMets, %f, userMets, %f, Duration, %f
OutdoorWheelchair, beginTime, %f, endTime, %f, duration(s), %f,gpsSpeed,%.2f, gpsAvail, %d, elevAvail, %d, pushVM,%.1f, verticalSpeed, %.3f, gradeType, %d, metsFromGps,%.1f, metsFromPushes, %.1f, mets, %.1f
#Warning failed to read [%{public}s]
#Warning, PLOS: can't open file 
#Warning PLOS: endian
#Warning PLOS: sp3file
#Warning PLOS: sp3fileglonass
#Warning PLOS: header
#Warning PLOS_XTRA: header
#Warning PLOS: id
PLOS: eof
#Warning PLOS: id,%{public}d,dataSize,%{public}d
#Warning PLOS: GPS ALM
#Warning PLOS: GLO ALM
PLOS: seting xtra file %{public}s
PLOS: XTRA: fPopulated,%{public}d,fParseError,%{public}d. nothing to do
#Warning XTRA: can't open [%{public}s]
#Warning PLOS: failed to parse [%{public}s]
PLOS:%{public}s
gpsWeek,%{public}d,gpsSec,%{public}d,gloDay,%{public}d,gloSec,%{public}lf
PLOS:svid,%{public}d,el,%{public}.2lf,az,%{public}.2lf,retval,%{public}d
#Warning eof,n,%{public}ld,requested,%{public}ld
Fitness: Companion model is %s
prevConnectedState,%s,currConnectedState,%s
Sending protobuf ID:%s size: %zd type: %d over IDSService - Status %d, md5 %s
No device locally connected - Ignore sending data
Received message ID:%s, type:%d, size %zd, md5 %s
Unexpected message received while disconnected. Updating status.
Received data over IDSService size : %ld
Received unhandled protobuf ID:%s, size:%zd
Service sent data with ID:%s with success %d error %s
Service data ack on otherside with ID:%s
%s,%f,%s,%f
%s,%f,%s,%d
%s,%f,%s,%f,%s,%f,%s,%f,%s,%d
#Notice Device is not activated, suspending activity tracking.
#Notice Failed to get TCC for motion, suspending activity tracking.
CL: CLTilesManager::onStoreFrontDidChangeNotification
{"msg%{public}.0s":"CLTilesManager::onStoreFrontDidChangeNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLTilesManager::onClientNotification
{"msg%{public}.0s":"CLTilesManager::onClientNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLTilesManager::onDataProtectionNotification
{"msg%{public}.0s":"CLTilesManager::onDataProtectionNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLTilesManager::onCompanionNotification
{"msg%{public}.0s":"CLTilesManager::onCompanionNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLTilesManager::onStatusNotification
{"msg%{public}.0s":"CLTilesManager::onStatusNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLTilesManager::onLocationNotification
{"msg%{public}.0s":"CLTilesManager::onLocationNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLTilesManagerExternal::onCleanupAgedTiles
{"msg%{public}.0s":"CLTilesManagerExternal::onCleanupAgedTiles", "event":%{public, location:escape_only}s, "this":"%{public}p"}
n and g are too close %f
Assertion failed: lambda2 != 0, file /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Oscar/Math/CMOQuaternion.cpp, line 208,invalid weights.
kappa zero!
CLSwimAlgSimulator Instantiated
Simulated stroke
Simulated turn
Fence: fence, %s, is large, requesting, kFenceMonitoringOpportunistic
Fence: location, why are you unknown?, %s
Fence: getStatusFromLocation, %s, fix, %c%c%c%c%c, isWifiPowered, %d,  effectiveDistance, %.2lf, distance, %.1f, entryRadius, %.1f, exitRadius, %.1f, adjDist, %.1lf, adjHorAcc, %.1lf, origHorAcc, %.1lf
Fence status changed to Inside, distToCenter, %.1lf, %s
Fence status changed to Outside, distToCenter, %.1lf, %s
Fence status remained unchanged, distToCenter, %.1lf, %s
GPS: normalize unc value, %.1lf, %.1lf
CANDY: Could not derive hardware info for Init
CANDY: Compute failed with: %{public}ld
CANDY: Verify failed with: %{public}ld
{"msg%{public}.0s":"deferredDelete() should have nulled out connection", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
{"msg%{public}.0s":"deferredDelete() should have nulled out handler", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
{"msg%{public}.0s":"CLConnections must always have event queues", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
#Warning Unhandled message %s
CL: CLConnection::handleInterruption
{"msg%{public}.0s":"CLConnection::handleInterruption", "event":%{public, location:escape_only}s}
CL: CLConnection::handleDisconnection
{"msg%{public}.0s":"CLConnection::handleDisconnection", "event":%{public, location:escape_only}s}
CL: CLConnection::sendMessageInternal (Fallback)
{"msg%{public}.0s":"CLConnection::sendMessageInternal", "event":%{public, location:escape_only}s, "name":%{public, location:escape_only}s}
Couldn't create XPC message
The received data object is invalid: %{public}s
Unable to send reply, a reply message does not exist.
#Warning Connection interrupted!
#Warning Location connection invalid!
Got unexpected location event
Error on message reply (%{public}s)
Ignoring unexpected event
CL: CLDaemonClient(ctor)
{"msg%{public}.0s":"CLDaemonClient(ctor)", "event":%{public, location:escape_only}s, "this":"%{public}p"}
Couldn't get information from PID %{public}u
Failed to become client of CLClientManager
WRTT: overriding burst size to %{public}d
PAUSE: BATCH: '%s' (%d, %p) started in the unknown state. Daemon?
#Warning PAUSE: BATCH: '%s' (%d, %p) started in unexpected state: %s
PAUSE: Override AutoPause to On for all clients
PAUSE: Override AutoPause to On for all clients linked with SDK that predates 6.0
PAUSE: Override AutoPause to Off for all clients
PAUSE: Override AutoPause to None
PAUSE: AutoPause log UI Enabled
PAUSE: activity type defaulted to %ld
{"msg%{public}.0s":"state transition", "event":%{public, location:escape_only}s, "state":%{public, location:escape_only}s, "id":"%{public}p", "property":%{public, location:escape_only}s, "old":%{public, location:escape_only}s, "new":%{public, location:escape_only}s}
#CLIUA Client %{public}s now %{public}sbenefitting from an InUseAssertion
{"msg%{public}.0s":"Client visibility changed", "client":%{public, location:escape_only}s, "is visible":%{public}hhd}
{"msg%{public}.0s":"Can't swap status bar assertions when both sides have values", "newValue":%{public}hhd, "oldValue":%{public}hhd, "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
CL: kCLConnectionMessageUnknown
{"msg%{public}.0s":"kCLConnectionMessageUnknown", "event":%{public, location:escape_only}s, "this":"%{public}p"}
#CLEEA Releasing EmergencyEnablementAssertion on behalf of %{public}s with reason %{public}s
{"msg%{public}.0s":"#Stream #CLLIA Disablement assertion dropped", "me":%{public, location:escape_only}s}
ending metric session (LocationUpdateSession) for %s
ending metric session (LocationMonitorSession) for %s
iB: ending metric session (BeaconMonitorSession) for %s
iB: ending metric session (BeaconRangingSession) for %s
ending metric session (MotionTrigger) for %s
Client %s disconnected before delayed unvisibility transition
location system state, cell available, %d, wifi available, %d, passcode locked, %d, airplane mode enabled, %d, accessory connected, %d, reachability, %d, powered, %d, gpsCoexWifi, %d, gpsCoexBt, %d
ALTERED: toNvp: %.8f, %.8f, %.2f, %d, %d, %lf, %lf, %d, %.8f, %.8f, %.2f
Failed to convert location to nvp
Failed to convert location private to nvp
Sending location to client <%{public}s>
BATCH: successfully ended for %s
BATCH: location unavailable caused batch failure
Sending,vehicle speed,to client,%{public}s,time,%{public}.3lf,speed,%{private}.3lf
Sending,vehicle heading,to client,%{public}s,time,%{public}.3lf,heading,%{private}.3lf
Got active change notification; updating requests
@iB: Sending kCLConnectionMessageRegionMonitoringError for region,'%{public}s/%{private}s'.
@iB: Sending kCLConnectionMessageRegionMonitoringSetupCompleted for region,'%{public}s/%{private}s'.
@iB: Sending kCLConnectionMessageRegionState for region,'%{public}s/%{private}s'.
@iB: Sending kCLConnectionMessageRegionMonitoring for region,'%{public}s/%{private}s'.
Unsupported region transition state,%{public}d will not be reported.
ending metric session (BeaconMonitorSession) for %s
iB: Unable to find ranged region,%{private}s.
Sending kCLConnectionMessageRangingError for region,%{private}s with error,%{public}d.
@iB: Sending kCLConnectionMessageRanging for region,%{private}s, with beacons,%{public}d.
WRTT: %s received PeerRanging notification %d (fRegistrationResult %d)
WRTT: Send PeerRanges, %ld, Errors, %ld
WRTT: send Errors (%{public}lu) to client '%s'
WRTT: processed request processed, isStart,%d, nPeers,%lu
WRTT: send Results (%{public}ld) to client '%s'
WRTT: Sending PeerRanging info to client '%s'
Fence: received, kNotificationRegionStateRequest, %s, state, %d, %s
Fence: unknown state, %{public}d
Notifying client of fence %s for %s/%s (location <%+.8f,%+.8f> acc %.2f type %d)
Sending setup delayed message for %s/%s
Sending setup completed message for %s/%s
Fence: received, kNotificationFenceNotAuthorized
#Notice Fence: kNotificationFenceNotAuthorized, bundle not authorized for location, %{public}s, fence, %{public}s
Fence: received, kNotificationFenceFailure
#Notice Sending region monitoring error message for %{public}s/%{public}s
No alternate region available
Sending significant location change <%{private}+.8f,%{private}+.8f> acc %{private}.2f for %{public}s (pid %{public}04d)
Not notifying client %{public}s (pid %{public}04d) of significant location change because regular location updates are enabled
activity alarm triggered. (internal id %d)
%@, %s, %d, %p
Sent ear gesture message (prototype %s)
ignoring metric for phone pick-up
counting metric for non-phone pick-up
starting metric session (MotionTrigger) for %s
Sent gyro bias estimation message
Received GMM notification %d
Unexpected notification in onPressureBias,notification,%d
Sent%s onBodyDetection message to %s, %s
PAUSE: %s received pause notification %d
Compass calibration achieved (L%d) for client '%s'
{"msg%{public}.0s":"#slv Sending visit to client", "visit":%{private, location:escape_only}@, "client":%{public, location:escape_only}s}
{"msg%{public}.0s":"#slv Not delivering visit due to insufficient authorization", "visit":%{private, location:escape_only}@, "client":%{public, location:escape_only}s}
BATCH: Time criterion met, waiting for location event to notify client %s
'%{public}s' received unknown notification: %{public}d
MicroLocation: %s received microlocation notification %d (fRegistrationResult %d)
Client %{public}s is not authorized to receive microlocations
Couldn't get CFString for entitlement
%s is %s for %s
Authorization status for %s is now %s (was %s)
client authorized; sending out cached message %s
client authorized but no longer interested in cached message %s; discarding cache
#Warning %s is still not authorized for %s, dropping
PID %u either doesn't specify UIBackgroundModes, or SB timed out fetching them
client '%s' supports background location
fRegistrationResult != CLClientManager->getClientEffectiveRegistrationResult for %{public}s: %{public}d != %{public}d
Sending denied error message to %s
PAUSE: Client %s entered background at %.1f
Client %s will transition to unvisible after grace period
Client %s now visible, was %svisible%s
PAUSE: Client %s entered foreground (from %.1f)
PAUSE: Client '%{public}s' was paused but not in the background
Client not authorized for message %{public}s
#Warning Client '%s' is not interested in %s
PAUSE: AutoPause is overridden to off, reject %s message to client '%s'
locationd paused updates to '%s' at %.2f. client autopause setting: %d, override setting: %d
PAUSE: Sending %s message to client '%s'
BATCH: Not batching but tried to finish with error %{public}d
BATCH: Sending didFinishDeferredUpdatesWithError:%d message to client '%s'
Sending kCLConnectionMessageWakeClient for %{public}s to client '%{public}s'
Client '%{public}s' does not have required entitlement '%{public}s' to set effective bundle identifier, '%{public}s', or effective bundle, '%{public}s'
Client '%{public}s' is setting effective bundle identifier to '%{public}s'
Client '%{public}s' is attempting to masquerade as uninstalled app with effective bundle identifier '%{public}s'
Client '%{public}s' is setting effective bundle path to '%{public}s'
Client '%{public}s' is registering as a system service
Client %{public}s is attempting to masquerade as uninstalled app with effective bundle path <%{public}s>
Client '%{public}s' is a plugin, auto-masquerading as its containing app
{"msg%{public}.0s":"#warning Could not find placeholder bundle for client", "client":%{public, location:escape_only}s}
Could not access bundle for masquerading client %{public}s
{"msg%{public}.0s":"Using fallback prompting for client because their placeholder bundle could not be found", "client":%{public, location:escape_only}s}
{"msg%{public}.0s":"#warning Client doesn't have any supported authorization levels -- enabling fallback prompts", "client":%{public, location:escape_only}s}
%{public}s is creating a CLLocationManager, but does not have any NSLocation*UsageDescription keys
Couldn't get value for key %{public}s
Unentitled entity '%{public}s' trying to tell us they are WatchKit
Setting client, %s, is actually a WatchKit extension, %d
{"msg%{public}.0s":"#usesync Unentitled client claims to be a remote client", "client":%{public, location:escape_only}s}
{"msg%{public}.0s":"#usesync Setting client proxy for remote client", "client":%{public, location:escape_only}s, "is proxy":%{public}hhd}
{"msg%{public}.0s":"#usesync #warning Received a ProxyForRemoteClient message for a client that failed to register.  Is it uninstalled?", "pid":%{public}d}
Unentitled entity '%{public}s' trying to mark itself as having received location?!
Request to mark '%{public}s' as having received location while it is not authorized
Marking '%s' as having received location without regard to authorization (it is %s, and presently %s authorization)
Malformed authorization request from '%{public}s'
{"msg%{public}.0s":"System services may not request authorization", "client":%{public, location:escape_only}s, "requestedStatus":%{public}d}
Unrecognized authorization value (%{public}d) requested by '%{public}s'
#Notice Dropping -request%{public}sAuthorization from '%{public}s': NSLocation%{public}sUsageDescription Info.plist key not available?
Authorization value %{public}s requested by '%{public}s' ignored because not in its allowable mask (%{public}lu)
Authorization value %{public}s requested by '%{public}s' ignored because another authorization effort (%{public}d) is already in flight
{"msg%{public}.0s":"Showing upgrade prompt on the companion", "client":%{public, location:escape_only}s}
Allowing one-shot attempt to update to %{public}s from %{public}s by '%{public}s'
Client %{public}s is denied.  Asking client manager to consider doing a big switch prompt
Authorization value %{public}s requested by '%{public}s' ignored because registration is already %{public}s
Client %{public}s requested that we show a prompt for %{public}s, but they already have authorization level %{public}s.
Client '%s' changed activity type from %ld to %ld
received watchdog from client '%s'
Client %{public}s does not have appropriate entitlement to enable match info
Client %s is setting match info enabled to %d
Setting persistent monitoring enabled to %d
Client now interested in persistent monitoring; adding as a significant change client
Client no longer interested in persistent monitoring; removing as a significant change client
Client %{public}s does not have appropriate entitlement to change prompt behaviour
Client %s is setting location prompt allowed to %d
Client %s is setting location prompt show to %d
Client %{public}s is registering as a location client and will show up in Settings
Client %s is setting AutoPause to %d
Client %s is setting ContinuousBackgroundLocationRequested to %d
BATCH: startBatching called but we're already batching
BATCH: starting client %s
BATCH: scheduling odometer alarm for %.1f
BATCH: Odometer errored (%{public}s) for client (%{public}s)
BATCH: Odometer criterion met, waiting for location event to notify client %s
BATCH: Odometer fired (%.1f,%s) but no longer relevant to us
BATCH: scheduling timer for %.1f
BATCH: stopBatching called but we're not batching
BATCH: stopping client %s
BATCH: client %s disallowed Batch
BATCH: request (%.1fm, %.1fs) will be based on %.1fm (%.1fs), %.1fs for client %s
BATCH: How were we not updating location?
BATCH: How were we batching accuracy was too low?
BATCH: How were we batching if a distance filter was on?
BATCH: distance or timeout was <= 0 (techincally exit criteria has already been satisfied.)
#Notice Location uncertainty too high to allow deferred updates now
#Warning BATCH: odometer is not running, we have no way to know what distance is relative to
BATCH: scheduled batch exit but not off-boarding
Client %s is allowing message kCLConnectionMessageWakeClient
#Warning Couldn't get value for key %s, %s/%s
Client %{public}s does not have appropriate entitlement to act as a proxy service to %{public}s
Fence: requesting, kCLClientRegionCircular for, [%s]/%s/%s
Fence: requesting, kCLClientRegionBeacon for, [%s]/%s/%s
Got unhandled mesage of type %{public}s
#warning #CLIUA Not entitled as usage oracle... ignoring InUseAssertion taken by %{public}s
#CLIUA InUseAssertion taken by %{public}s malformed: lacking required argument
#CLIUA Neither bundleIdentifier nor bundlePath specified... ignoring InUseAssertion taken by %{public}s
#CLIUA Assertion requested with no reason... ignoring InUseAssertion taken by %{public}s
#warning #CLEEA Not entitled as emergency enabler... ignoring EmergencyEnablementAssertion taken by %{public}s
#CLEEA InUseAssertion taken by %{public}s malformed: lacking required argument
{"msg%{public}.0s":"#Stream There is already an active EmergencyEnablementAssertion on this connection, removing the old streamer to make room for the new one"}
#CLEEA Taking EmergencyEnablementAssertion on behalf of %{public}s with reason %{public}s
{"msg%{public}.0s":"#Stream #CLLIA #warning Not entitled as a streaming disabler... ignoring LocationIndependenceAssertion", "client name":%{public, location:escape_only}s}
{"msg%{public}.0s":"#Stream #CLLIA LocationIndependenceAssertion is malformed.  Needs a reason.", "client name":%{public, location:escape_only}s}
{"msg%{public}.0s":"#Stream #CLLIA Taking a disablement assertion", "me":%{public, location:escape_only}s}
client '%s' subscribing to location desiredAccuracy %.2f distanceFilter %.2f dynamicAccuracyReductionEnabled %d allowsAlteredAccessoryLocations %d
client '%{public}s' unsubscribing from location
@ClxClient, unsubscribe, %{public}s
#Warning Couldn't get value for key %{private}s, %{private}s/%{private}s
starting metric session (LocationMonitorSession) for %s
Adding geographic fence [%s]/%s/%s
Removing geographic fence [%s]/%s/%s
starting metric session (BeaconMonitorSession) for %s
Invalid beacon region request [%{public}s]/%{public}s/%{public}s.
Client %{public}s is attempting ranging as a proxy service to %{public}s
Ranging any region,%{public}s, requires an entitlement.
Unable to parse ranged region,%{public}d.
#Warning Unable to subscribe to ranging.
WRTT: couldn't get entitlement for Client %s
WRTT: client %s does not have appropriate entitlement to access SPI
WRTT: daemon client received request,client,%s,subscribe,%{public}d
WRTT: peer %#llX, timeout %lf, len(keyID) %lu
WRTT: client '%s' subscribing to PeerRanging
WRTT: Client '%s' registered for PeerRanging notifications
WRTT: client '%s' unsubscribing from PeerRanging
WRTT: Client '%s' unregistered from PeerRanging notifications
#Warning Client %s did not pass entitlement/tcc checks.
Client %s did not pass entitlement/tcc checks.
Client %s cannot access sensor recorder, invalid target.
Received MotionState request,client,%s,subscribe,%d
Received MotionActivityUpdate request,client,%s,subscribe,%d
Cannot subscribe to motion activity updates, motion activity is not available
query for motion activity was received but motion activity is not available
Programmer error: Wrong parameters were passed!
#Warning Activity alarms not available.  Requested alarm will not be listened for.
Primed for activity alarm %d with duration %f (internal id %d)
#Warning CLDaemonClient got activity alarm callback after destruction... ignoring
Invalidated activity alarm %d with duration %f (internal id %d)
StepCount subscription changed, %s, %d, %p, %d
Cannot subscribe to step count updates, step counting is not available
Cannot subscribe to step count updates as step counting is not enabled
PedometerEvent subscription changed, %s, %d, %p, %d
OdometerGpsAvailability subscription changed, %d, %s, %d, %p
Odometer subscription changed, %s, %d, %p, %d
SedentaryAlarm,Failed entitlement check,%{public}s
#Warning Client %s does not have appropriate entitlement to access user info spi
SedentaryAlarm,Failed to start,nil dictionary
SedentaryAlarm,Failed to query,nil dictionary
SedentaryAlarm,subscription changed, %d, %s, %d, %p
Motion alarm fire subscription changed, %s, %d, %p, %d
Unable to find bundle identifier!
Invalid message recieved from framework.
#Warning Client %s does not have appropriate entitlement to access motion activity spi
#Warning Client %s does not have access to motion activity spi because the platform is not supported
query for step count was received but step counts were not available
Error querying step count data
Error querying pedometer data, %{public}d
Step count reset failed as it was not available!
CLDaemonClient received StrideCalibrationDump request,client,%s
Step count notifier not available
Cannot find step count proxy
received request for remote pedometer calibrations
No remote pedometer calibrations available
received request for pedometer calibrations
No pedometer calibrations available
[SidebandSensorFusion], Wrong parameters were passed!
#Notice [SidebandSensorFusion], Request failed, enabled, %d, snoop, %d, latency, %d, success, %d
Received Gesture request,client,%s,subscribe,%d
Priority not set
Got gesture subscription request, priority = %d, Client = %s
#Warning CLDaemonClient got ear gesture callback after destruction... ignoring
Got gesture unsubscription request, Client = %s
CLDaemonClient received GyroBiasEstimation request,client,%s,subscribe,%d
isBuildingGYTT not set
CLDaemonClient got gyro bias estimation subscription request,isBuildingGYTT,%d
Warning: CLDaemonClient got gyro bias callback after destruction... ignoring
CLDaemonClient got gyro bias estimation unsubscription request
Received GMM request,client,%s,subscribe,%d
Recieved pressure bias estimation request.,client,%s,subscribe,%d
#Warning Client %s does not have appropriate entitlement to access on body detection SPI
Received OnBodyDetection request,client,%s,subscribe,%d
Wrong parameters were passed!
Client failed entitlement check for calorimetry, %s, %d, %p
Location services are disabled preventing motion calibration.
Calorie subscription changed, %d, %s, %d, %p
Error in query request.
Error querying calorie data, %{public}d
Tracking START, %s, %d, %p, %d
Tracking STOP, %s, %d, %p, %d
Error receiving data from fitness machine
Getting user profile, %@, %s, %d, %p
Setting user profile, %{private}@, %s, %d, %p
#Notice Setting calorie session %d %p %p
#Warning Unable to clear activity when session was not previously set.
#Warning Unable to override activity.  Another client has already requested an activity session.
Workout, Duplicate START, %@, %s, %d, %p
Workout, STARTING, %@, %s, %d, %p
Unable to start workout, another client has an active workout.
No active workouts to stop, requested, %@, %p, %p
Workout, STOPPING, %@, %p, %p
Workout, event subscription changed, %d, %s, %d, %p
No active workouts to set a timeout for!
Workout, setting workout timeout %f.
Calibration prompt, isConnectedToCompanion: %d, promptsNeeded: %ld.
Resetting calibration.
#Notice Calibrations were successfully cleared.
ExerciseMinute, Subscription changed, %s, %d, %p, %d
ExerciseMinute, Error in query request.
ExerciseMinute, Error query response, %{public}d, %s, %d, %p
SwimData subscription changed, %s, %d, %p, %d
#Warning Failed to subscribe to swim updates.
Programmer error: Wrong parameters were passed.
Query: id, %llu, session, %s, db, %s, Response (numel): %lu
SignificantElevation subscription changed, %s, %d, %p, %d
#Warning Failed to subscribe to significant elevation updates.
Client %{public}s does not have appropriate entitlement to access catherine provider SPI
#Warning Packet contains nil catherine data
#Warning Client %s does not have appropriate entitlement to run miniCal
(%f, %f), %d records returned
Allocating mmap buffer.
Requesting id, %llu, meta id, %llu
[CaptureMode], Wrong parameters were passed!
client '%s' subscribing to compass filter %.2f
client '%s' unsubscribing from compass
{"msg%{public}.0s":"#SLC Change in non-persistent session state", "clientKey":%{public, location:escape_only}s, "shouldBeRegistered":%{public}hhd, "relevantService":%{public}d}
{"msg%{public}.0s":"Client is not entitled to provide #SLC configuration", "key":%{public, location:escape_only}s}
{"msg%{public}.0s":"Client provided invalid #SLC configuration", "key":%{public, location:escape_only}s, "desiredPowerBudgetRaw":%{public}d}
{"msg%{public}.0s":"client subscribing to #SLC", "client":%{public, location:escape_only}s, "persistent":%{public}hhd, "distance":"%{public}f", "powerBudget":%{public}d}
client '%{public}s' unsubscribing from significant location change notifications (persistent %{public}d)
#Notice client '%{public}s' stopping significant location changes
{"msg%{public}.0s":"#slv Client subscribe", "client":%{public, location:escape_only}s, "subscribe":%{public}hhd}
{"msg%{public}.0s":"Client is not entitled to provide #SLV configuration", "key":%{public, location:escape_only}s}
#Warning Client %s does not have appropriate entitlement to access vehicle data SPI
Received VehicleSpeed request,client,%s,subscribe,%d
client '%s' subscribing to vehicle speed
client '%s' unsubscribing from vehicle speed
Received VehicleHeading request,client,%s,subscribe,%d
client '%s' subscribing to vehicle heading
client '%s' unsubscribing from vehicle heading
#Warning Client %s does not have appropriate entitlement to access MicroLocation SPI
Received MicroLocation request,client,%{public}s,subscribe,%{public}d
MicroLocations are not available on this platform. %s
No LOI identifier sent. Unable to start updating microlocations
client '%{public}s' subscribing to MicroLocations for LOI: %{public}s
client '%{public}s' unsubscribing from MicroLocations
Received Current MicroLocation request from client '%{public}s'
MicroLocations are not available on this platform. %{public}s
Client '%{public}s' not authorized for microlocation notifications
Client '%{public}s' registered for MicroLocation notifications for LOI: %{public}s
Client '%{public}s' unregistered from MicroLocation notifications
Client %{public}s (%{public}p) is %{public}ssubscribing to notification %{public}s
client '%s' has an incomplete registration result; not starting ranging yet
missing client '%{public}s' is attempting to start ranging updates
client '%s' not authorized for ranging; not starting yet
Starting ranging for regions,%lu.
iB: start metric session (BeaconRangingSession) for %s
iB: update ranged regions (BeaconRangingSession) for %s
#Warning There are no regions to range.
Stopping ranging.
client '%{public}s' has an incomplete registration result; not starting location yet
missing client '%{public}s' is attempting to start location updates
client '%{public}s' not authorized for location; not starting yet
Client '%{public}s' paused, not starting location
client '%{public}s' authorized for location; starting now
client '%{public}s' authorized for location; starting now, desiredAccuracy, %{public}.1lf, distanceFilter, %{public}.1lf, operatingMode %{public}d, dynamicAccuracyReductionEnabled %{public}d, allowsAlteredAccessoryLocations %{public}d
@ClxClient, register, %{public}s, accuracy, %{public}.1lf
@WsbReg, DaemonOpportunistic, %{public}s
@WsbReg, DaemonActive, %{public}s
Not registering for location updates for %{public}s; the planets don't align
Not registering for location updates for %{public}s; desiredAccuracy is too high
BATCH: stop because accuracy changed %s
register for notification, %d, %s, desiredAccuracy, %.1f
BATCH: stop because distance filtered %s
CLMM,Client,'%s',pid,%u,allowsMapCorrection,%d,desiredAccuracy,%lf,kNotificationMapMatching,%d
starting metric session (LocationUpdateSession) for %s
received location system state of LocationUpdateSession for %s
BATCH: stop because stopping location for %s
Client %s registered for autopause notifications
'%{public}s' failed to become client of CLAutopauseProvider
PAUSE: Client '%s' unregistered for autopause notifications
#Warning PAUSE: Unregistering for autopause notification when client '%s' does not exist
PAUSE: '%s' not a location client (%d), or not authorized (%d).
PAUSE: '%s' overridden to off.
PAUSE: '%s' not allowed to pause.
PAUSE: '%s' not backgrounded right now (%.1f).
PAUSE: now clock %f timestamp %f thresh %f.
PAUSE: client: '%s' type: %ld states: veh %d fit %d oth %d
PAUSE: '%s' not changing state wasPaused: %d lastState: %d now clock: %f timestamp: %f thresh: %f.
PAUSE: %s (%p) changed from %d to %d
PAUSE: Pausing client '%s'
PAUSE: Resuming client '%{public}s' (This should be handled on framework side)
initializing process assertion to support background location for client '%s' (pid %u)
Couldn't initialize process assertion for client '%{public}s' (pid %{public}u)!
Client,%s, pid,%u, is performing batch location, allowing idle sleep.
#Warning Client,%s, pid,%u, is performing batch without location.
Client,%s, pid,%u, is not performing batch location, preventing task suspend.
Releasing process assertion for pid %u
Creation of status bar assertion failed synchronously for %{public}s (PID:%{public}d)
Completed async acquire of status bar assertion for %{public}s (PID:%{public}d)
Failed async acquire of status bar assertion for %{public}s (PID:%{public}d)
{"msg%{public}.0s":"swapVisibilityAssertion should return nil, here", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
#visibility Completing async release of visibility assertion for %{public}s (PID:%{public}d, ptr:%p)
#visibility For %s (PID:%d)  Background:%s  Started:%s  Qualified:%s > Needed:%s  Action:%s
Allowing process assertion for %s in foreground.
Allowing process assertion for %s because they are in use.
Allowing process assertion for %s due to client manager.
#Warning Denying process assertion to %s
Scheduling proactive compass start for client '%{public}s' with delay %{public}.2f
Starting compass proactively for client '%{public}s'
Proactive compass timer fired
Stopped proactive compass timer for client '%{public}s'
Stopped proactive compass for client '%{public}s'
{"msg%{public}.0s":"#Stream There is an active fitness assertion even though our activity type wasn't fitness", "old activity":%{public}ld}
{"msg%{public}.0s":"#Stream There isn't an active fitness assertion even though our activity type was fitness"}
BATCH: client, '%s', batchEnabled, %d
CL: CLDaemonClient::onBTLEFenceNotification
{"msg%{public}.0s":"CLDaemonClient::onBTLEFenceNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLDaemonClient::onFenceNotification
{"msg%{public}.0s":"CLDaemonClient::onFenceNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLDaemonClient::onLocationNotification
{"msg%{public}.0s":"CLDaemonClient::onLocationNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLDaemonClient::onSignificantChangeNotification
{"msg%{public}.0s":"CLDaemonClient::onSignificantChangeNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLDaemonClient::onManagerNotification
{"msg%{public}.0s":"CLDaemonClient::onManagerNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLDaemonClient::onBTLERangeNotification
{"msg%{public}.0s":"CLDaemonClient::onBTLERangeNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLDaemonClient::onMicroLocationNotification
{"msg%{public}.0s":"CLDaemonClient::onMicroLocationNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLDaemonClient::onPeerRangeNotification
{"msg%{public}.0s":"CLDaemonClient::onPeerRangeNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
WRTT: No key when retrieving data
CL: CLDaemonClient::onBatchTimer
{"msg%{public}.0s":"CLDaemonClient::onBatchTimer", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLDaemonClient::onMotionStateNotification
{"msg%{public}.0s":"CLDaemonClient::onMotionStateNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLDaemonClient::onMotionActivityNotification
{"msg%{public}.0s":"CLDaemonClient::onMotionActivityNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLDaemonClient::onSedentaryTimerAlarm
{"msg%{public}.0s":"CLDaemonClient::onSedentaryTimerAlarm", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLDaemonClient::onGmmNotification
{"msg%{public}.0s":"CLDaemonClient::onGmmNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLDaemonClient::onPressureBias
{"msg%{public}.0s":"CLDaemonClient::onPressureBias", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLDaemonClient::onOnBodyNotification
{"msg%{public}.0s":"CLDaemonClient::onOnBodyNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLDaemonClient::onPauseNotification
{"msg%{public}.0s":"CLDaemonClient::onPauseNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLDaemonClient::onProactiveCompass
{"msg%{public}.0s":"CLDaemonClient::onProactiveCompass", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: kCLConnectionMessageRegistration
{"msg%{public}.0s":"kCLConnectionMessageRegistration", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageAllowsLocationPrompts
{"msg%{public}.0s":"kCLConnectionMessageAllowsLocationPrompts", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageShowLocationPrompt
{"msg%{public}.0s":"kCLConnectionMessageShowLocationPrompt", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
{"msg%{public}.0s":"kCLConnectionMessageWatchdog", "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessagePurpose
{"msg%{public}.0s":"kCLConnectionMessagePurpose", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageIsActuallyAWatchKitExtension
{"msg%{public}.0s":"kCLConnectionMessageIsActuallyAWatchKitExtension", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageProxyForRemoteClient
{"msg%{public}.0s":"kCLConnectionMessageProxyForRemoteClient", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageRequestAuthorization
{"msg%{public}.0s":"kCLConnectionMessageRequestAuthorization", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageMarkAsHavingReceivedLocation
{"msg%{public}.0s":"kCLConnectionMessageMarkAsHavingReceivedLocation", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageActivityType
{"msg%{public}.0s":"kCLConnectionMessageActivityType", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageMatchInfoEnabled
{"msg%{public}.0s":"kCLConnectionMessageMatchInfoEnabled", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessagePersistentMonitoringEnabled
{"msg%{public}.0s":"kCLConnectionMessagePersistentMonitoringEnabled", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageRegisterAsLocationClient
{"msg%{public}.0s":"kCLConnectionMessageRegisterAsLocationClient", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessagePausesLocationUpdatesAutomatically
{"msg%{public}.0s":"kCLConnectionMessagePausesLocationUpdatesAutomatically", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageAllowsBackgroundLocationUpdates
{"msg%{public}.0s":"kCLConnectionMessageAllowsBackgroundLocationUpdates", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageBatch
{"msg%{public}.0s":"kCLConnectionMessageBatch", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageAllowsMapCorrection
{"msg%{public}.0s":"kCLConnectionMessageAllowsMapCorrection", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageRegionState
{"msg%{public}.0s":"kCLConnectionMessageRegionState", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageInUseAssertion
{"msg%{public}.0s":"kCLConnectionMessageInUseAssertion", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageEmergencyEnablementAssertion
{"msg%{public}.0s":"kCLConnectionMessageEmergencyEnablementAssertion", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageLocationIndependenceAssertion
{"msg%{public}.0s":"kCLConnectionMessageLocationIndependenceAssertion", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageRegisterLaunchdManagedClients
{"msg%{public}.0s":"kCLConnectionMessageRegisterLaunchdManagedClients", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageLocation
{"msg%{public}.0s":"kCLConnectionMessageLocation", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageHeading
{"msg%{public}.0s":"kCLConnectionMessageHeading", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageRegionMonitoring
{"msg%{public}.0s":"kCLConnectionMessageRegionMonitoring", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageRanging
{"msg%{public}.0s":"kCLConnectionMessageRanging", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessagePeerRanging
{"msg%{public}.0s":"kCLConnectionMessagePeerRanging", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageSignificantLocationChange
{"msg%{public}.0s":"kCLConnectionMessageSignificantLocationChange", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageSignificantLocationVisit
{"msg%{public}.0s":"kCLConnectionMessageSignificantLocationVisit", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageVehicleHeading
{"msg%{public}.0s":"kCLConnectionMessageVehicleHeading", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageVehicleSpeed
{"msg%{public}.0s":"kCLConnectionMessageVehicleSpeed", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageMicroLocation
{"msg%{public}.0s":"kCLConnectionMessageMicroLocation", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageRequestMicroLocation
{"msg%{public}.0s":"kCLConnectionMessageRequestMicroLocation", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageMotionState
{"msg%{public}.0s":"kCLConnectionMessageMotionState", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageMotionActivityUpdate
{"msg%{public}.0s":"kCLConnectionMessageMotionActivityUpdate", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageMotionActivityQuery
{"msg%{public}.0s":"kCLConnectionMessageMotionActivityQuery", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageMotionActivityAvailable
{"msg%{public}.0s":"kCLConnectionMessageMotionActivityAvailable", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageActivityAlarmStart
{"msg%{public}.0s":"kCLConnectionMessageActivityAlarmStart", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageActivityAlarmAvailable
{"msg%{public}.0s":"kCLConnectionMessageActivityAlarmAvailable", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageSidebandOverride
{"msg%{public}.0s":"kCLConnectionMessageSidebandOverride", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageMotionStateSim
{"msg%{public}.0s":"kCLConnectionMessageMotionStateSim", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageStartStepCountAvailable
{"msg%{public}.0s":"kCLConnectionMessageStartStepCountAvailable", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageStartStepCountUpdate
{"msg%{public}.0s":"kCLConnectionMessageStartStepCountUpdate", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageStepCountQuery
{"msg%{public}.0s":"kCLConnectionMessageStepCountQuery", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageStepCountRecordQuery
{"msg%{public}.0s":"kCLConnectionMessageStepCountRecordQuery", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageStepCountReset
{"msg%{public}.0s":"kCLConnectionMessageStepCountReset", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageFloorCountAvailable
{"msg%{public}.0s":"kCLConnectionMessageFloorCountAvailable", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessagePaceAndCadenceAPIAvailable
{"msg%{public}.0s":"kCLConnectionMessagePaceAndCadenceAPIAvailable", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessagePedometerEvent
{"msg%{public}.0s":"kCLConnectionMessagePedometerEvent", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageStrideCalibrationDump
{"msg%{public}.0s":"kCLConnectionMessageStrideCalibrationDump", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessagePedometerCalibrationQuery
{"msg%{public}.0s":"kCLConnectionMessagePedometerCalibrationQuery", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageSidebandSensorFusionEnable
{"msg%{public}.0s":"kCLConnectionMessageSidebandSensorFusionEnable", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageGesture
{"msg%{public}.0s":"kCLConnectionMessageGesture", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageGmm
{"msg%{public}.0s":"kCLConnectionMessageGmm", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessagePressureBias
{"msg%{public}.0s":"kCLConnectionMessagePressureBias", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageGyroBiasEstimation
{"msg%{public}.0s":"kCLConnectionMessageGyroBiasEstimation", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageOnBodyDetection
{"msg%{public}.0s":"kCLConnectionMessageOnBodyDetection", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageOnBodyDetectionParams
{"msg%{public}.0s":"kCLConnectionMessageOnBodyDetectionParams", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageNatalimetryAvailable
{"msg%{public}.0s":"kCLConnectionMessageNatalimetryAvailable", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageNatalimetryUpdate
{"msg%{public}.0s":"kCLConnectionMessageNatalimetryUpdate", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageNatalimetryQuery
{"msg%{public}.0s":"kCLConnectionMessageNatalimetryQuery", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageNatalimetryGetUserProfile
{"msg%{public}.0s":"kCLConnectionMessageNatalimetryGetUserProfile", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageNatalimetrySetUserProfile
{"msg%{public}.0s":"kCLConnectionMessageNatalimetrySetUserProfile", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageNatalimetrySetSession
{"msg%{public}.0s":"kCLConnectionMessageNatalimetrySetSession", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageNatalimetryCalibrationPromptsNeeded
{"msg%{public}.0s":"kCLConnectionMessageNatalimetryCalibrationPromptsNeeded", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageNatalimetryResetCalibration
{"msg%{public}.0s":"kCLConnectionMessageNatalimetryResetCalibration", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageOdometerGpsAvailability
{"msg%{public}.0s":"kCLConnectionMessageOdometerGpsAvailability", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageStartOdometerUpdate
{"msg%{public}.0s":"kCLConnectionMessageStartOdometerUpdate", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageSedentaryTimerIsAvailable
{"msg%{public}.0s":"kCLConnectionMessageSedentaryTimerIsAvailable", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageSedentaryTimerIsArmed
{"msg%{public}.0s":"kCLConnectionMessageSedentaryTimerIsArmed", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageSedentaryTimerStart
{"msg%{public}.0s":"kCLConnectionMessageSedentaryTimerStart", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageSedentaryTimerStop
{"msg%{public}.0s":"kCLConnectionMessageSedentaryTimerStop", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageSedentaryTimerQuery
{"msg%{public}.0s":"kCLConnectionMessageSedentaryTimerQuery", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageSedentaryTimerAlarm
{"msg%{public}.0s":"kCLConnectionMessageSedentaryTimerAlarm", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageHasRunMiniCal
{"msg%{public}.0s":"kCLConnectionMessageHasRunMiniCal", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageStartMiniCal
{"msg%{public}.0s":"kCLConnectionMessageStartMiniCal", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageSetUrgentCalFlag
{"msg%{public}.0s":"kCLConnectionMessageSetUrgentCalFlag", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageCatherineData
{"msg%{public}.0s":"kCLConnectionMessageCatherineData", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageVehicleConnectionMostRecent
{"msg%{public}.0s":"kCLConnectionMessageVehicleConnectionMostRecent", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageVehicleStateIsAvailable
{"msg%{public}.0s":"kCLConnectionMessageVehicleStateIsAvailable", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageVehicleStateMostRecentVehicleConnection
{"msg%{public}.0s":"kCLConnectionMessageVehicleStateMostRecentVehicleConnection", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageVehicleStateMostRecentInVehicle
{"msg%{public}.0s":"kCLConnectionMessageVehicleStateMostRecentInVehicle", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageSensorRecorderAuthorized
{"msg%{public}.0s":"kCLConnectionMessageSensorRecorderAuthorized", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageSensorRecorderSensorAvailable
{"msg%{public}.0s":"kCLConnectionMessageSensorRecorderSensorAvailable", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageSensorRecorderGetMetaByID
{"msg%{public}.0s":"kCLConnectionMessageSensorRecorderGetMetaByID", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageSensorRecorderGetMetaSinceID
{"msg%{public}.0s":"kCLConnectionMessageSensorRecorderGetMetaSinceID", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageSensorRecorderGetMetasByDateRange
{"msg%{public}.0s":"kCLConnectionMessageSensorRecorderGetMetasByDateRange", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageSensorRecorderGetDataByID
{"msg%{public}.0s":"kCLConnectionMessageSensorRecorderGetDataByID", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageSensorRecorderRecordFor
{"msg%{public}.0s":"kCLConnectionMessageSensorRecorderRecordFor", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageSensorRecorderWriteSensorDataToFileByDateRange
{"msg%{public}.0s":"kCLConnectionMessageSensorRecorderWriteSensorDataToFileByDateRange", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageSensorRecorderSetSensorSampleRate
{"msg%{public}.0s":"kCLConnectionMessageSensorRecorderSetSensorSampleRate", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageDeviceHasOriginalCamera
{"msg%{public}.0s":"kCLConnectionMessageDeviceHasOriginalCamera", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageCameraVcmActuatorId
{"msg%{public}.0s":"kCLConnectionMessageCameraVcmActuatorId", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageCompassCalibrationData
{"msg%{public}.0s":"kCLConnectionMessageCompassCalibrationData", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageExerciseMinuteUpdate
{"msg%{public}.0s":"kCLConnectionMessageExerciseMinuteUpdate", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageExerciseMinuteQuery
{"msg%{public}.0s":"kCLConnectionMessageExerciseMinuteQuery", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageWorkoutStart
{"msg%{public}.0s":"kCLConnectionMessageWorkoutStart", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageWorkoutStop
{"msg%{public}.0s":"kCLConnectionMessageWorkoutStop", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageWorkoutEvent
{"msg%{public}.0s":"kCLConnectionMessageWorkoutEvent", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageSetWorkoutTimeout
{"msg%{public}.0s":"kCLConnectionMessageSetWorkoutTimeout", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageSwimDataUpdate
{"msg%{public}.0s":"kCLConnectionMessageSwimDataUpdate", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageSwimDataQuery
{"msg%{public}.0s":"kCLConnectionMessageSwimDataQuery", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageSignificantElevationUpdate
{"msg%{public}.0s":"kCLConnectionMessageSignificantElevationUpdate", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageSignificantElevationDeltaQuery
{"msg%{public}.0s":"kCLConnectionMessageSignificantElevationDeltaQuery", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageCaptureMode
{"msg%{public}.0s":"kCLConnectionMessageCaptureMode", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageFallStatsAvailable
{"msg%{public}.0s":"kCLConnectionMessageFallStatsAvailable", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageFallStatsSetEnabled
{"msg%{public}.0s":"kCLConnectionMessageFallStatsSetEnabled", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageFallStatsSendStats
{"msg%{public}.0s":"kCLConnectionMessageFallStatsSendStats", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageSpringTrackerIsTracking
{"msg%{public}.0s":"kCLConnectionMessageSpringTrackerIsTracking", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageSpringTrackerStart
{"msg%{public}.0s":"kCLConnectionMessageSpringTrackerStart", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageSpringTrackerStop
{"msg%{public}.0s":"kCLConnectionMessageSpringTrackerStop", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageSpringTrackerQuery
{"msg%{public}.0s":"kCLConnectionMessageSpringTrackerQuery", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageFitnessMachineData
{"msg%{public}.0s":"kCLConnectionMessageFitnessMachineData", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageWriteDbToFile
{"msg%{public}.0s":"kCLConnectionMessageWriteDbToFile", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageMotionAlarmRegister
{"msg%{public}.0s":"kCLConnectionMessageMotionAlarmRegister", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageMotionAlarmUnregister
{"msg%{public}.0s":"kCLConnectionMessageMotionAlarmUnregister", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageMotionAlarmAcknowledge
{"msg%{public}.0s":"kCLConnectionMessageMotionAlarmAcknowledge", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageMotionAlarmFire
{"msg%{public}.0s":"kCLConnectionMessageMotionAlarmFire", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
CL: kCLConnectionMessageMotionAlarmLaunchRemoteApplication
{"msg%{public}.0s":"kCLConnectionMessageMotionAlarmLaunchRemoteApplication", "event":%{public, location:escape_only}s, "this":"%{public}p", "registrationRequired":%{public}hhd, "registrationReceived":%{public}hhd}
WRTT: peer without a key
TmmFile, name, path, %s, servername, %s
Could not serialize data
{"msg%{public}.0s":"Failed to create a CLBundleLocation provider", "name":%{public, location:escape_only}s, "silo":%{public, location:escape_only}s, "bundleIdentifier":%{public, location:escape_only}s, "bundlePath":%{public, location:escape_only}s}
#BLP attempting to create bundle location provider with NULL bundle path and NULL bundle identifier
#BLP bundle path does not exist, %{public}s
#BLP no application installed backed by bundle identifier, %{public}s
BLP: Need a bundle path or a bundle identifier.
BLP: Couldn't create client for bundle path %{public}s
BLP: Registering with desired accuracy %d (%s)
BLP: Location distance filter is now %.2f (%s)
BLP: Stopping location updates (%s)
#Warning BLP: CLBundleLocationProvider does not support spectators (%s)
BLP: Bystander distance filter is now %.2f (%s)
BLP: Stopping bystander location updates (%s)
@WsbReg, bundleId, %{public}s, active, %{public}d, clients, %{public}ld
BLP: starting wifi location batch, bundleId, %s
BLP: stopping wifi location batch, bundleId, %s
#Warning Could not get location from location event (%s)
#Warning BLP: Could not get authorization status (%s)
BLP: Couldn't retrieve authorization status for %{public}s
#Warning BLP: Couldn't retrieve location for %s
not connected to wifi #tile tables database
{"msg%{public}.0s":"failed to count number of rows for table", "table":%{private, location:escape_only}s}
{"msg%{public}.0s":"Unexpected number of access point entries in tile", "actual":%{public}d, "expected":%{public}d, "tableName":%{private, location:escape_only}s}
{"msg%{public}.0s":"Failed to parse tile coordinates from table name.", "tableName":%{private, location:escape_only}s}
{"msg%{public}.0s":"bad #tile database raii statement", "database==NULL":%{public}hhd, "statement==NULL":%{public}hhd, "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
Couldn't create XPC service
Got error: %{public}s
Unexpected event type %{public}s
Using simulated location <%+.8f,%+.8f> acc %.2f alt %.1f vacc. %.2f type %d
Attempt to start scenario, but no scenario is loaded!
Couldn't set simulation scenario
Couldn't parse simulation scenario data
Couldn't get locations array for simulation scenario
Applying new simulation scenario with %ld locations
Location %{public}d for simulation scenario is of incorrect format
Location %{public}d for simulation scenario is of incorrect type (%{public}s)
Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Type,%d,%s,Speed,%.2f,Course,%.2f,Confidence,%d,Lifespan,%.3f,LocationTimestamp,%.3f,Age,%.3f,
Setting simulation type to %d
Setting repeat behaviour to %d
Setting location interval to %.2f
Setting location speed to %.2f
Setting intermediate distance to %.2f
fNextLocation is <%+.8f,%+.8f> acc %.2f timestamp %.2f
Time delta is %.2fs
Simulation start request received
Simulation stop request received
Simulation type changed from %d to %d
Repeat behaviour changed from %d to %d
Intermediate distance changed from %.2f to %.2f
Interval changed from %.2f to %.2f
Travelling speed changed from %.2f to %.2f
interval = %.2f, fNextLocation.timestamp = %.2f, time = %.2f
Clearing all pending locations and settings
Preparing next location
No more pending locations
Scheduling send of location unavailable notification
Sending appropriate location unavailable notification
Repeat location behavior selected; repeating last location
Looping repeat behavior selected; starting scenario again
Simulation is not running
Nowhere to go; not preparing next location
Adjusting next location timestamp (%.2f) forward by %.2fs
snl: fNextLocation is <%+.8f,%+.8f> acc %.2f timestamp %.2f
snl: fCurrentLocation is <%+.8f,%+.8f> acc %.2f timestamp %.2f
snl: speed is %.2f, timeElapsed = %.2f
distance is %.2f
Reached location <%+.8f,%+.8f>, preparing next
Next location is <%+.8f,%+.8f>
Propogating <%+.8f,%+.8f> acc %.2f for %.2f seconds at %.2f m/s course %.2f
Notify location is %+.8f,%+.8f (speed %.2f, course %.2f, timestamp %.2f)
Notifying in %.2f seconds
Unknown simulation type %{public}d
#Warning No location provider found for <%+.8f,%+.8f> acc %.2f timestamp %.2f type %d
Sent simulated location to service %@
CL: CLSimulationController::onNextLocationTimer
{"msg%{public}.0s":"CLSimulationController::onNextLocationTimer", "event":%{public, location:escape_only}s, "this":"%{public}p"}
Timer fired on companion,currentMotionCalsVersion,%d
Phone converted RawSpeedToKValueTable to StrideCalibrationBins to comply with Watch (Major:%d Minor:%d).
Companion sent calibrations to watch: %s
Device is now unlocked.
Clearing a stale vo2max of 0 value.
Loaded Motion Cals from backup: fMotionCals, %s, current version, %d
No motion cal backup file was found at path: %s. Restore PAL.
restoring backup motion cals
quickswitch protocol %d
PAL is updated from %f to %f
PAL not loaded or changed.
Restore & Arbitrate
processing motion cals received from watch
arbitration
restore pal
Loaded Motion Cals from PAL: fMotionCals, %s, current version, %d.
Asked to persist Motion Cals, current version, %d, isDeviceCurrentlyUnlocked, %d
Companion did not persist Motion Cals, waiting until next unlock, current version, %d, isDeviceCurrentlyUnlocked, %d
Companion persisted calibrations to disk, fMotionCals = %s
Companion received calibrations from watch: %s
clearing motion calibrations
#Warning Failed to retreive default raw speed to kValue bins.
#Warning Failed to retreive default step cadence to stride length bins.
Buffered: version, %d, UDID, %s, timestamp, %lf, Current: version, %d, UDID, %s, timestamp, %lf, result, %d
Scheduled send to watch.
CL: CLMotionSyncStoreCompanion::onPalUpdateNotification
{"msg%{public}.0s":"CLMotionSyncStoreCompanion::onPalUpdateNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLMotionSyncStoreCompanion::onCompanionNotification
{"msg%{public}.0s":"CLMotionSyncStoreCompanion::onCompanionNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
#Warning Step count went backwards (%u -> %u). locationd starting? Motion Co-processor reboot?
startTime,%f,timestamp,%f,firstStepTime,%f,lastStepTime,%f,stepsDelta,%u,calibratedDistanceDelta,%f,calibratedPace,%f,rawStrideLength,%f,activeTimeDelta,%f,rawPaceCurrent,%f,rawPaceActive,%f,rawPaceDidJump,%d,stepCadenceCurrent,%f,stepCadenceActive,%f,kValue,%f,pedometerArmConstrainedState,%d,strideLengthFromStepCadence,%f,useStrideLengthFromStepCadence,%d
could not create dpc source
CL: CLBluetoothService::onDpcSource
{"msg%{public}.0s":"CLBluetoothService::onDpcSource", "event":%{public, location:escape_only}s, "this":"%{public}p"}
rotBufferSize9, %zu, accelBufferSize, %zuu, peakCount, %d, compassBufferSize, %zu
gyroDt9, %.4f, doAccelCheck, %d
fAccelBuffer,size,%zu
omegaMag9, %.3f, omega, %.3f, %.3f, %.3f
[AppleQuaternion9] x,%f,y,%f,z,%f,w,%f,timestamp,%f
[Accelerometer9] x,%f,y,%f,z,%f,timestamp,%lf
[RotationRate9] %.3f, %.3f, %.3f, %.3f
[KalmanFilterStates9] %f,%f,%f,%f,%f,%f,%f
[KalmanFilterStates9-AccelUpdate] %f,%f,%f,%f,%f,%f,%f
[CompassIntoKF] timestamp,%f,calibration level %d, compassHasAlignedToStableField %d, useMagneticRefX %d
[CompassIntoKF] fLastAccelTime,%f
[CompassIntoKF] magneticFieldAdjusted!
rotAroundGrav, %.3f, sum, %.3f
[CompassIntoKF] omegaMag, %.3f, omegaVar, %.3f
FieldDiff, %.3f, %.3f, %.3f, %.3f
Aborted yawUpdate.
Checking again for magField. checkcount, %d
fCorrected, %.3f, %.3f, %.3f
[!!!CompassInertialReference] x,%f,y,%f,z,%f,calibrationLevel,%d,timestamp,%lf
Warning: Compass outputs field magnitude 0.
[!!!CompassInertialReference] x,%f,y,%f,z,%f
UpdatingYaw!
[Magnetometer9] x,%f,y,%f,z,%f,timestamp,%lf
Warning: Hey! Compass outputs field magnitude 0.
[ExpectedCompass] %f,%f,%f,%f
[TrueCompass] %f,%f,%f,%d,%f
[MagCCross] %f,%f,%f,%f,%f,%f,%f,%f,%f,%f
[MagCorrectionDX] %f,%f,%f,angle,%.3f,sumRot,%.3f,%f
{"msg%{public}.0s":"no most recent scan entry for mac", "mac":%{private, location:escape_only}s, "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
{"msg%{public}.0s":"look up locations of mac addresses", "data":%{private, location:escape_only}s}
WifiAps, aplookup, %{private}s, %{public}s
@WifiAps, lookup, %{public}lu, valid, %{public}lu, invalid, %{public}lu, notInDb, %{public}lu
{"msg%{public}.0s":"wifi ap location lookup, finished", "data":%{private, location:escape_only}s}
CL: CLConnectionClient::sendMessage(reply) (Fallback)
{"msg%{public}.0s":"CLConnectionClient::sendMessage(reply)", "event":%{public, location:escape_only}s}
received daemon start notification for service %s
Creating connection
Destroying connection
CL: Sending cached messages to daemon
{"msg%{public}.0s":"Sending cached messages to daemon", "event":%{public, location:escape_only}s}
#Warning No cached registration message
KF:Attempting update,type,%{public}d,lat,%{private}.7f,lon,%{private}.7f,hunc,%{public}.1f,conf,%{public}d
KF:Single AP,Dual input rejection,lat,%{private}.7f,lon,%{private}.7f
KF:input should not be rejected after a hard reset
KF:Dual rejection,type,%{public}d,lat,%{private}.7f,lon,%{private}.7f,blunder detected
#Warning,KF:longTermStatic should not fail if longTermNormal succeeded
KF:Dual,%{public}.3f,%{public}d,%{public}d,%{public}d,%{private}.7f,%{private}.8f,%{private}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}s
KF:calcTPTQ failed
KF:boundLatitude failed
KF:boundLongitude failed
KF:updateMotion failed unexpectedly
KF:calc_dNdE failed
KF:Prediction failed
KF:re-init,uncertainty growth>%{public}.0lf
KF:ZUPT failed
KF:ZUPT innovation update failed
#Warning,KF:update with null island,not allowed
#Warning,KF:input horizontal accuracy == 0. Using horizontalAccuracy = 9999000.0 m
KF:P is not dimensioned
KF:x is not dimensioned
KF:input horizontalAccuracy < 0
KF:too many consecutive update rejections,KF reset
KF:update with same cell location ignored
KF:re-init,dT>%{public}.0lf
KF:non-GPS within %{public}.1f of GPS,ignoring.
KF:diverged compared to med/high conf WiFi,resetting
KF:Transition,coarse GPS to WiFi,hunc bumped,%{public}.1f
KF:diverged,%{public}.3lf,reseeding,inputType,%{public}d,lat,v2,%{public}.1lf
KF:reseed,type,%{public}d,%{private}.7lf,%{private}.7lf,%{private}.3lf,hunc,%{public}.1lf,vunc,%{public}.1lf,conf,%{public}d
KF:lt%{public}c,%{public}.3lf,inputType,%{public}d,lat,v2,%{public}.1lf
KF:Input is not consistent with prior input. Filter reseeding.
KF:lat innovation update failed
KF:increment num rejections by half
KF:diverged,%{public}.3lf,reseeding,inputType,%{public}d,lon,v2,%{public}.1lf
KF:lt%{public}c,%{public}.3lf,inputType,%{public}d,lon,v2,%{public}.1lf
KF:Input is not consistent with prior input,filter reseeding
KF:seedTheFilter failed
KF:lon innovation update failed
KF:lt%{public}c,%{public}.3lf,inputType,%{public}d,vn,v2,%{public}.1lf
KF:vn innovation update failed
KF:computePht_and_hPht failed
KF:sigma2_v <= 0
KF:lt%{public}c,%{public}.3lf,inputType,%{public}d,ve,v2,%{public}.1lf
KF:ve innovation update failed
KF:updateP failed
KF:sanityTestP failed
KF:Not applying the uncertainty floor
KF:lt%{public}c,%{public}.3lf,inputType,%{public}d,alt,v2,%.1lf
KF:getResult failed
KF:Filter corrobarated by type,rejects now allowed
KF:Filter corrobarated by position,rejects now allowed
KF:rejected cell and wifi locations are consistent,filter should reset
KF:rejected cell and coarse-gps locations are consistent,filter should reset
KF:rejected wifi and coarse-gps locations are consistent,filter should reset
KF:diagonal element of P < 0
KF:dN == 0
KF:x is not dimensioned, innovation not applied
KF:k is not dimensioned, innovation not applied
KF:latRads,%{private}.7f,out of bounds
KF:lonRads,%{private}.7f,out of bounds
KF:init P failed
#Warning,KF:Pht is not dimensioned
KF:h_index exceeds bounds
#Warning,KF:P is not dimensioned
KF:k is not dimensioned
KF:hunc == 0
KF:speedUnc == 0
#Warning,P was not dimensioned
KF:tuning invalid
#Warning,KF:Q was not dimensioned
KF:tuning invalid, beta == 0
KF:fKalman.dN == 0.0 || fKalman.dE == 0.0
KF:dT < 0
#Warning,Q is not dimensioned
KF:beta is zero
KF:setQ failed
#Warning,KF:P is not symmetric
unsupported location type,%{public}d
{"msg%{public}.0s":"Assertion failed - unsupported location type", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
%%1:KF:,2:lts-or-ltn,3:timestamp(s),4:inType,5:outType,6:motionState,7:latitude(deg),8:longitude(deg),9:altitude(m),10:speed(km/hr),11:course(deg),12:hunc(m),13:vunc(m),14:sunc(m/s),15:cunc(deg),16:v_standardized^2
KF:,lt%{public}c,%{public}.3f,%{public}d,%{public}d,%{public}d,%{private}.7f,%{private}.7f,%{private}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}s
#Warning bin %lu for valueIn %f invalid
binIndex %{public}lu invalid
%s,Updated,With,%s,%0.4f,%s,%0.4f,Alpha,%0.4f,NativeBinIndex,%lu,OldBinStatus,%s,NewBinStatus,%s
#Warning Fence: why is this used?, %s, %lf
Fence: fence, %s, became empty
#Warning Unhandled notification %d.
Disabling update timer.
Sending session update.
MotionStateObserver,remote state,startTime,%.3f,type,%d
CL: CLMotionStateObserverWatch::onMotionStateMediatorNotification
{"msg%{public}.0s":"CLMotionStateObserverWatch::onMotionStateMediatorNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
Starting pressure calibration, user initiated, %d
Pressure dispatcher was expected to be null.
temperatureOffsetCoefficient,%f,medianAbsoluteDeviation,%f,minTemp,%d,maxTemp,%d,valid,%d
Stopped pressure calibration
Cannot get PRTT property
PRTT version (%u) does not match expected versions (%u, %u)
factory calibrated temperature from syscfg: %f
Warning: factory calibrated temperature (%f) is not within acceptable bounds: [%f, %f], using default: %f
Warning: using default factory calibrated temperature: %f
size of tco list (%lu) is less than minimum (%d) required for median computation
TocMedian,%f,TocDrift,%f,TocDriftMAD,%f,TocCount,%u
pressure,%f,temperature,%f,timestamp,%f
supervised capability changed from, %d, to, %d
iCloud managed apple ID capability changed from, %d, to, %d
installed education profile capability changed from, %d, to, %d
iTunes managed apple ID capability changed from, %d, to, %d
received unhandled notification, %{public}d
{"msg%{public}.0s":"#alsquery, computing ration of aps_with_known_location_count / aps_with_unknown_location_count", "known.size":%{public}ld, "uknown.size":%{public}ld, "knownToUnknownRatio":"%{public}f"}
{"msg%{public}.0s":"#alsquery, force query of all scanned APs", "query_type":%{public}d}
{"msg%{public}.0s":"#alsquery, emergency", "isQueryNeeded":%{public}hhd, "numberOfApsUsedInPositionCalculation":%{public}d}
{"msg%{public}.0s":"#alsquery, platform watch", "numberOfApsUsedInPositionCalculation":%{public}d}
#alsquery, unknown associated AP
#alsquery, no query, stop criteria met
#alsquery, no query during CPI
{"msg%{public}.0s":"#alsquery, no query due to known / unknown ratio", "knownToUnknownRatio":"%{public}f"}
#alsquery, number of aps with known locations less than desired, valid, %ld, no_locations, %ld
{"msg%{public}.0s":"#alsquery, no wifi location, too soon", "minIntervalBetweenQuries":%{public}ld}
#alsquery, create_request, %lu, use_cache, %d, query_nearbys, %d
{"msg%{public}.0s":"#alsquery, stop criteria calculation", "data":%{private, location:escape_only}s}
registered for kNotificationContext
registered for kNotificationContextSpectator
CLMM,MapMatchingGeometryType,%s
CLMM, PlatformSupportsMapMatching, %d
OBM,fPlatformSupportsOutdoorMatching,%d
CLMM, EnableNMEAMapMatching, %d
CLMM, EnableVerboseMapMatching, %d
PLOS, ObmVerboseLogging, %d
CLMM, MapMatchingNetworkUsageThermalLevelHighThreshold, %d
CLMM, MapMatchingNetworkUsageThermalLevelLowThreshold, %d
#Warning unexpected kNotificationMovementCoarse
Unhandled case
Going to sleep. Not providing motion state, %d, to the location KF
CLMM, MotionState,type,%d,confidence,%d,mountedState,%d,mountedConfidence,%d
OBM, MotionState,type,%d,confidence,%d,mountedState,%d,mountedConfidence,%d
#Warning Unknown notification %d
device entering sleep - no longer has active cell
device wake - checking for corresponding sleep
#Warning wake detected with no prior sleep known, sending unknown motion to location KF at time, %.3lf
priorSignalEnvironment,%d,newSignalEnvironment,%d
CLMM,AllowNetworkUsage,%d,batterySaverMode,%d,thermalVoteToAllow,%d,signalEnv,%d,isMapsForeground,%d
CL: CLLocationFilterController::onMotionNotification
{"msg%{public}.0s":"CLLocationFilterController::onMotionNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLLocationFilterController::onDaemonStatusNotification
{"msg%{public}.0s":"CLLocationFilterController::onDaemonStatusNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLLocationFilterController::onSignalEnvironmentNotification
{"msg%{public}.0s":"CLLocationFilterController::onSignalEnvironmentNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
FenceCal: init globals
FenceCal: WifiFenceCalculatorDebug =%d
FenceCal: WifiFenceCalculatorDebugVerbose =%d
FenceCal: WifiFenceCalculatorMinNumAPs =%d
FenceCal: WifiFenceCalculatorSTDFactorMeters = %5.1lf
FenceCal: WifiFenceCalculatorRadiusFactor = %5.1lf
FenceCal: WifiFenceCalculatorMaxFenceRadius = %5.1lf
FenceCal: WifiFenceCalculatorMaxChosenAPs = %d
FenceCal: WifiFenceCalculatorMaxApsPerTileFactor = %lf
FenceCal: WifiFenceCalculatorSignificantScoreUpdateThresh = %lf
FenceCal: WifiFenceCalculatorGroupWeightForExit = %d
FenceCal: WifiFenceCalculatorMinApsPerFence = %d
FenceCal: WifiFenceCalculatorDefaultMaxChannelSetSize = %d
FenceCal: WifiFenceCalculatorDefaultChannelFilter = %d
FenceCal: WifiFenceCalculatorAPsScoreFilter = %d
FenceCal: gBlackListedAP = %s
FenceCal: init globals - done
FenceCal: fMaxChannelSetSize, %d, kMaxChannel, %d, fChannelFilter, 0x%X, fDefaultChannelFilter, 0x%X
bad CLStandardNormalDistribution(%{public}lf) = %{public}lf
FenceCal: Adding score, fence, %20s, score, %.8lf, min, %.8lf, avg, %.8lf, max, %.8lf, scores, %lu, aps, %zu
#Warning fChosenAPs is empty
FenceCal: start calculate fence, %-24s, C, center, %.8lf, %.8lf, radius, %.8lf, isMonitorForExit, %d
FenceCal: isExit, %d, fRadiusFactor, %.1lf, fenceRadius, %.1lf
FenceCal: really bad fence, %s
FenceCal: limit ePNO fence size, fence, %s, fMaxRadius, %.1lf
Invalid fence name, %s, latitude, %lf, longitude, %lf, radius, %lf
FenceCal: tile, y, %d, x, %d, index, %d, distanceFromCenter, %5.5lf, maxApsPerTile, %d, ApsFactor, %.5lf
FenceCal: fetch APs start
FenceCal: fetched, %ld, APs, forceFetchingExpectedAps, %d
FenceCal: expectedAp, %s
FenceCal: Where did you come from : %s
FenceCal: ap2Tile, %s, maxApsPerTile, %2d, left, %4d, top, %4d, tile, %4d, mac, %-24s, numAPs %4zu
FenceCal: calTile, %2zu : %3d / %3zu, %.8lf, %.8lf, FF0000FF
FenceCal: end calculate fence, %-24s, C, center, %.8lf, %.8lf, radius, %.8lf, isMonitorForExit, %d
#Warning FenceCal: ignore black listed AP, %s
FenceCal: avoid adding moving AP as an exit AP, %s
FenceCal: adding non-2GHz, reason: %s, %s
FenceCal: reason, %s, no budget / channel for, currentCount, %zu, apsBudget, %u, channelFilter, 0x%08x, isAddChannel, %d, isBlacklisted, %d, apLocation, %s
FenceCal: Adding AP, reason, %s, channelFilter, 0x%08x, isExit, %d, currentCount, %zu, apsBudget, %u , mac, %s, hAcc, %.2lf, channel, %d, location, %12.8lf, %12.8lf, added, %d
FenceCal: isAddChannel, %d, maxChannelSetSize, %d, totalAps, %.0lf, channelHistogram, sorted, channel, %2d, weight, %.3lf
FenceCal: addedChannels, %d, channelFilter, 0x%08x, totalWeight, %.3lf
FenceCal: calculateGroup, start, group size, %zu, apsBudget, %u, currentlySeen, %zu, minScoreThresh, %.4lf
FenceCal: calculateGroupLocation, %s
FenceCal: channelFilter, 0x%08X,countNumOfSetBits,%d
fencecalculator timestamp is 0
FenceCal: CurrentlySeen, %2d, %2lu, known, %2d, reached, %2u, %2d, isUseAP, %d, channels, %d, %s
FenceCal: before Blacklist, apLocation, %s
FenceCal: Blacklist, distanceToExpectedApLocation, %.1lf, distanceToFenceCenter, %.1lf
FenceCal: after Blacklist, apLocation, %s
FenceCal: Blacklist, fence, %s, result.fChosenAPs, %lu, isExit, %d
FenceCal: fence, %s, group pass, %3d, currentWeight, %3d, %3d, score, %+.4lf, newScore, %+.4lf, minScoreThresh, %+.4lf, totalChosenAps, %d, apsBudget, %d
FenceCal: fence, %s, group pass, %3d, currentWeight, %3d, %3d, upgrading score from, %.4lf, to, %.4lf, from, %4zu, to, %4zu, APs, index, %2d, totalChosenAps, %d, apsBudget, %d
FenceCal: fence, %s, score too close, currentScore, %lf, newScore, %lf, significantUpdateThresh, %lf, updating next step to, %d
FenceCal: passNum, %d, commitedAPs, %d, totalChosenAps, %d, numOfAps, %zu
FenceCal: group result, %30s, totalChosenAps, %4d, apsBudget, %4d, index, %4zu , %4zu, aps, %4zu, %4zu, score, %.2lf, index, %4d, dbgCounter, %4d
FenceCal: group result, %30s, can't be monitored
#Warning FenceCal: no score for, %s, fChosenAps, %4zu
FenceCal: chosenScore, %-16s, fChosenScoreIndex, %4d, numOfAps, %4zu, %4zu, score, %.2lf
FenceCal: topping, %zu, apsBudget, %u
FenceCal: Topping, %s, fChosenScoreIndex, %d, total, %zu
FenceCal: topping, from APs, %zu, to APs, %zu
FenceCal: finised topping, %zu, apsBudget, %u
FenceCal: fence, %s, isExit, %d, fChosenScoreIndex, %d, fChosenAPs, %zu, fChosenAPsScores, %zu, canBeMonitored, %d, canBeMonitoredInGroup, %d, numOfExitFences, %u
FenceCal: calculateGroup, end, return val, isOK, %d, numOfFences, %zu, numOfExitFences, %d, combinedCanMonitor, %d, combinedCanMonitorGroup, %d, combinedCanMonitorExitGroup, %d
Return entry AP, index, %2zu, %2zu, %s
Return exit AP, index, %2zu, %2zu, %s
Fence: remove %s/%s from %s, remaining fences, %lu
Fence: kill combinedFence, %s, remaining fences, %lu
FenceCal: combining fence, %s
FenceCal: combine fine fence, distance, %.1lf, %s
FenceCal: combine large fences, distance, %.1lf, %s
FenceCal: combine non-fine non-large fence, distance, %.1lf, %s
FenceCal: do not combine combine fence, distance, %.1lf
FenceCal: creating a new combined fence for, %s
FenceCal: adding to, %s, isExit, %d
FenceCal: No fences
FenceCal: finalizedCombinedFence, %s
FenceCal: fDistanceFromCurrentLocation, %.2lf, %s
dCOLLECT: no chosen score, was calculateGroup called?
Raven: constructing CLRavenController
Raven: EnableRavenEstimator,%d
Raven: Raven estimator enabled
Raven: Raven estimator disabled
Raven: EnableRavenRecorder,%d
Raven: Raven recorder enabled
Raven: Raven recorder disabled
Raven: destructing CLRavenController
#Warning Raven: could not handle exiting %s
Raven: entering %s
#Warning Raven: could not handle entering %s
Raven: EnableRaven,%d
Raven: feature enabled
Raven: feature disabled
Raven: received external disable command
Raven: received external enable best effort command
#Warning Raven: encountered empty accelerometer notification
#Warning Raven: encountered unexpected accelerometer batch size of %u
#Warning Raven: encountered empty barometer notification
#Warning Raven: encountered unexpected barometer batch size of %u
#Warning Raven: encountered empty magnetometer notification
#Warning Raven: encountered unexpected magnetometer batch size of %u
#Warning Raven: encountered empty rate gyro notification
#Warning Raven: encountered unexpected rate gyro batch size of %u
Raven: resetting CLRavenController
Raven: mach absolute time to mach continuous time conversion of DEM update failed
Raven: mach absolute time to cf absolute time conversion of DEM notification failed
Raven: Dem unavailable at,lat,%{Private}.8lf,lon,%{Private}.8lf
Raven: missing gnss meas data
Raven: mach absolute time to mach continuous time conversion of signal environment notification failed
Raven: mach absolute time to cf absolute time conversion of signal environment notification failed
CL: CLRavenController::HandleAccelerometerNotification
{"msg%{public}.0s":"CLRavenController::HandleAccelerometerNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLRavenController::HandleBarometerNotification
{"msg%{public}.0s":"CLRavenController::HandleBarometerNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLRavenController::HandleLocationNotification
{"msg%{public}.0s":"CLRavenController::HandleLocationNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLRavenController::HandleMeasurementNotification
{"msg%{public}.0s":"CLRavenController::HandleMeasurementNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLRavenController::HandleMagnetometerNotification
{"msg%{public}.0s":"CLRavenController::HandleMagnetometerNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLRavenController::HandleMapVectorDirectionOfTravelNotification
{"msg%{public}.0s":"CLRavenController::HandleMapVectorDirectionOfTravelNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLRavenController::HandleMotionStateNotification
{"msg%{public}.0s":"CLRavenController::HandleMotionStateNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLRavenController::HandleMotionStateObserverNotification
{"msg%{public}.0s":"CLRavenController::HandleMotionStateObserverNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLRavenController::HandleNatalimetryNotification
{"msg%{public}.0s":"CLRavenController::HandleNatalimetryNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLRavenController::HandleRateGyroNotification
{"msg%{public}.0s":"CLRavenController::HandleRateGyroNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLRavenController::HandleSignalEnvironmentNotification
{"msg%{public}.0s":"CLRavenController::HandleSignalEnvironmentNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLRavenController::HandleStatusNotification
{"msg%{public}.0s":"CLRavenController::HandleStatusNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
{"msg%{public}.0s":"#SLC Overriding awareness parameters", "foundParameters":%{public, location:escape_only}@}
#SLC gSLCShowUI, %d
#Warning #SLC Overriding fence start delay to %.2f
%d significant location change clients
#SLC fIsConsolidateTriggersEnabled, %d
#SLC fConsolidatedTriggersTimeInterval, %.1lf
#SLC failed to allocate, fConsolidatedTrigger
#SLC Could not store significant change clients
{"msg%{public}.0s":"#SLC location changed", "now_s":"%{public}.09f", "location":%{private, location:CLClientLocation}.*P, "distance":"%{private}f"}
{"msg%{public}.0s":"#Warning #SLC Currently sending significant location changes read from defaults."}
{"msg%{public}.0s":"#Warning #SLC Delete 'SpoofSignificantLocationChange' from defaults to continue monitoring SLC updates."}
{"msg%{public}.0s":"#Warning #SLC location services is disabled, ignoring location"}
{"msg%{public}.0s":"#SLC Significant location change got invalid location!"}
{"msg%{public}.0s":"#SLC Ignoring inaccurate location"}
{"msg%{public}.0s":"#SLC Ignoring inaccurate GPS location"}
{"msg%{public}.0s":"#SLC Ignoring inaccurate WIFI location"}
{"msg%{public}.0s":"#Warning #SLC Significant location change monitoring not active; not handling"}
#SLC handleSignificantLocationChange, distance, %.1lf, timeDelta, %.1lf, maxFactor, %.1lf
#SLC <%+.8f,%+.8f> acc %.2f timestamp %.2f is stale, discarding
#SLC <%+.8f,%+.8f> acc %.2f moved only %.2fm from previous significant location <%+.8f,%+.8f> acc %.2f, discarding
#SLC Lifespan of previous significant location <%+.8f,%+.8f> acc %.2f has not expired (timestamp %.2f, lifespan %.2f), discarding <%+.8f,%+.8f> acc %.2f
#SLC Timestamp %.2f of previous significant location <%+.8f,%+.8f> is less than %.2f seconds ago; discarding <%+.8f,%+.8f> acc %.2f
#Warning #SLC Location <%+.8f,%+.8f> acc %.2f is too far (distance %.2f) from previous location <%+.8f,%+.8f> acc %.2f from %.3fs ago, discarding
#SLC avoiding too frequent SLC notificaitons, age, %.1f, prev location, <%+.8f,%+.8f>, acc, %.2lf, new location, <%+.8f,%+.8f>, acc, %.2f
#SLC issue notificaiton, distance, %.1lf
#SLC got first location, sending SLC notification
#SLC no location change
#SLC reporting a location change
#SLC new location is not useful
{"msg%{public}.0s":"#SLC Location inspection complete", "isSignificantlocationchange":%{public}hhd, "distance":"%{private}f", "secondsSinceLastSLC_s":"%{public}.09f"}
Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Lifespan,%.2f,LocationType,%d,PrevLocation,%+.8f,%+.8f,%.2f,Distance,%.2f,DeltaTime,%.3f,Clients,%d,
Couldn't get list of significant location change clients
{"msg%{public}.0s":"#SLC Re-evaluating persistent clients", "clientCount":%{public}lu}
#SLC Couldn't get list of clients
{"msg%{public}.0s":"#SLC Insanity!  We were just told there was a key here!", "key":%{public, location:escape_only}s}
{"msg%{public}.0s":"#SLC Invalid value found in plist"}
{"msg%{public}.0s":"#SLC can't get name", "key":%{public, location:escape_only}s}
{"msg%{public}.0s":"#SLC Client is now running SLC", "key":%{public, location:escape_only}s}
{"msg%{public}.0s":"#SLC Client is no longer running SLC", "key":%{public, location:escape_only}s}
{"msg%{public}.0s":"#SLC #Warning Big switch is off; not adding significant location change client", "key":%{public, location:escape_only}s}
{"msg%{public}.0s":"#SLC Received invalid monitoring parameters", "powerBudget":%{public}d}
{"msg%{public}.0s":"#SLC Adding persistent significant location change client", "key":%{public, location:escape_only}s, "totalClients":%{public}d, "activeClients":%{public}ld}
{"msg%{public}.0s":"#SLC Client persistent monitoring status changed", "key":%{public, location:escape_only}s, "shouldBeMonitoring":%{public}hhd}
#SLC Couldn't get list of SLC clients
{"msg%{public}.0s":"#SLC Removing persistent clients in response to reset", "clientCount":%{public}ld}
{"msg%{public}.0s":"#SLC Checking whether we should be monitoring", "bigSwitch":%{public}hhd, "activeNow":%{public}hhd, "hasNotifierClients":%{public}hhd, "persistentClients":%{public}ld}
{"msg%{public}.0s":"#SLC Starting"}
{"msg%{public}.0s":"#SLC Stopping"}
#SLC Booting up
{"msg%{public}.0s":"#SLC Removing persistent client interest", "key":%{public, location:escape_only}s}
#SLC onSettingsNotification
#SLC Spoofing a Significant Location Change: %s
{"msg%{public}.0s":"#SLC Got location", "location":%{private, location:CLClientLocation}.*P}
{"msg%{public}.0s":"#SLC Client uninstalled", "key":%{public, location:escape_only}s}
{"msg%{public}.0s":"#SLC Location services is now disabled; stopping"}
{"msg%{public}.0s":"#SLC Location services is now enabled; starting"}
{"msg%{public}.0s":"#SLC Reauthorizing clients by toggling status"}
{"msg%{public}.0s":"#SLC Got unknown client notification", "notification":%{public}d}
#SLC Got kNotificationMigration, fBigSwitchIsOn, %d
#Warning #SLC unknown notification, %d
{"msg%{public}.0s":"#SLC Request location update"}
#SLC onStoreTimer, info, %p
#SLC ignore, onConsolidatedTrigger, shutdown?
#SLC onConsolidatedTrigger, calling requestLocationUpdate
CL: CLSignificantChangeManager::onClientNotification
{"msg%{public}.0s":"CLSignificantChangeManager::onClientNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLSignificantChangeManager::onStatusNotification
{"msg%{public}.0s":"CLSignificantChangeManager::onStatusNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLSignificantChangeManager::onAwarenessNotification
{"msg%{public}.0s":"CLSignificantChangeManager::onAwarenessNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLSignificantChangeManager::onSettingsNotification
{"msg%{public}.0s":"CLSignificantChangeManager::onSettingsNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLSignificantChangeManager::onStoreTimer
{"msg%{public}.0s":"CLSignificantChangeManager::onStoreTimer", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLSignificantChangeManager::onConsolidatedTrigger
{"msg%{public}.0s":"CLSignificantChangeManager::onConsolidatedTrigger", "event":%{public, location:escape_only}s, "this":"%{public}p"}
northAndGravity failed
invalid initializeDown covariance !(P > 0), reseting
Assertion failed: row < M, file /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Oscar/Math/CMMatrix.h, line 64,invalid row %zu > %zu.
Assertion failed: col < N, file /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Oscar/Math/CMMatrix.h, line 65,invalid col %zu > %zu.
Assertion failed: !empty(), file /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Oscar/CMVectorBuffer.h, line 96,mean() on empty buffer.
D(%zu) <= 0 non-positive definite matrix!
Assertion failed: col > row, file /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Oscar/Math/CMFactoredMatrix.h, line 123,invalid element %zu <= %zu.
Assertion failed: !empty(), file /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Oscar/CMVectorBuffer.h, line 148,back() on empty buffer.
Assertion failed: col > row, file /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Oscar/Math/CMFactoredMatrix.h, line 117,invalid element %zu <= %zu.
Assertion failed: row < M, file /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Oscar/Math/CMMatrix.h, line 71,invalid row %zu > %zu.
Assertion failed: col < N, file /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Oscar/Math/CMMatrix.h, line 72,invalid col %zu > %zu.
Assertion failed: ldx < M*N, file /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Oscar/Math/CMMatrix.h, line 78,invalid element %zu >= %zu.
D[%zu] <= 0, matrix ! positive definite
Assertion failed: i < N, file /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Oscar/Math/CMVector.h, line 278,invalid index %zu >= %zu.
D[%zu] == 0, semidefinite matrix!
%zu: alpha <= 0, matrix ! positive definite
CLMM, GeoMapAccess did not have sufficient data available (buildingsWithinDistance)
#Warning CLMM,GeoMapAccess query returned,nullptr
{"msg%{public}.0s":"@ALM: Taking process assertion for process", "processId":%{public}u}
{"msg%{public}.0s":"@ALM: Releasing process assertion for process", "processId":%{public}u}
#Warning ALM: Couldn't create assertion for process ID %{public}u
%s doesn't have a bundle ID; not going to bug SpringBoard.
{"msg%{public}.0s":"ALM: failed attempt to launch before device unlocked since boot", "clientKey":%{private, location:escape_only}s}
%s isn't running; launching...
#Warning Couldn't launch application %s (%d)
Application state for %s is %d
Got PID %{public}d for bundle ID %{public}s, but application is terminated!
#Warning Couldn't get application state for bundle ID %s
Application %s was task-suspended
Taking process assertion for %s...
notification, %d, %s, pid, %d, bundleId, %s
#Warning unhandled app monitor notification, %d, %s
ALM: device unlocked since boot, %{private}s, application launch capability, %{private}sabled
CL: CLApplicationLifecycleManager::onAppMonitorNotification
{"msg%{public}.0s":"CLApplicationLifecycleManager::onAppMonitorNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLApplicationLifecycleManager::onDataProtectionManagerNotification
{"msg%{public}.0s":"CLApplicationLifecycleManager::onDataProtectionManagerNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
Enable dynamic accelerometer rate = %d
Using prototype: %s
Not starting gesture detection since requested accelerometer interval < 0
Gesture prototype was not setup. Using default prototype
No accelerometer; not detecting gestures
9-axis sensor fusion is not supported on this platform.  Returning.
North reference overridden as %d by first client
correctedCompassExt, %.3f, %.3f, %.3f, %u, %u
{"msg%{public}.0s":"Non-cell tile Assertion", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
TILE: fMaxTileDataAge, %.1lf
TileCoarse, isActive, %{public}d
TILE: MTimeModificationPeriod, %.1lf
TILE: fDefaultCellTilesServerUrl, %s
TILE: mkdir, %s, ret, %d
TILE: CLCoarseCellTilesManager::shutdown
TileCoarse, unexpected, dataprotection, %{public}d
TileCoarse, kNotificationEncryptedDataAvailability, %d, changed, %d
TileCoarse, unexpected, status, %{public}d
TileCoarse, kNotificationReachability, %{public}d, was, %{public}d
TileCoarse, kNotificationReset
TileCoarse, kNotificationLocationServicesStatus, %{public}d
TileCoarse, unexpected, companion, %{public}d
TileCoarse, Cleanup
TILE: performing, sAction, %s, tilesSet, %s
TileCoarse, listAvailableFilesAllTypes, indexed, %{public}d
TileCoarse, clear on index
TileCoarse, listAvailableFilesAllTypes, done
TileCoarse, indexTiles, rootDirectory, %{public}s, name, %{public}s
TileCoarse, indexTiles, can't open dir, %{public}s, #CloneMe
TileCoarse, indexTiles, absoluteFilename, '%{public}s', d_type, %{public}d
TileCoarse, indexTiles, invalid filename  %{public}s
TileCoarse, convert to class C, first unlock, %{public}s, files, %{public}d
TileCoarse, indexTiles, failed to stat file, %{public}s, ret, %{public}d, #CloneMe
@TileList, %{public}s, add, llsw, %{private}.2lf, %{private}.2lf, index, size, %{public}lu
TileCoarse, indexTiles, done, %{public}s, size, %{public}lu, unprotected, %{public}lu
TileCoarse, skip predownload, fIndexedAvailableFiles, %{public}d, fIsActive, %{public}d
@TileError, RequestID, ll, %{private}.3lf, %{private}.3lf, tid, %d, %d, %d
TileDl, requestDownload, type, %{public}d, %{public}s, location, %{private}14.8lf, %{private}14.8lf, id, %{private}s, updated, %{public}d, reachbility, %{public}d
@TileDl, coarse, failed criteria
TileDl, tileDownloadedCallback, success, %{public}d
@TileReq, %{public}s, downloaded, llsw, %{private}.2lf, %{private}.2lf, success, %{public}d, NSURLErrorCode, %{public}d
@TileDl, tileDecompressionCompleted, tile, %{private}s, decompress done, success, %{public}d, NSURLErrorCode, %{public}d, tileDoesNotExist, %{public}d, reachability, %{public}d, validId, %{public}d, locked, %{public}d, fileSize, %{public}d
@TileError, DecompressionID
@TileList, %{public}s, add, llsw, %{private}.2lf, %{private}.2lf, download, size, %{public}lu
@TileReq, %{public}s, add, llsw, %{private}.2lf, %{private}.2lf, download, size, %{public}lu
@TileError, tile not on download list, #CloneMe
@TileDl, kNotificationTileWasDownloaded, tileid, %{private}s, tileHeaderParsed, %{public}d, tileType, %{public}d, serverUrl, %{private}s, serverFilename, %{private}s, absoluteLocalFilename, %{private}s
TileCts, coarsecell, registering, interval, %{public}.2f, grace, %{public}.2f
TileCts, coarsecell, request, %{public}d, state, %{public}ld
TileCts, coarsecell, setting, DONE
TileCts, coarsecell, failed, DONE, %{public}ld
TileCts, coarsecell, complete, state, %{public}ld
TileCts, coarsecell, setting, DEFER
TileCts, coarsecell, failed, DEFER, %{public}ld
TILE: getLocationByCellFromTile, searching, sec_key, %016llX, %s
TILE: getLocationByCellFromTile, in tile, accessible, %d, %s
TILE: no lac tile for, %s
TILE: getLocationByCellFromTile, isFound, %d, locationd, %s
TILE: getLocationByCell, index is not available, can't search tiles (locationd launched when device was locked?), fDataProtectionEnabled, %d
TILE: no tiles for, %s
CoarseTile, getLocationByCell, un-supported cell type, %{private}s, #CloneMe
TILE: getLocationByCell, search for LAC
TILE: getLocationByCell, LAC tiles for, %s, are not active
TILE: getLocationByCell, search for LAC, isFound, %d
TileCoarse, clearLocationInformation
{"msg%{public}.0s":"CLCoarseCellTilesManager::removeAllTiles", "event":%{public, location:escape_only}s, "begin_mach":%{public}llu, "end_mach":%{public}llu, "elapsed_s":"%{public}.09f", "type":%{private}d}
TileCoarse, %{public}s, removeAllTiles, size, %{public}lu
@TileList, %{public}s, delete, llsw, %{private}.2lf, %{private}.2lf, all, size, %{public}lu
TILE: removeAllTiles, end, name, %s, size, %lu, unprot size, %lu
TileCoarse, deleteAgedTiles, dispatch, %{public}s
TileCoarse, deleteAgedTiles, start, name, %{public}s, size, %{public}lu
{"msg%{public}.0s":"CLCoarseCellTilesManager::agedTileDeleter", "event":%{public, location:escape_only}s, "begin_mach":%{public}llu, "end_mach":%{public}llu, "elapsed_s":"%{public}.09f", "now_s":"%{public}.09f"}
TILE: deleteAgedTiles, tileDataAge, %.1lf, %.1lf, corrupt, %d, isDelete, %d, tile, %s
@TileList, %{public}s, delete, llsw, %{private}.2lf, %{private}.2lf, %{public}s, size, %{public}lu
TILE: deleteAgedTiles, too many tiles, %lu, tile, %s
@TileList, %{public}s, delete, llsw, %{private}.2lf, %{private}.2lf, limits, size, %{public}lu
TILE: deleteAgedTiles, end, numOfDeletedTiles, %u, remain, %lu, name, %s
{"msg%{public}.0s":"CLCoarseCellTilesManager::agedTileDeleter", "deleted":%{private}u}
@TileList, %{public}s, create, llsw, %{private}.2lf, %{private}.2lf, size, %{public}lu
TILE: tiles, %s, not active
TILE: updating mtime, %d, type, %d, tileid, %s
CoarseTile, Invalid tile id!, #CloneMe
TileCts, coarsecell, state, CHECK_IN
TileCts, coarsecell, state, RUN
TileCts, coarsecell, setting, CONTINUE
TileCts, coarsecell, failed, CONTINUE, %{public}ld
#Warning Cost of match %{public}f exceeds max of %{public}f allowed for prototype %{public}s
#Warning Could not open prototype file
#Warning Error reading magic number or number (%{public}x) does not match expected number (0x%{public}x)
#Warning Error reading number of prototypes
#Warning Error reading name length of prototype %{public}d
#Warning Error reading name of prototype %{public}d
#Warning Error reading rawName length of prototype %{public}d
#Warning Error reading rawName of prototype %{public}d
#Warning Error reading max distance
You are reading an older prototype file.
#Warning Error reading number of accelerometer samples for prototype %{public}d
#Warning Error reading %{public}d accelerometer samples for prototype %{public}d
#Warning Could not initialize prototype instance %{public}d
fLocationState %d state %d
Ear gesture enabled: %d
Ignoring prox: %d
Max prox before motion interval = %f
Max motion before prox interval = %f
Starting ear gesture detection
Setting prox mode to PassiveMonitoring
Stopping ear gesture detection. Setting prox mode to none
Has blanked screen = %d, Is locked = %d
Screen is blanked and device is locked. Stopping gesture detection.
Screen is unblanked or device is not locked. Starting gesture detection if necessary.
endPose,%.2f,%.2f,%.2f,tilt,%.2f,timestamp,%.3f
Failed end pose sanity check. Set state to %s
Sending gesture notification. Matched prototype name, %s
Sending gesture notification. Gesture cancelled due to unlikely end pose, %.2f, %.2f, %.2f
Sending gesture notification. Gesture cancelled due to high dynamics, %.3f, %.3f, %.3f
Readying gesture notification. Ignoring prox
Readying gesture notification. Prox triggered before motion. dt = %.3f
Setting prox mode to PassiveEngaged.
Set timer for %f seconds.
Gesture timer expired. State = %s
Timer fired while in state %s.
Prox timer expired. Setting prox mode to PassiveMonitoring
currentSize is %llu, log msg size is %lu
Log msg size exceeds limit %d, skip loging %lu bytes
Log size exceeded %llu, skip log of %lu bytes
Bytes: construct, name, %s
Bytes: clear, name, %s
Bytes: log, name, %s, m, %s, s, %d, r, %d, t, %d, ts, %d, reachability, %d
StepCount, %f, %f, %d, %f, %f, %u, %f, %f, %f, %f, %d
unified,%s,%0.3f,%s,%u,%s,%u,%s,%s,%0.2f,%s,%0.2f,%s,%0.2f,%s,%0.2f,%s,%s,%0.2f,%s,%0.2f,%s,%0.2f,%s,%u,%s,%s,%0.4f,%s,%0.4f,%s,%0.4f,%s,%0.4f,%s,%0.4f,%s,%u,%s,%0.4f,%s,%0.4f,%s,%0.4f,%s,%0.4f,%s,%0.4f,%s,%0.3f,%s,%0.4f,%s,%0.2f,%s,%u,%s,%0.3f,%s,%0.3f,%s,%d
#Warning Potential StepDistanceFusion error. File a radar if you are not walking/running in place. %s, %f, %s, %u, %s, %u, %s, %f, %s, %f, %s, %f, %s, %f, %s, %f, %s, %f, %s, %d, %s, %f, %s, %f, %s, %f, %s, %f
#Warning Inconsistency found between steps and clock. Ignoring.
action,%d,type,%d
Classifying %lu odometer entries
OdometerQuality,%d,MostRecentOdometerEntry,timestamp,%.3lf,timestampGps,%.3lf,odometer,%.3lf,deltaDist,%.3lf,deltaDistUnc,%.3lf
#Warning Time rolled back! t1,%{public}f,t2,%{public}f
StepCountBuffer lookup time not successful,%0.3f
How can we generate pedometer distance with no time at all?
registering for keyboard updates
#Warning Failed to register for keyboard updates. Could not register for AppleHIDKeyboardEventDriverV2 service kIOFirstMatchNotification and kIOTerminatedNotification.
#Warning Failed to register for keyboard updates. Could not create KeyboardConnectNotificationPort and KeyboardConnectNotificationPort
unregistering for keyboard updates
#Warning stackshot only available on device
StrideCalDb init
Finished insertion startTime %f
insertion startTime %f
Speed,%f,KFactorStd,%0.4f
Median kValue pacebin with rawSpeed %f: %f
#Warning Received unhandled notification, %d
CMFFTProcessor is being cleaned up.  Subsequent calls to CMAccelerometerProcessor::computeFrequencyFeatures will lead to undefined behavior.
{"msg%{public}.0s":"#slv Overriding awareness parameters", "foundParameters":%{public, location:escape_only}@}
#slv telling routined to start visit monitoring
#slv got error from routined: %@
#slv received visit from routined
#slv telling routined to stop visit monitoring
SLV: Telling routined to start visit leeching
SLV: Got error from routined: %{public}s
SLV: Received leeched visit from routined, visit, %@
SLV: Telling routined to stop visit leeching
SLV: Telling routined to start low confidence visit leeching
SLV: Received leeched low confidence visit from routined, visit, %@
SLV: Telling routined to stop low confidence visit leeching
dropping duplicate location, %{private}@
received location, %{private}@
#warning in-memory cache has exceeded threshold of %{public}lu, removing oldest fix
received unhandled notification %{public, location:CLClientManager_Type::Notification}d
received unhandled notification %{public, location:CLLocationProvider_Type::Notification}d
flushing routine data
Location services are disabled; stopping routine data collection
Routine system service disabled; stopping routine data collection
LocationServer received incoming connection
Why didn't we get a connection
{"msg%{public}.0s":"process is not entitled to use CLLocationManagerRoutine", "pid":%{public}d, "executable":%{public, location:escape_only}s}
Connection interrupted
start updating location
stop updating location
#warning locations not delivered %@
start wakeRoutinedTimer
stop wakeRoutinedTimer
wake routined
entering diminished mode; starting data collection
exiting diminished mode; stopping data collection
#scenarioTrigger Telling routined to start monitoring trigger of type, %lu
#scenarioTrigger Got error from routined, %@
#scenarioTrigger Received trigger of type %lu from routined
#scenarioTrigger Telling routined to stop monitoring trigger of type, %lu
start updating predicted applications
stop updating predicted applications
predicted applications not delivered %p
fetch predicted applications at location %{private}@
Fence: delete CLFenceDataDownloadManager
Fence: Adding %{public}ld fences for download
Fence: Adding fence to download, %{private}s
Fence: Adding fence to download, restored fence, %{private}s
Fence: first fence added, enable download timer
Fence: Removing %{public}ld fences for download
Fence: Removing fence from download, [%{private}s]/%{private}s/%{private}s
Fence: last fence removed, disabled download timer
Fence: refreshDataForFence, %{private}s
Fence: Removing all fences for download, fences, %{public}lu
Fence: disable download timer
Fence: avoid download check, isLocationServicesEnabled, %{public}d
Fence: no reachability, download not possbile
Download error too fresh, avoid new downloads, dt, %{private}.1lf
Fence: checkDownloadState, currentQueries, %{private}d
Fence: avoiding more concurrent downloads, %{private}d, max, %{private}d
Fence: already downloading fence, %{private}s
FenceDownloadState, %{private}s, r, %{private}.1lf, age, %{private}.1lf, reachability, %{private}d
Fence: ignoring fence, %s, downloads, %d, max, %d, reachability, %d
Fence: request tile download, %{private}s
Fence: fence, %s, urgent refresh, distance, %.1lf
Fence: Urgent refresh, %{private}s
Fence: fence, %s, is fresh for reachability, %d, age, %.1lf, thresh, %.1lf
Fence: fence, %s, need refresh, %d, age, %.1lf, num %d, %d, isRealtime, %d, isLarge, %d, isUrgentDownload, %d
Fence: request ALS/tile download, %{private}s
#Warning Fence: can't start query, %s, tag, %d
Fence: can't start query
Fence: request tile download, %s
Fence: checkDownloadState, currentNumOfQueries, %d, newNumOfQueries, %d, numOfStartedQueries, %d, nSmall, %d, nLarge, %d
Fence: startQuery, fence, %s, tag, %d
Fence: Not querying nearbys for %s/%s; location services is disabled
Fence: getNumOfPendingQueries, numOfQueries, %u
Fence: done tag, %d, isSuccess, %d, numOfAps, %d, numOfCells, %d
Fence: networkQueryDone, tag, %d, %s, isSuccess, %d
Fence: networkQueryDone, %{private}d, %{private}s, fence, %{private}s, success, %{private}d
Fence: networkQueryDone, newNumOfQueries, %u, isAvoidUpcomingFenceDownloads, %d, doesTagBelongToFence, %d
Fence: notificaiton, %d
#Warning Fence: Got kNotificationQueryResponseError tag %d
Fence: Got kNotificationQueryResponseFinished tag %d
Fence: ignore onFenceDownloadTimer, shutdown?
Fence: onFenceDownloadTimer, since last, %{private}.1lf
Fence: scheduleNextTimer, interval, %.1lf, isLocaationServicesEnabled, %d
Schedule next download timer
Cancel next download timer
Fence: kNotificationReachability, notification, %{private}d, reachability, from, %{private}d, to, %{private}d
Fence: kNotificationMigration
Fence: kNotificationLocationServicesStatus, locationd services, %d
Fence: onBTANotifications, notification, %d
Fence: onBTANotifications, kNotificationConnectionState, realtime, %d, %d, large, %d, %d
Fence: startMonitoringDownloadConditions
Fence: stopMonitoringDownloadConditions
CL: CLFenceDataDownloadManager::onNetworkLocationNotification
{"msg%{public}.0s":"CLFenceDataDownloadManager::onNetworkLocationNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLFenceDataDownloadManager::onStatusNotification
{"msg%{public}.0s":"CLFenceDataDownloadManager::onStatusNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLFenceDataDownloadManager::onManagerNotification
{"msg%{public}.0s":"CLFenceDataDownloadManager::onManagerNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLFenceDataDownloadManager::onBTANotification
{"msg%{public}.0s":"CLFenceDataDownloadManager::onBTANotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLFenceDataDownloadManager::onFenceDownloadTimer
{"msg%{public}.0s":"CLFenceDataDownloadManager::onFenceDownloadTimer", "event":%{public, location:escape_only}s, "this":"%{public}p"}
Fence: Got kNotificationAirplaneMode, airplaneMode, %d, %d
Fence: sMessage, %{public}s, fFenceDatabase is NULL
Fence: Got kNotificationMigration
Fence: onClientNotification, %s
Removing fences for uninstalled app %s
Fence: kNotificationAuthorization, exec, %s, bundleId, %s, bundlePath, %s, clientKey, %s
#Warning Could not retrieve fences from database for client %s
There are no fences for client %s
Fence: kNotificationAuthorization cleaning, %s
Removing fences,%lu, for bundle,%s.
Disabling all fences for denied app %s
Enabling all fences for newly authorized app %s
Adding fences,%lu, for bundle,%s.
#Warning Reset received; sending reset notification
Location services is now %s; sending reset notification
Fence: Location services is now disabled; clearing fence status
Fence: invalidating download date
Reauthorizing clients by triggering fence reset
Fence: notification, kNotificationEncryptedDataAvailability, data.availability, %d, unlockedSinceBoot, from, %d, to, %d, isStartMonitoring, %d
Fence: updateAuthorizedClients, can't add fence before the first unlock
Fence: updateAuthorizedClients, locationServicesEnabled, %d
Fence: checkClientStatus, %s
Fence: addFence, can't add fence before the first unlock
Adding fence, %s
Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Add,1,BundleId,%s,Name,%s,
Fence: removeFence, can't remove fence before the first unlock
Removing fence %s/%s
Fence: removeFences, can't remove fence before the first unlock
Removing all fences for %s
Fence: getAuthorizedFences, no region monitoring before the first unlock
Location services are disabled; no monitored fences
Retrieved %ld fences from database
%s/%s is not authorized; removing from authorized fences list
Fence: getFencesForBundle, no region monitoring before the first unlock
Fence: getAllFencesForBundle, no region monitoring before the first unlock
Fence: isFenceAuthorized, no region monitoring before the first unlock
Fence: isFenceAuthorized, [%s]/%s/%s, isRegistered, %d, isAuthorized, %d
Fence: lastDownloadTimeChanged, no region monitoring before the first unlock
Fence: markDataDownloadInvalid, no region monitoring before the first unlock
Fence: isClientAuthorized, %s, %s, %s, CLClientRegistrationResult, %d
#Warning Empty bundle identifier should be passed in here
Fence: hasMonitoredFences, no region monitoring before the first unlock
%d fences for %s; authorized %d
%s: hasMonitoredFences %d, monitoringAdded %d airplane %d
%s is now a fence client, airplane, %d
%s is no longer a fence client, airplane, %d
Fence: releaseFenceDatabase, fFenceDatabase, %p, fWasUnlockedSinceBoot, %d, reason, %s
CL: CLFenceAuthorizationManager::onClientNotification
{"msg%{public}.0s":"CLFenceAuthorizationManager::onClientNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLFenceAuthorizationManager::onStatusNotification
{"msg%{public}.0s":"CLFenceAuthorizationManager::onStatusNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLFenceAuthorizationManager::onDataProtectionNotification
{"msg%{public}.0s":"CLFenceAuthorizationManager::onDataProtectionNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
Fence: Overriding cell positioning usage to %{private}d
Fence: Overriding WiFi positioning usage to %{private}d
Fence: Overriding GPS positioning usage to %{private}d
Fence: Overriding Pipeline positioning usage to %{private}d
Fence: Overriding continuous positioning usage to %{private}d
Fence: Overriding FenceIssueDelayedTriggers to %{private}d
Fence: fWakeIntervalSeconds, %.1lf
Fence: fDelayedTriggerCountMax, %d
Fence: fDelayedTriggerIntervalSeconds, %.1lf
Fence: fNormalScan, %d
Fence: fLowPriorityScan, %d
Fence: fIsConsolidateTriggersEnabled, %d
Fence: fConsolidatedTriggersTimeInterval, %.1lf
Fence: fIsScheduleContTrackingWakes, %d
Fence: fIsTriggerOnTether, %d
Fence: fIsUseActivityAlarm, %d, activityAlarmAvailable, %d
Fence: failed to allocate, fConsolidatedTrigger
Fence: can't check airplane mode
Fence: startMonitoringFences, fences, %{public}lu, status, %{private}s
Fence: restartMonitoringForAllFences
Fence: stopMonitoringFences, fences, %{public}lu
Fence: startMonitoring, fence, %{private}s
Fence: registerForNotification, location, numOfFencesOld, %{private}lu, numOfFenceNew, %{private}lu
Fence: unregisterForNotification, location, numOfFencesOld, %{private}lu, numOfFenceNew, %{private}lu
Fence: stopMonitoringNow, fence, %{private}s
Fence: stopMonitoringNow, no such fence, %{private}s
Fence: startMonitoringNow, fence, %{private}s, status, %{private}s
Fence: startMonitoringNow, fence, %{private}s, is already in fMonitoredFences
Fence: crirital error!
Fence: Location services is disabled; not starting monitoring for %{private}s/%{private}s
Fence: startMonitoringNow, %{private}s
Fence: filtered fLastLocation, %{private}s
Fence: Seeding fence %s/%s with location <%+.8f,%+.8f> acc %.2f timestamp %.2f lifespan %.1lf
Fence: request scan, current location, %{private}s
Fence: Started monitoring fence, %s
Fence: Started monitoring monitoringStatus, %s
Fence: Started monitoring fence %s/%s (<%+.8f,%+.8f>, radius %.3f, eff radius %.3f, accuracy %.3f, active tech %d)
Fence: fence is already monitored, %{private}s
Fence: stopMonitoring, %{private}s
Fence: Got monitoring data changed for %{private}s/%{private}s
Fence: location services is disabled, no tech available
Fence: fence, %s, requiredTech, %s, fine, %d, large, %d
Fence: adjustTechLevel, fence, %s, newOptions, %s, availableTech, %s, statusChanged, %d
Fence: stopOptions, %s
Fence: Stopping tech 0x%x (active is 0x%x) for %s/%s
Fence: startOptions, %s
Fence: Starting tech 0x%x (active is 0x%x) for %s/%s
Fence: fence, %s, newTech, %s, status, %s
Fence: Tech level for, %s, adjusted to, 0x%x, %s
Fence: handleLocation, location, %{private}s, services, %{private}d, airplane, %{private}d, connected, %{private}d
Fence: handleLocation, Ignoring cell or LAC position as per defaults
Fence: handleLocation, Ignoring WiFi position as per defaults
Fence: handleLocation, Ignoring GPS position as per defaults
Fence: handleLocation, Ignoring Pipeline position as per defaults
Fence: cancelLocationWatchdog, num fences, %lu, location type, %s
Fence: Handling location, %{private}+.8f, %{private}+.8f, acc, %{private}.2f, timestamp, %{private}.1lf
Fence: dispatch, handleLocation, fence, %s, monitoringStarted, %d, slc, %d, distanceFromPrevHandledLocaiton, %.1lf
Fence: ignore location update, kFenceMonitorFarFarAway, %lf
Fence: ignore location update, locationChangedSignificantly, %d
Fence: request a scan to comfirm cell location, fences, %lu
Fence: cancelLocationWatchdog, wifi off, minDistance, %lf
Fence: requesting a scan, numOfFencesNeedScan, %d, minDistanceToFence, %.1lf
Fence: avoid a scan, numOfFencesNeedScan, %d, minDistanceToFence, %.1lf
Fence: Dispatch continuous engagement
#Warning Fence: Attempt to handle location <%+.8f,%+.8f> acc %.2f for non-present fence %s/%s
Fence: %s, filtering unwanted, %s, nofitication, not interested in entry
Fence: %s, filtering unwanted, %s, nofitication, not interested in exit
Fence: %s, filtering unwanted, %s, nofitication, has not achieved settled state yet
Fence: %s, filtering unwanted, %s, nofitication, never achieved settled state for entry notification
Fence: %s, filtering unwanted, %s, nofitication, not interested in conservative entry
Fence: fenceUpdate, %s, bundle, %s, type, %-16s, loc, %12.7lf, %12.7lf, acc, %4.0lf, distance, %9.0lf, tech, %4s%s, change, %d, cont, %d, fence, %12.8lf, %12.8lf, %.1lf, %.1lf, sCount, %d, %d, trig, %d, %d, sinceLastLoc, %.1lf, events, 0x%08x, status, %-10s => %-10s, settled state, %s ==> %s, cantShiftButNeedTo, %d
Fence: Adjusting technologies based on, %+.8f,%+.8f, acc, %.2f, distance, %.1lf
Fence: handleNoWifiApsArea, recalculated, %d, fMinDistanceToFence, %.1lf, fMinDistanceToFenceTimestamp, %.1lf
Fence: postpone tracking timer
Fence: Ignoring expired location <%+.8f, %.8f>, acc %.2f, timestamp %.2f, lifespan %.2f
#Warning Fence: Got unknown location notification %d
#Warning Fence: Cell monitoring is disabled; ignoring cell monitor notification %d
Fence: Got kNotificationTriggerReceived from cell
Fence: Got kNotificationDelayTriggerReceived from cell
Fence: Got cell kNotificationMonitoringAvailable, available, %d
#Warning Got unknown cell monitor notification %d
#Warning WiFi monitoring is disabled; ignoring cell monitor notification %d
Fence: Got kNotificationTriggerReceived from WIFI, cancelDelayedDeAssociationTrigger, %d
Fence: Got kNotificationDelayTriggerReceived from WIFI
Fence: Got WiFi kNotificationMonitoringAvailable, available, %d
Fence: Got kNotificationReCheckContinuousEngagement
Fence: Got kNotificationNoLocationAfterScan
Fence: Got kNotificationFenceDownloadRequest
#Warning Fence: Got unknown WiFi monitor notification %d
Fence: engageContinuousTrackingIfNeeded, now, %d, FenceMonitoWifi, %d, kNotoficationLocationChanged, %d, wifiTracking, %d, isLocationEnabled, %d, isWifiPowered , %d
Fence: location services disabled, no continous tracking, %d, isAirplaneMode, %d, cConnected, %d
Fence: FenceMonitorWifi needs tracking
Fence: SLC wants to track the current location
Fence: numOfMonitoredFences, %d, simple, enable cont tracking
Fence: engageContinuousTrackingIfNeeded, isEngageContinousTracking, %d, numOfMonitoredFences, %d
Fence: engageContinuousTrackingIfNeeded, timeToNextTimer, %lf
#Warning Unhandled notification %d
Fence: Got kNotificationAirplaneMode, airplaneMode, %{public}d, %{public}d, %{public}d
Fence: invalidate location watchdog
Fence: Got kNotificationBattery, level, %{private}lf, charged, %{private}d, connected, %{private}d, wasConnected, %{private}d
Fence: tether triggers are disabled
#Warning Fence: unknown notification, %d
Fence: cached isWifiPowered, %d, isLocationEnabled, %d, numOfFences, %lu, notificaiton, %d, fIsWaitingForLocationCount, %d, fScanRetryCounter, %d, reachability, %d
scan result, count, wait, %{public}d, retry, %{public}d, error
#Warning Fence: monitor, got kNotificationScanError
Fence: monitor, got kNotificationScan, scanResultVector, %{private}lu, scanTimestamp, %{private}.1lf, age, %{private}.1lf
#Warning Fence: monitor, got unhandled, %d
Fence: no reachability, expedite watchdog, %.1lf
Fence: no urgent watchdog, GPS client, %p, urgentWatchdogActivation, %.1lf
Fence: startScan, requesting a scan due to an error / empty scan, fScanRetryCounter, %d
Fence: expedite location watchdog due to empty / error scan , %d, %d, urgentWatchdogActivation, %.1lf
Fence: cached isWifiPowered, %{public}d, isLocationEnabled, %{public}d, numOfFences, %{public}lu, notification, %{public}d, wait, %{public}d, count, %{public}d, reachability, %{public}d
Fence: Got kNotificationPower, isWifiPowered, %{public}d
Fence: triggerReceived, reason, %{private}s, schedule a consolidated trigger, %{private}p, fIsConsolidatedTriggerPending, %{private}d, fConsolidatedTriggersTimeInterval, %{private}.2lf, isLocationWatchdogNeeded, %{private}d, %{private}d
Fence: triggerReceivedNow, isWifiPowered, %{public}d, isLocationEnabled, %{public}d, numOfFences, %{public}lu, airplane, %{public}d, connected, %{private}d, watchdogNeeded, %{private}d, minDist, %{private}.1lf, %{private}.1lf, minDistNextWake, %{private}.1lf
Fence: triggerReceivedNow, isWifiPowered, %d, isLocationEnabled, %d, numOfFences, %lu, airplane, %d, fIsLocationWatchdogNeeded, %d, fMinDistanceToFence, %.1lf, %.1lf, minDistanceToFencesOnNextWake, %.1lf
Fence: Trigger received; performing WiFi scan, minDistanceToFence, %.1lf
Fence: ignoring trigger event, isWifiPowered, %d, locationServicesEnabled, %d, airplane, %d, cConnected, %d, numOfFences, %zu, fMinDistanceToFence, %.1lf, %.1lf
Fence: Cannot monitor %{public}s/%{private}s because the radius is too large, suggesting, %{private}.1lf
Fence: last watchdog fired, %.1lf, ago, watchdogInterval, %1lf
need a scan, count, %{public}d, %{public}d, lwatchdog, %{private}.1lf, interval, %{private}.1lf, needWatchdog, %{public}d
Fence: startScan, type, %d, requesting a scan, %.1lf, %.1lf, since last scan, watchdog armed in, %.1lf, at, %.1lf, numOfFences, %lu, fIsWaitingForLocationCount, %d, isWifiPowered, %d, fScanRetryCounter, %d, airplane, %d, cConnected, %d
Fence: startScan, requesting a receovery scan
Fence: scheduleLocationWatchdog, at %{private}.1lf, in, %{private}.1lf, seconds
Fence: scheduleLocationWatchdog, ignore, shutdown?
Fence: loc watchdog cancel, count, %{public}d, %{public}d, client, %{public}p
Fence: cancelLocationWatchdog
Fence: cancelLocationWatchdog, ignore, shutdown?
loc watchdog expired, count, %{public}d, %{public}d
Fence: onLocationWatchdogExpired, since last, %.1lf, isLocationEnabled, %d, last scan, %.1lf, fIsWaitingForLocationCount, %d, sinceLastGpsSession, %.1lf, %.1lf, sinceLastContTimer, %.1lf, %.1lf, fScanRetryCounter, %d
Fence: startScan, fIsWaitingForLocationCount, %d, request one more scan, next date, %.1lf, watchDogInterval, %.1lf
Fence: onLocationWatchdogExpired, increment fIsWaitingForLocationCount, %d
Fence: onDelayedTriggerTimer, sleep period, %.1lf, isLocationEnabled, %d, count, %d, %d, sinceLastTrigger, %.1lf
Fence: onDelayedTriggerTimer, trigger already processed, sinceLastTrigger, %.1lf
Fence: onDeAssTriggerTimer, sleep period, %.1lf, isLocationEnabled, %d, count, %d, %d, sinceLastTrigger, %.1lf
Fence: onDeAssTriggerTimer, trigger already processed, sinceLastTrigger, %.1lf
Fence: onContinousTrackingTimer, sleep period, %.1lf, isLocationEnabled, %d, sinceLastTrigger, %.1lf
Fence: onContinousTrackingTimer, trigger already processed, sinceLastTrigger, %.1lf
Fence: CLFenceMonitor, shutdown
Fence: where is my timer?
Fence: ignore, onConsolidatedTrigger, shutdown?
Fence: onConsolidatedTrigger, calling triggerReceivedNow
Fence: requestWifiLocationUpdate, reason, %s
Fence: request update, reason, %{private}s
Fence: requestRegionState, %{private}s/%{private}s
Fence: requestRegionState, %{public}s/%{public}s, NOT FOUND
Fence: requestRegionState, %s/%s, currentState, %d, %s
Fence: createActivityAlarm, %{private}s, %{private}p, fIsUseActivityAlarm, %{private}d
Fence: activityAlarmHandler, %{private}p, %{private}s, trigger, %{private}d
Fence: createActivityAlarm, %s, created, %p, trigger, %d
Fence: releaseActivityAlarm, %{private}s, %{private}p
Fence: start monitoring scenario trigger settled
Fence: stop monitoring scenario trigger settled
Fence: received scenario trigger, %{private}s
Fence: settled timer expired
Fence: dispatch, handleSettled, fence, %s, monitoringStarted, %d, monitoringSettled, %d
Fence: unregister gps client, %{private}p
CL: CLFenceMonitor::onBluetoothNotification
{"msg%{public}.0s":"CLFenceMonitor::onBluetoothNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLFenceMonitor::onLocationNotification
{"msg%{public}.0s":"CLFenceMonitor::onLocationNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLFenceMonitor::onCellMonitorNotification
{"msg%{public}.0s":"CLFenceMonitor::onCellMonitorNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLFenceMonitor::onWifiMonitorNotification
{"msg%{public}.0s":"CLFenceMonitor::onWifiMonitorNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLFenceMonitor::onWifiNotificationScan
{"msg%{public}.0s":"CLFenceMonitor::onWifiNotificationScan", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLFenceMonitor::onWifiNotificationState
{"msg%{public}.0s":"CLFenceMonitor::onWifiNotificationState", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLFenceMonitor::onStatusNotification
{"msg%{public}.0s":"CLFenceMonitor::onStatusNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLFenceMonitor::onDelayedTriggerTimer
{"msg%{public}.0s":"CLFenceMonitor::onDelayedTriggerTimer", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLFenceMonitor::onDeAssTriggerTimer
{"msg%{public}.0s":"CLFenceMonitor::onDeAssTriggerTimer", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLFenceMonitor::onContinousTrackingTimer
{"msg%{public}.0s":"CLFenceMonitor::onContinousTrackingTimer", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLFenceMonitor::onLocationWatchdogExpired
{"msg%{public}.0s":"CLFenceMonitor::onLocationWatchdogExpired", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLFenceMonitor::onSettledTimerExpired
{"msg%{public}.0s":"CLFenceMonitor::onSettledTimerExpired", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLFenceMonitor::onConsolidatedTrigger
{"msg%{public}.0s":"CLFenceMonitor::onConsolidatedTrigger", "event":%{public, location:escape_only}s, "this":"%{public}p"}
Performing WiFi scan on system wake
WIFI_LOC: fIsUseNetworkLocationProvider = %d
#Warning Fence: failed to getAssociatedNetwork
Fence: failed to determine airplane mode
Fence: CLFenceMonitorWifi, shutdown
Fence: airplane mode is now, %d, was, %d
Fence: Starting to monitor %{private}s/%{private}s for %{private}s
Fence: Stopping monitoring for %{private}s/%{private}s
Fence: Got monitoring data changed for %{private}s/%{private}s; recalculating
Fence: isRecalculate, %{private}d, fIsRecalculationPending, %{private}d, sinceLastRecalculationTrigger, %{private}.1lf
Fence: power assertion no longer needed
Fence: recalculate, take power assertion
Fence: ignore recalculation, shut down?
Fence: resetConsecutiveExits start, %.1lf, count, %d
Fence: ignoring recalculateNow, shut down?
Fence: Recalculating monitored WiFis for %{private}ld monitored fences
Fence: Visible APs are stale (from %{private}.2f), not using for fence calculation
Fence: Last visible APs are stale (from %{private}.2f), not using for fence calculation
Fence: Including %{private}ld visible APs in fence calculation (from %{private}.2f)
Fence: avoid fence calculateAPsForFences, numOfFences, %{private}lu, airplane, %{public}d
Fence: isWifiTrackingAvailable is false
Fence: no visible APs, need continuous tracking
Fence: fIsContinuousMonitoringNeeded, %d
Fence: exit sequence is too long, reset, sinceSequenceStart, %.1lf, %.1lf
Fence: countUpdate, countUpdated, %d, sinceSequenceStart, %6.1lf, sequenceThresh, %6.1lf, sequenceCount, %3d, newCount, %3d, airplane, %d, e, %lu, x, %lu, v, %lu
Fence: Setting %{private}ld background scan entry networks
Fence: Setting %{private}ld background scan exit networks
Fence: recalculate, release power assertion
Fence: sending kNotificationReCheckContinuousEngagement
Fence: Device woke; sending trigger
Fence: WiFi just lost (from %{private}d to %{private}d); sending trigger, aboutToSleep, %{private}d, recentlyWoke, %{private}d,
Fence: kNotificationReachability, aboutToSleep, request a delayed trigger as well, sinceLastDelayedTrigger, %f, isDeAssTriggerWanted, %d
Fence: about to sleep or recently woke without WoW, ignoring, kNotificationReachability
Fence: WiFi just connected (from %{private}d to %{private}d); sending trigger, aboutToSleep, %{private}d, recentlyWoke, %{private}d,
Fence: take power assertion, reason, %{private}s, airplane, %{private}d
Fence: power assertion not needed, reason, %{private}s, airplane, %{private}d, isMonitoringFences, %{private}d
CL: CLFenceMonitorWifi::onStatusNotification
{"msg%{public}.0s":"CLFenceMonitorWifi::onStatusNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLFenceMonitorWifi::onWifiNotificationState
{"msg%{public}.0s":"CLFenceMonitorWifi::onWifiNotificationState", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLFenceMonitorWifi::onWifiNotificationScan
{"msg%{public}.0s":"CLFenceMonitorWifi::onWifiNotificationScan", "event":%{public, location:escape_only}s, "this":"%{public}p"}
{"msg%{public}.0s":"invalid db pointer", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
#sqlitetransaction, begin exclusive transaction failed
#sqlitetransaction, commit failed
rollback #sqlitetransaction
#sqlitetransaction, rollback transaction failed
{"msg%{public}.0s":"#sqlitetransaction error", "path":%{public, location:escape_only}s, "rc":%{public, location:SqliteResult}.*P, "errmsg":%{private, location:escape_only}s, "autocommit":%{public}d}
{"msg%{public}.0s":"location services states are not consistent", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
CLSE, Client registered for notification %{public}d
CLSE, Client unregistered for notification %{public}d
CLSE,fromSignalEnv,%{public}d,toSignalEnv,%{public}d
CLSE,download request,url,%{public}s,storeTo,%{public}s,retryInterval,%{public}.1lf
CLSE,could not setUpdateSource AVL file updater
CLSE,could not setUpdateRate AVl file updater
CLSE,download status,NONE
CLSE,download status,STARTED
CLSE,download status,COMPLETED
CLSE,downloaded,%{public}s
#Warning,Cannot set protection class for CLSE downloaded file,%{public}s
CLSE,decompressed,%{public}s,to,%{public}s
#Warning,Cannot set protection class for CLSE decompressed file,%{public}s
CLSE,download status,FAILED
CLSE,download request failed,%{public}s,retryMultiplier,%{public}d
CLSE,download status,%{public}d
CL: CLSignalEnvironmentProvider::onSignalEnvironmentUpdated
{"msg%{public}.0s":"CLSignalEnvironmentProvider::onSignalEnvironmentUpdated", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLSignalEnvironmentProvider::onLocationNotification
{"msg%{public}.0s":"CLSignalEnvironmentProvider::onLocationNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
{"msg%{public}.0s":"indeterminate wifi power state", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
TlurError, ScanErrorBusy, %s, retry in, %lld
@WifiTimer, motion, update, %{public}d, interval, %{public}d
@WifiTimer, locreq, update, %{public}d, %{public}d, interval, %{public}d
Run, WorkRate, %f, distance(m), %f, duration(s), %f, mets, %f, fMetsScaling, %f, endTime, %f, currentPace, %f, isStroller, %d, metsStrollerCorrected, %f
Run, WorkRate, Grade type, %d, vertical speed %f, interval %f, workrate %f, mets %f, mets + grade %f, percent grade %f
Run, WorkRate, energy, %.1f,mets from intensity, %.1f
Run,fitness machine,computeTime,%.3f,startTime,%.3f,wr,%f,vertSpeed,%f,mets,%f
{"msg%{public}.0s":"#Stream Resending motion alarm request"}
{"msg%{public}.0s":"#Stream We haven't received an update in a while"}
{"msg%{public}.0s":"#Stream Notifying motion alarm", "state":%{public, location:CLLocationProvider_Type::MotionDetected}lld}
{"msg%{public}.0s":"#Stream enabling motion alarm"}
{"msg%{public}.0s":"#Stream disabling motion alarm"}
{"msg%{public}.0s":"#Stream Motion alarm update without any state"}
@ClxCell, supported, %{public}d
CellLoc, fCellShowUIUnknownCell, %{public}d
CellLoc, fIsUseNetworkLocationProvider, %{public}d
CellLoc, fIsUseTilesManager, %{public}d
CellLoc, Location Provider %{public}s set to %{public}d
@ClxCell, enabled, %{public}d
CellLoc, delete CLUnifiedCellLocationProvider
CellLoc, registerForNotificationInternal, notification, %{public}d
CellLoc, unregisterForNotificationInternal, notification, %{public}d
CellLoc, shutdown
CellLoc, onDpcSource
CellLoc, calling onDpcSource, refreshCellMonitor
CellLoc, SHOW CELL UI : (%{private}s) <%{private}lf, %{private}lf> acc %{public}lf
CellLoc, SHOW UNKNOWN CELL UI, %{private}s
CellLoc, refresh cell state
@CellFlow, refresh, %{public}s
@CellFlow, outcome, %{public}s
CellLoc, getCellFromTilesManager, fIsUseTilesManager, is false
CellLoc, getCellFromTilesManager, isFound, %{public}d, cell, %{private}s, location, %{private}s
@ClxCell, Fix, 0, ll, N/A, Failed
CellLoc, TelephonyService is ready
CellLoc, not registered, cannot deduce cell fix, #CloneMe
CellLoc, current cell, %{private}s, isUse, %{public}d, index, %{public}zu
CellLoc, onCompanionNotification, notification, %{public}d, Tiles
CellLoc, received %{public}s
CellLoc, location services are disabled, ignore scan result
CellLoc, disconnected from CT, cannot deduce cell fix, #CloneMe
CellLoc, unknown CT notification %{public}s, #CloneMe
CellLoc, refresh cell monitor
CellLoc, ignoring, onDelayedCellPropagationTimer, timer, %{public}p, %{public}p
CellLoc, call refreshCellState
CellLoc, onDelayedCellPropagationTimer,since last trigger,%{public}.1lf,nextWakeDate,%{public}.1lf
CellLoc, cell queries failed, #CloneMe
CellLoc, recalculating current cell location, by waking the DPC, %{public}p
CellLoc, no client to report to
CL: CLUnifiedCellLocationProvider::onStatusNotification
{"msg%{public}.0s":"CLUnifiedCellLocationProvider::onStatusNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLUnifiedCellLocationProvider::onTelephonyNotification
{"msg%{public}.0s":"CLUnifiedCellLocationProvider::onTelephonyNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLUnifiedCellLocationProvider::onNetworkLocationNotification
{"msg%{public}.0s":"CLUnifiedCellLocationProvider::onNetworkLocationNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLUnifiedCellLocationProvider::onClientNotification
{"msg%{public}.0s":"CLUnifiedCellLocationProvider::onClientNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLUnifiedCellLocationProvider::onCompanionNotification
{"msg%{public}.0s":"CLUnifiedCellLocationProvider::onCompanionNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLUnifiedCellLocationProvider::onTileDownloadNotification
{"msg%{public}.0s":"CLUnifiedCellLocationProvider::onTileDownloadNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLUnifiedCellLocationProvider::onDpcSource
{"msg%{public}.0s":"CLUnifiedCellLocationProvider::onDpcSource", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLUnifiedCellLocationProvider::onDelayedCellPropagationTimer
{"msg%{public}.0s":"CLUnifiedCellLocationProvider::onDelayedCellPropagationTimer", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CELL_LOC: failed to bind %s
CELL_CEN: adding cell, %s, rowid, %lld
moving,%d,now,%f
CLSensorCalibrationStaticDetectorAccel::fire()
RawAccelerometer,x,%20.20f,y,%20.20f,z,%20.20f,timestamp,%20.20f
FilteredAccelerometer,x,%20.20f,y,%20.20f,z,%20.20f,timestamp,%20.20f,readyX,%d
Variance,x,%20.20f,y,%20.20f,z,%20.20f,timestamp,%20.20f,Moving,%d
CL: CLSensorCalibrationStaticDetectorAccel::onAccelerometerData
{"msg%{public}.0s":"CLSensorCalibrationStaticDetectorAccel::onAccelerometerData", "event":%{public, location:escape_only}s, "this":"%{public}p"}
(stddev samples) w/ turn, %f, %d, w/o turn, %f, %d, threshold, %f, %f
Turn, %s, Time, %f, Total Strokes, %d, Current Strokes, %d, Style, %d, Result, %d
Converged,freestyle,%d,backstroke,%d,breaststroke,%d,butterfly,%d
searchMedian, %f, historicalDistributionCount, %lu, historicalMatchingDistributionCount, %lu
distribution,localLimits,min,%f,max,%f
distribution,historicalSessionLimits,min,%d,max,%f
distribution,lastGood-populationLimits,min,%d,max,%f
lap detected with one or less strokes,strokes,%lu,lapType,%d
az_prev is not initialized before usage
#Warning, PLOS: invalid outside offset %{public}f
#Warning, PLOS: bad poly, bad!
#Warning, PLOS: invalid step size %{public}f
#Warning, PLOS: miniscule edge!
#Warning, PLOS: invalid distance %{public}F
#Warning, PLOS: invalid polygon size %{public}d
#Warning, PLOS: edge too small!
TlurState, ScanNotify, %s, aps, %lu, state, %d, tte, %.1f
TlurState, unexpected emergency state, onWifiNotification, %d, WARNING
TlurState, Skip Process, %s
@WifiFlow, scanusage, aps, %{public}lu, type, %{public}s, lastscan, %{public}llu, use, %{public}d, bystander+, %{public}d, spectator+, %{public}d, reqtype, %{public}s
#warning, scan error event, resetting current location update request
TlurError, ScanErrorBusy, %s
TlurEmer, ToggleOn, tte, %.1f
#pre-wifi-position-calculation-state-update, als request results indicate failure to request
{"msg%{public}.0s":"#pre-wifi-position-calculation-state-update, als request results indicate success", "tag":%{public}d, "requestType":%{public, location:escape_only}s}
TlurEmer, unexpected emergency state, onNetworkNotification, %d, WARNING
TlurState, AlsReply, aps, %d, tag, %d, state, %d, queryType, %d, tte, %.1f
@WifiFlow, locreq, %{public}s, %{public}s, current, %{public}s
TlurEmer, StateChange, new, %d, prev, %d, now, %d
TlurEmer, Wifi, RequestOn
TlurEmer, EmergencyOff, ttff, %.1f, session, %.1f
TlurEmer, Wifi, RequestOff
WifiTimer, %{public}d, motion, %{public}d, assoc, %{public}d
@WifiFlow, nextscan, %{public}d, emer, %{public}d, unassoc, %{public}d, movingap, %{public}d, assoc, %{public}d, motion, %{public}s
remove old APs from scan history, count, %{public}ld, max_secs, %{public}lld
Unable to persist swim distribution
Unable to purge old records.
Unable to get the number of distributions
Unable to delete all distributions!
CLSwimPersistence,getEntries,unable to get entries,numberOfRecords,%d
CLSwimPersistence,unable to get entries for uuid %{public}s
CLSwimPersistence, querySince, failed to bind id in query, %{public}llu
CLSwimPersistence, aggregateRecordsInternal, unable to purge records.
CLSwimPersistance, unable to insert swim record.
#Warning Database isn't valid; not perfomring integrity check
performIntegrityCheck took %f seconds.
Database doesn't exist yet; not performing integrity check
Failed to close connection after integrity check: %{public}d
Failed to open database '%{public}s' after restoring from backup: %{public}d
#Notice Killing locationd to resolve corrupted database.
#Warning Database isn't valid; not dropping obsolete tables
Couldn't setSecureDeleteEnabled(%{public}d) for old database!
Couldn't vacuum old database!
Found obsolete table, deleting
Database not valid; unable to drop obsolete tables
MicroLocation harvest was cancelled
Cross Training, Compendium METS, METS, %f
Creating managed location database %s (count triggers %d, use cache %d)
Data protection is enabled, creating in-memory database for table %s
Persistent database failed to create despite data protection not enabled. Falling back to in-memory database
{"msg%{public}.0s":"#Stream Source now available", "source":%{public, location:CLStreamingAwareLocationProviderStateMachine::LocationSource}lld}
{"msg%{public}.0s":"#Stream Source no longer available", "source":%{public, location:CLStreamingAwareLocationProviderStateMachine::LocationSource}lld}
{"msg%{public}.0s":"#Stream Client interest changed", "notification":%{public, location:CLLocationProvider_Type::Notification}lld, "is interested":%{public}d}
{"msg%{public}.0s":"#Stream Stopping location for source", "source":%{public, location:CLStreamingAwareLocationProviderStateMachine::LocationSource}lld}
{"msg%{public}.0s":"#Stream State is out of sync with registrations"}
{"msg%{public}.0s":"#Stream Local GPS is forbidden right now.  Downgrading to wifi accuracy"}
{"msg%{public}.0s":"#Stream Starting location for source", "source":%{public, location:CLStreamingAwareLocationProviderStateMachine::LocationSource}lld, "notification":%{public, location:CLLocationProvider_Type::Notification}lld, "include motion":%{public}d}
client of CLDataProtectionManager is requesting a re-broadcast of data availability
Data availability is now %d
device unlocked since boot, %d
Using the manufacturer specific parameters (%s): %s
Using the default parameters: %s
#Warning Using the hardcoded parameters
Invalid parameters received:
%{public}s
Took, inc ref, %d, %s, thisReason, %s
%s, %s
Release power assertion, %s, heldFor, %.2lf
Release power assertion, dec ref, %d, %s
Got client notification
Delay timer fired
Posting status bar icon visibility change notification
Clearing status bar icon enabled states
%s is in state '%s'.
Notify delay of %.2fs for state '%s'; upgrading icon state
Waiting %.2f seconds for location indicator to change states
iconStateFromClients, overallIconState, '%s', overallNotifyDelay, %.4lf
E911 is active; forcing icon on.
#Notice Location icon should now be in state '%{public}s'
CL: CLStatusBarIconManager::onClientNotification
{"msg%{public}.0s":"CLStatusBarIconManager::onClientNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLStatusBarIconManager::onDelayTimer
{"msg%{public}.0s":"CLStatusBarIconManager::onDelayTimer", "event":%{public, location:escape_only}s, "this":"%{public}p"}
Workout, pool length %f for workout is too small and may lead to undefined behavior.
{"msg%{public}.0s":"#Stream State machine timer fired"}
{"msg%{public}.0s":"#Stream cached location", "found":%{public}d}
{"msg%{public}.0s":"#Stream notifying location", "client":%{public, location:escape_only}s, "accuracy":"%{public}f", "type":%{public, location:CLLocationType}lld, "origin device":%{public, location:CLClientLocationOriginDevice}lld}
{"msg%{public}.0s":"#Stream notifying", "client":%{public, location:escape_only}s, "notification":%{public, location:CLLocationProvider_Type::Notification}lld}
{"msg%{public}.0s":"#Stream Received notification", "notification":%{public, location:CLLocationProvider_Type::Notification}lld}
{"msg%{public}.0s":"#Stream Received motion mediator notification", "notification":%{public}d}
{"msg%{public}.0s":"#Stream Received step count notification", "notification":%{public}d}
{"msg%{public}.0s":"#Stream Foreground assertion taken", "client":%{public, location:escape_only}s, "accuracy":"%{public}f"}
{"msg%{public}.0s":"#Stream Foreground assertion released", "client":%{public, location:escape_only}s}
CL: CLStreamingAwareLocationProvider::onStepCountNotification
{"msg%{public}.0s":"CLStreamingAwareLocationProvider::onStepCountNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLStreamingAwareLocationProvider::onLocalLocationNotification
{"msg%{public}.0s":"CLStreamingAwareLocationProvider::onLocalLocationNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLStreamingAwareLocationProvider::onStreamedLocationNotification
{"msg%{public}.0s":"CLStreamingAwareLocationProvider::onStreamedLocationNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLStreamingAwareLocationProvider::onMotionStateMediatorNotification
{"msg%{public}.0s":"CLStreamingAwareLocationProvider::onMotionStateMediatorNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
{"msg%{public}.0s":"#Stream Invalid location source", "source":%{public}d, "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
Turning on step count notifications
Turning off step count notifications
TILE: beginSeries
TILE: endSeries, size, %lu
TILE: endSeries, checking tile, count, %u,  localLocation, %14.8lf, %14.8lf
TILES: requestDownload, %.8f, %.8f
@WifiAps, als, %{public}lu, isNearby, %{public}d
TILE: macAddressResolved, invalid hash value, %s
attempting to create service location provider with NULL service name
{"msg%{public}.0s":"Can't set the sqlite lookaside buffers size to 64K", "rc":%{public, location:SqliteResult}.*P}
{"msg%{public}.0s":"sqlite3_trace", "query":%{private, location:escape_only}s}
{"msg%{public}.0s":"sqlite3_profile", "db_ptr":"%{public}p", "db_name":%{public, location:escape_only}s, "query":%{private, location:escape_only}s, "elapsed_ns":%{public}llu, "queue":%{public, location:escape_only}s}
Attempted to open an encrypted database
{"msg%{public}.0s":"openDatabase", "rc":%{public, location:SqliteResult}.*P, "path":%{public, location:escape_only}s}
{"msg%{public}.0s":"pragma page_size = 4096", "rc":%{public, location:SqliteResult}.*P}
{"msg%{public}.0s":"pragma journal_mode=WAL", "rc":%{public, location:SqliteResult}.*P}
{"msg%{public}.0s":"pragma secure_delete", "useSecureDelete":%{public}hhd, "rc":%{public, location:SqliteResult}.*P}
{"msg%{public}.0s":"pragma cache_size = 5", "rc":%{public, location:SqliteResult}.*P}
{"msg%{public}.0s":"pragma cache_size = 100", "rc":%{public, location:SqliteResult}.*P}
{"msg%{public}.0s":"pragma cache_spill = 1000", "rc":%{public, location:SqliteResult}.*P}
{"msg%{public}.0s":"pragma recursive_triggers = true", "rc":%{public, location:SqliteResult}.*P}
{"msg%{public}.0s":"Failed to enable extended result codes", "rc":%{public, location:SqliteResult}.*P}
{"msg%{public}.0s":"Failed to close partially opened database", "rc":%{public, location:SqliteResult}.*P}
{"msg%{public}.0s":"Opening database", "path":%{public, location:escape_only}s}
{"msg%{public}.0s":"openDatabase failed to open a connection and then to clean up after itself"}
{"msg%{public}.0s":"Reference count increased", "path":%{public, location:escape_only}s, "referenceCount":%{public}d}
{"msg%{public}.0s":"Reference count decreased", "path":%{public, location:escape_only}s, "referenceCount":%{public}d}
{"msg%{public}.0s":"Destroying database", "path":%{public, location:escape_only}s}
Pedestrian, Using %s model
{"msg%{public}.0s":"CLCompass7 requires device motion service", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
Received message,type,%d,size,%lu
#Warning Error deserializing session override: %s
#Warning error serializing Odometer(GPS) entry
#Warning error serializing Odometer(Elevation) entry
#Warning error serializing Odometer(Coarse Elevation) entry
Time to the last received message from Watch is %lf. Lost connection to Watch.
coarse elevation src,enable,%d,elevationSpectator,%d,fitnessTracking,%d
CL: CLCompanionNotifierCompanion::onOdometerNotification
{"msg%{public}.0s":"CLCompanionNotifierCompanion::onOdometerNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
%s ear gesture
hwType, %d
Device should not have instantiated this.
Removing client %p
Unknown client instance %p
Adding client %p with priority %d
Registering for ear gesture notifications
Unregistering for ear gesture notifications
Ear Gesture EnabledForTopClient: %d (%s)
Dispatching ear gesture to instance %p from prototype %s
%.1lf,DeadReckoning,%.2lf,fLastPASCDVelocityNotificationTime,%.2lf,fLastAccessoryLocation,%.2lf,fLastGPSLocationTime,%.2lf,fLastGPSPropagationTime,%.2lf
%.1lf,DeadReckoning,%s,%s,time,%.1lf,machCont,%.1lf,%{private}.8lf,%{private}.8lf
Calisthenics (HIIT), METS, %f, %d
starting metric session (CompassSession) for %s
ending metric session (CompassSession) for %s
submitting metric session (CompassSession) for %s
Accessory,bad checksum for NMEA sentence '%{public}s' - expected %{public}s
Accessory,only GPGGA GPRMC supported
#Warning Accessory,repeated GPRMC timestamp at,hhmmss,%02d%02d%02.1f
GPRMC NMEA Screening failed, dataAbsTimeStamp, %.1lf
#Warning Accessory,null island,not allowed
Invalid speed,%{public}.3lf
Invalid course,%{public}.3lf
#Warning Accessory,repeated GPGGA timestamp at,hhmmss,%02d%02d%02.1f
GPGGA NMEA Screening failed, dataAbsTimeStamp, %.1lf
Accessory,invalid altitude,%{public}.3lf
fStaticWait,%f,fMinimumInterval,%f,fDoubleCalInterval,%f,fOutOfBoxTimeout,%f,fMinBatteryLevel,%f,fRetryCalInterval,%f,fUrgentStaticWait,%f,fUrgentMinBatteryLevel,%f,fUrgentAttemptMinimumInterval,%f,fUrgentCalScheduled,%d,fLastCalibration,%f
fState,%d
is already running
BatteryReady,%d,ThermalReady,%d,DisplayReady,%d,StaticReady,%d,MinimumIntervalReady,%d,UrgentMiniCalScheduled,%d,timeToIntervalReady,%f,sinceLastCal,%s,sinceLastUnpluggedCal,%s
Still waiting for long wait timer
Starting long wait timer for %llu seconds
Long wait timer trigger.
Resetting static timer. Wait duration changed %f -> %f
Still waiting for static timer of %f
Starting static timer for %f
Static timer fired
reason,%d,%s
Ignoring abort for user initiated calibration
Stopped sensor calibration, fState, %d, successful, %d
Scheduling double calibration,fLastCalibration,%f,expectedNextCalibration,%f
Scheduling retry calibration after previous aborted run,fLastCalibration,%f,expectedNextCalibration,%f
state,%d,temperature,%f
Warning: Bad state,%d
state,%d,elapsed,%f
level,%f,connected,%d
Warning: Unexpected notification %d
UrgentFlag,%d
CL: CLSensorCalibrationController::onStatusNotification
{"msg%{public}.0s":"CLSensorCalibrationController::onStatusNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLSensorCalibrationController::onUrgentMiniCal
{"msg%{public}.0s":"CLSensorCalibrationController::onUrgentMiniCal", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CLMM, memory cache and tile count limit already set
CLMM,GEOTileLoader memory cache,%d,tile count limit,%d
CLMM, first client enabled openning tile loader
CLMM, enabled count,%{public}d
#Warning CLMM, Trying to disable tile loader when none enabled
CLMM, no clients remaining, closing tile loader
OBM,GpsForceOutdoorMatching,%{public}d,ObmAllowPositionOverride,%{public}d,fBumpHorizontalUncertaintyAmidstBuildings,%{public}d,fMinBuildingsForBump,%{public}u,fSearchRadiusInMeters,%{public}f,fMinHorizontalUncertaintyAmidstBuildings,%{public}f,fMinAverageBuildingHeightForUncertaintyBump,%{public}f
OBM, forcing building geometry
#Warning, OBM, cannot estimate nav mode, disabling
OBM, non-pedestrian, not matching
#Warning, OBM, no mapGeometry!
#Warning, OBM, no geometry!
#Warning, OBM, buildingsWithinDistance,%{public}lf returned false!
OBM, %{private}.13lf,%{private}.13lf,numbuildings,%{public}zu,radius,%{public}lf
#Warning, OBM, buildings.size() %{public}ld > 500. too many buildings. Aborting
OBM,averageBuildingHeight,%{public}.2lf,fNeighborhoodCharacter.type,%{public}d
OBM, not in any building
OBM, %{private}.13lf,%{private}.13lf,building,%{public}zu
OBM, a-priori,%{private}.6lf,%{private}.6lf,hacc,%{public}.2lf,a-posteriori,hacc,%{public}.2lf
#Warning, OBM, no building but point in building!
OBM, initialSize,%{public}ld,finalSize,%{public}ld
#Warning, OBM, no exterior particles remaining
OBM,particleCourse,%{public}.2lf,crumbCourse,%{public}.2lf,deltaCourse,%{public}.2lf,particle,%{public}.6lf,%{public}.6lf,crumb,%{public}.6lf,%{public}.6lf,deltaPos,%{public}.6lf,%{public}.6lf,score,%{public}.5lg,bestScore,%{public}.5lg,varFactor,%{public}.5lg
#Warning, OBM, LonLat conversion failed,point,%{public}lf,%{public}lf
OBM, inflatedHacc, %{public}.2lf, fMinHorizontalUncertaintyAmidstBuildings, %{public}.2lf. choosing max
OBM, a-priori,%{private}.6lf,%{private}.6lf,course,%{public}.2lf,hacc,%{public}.2lf,a-posteriori,%{private}.6lf,%{private}.6lf,course,%{public}.2lf,hacc,%{public}.2lf,bestScore,%{public}.6lg,bestLonLat,%{public}.6lf,%{public}.6lf,bestCourseInDegrees,%{public}.2lf,fAllowPositionOverride,%{public}d,
OBM, a11,%{public}.5lf,a12,%{public}.5lf,a22,%{public}.5lf,a33,%{public}.5lf
OBM,update
MicroLocation: shutdown
Recording event %{public}d not enabled
Registering for app launch notifications
Registering for first wake of day events
Registering for forced recordings
Registering for HomeKit Accessory notifications
Registering for HomeKit Scene notifications
Registering for notification of notes app launch
Registering for notifications of battery state
Unregistering for forced recordings
Unregistering for notifications of battery state
Location services are disabled, ignore WiFi scan result
Received wifi notification %{public}d
{"msg%{public}.0s":"Received link status notification", "associatedState":%{private, location:escape_only}s}
#Warning Received unknown wifi service notification %{public}d
Not scanning Wifi RSSI because it's not enabled
Not scanning Wifi RTT because it's not enabled
Not scanning HomeKit because it's not enabled
Not scanning for Apple TVs because it's not enabled
MicroLocation: Enabling accelerometer
MicroLocation: Disabling accelerometer
Wifi is powered off - not scanning
HomeKit is powered off - not scanning
Received a forced localization request
#Warning Got a notification center notification that we weren't expecting: %s
Received unhandled homekit notification
{"msg%{public}.0s":"RecordingStarted", "durationInSeconds":%{private}ld}
Recording timer cancelled
Recording timer stopped
bundle: %s, launch reason: %s
{"msg%{public}.0s":"No microlocation results provided", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
#Warning Unable to save localization results to duet. %{private}s
Successfully logged to duet
Deleting all entries in the MicroLocation CoreDuet event stream
#Warning Unable to clear MicroLocation CoreDuet Event Stream. %{private}s
Deleted %{public}lu events from MicroLocation Event Stream
CL: CLMicroLocationNotifier::onDarwinNotification
{"msg%{public}.0s":"CLMicroLocationNotifier::onDarwinNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLMicroLocationNotifier::onHomeKitNotification
{"msg%{public}.0s":"CLMicroLocationNotifier::onHomeKitNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLMicroLocationNotifier::onNotificationCenterNotification
{"msg%{public}.0s":"CLMicroLocationNotifier::onNotificationCenterNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
{"msg%{public}.0s":"CFType must be a CFString to convert to a const char*", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
@WifiFlow, scannotify, aps, %{public}lu, %{public}s, clients, %{public}d, doCalc, %{public}d, ls, %{public}d
{"msg%{public}.0s":"state object tracking location services enabled is not updated correctly", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
{"msg%{public}.0s":"filtering out access point from calculation based on scan timestamp", "mac":%{private, location:escape_only}s, "age_seconds_s":"%{public}.09f"}
{"msg%{public}.0s":"filtering out access point from calculation based channel", "mac":%{private, location:escape_only}s, "channel":%{private}d}
@WifiAps, history, %{public}lu, 2ghz, %{public}llu, 5ghz, %{public}llu, usable, %{public}lu, agethresh, %{public}llu,
fIsHELOEnabledFlag,%d
HELO enabled due to CLEEA
{"msg%{public}.0s":"E911Event", "event":%{public, location:escape_only}s, "CLEEA":%{public}d}
PLOS, fPlatformSupportsPlosEstimation, %{public}d
PLOS: match returned false!
OBM, ForceNetworkUsage %{public}d
OBM, DisallowNetworkUsage %{public}d
handling notification %{public}s
CL: CLOutdoorMatchingEngine::onGpsNotification
{"msg%{public}.0s":"CLOutdoorMatchingEngine::onGpsNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
Request region preload manifest, no manifest
isStart,%d,manifest,%d,LastTime,%lf,LastLat,%.05lf,LastLon,%.05lf
Request region preload manifest, update
Found a preload region %s
Requesting download of preload manifest, allowCell,%d
Request tiles at lat,%.06lf,lon,%.06lf, allowCell,%d
TileFile, fTileDownloadCoolOffPeriod, %{public}.1lf
TileFile, fTileDownloadExtendedCoolOffPeriod, %{public}.1lf
TileFile, fTileForceExpirationPeriod, %{public}.1lf
TileFile, fTileMinExpirationPeriod, %{public}.1lf
@TileQueue, hasDataExpired, %{public}d, isLargeConnectivity, %{public}d, fExpirationAge, %{public}d, dataExpirationPeriod, %{public}.1lf, dataAge, %{public}.1lf, tile, %{private}s
TileFile, canRequestBasedOnAttempts, tile, %{private}s, age, %{public}.1lf, needs to be refreshed - retry
TileFile, canRequestBasedOnAttempts, tile, %{private}s, age, %{public}.1lf, expirationAge, %d
TileFile, canRequestBasedOnAttempts, tile, %{private}s, sinceLastDownload, %{public}.1lf, %{public}d, needs to be refreshed, TileDoesNotExistOnTheServer
@TileReq, %{public}s, attempts, llsw, %{private}.2lf, %{private}.2lf, lastSuccess, %{public}d, existsOnServer, %{public}d, sinceLastDownload, %{public}.1lf, cooloff1, %{public}d, cooloff2, %{public}d, cooloff3, %{public}d, expired, %{public}d, path, %{private}s
TileFile, startDownloading, tile, %{private}s, localFilename, %{public}s, tempFilename, %{public}s
TileFile, startDownloading, failed to download without a downloadRequest, %{private}s, #CloneMe
TileFile, startDownloading, tile is already being downloaded, %{private}s, #CloneMe
TileFile, startDownloading, tile, %{private}s, started, %{public}d, strFileUrl, %{private}s
TileFile, decompress, failed to move, %{public}s, %{public}s, errno, %{public}d, %{public}s, #CloneMe
TileFile, decompress, from, %{public}s, to, %{public}s, failed, errno, %{public}d, %{public}s, #CloneMe
TileFile, decompress, in, %{public}.6lf, seconds, size, %{public}u, to, %{public}u, tile, %{private}s
TileFile, decompress, from, %{public}s, to, %{public}s, failed, %{public}u byte file, #CloneMe
TileFile, decompress, file is not compressed, %{private}s
TileFile, generateUniqueFileName, trying, %{public}s, tile, %{private}s
TileFile, generateUniqueFileName, end, localFilename, %{public}s, temp, %{public}s
TileFile, deleteFile, unlink, %{public}s
TileFile, deleteTempFile, unlink, %{public}s
TileFile, onDownloadCompleted, success, %{public}d, fDownloadRequest, %{public}p, tileDoesNotExist, %{public}d, details, %{public}s
TileFile, copy from, %{public}s, to, %{public}s, start
TileFile, onDownloadCompleted, tile version, %{public}d, min version, %{public}d, isVersionOk, %{public}d, tile, %{private}s
TileFile, onDownloadCompleted, tile version, %{public}d, min version, %{public}d, isVersionOk, %{public}d, type, %{public}d, %{public}s, #CloneMe
TileFile, tile, %{private}s, download failed, #CloneMe
TileFile, failed to move from, %{public}s, to, %{public}s, errno, %{public}d, %{public}s, #CloneMe
TileFile, setLocalfilename, localFilename, %{public}s, tempFilename, %{public}s
TileFile, Delta lat/lon zero, %{public}d, %{public}d, #CloneMe
TileFile,: extractTileIdFromFile, prefer local file name because it exists, %{public}s
TileFile, extractTileIdFromFile, directory, %{public}s, filename, %{public}s, absFilename, %{public}s, type, %{public}d, isHeadersOnly, %{public}d
TileFile, extractTileIdFromFile, failed, %{public}s, #CloneMe
TileFile, extractTileIdFromFile, failed to open file, %{public}s, errno, %{public}d, %{public}s, #CloneMe
TileFile, extractTileIdFromFile, tile version, %{public}d, min version, %{public}d, isVersionOk, %{public}d, dLat, %{public}.5lf, dLon, %{public}.5lf
TileFile, extractTileIdFromFile, invalid hash value for, %{private}s, #CloneMe
TileFile, extractTileIdFromFile, read tileid from file, %{private}s
TileFile, extractTileIdFromFile, read, absFilenameParams, %{public}s
TileFile, readTileFileByFileName, start, file, %{public}s, isHeadersOnly, %{public}d, isBinarySearch, %d
TileFile, readTileFileByFileName, reading input from stdin
TileFile, failed to open, %{public}s, errno, %{public}d, %{public}s, #CloneMe
TileFile, readTileFileByFileName, done, file, %{public}s, isHeadersOnly, %{public}d, isBinarySearch, %{public}d, isOK, %{public}d
TileFile, setProtectionClass, failed to open, %{public}s, fd, %{public}d, errno, %{public}d, %{public}s, #CloneMe
TileFile, setProtectionClass, unable to open for protected file change, %{public}s, %{public}d, fd, %{public}d, errno, %{public}d, %{public}s
TileFile, setProtectionClass, failed to set protection class, %{public}d, #CloneMe
TileFile, setProtectionClass, failed to set class, %{public}s, %{public}d, %{public}d
TileFile, setProtectionClass, tile, %{private}s, newClass, %{public}d, curClass, %{public}d
TileFile, setProtectionClass, invalid protectionClass, %{public}d, #CloneMe
@TileList, %{public}s, %{public}s, llsw, %{private}.2lf, %{private}.2lf, Class%{public}c
@TileList, %{public}s, unlocked, llsw, %{private}.2lf, %{private}.2lf, ClassC
TileFile, getProtectionClass, failed to open, %{public}s
TileFile, getProtectionClass, failed to set protection class, %{public}d, #CloneMe
TileFile, no location / coordinates, tile, %{private}s, scaledLocation, %{private}.8lf, %{private}.8lf, #CloneMe
TileFile, doesLocationIntersectWithTile, distance, %{public}.1lf, deltas, %{public}.1lf, %{public}.1lf
@TileList, %{public}s, touch, ignoring, %{public}.2lf, #CloneMe
@TileList, %{public}s, touch, llsw, %{private}.2lf, %{private}.2lf
TileFile, saving, %{public}s
TileFile, paramsFileExist, %{public}d, loading, %{public}s, accessTimestamp, %{public}.1lf
@TileReq, %{public}s, skip, llsw, %{private}.2lf, %{private}.2lf, reason, %{public}s, last, %{public}s
This instance has no : TEST_testBinarySearch
WRTT: No peer range notifier.
WRTT: start ranging request
WRTT: stop ranging session
WRTT: send range meas, %ld, and errors, %ld
WRTT: request, numPeers, %ld
WRTT: rangeable, numPeers, %ld
WRTT: scheduling timer
WRTT: timeout
WRTT: register
WRTT: unregister
WRTT: received meas, %ld, or error %s
WRTT: received wifi power, %d
CL: CLPeerRangingNotifier::onTimer
{"msg%{public}.0s":"CLPeerRangingNotifier::onTimer", "event":%{public, location:escape_only}s, "this":"%{public}p"}
{"msg%{public}.0s":"TileType Assertion failed", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
TILE: registered, tilesSet, %s
TmmMgr, ctor
TILE: fMinEncryptionGracePeriod, %.2lf
TILE: isAppTilesActive, %d
TILE: isTilePreloadManifestActive, %d
TILE: fDefaultDEMTilesServerUrl, %s
TILE: fDefaultDEMTilesRootDirectory, %s
TILE: fDefaultAppTilesServerUrl, %s
TILE: fDefaultAppTilesRootDirectory, %s
TILE: fDefaultTilePreloadManifestServerUrl, %s
TILE: fDefaultTilePreloadManifestRootDirectory, %s
TILE: fDefaultMaxTileAge, %.1lf
TILE: fDefaultMaxTileDataAge, %.1lf
TILE: fMaxNumOfTiles, %d
TILE: DEM,fDefaultNumOfSurroundingCirclesDEM, %d
TILE: onCleanupAgedTiles, %p
onCompanionNotification, notification, %d, Tiles
{"msg%{public}.0s":"CLTilesManager::deleteAgedDownloadItems", "event":%{public, location:escape_only}s, "begin_mach":%{public}llu, "end_mach":%{public}llu, "elapsed_s":"%{public}.09f", "now_s":"%{public}.09f"}
@TileReq, %{public}s, rmlist, llsw, %{private}.2lf, %{private}.2lf, aged, size, %{public}ld
{"msg%{public}.0s":"Finished CLTilesManager::deleteAgedDownloadItems", "deleted":%{public}u}
{"msg%{public}.0s":"CLTilesManager::agedTileDeleter", "event":%{public, location:escape_only}s, "begin_mach":%{public}llu, "end_mach":%{public}llu, "elapsed_s":"%{public}.09f", "now_s":"%{public}.09f"}
TILE: deleteAgedTiles, delete, age, %.1lf, %.1lf, tileDataAge, %.1lf, %.1lf, tile, %s
{"msg%{public}.0s":"CLTilesManager::agedTileDeleter", "deleted":%{private}u}
{"msg%{public}.0s":"CLTilesManager::cancelAllDownloads", "event":%{public, location:escape_only}s, "begin_mach":%{public}llu, "end_mach":%{public}llu, "elapsed_s":"%{public}.09f", "planned":%{private}lu}
{"msg%{public}.0s":"CLTilesManager::removeAllTiles", "event":%{public, location:escape_only}s, "begin_mach":%{public}llu, "end_mach":%{public}llu, "elapsed_s":"%{public}.09f", "type":%{private}d}
TILE: listAvailableFilesAllTypes, start
TILE: listAvailableFilesAllTypes, can't list tiles while locked, wait for unlock
TILE: convert to class A, first unlock, %s
TILE: convert to class C, first unlock, %s
@TileEvent, %{public}s, indexed, %{public}lu
TILE: listAvailableFilesAllTypes, done
TILE: listAvailableFilesByLister, reason, %s, rootDirectory, %s, name, %s
TileMgr, listAvailableFilesByLister, reason, %{public}s, can't open dir, %{public}s, #CloneMe
TILE: listAvailableFilesByLister, start
TILE: listAvailableFilesByLister, found tile file, filesNum, %u, absoluteFilename, '%s', d_type, %d
TileMgr, listAvailableFiles, can't open dir, %{public}s
TILE: listAvailableFiles, start
TILE: listAvailableFiles, found tile file, filesNum, %u, absoluteFilename, '%s', d_type, %d
TileMgr, listAvailableFiles, failed to stat file, %{public}s, ret, %{public}d, #CloneMe
TILE: listAvailableFiles, end
TILE: checkDownloadSchedule, no data connectivity, avoiding downloads
TILE: checkDownloadSchedule, checking, numOfActiveDownloads, %u, small, %d, large, %d
TILE: checkDownloadSchedule, isShouldDownload is not true, exists on server, %d
TILE: checkDownloadSchedule, isShouldDownload, %d, isAllowDownload, %d, isCurrentTile, %d, isAllowCellular, %d, check, %s, details, %s
@TileReq, %{public}s, start, llsw, %{private}.2lf, %{private}.2lf, reach, %{public}d
TileMgr, where did this download request come from?, download, %{public}p, #CloneMe
TileMgr, tileDecompressionCompleted, no tile for download, %{public}p, #CloneMe
@TileReq, %{public}s, mapped, llsw, %{private}.2lf, %{private}.2lf
TileMgr, tileDecompressionCompleted, where the file, was it deleted, %{private}s, #CloneMe
@TileReq, %{public}s, request, llsw, %{private}.2lf, %{private}.2lf
TILE: requestDownload, ignoring request, no sec_key
TILE: requestDownload, tileid, %s, is locked will be redownloaded, details, %s, allowRedownload, %d, isAddToDownloadList, %d
TILE: DEM,fForceDownloadDEMTiles, %d
@TileReq, %{public}s, onlist, llsw, %{private}.2lf, %{private}.2lf, center, size, %{public}ld
@TileReq, %{public}s, onlist, llsw, %{private}.2lf, %{private}.2lf, neighbor, size, %{public}ld
TILE: getTileFile, index is not available until first unlock, fDataProtectionEnabled, %d
TILE: getTileFile, tile, %s, isAvailable, %d, isFileAccessible, %d
TILE: getTileFile, tileid, %s, not available
TileMgr, deleteTileFile, tileType, %{public}d, %{private}s, localPathToFile, %{public}s, #CloneMe
TileMgr, updateProtectionClass, start, %s, reason, %s, isAboutToLock, %d, locationAge, %.1lf, doLocCheck, %d, sizes, %lu, %lu, knownLocation, %s
TileMgr, updateProtectionClass, failed unlocking tileid, %{private}s, size, %{public}lu, #CloneMe
TileMgr, updateProtectionClass, unable to lock tile, locking tileid, %{private}s, #CloneMe
TileMgr, updateProtectionClass, lockstats, %{public}s, lock, %{public}d, unlock, %{public}d, size, %{public}lu
TileMgr, tile ptr is NULL, #CloneMe
TileMgr, updateProtectionClass, unable to lock tile, locking tileid, %{pricate}s, #CloneMe
TileMgr, Unable to lock all unprotected files!, #CloneMe
TILE: scheduleExpiredLocationTimer, no valid location
TILE: scheduleExpiredLocationTimer, reason, %s, locationAge, %.1lf, secondsFromNow, %.1lf, lastKnownLocation, %s
TILE: cancelExpiredLocationTimer
TILE: onExpiredLocationTimerFired, isLocked, %d
TILE: onExpiredLocationTimerFired
TILE: onPCTimerFired
TileMgr, onStatusNotification, unknown notification, %{public}d, #CloneMe
TILE: CLTilesManager::shutdown
TILE: stats: getTileStats, demTilesDownloaded, %d
TileMgr, invalid tileType, %{public}d, #CloneMe
TILE: updating dem neighbor mtime, %d, type, %d, tileid, %s
Invalid dem neighbor tile id!
TileMgr, Invalid tile id!, #CloneMe
TILE: getAppAvailabilityForArea, index is not available until first unlock, fDataProtectionEnabled, %d
TILE: getAppAvailabilityForArea, tiles, %d, %s, are not active on this device
TILE: getAppAvailabilityForArea, loc, %.8lf, %.8lf, radius, %.3f
TILE: getAppAvailabilityForArea, tile, %s
TILE: getAppAvailabilityForArea, ctile, %s
TILE: already been searched
TILE: getAppAvailabilityForArea, y, %d, x, %d, ntile, %s
TILE: getAppAvailabilityForArea, appRecommendation, %lu, %s, loc, %.10lf, %.10lf, span, %.10lf, %.10lf
TILE: fullAppTilesServerUrl, %s
TILE: onStoreFrontDidChangeNotification, new fServerUrl, %s
TILE: shouldEnableAppTiles, %d, fAppTilesEnabled, %d
Get manifest tile, %lu
@TileList, %{public}s, add, llsw, %{private}.2lf, %{private}.2lf, %{public}s, size, %{public}lu, 
CL: CLTilesManager::onPCTimerFired
{"msg%{public}.0s":"CLTilesManager::onPCTimerFired", "event":%{public, location:escape_only}s, "this":"%{public}p"}
Cycle, CR DT Regression, %f, %f, catherine(cpm), %f, catherinemax(cpm), %f, catherinemin(cpm), %f, vo2max(METs), %f, duration(s), %f, weight(kg), %f, METS, %f
Cycle, GPS speed at time, %f, %f is too high,  set to maximum default, %f
Cycle, Uphill vertical speed at time, %f, %f is too high, set to maximum default %f
Cycle, WR Linear Regression, %f, %f, Grade type, %d, GPS Speed, %f, Vertical Speed, %f, Duration(s), %f, Weight(kg), %f, WR METS, %f
Cycle, Model switcher input availability, StartTime, %f, EndTime, %f, ModelSwitcherInputCase, %d, gradeType, %d, hspeed, %f, vspeed, %f, isCatherineAvailable, %d, isCatherineReliable, %d, isGpsAvailable, %d, HRstaleness, %f
Cycle, Fused, %f, %f, HR METS, %f, WR METS, %f, Fused METS, %f, Grade type, %d, GPS Speed, %f, Vertical Speed, %f, Duration(s), %f, Weight(kg), %f, Steps, %d, ModelSwitcherInputCase, %d, distance, %f, altitude, %f, HRstaleness, %f, HR, %f, metSource, %d
Cycle, RollingResistance,%f,gravity,%f,wind,%f,totalWR,%f,startTime,%f,endTime,%f
TILE: running initStaticGlobals
TILE: fMinimumSupportedTilesVersion, %d
TILE: CLWifiTileFile, sectionId, %d, %s
TILE: tileMacIndexHeader, entrySizeInBytes, %u
TILE: headers only, avoid reading SectionID_TileIndex_Mac
TILE: headers only, avoid reading SectionID_TileAccessPointTable
TILE: idx, %3lu, %3u, mac, %s, offset, %u
TILE: mac, %3u, mac,%x:%x:%x:%x:%x:%x, y, %3d, x, %3d, loc, %14.10lf, %14.10lf, unc, %.1lf, reach, %.1lf
TILE: binarySearchAP, match, %012llx, %012llx
WifiTile, binarySearchIndex, ==================> indexFailed <==================, size, %{public}4lu, a, %{public}4lu, b, %{public}4lu, c, %{public}4lu,  A, %{public}012llx,  S, %{public}012llx, B, %{public}012llx, #CloneMe
TILE: binarySearchIndex, indexFound, isFound, %d, wasSearched, %d, size, %4lu, a, %4lu, b, %4lu, c, %4lu, searchAr, %4u, A, %012llx,  S, %012llx, B, %012llx
TILE: traverseTileFile, message, %s, isHeadersOnly, %d, isBinarySearch, %d, macAddressToSearch, %012llx, cachedIndex, %d
TILE: traverseTileFile, indexVector cached, seek to the APs table, %lld
TILE: traverseTileFile, re-using cached index vector
TILE: traverseTileFile, searched index, A, %012llx, mac, %012llx, B, %012llx, indexSize, %lu, halting search
WifiTile, Invalid section signature, readBytes, %{public}lu, section, signature, 0x%{public}x, sectionId, %{public}d, sizeBytes, %{public}d, #CloneMe
WifiTile, message, %{public}s, readBytes, %{public}lu, section, signature, 0x%{public}x, sectionId, %{public}d, sizeBytes, %{public}d, headerSizeBytes, %{public}d, sectionId, %{public}d, #CloneMe
WifiTile, traverseTileFile, invalid tile file, bad allocation size, bytesToAllocate, %{public}lu, maxAllocationSize, %{public}lu, #CloneMe
TILE: skip section, message, %s, signature, 0x%x, sectionId, %d, sizeBytes, %d, headerSizeBytes, %d
WifiTile, failed to allocate memory for, %{public}lu, #CloneMe
WifiTile, failed to read, %{public}lu, %{public}lu, #CloneMe
TILE: searched index, A, %012llx, mac, %012llx, B, %012llx, indexSize, %lu, halting search
TILE: searched index, A, %012llx, mac, %012llx, B, %012llx, indexSize, %lu
TILE: headers only, avoid reading the APs
TILE: unknown section : %d
TILE: traverseTileFile, finished traversing, file, index entries, %lu, apEntries, %lu
%s,Updated,With,%s,%0.4f,%s,%0.4f,Alpha,%0.4f,%s
%s INITIAL isWifiPowered=%d
%s Start monitor for active scanning
%s Stop monitor for active scanning
%s TIMER TRIGGERED
%p WIFI POWER NOTIFICATION RECEIVED, power=%d nextFire=%f
%s WIFI EXECUTING IMMEDIATELY, now=%f nextRequestTime=%f
%s WIFI SCAN SCHEDULED FOR %f
%s WIFI IS POWERED OFF - NOT ISSUING SCAN REQUEST
CL: CLWifiScanner::onWifiNotification
{"msg%{public}.0s":"CLWifiScanner::onWifiNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
Registering with Motion Coprocessor
Unregistering with Motion Coprocessor
onBodyStatusData->onBodyStatus,%d,onBodyStatusData->confidence,%d,onBodyStatusData->timestamp,%f
CL: CLOnBodyNotifier7::onMotionCoprocessorData
{"msg%{public}.0s":"CLOnBodyNotifier7::onMotionCoprocessorData", "event":%{public, location:escape_only}s, "this":"%{public}p"}
Unknown whether or not provider %{public}d is a candidate for autopause
PKAUTOPAUSE MEAN coord: %f %f %f %f %f %f %f %d %d 
Received companion message,type,%d,size,%lu
#Warning error serializing OdometerCyclingData
#Warning error deserializing OdometerElevationData
#Warning error deserializing CoarseElevationData
Registering for companion notification type %d
Last Overridden Session,%ld, Registration Info Overridden Session,%ld
Unregistering for companion notification type %d
Sync state with Companion
#Warning Error serializing session override (%ld): %s
#Warning Spectator subscriptions expired
coarse elevation sub,enable,%d,transport,%d,subsCompleted,%d,unlockSinceBoot,%d,fitnessTracking,%d,numClients,%d
BTA: fIsUseBTA, %d
BTA: unregisterForNotificationInternal, notificaiton, %d
BTA: startMonitoringAll
BTA: startMonitoringAll, isActive, %d, fIsMonitoringActive, %d
#Warning BTA: startMonitoring, jobName, no BTA in the simulator
BTA: setUseBTA, isUseBTA, %d
{"msg%{public}.0s":"index entry count mismatch during #tiles re-serialization", "tile_x":%{private}d, "tile_y":%{private}d, "generationTimestamp_s":"%{private}.09f", "numberOfIndexEntries":%{private}d, "computedNumberOfIndexEntries":%{private}ld}
workoutEvent,%ld,workoutType,%ld
Vo2Max,%f,numPairs,%lu,status,%d,LSEst,%f,SumEst,%f,divergence,%f,consistency,%f,PredEst,%f
VO2Max,pctHRSamplesValidMin,%d,pctHRSamplesValidMax,%d,pctHRSamplesWithRecentHR,%d,pctMETSamplesWithValidDelta,%d
VO2Max,longitudinalConsistency,%d,old,%f,new,%f
PreProcessor,PairStats,total,%d,warmup,%d,grade,%d,flat,%d,delta,%d,metsAboveMin,%d,pairInBounds,%d,hrAboveMin,%d,hrBelowMax,%d,gps,%d,stride,%d,distance,%d,source,%d,hrOK,%d,totalGood,%d
Cannot find pressure registry entry
PRTT property is not CFData
PRTT property too small
Unexpected notification from pressure db.notification,%d
CL: CLPressureBias::onDb
{"msg%{public}.0s":"CLPressureBias::onDb", "event":%{public, location:escape_only}s, "this":"%{public}p"}
BATCH: received locations w/ odometer: %f, %f
#Warning BATCH: odometer ran from %f to %f
#Warning BATCH: Received a location (%s) without an odometer while odometer alarm was set
#Warning BATCH: odometer reset: %.2f
BATCH: received odometer: %f
BATCH: Should not be registered for location
BATCH: Unexpected notification: %{public}d
{"msg%{public}.0s":"out of bounds index entry in #batchedlocations", "index":%{public}ld, "batchedLocationsSize":%{public}ld, "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
@WifiLogic, applyInput, %{public}s
{"msg%{public}.0s":"CLWifiPositioningSystemLogic::apply", "event":%{public, location:escape_only}s, "begin_mach":%{public}llu, "end_mach":%{public}llu, "elapsed_s":"%{public}.09f", "event":%{public, location:escape_only}s, "now_s":"%{public}.09f"}
@WifiLogic, setoutputs
{"msg%{public}.0s":"wifi location update request state change", "before":%{public, location:escape_only}s, "after":%{public, location:escape_only}s}
TILE: clear, tile, %sd
initialize
CloseTrack,Stop
Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Speed,%0.3f,Course,%0.3f,Altitude,%0.3f,VerticalAccuracy,%0.3f,Timestamp,%0.3f,Source,%d
CloseTrack,GpsSourceChange,GpsSourceOld,%ld,GpsSourceNew,%ld
CloseTrack,GpsLocationEntryTimeOut,TimeSinceLastEntry,%0.2f
CloseTrack,GpsFilteredHorizontalAccuracyOutOfBounds,HorizontalAccuracy,%0.2f
CloseTrack,GpsFilteredSpeedOutOfBounds,Speed,%0.2f
CloseTrack,NumSamplesMaxGpsFilteredLocation,NumSamples,%d
CloseTrack,GpsOdometerEntryTimeOut,TimeSinceLastEntry,%0.2f
CloseTrack,DistanceGpsRoughMax,DistanceGpsRough,%0.2f
CloseTrack,TimeSpanMax,Timespan,%0.2f
CloseTrack,NumSamplesMaxGpsOdometer,NumSamples,%d
CloseTrack,PedometerEntryTimeOut,TimeSinceLastEntry,%0.2f
CloseTrack,NoStepsForTwoPedometerEntries
CloseTrack,PedometerSpeedCurrentZero
CloseTrack,PedometerSpeedCurrentJump,SpeedCurrentPrev,%0.2f,SpeedCurrent,%0.2f,SpeedCurrentJumpPercent,%0.2f
CloseTrack,PedometerArmConstrainedState,%d
CloseTrack,NumSamplesMaxPedometer,NumSamples,%d
CloseTrack,NumAdditionalPedometerEntriesRemoved,%ld
CloseTrack,TrackMetrics,TimeStartGpsLocationSegment,%0.2f,TimeEndGpsLocationSegment,%0.2f,%s
CloseTrack,Fail,DistanceGpsNotSufficient,DistanceGps,%0.2f
CloseCurrentTrack,Fail,GpsSpeedDiscrepancyDetected,SpeedGpsRawMean,%0.2f,GpsDistanceOverTime,%0.2f,SpeedErrorPercent,%0.2f
CloseTrack,Success
Recording raven events to %s
noSamples < 1 || hist.empty()
unexpected trained cdf data size issue
OdometerQualityIndicator,%d,r2,%f
Unable to create SecPolicyRef
Unable to create policy list
SecTrustEvaluate() failed with securityResult=%{public}u
SecTrustEvaluate() failed with status=%{public}d
TileError, connectivity, current, %{public}d, neighbor, %{public}d
TileError, connectivity, neighbor, %{public}d, nonneighbor, %{public}d
TileQueue, policy, %{public}s
TileDl, preindexskip, request, #CloneMe
@TileQueue, usable, %{public}d, tileid, %{private}s
@TileQueue, onlist, tileid, %{private}s
@TileQueue, unreadable, %{public}d, tileid, %{private}s
@TileQueue, queue, 1
@TileQueue, skip, alreadyDownloaded, %{public}d, accessible, %{private}d, inqueue, %{public}d, locked, %{private}d
@TileDl, skipneighbor, %{private}.2lf, %{private}.2lf, locked, %{public}d, dled, %{public}d, pending, %{public}d, outbounds, %{public}d
TileDl, preindexskip, addToDownloadList, #CloneMe
@TileDl, skipall, first unlock
@TileDl, skipall, on connectivity
@TileDl, skipall, in progress
@TileReq, %{public}s, attempts, llsw, %{private}.2lf, %{private}.2lf, isDownload, %{public}d, lastSuccess, %{public}d, existsOnServer, %{public}d, sinceLastDownload, %{public}.1lf, path, %{public}s
@TileError, %{public}s, nostate, %s, llsw, %{private}.2lf, %{private}.2lf, nlist, %{public}ld, nstate, %{public}lu
@TileDl, %{public}s, makestate, %s, llsw, %{private}.2lf, %{private}.2lf, nlist, %{public}ld, nstate, %{public}lu
@TileDl, %{public}s, checkNextEligible, tilesToDownload, %{public}lu, tilesCanBeDownloaded, %{public}lu, ncurrent, %{public}d, connectivity, %{public}d, background, %{public}d, neighbors, %{public}d, location, %{private}0.1f, %{private}0.1f, %{public}1.f
@TileReq, %{public}s, start, llsw, %{private}.2lf, %{private}.2lf, allowOverCellular, %{public}d, isCurrentTile, %{public}d
@TileDl, cell, skipall
@TileDl, %{public}s, completed, llsw, %{private}.2lf, %{private}.2lf, success, %{public}d, nlist, %{public}ld, nstate, %{public}lu, rtt, %{public}.1f
TileDl, preindexskip, refresh, #CloneMe
@TileDl, checkRefresh, llsw, %{private}.2lf, %{private}.2lf, expired, %{public}d, onlist, %{public}d
{"msg%{public}.0s":"CLTileDownloader::deleteAgedDownloadItems", "event":%{public, location:escape_only}s, "begin_mach":%{public}llu, "end_mach":%{public}llu, "elapsed_s":"%{public}.09f", "now_s":"%{public}.09f"}
@TileQueue, deleteAged, startsize, %{public}lu
TileQueue, %{public}s, reqage, llsw, %{private}.2lf, %{private}.2lf, age, %{public}0.1f, time, %{public}0.1f, size, %{public}lu
@TileQueue, deleteAged, %{public}d, endsize, %{public}lu
{"msg%{public}.0s":"Finished CLTilesDownloader::deleteAgedDownloads", "deleted":%{public}u}
{"msg%{public}.0s":"CLTileDownloader::cancelAllDownloads", "event":%{public, location:escape_only}s, "begin_mach":%{public}llu, "end_mach":%{public}llu, "elapsed_s":"%{public}.09f", "planned":%{private}lu}
@TileQueue, cancelAll, size, %lu
TileQueue, firstUnlock
Instantiating CLTileSyncManager
Instantiating NoopTileSyncManager
_authCb is NULL!
Error converting connection event string
HR,fhr,%{private}0.2f,userAge,%{private}0.2f,normalizedMets,%{private}0.2f
DEM,latitude_degs > 90.0
DEM,latitude_degs < -90.0
DEM,heightDEM < -500. Lowest point on Earth is approximately -420 m (Dead Sea).
DEM,heightVariance <= 0
#Warning,DEM,deltaT < 0. DEM height filter was internal_reset.
#Warning,DEM, Height filter timed out. DEM height filter was internal_reset.
DEM, Height filter exceeded maximum change in horizontal position. DEM height filter was internal_reset.
DEM,isUseOfDemInappropriate,true,TBA,currentTime,%{public}.1lf,TBA machContinuousTime,%{public}.1lf,isCloseToOrAtTunnelBridge,%{public}d,lat,%{private}.8lf,lon,%{private}.8lf
#Warning,DEM,current tile is not valid
#Warning,DEM,cellsize == 0
#Warning,DEM,latitude,%{private}.9lf,out of range
#Warning,DEM,latitude,%{private}.9lf,lessThanMin,%{public}.9lf
#Warning,DEM,latitude,%{private}.9lf,exceedsMax,%{public}.9lf
#Warning,DEM,longitude,%{private}.9lf,lessThanMin,%{public}.9lf
#Warning,DEM,longitude,%{private}.9lf,exceedsMax,%{public}.9lf
#Warning,DEM,dem.data.size() != dem.header.nrows*dem.header.ncols
#Warning,DEM,longitude,%{private}.9lf,invalid,minLongitude,%{public}.9lf
#Warning,DEM,latitude,%{private}.9lf,invalid,minLatitude,%{public}.9lf
#Warning,DEM,longitude,%{private}.9lf,invalid,maxLongitude,%{public}.9lf
#Warning,DEM,latitude,%{private}.9lf,invalid,maxLatitude,%{public}.9lf
#Warning,DEM,Reached unexpected case
#Warning,DEM,unexpected noData
DEM,populateSlope,fail,lat,%{private}.8lf,lon,%{private}.8lf,testLocationLatDegs,%{private}.8lf,testLocationLonDegs,%{private}.8lf
DEM,lat,%{private}.8lf,lon,%{private}.8lf,alt,%{public}.2lf,hunc,%{public}.1lf,vunc,%{public}.1f,i,%zu,slope,%{public}.2f,dist2TestLoc,%{public}.1lf,altAtTestLoc,%{public}.1f,maxAbsSlope,%{public}.2f
DEM,fForceDownloadDEMTiles, %d
DEM,invalidInput,timestamp,%{public}.1lf,lat,%{private}.8lf,lon,%{private}.8lf
DEM,not on the current in-memory tile,lat,%{private}.7lf,lon,%{private}.7lf,minLat,%{public}.7lf,maxLat,%{public}.7lf,minLon,%{public}.7lf,maxLon,%{public}.7lf
DEM,tile not available
DEM,Need to load tile
DEM,tile download needed
DEM,skipping loadTile query,skipCount,%{public}d
DEM,Tile not loaded yet
DEM,good to go!
DEM,Alt(m),%{public}.2lf,AltUnc(m),%{public}.2lf,filterAlt(m),%{public}.2lf,filterAltVariance(m^2),%{public}.2lf,IsFiltered,%{public}d,RawDemAlt(m),%{public}.2lf,undulation,%{public}.3lf,slope,%{public}.3lf,maxAbsSlope,%{public}.3lf,lat,%{private}.8lf,lon,%{private}.8lf
DEM,loadTile,lat,%{private}.7lf,lon,%{private}.7lf
DEM,loadTile,CLTilesManager,getTileFile,took,%{public}.1lf
#Warning,Unexpected, this tile should be on disk,%{public}s
DEM,Index into the DEM cannot be negative.
DEM,Index exceeds the DEM size.
DEM,indexCrcInBuffer,%zu,exceeds (bufferSize-4) bytes,%zu
#Warning,DEM,Invalid CLDEM tile file - header string
#Warning,DEM,Invalid CLDEM tile file - version
#Warning,DEM,Invalid CLDEM tile file - headerLength
#Warning,DEM,tile.header.dataSizeBytes > tile.header.nrows*tile.header.ncols
#Warning,DEM,Unable to load %{public}s
#Warning,DEM,Invalid CLDEM tile file - file size does not match headerLength+dataSizeBytes
DEM,tile is larger than the allowed maximum
#Warning,DEM,Invalid CLDEM tile file - did not read all of dataSizeBytes of data
#Warning,DEM,Invalid CLDEM tile file - count of bytes stored does not match the expect size based on the header
#Warning,DEM,calculateCLDEM_CRC returned false unexpectedly.
#Warning,DEM,Invalid CLDEM tile file - crc check failed,calculated,%X,received,%X
DEM,expected the 16 bit count to exceed 255
DEM,expansion of the compressed data has exceeded the expected tile size
DEM,bad index into the compressed data
DEM,The uncompressed data does not have the expected number of elements
#Warning,DEM,longitude %{public}.9lf is not contained in the DEM,Min longitude,%{private}.9lf
#Warning,DEM,latitude %{public}.9lf is not contained in the DEM,Min latitude,%{private}.9lf
#Warning,DEM,longitude %{public}.9lf is not contained in the DEM,Max longitude,%{private}.9lf
#Warning,DEM,latitude %{public}.9lf is not contained in the DEM,Max latitude,%{private}.9lf
#Warning,DEM,cannot load a partial tile for a tile with all the same values (empty data)
DEM,avl download status,NONE
DEM,avl download status,STARTED
DEM,avl download status,COMPLETED
DEM,avl downloaded,%{public}s
#Warning,DEM,Cannot set protection class for DEM avl file,%{public}s
DEM,avl file decompressed,%{public}s,to,%{public}s
#Warning,DEM,Cannot set protection class for DEM decompressed avl file,%{public}s
#Warning,DEM,avl download status,FAILED
#Warning,DEM,avl download request failed,%{public}s,retryMultiplier,%{public}d
#Warning,DEM,avl download status,%{public}d
DEM,download request,url,%{public}s,storeTo,%{public}s,retryInterval,%{public}.1lf
#Warning,DEM,could not setUpdateSource AVL file updater
#Warning,DEM,could not setUpdateRate AVl file updater
Notification,%{public}d
CL: CLDigitalElevationModel::onAvlFileUpdated
{"msg%{public}.0s":"CLDigitalElevationModel::onAvlFileUpdated", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLDigitalElevationModel::onManagerNotification
{"msg%{public}.0s":"CLDigitalElevationModel::onManagerNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
#Warning Activity didn't complete before the runner was destroyed. Most likely this means there was an exception during the activity. Please check the logs.
Registering for XPC Activity %s
Attempting to run %s but Microlocations are disabled.
CLVehicleConnectionNotifier is being constructed
#fmc CarKit connection status, %d
CLVehicleConnectionNotifier is shutting down
CarKitConnectionStatus,%d,HandsfreeConnectionStatus,%d,current VehicleConnectionStatus,%d
#fmc Posting notification upon vehicle exit
#fmc startTime,%f,endTime,%f,exitTime,%f
CarKitConnectionStatus,%d,HandsfreeConnectionStatus,%d,current VehicleConnectionStatus,%d,new VehicleConnectionStatus,%d
CL: CLVehicleConnectionNotifier::onBluetoothNotification
{"msg%{public}.0s":"CLVehicleConnectionNotifier::onBluetoothNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLVehicleConnectionNotifier::onMotionStateNotification
{"msg%{public}.0s":"CLVehicleConnectionNotifier::onMotionStateNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
#Warning refAlt < %.1lf,refAlt,%.1lf,using the min
#Warning refAlt > %.1lf,refAlt,%.1lf,using the max
latitude,%.7lf,is out of bounds
Forcing a raw speed to kValue bins update.
Forcing a step cadence to stride length bins update.
Received CLDataProtectionManager_Type %d, data availability %d
Setting the current Motion Cals version to, %d
CL: CLMotionSyncStore::onDataProtectionNotification
{"msg%{public}.0s":"CLMotionSyncStore::onDataProtectionNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
{"msg%{public}.0s":"#Awareness Received unexpected Routine notification", "triggerClass":%{private, location:escape_only}s}
{"msg%{public}.0s":"#Awareness Active location request has timed out"}
{"msg%{public}.0s":"#Awareness Attempting to set a non-positive latency budget", "budget":"%{public}f"}
{"msg%{public}.0s":"#Awareness failed to register", "notification":%{public, location:CLLocationProvider_Type::Notification}lld}
{"msg%{public}.0s":"#Awareness New registration", "client":%{public, location:escape_only}s}
{"msg%{public}.0s":"#Awareness failed to unregister", "notification":%{public, location:CLLocationProvider_Type::Notification}lld}
{"msg%{public}.0s":"#Awareness Removed registration", "client":%{public, location:escape_only}s}
{"msg%{public}.0s":"#Awareness Shutting down", "hasClients":%{public}hhd, "bigSwitch":%{public}hhd}
{"msg%{public}.0s":"#Awareness Disabling wakes"}
{"msg%{public}.0s":"#Awareness Wake time is in the past", "wakeTime_s":"%{public}.09f"}
{"msg%{public}.0s":"#Awareness Awakened"}
{"msg%{public}.0s":"#Awareness #warning Awakened with no clients"}
{"msg%{public}.0s":"#Awareness #warning Unexpected notification", "notification":%{public, location:CLLocationProvider_Type::Notification}lld}
{"msg%{public}.0s":"#Awareness #warning Received location without clients"}
{"msg%{public}.0s":"#Awareness Received location"}
{"msg%{public}.0s":"#Awareness Unexpected client manager notification", "notification":%{public}d}
{"msg%{public}.0s":"#Awareness New big switch state", "enabled":%{public}d}
{"msg%{public}.0s":"#Awareness Unexpected wifi notification", "notification":%{public}d}
{"msg%{public}.0s":"#Awareness Wifi power state changed", "powered":%{public}hhd}
{"msg%{public}.0s":"#Awareness Settled state changed", "isSettled":%{public}hhd}
CL: CLLocationAwarenessProvider::onWakeTimer
{"msg%{public}.0s":"CLLocationAwarenessProvider::onWakeTimer", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLLocationAwarenessProvider::onWifiNotification
{"msg%{public}.0s":"CLLocationAwarenessProvider::onWifiNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLLocationAwarenessProvider::onLocationNotification
{"msg%{public}.0s":"CLLocationAwarenessProvider::onLocationNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLLocationAwarenessProvider::onClientManagerNotification
{"msg%{public}.0s":"CLLocationAwarenessProvider::onClientManagerNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CLMapGeometryPtr
Programmer error, we expect an expiration record!
Failed to shift records.
Error setting elevation offsets.
Begin.
Too few points.  End.
temperature,%f,bias.x,%f,bias.y,%f,bias.z,%f,deleted,1
temperature,%f,bias.x,%f,bias.y,%f,bias.z,%f,deleted,0
End.
CLMM, m_fSkipRMSECheckForScalingEntryThresholds,%{public}d
CLMM, holdCourseEngaged,%d,fabsCourseDiffWithPriorSnap,%.1lf,rawCourseUnc,%.1lf,newCourseUnc, %.1f
%.1lf CLMM, high course rate,course,%.1lf,priorCourse,%.1lf,speed,%.1lf,fabsCourseRate,%.1lf
CLMM, course,%.1lf,courseUnc,%.1lf,lastSnapCourse,%.1lf,speed,%.1lf,acrossTrack,%.1f,onRoad,%d,widthUsed,%.1lf
CLMM, Detected course swing after a recent dismount,intervalSinceDismount,%.1lf
CLMM, holdCourse,engaged, large course diff when static,fabsCourseDiffWithPriorSnap,%.1lf
CLMM, holdCourse,engaged,%d,speed,%.1lf,distance,%.1lf
CLMM, holdCourse,using prior snap,course,%.1lf,courseUnc,%.1lf,fabsCourseDiff,%.1lf
CLMM, varFactorCheck,oldOffRoadCount,%d,newOffRoadCount,%d
CLMM, courseCheck,oldOffRoadCount,%d,newOffRoadCount,%d
CLMM, stopSnapping,timeout,dT,%.1lf,threshold1,%.1lf,threshold2,%.1lf,static,%d
CLMM, stopSnapping,distance > %.0lfm,Intersection,%d
CLMM, jumpDistanceCheck,oldOffRoadCount,%d,newOffRoadCount,%.0f
CLMM, stopSnapping,varFactor,%.1lf,threshold,%.1lf
CLMM, stopSnapping,offRoadCount,%d,threshold,%.0f
CLMM, stopSnapping,isAmbiguous,1,acrossTrack,%.1lf,acrossTrackThreshold,%.1lf
CLMM, reseting offRoadCount,%d
CLMM, startSnapping
#Warning CLMM, NULL road
failed to write VO2MaxInput entry, error %d
CL: CLCellTilesManager::onClientNotification
{"msg%{public}.0s":"CLCellTilesManager::onClientNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLCellTilesManager::onDataProtectionNotification
{"msg%{public}.0s":"CLCellTilesManager::onDataProtectionNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLCellTilesManager::onCompanionNotification
{"msg%{public}.0s":"CLCellTilesManager::onCompanionNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLCellTilesManager::onStatusNotification
{"msg%{public}.0s":"CLCellTilesManager::onStatusNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLCellTilesManager::onLocationNotification
{"msg%{public}.0s":"CLCellTilesManager::onLocationNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLCellTilesManagerExternal::onCleanupAgedTiles
{"msg%{public}.0s":"CLCellTilesManagerExternal::onCleanupAgedTiles", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CLMM, not matching, activity context, running
CLMM, not matching, activity context, walking, confidence, %d
CLMM, not starting matching due to low speed threshold,speed,%.3lf,thres,%.3lf
CLMM,no TEPA,isTunnel,%d,isSnapUsable,%d,lastAssistanceTime,%.1lf
CLMM,TEPA,outgoing reached max iterations,%d
CLMM,no TEPA,multi-outbound,%d
CLMM,TEPA,incoming reached max iterations,%d
CLMM,no TEPA,multi-inbound,%d
CLMM,%.1lf,TEPA,%d,lat,%{private}.7lf,lon,%{private}.7lf,alt,%.1lf,vUnc,%.1lf,tunnelLength,%.1lf,distFromCurrentParticle,%.1lf,travelledPercentage,%.1lf,iterCountOut,%d,iterCountIn,%d
CLMM,%.2lf,NotPropagating,isTunnel,%d,isSnapUsable,%d,particleTime,%.2lf,particleTimeOut,%.1lf,speed,%.2lf,speedTime,%.2lf,speedTimeOut,%.1lf,speedLimit,%.1lf
CLMM,%.2lf,NotPropagating, shifting is required but accessory is outputting  unshifted coordinates
CLMM,%.2lf,NotPropagating,time lower than particleTime, %.2lf
CLMM,%.2lf,limit distance to propagate,orig,%.1lf,new,%.1lf
CLMM,NotPropagating,roadsAtIntersection returned false
CLMM,NotPropagating,multi-outbound,%lu,intersection within the distance,%.2lf, needed to be travelled returned
CLMM,NotPropagating,moveOnRoad returned false
CLMM,NotPropagating,NULL road
CLMM,NotPropagating,solution moved away from tunnel
CLMM,%.2lf,Propagating,lat,%.8lf,lon,%.8lf,course,%.8lf,speed,%.1lf,speedLimit,%.1lf
CLMM, Constructor, fUseSpeedCheckForDOT,%{public}d,fMaxDistanceForTIntersectionForDOT,%{public}.1lf
CLMM, Unexpected out of bounds array access attempt
CLMM, Assessing candidates
CLMM, NULL road, bad candidate
CLMM, interpolateOnRoad returned false, determining mean road position
CLMM, Time,%.1lf,candidate,roadID,%llu,fwd,%d,countAroundMean,%d
CLMM, roadsAtIntersection returned false, searching for connected candidates
CLMM, unexpected incomingCount < 1
CLMM, Time,%.1lf,roadID,%llu,incoming,countAroundMean,%d
CLMM, Time,%.1lf,combinedBest,roadID,%llu,incomingCount,%d,outgoingCount,%d
CLMM, interpolateOnRoad returned false, determining outgoing road position
CLMM, Time,%.1lf,roadID,%llu,no particles after the intersection
CLMM, Time,%.1lf,roadID,%llu,isCombined,%d,isMulti,%d
#Warning CLMM, %.1lf,detected stuck,alongTrackRawToSnap,%.1lf,deltaPosChange,%.1lf,deltaSnapChange,%.1lf,thresholdDiff,%.1lf
CLMM, %.1lf,isMovingAway,%d,deltaPosChange,%.1lf,deltaSnapChange,%.1lf,thresholdDiff,%.1lf
#Warning CLMM, Position jump(m),%.1lf,dT(s),%.1lf
CLMM,%.1lf,predictionAndUpdate, distance,%.1lf,distBasedOnSpeed,%.1lf,distBasedOnPos,%.1lf
CLMM, dT2 limited,from,%.1lf,to,%.1lf
#Warning CLMM, unexpected,dT,%.1lf,minMoreThan,0,threshold1,%.1lf,threshold2,%.1lf
CLMM, railway search, roadsWithinDistance returned false
CLMM, railwayParticle,timestamp,%.3lf,lat,%.8lf,lon,%.8lf,course,%.3lf,rseg,%lld
CLMM, prediction,NrParticles,%d,NrStandard,%d,NrNew,%d,NrPriorIntersectionParticles,%d,NrNewAlternateCandidateNoiseParticles,%d,NrNewFwdIntersectionParticles,%d,NrNewBiasedToPrior,%d,NrNewAmbiguous,%d,NrNewRouteParticles,%d
CLMM, moveOnRoad returned false, standard particles
CLMM, moveOnRoad returned false, prior intersection particles
CLMM, moveOnRoad returned false, fwd intersection particles
CLMM, moveOnRoad returned false, prior snap particles
CLMM, moveOnRoad returned false, alternate ambiguous particles
CLMM, NULL road
CLMM, Unexpected particle with snapLat == snapLon == 0
#Warning CLMM, totalScore<=0,%.1lf
CLMM, resample
CLMM, Unexpected number of particles after resampling,%d
CLMM, extractSolution
CLMM, Unexpected bestCount<=0
CLMM, Unexpected no best candidate found
CLMM, Unexpected. There should be an outgoing road
CLMM, Unexpected NULL outgoing road candidate
CLMM, Unexpected outgoing snapLat==snapLon==0
CLMM,Time,%.1lf,snapCourse,%.2lf,outgoingSnapCourse,%.2lf, crumbCourse,%.2lf, outgoingDistanceFromIntersection,%.2lf,outgoingCondition,%d,crumbCourseUnc,%.2lf,significantCourseChange,%d,isCourseAligned,%d, isMeanCandidateAlignedWithCourse,%d
CLMM, Time,%.1lf,exit distance check,distance,%.2lf,exitDistance,%.2lf
CLMM, Time,%.1lf,outgoing condition,%d
CLMM, %.1lf, Using outgoing,incomingID,%lld,outgoingID,%lld
CLMM, %.1lf, Using particle on outgoing,incomingID,%lld,outgoingID,%lld
CLMM, %.1lf, bestParticleRoadID,%lld
CLMM, ambiguous solution not detected,fabsCourseDiff,%.1lf,acrossTrack,%.1lf,ratio,%.3lf,alongTrackToAlt,%.1lf
CLMM, ambiguous solution detected,fabsCourseDiff,%.1lf,acrossTrack,%.1lf,ratio,%.3lf,alongTrackToAlt,%.1lf
CLMM, ambiguous solution hysteresis
CLMM, dismounted recently,doNotSnapCourse,%d
CLMM, distToNextMulti,%.1lf, distFromPriorCrumb,%.1lf
CLMM, not snapping course,reason,distanceToIntersection,%.1lf
CLMM, not snapping course,reason,at intersection,fabsCourseDifference,%.1lf
CLMM, not snapping course,reason,turning,fabsCourseDifference,%.1lf
CLMM, %.1lf, snapping course, reason, gps course not reliable,%.1lf,fabsCourseDiffWithPriorSnap,%.1lf
CLMM, %.1lf, overwriting unreliable GPS course, static case, priorCourse,%.1lf, newCourse,%.1lf
CLMM, %.1lf, snapping course, reason, gps course flipping at low speeds,%.1lf,fabsCourseDiffWithPriorSnap,%.1lf
CLMM, %.1lf, overwriting unreliable GPS course, low speed case, priorCourse,%.1lf, newCourse,%.1lf
CLMM, adjustSolutionforRoadWidth
CLMM, performPartialMatching
CLMM, partial snapping,poorVarFactorCount,%d,weightGPS,%.2lf,weightSnap,%.2lf
CLMM, roadsWithinDistance returned false
#Warning CLMM, Unexpected roadsWithinDistance returned empty list
CLMM, Unexpected NULL road
#Warning CLMM, Unexpected roadsWithinDistance returned only railways
CLMM, prepareSeeding
CLMM, Unexpected crumb lat==lon==0
CLMM, Unexpected crumb snapLat==snapLon==0
CLMM, Unexpected maxDistance,%{public}.1lf
CLMM, including railway
CLMM, assessMatchAndNeedForReseed
CLMM, postEvaluateMatch,%s
CLMM, Reseeding due to varFactor,%.1lf,max,%.1lf
CLMM, Reseeding due to badMatchCount,max,%d
CLMM, Reseeding due to Neff
CLMM, Reseeding due to stuck at dead-end while observations move away
CLMM, reseed
CLMM, Unexpected number of particles after resampling,%{public}d
CLMM, not matching, speedMps,%.1lf,threshold,%.1lf
CLMM, matching, routetime,%.1lf
CLMM, aPriori,%s
CLMM, %.1lf, not matching
CLMM, opportunistic tile download only, favorable GPS conditions
CLMM, opportunistic tile download only, high speed threshold
CLMM, match,%.1lf, allowsNetworkUsage, %d
#Warning CLMM, Time difference between updates is zero. Update ignored.
CLMM, %.1lf,hopping check,connecting roads,%d, current road %lld,prior road %lld
CLMM, %.1lf,hopping check,prior road, %lld, connected to the incoming road, %lld, of the current solution road, %lld
CLMM, %.1lf,hopping between roads detected,reset,%d,priorfullSnapCourse,%.1lf,currentFullSnapCourse,%.1lf,priorId,%llu,currentId,%llu
CLMM, holdCourse engaged but not snapping course
CLMM, aPosteriori, %s
CLMM, no DOT, course is not aligned
CLMM, across track too large, not suitable DOT assistance
CLMM,%.1lf,lat,%.8lf,lon,%.8lf,alt,%.2lf,course,%.1lf,snapLat,%.8lf,snapLon,%.8lf,snapCourse,%.1lf,horizontalError,%.2lf,hunc,%.2lf,ratio,%.2lf
CLMM, %.1lf, not matching, unable to compute snap from raw positions
CLMM, %.1lf, New Snap Coordinates,%s,inSnapLat,%.8lf,inSnapLon,%.8lf,outSnapLat,%.8lf,outSnapLon,%.8lf
CLMM, no DOT,feedback interval check
CLMM, no DOT,frc,0
CLMM, no DOT, too close to prior intersection
CLMM, no DOT, course not aligned to full snap
CLMM, no DOT, assessParallelRoadsWithinDist returned false, unexpected
CLMM, no DOT, too close to a road with similar course
CLMM, no DOT, too close to next intersection
CLMM, no DOT, too slow when nearing intersection
CLMM, no DOT, too close large road direction change
CLMM, no DOT, computeSnapCoordinatesFromRawGPSCoordinates lookBehind returned false
CLMM, no DOT, predicted point is too close to intersection
CLMM, Unexpected calculateNewPosUsingAcrossTrack fail
CLMM, no DOT, current particle within the stopDistanceFromIntersection
CLMM, moveOnRoad returned false, DOT particle assistance
CLMM, no DOT, computeSnapCoordinatesFromRawGPSCoordinates predicted returned false
CLMM, DOT,%.1lf,lat,%.7lf,lon,%.7lf,course,%.1lf,courseUnc,%.1lf,rw,%.1lf,startLat,%.7lf,startLon,%.7lf,length,%.1lf,speed,%.3lf,isOneWay,%d,isRailWay,%d,isTunnel,%d,isBridge,%d,distFromIntersection,%.1lf
CLMM, MMPA,%.1lf,lat,%.7lf,lon,%.7lf,a,%.2lf,b,%.2lf,az,%.3lf,course,%.3lf
CLMM, TBA,roadsWithinDistance returns query failed,lat,%{private}.8lf,lon,%{private}.8lf,searchRadius,%{public}.1lf
CLMM, TBA,lat,%{private}.8lf,lon,%{private}.8lf,unc,%{public}.8lf,searchRadius,%{public}.1lf,isCloseToTunnel,%{public}d,isCloseToBridge,%{public}d,isTunnel,%{public}d,isBridge,%{public}d
CLActivityLogger read %s as CFStringRef failed
CLActivityLogger managed should enable data collection setting is %s.
#Warning CLActivityLogger Failed to get data collections enabled setting. It may not have been set yet.
CLActivityLogger exporting %s is disabled MotionMetricsExportInterval, %d, MotionMetricsExportTimerInterval, %d
CLActivityLogger should enable data collection is is %s.
CLActivityLogger exporting %s is disabled 
CLActivityLogger exporting %s is already enabled 
CLActivityLogger exporting %s is only enabled in internal build
CLActivityLogger exporting %s: MotionMetricsExportTimerInterval = %d, MotionMetricsExportInterval = %d
CLActivityLogger exporting %s is %f, currentTime is %f, next dumping time is %f, %s
CLActivityLogger exporting %s metrics with OSAWriteLogForSubmission
#Warning CLActivityLogger failed to submit iOS data analysis with type kOSAProblemTypeMotionState
CLActivityLogger exporting timer enabled 
CLMM, UseFullSnap, %{public}d
CLMM, enableDotGpsFeedback,%{public}d
CLMM, ForceNetworkUsage %{public}d
CLMM, DisallowNetworkUsage %{public}d
CLMM, calling match()
CLMM, shift() returned false
CLMM, match() returned false
CLMM,TBA,setTunnelBridgeAssistance,lat,%{private}.8lf,lon,%{private}.8lf,isCloseToTunnel,%{public}d,isCloseToBridge,%{public}d,isTunnel,%{public}d,isBridge,%{public}d
@WsbReproc, inrange, %{public}.1f, count, %{public}d, dt, %{public}d
@WsbReproc, discard, %{public}.1f, count, %{public}d
@WsbReproc, remain, groups, %{public}lu, unknownAPs, %{public}lu, deleted, %{public}d
{"msg%{public}.0s":"size of batched locations and scan buffer groups must be equal", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
{"msg%{public}.0s":"inconsistent decisions made on when to NOT perform wifi scan", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
{"msg%{public}.0s":"inconsistent decisions made on when to perform wifi scan", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
WIFI_LOC, scan request blocked
TlurEmer, Request, %d, urgent, %d, tte, %.1f, type, %s
TlurAssoc, Request, %d, urgent, %d, type, %s
@WsbReproc, drops, groups, %d, aps, %d
@WsbALS, settime, empty, %{public}.1f
@WsbReproc, update, groups, %{public}lu, unknownAPs, %{public}lu
TlurEmer, unexpected emergency state, processScanResult, %d, WARNING
@WifiFlow, satisfied, %{public}d, %{public}s
{"msg%{public}.0s":"#post-wifi-position-calculation-state-update, stop criteria calculation", "data":%{private, location:escape_only}s}
#post-wifi-position-calculation-state-update, location update not in progress, will not issue scan
#post-wifi-position-calculation-state-update, #emergency location update in progress, skipping state transition logic
#post-wifi-position-calculation-state-update, previous decision made to skip using wifi scan, skipping state transition logic
#post-wifi-position-calculation-state-update, stop criteria has been satisfied
@WifiFlow, locreq, nextstage, %{public}s, current, %{public}s
{"msg%{public}.0s":"#post-wifi-position-calculation-state-update, failed to achieve an accurate wifi location", "number_of_requested_scans":%{public}d}
{"msg%{public}.0s":"#post-wifi-position-calculation-state-update, valid computed location, but no post location calculation state update", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
no app proxy available for %{public}s
App foregrounded for %.2fs.  Post %s (%d), pid, %d, bundleId, %s
cannot find SBApplicationStateKey
unknown application state %{public}d
failed to retrieve pid
failed to retrieve bundle ID
Post Application State Change Notification, %d, %s, pid, %d, bundleId, %s
cannot find bundle ID for %{public}d
#Warning no app type available for %s
{"msg%{public}.0s":"Attempted to locate companion placeholder bundle on a non-watch device", "bundleId":%{public, location:escape_only}s}
CL: CLAppMonitor::onApplicationStateChanged
{"msg%{public}.0s":"CLAppMonitor::onApplicationStateChanged", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLAppMonitor::onApplicationRegistered
{"msg%{public}.0s":"CLAppMonitor::onApplicationRegistered", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLAppMonitor::onApplicationUnregistered
{"msg%{public}.0s":"CLAppMonitor::onApplicationUnregistered", "event":%{public, location:escape_only}s, "this":"%{public}p"}
Start active dynamic Wsb
Stop active dynamic Wsb
Received kNotificationPower, isWifiPowered, %d
Received kNotificationScanCache
Unknown notification received, %{public}d
CL: CLTransitWsbClient::onWifiNotification
{"msg%{public}.0s":"CLTransitWsbClient::onWifiNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CLProtobufSerializer - could not read device serial number
CLProtobufSerializer - could not obtain UTC time
CMStrideCalRecorderDb init
StrideCalHistory table doesn't even exist
StrideCalDb (%f,%d,%f,%f,%f,%f,%f,%d,%d,%f,%f,%d).
Started session type,%d,startTime,%f,activity,%s
Stopped session type,%d,startTime,%f,activity,%s
CL: CLMotionStateObserver::onCompanionNotification
{"msg%{public}.0s":"CLMotionStateObserver::onCompanionNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLMotionStateObserver::onFitnessTrackingNotification
{"msg%{public}.0s":"CLMotionStateObserver::onFitnessTrackingNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
Period Estimate Update,period,%f,confidence,%f,timestamp,%f,startTime,%f
ClassificationResult,%d,startTime,%f,timestamp,%f
Swimming device orientaion set,wrist,%d,crown,%d
Classification,%s,%d,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f
Assertion failed: i < N, file /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Oscar/Math/CMVector.h, line 272,invalid index %zu >= %zu.
TILE: fMaxTileSecurityAge, %.1lf
TILE: fEncryptionGracePeriod, %.1lf
TileCell, isActive, %{public}d
TILE: CLCellTilesManager::shutdown
TileCell, unexpected, dataprotection, %{public}d
TileCell, kNotificationEncryptedDataAvailability, %d, changed, %d
@TileEvent, all, locked, %{public}d
TileCell, unexpected, location, %{public}d, %{public}s
TileCell, kNotificationLocationLeech, fLastLocationDownloadCheckTimestamp, %{public}.1lf, isForceLocationCheck, %{public}d, fLastLocationProtectionCheckTimestamp, %{public}.1f, leech location, %{private}s
TileCell, unexpected, status, %{public}d
TileCell, kNotificationReachability, %{public}d, was, %{public}d
TileCell, kNotificationReset
TileCell, kNotificationLocationServicesStatus, %{public}d
TileCell, unexpected, companion, %{public}d
TileCell, Timer, %{public}d, locked, %{public}d
TileCell, Cleanup
TILE: stats: getTileStats, cellTilesDownloaded, %d, cellTilesDownloaded3G, %d, cellTilesCached, %d
TileCell, listAvailableFilesAllTypes, indexed, %{public}d
TileCell, clear on index
TileCell, listAvailableFilesAllTypes, done
TileDl, ignore before first unlock, fDataProtectionEnabled, %{public}d
@TileDl, requestDownload, type, %{public}d, %{private}s, not active
TileDl, requestDownload, type, %{public}d, %{public}s, location, %{private}14.8lf, %{private}14.8lf, id, %{private}s, reachbility, %{public}d
@TileDl, cell, failed criteria
@TileDl, kNotificationTileWasDownloaded, tileid, %{private}s, tileHeaderParsed, %{public}d, tileType, %{public}d, serverUrl, %{private}s, serverFilename, %{private}s, absoluteLocalFilename, %{private}s, size, %{public}d, current, %{public}d
TileCts, cell, registering, interval, %{public}.2f, grace, %{public}.2f
TileCts, cell, request, %{public}d, state, %{public}ld
TileCts, cell, setting, DONE
TileCts, cell, failed, DONE, %{public}ld
TileCts, cell, complete, state, %{public}ld
TileCts, cell, setting, DEFER
TileCts, cell, failed, DEFER, %{public}ld
TILE: no cell tiles for, %s
CellTile, getLocationByCell, un-supported cell type, %{private}s, #CloneMe
TILE: getLocationByCell, tiles, %d, are not active on this device
TILE: getLocationByCell, isInKnownCache, %d, isInUnKnownCache, %d
TILE: getLocationByCell, using locationHint, %s
TILE: getLocationByCell, out of boundary, %s
TILE: getLocationByCell, search neighbor, step, %2d, y, %+2d, x, %+2d
TILE: getLocationByCell, search remaining tiles, %s
TileCell, clearLocationInformation
{"msg%{public}.0s":"CLCellTilesManager::removeAllTiles", "event":%{public, location:escape_only}s, "begin_mach":%{public}llu, "end_mach":%{public}llu, "elapsed_s":"%{public}.09f", "type":%{private}d}
TileCell, %{public}s, removeAllTiles, size, %{public}lu
TileCell, deleteAgedTiles, dispatch, %{public}s
TileCell, deleteAgedTiles, start, name, %{public}s, size, %{public}lu
{"msg%{public}.0s":"CLCellTilesManager::agedTileDeleter", "event":%{public, location:escape_only}s, "begin_mach":%{public}llu, "end_mach":%{public}llu, "elapsed_s":"%{public}.09f", "now_s":"%{public}.09f"}
TILE: deleteAgedTiles, age, %.1lf, %.1lf, tileDataAge, %.1lf, %.1lf, corrupt, %d, isDelete, %d, tile, %s
{"msg%{public}.0s":"CLCellTilesManager::agedTileDeleter", "deleted":%{private}u}
#Warning TILE: updateProtectionClass, called on when not locked
TILE: updateProtectionClass, start, %s, reason, %s, isAboutToLock, %d, locationAge, %.1lf, doLocCheck, %d, sizes, %lu, %lu, knownLocation, %s
CellTile, updateProtectionClass, failed unlocking tileid, %{private}s, size, %{public}lu, #CloneMe
updateProtectionClass, lockstats, %s, lock, %d, unlock, %d, size, %lu
CellTile, tile ptr is NULL, #CloneMe
TILE: updateProtectionClass, location moved, locking tileid, %s
CellTile, updateProtectionClass, unable to lock tile, locking tileid, %{private}s, #CloneMe
TILE: updateProtectionClass, clearing unprotected map
CellTile, Unable to lock all unprotected files!, #CloneMe
TILE: updateProtectionClass, end, %s, total, %lu, numOfUnProtectedTiles, %d
@TileEvent, %{public}s, locking, %{public}d, readable, %{public}lu
TILE: updateProtectionClass, done, isAboutToLock, %d, numOfUnProtectedTiles, %d
TILE: tileDecompressionCompleted, added to unprotected list, tileid, %s, size, %lu
@TileList, %{public}s, unprotect, llsw, %{private}.2lf, %{private}.2lf, %{public}s, size, %{public}lu
TileTimer, skip, location, %{public}d
TileTimer, schedule, reason, %s, locationAge, %.1lf, secondsFromNow, %.1lf, lastKnownLocation, %s
TileTimer, cancel
CellTile, Invalid tile id!, #CloneMe
CL: CLCellTilesManager::onTimerFired
{"msg%{public}.0s":"CLCellTilesManager::onTimerFired", "event":%{public, location:escape_only}s, "this":"%{public}p"}
TileCts, cell, state, CHECK_IN
TileCts, cell, state, RUN
TileCts, cell, setting, CONTINUE
TileCts, cell, failed, CONTINUE, %{public}ld
CACHE: name, %s, clear, size, %lu
CACHE: name, %s, deleteAgedEntries, size, %lu
CACHE: name, %s, evict, aged, age, %.1lf, size, %lu, %lu, key, %s
CACHE: name, %s, evict, size, age, %.1lf, size, %lu, %lu, key, %s
CACHE: name, %s, getEntry, end, size, %lu, %s, entry, %s
#Warning CACHE: name, %s, colision...
CACHE: name, %s, bad set iterator - recovering, size, %lu, %s
CACHE: name, %s, cache too large, evicting, size, %lu
CACHE: name, %s, addEntry, end, size, %lu, %s, entry, %s
PAUSE: Constructing CLAutopauseProviderConcrete
PAUSE: Starting auto-pause monitoring.
PAUSE: Stopping auto-pause monitoring.
PAUSE: Batched notification response in auto-pause with %zu locations.
PAUSE: Pause state changed, notifying - fitness: %d navigation: %d other: %d
#Warning PAUSE: unexpected notification %d
#Warning PAUSE: Unknown notification %d
PAUSE: Autopause provider has no location updates for 15 minutes.
PAUSE: got kNotificationSleep.
PAUSE: got kNotificationWake.
CL: CLAutopauseProviderConcrete::onLocationNotification
{"msg%{public}.0s":"CLAutopauseProviderConcrete::onLocationNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLAutopauseProviderConcrete::onMotionNotification
{"msg%{public}.0s":"CLAutopauseProviderConcrete::onMotionNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLAutopauseProviderConcrete::onStatusNotification
{"msg%{public}.0s":"CLAutopauseProviderConcrete::onStatusNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLAutopauseProviderConcrete::onLocationTimer
{"msg%{public}.0s":"CLAutopauseProviderConcrete::onLocationTimer", "event":%{public, location:escape_only}s, "this":"%{public}p"}
unexpected,vehicleSpeed < 0
EnableLocationServices,Success,AllChecksPassed
EnableLocationServices,Fail,AllLocationServicesDisabled
EnableLocationServices,Fail,PedometerCalibrationLocationServicesDisabled
EnableLocationServices,Success
StrideCal - Register tracks activity %d, override action, %d, session, %@
@TileDl, isCurrent, %{public}d, inside, %{public}d, %{public}d, locknown, %{public}d, %{public}d, %{public}d, %{public}d, tile, %{private}s, delta, %{public}.02f
@TileList, %{public}s, duplicate, llsw, %{private}.2lf, %{private}.2lf, %{public}s, size, %{public}lu
TILE: allocate tile type, %d
TileMgr, failed to allocate a tile for type, %{public}d, #CloneMe
No viable convertion for mode 0x%x
No viable convertion for notification 0x%x
CLDeviceMotion::addDeviceMotionDispatcher adding dispatcher with property: %s
CLDeviceMotion::removeDeviceMotionDispatcher removing dispatcher with property: %s
CLDeviceMotion::minimumUpdateIntervalChanged,notification,%d,minimumUpdateInterval,%f
CLDeviceMotion::numberOfClientsChanged notification:%d, from:%zu, to:%zu
numberOfClients GyroOnly:%zd, 3AxisDynamicGyro:%zd, 6Axis:%zd, 6AxisThrottledGyro:%zd, 9Axis:%zd, 9AxisWithNorthReference:%zd, BuildGYTT:%zd
{"msg%{public}.0s":"9Axis should be running", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
Device motion mode (%d) not supported, can't process client change
Unsupported mode (%d). Returning.
Unsupported mode (%d). Compass not found. Returning.
Unsupported mode (%d). Couldn't do DeviceMotion without Gyro. Returning.
Starting device motion, mode=0x%{public}x,useAccelerometer=%{public}d,useGyro=%{public}d,useCompass=%{public}d,fUseNorthRef=%{public}d,buildingGYTT=%{public}d
Stopping device motion, mode=0x%x
Device motion mode (%d) not supported, unable to disable sensor fusion
shouldILog returned %d for tag %d, last %f now %f, threshold is %lu
TILE: fDefaultMaxDownloadListSize, %d
@TileEvent, wifi, locked, %d
TILE: fDefaultWifiTilesServerUrl, %s
TILE: fDefaultWifiTilesRootDirectory, %s
TILE: fDefaultEncryptionGracePeriod, %.1lf
TILE: fDefaultDisableTilesWhileLocked, %d
TILE: onDataProtectionNotification, %p, notification, %d
TILE: onDataProtectionNotification, kNotificationEncryptedDataAvailability, was, %d, now, %d, availability, %d
@GtsLock, lock, unprotected, %{public}lu, total, %{public}lu
TILE: updateProtectionClass, skip on unlock
TILE: clearLocationInformation
TILE: onClientNotification, %p, notification, %d
TILE: kNotificationReset
TILE: kNotificationLocationServicesStatus, areLocationServicesEnabled, %d
@GtsPair, LS Toggle, %{public}d
TILE: location services off, remove all the tiles
TILE: deleteAgedDownloadItems, start
TILE: deleteAgedDownloadItems, delete, age, %.1lf, %.1lf, tile, %s
@TileReq, wifi, rmlist, llsw, %{private}.2lf, %{private}.2lf, aged, size, %{public}ld
TILE: deleteAgedDownloadItems, deleted, %u, done
TILE: deleteAgedTiles, start, name, %s, size, %lu
Missing wifi #tile, x, %{private}d, y, %{private}d, #CloneMe
Deleted wifi #tile isFileExistsOnServer is false. x, %{private}d, y, %{private}d, #CloneMe
@TileList, wifi, delete, llsw, %{private}.2lf, %{private}.2lf, limits, size, %{public}lu
TILE: deleteAgedTiles, end, numOfDeletedTiles, %lu, remain, %lu, name, %s
TILE: isCurrentTile, degreesFromCornerLat, %.8lf, degreesFromCornerLon, %.8lf, inside, %d, %d, isCurrentTile, %d, %d, isCurrentLocationKnown, %d, %s
TILE: dispatch, deleteAgedTiles, for, %s
TILE: deleteAgedTiles, fTilesToDownload
TILE: cancelAllDownloads, planned, %lu
TILE: removeAllTiles, cleaning map, %d, %s
@TileList, wifi, delete, llsw, %{private}.2lf, %{private}.2lf, all, size, %{public}lu
TILE: removeAllTiles, end, name, %s, size, %lu, unprot size, %lu, downloadSize, %lu
TILE: listTilesDirectory, tileType, %d, %s
wifi #tiles, populateTilesSet
@TileEvent, wifi, indexed, %{public}lu
{"msg%{public}.0s":"CLWifiTilesManager::lockAllOnDiskWifiTiles", "event":%{public, location:escape_only}s, "begin_mach":%{public}llu, "end_mach":%{public}llu, "elapsed_s":"%{public}.09f", "now_s":"%{public}.09f"}
{"msg%{public}.0s":"lock on-disk wifi #tiles", "numberOfOnDiskTiles":%{public}ld}
TILE: refreshTilesDataIfNeeded, isTileDataExpired, %d, isShouldBeDownloaded, %d, tile, %s
TILE: checkDownloadSchedule, location services disabled - no tile downloads
TILE: checkDownloadSchedule, index is not available until first unlock, fDataProtectionEnabled, %d
TILE: checkDownloadSchedule, no tiles while locked
TILE: checkDownloadSchedule, no data connectivity, avoiding downloads, reachability, %d
TILE: checkDownloadSchedule, no download on none broadband cellular connections
TILE: checkDownloadSchedule, checking, numOfActiveDownloads, %u, small, %d, large, %d, realtime, %d, wifiPower, %d
TILE: checkDownloadSchedule, numOfActiveDownloads, %d, not scheduling more
TILE: checkDownloadSchedule, both download requests are already in use
TILE: checkDownloadSchedule, both download requests null, shutdown?
TILE: checkDownloadSchedule, isLocationValid, %d, isDeviceLocked, %d
TILE: checkDownloadSchedule, lastLocation, %s
TILE: checkDownloadSchedule, chose, downloadState, %s
TILE: checkDownloadSchedule, started downloading, numOfActiveDownloads, %d, tile, %s
@TileReq, wifi, start, llsw, %{private}.2lf, %{private}.2lf, reach, %{public}d
TILE: checkDownloadSchedule, numOfActiveDownloads, %d, tilesToDownload, %lu, small, %d, large, %d
TILE: checkDownloadSchedule, kNotificationNoActiveDownloads
TILE: checkDownloadSchedule, rule, isCurrent, isAllowCellularIfCurrent,  IsOkToDownloadRealtime, %s
TILE: checkDownloadSchedule, rule, isCurrent, fDownloadCurrentTileOverCell, IsOkToDownloadRealtime, %s
TILE: checkDownloadSchedule, rule, isCurrent, IsOkToDownloadLarge, %s
TILE: checkDownloadSchedule, rule, isAllowCellularIfNotCurrent, IsOkToDownloadRealtime, %s
TILE: checkDownloadSchedule, rule, IsOkToDownloadLarge, %s
TILE: tileDownloadCompleted, tile, %s, download done, success, %d, NSURLErrorCode, %d, tileDoesNotExist, %d, reachability, %d, locked, %d, fileSize, %d
@TileReq, wifi, downloaded, llsw, %{private}.2lf, %{private}.2lf, success, %{public}d, NSURLErrorCode, %{public}d
WifiTile, where did this download request come from?, download, %{public}p, #CloneMe
WifiTile, tileDecompressionCompleted, no tile for download, %{public}p, #CloneMe
TILE: tileDecompressionCompleted, tile, %s, decompress done, tileDownloadWasSuccessful, %d, NSURLErrorCode, %d, tileDoesNotExist, %d, reachability, %d
TILE: tileDecompressionCompleted, tile, %s, reachability, %d, isLocked, %d, downloadDuration, %.1lf, downloadState, %s, progress, s, %d, l, %d
TILE: tileDecompressionCompleted, replacing from, %s
TILE: tileDecompressionCompleted, replacing to, %s
TILE: tileDecompressionCompleted, added, tileid, %s, tilesMap.size, %lu
@TileReq, wifi, mapped, llsw, %{private}.2lf, %{private}.2lf
@TileList, wifi, add, llsw, %{private}.2lf, %{private}.2lf, download, size, %{public}lu
TILE: kNotificationTileWasDownloaded, tileid, %s, tileHeaderParsed, %d, tileType, %d, serverUrl, %s, serverFilename, %s, absoluteLocalFilename, %s
TILE: _tileDownloadCompleted, success, %d
TILE: getNumOfActiveDownloads, tile, %s, is being downloaded, %d, total, %d, download, %p
GnrTiles, block request
TILE: requestDownload, type, %d, %s, not active
@TileReq, wifi, request, llsw, %{private}.2lf, %{private}.2lf
TILE: requestDownload, type, %d, %s, location, %14.8lf, %14.8lf, id, %s, reachbility, %d, details, %s
TILE: requestDownload, index is not available until first unlock, fDataProtectionEnabled, %d
TILE: requestDownload, tileId=%s isAlreadyDownloaded, %d, isBeingDownloaded, %d, shouldDownloadedBasedOnPermissions, %d, isAlreadyDownloaded, %d
TILE: requestDownload, tileid, %s, already available, isUpdateMTimestamp, %d, isShouldBeRefreshed, %d, isBeingDownloaded, %d
TILE: requestDownload, refresh download, %s
TILE: requestDownload, tileid, %s, will be downloaded, details, %s
TILE: requestDownload, tileid, %.8lf, %8lf, will be downloaded, details, %s
@TileReq, wifi, onlist, llsw, %{private}.2lf, %{private}.2lf, center, size, %{public}ld
TILE: requestDownload, out of boundaries, y, %d, x, %d, tile_y, %d, tile_x, %d, neighbourTileID, %s
TILE: requestDownload, y, %d, x, %d, tile_y, %d, tile_x, %d, neighbourTileID, %s
TILE: requestDownload, adding neighbour, %s
@TileReq, wifi, onlist, llsw, %{private}.2lf, %{private}.2lf, neighbor, size, %{public}ld
TILE: deleteTileFile, deleting, tileid, %s
TILE: addToDownloadList, added, %s, fTilesToDownload.size, %lu
TILE: onLocationNotification, index is not available until first unlock, fDataProtectionEnabled, %d
TILE: onLocationNotification, fLastLocationDownloadCheckTimestamp, %.1lf, isForceLocationCheck, %d, fLastLocationProtectionCheckTimestamp, %.1f, leech location, %s
TILE: onLocationNotification, unknown notificaiton, %d, %s
TILE: onStatusNotification, kNotificationReachability, from, %d, to, %d
WifiTile, onStatusNotification, unknown notification, %d, #CloneMe
TILE: cleanUpDownloadList, start, isLocked, %d
TILES: cleanUpDownloadList, download list is too large, %lu
TILE: cleanUpDownloadList, tileid, %s, available on disc, no need to download
TILE: cleanUpDownloadList, done,  isLocked, %d, cleanedFiles, %u
TILE: CLWifiTilesManager::shutdown
TILE: stats: getTileStats, wifiTilesDownloaded, %d, wifiTilesDownloaded3G, %d, wifiTilesCached, %d
WifiTile, invalid tileType, %{private}d, #CloneMe
TILE: location not relevant
@TileList, wifi, add, llsw, %{private}.2lf, %{private}.2lf, rawfile, size, %{public}lu
@TileList, wifi, add, llsw, %{private}.2lf, %{private}.2lf, database, size, %{public}lu
TILE: db to map, %lu, %lu
@TileList, wifi, touch, llsw, %{private}.2lf, %{private}.2lf, time, %{public}.1f
TILE: tileDecompressionCompleted, unable to unlock, tileid, %s, size, %lu
TILE: tileDecompressionCompleted, unlocked tile type, tileid, %s, unlocked, %d
{"msg%{public}.0s":"invalid wifi #tile encountered. now deleting.", "filepath":%{private, location:escape_only}s}
creating the BinaryLog instance
creating fInstance = new CLBinaryLog()
#Notice Logging binary sensor data to %{public}s
Failed to determine if log rotation is needed. errno, %{public}d, %{public}s
#Warning Failed to move aside log file %s to %s (%d)
#Warning Unable to open %s
tagEnabled returns %d for tag %d
PAUSE: Autopause not suppored on this platform, constructing CLAutopauseProviderDummy
PAUSE: Client registered for %s
PAUSE: Client unregistered for %s
Found vo2max calibration override flag,%d 
CalorieHistory,recordId,%d,startTime,%.3f,activityType,%d,userMets,%lf,basalMETs,%f,calories,%lld,basalCalories,%lld
ExerciseMinuteHistory,recordId,%d,startTime,%.3f
UserProfile, Error in user info,heightM,%f
UserProfile, Error in user info,ageYr,%f
UserProfile,runVo2maxVal,%f,runVo2maxFlag,%d,runVo2maxUpdatedFlag,%d,hronsetVo2max,%f,hronsetVo2maxFlag,%d,derivedVo2max,%f,derivedVo2maxFlag,%d,oldVo2max,%f,estimatedVo2max,%f,mergedVo2max,%f,boundedVo2max,%f,doMerge,%d
UserProfile, update completed with result, %{private}@
UserProfile, Number of active vo2max calibrations, %d, first PAL estimate at, %.3f, VO2max delta, %f
UserProfile, read before device unlock
UserProfile, Resetting to defaults for keys, %@
UserProfile, Resetting ActiveVo2Calibration, NumActiveCalibrations, and TimeFirstPAL.
UserProfile, Persistent store not yet initialized 
UserProfile, Unable to read from disk!
fActiveVo2maxOverride has been set to %d
GPS availability at time %lf, companion time, %lf, GPS timestamp, %lf, %d
GPS not available at time %lf
ActivitySpectator,activity{State,%d,Confidence,%d,MountedState,%d,MountedConfidence,%d,exitState,%d,estExitTime,%f,startTime,%f},nataliFeatures{fVectorMagnitude,%f,fEpochType,%d,fStanding,%d,fMachineFrequency,%f,fRowStrokeFrequency,%f,fRowStrokeAmplitude,%f,fRowStrokePower,%f,fPushVectorMagnitude,%f}
Received Onset notification from CatherineNotifier (%f bpm)!
Updating min. HR, %f
UserProfile, Encrypted data availability, was, %d, now, %d, availability, %d
UserProfile, Received from SPU, data protection enabled %d
UserProfile, Forcing a pal update.
UserProfile, Forcing a vo2max clear.
UserProfile, Forcing a vo2max update.
UserProfile, Forcing a run vo2max clear.
UserProfile, Forcing a run vo2max update.
CL: CLNatalimetryNotifier::onCatherineNotification
{"msg%{public}.0s":"CLNatalimetryNotifier::onCatherineNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLNatalimetryNotifier::onDataProtectionNotification
{"msg%{public}.0s":"CLNatalimetryNotifier::onDataProtectionNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLNatalimetryNotifier::onStoredUserInfo
{"msg%{public}.0s":"CLNatalimetryNotifier::onStoredUserInfo", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLNatalimetryNotifier::onSessionTrackerAppLaunchNotification
{"msg%{public}.0s":"CLNatalimetryNotifier::onSessionTrackerAppLaunchNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
#Warning Input, elevation, time rolled back. Delta %f, Previous Time %f, Current Time %f, Always Active %d.
#Warning Input, all-day elevation, time rolled back. Delta %f, Previous Time %f, Current Time %f, Always Active %d.
%s is not ready at, %f, timeout, %f
%s is ready at, %f, timeout, %f
Climbing,deltaElevation,%f,ascentDuration,%f,climbingMets,%f,len,%lu
Climbing,epochMets,%f,bufferLength,%lu
Climbing,epochMets,%f,historicalBufferLength,%lu
CLGyroBiasEstimator removing client %p
CLGyroBiasEstimator unknown client instance %p
CLGyroBiasEstimator adding client %p, sending out cached gyro bias,bias.x,%f,bias.y,%f,bias.z,%f,var.x,%f,var.y,%f,var.z,%f
CLGyroBiasEstimator adding client %p, no cached gyro bias available
CLGyroBiasEstimator,SPUEnabled,%d,BuildingGYTT,%d,NumClients,%lu
AOP/SPU gyro bias not available on this platform.
GyroBiasFit,slope.x,%20.20f,slope.y,%20.20f,slope.z,%20.20f,intercept.x,%20.20f,intercept.y,%20.20f,intercept.z,%20.20f, lastMiniCal,%20.20f
Registering for gyro notifications
Registering for gyro temperature notifications
Registering for magnetometer notifications
Unregistering for gyro notifications
Unregistering for gyro temperature notifications
Unregistering for magnetometer notifications
Notifying clients on temperature update,temperature,%f
GyroBias,time,%f,temperature,%f,bias.x,%f,bias.y,%f,bias.z,%f,dbias.x,%f,dbias.y,%f,dbias.z,%f,var.x,%f,var.y,%f,var.z,%f,client,%p
Warning: Temperature is changing too quickly, clearing GYTT buffers
Warning: Could not insert GYTT because bump was detected.
Bias estimate inserted: bias,%f,%f,%f,variance,%f,%f,%f,temperature,%f
Expected linear fit.
SPUGyroBias,temperature,%f,bias.x,%f,bias.y,%f,bias.z,%f,var.x,%f,var.y,%f,var.z,%f,client,%p
SPU bias estimate inserted: bias,%f,%f,%f,variance,%f,%f,%f,temperature,%f
configuration: wake threshold = %f
Registering with daemon status
Registering with CLAccelerometer
Registering throttledDispatcher with CLAccelerometer
Unregistering with CLAccelerometer
Unregistering throttleDispatcher with CLAccelerometer
detection @ %llu : low %f high %f status %d confidence %d odds %.2f
Failed to add throttled dispatcher
throttled @ %llu: accel = [%.2f %.2f %.2f] = %.2f ? %.2f
Failed to add dispatcher
kNotificationSleep. Turning off on body detector
kNotificationWake. Turning on on body detector
CL: CLOnBodyNotifier6::onDaemonStatusNotification
{"msg%{public}.0s":"CLOnBodyNotifier6::onDaemonStatusNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLOnBodyNotifier6::onAccelerometerData
{"msg%{public}.0s":"CLOnBodyNotifier6::onAccelerometerData", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLOnBodyNotifier6::onThrottledAccelerometerData
{"msg%{public}.0s":"CLOnBodyNotifier6::onThrottledAccelerometerData", "event":%{public, location:escape_only}s, "this":"%{public}p"}
Unable to find index (%{public}d) to value on which we want to build a cluster around!  Returning from function.
Rowing, Speed Model, timestamp, %f, stroke power, %f, strokes amplitude, %f, stroke rate (spm), %f, height (m), %f, gender, %d, speed, %f
Rowing, WR Model, timestamp, %f, stroke speed (m/s), %f, strokes amplitude, %f, weight (KG), %f, METS, %f, fMetsScaling, %f
onElevationPhone,arbiterInput,startTime,%.3f,ascended,%d,descended,%d
onElevationPhone,arbiterOutput,startTime,%.3f,ascended,%d,descended,%d
previouslyPhoneConnected, %d, currentlyPhoneConnected, %d,phoneSupportsElevation, %d
onElevationWatch,arbiterInput,startTime,%.3f,ascended,%d,descended,%d
onElevationWatch,arbiterOutput,startTime,%.3f,ascended,%d,descended,%d
updateElevationSubscriptionClient, number of clients,%d
doEnableTimerAndResetArbiter
doCancelTimerAndResetArbiter
doResetSignificantElevation(const ETimerExpires *event)
doResetSignificantElevationAndResetArbiter
CL: CLElevationController::onMotionStateObserverNotification
{"msg%{public}.0s":"CLElevationController::onMotionStateObserverNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
doResetArbiter
doDisableTimer
Assertion failed: receiver, file /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Oscar/CMLinearTemperatureFit.h, line 27,receiver must not be null..
Received kNotificationWifiLocationBatched, num,%u,Size, %lu
Received unknown notification %d
Skipping new location with invalid coordinate
Skipping new location with invalid rawCoordinate
Skipping new location with coordinate in null-island
Skipping new location with rawCoordinate in null-island
#Warning Last confident location is in future, timestamp,%.03lf
Skipping new location with an older timestamp,%.03lf,cached,%.03lf
Skipping new location, since having recent more confident location
Last confident location not available
Last confident location too old, maxAge = %.1lf
Notifying cached location,num,%u,accuracy,%.01lf,timestamp,%.03lf,lifespan,%.04lf
Received a kNotificationCachedLocationControllerStateUpdate notification, state, %d
Recieved unknown notification %d
CL: CLLastConfidentLocation::onCachedLocationControllerNotification
{"msg%{public}.0s":"CLLastConfidentLocation::onCachedLocationControllerNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
TILE: result: tilestool: TEST_testBinarySearch, entries, %lu, file, %s
TILE: result: tilestool: prog, %3lu, %3lu, ===============> isFound, %d, location, %14.8lf, %14.8lf, entry, %s
TILE: result: tilestool: pass, %d, tests, %lu, %lu
TILE: index entry, %3lu, %3u, %s
TILE: searched, numOfEntries, %u, offsetEntries, %d
TILE: avoid data search
TILE: entry, %3lu, %3u, %3lu, %s, loc, %.8lf, %.8lf, delta, %.5lf, %.5lf, grid, %u, %u
TILE: getLocationByKey, isFound, %d, searchedArea, %d, key, %s
TILE: binarySearchIndex, size, %lu, searchedIndexEntry, %s, %d
TILE: index search, match, %s
TILE: index search, not found
TILE: binarySearchData, search data, isFound, %d, numOfCompares, %u
TILE: ......................................................................., getLocationByKey_mmap, key, %s
TILE: getLocationByKey_mmap, failed to mmap, #CloneMe
TILE: getLocationByKey_mmap, not found in index, a, %u, b, %u, %s
TILE: getLocationByKey_mmap, nothing to search, a, %u, b, %u, %s
TILE: getLocationByKey_mmap, isFound, %d, searchedArea, %u, key, %s, entry, %s
TILE: ......................................................................., getLocationByKey_traverse, key, %s
TILE: getLocationByKey_traverse, prefer local file name because it exists, %s
TILE: getLocationByKey_traverse, isFound, %d, searchedArea, %u, key, %s, entry, %s
TILE: creating directory, %s, ret, %d
Aggregating accel sensor recorder samples.
Aggregating gyro sensor recorder samples.
Record %s data for %f
requested sampling rate of %{public}d is greater than the max allowed of %{public}d
setting desired accel sampling rate to %dhz
Error accessing sensor recorder data from %{private}f, %{private}f
Error occurred while retrieving data record %{private}llu
Wrote %lu meta records across %d data containers to %s
Invalid data type.
Updating %s sampling rate %d, fitness tracking enabled, %d
Updated %s subscription due to invalid time.
Updated %s subscription override due to invalid time.
#error Failed to schedule sensor recorder dump on sysdiagnose trigger because newly scheduled time (%f) < 0
Failed to dump sensor recorder (accel) to disk because fileHandle is nil.
CL: CLSensorRecorderNotifier::onSysdiagnoseTimer
{"msg%{public}.0s":"CLSensorRecorderNotifier::onSysdiagnoseTimer", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLSensorRecorderNotifier::onFitnessTrackingNotification
{"msg%{public}.0s":"CLSensorRecorderNotifier::onFitnessTrackingNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLSensorRecorderNotifier::onSysdiagnoseStarted
{"msg%{public}.0s":"CLSensorRecorderNotifier::onSysdiagnoseStarted", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLSensorRecorderNotifier::onMotionStateUpdate
{"msg%{public}.0s":"CLSensorRecorderNotifier::onMotionStateUpdate", "event":%{public, location:escape_only}s, "this":"%{public}p"}
Attempting to fulfill scan requests,%lu.
Fulfilled scan requests,%d.
Processing events for %lu proximity zones.
Processed %d proximity zone events.
Bluetooth is powered off, no events will be processed.
CL: CLBTLEBeaconProviderMock::onEventSource
{"msg%{public}.0s":"CLBTLEBeaconProviderMock::onEventSource", "event":%{public, location:escape_only}s, "this":"%{public}p"}
Elevation, %f, %f, %d, %d
TrackCalibration,%s,CalData,%s,ElevationAscended,%d,ElevationDescended,%d
{"msg%{public}.0s":"Un-initialized query handler", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
id,%llu,startTime,%lf,eventType,%ld
Started tracking,duration,%.3f
Stopped tracking
CL: CLSpringTrackingNotifier::onDataProtectionNotification
{"msg%{public}.0s":"CLSpringTrackingNotifier::onDataProtectionNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
Error expiring records.
History not accessible
DB UUID un-initialized
Non-existent query record, returning all records.
Error querying records.
{"msg%{public}.0s":"Error setting finished handler.", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
#Warning Overriding BeaconFenceBestEffortScheduleEnabled,%{private}d
#Warning Overriding BeaconFenceBestEffortInterval,%{private}.2f
iB: Adding zone,%{private}s
Invalid region definition for zone monitoring
{"msg%{public}.0s":"iB: Zone already registered", "zone":%{private, location:escape_only}s, "refCount":%{public}d}
{"msg%{public}.0s":"iB: Device doesn't support background monitoring, performing BE zone detection"}
iB: Registering zone,%{private}s, with Bluetooth
iB: Removing zone,%{private}s
{"msg%{public}.0s":"iB: Unregistering zone with Bluetooth, last client", "zone":%{private, location:escape_only}s}
{"msg%{public}.0s":"iB: Decremented zone reference count, still clients", "zone":%{private, location:escape_only}s, "refCount":%{public}d}
#Warning Unable to remove zone,%{private}s, it wasn't found.
iB: Zone detection timer woke up
iB: Received a wake event
iB: Resuming scan, reference count,%{public}d,lastScan,%{private}.0lf,lastScheduled,%{private}.0lf
iB: Scan is already resumed, reference count,%{public}d,lastScan,%{private}.0lf,lastScheduled,%{private}.0lf
iB: Suspending scan, reference count,%{public}d
iB: Scan is already suspended, reference count,%{public}d
iB: Posting notification with proximity devices,%{public}lu
iB: Best effort zone,%{private}s, firstExit,%{private}f, now,%{private}f, has not reached exitThreshold,%{private}f
iB: Best effort zone,%{private}s, subject to exit
{"msg%{public}.0s":"@iB: BE zone state transition", "zone":%{private, location:escape_only}s, "state":%{private}d, "totalZones":%{public}lu}
{"msg%{public}.0s":"iB: Resetting best effort zone exit state", "zone":%{private, location:escape_only}s}
CL: CLBTLEBeaconProviderConcrete::onDaemonStatusNotification
{"msg%{public}.0s":"CLBTLEBeaconProviderConcrete::onDaemonStatusNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLBTLEBeaconProviderConcrete::onZoneDetectionTimer
{"msg%{public}.0s":"CLBTLEBeaconProviderConcrete::onZoneDetectionTimer", "event":%{public, location:escape_only}s, "this":"%{public}p"}
STARK,SpeedTO,isOffsetValid,%d,offsetUncSecs,%.9g,filteredOffsetSecs,%.4lf,machTime,%.4lf,vehicleTime,%.4lf
STARK,GyroTO,isOffsetValid,%d,offsetUncSecs,%.9g,filteredOffsetSecs,%.4lf,machTime,%.4lf,vehicleTime,%.4lf
Removing an alarm which has not been added.
#Warning Invalid trigger.trigger,%u
trigger,%d,duration,%f
Unknown registration requested: %{public}d
Unknown unregistration requested: %{public}d
Attempted to re-register for daemon settings while already registered
#Warning Attempted to unregister for daemon settings while not registered
Attempted to re-register for AppleAccountDidChange while already registered
#Warning Attempted to unregister for AppleAccountDidChange while not registered
CL: CLDarwinNotifier::onSettingsChanged
{"msg%{public}.0s":"CLDarwinNotifier::onSettingsChanged", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLDarwinNotifier::onAppleAccountDidChange
{"msg%{public}.0s":"CLDarwinNotifier::onAppleAccountDidChange", "event":%{public, location:escape_only}s, "this":"%{public}p"}
#Warning Overriding VerboseRangeLoggingEnabled,%{private}d
iB: %{private}s
STATUS,SENSOR,Time,%.3lf,Type,FallStats,timestamp,%f,version,%d,seq,%u,aopTsNow,%llu,aopTsSensor,%llu,magMax,%f,xMin,%f,xMax,%f,yMin,%f,yMax,%f,zMin,%f,zMax,%f,xZCTime,%f,yZCTime,%f,zZCTime,%f,jerkVectorMagMax,%f,xJerkScalarMagMax,%f,yJerkScalarMagMax,%f,zJerkScalarMagMax,%f
iB: No access to DB
Cleaning DB: invalid proximity zone for fence, %{private}s
iB: Adding fence,%{private}s
Error, invalid proximity zone for fence,%{private}s
#Warning Unable to bind SQL for adding fence,%{private}s
iB: Removing fence,%{private}s
#Warning Unable to bind SQL for removing fence,%{private}s
iB: Removing all fences for bundle,%{private}s
#Warning Unable to bind SQL for removing all fences for bundle,%{private}s
iB: Retrieving all fences
Unable to get fences from the database
An error was encountered when retrieving fences from the database
iB: Retrieving fences for bundle,%{private}s
Unable to bind SQL for retrieving fences for bundle,%{private}s
Unable to get fences from database for bundle,%{private}s
An error was encountered when retrieving fences from the database for bundle,%{private}s
iB: Retrieving fence,%{private}s/%{private}s
Unable to bind SQL for retrieving fence,[%{private}s]/%{private}s/%{private}s
Unable to get fence,[%{private}s]/%{private}s/%{private}s, from database
Unable to get the fence count for bundle,%{private}s
iB: addOnBehalfBundleIdColumnIfNotExists
{"msg%{public}.0s":"iB: addOnBehalfBundleIdColumnIfNotExists, table doesn't even exist"}
{"msg%{public}.0s":"iB: addOnBehalfBundleIdColumnIfNotExists, OnBehalfBundleId already exists"}
{"msg%{public}.0s":"iB: Re-create primary key to include OnBehalfBundleId"}
Unable to initialize authorization manager with airplane mode status
{"msg%{public}.0s":"iB: Initializing authorization manager", "exceptions":%{public}d}
Unable to get fences for bundle,%{private}s. Fence,%{private}s, will not be added
Bundle,%{public}s, exceeds its fence limit,%{private}d. Fence,%{private}s, will not be added
iB: Added fence,%{private}s, to the database
Unable to add fence,%{private}s, to the database
iB: Removed fence,%{private}s, from the database
#Warning Unable to remove fence,%{private}s, from the database
{"msg%{public}.0s":"@iB: Received Bluetooth LE power", "BT power":%{public}hhd}
iB: Received uninstall for bundle,%{private}s
iB: Received authorization for bundle,%{private}s
iB: Received location services status,%{public}d
{"msg%{public}.0s":"iB: Reauthorizing clients by toggling beacon fences"}
iB: Received airplane status,%{public}d
Unable to update authorization manager with airplane mode status
Empty bundle identifier should not be passed in here
iB: Setting icon state,%{public}d, for bundle,%{public}s
{"msg%{public}.0s":"iB: Unable to get fences from database", "bundle":%{public, location:escape_only}s}
Unable to remove all fences from the database for bundle,%{public}s
{"msg%{public}.0s":"iB: Removed all fences for bundle", "bundle":%{public, location:escape_only}s}
#Warning Unable to retrieve all fences from the database
#Warning No fences will be resumed due to exception,%{public}d
{"msg%{public}.0s":"iB: Resuming all fences", "numRegions":%{public}lu, "numBundlePairs":%{public}lu}
Unable to get fence,[%{public}s]/%{public}s/%{private}s, from the database
#Warning Bundle(s) not authorized, fence,[%{public}s]/%{public}s/%{private}s, will not be resumed
#Warning Fence,[%{public}s]/%{public}s/%{private}s, will not be resumed due to exception,%{public}d
iB: Resuming fence,[%{public}s]/%{public}s/%{private}s
Unable to get all fences from database
{"msg%{public}.0s":"iB: Suspending fences", "numRegions":%{public}lu, "numBundles":%{public}lu}
Unable to get fences from database for bundle,%{public}s
{"msg%{public}.0s":"iB: (exception) Suspending fences", "numRegions":%{public}lu, "bundle":%{public, location:escape_only}s}
{"msg%{public}.0s":"iB: (authorization) Suspending fences", "numRegions":%{public}lu, "bundle":%{public, location:escape_only}s}
{"msg%{public}.0s":"iB: (authorization 2) Suspending fences", "numRegions":%{public}lu, "bundle":%{public, location:escape_only}s}
iB: Resuming fences,%{public}lu, for bundle,%{public}s
iB: Adding exception,%{public}#x, to stored exceptions %{public}#x
iB: Removing exception,%{public}#x, from stored exceptions %{public}#x
CL: CLBeaconFenceAuthorizationManager::onBeaconNotification
{"msg%{public}.0s":"CLBeaconFenceAuthorizationManager::onBeaconNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLBeaconFenceAuthorizationManager::onClientManagerNotification
{"msg%{public}.0s":"CLBeaconFenceAuthorizationManager::onClientManagerNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLBeaconFenceAuthorizationManager::onDaemonStatusNotification
{"msg%{public}.0s":"CLBeaconFenceAuthorizationManager::onDaemonStatusNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
{"msg%{public}.0s":"iB: Registered regions for ranging", "numRegions":%{public}lu, "totalRegions":%{public}lu}
Unable to register with base-class
{"msg%{public}.0s":"iB: Unregistered regions from ranging", "numRegions":%{public}lu, "totalRegions":%{public}lu}
#Warning Unable to retrieve registration info for client,%{public}d
{"msg%{public}.0s":"iB: Range manager has lost its last connection"}
iB: Received Bluetooth LE power,%{public}d
{"msg%{public}.0s":"iB: Received proximity scan, updating beacon cache with devices", "samples":%{public}lu, "totalCached":%{public}lu}
{"msg%{public}.0s":"iB: Caching new beacon identifier", "identifier":%{private, location:escape_only}s, "uuid":%{private, location:escape_only}s, "major":%{private}d, "minor":%{private}d, "mask":%{public}d}
{"msg%{public}.0s":"iB: Removed expired beacons", "numExpired":%{public}d, "totalCached":%{public}lu}
iB: Notifying region proximityUUID,'%{private}s', major,%{private}d, minor,%{private}d, mask,%{public}d with beacons,%{public}zu
iB: Received activity update of activity,%{private}d
#Warning Unexpected notification %{public}d
#Warning Unhandled notification %{public}d
{"msg%{public}.0s":"iB: Starting range manager", "totalRegions":%{public}lu}
{"msg%{public}.0s":"iB: Stopping range manager", "totalRegions":%{public}lu}
iB: Starting the manager if there's an interest in ranging
iB: There's no interest in ranging, the manager wont be started
iB: The manager is already started
iB: Stopping the manager if there's no interest in ranging
iB: There's an interest in ranging, the manager wont be stopped
iB:The manager is already stopped
iB: Removing exception,%{public}#x, from stored exceptions %{public}#x.
CL: CLBTLERangeManagerConcrete::onBeaconNotification
{"msg%{public}.0s":"CLBTLERangeManagerConcrete::onBeaconNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLBTLERangeManagerConcrete::onMotionStateNotification
{"msg%{public}.0s":"CLBTLERangeManagerConcrete::onMotionStateNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
%s,%sRun,%0.4f
#Warning deltaTime = %0.3f, but most negative allowed is %0.3lf, resetting Integrity Monitor
locationType,integrityPrior,%d,integrityNew,%d
location type,%d,not supported
not reliable or very low reliable,locationType,%d,lat,%.8lf,lon,%.8lf
Location rejected by IM,Reason,disagrees with GPS,location type,%d
Location rejected by IM,Reason,disagrees with high confidence wifi,location type,%d
huncBump,fromHunc,%.1lf,toHunc,%.1lf
Location rejected by IM,Reason,low confidence wifi strongly disagrees with cell,location type,%d
Client registered for notification %d
Client unregistered for notification %d
Workout, Error stopping, no active workouts
CLSE,Reading,%{public}s
#Warning,CLSE,could not open,%{public}s
CLSE,file has expired - redownload
CLSE,file version does not match expected
#Warning,CLSE,avl byte index,%{public}d,is larger than the data available in the availabilty file
#Warning,CLSE,Invalid CLDEM file - unable to get data byte
CLSE,Unexpected case, potential file corruption
CLSE,finished
#Warning,CLSE,fseek returned non-zero
#Warning,CLSE,Invalid CLSE file - header string
#Warning,CLSE,Invalid CLSE file - version
#Warning,CLSE,Invalid CLSE file - headerLength
#Warning,CLSE,Invalid CLSE file - minLat
#Warning,CLSE,Invalid CLSE file - maxLat
#Warning,CLSE,Invalid CLSE file - binsize
#Warning,CLSE,coarse avl file is not %{public}f deg by %{public}f deg,spacing unexpected,%{public}f,re-download needed
#Warning,CLSE,Invalid CLSE file - timestamp
#Warning,CLSE,Invalid CLSE file - expiration age
#Warning,CLSE,Invalid CLSE file - data size
#Warning,CLSE,Invalid CLSE file - crc
bad RAT for GSM: %{public}s
bad RAT for SCDMA: %{public}s
bad RAT for CDMA: %{public}s
bad RAT for LTE: %{public}s
CELL_LOC: override to, %s
CELL_LOC: which cell is that, %s
CELL_LOC: sec_key, 0x%016llX
AWD: workout:%d, companion:%d, %s, GPS:%u, HR:%u, Onset:%d, HRUtil:%u, VO2Avail:%d, HRSrc:%d, VO2Cons:%u, PALStat:%d, VO2Stat:%d, loadUtil:%u, strideAvail:%u, walkAvail:%d, runAvail:%d, walkStat:%d, runStat:%d, VO2Grade:%d, idsAvail:%d, defaultUtil:%d, WRHR:%d, PedGPSAvailable:%d, DistTrackUsed:%d, DistTrackInvalidGradient:%d, DistTrackInvalidGain:%d, DistTrackInvalidSpeed:%d, DistTrackInvalidLength:%d, SeshDuration:%d, PedCalibrated:%d, PaceFail:%d, PedMetSourceDiff:%f, PedMetSourceDiff:%f, HrBoundsFail:%d, SeshUp:%d, SeshDown:%d, SeshCaloriesFromGrade:%d, SeshGPSSourcePhone:%d, SeshGPSSourceWatch:%d, ElevationError:%lld, HRSamplesValidMin: %d, HRSamplesValidMax: %d, METSamplesWithRecentHR: %d, METSamplesValidDelta: %d, VO2DeltaPercentage: %d, HRMetPairs: %d
Swimmming: Free:%d, Breast:%d, Butter:%d, Back:%d, Other:%d, Swimming:%d
Auto-pause: Enabled:%d, WillResume:%d, WillPause:%d, Fast:%d, Normal:%d, Slow:%d, ResumeFast:%d, ResumeNormal:%d, ResumeFalse:%d
%sSubmitted session stats; session length, %f
{"msg%{public}.0s":"SedentaryAlarm, Unable to set update finished handlers", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
SedentaryAlarm, Failed to delete records
#Warning SedentaryAlarm, Time rolled back, deleting records in the future
SedentaryAlarm, Failed to shift records
SedentaryAlarm, Failed to insert record
SedentaryAlarm, Failed to insert record due to failure from reading the most recent entry.
%s is enabling power conservative device motion for parallax.
%s is disabling power conservation for parallax.
Device is stationary and Timeout exceeded, turning off device motion gyro heartbeat and bias estimator.
{"msg%{public}.0s":"A delegate must be set before sending messages with byref return address parameters", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
{"msg%{public}.0s":"The object passed to byref return address parameters MUST BE the registered delegate", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
{"msg%{public}.0s":"The silo associated with a CLIntersiloService may not be changed once set", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
{"msg%{public}.0s":"The vendor associated with a CLIntersiloService may not be changed once set", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
{"msg%{public}.0s":"Overrider didn't call up to super for beginService?", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
{"msg%{public}.0s":"Only one payload per key at at time", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
{"msg%{public}.0s":"A payload must be ready for this key", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
{"msg%{public}.0s":"A payload must be around to remove for this key", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
Input, HR = %.8f, timestamp = %.8lf, starttime = %.8lf, source = %d, interpolation = %d, srcName = %s
Input, Odometer, time stamp, %.8lf, distance, %.8f, GPS altitude, %.8lf, estimated speed(m/s), %.8lf, odometer, %.8lf, accuracy, %.8lf, speed accuracy, %.8lf, timestampGps, %.8lf, rawSpeed, %.8f, srcName, %s
Input, Elevation, time stamp, %.2lf, elevationAscended, %d, elevationDescended, %d, srcName, %s, source, %d
Input, Elevation, beyond time window, buffer size, %lu, deltaTime, %f
Input, Elevation, Online grade estimation regime change, time start, %.2lf, elevationAscended, %d, elevationDescended, %d,input_altitude, %.4f, Prediction Error, %.4f
Input, Elevation, Online grade estimation, gradeType, %d, time start, %.2lf, altitude delta, %.2f, vspeed, %.2f, param_m, %f, param_b, %f,xbufferFront, %f,xbufferBack, %f, elevationAscended, %d, elevationDescended, %d, input_altitude, %.4f
Input, Elevation, Hardware gradeTypeFilter, rawGradeType, %d, gradeType, %d, vspeed, %.4f
Input, Elevation, ready at time, %.2f, no data point
Input, Elevation, not ready at time, %.2f 
Input, Elevation, ready at time, %.2f, nearest data point at time, %.2f
Fitness Machine datum,startTime,%.3f,elapsedTime,%.3f,calories,%f,distance,%f,elevationAscended,%f,strideCount,%ld,strokeCount,%ld,floors,%ld,speed,%f,cadence,%f,power,%f,incline,%f,resistance,%f,verticalSpeed,%f
@TileSearch, wifi, results, searched, %{public}ld, neighbor, %{public}d, remaining, %{public}d, ALS, %{public}d
@WifiAps, dbadd, %{public}lu, was, %{public}u, now, %{public}u
{"msg%{public}.0s":"CLWifiAccessPointLocationService::saveWifiTileAccessPointEntries", "event":%{public, location:escape_only}s, "begin_mach":%{public}llu, "end_mach":%{public}llu, "elapsed_s":"%{public}.09f", "now_s":"%{public}.09f"}
{"msg%{public}.0s":"Invalid tile type", "tileType":%{public}d, "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
failed to establish a valid database connection, expect wifi positioning accuracy to be significantly degraded
{"msg%{public}.0s":"invalid #tile header table connection.", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
{"msg%{public}.0s":"invalid #tile tables connection.", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
{"msg%{public}.0s":"Inconsistent #tile header count and #tile table counts", "tileHeaderCount":%{public}d, "tileTableCount":%{public}ld}
Error upgrading wifi #tile database schemas
{"msg%{public}.0s":"non-empty #tile tables after dropping all", "tileHeaderCount":%{public}d, "tileTableCount":%{public}ld}
{"msg%{public}.0s":"initial mismatch count of #tile header and #tile tables", "tileHeaderCount":%{public}d, "tileTableCount":%{public}ld}
{"msg%{public}.0s":"runtime error deleting tile.", "error":%{private, location:escape_only}s}
{"msg%{public}.0s":"no database connection.", "error":%{private, location:escape_only}s}
{"msg%{public}.0s":"sqlite error deleting remaining tiles.", "error":%{private, location:escape_only}s}
@TileSearch, wifi, missreset, %{public}s
@TileSearch, wifi, misscount, %{public}d
@TileSearch, wifi, nrx, %{public}ld, %{public}ld, %{public}ld, loc, 0, completemiss, %{public}d
@TileSearch, wifi, nrx, %{public}ld, %{public}ld, %{public}ld, loc, 1, completemiss, %{public}d
{"msg%{public}.0s":"This callback should only be invoked once", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
pSample,Invalid pointer
pBodyMetrics,Invalid pointer
pLocation,Invalid pointer
pLocationPrivate,Invalid pointer
pDeviceStatus,Invalid pointer
pDotData,Invalid pointer
pMeas,Invalid pointer
pActivity,Invalid pointer
pWorkoutUpdate,Invalid pointer
pTimeStamp,Invalid pointer
mach absolute to mach continuous time conversion failed
mach absolute to cf absolute time conversion failed
DB, Error expiring records.
DB, CalorimetryHistory not accessible
DB, UUID un-initialized
DB, Potential DB reset, returning all records to clients
DB, CalorimetryHistory has rolled back, returning mru to clients,mru.recordId,%d,record.recordId,%d,mru.natalies,%lld,record.natalies,%lld
{"msg%{public}.0s":"DB, Invalid update finished handlers.", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
DB, Device is locked and we are unable to open the database
DB, doesn't exist yet.
DB, Failed to delete records
DB, Failed to shift records
DB, Inserting basal calories %f for gap (%lf - %lf, %lfs)
CL: CLWifiTilesManager::onClientNotification
{"msg%{public}.0s":"CLWifiTilesManager::onClientNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLWifiTilesManager::onDataProtectionNotification
{"msg%{public}.0s":"CLWifiTilesManager::onDataProtectionNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLWifiTilesManager::onStatusNotification
{"msg%{public}.0s":"CLWifiTilesManager::onStatusNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLWifiTilesManager::onLocationNotification
{"msg%{public}.0s":"CLWifiTilesManager::onLocationNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLWifiTilesManager::onCompanionNotification
{"msg%{public}.0s":"CLWifiTilesManager::onCompanionNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLWifiTilesManagerExternal::onCleanupAgedTiles
{"msg%{public}.0s":"CLWifiTilesManagerExternal::onCleanupAgedTiles", "event":%{public, location:escape_only}s, "this":"%{public}p"}
{"msg%{public}.0s":"_Locationd should come last?!", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
{"msg%{public}.0s":"Crash deliberately as our final act", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
{"msg%{public}.0s":"Don't message _Locationd", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
{"msg%{public}.0s":"Heartbeat tracking commenced", "silo":%{public, location:escape_only}@}
{"msg%{public}.0s":"Heartbeat tracking terminated", "silo":%{public, location:escape_only}@}
{"msg%{public}.0s":"Deltafied deficit should be non-negative", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
{"msg%{public}.0s":"Heartbeat underflow; going to crash now!", "silo":%{public, location:escape_only}@}
{"msg%{public}.0s":"Only living, non-nil services should be heart-beaten", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
{"msg%{public}.0s":"#warning Heartbeat underflow", "silo":%{public, location:escape_only}@, "deficit":%{public}d}
{"msg%{public}.0s":"Heartbeat tracking already enabled", "interval":"%{public}f"}
{"msg%{public}.0s":"Heartbeat tracking resumed", "interval":"%{public}f"}
{"msg%{public}.0s":"Heartbeat tracking suspended"}
{"msg%{public}.0s":"Heartbeat tracking already disabled"}
{"msg%{public}.0s":"Service replacement map must be non-nil if set", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
{"msg%{public}.0s":"Existing services must not fail to map under new mapping and behavior", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
{"msg%{public}.0s":"Should be impossible for an existing service to fail to map under existing mapping and behavior, and must be non-nil for next test", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
{"msg%{public}.0s":"Old and new mappings and behaviors must agree about any service which has started", "event":%{public, location:escape_only}s, "condition":%{private, location:escape_only}s}
{"msg%{public}.0s":"Configuring service replacement map", "ReplacementMap":%{public, location:escape_only}@, "MissBehavior":%{public}d}
{"msg%{public}.0s":"Test and Mock services may only be looked up indirectly via -setServiceReplacementMap:", "RequestedServiceName":%{public, location:escape_only}@}
{"msg%{public}.0s":"Unavailable service requested", "RequestedServiceName":%{public, location:escape_only}@}
{"msg%{public}.0s":"Service replacement map does not include requested service", "RequestedServiceName":%{public, location:escape_only}@, "ReplacementMap":%{public, location:escape_only}@}
{"msg%{public}.0s":"Looking up service identified by name", "ServiceName":%{public, location:escape_only}@}
{"msg%{public}.0s":"Tried to look up a service by name that doesn't exist", "RequestedServiceName":%{public, location:escape_only}@, "EffectiveServiceName":%{public, location:escape_only}@}
{"msg%{public}.0s":"Requested service not isSupported", "RequestedServiceName":%{public, location:escape_only}@, "EffectiveServiceName":%{public, location:escape_only}@}
{"msg%{public}.0s":"Trying to start an unavailable service", "RequestedServiceName":%{public, location:escape_only}@, "UnavailableServices":%{public, location:escape_only}@}
CL: Manufacturing service
{"msg%{public}.0s":"Manufacturing service", "event":%{public, location:escape_only}s, "RequestedServiceName":%{public, location:escape_only}@, "EffectiveServiceName":%{public, location:escape_only}@}
{"msg%{public}.0s":"Failed to alloc and init key class for service", "RequestedServiceName":%{public, location:escape_only}@, "EffectiveServiceName":%{public, location:escape_only}@}
{"msg%{public}.0s":"Key class for service failed to hydrate", "RequestedServiceName":%{public, location:escape_only}@, "EffectiveServiceName":%{public, location:escape_only}@}
{"msg%{public}.0s":"#warning Service retired redundantly or without ever having been started", "RequestedServiceName":%{public, location:escape_only}@}
@GtsMgr, nrIsPairingActive, %{public}d
@GtsMgr, nrIsPreDaytona, %{public}d, (always false, unsupported platform)
@GtsSync, inactive nil
Semistationary, Standing, %d, metsFromIntensity, %.1f, metsFromSteps, %.1f, metsFromPosture, %.1f, metsFinal, %.1f, metsFromPushes, %.1f, computeTime, %f
Pedestrian, wrMets, %f,  fmMets, %f, hrMets, %f, hrwrDiff, %f, hrConfidence, %f, useHrMets, %d, output, %f
Error in FFT,p,%d
Device is locked and we are unable to open the database.
Failed to delete records.
WorkloadCalibratorDb (%d,%f,%f,%f).
syncgetAuthorizationOfClient, %s, forServiceMask, %lx, authorized, %d
setAllClients, %s
setClient, %s, authorization, %d, forMask, %lX
Attempted to setClient before the cache has been fully populated.
Assertion failed: !(ignoreHamming && node->requiresHammingWindow(samples[r]->sampleFreq)), file /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Oscar/CMAccelerometerProcessor.cpp, line 197,Hamming required but ignored..
Fence: combined fences, %lu, fences to, %lu, fences
Fence: combined, isExit, %d, %s
Fence: Failed to calculate fence %s
Fence: combined fence, %s
Fence: Calculator for %s/%s returned %ld desired APs for %s
Fence: Using associated AP %s, channel %d for exit
Fence: Not associated, or not monitoring for exit, %d, %d
Fence: calculateGroup, currentLocation, %s
Fence: isContinuousMonitoringNeeded = %d
#Warning Fence: Continuous monitoring is needed in order to supported the monitored fences
Fence: WifiFenceCalculator: Adding exit AP, mac, %s, hAcc, %.2lf, channel, %d, location, %12.8lf, %12.8lf, isLocallyAdministered, %d
#Warning Fence: WifiFenceCalculator: ignoring locally administered AP, %s
Fence: WifiFenceCalculator: Skipped non-2GHz AP, channel, %d, mac, %s
Fence: WifiFenceCalculator: Adding entry AP, mac, %s, hAcc, %.2lf, channel, %d, location, %12.8lf, %12.8lf
Fence: Fence calculator returned more APs (%{public}zu) than maximum (%{public}lf)
#Warning Fence: no visible APs, can't use PNO for exit criteria, exitAPs, %lu
Fence: request a download for, %s, fChosenAPs, %lu
Fence: calculateAPsForFences end
Estimated,time offset measurement variance(s^2),%.12g
#Warning Unacceptable,time offset measurement variance(s^2),%.12g
Unexpected,state plus measurement covariance < 0.
internalTimeSecs,%.6lf,externalTimeSecs,%.6lf,filteredOffsetSecs,%.6lf,offsetUncertaintySecs,%.9g,R,%.9g,Q,%.9g,v,%.9g,vtest2,%.9g
beginService
endService
shouldAcceptNewConnection
process is not entitled to use CLLocationSmoother, pid, %{public}d, executable, %{public}s
Connection Interrupted
Connection Invalidated
smoothLocations
#Warning Locations not delivered %p
#Warning Invalid Smoother Type using CLSmootherTypeNone
Assertion failed: (offset >= 0) && (offset + fFullTapCount - 1 < samples.size()), file /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Oscar/CMSymmetricFirFilter.h, line 37,offset,%d,fullTapCount,%d,samplesSize,%zu.
Assertion failed: rhs.capacity() == capacity(), file /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2201/Oscar/CMQueue.h, line 85,capacity,%zu,%zu.
TILE: result: tilestool: TEST_testBinarySearch, entries, %lu, file, %s, id, %s
TILE: searched for, location, %.10lf, %.10lf, setLinear, %lu, setIndex, %lu
TILE: not in index, %s, count, %3u, locationd, %.10lf, %.10lf
TILE: result: tilestool: pass, %d, tests, %u, %d
TILE: CLSpatialDataTileTemplate, parsing, sectionId, %d, %s
TILE: CLSpatialDataTileTemplate, index, height, %u, width, %u
TILE: index entry, %3lu, %3u, step, %04d, %s
TILE: CLSpatialDataTileTemplate, entries, numOfEntries, %u
TILE: entry, %3lu, %3u, %3lu, %s, swLoc, %.8lf, %.8lf
TILE: CLSpatialDataTileTemplate, regionalEntries, numOfEntries, %u
TILE: CLSpatialDataTileTemplate, headers only, give up
TILE: entry, %3lu, %3u, %3lu, %s
TILE: getEntriesForArea, input, swLatitude, %.8lf, swLongitude, %.8lf, search, %.8lf, %.8lf, isUseIndex, %d, includeRegionalEntries, %d, entries, %lu
TILE: doesIntersectWithTile, %d, no intersection with the tile
TILE: invalid section, signature, 0x%x, stopping
TILE: getEntriesForArea, invalid tile file, bad allocation size, totalBytesInSection, %lu, maxSectionSize, %lu
TILE: getEntriesForArea, version, %d, y, %u, x, %u, corner, %.8f, %.8f, detlas, %.2f, %.2f, genTime, %.2lf, expAge, %d, age, %.2lf
TILE: getEntriesForArea, numEntriesHeight, %d, numEntriesWidth, %d, entrySizeInBytes, %d
TILE: getEntriesForArea, numOfEntries, %d, entrySizeInBytes, %d, numOfLargeEntries, %d
TILE: getEntriesForArea, numOfRegionalEntries, %d, entrySizeInBytes, %d
TILE: getEntriesForArea, asked not to use index
TILE: getEntriesForArea, pIndexEntries, 0x%lx, pEntries, 0x%lx
TILE: getEntriesForArea, line, %d, searched_min_y, %d, %d, searched_min_x, %d, %d, index_y, %d, index_x, %d, entriesOffset, %d
TILE: getEntriesForArea, entryId, %d, isIntersect, %d, examinedEntries, %d, entry, %s
TILE: getEntriesForArea, nothing to search, %s
TILE: getEntriesForArea, examinedEntries, %5u, foundEntries, %5lu, isUseIndex, %d, clocks, %10lu, extra, %3d, %3d
notification, %d, kNotificationPower, fIsWifiPowered, %d, data.power, %d
notification, %{public}d, kNotificationLinkStatus/Roam, wasAssociated, %{public}d, isAssociated, %{public}d
CL: CLWifiServiceClient::onWifiNotification
{"msg%{public}.0s":"CLWifiServiceClient::onWifiNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
StepCountHistory table doesn't even exist
Assumption failed: startTime (%{public}f) was found to be newer than endTime (%{public}f), queryTimeType %{public}d
#Warning First step time invalid.
Steps were found to be non monotonically increasing - start:%{public}f, end:%{public}f, queryTimeType:%{public}d
StepCountHistory not accessible
#Warning DB UUID un-initialized
#Warning Potential DB reset, returning all records to clients
#Warning Step count has rolled back, returning mru to clients,mru.recordId,%d,record.recordId,%d,mru.count,%u,record.count,%u,mru.distance,%f,record.distance,%f,mru.activeTime,%f,record.activeTime,%f,mru.pushCount,%d,record.pushCount,%d
Failed to delete records
Failed to shift records
Failed to search list for %{public}s %{public}f
Failed to examine the most last record for data aggregation.
Failed to examine the second to last record for data aggregation.
Failed to iterate through records for data aggregation.
Failed to retrieve most recent record for data aggregation.
Failed to delete marked records with timestamp of %{public}f
Reset requested.  Counts (prev: %d cur:%d). New fOffset (%d).
Reset current step count.  Counts (prev: %d cur:%d). New fOffset (%d).
Oscar restart detected.  Count (prev: %d cur:%d). New fOffset (%d).
An error in step counts is highly likely.  Treating current count as new 0.  Count (prev: %{public}d cur:%{public}d). New fOffset (%{public}d).
Reset requested.  New offset (%d, %d, %f).
Locationd restart detected.  New offset (%d, %d, %f).
Oscar restart detected.  New offset (%d, %d, %f).
An error in floor counts is highly likely.  Treating current count as new 0.  New offset (%{public}d, %{public}d, %{public}f).
Requested calibration type not recognized
CLStepCountNotifier is being constructed
Configuration: speedUpRate %f, aggregationDisabled %d, expirationDisabled %d, detailedLogging %d
CLStepCountNotifier is shutting down
Aggregating records due to timer!
StepCount, %f, %d, %f, %d, %d, %d, %d
Adding Fused entry, time, %f, count, %d, raw_dist(m), %f, fused_dist(m), %f, cadence(steps/s), %f
Query (%f, %f): %d, %f, %f, %d, %d, %f
Restarting step counting after activity session %lu
step counting overrideActivityType,%lu,
#Warning Unhandled notification type, %d
CL: CLStepCountNotifier::onMotionStateMediatorNotification
{"msg%{public}.0s":"CLStepCountNotifier::onMotionStateMediatorNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLStepCountNotifier::onUserInfoUpdate
{"msg%{public}.0s":"CLStepCountNotifier::onUserInfoUpdate", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLStepCountNotifier::onActivePedStateCoprocessorData
{"msg%{public}.0s":"CLStepCountNotifier::onActivePedStateCoprocessorData", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLStepCountNotifier::onActivePedStateCoprocessorDataSpectator
{"msg%{public}.0s":"CLStepCountNotifier::onActivePedStateCoprocessorDataSpectator", "event":%{public, location:escape_only}s, "this":"%{public}p"}
Start spectator for src %s
#Warning Input, time rolled back. Delta %f, Previous Time %f, Current Time %f, Always Active %d.
Activate src %s
Inactivate src %s
Programmer error, this rule is not valid (age: %{public}f, interval:%{public}f).
SwimNotifier, Requested finalize before end.
SwimDistributionsByLOI set to %d
Swim Notifier instantiated
LogMotionStateReplay and LogSwimming are both set - LogMotionStateReplay takes precedence in the Swim Notifier
CLSwimNotifier is shutting down.
Added client for %d, count %d
[LOI] Calling fetchLocationsOfInterestWithinDistance
Error retrieving the RT LOIs. %@
[LOI] Found nil locationsOfInterest
[LOI] Registering for location updates
SwimController is ready
[SwimOdom] Registering for odometer updates
Removed client for %d, count %d
[SwimOdom] Unregistering for odometer updates
[LOI] Unregistering for location updates
Swim Controller released
swim fusion setup
swim fusion teardown
Swimming workout started, location, %lu, poolLength, %f
Swimming workout has ended
[SwimOdom] Received an odometer update of type: %d
[SwimOdom] Received unhandled notification, %d
{"msg%{public}.0s":"[LOI] Received a location", "location":%{private, location:CLClientLocation}.*P}
[LOI] Received a location,lat: %{private}lf, long: %{private}lf, accuracy: %lf, lifespan: %lf, timestamp: %lf
Received unhandled notification, %d
CL: CLSwimNotifier::onMotionStateMediatorNotification
{"msg%{public}.0s":"CLSwimNotifier::onMotionStateMediatorNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLSwimNotifier::onWatchOrientationSettingsNotification
{"msg%{public}.0s":"CLSwimNotifier::onWatchOrientationSettingsNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLSwimNotifier::onNataliemetryUpdate
{"msg%{public}.0s":"CLSwimNotifier::onNataliemetryUpdate", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLSwimNotifier::onOdometerNotification
{"msg%{public}.0s":"CLSwimNotifier::onOdometerNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
CL: CLSwimNotifier::onLocationNotification
{"msg%{public}.0s":"CLSwimNotifier::onLocationNotification", "event":%{public, location:escape_only}s, "this":"%{public}p"}
retain
release
alloc
main
sharedInstance
initWithKey:silo:vendor:
vendor
proxyForService:
setPrivateMode:
ensureServiceIsRunning:
newSharedVendorUniverseWithSilo:
init
initWithMemoryCapacity:diskCapacity:diskPath:
setSharedURLCache:
drain
retireServiceWithName:
syncgetHasLingerClients
silo
assertInside
dictionaryWithContentsOfFile:
objectForKeyedSubscript:
countByEnumeratingWithState:objects:count:
componentsSeparatedByString:
objectAtIndexedSubscript:
register:forNotification:registrationInfo:
initWithMode:
initWithData:destructor:
data
onNotification:withData:
async:
setValid:
setAdaptedNotifier:
dateWithTimeIntervalSinceReferenceDate:
currentCalendar
components:fromDate:
copy
autorelease
setDay:
setMonth:
initWithCalendarIdentifier:
dateFromComponents:
components:fromDate:toDate:options:
year
isEqual:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retainCount
zone
hash
superclass
description
debugDescription
valid
stringWithUTF8String:
setClientAuthorization:status:entity:
setLastLocationSettingsEventSource:
resetClients
syncgetCopyClients
syncgetClientStaticRegistrationResult:
syncgetRegistrationResultToAuthorizationStatus:
syncgetAuthorizationOfClient:forServiceMask:
performMigration
notifyMigrationPerformed
syncgetFences:forKey:
syncgetMonitoredRegions:forClient:
syncgetClientEffectiveRegistrationResult:
syncgetClientByName:pid:
syncgetLocation:
syncgetLocationPrivate:
registerDelegate:inSilo:
initWithClientLocation:
clientLocation
reduceAccuracy:withReply:
markReceivingLocationInformation:
dataWithBytes:length:
propertyListWithData:options:format:error:
dataWithPropertyList:format:options:error:
bytes
length
syncgetIconState
setStatusBarIconForEntityClass:visible:
syncgetStatusBarIconForEntityClass:
initWithIdentifier:
onVisit:
onLowConfidenceVisit:
onScenarioTrigger:
initWithMotionLogger:
_motionLogger
_valid
setOpaqueTag:
newAssertionWithReason:
invalidate
startMonitoringVisitsForClient:
startLeechingLowConfidenceVisitsForClient:
stopMonitoringVisitsForClient:
stopLeechingLowConfidenceVisitsForClient:
coordinate
departureDate
timeIntervalSinceReferenceDate
arrivalDate
horizontalAccuracy
unregister:forNotification:
isServiceEnabled:
fileURLWithPath:
isFileURL
defaultManager
path
fileExistsAtPath:
absoluteString
UTF8String
setSimulationScenarioURL:
setSimulationType:
setIntermediateLocationDistance:
setLocationInterval:
setTravellingSpeed:
clearPendingLocations
initWithBytesNoCopy:length:freeWhenDone:
unarchiveObjectWithData:
addPendingLocationsArray:
startSimulation
stopSimulation
lastObject
removeLastObject
becameFatallyBlocked:
sync:
isSupported
getSilo
performSyncOnSilo:invoker:
beginService
endService
initWithInboundProtocol:outboundProtocol:
dealloc
universe
checkInForActivityWithIdentifier:
scheduleVacuumWithReason:
queue
vacuumAll
retryActivityForEncryptionClass:reason:
afterInterval:async:
onActivity:withIdentifier:
isEqualToString:
setObject:forKeyedSubscript:
isReadyToVacuumEncryptionClass:
onClientManagerNotification:data:
.cxx_destruct
.cxx_construct
_clientManagerClient
_deferVacuum
_activities
_disabled
_timeStarted
stringByDeletingPathExtension
stringWithFormat:
dictionaryWithObjects:forKeys:count:
compare:
hasArrivalDate
hasDepartureDate
detectionDate
initWithCoordinate:horizontalAccuracy:arrivalDate:departureDate:detectionDate:
_visitWithVisit:authDate:
connectClient:withKey:
startMonitoringSignificantVisitsForClient:type:
stopMonitoringSignificantVisitsForClient:
disconnectClient:
onSignificantLocationVisit:
setClientInterest:
setClientAuthDate:
clientInterest
clientAuthDate
array
setRecentVisits:
proxyForService:forClient:
setClientAuthorizationCache:
clientAuthorizationCache
setRoutineMonitor:
routineMonitor
setClientManager:
clientManager
migrateClientInterestData
interestForClientKey:outInterest:
actOnPendingDeleteForClientKey:
setArmed:
checkForMonitoring
notifyWhenCacheIsPopulatedWithReply:
ensureStop
flushAll
flushAuthDates
flushInterest
monitoring
leeching
setMonitoring:
stopLeechingVisitsForClient:
setLeeching:
startLeechingVisitsForClient:
recentVisits
timeIntervalSinceNow
predicateWithBlock:
filterUsingPredicate:
keyForClient:
isClientWithKeyInterested:
removeOldVisits
deliverVisit:toClient:
authorizationDateForClientWithKey:
performBlockWhenArmed:
armed
sendVisitsToClient:
clientInterestStoreSetValueForClientKey:parameterKey:value:
removeInterestForClientKey:
doAsync:withReply:
addObject:
launchApplication:
date
interestTypeForClientKey:outType:
ensureMonitoringWithType:
clientInterestStoreGetValueForClientKey:parameterKey:value:
notifyClientsOfVisit:
distantFuture
onInterestStoreTimer:
onAuthDateStoreTimer:
onDarwinNotifierNotification:data:
currentJournalIdentifier
setCurrentJournalIdentifier:
_darwinNotifierClient
_clientToKey
_monitoring
_leeching
_armed
_clientInterest
_clientAuthDate
_clientAuthorizationCache
_recentVisits
_routineMonitor
_clientManager
_currentJournalIdentifier
newTimer
setHandler:
setNextFireAfterDelay:
setNextFireTime:
nextFireTime
forget:
doAsync:
syncgetDoSync:
notifier
adaptee
syncgetActiveCall:
getUUIDBytes:
initWithUUIDBytes:
initWithRecordId:sourceId:sessionId:eventTime:eventType:
eventTime
eventType
eventTypeName:
convertToSpringTrackerEntry:
initWithSessionId:
initWithSpringEntry:
fEventTime
fEventType
syncKey
setSyncKey:
setAud:
properties
objectIdentifier
sequencer
changeType
syncId
setObjectIdentifier:
setChangeType:
setProperties:
_aud
_syncKey
_properties
initWithProperties:
archivedDataWithRootObject:
dataFromChange:
changeFromData:ofType:
encodeSYChangeForBackwardCompatibility:protocolVersion:
decodeChangeData:fromProtocolVersion:ofType:
sessionMetadata
setMaxConcurrentMessages:
setDelegate:
setSerializer:
setTargetQueue:
setSessionMetadata:
setPerMessageTimeout:
setFullSessionTimeout:
userInfo
localizedDescription
count
syncDidComplete
UUIDString
activeSyncSession
syncSessionType
syncRestriction
syncCoordinator:beginSyncSession:
syncCoordinator:didInvalidateSyncSession:
syncCoordinatorDidChangeSyncRestriction:
initialSyncStateObserver:initialSyncDidCompleteForPairingIdentifier:
initialSyncStateObserver:syncDidResetForPairingIdentifier:
initialSyncStateObserver:syncDidCompleteForPairingIdentifier:
initialSyncStateObserverClientCanRetryFailedRequests:
service:startSession:error:
service:sessionEnded:error:
service:incomingData:completion:
service:incomingStream:metadata:completion:
service:encounteredError:context:
service:willPreferSession:overSession:
service:willSwitchFromPairingID:toPairingID:
service:didSwitchFromPairingID:toPairingID:
syncSession:enqueueChanges:error:
syncSession:applyChanges:completion:
syncSession:didEndWithError:
syncSession:resetDataStoreWithError:
syncSession:rollbackChangesWithError:
syncSession:restartChanges:
initWithSyncManager:silo:
serviceDidPairDevice:
serviceDidUnpairDevice:
fManager
fSilo
fPsSession
arrayWithCapacity:
numberWithInt:
setObject:atIndexedSubscript:
numberWithDouble:
intValue
doubleValue
syncCoordinatorWithServiceName:
initWithDelegate:
initWithService:priority:asMasterStore:options:
setDelegate:queue:
setSessionStalenessInterval:
setHasChangesAvailable
resume:
suspend
objectForKey:
setObject:forKey:
dictionaryWithObjectsAndKeys:
initWithBytesNoCopy:length:deallocator:
writeToFile:atomically:
dictionaryRepresentation
dictionary
numberWithUnsignedInt:
numberWithFloat:
allocWithZone:
copyWithZone:
setElevationDescended:
setHasElevationDescended:
hasElevationDescended
gradeType
setGradeType:
setHasGradeType:
hasGradeType
gradeTypeAsString:
StringAsGradeType:
setVerticalSpeed:
setHasVerticalSpeed:
hasVerticalSpeed
rawGradeType
setRawGradeType:
setHasRawGradeType:
hasRawGradeType
rawGradeTypeAsString:
StringAsRawGradeType:
source
setSource:
setHasSource:
hasSource
sourceAsString:
StringAsSource:
readFrom:
writeTo:
copyTo:
mergeFrom:
elevationAscended
setElevationAscended:
elevationDescended
verticalSpeed
_elevationAscended
_elevationDescended
_gradeType
_rawGradeType
_source
_verticalSpeed
_has
URLsForDirectory:inDomains:
mainBundle
bundleIdentifier
stringByAppendingString:
isMainThread
isMotionActivityEntitled
sendMessageWithReplySync:
createFileAtPath:contents:attributes:
fileHandleForWritingToURL:error:
removeItemAtURL:error:
seekToFileOffset:
readDataOfLength:
writeData:
logDirectory
sendMessage:withReply:
sendMessageSync:onConnection:timeoutAfter:withReplyHandler:
tccServiceMotionAccessWithLabel:
tccServiceMotionAccessWithBlock:
featureAvailability:
authorizationStatus
getExecutablePathFromPid:
fileHandleForWritingToURL:
copyDataFrom:to:
updateNotification:withRegistrationInfo:forClient:
start
setSimulationEnabled:
sendSimulatedLocation:
sendSimulatedLocationUnavailable
syncgetNotification:data:
syncgetLocationUnavailable
syncgetName
takeFitnessSessionAssertion
releaseFitnessSessionAssertion
takeDisablementAssertion
releaseDisablementAssertion
takeEmergencyEnablementAssertion
releaseEmergencyEnablementAssertion
receivedMessageOfType:withPayload:
failedToSendMessage:withError:isFatal:
successfullySentMessage:
pairedDeviceIsNearby:
setFireInterval:
addClient:
retireClient:
setMessageType:
numberWithBool:
setPayload:
setPriority:
setIdsOptions:
sendMessage:
initForReadingWithData:
decodeObjectOfClass:forKey:
boolValue
initWithData:
daemonLocationPrivate
mergeIntoDaemonLocation:
setProxy:
takeAssertion
releaseAssertion
initInUniverse:
proxy
_proxy
setMotion:
setNatalieFeatures:
hasNatalieFeatures
motion
natalieFeatures
_motion
_natalieFeatures
numberWithUnsignedLongLong:
typeAsString:
StringAsType:
confidenceAsString:
StringAsConfidence:
mounted
setMounted:
setHasMounted:
hasMounted
mountedAsString:
StringAsMounted:
mountedConfidence
setMountedConfidence:
setHasMountedConfidence:
hasMountedConfidence
mountedConfidenceAsString:
StringAsMountedConfidence:
turn
setTurn:
setHasTurn:
hasTurn
turnAsString:
StringAsTurn:
setIsVehicular:
setHasIsVehicular:
hasIsVehicular
setIsMoving:
setHasIsMoving:
hasIsMoving
exitState
setExitState:
setHasExitState:
hasExitState
exitStateAsString:
StringAsExitState:
setStartTime:
setHasStartTime:
hasStartTime
type
setType:
confidence
setConfidence:
isVehicular
isMoving
startTime
_startTime
_confidence
_exitState
_mounted
_mountedConfidence
_turn
_type
_isMoving
_isVehicular
setRecordId:
setHasRecordId:
hasRecordId
setPacebin:
setHasPacebin:
hasPacebin
setTimestamp:
setHasTimestamp:
hasTimestamp
setRegularEntry:
setHasRegularEntry:
hasRegularEntry
recordId
pacebin
kvalue
setKvalue:
kvalueTrack
setKvalueTrack:
score
setScore:
endTime
setEndTime:
distance
setDistance:
steps
setSteps:
session
setSession:
speed
setSpeed:
timestamp
regularEntry
_endTime
_timestamp
_distance
_kvalue
_kvalueTrack
_pacebin
_recordId
_score
_session
_speed
_steps
_regularEntry
setPace:
setHasPace:
hasPace
setCount:
floorsAscended
setFloorsAscended:
floorsDescended
setFloorsDescended:
pace
_pace
_count
_floorsAscended
_floorsDescended
firedTime
setFiredTime:
didWake
setDidWake:
_firedTime
_didWake
fEpochTypeAsString:
StringAsFEpochType:
fVectorMagnitude
setFVectorMagnitude:
fIQRX
setFIQRX:
fIQRY
setFIQRY:
fIQRZ
setFIQRZ:
fMachineFrequency
setFMachineFrequency:
fEpochType
setFEpochType:
fStanding
setFStanding:
_fEpochType
_fIQRX
_fIQRY
_fIQRZ
_fMachineFrequency
_fVectorMagnitude
_fStanding
genderAsString:
StringAsGender:
gender
setGender:
heightM
setHeightM:
weightKG
setWeightKG:
vo2max
setVo2max:
hrmin
setHrmin:
hrmax
setHrmax:
hronset
setHronset:
setPal:
_gender
_heightM
_hrmax
_hrmin
_hronset
_pal
_vo2max
_weightKG
setHasConfidence:
hasConfidence
mountedState
setHasMountedState:
hasMountedState
mountedStateAsString:
StringAsMountedState:
setHasIsStanding:
hasIsStanding
setTilt:
setHasTilt:
hasTilt
setHasEstExitTime:
hasEstExitTime
setIsVehicleConnected:
setHasIsVehicleConnected:
hasIsVehicleConnected
tilt
estExitTime
_estExitTime
_mountedState
_tilt
_isVehicleConnected
overrideActionAsString:
StringAsOverrideAction:
overrideAction
_activity
_overrideAction
setActivityOverrideMsg:
setBodyMetrics:
setMotionState:
setStepCountData:
setSessionCatherineData:
setJacksonData:
setStrideCalData:
setSedentaryAlarmData:
setAllDayHeartRate:
setFitnessTracking:
setOdometer:
setIdsStatus:
setStairClimbingModel:
setRowingModel:
setExerciseMinute:
setWorkoutEvent:
setElevation:
setCoarseElevation:
setCalorieData:
setNatalieData:
setSedentaryAlarmDataDeprecated:
setStrideCalDataDeprecated:
setCalorieDataDeprecated:
setCoarseElevationDeprecated:
setElevationDeprecated:
hasActivityOverrideMsg
hasBodyMetrics
hasMotionState
hasStepCountData
hasSessionCatherineData
hasJacksonData
hasStrideCalData
hasSedentaryAlarmData
hasAllDayHeartRate
hasFitnessTracking
hasOdometer
hasIdsStatus
hasStairClimbingModel
hasRowingModel
hasExerciseMinute
hasWorkoutEvent
hasElevation
hasCoarseElevation
hasCalorieData
hasNatalieData
hasSedentaryAlarmDataDeprecated
hasStrideCalDataDeprecated
hasCalorieDataDeprecated
hasCoarseElevationDeprecated
hasElevationDeprecated
activityOverrideMsg
bodyMetrics
motionState
stepCountData
sessionCatherineData
jacksonData
strideCalData
sedentaryAlarmData
allDayHeartRate
fitnessTracking
odometer
idsStatus
stairClimbingModel
rowingModel
exerciseMinute
workoutEvent
elevation
coarseElevation
calorieData
natalieData
sedentaryAlarmDataDeprecated
strideCalDataDeprecated
calorieDataDeprecated
coarseElevationDeprecated
elevationDeprecated
_activityOverrideMsg
_allDayHeartRate
_bodyMetrics
_calorieData
_calorieDataDeprecated
_coarseElevation
_coarseElevationDeprecated
_elevation
_elevationDeprecated
_exerciseMinute
_fitnessTracking
_idsStatus
_jacksonData
_motionState
_natalieData
_odometer
_rowingModel
_sedentaryAlarmData
_sedentaryAlarmDataDeprecated
_sessionCatherineData
_stairClimbingModel
_stepCountData
_strideCalData
_strideCalDataDeprecated
_workoutEvent
offsetInFile
stringByAppendingPathComponent:
logData:
logger
setLogger:
_logger
setOverrideAction:
setActivity:
activity
setMountedState:
setEstExitTime:
formattedText
assertOutside
querySignificantElevationDeltaFromDate:toDate:withReply:
updateWorkoutElevationSubscription
initWithSignificantElevation:
firstObject
stringByAppendingPathExtension:
initWithClient:
interfaceWithProtocol:base:
proxyForRecipientObject:inSilo:withInboundInterface:andOutboundInterface:
setTileType:
setHasTileType:
hasTileType
setTileX:
setHasTileX:
hasTileX
setTileY:
setHasTileY:
hasTileY
setIsAllowOverCellular:
setHasIsAllowOverCellular:
hasIsAllowOverCellular
secKey
setSecKey:
setHasSecKey:
hasSecKey
tileType
tileX
tileY
isAllowOverCellular
_secKey
_tileType
_tileX
_tileY
_isAllowOverCellular
ageOutStepArray
stepsInWindow
feedStepCountUpdate:
fStepWindow
dataWithContentsOfURL:options:error:
writeToURL:options:error:
initWithMonitorGpsExternal:
accessoryDidConnect:
accessoryDidDisconnect:
_monitorGpsExternal
defaultSessionConfiguration
sessionWithConfiguration:delegate:delegateQueue:
invalidateAndCancel
setTimeoutInterval:
setAllowsCellularAccess:
originalRequest
downloadTaskWithRequest:completionHandler:
replaceItemAtURL:withItemAtURL:backupItemName:options:resultingItemURL:error:
statusCode
syncgetIsTimerArmed
syncgetStartTimerForClient:andOptions:
syncgetStopTimerForClient:
syncgetSedentaryAlarmData:since:
setLsest:
setHasLsest:
hasLsest
setSumest:
setHasSumest:
hasSumest
setFPal:
setHasFPal:
hasFPal
nPairs
setNPairs:
lsest
sumest
fPal
_fPal
_lsest
_nPairs
_sumest
setDEPRECATEDFingerprints:
setFingerprints:
setVersion:
setHasVersion:
hasVersion
securityKey
setSecurityKey:
setHasSecurityKey:
hasSecurityKey
setGenerationTimeSecs:
setHasGenerationTimeSecs:
hasGenerationTimeSecs
setExpirationAgeSecs:
setHasExpirationAgeSecs:
hasExpirationAgeSecs
hasDEPRECATEDFingerprints
hasFingerprints
marketId
setMarketId:
setHasMarketId:
hasMarketId
version
generationTimeSecs
expirationAgeSecs
dEPRECATEDFingerprints
fingerprints
_generationTimeSecs
_marketId
_securityKey
_dEPRECATEDFingerprints
_expirationAgeSecs
_fingerprints
_version
_doSigningWhenReady
_initializeMescalWithCompletion:
removeAllObjects
URLBagForContext:
URLWithString:
requestWithURL:
mainQueue
_churnMescalExchangeData:withCompletion:
sendAsynchronousRequest:queue:completionHandler:
loadWithCompletionBlock:
setValue:forHTTPHeaderField:
setHTTPMethod:
setHTTPBody:
initInSilo:
signData:withCompletion:
replaceAfter
_silo
_worklist
_keyExchangeStarted
_keyExchangeComplete
_hardwareInfo
_mescalVersion
_mescalCertURL
_mescalExchangeURL
_replaceAfter
setLaunchReason:
launchReason
_launchReason
setHomeUUID:
setActionSetUUID:
setActionSetName:
setActionSetType:
setClientName:
setSceneName:
homeUUID
clientName
_homeUUID
_actionSetUUID
_actionSetName
_actionSetType
_clientName
_sceneName
setAccessoryUUID:
setAccessoryName:
setServiceName:
setServiceType:
setCharacteristicType:
_accessoryUUID
_accessoryName
_serviceType
_characteristicType
setViewUUID:
setViewName:
setViewInformation:
_viewUUID
_viewName
_viewInformation
resetKeychainItem
secItemFormatToDictionary:
keychainItemData
writeToKeychain
dictionaryToSecItemFormat:
setKeychainItemData:
dictionaryWithDictionary:
initWithBytes:length:encoding:
genericPasswordQuery
setGenericPasswordQuery:
_keychainItemData
_genericPasswordQuery
reflectNextFireTime:fireInterval:
setTimer:
updateScheduler
initInSilo:withScheduler:
setNextFireAfterDelay:interval:
setNextFireTime:interval:
shouldFire
handler
fireInterval
_scheduler
_handler
_nextFireTime
_fireInterval
messageType
payload
priority
idsOptions
protocolVersion
setProtocolVersion:
_protocolVersion
_messageType
_payload
_priority
_idsOptions
initWithService:
setService:
service
addDelegate:queue:
setUnacknowledgedMessages:
setClients:
devices
updateNearbyStatusWithDevices:
getActivePairedDevice
isDefaultPairedDevice
isNearby
withClients:
removeObject:
isRemoteWatchStreamingCompatible
setWithObject:
sendMessage:toDestinations:priority:options:identifier:error:
unacknowledgedMessages
removeObjectForKey:
service:account:incomingMessage:fromID:context:
service:account:incomingData:fromID:context:
service:account:incomingUnhandledProtobuf:fromID:context:
service:account:incomingResourceAtURL:fromID:context:
service:account:incomingResourceAtURL:metadata:fromID:context:
service:activeAccountsChanged:
service:devicesChanged:
service:nearbyDevicesChanged:
service:connectedDevicesChanged:
service:account:identifier:didSendWithSuccess:error:
service:account:identifier:didSendWithSuccess:error:context:
service:account:identifier:hasBeenDeliveredWithContext:
service:account:inviteReceivedForSession:fromID:
service:account:inviteReceivedForSession:fromID:withOptions:
service:account:inviteReceivedForSession:fromID:withContext:
serviceSpaceDidBecomeAvailable:
serviceAllowedTrafficClassifiersDidReset:
service:didSwitchActivePairedDevice:acknowledgementBlock:
clients
pairIsNearby
setPairIsNearby:
_pairIsNearby
_service
_unacknowledgedMessages
_clients
initWithAdamId:bundleId:displayName:developerName:lastUpdateTime:
adamId
bundleId
displayName
developerName
lastUpdateTime
_adamId
_bundleId
_displayName
_developerName
_lastUpdateTime
onPurgeTimer
valueForProperty:
stringValue
errorWithDomain:code:userInfo:
resultsCache
enumerateObjectsUsingBlock:
integerValue
setValue:forRequestParameter:
setKeyProfile:
setLocalizationStyle:
setPersonalizationStyle:
addObjectsFromArray:
onStoreLookupResponse:error:adamIds:requestorResponse:
startWithLookupBlock:
allKeys
initWithSilo:
performItemLookupWithAdamIds:response:
setResultsCache:
purgeTimer
setPurgeTimer:
_resultsCache
_purgeTimer
currentDirectoryPath
startScanningWithData:
stopScanning
startScanningWithData:forType:
stopScanningForType:
state
power
UUIDWithString:
identifier
centralManagerDidUpdateState:
centralManager:willRestoreState:
centralManager:didDiscoverPeripheral:advertisementData:RSSI:
centralManager:didConnectPeripheral:
centralManager:didFailToConnectPeripheral:error:
centralManager:didDisconnectPeripheral:error:
initWithProvider:
_homekitProvider
_wiproxPower
_homekitPower
_cbPower
initWithDelegate:queue:
numberWithUnsignedInteger:
arrayWithObjects:count:
scanForPeripheralsWithServices:options:
stopScan
string
fetchIsCellAvailableWithReply:
fetchActiveOrHeldWithReply:
syncgetDetectedCells:
syncgetIsRegisteredOnCell
syncgetRadioAccessTechnology
syncgetRegistrationStatus
syncgetCellTransmitStatus
syncgetDataAccessTechnology
syncgetLastKnownSubscriberMCC:
syncgetLastKnownServingMCC:
syncgetActiveEmergencyCall:
syncgetRefreshCellMonitor
syncgetCopyServingOperator:
syncgetCopyServingOperatorAbbreviated:
syncgetCopyServingProvider:
syncgetCopyServingProviderFromCarrierBundle:
syncgetCopyIMSI:
syncgetCopyIMEI:
syncgetSignalStrength:
syncgetTrackedCellsCount:
syncgetRegistrationInfoDictionary
resetModemWithReason:
syncgetServingCells:addNeighborCells:
syncgetServingGsmCell:
syncgetServingCdmaCell:
initWithUTF8String:
containsObject:
fetchIsAssociatedWithReply:
syncgetIsAssociated
fetchIsWifiAvailableWithReply:
syncgetIsWifiTrackingAvailable
syncgetIsWifiPowered
syncgetIsAvailable
syncgetIsSimulationEnabled
programEntryScanNetworks:andExitScanNetworks:
setEntryScanNetworks:andExitScanNetworks:
setScannerEntryScanNetworks:
setScannerExitScanNetworks:
syncgetScanStats
syncgetScanResult
syncgetBackgroundScanCacheResult
syncgetAssociatedNetwork:
syncgetHostedNetwork:
clearExitAndEntryScanNetworks:
syncgetStartScanWithType:lowPriority:passive:
syncgetStartScanWithParameters:
syncgetStartRangingWithPeers:andTimeout:
syncgetSetAllowBeingRanged:enable:
setWifiPower:
setBackgroundExitScanCount:
syncgetSetAutoJoin:
syncgetIsWifiPoweredWithStatus:
initWithMotionState:
queryMotionStatesWithStartTime:endTime:isFromInternalClient:withReply:
initWithMotionActivity:
syncgetGyroStatsWithBias:slope:l2Error:isDynamic:deltaBias:deltaSlope:deltaError:isDeltaDynamic:
syncgetMaxDynamicTemperature
startFactoryGYTT
syncgetBiasFit:
syncgetNonFactoryRoundCount
syncgetSupportsMiniCalibration
syncgetLastMiniCalibration
syncgetInsertWithBias:variance:temperature:timestamp:
dumpDatabase:onCompletion:
syncgetWipeDatabase
syncgetNumTemperatures
currentHandler
handleFailureInMethod:object:file:lineNumber:description:
registerForNotifications
startWsbClient
handleVehicularStateChanged
stopWsbClient
unregisterForNotifications
_invalidateSpeedEstimate
_feedLocation:
setCurrentEstimate:
prevLoc
earlierDate:
isEqualToDate:
setPrevLoc:
timeIntervalSinceDate:
distanceFromLocation:
vehicularState
updateStatusBarLabel
logLatencyMetricsInternal
submitLatencyMetrics
updateWsbClient:
handleMotionStateNotification:
onWifiServiceNotification:data:
onMotionStateNotification:data:
setStatusBarWithLabel:
clearStatusBarColorAndText
_universe
_showActivityVehicular
_showActivityVehicularMounted
_visualIndicatorActive
_seenNonVehicularState
_motionVehicular
_wsbClientStartTime
_wifiServiceClient
_motionStateClient
_vehicularToken
_vehicularHints
_vehicularStartTime
_vehicularLastNoHintsTime
_accelDetectionLatency
_gpsDetectionLatency
_basebandDetectionLatency
_wifiDetectionLatency
_btDetectionLatency
_vehicularDuration
_vehicularDurationExitFromNoHints
_prevLoc
_currentEstimate
syncgetDeviceUnlockedSinceFirstBoot
setReceivedMessageHandler:
setConnectionUpdateHandler:
pairedDevice
operatingSystemVersion
isConnected
modelIdentifier
hasPrefix:
sendMessage:type:priority:fireAndForget:encrypt:bypassConnectionCheck:timeout:
uniqueIDOverride
setPairedModelId:
setConnectionStatus:
pairedDeviceLastSeenTimestamp
UUID
initInSilo:withIdentifier:state:
initWithQueue:identifier:state:
initWithQueue:
trackerStateSize
trackerStateTypeName
initInSilo:withIdentifier:
initWithQueue:identifier:
batteryData
setBatteryData:
reachability
setReachability:
thermalLevel
setThermalLevel:
airplaneMode
setAirplaneMode:
batterySaverModeEnabled
setBatterySaverModeEnabled:
pushServiceConnected
setPushServiceConnected:
restrictedMode
setRestrictedMode:
updateState:
dumpState:withSize:hints:
_state
_identifier
_inTransaction
airplaneModeChanged
fetchIsAirplaneModeEnabledWithReply:
fetchReachabilityWithReply:
fetchIsBatteryConnectedWithReply:
fetchWirelessModemClientCountWithReply:
syncgetAirplaneMode:
syncgetReachability
syncgetBestPossibleReachability
syncgetIsSleeping
syncgetPushServiceConnectionState
syncgetRegisterPowerKeepAlive:client:dbgMessage:
decodeIntForKey:
decodeBoolForKey:
decodeFloatForKey:
decodeDoubleForKey:
encodeInt:forKey:
encodeBool:forKey:
encodeFloat:forKey:
encodeDouble:forKey:
encodeWithCoder:
initWithCoder:
decodeInt64ForKey:
decodeObjectForKey:
encodeInt64:forKey:
encodeObject:forKey:
macAddress
ssid
rssi
mode
channel
isApplePersonalHotspot
jsonObject
dataWithJSONObject:options:error:
initWithData:encoding:
initWithAccessPoint:
_isApplePersonalHotspot
_rssi
_mode
_channel
_macAddress
_ssid
_age
initWithRecordId:sourceId:sessionId:startDate:endDate:strokeCount:distance:avgPace:lapCount:strokeType:segment:
strokeCount
avgPace
lapCount
strokeType
strokeTypeName:
segment
maxSwimDataEntries
convertToSwimEntry:
fStrokeCount
fAvgPace
fLapCount
fStrokeType
fSegment
rangeOfString:options:
whitespaceCharacterSet
stringByTrimmingCharactersInSet:
caseInsensitiveCompare:
isString:prefixedBy:
isBlackListedAccessory:name:model:serialNumber:firmware:hardwareRevision:
processScdmaCells:inRange:timeReceived:requestType:tag:
processCells:inRange:timeReceived:requestType:tag:
processWireless:inRange:timeReceived:requestType:tag:
downloadPayloadSize
finished:
requesterWillSendRequestForEstablishedConnection:callback:
initWithRequester:
addRequesterWithOutstandingRequest:
fRequestersWithOutstandingRequests
initWithURL:delegate:queue:
syncgetReferenceTime:
syncgetReferenceTime:andError:
setGpsTime:
syncgetMetric:
syncgetActiveTechs:
setGpsAssistantHasClients:forNotification:
setHarvestingEnabled:
shutdown
feedLocation:
currentEstimate
setWorkoutSuggestedStopTimeout:
setWorkoutType:
initWithBytes:length:
setSessionId:
notifierClientNumForCoparty:
locationProvider
syncgetLocation_GSM:forCell:
syncgetLocation_SCDMA:forCell:
syncgetLocation_CDMA:forCell:
syncgetLocation_LTE:forCell:
syncgetLocation_CELL:forCell:
setLocation_GSM:forCell:
setLocation_SCDMA:forCell:
setLocation_CDMA:forCell:
setLocation_LTE:forCell:
syncgetIsBroadConnection
syncgetQueryNearbys:
addResponseListener:
removeResponseListener:
resetRetryCounters:
syncgetBestMatchLocation:forCell:
resetBoundingBoxes
syncgetQueryLocationsForGsm:scdma:cdma:lte:wifis:useCache:isPiggybackNearbyWifis:isPiggybackNearbyCells:
syncgetQueryLocationsForCells:wifis:useCache:
numberWithUnsignedShort:
fetchIsAccessoryConnectedWithReply:
setVehicleSpeedAssistance:vehicleSpeed:
setVehicleGyroAssistance:vehicleGyro:
inputStreamWithURL:
open
hasBytesAvailable
read:maxLength:
appendBytes:length:
close
_handle
initWithStartDate:recordId:sourceId:
maxExerciseMinuteDataEntries
requestRouteSummary
requestTransitSummary
requestGuidanceState
logRoute:
transportType
travelTime
hasDestination
destination
latLng
hasOrigin
origin
logTransitRoute:
logState:
guidanceLevel
hasTransportType
hasDestinationName
destinationName
hasTravelTime
possibleStops
hasStopID
stopID
hasCoordinate
scheduledLinks
hasLineID
lineID
hasScheduledDeparture
scheduledDeparture
hasScheduledArrival
scheduledArrival
hasStopFrom
stopFrom
hasStopTo
stopTo
hasGuidanceLevel
hasNavigationState
navigationState
hasTrackedTransportType
trackedTransportType
navigationListener:didUpdateRouteSummary:
navigationListener:didUpdateTransitSummary:
navigationListener:didUpdateGuidanceState:
navigationListener:didUpdateActiveRouteData:
navigationListener:didUpdateTrafficIncidentAlertDetailsData:
navigationListener:didUpdateCurrentRoadName:
navigationListener:didUpdateStepIndex:
navigationListener:didUpdateStepNameInfo:
navigationListener:didUpdateRideSelections:
navigationListener:didUpdatePositionFromSign:
navigationListener:didUpdatePositionFromManeuver:
navigationListener:didUpdatePositionFromDestination:
navigationListener:didUpdateNavigationVoiceVolume:
initInDispatchSilo:withDelegate:
enable
disable
clearLocationData
notifyFromLastInfo
_enabled
_geoNavListener
_lastEtaInSeconds
_lastEtaAbsTime
_lastCoordinate
_parentNotifier
setMarkets:
addMarkets:
marketsCount
clearMarkets
marketsAtIndex:
markets
_markets
initWithSignificantElevationSample:
setNCatherine:
setHasNCatherine:
hasNCatherine
setNVeryLowCatherine:
setHasNVeryLowCatherine:
hasNVeryLowCatherine
setNLowCatherine:
setHasNLowCatherine:
hasNLowCatherine
setNHighCatherine:
setHasNHighCatherine:
hasNHighCatherine
setNVeryHighCatherine:
setHasNVeryHighCatherine:
hasNVeryHighCatherine
setNGoodCatherine:
setHasNGoodCatherine:
hasNGoodCatherine
setNInterpolatedCatherine:
setHasNInterpolatedCatherine:
hasNInterpolatedCatherine
setNSampleAndHoldCatherine:
setHasNSampleAndHoldCatherine:
hasNSampleAndHoldCatherine
setMinGoodCatherine:
setHasMinGoodCatherine:
hasMinGoodCatherine
setMaxGoodCatherine:
setHasMaxGoodCatherine:
hasMaxGoodCatherine
setMeanCatherine:
setHasMeanCatherine:
hasMeanCatherine
setMeanGoodCatherine:
setHasMeanGoodCatherine:
hasMeanGoodCatherine
setFirstCatherine:
setHasFirstCatherine:
hasFirstCatherine
setFirstCatherineStartTime:
setHasFirstCatherineStartTime:
hasFirstCatherineStartTime
setLongestDropout:
setHasLongestDropout:
hasLongestDropout
setTotalDropoutTime:
setHasTotalDropoutTime:
hasTotalDropoutTime
setNDropout:
setHasNDropout:
hasNDropout
onsetReason
setOnsetReason:
setHasOnsetReason:
hasOnsetReason
onsetReasonAsString:
StringAsOnsetReason:
setOnsetCatherine:
setHasOnsetCatherine:
hasOnsetCatherine
setUserMaxCatherine:
setHasUserMaxCatherine:
hasUserMaxCatherine
setPersistedMinHR:
setHasPersistedMinHR:
hasPersistedMinHR
nCatherine
nVeryLowCatherine
nLowCatherine
nHighCatherine
nVeryHighCatherine
nGoodCatherine
nInterpolatedCatherine
nSampleAndHoldCatherine
minGoodCatherine
maxGoodCatherine
meanCatherine
meanGoodCatherine
firstCatherine
firstCatherineStartTime
longestDropout
totalDropoutTime
nDropout
onsetCatherine
userMaxCatherine
persistedMinHR
_firstCatherine
_firstCatherineStartTime
_longestDropout
_maxGoodCatherine
_meanCatherine
_meanGoodCatherine
_minGoodCatherine
_nCatherine
_nDropout
_nGoodCatherine
_nHighCatherine
_nInterpolatedCatherine
_nLowCatherine
_nSampleAndHoldCatherine
_nVeryHighCatherine
_nVeryLowCatherine
_onsetCatherine
_onsetReason
_persistedMinHR
_totalDropoutTime
_userMaxCatherine
userMetsSource
setUserMetsSource:
setHasUserMetsSource:
hasUserMetsSource
userMetsSourceAsString:
StringAsUserMetsSource:
truthMetsSource
setTruthMetsSource:
setHasTruthMetsSource:
hasTruthMetsSource
truthMetsSourceAsString:
StringAsTruthMetsSource:
setMetsFM:
setHasMetsFM:
hasMetsFM
userMets
setUserMets:
truthMets
setTruthMets:
metsFM
_truthMets
_userMets
_metsFM
_truthMetsSource
_userMetsSource
httpResponseHeaders
domain
code
requester:didReceiveResponse:forRequest:
requesterDidFinish:
requesterDidCancel:
requester:didFailWithError:
requesterWillSendRequestForEstablishedConnection:
initWithRequester:subHarvesterIdentifier:
tolerateIncompatibleData
setTolerateIncompatibleData:
fSubHarvesterIdentifier
fRequester
_tolerateIncompatibleData
setLength:
mutableBytes
setProductId:
setSoftwareVersion:
setProbeId:
sharedConfiguration
defaultForKey:defaultValue:
enumerateKeysAndObjectsUsingBlock:
appLocationsCount
indoorLocationsCount
eventsCount
measurements
setEcn0:
setPsc:
setRscp:
setRssi:
setUarfcn:
setPilotPhase:
setPnoffset:
setChannel:
setPid:
gsmNeighbors
addGsmNeighbors:
scdmaNeighbors
addScdmaNeighbors:
cdmaNeighbors
addCdmaNeighbors:
lteNeighbors
addLteNeighbors:
location
cell
indexForLocation:
setMeta:
setMcc:
setMnc:
setLac:
setCi:
operatorName
setOperatorName:
transmit
setTransmit:
setArfcn:
setAppBundleId:
setRat:
setNeighborGroup:
initWithDaemonLocation:
setLocation:
motionVehicleConnectedStateChanged
setMotionVehicleConnectedStateChanged:
motionVehicleConnected
setMotionVehicleConnected:
rawMotionActivity
initWithCLMotionActivity:
setRawMotionActivity:
motionActivity
setMotionActivity:
dominantMotionActivity
setDominantMotionActivity:
addCellTowerLocation:
addScdmaCellTowerLocation:
setSid:
setNid:
setBsid:
setLtmOffset:
setDayLightSavings:
addDerivedMcc:
setBsLatitude:
setBsLongitude:
setZoneid:
setSectorid:
setSectorLatitude:
setSectorLongitude:
setCelltype:
setBandclass:
addCdmaCellTowerLocation:
setTac:
setBandInfo:
addLteCellTowerLocation:
setMac:
hidden
setHidden:
scanTimestamp
setScanTimestamp:
addWifiAPLocation:
addWtwLocation:
tripId
setTripId:
bundleIds
arrayWithArray:
setAppBundleIdIndices:
setProvider:
addLocation:
setAppState:
setAge:
routineMode
setRoutineMode:
loiType
setLoiType:
addAppLocation:
passTypeId
setPassTypeId:
associatedStoreIds
dataUsingEncoding:
JSONObjectWithData:options:error:
initWithArray:
setAssociatedStoreIds:
passSource
setPassSource:
addPassLocation:
cmAttitude
addIndoorCMAttitude:
cmPedometer
addIndoorCMPedometer:
addIndoorLocations:
addIndoorMotionActivity:
pressure
addIndoorPressure:
wifiScan
addIndoorWifis:
addEvents:
pressureLocation
indexForCollectionLocation:
setDeviceKey:
setSubmissionTimestamp:
setMeasurements:
setRecordingEvents:
setModels:
setDuetEvents:
setConfigurations:
numberWithInteger:
locationData
muid
mapsUniqueIdentifier
setMuid:
providerIdentifier
setProviderIdentifier:
triggerType
setTriggerType:
triggerSubType
setTriggerSubType:
setTriggerTimestamp:
setTriggerEvent:
addAppBundleIdIndices:
addLocations:
wifiData
accessPoint
addAccessPoints:
addHarvests:
initWithCString:encoding:
stringWithCString:encoding:
initWithURL:andDelegate:usingConnectionSession:validatingAgainstHostname:
mainRunLoop
setConnectionRunLoop:
addRequest:
setLogRequestToFile:
setLogResponseToFile:
setTimeoutSeconds:
setHttpRequestHeaders:
uploadPayloadSize
setupWithCompletionHandler:
objectAtIndex:
removeObjectAtIndex:
descriptionOfIndex:
cellTowerLocations
cdmaCellTowerLocations
scdmaCellTowerLocations
lteCellTowerLocations
wifiAPLocations
wtwLocations
locations
latitude
longitude
setAppBundleIds:
appLocations
setSignature:
passLocations
seedLocationsAtIndex
setRtLOIUUID:
setRtLOIType:
uncertainty
setUncertaintyInMeters:
typeSource
setTypeSource:
rtLOIUUID
rtLOIType
uncertaintyInMeters
setRtVisitTimesAreQuantized:
visits
entry
exit
setEntryTime:
setExitTime:
addVisits:
setRtLOITypes:
initPersistentSessionWithTimeout:
cellTowerLocationsCount
scdmaCellTowerLocationsCount
cdmaCellTowerLocationsCount
lteCellTowerLocationsCount
wifiAPLocationsCount
wtwLocationsCount
locationsCount
passLocationsCount
harvestsCount
initWithStartDate:firedDate:alarmType:didWake:
firedDate
alarmType
fStartDate
fFiredDate
fAlarmType
fDidWake
valueForKey:
setClientKey:
setAuthMask:
setClearClient:
setOperationType:
setNotification:
clientKey
authMask
clearClient
addObject:withSyncSessionReason:
deleteObject:withSyncSessionReason:
sendNotification:withGlobalAuthStatus:
promptForClient:authorizationStatus:forcePrompt:
client:didChangeUsageData:
setClients:regionOfType:to:
setClients:significantLocationChangeTo:
setClients:significantLocationVisitTo:
markClientEmergencyEnablementTransition:
wakeUpLaunchdManagedClient:
setClient:
setPurpose:forClient:
syncgetLocationClientKeys
syncgetNonSystemLocationClientKey
syncgetHasAuthorizedClients
syncgetIsMapsANonSystemLocationClient
deliverAndReleaseNotification:withFlags:callbackState:
onCapabilityChange
fileURLWithPath:isDirectory:
pluginKitProxyForURL:
pluginKitProxyForIdentifier:
containingBundle
protocol
startMonitoringCapabilityChangeForClient:
setClient:authorization:forMask:
stopMonitoringCapabilityChangeForClient:
null
clearAuthorizationOfClients
setAllClients:
clearAuthorizationOfClient:
syncgetForegroundApp:
onCLEmergencyEnablementAssertion:
mutableCopy
initWithBundleIdentifier:flags:reason:name:withHandler:
syncgetHasMonitoredRegions:
syncgetHasMonitoredFences:
syncgetIsClientMonitoringPersistently:
defaultWorkspace
openSensitiveURL:withOptions:
sendGlobalAuthStatus:
considerPerformingAForcedFullSync
stringByResolvingSymlinksInPath
initWithContentsOfFile:
sortedArrayUsingComparator:
indexOfObject:inSortedRange:options:usingComparator:
getNumberOfInputApsUsedInWifiTileForCoordinate:withReply:
startDate
unknown
stationary
walking
running
automotive
cycling
isVehicleConnected
isVehicleWifiHint
isVehicleGpsHint
isVehicleBasebandHint
isVehicleMotionHint
isVehicleBTHint
fState
propertyListWithStream:options:format:error:
pairingID
setLocationFingerprints:
addLocationFingerprint:
locationFingerprintsCount
clearLocationFingerprints
locationFingerprintAtIndex:
locationFingerprints
_locationFingerprints
registerFileForCollection:
unregisterFileForCollection:
initWithMachServiceName:
_setQueue:
resume
registeredFiles
mobileCrashReporterPath
pathForDate:withBasePath:
fileManager
createDirectoryAtURL:withIntermediateDirectories:attributes:error:
lastPathComponent
URLByAppendingPathComponent:
copyItemAtURL:toURL:error:
valueForEntitlement:
processIdentifier
connection
setConnection:
setInterruptionHandler:
setInvalidationHandler:
copyRegisteredFilesWithHandler:
interfaceWithProtocol:
setExportedInterface:
setExportedObject:
componentsJoinedByString:
initWithString:
setDateFormat:
stringFromDate:
fileManager:shouldCopyItemAtPath:toPath:
fileManager:shouldCopyItemAtURL:toURL:
fileManager:shouldProceedAfterError:copyingItemAtPath:toPath:
fileManager:shouldProceedAfterError:copyingItemAtURL:toURL:
fileManager:shouldMoveItemAtPath:toPath:
fileManager:shouldMoveItemAtURL:toURL:
fileManager:shouldProceedAfterError:movingItemAtPath:toPath:
fileManager:shouldProceedAfterError:movingItemAtURL:toURL:
fileManager:shouldLinkItemAtPath:toPath:
fileManager:shouldLinkItemAtURL:toURL:
fileManager:shouldProceedAfterError:linkingItemAtPath:toPath:
fileManager:shouldProceedAfterError:linkingItemAtURL:toURL:
fileManager:shouldRemoveItemAtPath:
fileManager:shouldRemoveItemAtURL:
fileManager:shouldProceedAfterError:removingItemAtPath:
fileManager:shouldProceedAfterError:removingItemAtURL:
listener:shouldAcceptNewConnection:
listener
setListener:
setRegisteredFiles:
setFileManager:
_listener
_registeredFiles
_fileManager
_connection
resetBytesInRange:
setTiles:
addTiles:
tilesCount
clearTiles
tilesAtIndex:
setNorthWestLatitude:
setHasNorthWestLatitude:
hasNorthWestLatitude
setNorthWestLongitude:
setHasNorthWestLongitude:
hasNorthWestLongitude
setSouthEastLatitude:
setHasSouthEastLatitude:
hasSouthEastLatitude
setSouthEastLongitude:
setHasSouthEastLongitude:
hasSouthEastLongitude
northWestLatitude
northWestLongitude
southEastLatitude
southEastLongitude
tiles
_northWestLatitude
_northWestLongitude
_southEastLatitude
_southEastLongitude
_tiles
endDate
currentSpeed
averageSpeed
initWithDistance:startDate:endDate:currentSpeed:averageSpeed:
_startDate
_endDate
_currentSpeed
_averageSpeed
registerClientForFitnessSessionNotifications:
unregisterClientForFitnessSessionNotifications:
streamingClientIsInFitnessSession:
setCurrentGranularity:
setFitnessSessionNotificationClients:
stopLocation
stopMotionAlarm
setResendMotionStateTimer:
resendMotionStateTimer
sendMotionState
setAliveAgainThrottleTimer:
aliveAgainThrottleTimer
sendAliveAgainMessage
fitnessSessionNotificationClients
clientIsInFitnessSession
unregisterAllLocationNotifications
setEmergencyEnablementAssertionActive:
setLocationUpdatesIncludeMotionState:
reevaluateMotionSubscription
setClientIsInFitnessSession:
currentGranularity
initForWritingWithMutableData:
finishEncoding
locationUpdatesIncludeMotionState
initWithDaemonLocationPrivate:
motionAlarmActive
isSubscribedForMotion
setIsSubscribedForMotion:
setMotionAlarmActive:
startUpdatingLocationWithGranularity:includeMotion:inFitnessSession:emergencyEnablementAssertionActive:
startMotionAlarm
onLocationNotification:withData:
onMotionStateNotification:withData:
emergencyEnablementAssertionActive
_locationClient
_locationAssertion
_motionAlarmAssertion
_lastMotionActivity
_locationUpdatesIncludeMotionState
_clientIsInFitnessSession
_motionAlarmActive
_isSubscribedForMotion
_emergencyEnablementAssertionActive
_currentGranularity
_fitnessSessionNotificationClients
_resendMotionStateTimer
_aliveAgainThrottleTimer
allowsNetworkTileLoad
isNetworkTileLoadAllowed
setIsNetworkTileLoadAllowed:
_isNetworkTileLoadAllowed
setTileErrorHandler:
setCallbackQueue:
setRestrictions:
callbackQueue
preloadRoadTilesNearCoordinate:radius:completionHandler:
isLocationShiftRequiredForCoordinate:
shiftCoordinate:accuracy:shiftedCoordinate:shiftedAccuracy:
hasLoadedRoadTilesNearCoordinate:radius:
isRail
travelDirection
roadID
coordinateCount
coordinates
setCancellationHandler:
cancel
internalRoadName
isTunnel
isBridge
roadClass
formOfWay
speedLimitIsMPH
speedLimit
findRoadsWithin:of:handler:completionHandler:
findRoadsFromNextIntersection:completionHandler:
findRoadsFromPreviousIntersection:completionHandler:
findRoadsToNextIntersection:completionHandler:
findRoadsToPreviousIntersection:completionHandler:
track
sessionName:
gradient
gradientValidity
initWithTrack:session:
setGradient:
_track
_gradient
_gradientValidity
setState:
initWithTimestamp:RSSI:uuid:ipv4:channel:
RSSI
uuid
ipv4
_RSSI
_ipv4
_uuid
cppObject
beginServiceWithAirPlaySolo:
setAirplaySolo:
airplaySolo
setPower:
setScanDeliveryDelayTimer:
scanDeliveryDelayTimer
sendBufferedScanNotifications
setBufferedDevices:
releaseData
removeClient:
getPowerWithCompletion:
startMonitoringDevicesForClient:
stopMonitoringDevicesForClient:
startScan
clATVAirplayMonitorService:didFindDevices:
bufferedDevices
airPlaySoloDidUpdateState:
airPlaySolo:foundDevice:withData:
airPlaySoloStartedScanning:
airPlaySoloStoppedScanning:
airPlaySolo:failedToStartScanningWithError:
_power
_airplaySolo
_scanDeliveryDelayTimer
_bufferedDevices
quitForcedLocationState
setupCLNotifiers
teardownCLNotifiers
inOutdoorPedestrianSession
checkForLocationStateTransition
updateCalibrationBins:
outOfSession
isRunningStateInWindow
attemptForcedLocation
isCalibrationConvergedStdForBinWithSpeed:
startLeechingLocation
startGpsOdometerSpectatorUpdates
startElevationSpectatorUpdates
stopLeechingLocation
stopGpsOdometerSpectatorUpdates
stopElevationSpectatorUpdates
startLocationUpdates
startGpsOdometerUpdates
startElevationUpdates
stopLocationUpdates
stopGpsOdometerUpdates
stopElevationUpdates
currentSession
addLatestCalData:
tickleArrow
updateGradient:
checkValidTrack:associatedEntry:
addEntry:
removeObjectsInArray:
strideCalibrationDatabase:didInsertEntry:
tick:
fOdometerClient
fServiceLocationProvider
fServiceLocationClient
fClientAuthorizationCache
fStreamingAwareLocationClient
fStreamingAwareProxy
fMotionStateClient
fCompanionClient
fMotionStateMediatorClient
fUniverse
fStopOpportunisticCalibrationTimer
fActivityBuffer
fElevationBuffer
fStepsBuffer
fStats
fDatabase
fStrideCalLocationFSM
fLatestCalDataArray
fStepCountDb
fLastGoodLocFix
fCurrentSession
isMessageOfType:
dataPayload
setDataPayload:
_dataPayload
message
setMessage:
error
setError:
recoverable
setRecoverable:
_recoverable
_message
_error
setManager:
manager
setPairedDeviceRegistry:
defaultCenter
handleUnpairNotification_bounce:
addObserver:selector:name:object:
handlePairNotification_bounce:
handleActiveNotification_bounce:
handleInactiveNotification_bounce:
initWithUUIDString:
handleUnpair
handlePair
setPairedDeviceID:
requestFullResync
sendAllUsageSyncData
setRetryTimer:
drainErrorQueue
setErrorQueue:
setMessagesWaitingForAck:
removeDelegate:
removeObserver:name:object:
pairedDeviceID
setHighestReceivedSequenceNumber:
numberWithLongLong:
handleMessageError:
addMessageToErrorQueue:
_sendMessage:identifier:error:
messageFailedToSend:withError:recoverable:
messagesWaitingForAck
sendMessageWithMessageType:dataPayload:priority:idsOptions:
mungedUsageDataForPotentiallyOldUsageData:
handleMessageSendError:identifier:
handleMessageSendSuccessForIdentifier:
longLongValue
highestReceivedSequenceNumber
handleMessageUsageUpdateWithMessageData:
handleMessagePromptWithMessageData:
handleMessageResyncRequestWithMessageData:
handleMessageResyncResponseWithMessageData:
activeDeviceNearbyStatus
setActiveDeviceNearbyStatus:
dirtyUsageSyncState
setDirtyUsageSyncState:
needFullResync
setNeedFullResync:
pairedDeviceRegistry
retryTimerSet
setRetryTimerSet:
retryTimer
errorQueue
_dirtyUsageSyncState
_needFullResync
_retryTimerSet
_activeDeviceNearbyStatus
_manager
_pairedDeviceID
_pairedDeviceRegistry
_retryTimer
_errorQueue
_messagesWaitingForAck
isWalking
isRunning
isDriving
maybeExitingVehicle
hasExitedVehicle
fActivity
addFence:
removeFence:
requestRegionState:
month
hour
minute
second
initWithTimestamp:
supportsSecureCoding
initWithCatherine:confidence:timestamp:
catherine
_catherine
setKey:
hasKey
setValue:
setHasValue:
hasValue
value
_key
_value
machineFrequency
setMachineFrequency:
_machineFrequency
initWithName:type:duration:repeats:alarmId:bundleId:state:
decodeIntegerForKey:
unsignedLongLongValue
encodeInteger:forKey:
acknowledgeAlarm:error:
unregisterAlarm:error:
duration
repeats
alarmId
setAlarmId:
setBundleId:
initWithName:type:duration:repeats:
isValid
acknowledgeWithError:
unregisterWithError:
copyPropertiesFromAlarm:
name
_repeats
_duration
_name
_alarmId
serviceName
delegate
setSyncRestriction:
_serviceName
_activeSyncSession
_delegate
_syncRestriction
setDidComplete:
syncDidFailWithError:
didComplete
setSyncSessionType:
_didComplete
_syncSessionType
requestInitialSyncStateForPairingIdentifier:completion:
requestSyncStateForPairingIdentifier:completion:
startSessionMetricsWithTime:session:
loadLastAWDTimestamps
storeLastAWDTimestamps
endSessionMetrics:
setReadyForSubmission
awdLogDistance:status:description:
activityLoggerLogStrideCalEntry:
awdMotionFitnessStrideCalibration:
updateUserHeight:
fSessionMetrics
fHeightCM
fLastAWDTimestamps
setTimerWithInterval:
bounce_timerFired:
initWithTimeInterval:serviceIdentifier:target:selector:userInfo:
setMinimumEarlyFireProportion:
setDisableSystemWaking:
scheduleInRunLoop:
timerFired:
initWithFireTime:timeInterval:serviceIdentifier:wakeDevice:clTimer:silo:minimumEarlyFireProportion:
_pcTimer
_clTimer
_strIdentifier
_serviceIdentifier
_wakeDevice
_timeInterval
_minimumEarlyFireProportion
setMode:
heartRate
setHeartRate:
_heartRate
adapter
setAdapter:
setName:
_adapter
registerClient:adapter:
unregisterClient:
registerAlarm:withReply:
unregisterAlarm:withReply:
acknowledgeAlarm:withReply:
launchRemoteApplication:withReply:
launchWatchApplicationForCompanion:
fireAlarm:error:
allValues
initWithTrigger:duration:onQueue:forClient:withHandler:
allKeysForObject:
syncgetIsApplicationInstalled:
launchDaemon:
pathExtension
setStrokeAmp:
setHasStrokeAmp:
hasStrokeAmp
setStrokeFrequency:
setHasStrokeFrequency:
hasStrokeFrequency
strokePower
setStrokePower:
strokeAmp
strokeFrequency
_strokeAmp
_strokeFrequency
_strokePower
syncgetActivityStats
processInfo
processName
dataWithCapacity:
setTriggerUUID:
setMapsUniqueIdentifier:
initWithUUID:timestamp:triggerType:triggerSubType:mapsUniqueId:providerId:
triggerUUID
_triggerSubType
_providerIdentifier
_triggerUUID
_triggerType
_mapsUniqueIdentifier
setBundleIds:
_bundleIds
_rawMotionActivity
_motionActivity
_dominantMotionActivity
_location
setAccessPoint:
initWithUUID:andAccessPoint:
_accessPoint
initWithMuid:locationData:wifiData:
setLocationData:
setWifiData:
_muid
_locationData
_wifiData
contentsOfDirectoryAtPath:error:
currentFilename
fileHandleForReadingAtPath:
closeFile
removeItemAtPath:error:
stopLogging
clearLogs
setWithSet:
logFallStats:
hasPairedModelId
connectionStatus
pairedModelId
_connectionStatus
_pairedModelId
setBias:withMagneticField:level:magnitude:inclination:
syncgetPendingSetBiasCount
getBiasWithMagneticField:acceleration:
syncgetLookupBiasWithMagneticField:acceleration:bias:level:noResults:
indexSet
addIndex:
radiusMeters
removeObjectsAtIndexes:
syncgetAppAvailabilityForLocation:radius:searchContext:availabilityList:includeRegionalApps:
touristApp
setEffectiveRadiusMetersIfInstalled:
setHeroAppRankInstalled:
setHeroAppRankUnInstalled:
setAdamId:
setAgeRating:
setTouristApp:
setSpanLat:
setSpanLon:
syncgetTileFilePath:latitude:longitude:isFileAccessible:isTileNotExistingOnServer:
setLat:
setLon:
setRadiusMeters:
setIncludeRegionalApps:
requestTileDownloadByType:lat:lon:seckey:details:
includeRegionalApps
ageRating
effectiveRadiusMetersIfInstalled
heroAppRankInstalled
heroAppRankUnInstalled
spanLat
spanLon
_touristApp
_ageRating
_effectiveRadiusMetersIfInstalled
_heroAppRankInstalled
_heroAppRankUnInstalled
_spanLat
_spanLon
_includeRegionalApps
_radiusMeters
_lat
_lon
ageOutMotionStateArray
feedMotionStateData:
fActivityWindow
exceptionWithName:reason:userInfo:
raise
latitudesCount
clearLatitudes
latitudeAtIndex:
addLatitude:
longitudesCount
clearLongitudes
longitudeAtIndex:
addLongitude:
latitudes
setLatitudes:count:
longitudes
setLongitudes:count:
_latitudes
_longitudes
removeAllClients
setCdRegistration:
setContext:
registerCallback
deregisterCallback
cdRegistration
context
registerCallback:
predicate
keyPaths
deregisterCallback:
_context
_cdRegistration
event
setEvent:
setPredicate:
duetIdentifier
setDuetIdentifier:
withEvent:andPredicate:
_event
_predicate
_duetIdentifier
setRegisteredEvents:
startMonitoringForegroundAppLaunchForClient:
stopMonitoringForegroundAppLaunchForClient:
startMonitoringForegroundAppLaunchWithPredicate:forClient:
stopMonitoringForegroundAppLaunchWithPredicate:forClient:
startMonitoringAudioOutputRouteConnectedForClient:
stopMonitoringAudioOutputRouteConnectedForClient:
startMonitoringBluetoothConnectedForClient:
stopMonitoringBluetoothConnectedForClient:
startMonitoringFirstWakeOfDayForClient:
stopMonitoringFirstWakeOfDayForClient:
startMonitoringHomeKitSceneForClient:
stopMonitoringHomeKitSceneForClient:
startMonitoringHomeKitAccessoryForClient:
stopMonitoringHomeKitAccessoryForClient:
startMonitoringHomeKitAppViewForClient:
stopMonitoringHomeKitAppViewForClient:
stopMonitoringForClient:
fetchAllMicroLocationEventsWithStartDate:endDate:handler:
keypathForEvent:
predicateForEvent:withKeyPath:
stopMonitoringEvent:withPredicate:forClient:
registerClient:forEvent:withPredicate:
registeredEvents
registerWithDuetForEvent:andPredicate:
userContext
notifyClient:ofEvent:withValue:
registrationWithIdentifier:contextualPredicate:dismissalPolicy:deviceSet:mustWake:callback:
eventTypeFromNSNumber:
removeObjectsForKeys:
keyPathForAudioOutputDataDictionary
keyPathForBluetoothDataDictionary
keyPathForFirstWakeupStatus
keyPathForAppDataDictionary
keyPathForHomeKitAppViewDataDictionary
keyPathForHomeKitAccessoryDataDictionary
keyPathForHomeKitSceneDataDictionary
predicateForAudioOutputStatus:
predicateForBluetoothConnectionStatus:
predicateForFirstWakeOfDay
predicateForChangeAtKeyPath:
audioOutputRoutStream
bluetoothIsConnectedStream
userIsFirstBacklightOnAfterWakeup
microLocationVisitStream
appInFocusStream
homeKitAppViewStream
homeKitAccessoryControlStream
homeKitSceneStream
fetchAllEventsForEventType:startDate:endDate:handler:
distantPast
streamForEvent:
sortDescriptorWithKey:ascending:
predicateForEventsWithStartInDateRangeFrom:to:
eventQueryWithPredicate:eventStreams:offset:limit:sortDescriptors:resultHandler:
knowledgeStore
executeQuery:responseQueue:
notifyClient:ofForegroundAppWithValue:
notifyClient:ofHomeKitScene:
notifyClient:ofHomeKitAccessory:
notifyClient:ofHomeKitAppView:
appBundleIdKey
appLaunchReasonKey
initWithBundleId:launchReason:
sceneHomeUUID
actionSetUUID
actionSetName
actionSetType
sceneClientName
sceneName
initWithHomeUUID:actionSetUUID:actionSetName:actionSetType:clientName:sceneName:
accessoryHomeUUID
accessoryUUID
accessoryName
serviceType
characteristicType
accessoryClientName
initWithHomeUUID:accessoryUUID:accessoryName:serviceName:serviceType:characteristicType:clientName:
viewHomeUUID
viewUUID
viewName
viewInformation
initWithHomeUUID:viewUUID:viewName:viewInformation:
stopMonitoringEvents:forClient:
_registeredEvents
predicateForForegroundAppWithPredicateString:withList:
predicateWithFormat:
predicateForKeyPath:withPredicate:
predicateForForegroundAppWithWhiteList:
predicateForForegroundAppWithBlackList:
initWithTilesManagerResult:score:distanceToCurrentLocation:andAppProxy:
result
setResult:
distanceToCurrentLocation
setDistanceToCurrentLocation:
appProxy
setAppProxy:
_result
_distanceToCurrentLocation
_appProxy
fetchPredictedApplicationsAtLocation:reply:
startMonitoringPredictedApplicationsForClient:
stopMonitoringPredictedApplicationsForClient:
onPredictedApplications:
setTilesManagerProxy:
handleNudge
setNudgeHandler:
nudgeHandler
registerForSuggestedActionNudgeOfType:withOptions:block:
setSpotlightPrefsChangedNotifyToken:
_registerForZeroKeywordDisabledNotification
_determineZeroKeywordEnabled
setZeroKeywordEnabled:
_determinePredictedApplicationExtensionEnabled
_updateAppSuggestionsAllowed
tilesManagerProxy
isAppSuggestionsAllowed
enableAppTilesDownload:
onUAUserActivityDidContinueToAppStoreNotification:
addObserver:selector:name:object:suspensionBehavior:
setStoreRequestor:
setCurrentSuggestedApplications:
setSuggestedApplicationClients:
setShouldUpdateRegionalRecommendationState:
setRecentlySuggestedAdamIds:
setDateStartedSuggestingAdamIds:
setMostRecentLocationRequestTime:
spotlightPrefsChangedNotifyToken
removeObserver:
unregisterForSuggestedActionNudgeOfType:
defaultHost
driver
cancelPlugInDiscovery:
setMostRecentSuggestLocation:
setMostRecentCachedLocation:
_updatePredictedApplicationExtensions:error:
continuouslyDiscoverPlugInsForAttributes:flags:found:
setDriver:
userElection
setApplicationPredictionExtensionEnabled:
applicationPredictionExtensionEnabled
isInstalledAppSuggestionsAllowed
suggestLocationApp
suggestBeaconAppWithBundleIdentifierSet:
mostRecentLocationRequestTime
currentSuggestedApplications
mostRecentCachedLocation
_suggestWithLocation:
shouldUpdateRegionalRecommendationState
fetchRoutineModeFromLocation:withReply:
sharedConnection
effectiveValueForSetting:
effectiveRestrictedBoolValueForSetting:
applicationProxyForItemID:
sortUsingDescriptors:
initWithLatitude:longitude:
fetchLocationsOfInterestOfType:withReply:
isUninstalledAppSuggestionsAllowed
dateStartedSuggestingAdamIds
recentlySuggestedAdamIds
storeRequestor
_initWithTypeIdentifier:suggestedActionType:options:
localizedName
setTitle:
vendorName
iconDataForVariant:
initWithTitle:developer:adamId:bundleId:icon:installationState:location:distance:startDate:endDate:confidence:
identifierForAdamId:atLocation:
shouldSuggestActionWithIdentifier:
setWebpageURL:
setUserInfo:
actionWithIdentifier:wasSuggested:
becomeCurrent
suggestedApplicationClients
deviceIdentifierForVendor
appendFormat:
webpageURL
substringFromIndex:
mostRecentSuggestLocation
mostRecentBundleIdentifier
anyObject
setMostRecentBundleIdentifier:
applicationProxyForIdentifier:
itemID
zeroKeywordEnabled
setIsInstalledAppSuggestionsAllowed:
setIsUninstalledAppSuggestionsAllowed:
title
onLocation:
beaconRegion:didTransitionToState:
onDaemonStatusDisplayOff
_appStoreBundleLocationProvider
_appStoreBundleLocationProviderClient
_appSuggestionsServiceLocationProvider
_appSuggestionsServiceLocationProviderClient
_suggestedActionDatabse
_btleFenceClient
_daemonStatusClient
_isInstalledAppSuggestionsAllowed
_isUninstalledAppSuggestionsAllowed
_shouldUpdateRegionalRecommendationState
_zeroKeywordEnabled
_applicationPredictionExtensionEnabled
_spotlightPrefsChangedNotifyToken
_nudgeHandler
_mostRecentBundleIdentifier
_tilesManagerProxy
_mostRecentSuggestLocation
_recentlySuggestedAdamIds
_dateStartedSuggestingAdamIds
_storeRequestor
_mostRecentCachedLocation
_currentSuggestedApplications
_suggestedApplicationClients
_mostRecentLocationRequestTime
_driver
applicationType
objectEnumerator
initWithBool:
initWithLocation:state:age:routineMode:loiType:bundleId:timestamp:
_routineMode
_loiType
newIsolatedUniverseWithOnlySilo:
_vendor
updateIDSStatus
handleOdometerCyclingSubscribe:service:account:fromID:context:
setProtobufAction:forIncomingRequestsOfType:
handleOdometerCyclingUnsubscribe:service:account:fromID:context:
handleOdometerCyclingData:service:account:fromID:context:
handleOdometerElevationSubscribe:service:account:fromID:context:
handleOdometerElevationUnsubscribe:service:account:fromID:context:
handleOdometerElevationData:service:account:fromID:context:
handleStrideCalDataSubscribe:service:account:fromID:context:
handleStrideCalDataUnsubscribe:service:account:fromID:context:
handleOdometerCoarseElevationSubscribe:service:account:fromID:context:
handleOdometerCoarseElevationUnsubscribe:service:account:fromID:context:
handleOdometerCoarseElevationData:service:account:fromID:context:
handleMotionCalsUpdate:service:account:fromID:context:
handleMotionStateUpdate:service:account:fromID:context:
handleRemoteAppLaunch:service:account:fromID:context:
handleCompanionPingData:service:account:fromID:context:
setIsConnected:
idsService
setPairedDevice:
setPairedDeviceLastSeenTimestamp:
connectionUpdateHandler
updateIDSStatusAndNotify
initWithProtobufData:type:isResponse:
sendProtobuf:toDestinations:priority:options:identifier:error:
computeMD5:
receivedMessageHandler
outgoingResponseIdentifier
receivedMessage:data:identifierString:
stringWithCapacity:
setIdsService:
_isConnected
_pairedDevice
_pairedDeviceLastSeenTimestamp
_idsService
_receivedMessageHandler
_connectionUpdateHandler
fTimestamp
_internalLogItem
activityTypeAsString:
StringAsActivityType:
metSourceAsString:
StringAsMetSource:
setMetsHR:
setHasMetsHR:
hasMetsHR
setMetsWR:
setHasMetsWR:
hasMetsWR
activityType
setActivityType:
isStanding
setIsStanding:
mets
setMets:
metSource
setMetSource:
meanAngleX
setMeanAngleX:
energyMagnitude
setEnergyMagnitude:
metsHR
metsWR
_mets
_activityType
_energyMagnitude
_meanAngleX
_metSource
_metsHR
_metsWR
_isStanding
currentDevice
storeFrontIdentifier
macsCount
clearMacs
macsAtIndex:
addMacs:
modesCount
clearModes
modesAtIndex:
addModes:
setHasLocationId:
macs
setMacs:count:
modes
setModes:count:
_macs
_modes
begin
valueOut
initWithValueOut:begin:end:state:
lowerQuartile
center
upperQuartile
_valueOut
_begin
_end
setHorizontalAccuracy:
setSpeedAccuracy:
setCourse:
setCourseAccuracy:
signData:
verifyData:matchesSignature:
reason
initWithMacAddressAsUInt:secureRangingKeyID:
setRequiresSecureCoding:
initWithPeer:date:distanceMeters:accuracyMeters:initiator:shouldUnlock:
initWithObjects:
checkResourceIsReachableAndReturnError:
secureRangingKeyID
unsignedIntValue
dictionaryWithCapacity:
initWithFileDescriptor:closeOnDealloc:
numberWithUnsignedChar:
initWithFileDescriptor:
initWithPID:flags:reason:name:
acquire
setFlags:
backgroundLocationAssertionForPID:
acquireWithHandler:onQueue:
initWithBundleLocationProvider:inSilo:
provider
_provider
setSeedLocations:atIndex:
setSeedLocationsAtIndex:
_seedLocationsAtIndex
setRepeatBehavior:
controller
setController:
_controller
computeWalkRunSigma:
_lastEntry
_totalCalibratedDistance
_supportsFirstStepTime
fetchHasConnectedDevicesWithReply:
syncgetHasConnectedDevices
scan
initWithTimeIntervalSinceReferenceDate:
initWithInt:
initWithDouble:
initWithInteger:
numberOfSteps
currentPace
currentCadence
averageActivePace
maxPedometerEntries
initWithStartDate:endDate:steps:distance:floorsAscended:floorsDescended:recordID:currentPace:currentCadence:activeTime:sourceId:isOdometerDistance:isOdometerPace:pushes:workoutType:
activeTime
sourceId
isOdometerDistance
isOdometerPace
numberOfPushes
workoutType
fEndDate
fNumberOfSteps
fDistance
fFloorsAscended
fFloorsDescended
fRecordId
fCurrentPace
fCurrentCadence
fActiveTime
fSourceId
fIsOdometerDistance
fIsOdometerPace
fNumberOfPushes
fWorkoutType
initWithEventDate:type:
eventStringFromType:
fDate
fType
setElapsedTime:
setTotalEnergy:
setTotalDistance:
setTotalElevationAscended:
setTotalStrideCount:
setTotalStrokeCount:
setTotalFloorsClimbed:
setInstantaneousSpeed:
setInstantaneousCadence:
setInstantaneousPower:
setInclination:
setResistanceLevel:
convertToCLFitnessMachineData:
elapsedTime
totalEnergy
totalDistance
totalElevationAscended
totalStrideCount
totalStrokeCount
totalFloorsClimbed
instantaneousSpeed
instantaneousCadence
instantaneousPower
inclination
resistanceLevel
_elapsedTime
_totalEnergy
_totalDistance
_totalElevationAscended
_totalStrideCount
_totalStrokeCount
_totalFloorsClimbed
_instantaneousSpeed
_instantaneousCadence
_instantaneousPower
_inclination
_resistanceLevel
binIndexForValueIn:
subarrayWithRange:
isNativeValueOutAvailableInBinsFromIndex:withLength:
isBin:sameActivityAsBin:
stringByAppendingFormat:
updateNativeBin:withAlpha:valueOut:
updateAdjacentBin:withAlpha:valueOut:nativeBin:
_tableName
_valueInName
_valueOutName
_defaultValue
_binBoundariesWalk
_binBoundariesRun
_binBoundaries
_testMode
_persistentStore
_bins
setVectorClocks:
addVectorClocks:
vectorClocksCount
clearVectorClocks
vectorClocksAtIndex:
vectorClocksType
setHasAuthMask:
hasAuthMask
setHasClearClient:
hasClearClient
notification
setHasNotification:
hasNotification
notificationAsString:
StringAsNotification:
operationTypeAsString:
StringAsOperationType:
operationType
vectorClocks
_authMask
_clientKey
_notification
_operationType
_vectorClocks
_clearClient
syncgetHasCapabilitiesOfBundle:
syncgetHasCapability:
setMobileGestaltAnswersCache:
setCapabilityChangeClients:
updateSupervised
updateICloudManagedAppleID
updateITunesManagedAppleID
updateInstalledEducationProfile
setSupervised:
setICloudManagedAppleID:
setITunesManagedAppleID:
setInstalledEducationProfile:
isSupervised
aa_isPrimaryAccount
aa_isManagedAppleID
accountsWithAccountType:completion:
accountTypeWithIdentifier:completion:
installedProfileIdentifiers
installedProfileWithIdentifier:
payloads
hasCapability:
mobileGestaltAnswersCache
supervised
installedEducationProfile
iCloudManagedAppleID
iTunesManagedAppleID
mobileGestaltHasCapability:
capabilityChangeClients
onDarwinNotification:data:
_darwinClient
_supervised
_iCloudManagedAppleID
_iTunesManagedAppleID
_installedEducationProfile
_mobileGestaltAnswersCache
_capabilityChangeClients
fetchLastSignificantLocationDistanceAndLatencyWithReply:
addSignificantLocationChangeClient:distanceThreshold:powerBudget:
removeSignificantLocationChangeClient:
requestLocationUpdateWithParameters:
preloadBuildingTilesNearCoordinate:radius:completionHandler:
hasLoadedBuildingTilesNearCoordinate:radius:
findBuildingsWithin:of:buildingHandler:completionHandler:
sections
initWithBegin:end:state:kValue:
kValue
setKValue:
setBegin:
setEnd:
_kValue
requestCellTileDownloadByType:lat:lon:seckey:
stop
fsm:didYieldTrack:
setCalTrackHandler:
fsm:didTransitionFromState:toState:
originDeviceToGpsSource:
fsm:didUpdateSource:
updateGpsLocationBuffer:gpsSource:
fsm:didUpdateLocationAtTime:
updateGpsOdometerBuffer:
updatePedometerBuffer:
requestTransitionToLocationState:
feedLocationData:
feedGpsOdometerData:
feedPedometerData:
locationState
fLocationState
fTrackFinder
fSource
setChangesAvailable:
setSuspended:
changesAvailable
suspended
sessionStalenessInterval
_changesAvailable
_suspended
_sessionStalenessInterval
maxConcurrentMessages
serializer
targetQueue
perMessageTimeout
fullSessionTimeout
_maxConcurrentMessages
_serializer
_targetQueue
_perMessageTimeout
_fullSessionTimeout
_sessionMetadata
setSyncId:
_syncId
getBytes:length:
fStrideCalDb
authorizeLocationInReplay
checkLocationAuthorization
onStepCountNotification:data:
onOdometerNotification:data:
initWithVisit:
bundlePath
fetchLocationsOfInterestAssociatedToIdentifier:withReply:
fetchRecentLocationsOfInterestWithReply:
fetchNextPredictedLocationsOfInterestFromLocation:startDate:timeInterval:withReply:
fetchPredictedLocationsOfInterestOnDate:withReply:
fetchLocationOfInterestAtLocation:withHandler:
onWakeRoutinedTimer
routineManager
stopMonitoringVisits
setVisitClients:
stopLeechingVisits
setLeechClients:
stopLeechingLowConfidenceVisits
setLowConfidenceVisitLeechClients:
scenarioTriggerClients
unsignedIntegerValue
stopMonitoringScenarioTriggerOfType:
setScenarioTriggerClients:
setPredictedApplications:
visitClients
startMonitoringVisitsWithHandler:
checkDiminishedMode
leechClients
startLeechingVisitsWithHandler:
lowConfidenceVisitLeechClients
startLeechingLowConfidenceVisitsWithHandler:
fetchRoutineModeFromLocation:withHandler:
fetchLocationsOfInterestAssociatedToIdentifier:withHandler:
fetchLocationsOfInterestWithinDistance:ofLocation:withHandler:
fetchLocationsOfInterestOfType:withHandler:
dateWithTimeIntervalSinceNow:
fetchLocationsOfInterestVisitedSinceDate:withHandler:
fetchNextPredictedLocationsOfInterestFromLocation:startDate:timeInterval:withHandler:
fetchPredictedLocationsOfInterestOnDate:withHandler:
setLocations:
setLastLocation:
lastLocation
altitude
verticalAccuracy
course
floor
level
updating
sendLocations
checkAuthorization
flush
setAuthorized:
startUpdatingLocation
stopUpdatingLocation
startUpdatingPredictedApplications
stopUpdatingPredictedApplications
didUpdateLocations:
didUpdatePredictedApplications:
setRemoteObjectInterface:
setUpdating:
remoteObjectProxyWithErrorHandler:
authorized
diminishedMode
startWakeRoutinedTimer
stopWakeRoutinedTimer
setDiminishedMode:
startMonitoringScenarioTriggerOfType:withHandler:
updatingPredictedApplications
suggestedActionManager
setUpdatingPredictedApplications:
_sendPredictedApplications
predictedApplications
onLocationNotification:data:
setRoutineManager:
setSuggestedActionManager:
_wakeRoutinedTimer
_serviceLocationProvider
_serviceLocationClient
_filteredLocationClient
_awarenessClient
_awarenessRegInfo
_updating
_updatingPredictedApplications
_authorized
_diminishedMode
_locations
_lastLocation
_predictedApplications
_routineManager
_visitClients
_leechClients
_lowConfidenceVisitLeechClients
_scenarioTriggerClients
_suggestedActionManager
fenceMonitor
initWithFenceMonitor:
setFenceMonitor:
_fenceMonitor
activityAlarmAvailable
trigger
initWithTrigger:duration:onQueue:withHandler:
startMonitoringScenarioTriggerOfType:forClient:
stopMonitoringScenarioTriggerOfType:forClient:
fetchGeomagneticModelData:
registerClientForRemoteMotionAlarm:
unregisterClientForRemoteMotionAlarm:
remoteDeviceMotionUpdate:atTime:
setStreamingConnection:
streamingConnection
setMotionAlarmClients:
setLastKnownMotionState:
setResendTimer:
resendTimer
sendMotionAlarmRequest
setRevertToUnknownTimer:
revertToUnknownTimer
motionAlarmClients
evaluateMotionAlarmState
lastKnownMotionState
delayRevertToUnknownTimer
_lastKnownMotionState
_streamingConnection
_motionAlarmClients
_resendTimer
_revertToUnknownTimer
syncgetCompanionOnlyNoGPSRun
updateSession:
clearStepArray
checkForRunningThreshold
onStepNotification:data:
fHasRun
fInSession
fStepCountClient
simplifiedLength:threshold:type:
simplifiedLength:threshold:
duetMonitorAudioOutputRouteConnected:
duetMonitorBluetoothConnected:
duetMonitorDeviceFirstWakeOfDay:
duetMonitor:foregroundAppDidLaunch:
duetMonitor:homekitSceneDidChange:
duetMonitor:homekitAccessoryDidChange:
duetMonitor:homekitAppViewDidChange:
initWithMicroLocationHarvester:
_microLocationHarvester
startOfDayForDate:
dateByAddingComponents:toDate:options:
emergencyStateChange:
resetControlPlaneStatus
syncgetControlPlaneStatusReport:
fetchDataAvailabilityWithReply:
postDataAvailability
syncgetDataAvailability
setMacAddress:
_hidden
_scanTimestamp
initWithSessionId:type:
sessionId
workoutName:
isAvailable
natalieDataSessionFromWorkoutType:
workoutTypeFromNatalieDataSession:
fSessionId
initWithSessionId:location:poolLength:
swimLocationName:
poolLength
swimWorkoutInstance:
fLocation
fPoolLength
initWithSessionId:workoutType:manufacturerName:model:
manufacturerName
model
fitnessMachineWorkoutInstance:
fManufacturerName
fModel
takeForegroundAssertionForClient:withDesiredAccuracy:
releaseForegroundAssertionForClient:
initWithPressure:stdDeviation:timestamp:
_motionVehicleConnectedStateChanged
_motionVehicleConnected
_operatorName
initWithCell:
isEquivalent:
setCell:
_rat
_transmit
_measurements
_cell
initWithMeasurements:
initWithGsmNeighbors:scdmaNeighbors:cdmaNeighbors:lteNeighbors:
_gsmNeighbors
_scdmaNeighbors
_cdmaNeighbors
_lteNeighbors
setYear:
setHour:
setMinute:
setSecond:
timeZoneForSecondsFromGMT:
setTimeZone:
hasSid
hasNid
hasBsid
bsid
hasZoneid
zoneid
setHasSid:
setHasNid:
setHasBsid:
setHasZoneid:
_bsid
_nid
_sid
_zoneid
writeString:forTag:
writeData:forTag:
hasSectorid
sectorid
hasBandclass
bandclass
hasChannel
hasPnoffset
pnoffset
hasLocation
setHasBandclass:
setHasChannel:
setHasPnoffset:
_bandclass
_pnoffset
_sectorid
start:
setUrgentCalFlag:
setMemoryCacheCountLimit:
setMemoryCacheTotalCostLimit:
modernLoader
registerTileDecoder:
openForClient:
closeForClient:
hasLocationType
locationType
setLocationType:
hasAltitude
setAltitude:
hasVerticalAccuracy
setVerticalAccuracy:
hasScore
hasReach
reach
setReach:
hasInfoMask
infoMask
setInfoMask:
setHasLocationType:
setHasAltitude:
setHasVerticalAccuracy:
setHasScore:
setHasReach:
setHasInfoMask:
_altitude
_infoMask
_locationType
_reach
_verticalAccuracy
setCellTowers:
setWirelessAPs:
setCdmaCellTowers:
setCdmaEvdoTowers:
setLteCellTowers:
setScdmaCellTowers:
addCellTower:
addWirelessAP:
addCdmaCellTower:
addCdmaEvdoTower:
addLteCellTower:
addScdmaCellTower:
cellTowersCount
clearCellTowers
cellTowerAtIndex:
wirelessAPsCount
clearWirelessAPs
wirelessAPAtIndex:
hasNumberOfSurroundingCells
numberOfSurroundingCells
setNumberOfSurroundingCells:
hasAppBundleId
appBundleId
cdmaCellTowersCount
clearCdmaCellTowers
cdmaCellTowerAtIndex:
cdmaEvdoTowersCount
clearCdmaEvdoTowers
cdmaEvdoTowerAtIndex:
hasNumberOfSurroundingCdmaCells
numberOfSurroundingCdmaCells
setNumberOfSurroundingCdmaCells:
hasNumberOfSurroundingCdmaEvdoCells
numberOfSurroundingCdmaEvdoCells
setNumberOfSurroundingCdmaEvdoCells:
lteCellTowersCount
clearLteCellTowers
lteCellTowerAtIndex:
hasNumberOfSurroundingLteCells
numberOfSurroundingLteCells
setNumberOfSurroundingLteCells:
scdmaCellTowersCount
clearScdmaCellTowers
scdmaCellTowerAtIndex:
hasNumberOfSurroundingScdmaCells
numberOfSurroundingScdmaCells
setNumberOfSurroundingScdmaCells:
setHasNumberOfSurroundingCells:
setHasNumberOfSurroundingCdmaCells:
setHasNumberOfSurroundingCdmaEvdoCells:
setHasNumberOfSurroundingLteCells:
setHasNumberOfSurroundingScdmaCells:
cellTowers
wirelessAPs
cdmaCellTowers
cdmaEvdoTowers
lteCellTowers
scdmaCellTowers
_appBundleId
_cdmaCellTowers
_cdmaEvdoTowers
_cellTowers
_lteCellTowers
_numberOfSurroundingCdmaCells
_numberOfSurroundingCdmaEvdoCells
_numberOfSurroundingCells
_numberOfSurroundingLteCells
_numberOfSurroundingScdmaCells
_scdmaCellTowers
_wirelessAPs
hasMcc
hasMnc
hasCellID
cellID
setCellID:
hasTacID
tacID
setTacID:
hasUarfcn
uarfcn
hasPid
setHasMcc:
setHasMnc:
setHasCellID:
setHasTacID:
setHasUarfcn:
setHasPid:
_cellID
_mcc
_mnc
_pid
_tacID
_uarfcn
writeInt64:forTag:
writeBOOL:forTag:
writeInt32:forTag:
hasNeedCellsTowers
needCellsTowers
setNeedCellsTowers:
hasNumberOfSurroundingWifis
numberOfSurroundingWifis
setNumberOfSurroundingWifis:
hasTechnology
technology
setTechnology:
hasWifiGranularity
wifiGranularity
setWifiGranularity:
hasRadius
radius
setRadius:
setHasNeedCellsTowers:
setHasNumberOfSurroundingWifis:
setHasTechnology:
setHasWifiGranularity:
setHasRadius:
requestTypeCode
responseClass
_numberOfSurroundingWifis
_radius
_technology
_wifiGranularity
_needCellsTowers
requestCurrentMicroLocationForClient:
initWithMicroLocationNotifier:
_microLocationNotifier
setWithObjects:
eventWithStream:startDate:endDate:identifierStringValue:metadata:
saveObjects:responseQueue:withCompletion:
deleteAllEventsInEventStream:error:
setMacID:
writeUint32:forTag:
macID
_macID
setTag:
processingCellTowers
setProcessingCellTowers:
processingWirelessAPs
setProcessingWirelessAPs:
finished
setFinished:
setLocationId:
setMacModes:
initWithCapacity:
addMacModes:
macModesCount
clearMacModes
macModesAtIndex:
hasLocationId
setLatitude:
setHasLatitude:
hasLatitude
setLongitude:
setHasLongitude:
hasLongitude
locationId
macModes
_latitude
_longitude
_locationId
_macModes
initWithStartDate:recordId:session:mets:natalies:basalNatalies:sourceId:
natalies
basalNatalies
maxNatalieEntries
fSession
fMets
fNatalies
fBasalNatalies
startMonitoringEmergencyState:
stopMonitoringEmergencyState:
syncgetIsHELOEnabled
syncgetIsHELOEnabledFromCT
peerRangeNotifier
newRequest:
cancelRequest:
requestTileDownloadByType:path:details:
syncgetRegionPreloadManifest:
syncgetTileStats:
syncgetDeleteTileFile:atPath:
syncgetListTilesDirectory:type:time:
decimalDigitCharacterSet
invertedSet
rangeOfCharacterFromSet:
substringToIndex:
setRawCoordinateLatitude:
setHasRawCoordinateLatitude:
hasRawCoordinateLatitude
setRawCoordinateLongitude:
setHasRawCoordinateLongitude:
hasRawCoordinateLongitude
rawCoordinateLatitude
rawCoordinateLongitude
_rawCoordinateLatitude
_rawCoordinateLongitude
initWithTestMode:
initWithTableName:valueInName:valueOutName:defaultValue:binBoundariesWalk:binBoundariesRun:testMode:
convertToCMPedometerBins:
newlineCharacterSet
componentsSeparatedByCharactersInSet:
bins
testMode
distanceGps
distanceRawPed
updateBinsWithValueOut:valueIn:alpha:
isWalkNativeValueOutAvailable
isRunNativeValueOutAvailable
binIntervalForValueIn:
valueOutForValueIn:
isValueInValid:
isValueInRun:
convertToCMStrideCalibrationData:
logBins
binsDidChange
updateBinsWithTrack:
isWalkCalibrationAvailable
isRunCalibrationAvailable
binIntervalForRawSpeed:
kValueForRawSpeed:
isRawSpeedValid:
isRawSpeedRun:
syncgetIsOkToDownloadSmall
raise:format:
setOdometerTarget:
addAlarm:
setInvalid:
removeAlarm:
invalid
initWithDistance:inUniverse:handler:
fire:withError:
odometerTarget
isEqualToDictionary:
reschedule
lastOdometer
handleOdometer:
firstAlarm
setLastOdometer:
handleLocationData:
handleOdometerData:
currentlyScheduled
setCurrentlyScheduled:
fAlarms
fLocationClient
fGpsClient
gpsSource
initWithStart:stop:distanceGps:distanceRawPed:steps:gpsSource:
setStart:
setStop:
setDistanceGps:
setDistanceRawPed:
setGpsSource:
_gpsSource
_start
_stop
_distanceGps
_distanceRawPed
initWithOdometerEntry:
dist
gpsOdomEntry
initWithStepEntry:
firstStepTime
lastStepTime
deltaActiveTime
deltaSteps
deltaDist
speedInstant
speedCurrent
stepCadenceCurrent
pedometerArmConstrainedState
pedEntry
_closeCurrentTrack
gpsLocationBuffer
setTimeEndGpsLocationSegment:
setTimeStartGpsLocationSegment:
_closeTrackCheckGpsLocation
_filterGpsLocationBuffer
_updateGpsLocationBufferFiltered:
gpsLocationBufferFiltered
_closeTrackCheckGpsLocationFiltered
gpsOdometerBuffer
_closeTrackCheckGpsOdometer
pedometerBuffer
_closeTrackCheckPedometer
_extremaRemovedMean:
initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:course:speed:timestamp:
setTimeStart:
setTimeEnd:
reverseObjectEnumerator
timeStart
timeEnd
_removeAdditionalInconsistentSpeedPedometerEntries
_calculateTimeStartEndDistanceGpsPed
timeStartGpsLocationSegment
timeEndGpsLocationSegment
_clearBuffers
calTrackHandler
setGpsLocationBuffer:
setGpsLocationBufferFiltered:
setGpsOdometerBuffer:
setPedometerBuffer:
_calTrackHandler
_gpsLocationBuffer
_gpsLocationBufferFiltered
_gpsOdometerBuffer
_pedometerBuffer
_timeStart
_timeEnd
_timeStartGpsLocationSegment
_timeEndGpsLocationSegment
setHasMets:
hasMets
setBasalMETs:
setHasBasalMETs:
hasBasalMETs
setBasalNatalies:
setHasBasalNatalies:
hasBasalNatalies
setHasDuration:
hasDuration
basalMETs
setNatalies:
_basalNatalies
_natalies
_basalMETs
setSslHostname:
port
createHostValue
httpRequestHeaders
setHttpRequestHeader:forKey:
startWithConnectionProperties:
protectionSpace
authenticationMethod
serverTrust
sender
credentialForTrust:
connectionShouldUseCredentialStorage:
connection:canAuthenticateAgainstProtectionSpace:
connection:didReceiveAuthenticationChallenge:
connection:didCancelAuthenticationChallenge:
sslHostname
_sslHostname
initWithURL:andDelegate:validatingAgainstHostname:
setFConnectionSession:
fConnectionSession
newCFMutableURLRequestWithURL:
initWithCFRequest:delegate:usingSession:
newConnectionWithCFURLRequest:delegate:
initWithURL:andDelegate:usingConnectionSession:
initWithURL:andDelegate:
newCFURLConnectionWithRequest:delegate:
removeDelegateForConnection:
initWithURL:statusCode:HTTPVersion:headerFields:
connection:didReceiveResponse:
connection:didReceiveData:
connectionDidFinishLoading:
connection:didFailWithError:
connection:willSendRequestForAuthenticationChallenge:
_createAuthenticationChallengeForCFAuthChallenge:sender:
_web_initWithDomain:code:failingURL:
_cfurlcredential
useCredential:forAuthenticationChallenge:
continueWithoutCredentialForAuthenticationChallenge:
cancelAuthenticationChallenge:
performDefaultHandlingForAuthenticationChallenge:
rejectProtectionSpaceAndContinueWithChallenge:
connectionDidReceiveResponse:
connectionDidReceiveData:
connectionDidFinishLoading
connectionDidFailWithError:
connectionDidTerminate
connectionDidReceiveAuthenticationChallenge:authCompletionBlock:
_cfConnection
_connectionSession
_challenge
_authCb
_url
initWithKeyOptions:valueOptions:capacity:
createConnectionSessionWithPurgeTimeout:
delegateForConnection:
_connectionDelegates
setHasOdometer:
setDeltaDistance:
setHasDeltaDistance:
hasDeltaDistance
setDeltaDistanceAccuracy:
setHasDeltaDistanceAccuracy:
hasDeltaDistanceAccuracy
deltaDistance
deltaDistanceAccuracy
_deltaDistance
_deltaDistanceAccuracy
client
initWithDaemonClient:
scannerWithString:
scanHexInt:
fetchMostRecentConnectionWithReply:
syncgetMostRecentVehicleConnection
syncgetMostRecentInVehicle
deliverAndReleaseNotification:withFlags:
refreshMetrics
isEqualToArray:
floatValue
feedFitnessMachineData:
syncgetAppType:
applicationIsInstalled:
removedSystemApplications
bundleURL
bundleContainerURL
isAuthorizedForLocation
onMotionStateMediatorNotification:data:
serializeMeta:toData:
setData:
deserializeMeta:fromData:
writeMeta:toHandle:
readMeta:fromHandle:
fBuffer
fMode
requestTileDownloadForLat:lon:details:
updatePAL:
pause
recordExerciseMinute:
setActiveVo2maxOverride:
syncgetUserProfile
syncgetUserProfileInternal
setUserProfile:merge:
resetUserProfileForKeys:
syncgetQueryNatalieDataSince:records:
syncgetQueryExerciseMinuteDataSince:records:
addEntriesFromDictionary:
modeAsString:
StringAsMode:
avgIntensity
setAvgIntensity:
_avgIntensity
isSupportedForType:
fileDescriptor
addProximityZoneEvent:
addProximityScanEvent:
requestScan:
ageOutElevationArray
feedElevationData:
fElevationWindow
setTripTimestamp:
tripTimestamp
initWithTracksData:andLocation:
_tripTimestamp
_tripId
queryBundleIdentifiersWithEnteredRegionsWithReply:
addMonitoredRegion:
removeMonitoredRegion:
syncgetIsTracking
syncgetStartTracking
syncgetStopTracking
querySinceRecord:withReply:
setVenues:
addVenues:
venuesCount
clearVenues
venuesAtIndex:
venues
_venues
setDirectionOfTravelAssistance:
setMapMatchedPositionAssistance:
setTunnelBridgeAssistance:
setTunnelEndPointPositionAssistance:
initWithOnBodyResult:confidence:timestamp:
fResult
fConfidence
hasMac
setHasMode:
hasMode
_mac
setTrigger:
activityAlarmInfo
initWithTrigger:duration:onRunLoop:withHandler:
fire
executable
setExecutable:
fConcentrator
fIsValid
fRunLoop
fQueue
fHandler
_trigger
_executable
syncgetAddProximityZone:
syncgetRemoveProximityZone:
_stopLoggingOnQueue
createDirectoryAtPath:withIntermediateDirectories:attributes:error:
initWithFormat:
fileHandleForWritingAtPath:
seekToEndOfFile
flushBufferToFile
fHour
fFile
fFilename
fBufferIndex
syncgetAddFence:
syncgetRemoveFence:
syncgetFences:forBundle:
syncgetFences:forBundle:onBehalfOf:
syncgetCanBundle:performFenceOperationFor:
lacID
setLacID:
hasArfcn
arfcn
hasPsc
setHasArfcn:
setHasPsc:
_arfcn
_lacID
_psc
updateStrideLengthRun
isBinWalk:
walkBinCount
binIntervalForStepCadence:
strideLengthForStepCadence:
isStepCadenceValid:
_userHeight
_strideLengthRun
meta
initWithHarvesterExternal:
_harvesterExternal
isWheelchairDataSubmissionAllowed
timer
initWithDispatchSilo:
setUnderlyingQueue:
initWithUnderlyingQueue:
initMain
operationQueue
_queue
_operationQueue
hasSuffixInsensitive:
numberOfArguments
methodReturnLength
getArgumentTypeAtIndex:
initWithSelector:andMethodSignature:
numArguments
_numArguments
_replyBlockIndex
_returnAddressIndex
_returnValueSize
_sel
_sig
_str
signatureWithObjCTypes:
initWithProtocol:base:
_selectors
_protocol
initWithDelegateInterface:proxiedInterface:delegateObject:delegateSilo:andUninitializedPeer:
initWithDelegateInterface:proxiedInterface:andUninitializedPeer:
getInfoForSelector:
selector
argumentsRetained
replyBlockIndex
getArgument:atIndex:
setTarget:
retainArguments
invoke
setArgument:atIndex:
returnAddressIndex
delegateSilo
invokeWithTarget:
returnValueSize
methodSignatureForSelector:
forwardInvocation:
delegateInterface
proxiedInterface
_peer
_asymStrongPeer
_last
_opaqueTag
_delegateSilo
_delegateInterface
_proxiedInterface
_inboundInterface
_outboundInterface
setKeyedPayloads:
keyedPayloads
setPayload:forKey:
getPayloadForKey:
removePayloadForKey:
setPayload:forSelector:
removePayloadForSelector:
getPayloadForSelector:
_keyedPayloads
manufacturer
setMake:
modelNumber
setModel:
firmwareRevision
initWithAccessory:
_passSource
_passTypeId
_associatedStoreIds
initTrackingServiceClass:
svcClass
residentCount
setResidentCount:
synCount
ackCount
_synCount
_ackCount
_residentCount
_svcClass
sortUsingComparator:
insertObject:atIndex:
rereadConfiguration
setWithArray:
unionSet:
containsString:
isHydrated
setSilo:
setVendor:
getServiceWithName:
inboundInterface
outboundInterface
initialize
setServiceReplacementMap:missBehavior:
isServiceRunning:
getSiloForService:
_catalog
_serviceReplacementMap
_unavailableServiceNames
_missBehavior
workoutEventAsString:
StringAsWorkoutEvent:
setHasWorkoutType:
hasWorkoutType
workoutTypeAsString:
StringAsWorkoutType:
hasSessionId
_sessionId
_workoutType
setDestructor:
destructor
_data
_destructor
_client
appendString:
_notifier
cl_json_serializeValue:
cl_json_serializeKey
initWithAge:gender:height:weight:condition:
genderString:
height
weight
condition
initWithAge:gender:height:weight:
fAge
fGender
fHeight
fWeight
fCondition
setPolygon:
hasName
index
setIndex:
polygon
_index
_polygon
setDictionary:
cachePopulationReplyBlocks
setCachePopulationReplyBlocks:
populated
setPopulated:
_populated
_cachePopulationReplyBlocks
powerSource
setPowerSource:
setHasPowerSource:
hasPowerSource
powerSourceAsString:
StringAsPowerSource:
fitnessTrackingEnabled
setFitnessTrackingEnabled:
_powerSource
_fitnessTrackingEnabled
setAltitude:andPressure:
initWithAltitude:andPressure:
fAltitude
fPressure
initWithAltitude:andTimestamp:atBaseAltitude:
relativeAltitude
_internal
initWithRecordId:sourceId:startDate:endDate:elevationAscended:elevationDescended:
fElevationAscended
fElevationDescended
decodeInt32ForKey:
encodeInt32:forKey:
initWithDataType:
setIdentifier:
dataIdentifier
setDataIdentifier:
offset
setOffset:
dataSize
setDataSize:
dataType
setDataType:
movement
setMovement:
_movement
_offset
_dataSize
_dataType
_dataIdentifier
metaIdentifier
setMetaIdentifier:
_metaIdentifier
setDuration:
rate
setRate:
_rate
setHasDistance:
hasDistance
setAccuracy:
setHasAccuracy:
hasAccuracy
setGpsAltitude:
setHasGpsAltitude:
hasGpsAltitude
setHasSpeed:
hasSpeed
setRawSpeed:
setHasRawSpeed:
hasRawSpeed
setGpsSpeedAccuracy:
setHasGpsSpeedAccuracy:
hasGpsSpeedAccuracy
setTimestampGps:
setHasTimestampGps:
hasTimestampGps
quality
setQuality:
setHasQuality:
hasQuality
qualityAsString:
StringAsQuality:
accuracy
gpsAltitude
rawSpeed
gpsSpeedAccuracy
timestampGps
_timestampGps
_accuracy
_gpsAltitude
_gpsSpeedAccuracy
_quality
_rawSpeed
smoothLocations:useType:
exportedInterface
setClasses:forSelector:argumentIndex:ofReply:
didSmoothLocations:ofType:
visitMonitorWakeTimerEnabled
setVisitMonitorWakeTimerEnabled:
wifiPowerEnabled
setWifiPowerEnabled:
lastUpdateVisitMonitorWakeTimerDate
setLastUpdateVisitMonitorWakeTimerDate:
_visitMonitorWakeTimerEnabled
_wifiPowerEnabled
_lastUpdateVisitMonitorWakeTimerDate
strideCalibratorSetSession:
setEnabled:
syncgetEnabled
syncgetQueryStartTime:andStopTime:
reset
syncgetDbUUID
syncgetQueryPedometerDataSince:withResponseArray:
syncgetCopyRawSpeedToKValueBins
syncgetCopyStepCadenceToStrideLengthBins
setRawSpeedToKValueBins:
setStepCadenceToStrideLengthBins:
syncgetRawSpeedToKValueDefaultBins
syncgetStepCadenceToStrideLengthDefaultBins
syncgetIsStrideCalibrationConvergedMedianForSpeed:
getPedometerCalibrationBins:withReply:
getPedometerBinsAndHistoryWithReply:
initInUniverse:stepCountDb:
updateEntryDistanceAndPace:
copyBins
setBins:
defaultBins
isCalibrationConvergedMedianForSpeed:
copyHistory
setUserHeight:
queryUsingRecord:withReply:
clearCalibrations
initWithSwimEntry:
syncget_prepareSessionEndForSessionType:
addClient:prepareSessionEndForSessionType:
removeClient:prepareSessionEndForSessionType:
fetchLocationsOfInterestWithinDistance:ofLocation:withReply:
CLMIGIntersiloDelegate
CLIntersiloProxyDelegateProtocol
NSObject
CLMotionLoggerAdapter
CLRoutineMonitorClientProtocol
CLIntersiloClientProtocol
CLPrivacyManagerProtocol
CLIntersiloServiceProtocol
CLPrivacyManagerClientProtocol
CLPrivacyManager
CLSignificantVisitManagerExtensions
CLSignificantVisitManagerServiceProtocol
CLSignificantVisitManagerClientProtocol
CLSignificantVisitManager
CLClientAuthorizationCacheClientProtocol
CLGestureDataLoggerProtocol
CLNotifierServiceProtocol
CLGestureDataLoggerClientProtocol
CLNotifierServiceClientProtocol
CLGestureDataLoggerAdapter
IsSupported
CLMicroLocationAWDMetricsIntersiloDelegate
CMSleepData
CLTileSyncSyChange
SYChange
SYObject
CLTileSyncSySerializer
SYChangeSerializer
CLTileSyncDelegate
PSYSyncCoordinatorDelegate
PSYInitialSyncStateObserverDelegate
SYServiceDelegate
SYSessionDelegate
ALCMElevation
NSCopying
CMMotionUtils
CLStreamedLocationProviderProtocol
CLLocationProviderProtocol
CLStreamedLocationProviderClientProtocol
CLLocationProviderClientProtocol
CLStreamedLocationProviderAdapter
CLLocationStreamingConnectionManagerClientProtocol
CLStreamedLocationProviderAssertion
CLStreamedLocationProviderFitnessAssertion
CLStreamedLocationProviderDisablementAssertion
CLStreamedLocationProviderEmergencyEnablementAssertion
ALMotionState
ALCMMotionContextMotionState
ALCLStrideCalEntry
ALCLStepCountEntry
ALCLSedentaryAlarmData
ALCLNatalieFeatures
ALCLBodyMetrics
ALCLMotionActivity
ALActivityOverrideMsg
ALActivityLog
CLActivityLoggerProtocol
CLActivityLoggerClientProtocol
CLActivityLoggerAdapter
CLOdometerNotifierProtocol
CLOdometerNotifierClientProtocol
CLOdometerNotifierAdapter
TRANSITPbRegionPreloadTile
CMStrideCalibrationStepCountBuffer
CLHarvestAccessoryLocationProviderAdapter
CLAccessoryLocationProviderClientProtocol
CLSedentaryTimerNotifierProtocol
CLSedentaryTimerNotifierClientProtocol
CLSedentaryTimerNotifierAdapter
ALCLJacksonData
TRANSITPbTransitTile
CLMescalSigner
CLDuetForegroundApp
CLDuetHomeKitScene
CLDuetHomeKitAccessory
CLDuetHomeKitAppView
CLKeychainItemWrapper
CLTimer
CLLocationStreamingMessage
CLLocationStreamingConnectionManagerServiceProtocol
CLLocationStreamingConnectionManager
IDSServiceDelegate
CLStoreServicesRequestorResult
CLStoreServicesRequestor
WPHomeKit
BackwardsCompatible
CLHomeKitProviderProtocol
CLHomeKitProviderClientProtocol
CLHomeKitProviderAdapter
CLHomeKitDelegate
CBCentralManagerDelegate
CLTelephonyServiceProtocol
CLTelephonyServiceClientProtocol
CLTelephonyServiceAdapter
CLWifiServiceProtocol
CLWifiServiceClientProtocol
CLWifiServiceAdapter
ALCLStrideCalEntryDeprecated
CLMotionStateRoutineAdapter
CLMotionStateProtocol
CLMotionStateClientProtocol
CLMotionStateAdapter
CLGyroCalibrationDatabaseProtocol
CLGyroCalibrationDatabaseClientProtocol
CLGyroCalibrationDatabaseLocationdAdapter
CLLocationDerivedSpeedEstimator
CLCompanionNotifierProtocol
CLCompanionNotifierClientProtocol
CLCompanionNotifierAdapter
CLDaemonStatusStateTracker
CLDaemonStatusInternal
RadiosPreferencesDelegate
CLDaemonStatusProtocol
CLDaemonStatusClientProtocol
CLDaemonStatusAdapter
CLHarvestDataMotionActivity
NSCoding
CLHarvestDataAccessPoint
CMSwimData
CLAccessoryObserverHelper
ALSLocationDelegate
PBSessionRequesterDelegate
CLTimeManagerProtocol
CLTimeManagerClientProtocol
CLTimeManagerAdapter
CLLocationControllerProtocol
CLLocationControllerClientProtocol
CLLocationControllerAdapter
CLWifiLocationProviderProtocol
CLWifiLocationProviderClientProtocol
CLWifiLocationProviderAdapter
CLMotionStateMediatorProtocol
CLMotionStateMediatorClientProtocol
CLMotionStateMediatorAdapter
CLLocationProviderAdapter
CLNmeaLocationProviderProtocol
CLNmeaLocationProviderClientProtocol
CLNmeaLocationProviderAdapter
CLNetworkLocationProviderProtocol
CLNetworkLocationProviderClientProtocol
CLNetworkLocationProviderAdapter
CLAccessoryLocationProviderProtocol
CLAccessoryLocationProviderAdapter
CLFilteredLocationControllerProtocol
CLFilteredLocationControllerClientProtocol
CLFilteredLocationControllerAdapter
CLStateTracker
CLOperatorSettingsProtocol
CLOperatorSettingsClientProtocol
CLOperatorSettingsAdapter
CMExerciseMinuteData
CLRouteListener
GEONavigationListenerDelegate
TRANSITPbRegionPreloadManifest
CMElevationData
ALCLSessionCatherine
ALCMCalorieData
CRCollectionDelegate
PBRequesterDelegate
CMSedentaryTimerData
CLClientManagerProtocol
CLClientManagerPublicProtocol
CLClientManagerClientProtocol
CLClientManagerAdapter
CMMotionActivity
CLCarrierSettingsProtocol
CLCarrierSettingsClientProtocol
CLCarrierSettingsAdapter
TRANSITPbLocationFingerprints
CLWatchOrientationSettingsNotifierProtocol
CLWatchOrientationSettingsNotifierClientProtocol
CLWatchOrientationSettingsNotifierAdapter
CLDiagnosticManagerServiceProtocol
CLDiagnosticManagerClientProtocol
CLDiagnosticManagerXPCServerInterface
CLDiagnosticManager
NSFileManagerDelegate
NSXPCListenerDelegate
TRANSITPbRegionPreloadMarket
CMOdometerData
CLLocationStreamerServiceProtocol
CLLocationStreamerClientProtocol
CLLocationStreamer
CLCachedLocationControllerProtocol
CLCachedLocationControllerClientProtocol
CLCachedLocationControllerAdapter
CLGeoAccessMapGeometryGeoRestrictionsAllowNetworkLoad
GEOMapAccessRestrictions
CMStrideCalDataContainer
WPAirPlaySolo
CLATVAirplayDevice
CPPObject
CLATVAirplayMonitorServiceProtocol
CLATVAirplayMonitorClientProtocol
CLATVAirplayMonitor
CMStrideCalibrator
CMStrideCalibrationDatabaseDelegate
CMStrideCalLocationFSMDelegate
CLFitnessTrackingNotifierProtocol
CLFitnessTrackingNotifierClientProtocol
CLFitnessTrackingNotifierAdapter
CLClientManagerUsageSyncMessage
CLClientManagerUsageSyncMessageError
CLUsageSyncManagerProtocol
CLUsageSyncManagerClientProtocol
CLUsageSyncManager
CLTimeZoneManagerProtocol
CLTimeZoneManagerClientProtocol
CLTimeZoneManagerAdapter
CMActivity
CLFenceManagerProtocol
CLFenceManagerClientProtocol
CLFenceManagerAdapter
CMCatherineData
CLAuthSyncVectorClock
ALCMCoarseElevation
ALCLStairClimbingModel
CMMotionAlarm
NSSecureCoding
PSYSyncCoordinator
PSYServiceSyncSession
PSYInitialSyncStateObserver
CMStrideCalibrationStats
CLPersistentTimerInternal
ALCLAllDayHeartRate
ClientRegistration
CLMotionAlarmNotifierProtocol
CLMotionAlarmNotifierClientProtocol
CLMotionAlarmNotifierAdapter
ALCLRowingModel
CLSimulatedLocationProviderProtocol
CLSimulatedLocationProviderClientProtocol
CLSimulatedLocationProviderAdapter
CLCompanionActivityAWDAggregator
CLCompanionActivityAWDAggregatorServiceProtocol
CLAuthSyncManagerProtocol
CLAuthSyncManagerClientProtocol
CLAuthSyncManager
CLCatherineNotifierProtocol
CLCatherineNotifierClientProtocol
CLCatherineNotifierAdapter
CLHarvestDataPoiMuid
CLHarvestDataPoiLocation
CLHarvestDataPoiWifi
CLHarvestDataPoiCollection
CLFallNotifierProtocol
CLFallNotifierClientProtocol
CLFallNotifierAdapter
ALCLIDSStatus
CLCompassDatabaseProtocol
CLCompassDatabaseClientProtocol
CLCompassDatabaseLocationdAdapter
CLTilesManagerServerAppRecommendationResult
CLTilesManagerServerAppRecommendationRequest
CMStrideCalibrationActivityBuffer
CLHarvestAppRealtimePolygon
CLDuetRegistration
CLDuetMonitorRegistrationId
CLDuetMonitorServiceProtocol
CLDuetMonitor
CLDuetPredicates
CLSuggestedActionManagerAppRecommendationResult
CLSuggestedActionServiceProtocol
CLSuggestedActionClientProtocol
CLSuggestedActionManager
CLCompassDaemonClientNotifierProtocol
CLCompassDaemonClientNotifierClientProtocol
CLCompassDaemonClientNotifierAdapter
CLHarvestDataApp
CLIntersiloUniverse
CLCompanionTransport
CMLogItemInternal
CMLogItem
ALCMCalorieDataDeprecated
TRANSITPbLocationFingerprint
CMPedometerBin
ConversionSupport
Initializers
CLCandy
CLBundleLocationProviderContext
CLPBRequestIndexGenerator
CLSimulationControllerProtocol
CLSimulationControllerClientProtocol
CLSimulationControllerAdapter
CLStepDistanceEstimator
CLBluetoothServiceProtocol
CLBluetoothServiceClientProtocol
CLBluetoothServiceAdapter
CMPedometerData
CMPedometerEvent
CLOnBodyNotifierProtocol
CLOnBodyNotifierClientProtocol
CLOnBodyNotifierAdapter
CMFitnessMachineData
CMPedometerTable
CLCompanionSyncAuthObject
CLPressureCalibrationDatabaseProtocol
CLPressureCalibrationDatabaseClientProtocol
CLPressureCalibrationDatabaseAdapter
CLCapabilityMonitorServiceProtocol
CLCapabilityMonitorClientProtocol
CLCapabilityMonitor
ALCLElevationDeprecated
CLSignificantChangeManagerProtocol
CLSignificantChangeManagerClientProtocol
CLSignificantChangeManagerAdapter
CMStrideCalibrationData
CLApplicationLifecycleManagerProtocol
CLApplicationLifecycleManagerClientProtocol
CLApplicationLifecycleManagerAdapter
CLCoarseCellTilesManagerProtocol
CLCoarseCellTilesManagerClientProtocol
CLCoarseCellTilesManagerAdapter
CMStrideCalLocationFSM
SYService
SYSession
SYDictionaryObject
CMStrideCalibrationDatabase
DataInput
RTVisit
CLRoutineMonitorServiceProtocol
CLLocationManagerRoutineServerInterface
CLLocationManagerRoutineClientInterface
CLRoutineMonitor
CLFenceMonitorAdapter
CLGeomagneticModelProviderProtocol
CLGeomagneticModelProviderClientProtocol
CLGeomagneticModelProviderLocationdAdapter
CLSignalEnvironmentProviderProtocol
CLSignalEnvironmentProviderClientProtocol
CLSignalEnvironmentProviderAdapter
CLRemoteMotionAlarmServiceProtocol
CLRemoteMotionAlarmClientProtocol
CLRemoteMotionAlarm
CLUnifiedCellLocationProviderProtocol
CLUnifiedCellLocationProviderClientProtocol
CLUnifiedCellLocationProviderAdapter
CLRunningAggregatorAWDServiceProtocol
CLRunningAggregatorAWDClientProtocol
CLRunningAggregatorAWD
CLPolygonSimplifier
CLSubHarvesterMicroLocationDuetDelegate
CLDuetMonitorClientProtocol
CLGnssProviderAdapter
CLEmergencyClientProtocol
CLDataProtectionManagerProtocol
CLDataProtectionManagerClientProtocol
CLDataProtectionManagerAdapter
CLHarvestDataWifi
CLStatusBarIconManagerProtocol
CLStatusBarIconManagerClientProtocol
CLStatusBarIconManagerAdapter
CMWorkout
CMSwimWorkout
CMFitnessMachineWorkout
CLStreamingAwareLocationProviderProtocol
CLStreamingAwareLocationProviderAdapter
CLHarvestDataCell
CLHarvestDataCellNeighbor
CLHarvestDataGsm
CLHarvestDataGsmNeighbor
CLHarvestDataCdma
CLHarvestDataCdmaNeighbor
CLHarvestDataLte
CLHarvestDataLteNeighbor
CLHarvestDataScdma
CLHarvestDataScdmaNeighbor
CLHarvestDataCellNeighborsGroup
ALSCdmaCellTower
ALCLSedentaryAlarmDataDeprecated
ALSCdmaEvdoTower
CLSensorCalibrationControllerProtocol
CLSensorCalibrationControllerClientProtocol
CLSensorCalibrationControllerAdapter
ALSCellTower
ALSLocation
ALSLocationRequest
ALSLocationResponse
ALSLteCellTower
ALSNearbyRequest
CLMicroLocationNotifierProtocol
CLMicroLocationNotifierClientProtocol
CLMicroLocationNotifierAdapter
CLMicroLocationIntersiloDelegate
ALSNearbyResponse
ALSWirelessAP
CLALSRequester
TRANSITPbLocationFingerprintV1
CMNatalieData
CLEmergencyControllerProtocol
CLEmergencyControllerAdapter
CLAutopauseProviderProtocol
CLAutopauseProviderClientProtocol
CLAutopauseProviderAdapter
isSupported
CLPeerRangingNotifierProtocol
CLPeerRangingNotifierClientProtocol
CLPeerRangingNotifierAdapter
CLTilesManagerProtocol
CLTilesManagerClientProtocol
CLTilesManagerAdapter
CLStreamedLocationInternal
CMPedometerTableRawSpeedToKValue
ALCMCoarseElevationDeprecated
CLBTAProtocol
CLBTAClientProtocol
CLBTAAdapter
CLOdometerAlarm
CLPressureBiasProtocol
CLPressureBiasClientProtocol
CLPressureBiasAdapter
CLOdometerAlarmManagerProtocol
CLOdometerAlarmManagerClientProtocol
CLOdometerAlarmManager
CLCompanionPedometerAWDAggregator
CLCompanionPedometerAWDAggregatorServiceProtocol
CalibrationTrack
CMGpsOdometerEntry
CMPedometerEntry
CalTrackFinder
ALCLNatalieDataDeprecated
CLCustomAuthPBRequester
NSURLConnectionDelegate
CLPCPBRequester
CLURLConnection
NSURLAuthenticationChallengeSender
CLURLConnectionSession
CLStreamedLocationPrivate
CLDaemonClientAdapter
CLStreamingAwareLocationProviderClientProtocol
CLVehicleConnectionNotifierProtocol
CLVehicleConnectionNotifierPublicProtocol
CLVehicleConnectionNotifierClientProtocol
CLVehicleConnectionNotifierAdapter
CLMotionSyncStoreProtocol
CLMotionSyncStoreClientProtocol
CLMotionSyncStoreAdapter
CLLocationAwarenessProviderProtocol
CLLocationAwarenessProviderClientProtocol
CLLocationAwarenessProviderAdapter
CLFitnessMachineNotifierProtocol
CLFitnessMachineNotifierClientProtocol
CLFitnessMachineNotifierAdapter
CLAppMonitorProtocol
CLAppMonitorClientProtocol
CLAppMonitorAdapter
TRANSITPbLocationFingerprintsV1
CLMotionStateObserverProtocol
CLMotionStateObserverClientProtocol
CLMotionStateObserverAdapter
CLCellTilesManagerProtocol
CLCellTilesManagerClientProtocol
CLCellTilesManagerAdapter
CLNotifiers
Callbacks
CLSensorRecorderSensorMetaSerializer
CLDeviceMotionProperties
CLWifiTilesManagerProtocol
CLWifiTilesManagerClientProtocol
CLWifiTilesManagerAdapter
CLNatalimetryNotifierProtocol
CLNatalimetryNotifierClientProtocol
CLNatalimetryNotifierAdapter
CLCallbackDropNullDelegate
ALCMExerciseMinute
CLSensorRecorderNotifierProtocol
CLSensorRecorderNotifierClientProtocol
CLSensorRecorderNotifierAdapter
CLBTLEBeaconProviderMockProtocol
CLBTLEBeaconProviderMockClientProtocol
CLBTLEBeaconProviderMockAdapter
CMStrideCalibrationElevationBuffer
CLHarvestDataTracks
CLBTLEFenceManagerProtocol
CLBTLEFenceManagerClientProtocol
CLBTLEFenceManagerAdapter
CLSpringTrackingNotifierProtocol
CLSpringTrackingNotifierClientProtocol
CLSpringTrackingNotifierAdapter
CLHarvestAppRealtimeAvailabilityTile
CLGpsAssistantProtocol
CLGpsAssistantClientProtocol
CLGpsAssistantAdapter
CMOnBodyStatus
TRANSITPbMacModePair
CMActivityAlarm
CLBTLEBeaconProviderProtocol
CLBTLEBeaconProviderClientProtocol
CLBTLEBeaconProviderAdapter
CLDarwinNotifierProtocol
CLDarwinNotifierClientProtocol
CLDarwinNotifierAdapter
CLFallLogger
CLBeaconFenceAuthorizationManagerProtocol
CLBeaconFenceAuthorizationManagerClientProtocol
CLBeaconFenceAuthorizationManagerAdapter
ALSScdmaCellTower
CLBTLERangeManagerProtocol
CLBTLERangeManagerClientProtocol
CLBTLERangeManagerAdapter
CMPedometerTableStepCadenceToStrideLength
CLTurnStateProtocol
CLTurnStateClientProtocol
CLTurnStateAdapter
CLHarvestRoutineAdapter
CLSilo
CLDispatchTimerScheduler
CLTimerScheduler
CLDispatchSilo
MainSilo
CLExtensions
CLIntersiloInterfaceSelectorInfo
CLIntersiloInterface
CLIntersiloProxy
CLIntersiloService
CLIntersiloServiceMock
CLIntersiloServiceMockProtocol
CLHarvestDataPass
CLServiceVendorHeartbeatRecord
_Locationd
_CLMainService
_CLUnSupportedService
CLServiceVendor
ALCMWorkoutEvent
CLNotifierData
CLNotifierClientAdapter
CLNotifierServiceAdapter
CLJsonLogging
CMCalorieUserInfo
CLHarvestAppRealtimeHarvestRegion
CLClientAuthorizationCacheProtocol
CLClientAuthorizationCache
ALCMFitnessTracking
CMAltitudeDataInternal
CMAltitudeData
CMSignificantElevationSample
CLSensorRecorderSensorMeta
CLSensorRecorderSensorMetaRequestById
CLSensorRecorderSensorMetaRequestByDateRange
CLSensorRecorderSensorDataRequestById
CLSensorRecorderRecordSensorTypeFor
CLSensorRecorderWriteSensorDataToFileForDateRange
CLSensorRecorderSensorAvailable
CLSensorRecorderSensorSampleRate
ALCLOdometer
CLSmootherMonitorServiceProtocol
CLSmootherMonitorClientProtocol
CLLocationSmootherServerInterface
CLLocationSmootherClientInterface
CLSmootherMonitor
CLStepCountNotifierProtocol
CLStepCountNotifierClientProtocol
CLStepCountNotifierAdapter
CLSwimNotifierProtocol
CLSwimNotifierClientProtocol
CLSwimNotifierAdapter
CLSwimNotifierIntersiloDelegate
B24@0:8@16
#16@0:8
@16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B16@0:8
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
v20@0:8B16
v24@0:8@16
v24@0:8@"CLVisit"16
v24@0:8@"RTScenarioTrigger"16
@24@0:8^{CLMotionLogger=@{CLPowerAssertion=^^?i^v^{__CFString}dd@}^{Dispatcher}^{Dispatcher}^{Dispatcher}^{Dispatcher}^{Dispatcher}^{Dispatcher}^{Dispatcher}^{Dispatcher}^{Dispatcher}^{Dispatcher}^{Dispatcher}^{Dispatcher}{CLBodyMetrics=iffffffffif}@{CLGizmoOrientation=ii}{unique_ptr<CLMotionStateObserver_Type::Client, std::__1::default_delete<CLMotionStateObserver_Type::Client> >={__compressed_pair<CLMotionStateObserver_Type::Client *, std::__1::default_delete<CLMotionStateObserver_Type::Client> >=^{Client}}}{unique_ptr<CLOdometerNotifier_Type::Client, std::__1::default_delete<CLOdometerNotifier_Type::Client> >={__compressed_pair<CLOdometerNotifier_Type::Client *, std::__1::default_delete<CLOdometerNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLCatherineNotifier_Type::Client, std::__1::default_delete<CLCatherineNotifier_Type::Client> >={__compressed_pair<CLCatherineNotifier_Type::Client *, std::__1::default_delete<CLCatherineNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLVehicleConnectionNotifier_Type::Client, std::__1::default_delete<CLVehicleConnectionNotifier_Type::Client> >={__compressed_pair<CLVehicleConnectionNotifier_Type::Client *, std::__1::default_delete<CLVehicleConnectionNotifier_Type::Client> >=^{Client}}}{CLServiceLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBBBB^{__CLClient}^{__CLClient}^{__CLClient}^{__CFString}^{__CFString}@B}{unique_ptr<CLServiceLocationProvider_Type::Client, std::__1::default_delete<CLServiceLocationProvider_Type::Client> >={__compressed_pair<CLServiceLocationProvider_Type::Client *, std::__1::default_delete<CLServiceLocationProvider_Type::Client> >=^{Client}}}{unique_ptr<CLGnssProvider_Type::Client, std::__1::default_delete<CLGnssProvider_Type::Client> >={__compressed_pair<CLGnssProvider_Type::Client *, std::__1::default_delete<CLGnssProvider_Type::Client> >=^{Client}}}{unique_ptr<CLNatalimetryNotifier_Type::Client, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >={__compressed_pair<CLNatalimetryNotifier_Type::Client *, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLMotionState_Type::Client, std::__1::default_delete<CLMotionState_Type::Client> >={__compressed_pair<CLMotionState_Type::Client *, std::__1::default_delete<CLMotionState_Type::Client> >=^{Client}}}{unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client> >={__compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> >=^{Client}}}{unique_ptr<CLWatchOrientationSettingsNotifier_Type::Client, std::__1::default_delete<CLWatchOrientationSettingsNotifier_Type::Client> >={__compressed_pair<CLWatchOrientationSettingsNotifier_Type::Client *, std::__1::default_delete<CLWatchOrientationSettingsNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLWifiServiceClient, std::__1::default_delete<CLWifiServiceClient> >={__compressed_pair<CLWifiServiceClient *, std::__1::default_delete<CLWifiServiceClient> >=^{CLWifiServiceClient}}}{Settings={CLMotionDefaultsWrite<bool>=BB}{CLMotionDefaultsWrite<bool>=BB}{CLMotionDefaultsWrite<bool>=BB}{CLMotionDefaultsWrite<bool>=BB}{CLMotionDefaultsWrite<double>=Bd}{CLMotionDefaultsWrite<double>=Bd}{CLMotionDefaultsWrite<double>=Bd}{CLMotionDefaultsWrite<double>=Bd}{CLMotionDefaultsWrite<double>=Bd}{CLMotionDefaultsWrite<int>=Bi}{CLMotionDefaultsWrite<bool>=BB}{CLMotionDefaultsWrite<bool>=BB}{CLMotionDefaultsWrite<bool>=BB}{CLMotionDefaultsWrite<bool>=BB}{CLMotionDefaultsWrite<bool>=BB}{CLMotionDefaultsWrite<bool>=BB}{CLMotionDefaultsWrite<bool>=BB}{CLMotionDefaultsWrite<bool>=BB}{CLMotionDefaultsWrite<bool>=BB}{CLMotionDefaultsWrite<bool>=BB}{CLMotionDefaultsWrite<bool>=BB}{CLMotionDefaultsWrite<bool>=BB}{CLMotionDefaultsWrite<bool>=BB}{CLMotionDefaultsWrite<bool>=BB}{CLMotionDefaultsWrite<bool>=BB}{CLMotionDefaultsWrite<bool>=BB}}@@}16
^{CLMotionLogger=@{CLPowerAssertion=^^?i^v^{__CFString}dd@}^{Dispatcher}^{Dispatcher}^{Dispatcher}^{Dispatcher}^{Dispatcher}^{Dispatcher}^{Dispatcher}^{Dispatcher}^{Dispatcher}^{Dispatcher}^{Dispatcher}^{Dispatcher}{CLBodyMetrics=iffffffffif}@{CLGizmoOrientation=ii}{unique_ptr<CLMotionStateObserver_Type::Client, std::__1::default_delete<CLMotionStateObserver_Type::Client> >={__compressed_pair<CLMotionStateObserver_Type::Client *, std::__1::default_delete<CLMotionStateObserver_Type::Client> >=^{Client}}}{unique_ptr<CLOdometerNotifier_Type::Client, std::__1::default_delete<CLOdometerNotifier_Type::Client> >={__compressed_pair<CLOdometerNotifier_Type::Client *, std::__1::default_delete<CLOdometerNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLCatherineNotifier_Type::Client, std::__1::default_delete<CLCatherineNotifier_Type::Client> >={__compressed_pair<CLCatherineNotifier_Type::Client *, std::__1::default_delete<CLCatherineNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLVehicleConnectionNotifier_Type::Client, std::__1::default_delete<CLVehicleConnectionNotifier_Type::Client> >={__compressed_pair<CLVehicleConnectionNotifier_Type::Client *, std::__1::default_delete<CLVehicleConnectionNotifier_Type::Client> >=^{Client}}}{CLServiceLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBBBB^{__CLClient}^{__CLClient}^{__CLClient}^{__CFString}^{__CFString}@B}{unique_ptr<CLServiceLocationProvider_Type::Client, std::__1::default_delete<CLServiceLocationProvider_Type::Client> >={__compressed_pair<CLServiceLocationProvider_Type::Client *, std::__1::default_delete<CLServiceLocationProvider_Type::Client> >=^{Client}}}{unique_ptr<CLGnssProvider_Type::Client, std::__1::default_delete<CLGnssProvider_Type::Client> >={__compressed_pair<CLGnssProvider_Type::Client *, std::__1::default_delete<CLGnssProvider_Type::Client> >=^{Client}}}{unique_ptr<CLNatalimetryNotifier_Type::Client, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >={__compressed_pair<CLNatalimetryNotifier_Type::Client *, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLMotionState_Type::Client, std::__1::default_delete<CLMotionState_Type::Client> >={__compressed_pair<CLMotionState_Type::Client *, std::__1::default_delete<CLMotionState_Type::Client> >=^{Client}}}{unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client> >={__compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> >=^{Client}}}{unique_ptr<CLWatchOrientationSettingsNotifier_Type::Client, std::__1::default_delete<CLWatchOrientationSettingsNotifier_Type::Client> >={__compressed_pair<CLWatchOrientationSettingsNotifier_Type::Client *, std::__1::default_delete<CLWatchOrientationSettingsNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLWifiServiceClient, std::__1::default_delete<CLWifiServiceClient> >={__compressed_pair<CLWifiServiceClient *, std::__1::default_delete<CLWifiServiceClient> >=^{CLWifiServiceClient}}}{Settings={CLMotionDefaultsWrite<bool>=BB}{CLMotionDefaultsWrite<bool>=BB}{CLMotionDefaultsWrite<bool>=BB}{CLMotionDefaultsWrite<bool>=BB}{CLMotionDefaultsWrite<double>=Bd}{CLMotionDefaultsWrite<double>=Bd}{CLMotionDefaultsWrite<double>=Bd}{CLMotionDefaultsWrite<double>=Bd}{CLMotionDefaultsWrite<double>=Bd}{CLMotionDefaultsWrite<int>=Bi}{CLMotionDefaultsWrite<bool>=BB}{CLMotionDefaultsWrite<bool>=BB}{CLMotionDefaultsWrite<bool>=BB}{CLMotionDefaultsWrite<bool>=BB}{CLMotionDefaultsWrite<bool>=BB}{CLMotionDefaultsWrite<bool>=BB}{CLMotionDefaultsWrite<bool>=BB}{CLMotionDefaultsWrite<bool>=BB}{CLMotionDefaultsWrite<bool>=BB}{CLMotionDefaultsWrite<bool>=BB}{CLMotionDefaultsWrite<bool>=BB}{CLMotionDefaultsWrite<bool>=BB}{CLMotionDefaultsWrite<bool>=BB}{CLMotionDefaultsWrite<bool>=BB}{CLMotionDefaultsWrite<bool>=BB}{CLMotionDefaultsWrite<bool>=BB}}@@}
v32@0:8@16@?24
v16@0:8
v32@0:8@16@24
v24@0:8^v16
@"CLSilo"16@0:8
v24@0:8@"NSMutableArray"16
v32@0:8@"CLSilo"16@?<v@?>24
v32@0:8@"<CLIntersiloProxyDelegateProtocol>"16@"CLSilo"24
v140@0:8i16{NotificationData={Name={basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}BBB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}BB}Bi}20
v28@0:8@16i24
{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >="__ptr_"{__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >="__first_"^{Client}}}
@"NSObject<OS_dispatch_source>"
@"NSMutableDictionary"
@32@0:8@16@24
v32@0:8R@16@24
v28@0:8R@16i24
v24@0:8R@16
v32@0:8R@"<CLSignificantVisitManagerClientProtocol>"16@"NSString"24
v28@0:8R@"<CLSignificantVisitManagerClientProtocol>"16i24
v24@0:8R@"<CLSignificantVisitManagerClientProtocol>"16
v20@0:8i16
v32@0:8@16R@24
v24@0:8@?16
@24@0:8R@16
@24@0:8@16
B32@0:8r*16^i24
B40@0:8r*16r*24^i32
B36@0:8r*16r*24i32
v24@0:8^{__CFRunLoopTimer=}16
v21@0:8i16{NotificationData=c}20
^{CLPersistentStore=^^?^{__CFDictionary}@Bid^{__CFRunLoopTimer}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}i}16@0:8
v24@0:8^{CLPersistentStore=^^?^{__CFDictionary}@Bid^{__CFRunLoopTimer}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}i}16
v24@0:8Q16
{unique_ptr<CLDarwinNotifier_Type::Client, std::__1::default_delete<CLDarwinNotifier_Type::Client> >="__ptr_"{__compressed_pair<CLDarwinNotifier_Type::Client *, std::__1::default_delete<CLDarwinNotifier_Type::Client> >="__first_"^{Client}}}
{map<id<CLSignificantVisitManagerClientProtocol>, NSString *, std::__1::less<id<CLSignificantVisitManagerClientProtocol> >, std::__1::allocator<std::__1::pair<const id<CLSignificantVisitManagerClientProtocol>, NSString *> > >="__tree_"{__tree<std::__1::__value_type<id<CLSignificantVisitManagerClientProtocol>, NSString *>, std::__1::__map_value_compare<id<CLSignificantVisitManagerClientProtocol>, std::__1::__value_type<id<CLSignificantVisitManagerClientProtocol>, NSString *>, std::__1::less<id<CLSignificantVisitManagerClientProtocol> >, true>, std::__1::allocator<std::__1::__value_type<id<CLSignificantVisitManagerClientProtocol>, NSString *> > >="__begin_node_"^{__tree_end_node<std::__1::__tree_node_base<void *> *>}"__pair1_"{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<id<CLSignificantVisitManagerClientProtocol>, NSString *>, void *> > >="__first_"{__tree_end_node<std::__1::__tree_node_base<void *> *>="__left_"^{__tree_node_base<void *>}}}"__pair3_"{__compressed_pair<unsigned long, std::__1::__map_value_compare<id<CLSignificantVisitManagerClientProtocol>, std::__1::__value_type<id<CLSignificantVisitManagerClientProtocol>, NSString *>, std::__1::less<id<CLSignificantVisitManagerClientProtocol> >, true> >="__first_"Q}}}
^{CLPersistentStore=^^?^{__CFDictionary}@Bid^{__CFRunLoopTimer}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}i}
@"<CLClientAuthorizationCacheProtocol>"
@"NSMutableArray"
@"<CLRoutineMonitorServiceProtocol>"
@"<CLClientManagerPublicProtocol>"
v36@0:8R@16i24@28
v36@0:8R@"<CLNotifierServiceClientProtocol>"16i24@"CLNotifierData"28
v28@0:8R@"<CLNotifierServiceClientProtocol>"16i24
v24@0:8R@"<CLNotifierServiceClientProtocol>"16
v32@0:8@?16@?24
B24@0:8@?16
v24@0:8@?<v@?^{CLGestureDataLogger=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBB{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client> >={__compressed_pair<CLTelephonyService_Type::Client *, std::__1::default_delete<CLTelephonyService_Type::Client> >=^{Client}}}{unique_ptr<CLMotionNotifier::Dispatcher, std::__1::default_delete<CLMotionNotifier::Dispatcher> >={__compressed_pair<CLMotionNotifier::Dispatcher *, std::__1::default_delete<CLMotionNotifier::Dispatcher> >=^{Dispatcher}}}{shared_ptr<CLIoHidInterface::Device>=^{Device}^{__shared_weak_count}}}>16
v32@0:8@?<v@?^{CLGestureDataLogger=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBB{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client> >={__compressed_pair<CLTelephonyService_Type::Client *, std::__1::default_delete<CLTelephonyService_Type::Client> >=^{Client}}}{unique_ptr<CLMotionNotifier::Dispatcher, std::__1::default_delete<CLMotionNotifier::Dispatcher> >={__compressed_pair<CLMotionNotifier::Dispatcher *, std::__1::default_delete<CLMotionNotifier::Dispatcher> >=^{Dispatcher}}}{shared_ptr<CLIoHidInterface::Device>=^{Device}^{__shared_weak_count}}}>16@?<v@?>24
B24@0:8@?<v@?^{CLGestureDataLogger=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBB{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client> >={__compressed_pair<CLTelephonyService_Type::Client *, std::__1::default_delete<CLTelephonyService_Type::Client> >=^{Client}}}{unique_ptr<CLMotionNotifier::Dispatcher, std::__1::default_delete<CLMotionNotifier::Dispatcher> >={__compressed_pair<CLMotionNotifier::Dispatcher *, std::__1::default_delete<CLMotionNotifier::Dispatcher> >=^{Dispatcher}}}{shared_ptr<CLIoHidInterface::Device>=^{Device}^{__shared_weak_count}}}>16
v28@0:8i16@20
v28@0:8i16@"CLNotifierData"20
^{CLGestureDataLogger=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBB{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client> >={__compressed_pair<CLTelephonyService_Type::Client *, std::__1::default_delete<CLTelephonyService_Type::Client> >=^{Client}}}{unique_ptr<CLMotionNotifier::Dispatcher, std::__1::default_delete<CLMotionNotifier::Dispatcher> >={__compressed_pair<CLMotionNotifier::Dispatcher *, std::__1::default_delete<CLMotionNotifier::Dispatcher> >=^{Dispatcher}}}{shared_ptr<CLIoHidInterface::Device>=^{Device}^{__shared_weak_count}}}16@0:8
v24@0:8^{CLSpringTrackerEntry=Q[16C][16C]dq}16
@56@0:8Q16@24@32@40q48
@24@0:8r^{CLSpringTrackerEntry=Q[16C][16C]dq}16
q16@0:8
v24@0:8q16
c16@0:8
v20@0:8c16
@"NSString"
@"NSDictionary"
@32@0:8@16q24
@40@0:8@16q24q32
@"NSData"24@0:8@"<SYChange>"16
@"<SYChange>"32@0:8@"NSData"16q24
@"NSData"32@0:8@"<SYChange>"16q24
@"<SYChange>"40@0:8@"NSData"16q24q32
v32@0:8@"PSYSyncCoordinator"16@"PSYServiceSyncSession"24
v24@0:8@"PSYSyncCoordinator"16
v32@0:8@"PSYInitialSyncStateObserver"16@"NSUUID"24
v24@0:8@"PSYInitialSyncStateObserver"16
B40@0:8@16@24^@32
v40@0:8@16@24@32
v40@0:8@16@24@?32
v48@0:8@16@24@32@?40
@40@0:8@16@24@32
B40@0:8@"SYService"16@"SYSession"24^@32
v40@0:8@"SYService"16@"SYSession"24@"NSError"32
v40@0:8@"SYService"16@"NSData"24@?<v@?B@"NSError">32
v48@0:8@"SYService"16@"NSInputStream"24@"NSDictionary"32@?<v@?B@"NSError">40
v40@0:8@"SYService"16@"NSError"24@"NSDictionary"32
@"SYSession"40@0:8@"SYService"16@"SYSession"24@"SYSession"32
v40@0:8@"SYService"16@"NSUUID"24@"NSUUID"32
q40@0:8@16@?24^@32
B32@0:8@16^@24
q40@0:8@"SYSession"16@?<B@?@"<SYChange>">24^@32
v40@0:8@"SYSession"16@"NSArray"24@?<v@?B@"NSError">32
v32@0:8@"SYSession"16@"NSError"24
B32@0:8@"SYSession"16^@24
@32@0:8^{CLTileSyncManager=^^?@@@@@^{CLITilesManager}{unique_ptr<CLTileSyncManager::IExternal, std::__1::default_delete<CLTileSyncManager::IExternal> >={__compressed_pair<CLTileSyncManager::IExternal *, std::__1::default_delete<CLTileSyncManager::IExternal> >=^{IExternal}}}@^{BasicMutex}dBdd@*B@B{shared_ptr<CLWifiAccessPointLocationService>=^{CLWifiAccessPointLocationService}^{__shared_weak_count}}c{vector<TileId, std::__1::allocator<TileId> >=^{TileId}^{TileId}{__compressed_pair<TileId *, std::__1::allocator<TileId> >=^{TileId}}}cBiB{CLTileSyncAWD=iiiiiiiiidd}}16@24
^{CLTileSyncManager=^^?@@@@@^{CLITilesManager}{unique_ptr<CLTileSyncManager::IExternal, std::__1::default_delete<CLTileSyncManager::IExternal> >={__compressed_pair<CLTileSyncManager::IExternal *, std::__1::default_delete<CLTileSyncManager::IExternal> >=^{IExternal}}}@^{BasicMutex}dBdd@*B@B{shared_ptr<CLWifiAccessPointLocationService>=^{CLWifiAccessPointLocationService}^{__shared_weak_count}}c{vector<TileId, std::__1::allocator<TileId> >=^{TileId}^{TileId}{__compressed_pair<TileId *, std::__1::allocator<TileId> >=^{TileId}}}cBiB{CLTileSyncAWD=iiiiiiiiidd}}
@"CLSilo"
@"PSYServiceSyncSession"
@24@0:8^{_NSZone=}16
v20@0:8I16
i16@0:8
@20@0:8i16
i24@0:8@16
v20@0:8f16
I16@0:8
f16@0:8
{?="elevationDescended"b1"gradeType"b1"rawGradeType"b1"source"b1"verticalSpeed"b1}
v40@0:8{shared_ptr<CLConnectionMessage>=^{CLConnectionMessage}^{__shared_weak_count}}16@?32
@32@0:8{shared_ptr<CLConnectionMessage>=^{CLConnectionMessage}^{__shared_weak_count}}16
B56@0:8{shared_ptr<CLConnectionMessage>=^{CLConnectionMessage}^{__shared_weak_count}}16^{CLConnectionClient={basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@^{CLConnection}B{CLNameValuePair=^^?^{__CFDictionary}}{CLNameValuePair=^^?^{__CFDictionary}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@?@?@@?@?}32d40@?48
B24@0:8r*16
Q32@0:8@16@24
v36@0:8i16@20R@28
v176@0:8{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}16
B32@0:8r^i16^{NotificationData={CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocationPrivate=dddddfffBi{?=dd}diiB{?=dd}if{?=dd}ddiBddddddB}{shared_ptr<CLBatchedLocations>=^{CLBatchedLocations}^{__shared_weak_count}}{TechnologyStatus=iB}Bdi{?=dddd}{?=dd}{XtraFileAvailable=d{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}i{LocationDerivedSpeed=ddd}{shared_ptr<const GNSS::MeasurementData>=^{MeasurementData}^{__shared_weak_count}}i}24
B24@0:8^{?=ii{?=dd}ddddddddddidi{?=dd}diIii}16
B24@0:8^{CLDaemonLocationPrivate=dddddfffBi{?=dd}diiB{?=dd}if{?=dd}ddiBddddddB}16
v36@0:8i16@"CLNotifierData"20R@"<CLLocationProviderClientProtocol>"28
v24@0:8@?<v@?^{CLStreamedLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBBBB@Bi@@iiii}>16
v32@0:8@?<v@?^{CLStreamedLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBBBB@Bi@@iiii}>16@?<v@?>24
B24@0:8@?<v@?^{CLStreamedLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBBBB@Bi@@iiii}>16
v36@0:8@16@24B32
v32@0:8@"NSString"16@"NSDictionary"24
v36@0:8@"CLLocationStreamingMessage"16@"NSError"24B32
v24@0:8@"CLLocationStreamingMessage"16
^{CLStreamedLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBBBB@Bi@@iiii}16@0:8
@"<CLStreamedLocationProviderProtocol>"
@"ALCMMotionContextMotionState"
@"ALCLNatalieFeatures"
{?="startTime"b1"exitState"b1"mounted"b1"mountedConfidence"b1"turn"b1"isMoving"b1"isVehicular"b1}
v24@0:8d16
d16@0:8
{?="timestamp"b1"pacebin"b1"recordId"b1"regularEntry"b1}
{?="pace"b1"timestamp"b1"recordId"b1}
{?="timestamp"b1}
{?="estExitTime"b1"startTime"b1"confidence"b1"exitState"b1"mountedConfidence"b1"mountedState"b1"tilt"b1"isStanding"b1"isVehicleConnected"b1}
@"ALCLMotionActivity"
@"ALActivityOverrideMsg"
@"ALCLAllDayHeartRate"
@"ALCLBodyMetrics"
@"ALCMCalorieData"
@"ALCMCalorieDataDeprecated"
@"ALCMCoarseElevation"
@"ALCMCoarseElevationDeprecated"
@"ALCMElevation"
@"ALCLElevationDeprecated"
@"ALCMExerciseMinute"
@"ALCMFitnessTracking"
@"ALCLIDSStatus"
@"ALCLJacksonData"
@"ALMotionState"
@"ALCLNatalieDataDeprecated"
@"ALCLOdometer"
@"ALCLRowingModel"
@"ALCLSedentaryAlarmData"
@"ALCLSedentaryAlarmDataDeprecated"
@"ALCLSessionCatherine"
@"ALCLStairClimbingModel"
@"ALCLStepCountEntry"
@"ALCLStrideCalEntry"
@"ALCLStrideCalEntryDeprecated"
@"ALCMWorkoutEvent"
v24@0:8@"PBCodable"16
^{CLActivityLogger=@{unique_ptr<CLMotionStateMediator_Type::Client, std::__1::default_delete<CLMotionStateMediator_Type::Client> >={__compressed_pair<CLMotionStateMediator_Type::Client *, std::__1::default_delete<CLMotionStateMediator_Type::Client> >=^{Client}}}{CLActivityLoggerWriter=@@{shared_ptr<CLActivityLoggerPolicy>=^{CLActivityLoggerPolicy}^{__shared_weak_count}}{BasicMutex=^^?^{MutexInfo}}}{CLActivityDbExportAdapter=B@{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}}16@0:8
v24@0:8^{CLActivityLogger=@{unique_ptr<CLMotionStateMediator_Type::Client, std::__1::default_delete<CLMotionStateMediator_Type::Client> >={__compressed_pair<CLMotionStateMediator_Type::Client *, std::__1::default_delete<CLMotionStateMediator_Type::Client> >=^{Client}}}{CLActivityLoggerWriter=@@{shared_ptr<CLActivityLoggerPolicy>=^{CLActivityLoggerPolicy}^{__shared_weak_count}}{BasicMutex=^^?^{MutexInfo}}}{CLActivityDbExportAdapter=B@{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}}16
^{CLActivityLogger=@{unique_ptr<CLMotionStateMediator_Type::Client, std::__1::default_delete<CLMotionStateMediator_Type::Client> >={__compressed_pair<CLMotionStateMediator_Type::Client *, std::__1::default_delete<CLMotionStateMediator_Type::Client> >=^{Client}}}{CLActivityLoggerWriter=@@{shared_ptr<CLActivityLoggerPolicy>=^{CLActivityLoggerPolicy}^{__shared_weak_count}}{BasicMutex=^^?^{MutexInfo}}}{CLActivityDbExportAdapter=B@{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}}
v24@0:8@?<v@?^{CLOdometerNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{shared_ptr<CLElevationRecorderDb>=^{CLElevationRecorderDb}^{__shared_weak_count}}{shared_ptr<CLActivityAggregator<CLSignificantElevation, CLActivityDB::NoDataProtectionPolicy> >=^{CLActivityAggregator<CLSignificantElevation, CLActivityDB::NoDataProtectionPolicy>}^{__shared_weak_count}}{CLSignificantElevationEstimator={CLSignificantElevation=i[16C]ddII}{FirstOrderFilter<double>=idd}didi{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}{CLPowerAssertion=^^?i^v^{__CFString}dd@}@@{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{list<CLOdometerEntry, std::__1::allocator<CLOdometerEntry> >={__list_node_base<CLOdometerEntry, void *>=^{__list_node_base<CLOdometerEntry, void *>}^{__list_node_base<CLOdometerEntry, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLOdometerEntry, void *> > >=Q}}}>16
v32@0:8@?<v@?^{CLOdometerNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{shared_ptr<CLElevationRecorderDb>=^{CLElevationRecorderDb}^{__shared_weak_count}}{shared_ptr<CLActivityAggregator<CLSignificantElevation, CLActivityDB::NoDataProtectionPolicy> >=^{CLActivityAggregator<CLSignificantElevation, CLActivityDB::NoDataProtectionPolicy>}^{__shared_weak_count}}{CLSignificantElevationEstimator={CLSignificantElevation=i[16C]ddII}{FirstOrderFilter<double>=idd}didi{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}{CLPowerAssertion=^^?i^v^{__CFString}dd@}@@{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{list<CLOdometerEntry, std::__1::allocator<CLOdometerEntry> >={__list_node_base<CLOdometerEntry, void *>=^{__list_node_base<CLOdometerEntry, void *>}^{__list_node_base<CLOdometerEntry, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLOdometerEntry, void *> > >=Q}}}>16@?<v@?>24
B24@0:8@?<v@?^{CLOdometerNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{shared_ptr<CLElevationRecorderDb>=^{CLElevationRecorderDb}^{__shared_weak_count}}{shared_ptr<CLActivityAggregator<CLSignificantElevation, CLActivityDB::NoDataProtectionPolicy> >=^{CLActivityAggregator<CLSignificantElevation, CLActivityDB::NoDataProtectionPolicy>}^{__shared_weak_count}}{CLSignificantElevationEstimator={CLSignificantElevation=i[16C]ddII}{FirstOrderFilter<double>=idd}didi{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}{CLPowerAssertion=^^?i^v^{__CFString}dd@}@@{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{list<CLOdometerEntry, std::__1::allocator<CLOdometerEntry> >={__list_node_base<CLOdometerEntry, void *>=^{__list_node_base<CLOdometerEntry, void *>}^{__list_node_base<CLOdometerEntry, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLOdometerEntry, void *> > >=Q}}}>16
v40@0:8@"NSDate"16@"NSDate"24@?<v@?@"CMSignificantElevationSample">32
^{CLOdometerNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{shared_ptr<CLElevationRecorderDb>=^{CLElevationRecorderDb}^{__shared_weak_count}}{shared_ptr<CLActivityAggregator<CLSignificantElevation, CLActivityDB::NoDataProtectionPolicy> >=^{CLActivityAggregator<CLSignificantElevation, CLActivityDB::NoDataProtectionPolicy>}^{__shared_weak_count}}{CLSignificantElevationEstimator={CLSignificantElevation=i[16C]ddII}{FirstOrderFilter<double>=idd}didi{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}{CLPowerAssertion=^^?i^v^{__CFString}dd@}@@{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{list<CLOdometerEntry, std::__1::allocator<CLOdometerEntry> >={__list_node_base<CLOdometerEntry, void *>=^{__list_node_base<CLOdometerEntry, void *>}^{__list_node_base<CLOdometerEntry, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLOdometerEntry, void *> > >=Q}}}16@0:8
{?="secKey"b1"tileType"b1"tileX"b1"tileY"b1"isAllowOverCellular"b1}
v24@0:8r^(NotificationData={CLStepCountEntry=dddIddIIdddi^{__CFString}BB{CLAccelerometerPace=ddd}IIC}{CLExtendedStepCountEntry=d{CLStepCountEntry=dddIddIIdddi^{__CFString}BB{CLAccelerometerPace=ddd}IIC}{CLStepCountEntryAddition=ddIddddBd}}{CLPedometerEvent=di})16
{queue<std::__1::pair<double, unsigned int>, std::__1::deque<std::__1::pair<double, unsigned int>, std::__1::allocator<std::__1::pair<double, unsigned int> > > >="c"{deque<std::__1::pair<double, unsigned int>, std::__1::allocator<std::__1::pair<double, unsigned int> > >="__map_"{__split_buffer<std::__1::pair<double, unsigned int> *, std::__1::allocator<std::__1::pair<double, unsigned int> *> >="__first_"^^{pair<double, unsigned int>}"__begin_"^^{pair<double, unsigned int>}"__end_"^^{pair<double, unsigned int>}"__end_cap_"{__compressed_pair<std::__1::pair<double, unsigned int> **, std::__1::allocator<std::__1::pair<double, unsigned int> *> >="__first_"^^{pair<double, unsigned int>}}}"__start_"Q"__size_"{__compressed_pair<unsigned long, std::__1::allocator<std::__1::pair<double, unsigned int> > >="__first_"Q}}}
@24@0:8^{CLMonitorGpsExternal=^^?@{unique_ptr<CLGnssProvider_Type::Client, std::__1::default_delete<CLGnssProvider_Type::Client> >={__compressed_pair<CLGnssProvider_Type::Client *, std::__1::default_delete<CLGnssProvider_Type::Client> >=^{Client}}}{unique_ptr<CLAccessoryLocationProvider_Type::Client, std::__1::default_delete<CLAccessoryLocationProvider_Type::Client> >={__compressed_pair<CLAccessoryLocationProvider_Type::Client *, std::__1::default_delete<CLAccessoryLocationProvider_Type::Client> >=^{Client}}}@^{CLMonitorGps}}16
^{CLMonitorGpsExternal=^^?@{unique_ptr<CLGnssProvider_Type::Client, std::__1::default_delete<CLGnssProvider_Type::Client> >={__compressed_pair<CLGnssProvider_Type::Client *, std::__1::default_delete<CLGnssProvider_Type::Client> >=^{Client}}}{unique_ptr<CLAccessoryLocationProvider_Type::Client, std::__1::default_delete<CLAccessoryLocationProvider_Type::Client> >={__compressed_pair<CLAccessoryLocationProvider_Type::Client *, std::__1::default_delete<CLAccessoryLocationProvider_Type::Client> >=^{Client}}}@^{CLMonitorGps}}
i32@0:8@16@24
i32@0:8^{vector<CLSedentaryAlarmData, std::__1::allocator<CLSedentaryAlarmData> >=^{CLSedentaryAlarmData}^{CLSedentaryAlarmData}{__compressed_pair<CLSedentaryAlarmData *, std::__1::allocator<CLSedentaryAlarmData> >=^{CLSedentaryAlarmData}}}16d24
v24@0:8@?<v@?^{CLSedentaryTimerNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBB{CLWorkoutUpdate=id}{unique_ptr<CLFitnessTrackingNotifier_Type::Client, std::__1::default_delete<CLFitnessTrackingNotifier_Type::Client> >={__compressed_pair<CLFitnessTrackingNotifier_Type::Client *, std::__1::default_delete<CLFitnessTrackingNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLMotionStateObserver_Type::Client, std::__1::default_delete<CLMotionStateObserver_Type::Client> >={__compressed_pair<CLMotionStateObserver_Type::Client *, std::__1::default_delete<CLMotionStateObserver_Type::Client> >=^{Client}}}B{shared_ptr<CLSedentaryAlarmRecorderDb>=^{CLSedentaryAlarmRecorderDb}^{__shared_weak_count}}{CLActivityAggregator<CLSedentaryAlarmData, CLActivityDB::NoDataProtectionPolicy>={vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}^{CLAggregationRule}{__compressed_pair<CLAggregationRule *, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}}}{shared_ptr<CLActivityRecorderDb<CLSedentaryAlarmData, CLActivityDB::NoDataProtectionPolicy> >=^{CLActivityRecorderDb<CLSedentaryAlarmData, CLActivityDB::NoDataProtectionPolicy>}^{__shared_weak_count}}BB}d@{Preferences={CLMotionDefaultsWrite<int>=Bi}{CLMotionDefaultsWrite<int>=Bi}{CLMotionDefaultsWrite<int>=Bi}{CLMotionDefaultsWrite<int>=Bi}{CLMotionDefaultsWrite<bool>=BB}}}>16
v32@0:8@?<v@?^{CLSedentaryTimerNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBB{CLWorkoutUpdate=id}{unique_ptr<CLFitnessTrackingNotifier_Type::Client, std::__1::default_delete<CLFitnessTrackingNotifier_Type::Client> >={__compressed_pair<CLFitnessTrackingNotifier_Type::Client *, std::__1::default_delete<CLFitnessTrackingNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLMotionStateObserver_Type::Client, std::__1::default_delete<CLMotionStateObserver_Type::Client> >={__compressed_pair<CLMotionStateObserver_Type::Client *, std::__1::default_delete<CLMotionStateObserver_Type::Client> >=^{Client}}}B{shared_ptr<CLSedentaryAlarmRecorderDb>=^{CLSedentaryAlarmRecorderDb}^{__shared_weak_count}}{CLActivityAggregator<CLSedentaryAlarmData, CLActivityDB::NoDataProtectionPolicy>={vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}^{CLAggregationRule}{__compressed_pair<CLAggregationRule *, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}}}{shared_ptr<CLActivityRecorderDb<CLSedentaryAlarmData, CLActivityDB::NoDataProtectionPolicy> >=^{CLActivityRecorderDb<CLSedentaryAlarmData, CLActivityDB::NoDataProtectionPolicy>}^{__shared_weak_count}}BB}d@{Preferences={CLMotionDefaultsWrite<int>=Bi}{CLMotionDefaultsWrite<int>=Bi}{CLMotionDefaultsWrite<int>=Bi}{CLMotionDefaultsWrite<int>=Bi}{CLMotionDefaultsWrite<bool>=BB}}}>16@?<v@?>24
B24@0:8@?<v@?^{CLSedentaryTimerNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBB{CLWorkoutUpdate=id}{unique_ptr<CLFitnessTrackingNotifier_Type::Client, std::__1::default_delete<CLFitnessTrackingNotifier_Type::Client> >={__compressed_pair<CLFitnessTrackingNotifier_Type::Client *, std::__1::default_delete<CLFitnessTrackingNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLMotionStateObserver_Type::Client, std::__1::default_delete<CLMotionStateObserver_Type::Client> >={__compressed_pair<CLMotionStateObserver_Type::Client *, std::__1::default_delete<CLMotionStateObserver_Type::Client> >=^{Client}}}B{shared_ptr<CLSedentaryAlarmRecorderDb>=^{CLSedentaryAlarmRecorderDb}^{__shared_weak_count}}{CLActivityAggregator<CLSedentaryAlarmData, CLActivityDB::NoDataProtectionPolicy>={vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}^{CLAggregationRule}{__compressed_pair<CLAggregationRule *, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}}}{shared_ptr<CLActivityRecorderDb<CLSedentaryAlarmData, CLActivityDB::NoDataProtectionPolicy> >=^{CLActivityRecorderDb<CLSedentaryAlarmData, CLActivityDB::NoDataProtectionPolicy>}^{__shared_weak_count}}BB}d@{Preferences={CLMotionDefaultsWrite<int>=Bi}{CLMotionDefaultsWrite<int>=Bi}{CLMotionDefaultsWrite<int>=Bi}{CLMotionDefaultsWrite<int>=Bi}{CLMotionDefaultsWrite<bool>=BB}}}>16
i32@0:8@"NSString"16@"NSDictionary"24
i24@0:8@"NSString"16
^{CLSedentaryTimerNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBB{CLWorkoutUpdate=id}{unique_ptr<CLFitnessTrackingNotifier_Type::Client, std::__1::default_delete<CLFitnessTrackingNotifier_Type::Client> >={__compressed_pair<CLFitnessTrackingNotifier_Type::Client *, std::__1::default_delete<CLFitnessTrackingNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLMotionStateObserver_Type::Client, std::__1::default_delete<CLMotionStateObserver_Type::Client> >={__compressed_pair<CLMotionStateObserver_Type::Client *, std::__1::default_delete<CLMotionStateObserver_Type::Client> >=^{Client}}}B{shared_ptr<CLSedentaryAlarmRecorderDb>=^{CLSedentaryAlarmRecorderDb}^{__shared_weak_count}}{CLActivityAggregator<CLSedentaryAlarmData, CLActivityDB::NoDataProtectionPolicy>={vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}^{CLAggregationRule}{__compressed_pair<CLAggregationRule *, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}}}{shared_ptr<CLActivityRecorderDb<CLSedentaryAlarmData, CLActivityDB::NoDataProtectionPolicy> >=^{CLActivityRecorderDb<CLSedentaryAlarmData, CLActivityDB::NoDataProtectionPolicy>}^{__shared_weak_count}}BB}d@{Preferences={CLMotionDefaultsWrite<int>=Bi}{CLMotionDefaultsWrite<int>=Bi}{CLMotionDefaultsWrite<int>=Bi}{CLMotionDefaultsWrite<int>=Bi}{CLMotionDefaultsWrite<bool>=BB}}}16@0:8
{?="fPal"b1"lsest"b1"sumest"b1}
@"TRANSITPbLocationFingerprintsV1"
@"TRANSITPbLocationFingerprints"
{?="generationTimeSecs"b1"marketId"b1"securityKey"b1"expirationAgeSecs"b1"tileX"b1"tileY"b1"version"b1}
{?="IDLength"q"ID"^v}
^{?=i}
@64@0:8@16@24@32@40@48@56
@72@0:8@16@24@32@40@48@56@64
v32@0:8d16d24
@?16@0:8
@"<CLTimerScheduler>"
v24@0:8R@"<CLLocationStreamingConnectionManagerClientProtocol>"16
v56@0:8@16@24@32@40@48
v64@0:8@16@24@32@40@48@56
v52@0:8@16@24@32B40@44
v60@0:8@16@24@32B40@44@52
v48@0:8@16@24@32@40
v56@0:8@"IDSService"16@"IDSAccount"24@"NSDictionary"32@"NSString"40@"IDSMessageContext"48
v56@0:8@"IDSService"16@"IDSAccount"24@"NSData"32@"NSString"40@"IDSMessageContext"48
v56@0:8@"IDSService"16@"IDSAccount"24@"IDSProtobuf"32@"NSString"40@"IDSMessageContext"48
v56@0:8@"IDSService"16@"IDSAccount"24@"NSURL"32@"NSString"40@"IDSMessageContext"48
v64@0:8@"IDSService"16@"IDSAccount"24@"NSURL"32@"NSDictionary"40@"NSString"48@"IDSMessageContext"56
v32@0:8@"IDSService"16@"NSSet"24
v32@0:8@"IDSService"16@"NSArray"24
v52@0:8@"IDSService"16@"IDSAccount"24@"NSString"32B40@"NSError"44
v60@0:8@"IDSService"16@"IDSAccount"24@"NSString"32B40@"NSError"44@"IDSMessageContext"52
v48@0:8@"IDSService"16@"IDSAccount"24@"NSString"32@40
v48@0:8@"IDSService"16@"IDSAccount"24@"IDSSession"32@"NSString"40
v56@0:8@"IDSService"16@"IDSAccount"24@"IDSSession"32@"NSString"40@"NSDictionary"48
v56@0:8@"IDSService"16@"IDSAccount"24@"IDSSession"32@"NSString"40@"NSData"48
v24@0:8@"IDSService"16
v40@0:8@"IDSService"16@"IDSDevice"24@?<v@?>32
@"IDSService"
@"NSMutableSet"
@56@0:8@16@24@32@40d48
@"NSNumber"
@"CLTimer"
v32@0:8@16q24
v24@0:8@?<v@?^{CLHomeKitProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB@@@{vector<CLHomeKitProvider_Type::HomeKitDevice, std::__1::allocator<CLHomeKitProvider_Type::HomeKitDevice> >=^{HomeKitDevice}^{HomeKitDevice}{__compressed_pair<CLHomeKitProvider_Type::HomeKitDevice *, std::__1::allocator<CLHomeKitProvider_Type::HomeKitDevice> >=^{HomeKitDevice}}}@@}>16
v32@0:8@?<v@?^{CLHomeKitProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB@@@{vector<CLHomeKitProvider_Type::HomeKitDevice, std::__1::allocator<CLHomeKitProvider_Type::HomeKitDevice> >=^{HomeKitDevice}^{HomeKitDevice}{__compressed_pair<CLHomeKitProvider_Type::HomeKitDevice *, std::__1::allocator<CLHomeKitProvider_Type::HomeKitDevice> >=^{HomeKitDevice}}}@@}>16@?<v@?>24
B24@0:8@?<v@?^{CLHomeKitProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB@@@{vector<CLHomeKitProvider_Type::HomeKitDevice, std::__1::allocator<CLHomeKitProvider_Type::HomeKitDevice> >=^{HomeKitDevice}^{HomeKitDevice}{__compressed_pair<CLHomeKitProvider_Type::HomeKitDevice *, std::__1::allocator<CLHomeKitProvider_Type::HomeKitDevice> >=^{HomeKitDevice}}}@@}>16
^{CLHomeKitProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB@@@{vector<CLHomeKitProvider_Type::HomeKitDevice, std::__1::allocator<CLHomeKitProvider_Type::HomeKitDevice> >=^{HomeKitDevice}^{HomeKitDevice}{__compressed_pair<CLHomeKitProvider_Type::HomeKitDevice *, std::__1::allocator<CLHomeKitProvider_Type::HomeKitDevice> >=^{HomeKitDevice}}}@@}16@0:8
v24@0:8@"CBCentralManager"16
v32@0:8@"CBCentralManager"16@"NSDictionary"24
v48@0:8@"CBCentralManager"16@"CBPeripheral"24@"NSDictionary"32@"NSNumber"40
v32@0:8@"CBCentralManager"16@"CBPeripheral"24
v40@0:8@"CBCentralManager"16@"CBPeripheral"24@"NSError"32
@24@0:8^{CLHomeKitProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB@@@{vector<CLHomeKitProvider_Type::HomeKitDevice, std::__1::allocator<CLHomeKitProvider_Type::HomeKitDevice> >=^{HomeKitDevice}^{HomeKitDevice}{__compressed_pair<CLHomeKitProvider_Type::HomeKitDevice *, std::__1::allocator<CLHomeKitProvider_Type::HomeKitDevice> >=^{HomeKitDevice}}}@@}16
^{CLHomeKitProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB@@@{vector<CLHomeKitProvider_Type::HomeKitDevice, std::__1::allocator<CLHomeKitProvider_Type::HomeKitDevice> >=^{HomeKitDevice}^{HomeKitDevice}{__compressed_pair<CLHomeKitProvider_Type::HomeKitDevice *, std::__1::allocator<CLHomeKitProvider_Type::HomeKitDevice> >=^{HomeKitDevice}}}@@}
B24@0:8^{vector<CLCell, std::__1::allocator<CLCell> >=}16
B24@0:8^i16
B24@0:8^B16
B24@0:8^@16
B24@0:8^I16
B28@0:8^{vector<CLCell, std::__1::allocator<CLCell> >=}16B24
B24@0:8^{Cell=iiiiiiii}16
B24@0:8^{CdmaCell=i{vector<int, std::__1::allocator<int> >=^i^i{__compressed_pair<int *, std::__1::allocator<int> >=^i}}iiiiiiiii{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}iii{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}ii}16
v24@0:8@?<v@?^{CLTelephonyService=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB^{__CFRunLoopTimer}^{__CFRunLoopSource}^vBi^{__CTServerConnection}{unique_ptr<CLTelephonyIratManager, std::__1::default_delete<CLTelephonyIratManager> >={__compressed_pair<CLTelephonyIratManager *, std::__1::default_delete<CLTelephonyIratManager> >=^{CLTelephonyIratManager}}}Bi}>16
v32@0:8@?<v@?^{CLTelephonyService=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB^{__CFRunLoopTimer}^{__CFRunLoopSource}^vBi^{__CTServerConnection}{unique_ptr<CLTelephonyIratManager, std::__1::default_delete<CLTelephonyIratManager> >={__compressed_pair<CLTelephonyIratManager *, std::__1::default_delete<CLTelephonyIratManager> >=^{CLTelephonyIratManager}}}Bi}>16@?<v@?>24
B24@0:8@?<v@?^{CLTelephonyService=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB^{__CFRunLoopTimer}^{__CFRunLoopSource}^vBi^{__CTServerConnection}{unique_ptr<CLTelephonyIratManager, std::__1::default_delete<CLTelephonyIratManager> >={__compressed_pair<CLTelephonyIratManager *, std::__1::default_delete<CLTelephonyIratManager> >=^{CLTelephonyIratManager}}}Bi}>16
v24@0:8@?<v@?B>16
@"NSDictionary"16@0:8
v24@0:8@"NSString"16
^{CLTelephonyService=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB^{__CFRunLoopTimer}^{__CFRunLoopSource}^vBi^{__CTServerConnection}{unique_ptr<CLTelephonyIratManager, std::__1::default_delete<CLTelephonyIratManager> >={__compressed_pair<CLTelephonyIratManager *, std::__1::default_delete<CLTelephonyIratManager> >=^{CLTelephonyIratManager}}}Bi}16@0:8
B24@0:8^{AccessPoint={CLMacAddress=Q}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}iiiddB}16
B24@0:8^{HostedNetwork={basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}iId}16
B28@0:8c16B20B24
B32@0:8r^{vector<CLRangingPeerInternal, std::__1::allocator<CLRangingPeerInternal> >=^{CLRangingPeerInternal}^{CLRangingPeerInternal}{__compressed_pair<CLRangingPeerInternal *, std::__1::allocator<CLRangingPeerInternal> >=^{CLRangingPeerInternal}}}16d24
B28@0:8r^{vector<CLRangingPeerInternal, std::__1::allocator<CLRangingPeerInternal> >=^{CLRangingPeerInternal}^{CLRangingPeerInternal}{__compressed_pair<CLRangingPeerInternal *, std::__1::allocator<CLRangingPeerInternal> >=^{CLRangingPeerInternal}}}16B24
B20@0:8B16
v24@0:8@?<v@?^{CLWifiService=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB^{__CFNumber}^{__CFNumber}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}BcBiiBBBQ{array<CLMacAddress, 3>=[3{CLMacAddress=Q}]}iQ^{__CFRunLoopSource}^v^v^vBddddcd{vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}^{AccessPoint}{__compressed_pair<CLWifiService_Type::AccessPoint *, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}}}d{vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}^{AccessPoint}{__compressed_pair<CLWifiService_Type::AccessPoint *, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}}}d{vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}^{AccessPoint}{__compressed_pair<CLWifiService_Type::AccessPoint *, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}}}^{__CFArray}^{__CFArray}B{AssociationState={optional<CLWifiService_Type::AccessPoint>=(?=c{AccessPoint={CLMacAddress=Q}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}iiiddB})B}}@BBdi{ScanStats=III[17I]}Bd{BasicMutex=^^?^{MutexInfo}}{unique_ptr<CLWifiService::IExternal, std::__1::default_delete<CLWifiService::IExternal> >={__compressed_pair<CLWifiService::IExternal *, std::__1::default_delete<CLWifiService::IExternal> >=^{IExternal}}}}>16
v32@0:8@?<v@?^{CLWifiService=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB^{__CFNumber}^{__CFNumber}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}BcBiiBBBQ{array<CLMacAddress, 3>=[3{CLMacAddress=Q}]}iQ^{__CFRunLoopSource}^v^v^vBddddcd{vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}^{AccessPoint}{__compressed_pair<CLWifiService_Type::AccessPoint *, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}}}d{vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}^{AccessPoint}{__compressed_pair<CLWifiService_Type::AccessPoint *, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}}}d{vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}^{AccessPoint}{__compressed_pair<CLWifiService_Type::AccessPoint *, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}}}^{__CFArray}^{__CFArray}B{AssociationState={optional<CLWifiService_Type::AccessPoint>=(?=c{AccessPoint={CLMacAddress=Q}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}iiiddB})B}}@BBdi{ScanStats=III[17I]}Bd{BasicMutex=^^?^{MutexInfo}}{unique_ptr<CLWifiService::IExternal, std::__1::default_delete<CLWifiService::IExternal> >={__compressed_pair<CLWifiService::IExternal *, std::__1::default_delete<CLWifiService::IExternal> >=^{IExternal}}}}>16@?<v@?>24
B24@0:8@?<v@?^{CLWifiService=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB^{__CFNumber}^{__CFNumber}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}BcBiiBBBQ{array<CLMacAddress, 3>=[3{CLMacAddress=Q}]}iQ^{__CFRunLoopSource}^v^v^vBddddcd{vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}^{AccessPoint}{__compressed_pair<CLWifiService_Type::AccessPoint *, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}}}d{vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}^{AccessPoint}{__compressed_pair<CLWifiService_Type::AccessPoint *, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}}}d{vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}^{AccessPoint}{__compressed_pair<CLWifiService_Type::AccessPoint *, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}}}^{__CFArray}^{__CFArray}B{AssociationState={optional<CLWifiService_Type::AccessPoint>=(?=c{AccessPoint={CLMacAddress=Q}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}iiiddB})B}}@BBdi{ScanStats=III[17I]}Bd{BasicMutex=^^?^{MutexInfo}}{unique_ptr<CLWifiService::IExternal, std::__1::default_delete<CLWifiService::IExternal> >={__compressed_pair<CLWifiService::IExternal *, std::__1::default_delete<CLWifiService::IExternal> >=^{IExternal}}}}>16
v32@0:8@?<{vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}^{AccessPoint}{__compressed_pair<CLWifiService_Type::AccessPoint *, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}}}@?>16@?<{vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}^{AccessPoint}{__compressed_pair<CLWifiService_Type::AccessPoint *, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}}}@?>24
v24@0:8@?<{vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}^{AccessPoint}{__compressed_pair<CLWifiService_Type::AccessPoint *, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}}}@?>16
@?<{ScanStats=III[17I]}@?>16@0:8
@?<{ScanResult=d{vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}^{AccessPoint}{__compressed_pair<CLWifiService_Type::AccessPoint *, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}}}}@?>16@0:8
B24@0:8@?<{ScanParameters=iii{vector<int, std::__1::allocator<int> >=^i^i{__compressed_pair<int *, std::__1::allocator<int> >=^i}}{duration<long long, std::__1::ratio<1, 1000> >=q}{duration<long long, std::__1::ratio<1, 1> >=q}Bc}@?>16
^{CLWifiService=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB^{__CFNumber}^{__CFNumber}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}BcBiiBBBQ{array<CLMacAddress, 3>=[3{CLMacAddress=Q}]}iQ^{__CFRunLoopSource}^v^v^vBddddcd{vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}^{AccessPoint}{__compressed_pair<CLWifiService_Type::AccessPoint *, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}}}d{vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}^{AccessPoint}{__compressed_pair<CLWifiService_Type::AccessPoint *, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}}}d{vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}^{AccessPoint}{__compressed_pair<CLWifiService_Type::AccessPoint *, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}}}^{__CFArray}^{__CFArray}B{AssociationState={optional<CLWifiService_Type::AccessPoint>=(?=c{AccessPoint={CLMacAddress=Q}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}iiiddB})B}}@BBdi{ScanStats=III[17I]}Bd{BasicMutex=^^?^{MutexInfo}}{unique_ptr<CLWifiService::IExternal, std::__1::default_delete<CLWifiService::IExternal> >={__compressed_pair<CLWifiService::IExternal *, std::__1::default_delete<CLWifiService::IExternal> >=^{IExternal}}}}16@0:8
{?="timestamp"b1"recordId"b1"regularEntry"b1}
@24@0:8^{CLMotionState=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{CLMotionActivity=iiiiBfdBiddii{?=b1b1b1b1b1}}QQii{CLWifiServiceClient=@{function<void (int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)>={type=[32C]}^{__base<void (int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)>}}{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{AssociationState={optional<CLWifiService_Type::AccessPoint>=(?=c{AccessPoint={CLMacAddress=Q}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}iiiddB})B}}B}@@BBBBBB{CLMotionActivity=iiiiBfdBiddii{?=b1b1b1b1b1}}{list<CLMotionActivity, std::__1::allocator<CLMotionActivity> >={__list_node_base<CLMotionActivity, void *>=^{__list_node_base<CLMotionActivity, void *>}^{__list_node_base<CLMotionActivity, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLMotionActivity, void *> > >=Q}}@}16
^{CLMotionState=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{CLMotionActivity=iiiiBfdBiddii{?=b1b1b1b1b1}}QQii{CLWifiServiceClient=@{function<void (int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)>={type=[32C]}^{__base<void (int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)>}}{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{AssociationState={optional<CLWifiService_Type::AccessPoint>=(?=c{AccessPoint={CLMacAddress=Q}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}iiiddB})B}}B}@@BBBBBB{CLMotionActivity=iiiiBfdBiddii{?=b1b1b1b1b1}}{list<CLMotionActivity, std::__1::allocator<CLMotionActivity> >={__list_node_base<CLMotionActivity, void *>=^{__list_node_base<CLMotionActivity, void *>}^{__list_node_base<CLMotionActivity, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLMotionActivity, void *> > >=Q}}@}
v44@0:8d16d24B32@?36
v24@0:8@?<v@?^{CLMotionState=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{CLMotionActivity=iiiiBfdBiddii{?=b1b1b1b1b1}}QQii{CLWifiServiceClient=@{function<void (int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)>={type=[32C]}^{__base<void (int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)>}}{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{AssociationState={optional<CLWifiService_Type::AccessPoint>=(?=c{AccessPoint={CLMacAddress=Q}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}iiiddB})B}}B}@@BBBBBB{CLMotionActivity=iiiiBfdBiddii{?=b1b1b1b1b1}}{list<CLMotionActivity, std::__1::allocator<CLMotionActivity> >={__list_node_base<CLMotionActivity, void *>=^{__list_node_base<CLMotionActivity, void *>}^{__list_node_base<CLMotionActivity, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLMotionActivity, void *> > >=Q}}@}>16
v32@0:8@?<v@?^{CLMotionState=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{CLMotionActivity=iiiiBfdBiddii{?=b1b1b1b1b1}}QQii{CLWifiServiceClient=@{function<void (int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)>={type=[32C]}^{__base<void (int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)>}}{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{AssociationState={optional<CLWifiService_Type::AccessPoint>=(?=c{AccessPoint={CLMacAddress=Q}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}iiiddB})B}}B}@@BBBBBB{CLMotionActivity=iiiiBfdBiddii{?=b1b1b1b1b1}}{list<CLMotionActivity, std::__1::allocator<CLMotionActivity> >={__list_node_base<CLMotionActivity, void *>=^{__list_node_base<CLMotionActivity, void *>}^{__list_node_base<CLMotionActivity, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLMotionActivity, void *> > >=Q}}@}>16@?<v@?>24
B24@0:8@?<v@?^{CLMotionState=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{CLMotionActivity=iiiiBfdBiddii{?=b1b1b1b1b1}}QQii{CLWifiServiceClient=@{function<void (int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)>={type=[32C]}^{__base<void (int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)>}}{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{AssociationState={optional<CLWifiService_Type::AccessPoint>=(?=c{AccessPoint={CLMacAddress=Q}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}iiiddB})B}}B}@@BBBBBB{CLMotionActivity=iiiiBfdBiddii{?=b1b1b1b1b1}}{list<CLMotionActivity, std::__1::allocator<CLMotionActivity> >={__list_node_base<CLMotionActivity, void *>=^{__list_node_base<CLMotionActivity, void *>}^{__list_node_base<CLMotionActivity, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLMotionActivity, void *> > >=Q}}@}>16
v44@0:8d16d24B32@?<v@?@"NSMutableArray">36
^{CLMotionState=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{CLMotionActivity=iiiiBfdBiddii{?=b1b1b1b1b1}}QQii{CLWifiServiceClient=@{function<void (int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)>={type=[32C]}^{__base<void (int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)>}}{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{AssociationState={optional<CLWifiService_Type::AccessPoint>=(?=c{AccessPoint={CLMacAddress=Q}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}iiiddB})B}}B}@@BBBBBB{CLMotionActivity=iiiiBfdBiddii{?=b1b1b1b1b1}}{list<CLMotionActivity, std::__1::allocator<CLMotionActivity> >={__list_node_base<CLMotionActivity, void *>=^{__list_node_base<CLMotionActivity, void *>}^{__list_node_base<CLMotionActivity, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLMotionActivity, void *> > >=Q}}@}16@0:8
B72@0:8^{?=fff}16^{?=fff}24^{?=fff}32B40^{?=fff}44^{?=fff}52^{?=fff}60B68
B24@0:8^{?=id(?={?={?=fff}{?=fff}}{?=B[241c]})}16
B44@0:8r^{?=fff}16r^{?=fff}24f32d36
v24@0:8@?<v@?^{CLGyroCalibrationDatabase=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB}>16
v32@0:8@?<v@?^{CLGyroCalibrationDatabase=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB}>16@?<v@?>24
B24@0:8@?<v@?^{CLGyroCalibrationDatabase=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB}>16
v32@0:8@"NSString"16@?<v@?@"NSString">24
^{CLGyroCalibrationDatabase=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB}16@0:8
B24@0:8r^{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}16
v24@0:8^(NotificationData={CLMotionActivity=iiiiBfdBiddii{?=b1b1b1b1b1}}B{DeviceTouchState=Bd}B)16
v148@0:8i16{NotificationData=Bc{AssociationState={optional<CLWifiService_Type::AccessPoint>=(?=c{AccessPoint={CLMacAddress=Q}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}iiiddB})B}}BBB{vector<CLWifiRangeResult, std::__1::allocator<CLWifiRangeResult> >=^{CLWifiRangeResult}^{CLWifiRangeResult}{__compressed_pair<CLWifiRangeResult *, std::__1::allocator<CLWifiRangeResult> >=^{CLWifiRangeResult}}}B}20
v92@0:8i16(NotificationData={CLMotionActivity=iiiiBfdBiddii{?=b1b1b1b1b1}}B{DeviceTouchState=Bd}B)20
{?=ddd}16@0:8
v40@0:8{?=ddd}16
@"<CLIntersiloUniverse>"
@"NSDate"
{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >="__ptr_"{__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >="__first_"^{Client}}}
{unique_ptr<CLMotionState_Type::Client, std::__1::default_delete<CLMotionState_Type::Client> >="__ptr_"{__compressed_pair<CLMotionState_Type::Client *, std::__1::default_delete<CLMotionState_Type::Client> >="__first_"^{Client}}}
@"CLLocation"
{?="speed"d"timestamp"d"uncertainty"d}
v24@0:8@?<v@?^{CLCompanionNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBBd@{unique_ptr<CLMotionStateObserver_Type::Client, std::__1::default_delete<CLMotionStateObserver_Type::Client> >={__compressed_pair<CLMotionStateObserver_Type::Client *, std::__1::default_delete<CLMotionStateObserver_Type::Client> >=^{Client}}}{unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client> >={__compressed_pair<CLDataProtectionManager_Type::Client *, std::__1::default_delete<CLDataProtectionManager_Type::Client> >=^{Client}}}{unique_ptr<CLFitnessTrackingNotifier_Type::Client, std::__1::default_delete<CLFitnessTrackingNotifier_Type::Client> >={__compressed_pair<CLFitnessTrackingNotifier_Type::Client *, std::__1::default_delete<CLFitnessTrackingNotifier_Type::Client> >=^{Client}}}@}>16
v32@0:8@?<v@?^{CLCompanionNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBBd@{unique_ptr<CLMotionStateObserver_Type::Client, std::__1::default_delete<CLMotionStateObserver_Type::Client> >={__compressed_pair<CLMotionStateObserver_Type::Client *, std::__1::default_delete<CLMotionStateObserver_Type::Client> >=^{Client}}}{unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client> >={__compressed_pair<CLDataProtectionManager_Type::Client *, std::__1::default_delete<CLDataProtectionManager_Type::Client> >=^{Client}}}{unique_ptr<CLFitnessTrackingNotifier_Type::Client, std::__1::default_delete<CLFitnessTrackingNotifier_Type::Client> >={__compressed_pair<CLFitnessTrackingNotifier_Type::Client *, std::__1::default_delete<CLFitnessTrackingNotifier_Type::Client> >=^{Client}}}@}>16@?<v@?>24
B24@0:8@?<v@?^{CLCompanionNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBBd@{unique_ptr<CLMotionStateObserver_Type::Client, std::__1::default_delete<CLMotionStateObserver_Type::Client> >={__compressed_pair<CLMotionStateObserver_Type::Client *, std::__1::default_delete<CLMotionStateObserver_Type::Client> >=^{Client}}}{unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client> >={__compressed_pair<CLDataProtectionManager_Type::Client *, std::__1::default_delete<CLDataProtectionManager_Type::Client> >=^{Client}}}{unique_ptr<CLFitnessTrackingNotifier_Type::Client, std::__1::default_delete<CLFitnessTrackingNotifier_Type::Client> >={__compressed_pair<CLFitnessTrackingNotifier_Type::Client *, std::__1::default_delete<CLFitnessTrackingNotifier_Type::Client> >=^{Client}}}@}>16
^{CLCompanionNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBBd@{unique_ptr<CLMotionStateObserver_Type::Client, std::__1::default_delete<CLMotionStateObserver_Type::Client> >={__compressed_pair<CLMotionStateObserver_Type::Client *, std::__1::default_delete<CLMotionStateObserver_Type::Client> >=^{Client}}}{unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client> >={__compressed_pair<CLDataProtectionManager_Type::Client *, std::__1::default_delete<CLDataProtectionManager_Type::Client> >=^{Client}}}{unique_ptr<CLFitnessTrackingNotifier_Type::Client, std::__1::default_delete<CLFitnessTrackingNotifier_Type::Client> >={__compressed_pair<CLFitnessTrackingNotifier_Type::Client *, std::__1::default_delete<CLFitnessTrackingNotifier_Type::Client> >=^{Client}}}@}16@0:8
r*16@0:8
@32@0:8@16^v24
@40@0:8@16^v24@?32
{Battery=dBBiB}16@0:8
v40@0:8{Battery=dBBiB}16
B40@0:8^v16Q24^{os_state_hints_s=I*II}32
^v16@0:8
{_CLDaemonStatusStateTrackerState="batteryData"{Battery="level"d"charged"B"connected"B"chargerType"i"wasConnected"B}"reachability"i"thermalLevel"i"airplaneMode"B"batterySaverModeEnabled"B"pushServiceConnected"B"restrictedMode"B}
B36@0:8B16Q20@28
v24@0:8@?<v@?^{CLDaemonStatus=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB@II^{IONotificationPort}^{__CFRunLoopSource}^{IONotificationPort}^{__CFRunLoopSource}^{__SCNetworkReachability}^{__SCDynamicStore}^{__CFRunLoopSource}B^{IONotificationPort}I@{set<long, std::__1::less<long>, std::__1::allocator<long> >={__tree<long, std::__1::less<long>, std::__1::allocator<long> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<long, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<long> >=Q}}}@B@qd@iii}>16
v32@0:8@?<v@?^{CLDaemonStatus=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB@II^{IONotificationPort}^{__CFRunLoopSource}^{IONotificationPort}^{__CFRunLoopSource}^{__SCNetworkReachability}^{__SCDynamicStore}^{__CFRunLoopSource}B^{IONotificationPort}I@{set<long, std::__1::less<long>, std::__1::allocator<long> >={__tree<long, std::__1::less<long>, std::__1::allocator<long> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<long, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<long> >=Q}}}@B@qd@iii}>16@?<v@?>24
B24@0:8@?<v@?^{CLDaemonStatus=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB@II^{IONotificationPort}^{__CFRunLoopSource}^{IONotificationPort}^{__CFRunLoopSource}^{__SCNetworkReachability}^{__SCDynamicStore}^{__CFRunLoopSource}B^{IONotificationPort}I@{set<long, std::__1::less<long>, std::__1::allocator<long> >={__tree<long, std::__1::less<long>, std::__1::allocator<long> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<long, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<long> >=Q}}}@B@qd@iii}>16
v24@0:8@?<v@?i>16
v24@0:8@?<v@?q>16
B36@0:8B16Q20@"NSString"28
^{CLDaemonStatus=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB@II^{IONotificationPort}^{__CFRunLoopSource}^{IONotificationPort}^{__CFRunLoopSource}^{__SCNetworkReachability}^{__SCDynamicStore}^{__CFRunLoopSource}B^{IONotificationPort}I@{set<long, std::__1::less<long>, std::__1::allocator<long> >={__tree<long, std::__1::less<long>, std::__1::allocator<long> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<long, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<long> >=Q}}}@B@qd@iii}16@0:8
v24@0:8@"NSCoder"16
@24@0:8@"NSCoder"16
@88@0:8{CLMotionActivity=iiiiBfdBiddii{?=b1b1b1b1b1}}16
{CLMotionActivity=iiiiBfdBiddii{?=b1b1b1b1b1}}16@0:8
v88@0:8{CLMotionActivity=iiiiBfdBiddii{?=b1b1b1b1b1}}16
{CLMotionActivity="type"i"confidence"i"mountedState"i"mountedConfidence"i"isStanding"B"tilt"f"timestamp"d"isVehicleConnected"B"exitState"i"estExitTime"d"startTime"d"rawType"i"rawConfidence"i"vehicularFlags"{?="motionHint"b1"gpsHint"b1"basebandHint"b1"wifiHint"b1"btHint"b1}}
@88@0:8{AccessPoint={CLMacAddress=Q}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}iiiddB}16
v24@0:8^{CLSwimEntry=Q[16C][16C]ddddddiiiifffi}16
@104@0:8Q16@24@32@40@48Q56d64d72Q80q88Q96
@24@0:8r^{CLSwimEntry=Q[16C][16C]ddddddiiiifffi}16
B32@0:8@16@24
B64@0:8@16@24@32@40@48@56
v40@0:8@"PBSessionRequester"16@"PBCodable"24@"PBRequest"32
v24@0:8@"PBSessionRequester"16
v32@0:8@"PBSessionRequester"16@"NSError"24
v32@0:8@"PBSessionRequester"16@?<v@?>24
@24@0:8^{CLNetworkLocationRequesterALS=^^?{vector<CLTelephonyService_Type::Cell, std::__1::allocator<CLTelephonyService_Type::Cell> >=^{Cell}^{Cell}{__compressed_pair<CLTelephonyService_Type::Cell *, std::__1::allocator<CLTelephonyService_Type::Cell> >=^{Cell}}}{vector<CLTelephonyService_Type::ScdmaCell, std::__1::allocator<CLTelephonyService_Type::ScdmaCell> >=^{ScdmaCell}^{ScdmaCell}{__compressed_pair<CLTelephonyService_Type::ScdmaCell *, std::__1::allocator<CLTelephonyService_Type::ScdmaCell> >=^{ScdmaCell}}}{vector<CLTelephonyService_Type::CdmaCell, std::__1::allocator<CLTelephonyService_Type::CdmaCell> >=^{CdmaCell}^{CdmaCell}{__compressed_pair<CLTelephonyService_Type::CdmaCell *, std::__1::allocator<CLTelephonyService_Type::CdmaCell> >=^{CdmaCell}}}{vector<CLTelephonyService_Type::LteCell, std::__1::allocator<CLTelephonyService_Type::LteCell> >=^{LteCell}^{LteCell}{__compressed_pair<CLTelephonyService_Type::LteCell *, std::__1::allocator<CLTelephonyService_Type::LteCell> >=^{LteCell}}}{vector<CLMacAddress, std::__1::allocator<CLMacAddress> >=^{CLMacAddress}^{CLMacAddress}{__compressed_pair<CLMacAddress *, std::__1::allocator<CLMacAddress> >=^{CLMacAddress}}}{Listener=^v@^?^?^?^?^?^?^?^?^?^?^?^?^?^?}ii@@i^{__CFString}^{__CFString}i{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}B}16
v56@0:8@16{_NSRange=QQ}24d40i48i52
^{CLNetworkLocationRequesterALS=^^?{vector<CLTelephonyService_Type::Cell, std::__1::allocator<CLTelephonyService_Type::Cell> >=^{Cell}^{Cell}{__compressed_pair<CLTelephonyService_Type::Cell *, std::__1::allocator<CLTelephonyService_Type::Cell> >=^{Cell}}}{vector<CLTelephonyService_Type::ScdmaCell, std::__1::allocator<CLTelephonyService_Type::ScdmaCell> >=^{ScdmaCell}^{ScdmaCell}{__compressed_pair<CLTelephonyService_Type::ScdmaCell *, std::__1::allocator<CLTelephonyService_Type::ScdmaCell> >=^{ScdmaCell}}}{vector<CLTelephonyService_Type::CdmaCell, std::__1::allocator<CLTelephonyService_Type::CdmaCell> >=^{CdmaCell}^{CdmaCell}{__compressed_pair<CLTelephonyService_Type::CdmaCell *, std::__1::allocator<CLTelephonyService_Type::CdmaCell> >=^{CdmaCell}}}{vector<CLTelephonyService_Type::LteCell, std::__1::allocator<CLTelephonyService_Type::LteCell> >=^{LteCell}^{LteCell}{__compressed_pair<CLTelephonyService_Type::LteCell *, std::__1::allocator<CLTelephonyService_Type::LteCell> >=^{LteCell}}}{vector<CLMacAddress, std::__1::allocator<CLMacAddress> >=^{CLMacAddress}^{CLMacAddress}{__compressed_pair<CLMacAddress *, std::__1::allocator<CLMacAddress> >=^{CLMacAddress}}}{Listener=^v@^?^?^?^?^?^?^?^?^?^?^?^?^?^?}ii@@i^{__CFString}^{__CFString}i{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}B}
B24@0:8^d16
B32@0:8^d16^d24
v24@0:8@?<v@?^{CLTimeManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBiid}>16
v32@0:8@?<v@?^{CLTimeManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBiid}>16@?<v@?>24
B24@0:8@?<v@?^{CLTimeManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBiid}>16
^{CLTimeManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBiid}16@0:8
B24@0:8^{LocationMapMatching={Metric=Bd{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}iii}16
B24@0:8^{set<int, std::__1::less<int>, std::__1::allocator<int> >={__tree<int, std::__1::less<int>, std::__1::allocator<int> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<int, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<int> >=Q}}}16
v24@0:8B16i20
v24@0:8@?<v@?^{CLLocationController=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBBBB{CLDistanceCalc=ddddd}cc{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client> >={__compressed_pair<CLDataProtectionManager_Type::Client *, std::__1::default_delete<CLDataProtectionManager_Type::Client> >=^{Client}}}{unique_ptr<CLBluetoothService_Type::Client, std::__1::default_delete<CLBluetoothService_Type::Client> >={__compressed_pair<CLBluetoothService_Type::Client *, std::__1::default_delete<CLBluetoothService_Type::Client> >=^{Client}}}{unique_ptr<CLCompanionNotifier_Type::Client, std::__1::default_delete<CLCompanionNotifier_Type::Client> >={__compressed_pair<CLCompanionNotifier_Type::Client *, std::__1::default_delete<CLCompanionNotifier_Type::Client> >=^{Client}}}Bdii{map<CLLocationController::LocationProvider, CLLocationController::ProviderClient, std::__1::less<CLLocationController::LocationProvider>, std::__1::allocator<std::__1::pair<const CLLocationController::LocationProvider, CLLocationController::ProviderClient> > >={__tree<std::__1::__value_type<CLLocationController::LocationProvider, CLLocationController::ProviderClient>, std::__1::__map_value_compare<CLLocationController::LocationProvider, std::__1::__value_type<CLLocationController::LocationProvider, CLLocationController::ProviderClient>, std::__1::less<CLLocationController::LocationProvider>, true>, std::__1::allocator<std::__1::__value_type<CLLocationController::LocationProvider, CLLocationController::ProviderClient> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLLocationController::LocationProvider, CLLocationController::ProviderClient>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLLocationController::LocationProvider, std::__1::__value_type<CLLocationController::LocationProvider, CLLocationController::ProviderClient>, std::__1::less<CLLocationController::LocationProvider>, true> >=Q}}}{map<CLLocationController::LocationProvider, std::__1::unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client> >, std::__1::less<CLLocationController::LocationProvider>, std::__1::allocator<std::__1::pair<const CLLocationController::LocationProvider, std::__1::unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client> > > > >={__tree<std::__1::__value_type<CLLocationController::LocationProvider, std::__1::unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client> > >, std::__1::__map_value_compare<CLLocationController::LocationProvider, std::__1::__value_type<CLLocationController::LocationProvider, std::__1::unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client> > >, std::__1::less<CLLocationController::LocationProvider>, true>, std::__1::allocator<std::__1::__value_type<CLLocationController::LocationProvider, std::__1::unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLLocationController::LocationProvider, std::__1::unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLLocationController::LocationProvider, std::__1::__value_type<CLLocationController::LocationProvider, std::__1::unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client> > >, std::__1::less<CLLocationController::LocationProvider>, true> >=Q}}}{CLLocationFilterController={CLIntegrityMonitor={CLDistanceCalc=ddddd}{MotionInfo=dii}{MotionInfo=dii}{deque<CLIntegrityMonitor::MotionInfo, std::__1::allocator<CLIntegrityMonitor::MotionInfo> >={__split_buffer<CLIntegrityMonitor::MotionInfo *, std::__1::allocator<CLIntegrityMonitor::MotionInfo *> >=^^{MotionInfo}^^{MotionInfo}^^{MotionInfo}{__compressed_pair<CLIntegrityMonitor::MotionInfo **, std::__1::allocator<CLIntegrityMonitor::MotionInfo *> >=^^{MotionInfo}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLIntegrityMonitor::MotionInfo> >=Q}}{deque<CLDaemonLocation, std::__1::allocator<CLDaemonLocation> >={__split_buffer<CLDaemonLocation *, std::__1::allocator<CLDaemonLocation *> >=^^{CLDaemonLocation}^^{CLDaemonLocation}^^{CLDaemonLocation}{__compressed_pair<CLDaemonLocation **, std::__1::allocator<CLDaemonLocation *> >=^^{CLDaemonLocation}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLDaemonLocation> >=Q}}{deque<CLDaemonLocation, std::__1::allocator<CLDaemonLocation> >={__split_buffer<CLDaemonLocation *, std::__1::allocator<CLDaemonLocation *> >=^^{CLDaemonLocation}^^{CLDaemonLocation}^^{CLDaemonLocation}{__compressed_pair<CLDaemonLocation **, std::__1::allocator<CLDaemonLocation *> >=^^{CLDaemonLocation}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLDaemonLocation> >=Q}}{deque<CLDaemonLocation, std::__1::allocator<CLDaemonLocation> >={__split_buffer<CLDaemonLocation *, std::__1::allocator<CLDaemonLocation *> >=^^{CLDaemonLocation}^^{CLDaemonLocation}^^{CLDaemonLocation}{__compressed_pair<CLDaemonLocation **, std::__1::allocator<CLDaemonLocation *> >=^^{CLDaemonLocation}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLDaemonLocation> >=Q}}{IM_AllSources={IMPara=BBBdd}{IMPara=BBBdd}{IMPara=BBBdd}i}}@{CLDualModeKalmanFilter=^^?{CLKalmanFilter=^^?{KalmanParameters=^^?{KalmanTuningInfo=^^?ddddBf}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}ddddddddBBd{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}BBi{altFilterData=ff}B{list<CLDaemonLocation, std::__1::allocator<CLDaemonLocation> >={__list_node_base<CLDaemonLocation, void *>=^{__list_node_base<CLDaemonLocation, void *>}^{__list_node_base<CLDaemonLocation, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLDaemonLocation, void *> > >=Q}}}ii{KalmanTuningInfo=^^?ddddBf}{KalmanTuningInfo=^^?ddddBf}{KalmanTuningInfo=^^?ddddBf}{KalmanTuningInfo=^^?ddddBf}BB{CLDistanceCalc=ddddd}}{CLKalmanFilter=^^?{KalmanParameters=^^?{KalmanTuningInfo=^^?ddddBf}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}ddddddddBBd{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}BBi{altFilterData=ff}B{list<CLDaemonLocation, std::__1::allocator<CLDaemonLocation> >={__list_node_base<CLDaemonLocation, void *>=^{__list_node_base<CLDaemonLocation, void *>}^{__list_node_base<CLDaemonLocation, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLDaemonLocation, void *> > >=Q}}}ii{KalmanTuningInfo=^^?ddddBf}{KalmanTuningInfo=^^?ddddBf}{KalmanTuningInfo=^^?ddddBf}{KalmanTuningInfo=^^?ddddBf}BB{CLDistanceCalc=ddddd}}{CLDistanceCalc=ddddd}}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}^{CLMapMatchingEngine}{unique_ptr<CLOutdoorMatchingEngine, std::__1::default_delete<CLOutdoorMatchingEngine> >={__compressed_pair<CLOutdoorMatchingEngine *, std::__1::default_delete<CLOutdoorMatchingEngine> >=^{CLOutdoorMatchingEngine}}}BBBB{CLVehicleSpeedFilter={SpeedAndTime=dd}{SpeedAndTime=dd}{SpeedAndTime=dd}}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}dddddBB{MapMatcherNetworkUsage=iiiBBBBi}{unique_ptr<CLMotionState_Type::Client, std::__1::default_delete<CLMotionState_Type::Client> >={__compressed_pair<CLMotionState_Type::Client *, std::__1::default_delete<CLMotionState_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLSignalEnvironmentProvider_Type::Client, std::__1::default_delete<CLSignalEnvironmentProvider_Type::Client> >={__compressed_pair<CLSignalEnvironmentProvider_Type::Client *, std::__1::default_delete<CLSignalEnvironmentProvider_Type::Client> >=^{Client}}}{unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client> >={__compressed_pair<CLTelephonyService_Type::Client *, std::__1::default_delete<CLTelephonyService_Type::Client> >=^{Client}}}@{unique_ptr<CLAppMonitor_Type::Client, std::__1::default_delete<CLAppMonitor_Type::Client> >={__compressed_pair<CLAppMonitor_Type::Client *, std::__1::default_delete<CLAppMonitor_Type::Client> >=^{Client}}}}iiiiiiii@@^{__CFRunLoopTimer}BBBBBBBBid^{__CFRunLoopSource}^{__CFRunLoopSource}B{unique_ptr<CLRavenController, void (*)(CLRavenController *)>={__compressed_pair<CLRavenController *, void (*)(CLRavenController *)>=^{CLRavenController}^?}}@[11{StateTransition=*Bd}]d{PropagationDataHistory={NotificationData={CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocationPrivate=dddddfffBi{?=dd}diiB{?=dd}if{?=dd}ddiBddddddB}{shared_ptr<CLBatchedLocations>=^{CLBatchedLocations}^{__shared_weak_count}}{TechnologyStatus=iB}Bdi{?=dddd}{?=dd}{XtraFileAvailable=d{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}i{LocationDerivedSpeed=ddd}{shared_ptr<const GNSS::MeasurementData>=^{MeasurementData}^{__shared_weak_count}}i}{NotificationData={CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocationPrivate=dddddfffBi{?=dd}diiB{?=dd}if{?=dd}ddiBddddddB}{shared_ptr<CLBatchedLocations>=^{CLBatchedLocations}^{__shared_weak_count}}{TechnologyStatus=iB}Bdi{?=dddd}{?=dd}{XtraFileAvailable=d{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}i{LocationDerivedSpeed=ddd}{shared_ptr<const GNSS::MeasurementData>=^{MeasurementData}^{__shared_weak_count}}i}ddd}}>16
v32@0:8@?<v@?^{CLLocationController=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBBBB{CLDistanceCalc=ddddd}cc{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client> >={__compressed_pair<CLDataProtectionManager_Type::Client *, std::__1::default_delete<CLDataProtectionManager_Type::Client> >=^{Client}}}{unique_ptr<CLBluetoothService_Type::Client, std::__1::default_delete<CLBluetoothService_Type::Client> >={__compressed_pair<CLBluetoothService_Type::Client *, std::__1::default_delete<CLBluetoothService_Type::Client> >=^{Client}}}{unique_ptr<CLCompanionNotifier_Type::Client, std::__1::default_delete<CLCompanionNotifier_Type::Client> >={__compressed_pair<CLCompanionNotifier_Type::Client *, std::__1::default_delete<CLCompanionNotifier_Type::Client> >=^{Client}}}Bdii{map<CLLocationController::LocationProvider, CLLocationController::ProviderClient, std::__1::less<CLLocationController::LocationProvider>, std::__1::allocator<std::__1::pair<const CLLocationController::LocationProvider, CLLocationController::ProviderClient> > >={__tree<std::__1::__value_type<CLLocationController::LocationProvider, CLLocationController::ProviderClient>, std::__1::__map_value_compare<CLLocationController::LocationProvider, std::__1::__value_type<CLLocationController::LocationProvider, CLLocationController::ProviderClient>, std::__1::less<CLLocationController::LocationProvider>, true>, std::__1::allocator<std::__1::__value_type<CLLocationController::LocationProvider, CLLocationController::ProviderClient> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLLocationController::LocationProvider, CLLocationController::ProviderClient>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLLocationController::LocationProvider, std::__1::__value_type<CLLocationController::LocationProvider, CLLocationController::ProviderClient>, std::__1::less<CLLocationController::LocationProvider>, true> >=Q}}}{map<CLLocationController::LocationProvider, std::__1::unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client> >, std::__1::less<CLLocationController::LocationProvider>, std::__1::allocator<std::__1::pair<const CLLocationController::LocationProvider, std::__1::unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client> > > > >={__tree<std::__1::__value_type<CLLocationController::LocationProvider, std::__1::unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client> > >, std::__1::__map_value_compare<CLLocationController::LocationProvider, std::__1::__value_type<CLLocationController::LocationProvider, std::__1::unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client> > >, std::__1::less<CLLocationController::LocationProvider>, true>, std::__1::allocator<std::__1::__value_type<CLLocationController::LocationProvider, std::__1::unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLLocationController::LocationProvider, std::__1::unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLLocationController::LocationProvider, std::__1::__value_type<CLLocationController::LocationProvider, std::__1::unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client> > >, std::__1::less<CLLocationController::LocationProvider>, true> >=Q}}}{CLLocationFilterController={CLIntegrityMonitor={CLDistanceCalc=ddddd}{MotionInfo=dii}{MotionInfo=dii}{deque<CLIntegrityMonitor::MotionInfo, std::__1::allocator<CLIntegrityMonitor::MotionInfo> >={__split_buffer<CLIntegrityMonitor::MotionInfo *, std::__1::allocator<CLIntegrityMonitor::MotionInfo *> >=^^{MotionInfo}^^{MotionInfo}^^{MotionInfo}{__compressed_pair<CLIntegrityMonitor::MotionInfo **, std::__1::allocator<CLIntegrityMonitor::MotionInfo *> >=^^{MotionInfo}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLIntegrityMonitor::MotionInfo> >=Q}}{deque<CLDaemonLocation, std::__1::allocator<CLDaemonLocation> >={__split_buffer<CLDaemonLocation *, std::__1::allocator<CLDaemonLocation *> >=^^{CLDaemonLocation}^^{CLDaemonLocation}^^{CLDaemonLocation}{__compressed_pair<CLDaemonLocation **, std::__1::allocator<CLDaemonLocation *> >=^^{CLDaemonLocation}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLDaemonLocation> >=Q}}{deque<CLDaemonLocation, std::__1::allocator<CLDaemonLocation> >={__split_buffer<CLDaemonLocation *, std::__1::allocator<CLDaemonLocation *> >=^^{CLDaemonLocation}^^{CLDaemonLocation}^^{CLDaemonLocation}{__compressed_pair<CLDaemonLocation **, std::__1::allocator<CLDaemonLocation *> >=^^{CLDaemonLocation}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLDaemonLocation> >=Q}}{deque<CLDaemonLocation, std::__1::allocator<CLDaemonLocation> >={__split_buffer<CLDaemonLocation *, std::__1::allocator<CLDaemonLocation *> >=^^{CLDaemonLocation}^^{CLDaemonLocation}^^{CLDaemonLocation}{__compressed_pair<CLDaemonLocation **, std::__1::allocator<CLDaemonLocation *> >=^^{CLDaemonLocation}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLDaemonLocation> >=Q}}{IM_AllSources={IMPara=BBBdd}{IMPara=BBBdd}{IMPara=BBBdd}i}}@{CLDualModeKalmanFilter=^^?{CLKalmanFilter=^^?{KalmanParameters=^^?{KalmanTuningInfo=^^?ddddBf}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}ddddddddBBd{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}BBi{altFilterData=ff}B{list<CLDaemonLocation, std::__1::allocator<CLDaemonLocation> >={__list_node_base<CLDaemonLocation, void *>=^{__list_node_base<CLDaemonLocation, void *>}^{__list_node_base<CLDaemonLocation, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLDaemonLocation, void *> > >=Q}}}ii{KalmanTuningInfo=^^?ddddBf}{KalmanTuningInfo=^^?ddddBf}{KalmanTuningInfo=^^?ddddBf}{KalmanTuningInfo=^^?ddddBf}BB{CLDistanceCalc=ddddd}}{CLKalmanFilter=^^?{KalmanParameters=^^?{KalmanTuningInfo=^^?ddddBf}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}ddddddddBBd{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}BBi{altFilterData=ff}B{list<CLDaemonLocation, std::__1::allocator<CLDaemonLocation> >={__list_node_base<CLDaemonLocation, void *>=^{__list_node_base<CLDaemonLocation, void *>}^{__list_node_base<CLDaemonLocation, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLDaemonLocation, void *> > >=Q}}}ii{KalmanTuningInfo=^^?ddddBf}{KalmanTuningInfo=^^?ddddBf}{KalmanTuningInfo=^^?ddddBf}{KalmanTuningInfo=^^?ddddBf}BB{CLDistanceCalc=ddddd}}{CLDistanceCalc=ddddd}}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}^{CLMapMatchingEngine}{unique_ptr<CLOutdoorMatchingEngine, std::__1::default_delete<CLOutdoorMatchingEngine> >={__compressed_pair<CLOutdoorMatchingEngine *, std::__1::default_delete<CLOutdoorMatchingEngine> >=^{CLOutdoorMatchingEngine}}}BBBB{CLVehicleSpeedFilter={SpeedAndTime=dd}{SpeedAndTime=dd}{SpeedAndTime=dd}}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}dddddBB{MapMatcherNetworkUsage=iiiBBBBi}{unique_ptr<CLMotionState_Type::Client, std::__1::default_delete<CLMotionState_Type::Client> >={__compressed_pair<CLMotionState_Type::Client *, std::__1::default_delete<CLMotionState_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLSignalEnvironmentProvider_Type::Client, std::__1::default_delete<CLSignalEnvironmentProvider_Type::Client> >={__compressed_pair<CLSignalEnvironmentProvider_Type::Client *, std::__1::default_delete<CLSignalEnvironmentProvider_Type::Client> >=^{Client}}}{unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client> >={__compressed_pair<CLTelephonyService_Type::Client *, std::__1::default_delete<CLTelephonyService_Type::Client> >=^{Client}}}@{unique_ptr<CLAppMonitor_Type::Client, std::__1::default_delete<CLAppMonitor_Type::Client> >={__compressed_pair<CLAppMonitor_Type::Client *, std::__1::default_delete<CLAppMonitor_Type::Client> >=^{Client}}}}iiiiiiii@@^{__CFRunLoopTimer}BBBBBBBBid^{__CFRunLoopSource}^{__CFRunLoopSource}B{unique_ptr<CLRavenController, void (*)(CLRavenController *)>={__compressed_pair<CLRavenController *, void (*)(CLRavenController *)>=^{CLRavenController}^?}}@[11{StateTransition=*Bd}]d{PropagationDataHistory={NotificationData={CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocationPrivate=dddddfffBi{?=dd}diiB{?=dd}if{?=dd}ddiBddddddB}{shared_ptr<CLBatchedLocations>=^{CLBatchedLocations}^{__shared_weak_count}}{TechnologyStatus=iB}Bdi{?=dddd}{?=dd}{XtraFileAvailable=d{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}i{LocationDerivedSpeed=ddd}{shared_ptr<const GNSS::MeasurementData>=^{MeasurementData}^{__shared_weak_count}}i}{NotificationData={CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocationPrivate=dddddfffBi{?=dd}diiB{?=dd}if{?=dd}ddiBddddddB}{shared_ptr<CLBatchedLocations>=^{CLBatchedLocations}^{__shared_weak_count}}{TechnologyStatus=iB}Bdi{?=dddd}{?=dd}{XtraFileAvailable=d{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}i{LocationDerivedSpeed=ddd}{shared_ptr<const GNSS::MeasurementData>=^{MeasurementData}^{__shared_weak_count}}i}ddd}}>16@?<v@?>24
B24@0:8@?<v@?^{CLLocationController=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBBBB{CLDistanceCalc=ddddd}cc{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client> >={__compressed_pair<CLDataProtectionManager_Type::Client *, std::__1::default_delete<CLDataProtectionManager_Type::Client> >=^{Client}}}{unique_ptr<CLBluetoothService_Type::Client, std::__1::default_delete<CLBluetoothService_Type::Client> >={__compressed_pair<CLBluetoothService_Type::Client *, std::__1::default_delete<CLBluetoothService_Type::Client> >=^{Client}}}{unique_ptr<CLCompanionNotifier_Type::Client, std::__1::default_delete<CLCompanionNotifier_Type::Client> >={__compressed_pair<CLCompanionNotifier_Type::Client *, std::__1::default_delete<CLCompanionNotifier_Type::Client> >=^{Client}}}Bdii{map<CLLocationController::LocationProvider, CLLocationController::ProviderClient, std::__1::less<CLLocationController::LocationProvider>, std::__1::allocator<std::__1::pair<const CLLocationController::LocationProvider, CLLocationController::ProviderClient> > >={__tree<std::__1::__value_type<CLLocationController::LocationProvider, CLLocationController::ProviderClient>, std::__1::__map_value_compare<CLLocationController::LocationProvider, std::__1::__value_type<CLLocationController::LocationProvider, CLLocationController::ProviderClient>, std::__1::less<CLLocationController::LocationProvider>, true>, std::__1::allocator<std::__1::__value_type<CLLocationController::LocationProvider, CLLocationController::ProviderClient> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLLocationController::LocationProvider, CLLocationController::ProviderClient>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLLocationController::LocationProvider, std::__1::__value_type<CLLocationController::LocationProvider, CLLocationController::ProviderClient>, std::__1::less<CLLocationController::LocationProvider>, true> >=Q}}}{map<CLLocationController::LocationProvider, std::__1::unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client> >, std::__1::less<CLLocationController::LocationProvider>, std::__1::allocator<std::__1::pair<const CLLocationController::LocationProvider, std::__1::unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client> > > > >={__tree<std::__1::__value_type<CLLocationController::LocationProvider, std::__1::unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client> > >, std::__1::__map_value_compare<CLLocationController::LocationProvider, std::__1::__value_type<CLLocationController::LocationProvider, std::__1::unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client> > >, std::__1::less<CLLocationController::LocationProvider>, true>, std::__1::allocator<std::__1::__value_type<CLLocationController::LocationProvider, std::__1::unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLLocationController::LocationProvider, std::__1::unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLLocationController::LocationProvider, std::__1::__value_type<CLLocationController::LocationProvider, std::__1::unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client> > >, std::__1::less<CLLocationController::LocationProvider>, true> >=Q}}}{CLLocationFilterController={CLIntegrityMonitor={CLDistanceCalc=ddddd}{MotionInfo=dii}{MotionInfo=dii}{deque<CLIntegrityMonitor::MotionInfo, std::__1::allocator<CLIntegrityMonitor::MotionInfo> >={__split_buffer<CLIntegrityMonitor::MotionInfo *, std::__1::allocator<CLIntegrityMonitor::MotionInfo *> >=^^{MotionInfo}^^{MotionInfo}^^{MotionInfo}{__compressed_pair<CLIntegrityMonitor::MotionInfo **, std::__1::allocator<CLIntegrityMonitor::MotionInfo *> >=^^{MotionInfo}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLIntegrityMonitor::MotionInfo> >=Q}}{deque<CLDaemonLocation, std::__1::allocator<CLDaemonLocation> >={__split_buffer<CLDaemonLocation *, std::__1::allocator<CLDaemonLocation *> >=^^{CLDaemonLocation}^^{CLDaemonLocation}^^{CLDaemonLocation}{__compressed_pair<CLDaemonLocation **, std::__1::allocator<CLDaemonLocation *> >=^^{CLDaemonLocation}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLDaemonLocation> >=Q}}{deque<CLDaemonLocation, std::__1::allocator<CLDaemonLocation> >={__split_buffer<CLDaemonLocation *, std::__1::allocator<CLDaemonLocation *> >=^^{CLDaemonLocation}^^{CLDaemonLocation}^^{CLDaemonLocation}{__compressed_pair<CLDaemonLocation **, std::__1::allocator<CLDaemonLocation *> >=^^{CLDaemonLocation}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLDaemonLocation> >=Q}}{deque<CLDaemonLocation, std::__1::allocator<CLDaemonLocation> >={__split_buffer<CLDaemonLocation *, std::__1::allocator<CLDaemonLocation *> >=^^{CLDaemonLocation}^^{CLDaemonLocation}^^{CLDaemonLocation}{__compressed_pair<CLDaemonLocation **, std::__1::allocator<CLDaemonLocation *> >=^^{CLDaemonLocation}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLDaemonLocation> >=Q}}{IM_AllSources={IMPara=BBBdd}{IMPara=BBBdd}{IMPara=BBBdd}i}}@{CLDualModeKalmanFilter=^^?{CLKalmanFilter=^^?{KalmanParameters=^^?{KalmanTuningInfo=^^?ddddBf}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}ddddddddBBd{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}BBi{altFilterData=ff}B{list<CLDaemonLocation, std::__1::allocator<CLDaemonLocation> >={__list_node_base<CLDaemonLocation, void *>=^{__list_node_base<CLDaemonLocation, void *>}^{__list_node_base<CLDaemonLocation, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLDaemonLocation, void *> > >=Q}}}ii{KalmanTuningInfo=^^?ddddBf}{KalmanTuningInfo=^^?ddddBf}{KalmanTuningInfo=^^?ddddBf}{KalmanTuningInfo=^^?ddddBf}BB{CLDistanceCalc=ddddd}}{CLKalmanFilter=^^?{KalmanParameters=^^?{KalmanTuningInfo=^^?ddddBf}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}ddddddddBBd{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}BBi{altFilterData=ff}B{list<CLDaemonLocation, std::__1::allocator<CLDaemonLocation> >={__list_node_base<CLDaemonLocation, void *>=^{__list_node_base<CLDaemonLocation, void *>}^{__list_node_base<CLDaemonLocation, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLDaemonLocation, void *> > >=Q}}}ii{KalmanTuningInfo=^^?ddddBf}{KalmanTuningInfo=^^?ddddBf}{KalmanTuningInfo=^^?ddddBf}{KalmanTuningInfo=^^?ddddBf}BB{CLDistanceCalc=ddddd}}{CLDistanceCalc=ddddd}}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}^{CLMapMatchingEngine}{unique_ptr<CLOutdoorMatchingEngine, std::__1::default_delete<CLOutdoorMatchingEngine> >={__compressed_pair<CLOutdoorMatchingEngine *, std::__1::default_delete<CLOutdoorMatchingEngine> >=^{CLOutdoorMatchingEngine}}}BBBB{CLVehicleSpeedFilter={SpeedAndTime=dd}{SpeedAndTime=dd}{SpeedAndTime=dd}}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}dddddBB{MapMatcherNetworkUsage=iiiBBBBi}{unique_ptr<CLMotionState_Type::Client, std::__1::default_delete<CLMotionState_Type::Client> >={__compressed_pair<CLMotionState_Type::Client *, std::__1::default_delete<CLMotionState_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLSignalEnvironmentProvider_Type::Client, std::__1::default_delete<CLSignalEnvironmentProvider_Type::Client> >={__compressed_pair<CLSignalEnvironmentProvider_Type::Client *, std::__1::default_delete<CLSignalEnvironmentProvider_Type::Client> >=^{Client}}}{unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client> >={__compressed_pair<CLTelephonyService_Type::Client *, std::__1::default_delete<CLTelephonyService_Type::Client> >=^{Client}}}@{unique_ptr<CLAppMonitor_Type::Client, std::__1::default_delete<CLAppMonitor_Type::Client> >={__compressed_pair<CLAppMonitor_Type::Client *, std::__1::default_delete<CLAppMonitor_Type::Client> >=^{Client}}}}iiiiiiii@@^{__CFRunLoopTimer}BBBBBBBBid^{__CFRunLoopSource}^{__CFRunLoopSource}B{unique_ptr<CLRavenController, void (*)(CLRavenController *)>={__compressed_pair<CLRavenController *, void (*)(CLRavenController *)>=^{CLRavenController}^?}}@[11{StateTransition=*Bd}]d{PropagationDataHistory={NotificationData={CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocationPrivate=dddddfffBi{?=dd}diiB{?=dd}if{?=dd}ddiBddddddB}{shared_ptr<CLBatchedLocations>=^{CLBatchedLocations}^{__shared_weak_count}}{TechnologyStatus=iB}Bdi{?=dddd}{?=dd}{XtraFileAvailable=d{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}i{LocationDerivedSpeed=ddd}{shared_ptr<const GNSS::MeasurementData>=^{MeasurementData}^{__shared_weak_count}}i}{NotificationData={CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocationPrivate=dddddfffBi{?=dd}diiB{?=dd}if{?=dd}ddiBddddddB}{shared_ptr<CLBatchedLocations>=^{CLBatchedLocations}^{__shared_weak_count}}{TechnologyStatus=iB}Bdi{?=dddd}{?=dd}{XtraFileAvailable=d{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}i{LocationDerivedSpeed=ddd}{shared_ptr<const GNSS::MeasurementData>=^{MeasurementData}^{__shared_weak_count}}i}ddd}}>16
^{CLLocationController=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBBBB{CLDistanceCalc=ddddd}cc{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client> >={__compressed_pair<CLDataProtectionManager_Type::Client *, std::__1::default_delete<CLDataProtectionManager_Type::Client> >=^{Client}}}{unique_ptr<CLBluetoothService_Type::Client, std::__1::default_delete<CLBluetoothService_Type::Client> >={__compressed_pair<CLBluetoothService_Type::Client *, std::__1::default_delete<CLBluetoothService_Type::Client> >=^{Client}}}{unique_ptr<CLCompanionNotifier_Type::Client, std::__1::default_delete<CLCompanionNotifier_Type::Client> >={__compressed_pair<CLCompanionNotifier_Type::Client *, std::__1::default_delete<CLCompanionNotifier_Type::Client> >=^{Client}}}Bdii{map<CLLocationController::LocationProvider, CLLocationController::ProviderClient, std::__1::less<CLLocationController::LocationProvider>, std::__1::allocator<std::__1::pair<const CLLocationController::LocationProvider, CLLocationController::ProviderClient> > >={__tree<std::__1::__value_type<CLLocationController::LocationProvider, CLLocationController::ProviderClient>, std::__1::__map_value_compare<CLLocationController::LocationProvider, std::__1::__value_type<CLLocationController::LocationProvider, CLLocationController::ProviderClient>, std::__1::less<CLLocationController::LocationProvider>, true>, std::__1::allocator<std::__1::__value_type<CLLocationController::LocationProvider, CLLocationController::ProviderClient> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLLocationController::LocationProvider, CLLocationController::ProviderClient>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLLocationController::LocationProvider, std::__1::__value_type<CLLocationController::LocationProvider, CLLocationController::ProviderClient>, std::__1::less<CLLocationController::LocationProvider>, true> >=Q}}}{map<CLLocationController::LocationProvider, std::__1::unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client> >, std::__1::less<CLLocationController::LocationProvider>, std::__1::allocator<std::__1::pair<const CLLocationController::LocationProvider, std::__1::unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client> > > > >={__tree<std::__1::__value_type<CLLocationController::LocationProvider, std::__1::unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client> > >, std::__1::__map_value_compare<CLLocationController::LocationProvider, std::__1::__value_type<CLLocationController::LocationProvider, std::__1::unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client> > >, std::__1::less<CLLocationController::LocationProvider>, true>, std::__1::allocator<std::__1::__value_type<CLLocationController::LocationProvider, std::__1::unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLLocationController::LocationProvider, std::__1::unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLLocationController::LocationProvider, std::__1::__value_type<CLLocationController::LocationProvider, std::__1::unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client> > >, std::__1::less<CLLocationController::LocationProvider>, true> >=Q}}}{CLLocationFilterController={CLIntegrityMonitor={CLDistanceCalc=ddddd}{MotionInfo=dii}{MotionInfo=dii}{deque<CLIntegrityMonitor::MotionInfo, std::__1::allocator<CLIntegrityMonitor::MotionInfo> >={__split_buffer<CLIntegrityMonitor::MotionInfo *, std::__1::allocator<CLIntegrityMonitor::MotionInfo *> >=^^{MotionInfo}^^{MotionInfo}^^{MotionInfo}{__compressed_pair<CLIntegrityMonitor::MotionInfo **, std::__1::allocator<CLIntegrityMonitor::MotionInfo *> >=^^{MotionInfo}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLIntegrityMonitor::MotionInfo> >=Q}}{deque<CLDaemonLocation, std::__1::allocator<CLDaemonLocation> >={__split_buffer<CLDaemonLocation *, std::__1::allocator<CLDaemonLocation *> >=^^{CLDaemonLocation}^^{CLDaemonLocation}^^{CLDaemonLocation}{__compressed_pair<CLDaemonLocation **, std::__1::allocator<CLDaemonLocation *> >=^^{CLDaemonLocation}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLDaemonLocation> >=Q}}{deque<CLDaemonLocation, std::__1::allocator<CLDaemonLocation> >={__split_buffer<CLDaemonLocation *, std::__1::allocator<CLDaemonLocation *> >=^^{CLDaemonLocation}^^{CLDaemonLocation}^^{CLDaemonLocation}{__compressed_pair<CLDaemonLocation **, std::__1::allocator<CLDaemonLocation *> >=^^{CLDaemonLocation}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLDaemonLocation> >=Q}}{deque<CLDaemonLocation, std::__1::allocator<CLDaemonLocation> >={__split_buffer<CLDaemonLocation *, std::__1::allocator<CLDaemonLocation *> >=^^{CLDaemonLocation}^^{CLDaemonLocation}^^{CLDaemonLocation}{__compressed_pair<CLDaemonLocation **, std::__1::allocator<CLDaemonLocation *> >=^^{CLDaemonLocation}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLDaemonLocation> >=Q}}{IM_AllSources={IMPara=BBBdd}{IMPara=BBBdd}{IMPara=BBBdd}i}}@{CLDualModeKalmanFilter=^^?{CLKalmanFilter=^^?{KalmanParameters=^^?{KalmanTuningInfo=^^?ddddBf}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}ddddddddBBd{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}BBi{altFilterData=ff}B{list<CLDaemonLocation, std::__1::allocator<CLDaemonLocation> >={__list_node_base<CLDaemonLocation, void *>=^{__list_node_base<CLDaemonLocation, void *>}^{__list_node_base<CLDaemonLocation, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLDaemonLocation, void *> > >=Q}}}ii{KalmanTuningInfo=^^?ddddBf}{KalmanTuningInfo=^^?ddddBf}{KalmanTuningInfo=^^?ddddBf}{KalmanTuningInfo=^^?ddddBf}BB{CLDistanceCalc=ddddd}}{CLKalmanFilter=^^?{KalmanParameters=^^?{KalmanTuningInfo=^^?ddddBf}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}ddddddddBBd{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}BBi{altFilterData=ff}B{list<CLDaemonLocation, std::__1::allocator<CLDaemonLocation> >={__list_node_base<CLDaemonLocation, void *>=^{__list_node_base<CLDaemonLocation, void *>}^{__list_node_base<CLDaemonLocation, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLDaemonLocation, void *> > >=Q}}}ii{KalmanTuningInfo=^^?ddddBf}{KalmanTuningInfo=^^?ddddBf}{KalmanTuningInfo=^^?ddddBf}{KalmanTuningInfo=^^?ddddBf}BB{CLDistanceCalc=ddddd}}{CLDistanceCalc=ddddd}}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}^{CLMapMatchingEngine}{unique_ptr<CLOutdoorMatchingEngine, std::__1::default_delete<CLOutdoorMatchingEngine> >={__compressed_pair<CLOutdoorMatchingEngine *, std::__1::default_delete<CLOutdoorMatchingEngine> >=^{CLOutdoorMatchingEngine}}}BBBB{CLVehicleSpeedFilter={SpeedAndTime=dd}{SpeedAndTime=dd}{SpeedAndTime=dd}}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}dddddBB{MapMatcherNetworkUsage=iiiBBBBi}{unique_ptr<CLMotionState_Type::Client, std::__1::default_delete<CLMotionState_Type::Client> >={__compressed_pair<CLMotionState_Type::Client *, std::__1::default_delete<CLMotionState_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLSignalEnvironmentProvider_Type::Client, std::__1::default_delete<CLSignalEnvironmentProvider_Type::Client> >={__compressed_pair<CLSignalEnvironmentProvider_Type::Client *, std::__1::default_delete<CLSignalEnvironmentProvider_Type::Client> >=^{Client}}}{unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client> >={__compressed_pair<CLTelephonyService_Type::Client *, std::__1::default_delete<CLTelephonyService_Type::Client> >=^{Client}}}@{unique_ptr<CLAppMonitor_Type::Client, std::__1::default_delete<CLAppMonitor_Type::Client> >={__compressed_pair<CLAppMonitor_Type::Client *, std::__1::default_delete<CLAppMonitor_Type::Client> >=^{Client}}}}iiiiiiii@@^{__CFRunLoopTimer}BBBBBBBBid^{__CFRunLoopSource}^{__CFRunLoopSource}B{unique_ptr<CLRavenController, void (*)(CLRavenController *)>={__compressed_pair<CLRavenController *, void (*)(CLRavenController *)>=^{CLRavenController}^?}}@[11{StateTransition=*Bd}]d{PropagationDataHistory={NotificationData={CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocationPrivate=dddddfffBi{?=dd}diiB{?=dd}if{?=dd}ddiBddddddB}{shared_ptr<CLBatchedLocations>=^{CLBatchedLocations}^{__shared_weak_count}}{TechnologyStatus=iB}Bdi{?=dddd}{?=dd}{XtraFileAvailable=d{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}i{LocationDerivedSpeed=ddd}{shared_ptr<const GNSS::MeasurementData>=^{MeasurementData}^{__shared_weak_count}}i}{NotificationData={CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocationPrivate=dddddfffBi{?=dd}diiB{?=dd}if{?=dd}ddiBddddddB}{shared_ptr<CLBatchedLocations>=^{CLBatchedLocations}^{__shared_weak_count}}{TechnologyStatus=iB}Bdi{?=dddd}{?=dd}{XtraFileAvailable=d{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}i{LocationDerivedSpeed=ddd}{shared_ptr<const GNSS::MeasurementData>=^{MeasurementData}^{__shared_weak_count}}i}ddd}}16@0:8
v24@0:8@?<{CLWifiLocationUpdateRequest=iBdiB}@?>16
v24@0:8@?<v@?^{CLWifiLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBBBB{shared_ptr<CLWifiLocationProvider::IExternal>=^{IExternal}^{__shared_weak_count}}^{__CFRunLoopTimer}{CLWifiPositioningSystemLogic={shared_ptr<CL::WifiPositioning::IPlatformInfo>=^{IPlatformInfo}^{__shared_weak_count}}{Logic={shared_ptr<CLICachedLookupWifiAccessPointLocationService>=^{CLICachedLookupWifiAccessPointLocationService}^{__shared_weak_count}}}}{SystemState={WifiScanHistory={unordered_set<CLWifiService_Type::AccessPoint, CLWifiService_Type::AccessPointHash, CLWifiService_Type::AccessPointEquality, std::__1::allocator<CLWifiService_Type::AccessPoint> >={__hash_table<CLWifiService_Type::AccessPoint, CLWifiService_Type::AccessPointHash, CLWifiService_Type::AccessPointEquality, std::__1::allocator<CLWifiService_Type::AccessPoint> >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> *>, std::__1::allocator<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> > >={__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> *>=^{__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> *>}}}{__compressed_pair<unsigned long, CLWifiService_Type::AccessPointHash>=Q}{__compressed_pair<float, CLWifiService_Type::AccessPointEquality>=f}}}}{WifiScan={unordered_set<CLWifiService_Type::AccessPoint, CLWifiService_Type::AccessPointHash, CLWifiService_Type::AccessPointEquality, std::__1::allocator<CLWifiService_Type::AccessPoint> >={__hash_table<CLWifiService_Type::AccessPoint, CLWifiService_Type::AccessPointHash, CLWifiService_Type::AccessPointEquality, std::__1::allocator<CLWifiService_Type::AccessPoint> >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> *>, std::__1::allocator<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> > >={__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> *>=^{__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> *>}}}{__compressed_pair<unsigned long, CLWifiService_Type::AccessPointHash>=Q}{__compressed_pair<float, CLWifiService_Type::AccessPointEquality>=f}}}{time_point<cl::chrono::CFAbsoluteTimeClock, std::__1::chrono::duration<long double, std::__1::ratio<1, 1> > >={duration<long double, std::__1::ratio<1, 1> >=D}}}{optional<CLWifiService_Type::AccessPoint>=(?=c{AccessPoint={CLMacAddress=Q}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}iiiddB})B}{optional<CLWifiAPLocation>=(?=c{CLWifiAPLocation={CLMacAddress=Q}dddddiiIdiidB{RuntimeMetadata=B}})B}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{ComputedLocation={CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}I}{CLWifiLocationUpdateRequest=iBdiB}i{time_point<cl::chrono::CFAbsoluteTimeClock, std::__1::chrono::duration<long double, std::__1::ratio<1, 1> > >={duration<long double, std::__1::ratio<1, 1> >=D}}{time_point<cl::chrono::CFAbsoluteTimeClock, std::__1::chrono::duration<long double, std::__1::ratio<1, 1> > >={duration<long double, std::__1::ratio<1, 1> >=D}}{time_point<cl::chrono::CFAbsoluteTimeClock, std::__1::chrono::duration<long double, std::__1::ratio<1, 1> > >={duration<long double, std::__1::ratio<1, 1> >=D}}{time_point<cl::chrono::CFAbsoluteTimeClock, std::__1::chrono::duration<long double, std::__1::ratio<1, 1> > >={duration<long double, std::__1::ratio<1, 1> >=D}}i{duration<long double, std::__1::ratio<1, 1> >=D}{Emergency=iBdddddddB}{ScanBuffer={vector<std::__1::vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >, std::__1::allocator<std::__1::vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> > > >=^{vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >}^{vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >}{__compressed_pair<std::__1::vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> > *, std::__1::allocator<std::__1::vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> > > >=^{vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >}}}{unordered_set<CLMacAddress, std::__1::hash<CLMacAddress>, std::__1::equal_to<CLMacAddress>, std::__1::allocator<CLMacAddress> >={__hash_table<CLMacAddress, std::__1::hash<CLMacAddress>, std::__1::equal_to<CLMacAddress>, std::__1::allocator<CLMacAddress> >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<CLMacAddress, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CLMacAddress, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<CLMacAddress, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CLMacAddress, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<CLMacAddress, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CLMacAddress, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CLMacAddress, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<CLMacAddress, void *> *>, std::__1::allocator<std::__1::__hash_node<CLMacAddress, void *> > >={__hash_node_base<std::__1::__hash_node<CLMacAddress, void *> *>=^{__hash_node_base<std::__1::__hash_node<CLMacAddress, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<CLMacAddress> >=Q}{__compressed_pair<float, std::__1::equal_to<CLMacAddress> >=f}}}i{optional<std::__1::chrono::time_point<cl::chrono::CFAbsoluteTimeClock, std::__1::chrono::duration<long double, std::__1::ratio<1, 1> > > >=(?=c{time_point<cl::chrono::CFAbsoluteTimeClock, std::__1::chrono::duration<long double, std::__1::ratio<1, 1> > >={duration<long double, std::__1::ratio<1, 1> >=D}})B}}iif{time_point<cl::chrono::CFAbsoluteTimeClock, std::__1::chrono::duration<long double, std::__1::ratio<1, 1> > >={duration<long double, std::__1::ratio<1, 1> >=D}}{time_point<cl::chrono::CFAbsoluteTimeClock, std::__1::chrono::duration<long double, std::__1::ratio<1, 1> > >={duration<long double, std::__1::ratio<1, 1> >=D}}{Clients=BBBB}BBBBBB}}>16
v32@0:8@?<v@?^{CLWifiLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBBBB{shared_ptr<CLWifiLocationProvider::IExternal>=^{IExternal}^{__shared_weak_count}}^{__CFRunLoopTimer}{CLWifiPositioningSystemLogic={shared_ptr<CL::WifiPositioning::IPlatformInfo>=^{IPlatformInfo}^{__shared_weak_count}}{Logic={shared_ptr<CLICachedLookupWifiAccessPointLocationService>=^{CLICachedLookupWifiAccessPointLocationService}^{__shared_weak_count}}}}{SystemState={WifiScanHistory={unordered_set<CLWifiService_Type::AccessPoint, CLWifiService_Type::AccessPointHash, CLWifiService_Type::AccessPointEquality, std::__1::allocator<CLWifiService_Type::AccessPoint> >={__hash_table<CLWifiService_Type::AccessPoint, CLWifiService_Type::AccessPointHash, CLWifiService_Type::AccessPointEquality, std::__1::allocator<CLWifiService_Type::AccessPoint> >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> *>, std::__1::allocator<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> > >={__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> *>=^{__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> *>}}}{__compressed_pair<unsigned long, CLWifiService_Type::AccessPointHash>=Q}{__compressed_pair<float, CLWifiService_Type::AccessPointEquality>=f}}}}{WifiScan={unordered_set<CLWifiService_Type::AccessPoint, CLWifiService_Type::AccessPointHash, CLWifiService_Type::AccessPointEquality, std::__1::allocator<CLWifiService_Type::AccessPoint> >={__hash_table<CLWifiService_Type::AccessPoint, CLWifiService_Type::AccessPointHash, CLWifiService_Type::AccessPointEquality, std::__1::allocator<CLWifiService_Type::AccessPoint> >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> *>, std::__1::allocator<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> > >={__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> *>=^{__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> *>}}}{__compressed_pair<unsigned long, CLWifiService_Type::AccessPointHash>=Q}{__compressed_pair<float, CLWifiService_Type::AccessPointEquality>=f}}}{time_point<cl::chrono::CFAbsoluteTimeClock, std::__1::chrono::duration<long double, std::__1::ratio<1, 1> > >={duration<long double, std::__1::ratio<1, 1> >=D}}}{optional<CLWifiService_Type::AccessPoint>=(?=c{AccessPoint={CLMacAddress=Q}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}iiiddB})B}{optional<CLWifiAPLocation>=(?=c{CLWifiAPLocation={CLMacAddress=Q}dddddiiIdiidB{RuntimeMetadata=B}})B}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{ComputedLocation={CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}I}{CLWifiLocationUpdateRequest=iBdiB}i{time_point<cl::chrono::CFAbsoluteTimeClock, std::__1::chrono::duration<long double, std::__1::ratio<1, 1> > >={duration<long double, std::__1::ratio<1, 1> >=D}}{time_point<cl::chrono::CFAbsoluteTimeClock, std::__1::chrono::duration<long double, std::__1::ratio<1, 1> > >={duration<long double, std::__1::ratio<1, 1> >=D}}{time_point<cl::chrono::CFAbsoluteTimeClock, std::__1::chrono::duration<long double, std::__1::ratio<1, 1> > >={duration<long double, std::__1::ratio<1, 1> >=D}}{time_point<cl::chrono::CFAbsoluteTimeClock, std::__1::chrono::duration<long double, std::__1::ratio<1, 1> > >={duration<long double, std::__1::ratio<1, 1> >=D}}i{duration<long double, std::__1::ratio<1, 1> >=D}{Emergency=iBdddddddB}{ScanBuffer={vector<std::__1::vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >, std::__1::allocator<std::__1::vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> > > >=^{vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >}^{vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >}{__compressed_pair<std::__1::vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> > *, std::__1::allocator<std::__1::vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> > > >=^{vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >}}}{unordered_set<CLMacAddress, std::__1::hash<CLMacAddress>, std::__1::equal_to<CLMacAddress>, std::__1::allocator<CLMacAddress> >={__hash_table<CLMacAddress, std::__1::hash<CLMacAddress>, std::__1::equal_to<CLMacAddress>, std::__1::allocator<CLMacAddress> >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<CLMacAddress, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CLMacAddress, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<CLMacAddress, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CLMacAddress, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<CLMacAddress, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CLMacAddress, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CLMacAddress, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<CLMacAddress, void *> *>, std::__1::allocator<std::__1::__hash_node<CLMacAddress, void *> > >={__hash_node_base<std::__1::__hash_node<CLMacAddress, void *> *>=^{__hash_node_base<std::__1::__hash_node<CLMacAddress, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<CLMacAddress> >=Q}{__compressed_pair<float, std::__1::equal_to<CLMacAddress> >=f}}}i{optional<std::__1::chrono::time_point<cl::chrono::CFAbsoluteTimeClock, std::__1::chrono::duration<long double, std::__1::ratio<1, 1> > > >=(?=c{time_point<cl::chrono::CFAbsoluteTimeClock, std::__1::chrono::duration<long double, std::__1::ratio<1, 1> > >={duration<long double, std::__1::ratio<1, 1> >=D}})B}}iif{time_point<cl::chrono::CFAbsoluteTimeClock, std::__1::chrono::duration<long double, std::__1::ratio<1, 1> > >={duration<long double, std::__1::ratio<1, 1> >=D}}{time_point<cl::chrono::CFAbsoluteTimeClock, std::__1::chrono::duration<long double, std::__1::ratio<1, 1> > >={duration<long double, std::__1::ratio<1, 1> >=D}}{Clients=BBBB}BBBBBB}}>16@?<v@?>24
B24@0:8@?<v@?^{CLWifiLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBBBB{shared_ptr<CLWifiLocationProvider::IExternal>=^{IExternal}^{__shared_weak_count}}^{__CFRunLoopTimer}{CLWifiPositioningSystemLogic={shared_ptr<CL::WifiPositioning::IPlatformInfo>=^{IPlatformInfo}^{__shared_weak_count}}{Logic={shared_ptr<CLICachedLookupWifiAccessPointLocationService>=^{CLICachedLookupWifiAccessPointLocationService}^{__shared_weak_count}}}}{SystemState={WifiScanHistory={unordered_set<CLWifiService_Type::AccessPoint, CLWifiService_Type::AccessPointHash, CLWifiService_Type::AccessPointEquality, std::__1::allocator<CLWifiService_Type::AccessPoint> >={__hash_table<CLWifiService_Type::AccessPoint, CLWifiService_Type::AccessPointHash, CLWifiService_Type::AccessPointEquality, std::__1::allocator<CLWifiService_Type::AccessPoint> >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> *>, std::__1::allocator<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> > >={__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> *>=^{__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> *>}}}{__compressed_pair<unsigned long, CLWifiService_Type::AccessPointHash>=Q}{__compressed_pair<float, CLWifiService_Type::AccessPointEquality>=f}}}}{WifiScan={unordered_set<CLWifiService_Type::AccessPoint, CLWifiService_Type::AccessPointHash, CLWifiService_Type::AccessPointEquality, std::__1::allocator<CLWifiService_Type::AccessPoint> >={__hash_table<CLWifiService_Type::AccessPoint, CLWifiService_Type::AccessPointHash, CLWifiService_Type::AccessPointEquality, std::__1::allocator<CLWifiService_Type::AccessPoint> >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> *>, std::__1::allocator<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> > >={__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> *>=^{__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> *>}}}{__compressed_pair<unsigned long, CLWifiService_Type::AccessPointHash>=Q}{__compressed_pair<float, CLWifiService_Type::AccessPointEquality>=f}}}{time_point<cl::chrono::CFAbsoluteTimeClock, std::__1::chrono::duration<long double, std::__1::ratio<1, 1> > >={duration<long double, std::__1::ratio<1, 1> >=D}}}{optional<CLWifiService_Type::AccessPoint>=(?=c{AccessPoint={CLMacAddress=Q}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}iiiddB})B}{optional<CLWifiAPLocation>=(?=c{CLWifiAPLocation={CLMacAddress=Q}dddddiiIdiidB{RuntimeMetadata=B}})B}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{ComputedLocation={CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}I}{CLWifiLocationUpdateRequest=iBdiB}i{time_point<cl::chrono::CFAbsoluteTimeClock, std::__1::chrono::duration<long double, std::__1::ratio<1, 1> > >={duration<long double, std::__1::ratio<1, 1> >=D}}{time_point<cl::chrono::CFAbsoluteTimeClock, std::__1::chrono::duration<long double, std::__1::ratio<1, 1> > >={duration<long double, std::__1::ratio<1, 1> >=D}}{time_point<cl::chrono::CFAbsoluteTimeClock, std::__1::chrono::duration<long double, std::__1::ratio<1, 1> > >={duration<long double, std::__1::ratio<1, 1> >=D}}{time_point<cl::chrono::CFAbsoluteTimeClock, std::__1::chrono::duration<long double, std::__1::ratio<1, 1> > >={duration<long double, std::__1::ratio<1, 1> >=D}}i{duration<long double, std::__1::ratio<1, 1> >=D}{Emergency=iBdddddddB}{ScanBuffer={vector<std::__1::vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >, std::__1::allocator<std::__1::vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> > > >=^{vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >}^{vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >}{__compressed_pair<std::__1::vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> > *, std::__1::allocator<std::__1::vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> > > >=^{vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >}}}{unordered_set<CLMacAddress, std::__1::hash<CLMacAddress>, std::__1::equal_to<CLMacAddress>, std::__1::allocator<CLMacAddress> >={__hash_table<CLMacAddress, std::__1::hash<CLMacAddress>, std::__1::equal_to<CLMacAddress>, std::__1::allocator<CLMacAddress> >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<CLMacAddress, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CLMacAddress, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<CLMacAddress, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CLMacAddress, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<CLMacAddress, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CLMacAddress, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CLMacAddress, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<CLMacAddress, void *> *>, std::__1::allocator<std::__1::__hash_node<CLMacAddress, void *> > >={__hash_node_base<std::__1::__hash_node<CLMacAddress, void *> *>=^{__hash_node_base<std::__1::__hash_node<CLMacAddress, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<CLMacAddress> >=Q}{__compressed_pair<float, std::__1::equal_to<CLMacAddress> >=f}}}i{optional<std::__1::chrono::time_point<cl::chrono::CFAbsoluteTimeClock, std::__1::chrono::duration<long double, std::__1::ratio<1, 1> > > >=(?=c{time_point<cl::chrono::CFAbsoluteTimeClock, std::__1::chrono::duration<long double, std::__1::ratio<1, 1> > >={duration<long double, std::__1::ratio<1, 1> >=D}})B}}iif{time_point<cl::chrono::CFAbsoluteTimeClock, std::__1::chrono::duration<long double, std::__1::ratio<1, 1> > >={duration<long double, std::__1::ratio<1, 1> >=D}}{time_point<cl::chrono::CFAbsoluteTimeClock, std::__1::chrono::duration<long double, std::__1::ratio<1, 1> > >={duration<long double, std::__1::ratio<1, 1> >=D}}{Clients=BBBB}BBBBBB}}>16
^{CLWifiLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBBBB{shared_ptr<CLWifiLocationProvider::IExternal>=^{IExternal}^{__shared_weak_count}}^{__CFRunLoopTimer}{CLWifiPositioningSystemLogic={shared_ptr<CL::WifiPositioning::IPlatformInfo>=^{IPlatformInfo}^{__shared_weak_count}}{Logic={shared_ptr<CLICachedLookupWifiAccessPointLocationService>=^{CLICachedLookupWifiAccessPointLocationService}^{__shared_weak_count}}}}{SystemState={WifiScanHistory={unordered_set<CLWifiService_Type::AccessPoint, CLWifiService_Type::AccessPointHash, CLWifiService_Type::AccessPointEquality, std::__1::allocator<CLWifiService_Type::AccessPoint> >={__hash_table<CLWifiService_Type::AccessPoint, CLWifiService_Type::AccessPointHash, CLWifiService_Type::AccessPointEquality, std::__1::allocator<CLWifiService_Type::AccessPoint> >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> *>, std::__1::allocator<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> > >={__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> *>=^{__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> *>}}}{__compressed_pair<unsigned long, CLWifiService_Type::AccessPointHash>=Q}{__compressed_pair<float, CLWifiService_Type::AccessPointEquality>=f}}}}{WifiScan={unordered_set<CLWifiService_Type::AccessPoint, CLWifiService_Type::AccessPointHash, CLWifiService_Type::AccessPointEquality, std::__1::allocator<CLWifiService_Type::AccessPoint> >={__hash_table<CLWifiService_Type::AccessPoint, CLWifiService_Type::AccessPointHash, CLWifiService_Type::AccessPointEquality, std::__1::allocator<CLWifiService_Type::AccessPoint> >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> *>, std::__1::allocator<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> > >={__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> *>=^{__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *> *>}}}{__compressed_pair<unsigned long, CLWifiService_Type::AccessPointHash>=Q}{__compressed_pair<float, CLWifiService_Type::AccessPointEquality>=f}}}{time_point<cl::chrono::CFAbsoluteTimeClock, std::__1::chrono::duration<long double, std::__1::ratio<1, 1> > >={duration<long double, std::__1::ratio<1, 1> >=D}}}{optional<CLWifiService_Type::AccessPoint>=(?=c{AccessPoint={CLMacAddress=Q}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}iiiddB})B}{optional<CLWifiAPLocation>=(?=c{CLWifiAPLocation={CLMacAddress=Q}dddddiiIdiidB{RuntimeMetadata=B}})B}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{ComputedLocation={CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}I}{CLWifiLocationUpdateRequest=iBdiB}i{time_point<cl::chrono::CFAbsoluteTimeClock, std::__1::chrono::duration<long double, std::__1::ratio<1, 1> > >={duration<long double, std::__1::ratio<1, 1> >=D}}{time_point<cl::chrono::CFAbsoluteTimeClock, std::__1::chrono::duration<long double, std::__1::ratio<1, 1> > >={duration<long double, std::__1::ratio<1, 1> >=D}}{time_point<cl::chrono::CFAbsoluteTimeClock, std::__1::chrono::duration<long double, std::__1::ratio<1, 1> > >={duration<long double, std::__1::ratio<1, 1> >=D}}{time_point<cl::chrono::CFAbsoluteTimeClock, std::__1::chrono::duration<long double, std::__1::ratio<1, 1> > >={duration<long double, std::__1::ratio<1, 1> >=D}}i{duration<long double, std::__1::ratio<1, 1> >=D}{Emergency=iBdddddddB}{ScanBuffer={vector<std::__1::vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >, std::__1::allocator<std::__1::vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> > > >=^{vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >}^{vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >}{__compressed_pair<std::__1::vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> > *, std::__1::allocator<std::__1::vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> > > >=^{vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >}}}{unordered_set<CLMacAddress, std::__1::hash<CLMacAddress>, std::__1::equal_to<CLMacAddress>, std::__1::allocator<CLMacAddress> >={__hash_table<CLMacAddress, std::__1::hash<CLMacAddress>, std::__1::equal_to<CLMacAddress>, std::__1::allocator<CLMacAddress> >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<CLMacAddress, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CLMacAddress, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<CLMacAddress, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CLMacAddress, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<CLMacAddress, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CLMacAddress, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CLMacAddress, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<CLMacAddress, void *> *>, std::__1::allocator<std::__1::__hash_node<CLMacAddress, void *> > >={__hash_node_base<std::__1::__hash_node<CLMacAddress, void *> *>=^{__hash_node_base<std::__1::__hash_node<CLMacAddress, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<CLMacAddress> >=Q}{__compressed_pair<float, std::__1::equal_to<CLMacAddress> >=f}}}i{optional<std::__1::chrono::time_point<cl::chrono::CFAbsoluteTimeClock, std::__1::chrono::duration<long double, std::__1::ratio<1, 1> > > >=(?=c{time_point<cl::chrono::CFAbsoluteTimeClock, std::__1::chrono::duration<long double, std::__1::ratio<1, 1> > >={duration<long double, std::__1::ratio<1, 1> >=D}})B}}iif{time_point<cl::chrono::CFAbsoluteTimeClock, std::__1::chrono::duration<long double, std::__1::ratio<1, 1> > >={duration<long double, std::__1::ratio<1, 1> >=D}}{time_point<cl::chrono::CFAbsoluteTimeClock, std::__1::chrono::duration<long double, std::__1::ratio<1, 1> > >={duration<long double, std::__1::ratio<1, 1> >=D}}{Clients=BBBB}BBBBBB}}16@0:8
v32@0:8R@16q24
v24@0:8@?<v@?^{CLMotionStateMediator=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBB{CLCalorieActivityFilter={CLMotionActivity=iiiiBfdBiddii{?=b1b1b1b1b1}}{CLMotionActivity=iiiiBfdBiddii{?=b1b1b1b1b1}}{list<CLMotionActivity, std::__1::allocator<CLMotionActivity> >={__list_node_base<CLMotionActivity, void *>=^{__list_node_base<CLMotionActivity, void *>}^{__list_node_base<CLMotionActivity, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLMotionActivity, void *> > >=Q}}}B{CLWorkoutManager={WorkoutSettings=[16C]q(WorkoutAttrib={SwimAttrib=qd})}q}@{CLBodyMetrics=iffffffffif}{CLMotionDefaultsWrite<int>=Bi}^{Dispatcher}^{Dispatcher}^{Dispatcher}@{unique_ptr<CLNatalimetryNotifier_Type::Client, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >={__compressed_pair<CLNatalimetryNotifier_Type::Client *, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >=^{Client}}}}>16
v32@0:8@?<v@?^{CLMotionStateMediator=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBB{CLCalorieActivityFilter={CLMotionActivity=iiiiBfdBiddii{?=b1b1b1b1b1}}{CLMotionActivity=iiiiBfdBiddii{?=b1b1b1b1b1}}{list<CLMotionActivity, std::__1::allocator<CLMotionActivity> >={__list_node_base<CLMotionActivity, void *>=^{__list_node_base<CLMotionActivity, void *>}^{__list_node_base<CLMotionActivity, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLMotionActivity, void *> > >=Q}}}B{CLWorkoutManager={WorkoutSettings=[16C]q(WorkoutAttrib={SwimAttrib=qd})}q}@{CLBodyMetrics=iffffffffif}{CLMotionDefaultsWrite<int>=Bi}^{Dispatcher}^{Dispatcher}^{Dispatcher}@{unique_ptr<CLNatalimetryNotifier_Type::Client, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >={__compressed_pair<CLNatalimetryNotifier_Type::Client *, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >=^{Client}}}}>16@?<v@?>24
B24@0:8@?<v@?^{CLMotionStateMediator=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBB{CLCalorieActivityFilter={CLMotionActivity=iiiiBfdBiddii{?=b1b1b1b1b1}}{CLMotionActivity=iiiiBfdBiddii{?=b1b1b1b1b1}}{list<CLMotionActivity, std::__1::allocator<CLMotionActivity> >={__list_node_base<CLMotionActivity, void *>=^{__list_node_base<CLMotionActivity, void *>}^{__list_node_base<CLMotionActivity, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLMotionActivity, void *> > >=Q}}}B{CLWorkoutManager={WorkoutSettings=[16C]q(WorkoutAttrib={SwimAttrib=qd})}q}@{CLBodyMetrics=iffffffffif}{CLMotionDefaultsWrite<int>=Bi}^{Dispatcher}^{Dispatcher}^{Dispatcher}@{unique_ptr<CLNatalimetryNotifier_Type::Client, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >={__compressed_pair<CLNatalimetryNotifier_Type::Client *, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >=^{Client}}}}>16
v32@0:8R@"<CLMotionStateMediatorClientProtocol>"16q24
^{CLMotionStateMediator=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBB{CLCalorieActivityFilter={CLMotionActivity=iiiiBfdBiddii{?=b1b1b1b1b1}}{CLMotionActivity=iiiiBfdBiddii{?=b1b1b1b1b1}}{list<CLMotionActivity, std::__1::allocator<CLMotionActivity> >={__list_node_base<CLMotionActivity, void *>=^{__list_node_base<CLMotionActivity, void *>}^{__list_node_base<CLMotionActivity, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLMotionActivity, void *> > >=Q}}}B{CLWorkoutManager={WorkoutSettings=[16C]q(WorkoutAttrib={SwimAttrib=qd})}q}@{CLBodyMetrics=iffffffffif}{CLMotionDefaultsWrite<int>=Bi}^{Dispatcher}^{Dispatcher}^{Dispatcher}@{unique_ptr<CLNatalimetryNotifier_Type::Client, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >={__compressed_pair<CLNatalimetryNotifier_Type::Client *, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >=^{Client}}}}16@0:8
^{CLLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBBBB}16@0:8
v24@0:8@?<v@?^{CLNmeaLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBBBB^^?^{CLDataSource}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocationPrivate=dddddfffBi{?=dd}diiB{?=dd}if{?=dd}ddiBddddddB}ddd}>16
v32@0:8@?<v@?^{CLNmeaLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBBBB^^?^{CLDataSource}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocationPrivate=dddddfffBi{?=dd}diiB{?=dd}if{?=dd}ddiBddddddB}ddd}>16@?<v@?>24
B24@0:8@?<v@?^{CLNmeaLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBBBB^^?^{CLDataSource}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocationPrivate=dddddfffBi{?=dd}diiB{?=dd}if{?=dd}ddiBddddddB}ddd}>16
^{CLNmeaLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBBBB^^?^{CLDataSource}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocationPrivate=dddddfffBi{?=dd}diiB{?=dd}if{?=dd}ddiBddddddB}ddd}16@0:8
B32@0:8^{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}16^{Cell=iiiiiiii}24
B32@0:8^{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}16^{ScdmaCell=iiiiiiii}24
B32@0:8^{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}16^{CdmaCell=i{vector<int, std::__1::allocator<int> >=^i^i{__compressed_pair<int *, std::__1::allocator<int> >=^i}}iiiiiiiii{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}iii{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}ii}24
B32@0:8^{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}16^{LteCell=iiiiiiiddii}24
B32@0:8^{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}16^{CLCell=Bii{Cell=iiiiiiii}{ScdmaCell=iiiiiiii}{CdmaCell=i{vector<int, std::__1::allocator<int> >=^i^i{__compressed_pair<int *, std::__1::allocator<int> >=^i}}iiiiiiiii{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}iii{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}ii}{LteCell=iiiiiiiddii}}24
v208@0:8{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}16{Cell=iiiiiiii}176
v208@0:8{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}16{ScdmaCell=iiiiiiii}176
v608@0:8{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}16{CdmaCell=i{vector<int, std::__1::allocator<int> >=^i^i{__compressed_pair<int *, std::__1::allocator<int> >=^i}}iiiiiiiii{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}iii{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}ii}176
v232@0:8{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}16{LteCell=iiiiiiiddii}176
B24@0:8^{LocationNetworkQueries={Metric=Bd{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}iiiiiiiiiiii}16
i24@0:8r^{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}16
v24@0:8^{CLNetworkLocationServerResponseListener=^^?}16
i32@0:8^{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}16r^{CLCell=Bii{Cell=iiiiiiii}{ScdmaCell=iiiiiiii}{CdmaCell=i{vector<int, std::__1::allocator<int> >=^i^i{__compressed_pair<int *, std::__1::allocator<int> >=^i}}iiiiiiiii{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}iii{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}ii}{LteCell=iiiiiiiddii}}24
i68@0:8r^{vector<CLTelephonyService_Type::Cell, std::__1::allocator<CLTelephonyService_Type::Cell> >=^{Cell}^{Cell}{__compressed_pair<CLTelephonyService_Type::Cell *, std::__1::allocator<CLTelephonyService_Type::Cell> >=^{Cell}}}16r^{vector<CLTelephonyService_Type::ScdmaCell, std::__1::allocator<CLTelephonyService_Type::ScdmaCell> >=^{ScdmaCell}^{ScdmaCell}{__compressed_pair<CLTelephonyService_Type::ScdmaCell *, std::__1::allocator<CLTelephonyService_Type::ScdmaCell> >=^{ScdmaCell}}}24r^{vector<CLTelephonyService_Type::CdmaCell, std::__1::allocator<CLTelephonyService_Type::CdmaCell> >=^{CdmaCell}^{CdmaCell}{__compressed_pair<CLTelephonyService_Type::CdmaCell *, std::__1::allocator<CLTelephonyService_Type::CdmaCell> >=^{CdmaCell}}}32r^{vector<CLTelephonyService_Type::LteCell, std::__1::allocator<CLTelephonyService_Type::LteCell> >=^{LteCell}^{LteCell}{__compressed_pair<CLTelephonyService_Type::LteCell *, std::__1::allocator<CLTelephonyService_Type::LteCell> >=^{LteCell}}}40r^{vector<CLMacAddress, std::__1::allocator<CLMacAddress> >=^{CLMacAddress}^{CLMacAddress}{__compressed_pair<CLMacAddress *, std::__1::allocator<CLMacAddress> >=^{CLMacAddress}}}48B56B60B64
i36@0:8r^{vector<CLCell, std::__1::allocator<CLCell> >=^{CLCell}^{CLCell}{__compressed_pair<CLCell *, std::__1::allocator<CLCell> >=^{CLCell}}}16r^{vector<CLMacAddress, std::__1::allocator<CLMacAddress> >=^{CLMacAddress}^{CLMacAddress}{__compressed_pair<CLMacAddress *, std::__1::allocator<CLMacAddress> >=^{CLMacAddress}}}24B32
v24@0:8@?<v@?^{CLNetworkLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{unique_ptr<CLINetworkLocationProviderExternal, std::__1::default_delete<CLINetworkLocationProviderExternal> >={__compressed_pair<CLINetworkLocationProviderExternal *, std::__1::default_delete<CLINetworkLocationProviderExternal> >=^{CLINetworkLocationProviderExternal}}}B{unique_ptr<CLCellEncryptedLocationDatabase, std::__1::default_delete<CLCellEncryptedLocationDatabase> >={__compressed_pair<CLCellEncryptedLocationDatabase *, std::__1::default_delete<CLCellEncryptedLocationDatabase> >=^{CLCellEncryptedLocationDatabase}}}{unique_ptr<CLCellEncryptedLocationDatabase, std::__1::default_delete<CLCellEncryptedLocationDatabase> >={__compressed_pair<CLCellEncryptedLocationDatabase *, std::__1::default_delete<CLCellEncryptedLocationDatabase> >=^{CLCellEncryptedLocationDatabase}}}{map<CLTelephonyService_Type::Cell, double, std::__1::less<CLTelephonyService_Type::Cell>, std::__1::allocator<std::__1::pair<const CLTelephonyService_Type::Cell, double> > >={__tree<std::__1::__value_type<CLTelephonyService_Type::Cell, double>, std::__1::__map_value_compare<CLTelephonyService_Type::Cell, std::__1::__value_type<CLTelephonyService_Type::Cell, double>, std::__1::less<CLTelephonyService_Type::Cell>, true>, std::__1::allocator<std::__1::__value_type<CLTelephonyService_Type::Cell, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLTelephonyService_Type::Cell, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLTelephonyService_Type::Cell, std::__1::__value_type<CLTelephonyService_Type::Cell, double>, std::__1::less<CLTelephonyService_Type::Cell>, true> >=Q}}}{unique_ptr<CLCellEncryptedLocationDatabase, std::__1::default_delete<CLCellEncryptedLocationDatabase> >={__compressed_pair<CLCellEncryptedLocationDatabase *, std::__1::default_delete<CLCellEncryptedLocationDatabase> >=^{CLCellEncryptedLocationDatabase}}}{unique_ptr<CLCellEncryptedLocationDatabase, std::__1::default_delete<CLCellEncryptedLocationDatabase> >={__compressed_pair<CLCellEncryptedLocationDatabase *, std::__1::default_delete<CLCellEncryptedLocationDatabase> >=^{CLCellEncryptedLocationDatabase}}}{map<CLTelephonyService_Type::ScdmaCell, double, std::__1::less<CLTelephonyService_Type::ScdmaCell>, std::__1::allocator<std::__1::pair<const CLTelephonyService_Type::ScdmaCell, double> > >={__tree<std::__1::__value_type<CLTelephonyService_Type::ScdmaCell, double>, std::__1::__map_value_compare<CLTelephonyService_Type::ScdmaCell, std::__1::__value_type<CLTelephonyService_Type::ScdmaCell, double>, std::__1::less<CLTelephonyService_Type::ScdmaCell>, true>, std::__1::allocator<std::__1::__value_type<CLTelephonyService_Type::ScdmaCell, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLTelephonyService_Type::ScdmaCell, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLTelephonyService_Type::ScdmaCell, std::__1::__value_type<CLTelephonyService_Type::ScdmaCell, double>, std::__1::less<CLTelephonyService_Type::ScdmaCell>, true> >=Q}}}{unique_ptr<CLCdmaCellEncryptedLocationDatabase, std::__1::default_delete<CLCdmaCellEncryptedLocationDatabase> >={__compressed_pair<CLCdmaCellEncryptedLocationDatabase *, std::__1::default_delete<CLCdmaCellEncryptedLocationDatabase> >=^{CLCdmaCellEncryptedLocationDatabase}}}{unique_ptr<CLCdmaCellEncryptedLocationDatabase, std::__1::default_delete<CLCdmaCellEncryptedLocationDatabase> >={__compressed_pair<CLCdmaCellEncryptedLocationDatabase *, std::__1::default_delete<CLCdmaCellEncryptedLocationDatabase> >=^{CLCdmaCellEncryptedLocationDatabase}}}{map<CLTelephonyService_Type::CdmaCell, double, std::__1::less<CLTelephonyService_Type::CdmaCell>, std::__1::allocator<std::__1::pair<const CLTelephonyService_Type::CdmaCell, double> > >={__tree<std::__1::__value_type<CLTelephonyService_Type::CdmaCell, double>, std::__1::__map_value_compare<CLTelephonyService_Type::CdmaCell, std::__1::__value_type<CLTelephonyService_Type::CdmaCell, double>, std::__1::less<CLTelephonyService_Type::CdmaCell>, true>, std::__1::allocator<std::__1::__value_type<CLTelephonyService_Type::CdmaCell, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLTelephonyService_Type::CdmaCell, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLTelephonyService_Type::CdmaCell, std::__1::__value_type<CLTelephonyService_Type::CdmaCell, double>, std::__1::less<CLTelephonyService_Type::CdmaCell>, true> >=Q}}}{unique_ptr<CLLteCellEncryptedLocationDatabase, std::__1::default_delete<CLLteCellEncryptedLocationDatabase> >={__compressed_pair<CLLteCellEncryptedLocationDatabase *, std::__1::default_delete<CLLteCellEncryptedLocationDatabase> >=^{CLLteCellEncryptedLocationDatabase}}}{unique_ptr<CLLteCellEncryptedLocationDatabase, std::__1::default_delete<CLLteCellEncryptedLocationDatabase> >={__compressed_pair<CLLteCellEncryptedLocationDatabase *, std::__1::default_delete<CLLteCellEncryptedLocationDatabase> >=^{CLLteCellEncryptedLocationDatabase}}}{map<CLTelephonyService_Type::LteCell, double, std::__1::less<CLTelephonyService_Type::LteCell>, std::__1::allocator<std::__1::pair<const CLTelephonyService_Type::LteCell, double> > >={__tree<std::__1::__value_type<CLTelephonyService_Type::LteCell, double>, std::__1::__map_value_compare<CLTelephonyService_Type::LteCell, std::__1::__value_type<CLTelephonyService_Type::LteCell, double>, std::__1::less<CLTelephonyService_Type::LteCell>, true>, std::__1::allocator<std::__1::__value_type<CLTelephonyService_Type::LteCell, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLTelephonyService_Type::LteCell, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLTelephonyService_Type::LteCell, std::__1::__value_type<CLTelephonyService_Type::LteCell, double>, std::__1::less<CLTelephonyService_Type::LteCell>, true> >=Q}}}idddii{map<CLMacAddress, double, std::__1::less<CLMacAddress>, std::__1::allocator<std::__1::pair<const CLMacAddress, double> > >={__tree<std::__1::__value_type<CLMacAddress, double>, std::__1::__map_value_compare<CLMacAddress, std::__1::__value_type<CLMacAddress, double>, std::__1::less<CLMacAddress>, true>, std::__1::allocator<std::__1::__value_type<CLMacAddress, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLMacAddress, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLMacAddress, std::__1::__value_type<CLMacAddress, double>, std::__1::less<CLMacAddress>, true> >=Q}}}B^{CLNetworkLocationRequester}BBBB{CLPowerAssertion=^^?i^v^{__CFString}dd@}^{__CFRunLoopTimer}iB^{CLPersistentTimer}dddiiiii{set<CLNetworkLocationServerResponseListener *, std::__1::less<CLNetworkLocationServerResponseListener *>, std::__1::allocator<CLNetworkLocationServerResponseListener *> >={__tree<CLNetworkLocationServerResponseListener *, std::__1::less<CLNetworkLocationServerResponseListener *>, std::__1::allocator<CLNetworkLocationServerResponseListener *> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<CLNetworkLocationServerResponseListener *, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<CLNetworkLocationServerResponseListener *> >=Q}}}i{CLDistanceCalc=ddddd}BB{shared_ptr<CLWifiAccessPointLocationService>=^{CLWifiAccessPointLocationService}^{__shared_weak_count}}}>16
v32@0:8@?<v@?^{CLNetworkLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{unique_ptr<CLINetworkLocationProviderExternal, std::__1::default_delete<CLINetworkLocationProviderExternal> >={__compressed_pair<CLINetworkLocationProviderExternal *, std::__1::default_delete<CLINetworkLocationProviderExternal> >=^{CLINetworkLocationProviderExternal}}}B{unique_ptr<CLCellEncryptedLocationDatabase, std::__1::default_delete<CLCellEncryptedLocationDatabase> >={__compressed_pair<CLCellEncryptedLocationDatabase *, std::__1::default_delete<CLCellEncryptedLocationDatabase> >=^{CLCellEncryptedLocationDatabase}}}{unique_ptr<CLCellEncryptedLocationDatabase, std::__1::default_delete<CLCellEncryptedLocationDatabase> >={__compressed_pair<CLCellEncryptedLocationDatabase *, std::__1::default_delete<CLCellEncryptedLocationDatabase> >=^{CLCellEncryptedLocationDatabase}}}{map<CLTelephonyService_Type::Cell, double, std::__1::less<CLTelephonyService_Type::Cell>, std::__1::allocator<std::__1::pair<const CLTelephonyService_Type::Cell, double> > >={__tree<std::__1::__value_type<CLTelephonyService_Type::Cell, double>, std::__1::__map_value_compare<CLTelephonyService_Type::Cell, std::__1::__value_type<CLTelephonyService_Type::Cell, double>, std::__1::less<CLTelephonyService_Type::Cell>, true>, std::__1::allocator<std::__1::__value_type<CLTelephonyService_Type::Cell, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLTelephonyService_Type::Cell, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLTelephonyService_Type::Cell, std::__1::__value_type<CLTelephonyService_Type::Cell, double>, std::__1::less<CLTelephonyService_Type::Cell>, true> >=Q}}}{unique_ptr<CLCellEncryptedLocationDatabase, std::__1::default_delete<CLCellEncryptedLocationDatabase> >={__compressed_pair<CLCellEncryptedLocationDatabase *, std::__1::default_delete<CLCellEncryptedLocationDatabase> >=^{CLCellEncryptedLocationDatabase}}}{unique_ptr<CLCellEncryptedLocationDatabase, std::__1::default_delete<CLCellEncryptedLocationDatabase> >={__compressed_pair<CLCellEncryptedLocationDatabase *, std::__1::default_delete<CLCellEncryptedLocationDatabase> >=^{CLCellEncryptedLocationDatabase}}}{map<CLTelephonyService_Type::ScdmaCell, double, std::__1::less<CLTelephonyService_Type::ScdmaCell>, std::__1::allocator<std::__1::pair<const CLTelephonyService_Type::ScdmaCell, double> > >={__tree<std::__1::__value_type<CLTelephonyService_Type::ScdmaCell, double>, std::__1::__map_value_compare<CLTelephonyService_Type::ScdmaCell, std::__1::__value_type<CLTelephonyService_Type::ScdmaCell, double>, std::__1::less<CLTelephonyService_Type::ScdmaCell>, true>, std::__1::allocator<std::__1::__value_type<CLTelephonyService_Type::ScdmaCell, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLTelephonyService_Type::ScdmaCell, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLTelephonyService_Type::ScdmaCell, std::__1::__value_type<CLTelephonyService_Type::ScdmaCell, double>, std::__1::less<CLTelephonyService_Type::ScdmaCell>, true> >=Q}}}{unique_ptr<CLCdmaCellEncryptedLocationDatabase, std::__1::default_delete<CLCdmaCellEncryptedLocationDatabase> >={__compressed_pair<CLCdmaCellEncryptedLocationDatabase *, std::__1::default_delete<CLCdmaCellEncryptedLocationDatabase> >=^{CLCdmaCellEncryptedLocationDatabase}}}{unique_ptr<CLCdmaCellEncryptedLocationDatabase, std::__1::default_delete<CLCdmaCellEncryptedLocationDatabase> >={__compressed_pair<CLCdmaCellEncryptedLocationDatabase *, std::__1::default_delete<CLCdmaCellEncryptedLocationDatabase> >=^{CLCdmaCellEncryptedLocationDatabase}}}{map<CLTelephonyService_Type::CdmaCell, double, std::__1::less<CLTelephonyService_Type::CdmaCell>, std::__1::allocator<std::__1::pair<const CLTelephonyService_Type::CdmaCell, double> > >={__tree<std::__1::__value_type<CLTelephonyService_Type::CdmaCell, double>, std::__1::__map_value_compare<CLTelephonyService_Type::CdmaCell, std::__1::__value_type<CLTelephonyService_Type::CdmaCell, double>, std::__1::less<CLTelephonyService_Type::CdmaCell>, true>, std::__1::allocator<std::__1::__value_type<CLTelephonyService_Type::CdmaCell, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLTelephonyService_Type::CdmaCell, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLTelephonyService_Type::CdmaCell, std::__1::__value_type<CLTelephonyService_Type::CdmaCell, double>, std::__1::less<CLTelephonyService_Type::CdmaCell>, true> >=Q}}}{unique_ptr<CLLteCellEncryptedLocationDatabase, std::__1::default_delete<CLLteCellEncryptedLocationDatabase> >={__compressed_pair<CLLteCellEncryptedLocationDatabase *, std::__1::default_delete<CLLteCellEncryptedLocationDatabase> >=^{CLLteCellEncryptedLocationDatabase}}}{unique_ptr<CLLteCellEncryptedLocationDatabase, std::__1::default_delete<CLLteCellEncryptedLocationDatabase> >={__compressed_pair<CLLteCellEncryptedLocationDatabase *, std::__1::default_delete<CLLteCellEncryptedLocationDatabase> >=^{CLLteCellEncryptedLocationDatabase}}}{map<CLTelephonyService_Type::LteCell, double, std::__1::less<CLTelephonyService_Type::LteCell>, std::__1::allocator<std::__1::pair<const CLTelephonyService_Type::LteCell, double> > >={__tree<std::__1::__value_type<CLTelephonyService_Type::LteCell, double>, std::__1::__map_value_compare<CLTelephonyService_Type::LteCell, std::__1::__value_type<CLTelephonyService_Type::LteCell, double>, std::__1::less<CLTelephonyService_Type::LteCell>, true>, std::__1::allocator<std::__1::__value_type<CLTelephonyService_Type::LteCell, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLTelephonyService_Type::LteCell, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLTelephonyService_Type::LteCell, std::__1::__value_type<CLTelephonyService_Type::LteCell, double>, std::__1::less<CLTelephonyService_Type::LteCell>, true> >=Q}}}idddii{map<CLMacAddress, double, std::__1::less<CLMacAddress>, std::__1::allocator<std::__1::pair<const CLMacAddress, double> > >={__tree<std::__1::__value_type<CLMacAddress, double>, std::__1::__map_value_compare<CLMacAddress, std::__1::__value_type<CLMacAddress, double>, std::__1::less<CLMacAddress>, true>, std::__1::allocator<std::__1::__value_type<CLMacAddress, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLMacAddress, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLMacAddress, std::__1::__value_type<CLMacAddress, double>, std::__1::less<CLMacAddress>, true> >=Q}}}B^{CLNetworkLocationRequester}BBBB{CLPowerAssertion=^^?i^v^{__CFString}dd@}^{__CFRunLoopTimer}iB^{CLPersistentTimer}dddiiiii{set<CLNetworkLocationServerResponseListener *, std::__1::less<CLNetworkLocationServerResponseListener *>, std::__1::allocator<CLNetworkLocationServerResponseListener *> >={__tree<CLNetworkLocationServerResponseListener *, std::__1::less<CLNetworkLocationServerResponseListener *>, std::__1::allocator<CLNetworkLocationServerResponseListener *> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<CLNetworkLocationServerResponseListener *, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<CLNetworkLocationServerResponseListener *> >=Q}}}i{CLDistanceCalc=ddddd}BB{shared_ptr<CLWifiAccessPointLocationService>=^{CLWifiAccessPointLocationService}^{__shared_weak_count}}}>16@?<v@?>24
B24@0:8@?<v@?^{CLNetworkLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{unique_ptr<CLINetworkLocationProviderExternal, std::__1::default_delete<CLINetworkLocationProviderExternal> >={__compressed_pair<CLINetworkLocationProviderExternal *, std::__1::default_delete<CLINetworkLocationProviderExternal> >=^{CLINetworkLocationProviderExternal}}}B{unique_ptr<CLCellEncryptedLocationDatabase, std::__1::default_delete<CLCellEncryptedLocationDatabase> >={__compressed_pair<CLCellEncryptedLocationDatabase *, std::__1::default_delete<CLCellEncryptedLocationDatabase> >=^{CLCellEncryptedLocationDatabase}}}{unique_ptr<CLCellEncryptedLocationDatabase, std::__1::default_delete<CLCellEncryptedLocationDatabase> >={__compressed_pair<CLCellEncryptedLocationDatabase *, std::__1::default_delete<CLCellEncryptedLocationDatabase> >=^{CLCellEncryptedLocationDatabase}}}{map<CLTelephonyService_Type::Cell, double, std::__1::less<CLTelephonyService_Type::Cell>, std::__1::allocator<std::__1::pair<const CLTelephonyService_Type::Cell, double> > >={__tree<std::__1::__value_type<CLTelephonyService_Type::Cell, double>, std::__1::__map_value_compare<CLTelephonyService_Type::Cell, std::__1::__value_type<CLTelephonyService_Type::Cell, double>, std::__1::less<CLTelephonyService_Type::Cell>, true>, std::__1::allocator<std::__1::__value_type<CLTelephonyService_Type::Cell, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLTelephonyService_Type::Cell, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLTelephonyService_Type::Cell, std::__1::__value_type<CLTelephonyService_Type::Cell, double>, std::__1::less<CLTelephonyService_Type::Cell>, true> >=Q}}}{unique_ptr<CLCellEncryptedLocationDatabase, std::__1::default_delete<CLCellEncryptedLocationDatabase> >={__compressed_pair<CLCellEncryptedLocationDatabase *, std::__1::default_delete<CLCellEncryptedLocationDatabase> >=^{CLCellEncryptedLocationDatabase}}}{unique_ptr<CLCellEncryptedLocationDatabase, std::__1::default_delete<CLCellEncryptedLocationDatabase> >={__compressed_pair<CLCellEncryptedLocationDatabase *, std::__1::default_delete<CLCellEncryptedLocationDatabase> >=^{CLCellEncryptedLocationDatabase}}}{map<CLTelephonyService_Type::ScdmaCell, double, std::__1::less<CLTelephonyService_Type::ScdmaCell>, std::__1::allocator<std::__1::pair<const CLTelephonyService_Type::ScdmaCell, double> > >={__tree<std::__1::__value_type<CLTelephonyService_Type::ScdmaCell, double>, std::__1::__map_value_compare<CLTelephonyService_Type::ScdmaCell, std::__1::__value_type<CLTelephonyService_Type::ScdmaCell, double>, std::__1::less<CLTelephonyService_Type::ScdmaCell>, true>, std::__1::allocator<std::__1::__value_type<CLTelephonyService_Type::ScdmaCell, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLTelephonyService_Type::ScdmaCell, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLTelephonyService_Type::ScdmaCell, std::__1::__value_type<CLTelephonyService_Type::ScdmaCell, double>, std::__1::less<CLTelephonyService_Type::ScdmaCell>, true> >=Q}}}{unique_ptr<CLCdmaCellEncryptedLocationDatabase, std::__1::default_delete<CLCdmaCellEncryptedLocationDatabase> >={__compressed_pair<CLCdmaCellEncryptedLocationDatabase *, std::__1::default_delete<CLCdmaCellEncryptedLocationDatabase> >=^{CLCdmaCellEncryptedLocationDatabase}}}{unique_ptr<CLCdmaCellEncryptedLocationDatabase, std::__1::default_delete<CLCdmaCellEncryptedLocationDatabase> >={__compressed_pair<CLCdmaCellEncryptedLocationDatabase *, std::__1::default_delete<CLCdmaCellEncryptedLocationDatabase> >=^{CLCdmaCellEncryptedLocationDatabase}}}{map<CLTelephonyService_Type::CdmaCell, double, std::__1::less<CLTelephonyService_Type::CdmaCell>, std::__1::allocator<std::__1::pair<const CLTelephonyService_Type::CdmaCell, double> > >={__tree<std::__1::__value_type<CLTelephonyService_Type::CdmaCell, double>, std::__1::__map_value_compare<CLTelephonyService_Type::CdmaCell, std::__1::__value_type<CLTelephonyService_Type::CdmaCell, double>, std::__1::less<CLTelephonyService_Type::CdmaCell>, true>, std::__1::allocator<std::__1::__value_type<CLTelephonyService_Type::CdmaCell, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLTelephonyService_Type::CdmaCell, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLTelephonyService_Type::CdmaCell, std::__1::__value_type<CLTelephonyService_Type::CdmaCell, double>, std::__1::less<CLTelephonyService_Type::CdmaCell>, true> >=Q}}}{unique_ptr<CLLteCellEncryptedLocationDatabase, std::__1::default_delete<CLLteCellEncryptedLocationDatabase> >={__compressed_pair<CLLteCellEncryptedLocationDatabase *, std::__1::default_delete<CLLteCellEncryptedLocationDatabase> >=^{CLLteCellEncryptedLocationDatabase}}}{unique_ptr<CLLteCellEncryptedLocationDatabase, std::__1::default_delete<CLLteCellEncryptedLocationDatabase> >={__compressed_pair<CLLteCellEncryptedLocationDatabase *, std::__1::default_delete<CLLteCellEncryptedLocationDatabase> >=^{CLLteCellEncryptedLocationDatabase}}}{map<CLTelephonyService_Type::LteCell, double, std::__1::less<CLTelephonyService_Type::LteCell>, std::__1::allocator<std::__1::pair<const CLTelephonyService_Type::LteCell, double> > >={__tree<std::__1::__value_type<CLTelephonyService_Type::LteCell, double>, std::__1::__map_value_compare<CLTelephonyService_Type::LteCell, std::__1::__value_type<CLTelephonyService_Type::LteCell, double>, std::__1::less<CLTelephonyService_Type::LteCell>, true>, std::__1::allocator<std::__1::__value_type<CLTelephonyService_Type::LteCell, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLTelephonyService_Type::LteCell, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLTelephonyService_Type::LteCell, std::__1::__value_type<CLTelephonyService_Type::LteCell, double>, std::__1::less<CLTelephonyService_Type::LteCell>, true> >=Q}}}idddii{map<CLMacAddress, double, std::__1::less<CLMacAddress>, std::__1::allocator<std::__1::pair<const CLMacAddress, double> > >={__tree<std::__1::__value_type<CLMacAddress, double>, std::__1::__map_value_compare<CLMacAddress, std::__1::__value_type<CLMacAddress, double>, std::__1::less<CLMacAddress>, true>, std::__1::allocator<std::__1::__value_type<CLMacAddress, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLMacAddress, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLMacAddress, std::__1::__value_type<CLMacAddress, double>, std::__1::less<CLMacAddress>, true> >=Q}}}B^{CLNetworkLocationRequester}BBBB{CLPowerAssertion=^^?i^v^{__CFString}dd@}^{__CFRunLoopTimer}iB^{CLPersistentTimer}dddiiiii{set<CLNetworkLocationServerResponseListener *, std::__1::less<CLNetworkLocationServerResponseListener *>, std::__1::allocator<CLNetworkLocationServerResponseListener *> >={__tree<CLNetworkLocationServerResponseListener *, std::__1::less<CLNetworkLocationServerResponseListener *>, std::__1::allocator<CLNetworkLocationServerResponseListener *> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<CLNetworkLocationServerResponseListener *, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<CLNetworkLocationServerResponseListener *> >=Q}}}i{CLDistanceCalc=ddddd}BB{shared_ptr<CLWifiAccessPointLocationService>=^{CLWifiAccessPointLocationService}^{__shared_weak_count}}}>16
^{CLNetworkLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{unique_ptr<CLINetworkLocationProviderExternal, std::__1::default_delete<CLINetworkLocationProviderExternal> >={__compressed_pair<CLINetworkLocationProviderExternal *, std::__1::default_delete<CLINetworkLocationProviderExternal> >=^{CLINetworkLocationProviderExternal}}}B{unique_ptr<CLCellEncryptedLocationDatabase, std::__1::default_delete<CLCellEncryptedLocationDatabase> >={__compressed_pair<CLCellEncryptedLocationDatabase *, std::__1::default_delete<CLCellEncryptedLocationDatabase> >=^{CLCellEncryptedLocationDatabase}}}{unique_ptr<CLCellEncryptedLocationDatabase, std::__1::default_delete<CLCellEncryptedLocationDatabase> >={__compressed_pair<CLCellEncryptedLocationDatabase *, std::__1::default_delete<CLCellEncryptedLocationDatabase> >=^{CLCellEncryptedLocationDatabase}}}{map<CLTelephonyService_Type::Cell, double, std::__1::less<CLTelephonyService_Type::Cell>, std::__1::allocator<std::__1::pair<const CLTelephonyService_Type::Cell, double> > >={__tree<std::__1::__value_type<CLTelephonyService_Type::Cell, double>, std::__1::__map_value_compare<CLTelephonyService_Type::Cell, std::__1::__value_type<CLTelephonyService_Type::Cell, double>, std::__1::less<CLTelephonyService_Type::Cell>, true>, std::__1::allocator<std::__1::__value_type<CLTelephonyService_Type::Cell, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLTelephonyService_Type::Cell, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLTelephonyService_Type::Cell, std::__1::__value_type<CLTelephonyService_Type::Cell, double>, std::__1::less<CLTelephonyService_Type::Cell>, true> >=Q}}}{unique_ptr<CLCellEncryptedLocationDatabase, std::__1::default_delete<CLCellEncryptedLocationDatabase> >={__compressed_pair<CLCellEncryptedLocationDatabase *, std::__1::default_delete<CLCellEncryptedLocationDatabase> >=^{CLCellEncryptedLocationDatabase}}}{unique_ptr<CLCellEncryptedLocationDatabase, std::__1::default_delete<CLCellEncryptedLocationDatabase> >={__compressed_pair<CLCellEncryptedLocationDatabase *, std::__1::default_delete<CLCellEncryptedLocationDatabase> >=^{CLCellEncryptedLocationDatabase}}}{map<CLTelephonyService_Type::ScdmaCell, double, std::__1::less<CLTelephonyService_Type::ScdmaCell>, std::__1::allocator<std::__1::pair<const CLTelephonyService_Type::ScdmaCell, double> > >={__tree<std::__1::__value_type<CLTelephonyService_Type::ScdmaCell, double>, std::__1::__map_value_compare<CLTelephonyService_Type::ScdmaCell, std::__1::__value_type<CLTelephonyService_Type::ScdmaCell, double>, std::__1::less<CLTelephonyService_Type::ScdmaCell>, true>, std::__1::allocator<std::__1::__value_type<CLTelephonyService_Type::ScdmaCell, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLTelephonyService_Type::ScdmaCell, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLTelephonyService_Type::ScdmaCell, std::__1::__value_type<CLTelephonyService_Type::ScdmaCell, double>, std::__1::less<CLTelephonyService_Type::ScdmaCell>, true> >=Q}}}{unique_ptr<CLCdmaCellEncryptedLocationDatabase, std::__1::default_delete<CLCdmaCellEncryptedLocationDatabase> >={__compressed_pair<CLCdmaCellEncryptedLocationDatabase *, std::__1::default_delete<CLCdmaCellEncryptedLocationDatabase> >=^{CLCdmaCellEncryptedLocationDatabase}}}{unique_ptr<CLCdmaCellEncryptedLocationDatabase, std::__1::default_delete<CLCdmaCellEncryptedLocationDatabase> >={__compressed_pair<CLCdmaCellEncryptedLocationDatabase *, std::__1::default_delete<CLCdmaCellEncryptedLocationDatabase> >=^{CLCdmaCellEncryptedLocationDatabase}}}{map<CLTelephonyService_Type::CdmaCell, double, std::__1::less<CLTelephonyService_Type::CdmaCell>, std::__1::allocator<std::__1::pair<const CLTelephonyService_Type::CdmaCell, double> > >={__tree<std::__1::__value_type<CLTelephonyService_Type::CdmaCell, double>, std::__1::__map_value_compare<CLTelephonyService_Type::CdmaCell, std::__1::__value_type<CLTelephonyService_Type::CdmaCell, double>, std::__1::less<CLTelephonyService_Type::CdmaCell>, true>, std::__1::allocator<std::__1::__value_type<CLTelephonyService_Type::CdmaCell, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLTelephonyService_Type::CdmaCell, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLTelephonyService_Type::CdmaCell, std::__1::__value_type<CLTelephonyService_Type::CdmaCell, double>, std::__1::less<CLTelephonyService_Type::CdmaCell>, true> >=Q}}}{unique_ptr<CLLteCellEncryptedLocationDatabase, std::__1::default_delete<CLLteCellEncryptedLocationDatabase> >={__compressed_pair<CLLteCellEncryptedLocationDatabase *, std::__1::default_delete<CLLteCellEncryptedLocationDatabase> >=^{CLLteCellEncryptedLocationDatabase}}}{unique_ptr<CLLteCellEncryptedLocationDatabase, std::__1::default_delete<CLLteCellEncryptedLocationDatabase> >={__compressed_pair<CLLteCellEncryptedLocationDatabase *, std::__1::default_delete<CLLteCellEncryptedLocationDatabase> >=^{CLLteCellEncryptedLocationDatabase}}}{map<CLTelephonyService_Type::LteCell, double, std::__1::less<CLTelephonyService_Type::LteCell>, std::__1::allocator<std::__1::pair<const CLTelephonyService_Type::LteCell, double> > >={__tree<std::__1::__value_type<CLTelephonyService_Type::LteCell, double>, std::__1::__map_value_compare<CLTelephonyService_Type::LteCell, std::__1::__value_type<CLTelephonyService_Type::LteCell, double>, std::__1::less<CLTelephonyService_Type::LteCell>, true>, std::__1::allocator<std::__1::__value_type<CLTelephonyService_Type::LteCell, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLTelephonyService_Type::LteCell, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLTelephonyService_Type::LteCell, std::__1::__value_type<CLTelephonyService_Type::LteCell, double>, std::__1::less<CLTelephonyService_Type::LteCell>, true> >=Q}}}idddii{map<CLMacAddress, double, std::__1::less<CLMacAddress>, std::__1::allocator<std::__1::pair<const CLMacAddress, double> > >={__tree<std::__1::__value_type<CLMacAddress, double>, std::__1::__map_value_compare<CLMacAddress, std::__1::__value_type<CLMacAddress, double>, std::__1::less<CLMacAddress>, true>, std::__1::allocator<std::__1::__value_type<CLMacAddress, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLMacAddress, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLMacAddress, std::__1::__value_type<CLMacAddress, double>, std::__1::less<CLMacAddress>, true> >=Q}}}B^{CLNetworkLocationRequester}BBBB{CLPowerAssertion=^^?i^v^{__CFString}dd@}^{__CFRunLoopTimer}iB^{CLPersistentTimer}dddiiiii{set<CLNetworkLocationServerResponseListener *, std::__1::less<CLNetworkLocationServerResponseListener *>, std::__1::allocator<CLNetworkLocationServerResponseListener *> >={__tree<CLNetworkLocationServerResponseListener *, std::__1::less<CLNetworkLocationServerResponseListener *>, std::__1::allocator<CLNetworkLocationServerResponseListener *> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<CLNetworkLocationServerResponseListener *, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<CLNetworkLocationServerResponseListener *> >=Q}}}i{CLDistanceCalc=ddddd}BB{shared_ptr<CLWifiAccessPointLocationService>=^{CLWifiAccessPointLocationService}^{__shared_weak_count}}}16@0:8
v24@0:8@?<v@?^{CLAccessoryLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBBBB{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocationPrivate=dddddfffBi{?=dd}diiB{?=dd}if{?=dd}ddiBddddddB}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}^{__CFRunLoopTimer}{CLAccessoryHeadingCorrector=iddddd}{CLFileUpdate=^^?{BasicMutex=^^?^{MutexInfo}}@^?^v{unique_ptr<CLFileDownload, std::__1::default_delete<CLFileDownload> >={__compressed_pair<CLFileDownload *, std::__1::default_delete<CLFileDownload> >=^{CLFileDownload}}}@iddddddB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}B}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{CLNmeaScreener=BB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}dd{CLDistanceCalc=ddddd}{ExternalLocationData=dddddd}{ExternalLocationData=dddddd}{ExternalLocationData=dddddd}{ExternalLocationData=dddddd}}{unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client> >={__compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> >=^{Client}}}{unique_ptr<CLTimeManager_Type::Client, std::__1::default_delete<CLTimeManager_Type::Client> >={__compressed_pair<CLTimeManager_Type::Client *, std::__1::default_delete<CLTimeManager_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}@BBB{GgaRmcInfo=iB}dddiB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}BBBBB}>16
v32@0:8@?<v@?^{CLAccessoryLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBBBB{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocationPrivate=dddddfffBi{?=dd}diiB{?=dd}if{?=dd}ddiBddddddB}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}^{__CFRunLoopTimer}{CLAccessoryHeadingCorrector=iddddd}{CLFileUpdate=^^?{BasicMutex=^^?^{MutexInfo}}@^?^v{unique_ptr<CLFileDownload, std::__1::default_delete<CLFileDownload> >={__compressed_pair<CLFileDownload *, std::__1::default_delete<CLFileDownload> >=^{CLFileDownload}}}@iddddddB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}B}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{CLNmeaScreener=BB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}dd{CLDistanceCalc=ddddd}{ExternalLocationData=dddddd}{ExternalLocationData=dddddd}{ExternalLocationData=dddddd}{ExternalLocationData=dddddd}}{unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client> >={__compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> >=^{Client}}}{unique_ptr<CLTimeManager_Type::Client, std::__1::default_delete<CLTimeManager_Type::Client> >={__compressed_pair<CLTimeManager_Type::Client *, std::__1::default_delete<CLTimeManager_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}@BBB{GgaRmcInfo=iB}dddiB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}BBBBB}>16@?<v@?>24
B24@0:8@?<v@?^{CLAccessoryLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBBBB{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocationPrivate=dddddfffBi{?=dd}diiB{?=dd}if{?=dd}ddiBddddddB}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}^{__CFRunLoopTimer}{CLAccessoryHeadingCorrector=iddddd}{CLFileUpdate=^^?{BasicMutex=^^?^{MutexInfo}}@^?^v{unique_ptr<CLFileDownload, std::__1::default_delete<CLFileDownload> >={__compressed_pair<CLFileDownload *, std::__1::default_delete<CLFileDownload> >=^{CLFileDownload}}}@iddddddB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}B}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{CLNmeaScreener=BB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}dd{CLDistanceCalc=ddddd}{ExternalLocationData=dddddd}{ExternalLocationData=dddddd}{ExternalLocationData=dddddd}{ExternalLocationData=dddddd}}{unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client> >={__compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> >=^{Client}}}{unique_ptr<CLTimeManager_Type::Client, std::__1::default_delete<CLTimeManager_Type::Client> >={__compressed_pair<CLTimeManager_Type::Client *, std::__1::default_delete<CLTimeManager_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}@BBB{GgaRmcInfo=iB}dddiB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}BBBBB}>16
^{CLAccessoryLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBBBB{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocationPrivate=dddddfffBi{?=dd}diiB{?=dd}if{?=dd}ddiBddddddB}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}^{__CFRunLoopTimer}{CLAccessoryHeadingCorrector=iddddd}{CLFileUpdate=^^?{BasicMutex=^^?^{MutexInfo}}@^?^v{unique_ptr<CLFileDownload, std::__1::default_delete<CLFileDownload> >={__compressed_pair<CLFileDownload *, std::__1::default_delete<CLFileDownload> >=^{CLFileDownload}}}@iddddddB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}B}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{CLNmeaScreener=BB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}dd{CLDistanceCalc=ddddd}{ExternalLocationData=dddddd}{ExternalLocationData=dddddd}{ExternalLocationData=dddddd}{ExternalLocationData=dddddd}}{unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client> >={__compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> >=^{Client}}}{unique_ptr<CLTimeManager_Type::Client, std::__1::default_delete<CLTimeManager_Type::Client> >={__compressed_pair<CLTimeManager_Type::Client *, std::__1::default_delete<CLTimeManager_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}@BBB{GgaRmcInfo=iB}dddiB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}BBBBB}16@0:8
v24@0:8@?<v@?^{CLFilteredLocationController=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBBBB^^?{CLDistanceCalc=ddddd}{unique_ptr<CLStreamingAwareLocationProvider_Type::Client, std::__1::default_delete<CLStreamingAwareLocationProvider_Type::Client> >={__compressed_pair<CLStreamingAwareLocationProvider_Type::Client *, std::__1::default_delete<CLStreamingAwareLocationProvider_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{CLLastConfidentLocation={unique_ptr<CLCachedLocationController_Type::Client, std::__1::default_delete<CLCachedLocationController_Type::Client> >={__compressed_pair<CLCachedLocationController_Type::Client *, std::__1::default_delete<CLCachedLocationController_Type::Client> >=^{Client}}}@^{INotifier}B{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}I}^{__CFRunLoopTimer}dd{map<CLLocationProvider_Type::Notification, bool, std::__1::less<CLLocationProvider_Type::Notification>, std::__1::allocator<std::__1::pair<const CLLocationProvider_Type::Notification, bool> > >={__tree<std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, std::__1::__map_value_compare<CLLocationProvider_Type::Notification, std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, std::__1::less<CLLocationProvider_Type::Notification>, true>, std::__1::allocator<std::__1::__value_type<CLLocationProvider_Type::Notification, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLLocationProvider_Type::Notification, std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, std::__1::less<CLLocationProvider_Type::Notification>, true> >=Q}}}{map<int, CLDaemonLocation, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLDaemonLocation> > >={__tree<std::__1::__value_type<int, CLDaemonLocation>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLDaemonLocation>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLDaemonLocation> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLDaemonLocation>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLDaemonLocation>, std::__1::less<int>, true> >=Q}}}{?=d^{__CFDate}}}>16
v32@0:8@?<v@?^{CLFilteredLocationController=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBBBB^^?{CLDistanceCalc=ddddd}{unique_ptr<CLStreamingAwareLocationProvider_Type::Client, std::__1::default_delete<CLStreamingAwareLocationProvider_Type::Client> >={__compressed_pair<CLStreamingAwareLocationProvider_Type::Client *, std::__1::default_delete<CLStreamingAwareLocationProvider_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{CLLastConfidentLocation={unique_ptr<CLCachedLocationController_Type::Client, std::__1::default_delete<CLCachedLocationController_Type::Client> >={__compressed_pair<CLCachedLocationController_Type::Client *, std::__1::default_delete<CLCachedLocationController_Type::Client> >=^{Client}}}@^{INotifier}B{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}I}^{__CFRunLoopTimer}dd{map<CLLocationProvider_Type::Notification, bool, std::__1::less<CLLocationProvider_Type::Notification>, std::__1::allocator<std::__1::pair<const CLLocationProvider_Type::Notification, bool> > >={__tree<std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, std::__1::__map_value_compare<CLLocationProvider_Type::Notification, std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, std::__1::less<CLLocationProvider_Type::Notification>, true>, std::__1::allocator<std::__1::__value_type<CLLocationProvider_Type::Notification, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLLocationProvider_Type::Notification, std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, std::__1::less<CLLocationProvider_Type::Notification>, true> >=Q}}}{map<int, CLDaemonLocation, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLDaemonLocation> > >={__tree<std::__1::__value_type<int, CLDaemonLocation>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLDaemonLocation>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLDaemonLocation> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLDaemonLocation>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLDaemonLocation>, std::__1::less<int>, true> >=Q}}}{?=d^{__CFDate}}}>16@?<v@?>24
B24@0:8@?<v@?^{CLFilteredLocationController=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBBBB^^?{CLDistanceCalc=ddddd}{unique_ptr<CLStreamingAwareLocationProvider_Type::Client, std::__1::default_delete<CLStreamingAwareLocationProvider_Type::Client> >={__compressed_pair<CLStreamingAwareLocationProvider_Type::Client *, std::__1::default_delete<CLStreamingAwareLocationProvider_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{CLLastConfidentLocation={unique_ptr<CLCachedLocationController_Type::Client, std::__1::default_delete<CLCachedLocationController_Type::Client> >={__compressed_pair<CLCachedLocationController_Type::Client *, std::__1::default_delete<CLCachedLocationController_Type::Client> >=^{Client}}}@^{INotifier}B{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}I}^{__CFRunLoopTimer}dd{map<CLLocationProvider_Type::Notification, bool, std::__1::less<CLLocationProvider_Type::Notification>, std::__1::allocator<std::__1::pair<const CLLocationProvider_Type::Notification, bool> > >={__tree<std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, std::__1::__map_value_compare<CLLocationProvider_Type::Notification, std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, std::__1::less<CLLocationProvider_Type::Notification>, true>, std::__1::allocator<std::__1::__value_type<CLLocationProvider_Type::Notification, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLLocationProvider_Type::Notification, std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, std::__1::less<CLLocationProvider_Type::Notification>, true> >=Q}}}{map<int, CLDaemonLocation, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLDaemonLocation> > >={__tree<std::__1::__value_type<int, CLDaemonLocation>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLDaemonLocation>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLDaemonLocation> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLDaemonLocation>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLDaemonLocation>, std::__1::less<int>, true> >=Q}}}{?=d^{__CFDate}}}>16
^{CLFilteredLocationController=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBBBB^^?{CLDistanceCalc=ddddd}{unique_ptr<CLStreamingAwareLocationProvider_Type::Client, std::__1::default_delete<CLStreamingAwareLocationProvider_Type::Client> >={__compressed_pair<CLStreamingAwareLocationProvider_Type::Client *, std::__1::default_delete<CLStreamingAwareLocationProvider_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{CLLastConfidentLocation={unique_ptr<CLCachedLocationController_Type::Client, std::__1::default_delete<CLCachedLocationController_Type::Client> >={__compressed_pair<CLCachedLocationController_Type::Client *, std::__1::default_delete<CLCachedLocationController_Type::Client> >=^{Client}}}@^{INotifier}B{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}I}^{__CFRunLoopTimer}dd{map<CLLocationProvider_Type::Notification, bool, std::__1::less<CLLocationProvider_Type::Notification>, std::__1::allocator<std::__1::pair<const CLLocationProvider_Type::Notification, bool> > >={__tree<std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, std::__1::__map_value_compare<CLLocationProvider_Type::Notification, std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, std::__1::less<CLLocationProvider_Type::Notification>, true>, std::__1::allocator<std::__1::__value_type<CLLocationProvider_Type::Notification, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLLocationProvider_Type::Notification, std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, std::__1::less<CLLocationProvider_Type::Notification>, true> >=Q}}}{map<int, CLDaemonLocation, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLDaemonLocation> > >={__tree<std::__1::__value_type<int, CLDaemonLocation>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLDaemonLocation>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLDaemonLocation> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLDaemonLocation>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLDaemonLocation>, std::__1::less<int>, true> >=Q}}}{?=d^{__CFDate}}}16@0:8
v24@0:8@?<v@?^{CLOperatorSettings=^^?^{__CFDictionary}B{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}^{__CFString}^{__CFString}IIB{OtherPrefs=^^?^{__CFDictionary}}{OtherPrefs=^^?^{__CFDictionary}}^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB}>16
v32@0:8@?<v@?^{CLOperatorSettings=^^?^{__CFDictionary}B{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}^{__CFString}^{__CFString}IIB{OtherPrefs=^^?^{__CFDictionary}}{OtherPrefs=^^?^{__CFDictionary}}^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB}>16@?<v@?>24
B24@0:8@?<v@?^{CLOperatorSettings=^^?^{__CFDictionary}B{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}^{__CFString}^{__CFString}IIB{OtherPrefs=^^?^{__CFDictionary}}{OtherPrefs=^^?^{__CFDictionary}}^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB}>16
^{CLOperatorSettings=^^?^{__CFDictionary}B{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}^{__CFString}^{__CFString}IIB{OtherPrefs=^^?^{__CFDictionary}}{OtherPrefs=^^?^{__CFDictionary}}^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB}16@0:8
@40@0:8d16q24@32
v32@0:8@16Q24
v40@0:8@16{?=dd}24
v32@0:8@"GEONavigationListener"16@"GEONavigationRouteSummary"24
v32@0:8@"GEONavigationListener"16@"GEONavigationRouteTransitSummary"24
v32@0:8@"GEONavigationListener"16@"GEONavigationGuidanceState"24
v32@0:8@"GEONavigationListener"16@"NSData"24
v32@0:8@"GEONavigationListener"16@"NSString"24
v32@0:8@"GEONavigationListener"16Q24
v32@0:8@"GEONavigationListener"16@"GEONameInfo"24
v32@0:8@"GEONavigationListener"16@"NSArray"24
v40@0:8@"GEONavigationListener"16{?=dd}24
v28@0:8@"GEONavigationListener"16i24
@32@0:8@16^{INotifier=^^?}24
@"GEONavigationListener"
{?="latitude"d"longitude"d}
^{INotifier=^^?}
@"CLDispatchSilo"
{?="generationTimeSecs"b1"expirationAgeSecs"b1"version"b1}
@64@0:8Q16@24@32@40Q48Q56
{?="startTime"b1"firstCatherine"b1"firstCatherineStartTime"b1"longestDropout"b1"maxGoodCatherine"b1"meanCatherine"b1"meanGoodCatherine"b1"minGoodCatherine"b1"nCatherine"b1"nDropout"b1"nGoodCatherine"b1"nHighCatherine"b1"nInterpolatedCatherine"b1"nLowCatherine"b1"nSampleAndHoldCatherine"b1"nVeryHighCatherine"b1"nVeryLowCatherine"b1"onsetCatherine"b1"onsetReason"b1"persistedMinHR"b1"totalDropoutTime"b1"userMaxCatherine"b1}
{?="metsFM"b1"metsHR"b1"metsWR"b1"truthMetsSource"b1"userMetsSource"b1}
v40@0:8@"PBRequester"16@"PBCodable"24@"PBRequest"32
v24@0:8@"PBRequester"16
v32@0:8@"PBRequester"16@"NSError"24
@28@0:8^{CLCollectionRequester=^^?^^?^^?^^?^^?^^?^^?^^?^^?^^?^^?^^?^^?{weak_ptr<CLCollectionRequester>=^{CLCollectionRequester}^{__shared_weak_count}}@{Listener=^v^?^?^?}@{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}@@@@@@@@@@@@@@@@@@@@@@@@@@@@@^{__CFString}^{__CFString}@i@B@}16i24
^{CLCollectionRequester=^^?^^?^^?^^?^^?^^?^^?^^?^^?^^?^^?^^?^^?{weak_ptr<CLCollectionRequester>=^{CLCollectionRequester}^{__shared_weak_count}}@{Listener=^v^?^?^?}@{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}@@@@@@@@@@@@@@@@@@@@@@@@@@@@@^{__CFString}^{__CFString}@i@B@}
@44@0:8d16d24q32B40
v32@0:8@16i24B28
v28@0:8@16B24
v36@0:8@?16i24@28
i24@0:8@?16
i20@0:8i16
^{CLDaemonClient=^{CLClientManager}{DestructionAwareMutex=^^?{shared_ptr<DestructionAwareMutexInternal>=^{DestructionAwareMutexInternal}^{__shared_weak_count}}}@@@{Name={basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}BBB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}BB}BBBBQiB{unique_ptr<CLClientManager::InUseAssertion, std::__1::default_delete<CLClientManager::InUseAssertion> >={__compressed_pair<CLClientManager::InUseAssertion *, std::__1::default_delete<CLClientManager::InUseAssertion> >=^{InUseAssertion}}}@BBi{list<CLDaemonClient::MessageRef, std::__1::allocator<CLDaemonClient::MessageRef> >={__list_node_base<CLDaemonClient::MessageRef, void *>=^{__list_node_base<CLDaemonClient::MessageRef, void *>}^{__list_node_base<CLDaemonClient::MessageRef, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLDaemonClient::MessageRef, void *> > >=Q}}@Q{map<std::__1::basic_string<char>, bool, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, bool> > >={__tree<std::__1::__value_type<std::__1::basic_string<char>, bool>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, bool>, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, bool>, std::__1::less<std::__1::basic_string<char> >, true> >=Q}}}IBB{unique_ptr<CLClientManager::InUseAssertion, std::__1::default_delete<CLClientManager::InUseAssertion> >={__compressed_pair<CLClientManager::InUseAssertion *, std::__1::default_delete<CLClientManager::InUseAssertion> >=^{InUseAssertion}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@iiBi@BBB@@iBB{unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client> >={__compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> >=^{Client}}}{unique_ptr<CLFilteredLocationController_Type::Client, std::__1::default_delete<CLFilteredLocationController_Type::Client> >={__compressed_pair<CLFilteredLocationController_Type::Client *, std::__1::default_delete<CLFilteredLocationController_Type::Client> >=^{Client}}}{unique_ptr<CLSignificantChangeManager_Type::Client, std::__1::default_delete<CLSignificantChangeManager_Type::Client> >={__compressed_pair<CLSignificantChangeManager_Type::Client *, std::__1::default_delete<CLSignificantChangeManager_Type::Client> >=^{Client}}}{unique_ptr<CLCompassDaemonClientNotifier_Type::Client, std::__1::default_delete<CLCompassDaemonClientNotifier_Type::Client> >={__compressed_pair<CLCompassDaemonClientNotifier_Type::Client *, std::__1::default_delete<CLCompassDaemonClientNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLBTLEFenceManager_Type::Client, std::__1::default_delete<CLBTLEFenceManager_Type::Client> >={__compressed_pair<CLBTLEFenceManager_Type::Client *, std::__1::default_delete<CLBTLEFenceManager_Type::Client> >=^{Client}}}{unique_ptr<CLBTLERangeManager_Type::Client, std::__1::default_delete<CLBTLERangeManager_Type::Client> >={__compressed_pair<CLBTLERangeManager_Type::Client *, std::__1::default_delete<CLBTLERangeManager_Type::Client> >=^{Client}}}{unique_ptr<CLFenceManager_Type::Client, std::__1::default_delete<CLFenceManager_Type::Client> >={__compressed_pair<CLFenceManager_Type::Client *, std::__1::default_delete<CLFenceManager_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLGeomagneticModelProvider_Type::Client, std::__1::default_delete<CLGeomagneticModelProvider_Type::Client> >={__compressed_pair<CLGeomagneticModelProvider_Type::Client *, std::__1::default_delete<CLGeomagneticModelProvider_Type::Client> >=^{Client}}}{unique_ptr<CLPressureBias_Type::Client, std::__1::default_delete<CLPressureBias_Type::Client> >={__compressed_pair<CLPressureBias_Type::Client *, std::__1::default_delete<CLPressureBias_Type::Client> >=^{Client}}}{unique_ptr<CLAutopauseProvider_Type::Client, std::__1::default_delete<CLAutopauseProvider_Type::Client> >={__compressed_pair<CLAutopauseProvider_Type::Client *, std::__1::default_delete<CLAutopauseProvider_Type::Client> >=^{Client}}}{unique_ptr<CLMotionState_Type::Client, std::__1::default_delete<CLMotionState_Type::Client> >={__compressed_pair<CLMotionState_Type::Client *, std::__1::default_delete<CLMotionState_Type::Client> >=^{Client}}}{unique_ptr<CLOnBodyNotifier_Type::Client, std::__1::default_delete<CLOnBodyNotifier_Type::Client> >={__compressed_pair<CLOnBodyNotifier_Type::Client *, std::__1::default_delete<CLOnBodyNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLStepCountNotifier_Type::Client, std::__1::default_delete<CLStepCountNotifier_Type::Client> >={__compressed_pair<CLStepCountNotifier_Type::Client *, std::__1::default_delete<CLStepCountNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLOdometerNotifier_Type::Client, std::__1::default_delete<CLOdometerNotifier_Type::Client> >={__compressed_pair<CLOdometerNotifier_Type::Client *, std::__1::default_delete<CLOdometerNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLSedentaryTimerNotifier_Type::Client, std::__1::default_delete<CLSedentaryTimerNotifier_Type::Client> >={__compressed_pair<CLSedentaryTimerNotifier_Type::Client *, std::__1::default_delete<CLSedentaryTimerNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLMotionState_Type::Client, std::__1::default_delete<CLMotionState_Type::Client> >={__compressed_pair<CLMotionState_Type::Client *, std::__1::default_delete<CLMotionState_Type::Client> >=^{Client}}}{unique_ptr<CLNatalimetryNotifier_Type::Client, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >={__compressed_pair<CLNatalimetryNotifier_Type::Client *, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLMotionStateMediator_Type::Client, std::__1::default_delete<CLMotionStateMediator_Type::Client> >={__compressed_pair<CLMotionStateMediator_Type::Client *, std::__1::default_delete<CLMotionStateMediator_Type::Client> >=^{Client}}}{unique_ptr<CLMicroLocationNotifier_Type::Client, std::__1::default_delete<CLMicroLocationNotifier_Type::Client> >={__compressed_pair<CLMicroLocationNotifier_Type::Client *, std::__1::default_delete<CLMicroLocationNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLPeerRangingNotifier_Type::Client, std::__1::default_delete<CLPeerRangingNotifier_Type::Client> >={__compressed_pair<CLPeerRangingNotifier_Type::Client *, std::__1::default_delete<CLPeerRangingNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLSidebandOverride, std::__1::default_delete<CLSidebandOverride> >={__compressed_pair<CLSidebandOverride *, std::__1::default_delete<CLSidebandOverride> >=^{CLSidebandOverride}}}{unique_ptr<CLSidebandSensorFusion, std::__1::default_delete<CLSidebandSensorFusion> >={__compressed_pair<CLSidebandSensorFusion *, std::__1::default_delete<CLSidebandSensorFusion> >=^{CLSidebandSensorFusion}}}{unique_ptr<CLMotionStateOverride, std::__1::default_delete<CLMotionStateOverride> >={__compressed_pair<CLMotionStateOverride *, std::__1::default_delete<CLMotionStateOverride> >=^{CLMotionStateOverride}}}{unique_ptr<CLMotionStateSim, std::__1::default_delete<CLMotionStateSim> >={__compressed_pair<CLMotionStateSim *, std::__1::default_delete<CLMotionStateSim> >=^{CLMotionStateSim}}}{unique_ptr<CLSwimNotifier_Type::Client, std::__1::default_delete<CLSwimNotifier_Type::Client> >={__compressed_pair<CLSwimNotifier_Type::Client *, std::__1::default_delete<CLSwimNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLCompanionNotifier_Type::Client, std::__1::default_delete<CLCompanionNotifier_Type::Client> >={__compressed_pair<CLCompanionNotifier_Type::Client *, std::__1::default_delete<CLCompanionNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLCaptureMode, std::__1::default_delete<CLCaptureMode> >={__compressed_pair<CLCaptureMode *, std::__1::default_delete<CLCaptureMode> >=^{CLCaptureMode}}}@@@@@@@@@@@@@@@@@@@BdB^{Dispatcher}@d{?=ddddddddddi}{CLNameValuePair=^^?^{__CFDictionary}}{CLNameValuePair=^^?^{__CFDictionary}}BiiBBBBB@@^{CLConnection}iid@q@dB{PauseState=BBB}B{map<int, CMActivityAlarm *, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CMActivityAlarm *> > >={__tree<std::__1::__value_type<int, CMActivityAlarm *>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CMActivityAlarm *>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CMActivityAlarm *> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CMActivityAlarm *>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CMActivityAlarm *>, std::__1::less<int>, true> >=Q}}}Bdddd@{shared_ptr<CLPersistentTimer>=^{CLPersistentTimer}^{__shared_weak_count}}BBBdiBBBB{LocationUpdateSession={Metric=Bd{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}{LocationSystemState=BBBBBiBii}ddddddBi}{LocationMonitorSession={Metric=Bd{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}ddiiB}{BeaconMonitorSession={Metric=Bd{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}SSSSSSSS}{BeaconRangingSession={Metric=Bd{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}ISSC{vector<signed char, std::__1::allocator<signed char> >=**{__compressed_pair<signed char *, std::__1::allocator<signed char> >=*}}}{MotionTrigger={Metric=Bd{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}dii{map<std::__1::basic_string<char>, int, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, int> > >={__tree<std::__1::__value_type<std::__1::basic_string<char>, int>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, int>, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, int> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, int>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, int>, std::__1::less<std::__1::basic_string<char> >, true> >=Q}}}}^{CLCompassSessionStatsCollector}^v@@{map<CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> >, std::__1::less<CLBTLEBeaconRegion_Type::Region>, std::__1::allocator<std::__1::pair<const CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > > > >={__tree<std::__1::__value_type<CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >, std::__1::__map_value_compare<CLBTLEBeaconRegion_Type::Region, std::__1::__value_type<CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >, std::__1::less<CLBTLEBeaconRegion_Type::Region>, true>, std::__1::allocator<std::__1::__value_type<CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLBTLEBeaconRegion_Type::Region, std::__1::__value_type<CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >, std::__1::less<CLBTLEBeaconRegion_Type::Region>, true> >=Q}}}{CLCallbackDropManager=^^?{shared_ptr<int>=^i^{__shared_weak_count}}}di}28@0:8@?16i24
v32@0:8@"CLNotifierData"16i24B28
v28@0:8@"CLNotifierData"16B24
v32@0:8@"CLLocation"16@?<v@?@"CLLocation">24
v24@0:8@?<{Name={basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}BBB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}BB}@?>16
v36@0:8@?<{Name={basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}BBB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}BB}@?>16i24@"NSString"28
v32@0:8@"NSString"16@?<{Name={basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}BBB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}BB}@?>24
@"NSSet"16@0:8
i24@0:8@?<{Name={basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}BBB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}BB}@?>16
^{CLDaemonClient=^{CLClientManager}{DestructionAwareMutex=^^?{shared_ptr<DestructionAwareMutexInternal>=^{DestructionAwareMutexInternal}^{__shared_weak_count}}}@@@{Name={basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}BBB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}BB}BBBBQiB{unique_ptr<CLClientManager::InUseAssertion, std::__1::default_delete<CLClientManager::InUseAssertion> >={__compressed_pair<CLClientManager::InUseAssertion *, std::__1::default_delete<CLClientManager::InUseAssertion> >=^{InUseAssertion}}}@BBi{list<CLDaemonClient::MessageRef, std::__1::allocator<CLDaemonClient::MessageRef> >={__list_node_base<CLDaemonClient::MessageRef, void *>=^{__list_node_base<CLDaemonClient::MessageRef, void *>}^{__list_node_base<CLDaemonClient::MessageRef, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLDaemonClient::MessageRef, void *> > >=Q}}@Q{map<std::__1::basic_string<char>, bool, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, bool> > >={__tree<std::__1::__value_type<std::__1::basic_string<char>, bool>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, bool>, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, bool>, std::__1::less<std::__1::basic_string<char> >, true> >=Q}}}IBB{unique_ptr<CLClientManager::InUseAssertion, std::__1::default_delete<CLClientManager::InUseAssertion> >={__compressed_pair<CLClientManager::InUseAssertion *, std::__1::default_delete<CLClientManager::InUseAssertion> >=^{InUseAssertion}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@iiBi@BBB@@iBB{unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client> >={__compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> >=^{Client}}}{unique_ptr<CLFilteredLocationController_Type::Client, std::__1::default_delete<CLFilteredLocationController_Type::Client> >={__compressed_pair<CLFilteredLocationController_Type::Client *, std::__1::default_delete<CLFilteredLocationController_Type::Client> >=^{Client}}}{unique_ptr<CLSignificantChangeManager_Type::Client, std::__1::default_delete<CLSignificantChangeManager_Type::Client> >={__compressed_pair<CLSignificantChangeManager_Type::Client *, std::__1::default_delete<CLSignificantChangeManager_Type::Client> >=^{Client}}}{unique_ptr<CLCompassDaemonClientNotifier_Type::Client, std::__1::default_delete<CLCompassDaemonClientNotifier_Type::Client> >={__compressed_pair<CLCompassDaemonClientNotifier_Type::Client *, std::__1::default_delete<CLCompassDaemonClientNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLBTLEFenceManager_Type::Client, std::__1::default_delete<CLBTLEFenceManager_Type::Client> >={__compressed_pair<CLBTLEFenceManager_Type::Client *, std::__1::default_delete<CLBTLEFenceManager_Type::Client> >=^{Client}}}{unique_ptr<CLBTLERangeManager_Type::Client, std::__1::default_delete<CLBTLERangeManager_Type::Client> >={__compressed_pair<CLBTLERangeManager_Type::Client *, std::__1::default_delete<CLBTLERangeManager_Type::Client> >=^{Client}}}{unique_ptr<CLFenceManager_Type::Client, std::__1::default_delete<CLFenceManager_Type::Client> >={__compressed_pair<CLFenceManager_Type::Client *, std::__1::default_delete<CLFenceManager_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLGeomagneticModelProvider_Type::Client, std::__1::default_delete<CLGeomagneticModelProvider_Type::Client> >={__compressed_pair<CLGeomagneticModelProvider_Type::Client *, std::__1::default_delete<CLGeomagneticModelProvider_Type::Client> >=^{Client}}}{unique_ptr<CLPressureBias_Type::Client, std::__1::default_delete<CLPressureBias_Type::Client> >={__compressed_pair<CLPressureBias_Type::Client *, std::__1::default_delete<CLPressureBias_Type::Client> >=^{Client}}}{unique_ptr<CLAutopauseProvider_Type::Client, std::__1::default_delete<CLAutopauseProvider_Type::Client> >={__compressed_pair<CLAutopauseProvider_Type::Client *, std::__1::default_delete<CLAutopauseProvider_Type::Client> >=^{Client}}}{unique_ptr<CLMotionState_Type::Client, std::__1::default_delete<CLMotionState_Type::Client> >={__compressed_pair<CLMotionState_Type::Client *, std::__1::default_delete<CLMotionState_Type::Client> >=^{Client}}}{unique_ptr<CLOnBodyNotifier_Type::Client, std::__1::default_delete<CLOnBodyNotifier_Type::Client> >={__compressed_pair<CLOnBodyNotifier_Type::Client *, std::__1::default_delete<CLOnBodyNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLStepCountNotifier_Type::Client, std::__1::default_delete<CLStepCountNotifier_Type::Client> >={__compressed_pair<CLStepCountNotifier_Type::Client *, std::__1::default_delete<CLStepCountNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLOdometerNotifier_Type::Client, std::__1::default_delete<CLOdometerNotifier_Type::Client> >={__compressed_pair<CLOdometerNotifier_Type::Client *, std::__1::default_delete<CLOdometerNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLSedentaryTimerNotifier_Type::Client, std::__1::default_delete<CLSedentaryTimerNotifier_Type::Client> >={__compressed_pair<CLSedentaryTimerNotifier_Type::Client *, std::__1::default_delete<CLSedentaryTimerNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLMotionState_Type::Client, std::__1::default_delete<CLMotionState_Type::Client> >={__compressed_pair<CLMotionState_Type::Client *, std::__1::default_delete<CLMotionState_Type::Client> >=^{Client}}}{unique_ptr<CLNatalimetryNotifier_Type::Client, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >={__compressed_pair<CLNatalimetryNotifier_Type::Client *, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLMotionStateMediator_Type::Client, std::__1::default_delete<CLMotionStateMediator_Type::Client> >={__compressed_pair<CLMotionStateMediator_Type::Client *, std::__1::default_delete<CLMotionStateMediator_Type::Client> >=^{Client}}}{unique_ptr<CLMicroLocationNotifier_Type::Client, std::__1::default_delete<CLMicroLocationNotifier_Type::Client> >={__compressed_pair<CLMicroLocationNotifier_Type::Client *, std::__1::default_delete<CLMicroLocationNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLPeerRangingNotifier_Type::Client, std::__1::default_delete<CLPeerRangingNotifier_Type::Client> >={__compressed_pair<CLPeerRangingNotifier_Type::Client *, std::__1::default_delete<CLPeerRangingNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLSidebandOverride, std::__1::default_delete<CLSidebandOverride> >={__compressed_pair<CLSidebandOverride *, std::__1::default_delete<CLSidebandOverride> >=^{CLSidebandOverride}}}{unique_ptr<CLSidebandSensorFusion, std::__1::default_delete<CLSidebandSensorFusion> >={__compressed_pair<CLSidebandSensorFusion *, std::__1::default_delete<CLSidebandSensorFusion> >=^{CLSidebandSensorFusion}}}{unique_ptr<CLMotionStateOverride, std::__1::default_delete<CLMotionStateOverride> >={__compressed_pair<CLMotionStateOverride *, std::__1::default_delete<CLMotionStateOverride> >=^{CLMotionStateOverride}}}{unique_ptr<CLMotionStateSim, std::__1::default_delete<CLMotionStateSim> >={__compressed_pair<CLMotionStateSim *, std::__1::default_delete<CLMotionStateSim> >=^{CLMotionStateSim}}}{unique_ptr<CLSwimNotifier_Type::Client, std::__1::default_delete<CLSwimNotifier_Type::Client> >={__compressed_pair<CLSwimNotifier_Type::Client *, std::__1::default_delete<CLSwimNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLCompanionNotifier_Type::Client, std::__1::default_delete<CLCompanionNotifier_Type::Client> >={__compressed_pair<CLCompanionNotifier_Type::Client *, std::__1::default_delete<CLCompanionNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLCaptureMode, std::__1::default_delete<CLCaptureMode> >={__compressed_pair<CLCaptureMode *, std::__1::default_delete<CLCaptureMode> >=^{CLCaptureMode}}}@@@@@@@@@@@@@@@@@@@BdB^{Dispatcher}@d{?=ddddddddddi}{CLNameValuePair=^^?^{__CFDictionary}}{CLNameValuePair=^^?^{__CFDictionary}}BiiBBBBB@@^{CLConnection}iid@q@dB{PauseState=BBB}B{map<int, CMActivityAlarm *, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CMActivityAlarm *> > >={__tree<std::__1::__value_type<int, CMActivityAlarm *>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CMActivityAlarm *>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CMActivityAlarm *> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CMActivityAlarm *>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CMActivityAlarm *>, std::__1::less<int>, true> >=Q}}}Bdddd@{shared_ptr<CLPersistentTimer>=^{CLPersistentTimer}^{__shared_weak_count}}BBBdiBBBB{LocationUpdateSession={Metric=Bd{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}{LocationSystemState=BBBBBiBii}ddddddBi}{LocationMonitorSession={Metric=Bd{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}ddiiB}{BeaconMonitorSession={Metric=Bd{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}SSSSSSSS}{BeaconRangingSession={Metric=Bd{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}ISSC{vector<signed char, std::__1::allocator<signed char> >=**{__compressed_pair<signed char *, std::__1::allocator<signed char> >=*}}}{MotionTrigger={Metric=Bd{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}dii{map<std::__1::basic_string<char>, int, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, int> > >={__tree<std::__1::__value_type<std::__1::basic_string<char>, int>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, int>, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, int> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, int>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, int>, std::__1::less<std::__1::basic_string<char> >, true> >=Q}}}}^{CLCompassSessionStatsCollector}^v@@{map<CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> >, std::__1::less<CLBTLEBeaconRegion_Type::Region>, std::__1::allocator<std::__1::pair<const CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > > > >={__tree<std::__1::__value_type<CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >, std::__1::__map_value_compare<CLBTLEBeaconRegion_Type::Region, std::__1::__value_type<CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >, std::__1::less<CLBTLEBeaconRegion_Type::Region>, true>, std::__1::allocator<std::__1::__value_type<CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLBTLEBeaconRegion_Type::Region, std::__1::__value_type<CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >, std::__1::less<CLBTLEBeaconRegion_Type::Region>, true> >=Q}}}{CLCallbackDropManager=^^?{shared_ptr<int>=^i^{__shared_weak_count}}}di}28@0:8@?<{Name={basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}BBB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}BB}@?>16i24
v24@0:8@?<v@?^{CLClientManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{CLPersistentStore=^^?^{__CFDictionary}@Bid^{__CFRunLoopTimer}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}i}{unique_ptr<CLDarwinNotifier_Type::Client, std::__1::default_delete<CLDarwinNotifier_Type::Client> >={__compressed_pair<CLDarwinNotifier_Type::Client *, std::__1::default_delete<CLDarwinNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLCarrierSettings_Type::Client, std::__1::default_delete<CLCarrierSettings_Type::Client> >={__compressed_pair<CLCarrierSettings_Type::Client *, std::__1::default_delete<CLCarrierSettings_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLBTLEFenceManager_Type::Client, std::__1::default_delete<CLBTLEFenceManager_Type::Client> >={__compressed_pair<CLBTLEFenceManager_Type::Client *, std::__1::default_delete<CLBTLEFenceManager_Type::Client> >=^{Client}}}{unique_ptr<CLFenceManager_Type::Client, std::__1::default_delete<CLFenceManager_Type::Client> >={__compressed_pair<CLFenceManager_Type::Client *, std::__1::default_delete<CLFenceManager_Type::Client> >=^{Client}}}{unique_ptr<CLAppMonitor_Type::Client, std::__1::default_delete<CLAppMonitor_Type::Client> >={__compressed_pair<CLAppMonitor_Type::Client *, std::__1::default_delete<CLAppMonitor_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLBluetoothService_Type::Client, std::__1::default_delete<CLBluetoothService_Type::Client> >={__compressed_pair<CLBluetoothService_Type::Client *, std::__1::default_delete<CLBluetoothService_Type::Client> >=^{Client}}}{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}B@{map<CLDaemonClient *, __CFUserNotification *, std::__1::less<CLDaemonClient *>, std::__1::allocator<std::__1::pair<CLDaemonClient *const, __CFUserNotification *> > >={__tree<std::__1::__value_type<CLDaemonClient *, __CFUserNotification *>, std::__1::__map_value_compare<CLDaemonClient *, std::__1::__value_type<CLDaemonClient *, __CFUserNotification *>, std::__1::less<CLDaemonClient *>, true>, std::__1::allocator<std::__1::__value_type<CLDaemonClient *, __CFUserNotification *> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLDaemonClient *, __CFUserNotification *>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLDaemonClient *, std::__1::__value_type<CLDaemonClient *, __CFUserNotification *>, std::__1::less<CLDaemonClient *>, true> >=Q}}}@{unordered_multimap<std::__1::basic_string<char>, std::__1::basic_string<char>, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::basic_string<char> > > >={__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> > > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::hash<std::__1::basic_string<char> >, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, true> >=f}}}@i{set<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > >={__tree<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::basic_string<char>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<std::__1::basic_string<char> > >=Q}}}{set<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > >={__tree<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::basic_string<char>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<std::__1::basic_string<char> > >=Q}}}iB^{CLConnectionServer}{map<CLConnection *, CLDaemonClient *, std::__1::less<CLConnection *>, std::__1::allocator<std::__1::pair<CLConnection *const, CLDaemonClient *> > >={__tree<std::__1::__value_type<CLConnection *, CLDaemonClient *>, std::__1::__map_value_compare<CLConnection *, std::__1::__value_type<CLConnection *, CLDaemonClient *>, std::__1::less<CLConnection *>, true>, std::__1::allocator<std::__1::__value_type<CLConnection *, CLDaemonClient *> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLConnection *, CLDaemonClient *>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLConnection *, std::__1::__value_type<CLConnection *, CLDaemonClient *>, std::__1::less<CLConnection *>, true> >=Q}}}@i{vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > >=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}{__compressed_pair<std::__1::basic_string<char> *, std::__1::allocator<std::__1::basic_string<char> > >=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{vector<CLClientManager::DaemonAppCoupling, std::__1::allocator<CLClientManager::DaemonAppCoupling> >=^{DaemonAppCoupling}^{DaemonAppCoupling}{__compressed_pair<CLClientManager::DaemonAppCoupling *, std::__1::allocator<CLClientManager::DaemonAppCoupling> >=^{DaemonAppCoupling}}}{vector<CLClientManager::ImproveAccuracyNotification, std::__1::allocator<CLClientManager::ImproveAccuracyNotification> >=^{ImproveAccuracyNotification}^{ImproveAccuracyNotification}{__compressed_pair<CLClientManager::ImproveAccuracyNotification *, std::__1::allocator<CLClientManager::ImproveAccuracyNotification> >=^{ImproveAccuracyNotification}}}BBBBii{unique_ptr<CLClientManager_Type::Name, std::__1::default_delete<CLClientManager_Type::Name> >={__compressed_pair<CLClientManager_Type::Name *, std::__1::default_delete<CLClientManager_Type::Name> >=^{Name}}}@B@@{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}d{map<std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider> >, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider> > > > >={__tree<std::__1::__value_type<std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider> > >, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider> > >, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider> > >, std::__1::less<std::__1::basic_string<char> >, true> >=Q}}}@@@@}>16
v32@0:8@?<v@?^{CLClientManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{CLPersistentStore=^^?^{__CFDictionary}@Bid^{__CFRunLoopTimer}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}i}{unique_ptr<CLDarwinNotifier_Type::Client, std::__1::default_delete<CLDarwinNotifier_Type::Client> >={__compressed_pair<CLDarwinNotifier_Type::Client *, std::__1::default_delete<CLDarwinNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLCarrierSettings_Type::Client, std::__1::default_delete<CLCarrierSettings_Type::Client> >={__compressed_pair<CLCarrierSettings_Type::Client *, std::__1::default_delete<CLCarrierSettings_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLBTLEFenceManager_Type::Client, std::__1::default_delete<CLBTLEFenceManager_Type::Client> >={__compressed_pair<CLBTLEFenceManager_Type::Client *, std::__1::default_delete<CLBTLEFenceManager_Type::Client> >=^{Client}}}{unique_ptr<CLFenceManager_Type::Client, std::__1::default_delete<CLFenceManager_Type::Client> >={__compressed_pair<CLFenceManager_Type::Client *, std::__1::default_delete<CLFenceManager_Type::Client> >=^{Client}}}{unique_ptr<CLAppMonitor_Type::Client, std::__1::default_delete<CLAppMonitor_Type::Client> >={__compressed_pair<CLAppMonitor_Type::Client *, std::__1::default_delete<CLAppMonitor_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLBluetoothService_Type::Client, std::__1::default_delete<CLBluetoothService_Type::Client> >={__compressed_pair<CLBluetoothService_Type::Client *, std::__1::default_delete<CLBluetoothService_Type::Client> >=^{Client}}}{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}B@{map<CLDaemonClient *, __CFUserNotification *, std::__1::less<CLDaemonClient *>, std::__1::allocator<std::__1::pair<CLDaemonClient *const, __CFUserNotification *> > >={__tree<std::__1::__value_type<CLDaemonClient *, __CFUserNotification *>, std::__1::__map_value_compare<CLDaemonClient *, std::__1::__value_type<CLDaemonClient *, __CFUserNotification *>, std::__1::less<CLDaemonClient *>, true>, std::__1::allocator<std::__1::__value_type<CLDaemonClient *, __CFUserNotification *> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLDaemonClient *, __CFUserNotification *>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLDaemonClient *, std::__1::__value_type<CLDaemonClient *, __CFUserNotification *>, std::__1::less<CLDaemonClient *>, true> >=Q}}}@{unordered_multimap<std::__1::basic_string<char>, std::__1::basic_string<char>, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::basic_string<char> > > >={__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> > > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::hash<std::__1::basic_string<char> >, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, true> >=f}}}@i{set<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > >={__tree<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::basic_string<char>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<std::__1::basic_string<char> > >=Q}}}{set<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > >={__tree<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::basic_string<char>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<std::__1::basic_string<char> > >=Q}}}iB^{CLConnectionServer}{map<CLConnection *, CLDaemonClient *, std::__1::less<CLConnection *>, std::__1::allocator<std::__1::pair<CLConnection *const, CLDaemonClient *> > >={__tree<std::__1::__value_type<CLConnection *, CLDaemonClient *>, std::__1::__map_value_compare<CLConnection *, std::__1::__value_type<CLConnection *, CLDaemonClient *>, std::__1::less<CLConnection *>, true>, std::__1::allocator<std::__1::__value_type<CLConnection *, CLDaemonClient *> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLConnection *, CLDaemonClient *>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLConnection *, std::__1::__value_type<CLConnection *, CLDaemonClient *>, std::__1::less<CLConnection *>, true> >=Q}}}@i{vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > >=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}{__compressed_pair<std::__1::basic_string<char> *, std::__1::allocator<std::__1::basic_string<char> > >=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{vector<CLClientManager::DaemonAppCoupling, std::__1::allocator<CLClientManager::DaemonAppCoupling> >=^{DaemonAppCoupling}^{DaemonAppCoupling}{__compressed_pair<CLClientManager::DaemonAppCoupling *, std::__1::allocator<CLClientManager::DaemonAppCoupling> >=^{DaemonAppCoupling}}}{vector<CLClientManager::ImproveAccuracyNotification, std::__1::allocator<CLClientManager::ImproveAccuracyNotification> >=^{ImproveAccuracyNotification}^{ImproveAccuracyNotification}{__compressed_pair<CLClientManager::ImproveAccuracyNotification *, std::__1::allocator<CLClientManager::ImproveAccuracyNotification> >=^{ImproveAccuracyNotification}}}BBBBii{unique_ptr<CLClientManager_Type::Name, std::__1::default_delete<CLClientManager_Type::Name> >={__compressed_pair<CLClientManager_Type::Name *, std::__1::default_delete<CLClientManager_Type::Name> >=^{Name}}}@B@@{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}d{map<std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider> >, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider> > > > >={__tree<std::__1::__value_type<std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider> > >, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider> > >, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider> > >, std::__1::less<std::__1::basic_string<char> >, true> >=Q}}}@@@@}>16@?<v@?>24
B24@0:8@?<v@?^{CLClientManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{CLPersistentStore=^^?^{__CFDictionary}@Bid^{__CFRunLoopTimer}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}i}{unique_ptr<CLDarwinNotifier_Type::Client, std::__1::default_delete<CLDarwinNotifier_Type::Client> >={__compressed_pair<CLDarwinNotifier_Type::Client *, std::__1::default_delete<CLDarwinNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLCarrierSettings_Type::Client, std::__1::default_delete<CLCarrierSettings_Type::Client> >={__compressed_pair<CLCarrierSettings_Type::Client *, std::__1::default_delete<CLCarrierSettings_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLBTLEFenceManager_Type::Client, std::__1::default_delete<CLBTLEFenceManager_Type::Client> >={__compressed_pair<CLBTLEFenceManager_Type::Client *, std::__1::default_delete<CLBTLEFenceManager_Type::Client> >=^{Client}}}{unique_ptr<CLFenceManager_Type::Client, std::__1::default_delete<CLFenceManager_Type::Client> >={__compressed_pair<CLFenceManager_Type::Client *, std::__1::default_delete<CLFenceManager_Type::Client> >=^{Client}}}{unique_ptr<CLAppMonitor_Type::Client, std::__1::default_delete<CLAppMonitor_Type::Client> >={__compressed_pair<CLAppMonitor_Type::Client *, std::__1::default_delete<CLAppMonitor_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLBluetoothService_Type::Client, std::__1::default_delete<CLBluetoothService_Type::Client> >={__compressed_pair<CLBluetoothService_Type::Client *, std::__1::default_delete<CLBluetoothService_Type::Client> >=^{Client}}}{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}B@{map<CLDaemonClient *, __CFUserNotification *, std::__1::less<CLDaemonClient *>, std::__1::allocator<std::__1::pair<CLDaemonClient *const, __CFUserNotification *> > >={__tree<std::__1::__value_type<CLDaemonClient *, __CFUserNotification *>, std::__1::__map_value_compare<CLDaemonClient *, std::__1::__value_type<CLDaemonClient *, __CFUserNotification *>, std::__1::less<CLDaemonClient *>, true>, std::__1::allocator<std::__1::__value_type<CLDaemonClient *, __CFUserNotification *> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLDaemonClient *, __CFUserNotification *>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLDaemonClient *, std::__1::__value_type<CLDaemonClient *, __CFUserNotification *>, std::__1::less<CLDaemonClient *>, true> >=Q}}}@{unordered_multimap<std::__1::basic_string<char>, std::__1::basic_string<char>, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::basic_string<char> > > >={__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> > > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::hash<std::__1::basic_string<char> >, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, true> >=f}}}@i{set<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > >={__tree<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::basic_string<char>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<std::__1::basic_string<char> > >=Q}}}{set<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > >={__tree<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::basic_string<char>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<std::__1::basic_string<char> > >=Q}}}iB^{CLConnectionServer}{map<CLConnection *, CLDaemonClient *, std::__1::less<CLConnection *>, std::__1::allocator<std::__1::pair<CLConnection *const, CLDaemonClient *> > >={__tree<std::__1::__value_type<CLConnection *, CLDaemonClient *>, std::__1::__map_value_compare<CLConnection *, std::__1::__value_type<CLConnection *, CLDaemonClient *>, std::__1::less<CLConnection *>, true>, std::__1::allocator<std::__1::__value_type<CLConnection *, CLDaemonClient *> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLConnection *, CLDaemonClient *>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLConnection *, std::__1::__value_type<CLConnection *, CLDaemonClient *>, std::__1::less<CLConnection *>, true> >=Q}}}@i{vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > >=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}{__compressed_pair<std::__1::basic_string<char> *, std::__1::allocator<std::__1::basic_string<char> > >=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{vector<CLClientManager::DaemonAppCoupling, std::__1::allocator<CLClientManager::DaemonAppCoupling> >=^{DaemonAppCoupling}^{DaemonAppCoupling}{__compressed_pair<CLClientManager::DaemonAppCoupling *, std::__1::allocator<CLClientManager::DaemonAppCoupling> >=^{DaemonAppCoupling}}}{vector<CLClientManager::ImproveAccuracyNotification, std::__1::allocator<CLClientManager::ImproveAccuracyNotification> >=^{ImproveAccuracyNotification}^{ImproveAccuracyNotification}{__compressed_pair<CLClientManager::ImproveAccuracyNotification *, std::__1::allocator<CLClientManager::ImproveAccuracyNotification> >=^{ImproveAccuracyNotification}}}BBBBii{unique_ptr<CLClientManager_Type::Name, std::__1::default_delete<CLClientManager_Type::Name> >={__compressed_pair<CLClientManager_Type::Name *, std::__1::default_delete<CLClientManager_Type::Name> >=^{Name}}}@B@@{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}d{map<std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider> >, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider> > > > >={__tree<std::__1::__value_type<std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider> > >, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider> > >, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider> > >, std::__1::less<std::__1::basic_string<char> >, true> >=Q}}}@@@@}>16
v40@0:8^{__CFUserNotification=}16Q24^{CLCMNotificationStateRecord=@}32
^{CLClientManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{CLPersistentStore=^^?^{__CFDictionary}@Bid^{__CFRunLoopTimer}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}i}{unique_ptr<CLDarwinNotifier_Type::Client, std::__1::default_delete<CLDarwinNotifier_Type::Client> >={__compressed_pair<CLDarwinNotifier_Type::Client *, std::__1::default_delete<CLDarwinNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLCarrierSettings_Type::Client, std::__1::default_delete<CLCarrierSettings_Type::Client> >={__compressed_pair<CLCarrierSettings_Type::Client *, std::__1::default_delete<CLCarrierSettings_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLBTLEFenceManager_Type::Client, std::__1::default_delete<CLBTLEFenceManager_Type::Client> >={__compressed_pair<CLBTLEFenceManager_Type::Client *, std::__1::default_delete<CLBTLEFenceManager_Type::Client> >=^{Client}}}{unique_ptr<CLFenceManager_Type::Client, std::__1::default_delete<CLFenceManager_Type::Client> >={__compressed_pair<CLFenceManager_Type::Client *, std::__1::default_delete<CLFenceManager_Type::Client> >=^{Client}}}{unique_ptr<CLAppMonitor_Type::Client, std::__1::default_delete<CLAppMonitor_Type::Client> >={__compressed_pair<CLAppMonitor_Type::Client *, std::__1::default_delete<CLAppMonitor_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLBluetoothService_Type::Client, std::__1::default_delete<CLBluetoothService_Type::Client> >={__compressed_pair<CLBluetoothService_Type::Client *, std::__1::default_delete<CLBluetoothService_Type::Client> >=^{Client}}}{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}B@{map<CLDaemonClient *, __CFUserNotification *, std::__1::less<CLDaemonClient *>, std::__1::allocator<std::__1::pair<CLDaemonClient *const, __CFUserNotification *> > >={__tree<std::__1::__value_type<CLDaemonClient *, __CFUserNotification *>, std::__1::__map_value_compare<CLDaemonClient *, std::__1::__value_type<CLDaemonClient *, __CFUserNotification *>, std::__1::less<CLDaemonClient *>, true>, std::__1::allocator<std::__1::__value_type<CLDaemonClient *, __CFUserNotification *> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLDaemonClient *, __CFUserNotification *>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLDaemonClient *, std::__1::__value_type<CLDaemonClient *, __CFUserNotification *>, std::__1::less<CLDaemonClient *>, true> >=Q}}}@{unordered_multimap<std::__1::basic_string<char>, std::__1::basic_string<char>, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::basic_string<char> > > >={__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> > > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::hash<std::__1::basic_string<char> >, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, true> >=f}}}@i{set<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > >={__tree<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::basic_string<char>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<std::__1::basic_string<char> > >=Q}}}{set<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > >={__tree<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::basic_string<char>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<std::__1::basic_string<char> > >=Q}}}iB^{CLConnectionServer}{map<CLConnection *, CLDaemonClient *, std::__1::less<CLConnection *>, std::__1::allocator<std::__1::pair<CLConnection *const, CLDaemonClient *> > >={__tree<std::__1::__value_type<CLConnection *, CLDaemonClient *>, std::__1::__map_value_compare<CLConnection *, std::__1::__value_type<CLConnection *, CLDaemonClient *>, std::__1::less<CLConnection *>, true>, std::__1::allocator<std::__1::__value_type<CLConnection *, CLDaemonClient *> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLConnection *, CLDaemonClient *>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLConnection *, std::__1::__value_type<CLConnection *, CLDaemonClient *>, std::__1::less<CLConnection *>, true> >=Q}}}@i{vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > >=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}{__compressed_pair<std::__1::basic_string<char> *, std::__1::allocator<std::__1::basic_string<char> > >=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{vector<CLClientManager::DaemonAppCoupling, std::__1::allocator<CLClientManager::DaemonAppCoupling> >=^{DaemonAppCoupling}^{DaemonAppCoupling}{__compressed_pair<CLClientManager::DaemonAppCoupling *, std::__1::allocator<CLClientManager::DaemonAppCoupling> >=^{DaemonAppCoupling}}}{vector<CLClientManager::ImproveAccuracyNotification, std::__1::allocator<CLClientManager::ImproveAccuracyNotification> >=^{ImproveAccuracyNotification}^{ImproveAccuracyNotification}{__compressed_pair<CLClientManager::ImproveAccuracyNotification *, std::__1::allocator<CLClientManager::ImproveAccuracyNotification> >=^{ImproveAccuracyNotification}}}BBBBii{unique_ptr<CLClientManager_Type::Name, std::__1::default_delete<CLClientManager_Type::Name> >={__compressed_pair<CLClientManager_Type::Name *, std::__1::default_delete<CLClientManager_Type::Name> >=^{Name}}}@B@@{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}d{map<std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider> >, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider> > > > >={__tree<std::__1::__value_type<std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider> > >, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider> > >, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider> > >, std::__1::less<std::__1::basic_string<char> >, true> >=Q}}}@@@@}16@0:8
v24@0:8@?<v@?^{CLCarrierSettings=^^?^{__CFDictionary}B{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}^{__CFString}^{__CFString}IIB{OtherPrefs=^^?^{__CFDictionary}}{OtherPrefs=^^?^{__CFDictionary}}^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client> >={__compressed_pair<CLTelephonyService_Type::Client *, std::__1::default_delete<CLTelephonyService_Type::Client> >=^{Client}}}}>16
v32@0:8@?<v@?^{CLCarrierSettings=^^?^{__CFDictionary}B{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}^{__CFString}^{__CFString}IIB{OtherPrefs=^^?^{__CFDictionary}}{OtherPrefs=^^?^{__CFDictionary}}^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client> >={__compressed_pair<CLTelephonyService_Type::Client *, std::__1::default_delete<CLTelephonyService_Type::Client> >=^{Client}}}}>16@?<v@?>24
B24@0:8@?<v@?^{CLCarrierSettings=^^?^{__CFDictionary}B{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}^{__CFString}^{__CFString}IIB{OtherPrefs=^^?^{__CFDictionary}}{OtherPrefs=^^?^{__CFDictionary}}^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client> >={__compressed_pair<CLTelephonyService_Type::Client *, std::__1::default_delete<CLTelephonyService_Type::Client> >=^{Client}}}}>16
^{CLCarrierSettings=^^?^{__CFDictionary}B{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}^{__CFString}^{__CFString}IIB{OtherPrefs=^^?^{__CFDictionary}}{OtherPrefs=^^?^{__CFDictionary}}^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client> >={__compressed_pair<CLTelephonyService_Type::Client *, std::__1::default_delete<CLTelephonyService_Type::Client> >=^{Client}}}}16@0:8
v24@0:8@?<v@?^{CLWatchOrientationSettingsNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{CLGizmoOrientation=ii}}>16
v32@0:8@?<v@?^{CLWatchOrientationSettingsNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{CLGizmoOrientation=ii}}>16@?<v@?>24
B24@0:8@?<v@?^{CLWatchOrientationSettingsNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{CLGizmoOrientation=ii}}>16
^{CLWatchOrientationSettingsNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{CLGizmoOrientation=ii}}16@0:8
v24@0:8@"NSURL"16
v24@0:8@?<v@?@"NSArray"@"NSError">16
B40@0:8@16@24@32
B48@0:8@16@24@32@40
B40@0:8@"NSFileManager"16@"NSString"24@"NSString"32
B40@0:8@"NSFileManager"16@"NSURL"24@"NSURL"32
B48@0:8@"NSFileManager"16@"NSError"24@"NSString"32@"NSString"40
B48@0:8@"NSFileManager"16@"NSError"24@"NSURL"32@"NSURL"40
B32@0:8@"NSFileManager"16@"NSString"24
B32@0:8@"NSFileManager"16@"NSURL"24
B40@0:8@"NSFileManager"16@"NSError"24@"NSString"32
B40@0:8@"NSFileManager"16@"NSError"24@"NSURL"32
B32@0:8@"NSXPCListener"16@"NSXPCConnection"24
@"NSXPCListener"
@"NSFileManager"
@"NSXPCConnection"
{?="northWestLatitude"b1"northWestLongitude"b1"southEastLatitude"b1"southEastLongitude"b1}
@56@0:8@16@24@32@40@48
v24@0:8R@"<CLLocationStreamerClientProtocol>"16
v32@0:8i16B20B24B28
v32@0:8r^i16r^{NotificationData={CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocationPrivate=dddddfffBi{?=dd}diiB{?=dd}if{?=dd}ddiBddddddB}{shared_ptr<CLBatchedLocations>=^{CLBatchedLocations}^{__shared_weak_count}}{TechnologyStatus=iB}Bdi{?=dddd}{?=dd}{XtraFileAvailable=d{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}i{LocationDerivedSpeed=ddd}{shared_ptr<const GNSS::MeasurementData>=^{MeasurementData}^{__shared_weak_count}}i}24
v32@0:8r^i16r^(NotificationData={CLMotionActivity=iiiiBfdBiddii{?=b1b1b1b1b1}}B{DeviceTouchState=Bd}B)24
{unique_ptr<RollingPowerAssertion, std::__1::default_delete<RollingPowerAssertion> >="__ptr_"{__compressed_pair<RollingPowerAssertion *, std::__1::default_delete<RollingPowerAssertion> >="__first_"^{RollingPowerAssertion}}}
{unique_ptr<CLMotionActivity, std::__1::default_delete<CLMotionActivity> >="__ptr_"{__compressed_pair<CLMotionActivity *, std::__1::default_delete<CLMotionActivity> >="__first_"^{CLMotionActivity}}}
v24@0:8@?<v@?^{CLCachedLocationController=^^?^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{CLServiceLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBBBB^{__CLClient}^{__CLClient}^{__CLClient}^{__CFString}^{__CFString}@B}{unique_ptr<CLServiceLocationProvider_Type::Client, std::__1::default_delete<CLServiceLocationProvider_Type::Client> >={__compressed_pair<CLServiceLocationProvider_Type::Client *, std::__1::default_delete<CLServiceLocationProvider_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLAppMonitor_Type::Client, std::__1::default_delete<CLAppMonitor_Type::Client> >={__compressed_pair<CLAppMonitor_Type::Client *, std::__1::default_delete<CLAppMonitor_Type::Client> >=^{Client}}}@idI{CLCachedLocationScanMode=i{CLOldWifiScanner=@@BB{time_point<cl::chrono::CFAbsoluteTimeClock, std::__1::chrono::duration<long double, std::__1::ratio<1, 1> > >={duration<long double, std::__1::ratio<1, 1> >=D}}{ScanningPolicy={WifiConfiguration=cBB{duration<long double, std::__1::ratio<1, 1> >=D}{vector<CLWifiService_Type::Notification, std::__1::allocator<CLWifiService_Type::Notification> >=^i^i{__compressed_pair<CLWifiService_Type::Notification *, std::__1::allocator<CLWifiService_Type::Notification> >=^i}}{duration<long double, std::__1::ratio<1, 1> >=D}{duration<long double, std::__1::ratio<1, 1> >=D}}{optional<CLOldWifiScanner::LocationConfiguration>=(?=c{LocationConfiguration={vector<CLLocationType, std::__1::allocator<CLLocationType> >=^i^i{__compressed_pair<CLLocationType *, std::__1::allocator<CLLocationType> >=^i}}d})B}}}{CLTransitWsbClient=@{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}BBI}}@{CLTransitTilePreloaderExternal=^^?@}{CLTransitTilePreloader=^{CLITransitTilePreloaderExternal}{CLDistanceCalc=ddddd}dd{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}}@}>16
v32@0:8@?<v@?^{CLCachedLocationController=^^?^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{CLServiceLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBBBB^{__CLClient}^{__CLClient}^{__CLClient}^{__CFString}^{__CFString}@B}{unique_ptr<CLServiceLocationProvider_Type::Client, std::__1::default_delete<CLServiceLocationProvider_Type::Client> >={__compressed_pair<CLServiceLocationProvider_Type::Client *, std::__1::default_delete<CLServiceLocationProvider_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLAppMonitor_Type::Client, std::__1::default_delete<CLAppMonitor_Type::Client> >={__compressed_pair<CLAppMonitor_Type::Client *, std::__1::default_delete<CLAppMonitor_Type::Client> >=^{Client}}}@idI{CLCachedLocationScanMode=i{CLOldWifiScanner=@@BB{time_point<cl::chrono::CFAbsoluteTimeClock, std::__1::chrono::duration<long double, std::__1::ratio<1, 1> > >={duration<long double, std::__1::ratio<1, 1> >=D}}{ScanningPolicy={WifiConfiguration=cBB{duration<long double, std::__1::ratio<1, 1> >=D}{vector<CLWifiService_Type::Notification, std::__1::allocator<CLWifiService_Type::Notification> >=^i^i{__compressed_pair<CLWifiService_Type::Notification *, std::__1::allocator<CLWifiService_Type::Notification> >=^i}}{duration<long double, std::__1::ratio<1, 1> >=D}{duration<long double, std::__1::ratio<1, 1> >=D}}{optional<CLOldWifiScanner::LocationConfiguration>=(?=c{LocationConfiguration={vector<CLLocationType, std::__1::allocator<CLLocationType> >=^i^i{__compressed_pair<CLLocationType *, std::__1::allocator<CLLocationType> >=^i}}d})B}}}{CLTransitWsbClient=@{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}BBI}}@{CLTransitTilePreloaderExternal=^^?@}{CLTransitTilePreloader=^{CLITransitTilePreloaderExternal}{CLDistanceCalc=ddddd}dd{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}}@}>16@?<v@?>24
B24@0:8@?<v@?^{CLCachedLocationController=^^?^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{CLServiceLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBBBB^{__CLClient}^{__CLClient}^{__CLClient}^{__CFString}^{__CFString}@B}{unique_ptr<CLServiceLocationProvider_Type::Client, std::__1::default_delete<CLServiceLocationProvider_Type::Client> >={__compressed_pair<CLServiceLocationProvider_Type::Client *, std::__1::default_delete<CLServiceLocationProvider_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLAppMonitor_Type::Client, std::__1::default_delete<CLAppMonitor_Type::Client> >={__compressed_pair<CLAppMonitor_Type::Client *, std::__1::default_delete<CLAppMonitor_Type::Client> >=^{Client}}}@idI{CLCachedLocationScanMode=i{CLOldWifiScanner=@@BB{time_point<cl::chrono::CFAbsoluteTimeClock, std::__1::chrono::duration<long double, std::__1::ratio<1, 1> > >={duration<long double, std::__1::ratio<1, 1> >=D}}{ScanningPolicy={WifiConfiguration=cBB{duration<long double, std::__1::ratio<1, 1> >=D}{vector<CLWifiService_Type::Notification, std::__1::allocator<CLWifiService_Type::Notification> >=^i^i{__compressed_pair<CLWifiService_Type::Notification *, std::__1::allocator<CLWifiService_Type::Notification> >=^i}}{duration<long double, std::__1::ratio<1, 1> >=D}{duration<long double, std::__1::ratio<1, 1> >=D}}{optional<CLOldWifiScanner::LocationConfiguration>=(?=c{LocationConfiguration={vector<CLLocationType, std::__1::allocator<CLLocationType> >=^i^i{__compressed_pair<CLLocationType *, std::__1::allocator<CLLocationType> >=^i}}d})B}}}{CLTransitWsbClient=@{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}BBI}}@{CLTransitTilePreloaderExternal=^^?@}{CLTransitTilePreloader=^{CLITransitTilePreloaderExternal}{CLDistanceCalc=ddddd}dd{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}}@}>16
^{CLCachedLocationController=^^?^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{CLServiceLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBBBB^{__CLClient}^{__CLClient}^{__CLClient}^{__CFString}^{__CFString}@B}{unique_ptr<CLServiceLocationProvider_Type::Client, std::__1::default_delete<CLServiceLocationProvider_Type::Client> >={__compressed_pair<CLServiceLocationProvider_Type::Client *, std::__1::default_delete<CLServiceLocationProvider_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLAppMonitor_Type::Client, std::__1::default_delete<CLAppMonitor_Type::Client> >={__compressed_pair<CLAppMonitor_Type::Client *, std::__1::default_delete<CLAppMonitor_Type::Client> >=^{Client}}}@idI{CLCachedLocationScanMode=i{CLOldWifiScanner=@@BB{time_point<cl::chrono::CFAbsoluteTimeClock, std::__1::chrono::duration<long double, std::__1::ratio<1, 1> > >={duration<long double, std::__1::ratio<1, 1> >=D}}{ScanningPolicy={WifiConfiguration=cBB{duration<long double, std::__1::ratio<1, 1> >=D}{vector<CLWifiService_Type::Notification, std::__1::allocator<CLWifiService_Type::Notification> >=^i^i{__compressed_pair<CLWifiService_Type::Notification *, std::__1::allocator<CLWifiService_Type::Notification> >=^i}}{duration<long double, std::__1::ratio<1, 1> >=D}{duration<long double, std::__1::ratio<1, 1> >=D}}{optional<CLOldWifiScanner::LocationConfiguration>=(?=c{LocationConfiguration={vector<CLLocationType, std::__1::allocator<CLLocationType> >=^i^i{__compressed_pair<CLLocationType *, std::__1::allocator<CLLocationType> >=^i}}d})B}}}{CLTransitWsbClient=@{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}BBI}}@{CLTransitTilePreloaderExternal=^^?@}{CLTransitTilePreloader=^{CLITransitTilePreloaderExternal}{CLDistanceCalc=ddddd}dd{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}}@}16@0:8
@"CalibrationTrack"
@52@0:8{time_point<cl::chrono::CFAbsoluteTimeClock, std::__1::chrono::duration<long double, std::__1::ratio<1, 1> > >={duration<long double, std::__1::ratio<1, 1> >=D}}16i32@36I44i48
{time_point<cl::chrono::CFAbsoluteTimeClock, std::__1::chrono::duration<long double, std::__1::ratio<1, 1> > >={duration<long double, std::__1::ratio<1, 1> >=D}}16@0:8
@"NSUUID"
{time_point<cl::chrono::CFAbsoluteTimeClock, std::__1::chrono::duration<long double, std::__1::ratio<1, 1> > >="__d_"{duration<long double, std::__1::ratio<1, 1> >="__rep_"D}}
{CLATVAirplayDeviceInternal={time_point<cl::chrono::CFAbsoluteTimeClock, std::__1::chrono::duration<long double, std::__1::ratio<1, 1> > >={duration<long double, std::__1::ratio<1, 1> >=D}}i{uuid=[16C]}Ii}16@0:8
v24@0:8R@"<CLATVAirplayMonitorClientProtocol>"16
v32@0:8@"<CLATVAirplayMonitorServiceProtocol>"16@"NSArray"24
@"WPAirPlaySolo"
v128@0:8@16{CLStrideCalEntry=idIdddddiiddid}24
v128@0:8@"CMStrideCalibrationDatabase"16{CLStrideCalEntry=idIdddddiiddid}24
v32@0:8@16i24i28
v32@0:8@16d24
v32@0:8@"CMStrideCalLocationFSM"16i24i28
v32@0:8@"CMStrideCalLocationFSM"16@"CalibrationTrack"24
v32@0:8@"CMStrideCalLocationFSM"16d24
v28@0:8@"CMStrideCalLocationFSM"16i24
@40@0:8@16{shared_ptr<CLStepCountRecorderDb>=^{CLStepCountRecorderDb}^{__shared_weak_count}}24
B32@0:8@16r^{CLStepDistance=iddiidi}24
{unique_ptr<CLOdometerNotifier_Type::Client, std::__1::default_delete<CLOdometerNotifier_Type::Client> >="__ptr_"{__compressed_pair<CLOdometerNotifier_Type::Client *, std::__1::default_delete<CLOdometerNotifier_Type::Client> >="__first_"^{Client}}}
{unique_ptr<CLStreamingAwareLocationProvider_Type::Client, std::__1::default_delete<CLStreamingAwareLocationProvider_Type::Client> >="__ptr_"{__compressed_pair<CLStreamingAwareLocationProvider_Type::Client *, std::__1::default_delete<CLStreamingAwareLocationProvider_Type::Client> >="__first_"^{Client}}}
@"<CLStreamingAwareLocationProviderProtocol>"
{unique_ptr<CLCompanionNotifier_Type::Client, std::__1::default_delete<CLCompanionNotifier_Type::Client> >="__ptr_"{__compressed_pair<CLCompanionNotifier_Type::Client *, std::__1::default_delete<CLCompanionNotifier_Type::Client> >="__first_"^{Client}}}
{unique_ptr<CLMotionStateMediator_Type::Client, std::__1::default_delete<CLMotionStateMediator_Type::Client> >="__ptr_"{__compressed_pair<CLMotionStateMediator_Type::Client *, std::__1::default_delete<CLMotionStateMediator_Type::Client> >="__first_"^{Client}}}
@"CMStrideCalibrationActivityBuffer"
@"CMStrideCalibrationElevationBuffer"
@"CMStrideCalibrationStepCountBuffer"
@"CMStrideCalibrationStats"
@"CMStrideCalibrationDatabase"
@"CMStrideCalLocationFSM"
{shared_ptr<CLStepCountRecorderDb>="__ptr_"^{CLStepCountRecorderDb}"__cntrl_"^{__shared_weak_count}}
v24@0:8@?<v@?^{CLFitnessTrackingNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBB}>16
v32@0:8@?<v@?^{CLFitnessTrackingNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBB}>16@?<v@?>24
B24@0:8@?<v@?^{CLFitnessTrackingNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBB}>16
^{CLFitnessTrackingNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBB}16@0:8
@"CLClientManagerUsageSyncMessage"
@"NSError"
v32@0:8@"NSString"16i24B28
B40@0:8@16^@24^@32
v48@0:8@16@24q32@40
^{CLTimeZoneManager=^{CLTimeZoneDatabase}{unique_ptr<CLDarwinNotifier_Type::Client, std::__1::default_delete<CLDarwinNotifier_Type::Client> >={__compressed_pair<CLDarwinNotifier_Type::Client *, std::__1::default_delete<CLDarwinNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLServiceLocationProvider_Type::Client, std::__1::default_delete<CLServiceLocationProvider_Type::Client> >={__compressed_pair<CLServiceLocationProvider_Type::Client *, std::__1::default_delete<CLServiceLocationProvider_Type::Client> >=^{Client}}}{unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client> >={__compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client> >={__compressed_pair<CLTelephonyService_Type::Client *, std::__1::default_delete<CLTelephonyService_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}@@dd{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}d{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLServiceLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBBBB^{__CLClient}^{__CLClient}^{__CLClient}^{__CFString}^{__CFString}@B}iiBB^{__CFRunLoopTimer}^{CLPersistentTimer}^{__CFRunLoopTimer}id^{__CFRunLoopTimer}ddddiddddddddd{CLDistanceCalc=ddddd}[29B]}16@0:8
v24@0:8^{CLTimeZoneManager=^{CLTimeZoneDatabase}{unique_ptr<CLDarwinNotifier_Type::Client, std::__1::default_delete<CLDarwinNotifier_Type::Client> >={__compressed_pair<CLDarwinNotifier_Type::Client *, std::__1::default_delete<CLDarwinNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLServiceLocationProvider_Type::Client, std::__1::default_delete<CLServiceLocationProvider_Type::Client> >={__compressed_pair<CLServiceLocationProvider_Type::Client *, std::__1::default_delete<CLServiceLocationProvider_Type::Client> >=^{Client}}}{unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client> >={__compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client> >={__compressed_pair<CLTelephonyService_Type::Client *, std::__1::default_delete<CLTelephonyService_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}@@dd{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}d{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLServiceLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBBBB^{__CLClient}^{__CLClient}^{__CLClient}^{__CFString}^{__CFString}@B}iiBB^{__CFRunLoopTimer}^{CLPersistentTimer}^{__CFRunLoopTimer}id^{__CFRunLoopTimer}ddddiddddddddd{CLDistanceCalc=ddddd}[29B]}16
^{CLTimeZoneManager=^{CLTimeZoneDatabase}{unique_ptr<CLDarwinNotifier_Type::Client, std::__1::default_delete<CLDarwinNotifier_Type::Client> >={__compressed_pair<CLDarwinNotifier_Type::Client *, std::__1::default_delete<CLDarwinNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLServiceLocationProvider_Type::Client, std::__1::default_delete<CLServiceLocationProvider_Type::Client> >={__compressed_pair<CLServiceLocationProvider_Type::Client *, std::__1::default_delete<CLServiceLocationProvider_Type::Client> >=^{Client}}}{unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client> >={__compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client> >={__compressed_pair<CLTelephonyService_Type::Client *, std::__1::default_delete<CLTelephonyService_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}@@dd{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}d{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLServiceLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBBBB^{__CLClient}^{__CLClient}^{__CLClient}^{__CFString}^{__CFString}@B}iiBB^{__CFRunLoopTimer}^{CLPersistentTimer}^{__CFRunLoopTimer}id^{__CFRunLoopTimer}ddddiddddddddd{CLDistanceCalc=ddddd}[29B]}
B32@0:8^{vector<CLFenceManager_Type::Fence, std::__1::allocator<CLFenceManager_Type::Fence> >=^{Fence}^{Fence}{__compressed_pair<CLFenceManager_Type::Fence *, std::__1::allocator<CLFenceManager_Type::Fence> >=^{Fence}}}16@24
v24@0:8@?<v@?^{CLFenceManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{CLFenceAuthorizationManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB^{CLFenceDatabase}B{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client> >={__compressed_pair<CLDataProtectionManager_Type::Client *, std::__1::default_delete<CLDataProtectionManager_Type::Client> >=^{Client}}}B@}{CLFenceMonitor=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{map<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<std::__1::pair<const CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus> > >={__tree<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>, std::__1::less<CLFenceManager_Type::Fence>, true>, std::__1::allocator<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>, std::__1::less<CLFenceManager_Type::Fence>, true> >=Q}}}{list<CLFenceManager_Type::CombinedFence, std::__1::allocator<CLFenceManager_Type::CombinedFence> >={__list_node_base<CLFenceManager_Type::CombinedFence, void *>=^{__list_node_base<CLFenceManager_Type::CombinedFence, void *>}^{__list_node_base<CLFenceManager_Type::CombinedFence, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLFenceManager_Type::CombinedFence, void *> > >=Q}}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLFenceMonitorCell=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{map<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<std::__1::pair<const CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus> > >={__tree<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus>, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus>, std::__1::less<CLFenceManager_Type::Fence>, true>, std::__1::allocator<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus>, std::__1::less<CLFenceManager_Type::Fence>, true> >=Q}}}I{map<CLCell, CLFenceMonitorCell::CellStatus, std::__1::less<CLCell>, std::__1::allocator<std::__1::pair<const CLCell, CLFenceMonitorCell::CellStatus> > >={__tree<std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus>, std::__1::__map_value_compare<CLCell, std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus>, std::__1::less<CLCell>, true>, std::__1::allocator<std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLCell, std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus>, std::__1::less<CLCell>, true> >=Q}}}{set<CLCell, std::__1::less<CLCell>, std::__1::allocator<CLCell> >={__tree<CLCell, std::__1::less<CLCell>, std::__1::allocator<CLCell> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<CLCell, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<CLCell> >=Q}}}{set<CLCell, std::__1::less<CLCell>, std::__1::allocator<CLCell> >={__tree<CLCell, std::__1::less<CLCell>, std::__1::allocator<CLCell> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<CLCell, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<CLCell> >=Q}}}^{__CFRunLoopTimer}{unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client> >={__compressed_pair<CLTelephonyService_Type::Client *, std::__1::default_delete<CLTelephonyService_Type::Client> >=^{Client}}}@{CLDistanceCalc=ddddd}}{CLFenceMonitorWifi=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{map<CLFenceManager_Type::Fence, bool, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<std::__1::pair<const CLFenceManager_Type::Fence, bool> > >={__tree<std::__1::__value_type<CLFenceManager_Type::Fence, bool>, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, bool>, std::__1::less<CLFenceManager_Type::Fence>, true>, std::__1::allocator<std::__1::__value_type<CLFenceManager_Type::Fence, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLFenceManager_Type::Fence, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, bool>, std::__1::less<CLFenceManager_Type::Fence>, true> >=Q}}}B@{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}@{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}BBBd{CLPowerAssertion=^^?i^v^{__CFString}dd@}dIB{vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}^{AccessPoint}{__compressed_pair<CLWifiService_Type::AccessPoint *, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}}}dB{AssociationState={optional<CLWifiService_Type::AccessPoint>=(?=c{AccessPoint={CLMacAddress=Q}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}iiiddB})B}}BddddddB{shared_ptr<CLWifiAccessPointLocationService>=^{CLWifiAccessPointLocationService}^{__shared_weak_count}}{CLFenceMonitorWifiLogicExternal=^^?@}{CLFenceMonitorWifiLogic=}}i{unique_ptr<CLBluetoothService_Type::Client, std::__1::default_delete<CLBluetoothService_Type::Client> >={__compressed_pair<CLBluetoothService_Type::Client *, std::__1::default_delete<CLBluetoothService_Type::Client> >=^{Client}}}{unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client> >={__compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> >=^{Client}}}{unique_ptr<CLFenceMonitorCell_Type::Client, std::__1::default_delete<CLFenceMonitorCell_Type::Client> >={__compressed_pair<CLFenceMonitorCell_Type::Client *, std::__1::default_delete<CLFenceMonitorCell_Type::Client> >=^{Client}}}{unique_ptr<CLFenceMonitorWifi_Type::Client, std::__1::default_delete<CLFenceMonitorWifi_Type::Client> >={__compressed_pair<CLFenceMonitorWifi_Type::Client *, std::__1::default_delete<CLFenceMonitorWifi_Type::Client> >=^{Client}}}{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLCompanionNotifier_Type::Client, std::__1::default_delete<CLCompanionNotifier_Type::Client> >={__compressed_pair<CLCompanionNotifier_Type::Client *, std::__1::default_delete<CLCompanionNotifier_Type::Client> >=^{Client}}}@@@BBBBBBB^{CLPersistentTimer}^{CLPersistentTimer}^{CLPersistentTimer}dd^{CLPersistentTimer}{CLPowerAssertion=^^?i^v^{__CFString}dd@}Bd{unique_ptr<CLGnssProvider_Type::Client, std::__1::default_delete<CLGnssProvider_Type::Client> >={__compressed_pair<CLGnssProvider_Type::Client *, std::__1::default_delete<CLGnssProvider_Type::Client> >=^{Client}}}diidiiddBBddBBBBdd^{__CFRunLoopTimer}BccdB^{CLPersistentTimer}ddddddddB@{CLDistanceCalc=ddddd}@@}{CLFenceDataDownloadManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{unique_ptr<CLNetworkLocationProvider_Type::Client, std::__1::default_delete<CLNetworkLocationProvider_Type::Client> >={__compressed_pair<CLNetworkLocationProvider_Type::Client *, std::__1::default_delete<CLNetworkLocationProvider_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLBTA_Type::Client, std::__1::default_delete<CLBTA_Type::Client> >={__compressed_pair<CLBTA_Type::Client *, std::__1::default_delete<CLBTA_Type::Client> >=^{Client}}}^{CLPersistentTimer}{list<CLFenceManager_Type::CombinedFence, std::__1::allocator<CLFenceManager_Type::CombinedFence> >={__list_node_base<CLFenceManager_Type::CombinedFence, void *>=^{__list_node_base<CLFenceManager_Type::CombinedFence, void *>}^{__list_node_base<CLFenceManager_Type::CombinedFence, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLFenceManager_Type::CombinedFence, void *> > >=Q}}dBB{Fence={basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}dddddidddiQi}{shared_ptr<CLWifiAccessPointLocationService>=^{CLWifiAccessPointLocationService}^{__shared_weak_count}}}{CLDistanceCalc=ddddd}B^{CLPersistentTimer}dd{map<CLFenceManager_Type::Fence, CLFenceManager::PendingFence, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<std::__1::pair<const CLFenceManager_Type::Fence, CLFenceManager::PendingFence> > >={__tree<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceManager::PendingFence>, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceManager::PendingFence>, std::__1::less<CLFenceManager_Type::Fence>, true>, std::__1::allocator<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceManager::PendingFence> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceManager::PendingFence>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceManager::PendingFence>, std::__1::less<CLFenceManager_Type::Fence>, true> >=Q}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLFenceMonitor_Type::Client, std::__1::default_delete<CLFenceMonitor_Type::Client> >={__compressed_pair<CLFenceMonitor_Type::Client *, std::__1::default_delete<CLFenceMonitor_Type::Client> >=^{Client}}}{unique_ptr<CLFenceDataDownloadManager_Type::Client, std::__1::default_delete<CLFenceDataDownloadManager_Type::Client> >={__compressed_pair<CLFenceDataDownloadManager_Type::Client *, std::__1::default_delete<CLFenceDataDownloadManager_Type::Client> >=^{Client}}}{unique_ptr<CLFenceAuthorizationManager_Type::Client, std::__1::default_delete<CLFenceAuthorizationManager_Type::Client> >={__compressed_pair<CLFenceAuthorizationManager_Type::Client *, std::__1::default_delete<CLFenceAuthorizationManager_Type::Client> >=^{Client}}}}>16
v32@0:8@?<v@?^{CLFenceManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{CLFenceAuthorizationManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB^{CLFenceDatabase}B{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client> >={__compressed_pair<CLDataProtectionManager_Type::Client *, std::__1::default_delete<CLDataProtectionManager_Type::Client> >=^{Client}}}B@}{CLFenceMonitor=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{map<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<std::__1::pair<const CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus> > >={__tree<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>, std::__1::less<CLFenceManager_Type::Fence>, true>, std::__1::allocator<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>, std::__1::less<CLFenceManager_Type::Fence>, true> >=Q}}}{list<CLFenceManager_Type::CombinedFence, std::__1::allocator<CLFenceManager_Type::CombinedFence> >={__list_node_base<CLFenceManager_Type::CombinedFence, void *>=^{__list_node_base<CLFenceManager_Type::CombinedFence, void *>}^{__list_node_base<CLFenceManager_Type::CombinedFence, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLFenceManager_Type::CombinedFence, void *> > >=Q}}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLFenceMonitorCell=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{map<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<std::__1::pair<const CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus> > >={__tree<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus>, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus>, std::__1::less<CLFenceManager_Type::Fence>, true>, std::__1::allocator<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus>, std::__1::less<CLFenceManager_Type::Fence>, true> >=Q}}}I{map<CLCell, CLFenceMonitorCell::CellStatus, std::__1::less<CLCell>, std::__1::allocator<std::__1::pair<const CLCell, CLFenceMonitorCell::CellStatus> > >={__tree<std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus>, std::__1::__map_value_compare<CLCell, std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus>, std::__1::less<CLCell>, true>, std::__1::allocator<std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLCell, std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus>, std::__1::less<CLCell>, true> >=Q}}}{set<CLCell, std::__1::less<CLCell>, std::__1::allocator<CLCell> >={__tree<CLCell, std::__1::less<CLCell>, std::__1::allocator<CLCell> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<CLCell, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<CLCell> >=Q}}}{set<CLCell, std::__1::less<CLCell>, std::__1::allocator<CLCell> >={__tree<CLCell, std::__1::less<CLCell>, std::__1::allocator<CLCell> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<CLCell, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<CLCell> >=Q}}}^{__CFRunLoopTimer}{unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client> >={__compressed_pair<CLTelephonyService_Type::Client *, std::__1::default_delete<CLTelephonyService_Type::Client> >=^{Client}}}@{CLDistanceCalc=ddddd}}{CLFenceMonitorWifi=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{map<CLFenceManager_Type::Fence, bool, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<std::__1::pair<const CLFenceManager_Type::Fence, bool> > >={__tree<std::__1::__value_type<CLFenceManager_Type::Fence, bool>, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, bool>, std::__1::less<CLFenceManager_Type::Fence>, true>, std::__1::allocator<std::__1::__value_type<CLFenceManager_Type::Fence, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLFenceManager_Type::Fence, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, bool>, std::__1::less<CLFenceManager_Type::Fence>, true> >=Q}}}B@{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}@{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}BBBd{CLPowerAssertion=^^?i^v^{__CFString}dd@}dIB{vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}^{AccessPoint}{__compressed_pair<CLWifiService_Type::AccessPoint *, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}}}dB{AssociationState={optional<CLWifiService_Type::AccessPoint>=(?=c{AccessPoint={CLMacAddress=Q}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}iiiddB})B}}BddddddB{shared_ptr<CLWifiAccessPointLocationService>=^{CLWifiAccessPointLocationService}^{__shared_weak_count}}{CLFenceMonitorWifiLogicExternal=^^?@}{CLFenceMonitorWifiLogic=}}i{unique_ptr<CLBluetoothService_Type::Client, std::__1::default_delete<CLBluetoothService_Type::Client> >={__compressed_pair<CLBluetoothService_Type::Client *, std::__1::default_delete<CLBluetoothService_Type::Client> >=^{Client}}}{unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client> >={__compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> >=^{Client}}}{unique_ptr<CLFenceMonitorCell_Type::Client, std::__1::default_delete<CLFenceMonitorCell_Type::Client> >={__compressed_pair<CLFenceMonitorCell_Type::Client *, std::__1::default_delete<CLFenceMonitorCell_Type::Client> >=^{Client}}}{unique_ptr<CLFenceMonitorWifi_Type::Client, std::__1::default_delete<CLFenceMonitorWifi_Type::Client> >={__compressed_pair<CLFenceMonitorWifi_Type::Client *, std::__1::default_delete<CLFenceMonitorWifi_Type::Client> >=^{Client}}}{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLCompanionNotifier_Type::Client, std::__1::default_delete<CLCompanionNotifier_Type::Client> >={__compressed_pair<CLCompanionNotifier_Type::Client *, std::__1::default_delete<CLCompanionNotifier_Type::Client> >=^{Client}}}@@@BBBBBBB^{CLPersistentTimer}^{CLPersistentTimer}^{CLPersistentTimer}dd^{CLPersistentTimer}{CLPowerAssertion=^^?i^v^{__CFString}dd@}Bd{unique_ptr<CLGnssProvider_Type::Client, std::__1::default_delete<CLGnssProvider_Type::Client> >={__compressed_pair<CLGnssProvider_Type::Client *, std::__1::default_delete<CLGnssProvider_Type::Client> >=^{Client}}}diidiiddBBddBBBBdd^{__CFRunLoopTimer}BccdB^{CLPersistentTimer}ddddddddB@{CLDistanceCalc=ddddd}@@}{CLFenceDataDownloadManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{unique_ptr<CLNetworkLocationProvider_Type::Client, std::__1::default_delete<CLNetworkLocationProvider_Type::Client> >={__compressed_pair<CLNetworkLocationProvider_Type::Client *, std::__1::default_delete<CLNetworkLocationProvider_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLBTA_Type::Client, std::__1::default_delete<CLBTA_Type::Client> >={__compressed_pair<CLBTA_Type::Client *, std::__1::default_delete<CLBTA_Type::Client> >=^{Client}}}^{CLPersistentTimer}{list<CLFenceManager_Type::CombinedFence, std::__1::allocator<CLFenceManager_Type::CombinedFence> >={__list_node_base<CLFenceManager_Type::CombinedFence, void *>=^{__list_node_base<CLFenceManager_Type::CombinedFence, void *>}^{__list_node_base<CLFenceManager_Type::CombinedFence, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLFenceManager_Type::CombinedFence, void *> > >=Q}}dBB{Fence={basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}dddddidddiQi}{shared_ptr<CLWifiAccessPointLocationService>=^{CLWifiAccessPointLocationService}^{__shared_weak_count}}}{CLDistanceCalc=ddddd}B^{CLPersistentTimer}dd{map<CLFenceManager_Type::Fence, CLFenceManager::PendingFence, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<std::__1::pair<const CLFenceManager_Type::Fence, CLFenceManager::PendingFence> > >={__tree<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceManager::PendingFence>, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceManager::PendingFence>, std::__1::less<CLFenceManager_Type::Fence>, true>, std::__1::allocator<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceManager::PendingFence> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceManager::PendingFence>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceManager::PendingFence>, std::__1::less<CLFenceManager_Type::Fence>, true> >=Q}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLFenceMonitor_Type::Client, std::__1::default_delete<CLFenceMonitor_Type::Client> >={__compressed_pair<CLFenceMonitor_Type::Client *, std::__1::default_delete<CLFenceMonitor_Type::Client> >=^{Client}}}{unique_ptr<CLFenceDataDownloadManager_Type::Client, std::__1::default_delete<CLFenceDataDownloadManager_Type::Client> >={__compressed_pair<CLFenceDataDownloadManager_Type::Client *, std::__1::default_delete<CLFenceDataDownloadManager_Type::Client> >=^{Client}}}{unique_ptr<CLFenceAuthorizationManager_Type::Client, std::__1::default_delete<CLFenceAuthorizationManager_Type::Client> >={__compressed_pair<CLFenceAuthorizationManager_Type::Client *, std::__1::default_delete<CLFenceAuthorizationManager_Type::Client> >=^{Client}}}}>16@?<v@?>24
B24@0:8@?<v@?^{CLFenceManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{CLFenceAuthorizationManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB^{CLFenceDatabase}B{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client> >={__compressed_pair<CLDataProtectionManager_Type::Client *, std::__1::default_delete<CLDataProtectionManager_Type::Client> >=^{Client}}}B@}{CLFenceMonitor=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{map<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<std::__1::pair<const CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus> > >={__tree<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>, std::__1::less<CLFenceManager_Type::Fence>, true>, std::__1::allocator<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>, std::__1::less<CLFenceManager_Type::Fence>, true> >=Q}}}{list<CLFenceManager_Type::CombinedFence, std::__1::allocator<CLFenceManager_Type::CombinedFence> >={__list_node_base<CLFenceManager_Type::CombinedFence, void *>=^{__list_node_base<CLFenceManager_Type::CombinedFence, void *>}^{__list_node_base<CLFenceManager_Type::CombinedFence, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLFenceManager_Type::CombinedFence, void *> > >=Q}}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLFenceMonitorCell=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{map<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<std::__1::pair<const CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus> > >={__tree<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus>, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus>, std::__1::less<CLFenceManager_Type::Fence>, true>, std::__1::allocator<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus>, std::__1::less<CLFenceManager_Type::Fence>, true> >=Q}}}I{map<CLCell, CLFenceMonitorCell::CellStatus, std::__1::less<CLCell>, std::__1::allocator<std::__1::pair<const CLCell, CLFenceMonitorCell::CellStatus> > >={__tree<std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus>, std::__1::__map_value_compare<CLCell, std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus>, std::__1::less<CLCell>, true>, std::__1::allocator<std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLCell, std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus>, std::__1::less<CLCell>, true> >=Q}}}{set<CLCell, std::__1::less<CLCell>, std::__1::allocator<CLCell> >={__tree<CLCell, std::__1::less<CLCell>, std::__1::allocator<CLCell> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<CLCell, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<CLCell> >=Q}}}{set<CLCell, std::__1::less<CLCell>, std::__1::allocator<CLCell> >={__tree<CLCell, std::__1::less<CLCell>, std::__1::allocator<CLCell> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<CLCell, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<CLCell> >=Q}}}^{__CFRunLoopTimer}{unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client> >={__compressed_pair<CLTelephonyService_Type::Client *, std::__1::default_delete<CLTelephonyService_Type::Client> >=^{Client}}}@{CLDistanceCalc=ddddd}}{CLFenceMonitorWifi=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{map<CLFenceManager_Type::Fence, bool, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<std::__1::pair<const CLFenceManager_Type::Fence, bool> > >={__tree<std::__1::__value_type<CLFenceManager_Type::Fence, bool>, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, bool>, std::__1::less<CLFenceManager_Type::Fence>, true>, std::__1::allocator<std::__1::__value_type<CLFenceManager_Type::Fence, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLFenceManager_Type::Fence, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, bool>, std::__1::less<CLFenceManager_Type::Fence>, true> >=Q}}}B@{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}@{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}BBBd{CLPowerAssertion=^^?i^v^{__CFString}dd@}dIB{vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}^{AccessPoint}{__compressed_pair<CLWifiService_Type::AccessPoint *, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}}}dB{AssociationState={optional<CLWifiService_Type::AccessPoint>=(?=c{AccessPoint={CLMacAddress=Q}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}iiiddB})B}}BddddddB{shared_ptr<CLWifiAccessPointLocationService>=^{CLWifiAccessPointLocationService}^{__shared_weak_count}}{CLFenceMonitorWifiLogicExternal=^^?@}{CLFenceMonitorWifiLogic=}}i{unique_ptr<CLBluetoothService_Type::Client, std::__1::default_delete<CLBluetoothService_Type::Client> >={__compressed_pair<CLBluetoothService_Type::Client *, std::__1::default_delete<CLBluetoothService_Type::Client> >=^{Client}}}{unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client> >={__compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> >=^{Client}}}{unique_ptr<CLFenceMonitorCell_Type::Client, std::__1::default_delete<CLFenceMonitorCell_Type::Client> >={__compressed_pair<CLFenceMonitorCell_Type::Client *, std::__1::default_delete<CLFenceMonitorCell_Type::Client> >=^{Client}}}{unique_ptr<CLFenceMonitorWifi_Type::Client, std::__1::default_delete<CLFenceMonitorWifi_Type::Client> >={__compressed_pair<CLFenceMonitorWifi_Type::Client *, std::__1::default_delete<CLFenceMonitorWifi_Type::Client> >=^{Client}}}{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLCompanionNotifier_Type::Client, std::__1::default_delete<CLCompanionNotifier_Type::Client> >={__compressed_pair<CLCompanionNotifier_Type::Client *, std::__1::default_delete<CLCompanionNotifier_Type::Client> >=^{Client}}}@@@BBBBBBB^{CLPersistentTimer}^{CLPersistentTimer}^{CLPersistentTimer}dd^{CLPersistentTimer}{CLPowerAssertion=^^?i^v^{__CFString}dd@}Bd{unique_ptr<CLGnssProvider_Type::Client, std::__1::default_delete<CLGnssProvider_Type::Client> >={__compressed_pair<CLGnssProvider_Type::Client *, std::__1::default_delete<CLGnssProvider_Type::Client> >=^{Client}}}diidiiddBBddBBBBdd^{__CFRunLoopTimer}BccdB^{CLPersistentTimer}ddddddddB@{CLDistanceCalc=ddddd}@@}{CLFenceDataDownloadManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{unique_ptr<CLNetworkLocationProvider_Type::Client, std::__1::default_delete<CLNetworkLocationProvider_Type::Client> >={__compressed_pair<CLNetworkLocationProvider_Type::Client *, std::__1::default_delete<CLNetworkLocationProvider_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLBTA_Type::Client, std::__1::default_delete<CLBTA_Type::Client> >={__compressed_pair<CLBTA_Type::Client *, std::__1::default_delete<CLBTA_Type::Client> >=^{Client}}}^{CLPersistentTimer}{list<CLFenceManager_Type::CombinedFence, std::__1::allocator<CLFenceManager_Type::CombinedFence> >={__list_node_base<CLFenceManager_Type::CombinedFence, void *>=^{__list_node_base<CLFenceManager_Type::CombinedFence, void *>}^{__list_node_base<CLFenceManager_Type::CombinedFence, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLFenceManager_Type::CombinedFence, void *> > >=Q}}dBB{Fence={basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}dddddidddiQi}{shared_ptr<CLWifiAccessPointLocationService>=^{CLWifiAccessPointLocationService}^{__shared_weak_count}}}{CLDistanceCalc=ddddd}B^{CLPersistentTimer}dd{map<CLFenceManager_Type::Fence, CLFenceManager::PendingFence, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<std::__1::pair<const CLFenceManager_Type::Fence, CLFenceManager::PendingFence> > >={__tree<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceManager::PendingFence>, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceManager::PendingFence>, std::__1::less<CLFenceManager_Type::Fence>, true>, std::__1::allocator<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceManager::PendingFence> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceManager::PendingFence>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceManager::PendingFence>, std::__1::less<CLFenceManager_Type::Fence>, true> >=Q}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLFenceMonitor_Type::Client, std::__1::default_delete<CLFenceMonitor_Type::Client> >={__compressed_pair<CLFenceMonitor_Type::Client *, std::__1::default_delete<CLFenceMonitor_Type::Client> >=^{Client}}}{unique_ptr<CLFenceDataDownloadManager_Type::Client, std::__1::default_delete<CLFenceDataDownloadManager_Type::Client> >={__compressed_pair<CLFenceDataDownloadManager_Type::Client *, std::__1::default_delete<CLFenceDataDownloadManager_Type::Client> >=^{Client}}}{unique_ptr<CLFenceAuthorizationManager_Type::Client, std::__1::default_delete<CLFenceAuthorizationManager_Type::Client> >={__compressed_pair<CLFenceAuthorizationManager_Type::Client *, std::__1::default_delete<CLFenceAuthorizationManager_Type::Client> >=^{Client}}}}>16
v24@0:8@?<{Fence={basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}dddddidddiQi}@?>16
B24@0:8@"NSString"16
B32@0:8^{vector<CLFenceManager_Type::Fence, std::__1::allocator<CLFenceManager_Type::Fence> >=^{Fence}^{Fence}{__compressed_pair<CLFenceManager_Type::Fence *, std::__1::allocator<CLFenceManager_Type::Fence> >=^{Fence}}}16@"NSString"24
^{CLFenceManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{CLFenceAuthorizationManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB^{CLFenceDatabase}B{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client> >={__compressed_pair<CLDataProtectionManager_Type::Client *, std::__1::default_delete<CLDataProtectionManager_Type::Client> >=^{Client}}}B@}{CLFenceMonitor=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{map<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<std::__1::pair<const CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus> > >={__tree<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>, std::__1::less<CLFenceManager_Type::Fence>, true>, std::__1::allocator<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>, std::__1::less<CLFenceManager_Type::Fence>, true> >=Q}}}{list<CLFenceManager_Type::CombinedFence, std::__1::allocator<CLFenceManager_Type::CombinedFence> >={__list_node_base<CLFenceManager_Type::CombinedFence, void *>=^{__list_node_base<CLFenceManager_Type::CombinedFence, void *>}^{__list_node_base<CLFenceManager_Type::CombinedFence, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLFenceManager_Type::CombinedFence, void *> > >=Q}}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLFenceMonitorCell=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{map<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<std::__1::pair<const CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus> > >={__tree<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus>, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus>, std::__1::less<CLFenceManager_Type::Fence>, true>, std::__1::allocator<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus>, std::__1::less<CLFenceManager_Type::Fence>, true> >=Q}}}I{map<CLCell, CLFenceMonitorCell::CellStatus, std::__1::less<CLCell>, std::__1::allocator<std::__1::pair<const CLCell, CLFenceMonitorCell::CellStatus> > >={__tree<std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus>, std::__1::__map_value_compare<CLCell, std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus>, std::__1::less<CLCell>, true>, std::__1::allocator<std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLCell, std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus>, std::__1::less<CLCell>, true> >=Q}}}{set<CLCell, std::__1::less<CLCell>, std::__1::allocator<CLCell> >={__tree<CLCell, std::__1::less<CLCell>, std::__1::allocator<CLCell> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<CLCell, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<CLCell> >=Q}}}{set<CLCell, std::__1::less<CLCell>, std::__1::allocator<CLCell> >={__tree<CLCell, std::__1::less<CLCell>, std::__1::allocator<CLCell> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<CLCell, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<CLCell> >=Q}}}^{__CFRunLoopTimer}{unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client> >={__compressed_pair<CLTelephonyService_Type::Client *, std::__1::default_delete<CLTelephonyService_Type::Client> >=^{Client}}}@{CLDistanceCalc=ddddd}}{CLFenceMonitorWifi=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{map<CLFenceManager_Type::Fence, bool, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<std::__1::pair<const CLFenceManager_Type::Fence, bool> > >={__tree<std::__1::__value_type<CLFenceManager_Type::Fence, bool>, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, bool>, std::__1::less<CLFenceManager_Type::Fence>, true>, std::__1::allocator<std::__1::__value_type<CLFenceManager_Type::Fence, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLFenceManager_Type::Fence, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, bool>, std::__1::less<CLFenceManager_Type::Fence>, true> >=Q}}}B@{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}@{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}BBBd{CLPowerAssertion=^^?i^v^{__CFString}dd@}dIB{vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}^{AccessPoint}{__compressed_pair<CLWifiService_Type::AccessPoint *, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}}}dB{AssociationState={optional<CLWifiService_Type::AccessPoint>=(?=c{AccessPoint={CLMacAddress=Q}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}iiiddB})B}}BddddddB{shared_ptr<CLWifiAccessPointLocationService>=^{CLWifiAccessPointLocationService}^{__shared_weak_count}}{CLFenceMonitorWifiLogicExternal=^^?@}{CLFenceMonitorWifiLogic=}}i{unique_ptr<CLBluetoothService_Type::Client, std::__1::default_delete<CLBluetoothService_Type::Client> >={__compressed_pair<CLBluetoothService_Type::Client *, std::__1::default_delete<CLBluetoothService_Type::Client> >=^{Client}}}{unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client> >={__compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> >=^{Client}}}{unique_ptr<CLFenceMonitorCell_Type::Client, std::__1::default_delete<CLFenceMonitorCell_Type::Client> >={__compressed_pair<CLFenceMonitorCell_Type::Client *, std::__1::default_delete<CLFenceMonitorCell_Type::Client> >=^{Client}}}{unique_ptr<CLFenceMonitorWifi_Type::Client, std::__1::default_delete<CLFenceMonitorWifi_Type::Client> >={__compressed_pair<CLFenceMonitorWifi_Type::Client *, std::__1::default_delete<CLFenceMonitorWifi_Type::Client> >=^{Client}}}{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLCompanionNotifier_Type::Client, std::__1::default_delete<CLCompanionNotifier_Type::Client> >={__compressed_pair<CLCompanionNotifier_Type::Client *, std::__1::default_delete<CLCompanionNotifier_Type::Client> >=^{Client}}}@@@BBBBBBB^{CLPersistentTimer}^{CLPersistentTimer}^{CLPersistentTimer}dd^{CLPersistentTimer}{CLPowerAssertion=^^?i^v^{__CFString}dd@}Bd{unique_ptr<CLGnssProvider_Type::Client, std::__1::default_delete<CLGnssProvider_Type::Client> >={__compressed_pair<CLGnssProvider_Type::Client *, std::__1::default_delete<CLGnssProvider_Type::Client> >=^{Client}}}diidiiddBBddBBBBdd^{__CFRunLoopTimer}BccdB^{CLPersistentTimer}ddddddddB@{CLDistanceCalc=ddddd}@@}{CLFenceDataDownloadManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{unique_ptr<CLNetworkLocationProvider_Type::Client, std::__1::default_delete<CLNetworkLocationProvider_Type::Client> >={__compressed_pair<CLNetworkLocationProvider_Type::Client *, std::__1::default_delete<CLNetworkLocationProvider_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLBTA_Type::Client, std::__1::default_delete<CLBTA_Type::Client> >={__compressed_pair<CLBTA_Type::Client *, std::__1::default_delete<CLBTA_Type::Client> >=^{Client}}}^{CLPersistentTimer}{list<CLFenceManager_Type::CombinedFence, std::__1::allocator<CLFenceManager_Type::CombinedFence> >={__list_node_base<CLFenceManager_Type::CombinedFence, void *>=^{__list_node_base<CLFenceManager_Type::CombinedFence, void *>}^{__list_node_base<CLFenceManager_Type::CombinedFence, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLFenceManager_Type::CombinedFence, void *> > >=Q}}dBB{Fence={basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}dddddidddiQi}{shared_ptr<CLWifiAccessPointLocationService>=^{CLWifiAccessPointLocationService}^{__shared_weak_count}}}{CLDistanceCalc=ddddd}B^{CLPersistentTimer}dd{map<CLFenceManager_Type::Fence, CLFenceManager::PendingFence, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<std::__1::pair<const CLFenceManager_Type::Fence, CLFenceManager::PendingFence> > >={__tree<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceManager::PendingFence>, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceManager::PendingFence>, std::__1::less<CLFenceManager_Type::Fence>, true>, std::__1::allocator<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceManager::PendingFence> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceManager::PendingFence>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceManager::PendingFence>, std::__1::less<CLFenceManager_Type::Fence>, true> >=Q}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLFenceMonitor_Type::Client, std::__1::default_delete<CLFenceMonitor_Type::Client> >={__compressed_pair<CLFenceMonitor_Type::Client *, std::__1::default_delete<CLFenceMonitor_Type::Client> >=^{Client}}}{unique_ptr<CLFenceDataDownloadManager_Type::Client, std::__1::default_delete<CLFenceDataDownloadManager_Type::Client> >={__compressed_pair<CLFenceDataDownloadManager_Type::Client *, std::__1::default_delete<CLFenceDataDownloadManager_Type::Client> >=^{Client}}}{unique_ptr<CLFenceAuthorizationManager_Type::Client, std::__1::default_delete<CLFenceAuthorizationManager_Type::Client> >={__compressed_pair<CLFenceAuthorizationManager_Type::Client *, std::__1::default_delete<CLFenceAuthorizationManager_Type::Client> >=^{Client}}}}16@0:8
@40@0:8d16d24d32
{?="value"b1}
{?="source"b1}
@36@0:8@16I24I28B32
@56@0:8@16I24I28B32Q36@44i52
@"CMMotionAlarmManager"
@"<PSYSyncCoordinatorDelegate>"
v28@0:8d16i24
v36@0:8d16i24@28
v24@0:8r^{CLStrideCalEntry=idIdddddiiddid}16
{CLStrideCalibrationSessionMetrics="session"i"startTime"d"endTime"d"sumCalibrationDistanceSuccess"d"sumCalibrationDistanceFailOther"d"sumCalibrationDistanceFailGps"d"sumCalibrationDistanceFailPedometer"d"sumCalibrationDistanceFailGradient"d"sumCalibrationDistanceInvalidGain"d"sumCalibrationDistanceInvalidSpeed"d"sumCalibrationDistanceInvalidLength"d"totalDistance"d}
{CMFixedSizeQueue<double, 2>="fHeadAndSize"{?="fHead"S"fSize"S}"fCapacity"I"fBuffer"[8c]"fStorage"{CMQueueStorage<double, 2>="buffer"[8c]}}
@68@0:8d16d24r*32B40^{CLPersistentTimer=@^?^v@{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}44@52d60
@"PCPersistentTimer"
^{CLPersistentTimer=@^?^v@{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}
{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >="__r_"{__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >="__first_"{__rep=""(?="__l"{__long="__cap_"Q"__size_"Q"__data_"*}"__s"{__short=""(?="__size_"C"__lx"c)"__data_"[23c]}"__r"{__raw="__words"[3Q]})}}}
{Name={basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}BBB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}BB}16@0:8
v128@0:8{Name={basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}BBB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}BB}16
@"<CLMotionAlarmNotifierClientProtocol>"
{Name="fExecutable"{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >="__r_"{__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >="__first_"{__rep=""(?="__l"{__long="__cap_"Q"__size_"Q"__data_"*}"__s"{__short=""(?="__size_"C"__lx"c)"__data_"[23c]}"__r"{__raw="__words"[3Q]})}}}"fBundlePath"{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >="__r_"{__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >="__first_"{__rep=""(?="__l"{__long="__cap_"Q"__size_"Q"__data_"*}"__s"{__short=""(?="__size_"C"__lx"c)"__data_"[23c]}"__r"{__raw="__words"[3Q]})}}}"fBundleRequiresProxy"B"fSystemService"B"fHarvestableSystemService"B"fBundleId"{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >="__r_"{__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >="__first_"{__rep=""(?="__l"{__long="__cap_"Q"__size_"Q"__data_"*}"__s"{__short=""(?="__size_"C"__lx"c)"__data_"[23c]}"__r"{__raw="__words"[3Q]})}}}"fPluginBundleId"{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >="__r_"{__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >="__first_"{__rep=""(?="__l"{__long="__cap_"Q"__size_"Q"__data_"*}"__s"{__short=""(?="__size_"C"__lx"c)"__data_"[23c]}"__r"{__raw="__words"[3Q]})}}}"fValidProxyData"B"fWatchKitPlugin"B}
v32@0:8^{Name={basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}BBB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}BB}16R@24
v24@0:8^{Name={basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}BBB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}BB}16
v24@0:8@?<v@?^{CLMotionAlarmNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLMotionAlarm_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionAlarm_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionAlarm_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionAlarm_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionAlarm_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionAlarm_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionAlarm_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLMotionAlarm_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionAlarm_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionAlarm_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionAlarm_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionAlarm_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionAlarm_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionAlarm_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBB{unique_ptr<CLMotionAlarmDatabase, std::__1::default_delete<CLMotionAlarmDatabase> >={__compressed_pair<CLMotionAlarmDatabase *, std::__1::default_delete<CLMotionAlarmDatabase> >=^{CLMotionAlarmDatabase}}}@@@{map<unsigned long long, std::__1::unique_ptr<CLPersistentTimer, std::__1::default_delete<CLPersistentTimer> >, std::__1::less<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::unique_ptr<CLPersistentTimer, std::__1::default_delete<CLPersistentTimer> > > > >={__tree<std::__1::__value_type<unsigned long long, std::__1::unique_ptr<CLPersistentTimer, std::__1::default_delete<CLPersistentTimer> > >, std::__1::__map_value_compare<unsigned long long, std::__1::__value_type<unsigned long long, std::__1::unique_ptr<CLPersistentTimer, std::__1::default_delete<CLPersistentTimer> > >, std::__1::less<unsigned long long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long long, std::__1::unique_ptr<CLPersistentTimer, std::__1::default_delete<CLPersistentTimer> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long long, std::__1::unique_ptr<CLPersistentTimer, std::__1::default_delete<CLPersistentTimer> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long long, std::__1::__value_type<unsigned long long, std::__1::unique_ptr<CLPersistentTimer, std::__1::default_delete<CLPersistentTimer> > >, std::__1::less<unsigned long long>, true> >=Q}}}{unique_ptr<CLPowerAssertion, std::__1::default_delete<CLPowerAssertion> >={__compressed_pair<CLPowerAssertion *, std::__1::default_delete<CLPowerAssertion> >=^{CLPowerAssertion}}}{unique_ptr<CLAppMonitor_Type::Client, std::__1::default_delete<CLAppMonitor_Type::Client> >={__compressed_pair<CLAppMonitor_Type::Client *, std::__1::default_delete<CLAppMonitor_Type::Client> >=^{Client}}}{unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client> >={__compressed_pair<CLDataProtectionManager_Type::Client *, std::__1::default_delete<CLDataProtectionManager_Type::Client> >=^{Client}}}{unique_ptr<CLCompanionNotifier_Type::Client, std::__1::default_delete<CLCompanionNotifier_Type::Client> >={__compressed_pair<CLCompanionNotifier_Type::Client *, std::__1::default_delete<CLCompanionNotifier_Type::Client> >=^{Client}}}}>16
v32@0:8@?<v@?^{CLMotionAlarmNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLMotionAlarm_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionAlarm_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionAlarm_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionAlarm_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionAlarm_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionAlarm_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionAlarm_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLMotionAlarm_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionAlarm_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionAlarm_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionAlarm_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionAlarm_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionAlarm_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionAlarm_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBB{unique_ptr<CLMotionAlarmDatabase, std::__1::default_delete<CLMotionAlarmDatabase> >={__compressed_pair<CLMotionAlarmDatabase *, std::__1::default_delete<CLMotionAlarmDatabase> >=^{CLMotionAlarmDatabase}}}@@@{map<unsigned long long, std::__1::unique_ptr<CLPersistentTimer, std::__1::default_delete<CLPersistentTimer> >, std::__1::less<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::unique_ptr<CLPersistentTimer, std::__1::default_delete<CLPersistentTimer> > > > >={__tree<std::__1::__value_type<unsigned long long, std::__1::unique_ptr<CLPersistentTimer, std::__1::default_delete<CLPersistentTimer> > >, std::__1::__map_value_compare<unsigned long long, std::__1::__value_type<unsigned long long, std::__1::unique_ptr<CLPersistentTimer, std::__1::default_delete<CLPersistentTimer> > >, std::__1::less<unsigned long long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long long, std::__1::unique_ptr<CLPersistentTimer, std::__1::default_delete<CLPersistentTimer> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long long, std::__1::unique_ptr<CLPersistentTimer, std::__1::default_delete<CLPersistentTimer> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long long, std::__1::__value_type<unsigned long long, std::__1::unique_ptr<CLPersistentTimer, std::__1::default_delete<CLPersistentTimer> > >, std::__1::less<unsigned long long>, true> >=Q}}}{unique_ptr<CLPowerAssertion, std::__1::default_delete<CLPowerAssertion> >={__compressed_pair<CLPowerAssertion *, std::__1::default_delete<CLPowerAssertion> >=^{CLPowerAssertion}}}{unique_ptr<CLAppMonitor_Type::Client, std::__1::default_delete<CLAppMonitor_Type::Client> >={__compressed_pair<CLAppMonitor_Type::Client *, std::__1::default_delete<CLAppMonitor_Type::Client> >=^{Client}}}{unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client> >={__compressed_pair<CLDataProtectionManager_Type::Client *, std::__1::default_delete<CLDataProtectionManager_Type::Client> >=^{Client}}}{unique_ptr<CLCompanionNotifier_Type::Client, std::__1::default_delete<CLCompanionNotifier_Type::Client> >={__compressed_pair<CLCompanionNotifier_Type::Client *, std::__1::default_delete<CLCompanionNotifier_Type::Client> >=^{Client}}}}>16@?<v@?>24
B24@0:8@?<v@?^{CLMotionAlarmNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLMotionAlarm_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionAlarm_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionAlarm_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionAlarm_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionAlarm_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionAlarm_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionAlarm_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLMotionAlarm_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionAlarm_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionAlarm_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionAlarm_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionAlarm_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionAlarm_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionAlarm_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBB{unique_ptr<CLMotionAlarmDatabase, std::__1::default_delete<CLMotionAlarmDatabase> >={__compressed_pair<CLMotionAlarmDatabase *, std::__1::default_delete<CLMotionAlarmDatabase> >=^{CLMotionAlarmDatabase}}}@@@{map<unsigned long long, std::__1::unique_ptr<CLPersistentTimer, std::__1::default_delete<CLPersistentTimer> >, std::__1::less<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::unique_ptr<CLPersistentTimer, std::__1::default_delete<CLPersistentTimer> > > > >={__tree<std::__1::__value_type<unsigned long long, std::__1::unique_ptr<CLPersistentTimer, std::__1::default_delete<CLPersistentTimer> > >, std::__1::__map_value_compare<unsigned long long, std::__1::__value_type<unsigned long long, std::__1::unique_ptr<CLPersistentTimer, std::__1::default_delete<CLPersistentTimer> > >, std::__1::less<unsigned long long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long long, std::__1::unique_ptr<CLPersistentTimer, std::__1::default_delete<CLPersistentTimer> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long long, std::__1::unique_ptr<CLPersistentTimer, std::__1::default_delete<CLPersistentTimer> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long long, std::__1::__value_type<unsigned long long, std::__1::unique_ptr<CLPersistentTimer, std::__1::default_delete<CLPersistentTimer> > >, std::__1::less<unsigned long long>, true> >=Q}}}{unique_ptr<CLPowerAssertion, std::__1::default_delete<CLPowerAssertion> >={__compressed_pair<CLPowerAssertion *, std::__1::default_delete<CLPowerAssertion> >=^{CLPowerAssertion}}}{unique_ptr<CLAppMonitor_Type::Client, std::__1::default_delete<CLAppMonitor_Type::Client> >={__compressed_pair<CLAppMonitor_Type::Client *, std::__1::default_delete<CLAppMonitor_Type::Client> >=^{Client}}}{unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client> >={__compressed_pair<CLDataProtectionManager_Type::Client *, std::__1::default_delete<CLDataProtectionManager_Type::Client> >=^{Client}}}{unique_ptr<CLCompanionNotifier_Type::Client, std::__1::default_delete<CLCompanionNotifier_Type::Client> >={__compressed_pair<CLCompanionNotifier_Type::Client *, std::__1::default_delete<CLCompanionNotifier_Type::Client> >=^{Client}}}}>16
v32@0:8^{Name={basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}BBB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}BB}16R@"<CLMotionAlarmNotifierClientProtocol>"24
v32@0:8@"CMMotionAlarm"16@?<v@?@"CMMotionAlarm"i>24
v32@0:8@"NSString"16@?<v@?i>24
v28@0:8@"CMMotionAlarm"16i24
^{CLMotionAlarmNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLMotionAlarm_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionAlarm_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionAlarm_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionAlarm_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionAlarm_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionAlarm_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionAlarm_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLMotionAlarm_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionAlarm_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionAlarm_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionAlarm_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionAlarm_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionAlarm_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionAlarm_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBB{unique_ptr<CLMotionAlarmDatabase, std::__1::default_delete<CLMotionAlarmDatabase> >={__compressed_pair<CLMotionAlarmDatabase *, std::__1::default_delete<CLMotionAlarmDatabase> >=^{CLMotionAlarmDatabase}}}@@@{map<unsigned long long, std::__1::unique_ptr<CLPersistentTimer, std::__1::default_delete<CLPersistentTimer> >, std::__1::less<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::unique_ptr<CLPersistentTimer, std::__1::default_delete<CLPersistentTimer> > > > >={__tree<std::__1::__value_type<unsigned long long, std::__1::unique_ptr<CLPersistentTimer, std::__1::default_delete<CLPersistentTimer> > >, std::__1::__map_value_compare<unsigned long long, std::__1::__value_type<unsigned long long, std::__1::unique_ptr<CLPersistentTimer, std::__1::default_delete<CLPersistentTimer> > >, std::__1::less<unsigned long long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long long, std::__1::unique_ptr<CLPersistentTimer, std::__1::default_delete<CLPersistentTimer> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long long, std::__1::unique_ptr<CLPersistentTimer, std::__1::default_delete<CLPersistentTimer> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long long, std::__1::__value_type<unsigned long long, std::__1::unique_ptr<CLPersistentTimer, std::__1::default_delete<CLPersistentTimer> > >, std::__1::less<unsigned long long>, true> >=Q}}}{unique_ptr<CLPowerAssertion, std::__1::default_delete<CLPowerAssertion> >={__compressed_pair<CLPowerAssertion *, std::__1::default_delete<CLPowerAssertion> >=^{CLPowerAssertion}}}{unique_ptr<CLAppMonitor_Type::Client, std::__1::default_delete<CLAppMonitor_Type::Client> >={__compressed_pair<CLAppMonitor_Type::Client *, std::__1::default_delete<CLAppMonitor_Type::Client> >=^{Client}}}{unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client> >={__compressed_pair<CLDataProtectionManager_Type::Client *, std::__1::default_delete<CLDataProtectionManager_Type::Client> >=^{Client}}}{unique_ptr<CLCompanionNotifier_Type::Client, std::__1::default_delete<CLCompanionNotifier_Type::Client> >={__compressed_pair<CLCompanionNotifier_Type::Client *, std::__1::default_delete<CLCompanionNotifier_Type::Client> >=^{Client}}}}16@0:8
{?="strokeAmp"b1"strokeFrequency"b1}
v24@0:8@?<v@?^{CLSimulatedLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBBBB}>16
v32@0:8@?<v@?^{CLSimulatedLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBBBB}>16@?<v@?>24
B24@0:8@?<v@?^{CLSimulatedLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBBBB}>16
^{CLSimulatedLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBBBB}16@0:8
{MotionFitnessDaily={Metric=Bd{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}i{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}BIIIIIIIIqqIIB}16@0:8
v24@0:8i16i20
v32@0:8@"CLCompanionSyncAuthObject"16@"NSString"24
v24@0:8@?<v@?^{CLCatherineNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{CLBodyMetrics=iffffffffif}@B{unique_ptr<CLNatalimetryNotifier_Type::Client, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >={__compressed_pair<CLNatalimetryNotifier_Type::Client *, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >=^{Client}}}}>16
v32@0:8@?<v@?^{CLCatherineNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{CLBodyMetrics=iffffffffif}@B{unique_ptr<CLNatalimetryNotifier_Type::Client, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >={__compressed_pair<CLNatalimetryNotifier_Type::Client *, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >=^{Client}}}}>16@?<v@?>24
B24@0:8@?<v@?^{CLCatherineNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{CLBodyMetrics=iffffffffif}@B{unique_ptr<CLNatalimetryNotifier_Type::Client, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >={__compressed_pair<CLNatalimetryNotifier_Type::Client *, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >=^{Client}}}}>16
^{CLCatherineNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{CLBodyMetrics=iffffffffif}@B{unique_ptr<CLNatalimetryNotifier_Type::Client, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >={__compressed_pair<CLNatalimetryNotifier_Type::Client *, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >=^{Client}}}}16@0:8
@56@0:8@16d24q32i40Q44i52
{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}16@0:8
@"NSSet"
{CLDaemonLocation="padding1"i"suitability"i"coordinate"{?="latitude"d"longitude"d}"horizontalAccuracy"d"altitude"d"verticalAccuracy"d"padding2"d"padding3"d"speed"d"speedAccuracy"d"course"d"courseAccuracy"d"timestamp"d"confidence"i"lifespan"d"type"i"rawCoordinate"{?="latitude"d"longitude"d}"rawCourse"d"floor"i"integrity"I"referenceFrame"i"rawReferenceFrame"i}
@"CLHarvestDataAccessPoint"
@"CLHarvestDataPoiMuid"
v24@0:8@?<v@?^{CLFallNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB@@B{CLPowerAssertion=^^?i^v^{__CFString}dd@}^{Dispatcher}{unique_ptr<CLAppMonitor_Type::Client, std::__1::default_delete<CLAppMonitor_Type::Client> >={__compressed_pair<CLAppMonitor_Type::Client *, std::__1::default_delete<CLAppMonitor_Type::Client> >=^{Client}}}{unique_ptr<CLCatherineNotifier_Type::Client, std::__1::default_delete<CLCatherineNotifier_Type::Client> >={__compressed_pair<CLCatherineNotifier_Type::Client *, std::__1::default_delete<CLCatherineNotifier_Type::Client> >=^{Client}}}}>16
v32@0:8@?<v@?^{CLFallNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB@@B{CLPowerAssertion=^^?i^v^{__CFString}dd@}^{Dispatcher}{unique_ptr<CLAppMonitor_Type::Client, std::__1::default_delete<CLAppMonitor_Type::Client> >={__compressed_pair<CLAppMonitor_Type::Client *, std::__1::default_delete<CLAppMonitor_Type::Client> >=^{Client}}}{unique_ptr<CLCatherineNotifier_Type::Client, std::__1::default_delete<CLCatherineNotifier_Type::Client> >={__compressed_pair<CLCatherineNotifier_Type::Client *, std::__1::default_delete<CLCatherineNotifier_Type::Client> >=^{Client}}}}>16@?<v@?>24
B24@0:8@?<v@?^{CLFallNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB@@B{CLPowerAssertion=^^?i^v^{__CFString}dd@}^{Dispatcher}{unique_ptr<CLAppMonitor_Type::Client, std::__1::default_delete<CLAppMonitor_Type::Client> >={__compressed_pair<CLAppMonitor_Type::Client *, std::__1::default_delete<CLAppMonitor_Type::Client> >=^{Client}}}{unique_ptr<CLCatherineNotifier_Type::Client, std::__1::default_delete<CLCatherineNotifier_Type::Client> >={__compressed_pair<CLCatherineNotifier_Type::Client *, std::__1::default_delete<CLCatherineNotifier_Type::Client> >=^{Client}}}}>16
^{CLFallNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB@@B{CLPowerAssertion=^^?i^v^{__CFString}dd@}^{Dispatcher}{unique_ptr<CLAppMonitor_Type::Client, std::__1::default_delete<CLAppMonitor_Type::Client> >={__compressed_pair<CLAppMonitor_Type::Client *, std::__1::default_delete<CLAppMonitor_Type::Client> >=^{Client}}}{unique_ptr<CLCatherineNotifier_Type::Client, std::__1::default_delete<CLCatherineNotifier_Type::Client> >={__compressed_pair<CLCatherineNotifier_Type::Client *, std::__1::default_delete<CLCatherineNotifier_Type::Client> >=^{Client}}}}16@0:8
v52@0:8{?=fff}16{?=fff}28i40f44f48
v40@0:8{?=fff}16{?=fff}28
B64@0:8{?=fff}16{?=fff}28^{?=fff}40^i48^B56
v24@0:8@?<v@?^{CLCompassDatabase=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{BasicMutex=^^?^{MutexInfo}}i}>16
v32@0:8@?<v@?^{CLCompassDatabase=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{BasicMutex=^^?^{MutexInfo}}i}>16@?<v@?>24
B24@0:8@?<v@?^{CLCompassDatabase=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{BasicMutex=^^?^{MutexInfo}}i}>16
^{CLCompassDatabase=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{BasicMutex=^^?^{MutexInfo}}i}16@0:8
v24@0:8r^(NotificationData={CLMotionActivity=iiiiBfdBiddii{?=b1b1b1b1b1}}B{DeviceTouchState=Bd}B)16
{vector<std::__1::pair<double, CLMotionActivity::Type>, std::__1::allocator<std::__1::pair<double, CLMotionActivity::Type> > >="__begin_"^{pair<double, CLMotionActivity::Type>}"__end_"^{pair<double, CLMotionActivity::Type>}"__end_cap_"{__compressed_pair<std::__1::pair<double, CLMotionActivity::Type> *, std::__1::allocator<std::__1::pair<double, CLMotionActivity::Type> > >="__first_"^{pair<double, CLMotionActivity::Type>}}}
^d16@0:8
d24@0:8Q16
v32@0:8^d16Q24
{?="list"^d"count"Q"size"Q}
@"<_CDContext>"
@"_CDContextualChangeRegistration"
@32@0:8q16@24
@"_CDContextualPredicate"
v24@0:8R@"<CLDuetMonitorClientProtocol>"16
v32@0:8@"_CDContextualPredicate"16R@"<CLDuetMonitorClientProtocol>"24
v40@0:8@"NSDate"16@"NSDate"24@?<v@?@"NSArray"@"NSError">32
v40@0:8@16q24@32
v32@0:8q16@24
v40@0:8q16@24R@32
@24@0:8q16
v48@0:8q16@24@32@?40
q24@0:8@16
@48@0:8@16d24d32@40
@"CLTilesManagerServerAppRecommendationResult"
@"LSApplicationProxy"
v32@0:8@"CLLocation"16@?<v@?@"NSArray">24
v24@0:8R@"<CLSuggestedActionClientProtocol>"16
v24@0:8@"NSArray"16
v140@0:8{MonitoredRegion=^^?{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}SSi{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}i}16i136
{unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider> >="__ptr_"{__compressed_pair<CLBundleLocationProvider *, std::__1::default_delete<CLBundleLocationProvider> >="__first_"^{CLBundleLocationProvider}}}
{unique_ptr<CLBundleLocationProvider_Type::Client, std::__1::default_delete<CLBundleLocationProvider_Type::Client> >="__ptr_"{__compressed_pair<CLBundleLocationProvider_Type::Client *, std::__1::default_delete<CLBundleLocationProvider_Type::Client> >="__first_"^{Client}}}
^{CLServiceLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBBBB^{__CLClient}^{__CLClient}^{__CLClient}^{__CFString}^{__CFString}@B}
{unique_ptr<CLServiceLocationProvider_Type::Client, std::__1::default_delete<CLServiceLocationProvider_Type::Client> >="__ptr_"{__compressed_pair<CLServiceLocationProvider_Type::Client *, std::__1::default_delete<CLServiceLocationProvider_Type::Client> >="__first_"^{Client}}}
{unique_ptr<CLSuggestedActionDatabase, std::__1::default_delete<CLSuggestedActionDatabase> >="__ptr_"{__compressed_pair<CLSuggestedActionDatabase *, std::__1::default_delete<CLSuggestedActionDatabase> >="__first_"^{CLSuggestedActionDatabase}}}
{unique_ptr<CLBTLEFenceManager_Type::Client, std::__1::default_delete<CLBTLEFenceManager_Type::Client> >="__ptr_"{__compressed_pair<CLBTLEFenceManager_Type::Client *, std::__1::default_delete<CLBTLEFenceManager_Type::Client> >="__first_"^{Client}}}
{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >="__ptr_"{__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >="__first_"^{Client}}}
@"NSUserActivity"
@"<CLTilesManagerProtocol>"
@"CLStoreServicesRequestor"
v24@0:8@?<v@?^{CLCompassDaemonClientNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB^{Dispatcher}}>16
v32@0:8@?<v@?^{CLCompassDaemonClientNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB^{Dispatcher}}>16@?<v@?>24
B24@0:8@?<v@?^{CLCompassDaemonClientNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB^{Dispatcher}}>16
^{CLCompassDaemonClientNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB^{Dispatcher}}16@0:8
@224@0:8{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}16q176d184q192q200@208d216
@"CLServiceVendor"16@0:8
@"CLServiceVendor"
v56@0:8@16S24q28B36B40B44d48
v36@0:8S16@20@28
@"IDSDevice"
@24@0:8d16
{?="timestamp"b1"metsHR"b1"metsWR"b1"recordId"b1}
^Q16@0:8
Q24@0:8Q16
v32@0:8^Q16Q24
{?="list"^Q"count"Q"size"Q}
{?="latitude"b1"locationId"b1"longitude"b1}
@48@0:8d16d24d32q40
v24@0:8^{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}16
@176@0:8{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}16
@32@0:8^{CLBundleLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBBBB^{__CLClient}^{__CLClient}^{__CLClient}^{__CFString}^{__CFString}@B}16@24
^{CLBundleLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBBBB^{__CLClient}^{__CLClient}^{__CLClient}^{__CFString}^{__CFString}@B}16@0:8
^{CLBundleLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBBBB^{__CLClient}^{__CLClient}^{__CLClient}^{__CFString}^{__CFString}@B}
@24@0:8r^{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}16
^{CLSimulationController={BasicMutex=^^?^{MutexInfo}}@@@@@@@{list<CLDaemonLocation, std::__1::allocator<CLDaemonLocation> >={__list_node_base<CLDaemonLocation, void *>=^{__list_node_base<CLDaemonLocation, void *>}^{__list_node_base<CLDaemonLocation, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLDaemonLocation, void *> > >=Q}}Bd{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}^{__CFRunLoopTimer}dddddii^{__CFURL}}16@0:8
v24@0:8^{CLSimulationController={BasicMutex=^^?^{MutexInfo}}@@@@@@@{list<CLDaemonLocation, std::__1::allocator<CLDaemonLocation> >={__list_node_base<CLDaemonLocation, void *>=^{__list_node_base<CLDaemonLocation, void *>}^{__list_node_base<CLDaemonLocation, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLDaemonLocation, void *> > >=Q}}Bd{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}^{__CFRunLoopTimer}dddddii^{__CFURL}}16
^{CLSimulationController={BasicMutex=^^?^{MutexInfo}}@@@@@@@{list<CLDaemonLocation, std::__1::allocator<CLDaemonLocation> >={__list_node_base<CLDaemonLocation, void *>=^{__list_node_base<CLDaemonLocation, void *>}^{__list_node_base<CLDaemonLocation, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLDaemonLocation, void *> > >=Q}}Bd{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}^{__CFRunLoopTimer}dddddii^{__CFURL}}
{CLExtendedStepCountEntry=d{CLStepCountEntry=dddIddIIdddi^{__CFString}BB{CLAccelerometerPace=ddd}IIC}{CLStepCountEntryAddition=ddIddddBd}}24@0:8^{CLStepCountEntry=dddIddIIdddi^{__CFString}BB{CLAccelerometerPace=ddd}IIC}16
v24@0:8@?<v@?^{CLBluetoothService=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB^{__CFRunLoopSource}B{map<std::__1::basic_string<char>, CLBluetoothService_Type::Device, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, CLBluetoothService_Type::Device> > >={__tree<std::__1::__value_type<std::__1::basic_string<char>, CLBluetoothService_Type::Device>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, CLBluetoothService_Type::Device>, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, CLBluetoothService_Type::Device> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, CLBluetoothService_Type::Device>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, CLBluetoothService_Type::Device>, std::__1::less<std::__1::basic_string<char> >, true> >=Q}}}}>16
v32@0:8@?<v@?^{CLBluetoothService=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB^{__CFRunLoopSource}B{map<std::__1::basic_string<char>, CLBluetoothService_Type::Device, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, CLBluetoothService_Type::Device> > >={__tree<std::__1::__value_type<std::__1::basic_string<char>, CLBluetoothService_Type::Device>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, CLBluetoothService_Type::Device>, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, CLBluetoothService_Type::Device> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, CLBluetoothService_Type::Device>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, CLBluetoothService_Type::Device>, std::__1::less<std::__1::basic_string<char> >, true> >=Q}}}}>16@?<v@?>24
B24@0:8@?<v@?^{CLBluetoothService=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB^{__CFRunLoopSource}B{map<std::__1::basic_string<char>, CLBluetoothService_Type::Device, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, CLBluetoothService_Type::Device> > >={__tree<std::__1::__value_type<std::__1::basic_string<char>, CLBluetoothService_Type::Device>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, CLBluetoothService_Type::Device>, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, CLBluetoothService_Type::Device> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, CLBluetoothService_Type::Device>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, CLBluetoothService_Type::Device>, std::__1::less<std::__1::basic_string<char> >, true> >=Q}}}}>16
^{CLBluetoothService=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB^{__CFRunLoopSource}B{map<std::__1::basic_string<char>, CLBluetoothService_Type::Device, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, CLBluetoothService_Type::Device> > >={__tree<std::__1::__value_type<std::__1::basic_string<char>, CLBluetoothService_Type::Device>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, CLBluetoothService_Type::Device>, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, CLBluetoothService_Type::Device> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, CLBluetoothService_Type::Device>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, CLBluetoothService_Type::Device>, std::__1::less<std::__1::basic_string<char> >, true> >=Q}}}}16@0:8
@124@0:8d16d24i32d36@44@52q60@68@76@84@92@100@108i116i120
v24@0:8@?<v@?^{CLOnBodyNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBB}>16
v32@0:8@?<v@?^{CLOnBodyNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBB}>16@?<v@?>24
B24@0:8@?<v@?^{CLOnBodyNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBB}>16
^{CLOnBodyNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBB}16@0:8
v24@0:8^{_CLFitnessMachineData=dddddqqqdddddd}16
@100@0:8@16@24@32d40{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}48{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}72B96
B32@0:8Q16Q24
v40@0:8Q16d24d32
v48@0:8Q16d24d32Q40
B24@0:8Q16
Q24@0:8d16
v40@0:8d16d24d32
{vector<double, std::__1::allocator<double> >="__begin_"^d"__end_"^d"__end_cap_"{__compressed_pair<double *, std::__1::allocator<double> >="__first_"^d}}
{?="authMask"b1"notification"b1"clearClient"b1}
v24@0:8@?<v@?^{CLPressureCalibrationDatabase=^^?{unique_ptr<CLSensorCalibrationController_Type::Client, std::__1::default_delete<CLSensorCalibrationController_Type::Client> >={__compressed_pair<CLSensorCalibrationController_Type::Client *, std::__1::default_delete<CLSensorCalibrationController_Type::Client> >=^{Client}}}B^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{MotionBarometerCalibration={Metric=Bd{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}Ifff}{CLSqliteDatabase=^^?^{sqlite3}^{Mutex}{list<sqlite3_stmt *, std::__1::allocator<sqlite3_stmt *> >={__list_node_base<sqlite3_stmt *, void *>=^{__list_node_base<sqlite3_stmt *, void *>}^{__list_node_base<sqlite3_stmt *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<sqlite3_stmt *, void *> > >=Q}}{SqliteProperties=iiBB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}i@}i{TemperatureOffsetCoefficientRound=ffi}{vector<CLPressureCalibrationDatabase::TemperatureOffsetCoefficientRound, std::__1::allocator<CLPressureCalibrationDatabase::TemperatureOffsetCoefficientRound> >=^{TemperatureOffsetCoefficientRound}^{TemperatureOffsetCoefficientRound}{__compressed_pair<CLPressureCalibrationDatabase::TemperatureOffsetCoefficientRound *, std::__1::allocator<CLPressureCalibrationDatabase::TemperatureOffsetCoefficientRound> >=^{TemperatureOffsetCoefficientRound}}}B{?=ffd}^{Dispatcher}i{CLRobustSlopeEstimator=f{deque<float, std::__1::allocator<float> >={__split_buffer<float *, std::__1::allocator<float *> >=^^f^^f^^f{__compressed_pair<float **, std::__1::allocator<float *> >=^^f}}Q{__compressed_pair<unsigned long, std::__1::allocator<float> >=Q}}{map<int, std::__1::deque<CLPressure::Sample, std::__1::allocator<CLPressure::Sample> >, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, std::__1::deque<CLPressure::Sample, std::__1::allocator<CLPressure::Sample> > > > >={__tree<std::__1::__value_type<int, std::__1::deque<CLPressure::Sample, std::__1::allocator<CLPressure::Sample> > >, std::__1::__map_value_compare<int, std::__1::__value_type<int, std::__1::deque<CLPressure::Sample, std::__1::allocator<CLPressure::Sample> > >, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, std::__1::deque<CLPressure::Sample, std::__1::allocator<CLPressure::Sample> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, std::__1::deque<CLPressure::Sample, std::__1::allocator<CLPressure::Sample> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, std::__1::deque<CLPressure::Sample, std::__1::allocator<CLPressure::Sample> > >, std::__1::less<int>, true> >=Q}}}{map<int, int, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, int> > >={__tree<std::__1::__value_type<int, int>, std::__1::__map_value_compare<int, std::__1::__value_type<int, int>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, int> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, int>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, int>, std::__1::less<int>, true> >=Q}}}ii}}>16
v32@0:8@?<v@?^{CLPressureCalibrationDatabase=^^?{unique_ptr<CLSensorCalibrationController_Type::Client, std::__1::default_delete<CLSensorCalibrationController_Type::Client> >={__compressed_pair<CLSensorCalibrationController_Type::Client *, std::__1::default_delete<CLSensorCalibrationController_Type::Client> >=^{Client}}}B^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{MotionBarometerCalibration={Metric=Bd{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}Ifff}{CLSqliteDatabase=^^?^{sqlite3}^{Mutex}{list<sqlite3_stmt *, std::__1::allocator<sqlite3_stmt *> >={__list_node_base<sqlite3_stmt *, void *>=^{__list_node_base<sqlite3_stmt *, void *>}^{__list_node_base<sqlite3_stmt *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<sqlite3_stmt *, void *> > >=Q}}{SqliteProperties=iiBB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}i@}i{TemperatureOffsetCoefficientRound=ffi}{vector<CLPressureCalibrationDatabase::TemperatureOffsetCoefficientRound, std::__1::allocator<CLPressureCalibrationDatabase::TemperatureOffsetCoefficientRound> >=^{TemperatureOffsetCoefficientRound}^{TemperatureOffsetCoefficientRound}{__compressed_pair<CLPressureCalibrationDatabase::TemperatureOffsetCoefficientRound *, std::__1::allocator<CLPressureCalibrationDatabase::TemperatureOffsetCoefficientRound> >=^{TemperatureOffsetCoefficientRound}}}B{?=ffd}^{Dispatcher}i{CLRobustSlopeEstimator=f{deque<float, std::__1::allocator<float> >={__split_buffer<float *, std::__1::allocator<float *> >=^^f^^f^^f{__compressed_pair<float **, std::__1::allocator<float *> >=^^f}}Q{__compressed_pair<unsigned long, std::__1::allocator<float> >=Q}}{map<int, std::__1::deque<CLPressure::Sample, std::__1::allocator<CLPressure::Sample> >, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, std::__1::deque<CLPressure::Sample, std::__1::allocator<CLPressure::Sample> > > > >={__tree<std::__1::__value_type<int, std::__1::deque<CLPressure::Sample, std::__1::allocator<CLPressure::Sample> > >, std::__1::__map_value_compare<int, std::__1::__value_type<int, std::__1::deque<CLPressure::Sample, std::__1::allocator<CLPressure::Sample> > >, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, std::__1::deque<CLPressure::Sample, std::__1::allocator<CLPressure::Sample> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, std::__1::deque<CLPressure::Sample, std::__1::allocator<CLPressure::Sample> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, std::__1::deque<CLPressure::Sample, std::__1::allocator<CLPressure::Sample> > >, std::__1::less<int>, true> >=Q}}}{map<int, int, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, int> > >={__tree<std::__1::__value_type<int, int>, std::__1::__map_value_compare<int, std::__1::__value_type<int, int>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, int> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, int>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, int>, std::__1::less<int>, true> >=Q}}}ii}}>16@?<v@?>24
B24@0:8@?<v@?^{CLPressureCalibrationDatabase=^^?{unique_ptr<CLSensorCalibrationController_Type::Client, std::__1::default_delete<CLSensorCalibrationController_Type::Client> >={__compressed_pair<CLSensorCalibrationController_Type::Client *, std::__1::default_delete<CLSensorCalibrationController_Type::Client> >=^{Client}}}B^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{MotionBarometerCalibration={Metric=Bd{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}Ifff}{CLSqliteDatabase=^^?^{sqlite3}^{Mutex}{list<sqlite3_stmt *, std::__1::allocator<sqlite3_stmt *> >={__list_node_base<sqlite3_stmt *, void *>=^{__list_node_base<sqlite3_stmt *, void *>}^{__list_node_base<sqlite3_stmt *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<sqlite3_stmt *, void *> > >=Q}}{SqliteProperties=iiBB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}i@}i{TemperatureOffsetCoefficientRound=ffi}{vector<CLPressureCalibrationDatabase::TemperatureOffsetCoefficientRound, std::__1::allocator<CLPressureCalibrationDatabase::TemperatureOffsetCoefficientRound> >=^{TemperatureOffsetCoefficientRound}^{TemperatureOffsetCoefficientRound}{__compressed_pair<CLPressureCalibrationDatabase::TemperatureOffsetCoefficientRound *, std::__1::allocator<CLPressureCalibrationDatabase::TemperatureOffsetCoefficientRound> >=^{TemperatureOffsetCoefficientRound}}}B{?=ffd}^{Dispatcher}i{CLRobustSlopeEstimator=f{deque<float, std::__1::allocator<float> >={__split_buffer<float *, std::__1::allocator<float *> >=^^f^^f^^f{__compressed_pair<float **, std::__1::allocator<float *> >=^^f}}Q{__compressed_pair<unsigned long, std::__1::allocator<float> >=Q}}{map<int, std::__1::deque<CLPressure::Sample, std::__1::allocator<CLPressure::Sample> >, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, std::__1::deque<CLPressure::Sample, std::__1::allocator<CLPressure::Sample> > > > >={__tree<std::__1::__value_type<int, std::__1::deque<CLPressure::Sample, std::__1::allocator<CLPressure::Sample> > >, std::__1::__map_value_compare<int, std::__1::__value_type<int, std::__1::deque<CLPressure::Sample, std::__1::allocator<CLPressure::Sample> > >, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, std::__1::deque<CLPressure::Sample, std::__1::allocator<CLPressure::Sample> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, std::__1::deque<CLPressure::Sample, std::__1::allocator<CLPressure::Sample> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, std::__1::deque<CLPressure::Sample, std::__1::allocator<CLPressure::Sample> > >, std::__1::less<int>, true> >=Q}}}{map<int, int, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, int> > >={__tree<std::__1::__value_type<int, int>, std::__1::__map_value_compare<int, std::__1::__value_type<int, int>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, int> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, int>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, int>, std::__1::less<int>, true> >=Q}}}ii}}>16
^{CLPressureCalibrationDatabase=^^?{unique_ptr<CLSensorCalibrationController_Type::Client, std::__1::default_delete<CLSensorCalibrationController_Type::Client> >={__compressed_pair<CLSensorCalibrationController_Type::Client *, std::__1::default_delete<CLSensorCalibrationController_Type::Client> >=^{Client}}}B^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{MotionBarometerCalibration={Metric=Bd{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}Ifff}{CLSqliteDatabase=^^?^{sqlite3}^{Mutex}{list<sqlite3_stmt *, std::__1::allocator<sqlite3_stmt *> >={__list_node_base<sqlite3_stmt *, void *>=^{__list_node_base<sqlite3_stmt *, void *>}^{__list_node_base<sqlite3_stmt *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<sqlite3_stmt *, void *> > >=Q}}{SqliteProperties=iiBB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}i@}i{TemperatureOffsetCoefficientRound=ffi}{vector<CLPressureCalibrationDatabase::TemperatureOffsetCoefficientRound, std::__1::allocator<CLPressureCalibrationDatabase::TemperatureOffsetCoefficientRound> >=^{TemperatureOffsetCoefficientRound}^{TemperatureOffsetCoefficientRound}{__compressed_pair<CLPressureCalibrationDatabase::TemperatureOffsetCoefficientRound *, std::__1::allocator<CLPressureCalibrationDatabase::TemperatureOffsetCoefficientRound> >=^{TemperatureOffsetCoefficientRound}}}B{?=ffd}^{Dispatcher}i{CLRobustSlopeEstimator=f{deque<float, std::__1::allocator<float> >={__split_buffer<float *, std::__1::allocator<float *> >=^^f^^f^^f{__compressed_pair<float **, std::__1::allocator<float *> >=^^f}}Q{__compressed_pair<unsigned long, std::__1::allocator<float> >=Q}}{map<int, std::__1::deque<CLPressure::Sample, std::__1::allocator<CLPressure::Sample> >, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, std::__1::deque<CLPressure::Sample, std::__1::allocator<CLPressure::Sample> > > > >={__tree<std::__1::__value_type<int, std::__1::deque<CLPressure::Sample, std::__1::allocator<CLPressure::Sample> > >, std::__1::__map_value_compare<int, std::__1::__value_type<int, std::__1::deque<CLPressure::Sample, std::__1::allocator<CLPressure::Sample> > >, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, std::__1::deque<CLPressure::Sample, std::__1::allocator<CLPressure::Sample> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, std::__1::deque<CLPressure::Sample, std::__1::allocator<CLPressure::Sample> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, std::__1::deque<CLPressure::Sample, std::__1::allocator<CLPressure::Sample> > >, std::__1::less<int>, true> >=Q}}}{map<int, int, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, int> > >={__tree<std::__1::__value_type<int, int>, std::__1::__map_value_compare<int, std::__1::__value_type<int, int>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, int> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, int>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, int>, std::__1::less<int>, true> >=Q}}}ii}}16@0:8
v24@0:8R@"<CLCapabilityMonitorClientProtocol>"16
{?="elevationDescended"b1"gradeType"b1"verticalSpeed"b1}
v36@0:8@16d24i32
v24@0:8@?<v@?dd>16
v36@0:8@"NSString"16d24i32
v24@0:8@?<v@?^{CLSignificantChangeManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBBBB{CLDistanceCalc=ddddd}B^{CLPersistentTimer}{CLPersistentStore=^^?^{__CFDictionary}@Bid^{__CFRunLoopTimer}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}i}{set<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > >={__tree<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::basic_string<char>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<std::__1::basic_string<char> > >=Q}}}dd{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}BBB{RegInfo={MonitoringParameters=ddB}{MonitoringParameters=ddB}}d{unique_ptr<CLLocationAwarenessProvider_Type::Client, std::__1::default_delete<CLLocationAwarenessProvider_Type::Client> >={__compressed_pair<CLLocationAwarenessProvider_Type::Client *, std::__1::default_delete<CLLocationAwarenessProvider_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLDarwinNotifier_Type::Client, std::__1::default_delete<CLDarwinNotifier_Type::Client> >={__compressed_pair<CLDarwinNotifier_Type::Client *, std::__1::default_delete<CLDarwinNotifier_Type::Client> >=^{Client}}}Bd^{__CFRunLoopTimer}B@}>16
v32@0:8@?<v@?^{CLSignificantChangeManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBBBB{CLDistanceCalc=ddddd}B^{CLPersistentTimer}{CLPersistentStore=^^?^{__CFDictionary}@Bid^{__CFRunLoopTimer}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}i}{set<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > >={__tree<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::basic_string<char>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<std::__1::basic_string<char> > >=Q}}}dd{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}BBB{RegInfo={MonitoringParameters=ddB}{MonitoringParameters=ddB}}d{unique_ptr<CLLocationAwarenessProvider_Type::Client, std::__1::default_delete<CLLocationAwarenessProvider_Type::Client> >={__compressed_pair<CLLocationAwarenessProvider_Type::Client *, std::__1::default_delete<CLLocationAwarenessProvider_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLDarwinNotifier_Type::Client, std::__1::default_delete<CLDarwinNotifier_Type::Client> >={__compressed_pair<CLDarwinNotifier_Type::Client *, std::__1::default_delete<CLDarwinNotifier_Type::Client> >=^{Client}}}Bd^{__CFRunLoopTimer}B@}>16@?<v@?>24
B24@0:8@?<v@?^{CLSignificantChangeManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBBBB{CLDistanceCalc=ddddd}B^{CLPersistentTimer}{CLPersistentStore=^^?^{__CFDictionary}@Bid^{__CFRunLoopTimer}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}i}{set<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > >={__tree<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::basic_string<char>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<std::__1::basic_string<char> > >=Q}}}dd{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}BBB{RegInfo={MonitoringParameters=ddB}{MonitoringParameters=ddB}}d{unique_ptr<CLLocationAwarenessProvider_Type::Client, std::__1::default_delete<CLLocationAwarenessProvider_Type::Client> >={__compressed_pair<CLLocationAwarenessProvider_Type::Client *, std::__1::default_delete<CLLocationAwarenessProvider_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLDarwinNotifier_Type::Client, std::__1::default_delete<CLDarwinNotifier_Type::Client> >={__compressed_pair<CLDarwinNotifier_Type::Client *, std::__1::default_delete<CLDarwinNotifier_Type::Client> >=^{Client}}}Bd^{__CFRunLoopTimer}B@}>16
^{CLSignificantChangeManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBBBB{CLDistanceCalc=ddddd}B^{CLPersistentTimer}{CLPersistentStore=^^?^{__CFDictionary}@Bid^{__CFRunLoopTimer}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}i}{set<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > >={__tree<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::basic_string<char>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<std::__1::basic_string<char> > >=Q}}}dd{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}BBB{RegInfo={MonitoringParameters=ddB}{MonitoringParameters=ddB}}d{unique_ptr<CLLocationAwarenessProvider_Type::Client, std::__1::default_delete<CLLocationAwarenessProvider_Type::Client> >={__compressed_pair<CLLocationAwarenessProvider_Type::Client *, std::__1::default_delete<CLLocationAwarenessProvider_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLDarwinNotifier_Type::Client, std::__1::default_delete<CLDarwinNotifier_Type::Client> >={__compressed_pair<CLDarwinNotifier_Type::Client *, std::__1::default_delete<CLDarwinNotifier_Type::Client> >=^{Client}}}Bd^{__CFRunLoopTimer}B@}16@0:8
@48@0:8d16d24q32d40
^{CLApplicationLifecycleManager=@{unique_ptr<CLAppMonitor_Type::Client, std::__1::default_delete<CLAppMonitor_Type::Client> >={__compressed_pair<CLAppMonitor_Type::Client *, std::__1::default_delete<CLAppMonitor_Type::Client> >=^{Client}}}{unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client> >={__compressed_pair<CLDataProtectionManager_Type::Client *, std::__1::default_delete<CLDataProtectionManager_Type::Client> >=^{Client}}}{list<CLApplicationLifecycleManager::PendingLaunch, std::__1::allocator<CLApplicationLifecycleManager::PendingLaunch> >={__list_node_base<CLApplicationLifecycleManager::PendingLaunch, void *>=^{__list_node_base<CLApplicationLifecycleManager::PendingLaunch, void *>}^{__list_node_base<CLApplicationLifecycleManager::PendingLaunch, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLApplicationLifecycleManager::PendingLaunch, void *> > >=Q}}B}16@0:8
v24@0:8^{CLApplicationLifecycleManager=@{unique_ptr<CLAppMonitor_Type::Client, std::__1::default_delete<CLAppMonitor_Type::Client> >={__compressed_pair<CLAppMonitor_Type::Client *, std::__1::default_delete<CLAppMonitor_Type::Client> >=^{Client}}}{unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client> >={__compressed_pair<CLDataProtectionManager_Type::Client *, std::__1::default_delete<CLDataProtectionManager_Type::Client> >=^{Client}}}{list<CLApplicationLifecycleManager::PendingLaunch, std::__1::allocator<CLApplicationLifecycleManager::PendingLaunch> >={__list_node_base<CLApplicationLifecycleManager::PendingLaunch, void *>=^{__list_node_base<CLApplicationLifecycleManager::PendingLaunch, void *>}^{__list_node_base<CLApplicationLifecycleManager::PendingLaunch, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLApplicationLifecycleManager::PendingLaunch, void *> > >=Q}}B}16
^{CLApplicationLifecycleManager=@{unique_ptr<CLAppMonitor_Type::Client, std::__1::default_delete<CLAppMonitor_Type::Client> >={__compressed_pair<CLAppMonitor_Type::Client *, std::__1::default_delete<CLAppMonitor_Type::Client> >=^{Client}}}{unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client> >={__compressed_pair<CLDataProtectionManager_Type::Client *, std::__1::default_delete<CLDataProtectionManager_Type::Client> >=^{Client}}}{list<CLApplicationLifecycleManager::PendingLaunch, std::__1::allocator<CLApplicationLifecycleManager::PendingLaunch> >={__list_node_base<CLApplicationLifecycleManager::PendingLaunch, void *>=^{__list_node_base<CLApplicationLifecycleManager::PendingLaunch, void *>}^{__list_node_base<CLApplicationLifecycleManager::PendingLaunch, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLApplicationLifecycleManager::PendingLaunch, void *> > >=Q}}B}
v44@0:8i16d20d28Q36
v24@0:8@?<v@?^{CLCoarseCellTilesManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{unique_ptr<CLFileDownload, std::__1::default_delete<CLFileDownload> >={__compressed_pair<CLFileDownload *, std::__1::default_delete<CLFileDownload> >=^{CLFileDownload}}}BBdBiBBii{unique_ptr<CLICoarseCellTilesManagerExternal, std::__1::default_delete<CLICoarseCellTilesManagerExternal> >={__compressed_pair<CLICoarseCellTilesManagerExternal *, std::__1::default_delete<CLICoarseCellTilesManagerExternal> >=^{CLICoarseCellTilesManagerExternal}}}{unique_ptr<CLTileDownloader, std::__1::default_delete<CLTileDownloader> >={__compressed_pair<CLTileDownloader *, std::__1::default_delete<CLTileDownloader> >=^{CLTileDownloader}}}{CLTileDownloaderExternal=^^?}{CLTileDownloadPolicy=@dQ}{CLTilesSetCollection={vector<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >, std::__1::allocator<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > > >=^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}{__compressed_pair<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > *, std::__1::allocator<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > > >=^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}}}}B@B}>16
v32@0:8@?<v@?^{CLCoarseCellTilesManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{unique_ptr<CLFileDownload, std::__1::default_delete<CLFileDownload> >={__compressed_pair<CLFileDownload *, std::__1::default_delete<CLFileDownload> >=^{CLFileDownload}}}BBdBiBBii{unique_ptr<CLICoarseCellTilesManagerExternal, std::__1::default_delete<CLICoarseCellTilesManagerExternal> >={__compressed_pair<CLICoarseCellTilesManagerExternal *, std::__1::default_delete<CLICoarseCellTilesManagerExternal> >=^{CLICoarseCellTilesManagerExternal}}}{unique_ptr<CLTileDownloader, std::__1::default_delete<CLTileDownloader> >={__compressed_pair<CLTileDownloader *, std::__1::default_delete<CLTileDownloader> >=^{CLTileDownloader}}}{CLTileDownloaderExternal=^^?}{CLTileDownloadPolicy=@dQ}{CLTilesSetCollection={vector<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >, std::__1::allocator<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > > >=^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}{__compressed_pair<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > *, std::__1::allocator<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > > >=^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}}}}B@B}>16@?<v@?>24
B24@0:8@?<v@?^{CLCoarseCellTilesManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{unique_ptr<CLFileDownload, std::__1::default_delete<CLFileDownload> >={__compressed_pair<CLFileDownload *, std::__1::default_delete<CLFileDownload> >=^{CLFileDownload}}}BBdBiBBii{unique_ptr<CLICoarseCellTilesManagerExternal, std::__1::default_delete<CLICoarseCellTilesManagerExternal> >={__compressed_pair<CLICoarseCellTilesManagerExternal *, std::__1::default_delete<CLICoarseCellTilesManagerExternal> >=^{CLICoarseCellTilesManagerExternal}}}{unique_ptr<CLTileDownloader, std::__1::default_delete<CLTileDownloader> >={__compressed_pair<CLTileDownloader *, std::__1::default_delete<CLTileDownloader> >=^{CLTileDownloader}}}{CLTileDownloaderExternal=^^?}{CLTileDownloadPolicy=@dQ}{CLTilesSetCollection={vector<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >, std::__1::allocator<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > > >=^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}{__compressed_pair<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > *, std::__1::allocator<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > > >=^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}}}}B@B}>16
^{CLCoarseCellTilesManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{unique_ptr<CLFileDownload, std::__1::default_delete<CLFileDownload> >={__compressed_pair<CLFileDownload *, std::__1::default_delete<CLFileDownload> >=^{CLFileDownload}}}BBdBiBBii{unique_ptr<CLICoarseCellTilesManagerExternal, std::__1::default_delete<CLICoarseCellTilesManagerExternal> >={__compressed_pair<CLICoarseCellTilesManagerExternal *, std::__1::default_delete<CLICoarseCellTilesManagerExternal> >=^{CLICoarseCellTilesManagerExternal}}}{unique_ptr<CLTileDownloader, std::__1::default_delete<CLTileDownloader> >={__compressed_pair<CLTileDownloader *, std::__1::default_delete<CLTileDownloader> >=^{CLTileDownloader}}}{CLTileDownloaderExternal=^^?}{CLTileDownloadPolicy=@dQ}{CLTilesSetCollection={vector<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >, std::__1::allocator<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > > >=^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}{__compressed_pair<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > *, std::__1::allocator<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > > >=^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}}}}B@B}16@0:8
v24@0:8r^{NotificationData={CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocationPrivate=dddddfffBi{?=dd}diiB{?=dd}if{?=dd}ddiBddddddB}{shared_ptr<CLBatchedLocations>=^{CLBatchedLocations}^{__shared_weak_count}}{TechnologyStatus=iB}Bdi{?=dddd}{?=dd}{XtraFileAvailable=d{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}i{LocationDerivedSpeed=ddd}{shared_ptr<const GNSS::MeasurementData>=^{MeasurementData}^{__shared_weak_count}}i}16
v24@0:8r^(NotificationData={CLOdometerEntry=dddddddddiidddd}{CLElevationChangeEntry=ddIIiidi}{CLCoarseElevationChangeEntry=dIi}{CLSignificantElevation=i[16C]ddII})16
@"CalTrackFinder"
@"<CMStrideCalLocationFSMDelegate>"
@44@0:8@16q24B32^{NSDictionary=#}36
v24@0:8^@16
@"<SYSessionDelegate>"
@"<SYChangeSerializer>"
@"NSObject<OS_dispatch_queue>"
v120@0:8{CLStrideCalEntry=idIdddddiiddid}16
{CMStrideCalRecorderDb="_vptr$CLActivityRecorderDb"^^?"fDb"{auto_ptr<CLSqliteDatabase>="__ptr_"^{CLSqliteDatabase}}"fName"*"fMutex"{BasicMutex="_vptr$Mutex"^^?"info"^{MutexInfo}}"fFatalError"B"fBuffer"{deque<CLStrideCalEntry, std::__1::allocator<CLStrideCalEntry> >="__map_"{__split_buffer<CLStrideCalEntry *, std::__1::allocator<CLStrideCalEntry *> >="__first_"^^{CLStrideCalEntry}"__begin_"^^{CLStrideCalEntry}"__end_"^^{CLStrideCalEntry}"__end_cap_"{__compressed_pair<CLStrideCalEntry **, std::__1::allocator<CLStrideCalEntry *> >="__first_"^^{CLStrideCalEntry}}}"__start_"Q"__size_"{__compressed_pair<unsigned long, std::__1::allocator<CLStrideCalEntry> >="__first_"Q}}"fInternalRecordCount"i"fSampleInterval"f"fPersistence"i"fPrevEntry"{CLStrideCalEntry="recordId"i"startTime"d"pacebin"I"kvalue"d"kvalueTrack"d"score"d"endTime"d"distance"d"steps"i"session"i"speed"d"percentGrade"d"gpsSource"i"timestamp"d}"fMaxBufferSize"i"fInMemoryTransaction"@"NSObject<OS_os_transaction>""fProtectionPolicy"{NoDataProtectionPolicy=}"fSqlGetCount"{CLSqliteCachedStatement="fDb"^{CLSqliteDatabase}"fStatement"^{sqlite3_stmt}}"fSqlGetAllAsc"{CLSqliteCachedStatement="fDb"^{CLSqliteDatabase}"fStatement"^{sqlite3_stmt}}"fSqlGetPacebinDesc"{CLSqliteCachedStatement="fDb"^{CLSqliteDatabase}"fStatement"^{sqlite3_stmt}}"fSqlGetSpeedRangeDesc"{CLSqliteCachedStatement="fDb"^{CLSqliteDatabase}"fStatement"^{sqlite3_stmt}}"fSqlDeleteBefore"{CLSqliteCachedStatement="fDb"^{CLSqliteDatabase}"fStatement"^{sqlite3_stmt}}"fSqlDeleteAfter"{CLSqliteCachedStatement="fDb"^{CLSqliteDatabase}"fStatement"^{sqlite3_stmt}}"fSqlDeleteAll"{CLSqliteCachedStatement="fDb"^{CLSqliteDatabase}"fStatement"^{sqlite3_stmt}}"fSqlInsert"{CLSqliteCachedStatement="fDb"^{CLSqliteDatabase}"fStatement"^{sqlite3_stmt}}"fSqlShiftStartTimes"{CLSqliteCachedStatement="fDb"^{CLSqliteDatabase}"fStatement"^{sqlite3_stmt}}"fSqlMostRecent"{CLSqliteCachedStatement="fDb"^{CLSqliteDatabase}"fStatement"^{sqlite3_stmt}}"fFinishedInsertSilo"@"CLSilo""fFinishedInsertHandler"@?}
@"<CMStrideCalibrationDatabaseDelegate>"
v32@0:8r^i16r^(NotificationData={CLStepCountEntry=dddIddIIdddi^{__CFString}BB{CLAccelerometerPace=ddd}IIC}{CLExtendedStepCountEntry=d{CLStepCountEntry=dddIddIIdddi^{__CFString}BB{CLAccelerometerPace=ddd}IIC}{CLStepCountEntryAddition=ddIddddBd}}{CLPedometerEvent=di})24
v32@0:8r^i16r^(NotificationData={CLOdometerEntry=dddddddddiidddd}{CLElevationChangeEntry=ddIIiidi}{CLCoarseElevationChangeEntry=dIi}{CLSignificantElevation=i[16C]ddII})24
v40@0:8d16@24@?32
v48@0:8@16@24d32@?40
v32@0:8Q16R@24
v32@0:8@"CLLocation"16@?<v@?q@"NSError">24
v32@0:8@"NSString"16@?<v@?@"NSArray"@"NSError">24
v40@0:8d16@"CLLocation"24@?<v@?@"NSArray"@"NSError">32
v32@0:8q16@?<v@?@"NSArray"@"NSError">24
v48@0:8@"CLLocation"16@"NSDate"24d32@?<v@?@"NSArray"@"NSError">40
v32@0:8@"NSDate"16@?<v@?@"NSArray"@"NSError">24
v24@0:8R@"<CLRoutineMonitorClientProtocol>"16
v32@0:8@"CLLocation"16@?<v@?@"RTLocationOfInterest"@"NSError">24
v32@0:8Q16R@"<CLRoutineMonitorClientProtocol>"24
v32@0:8@"CLLocation"16@?<v@?@"NSArray"@"NSError">24
v588@0:8i16{NotificationData={CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocationPrivate=dddddfffBi{?=dd}diiB{?=dd}if{?=dd}ddiBddddddB}{shared_ptr<CLBatchedLocations>=^{CLBatchedLocations}^{__shared_weak_count}}{TechnologyStatus=iB}Bdi{?=dddd}{?=dd}{XtraFileAvailable=d{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}i{LocationDerivedSpeed=ddd}{shared_ptr<const GNSS::MeasurementData>=^{MeasurementData}^{__shared_weak_count}}i}20
{unique_ptr<CLFilteredLocationController_Type::Client, std::__1::default_delete<CLFilteredLocationController_Type::Client> >="__ptr_"{__compressed_pair<CLFilteredLocationController_Type::Client *, std::__1::default_delete<CLFilteredLocationController_Type::Client> >="__first_"^{Client}}}
{unique_ptr<CLLocationAwarenessProvider_Type::Client, std::__1::default_delete<CLLocationAwarenessProvider_Type::Client> >="__ptr_"{__compressed_pair<CLLocationAwarenessProvider_Type::Client *, std::__1::default_delete<CLLocationAwarenessProvider_Type::Client> >="__first_"^{Client}}}
{RegInfo="settledParameters"{MonitoringParameters="latencyBudget"d"retryRate"d"queryALS"B}"unsettledParameters"{MonitoringParameters="latencyBudget"d"retryRate"d"queryALS"B}}
@"RTRoutineManager"
@"<CLSuggestedActionServiceProtocol>"
@24@0:8^{CLFenceMonitor=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{map<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<std::__1::pair<const CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus> > >={__tree<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>, std::__1::less<CLFenceManager_Type::Fence>, true>, std::__1::allocator<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>, std::__1::less<CLFenceManager_Type::Fence>, true> >=Q}}}{list<CLFenceManager_Type::CombinedFence, std::__1::allocator<CLFenceManager_Type::CombinedFence> >={__list_node_base<CLFenceManager_Type::CombinedFence, void *>=^{__list_node_base<CLFenceManager_Type::CombinedFence, void *>}^{__list_node_base<CLFenceManager_Type::CombinedFence, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLFenceManager_Type::CombinedFence, void *> > >=Q}}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLFenceMonitorCell=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{map<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<std::__1::pair<const CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus> > >={__tree<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus>, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus>, std::__1::less<CLFenceManager_Type::Fence>, true>, std::__1::allocator<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus>, std::__1::less<CLFenceManager_Type::Fence>, true> >=Q}}}I{map<CLCell, CLFenceMonitorCell::CellStatus, std::__1::less<CLCell>, std::__1::allocator<std::__1::pair<const CLCell, CLFenceMonitorCell::CellStatus> > >={__tree<std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus>, std::__1::__map_value_compare<CLCell, std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus>, std::__1::less<CLCell>, true>, std::__1::allocator<std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLCell, std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus>, std::__1::less<CLCell>, true> >=Q}}}{set<CLCell, std::__1::less<CLCell>, std::__1::allocator<CLCell> >={__tree<CLCell, std::__1::less<CLCell>, std::__1::allocator<CLCell> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<CLCell, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<CLCell> >=Q}}}{set<CLCell, std::__1::less<CLCell>, std::__1::allocator<CLCell> >={__tree<CLCell, std::__1::less<CLCell>, std::__1::allocator<CLCell> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<CLCell, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<CLCell> >=Q}}}^{__CFRunLoopTimer}{unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client> >={__compressed_pair<CLTelephonyService_Type::Client *, std::__1::default_delete<CLTelephonyService_Type::Client> >=^{Client}}}@{CLDistanceCalc=ddddd}}{CLFenceMonitorWifi=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{map<CLFenceManager_Type::Fence, bool, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<std::__1::pair<const CLFenceManager_Type::Fence, bool> > >={__tree<std::__1::__value_type<CLFenceManager_Type::Fence, bool>, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, bool>, std::__1::less<CLFenceManager_Type::Fence>, true>, std::__1::allocator<std::__1::__value_type<CLFenceManager_Type::Fence, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLFenceManager_Type::Fence, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, bool>, std::__1::less<CLFenceManager_Type::Fence>, true> >=Q}}}B@{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}@{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}BBBd{CLPowerAssertion=^^?i^v^{__CFString}dd@}dIB{vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}^{AccessPoint}{__compressed_pair<CLWifiService_Type::AccessPoint *, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}}}dB{AssociationState={optional<CLWifiService_Type::AccessPoint>=(?=c{AccessPoint={CLMacAddress=Q}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}iiiddB})B}}BddddddB{shared_ptr<CLWifiAccessPointLocationService>=^{CLWifiAccessPointLocationService}^{__shared_weak_count}}{CLFenceMonitorWifiLogicExternal=^^?@}{CLFenceMonitorWifiLogic=}}i{unique_ptr<CLBluetoothService_Type::Client, std::__1::default_delete<CLBluetoothService_Type::Client> >={__compressed_pair<CLBluetoothService_Type::Client *, std::__1::default_delete<CLBluetoothService_Type::Client> >=^{Client}}}{unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client> >={__compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> >=^{Client}}}{unique_ptr<CLFenceMonitorCell_Type::Client, std::__1::default_delete<CLFenceMonitorCell_Type::Client> >={__compressed_pair<CLFenceMonitorCell_Type::Client *, std::__1::default_delete<CLFenceMonitorCell_Type::Client> >=^{Client}}}{unique_ptr<CLFenceMonitorWifi_Type::Client, std::__1::default_delete<CLFenceMonitorWifi_Type::Client> >={__compressed_pair<CLFenceMonitorWifi_Type::Client *, std::__1::default_delete<CLFenceMonitorWifi_Type::Client> >=^{Client}}}{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLCompanionNotifier_Type::Client, std::__1::default_delete<CLCompanionNotifier_Type::Client> >={__compressed_pair<CLCompanionNotifier_Type::Client *, std::__1::default_delete<CLCompanionNotifier_Type::Client> >=^{Client}}}@@@BBBBBBB^{CLPersistentTimer}^{CLPersistentTimer}^{CLPersistentTimer}dd^{CLPersistentTimer}{CLPowerAssertion=^^?i^v^{__CFString}dd@}Bd{unique_ptr<CLGnssProvider_Type::Client, std::__1::default_delete<CLGnssProvider_Type::Client> >={__compressed_pair<CLGnssProvider_Type::Client *, std::__1::default_delete<CLGnssProvider_Type::Client> >=^{Client}}}diidiiddBBddBBBBdd^{__CFRunLoopTimer}BccdB^{CLPersistentTimer}ddddddddB@{CLDistanceCalc=ddddd}@@}16
^{CLFenceMonitor=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{map<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<std::__1::pair<const CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus> > >={__tree<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>, std::__1::less<CLFenceManager_Type::Fence>, true>, std::__1::allocator<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>, std::__1::less<CLFenceManager_Type::Fence>, true> >=Q}}}{list<CLFenceManager_Type::CombinedFence, std::__1::allocator<CLFenceManager_Type::CombinedFence> >={__list_node_base<CLFenceManager_Type::CombinedFence, void *>=^{__list_node_base<CLFenceManager_Type::CombinedFence, void *>}^{__list_node_base<CLFenceManager_Type::CombinedFence, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLFenceManager_Type::CombinedFence, void *> > >=Q}}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLFenceMonitorCell=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{map<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<std::__1::pair<const CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus> > >={__tree<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus>, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus>, std::__1::less<CLFenceManager_Type::Fence>, true>, std::__1::allocator<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus>, std::__1::less<CLFenceManager_Type::Fence>, true> >=Q}}}I{map<CLCell, CLFenceMonitorCell::CellStatus, std::__1::less<CLCell>, std::__1::allocator<std::__1::pair<const CLCell, CLFenceMonitorCell::CellStatus> > >={__tree<std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus>, std::__1::__map_value_compare<CLCell, std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus>, std::__1::less<CLCell>, true>, std::__1::allocator<std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLCell, std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus>, std::__1::less<CLCell>, true> >=Q}}}{set<CLCell, std::__1::less<CLCell>, std::__1::allocator<CLCell> >={__tree<CLCell, std::__1::less<CLCell>, std::__1::allocator<CLCell> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<CLCell, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<CLCell> >=Q}}}{set<CLCell, std::__1::less<CLCell>, std::__1::allocator<CLCell> >={__tree<CLCell, std::__1::less<CLCell>, std::__1::allocator<CLCell> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<CLCell, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<CLCell> >=Q}}}^{__CFRunLoopTimer}{unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client> >={__compressed_pair<CLTelephonyService_Type::Client *, std::__1::default_delete<CLTelephonyService_Type::Client> >=^{Client}}}@{CLDistanceCalc=ddddd}}{CLFenceMonitorWifi=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{map<CLFenceManager_Type::Fence, bool, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<std::__1::pair<const CLFenceManager_Type::Fence, bool> > >={__tree<std::__1::__value_type<CLFenceManager_Type::Fence, bool>, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, bool>, std::__1::less<CLFenceManager_Type::Fence>, true>, std::__1::allocator<std::__1::__value_type<CLFenceManager_Type::Fence, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLFenceManager_Type::Fence, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, bool>, std::__1::less<CLFenceManager_Type::Fence>, true> >=Q}}}B@{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}@{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}BBBd{CLPowerAssertion=^^?i^v^{__CFString}dd@}dIB{vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}^{AccessPoint}{__compressed_pair<CLWifiService_Type::AccessPoint *, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}}}dB{AssociationState={optional<CLWifiService_Type::AccessPoint>=(?=c{AccessPoint={CLMacAddress=Q}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}iiiddB})B}}BddddddB{shared_ptr<CLWifiAccessPointLocationService>=^{CLWifiAccessPointLocationService}^{__shared_weak_count}}{CLFenceMonitorWifiLogicExternal=^^?@}{CLFenceMonitorWifiLogic=}}i{unique_ptr<CLBluetoothService_Type::Client, std::__1::default_delete<CLBluetoothService_Type::Client> >={__compressed_pair<CLBluetoothService_Type::Client *, std::__1::default_delete<CLBluetoothService_Type::Client> >=^{Client}}}{unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client> >={__compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> >=^{Client}}}{unique_ptr<CLFenceMonitorCell_Type::Client, std::__1::default_delete<CLFenceMonitorCell_Type::Client> >={__compressed_pair<CLFenceMonitorCell_Type::Client *, std::__1::default_delete<CLFenceMonitorCell_Type::Client> >=^{Client}}}{unique_ptr<CLFenceMonitorWifi_Type::Client, std::__1::default_delete<CLFenceMonitorWifi_Type::Client> >={__compressed_pair<CLFenceMonitorWifi_Type::Client *, std::__1::default_delete<CLFenceMonitorWifi_Type::Client> >=^{Client}}}{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLCompanionNotifier_Type::Client, std::__1::default_delete<CLCompanionNotifier_Type::Client> >={__compressed_pair<CLCompanionNotifier_Type::Client *, std::__1::default_delete<CLCompanionNotifier_Type::Client> >=^{Client}}}@@@BBBBBBB^{CLPersistentTimer}^{CLPersistentTimer}^{CLPersistentTimer}dd^{CLPersistentTimer}{CLPowerAssertion=^^?i^v^{__CFString}dd@}Bd{unique_ptr<CLGnssProvider_Type::Client, std::__1::default_delete<CLGnssProvider_Type::Client> >={__compressed_pair<CLGnssProvider_Type::Client *, std::__1::default_delete<CLGnssProvider_Type::Client> >=^{Client}}}diidiiddBBddBBBBdd^{__CFRunLoopTimer}BccdB^{CLPersistentTimer}ddddddddB@{CLDistanceCalc=ddddd}@@}16@0:8
v24@0:8^{CLFenceMonitor=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{map<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<std::__1::pair<const CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus> > >={__tree<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>, std::__1::less<CLFenceManager_Type::Fence>, true>, std::__1::allocator<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>, std::__1::less<CLFenceManager_Type::Fence>, true> >=Q}}}{list<CLFenceManager_Type::CombinedFence, std::__1::allocator<CLFenceManager_Type::CombinedFence> >={__list_node_base<CLFenceManager_Type::CombinedFence, void *>=^{__list_node_base<CLFenceManager_Type::CombinedFence, void *>}^{__list_node_base<CLFenceManager_Type::CombinedFence, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLFenceManager_Type::CombinedFence, void *> > >=Q}}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLFenceMonitorCell=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{map<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<std::__1::pair<const CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus> > >={__tree<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus>, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus>, std::__1::less<CLFenceManager_Type::Fence>, true>, std::__1::allocator<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus>, std::__1::less<CLFenceManager_Type::Fence>, true> >=Q}}}I{map<CLCell, CLFenceMonitorCell::CellStatus, std::__1::less<CLCell>, std::__1::allocator<std::__1::pair<const CLCell, CLFenceMonitorCell::CellStatus> > >={__tree<std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus>, std::__1::__map_value_compare<CLCell, std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus>, std::__1::less<CLCell>, true>, std::__1::allocator<std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLCell, std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus>, std::__1::less<CLCell>, true> >=Q}}}{set<CLCell, std::__1::less<CLCell>, std::__1::allocator<CLCell> >={__tree<CLCell, std::__1::less<CLCell>, std::__1::allocator<CLCell> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<CLCell, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<CLCell> >=Q}}}{set<CLCell, std::__1::less<CLCell>, std::__1::allocator<CLCell> >={__tree<CLCell, std::__1::less<CLCell>, std::__1::allocator<CLCell> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<CLCell, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<CLCell> >=Q}}}^{__CFRunLoopTimer}{unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client> >={__compressed_pair<CLTelephonyService_Type::Client *, std::__1::default_delete<CLTelephonyService_Type::Client> >=^{Client}}}@{CLDistanceCalc=ddddd}}{CLFenceMonitorWifi=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{map<CLFenceManager_Type::Fence, bool, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<std::__1::pair<const CLFenceManager_Type::Fence, bool> > >={__tree<std::__1::__value_type<CLFenceManager_Type::Fence, bool>, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, bool>, std::__1::less<CLFenceManager_Type::Fence>, true>, std::__1::allocator<std::__1::__value_type<CLFenceManager_Type::Fence, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLFenceManager_Type::Fence, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, bool>, std::__1::less<CLFenceManager_Type::Fence>, true> >=Q}}}B@{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}@{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}BBBd{CLPowerAssertion=^^?i^v^{__CFString}dd@}dIB{vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}^{AccessPoint}{__compressed_pair<CLWifiService_Type::AccessPoint *, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}}}dB{AssociationState={optional<CLWifiService_Type::AccessPoint>=(?=c{AccessPoint={CLMacAddress=Q}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}iiiddB})B}}BddddddB{shared_ptr<CLWifiAccessPointLocationService>=^{CLWifiAccessPointLocationService}^{__shared_weak_count}}{CLFenceMonitorWifiLogicExternal=^^?@}{CLFenceMonitorWifiLogic=}}i{unique_ptr<CLBluetoothService_Type::Client, std::__1::default_delete<CLBluetoothService_Type::Client> >={__compressed_pair<CLBluetoothService_Type::Client *, std::__1::default_delete<CLBluetoothService_Type::Client> >=^{Client}}}{unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client> >={__compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> >=^{Client}}}{unique_ptr<CLFenceMonitorCell_Type::Client, std::__1::default_delete<CLFenceMonitorCell_Type::Client> >={__compressed_pair<CLFenceMonitorCell_Type::Client *, std::__1::default_delete<CLFenceMonitorCell_Type::Client> >=^{Client}}}{unique_ptr<CLFenceMonitorWifi_Type::Client, std::__1::default_delete<CLFenceMonitorWifi_Type::Client> >={__compressed_pair<CLFenceMonitorWifi_Type::Client *, std::__1::default_delete<CLFenceMonitorWifi_Type::Client> >=^{Client}}}{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLCompanionNotifier_Type::Client, std::__1::default_delete<CLCompanionNotifier_Type::Client> >={__compressed_pair<CLCompanionNotifier_Type::Client *, std::__1::default_delete<CLCompanionNotifier_Type::Client> >=^{Client}}}@@@BBBBBBB^{CLPersistentTimer}^{CLPersistentTimer}^{CLPersistentTimer}dd^{CLPersistentTimer}{CLPowerAssertion=^^?i^v^{__CFString}dd@}Bd{unique_ptr<CLGnssProvider_Type::Client, std::__1::default_delete<CLGnssProvider_Type::Client> >={__compressed_pair<CLGnssProvider_Type::Client *, std::__1::default_delete<CLGnssProvider_Type::Client> >=^{Client}}}diidiiddBBddBBBBdd^{__CFRunLoopTimer}BccdB^{CLPersistentTimer}ddddddddB@{CLDistanceCalc=ddddd}@@}16
^{CLFenceMonitor=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{map<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<std::__1::pair<const CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus> > >={__tree<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>, std::__1::less<CLFenceManager_Type::Fence>, true>, std::__1::allocator<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>, std::__1::less<CLFenceManager_Type::Fence>, true> >=Q}}}{list<CLFenceManager_Type::CombinedFence, std::__1::allocator<CLFenceManager_Type::CombinedFence> >={__list_node_base<CLFenceManager_Type::CombinedFence, void *>=^{__list_node_base<CLFenceManager_Type::CombinedFence, void *>}^{__list_node_base<CLFenceManager_Type::CombinedFence, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLFenceManager_Type::CombinedFence, void *> > >=Q}}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLFenceMonitorCell=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{map<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<std::__1::pair<const CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus> > >={__tree<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus>, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus>, std::__1::less<CLFenceManager_Type::Fence>, true>, std::__1::allocator<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus>, std::__1::less<CLFenceManager_Type::Fence>, true> >=Q}}}I{map<CLCell, CLFenceMonitorCell::CellStatus, std::__1::less<CLCell>, std::__1::allocator<std::__1::pair<const CLCell, CLFenceMonitorCell::CellStatus> > >={__tree<std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus>, std::__1::__map_value_compare<CLCell, std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus>, std::__1::less<CLCell>, true>, std::__1::allocator<std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLCell, std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus>, std::__1::less<CLCell>, true> >=Q}}}{set<CLCell, std::__1::less<CLCell>, std::__1::allocator<CLCell> >={__tree<CLCell, std::__1::less<CLCell>, std::__1::allocator<CLCell> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<CLCell, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<CLCell> >=Q}}}{set<CLCell, std::__1::less<CLCell>, std::__1::allocator<CLCell> >={__tree<CLCell, std::__1::less<CLCell>, std::__1::allocator<CLCell> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<CLCell, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<CLCell> >=Q}}}^{__CFRunLoopTimer}{unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client> >={__compressed_pair<CLTelephonyService_Type::Client *, std::__1::default_delete<CLTelephonyService_Type::Client> >=^{Client}}}@{CLDistanceCalc=ddddd}}{CLFenceMonitorWifi=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{map<CLFenceManager_Type::Fence, bool, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<std::__1::pair<const CLFenceManager_Type::Fence, bool> > >={__tree<std::__1::__value_type<CLFenceManager_Type::Fence, bool>, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, bool>, std::__1::less<CLFenceManager_Type::Fence>, true>, std::__1::allocator<std::__1::__value_type<CLFenceManager_Type::Fence, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLFenceManager_Type::Fence, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, bool>, std::__1::less<CLFenceManager_Type::Fence>, true> >=Q}}}B@{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}@{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}BBBd{CLPowerAssertion=^^?i^v^{__CFString}dd@}dIB{vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}^{AccessPoint}{__compressed_pair<CLWifiService_Type::AccessPoint *, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}}}dB{AssociationState={optional<CLWifiService_Type::AccessPoint>=(?=c{AccessPoint={CLMacAddress=Q}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}iiiddB})B}}BddddddB{shared_ptr<CLWifiAccessPointLocationService>=^{CLWifiAccessPointLocationService}^{__shared_weak_count}}{CLFenceMonitorWifiLogicExternal=^^?@}{CLFenceMonitorWifiLogic=}}i{unique_ptr<CLBluetoothService_Type::Client, std::__1::default_delete<CLBluetoothService_Type::Client> >={__compressed_pair<CLBluetoothService_Type::Client *, std::__1::default_delete<CLBluetoothService_Type::Client> >=^{Client}}}{unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client> >={__compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> >=^{Client}}}{unique_ptr<CLFenceMonitorCell_Type::Client, std::__1::default_delete<CLFenceMonitorCell_Type::Client> >={__compressed_pair<CLFenceMonitorCell_Type::Client *, std::__1::default_delete<CLFenceMonitorCell_Type::Client> >=^{Client}}}{unique_ptr<CLFenceMonitorWifi_Type::Client, std::__1::default_delete<CLFenceMonitorWifi_Type::Client> >={__compressed_pair<CLFenceMonitorWifi_Type::Client *, std::__1::default_delete<CLFenceMonitorWifi_Type::Client> >=^{Client}}}{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLCompanionNotifier_Type::Client, std::__1::default_delete<CLCompanionNotifier_Type::Client> >={__compressed_pair<CLCompanionNotifier_Type::Client *, std::__1::default_delete<CLCompanionNotifier_Type::Client> >=^{Client}}}@@@BBBBBBB^{CLPersistentTimer}^{CLPersistentTimer}^{CLPersistentTimer}dd^{CLPersistentTimer}{CLPowerAssertion=^^?i^v^{__CFString}dd@}Bd{unique_ptr<CLGnssProvider_Type::Client, std::__1::default_delete<CLGnssProvider_Type::Client> >={__compressed_pair<CLGnssProvider_Type::Client *, std::__1::default_delete<CLGnssProvider_Type::Client> >=^{Client}}}diidiiddBBddBBBBdd^{__CFRunLoopTimer}BccdB^{CLPersistentTimer}ddddddddB@{CLDistanceCalc=ddddd}@@}
v24@0:8@?<v@?^{CLGeomagneticModelProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB}>16
v32@0:8@?<v@?^{CLGeomagneticModelProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB}>16@?<v@?>24
B24@0:8@?<v@?^{CLGeomagneticModelProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB}>16
^{CLGeomagneticModelProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB}16@0:8
v24@0:8@?<v@?^{CLSignalEnvironmentProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client> >={__compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> >=^{Client}}}i^{CLSignalEnvironmentDataManager}{CLFileUpdate=^^?{BasicMutex=^^?^{MutexInfo}}@^?^v{unique_ptr<CLFileDownload, std::__1::default_delete<CLFileDownload> >={__compressed_pair<CLFileDownload *, std::__1::default_delete<CLFileDownload> >=^{CLFileDownload}}}@iddddddB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}B}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}Bdi}>16
v32@0:8@?<v@?^{CLSignalEnvironmentProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client> >={__compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> >=^{Client}}}i^{CLSignalEnvironmentDataManager}{CLFileUpdate=^^?{BasicMutex=^^?^{MutexInfo}}@^?^v{unique_ptr<CLFileDownload, std::__1::default_delete<CLFileDownload> >={__compressed_pair<CLFileDownload *, std::__1::default_delete<CLFileDownload> >=^{CLFileDownload}}}@iddddddB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}B}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}Bdi}>16@?<v@?>24
B24@0:8@?<v@?^{CLSignalEnvironmentProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client> >={__compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> >=^{Client}}}i^{CLSignalEnvironmentDataManager}{CLFileUpdate=^^?{BasicMutex=^^?^{MutexInfo}}@^?^v{unique_ptr<CLFileDownload, std::__1::default_delete<CLFileDownload> >={__compressed_pair<CLFileDownload *, std::__1::default_delete<CLFileDownload> >=^{CLFileDownload}}}@iddddddB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}B}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}Bdi}>16
^{CLSignalEnvironmentProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client> >={__compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> >=^{Client}}}i^{CLSignalEnvironmentDataManager}{CLFileUpdate=^^?{BasicMutex=^^?^{MutexInfo}}@^?^v{unique_ptr<CLFileDownload, std::__1::default_delete<CLFileDownload> >={__compressed_pair<CLFileDownload *, std::__1::default_delete<CLFileDownload> >=^{CLFileDownload}}}@iddddddB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}B}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}Bdi}16@0:8
v24@0:8R@"<CLRemoteMotionAlarmClientProtocol>"16
v28@0:8i16d20
@"<CLLocationStreamingConnectionManagerServiceProtocol>"
v24@0:8@?<v@?^{CLUnifiedCellLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBBBB^^?{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client> >={__compressed_pair<CLTelephonyService_Type::Client *, std::__1::default_delete<CLTelephonyService_Type::Client> >=^{Client}}}{unique_ptr<CLNetworkLocationProvider_Type::Client, std::__1::default_delete<CLNetworkLocationProvider_Type::Client> >={__compressed_pair<CLNetworkLocationProvider_Type::Client *, std::__1::default_delete<CLNetworkLocationProvider_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLCompanionNotifier_Type::Client, std::__1::default_delete<CLCompanionNotifier_Type::Client> >={__compressed_pair<CLCompanionNotifier_Type::Client *, std::__1::default_delete<CLCompanionNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLCellTilesManager_Type::Client, std::__1::default_delete<CLCellTilesManager_Type::Client> >={__compressed_pair<CLCellTilesManager_Type::Client *, std::__1::default_delete<CLCellTilesManager_Type::Client> >=^{Client}}}{unique_ptr<CLCoarseCellTilesManager_Type::Client, std::__1::default_delete<CLCoarseCellTilesManager_Type::Client> >={__compressed_pair<CLCoarseCellTilesManager_Type::Client *, std::__1::default_delete<CLCoarseCellTilesManager_Type::Client> >=^{Client}}}B{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}^{__CFRunLoopSource}B{CLCell=Bii{Cell=iiiiiiii}{ScdmaCell=iiiiiiii}{CdmaCell=i{vector<int, std::__1::allocator<int> >=^i^i{__compressed_pair<int *, std::__1::allocator<int> >=^i}}iiiiiiiii{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}iii{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}ii}{LteCell=iiiiiiiddii}}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{vector<CLCell, std::__1::allocator<CLCell> >=^{CLCell}^{CLCell}{__compressed_pair<CLCell *, std::__1::allocator<CLCell> >=^{CLCell}}}BB^{CLPersistentTimer}iB{CLCellLocationAWD=iiiiiiiiiiiiiiidd}}>16
v32@0:8@?<v@?^{CLUnifiedCellLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBBBB^^?{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client> >={__compressed_pair<CLTelephonyService_Type::Client *, std::__1::default_delete<CLTelephonyService_Type::Client> >=^{Client}}}{unique_ptr<CLNetworkLocationProvider_Type::Client, std::__1::default_delete<CLNetworkLocationProvider_Type::Client> >={__compressed_pair<CLNetworkLocationProvider_Type::Client *, std::__1::default_delete<CLNetworkLocationProvider_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLCompanionNotifier_Type::Client, std::__1::default_delete<CLCompanionNotifier_Type::Client> >={__compressed_pair<CLCompanionNotifier_Type::Client *, std::__1::default_delete<CLCompanionNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLCellTilesManager_Type::Client, std::__1::default_delete<CLCellTilesManager_Type::Client> >={__compressed_pair<CLCellTilesManager_Type::Client *, std::__1::default_delete<CLCellTilesManager_Type::Client> >=^{Client}}}{unique_ptr<CLCoarseCellTilesManager_Type::Client, std::__1::default_delete<CLCoarseCellTilesManager_Type::Client> >={__compressed_pair<CLCoarseCellTilesManager_Type::Client *, std::__1::default_delete<CLCoarseCellTilesManager_Type::Client> >=^{Client}}}B{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}^{__CFRunLoopSource}B{CLCell=Bii{Cell=iiiiiiii}{ScdmaCell=iiiiiiii}{CdmaCell=i{vector<int, std::__1::allocator<int> >=^i^i{__compressed_pair<int *, std::__1::allocator<int> >=^i}}iiiiiiiii{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}iii{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}ii}{LteCell=iiiiiiiddii}}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{vector<CLCell, std::__1::allocator<CLCell> >=^{CLCell}^{CLCell}{__compressed_pair<CLCell *, std::__1::allocator<CLCell> >=^{CLCell}}}BB^{CLPersistentTimer}iB{CLCellLocationAWD=iiiiiiiiiiiiiiidd}}>16@?<v@?>24
B24@0:8@?<v@?^{CLUnifiedCellLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBBBB^^?{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client> >={__compressed_pair<CLTelephonyService_Type::Client *, std::__1::default_delete<CLTelephonyService_Type::Client> >=^{Client}}}{unique_ptr<CLNetworkLocationProvider_Type::Client, std::__1::default_delete<CLNetworkLocationProvider_Type::Client> >={__compressed_pair<CLNetworkLocationProvider_Type::Client *, std::__1::default_delete<CLNetworkLocationProvider_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLCompanionNotifier_Type::Client, std::__1::default_delete<CLCompanionNotifier_Type::Client> >={__compressed_pair<CLCompanionNotifier_Type::Client *, std::__1::default_delete<CLCompanionNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLCellTilesManager_Type::Client, std::__1::default_delete<CLCellTilesManager_Type::Client> >={__compressed_pair<CLCellTilesManager_Type::Client *, std::__1::default_delete<CLCellTilesManager_Type::Client> >=^{Client}}}{unique_ptr<CLCoarseCellTilesManager_Type::Client, std::__1::default_delete<CLCoarseCellTilesManager_Type::Client> >={__compressed_pair<CLCoarseCellTilesManager_Type::Client *, std::__1::default_delete<CLCoarseCellTilesManager_Type::Client> >=^{Client}}}B{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}^{__CFRunLoopSource}B{CLCell=Bii{Cell=iiiiiiii}{ScdmaCell=iiiiiiii}{CdmaCell=i{vector<int, std::__1::allocator<int> >=^i^i{__compressed_pair<int *, std::__1::allocator<int> >=^i}}iiiiiiiii{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}iii{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}ii}{LteCell=iiiiiiiddii}}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{vector<CLCell, std::__1::allocator<CLCell> >=^{CLCell}^{CLCell}{__compressed_pair<CLCell *, std::__1::allocator<CLCell> >=^{CLCell}}}BB^{CLPersistentTimer}iB{CLCellLocationAWD=iiiiiiiiiiiiiiidd}}>16
^{CLUnifiedCellLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBBBB^^?{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client> >={__compressed_pair<CLTelephonyService_Type::Client *, std::__1::default_delete<CLTelephonyService_Type::Client> >=^{Client}}}{unique_ptr<CLNetworkLocationProvider_Type::Client, std::__1::default_delete<CLNetworkLocationProvider_Type::Client> >={__compressed_pair<CLNetworkLocationProvider_Type::Client *, std::__1::default_delete<CLNetworkLocationProvider_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLCompanionNotifier_Type::Client, std::__1::default_delete<CLCompanionNotifier_Type::Client> >={__compressed_pair<CLCompanionNotifier_Type::Client *, std::__1::default_delete<CLCompanionNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLCellTilesManager_Type::Client, std::__1::default_delete<CLCellTilesManager_Type::Client> >={__compressed_pair<CLCellTilesManager_Type::Client *, std::__1::default_delete<CLCellTilesManager_Type::Client> >=^{Client}}}{unique_ptr<CLCoarseCellTilesManager_Type::Client, std::__1::default_delete<CLCoarseCellTilesManager_Type::Client> >={__compressed_pair<CLCoarseCellTilesManager_Type::Client *, std::__1::default_delete<CLCoarseCellTilesManager_Type::Client> >=^{Client}}}B{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}^{__CFRunLoopSource}B{CLCell=Bii{Cell=iiiiiiii}{ScdmaCell=iiiiiiii}{CdmaCell=i{vector<int, std::__1::allocator<int> >=^i^i{__compressed_pair<int *, std::__1::allocator<int> >=^i}}iiiiiiiii{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}iii{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}ii}{LteCell=iiiiiiiddii}}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{vector<CLCell, std::__1::allocator<CLCell> >=^{CLCell}^{CLCell}{__compressed_pair<CLCell *, std::__1::allocator<CLCell> >=^{CLCell}}}BB^{CLPersistentTimer}iB{CLCellLocationAWD=iiiiiiiiiiiiiiidd}}16@0:8
v244@0:8i16(NotificationData={CLStepCountEntry=dddIddIIdddi^{__CFString}BB{CLAccelerometerPace=ddd}IIC}{CLExtendedStepCountEntry=d{CLStepCountEntry=dddIddIIdddi^{__CFString}BB{CLAccelerometerPace=ddd}IIC}{CLStepCountEntryAddition=ddIddddBd}}{CLPedometerEvent=di})20
{deque<std::__1::pair<double, double>, std::__1::allocator<std::__1::pair<double, double> > >="__map_"{__split_buffer<std::__1::pair<double, double> *, std::__1::allocator<std::__1::pair<double, double> *> >="__first_"^^{pair<double, double>}"__begin_"^^{pair<double, double>}"__end_"^^{pair<double, double>}"__end_cap_"{__compressed_pair<std::__1::pair<double, double> **, std::__1::allocator<std::__1::pair<double, double> *> >="__first_"^^{pair<double, double>}}}"__start_"Q"__size_"{__compressed_pair<unsigned long, std::__1::allocator<std::__1::pair<double, double> > >="__first_"Q}}
{unique_ptr<CLStepCountNotifier_Type::Client, std::__1::default_delete<CLStepCountNotifier_Type::Client> >="__ptr_"{__compressed_pair<CLStepCountNotifier_Type::Client *, std::__1::default_delete<CLStepCountNotifier_Type::Client> >="__first_"^{Client}}}
d36@0:8@16d24i32
d32@0:8@16d24
v24@0:8@"<CLDuetMonitorServiceProtocol>"16
v32@0:8@"<CLDuetMonitorServiceProtocol>"16@"CLDuetForegroundApp"24
v32@0:8@"<CLDuetMonitorServiceProtocol>"16@"CLDuetHomeKitScene"24
v32@0:8@"<CLDuetMonitorServiceProtocol>"16@"CLDuetHomeKitAccessory"24
v32@0:8@"<CLDuetMonitorServiceProtocol>"16@"CLDuetHomeKitAppView"24
@24@0:8^{CLSubHarvesterMicroLocation=^{IHarvestDelegate}@@@{vector<std::__1::function<void (std::__1::function<bool ()>)>, std::__1::allocator<std::__1::function<void (std::__1::function<bool ()>)> > >=^{function<void (std::__1::function<bool ()>)>}^{function<void (std::__1::function<bool ()>)>}{__compressed_pair<std::__1::function<void (std::__1::function<bool ()>)> *, std::__1::allocator<std::__1::function<void (std::__1::function<bool ()>)> > >=^{function<void (std::__1::function<bool ()>)>}}}}16
^{CLSubHarvesterMicroLocation=^{IHarvestDelegate}@@@{vector<std::__1::function<void (std::__1::function<bool ()>)>, std::__1::allocator<std::__1::function<void (std::__1::function<bool ()>)> > >=^{function<void (std::__1::function<bool ()>)>}^{function<void (std::__1::function<bool ()>)>}{__compressed_pair<std::__1::function<void (std::__1::function<bool ()>)> *, std::__1::allocator<std::__1::function<void (std::__1::function<bool ()>)> > >=^{function<void (std::__1::function<bool ()>)>}}}}
B24@0:8^{?=ddddddiiI}16
v24@0:8@?<v@?^{CLDataProtectionManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBi@}>16
v32@0:8@?<v@?^{CLDataProtectionManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBi@}>16@?<v@?>24
B24@0:8@?<v@?^{CLDataProtectionManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBi@}>16
^{CLDataProtectionManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBi@}16@0:8
B20@0:8i16
v24@0:8i16B20
^{CLStatusBarIconManager={BasicMutex=^^?^{MutexInfo}}@{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLGnssProvider_Type::Client, std::__1::default_delete<CLGnssProvider_Type::Client> >={__compressed_pair<CLGnssProvider_Type::Client *, std::__1::default_delete<CLGnssProvider_Type::Client> >=^{Client}}}^{__CFRunLoopTimer}BB[6B]i{CLNameValuePair=^^?^{__CFDictionary}}[6[3d]]}16@0:8
v24@0:8^{CLStatusBarIconManager={BasicMutex=^^?^{MutexInfo}}@{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLGnssProvider_Type::Client, std::__1::default_delete<CLGnssProvider_Type::Client> >={__compressed_pair<CLGnssProvider_Type::Client *, std::__1::default_delete<CLGnssProvider_Type::Client> >=^{Client}}}^{__CFRunLoopTimer}BB[6B]i{CLNameValuePair=^^?^{__CFDictionary}}[6[3d]]}16
^{CLStatusBarIconManager={BasicMutex=^^?^{MutexInfo}}@{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLGnssProvider_Type::Client, std::__1::default_delete<CLGnssProvider_Type::Client> >={__compressed_pair<CLGnssProvider_Type::Client *, std::__1::default_delete<CLGnssProvider_Type::Client> >=^{Client}}}^{__CFRunLoopTimer}BB[6B]i{CLNameValuePair=^^?^{__CFDictionary}}[6[3d]]}
q24@0:8q16
@40@0:8@16q24d32
@48@0:8@16q24@32@40
v32@0:8R@16d24
v24@0:8@?<v@?^{CLStreamingAwareLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBBBB{unique_ptr<CLStreamingAwareLocationProviderStateMachine, std::__1::default_delete<CLStreamingAwareLocationProviderStateMachine> >={__compressed_pair<CLStreamingAwareLocationProviderStateMachine *, std::__1::default_delete<CLStreamingAwareLocationProviderStateMachine> >=^{CLStreamingAwareLocationProviderStateMachine}}}@@{map<CLLocationProvider_Type::Notification, bool, std::__1::less<CLLocationProvider_Type::Notification>, std::__1::allocator<std::__1::pair<const CLLocationProvider_Type::Notification, bool> > >={__tree<std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, std::__1::__map_value_compare<CLLocationProvider_Type::Notification, std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, std::__1::less<CLLocationProvider_Type::Notification>, true>, std::__1::allocator<std::__1::__value_type<CLLocationProvider_Type::Notification, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLLocationProvider_Type::Notification, std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, std::__1::less<CLLocationProvider_Type::Notification>, true> >=Q}}}{map<CLLocationProvider_Type::Notification, bool, std::__1::less<CLLocationProvider_Type::Notification>, std::__1::allocator<std::__1::pair<const CLLocationProvider_Type::Notification, bool> > >={__tree<std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, std::__1::__map_value_compare<CLLocationProvider_Type::Notification, std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, std::__1::less<CLLocationProvider_Type::Notification>, true>, std::__1::allocator<std::__1::__value_type<CLLocationProvider_Type::Notification, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLLocationProvider_Type::Notification, std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, std::__1::less<CLLocationProvider_Type::Notification>, true> >=Q}}}{unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client> >={__compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> >=^{Client}}}{unique_ptr<CLStreamedLocationProvider_Type::Client, std::__1::default_delete<CLStreamedLocationProvider_Type::Client> >={__compressed_pair<CLStreamedLocationProvider_Type::Client *, std::__1::default_delete<CLStreamedLocationProvider_Type::Client> >=^{Client}}}{unique_ptr<CLMotionStateMediator_Type::Client, std::__1::default_delete<CLMotionStateMediator_Type::Client> >={__compressed_pair<CLMotionStateMediator_Type::Client *, std::__1::default_delete<CLMotionStateMediator_Type::Client> >=^{Client}}}{unique_ptr<CLStepCountNotifier_Type::Client, std::__1::default_delete<CLStepCountNotifier_Type::Client> >={__compressed_pair<CLStepCountNotifier_Type::Client *, std::__1::default_delete<CLStepCountNotifier_Type::Client> >=^{Client}}}{map<id, double, std::__1::less<id>, std::__1::allocator<std::__1::pair<const id, double> > >={__tree<std::__1::__value_type<id, double>, std::__1::__map_value_compare<id, std::__1::__value_type<id, double>, std::__1::less<id>, true>, std::__1::allocator<std::__1::__value_type<id, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<id, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<id, std::__1::__value_type<id, double>, std::__1::less<id>, true> >=Q}}}}>16
v32@0:8@?<v@?^{CLStreamingAwareLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBBBB{unique_ptr<CLStreamingAwareLocationProviderStateMachine, std::__1::default_delete<CLStreamingAwareLocationProviderStateMachine> >={__compressed_pair<CLStreamingAwareLocationProviderStateMachine *, std::__1::default_delete<CLStreamingAwareLocationProviderStateMachine> >=^{CLStreamingAwareLocationProviderStateMachine}}}@@{map<CLLocationProvider_Type::Notification, bool, std::__1::less<CLLocationProvider_Type::Notification>, std::__1::allocator<std::__1::pair<const CLLocationProvider_Type::Notification, bool> > >={__tree<std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, std::__1::__map_value_compare<CLLocationProvider_Type::Notification, std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, std::__1::less<CLLocationProvider_Type::Notification>, true>, std::__1::allocator<std::__1::__value_type<CLLocationProvider_Type::Notification, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLLocationProvider_Type::Notification, std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, std::__1::less<CLLocationProvider_Type::Notification>, true> >=Q}}}{map<CLLocationProvider_Type::Notification, bool, std::__1::less<CLLocationProvider_Type::Notification>, std::__1::allocator<std::__1::pair<const CLLocationProvider_Type::Notification, bool> > >={__tree<std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, std::__1::__map_value_compare<CLLocationProvider_Type::Notification, std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, std::__1::less<CLLocationProvider_Type::Notification>, true>, std::__1::allocator<std::__1::__value_type<CLLocationProvider_Type::Notification, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLLocationProvider_Type::Notification, std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, std::__1::less<CLLocationProvider_Type::Notification>, true> >=Q}}}{unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client> >={__compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> >=^{Client}}}{unique_ptr<CLStreamedLocationProvider_Type::Client, std::__1::default_delete<CLStreamedLocationProvider_Type::Client> >={__compressed_pair<CLStreamedLocationProvider_Type::Client *, std::__1::default_delete<CLStreamedLocationProvider_Type::Client> >=^{Client}}}{unique_ptr<CLMotionStateMediator_Type::Client, std::__1::default_delete<CLMotionStateMediator_Type::Client> >={__compressed_pair<CLMotionStateMediator_Type::Client *, std::__1::default_delete<CLMotionStateMediator_Type::Client> >=^{Client}}}{unique_ptr<CLStepCountNotifier_Type::Client, std::__1::default_delete<CLStepCountNotifier_Type::Client> >={__compressed_pair<CLStepCountNotifier_Type::Client *, std::__1::default_delete<CLStepCountNotifier_Type::Client> >=^{Client}}}{map<id, double, std::__1::less<id>, std::__1::allocator<std::__1::pair<const id, double> > >={__tree<std::__1::__value_type<id, double>, std::__1::__map_value_compare<id, std::__1::__value_type<id, double>, std::__1::less<id>, true>, std::__1::allocator<std::__1::__value_type<id, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<id, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<id, std::__1::__value_type<id, double>, std::__1::less<id>, true> >=Q}}}}>16@?<v@?>24
B24@0:8@?<v@?^{CLStreamingAwareLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBBBB{unique_ptr<CLStreamingAwareLocationProviderStateMachine, std::__1::default_delete<CLStreamingAwareLocationProviderStateMachine> >={__compressed_pair<CLStreamingAwareLocationProviderStateMachine *, std::__1::default_delete<CLStreamingAwareLocationProviderStateMachine> >=^{CLStreamingAwareLocationProviderStateMachine}}}@@{map<CLLocationProvider_Type::Notification, bool, std::__1::less<CLLocationProvider_Type::Notification>, std::__1::allocator<std::__1::pair<const CLLocationProvider_Type::Notification, bool> > >={__tree<std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, std::__1::__map_value_compare<CLLocationProvider_Type::Notification, std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, std::__1::less<CLLocationProvider_Type::Notification>, true>, std::__1::allocator<std::__1::__value_type<CLLocationProvider_Type::Notification, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLLocationProvider_Type::Notification, std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, std::__1::less<CLLocationProvider_Type::Notification>, true> >=Q}}}{map<CLLocationProvider_Type::Notification, bool, std::__1::less<CLLocationProvider_Type::Notification>, std::__1::allocator<std::__1::pair<const CLLocationProvider_Type::Notification, bool> > >={__tree<std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, std::__1::__map_value_compare<CLLocationProvider_Type::Notification, std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, std::__1::less<CLLocationProvider_Type::Notification>, true>, std::__1::allocator<std::__1::__value_type<CLLocationProvider_Type::Notification, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLLocationProvider_Type::Notification, std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, std::__1::less<CLLocationProvider_Type::Notification>, true> >=Q}}}{unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client> >={__compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> >=^{Client}}}{unique_ptr<CLStreamedLocationProvider_Type::Client, std::__1::default_delete<CLStreamedLocationProvider_Type::Client> >={__compressed_pair<CLStreamedLocationProvider_Type::Client *, std::__1::default_delete<CLStreamedLocationProvider_Type::Client> >=^{Client}}}{unique_ptr<CLMotionStateMediator_Type::Client, std::__1::default_delete<CLMotionStateMediator_Type::Client> >={__compressed_pair<CLMotionStateMediator_Type::Client *, std::__1::default_delete<CLMotionStateMediator_Type::Client> >=^{Client}}}{unique_ptr<CLStepCountNotifier_Type::Client, std::__1::default_delete<CLStepCountNotifier_Type::Client> >={__compressed_pair<CLStepCountNotifier_Type::Client *, std::__1::default_delete<CLStepCountNotifier_Type::Client> >=^{Client}}}{map<id, double, std::__1::less<id>, std::__1::allocator<std::__1::pair<const id, double> > >={__tree<std::__1::__value_type<id, double>, std::__1::__map_value_compare<id, std::__1::__value_type<id, double>, std::__1::less<id>, true>, std::__1::allocator<std::__1::__value_type<id, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<id, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<id, std::__1::__value_type<id, double>, std::__1::less<id>, true> >=Q}}}}>16
v32@0:8R@"<CLStreamingAwareLocationProviderClientProtocol>"16d24
v24@0:8R@"<CLStreamingAwareLocationProviderClientProtocol>"16
^{CLStreamingAwareLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBBBB{unique_ptr<CLStreamingAwareLocationProviderStateMachine, std::__1::default_delete<CLStreamingAwareLocationProviderStateMachine> >={__compressed_pair<CLStreamingAwareLocationProviderStateMachine *, std::__1::default_delete<CLStreamingAwareLocationProviderStateMachine> >=^{CLStreamingAwareLocationProviderStateMachine}}}@@{map<CLLocationProvider_Type::Notification, bool, std::__1::less<CLLocationProvider_Type::Notification>, std::__1::allocator<std::__1::pair<const CLLocationProvider_Type::Notification, bool> > >={__tree<std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, std::__1::__map_value_compare<CLLocationProvider_Type::Notification, std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, std::__1::less<CLLocationProvider_Type::Notification>, true>, std::__1::allocator<std::__1::__value_type<CLLocationProvider_Type::Notification, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLLocationProvider_Type::Notification, std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, std::__1::less<CLLocationProvider_Type::Notification>, true> >=Q}}}{map<CLLocationProvider_Type::Notification, bool, std::__1::less<CLLocationProvider_Type::Notification>, std::__1::allocator<std::__1::pair<const CLLocationProvider_Type::Notification, bool> > >={__tree<std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, std::__1::__map_value_compare<CLLocationProvider_Type::Notification, std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, std::__1::less<CLLocationProvider_Type::Notification>, true>, std::__1::allocator<std::__1::__value_type<CLLocationProvider_Type::Notification, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLLocationProvider_Type::Notification, std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, std::__1::less<CLLocationProvider_Type::Notification>, true> >=Q}}}{unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client> >={__compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> >=^{Client}}}{unique_ptr<CLStreamedLocationProvider_Type::Client, std::__1::default_delete<CLStreamedLocationProvider_Type::Client> >={__compressed_pair<CLStreamedLocationProvider_Type::Client *, std::__1::default_delete<CLStreamedLocationProvider_Type::Client> >=^{Client}}}{unique_ptr<CLMotionStateMediator_Type::Client, std::__1::default_delete<CLMotionStateMediator_Type::Client> >={__compressed_pair<CLMotionStateMediator_Type::Client *, std::__1::default_delete<CLMotionStateMediator_Type::Client> >=^{Client}}}{unique_ptr<CLStepCountNotifier_Type::Client, std::__1::default_delete<CLStepCountNotifier_Type::Client> >={__compressed_pair<CLStepCountNotifier_Type::Client *, std::__1::default_delete<CLStepCountNotifier_Type::Client> >=^{Client}}}{map<id, double, std::__1::less<id>, std::__1::allocator<std::__1::pair<const id, double> > >={__tree<std::__1::__value_type<id, double>, std::__1::__map_value_compare<id, std::__1::__value_type<id, double>, std::__1::less<id>, true>, std::__1::allocator<std::__1::__value_type<id, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<id, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<id, std::__1::__value_type<id, double>, std::__1::less<id>, true> >=Q}}}}16@0:8
@48@0:8{Cell=iiiiiiii}16
{Cell=iiiiiiii}16@0:8
v48@0:8{Cell=iiiiiiii}16
{CLHarvestCellMeasurementsGsm=iiiii}16@0:8
v36@0:8{CLHarvestCellMeasurementsGsm=iiiii}16
{CLHarvestCellMeasurementsGsm="rssi"i"arfcn"i"psc"i"rscp"i"ecn0"i}
{Cell="mcc"i"mnc"i"lac"i"ci"i"uarfcn"i"psc"i"rscp"i"ecn0"i}
@36@0:8{CLHarvestCellMeasurementsGsm=iiiii}16
@448@0:8{CdmaCell=i{vector<int, std::__1::allocator<int> >=^i^i{__compressed_pair<int *, std::__1::allocator<int> >=^i}}iiiiiiiii{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}iii{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}ii}16
{CdmaCell=i{vector<int, std::__1::allocator<int> >=^i^i{__compressed_pair<int *, std::__1::allocator<int> >=^i}}iiiiiiiii{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}iii{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}ii}16@0:8
v448@0:8{CdmaCell=i{vector<int, std::__1::allocator<int> >=^i^i{__compressed_pair<int *, std::__1::allocator<int> >=^i}}iiiiiiiii{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}iii{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}ii}16
{CdmaCell="mcc"i"derivedMccs"{vector<int, std::__1::allocator<int> >="__begin_"^i"__end_"^i"__end_cap_"{__compressed_pair<int *, std::__1::allocator<int> >="__first_"^i}}"sid"i"nid"i"zoneid"i"bsid"i"bandclass"i"channel"i"pnoffset"i"rscp"i"ecn0"i"bsLocation"{CLDaemonLocation="padding1"i"suitability"i"coordinate"{?="latitude"d"longitude"d}"horizontalAccuracy"d"altitude"d"verticalAccuracy"d"padding2"d"padding3"d"speed"d"speedAccuracy"d"course"d"courseAccuracy"d"timestamp"d"confidence"i"lifespan"d"type"i"rawCoordinate"{?="latitude"d"longitude"d}"rawCourse"d"floor"i"integrity"I"referenceFrame"i"rawReferenceFrame"i}"rat"i"celltype"i"mnc"i"sectorid"{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >="__r_"{__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >="__first_"{__rep=""(?="__l"{__long="__cap_"Q"__size_"Q"__data_"*}"__s"{__short=""(?="__size_"C"__lx"c)"__data_"[23c]}"__r"{__raw="__words"[3Q]})}}}"sectorLocation"{CLDaemonLocation="padding1"i"suitability"i"coordinate"{?="latitude"d"longitude"d}"horizontalAccuracy"d"altitude"d"verticalAccuracy"d"padding2"d"padding3"d"speed"d"speedAccuracy"d"course"d"courseAccuracy"d"timestamp"d"confidence"i"lifespan"d"type"i"rawCoordinate"{?="latitude"d"longitude"d}"rawCourse"d"floor"i"integrity"I"referenceFrame"i"rawReferenceFrame"i}"ltmOffset"i"dayLightSaving"i}
@36@0:8{CLHarvestCellMeasurementsCdma=iiiii}16
{CLHarvestCellMeasurementsCdma=iiiii}16@0:8
v36@0:8{CLHarvestCellMeasurementsCdma=iiiii}16
{CLHarvestCellMeasurementsCdma="pilotPhase"i"pnoffset"i"channel"i"rscp"i"ecn0"i}
@72@0:8{LteCell=iiiiiiiddii}16
{LteCell=iiiiiiiddii}16@0:8
v72@0:8{LteCell=iiiiiiiddii}16
{LteCell="mcc"i"mnc"i"tac"i"ci"i"uarfcn"i"pid"i"band_info"i"cellLatitude"d"cellLongitude"d"rscp"i"ecn0"i}
@36@0:8{CLHarvestCellMeasurementsLte=iiiii}16
{CLHarvestCellMeasurementsLte=iiiii}16@0:8
v36@0:8{CLHarvestCellMeasurementsLte=iiiii}16
{CLHarvestCellMeasurementsLte="pid"i"uarfcn"i"band_info"i"rscp"i"ecn0"i}
@48@0:8{ScdmaCell=iiiiiiii}16
{ScdmaCell=iiiiiiii}16@0:8
v48@0:8{ScdmaCell=iiiiiiii}16
{ScdmaCell="mcc"i"mnc"i"lac"i"ci"i"uarfcn"i"psc"i"rscp"i"ecn0"i}
@36@0:8{CLHarvestCellMeasurementsScdma=iiiii}16
{CLHarvestCellMeasurementsScdma=iiiii}16@0:8
v36@0:8{CLHarvestCellMeasurementsScdma=iiiii}16
{CLHarvestCellMeasurementsScdma="rssi"i"arfcn"i"psc"i"rscp"i"ecn0"i}
@48@0:8@16@24@32@40
@"NSArray"
{?="bandclass"b1"bsid"b1"channel"b1"mcc"b1"nid"b1"pnoffset"b1"sid"b1"zoneid"b1}
@"ALSLocation"
{?="bandclass"b1"channel"b1"pnoffset"b1}
v24@0:8@?<v@?^{CLSensorCalibrationController=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{unique_ptr<CLAggregateDictionary, std::__1::default_delete<CLAggregateDictionary> >={__compressed_pair<CLAggregateDictionary *, std::__1::default_delete<CLAggregateDictionary> >=^{CLAggregateDictionary}}}dddddddddB^{Dispatcher}BBBBBfBdd{unique_ptr<CLSensorCalibrationStaticDetector, std::__1::default_delete<CLSensorCalibrationStaticDetector> >={__compressed_pair<CLSensorCalibrationStaticDetector *, std::__1::default_delete<CLSensorCalibrationStaticDetector> >=^{CLSensorCalibrationStaticDetector}}}d@{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}iBfdfB{unique_ptr<CLSensorTemperatureController, std::__1::default_delete<CLSensorTemperatureController> >={__compressed_pair<CLSensorTemperatureController *, std::__1::default_delete<CLSensorTemperatureController> >=^{CLSensorTemperatureController}}}d@^{Dispatcher}{CLPowerAssertion=^^?i^v^{__CFString}dd@}{unique_ptr<CLSensorCalibrationStaticDetector, std::__1::default_delete<CLSensorCalibrationStaticDetector> >={__compressed_pair<CLSensorCalibrationStaticDetector *, std::__1::default_delete<CLSensorCalibrationStaticDetector> >=^{CLSensorCalibrationStaticDetector}}}}>16
v32@0:8@?<v@?^{CLSensorCalibrationController=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{unique_ptr<CLAggregateDictionary, std::__1::default_delete<CLAggregateDictionary> >={__compressed_pair<CLAggregateDictionary *, std::__1::default_delete<CLAggregateDictionary> >=^{CLAggregateDictionary}}}dddddddddB^{Dispatcher}BBBBBfBdd{unique_ptr<CLSensorCalibrationStaticDetector, std::__1::default_delete<CLSensorCalibrationStaticDetector> >={__compressed_pair<CLSensorCalibrationStaticDetector *, std::__1::default_delete<CLSensorCalibrationStaticDetector> >=^{CLSensorCalibrationStaticDetector}}}d@{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}iBfdfB{unique_ptr<CLSensorTemperatureController, std::__1::default_delete<CLSensorTemperatureController> >={__compressed_pair<CLSensorTemperatureController *, std::__1::default_delete<CLSensorTemperatureController> >=^{CLSensorTemperatureController}}}d@^{Dispatcher}{CLPowerAssertion=^^?i^v^{__CFString}dd@}{unique_ptr<CLSensorCalibrationStaticDetector, std::__1::default_delete<CLSensorCalibrationStaticDetector> >={__compressed_pair<CLSensorCalibrationStaticDetector *, std::__1::default_delete<CLSensorCalibrationStaticDetector> >=^{CLSensorCalibrationStaticDetector}}}}>16@?<v@?>24
B24@0:8@?<v@?^{CLSensorCalibrationController=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{unique_ptr<CLAggregateDictionary, std::__1::default_delete<CLAggregateDictionary> >={__compressed_pair<CLAggregateDictionary *, std::__1::default_delete<CLAggregateDictionary> >=^{CLAggregateDictionary}}}dddddddddB^{Dispatcher}BBBBBfBdd{unique_ptr<CLSensorCalibrationStaticDetector, std::__1::default_delete<CLSensorCalibrationStaticDetector> >={__compressed_pair<CLSensorCalibrationStaticDetector *, std::__1::default_delete<CLSensorCalibrationStaticDetector> >=^{CLSensorCalibrationStaticDetector}}}d@{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}iBfdfB{unique_ptr<CLSensorTemperatureController, std::__1::default_delete<CLSensorTemperatureController> >={__compressed_pair<CLSensorTemperatureController *, std::__1::default_delete<CLSensorTemperatureController> >=^{CLSensorTemperatureController}}}d@^{Dispatcher}{CLPowerAssertion=^^?i^v^{__CFString}dd@}{unique_ptr<CLSensorCalibrationStaticDetector, std::__1::default_delete<CLSensorCalibrationStaticDetector> >={__compressed_pair<CLSensorCalibrationStaticDetector *, std::__1::default_delete<CLSensorCalibrationStaticDetector> >=^{CLSensorCalibrationStaticDetector}}}}>16
^{CLSensorCalibrationController=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{unique_ptr<CLAggregateDictionary, std::__1::default_delete<CLAggregateDictionary> >={__compressed_pair<CLAggregateDictionary *, std::__1::default_delete<CLAggregateDictionary> >=^{CLAggregateDictionary}}}dddddddddB^{Dispatcher}BBBBBfBdd{unique_ptr<CLSensorCalibrationStaticDetector, std::__1::default_delete<CLSensorCalibrationStaticDetector> >={__compressed_pair<CLSensorCalibrationStaticDetector *, std::__1::default_delete<CLSensorCalibrationStaticDetector> >=^{CLSensorCalibrationStaticDetector}}}d@{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}iBfdfB{unique_ptr<CLSensorTemperatureController, std::__1::default_delete<CLSensorTemperatureController> >={__compressed_pair<CLSensorTemperatureController *, std::__1::default_delete<CLSensorTemperatureController> >=^{CLSensorTemperatureController}}}d@^{Dispatcher}{CLPowerAssertion=^^?i^v^{__CFString}dd@}{unique_ptr<CLSensorCalibrationStaticDetector, std::__1::default_delete<CLSensorCalibrationStaticDetector> >={__compressed_pair<CLSensorCalibrationStaticDetector *, std::__1::default_delete<CLSensorCalibrationStaticDetector> >=^{CLSensorCalibrationStaticDetector}}}}16@0:8
{?="altitude"b1"confidence"b1"infoMask"b1"locationType"b1"reach"b1"score"b1"verticalAccuracy"b1}
{?="numberOfSurroundingCdmaCells"b1"numberOfSurroundingCdmaEvdoCells"b1"numberOfSurroundingCells"b1"numberOfSurroundingLteCells"b1"numberOfSurroundingScdmaCells"b1"numberOfSurroundingWifis"b1}
{?="cellID"b1"mcc"b1"mnc"b1"pid"b1"tacID"b1"uarfcn"b1}
{?="numberOfSurroundingWifis"b1"radius"b1"technology"b1"wifiGranularity"b1"needCellsTowers"b1}
v24@0:8@?<v@?^{CLMicroLocationNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB^^?^^?^^?^^?{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client> >={__compressed_pair<CLDataProtectionManager_Type::Client *, std::__1::default_delete<CLDataProtectionManager_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLDarwinNotifier_Type::Client, std::__1::default_delete<CLDarwinNotifier_Type::Client> >={__compressed_pair<CLDarwinNotifier_Type::Client *, std::__1::default_delete<CLDarwinNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLHomeKitProvider_Type::Client, std::__1::default_delete<CLHomeKitProvider_Type::Client> >={__compressed_pair<CLHomeKitProvider_Type::Client *, std::__1::default_delete<CLHomeKitProvider_Type::Client> >=^{Client}}}@@@@@{unique_ptr<CLWifiServiceClient, std::__1::default_delete<CLWifiServiceClient> >={__compressed_pair<CLWifiServiceClient *, std::__1::default_delete<CLWifiServiceClient> >=^{CLWifiServiceClient}}}@{CLMicroLocationDatabase={basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{SqliteProperties=iiBB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}{CLSqliteDatabase=^^?^{sqlite3}^{Mutex}{list<sqlite3_stmt *, std::__1::allocator<sqlite3_stmt *> >={__list_node_base<sqlite3_stmt *, void *>=^{__list_node_base<sqlite3_stmt *, void *>}^{__list_node_base<sqlite3_stmt *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<sqlite3_stmt *, void *> > >=Q}}{SqliteProperties=iiBB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}i@}{unique_ptr<CLMicroLocationConfigurationTable, std::__1::default_delete<CLMicroLocationConfigurationTable> >={__compressed_pair<CLMicroLocationConfigurationTable *, std::__1::default_delete<CLMicroLocationConfigurationTable> >=^{CLMicroLocationConfigurationTable}}}{unique_ptr<CLMicroLocationMeasurementTable, std::__1::default_delete<CLMicroLocationMeasurementTable> >={__compressed_pair<CLMicroLocationMeasurementTable *, std::__1::default_delete<CLMicroLocationMeasurementTable> >=^{CLMicroLocationMeasurementTable}}}{unique_ptr<CLMicroLocationModelTable, std::__1::default_delete<CLMicroLocationModelTable> >={__compressed_pair<CLMicroLocationModelTable *, std::__1::default_delete<CLMicroLocationModelTable> >=^{CLMicroLocationModelTable}}}{unique_ptr<CLMicroLocationRecordingEventsTable, std::__1::default_delete<CLMicroLocationRecordingEventsTable> >={__compressed_pair<CLMicroLocationRecordingEventsTable *, std::__1::default_delete<CLMicroLocationRecordingEventsTable> >=^{CLMicroLocationRecordingEventsTable}}}{BufferedInserts={vector<std::__1::function<bool ()>, std::__1::allocator<std::__1::function<bool ()> > >=^{function<bool ()>}^{function<bool ()>}{__compressed_pair<std::__1::function<bool ()> *, std::__1::allocator<std::__1::function<bool ()> > >=^{function<bool ()>}}}Q}@}{CLMicroLocationLogic=^^?{State=BB{bitset<2>=Q}iiB{optional<std::__1::basic_string<char> >=(?=c{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}})B}{optional<std::__1::basic_string<char> >=(?=c{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}})B}{CLStepCountEntry=dddIddIIdddi^{__CFString}BB{CLAccelerometerPace=ddd}IIC}{AssociationState={optional<CLWifiService_Type::AccessPoint>=(?=c{AccessPoint={CLMacAddress=Q}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}iiiddB})B}}{vector<CLMicroLocationWiFiChannelHistogram, std::__1::allocator<CLMicroLocationWiFiChannelHistogram> >=^{CLMicroLocationWiFiChannelHistogram}^{CLMicroLocationWiFiChannelHistogram}{__compressed_pair<CLMicroLocationWiFiChannelHistogram *, std::__1::allocator<CLMicroLocationWiFiChannelHistogram> >=^{CLMicroLocationWiFiChannelHistogram}}}{shared_ptr<CLMicroLocationWifiScanStrategy>=^{CLMicroLocationWifiScanStrategy}^{__shared_weak_count}}{shared_ptr<CLMicroLocationWifiScanStrategy>=^{CLMicroLocationWifiScanStrategy}^{__shared_weak_count}}B{time_point<cl::chrono::CFAbsoluteTimeClock, std::__1::chrono::duration<long double, std::__1::ratio<1, 1> > >={duration<long double, std::__1::ratio<1, 1> >=D}}B{optional<boost::uuids::uuid>=(?=c{uuid=[16C]})B}{bitset<3>=Q}{bitset<12>=Q}}^{CLMicroLocationDatabase}{CLMicroLocationLocalizer=^{ILocalizerDelegate}{optional<CLMicroLocationLocalizer::ModelsAndLOI>=(?=c{ModelsAndLOI={vector<CLMicroLocationLocalizer::ModelAndIds, std::__1::allocator<CLMicroLocationLocalizer::ModelAndIds> >=^{ModelAndIds}^{ModelAndIds}{__compressed_pair<CLMicroLocationLocalizer::ModelAndIds *, std::__1::allocator<CLMicroLocationLocalizer::ModelAndIds> >=^{ModelAndIds}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}})B}{unique_ptr<std::__1::unordered_multiset<CLMicroLocationProto::Measurement, CLMicroLocationFingerprint::HashMeasurement, CLMicroLocationFingerprint::PredicateMeasurement, std::__1::allocator<CLMicroLocationProto::Measurement> >, std::__1::default_delete<std::__1::unordered_multiset<CLMicroLocationProto::Measurement, CLMicroLocationFingerprint::HashMeasurement, CLMicroLocationFingerprint::PredicateMeasurement, std::__1::allocator<CLMicroLocationProto::Measurement> > > >={__compressed_pair<std::__1::unordered_multiset<CLMicroLocationProto::Measurement, CLMicroLocationFingerprint::HashMeasurement, CLMicroLocationFingerprint::PredicateMeasurement, std::__1::allocator<CLMicroLocationProto::Measurement> > *, std::__1::default_delete<std::__1::unordered_multiset<CLMicroLocationProto::Measurement, CLMicroLocationFingerprint::HashMeasurement, CLMicroLocationFingerprint::PredicateMeasurement, std::__1::allocator<CLMicroLocationProto::Measurement> > > >=^{unordered_multiset<CLMicroLocationProto::Measurement, CLMicroLocationFingerprint::HashMeasurement, CLMicroLocationFingerprint::PredicateMeasurement, std::__1::allocator<CLMicroLocationProto::Measurement> >}}}^{CLMicroLocationDatabase}}{CLMicroLocationRecorder={unique_ptr<CLMicroLocationRecorder::RecordingTransaction, std::__1::default_delete<CLMicroLocationRecorder::RecordingTransaction> >={__compressed_pair<CLMicroLocationRecorder::RecordingTransaction *, std::__1::default_delete<CLMicroLocationRecorder::RecordingTransaction> >=^{RecordingTransaction}}}^{CLMicroLocationDatabase}}{CLMicroLocationSettledStateEstimator=^{CLMicroLocationSettledStateEstimatorDelegate}{CLMicroLocationWiFiSettledStateSequentialEstimator=Sd{unordered_map<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState, std::__1::hash<CLMacAddress>, std::__1::equal_to<CLMacAddress>, std::__1::allocator<std::__1::pair<const CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState> > >={__hash_table<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, std::__1::__unordered_map_hasher<CLMacAddress, std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, std::__1::hash<CLMacAddress>, true>, std::__1::__unordered_map_equal<CLMacAddress, std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, std::__1::equal_to<CLMacAddress>, true>, std::__1::allocator<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CLMacAddress, std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, std::__1::hash<CLMacAddress>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<CLMacAddress, std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, std::__1::equal_to<CLMacAddress>, true> >=f}}}II}{CLMicroLocationAccelerometerPowerDetector={ConfigurationParameters=ddddd}iddBBd{deque<double, std::__1::allocator<double> >={__split_buffer<double *, std::__1::allocator<double *> >=^^d^^d^^d{__compressed_pair<double **, std::__1::allocator<double *> >=^^d}}Q{__compressed_pair<unsigned long, std::__1::allocator<double> >=Q}}}{State=iii}ii}^{ILogicDelegate}}{unique_ptr<CLMicroLocationBackgroundActivities, std::__1::default_delete<CLMicroLocationBackgroundActivities> >={__compressed_pair<CLMicroLocationBackgroundActivities *, std::__1::default_delete<CLMicroLocationBackgroundActivities> >=^{CLMicroLocationBackgroundActivities}}}@{unique_ptr<CLWifiScanner, std::__1::default_delete<CLWifiScanner> >={__compressed_pair<CLWifiScanner *, std::__1::default_delete<CLWifiScanner> >=^{CLWifiScanner}}}{unique_ptr<CLWifiScanner, std::__1::default_delete<CLWifiScanner> >={__compressed_pair<CLWifiScanner *, std::__1::default_delete<CLWifiScanner> >=^{CLWifiScanner}}}{CLPowerAssertion=^^?i^v^{__CFString}dd@}}>16
v32@0:8@?<v@?^{CLMicroLocationNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB^^?^^?^^?^^?{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client> >={__compressed_pair<CLDataProtectionManager_Type::Client *, std::__1::default_delete<CLDataProtectionManager_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLDarwinNotifier_Type::Client, std::__1::default_delete<CLDarwinNotifier_Type::Client> >={__compressed_pair<CLDarwinNotifier_Type::Client *, std::__1::default_delete<CLDarwinNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLHomeKitProvider_Type::Client, std::__1::default_delete<CLHomeKitProvider_Type::Client> >={__compressed_pair<CLHomeKitProvider_Type::Client *, std::__1::default_delete<CLHomeKitProvider_Type::Client> >=^{Client}}}@@@@@{unique_ptr<CLWifiServiceClient, std::__1::default_delete<CLWifiServiceClient> >={__compressed_pair<CLWifiServiceClient *, std::__1::default_delete<CLWifiServiceClient> >=^{CLWifiServiceClient}}}@{CLMicroLocationDatabase={basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{SqliteProperties=iiBB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}{CLSqliteDatabase=^^?^{sqlite3}^{Mutex}{list<sqlite3_stmt *, std::__1::allocator<sqlite3_stmt *> >={__list_node_base<sqlite3_stmt *, void *>=^{__list_node_base<sqlite3_stmt *, void *>}^{__list_node_base<sqlite3_stmt *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<sqlite3_stmt *, void *> > >=Q}}{SqliteProperties=iiBB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}i@}{unique_ptr<CLMicroLocationConfigurationTable, std::__1::default_delete<CLMicroLocationConfigurationTable> >={__compressed_pair<CLMicroLocationConfigurationTable *, std::__1::default_delete<CLMicroLocationConfigurationTable> >=^{CLMicroLocationConfigurationTable}}}{unique_ptr<CLMicroLocationMeasurementTable, std::__1::default_delete<CLMicroLocationMeasurementTable> >={__compressed_pair<CLMicroLocationMeasurementTable *, std::__1::default_delete<CLMicroLocationMeasurementTable> >=^{CLMicroLocationMeasurementTable}}}{unique_ptr<CLMicroLocationModelTable, std::__1::default_delete<CLMicroLocationModelTable> >={__compressed_pair<CLMicroLocationModelTable *, std::__1::default_delete<CLMicroLocationModelTable> >=^{CLMicroLocationModelTable}}}{unique_ptr<CLMicroLocationRecordingEventsTable, std::__1::default_delete<CLMicroLocationRecordingEventsTable> >={__compressed_pair<CLMicroLocationRecordingEventsTable *, std::__1::default_delete<CLMicroLocationRecordingEventsTable> >=^{CLMicroLocationRecordingEventsTable}}}{BufferedInserts={vector<std::__1::function<bool ()>, std::__1::allocator<std::__1::function<bool ()> > >=^{function<bool ()>}^{function<bool ()>}{__compressed_pair<std::__1::function<bool ()> *, std::__1::allocator<std::__1::function<bool ()> > >=^{function<bool ()>}}}Q}@}{CLMicroLocationLogic=^^?{State=BB{bitset<2>=Q}iiB{optional<std::__1::basic_string<char> >=(?=c{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}})B}{optional<std::__1::basic_string<char> >=(?=c{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}})B}{CLStepCountEntry=dddIddIIdddi^{__CFString}BB{CLAccelerometerPace=ddd}IIC}{AssociationState={optional<CLWifiService_Type::AccessPoint>=(?=c{AccessPoint={CLMacAddress=Q}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}iiiddB})B}}{vector<CLMicroLocationWiFiChannelHistogram, std::__1::allocator<CLMicroLocationWiFiChannelHistogram> >=^{CLMicroLocationWiFiChannelHistogram}^{CLMicroLocationWiFiChannelHistogram}{__compressed_pair<CLMicroLocationWiFiChannelHistogram *, std::__1::allocator<CLMicroLocationWiFiChannelHistogram> >=^{CLMicroLocationWiFiChannelHistogram}}}{shared_ptr<CLMicroLocationWifiScanStrategy>=^{CLMicroLocationWifiScanStrategy}^{__shared_weak_count}}{shared_ptr<CLMicroLocationWifiScanStrategy>=^{CLMicroLocationWifiScanStrategy}^{__shared_weak_count}}B{time_point<cl::chrono::CFAbsoluteTimeClock, std::__1::chrono::duration<long double, std::__1::ratio<1, 1> > >={duration<long double, std::__1::ratio<1, 1> >=D}}B{optional<boost::uuids::uuid>=(?=c{uuid=[16C]})B}{bitset<3>=Q}{bitset<12>=Q}}^{CLMicroLocationDatabase}{CLMicroLocationLocalizer=^{ILocalizerDelegate}{optional<CLMicroLocationLocalizer::ModelsAndLOI>=(?=c{ModelsAndLOI={vector<CLMicroLocationLocalizer::ModelAndIds, std::__1::allocator<CLMicroLocationLocalizer::ModelAndIds> >=^{ModelAndIds}^{ModelAndIds}{__compressed_pair<CLMicroLocationLocalizer::ModelAndIds *, std::__1::allocator<CLMicroLocationLocalizer::ModelAndIds> >=^{ModelAndIds}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}})B}{unique_ptr<std::__1::unordered_multiset<CLMicroLocationProto::Measurement, CLMicroLocationFingerprint::HashMeasurement, CLMicroLocationFingerprint::PredicateMeasurement, std::__1::allocator<CLMicroLocationProto::Measurement> >, std::__1::default_delete<std::__1::unordered_multiset<CLMicroLocationProto::Measurement, CLMicroLocationFingerprint::HashMeasurement, CLMicroLocationFingerprint::PredicateMeasurement, std::__1::allocator<CLMicroLocationProto::Measurement> > > >={__compressed_pair<std::__1::unordered_multiset<CLMicroLocationProto::Measurement, CLMicroLocationFingerprint::HashMeasurement, CLMicroLocationFingerprint::PredicateMeasurement, std::__1::allocator<CLMicroLocationProto::Measurement> > *, std::__1::default_delete<std::__1::unordered_multiset<CLMicroLocationProto::Measurement, CLMicroLocationFingerprint::HashMeasurement, CLMicroLocationFingerprint::PredicateMeasurement, std::__1::allocator<CLMicroLocationProto::Measurement> > > >=^{unordered_multiset<CLMicroLocationProto::Measurement, CLMicroLocationFingerprint::HashMeasurement, CLMicroLocationFingerprint::PredicateMeasurement, std::__1::allocator<CLMicroLocationProto::Measurement> >}}}^{CLMicroLocationDatabase}}{CLMicroLocationRecorder={unique_ptr<CLMicroLocationRecorder::RecordingTransaction, std::__1::default_delete<CLMicroLocationRecorder::RecordingTransaction> >={__compressed_pair<CLMicroLocationRecorder::RecordingTransaction *, std::__1::default_delete<CLMicroLocationRecorder::RecordingTransaction> >=^{RecordingTransaction}}}^{CLMicroLocationDatabase}}{CLMicroLocationSettledStateEstimator=^{CLMicroLocationSettledStateEstimatorDelegate}{CLMicroLocationWiFiSettledStateSequentialEstimator=Sd{unordered_map<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState, std::__1::hash<CLMacAddress>, std::__1::equal_to<CLMacAddress>, std::__1::allocator<std::__1::pair<const CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState> > >={__hash_table<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, std::__1::__unordered_map_hasher<CLMacAddress, std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, std::__1::hash<CLMacAddress>, true>, std::__1::__unordered_map_equal<CLMacAddress, std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, std::__1::equal_to<CLMacAddress>, true>, std::__1::allocator<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CLMacAddress, std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, std::__1::hash<CLMacAddress>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<CLMacAddress, std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, std::__1::equal_to<CLMacAddress>, true> >=f}}}II}{CLMicroLocationAccelerometerPowerDetector={ConfigurationParameters=ddddd}iddBBd{deque<double, std::__1::allocator<double> >={__split_buffer<double *, std::__1::allocator<double *> >=^^d^^d^^d{__compressed_pair<double **, std::__1::allocator<double *> >=^^d}}Q{__compressed_pair<unsigned long, std::__1::allocator<double> >=Q}}}{State=iii}ii}^{ILogicDelegate}}{unique_ptr<CLMicroLocationBackgroundActivities, std::__1::default_delete<CLMicroLocationBackgroundActivities> >={__compressed_pair<CLMicroLocationBackgroundActivities *, std::__1::default_delete<CLMicroLocationBackgroundActivities> >=^{CLMicroLocationBackgroundActivities}}}@{unique_ptr<CLWifiScanner, std::__1::default_delete<CLWifiScanner> >={__compressed_pair<CLWifiScanner *, std::__1::default_delete<CLWifiScanner> >=^{CLWifiScanner}}}{unique_ptr<CLWifiScanner, std::__1::default_delete<CLWifiScanner> >={__compressed_pair<CLWifiScanner *, std::__1::default_delete<CLWifiScanner> >=^{CLWifiScanner}}}{CLPowerAssertion=^^?i^v^{__CFString}dd@}}>16@?<v@?>24
B24@0:8@?<v@?^{CLMicroLocationNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB^^?^^?^^?^^?{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client> >={__compressed_pair<CLDataProtectionManager_Type::Client *, std::__1::default_delete<CLDataProtectionManager_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLDarwinNotifier_Type::Client, std::__1::default_delete<CLDarwinNotifier_Type::Client> >={__compressed_pair<CLDarwinNotifier_Type::Client *, std::__1::default_delete<CLDarwinNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLHomeKitProvider_Type::Client, std::__1::default_delete<CLHomeKitProvider_Type::Client> >={__compressed_pair<CLHomeKitProvider_Type::Client *, std::__1::default_delete<CLHomeKitProvider_Type::Client> >=^{Client}}}@@@@@{unique_ptr<CLWifiServiceClient, std::__1::default_delete<CLWifiServiceClient> >={__compressed_pair<CLWifiServiceClient *, std::__1::default_delete<CLWifiServiceClient> >=^{CLWifiServiceClient}}}@{CLMicroLocationDatabase={basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{SqliteProperties=iiBB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}{CLSqliteDatabase=^^?^{sqlite3}^{Mutex}{list<sqlite3_stmt *, std::__1::allocator<sqlite3_stmt *> >={__list_node_base<sqlite3_stmt *, void *>=^{__list_node_base<sqlite3_stmt *, void *>}^{__list_node_base<sqlite3_stmt *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<sqlite3_stmt *, void *> > >=Q}}{SqliteProperties=iiBB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}i@}{unique_ptr<CLMicroLocationConfigurationTable, std::__1::default_delete<CLMicroLocationConfigurationTable> >={__compressed_pair<CLMicroLocationConfigurationTable *, std::__1::default_delete<CLMicroLocationConfigurationTable> >=^{CLMicroLocationConfigurationTable}}}{unique_ptr<CLMicroLocationMeasurementTable, std::__1::default_delete<CLMicroLocationMeasurementTable> >={__compressed_pair<CLMicroLocationMeasurementTable *, std::__1::default_delete<CLMicroLocationMeasurementTable> >=^{CLMicroLocationMeasurementTable}}}{unique_ptr<CLMicroLocationModelTable, std::__1::default_delete<CLMicroLocationModelTable> >={__compressed_pair<CLMicroLocationModelTable *, std::__1::default_delete<CLMicroLocationModelTable> >=^{CLMicroLocationModelTable}}}{unique_ptr<CLMicroLocationRecordingEventsTable, std::__1::default_delete<CLMicroLocationRecordingEventsTable> >={__compressed_pair<CLMicroLocationRecordingEventsTable *, std::__1::default_delete<CLMicroLocationRecordingEventsTable> >=^{CLMicroLocationRecordingEventsTable}}}{BufferedInserts={vector<std::__1::function<bool ()>, std::__1::allocator<std::__1::function<bool ()> > >=^{function<bool ()>}^{function<bool ()>}{__compressed_pair<std::__1::function<bool ()> *, std::__1::allocator<std::__1::function<bool ()> > >=^{function<bool ()>}}}Q}@}{CLMicroLocationLogic=^^?{State=BB{bitset<2>=Q}iiB{optional<std::__1::basic_string<char> >=(?=c{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}})B}{optional<std::__1::basic_string<char> >=(?=c{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}})B}{CLStepCountEntry=dddIddIIdddi^{__CFString}BB{CLAccelerometerPace=ddd}IIC}{AssociationState={optional<CLWifiService_Type::AccessPoint>=(?=c{AccessPoint={CLMacAddress=Q}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}iiiddB})B}}{vector<CLMicroLocationWiFiChannelHistogram, std::__1::allocator<CLMicroLocationWiFiChannelHistogram> >=^{CLMicroLocationWiFiChannelHistogram}^{CLMicroLocationWiFiChannelHistogram}{__compressed_pair<CLMicroLocationWiFiChannelHistogram *, std::__1::allocator<CLMicroLocationWiFiChannelHistogram> >=^{CLMicroLocationWiFiChannelHistogram}}}{shared_ptr<CLMicroLocationWifiScanStrategy>=^{CLMicroLocationWifiScanStrategy}^{__shared_weak_count}}{shared_ptr<CLMicroLocationWifiScanStrategy>=^{CLMicroLocationWifiScanStrategy}^{__shared_weak_count}}B{time_point<cl::chrono::CFAbsoluteTimeClock, std::__1::chrono::duration<long double, std::__1::ratio<1, 1> > >={duration<long double, std::__1::ratio<1, 1> >=D}}B{optional<boost::uuids::uuid>=(?=c{uuid=[16C]})B}{bitset<3>=Q}{bitset<12>=Q}}^{CLMicroLocationDatabase}{CLMicroLocationLocalizer=^{ILocalizerDelegate}{optional<CLMicroLocationLocalizer::ModelsAndLOI>=(?=c{ModelsAndLOI={vector<CLMicroLocationLocalizer::ModelAndIds, std::__1::allocator<CLMicroLocationLocalizer::ModelAndIds> >=^{ModelAndIds}^{ModelAndIds}{__compressed_pair<CLMicroLocationLocalizer::ModelAndIds *, std::__1::allocator<CLMicroLocationLocalizer::ModelAndIds> >=^{ModelAndIds}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}})B}{unique_ptr<std::__1::unordered_multiset<CLMicroLocationProto::Measurement, CLMicroLocationFingerprint::HashMeasurement, CLMicroLocationFingerprint::PredicateMeasurement, std::__1::allocator<CLMicroLocationProto::Measurement> >, std::__1::default_delete<std::__1::unordered_multiset<CLMicroLocationProto::Measurement, CLMicroLocationFingerprint::HashMeasurement, CLMicroLocationFingerprint::PredicateMeasurement, std::__1::allocator<CLMicroLocationProto::Measurement> > > >={__compressed_pair<std::__1::unordered_multiset<CLMicroLocationProto::Measurement, CLMicroLocationFingerprint::HashMeasurement, CLMicroLocationFingerprint::PredicateMeasurement, std::__1::allocator<CLMicroLocationProto::Measurement> > *, std::__1::default_delete<std::__1::unordered_multiset<CLMicroLocationProto::Measurement, CLMicroLocationFingerprint::HashMeasurement, CLMicroLocationFingerprint::PredicateMeasurement, std::__1::allocator<CLMicroLocationProto::Measurement> > > >=^{unordered_multiset<CLMicroLocationProto::Measurement, CLMicroLocationFingerprint::HashMeasurement, CLMicroLocationFingerprint::PredicateMeasurement, std::__1::allocator<CLMicroLocationProto::Measurement> >}}}^{CLMicroLocationDatabase}}{CLMicroLocationRecorder={unique_ptr<CLMicroLocationRecorder::RecordingTransaction, std::__1::default_delete<CLMicroLocationRecorder::RecordingTransaction> >={__compressed_pair<CLMicroLocationRecorder::RecordingTransaction *, std::__1::default_delete<CLMicroLocationRecorder::RecordingTransaction> >=^{RecordingTransaction}}}^{CLMicroLocationDatabase}}{CLMicroLocationSettledStateEstimator=^{CLMicroLocationSettledStateEstimatorDelegate}{CLMicroLocationWiFiSettledStateSequentialEstimator=Sd{unordered_map<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState, std::__1::hash<CLMacAddress>, std::__1::equal_to<CLMacAddress>, std::__1::allocator<std::__1::pair<const CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState> > >={__hash_table<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, std::__1::__unordered_map_hasher<CLMacAddress, std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, std::__1::hash<CLMacAddress>, true>, std::__1::__unordered_map_equal<CLMacAddress, std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, std::__1::equal_to<CLMacAddress>, true>, std::__1::allocator<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CLMacAddress, std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, std::__1::hash<CLMacAddress>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<CLMacAddress, std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, std::__1::equal_to<CLMacAddress>, true> >=f}}}II}{CLMicroLocationAccelerometerPowerDetector={ConfigurationParameters=ddddd}iddBBd{deque<double, std::__1::allocator<double> >={__split_buffer<double *, std::__1::allocator<double *> >=^^d^^d^^d{__compressed_pair<double **, std::__1::allocator<double *> >=^^d}}Q{__compressed_pair<unsigned long, std::__1::allocator<double> >=Q}}}{State=iii}ii}^{ILogicDelegate}}{unique_ptr<CLMicroLocationBackgroundActivities, std::__1::default_delete<CLMicroLocationBackgroundActivities> >={__compressed_pair<CLMicroLocationBackgroundActivities *, std::__1::default_delete<CLMicroLocationBackgroundActivities> >=^{CLMicroLocationBackgroundActivities}}}@{unique_ptr<CLWifiScanner, std::__1::default_delete<CLWifiScanner> >={__compressed_pair<CLWifiScanner *, std::__1::default_delete<CLWifiScanner> >=^{CLWifiScanner}}}{unique_ptr<CLWifiScanner, std::__1::default_delete<CLWifiScanner> >={__compressed_pair<CLWifiScanner *, std::__1::default_delete<CLWifiScanner> >=^{CLWifiScanner}}}{CLPowerAssertion=^^?i^v^{__CFString}dd@}}>16
^{CLMicroLocationNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB^^?^^?^^?^^?{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client> >={__compressed_pair<CLDataProtectionManager_Type::Client *, std::__1::default_delete<CLDataProtectionManager_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLDarwinNotifier_Type::Client, std::__1::default_delete<CLDarwinNotifier_Type::Client> >={__compressed_pair<CLDarwinNotifier_Type::Client *, std::__1::default_delete<CLDarwinNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLHomeKitProvider_Type::Client, std::__1::default_delete<CLHomeKitProvider_Type::Client> >={__compressed_pair<CLHomeKitProvider_Type::Client *, std::__1::default_delete<CLHomeKitProvider_Type::Client> >=^{Client}}}@@@@@{unique_ptr<CLWifiServiceClient, std::__1::default_delete<CLWifiServiceClient> >={__compressed_pair<CLWifiServiceClient *, std::__1::default_delete<CLWifiServiceClient> >=^{CLWifiServiceClient}}}@{CLMicroLocationDatabase={basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{SqliteProperties=iiBB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}{CLSqliteDatabase=^^?^{sqlite3}^{Mutex}{list<sqlite3_stmt *, std::__1::allocator<sqlite3_stmt *> >={__list_node_base<sqlite3_stmt *, void *>=^{__list_node_base<sqlite3_stmt *, void *>}^{__list_node_base<sqlite3_stmt *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<sqlite3_stmt *, void *> > >=Q}}{SqliteProperties=iiBB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}i@}{unique_ptr<CLMicroLocationConfigurationTable, std::__1::default_delete<CLMicroLocationConfigurationTable> >={__compressed_pair<CLMicroLocationConfigurationTable *, std::__1::default_delete<CLMicroLocationConfigurationTable> >=^{CLMicroLocationConfigurationTable}}}{unique_ptr<CLMicroLocationMeasurementTable, std::__1::default_delete<CLMicroLocationMeasurementTable> >={__compressed_pair<CLMicroLocationMeasurementTable *, std::__1::default_delete<CLMicroLocationMeasurementTable> >=^{CLMicroLocationMeasurementTable}}}{unique_ptr<CLMicroLocationModelTable, std::__1::default_delete<CLMicroLocationModelTable> >={__compressed_pair<CLMicroLocationModelTable *, std::__1::default_delete<CLMicroLocationModelTable> >=^{CLMicroLocationModelTable}}}{unique_ptr<CLMicroLocationRecordingEventsTable, std::__1::default_delete<CLMicroLocationRecordingEventsTable> >={__compressed_pair<CLMicroLocationRecordingEventsTable *, std::__1::default_delete<CLMicroLocationRecordingEventsTable> >=^{CLMicroLocationRecordingEventsTable}}}{BufferedInserts={vector<std::__1::function<bool ()>, std::__1::allocator<std::__1::function<bool ()> > >=^{function<bool ()>}^{function<bool ()>}{__compressed_pair<std::__1::function<bool ()> *, std::__1::allocator<std::__1::function<bool ()> > >=^{function<bool ()>}}}Q}@}{CLMicroLocationLogic=^^?{State=BB{bitset<2>=Q}iiB{optional<std::__1::basic_string<char> >=(?=c{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}})B}{optional<std::__1::basic_string<char> >=(?=c{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}})B}{CLStepCountEntry=dddIddIIdddi^{__CFString}BB{CLAccelerometerPace=ddd}IIC}{AssociationState={optional<CLWifiService_Type::AccessPoint>=(?=c{AccessPoint={CLMacAddress=Q}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}iiiddB})B}}{vector<CLMicroLocationWiFiChannelHistogram, std::__1::allocator<CLMicroLocationWiFiChannelHistogram> >=^{CLMicroLocationWiFiChannelHistogram}^{CLMicroLocationWiFiChannelHistogram}{__compressed_pair<CLMicroLocationWiFiChannelHistogram *, std::__1::allocator<CLMicroLocationWiFiChannelHistogram> >=^{CLMicroLocationWiFiChannelHistogram}}}{shared_ptr<CLMicroLocationWifiScanStrategy>=^{CLMicroLocationWifiScanStrategy}^{__shared_weak_count}}{shared_ptr<CLMicroLocationWifiScanStrategy>=^{CLMicroLocationWifiScanStrategy}^{__shared_weak_count}}B{time_point<cl::chrono::CFAbsoluteTimeClock, std::__1::chrono::duration<long double, std::__1::ratio<1, 1> > >={duration<long double, std::__1::ratio<1, 1> >=D}}B{optional<boost::uuids::uuid>=(?=c{uuid=[16C]})B}{bitset<3>=Q}{bitset<12>=Q}}^{CLMicroLocationDatabase}{CLMicroLocationLocalizer=^{ILocalizerDelegate}{optional<CLMicroLocationLocalizer::ModelsAndLOI>=(?=c{ModelsAndLOI={vector<CLMicroLocationLocalizer::ModelAndIds, std::__1::allocator<CLMicroLocationLocalizer::ModelAndIds> >=^{ModelAndIds}^{ModelAndIds}{__compressed_pair<CLMicroLocationLocalizer::ModelAndIds *, std::__1::allocator<CLMicroLocationLocalizer::ModelAndIds> >=^{ModelAndIds}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}})B}{unique_ptr<std::__1::unordered_multiset<CLMicroLocationProto::Measurement, CLMicroLocationFingerprint::HashMeasurement, CLMicroLocationFingerprint::PredicateMeasurement, std::__1::allocator<CLMicroLocationProto::Measurement> >, std::__1::default_delete<std::__1::unordered_multiset<CLMicroLocationProto::Measurement, CLMicroLocationFingerprint::HashMeasurement, CLMicroLocationFingerprint::PredicateMeasurement, std::__1::allocator<CLMicroLocationProto::Measurement> > > >={__compressed_pair<std::__1::unordered_multiset<CLMicroLocationProto::Measurement, CLMicroLocationFingerprint::HashMeasurement, CLMicroLocationFingerprint::PredicateMeasurement, std::__1::allocator<CLMicroLocationProto::Measurement> > *, std::__1::default_delete<std::__1::unordered_multiset<CLMicroLocationProto::Measurement, CLMicroLocationFingerprint::HashMeasurement, CLMicroLocationFingerprint::PredicateMeasurement, std::__1::allocator<CLMicroLocationProto::Measurement> > > >=^{unordered_multiset<CLMicroLocationProto::Measurement, CLMicroLocationFingerprint::HashMeasurement, CLMicroLocationFingerprint::PredicateMeasurement, std::__1::allocator<CLMicroLocationProto::Measurement> >}}}^{CLMicroLocationDatabase}}{CLMicroLocationRecorder={unique_ptr<CLMicroLocationRecorder::RecordingTransaction, std::__1::default_delete<CLMicroLocationRecorder::RecordingTransaction> >={__compressed_pair<CLMicroLocationRecorder::RecordingTransaction *, std::__1::default_delete<CLMicroLocationRecorder::RecordingTransaction> >=^{RecordingTransaction}}}^{CLMicroLocationDatabase}}{CLMicroLocationSettledStateEstimator=^{CLMicroLocationSettledStateEstimatorDelegate}{CLMicroLocationWiFiSettledStateSequentialEstimator=Sd{unordered_map<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState, std::__1::hash<CLMacAddress>, std::__1::equal_to<CLMacAddress>, std::__1::allocator<std::__1::pair<const CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState> > >={__hash_table<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, std::__1::__unordered_map_hasher<CLMacAddress, std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, std::__1::hash<CLMacAddress>, true>, std::__1::__unordered_map_equal<CLMacAddress, std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, std::__1::equal_to<CLMacAddress>, true>, std::__1::allocator<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CLMacAddress, std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, std::__1::hash<CLMacAddress>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<CLMacAddress, std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, std::__1::equal_to<CLMacAddress>, true> >=f}}}II}{CLMicroLocationAccelerometerPowerDetector={ConfigurationParameters=ddddd}iddBBd{deque<double, std::__1::allocator<double> >={__split_buffer<double *, std::__1::allocator<double *> >=^^d^^d^^d{__compressed_pair<double **, std::__1::allocator<double *> >=^^d}}Q{__compressed_pair<unsigned long, std::__1::allocator<double> >=Q}}}{State=iii}ii}^{ILogicDelegate}}{unique_ptr<CLMicroLocationBackgroundActivities, std::__1::default_delete<CLMicroLocationBackgroundActivities> >={__compressed_pair<CLMicroLocationBackgroundActivities *, std::__1::default_delete<CLMicroLocationBackgroundActivities> >=^{CLMicroLocationBackgroundActivities}}}@{unique_ptr<CLWifiScanner, std::__1::default_delete<CLWifiScanner> >={__compressed_pair<CLWifiScanner *, std::__1::default_delete<CLWifiScanner> >=^{CLWifiScanner}}}{unique_ptr<CLWifiScanner, std::__1::default_delete<CLWifiScanner> >={__compressed_pair<CLWifiScanner *, std::__1::default_delete<CLWifiScanner> >=^{CLWifiScanner}}}{CLPowerAssertion=^^?i^v^{__CFString}dd@}}16@0:8
@24@0:8^{CLMicroLocationNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB^^?^^?^^?^^?{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client> >={__compressed_pair<CLDataProtectionManager_Type::Client *, std::__1::default_delete<CLDataProtectionManager_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLDarwinNotifier_Type::Client, std::__1::default_delete<CLDarwinNotifier_Type::Client> >={__compressed_pair<CLDarwinNotifier_Type::Client *, std::__1::default_delete<CLDarwinNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLHomeKitProvider_Type::Client, std::__1::default_delete<CLHomeKitProvider_Type::Client> >={__compressed_pair<CLHomeKitProvider_Type::Client *, std::__1::default_delete<CLHomeKitProvider_Type::Client> >=^{Client}}}@@@@@{unique_ptr<CLWifiServiceClient, std::__1::default_delete<CLWifiServiceClient> >={__compressed_pair<CLWifiServiceClient *, std::__1::default_delete<CLWifiServiceClient> >=^{CLWifiServiceClient}}}@{CLMicroLocationDatabase={basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{SqliteProperties=iiBB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}{CLSqliteDatabase=^^?^{sqlite3}^{Mutex}{list<sqlite3_stmt *, std::__1::allocator<sqlite3_stmt *> >={__list_node_base<sqlite3_stmt *, void *>=^{__list_node_base<sqlite3_stmt *, void *>}^{__list_node_base<sqlite3_stmt *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<sqlite3_stmt *, void *> > >=Q}}{SqliteProperties=iiBB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}i@}{unique_ptr<CLMicroLocationConfigurationTable, std::__1::default_delete<CLMicroLocationConfigurationTable> >={__compressed_pair<CLMicroLocationConfigurationTable *, std::__1::default_delete<CLMicroLocationConfigurationTable> >=^{CLMicroLocationConfigurationTable}}}{unique_ptr<CLMicroLocationMeasurementTable, std::__1::default_delete<CLMicroLocationMeasurementTable> >={__compressed_pair<CLMicroLocationMeasurementTable *, std::__1::default_delete<CLMicroLocationMeasurementTable> >=^{CLMicroLocationMeasurementTable}}}{unique_ptr<CLMicroLocationModelTable, std::__1::default_delete<CLMicroLocationModelTable> >={__compressed_pair<CLMicroLocationModelTable *, std::__1::default_delete<CLMicroLocationModelTable> >=^{CLMicroLocationModelTable}}}{unique_ptr<CLMicroLocationRecordingEventsTable, std::__1::default_delete<CLMicroLocationRecordingEventsTable> >={__compressed_pair<CLMicroLocationRecordingEventsTable *, std::__1::default_delete<CLMicroLocationRecordingEventsTable> >=^{CLMicroLocationRecordingEventsTable}}}{BufferedInserts={vector<std::__1::function<bool ()>, std::__1::allocator<std::__1::function<bool ()> > >=^{function<bool ()>}^{function<bool ()>}{__compressed_pair<std::__1::function<bool ()> *, std::__1::allocator<std::__1::function<bool ()> > >=^{function<bool ()>}}}Q}@}{CLMicroLocationLogic=^^?{State=BB{bitset<2>=Q}iiB{optional<std::__1::basic_string<char> >=(?=c{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}})B}{optional<std::__1::basic_string<char> >=(?=c{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}})B}{CLStepCountEntry=dddIddIIdddi^{__CFString}BB{CLAccelerometerPace=ddd}IIC}{AssociationState={optional<CLWifiService_Type::AccessPoint>=(?=c{AccessPoint={CLMacAddress=Q}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}iiiddB})B}}{vector<CLMicroLocationWiFiChannelHistogram, std::__1::allocator<CLMicroLocationWiFiChannelHistogram> >=^{CLMicroLocationWiFiChannelHistogram}^{CLMicroLocationWiFiChannelHistogram}{__compressed_pair<CLMicroLocationWiFiChannelHistogram *, std::__1::allocator<CLMicroLocationWiFiChannelHistogram> >=^{CLMicroLocationWiFiChannelHistogram}}}{shared_ptr<CLMicroLocationWifiScanStrategy>=^{CLMicroLocationWifiScanStrategy}^{__shared_weak_count}}{shared_ptr<CLMicroLocationWifiScanStrategy>=^{CLMicroLocationWifiScanStrategy}^{__shared_weak_count}}B{time_point<cl::chrono::CFAbsoluteTimeClock, std::__1::chrono::duration<long double, std::__1::ratio<1, 1> > >={duration<long double, std::__1::ratio<1, 1> >=D}}B{optional<boost::uuids::uuid>=(?=c{uuid=[16C]})B}{bitset<3>=Q}{bitset<12>=Q}}^{CLMicroLocationDatabase}{CLMicroLocationLocalizer=^{ILocalizerDelegate}{optional<CLMicroLocationLocalizer::ModelsAndLOI>=(?=c{ModelsAndLOI={vector<CLMicroLocationLocalizer::ModelAndIds, std::__1::allocator<CLMicroLocationLocalizer::ModelAndIds> >=^{ModelAndIds}^{ModelAndIds}{__compressed_pair<CLMicroLocationLocalizer::ModelAndIds *, std::__1::allocator<CLMicroLocationLocalizer::ModelAndIds> >=^{ModelAndIds}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}})B}{unique_ptr<std::__1::unordered_multiset<CLMicroLocationProto::Measurement, CLMicroLocationFingerprint::HashMeasurement, CLMicroLocationFingerprint::PredicateMeasurement, std::__1::allocator<CLMicroLocationProto::Measurement> >, std::__1::default_delete<std::__1::unordered_multiset<CLMicroLocationProto::Measurement, CLMicroLocationFingerprint::HashMeasurement, CLMicroLocationFingerprint::PredicateMeasurement, std::__1::allocator<CLMicroLocationProto::Measurement> > > >={__compressed_pair<std::__1::unordered_multiset<CLMicroLocationProto::Measurement, CLMicroLocationFingerprint::HashMeasurement, CLMicroLocationFingerprint::PredicateMeasurement, std::__1::allocator<CLMicroLocationProto::Measurement> > *, std::__1::default_delete<std::__1::unordered_multiset<CLMicroLocationProto::Measurement, CLMicroLocationFingerprint::HashMeasurement, CLMicroLocationFingerprint::PredicateMeasurement, std::__1::allocator<CLMicroLocationProto::Measurement> > > >=^{unordered_multiset<CLMicroLocationProto::Measurement, CLMicroLocationFingerprint::HashMeasurement, CLMicroLocationFingerprint::PredicateMeasurement, std::__1::allocator<CLMicroLocationProto::Measurement> >}}}^{CLMicroLocationDatabase}}{CLMicroLocationRecorder={unique_ptr<CLMicroLocationRecorder::RecordingTransaction, std::__1::default_delete<CLMicroLocationRecorder::RecordingTransaction> >={__compressed_pair<CLMicroLocationRecorder::RecordingTransaction *, std::__1::default_delete<CLMicroLocationRecorder::RecordingTransaction> >=^{RecordingTransaction}}}^{CLMicroLocationDatabase}}{CLMicroLocationSettledStateEstimator=^{CLMicroLocationSettledStateEstimatorDelegate}{CLMicroLocationWiFiSettledStateSequentialEstimator=Sd{unordered_map<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState, std::__1::hash<CLMacAddress>, std::__1::equal_to<CLMacAddress>, std::__1::allocator<std::__1::pair<const CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState> > >={__hash_table<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, std::__1::__unordered_map_hasher<CLMacAddress, std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, std::__1::hash<CLMacAddress>, true>, std::__1::__unordered_map_equal<CLMacAddress, std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, std::__1::equal_to<CLMacAddress>, true>, std::__1::allocator<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CLMacAddress, std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, std::__1::hash<CLMacAddress>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<CLMacAddress, std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, std::__1::equal_to<CLMacAddress>, true> >=f}}}II}{CLMicroLocationAccelerometerPowerDetector={ConfigurationParameters=ddddd}iddBBd{deque<double, std::__1::allocator<double> >={__split_buffer<double *, std::__1::allocator<double *> >=^^d^^d^^d{__compressed_pair<double **, std::__1::allocator<double *> >=^^d}}Q{__compressed_pair<unsigned long, std::__1::allocator<double> >=Q}}}{State=iii}ii}^{ILogicDelegate}}{unique_ptr<CLMicroLocationBackgroundActivities, std::__1::default_delete<CLMicroLocationBackgroundActivities> >={__compressed_pair<CLMicroLocationBackgroundActivities *, std::__1::default_delete<CLMicroLocationBackgroundActivities> >=^{CLMicroLocationBackgroundActivities}}}@{unique_ptr<CLWifiScanner, std::__1::default_delete<CLWifiScanner> >={__compressed_pair<CLWifiScanner *, std::__1::default_delete<CLWifiScanner> >=^{CLWifiScanner}}}{unique_ptr<CLWifiScanner, std::__1::default_delete<CLWifiScanner> >={__compressed_pair<CLWifiScanner *, std::__1::default_delete<CLWifiScanner> >=^{CLWifiScanner}}}{CLPowerAssertion=^^?i^v^{__CFString}dd@}}16
^{CLMicroLocationNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB^^?^^?^^?^^?{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client> >={__compressed_pair<CLDataProtectionManager_Type::Client *, std::__1::default_delete<CLDataProtectionManager_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLDarwinNotifier_Type::Client, std::__1::default_delete<CLDarwinNotifier_Type::Client> >={__compressed_pair<CLDarwinNotifier_Type::Client *, std::__1::default_delete<CLDarwinNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLHomeKitProvider_Type::Client, std::__1::default_delete<CLHomeKitProvider_Type::Client> >={__compressed_pair<CLHomeKitProvider_Type::Client *, std::__1::default_delete<CLHomeKitProvider_Type::Client> >=^{Client}}}@@@@@{unique_ptr<CLWifiServiceClient, std::__1::default_delete<CLWifiServiceClient> >={__compressed_pair<CLWifiServiceClient *, std::__1::default_delete<CLWifiServiceClient> >=^{CLWifiServiceClient}}}@{CLMicroLocationDatabase={basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{SqliteProperties=iiBB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}{CLSqliteDatabase=^^?^{sqlite3}^{Mutex}{list<sqlite3_stmt *, std::__1::allocator<sqlite3_stmt *> >={__list_node_base<sqlite3_stmt *, void *>=^{__list_node_base<sqlite3_stmt *, void *>}^{__list_node_base<sqlite3_stmt *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<sqlite3_stmt *, void *> > >=Q}}{SqliteProperties=iiBB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}i@}{unique_ptr<CLMicroLocationConfigurationTable, std::__1::default_delete<CLMicroLocationConfigurationTable> >={__compressed_pair<CLMicroLocationConfigurationTable *, std::__1::default_delete<CLMicroLocationConfigurationTable> >=^{CLMicroLocationConfigurationTable}}}{unique_ptr<CLMicroLocationMeasurementTable, std::__1::default_delete<CLMicroLocationMeasurementTable> >={__compressed_pair<CLMicroLocationMeasurementTable *, std::__1::default_delete<CLMicroLocationMeasurementTable> >=^{CLMicroLocationMeasurementTable}}}{unique_ptr<CLMicroLocationModelTable, std::__1::default_delete<CLMicroLocationModelTable> >={__compressed_pair<CLMicroLocationModelTable *, std::__1::default_delete<CLMicroLocationModelTable> >=^{CLMicroLocationModelTable}}}{unique_ptr<CLMicroLocationRecordingEventsTable, std::__1::default_delete<CLMicroLocationRecordingEventsTable> >={__compressed_pair<CLMicroLocationRecordingEventsTable *, std::__1::default_delete<CLMicroLocationRecordingEventsTable> >=^{CLMicroLocationRecordingEventsTable}}}{BufferedInserts={vector<std::__1::function<bool ()>, std::__1::allocator<std::__1::function<bool ()> > >=^{function<bool ()>}^{function<bool ()>}{__compressed_pair<std::__1::function<bool ()> *, std::__1::allocator<std::__1::function<bool ()> > >=^{function<bool ()>}}}Q}@}{CLMicroLocationLogic=^^?{State=BB{bitset<2>=Q}iiB{optional<std::__1::basic_string<char> >=(?=c{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}})B}{optional<std::__1::basic_string<char> >=(?=c{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}})B}{CLStepCountEntry=dddIddIIdddi^{__CFString}BB{CLAccelerometerPace=ddd}IIC}{AssociationState={optional<CLWifiService_Type::AccessPoint>=(?=c{AccessPoint={CLMacAddress=Q}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}iiiddB})B}}{vector<CLMicroLocationWiFiChannelHistogram, std::__1::allocator<CLMicroLocationWiFiChannelHistogram> >=^{CLMicroLocationWiFiChannelHistogram}^{CLMicroLocationWiFiChannelHistogram}{__compressed_pair<CLMicroLocationWiFiChannelHistogram *, std::__1::allocator<CLMicroLocationWiFiChannelHistogram> >=^{CLMicroLocationWiFiChannelHistogram}}}{shared_ptr<CLMicroLocationWifiScanStrategy>=^{CLMicroLocationWifiScanStrategy}^{__shared_weak_count}}{shared_ptr<CLMicroLocationWifiScanStrategy>=^{CLMicroLocationWifiScanStrategy}^{__shared_weak_count}}B{time_point<cl::chrono::CFAbsoluteTimeClock, std::__1::chrono::duration<long double, std::__1::ratio<1, 1> > >={duration<long double, std::__1::ratio<1, 1> >=D}}B{optional<boost::uuids::uuid>=(?=c{uuid=[16C]})B}{bitset<3>=Q}{bitset<12>=Q}}^{CLMicroLocationDatabase}{CLMicroLocationLocalizer=^{ILocalizerDelegate}{optional<CLMicroLocationLocalizer::ModelsAndLOI>=(?=c{ModelsAndLOI={vector<CLMicroLocationLocalizer::ModelAndIds, std::__1::allocator<CLMicroLocationLocalizer::ModelAndIds> >=^{ModelAndIds}^{ModelAndIds}{__compressed_pair<CLMicroLocationLocalizer::ModelAndIds *, std::__1::allocator<CLMicroLocationLocalizer::ModelAndIds> >=^{ModelAndIds}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}})B}{unique_ptr<std::__1::unordered_multiset<CLMicroLocationProto::Measurement, CLMicroLocationFingerprint::HashMeasurement, CLMicroLocationFingerprint::PredicateMeasurement, std::__1::allocator<CLMicroLocationProto::Measurement> >, std::__1::default_delete<std::__1::unordered_multiset<CLMicroLocationProto::Measurement, CLMicroLocationFingerprint::HashMeasurement, CLMicroLocationFingerprint::PredicateMeasurement, std::__1::allocator<CLMicroLocationProto::Measurement> > > >={__compressed_pair<std::__1::unordered_multiset<CLMicroLocationProto::Measurement, CLMicroLocationFingerprint::HashMeasurement, CLMicroLocationFingerprint::PredicateMeasurement, std::__1::allocator<CLMicroLocationProto::Measurement> > *, std::__1::default_delete<std::__1::unordered_multiset<CLMicroLocationProto::Measurement, CLMicroLocationFingerprint::HashMeasurement, CLMicroLocationFingerprint::PredicateMeasurement, std::__1::allocator<CLMicroLocationProto::Measurement> > > >=^{unordered_multiset<CLMicroLocationProto::Measurement, CLMicroLocationFingerprint::HashMeasurement, CLMicroLocationFingerprint::PredicateMeasurement, std::__1::allocator<CLMicroLocationProto::Measurement> >}}}^{CLMicroLocationDatabase}}{CLMicroLocationRecorder={unique_ptr<CLMicroLocationRecorder::RecordingTransaction, std::__1::default_delete<CLMicroLocationRecorder::RecordingTransaction> >={__compressed_pair<CLMicroLocationRecorder::RecordingTransaction *, std::__1::default_delete<CLMicroLocationRecorder::RecordingTransaction> >=^{RecordingTransaction}}}^{CLMicroLocationDatabase}}{CLMicroLocationSettledStateEstimator=^{CLMicroLocationSettledStateEstimatorDelegate}{CLMicroLocationWiFiSettledStateSequentialEstimator=Sd{unordered_map<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState, std::__1::hash<CLMacAddress>, std::__1::equal_to<CLMacAddress>, std::__1::allocator<std::__1::pair<const CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState> > >={__hash_table<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, std::__1::__unordered_map_hasher<CLMacAddress, std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, std::__1::hash<CLMacAddress>, true>, std::__1::__unordered_map_equal<CLMacAddress, std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, std::__1::equal_to<CLMacAddress>, true>, std::__1::allocator<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CLMacAddress, std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, std::__1::hash<CLMacAddress>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<CLMacAddress, std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, std::__1::equal_to<CLMacAddress>, true> >=f}}}II}{CLMicroLocationAccelerometerPowerDetector={ConfigurationParameters=ddddd}iddBBd{deque<double, std::__1::allocator<double> >={__split_buffer<double *, std::__1::allocator<double *> >=^^d^^d^^d{__compressed_pair<double **, std::__1::allocator<double *> >=^^d}}Q{__compressed_pair<unsigned long, std::__1::allocator<double> >=Q}}}{State=iii}ii}^{ILogicDelegate}}{unique_ptr<CLMicroLocationBackgroundActivities, std::__1::default_delete<CLMicroLocationBackgroundActivities> >={__compressed_pair<CLMicroLocationBackgroundActivities *, std::__1::default_delete<CLMicroLocationBackgroundActivities> >=^{CLMicroLocationBackgroundActivities}}}@{unique_ptr<CLWifiScanner, std::__1::default_delete<CLWifiScanner> >={__compressed_pair<CLWifiScanner *, std::__1::default_delete<CLWifiScanner> >=^{CLWifiScanner}}}{unique_ptr<CLWifiScanner, std::__1::default_delete<CLWifiScanner> >={__compressed_pair<CLWifiScanner *, std::__1::default_delete<CLWifiScanner> >=^{CLWifiScanner}}}{CLPowerAssertion=^^?i^v^{__CFString}dd@}}
{?="channel"b1}
@24@0:8Q16
{?="latitude"b1"longitude"b1}
@72@0:8d16q24q32d40d48d56@64
v24@0:8R@"<CLEmergencyClientProtocol>"16
v24@0:8@?<v@?^{CLAutopauseProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB}>16
v32@0:8@?<v@?^{CLAutopauseProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB}>16@?<v@?>24
B24@0:8@?<v@?^{CLAutopauseProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB}>16
^{CLAutopauseProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB}16@0:8
v24@0:8@?<v@?^{CLPeerRangingNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB^^?^^?{CLPeerRangingManager=^{CLPeerRangingManagerDelegate}{CLPeerRangeRequest={basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}Bd{vector<CLRangingPeerInternal, std::__1::allocator<CLRangingPeerInternal> >=^{CLRangingPeerInternal}^{CLRangingPeerInternal}{__compressed_pair<CLRangingPeerInternal *, std::__1::allocator<CLRangingPeerInternal> >=^{CLRangingPeerInternal}}}}BBi}^{CLPersistentTimer}{unique_ptr<CLWifiServiceClient, std::__1::default_delete<CLWifiServiceClient> >={__compressed_pair<CLWifiServiceClient *, std::__1::default_delete<CLWifiServiceClient> >=^{CLWifiServiceClient}}}}>16
v32@0:8@?<v@?^{CLPeerRangingNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB^^?^^?{CLPeerRangingManager=^{CLPeerRangingManagerDelegate}{CLPeerRangeRequest={basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}Bd{vector<CLRangingPeerInternal, std::__1::allocator<CLRangingPeerInternal> >=^{CLRangingPeerInternal}^{CLRangingPeerInternal}{__compressed_pair<CLRangingPeerInternal *, std::__1::allocator<CLRangingPeerInternal> >=^{CLRangingPeerInternal}}}}BBi}^{CLPersistentTimer}{unique_ptr<CLWifiServiceClient, std::__1::default_delete<CLWifiServiceClient> >={__compressed_pair<CLWifiServiceClient *, std::__1::default_delete<CLWifiServiceClient> >=^{CLWifiServiceClient}}}}>16@?<v@?>24
B24@0:8@?<v@?^{CLPeerRangingNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB^^?^^?{CLPeerRangingManager=^{CLPeerRangingManagerDelegate}{CLPeerRangeRequest={basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}Bd{vector<CLRangingPeerInternal, std::__1::allocator<CLRangingPeerInternal> >=^{CLRangingPeerInternal}^{CLRangingPeerInternal}{__compressed_pair<CLRangingPeerInternal *, std::__1::allocator<CLRangingPeerInternal> >=^{CLRangingPeerInternal}}}}BBi}^{CLPersistentTimer}{unique_ptr<CLWifiServiceClient, std::__1::default_delete<CLWifiServiceClient> >={__compressed_pair<CLWifiServiceClient *, std::__1::default_delete<CLWifiServiceClient> >=^{CLWifiServiceClient}}}}>16
^{CLPeerRangingNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB^^?^^?{CLPeerRangingManager=^{CLPeerRangingManagerDelegate}{CLPeerRangeRequest={basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}Bd{vector<CLRangingPeerInternal, std::__1::allocator<CLRangingPeerInternal> >=^{CLRangingPeerInternal}^{CLRangingPeerInternal}{__compressed_pair<CLRangingPeerInternal *, std::__1::allocator<CLRangingPeerInternal> >=^{CLRangingPeerInternal}}}}BBi}^{CLPersistentTimer}{unique_ptr<CLWifiServiceClient, std::__1::default_delete<CLWifiServiceClient> >={__compressed_pair<CLWifiServiceClient *, std::__1::default_delete<CLWifiServiceClient> >=^{CLWifiServiceClient}}}}16@0:8
v68@0:8i16@20{CLTileFileDownloadDetails=BBBdidBB}28
B24@0:8^{vector<CLMarketRegion, std::__1::allocator<CLMarketRegion> >=^{CLMarketRegion}^{CLMarketRegion}{__compressed_pair<CLMarketRegion *, std::__1::allocator<CLMarketRegion> >=^{CLMarketRegion}}}16
v84@0:8i16d20d28Q36{CLTileFileDownloadDetails=BBBdidBB}44
@52@0:8i16d20d28^B36^B44
B28@0:8i16@20
B48@0:8r^{?=ii{?=dd}ddddddddddidi{?=dd}diIii}16f24^{CLTilesSearchContext=III{map<TileId, CLTileFile *, std::__1::less<TileId>, std::__1::allocator<std::__1::pair<const TileId, CLTileFile *> > >={__tree<std::__1::__value_type<TileId, CLTileFile *>, std::__1::__map_value_compare<TileId, std::__1::__value_type<TileId, CLTileFile *>, std::__1::less<TileId>, true>, std::__1::allocator<std::__1::__value_type<TileId, CLTileFile *> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TileId, CLTileFile *>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<TileId, std::__1::__value_type<TileId, CLTileFile *>, std::__1::less<TileId>, true> >=Q}}}QQ}28^{list<CLTilesManager_Type::AppAvailability, std::__1::allocator<CLTilesManager_Type::AppAvailability> >=}36B44
B36@0:8@16i24d28
v68@0:8i16@"NSString"20{CLTileFileDownloadDetails=BBBdidBB}28
@"NSString"52@0:8i16d20d28^B36^B44
B28@0:8i16@"NSString"20
B36@0:8@"NSString"16i24d28
v24@0:8@?<v@?^{CLTilesManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{map<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> >, std::__1::less<TileId>, std::__1::allocator<std::__1::pair<const TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > > > >={__tree<std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > >, std::__1::__map_value_compare<TileId, std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > >, std::__1::less<TileId>, true>, std::__1::allocator<std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<TileId, std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > >, std::__1::less<TileId>, true> >=Q}}}{DownloadState=*Bd{unique_ptr<CLFileDownload, std::__1::default_delete<CLFileDownload> >={__compressed_pair<CLFileDownload *, std::__1::default_delete<CLFileDownload> >=^{CLFileDownload}}}}{DownloadState=*Bd{unique_ptr<CLFileDownload, std::__1::default_delete<CLFileDownload> >={__compressed_pair<CLFileDownload *, std::__1::default_delete<CLFileDownload> >=^{CLFileDownload}}}}BBdddd^{CLPersistentTimer}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}ddiiiBiBB{unique_ptr<CLITilesManagerExternal, std::__1::default_delete<CLITilesManagerExternal> >={__compressed_pair<CLITilesManagerExternal *, std::__1::default_delete<CLITilesManagerExternal> >=^{CLITilesManagerExternal}}}{CLTileDownloadPolicy=@dQ}B{CLTilesSetCollection={vector<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >, std::__1::allocator<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > > >=^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}{__compressed_pair<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > *, std::__1::allocator<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > > >=^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}}}}{CLDemTileAvailability={list<unsigned int, std::__1::allocator<unsigned int> >={__list_node_base<unsigned int, void *>=^{__list_node_base<unsigned int, void *>}^{__list_node_base<unsigned int, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<unsigned int, void *> > >=Q}}{LastAvlLookup=BIB}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}B}}>16
v32@0:8@?<v@?^{CLTilesManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{map<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> >, std::__1::less<TileId>, std::__1::allocator<std::__1::pair<const TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > > > >={__tree<std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > >, std::__1::__map_value_compare<TileId, std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > >, std::__1::less<TileId>, true>, std::__1::allocator<std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<TileId, std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > >, std::__1::less<TileId>, true> >=Q}}}{DownloadState=*Bd{unique_ptr<CLFileDownload, std::__1::default_delete<CLFileDownload> >={__compressed_pair<CLFileDownload *, std::__1::default_delete<CLFileDownload> >=^{CLFileDownload}}}}{DownloadState=*Bd{unique_ptr<CLFileDownload, std::__1::default_delete<CLFileDownload> >={__compressed_pair<CLFileDownload *, std::__1::default_delete<CLFileDownload> >=^{CLFileDownload}}}}BBdddd^{CLPersistentTimer}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}ddiiiBiBB{unique_ptr<CLITilesManagerExternal, std::__1::default_delete<CLITilesManagerExternal> >={__compressed_pair<CLITilesManagerExternal *, std::__1::default_delete<CLITilesManagerExternal> >=^{CLITilesManagerExternal}}}{CLTileDownloadPolicy=@dQ}B{CLTilesSetCollection={vector<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >, std::__1::allocator<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > > >=^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}{__compressed_pair<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > *, std::__1::allocator<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > > >=^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}}}}{CLDemTileAvailability={list<unsigned int, std::__1::allocator<unsigned int> >={__list_node_base<unsigned int, void *>=^{__list_node_base<unsigned int, void *>}^{__list_node_base<unsigned int, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<unsigned int, void *> > >=Q}}{LastAvlLookup=BIB}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}B}}>16@?<v@?>24
B24@0:8@?<v@?^{CLTilesManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{map<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> >, std::__1::less<TileId>, std::__1::allocator<std::__1::pair<const TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > > > >={__tree<std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > >, std::__1::__map_value_compare<TileId, std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > >, std::__1::less<TileId>, true>, std::__1::allocator<std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<TileId, std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > >, std::__1::less<TileId>, true> >=Q}}}{DownloadState=*Bd{unique_ptr<CLFileDownload, std::__1::default_delete<CLFileDownload> >={__compressed_pair<CLFileDownload *, std::__1::default_delete<CLFileDownload> >=^{CLFileDownload}}}}{DownloadState=*Bd{unique_ptr<CLFileDownload, std::__1::default_delete<CLFileDownload> >={__compressed_pair<CLFileDownload *, std::__1::default_delete<CLFileDownload> >=^{CLFileDownload}}}}BBdddd^{CLPersistentTimer}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}ddiiiBiBB{unique_ptr<CLITilesManagerExternal, std::__1::default_delete<CLITilesManagerExternal> >={__compressed_pair<CLITilesManagerExternal *, std::__1::default_delete<CLITilesManagerExternal> >=^{CLITilesManagerExternal}}}{CLTileDownloadPolicy=@dQ}B{CLTilesSetCollection={vector<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >, std::__1::allocator<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > > >=^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}{__compressed_pair<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > *, std::__1::allocator<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > > >=^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}}}}{CLDemTileAvailability={list<unsigned int, std::__1::allocator<unsigned int> >={__list_node_base<unsigned int, void *>=^{__list_node_base<unsigned int, void *>}^{__list_node_base<unsigned int, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<unsigned int, void *> > >=Q}}{LastAvlLookup=BIB}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}B}}>16
^{CLTilesManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{map<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> >, std::__1::less<TileId>, std::__1::allocator<std::__1::pair<const TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > > > >={__tree<std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > >, std::__1::__map_value_compare<TileId, std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > >, std::__1::less<TileId>, true>, std::__1::allocator<std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<TileId, std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > >, std::__1::less<TileId>, true> >=Q}}}{DownloadState=*Bd{unique_ptr<CLFileDownload, std::__1::default_delete<CLFileDownload> >={__compressed_pair<CLFileDownload *, std::__1::default_delete<CLFileDownload> >=^{CLFileDownload}}}}{DownloadState=*Bd{unique_ptr<CLFileDownload, std::__1::default_delete<CLFileDownload> >={__compressed_pair<CLFileDownload *, std::__1::default_delete<CLFileDownload> >=^{CLFileDownload}}}}BBdddd^{CLPersistentTimer}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}ddiiiBiBB{unique_ptr<CLITilesManagerExternal, std::__1::default_delete<CLITilesManagerExternal> >={__compressed_pair<CLITilesManagerExternal *, std::__1::default_delete<CLITilesManagerExternal> >=^{CLITilesManagerExternal}}}{CLTileDownloadPolicy=@dQ}B{CLTilesSetCollection={vector<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >, std::__1::allocator<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > > >=^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}{__compressed_pair<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > *, std::__1::allocator<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > > >=^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}}}}{CLDemTileAvailability={list<unsigned int, std::__1::allocator<unsigned int> >={__list_node_base<unsigned int, void *>=^{__list_node_base<unsigned int, void *>}^{__list_node_base<unsigned int, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<unsigned int, void *> > >=Q}}{LastAvlLookup=BIB}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}B}}16@0:8
{?="rawCoordinateLatitude"b1"rawCoordinateLongitude"b1}
@20@0:8B16
{?=dd}24@0:8d16
d24@0:8d16
v24@0:8@?<v@?^{CLBTA=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBBBBB}>16
v32@0:8@?<v@?^{CLBTA=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBBBBB}>16@?<v@?>24
B24@0:8@?<v@?^{CLBTA=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBBBBB}>16
^{CLBTA=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBBBBB}16@0:8
@40@0:8d16@24@?32
v32@0:8d16@24
@"<CLOdometerAlarmManagerProtocol>"
v24@0:8@?<v@?^{CLPressureBias=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{unique_ptr<CLPressureCalibrationDatabase_Type::Client, std::__1::default_delete<CLPressureCalibrationDatabase_Type::Client> >={__compressed_pair<CLPressureCalibrationDatabase_Type::Client *, std::__1::default_delete<CLPressureCalibrationDatabase_Type::Client> >=^{Client}}}}>16
v32@0:8@?<v@?^{CLPressureBias=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{unique_ptr<CLPressureCalibrationDatabase_Type::Client, std::__1::default_delete<CLPressureCalibrationDatabase_Type::Client> >={__compressed_pair<CLPressureCalibrationDatabase_Type::Client *, std::__1::default_delete<CLPressureCalibrationDatabase_Type::Client> >=^{Client}}}}>16@?<v@?>24
B24@0:8@?<v@?^{CLPressureBias=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{unique_ptr<CLPressureCalibrationDatabase_Type::Client, std::__1::default_delete<CLPressureCalibrationDatabase_Type::Client> >={__compressed_pair<CLPressureCalibrationDatabase_Type::Client *, std::__1::default_delete<CLPressureCalibrationDatabase_Type::Client> >=^{Client}}}}>16
^{CLPressureBias=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{unique_ptr<CLPressureCalibrationDatabase_Type::Client, std::__1::default_delete<CLPressureCalibrationDatabase_Type::Client> >={__compressed_pair<CLPressureCalibrationDatabase_Type::Client *, std::__1::default_delete<CLPressureCalibrationDatabase_Type::Client> >=^{Client}}}}16@0:8
v24@0:8@"CLOdometerAlarm"16
{unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client> >="__ptr_"{__compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> >="__first_"^{Client}}}
{unique_ptr<CLGnssProvider_Type::Client, std::__1::default_delete<CLGnssProvider_Type::Client> >="__ptr_"{__compressed_pair<CLGnssProvider_Type::Client *, std::__1::default_delete<CLGnssProvider_Type::Client> >="__first_"^{Client}}}
@"CLOdometerAlarm"
{MotionFitnessPedometer={Metric=Bd{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}IIIIIIIIIiiiiIIIII}16@0:8
@60@0:8@16@24d32d40d48i56
@128@0:8{CLOdometerEntry=dddddddddiidddd}16
{CLOdometerEntry=dddddddddiidddd}16@0:8
{CLOdometerEntry="startTime"d"distance"d"accuracy"d"gpsAltitude"d"speed"d"rawSpeed"d"odometer"d"gpsSpeedAccuracy"d"timestampGps"d"quality"i"originDevice"i"groundAltitude"d"groundAltitudeUncertainty"d"smoothedGPSAltitude"d"smoothedGPSAltitudeUncertainty"d}
@240@0:8{CLExtendedStepCountEntry=d{CLStepCountEntry=dddIddIIdddi^{__CFString}BB{CLAccelerometerPace=ddd}IIC}{CLStepCountEntryAddition=ddIddddBd}}16
{CLExtendedStepCountEntry=d{CLStepCountEntry=dddIddIIdddi^{__CFString}BB{CLAccelerometerPace=ddd}IIC}{CLStepCountEntryAddition=ddIddddBd}}16@0:8
{CLExtendedStepCountEntry="startTime"d"base"{CLStepCountEntry="timestamp"d"startTime"d"firstStepTime"d"count"I"distance"d"rawDistance"d"floorsAscended"I"floorsDescended"I"currentPace"d"currentCadence"d"activeTime"d"recordId"i"sourceId"^{__CFString}"isOdometerDistance"B"isOdometerPace"B"accelerometerPace"{CLAccelerometerPace="calibrated"d"lowerBound"d"upperBound"d}"pushCount"I"workoutType"I"pedometerArmConstrainedState"C}"addition"{CLStepCountEntryAddition="totalCalibratedDistance"d"rawPace"d"incrementalSteps"I"incrementalActiveTime"d"firstStepTime"d"lastStepTime"d"odometerSpeed"d"rawPaceDidJump"B"calibratedDistance"d}}
v128@0:8{CLOdometerEntry=dddddddddiidddd}16
v240@0:8{CLExtendedStepCountEntry=d{CLStepCountEntry=dddIddIIdddi^{__CFString}BB{CLAccelerometerPace=ddd}IIC}{CLStepCountEntryAddition=ddIddddBd}}16
d24@0:8[5d]16
{?="basalNatalies"b1"duration"b1"mets"b1"timestamp"b1"basalMETs"b1"recordId"b1}
@24@0:8r^{CLDaemonLocationPrivate=dddddfffBi{?=dd}diiB{?=dd}if{?=dd}ddiBddddddB}16
{CLDaemonLocationPrivate=dddddfffBi{?=dd}diiB{?=dd}if{?=dd}ddiBddddddB}16@0:8
v32@0:8@"NSURLConnection"16@"NSError"24
B24@0:8@"NSURLConnection"16
v32@0:8@"NSURLConnection"16@"NSURLAuthenticationChallenge"24
B32@0:8@"NSURLConnection"16@"NSURLProtectionSpace"24
^{_CFURLRequest=}24@0:8@16
@32@0:8^{_CFURLRequest=}16@24
@"CLURLConnectionSession"
v32@0:8@"NSURLCredential"16@"NSURLAuthenticationChallenge"24
v24@0:8@"NSURLAuthenticationChallenge"16
@40@0:8^{_CFURLRequest=}16@24@32
v24@0:8^{_CFURLResponse=}16
v32@0:8^{_CFURLAuthChallenge=}16@?24
^{_CFURLConnection=}
^{_CFURLAuthChallenge=}
^{__CFURL=}
@24@0:8^{_CFURLConnection=}16
v24@0:8^{_CFURLConnection=}16
^{_CFURLConnection=}32@0:8^{_CFURLRequest=}16@24
^{__CFURLConnectionSession=}
@"NSMapTable"
{?="deltaDistance"b1"deltaDistanceAccuracy"b1"odometer"b1"timestampGps"b1}
@24@0:8^{CLDaemonClient=^{CLClientManager}{DestructionAwareMutex=^^?{shared_ptr<DestructionAwareMutexInternal>=^{DestructionAwareMutexInternal}^{__shared_weak_count}}}@@@{Name={basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}BBB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}BB}BBBBQiB{unique_ptr<CLClientManager::InUseAssertion, std::__1::default_delete<CLClientManager::InUseAssertion> >={__compressed_pair<CLClientManager::InUseAssertion *, std::__1::default_delete<CLClientManager::InUseAssertion> >=^{InUseAssertion}}}@BBi{list<CLDaemonClient::MessageRef, std::__1::allocator<CLDaemonClient::MessageRef> >={__list_node_base<CLDaemonClient::MessageRef, void *>=^{__list_node_base<CLDaemonClient::MessageRef, void *>}^{__list_node_base<CLDaemonClient::MessageRef, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLDaemonClient::MessageRef, void *> > >=Q}}@Q{map<std::__1::basic_string<char>, bool, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, bool> > >={__tree<std::__1::__value_type<std::__1::basic_string<char>, bool>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, bool>, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, bool>, std::__1::less<std::__1::basic_string<char> >, true> >=Q}}}IBB{unique_ptr<CLClientManager::InUseAssertion, std::__1::default_delete<CLClientManager::InUseAssertion> >={__compressed_pair<CLClientManager::InUseAssertion *, std::__1::default_delete<CLClientManager::InUseAssertion> >=^{InUseAssertion}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@iiBi@BBB@@iBB{unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client> >={__compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> >=^{Client}}}{unique_ptr<CLFilteredLocationController_Type::Client, std::__1::default_delete<CLFilteredLocationController_Type::Client> >={__compressed_pair<CLFilteredLocationController_Type::Client *, std::__1::default_delete<CLFilteredLocationController_Type::Client> >=^{Client}}}{unique_ptr<CLSignificantChangeManager_Type::Client, std::__1::default_delete<CLSignificantChangeManager_Type::Client> >={__compressed_pair<CLSignificantChangeManager_Type::Client *, std::__1::default_delete<CLSignificantChangeManager_Type::Client> >=^{Client}}}{unique_ptr<CLCompassDaemonClientNotifier_Type::Client, std::__1::default_delete<CLCompassDaemonClientNotifier_Type::Client> >={__compressed_pair<CLCompassDaemonClientNotifier_Type::Client *, std::__1::default_delete<CLCompassDaemonClientNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLBTLEFenceManager_Type::Client, std::__1::default_delete<CLBTLEFenceManager_Type::Client> >={__compressed_pair<CLBTLEFenceManager_Type::Client *, std::__1::default_delete<CLBTLEFenceManager_Type::Client> >=^{Client}}}{unique_ptr<CLBTLERangeManager_Type::Client, std::__1::default_delete<CLBTLERangeManager_Type::Client> >={__compressed_pair<CLBTLERangeManager_Type::Client *, std::__1::default_delete<CLBTLERangeManager_Type::Client> >=^{Client}}}{unique_ptr<CLFenceManager_Type::Client, std::__1::default_delete<CLFenceManager_Type::Client> >={__compressed_pair<CLFenceManager_Type::Client *, std::__1::default_delete<CLFenceManager_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLGeomagneticModelProvider_Type::Client, std::__1::default_delete<CLGeomagneticModelProvider_Type::Client> >={__compressed_pair<CLGeomagneticModelProvider_Type::Client *, std::__1::default_delete<CLGeomagneticModelProvider_Type::Client> >=^{Client}}}{unique_ptr<CLPressureBias_Type::Client, std::__1::default_delete<CLPressureBias_Type::Client> >={__compressed_pair<CLPressureBias_Type::Client *, std::__1::default_delete<CLPressureBias_Type::Client> >=^{Client}}}{unique_ptr<CLAutopauseProvider_Type::Client, std::__1::default_delete<CLAutopauseProvider_Type::Client> >={__compressed_pair<CLAutopauseProvider_Type::Client *, std::__1::default_delete<CLAutopauseProvider_Type::Client> >=^{Client}}}{unique_ptr<CLMotionState_Type::Client, std::__1::default_delete<CLMotionState_Type::Client> >={__compressed_pair<CLMotionState_Type::Client *, std::__1::default_delete<CLMotionState_Type::Client> >=^{Client}}}{unique_ptr<CLOnBodyNotifier_Type::Client, std::__1::default_delete<CLOnBodyNotifier_Type::Client> >={__compressed_pair<CLOnBodyNotifier_Type::Client *, std::__1::default_delete<CLOnBodyNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLStepCountNotifier_Type::Client, std::__1::default_delete<CLStepCountNotifier_Type::Client> >={__compressed_pair<CLStepCountNotifier_Type::Client *, std::__1::default_delete<CLStepCountNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLOdometerNotifier_Type::Client, std::__1::default_delete<CLOdometerNotifier_Type::Client> >={__compressed_pair<CLOdometerNotifier_Type::Client *, std::__1::default_delete<CLOdometerNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLSedentaryTimerNotifier_Type::Client, std::__1::default_delete<CLSedentaryTimerNotifier_Type::Client> >={__compressed_pair<CLSedentaryTimerNotifier_Type::Client *, std::__1::default_delete<CLSedentaryTimerNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLMotionState_Type::Client, std::__1::default_delete<CLMotionState_Type::Client> >={__compressed_pair<CLMotionState_Type::Client *, std::__1::default_delete<CLMotionState_Type::Client> >=^{Client}}}{unique_ptr<CLNatalimetryNotifier_Type::Client, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >={__compressed_pair<CLNatalimetryNotifier_Type::Client *, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLMotionStateMediator_Type::Client, std::__1::default_delete<CLMotionStateMediator_Type::Client> >={__compressed_pair<CLMotionStateMediator_Type::Client *, std::__1::default_delete<CLMotionStateMediator_Type::Client> >=^{Client}}}{unique_ptr<CLMicroLocationNotifier_Type::Client, std::__1::default_delete<CLMicroLocationNotifier_Type::Client> >={__compressed_pair<CLMicroLocationNotifier_Type::Client *, std::__1::default_delete<CLMicroLocationNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLPeerRangingNotifier_Type::Client, std::__1::default_delete<CLPeerRangingNotifier_Type::Client> >={__compressed_pair<CLPeerRangingNotifier_Type::Client *, std::__1::default_delete<CLPeerRangingNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLSidebandOverride, std::__1::default_delete<CLSidebandOverride> >={__compressed_pair<CLSidebandOverride *, std::__1::default_delete<CLSidebandOverride> >=^{CLSidebandOverride}}}{unique_ptr<CLSidebandSensorFusion, std::__1::default_delete<CLSidebandSensorFusion> >={__compressed_pair<CLSidebandSensorFusion *, std::__1::default_delete<CLSidebandSensorFusion> >=^{CLSidebandSensorFusion}}}{unique_ptr<CLMotionStateOverride, std::__1::default_delete<CLMotionStateOverride> >={__compressed_pair<CLMotionStateOverride *, std::__1::default_delete<CLMotionStateOverride> >=^{CLMotionStateOverride}}}{unique_ptr<CLMotionStateSim, std::__1::default_delete<CLMotionStateSim> >={__compressed_pair<CLMotionStateSim *, std::__1::default_delete<CLMotionStateSim> >=^{CLMotionStateSim}}}{unique_ptr<CLSwimNotifier_Type::Client, std::__1::default_delete<CLSwimNotifier_Type::Client> >={__compressed_pair<CLSwimNotifier_Type::Client *, std::__1::default_delete<CLSwimNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLCompanionNotifier_Type::Client, std::__1::default_delete<CLCompanionNotifier_Type::Client> >={__compressed_pair<CLCompanionNotifier_Type::Client *, std::__1::default_delete<CLCompanionNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLCaptureMode, std::__1::default_delete<CLCaptureMode> >={__compressed_pair<CLCaptureMode *, std::__1::default_delete<CLCaptureMode> >=^{CLCaptureMode}}}@@@@@@@@@@@@@@@@@@@BdB^{Dispatcher}@d{?=ddddddddddi}{CLNameValuePair=^^?^{__CFDictionary}}{CLNameValuePair=^^?^{__CFDictionary}}BiiBBBBB@@^{CLConnection}iid@q@dB{PauseState=BBB}B{map<int, CMActivityAlarm *, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CMActivityAlarm *> > >={__tree<std::__1::__value_type<int, CMActivityAlarm *>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CMActivityAlarm *>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CMActivityAlarm *> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CMActivityAlarm *>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CMActivityAlarm *>, std::__1::less<int>, true> >=Q}}}Bdddd@{shared_ptr<CLPersistentTimer>=^{CLPersistentTimer}^{__shared_weak_count}}BBBdiBBBB{LocationUpdateSession={Metric=Bd{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}{LocationSystemState=BBBBBiBii}ddddddBi}{LocationMonitorSession={Metric=Bd{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}ddiiB}{BeaconMonitorSession={Metric=Bd{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}SSSSSSSS}{BeaconRangingSession={Metric=Bd{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}ISSC{vector<signed char, std::__1::allocator<signed char> >=**{__compressed_pair<signed char *, std::__1::allocator<signed char> >=*}}}{MotionTrigger={Metric=Bd{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}dii{map<std::__1::basic_string<char>, int, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, int> > >={__tree<std::__1::__value_type<std::__1::basic_string<char>, int>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, int>, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, int> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, int>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, int>, std::__1::less<std::__1::basic_string<char> >, true> >=Q}}}}^{CLCompassSessionStatsCollector}^v@@{map<CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> >, std::__1::less<CLBTLEBeaconRegion_Type::Region>, std::__1::allocator<std::__1::pair<const CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > > > >={__tree<std::__1::__value_type<CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >, std::__1::__map_value_compare<CLBTLEBeaconRegion_Type::Region, std::__1::__value_type<CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >, std::__1::less<CLBTLEBeaconRegion_Type::Region>, true>, std::__1::allocator<std::__1::__value_type<CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLBTLEBeaconRegion_Type::Region, std::__1::__value_type<CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >, std::__1::less<CLBTLEBeaconRegion_Type::Region>, true> >=Q}}}{CLCallbackDropManager=^^?{shared_ptr<int>=^i^{__shared_weak_count}}}di}16
^{CLDaemonClient=^{CLClientManager}{DestructionAwareMutex=^^?{shared_ptr<DestructionAwareMutexInternal>=^{DestructionAwareMutexInternal}^{__shared_weak_count}}}@@@{Name={basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}BBB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}BB}BBBBQiB{unique_ptr<CLClientManager::InUseAssertion, std::__1::default_delete<CLClientManager::InUseAssertion> >={__compressed_pair<CLClientManager::InUseAssertion *, std::__1::default_delete<CLClientManager::InUseAssertion> >=^{InUseAssertion}}}@BBi{list<CLDaemonClient::MessageRef, std::__1::allocator<CLDaemonClient::MessageRef> >={__list_node_base<CLDaemonClient::MessageRef, void *>=^{__list_node_base<CLDaemonClient::MessageRef, void *>}^{__list_node_base<CLDaemonClient::MessageRef, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLDaemonClient::MessageRef, void *> > >=Q}}@Q{map<std::__1::basic_string<char>, bool, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, bool> > >={__tree<std::__1::__value_type<std::__1::basic_string<char>, bool>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, bool>, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, bool>, std::__1::less<std::__1::basic_string<char> >, true> >=Q}}}IBB{unique_ptr<CLClientManager::InUseAssertion, std::__1::default_delete<CLClientManager::InUseAssertion> >={__compressed_pair<CLClientManager::InUseAssertion *, std::__1::default_delete<CLClientManager::InUseAssertion> >=^{InUseAssertion}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@iiBi@BBB@@iBB{unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client> >={__compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> >=^{Client}}}{unique_ptr<CLFilteredLocationController_Type::Client, std::__1::default_delete<CLFilteredLocationController_Type::Client> >={__compressed_pair<CLFilteredLocationController_Type::Client *, std::__1::default_delete<CLFilteredLocationController_Type::Client> >=^{Client}}}{unique_ptr<CLSignificantChangeManager_Type::Client, std::__1::default_delete<CLSignificantChangeManager_Type::Client> >={__compressed_pair<CLSignificantChangeManager_Type::Client *, std::__1::default_delete<CLSignificantChangeManager_Type::Client> >=^{Client}}}{unique_ptr<CLCompassDaemonClientNotifier_Type::Client, std::__1::default_delete<CLCompassDaemonClientNotifier_Type::Client> >={__compressed_pair<CLCompassDaemonClientNotifier_Type::Client *, std::__1::default_delete<CLCompassDaemonClientNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLBTLEFenceManager_Type::Client, std::__1::default_delete<CLBTLEFenceManager_Type::Client> >={__compressed_pair<CLBTLEFenceManager_Type::Client *, std::__1::default_delete<CLBTLEFenceManager_Type::Client> >=^{Client}}}{unique_ptr<CLBTLERangeManager_Type::Client, std::__1::default_delete<CLBTLERangeManager_Type::Client> >={__compressed_pair<CLBTLERangeManager_Type::Client *, std::__1::default_delete<CLBTLERangeManager_Type::Client> >=^{Client}}}{unique_ptr<CLFenceManager_Type::Client, std::__1::default_delete<CLFenceManager_Type::Client> >={__compressed_pair<CLFenceManager_Type::Client *, std::__1::default_delete<CLFenceManager_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLGeomagneticModelProvider_Type::Client, std::__1::default_delete<CLGeomagneticModelProvider_Type::Client> >={__compressed_pair<CLGeomagneticModelProvider_Type::Client *, std::__1::default_delete<CLGeomagneticModelProvider_Type::Client> >=^{Client}}}{unique_ptr<CLPressureBias_Type::Client, std::__1::default_delete<CLPressureBias_Type::Client> >={__compressed_pair<CLPressureBias_Type::Client *, std::__1::default_delete<CLPressureBias_Type::Client> >=^{Client}}}{unique_ptr<CLAutopauseProvider_Type::Client, std::__1::default_delete<CLAutopauseProvider_Type::Client> >={__compressed_pair<CLAutopauseProvider_Type::Client *, std::__1::default_delete<CLAutopauseProvider_Type::Client> >=^{Client}}}{unique_ptr<CLMotionState_Type::Client, std::__1::default_delete<CLMotionState_Type::Client> >={__compressed_pair<CLMotionState_Type::Client *, std::__1::default_delete<CLMotionState_Type::Client> >=^{Client}}}{unique_ptr<CLOnBodyNotifier_Type::Client, std::__1::default_delete<CLOnBodyNotifier_Type::Client> >={__compressed_pair<CLOnBodyNotifier_Type::Client *, std::__1::default_delete<CLOnBodyNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLStepCountNotifier_Type::Client, std::__1::default_delete<CLStepCountNotifier_Type::Client> >={__compressed_pair<CLStepCountNotifier_Type::Client *, std::__1::default_delete<CLStepCountNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLOdometerNotifier_Type::Client, std::__1::default_delete<CLOdometerNotifier_Type::Client> >={__compressed_pair<CLOdometerNotifier_Type::Client *, std::__1::default_delete<CLOdometerNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLSedentaryTimerNotifier_Type::Client, std::__1::default_delete<CLSedentaryTimerNotifier_Type::Client> >={__compressed_pair<CLSedentaryTimerNotifier_Type::Client *, std::__1::default_delete<CLSedentaryTimerNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLMotionState_Type::Client, std::__1::default_delete<CLMotionState_Type::Client> >={__compressed_pair<CLMotionState_Type::Client *, std::__1::default_delete<CLMotionState_Type::Client> >=^{Client}}}{unique_ptr<CLNatalimetryNotifier_Type::Client, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >={__compressed_pair<CLNatalimetryNotifier_Type::Client *, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLMotionStateMediator_Type::Client, std::__1::default_delete<CLMotionStateMediator_Type::Client> >={__compressed_pair<CLMotionStateMediator_Type::Client *, std::__1::default_delete<CLMotionStateMediator_Type::Client> >=^{Client}}}{unique_ptr<CLMicroLocationNotifier_Type::Client, std::__1::default_delete<CLMicroLocationNotifier_Type::Client> >={__compressed_pair<CLMicroLocationNotifier_Type::Client *, std::__1::default_delete<CLMicroLocationNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLPeerRangingNotifier_Type::Client, std::__1::default_delete<CLPeerRangingNotifier_Type::Client> >={__compressed_pair<CLPeerRangingNotifier_Type::Client *, std::__1::default_delete<CLPeerRangingNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLSidebandOverride, std::__1::default_delete<CLSidebandOverride> >={__compressed_pair<CLSidebandOverride *, std::__1::default_delete<CLSidebandOverride> >=^{CLSidebandOverride}}}{unique_ptr<CLSidebandSensorFusion, std::__1::default_delete<CLSidebandSensorFusion> >={__compressed_pair<CLSidebandSensorFusion *, std::__1::default_delete<CLSidebandSensorFusion> >=^{CLSidebandSensorFusion}}}{unique_ptr<CLMotionStateOverride, std::__1::default_delete<CLMotionStateOverride> >={__compressed_pair<CLMotionStateOverride *, std::__1::default_delete<CLMotionStateOverride> >=^{CLMotionStateOverride}}}{unique_ptr<CLMotionStateSim, std::__1::default_delete<CLMotionStateSim> >={__compressed_pair<CLMotionStateSim *, std::__1::default_delete<CLMotionStateSim> >=^{CLMotionStateSim}}}{unique_ptr<CLSwimNotifier_Type::Client, std::__1::default_delete<CLSwimNotifier_Type::Client> >={__compressed_pair<CLSwimNotifier_Type::Client *, std::__1::default_delete<CLSwimNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLCompanionNotifier_Type::Client, std::__1::default_delete<CLCompanionNotifier_Type::Client> >={__compressed_pair<CLCompanionNotifier_Type::Client *, std::__1::default_delete<CLCompanionNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLCaptureMode, std::__1::default_delete<CLCaptureMode> >={__compressed_pair<CLCaptureMode *, std::__1::default_delete<CLCaptureMode> >=^{CLCaptureMode}}}@@@@@@@@@@@@@@@@@@@BdB^{Dispatcher}@d{?=ddddddddddi}{CLNameValuePair=^^?^{__CFDictionary}}{CLNameValuePair=^^?^{__CFDictionary}}BiiBBBBB@@^{CLConnection}iid@q@dB{PauseState=BBB}B{map<int, CMActivityAlarm *, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CMActivityAlarm *> > >={__tree<std::__1::__value_type<int, CMActivityAlarm *>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CMActivityAlarm *>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CMActivityAlarm *> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CMActivityAlarm *>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CMActivityAlarm *>, std::__1::less<int>, true> >=Q}}}Bdddd@{shared_ptr<CLPersistentTimer>=^{CLPersistentTimer}^{__shared_weak_count}}BBBdiBBBB{LocationUpdateSession={Metric=Bd{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}{LocationSystemState=BBBBBiBii}ddddddBi}{LocationMonitorSession={Metric=Bd{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}ddiiB}{BeaconMonitorSession={Metric=Bd{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}SSSSSSSS}{BeaconRangingSession={Metric=Bd{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}ISSC{vector<signed char, std::__1::allocator<signed char> >=**{__compressed_pair<signed char *, std::__1::allocator<signed char> >=*}}}{MotionTrigger={Metric=Bd{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}dii{map<std::__1::basic_string<char>, int, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, int> > >={__tree<std::__1::__value_type<std::__1::basic_string<char>, int>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, int>, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, int> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, int>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, int>, std::__1::less<std::__1::basic_string<char> >, true> >=Q}}}}^{CLCompassSessionStatsCollector}^v@@{map<CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> >, std::__1::less<CLBTLEBeaconRegion_Type::Region>, std::__1::allocator<std::__1::pair<const CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > > > >={__tree<std::__1::__value_type<CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >, std::__1::__map_value_compare<CLBTLEBeaconRegion_Type::Region, std::__1::__value_type<CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >, std::__1::less<CLBTLEBeaconRegion_Type::Region>, true>, std::__1::allocator<std::__1::__value_type<CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLBTLEBeaconRegion_Type::Region, std::__1::__value_type<CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >, std::__1::less<CLBTLEBeaconRegion_Type::Region>, true> >=Q}}}{CLCallbackDropManager=^^?{shared_ptr<int>=^i^{__shared_weak_count}}}di}16@0:8
v24@0:8^{CLDaemonClient=^{CLClientManager}{DestructionAwareMutex=^^?{shared_ptr<DestructionAwareMutexInternal>=^{DestructionAwareMutexInternal}^{__shared_weak_count}}}@@@{Name={basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}BBB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}BB}BBBBQiB{unique_ptr<CLClientManager::InUseAssertion, std::__1::default_delete<CLClientManager::InUseAssertion> >={__compressed_pair<CLClientManager::InUseAssertion *, std::__1::default_delete<CLClientManager::InUseAssertion> >=^{InUseAssertion}}}@BBi{list<CLDaemonClient::MessageRef, std::__1::allocator<CLDaemonClient::MessageRef> >={__list_node_base<CLDaemonClient::MessageRef, void *>=^{__list_node_base<CLDaemonClient::MessageRef, void *>}^{__list_node_base<CLDaemonClient::MessageRef, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLDaemonClient::MessageRef, void *> > >=Q}}@Q{map<std::__1::basic_string<char>, bool, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, bool> > >={__tree<std::__1::__value_type<std::__1::basic_string<char>, bool>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, bool>, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, bool>, std::__1::less<std::__1::basic_string<char> >, true> >=Q}}}IBB{unique_ptr<CLClientManager::InUseAssertion, std::__1::default_delete<CLClientManager::InUseAssertion> >={__compressed_pair<CLClientManager::InUseAssertion *, std::__1::default_delete<CLClientManager::InUseAssertion> >=^{InUseAssertion}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@iiBi@BBB@@iBB{unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client> >={__compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> >=^{Client}}}{unique_ptr<CLFilteredLocationController_Type::Client, std::__1::default_delete<CLFilteredLocationController_Type::Client> >={__compressed_pair<CLFilteredLocationController_Type::Client *, std::__1::default_delete<CLFilteredLocationController_Type::Client> >=^{Client}}}{unique_ptr<CLSignificantChangeManager_Type::Client, std::__1::default_delete<CLSignificantChangeManager_Type::Client> >={__compressed_pair<CLSignificantChangeManager_Type::Client *, std::__1::default_delete<CLSignificantChangeManager_Type::Client> >=^{Client}}}{unique_ptr<CLCompassDaemonClientNotifier_Type::Client, std::__1::default_delete<CLCompassDaemonClientNotifier_Type::Client> >={__compressed_pair<CLCompassDaemonClientNotifier_Type::Client *, std::__1::default_delete<CLCompassDaemonClientNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLBTLEFenceManager_Type::Client, std::__1::default_delete<CLBTLEFenceManager_Type::Client> >={__compressed_pair<CLBTLEFenceManager_Type::Client *, std::__1::default_delete<CLBTLEFenceManager_Type::Client> >=^{Client}}}{unique_ptr<CLBTLERangeManager_Type::Client, std::__1::default_delete<CLBTLERangeManager_Type::Client> >={__compressed_pair<CLBTLERangeManager_Type::Client *, std::__1::default_delete<CLBTLERangeManager_Type::Client> >=^{Client}}}{unique_ptr<CLFenceManager_Type::Client, std::__1::default_delete<CLFenceManager_Type::Client> >={__compressed_pair<CLFenceManager_Type::Client *, std::__1::default_delete<CLFenceManager_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLGeomagneticModelProvider_Type::Client, std::__1::default_delete<CLGeomagneticModelProvider_Type::Client> >={__compressed_pair<CLGeomagneticModelProvider_Type::Client *, std::__1::default_delete<CLGeomagneticModelProvider_Type::Client> >=^{Client}}}{unique_ptr<CLPressureBias_Type::Client, std::__1::default_delete<CLPressureBias_Type::Client> >={__compressed_pair<CLPressureBias_Type::Client *, std::__1::default_delete<CLPressureBias_Type::Client> >=^{Client}}}{unique_ptr<CLAutopauseProvider_Type::Client, std::__1::default_delete<CLAutopauseProvider_Type::Client> >={__compressed_pair<CLAutopauseProvider_Type::Client *, std::__1::default_delete<CLAutopauseProvider_Type::Client> >=^{Client}}}{unique_ptr<CLMotionState_Type::Client, std::__1::default_delete<CLMotionState_Type::Client> >={__compressed_pair<CLMotionState_Type::Client *, std::__1::default_delete<CLMotionState_Type::Client> >=^{Client}}}{unique_ptr<CLOnBodyNotifier_Type::Client, std::__1::default_delete<CLOnBodyNotifier_Type::Client> >={__compressed_pair<CLOnBodyNotifier_Type::Client *, std::__1::default_delete<CLOnBodyNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLStepCountNotifier_Type::Client, std::__1::default_delete<CLStepCountNotifier_Type::Client> >={__compressed_pair<CLStepCountNotifier_Type::Client *, std::__1::default_delete<CLStepCountNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLOdometerNotifier_Type::Client, std::__1::default_delete<CLOdometerNotifier_Type::Client> >={__compressed_pair<CLOdometerNotifier_Type::Client *, std::__1::default_delete<CLOdometerNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLSedentaryTimerNotifier_Type::Client, std::__1::default_delete<CLSedentaryTimerNotifier_Type::Client> >={__compressed_pair<CLSedentaryTimerNotifier_Type::Client *, std::__1::default_delete<CLSedentaryTimerNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLMotionState_Type::Client, std::__1::default_delete<CLMotionState_Type::Client> >={__compressed_pair<CLMotionState_Type::Client *, std::__1::default_delete<CLMotionState_Type::Client> >=^{Client}}}{unique_ptr<CLNatalimetryNotifier_Type::Client, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >={__compressed_pair<CLNatalimetryNotifier_Type::Client *, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLMotionStateMediator_Type::Client, std::__1::default_delete<CLMotionStateMediator_Type::Client> >={__compressed_pair<CLMotionStateMediator_Type::Client *, std::__1::default_delete<CLMotionStateMediator_Type::Client> >=^{Client}}}{unique_ptr<CLMicroLocationNotifier_Type::Client, std::__1::default_delete<CLMicroLocationNotifier_Type::Client> >={__compressed_pair<CLMicroLocationNotifier_Type::Client *, std::__1::default_delete<CLMicroLocationNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLPeerRangingNotifier_Type::Client, std::__1::default_delete<CLPeerRangingNotifier_Type::Client> >={__compressed_pair<CLPeerRangingNotifier_Type::Client *, std::__1::default_delete<CLPeerRangingNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLSidebandOverride, std::__1::default_delete<CLSidebandOverride> >={__compressed_pair<CLSidebandOverride *, std::__1::default_delete<CLSidebandOverride> >=^{CLSidebandOverride}}}{unique_ptr<CLSidebandSensorFusion, std::__1::default_delete<CLSidebandSensorFusion> >={__compressed_pair<CLSidebandSensorFusion *, std::__1::default_delete<CLSidebandSensorFusion> >=^{CLSidebandSensorFusion}}}{unique_ptr<CLMotionStateOverride, std::__1::default_delete<CLMotionStateOverride> >={__compressed_pair<CLMotionStateOverride *, std::__1::default_delete<CLMotionStateOverride> >=^{CLMotionStateOverride}}}{unique_ptr<CLMotionStateSim, std::__1::default_delete<CLMotionStateSim> >={__compressed_pair<CLMotionStateSim *, std::__1::default_delete<CLMotionStateSim> >=^{CLMotionStateSim}}}{unique_ptr<CLSwimNotifier_Type::Client, std::__1::default_delete<CLSwimNotifier_Type::Client> >={__compressed_pair<CLSwimNotifier_Type::Client *, std::__1::default_delete<CLSwimNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLCompanionNotifier_Type::Client, std::__1::default_delete<CLCompanionNotifier_Type::Client> >={__compressed_pair<CLCompanionNotifier_Type::Client *, std::__1::default_delete<CLCompanionNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLCaptureMode, std::__1::default_delete<CLCaptureMode> >={__compressed_pair<CLCaptureMode *, std::__1::default_delete<CLCaptureMode> >=^{CLCaptureMode}}}@@@@@@@@@@@@@@@@@@@BdB^{Dispatcher}@d{?=ddddddddddi}{CLNameValuePair=^^?^{__CFDictionary}}{CLNameValuePair=^^?^{__CFDictionary}}BiiBBBBB@@^{CLConnection}iid@q@dB{PauseState=BBB}B{map<int, CMActivityAlarm *, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CMActivityAlarm *> > >={__tree<std::__1::__value_type<int, CMActivityAlarm *>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CMActivityAlarm *>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CMActivityAlarm *> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CMActivityAlarm *>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CMActivityAlarm *>, std::__1::less<int>, true> >=Q}}}Bdddd@{shared_ptr<CLPersistentTimer>=^{CLPersistentTimer}^{__shared_weak_count}}BBBdiBBBB{LocationUpdateSession={Metric=Bd{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}{LocationSystemState=BBBBBiBii}ddddddBi}{LocationMonitorSession={Metric=Bd{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}ddiiB}{BeaconMonitorSession={Metric=Bd{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}SSSSSSSS}{BeaconRangingSession={Metric=Bd{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}ISSC{vector<signed char, std::__1::allocator<signed char> >=**{__compressed_pair<signed char *, std::__1::allocator<signed char> >=*}}}{MotionTrigger={Metric=Bd{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}dii{map<std::__1::basic_string<char>, int, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, int> > >={__tree<std::__1::__value_type<std::__1::basic_string<char>, int>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, int>, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, int> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, int>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, int>, std::__1::less<std::__1::basic_string<char> >, true> >=Q}}}}^{CLCompassSessionStatsCollector}^v@@{map<CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> >, std::__1::less<CLBTLEBeaconRegion_Type::Region>, std::__1::allocator<std::__1::pair<const CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > > > >={__tree<std::__1::__value_type<CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >, std::__1::__map_value_compare<CLBTLEBeaconRegion_Type::Region, std::__1::__value_type<CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >, std::__1::less<CLBTLEBeaconRegion_Type::Region>, true>, std::__1::allocator<std::__1::__value_type<CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLBTLEBeaconRegion_Type::Region, std::__1::__value_type<CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >, std::__1::less<CLBTLEBeaconRegion_Type::Region>, true> >=Q}}}{CLCallbackDropManager=^^?{shared_ptr<int>=^i^{__shared_weak_count}}}di}16
^{CLDaemonClient=^{CLClientManager}{DestructionAwareMutex=^^?{shared_ptr<DestructionAwareMutexInternal>=^{DestructionAwareMutexInternal}^{__shared_weak_count}}}@@@{Name={basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}BBB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}BB}BBBBQiB{unique_ptr<CLClientManager::InUseAssertion, std::__1::default_delete<CLClientManager::InUseAssertion> >={__compressed_pair<CLClientManager::InUseAssertion *, std::__1::default_delete<CLClientManager::InUseAssertion> >=^{InUseAssertion}}}@BBi{list<CLDaemonClient::MessageRef, std::__1::allocator<CLDaemonClient::MessageRef> >={__list_node_base<CLDaemonClient::MessageRef, void *>=^{__list_node_base<CLDaemonClient::MessageRef, void *>}^{__list_node_base<CLDaemonClient::MessageRef, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLDaemonClient::MessageRef, void *> > >=Q}}@Q{map<std::__1::basic_string<char>, bool, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, bool> > >={__tree<std::__1::__value_type<std::__1::basic_string<char>, bool>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, bool>, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, bool>, std::__1::less<std::__1::basic_string<char> >, true> >=Q}}}IBB{unique_ptr<CLClientManager::InUseAssertion, std::__1::default_delete<CLClientManager::InUseAssertion> >={__compressed_pair<CLClientManager::InUseAssertion *, std::__1::default_delete<CLClientManager::InUseAssertion> >=^{InUseAssertion}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@iiBi@BBB@@iBB{unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client> >={__compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> >=^{Client}}}{unique_ptr<CLFilteredLocationController_Type::Client, std::__1::default_delete<CLFilteredLocationController_Type::Client> >={__compressed_pair<CLFilteredLocationController_Type::Client *, std::__1::default_delete<CLFilteredLocationController_Type::Client> >=^{Client}}}{unique_ptr<CLSignificantChangeManager_Type::Client, std::__1::default_delete<CLSignificantChangeManager_Type::Client> >={__compressed_pair<CLSignificantChangeManager_Type::Client *, std::__1::default_delete<CLSignificantChangeManager_Type::Client> >=^{Client}}}{unique_ptr<CLCompassDaemonClientNotifier_Type::Client, std::__1::default_delete<CLCompassDaemonClientNotifier_Type::Client> >={__compressed_pair<CLCompassDaemonClientNotifier_Type::Client *, std::__1::default_delete<CLCompassDaemonClientNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLBTLEFenceManager_Type::Client, std::__1::default_delete<CLBTLEFenceManager_Type::Client> >={__compressed_pair<CLBTLEFenceManager_Type::Client *, std::__1::default_delete<CLBTLEFenceManager_Type::Client> >=^{Client}}}{unique_ptr<CLBTLERangeManager_Type::Client, std::__1::default_delete<CLBTLERangeManager_Type::Client> >={__compressed_pair<CLBTLERangeManager_Type::Client *, std::__1::default_delete<CLBTLERangeManager_Type::Client> >=^{Client}}}{unique_ptr<CLFenceManager_Type::Client, std::__1::default_delete<CLFenceManager_Type::Client> >={__compressed_pair<CLFenceManager_Type::Client *, std::__1::default_delete<CLFenceManager_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLGeomagneticModelProvider_Type::Client, std::__1::default_delete<CLGeomagneticModelProvider_Type::Client> >={__compressed_pair<CLGeomagneticModelProvider_Type::Client *, std::__1::default_delete<CLGeomagneticModelProvider_Type::Client> >=^{Client}}}{unique_ptr<CLPressureBias_Type::Client, std::__1::default_delete<CLPressureBias_Type::Client> >={__compressed_pair<CLPressureBias_Type::Client *, std::__1::default_delete<CLPressureBias_Type::Client> >=^{Client}}}{unique_ptr<CLAutopauseProvider_Type::Client, std::__1::default_delete<CLAutopauseProvider_Type::Client> >={__compressed_pair<CLAutopauseProvider_Type::Client *, std::__1::default_delete<CLAutopauseProvider_Type::Client> >=^{Client}}}{unique_ptr<CLMotionState_Type::Client, std::__1::default_delete<CLMotionState_Type::Client> >={__compressed_pair<CLMotionState_Type::Client *, std::__1::default_delete<CLMotionState_Type::Client> >=^{Client}}}{unique_ptr<CLOnBodyNotifier_Type::Client, std::__1::default_delete<CLOnBodyNotifier_Type::Client> >={__compressed_pair<CLOnBodyNotifier_Type::Client *, std::__1::default_delete<CLOnBodyNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLStepCountNotifier_Type::Client, std::__1::default_delete<CLStepCountNotifier_Type::Client> >={__compressed_pair<CLStepCountNotifier_Type::Client *, std::__1::default_delete<CLStepCountNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLOdometerNotifier_Type::Client, std::__1::default_delete<CLOdometerNotifier_Type::Client> >={__compressed_pair<CLOdometerNotifier_Type::Client *, std::__1::default_delete<CLOdometerNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLSedentaryTimerNotifier_Type::Client, std::__1::default_delete<CLSedentaryTimerNotifier_Type::Client> >={__compressed_pair<CLSedentaryTimerNotifier_Type::Client *, std::__1::default_delete<CLSedentaryTimerNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLMotionState_Type::Client, std::__1::default_delete<CLMotionState_Type::Client> >={__compressed_pair<CLMotionState_Type::Client *, std::__1::default_delete<CLMotionState_Type::Client> >=^{Client}}}{unique_ptr<CLNatalimetryNotifier_Type::Client, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >={__compressed_pair<CLNatalimetryNotifier_Type::Client *, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLMotionStateMediator_Type::Client, std::__1::default_delete<CLMotionStateMediator_Type::Client> >={__compressed_pair<CLMotionStateMediator_Type::Client *, std::__1::default_delete<CLMotionStateMediator_Type::Client> >=^{Client}}}{unique_ptr<CLMicroLocationNotifier_Type::Client, std::__1::default_delete<CLMicroLocationNotifier_Type::Client> >={__compressed_pair<CLMicroLocationNotifier_Type::Client *, std::__1::default_delete<CLMicroLocationNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLPeerRangingNotifier_Type::Client, std::__1::default_delete<CLPeerRangingNotifier_Type::Client> >={__compressed_pair<CLPeerRangingNotifier_Type::Client *, std::__1::default_delete<CLPeerRangingNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLSidebandOverride, std::__1::default_delete<CLSidebandOverride> >={__compressed_pair<CLSidebandOverride *, std::__1::default_delete<CLSidebandOverride> >=^{CLSidebandOverride}}}{unique_ptr<CLSidebandSensorFusion, std::__1::default_delete<CLSidebandSensorFusion> >={__compressed_pair<CLSidebandSensorFusion *, std::__1::default_delete<CLSidebandSensorFusion> >=^{CLSidebandSensorFusion}}}{unique_ptr<CLMotionStateOverride, std::__1::default_delete<CLMotionStateOverride> >={__compressed_pair<CLMotionStateOverride *, std::__1::default_delete<CLMotionStateOverride> >=^{CLMotionStateOverride}}}{unique_ptr<CLMotionStateSim, std::__1::default_delete<CLMotionStateSim> >={__compressed_pair<CLMotionStateSim *, std::__1::default_delete<CLMotionStateSim> >=^{CLMotionStateSim}}}{unique_ptr<CLSwimNotifier_Type::Client, std::__1::default_delete<CLSwimNotifier_Type::Client> >={__compressed_pair<CLSwimNotifier_Type::Client *, std::__1::default_delete<CLSwimNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLCompanionNotifier_Type::Client, std::__1::default_delete<CLCompanionNotifier_Type::Client> >={__compressed_pair<CLCompanionNotifier_Type::Client *, std::__1::default_delete<CLCompanionNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLCaptureMode, std::__1::default_delete<CLCaptureMode> >={__compressed_pair<CLCaptureMode *, std::__1::default_delete<CLCaptureMode> >=^{CLCaptureMode}}}@@@@@@@@@@@@@@@@@@@BdB^{Dispatcher}@d{?=ddddddddddi}{CLNameValuePair=^^?^{__CFDictionary}}{CLNameValuePair=^^?^{__CFDictionary}}BiiBBBBB@@^{CLConnection}iid@q@dB{PauseState=BBB}B{map<int, CMActivityAlarm *, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CMActivityAlarm *> > >={__tree<std::__1::__value_type<int, CMActivityAlarm *>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CMActivityAlarm *>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CMActivityAlarm *> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CMActivityAlarm *>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CMActivityAlarm *>, std::__1::less<int>, true> >=Q}}}Bdddd@{shared_ptr<CLPersistentTimer>=^{CLPersistentTimer}^{__shared_weak_count}}BBBdiBBBB{LocationUpdateSession={Metric=Bd{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}{LocationSystemState=BBBBBiBii}ddddddBi}{LocationMonitorSession={Metric=Bd{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}ddiiB}{BeaconMonitorSession={Metric=Bd{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}SSSSSSSS}{BeaconRangingSession={Metric=Bd{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}ISSC{vector<signed char, std::__1::allocator<signed char> >=**{__compressed_pair<signed char *, std::__1::allocator<signed char> >=*}}}{MotionTrigger={Metric=Bd{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}dii{map<std::__1::basic_string<char>, int, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, int> > >={__tree<std::__1::__value_type<std::__1::basic_string<char>, int>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, int>, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, int> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, int>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, int>, std::__1::less<std::__1::basic_string<char> >, true> >=Q}}}}^{CLCompassSessionStatsCollector}^v@@{map<CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> >, std::__1::less<CLBTLEBeaconRegion_Type::Region>, std::__1::allocator<std::__1::pair<const CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > > > >={__tree<std::__1::__value_type<CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >, std::__1::__map_value_compare<CLBTLEBeaconRegion_Type::Region, std::__1::__value_type<CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >, std::__1::less<CLBTLEBeaconRegion_Type::Region>, true>, std::__1::allocator<std::__1::__value_type<CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLBTLEBeaconRegion_Type::Region, std::__1::__value_type<CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >, std::__1::less<CLBTLEBeaconRegion_Type::Region>, true> >=Q}}}{CLCallbackDropManager=^^?{shared_ptr<int>=^i^{__shared_weak_count}}}di}
{CLVehicleConnection=dd[256c]d}16@0:8
v24@0:8@?<v@?{CLVehicleConnection=dd[256c]d}>16
v24@0:8@?<v@?^{CLVehicleConnectionNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB@iiiB@{CLVehicleConnection=dd[256c]d}(NotificationData={CLVehicleConnection=dd[256c]d}){unique_ptr<CLBluetoothService_Type::Client, std::__1::default_delete<CLBluetoothService_Type::Client> >={__compressed_pair<CLBluetoothService_Type::Client *, std::__1::default_delete<CLBluetoothService_Type::Client> >=^{Client}}}{unique_ptr<CLMotionState_Type::Client, std::__1::default_delete<CLMotionState_Type::Client> >={__compressed_pair<CLMotionState_Type::Client *, std::__1::default_delete<CLMotionState_Type::Client> >=^{Client}}}}>16
v32@0:8@?<v@?^{CLVehicleConnectionNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB@iiiB@{CLVehicleConnection=dd[256c]d}(NotificationData={CLVehicleConnection=dd[256c]d}){unique_ptr<CLBluetoothService_Type::Client, std::__1::default_delete<CLBluetoothService_Type::Client> >={__compressed_pair<CLBluetoothService_Type::Client *, std::__1::default_delete<CLBluetoothService_Type::Client> >=^{Client}}}{unique_ptr<CLMotionState_Type::Client, std::__1::default_delete<CLMotionState_Type::Client> >={__compressed_pair<CLMotionState_Type::Client *, std::__1::default_delete<CLMotionState_Type::Client> >=^{Client}}}}>16@?<v@?>24
B24@0:8@?<v@?^{CLVehicleConnectionNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB@iiiB@{CLVehicleConnection=dd[256c]d}(NotificationData={CLVehicleConnection=dd[256c]d}){unique_ptr<CLBluetoothService_Type::Client, std::__1::default_delete<CLBluetoothService_Type::Client> >={__compressed_pair<CLBluetoothService_Type::Client *, std::__1::default_delete<CLBluetoothService_Type::Client> >=^{Client}}}{unique_ptr<CLMotionState_Type::Client, std::__1::default_delete<CLMotionState_Type::Client> >={__compressed_pair<CLMotionState_Type::Client *, std::__1::default_delete<CLMotionState_Type::Client> >=^{Client}}}}>16
v32@0:8^{__CFUserNotification=}16Q24
^{CLVehicleConnectionNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB@iiiB@{CLVehicleConnection=dd[256c]d}(NotificationData={CLVehicleConnection=dd[256c]d}){unique_ptr<CLBluetoothService_Type::Client, std::__1::default_delete<CLBluetoothService_Type::Client> >={__compressed_pair<CLBluetoothService_Type::Client *, std::__1::default_delete<CLBluetoothService_Type::Client> >=^{Client}}}{unique_ptr<CLMotionState_Type::Client, std::__1::default_delete<CLMotionState_Type::Client> >={__compressed_pair<CLMotionState_Type::Client *, std::__1::default_delete<CLMotionState_Type::Client> >=^{Client}}}}16@0:8
v24@0:8@?<v@?^{CLMotionSyncStore=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBB@{unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client> >={__compressed_pair<CLDataProtectionManager_Type::Client *, std::__1::default_delete<CLDataProtectionManager_Type::Client> >=^{Client}}}}>16
v32@0:8@?<v@?^{CLMotionSyncStore=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBB@{unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client> >={__compressed_pair<CLDataProtectionManager_Type::Client *, std::__1::default_delete<CLDataProtectionManager_Type::Client> >=^{Client}}}}>16@?<v@?>24
B24@0:8@?<v@?^{CLMotionSyncStore=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBB@{unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client> >={__compressed_pair<CLDataProtectionManager_Type::Client *, std::__1::default_delete<CLDataProtectionManager_Type::Client> >=^{Client}}}}>16
^{CLMotionSyncStore=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBB@{unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client> >={__compressed_pair<CLDataProtectionManager_Type::Client *, std::__1::default_delete<CLDataProtectionManager_Type::Client> >=^{Client}}}}16@0:8
v24@0:8@?<v@?^{CLLocationAwarenessProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBdd{MonitoringParameters=ddB}BBdddd{CLPersistentTimer=@^?^v@{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}BB{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{unique_ptr<CLFilteredLocationController_Type::Client, std::__1::default_delete<CLFilteredLocationController_Type::Client> >={__compressed_pair<CLFilteredLocationController_Type::Client *, std::__1::default_delete<CLFilteredLocationController_Type::Client> >=^{Client}}}{unique_ptr<CLFilteredLocationController_Type::Client, std::__1::default_delete<CLFilteredLocationController_Type::Client> >={__compressed_pair<CLFilteredLocationController_Type::Client *, std::__1::default_delete<CLFilteredLocationController_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}BB{unique_ptr<CLPowerAssertion, std::__1::default_delete<CLPowerAssertion> >={__compressed_pair<CLPowerAssertion *, std::__1::default_delete<CLPowerAssertion> >=^{CLPowerAssertion}}}@i@@}>16
v32@0:8@?<v@?^{CLLocationAwarenessProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBdd{MonitoringParameters=ddB}BBdddd{CLPersistentTimer=@^?^v@{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}BB{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{unique_ptr<CLFilteredLocationController_Type::Client, std::__1::default_delete<CLFilteredLocationController_Type::Client> >={__compressed_pair<CLFilteredLocationController_Type::Client *, std::__1::default_delete<CLFilteredLocationController_Type::Client> >=^{Client}}}{unique_ptr<CLFilteredLocationController_Type::Client, std::__1::default_delete<CLFilteredLocationController_Type::Client> >={__compressed_pair<CLFilteredLocationController_Type::Client *, std::__1::default_delete<CLFilteredLocationController_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}BB{unique_ptr<CLPowerAssertion, std::__1::default_delete<CLPowerAssertion> >={__compressed_pair<CLPowerAssertion *, std::__1::default_delete<CLPowerAssertion> >=^{CLPowerAssertion}}}@i@@}>16@?<v@?>24
B24@0:8@?<v@?^{CLLocationAwarenessProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBdd{MonitoringParameters=ddB}BBdddd{CLPersistentTimer=@^?^v@{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}BB{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{unique_ptr<CLFilteredLocationController_Type::Client, std::__1::default_delete<CLFilteredLocationController_Type::Client> >={__compressed_pair<CLFilteredLocationController_Type::Client *, std::__1::default_delete<CLFilteredLocationController_Type::Client> >=^{Client}}}{unique_ptr<CLFilteredLocationController_Type::Client, std::__1::default_delete<CLFilteredLocationController_Type::Client> >={__compressed_pair<CLFilteredLocationController_Type::Client *, std::__1::default_delete<CLFilteredLocationController_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}BB{unique_ptr<CLPowerAssertion, std::__1::default_delete<CLPowerAssertion> >={__compressed_pair<CLPowerAssertion *, std::__1::default_delete<CLPowerAssertion> >=^{CLPowerAssertion}}}@i@@}>16
^{CLLocationAwarenessProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBdd{MonitoringParameters=ddB}BBdddd{CLPersistentTimer=@^?^v@{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}BB{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{unique_ptr<CLFilteredLocationController_Type::Client, std::__1::default_delete<CLFilteredLocationController_Type::Client> >={__compressed_pair<CLFilteredLocationController_Type::Client *, std::__1::default_delete<CLFilteredLocationController_Type::Client> >=^{Client}}}{unique_ptr<CLFilteredLocationController_Type::Client, std::__1::default_delete<CLFilteredLocationController_Type::Client> >={__compressed_pair<CLFilteredLocationController_Type::Client *, std::__1::default_delete<CLFilteredLocationController_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}BB{unique_ptr<CLPowerAssertion, std::__1::default_delete<CLPowerAssertion> >={__compressed_pair<CLPowerAssertion *, std::__1::default_delete<CLPowerAssertion> >=^{CLPowerAssertion}}}@i@@}16@0:8
v24@0:8@?<v@?^{CLFitnessMachineNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{_CLFitnessMachineData=dddddqqqdddddd}}>16
v32@0:8@?<v@?^{CLFitnessMachineNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{_CLFitnessMachineData=dddddqqqdddddd}}>16@?<v@?>24
B24@0:8@?<v@?^{CLFitnessMachineNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{_CLFitnessMachineData=dddddqqqdddddd}}>16
v24@0:8@"CMFitnessMachineData"16
^{CLFitnessMachineNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{_CLFitnessMachineData=dddddqqqdddddd}}16@0:8
B24@0:8^{NotificationData=i{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}16
B24@0:8^{__CFString=}16
v24@0:8@?<v@?^{CLAppMonitor=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB@{NotificationData=i{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}}>16
v32@0:8@?<v@?^{CLAppMonitor=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB@{NotificationData=i{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}}>16@?<v@?>24
B24@0:8@?<v@?^{CLAppMonitor=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB@{NotificationData=i{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}}>16
^{CLAppMonitor=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB@{NotificationData=i{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}}16@0:8
v24@0:8@?<v@?^{CLMotionStateObserver=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBid@BB{unique_ptr<CLCompanionNotifier_Type::Client, std::__1::default_delete<CLCompanionNotifier_Type::Client> >={__compressed_pair<CLCompanionNotifier_Type::Client *, std::__1::default_delete<CLCompanionNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLFitnessTrackingNotifier_Type::Client, std::__1::default_delete<CLFitnessTrackingNotifier_Type::Client> >={__compressed_pair<CLFitnessTrackingNotifier_Type::Client *, std::__1::default_delete<CLFitnessTrackingNotifier_Type::Client> >=^{Client}}}}>16
v32@0:8@?<v@?^{CLMotionStateObserver=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBid@BB{unique_ptr<CLCompanionNotifier_Type::Client, std::__1::default_delete<CLCompanionNotifier_Type::Client> >={__compressed_pair<CLCompanionNotifier_Type::Client *, std::__1::default_delete<CLCompanionNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLFitnessTrackingNotifier_Type::Client, std::__1::default_delete<CLFitnessTrackingNotifier_Type::Client> >={__compressed_pair<CLFitnessTrackingNotifier_Type::Client *, std::__1::default_delete<CLFitnessTrackingNotifier_Type::Client> >=^{Client}}}}>16@?<v@?>24
B24@0:8@?<v@?^{CLMotionStateObserver=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBid@BB{unique_ptr<CLCompanionNotifier_Type::Client, std::__1::default_delete<CLCompanionNotifier_Type::Client> >={__compressed_pair<CLCompanionNotifier_Type::Client *, std::__1::default_delete<CLCompanionNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLFitnessTrackingNotifier_Type::Client, std::__1::default_delete<CLFitnessTrackingNotifier_Type::Client> >={__compressed_pair<CLFitnessTrackingNotifier_Type::Client *, std::__1::default_delete<CLFitnessTrackingNotifier_Type::Client> >=^{Client}}}}>16
^{CLMotionStateObserver=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBid@BB{unique_ptr<CLCompanionNotifier_Type::Client, std::__1::default_delete<CLCompanionNotifier_Type::Client> >={__compressed_pair<CLCompanionNotifier_Type::Client *, std::__1::default_delete<CLCompanionNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLFitnessTrackingNotifier_Type::Client, std::__1::default_delete<CLFitnessTrackingNotifier_Type::Client> >={__compressed_pair<CLFitnessTrackingNotifier_Type::Client *, std::__1::default_delete<CLFitnessTrackingNotifier_Type::Client> >=^{Client}}}}16@0:8
v24@0:8@?<v@?^{CLCellTilesManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{unique_ptr<CLFileDownload, std::__1::default_delete<CLFileDownload> >={__compressed_pair<CLFileDownload *, std::__1::default_delete<CLFileDownload> >=^{CLFileDownload}}}BBdddB^{CLPersistentTimer}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}ddiBBii{unique_ptr<CLICellTilesManagerExternal, std::__1::default_delete<CLICellTilesManagerExternal> >={__compressed_pair<CLICellTilesManagerExternal *, std::__1::default_delete<CLICellTilesManagerExternal> >=^{CLICellTilesManagerExternal}}}{unique_ptr<CLTileDownloader, std::__1::default_delete<CLTileDownloader> >={__compressed_pair<CLTileDownloader *, std::__1::default_delete<CLTileDownloader> >=^{CLTileDownloader}}}{CLTileDownloaderExternal=^^?}{CLTileDownloadPolicy=@dQ}{CLTilesSetCollection={vector<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >, std::__1::allocator<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > > >=^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}{__compressed_pair<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > *, std::__1::allocator<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > > >=^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}}}}B@B}>16
v32@0:8@?<v@?^{CLCellTilesManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{unique_ptr<CLFileDownload, std::__1::default_delete<CLFileDownload> >={__compressed_pair<CLFileDownload *, std::__1::default_delete<CLFileDownload> >=^{CLFileDownload}}}BBdddB^{CLPersistentTimer}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}ddiBBii{unique_ptr<CLICellTilesManagerExternal, std::__1::default_delete<CLICellTilesManagerExternal> >={__compressed_pair<CLICellTilesManagerExternal *, std::__1::default_delete<CLICellTilesManagerExternal> >=^{CLICellTilesManagerExternal}}}{unique_ptr<CLTileDownloader, std::__1::default_delete<CLTileDownloader> >={__compressed_pair<CLTileDownloader *, std::__1::default_delete<CLTileDownloader> >=^{CLTileDownloader}}}{CLTileDownloaderExternal=^^?}{CLTileDownloadPolicy=@dQ}{CLTilesSetCollection={vector<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >, std::__1::allocator<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > > >=^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}{__compressed_pair<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > *, std::__1::allocator<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > > >=^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}}}}B@B}>16@?<v@?>24
B24@0:8@?<v@?^{CLCellTilesManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{unique_ptr<CLFileDownload, std::__1::default_delete<CLFileDownload> >={__compressed_pair<CLFileDownload *, std::__1::default_delete<CLFileDownload> >=^{CLFileDownload}}}BBdddB^{CLPersistentTimer}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}ddiBBii{unique_ptr<CLICellTilesManagerExternal, std::__1::default_delete<CLICellTilesManagerExternal> >={__compressed_pair<CLICellTilesManagerExternal *, std::__1::default_delete<CLICellTilesManagerExternal> >=^{CLICellTilesManagerExternal}}}{unique_ptr<CLTileDownloader, std::__1::default_delete<CLTileDownloader> >={__compressed_pair<CLTileDownloader *, std::__1::default_delete<CLTileDownloader> >=^{CLTileDownloader}}}{CLTileDownloaderExternal=^^?}{CLTileDownloadPolicy=@dQ}{CLTilesSetCollection={vector<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >, std::__1::allocator<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > > >=^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}{__compressed_pair<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > *, std::__1::allocator<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > > >=^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}}}}B@B}>16
^{CLCellTilesManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{unique_ptr<CLFileDownload, std::__1::default_delete<CLFileDownload> >={__compressed_pair<CLFileDownload *, std::__1::default_delete<CLFileDownload> >=^{CLFileDownload}}}BBdddB^{CLPersistentTimer}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}ddiBBii{unique_ptr<CLICellTilesManagerExternal, std::__1::default_delete<CLICellTilesManagerExternal> >={__compressed_pair<CLICellTilesManagerExternal *, std::__1::default_delete<CLICellTilesManagerExternal> >=^{CLICellTilesManagerExternal}}}{unique_ptr<CLTileDownloader, std::__1::default_delete<CLTileDownloader> >={__compressed_pair<CLTileDownloader *, std::__1::default_delete<CLTileDownloader> >=^{CLTileDownloader}}}{CLTileDownloaderExternal=^^?}{CLTileDownloadPolicy=@dQ}{CLTilesSetCollection={vector<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >, std::__1::allocator<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > > >=^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}{__compressed_pair<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > *, std::__1::allocator<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > > >=^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}}}}B@B}16@0:8
v32@0:8r^i16r^(NotificationData={MediatedMotionActivity=d{CLMotionActivity=iiiiBfdBiddii{?=b1b1b1b1b1}}{CLNatalieFeatures=fffffffiB}BB}{MotionOverride=i{CLMotionActivity=iiiiBfdBiddii{?=b1b1b1b1b1}}q{WorkoutSettings=[16C]q(WorkoutAttrib={SwimAttrib=qd})}}{WorkoutEvent=[16C]qqdC})24
@"NSMutableData"
v72@0:8d16d24{CLTileFileDownloadDetails=BBBdidBB}32
v40@0:8{?=dd}16@?32
v40@0:8{?=dd}16@?<v@?i>32
v24@0:8@?<v@?^{CLWifiTilesManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB^^?{map<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> >, std::__1::less<TileId>, std::__1::allocator<std::__1::pair<const TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > > > >={__tree<std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > >, std::__1::__map_value_compare<TileId, std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > >, std::__1::less<TileId>, true>, std::__1::allocator<std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<TileId, std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > >, std::__1::less<TileId>, true> >=Q}}}{DownloadState=*Bd{unique_ptr<CLFileDownload, std::__1::default_delete<CLFileDownload> >={__compressed_pair<CLFileDownload *, std::__1::default_delete<CLFileDownload> >=^{CLFileDownload}}}}{DownloadState=*Bd{unique_ptr<CLFileDownload, std::__1::default_delete<CLFileDownload> >={__compressed_pair<CLFileDownload *, std::__1::default_delete<CLFileDownload> >=^{CLFileDownload}}}}BBd{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}ddiiB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{unique_ptr<CLIWifiTilesManagerExternal, std::__1::default_delete<CLIWifiTilesManagerExternal> >={__compressed_pair<CLIWifiTilesManagerExternal *, std::__1::default_delete<CLIWifiTilesManagerExternal> >=^{CLIWifiTilesManagerExternal}}}{CLTileDownloadPolicy=@dQ}{shared_ptr<CLWifiAccessPointLocationService>=^{CLWifiAccessPointLocationService}^{__shared_weak_count}}{unique_ptr<CLITileSyncManager, std::__1::default_delete<CLITileSyncManager> >={__compressed_pair<CLITileSyncManager *, std::__1::default_delete<CLITileSyncManager> >=^{CLITileSyncManager}}}B{CLTilesSetCollection={vector<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >, std::__1::allocator<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > > >=^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}{__compressed_pair<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > *, std::__1::allocator<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > > >=^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}}}}}>16
v32@0:8@?<v@?^{CLWifiTilesManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB^^?{map<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> >, std::__1::less<TileId>, std::__1::allocator<std::__1::pair<const TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > > > >={__tree<std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > >, std::__1::__map_value_compare<TileId, std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > >, std::__1::less<TileId>, true>, std::__1::allocator<std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<TileId, std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > >, std::__1::less<TileId>, true> >=Q}}}{DownloadState=*Bd{unique_ptr<CLFileDownload, std::__1::default_delete<CLFileDownload> >={__compressed_pair<CLFileDownload *, std::__1::default_delete<CLFileDownload> >=^{CLFileDownload}}}}{DownloadState=*Bd{unique_ptr<CLFileDownload, std::__1::default_delete<CLFileDownload> >={__compressed_pair<CLFileDownload *, std::__1::default_delete<CLFileDownload> >=^{CLFileDownload}}}}BBd{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}ddiiB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{unique_ptr<CLIWifiTilesManagerExternal, std::__1::default_delete<CLIWifiTilesManagerExternal> >={__compressed_pair<CLIWifiTilesManagerExternal *, std::__1::default_delete<CLIWifiTilesManagerExternal> >=^{CLIWifiTilesManagerExternal}}}{CLTileDownloadPolicy=@dQ}{shared_ptr<CLWifiAccessPointLocationService>=^{CLWifiAccessPointLocationService}^{__shared_weak_count}}{unique_ptr<CLITileSyncManager, std::__1::default_delete<CLITileSyncManager> >={__compressed_pair<CLITileSyncManager *, std::__1::default_delete<CLITileSyncManager> >=^{CLITileSyncManager}}}B{CLTilesSetCollection={vector<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >, std::__1::allocator<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > > >=^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}{__compressed_pair<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > *, std::__1::allocator<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > > >=^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}}}}}>16@?<v@?>24
B24@0:8@?<v@?^{CLWifiTilesManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB^^?{map<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> >, std::__1::less<TileId>, std::__1::allocator<std::__1::pair<const TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > > > >={__tree<std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > >, std::__1::__map_value_compare<TileId, std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > >, std::__1::less<TileId>, true>, std::__1::allocator<std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<TileId, std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > >, std::__1::less<TileId>, true> >=Q}}}{DownloadState=*Bd{unique_ptr<CLFileDownload, std::__1::default_delete<CLFileDownload> >={__compressed_pair<CLFileDownload *, std::__1::default_delete<CLFileDownload> >=^{CLFileDownload}}}}{DownloadState=*Bd{unique_ptr<CLFileDownload, std::__1::default_delete<CLFileDownload> >={__compressed_pair<CLFileDownload *, std::__1::default_delete<CLFileDownload> >=^{CLFileDownload}}}}BBd{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}ddiiB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{unique_ptr<CLIWifiTilesManagerExternal, std::__1::default_delete<CLIWifiTilesManagerExternal> >={__compressed_pair<CLIWifiTilesManagerExternal *, std::__1::default_delete<CLIWifiTilesManagerExternal> >=^{CLIWifiTilesManagerExternal}}}{CLTileDownloadPolicy=@dQ}{shared_ptr<CLWifiAccessPointLocationService>=^{CLWifiAccessPointLocationService}^{__shared_weak_count}}{unique_ptr<CLITileSyncManager, std::__1::default_delete<CLITileSyncManager> >={__compressed_pair<CLITileSyncManager *, std::__1::default_delete<CLITileSyncManager> >=^{CLITileSyncManager}}}B{CLTilesSetCollection={vector<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >, std::__1::allocator<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > > >=^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}{__compressed_pair<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > *, std::__1::allocator<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > > >=^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}}}}}>16
^{CLWifiTilesManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB^^?{map<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> >, std::__1::less<TileId>, std::__1::allocator<std::__1::pair<const TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > > > >={__tree<std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > >, std::__1::__map_value_compare<TileId, std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > >, std::__1::less<TileId>, true>, std::__1::allocator<std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<TileId, std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > >, std::__1::less<TileId>, true> >=Q}}}{DownloadState=*Bd{unique_ptr<CLFileDownload, std::__1::default_delete<CLFileDownload> >={__compressed_pair<CLFileDownload *, std::__1::default_delete<CLFileDownload> >=^{CLFileDownload}}}}{DownloadState=*Bd{unique_ptr<CLFileDownload, std::__1::default_delete<CLFileDownload> >={__compressed_pair<CLFileDownload *, std::__1::default_delete<CLFileDownload> >=^{CLFileDownload}}}}BBd{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}ddiiB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{unique_ptr<CLIWifiTilesManagerExternal, std::__1::default_delete<CLIWifiTilesManagerExternal> >={__compressed_pair<CLIWifiTilesManagerExternal *, std::__1::default_delete<CLIWifiTilesManagerExternal> >=^{CLIWifiTilesManagerExternal}}}{CLTileDownloadPolicy=@dQ}{shared_ptr<CLWifiAccessPointLocationService>=^{CLWifiAccessPointLocationService}^{__shared_weak_count}}{unique_ptr<CLITileSyncManager, std::__1::default_delete<CLITileSyncManager> >={__compressed_pair<CLITileSyncManager *, std::__1::default_delete<CLITileSyncManager> >=^{CLITileSyncManager}}}B{CLTilesSetCollection={vector<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >, std::__1::allocator<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > > >=^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}{__compressed_pair<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > *, std::__1::allocator<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > > >=^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}}}}}16@0:8
v40@0:8{CLExerciseMinuteData=id^{__CFString}}16
i32@0:8^{CLNatalieData=i^{__CFString}diBBiddfqqddiiddB}16^{vector<CLNatalieData, std::__1::allocator<CLNatalieData> >=}24
i32@0:8^{CLExerciseMinuteData=id^{__CFString}}16^{vector<CLExerciseMinuteData, std::__1::allocator<CLExerciseMinuteData> >=}24
v24@0:8@?<v@?^{CLNatalimetryNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{shared_ptr<CLNatalimetryRecorderDb>=^{CLNatalimetryRecorderDb}^{__shared_weak_count}}{CLActivityAggregator<CLNatalieData, CLActivityDB::NoDataProtectionPolicy>={vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}^{CLAggregationRule}{__compressed_pair<CLAggregationRule *, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}}}{shared_ptr<CLActivityRecorderDb<CLNatalieData, CLActivityDB::NoDataProtectionPolicy> >=^{CLActivityRecorderDb<CLNatalieData, CLActivityDB::NoDataProtectionPolicy>}^{__shared_weak_count}}BB}{shared_ptr<CLExerciseMinuteRecorderDb>=^{CLExerciseMinuteRecorderDb}^{__shared_weak_count}}{CLActivityAggregator<CLExerciseMinuteData, CLActivityDB::NoDataProtectionPolicy>={vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}^{CLAggregationRule}{__compressed_pair<CLAggregationRule *, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}}}{shared_ptr<CLActivityRecorderDb<CLExerciseMinuteData, CLActivityDB::NoDataProtectionPolicy> >=^{CLActivityRecorderDb<CLExerciseMinuteData, CLActivityDB::NoDataProtectionPolicy>}^{__shared_weak_count}}BB}{CLMotionDefaultsWrite<bool>=BB}@{unique_ptr<CLPersistentStore, std::__1::default_delete<CLPersistentStore> >={__compressed_pair<CLPersistentStore *, std::__1::default_delete<CLPersistentStore> >=^{CLPersistentStore}}}(NotificationData={CLNatalieData=i^{__CFString}diBBiddfqqddiiddB}B{CLBodyMetrics=iffffffffif}f{CLExerciseMinuteData=id^{__CFString}})BB@B{CLMotionDefaultsWrite<bool>=BB}ii^{Dispatcher}B{CLNatalieSourceFromNotifier<CLOdometerEntry>=^^?*d{deque<CLOdometerEntry, std::__1::allocator<CLOdometerEntry> >={__split_buffer<CLOdometerEntry *, std::__1::allocator<CLOdometerEntry *> >=^^{CLOdometerEntry}^^{CLOdometerEntry}^^{CLOdometerEntry}{__compressed_pair<CLOdometerEntry **, std::__1::allocator<CLOdometerEntry *> >=^^{CLOdometerEntry}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLOdometerEntry> >=Q}}dBddddBB@{unique_ptr<CLOdometerNotifier_Type::Client, std::__1::default_delete<CLOdometerNotifier_Type::Client> >={__compressed_pair<CLOdometerNotifier_Type::Client *, std::__1::default_delete<CLOdometerNotifier_Type::Client> >=^{Client}}}}{CLNatalieSourceFromNotifier<CLElevationChangeEntry>=^^?*d{deque<CLElevationChangeEntry, std::__1::allocator<CLElevationChangeEntry> >={__split_buffer<CLElevationChangeEntry *, std::__1::allocator<CLElevationChangeEntry *> >=^^{CLElevationChangeEntry}^^{CLElevationChangeEntry}^^{CLElevationChangeEntry}{__compressed_pair<CLElevationChangeEntry **, std::__1::allocator<CLElevationChangeEntry *> >=^^{CLElevationChangeEntry}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLElevationChangeEntry> >=Q}}dBdddd{CLElevationChangeEntry=ddIIiidi}dddfBdi{vector<float, std::__1::allocator<float> >=^f^f{__compressed_pair<float *, std::__1::allocator<float> >=^f}}{deque<float, std::__1::allocator<float> >={__split_buffer<float *, std::__1::allocator<float *> >=^^f^^f^^f{__compressed_pair<float **, std::__1::allocator<float *> >=^^f}}Q{__compressed_pair<unsigned long, std::__1::allocator<float> >=Q}}{deque<float, std::__1::allocator<float> >={__split_buffer<float *, std::__1::allocator<float *> >=^^f^^f^^f{__compressed_pair<float **, std::__1::allocator<float *> >=^^f}}Q{__compressed_pair<unsigned long, std::__1::allocator<float> >=Q}}{deque<float, std::__1::allocator<float> >={__split_buffer<float *, std::__1::allocator<float *> >=^^f^^f^^f{__compressed_pair<float **, std::__1::allocator<float *> >=^^f}}Q{__compressed_pair<unsigned long, std::__1::allocator<float> >=Q}}BB@{unique_ptr<CLOdometerNotifier_Type::Client, std::__1::default_delete<CLOdometerNotifier_Type::Client> >={__compressed_pair<CLOdometerNotifier_Type::Client *, std::__1::default_delete<CLOdometerNotifier_Type::Client> >=^{Client}}}}{CLNatalieSourceFromNotifier<CLCoarseElevationChangeEntry>=^^?*d{deque<CLCoarseElevationChangeEntry, std::__1::allocator<CLCoarseElevationChangeEntry> >={__split_buffer<CLCoarseElevationChangeEntry *, std::__1::allocator<CLCoarseElevationChangeEntry *> >=^^{CLCoarseElevationChangeEntry}^^{CLCoarseElevationChangeEntry}^^{CLCoarseElevationChangeEntry}{__compressed_pair<CLCoarseElevationChangeEntry **, std::__1::allocator<CLCoarseElevationChangeEntry *> >=^^{CLCoarseElevationChangeEntry}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLCoarseElevationChangeEntry> >=Q}}dBddddBBB@{unique_ptr<CLOdometerNotifier_Type::Client, std::__1::default_delete<CLOdometerNotifier_Type::Client> >={__compressed_pair<CLOdometerNotifier_Type::Client *, std::__1::default_delete<CLOdometerNotifier_Type::Client> >=^{Client}}}}{CLNatalieSourceFromNotifier<CLCatherineData>=^^?*d{deque<CLCatherineData, std::__1::allocator<CLCatherineData> >={__split_buffer<CLCatherineData *, std::__1::allocator<CLCatherineData *> >=^^{CLCatherineData}^^{CLCatherineData}^^{CLCatherineData}{__compressed_pair<CLCatherineData **, std::__1::allocator<CLCatherineData *> >=^^{CLCatherineData}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLCatherineData> >=Q}}dBddddBB@{unique_ptr<CLCatherineNotifier_Type::Client, std::__1::default_delete<CLCatherineNotifier_Type::Client> >={__compressed_pair<CLCatherineNotifier_Type::Client *, std::__1::default_delete<CLCatherineNotifier_Type::Client> >=^{Client}}}}{CLNatalieSourceFromNotifier<CLStepCountEntry>=^^?*d{deque<CLStepCountEntry, std::__1::allocator<CLStepCountEntry> >={__split_buffer<CLStepCountEntry *, std::__1::allocator<CLStepCountEntry *> >=^^{CLStepCountEntry}^^{CLStepCountEntry}^^{CLStepCountEntry}{__compressed_pair<CLStepCountEntry **, std::__1::allocator<CLStepCountEntry *> >=^^{CLStepCountEntry}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLStepCountEntry> >=Q}}dBddddBB@{unique_ptr<CLStepCountNotifier_Type::Client, std::__1::default_delete<CLStepCountNotifier_Type::Client> >={__compressed_pair<CLStepCountNotifier_Type::Client *, std::__1::default_delete<CLStepCountNotifier_Type::Client> >=^{Client}}}}{CLNatalieInput<CLMotionStateMediator_Type::MediatedMotionActivity>=^^?*d{deque<CLMotionStateMediator_Type::MediatedMotionActivity, std::__1::allocator<CLMotionStateMediator_Type::MediatedMotionActivity> >={__split_buffer<CLMotionStateMediator_Type::MediatedMotionActivity *, std::__1::allocator<CLMotionStateMediator_Type::MediatedMotionActivity *> >=^^{MediatedMotionActivity}^^{MediatedMotionActivity}^^{MediatedMotionActivity}{__compressed_pair<CLMotionStateMediator_Type::MediatedMotionActivity **, std::__1::allocator<CLMotionStateMediator_Type::MediatedMotionActivity *> >=^^{MediatedMotionActivity}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLMotionStateMediator_Type::MediatedMotionActivity> >=Q}}dBddddBB}{CLNatalieSourceFromNotifier<CLSwimEntry>=^^?*d{deque<CLSwimEntry, std::__1::allocator<CLSwimEntry> >={__split_buffer<CLSwimEntry *, std::__1::allocator<CLSwimEntry *> >=^^{CLSwimEntry}^^{CLSwimEntry}^^{CLSwimEntry}{__compressed_pair<CLSwimEntry **, std::__1::allocator<CLSwimEntry *> >=^^{CLSwimEntry}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLSwimEntry> >=Q}}dBddddBB@{unique_ptr<CLSwimNotifier_Type::Client, std::__1::default_delete<CLSwimNotifier_Type::Client> >={__compressed_pair<CLSwimNotifier_Type::Client *, std::__1::default_delete<CLSwimNotifier_Type::Client> >=^{Client}}}}{CLNatalieSourceFromNotifier<_CLFitnessMachineData>=^^?*d{deque<_CLFitnessMachineData, std::__1::allocator<_CLFitnessMachineData> >={__split_buffer<_CLFitnessMachineData *, std::__1::allocator<_CLFitnessMachineData *> >=^^{_CLFitnessMachineData}^^{_CLFitnessMachineData}^^{_CLFitnessMachineData}{__compressed_pair<_CLFitnessMachineData **, std::__1::allocator<_CLFitnessMachineData *> >=^^{_CLFitnessMachineData}}}Q{__compressed_pair<unsigned long, std::__1::allocator<_CLFitnessMachineData> >=Q}}dBddddBB@{unique_ptr<CLFitnessMachineNotifier_Type::Client, std::__1::default_delete<CLFitnessMachineNotifier_Type::Client> >={__compressed_pair<CLFitnessMachineNotifier_Type::Client *, std::__1::default_delete<CLFitnessMachineNotifier_Type::Client> >=^{Client}}}}{shared_ptr<CLNatalieModelInput>=^{CLNatalieModelInput}^{__shared_weak_count}}{CLCalorieController={CLNatalieModelChooser={shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}}{shared_ptr<CLNatalieModelInput>=^{CLNatalieModelInput}^{__shared_weak_count}}{deque<double, std::__1::allocator<double> >={__split_buffer<double *, std::__1::allocator<double *> >=^^d^^d^^d{__compressed_pair<double **, std::__1::allocator<double *> >=^^d}}Q{__compressed_pair<unsigned long, std::__1::allocator<double> >=Q}}{CLMedianFilter<double>=^^?I{deque<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long>, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> > >={__split_buffer<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> *, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> *> >=^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long>}^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long>}^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long>}{__compressed_pair<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> **, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> *> >=^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long>}}}Q{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> > >=Q}}{multiset<double, std::__1::less<double>, std::__1::allocator<double> >={__tree<double, std::__1::less<double>, std::__1::allocator<double> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<double, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<double> >=Q}}}}d{deque<std::__1::pair<double, float>, std::__1::allocator<std::__1::pair<double, float> > >={__split_buffer<std::__1::pair<double, float> *, std::__1::allocator<std::__1::pair<double, float> *> >=^^{pair<double, float>}^^{pair<double, float>}^^{pair<double, float>}{__compressed_pair<std::__1::pair<double, float> **, std::__1::allocator<std::__1::pair<double, float> *> >=^^{pair<double, float>}}}Q{__compressed_pair<unsigned long, std::__1::allocator<std::__1::pair<double, float> > >=Q}}{deque<std::__1::pair<double, float>, std::__1::allocator<std::__1::pair<double, float> > >={__split_buffer<std::__1::pair<double, float> *, std::__1::allocator<std::__1::pair<double, float> *> >=^^{pair<double, float>}^^{pair<double, float>}^^{pair<double, float>}{__compressed_pair<std::__1::pair<double, float> **, std::__1::allocator<std::__1::pair<double, float> *> >=^^{pair<double, float>}}}Q{__compressed_pair<unsigned long, std::__1::allocator<std::__1::pair<double, float> > >=Q}}dB{CLExerciseMinuteEstimator=BB{CLCoarseElevationChangeEntry=dIi}dddd{deque<CLExerciseMinuteEstimator::IntensityEpoch, std::__1::allocator<CLExerciseMinuteEstimator::IntensityEpoch> >={__split_buffer<CLExerciseMinuteEstimator::IntensityEpoch *, std::__1::allocator<CLExerciseMinuteEstimator::IntensityEpoch *> >=^^{IntensityEpoch}^^{IntensityEpoch}^^{IntensityEpoch}{__compressed_pair<CLExerciseMinuteEstimator::IntensityEpoch **, std::__1::allocator<CLExerciseMinuteEstimator::IntensityEpoch *> >=^^{IntensityEpoch}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLExerciseMinuteEstimator::IntensityEpoch> >=Q}}dBdddddd{deque<CLExerciseMinuteEstimator::CLPushEpoch, std::__1::allocator<CLExerciseMinuteEstimator::CLPushEpoch> >={__split_buffer<CLExerciseMinuteEstimator::CLPushEpoch *, std::__1::allocator<CLExerciseMinuteEstimator::CLPushEpoch *> >=^^{CLPushEpoch}^^{CLPushEpoch}^^{CLPushEpoch}{__compressed_pair<CLExerciseMinuteEstimator::CLPushEpoch **, std::__1::allocator<CLExerciseMinuteEstimator::CLPushEpoch *> >=^^{CLPushEpoch}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLExerciseMinuteEstimator::CLPushEpoch> >=Q}}{deque<CLExerciseMinuteEstimator::CLPushEpoch, std::__1::allocator<CLExerciseMinuteEstimator::CLPushEpoch> >={__split_buffer<CLExerciseMinuteEstimator::CLPushEpoch *, std::__1::allocator<CLExerciseMinuteEstimator::CLPushEpoch *> >=^^{CLPushEpoch}^^{CLPushEpoch}^^{CLPushEpoch}{__compressed_pair<CLExerciseMinuteEstimator::CLPushEpoch **, std::__1::allocator<CLExerciseMinuteEstimator::CLPushEpoch *> >=^^{CLPushEpoch}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLExerciseMinuteEstimator::CLPushEpoch> >=Q}}}{CLMotionDefaultsWrite<bool>=BB}}id{CLCatherineData=iiddBdddi}dB{CLCaloriePalEstimator=}{CLVO2MaxEstimator=q{CLVO2MaxInputCollector={deque<CLVO2MaxInputCollector::HRSample, std::__1::allocator<CLVO2MaxInputCollector::HRSample> >={__split_buffer<CLVO2MaxInputCollector::HRSample *, std::__1::allocator<CLVO2MaxInputCollector::HRSample *> >=^^{HRSample}^^{HRSample}^^{HRSample}{__compressed_pair<CLVO2MaxInputCollector::HRSample **, std::__1::allocator<CLVO2MaxInputCollector::HRSample *> >=^^{HRSample}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLVO2MaxInputCollector::HRSample> >=Q}}Bd{CLStepCountRecorderDb=^^?{auto_ptr<CLSqliteDatabase>=^{CLSqliteDatabase}}*{BasicMutex=^^?^{MutexInfo}}B{deque<CLStepCountEntry, std::__1::allocator<CLStepCountEntry> >={__split_buffer<CLStepCountEntry *, std::__1::allocator<CLStepCountEntry *> >=^^{CLStepCountEntry}^^{CLStepCountEntry}^^{CLStepCountEntry}{__compressed_pair<CLStepCountEntry **, std::__1::allocator<CLStepCountEntry *> >=^^{CLStepCountEntry}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLStepCountEntry> >=Q}}ifi{CLStepCountEntry=dddIddIIdddi^{__CFString}BB{CLAccelerometerPace=ddd}IIC}i@{NoDataProtectionPolicy=}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}BB@?@IIIdiiidBI}q[16C]B}{CLVO2MaxPreprocessor={CLVO2MaxFHREstimator={CLHRToFHRConverter={Bounds=ff}}{CLBodyMetrics=iffffffffif}ff}ffd{PairStats=iiiiiiiiiiiiiii}}{CLVO2MaxInputStore={CLVO2MaxInputCache=^^?{auto_ptr<CLSqliteDatabase>=^{CLSqliteDatabase}}*{BasicMutex=^^?^{MutexInfo}}B{deque<VO2MaxInput, std::__1::allocator<VO2MaxInput> >={__split_buffer<VO2MaxInput *, std::__1::allocator<VO2MaxInput *> >=^^{VO2MaxInput}^^{VO2MaxInput}^^{VO2MaxInput}{__compressed_pair<VO2MaxInput **, std::__1::allocator<VO2MaxInput *> >=^^{VO2MaxInput}}}Q{__compressed_pair<unsigned long, std::__1::allocator<VO2MaxInput> >=Q}}ifi{VO2MaxInput=Q[16C]fdffidBBiq}i@{NoDataProtectionPolicy=}}B[16C]{deque<VO2MaxInput, std::__1::allocator<VO2MaxInput> >={__split_buffer<VO2MaxInput *, std::__1::allocator<VO2MaxInput *> >=^^{VO2MaxInput}^^{VO2MaxInput}^^{VO2MaxInput}{__compressed_pair<VO2MaxInput **, std::__1::allocator<VO2MaxInput *> >=^^{VO2MaxInput}}}Q{__compressed_pair<unsigned long, std::__1::allocator<VO2MaxInput> >=Q}}}{CLVO2MaxOutputStore={CLVO2MaxOutputRecorderDb=^^?{auto_ptr<CLSqliteDatabase>=^{CLSqliteDatabase}}*{BasicMutex=^^?^{MutexInfo}}B{deque<VO2MaxOutput, std::__1::allocator<VO2MaxOutput> >={__split_buffer<VO2MaxOutput *, std::__1::allocator<VO2MaxOutput *> >=^^{VO2MaxOutput}^^{VO2MaxOutput}^^{VO2MaxOutput}{__compressed_pair<VO2MaxOutput **, std::__1::allocator<VO2MaxOutput *> >=^^{VO2MaxOutput}}}Q{__compressed_pair<unsigned long, std::__1::allocator<VO2MaxOutput> >=Q}}ifi{VO2MaxOutput=Q[16C]ddqddd}i@{NoDataProtectionPolicy=}}}{vector<HRMetPair, std::__1::allocator<HRMetPair> >=^{HRMetPair}^{HRMetPair}{__compressed_pair<HRMetPair *, std::__1::allocator<HRMetPair> >=^{HRMetPair}}}{CLBodyMetrics=iffffffffif}}{unique_ptr<CLMotionStateMediator_Type::Client, std::__1::default_delete<CLMotionStateMediator_Type::Client> >={__compressed_pair<CLMotionStateMediator_Type::Client *, std::__1::default_delete<CLMotionStateMediator_Type::Client> >=^{Client}}}{unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client> >={__compressed_pair<CLDataProtectionManager_Type::Client *, std::__1::default_delete<CLDataProtectionManager_Type::Client> >=^{Client}}}{unique_ptr<CLCatherineNotifier_Type::Client, std::__1::default_delete<CLCatherineNotifier_Type::Client> >={__compressed_pair<CLCatherineNotifier_Type::Client *, std::__1::default_delete<CLCatherineNotifier_Type::Client> >=^{Client}}}}>16
v32@0:8@?<v@?^{CLNatalimetryNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{shared_ptr<CLNatalimetryRecorderDb>=^{CLNatalimetryRecorderDb}^{__shared_weak_count}}{CLActivityAggregator<CLNatalieData, CLActivityDB::NoDataProtectionPolicy>={vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}^{CLAggregationRule}{__compressed_pair<CLAggregationRule *, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}}}{shared_ptr<CLActivityRecorderDb<CLNatalieData, CLActivityDB::NoDataProtectionPolicy> >=^{CLActivityRecorderDb<CLNatalieData, CLActivityDB::NoDataProtectionPolicy>}^{__shared_weak_count}}BB}{shared_ptr<CLExerciseMinuteRecorderDb>=^{CLExerciseMinuteRecorderDb}^{__shared_weak_count}}{CLActivityAggregator<CLExerciseMinuteData, CLActivityDB::NoDataProtectionPolicy>={vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}^{CLAggregationRule}{__compressed_pair<CLAggregationRule *, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}}}{shared_ptr<CLActivityRecorderDb<CLExerciseMinuteData, CLActivityDB::NoDataProtectionPolicy> >=^{CLActivityRecorderDb<CLExerciseMinuteData, CLActivityDB::NoDataProtectionPolicy>}^{__shared_weak_count}}BB}{CLMotionDefaultsWrite<bool>=BB}@{unique_ptr<CLPersistentStore, std::__1::default_delete<CLPersistentStore> >={__compressed_pair<CLPersistentStore *, std::__1::default_delete<CLPersistentStore> >=^{CLPersistentStore}}}(NotificationData={CLNatalieData=i^{__CFString}diBBiddfqqddiiddB}B{CLBodyMetrics=iffffffffif}f{CLExerciseMinuteData=id^{__CFString}})BB@B{CLMotionDefaultsWrite<bool>=BB}ii^{Dispatcher}B{CLNatalieSourceFromNotifier<CLOdometerEntry>=^^?*d{deque<CLOdometerEntry, std::__1::allocator<CLOdometerEntry> >={__split_buffer<CLOdometerEntry *, std::__1::allocator<CLOdometerEntry *> >=^^{CLOdometerEntry}^^{CLOdometerEntry}^^{CLOdometerEntry}{__compressed_pair<CLOdometerEntry **, std::__1::allocator<CLOdometerEntry *> >=^^{CLOdometerEntry}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLOdometerEntry> >=Q}}dBddddBB@{unique_ptr<CLOdometerNotifier_Type::Client, std::__1::default_delete<CLOdometerNotifier_Type::Client> >={__compressed_pair<CLOdometerNotifier_Type::Client *, std::__1::default_delete<CLOdometerNotifier_Type::Client> >=^{Client}}}}{CLNatalieSourceFromNotifier<CLElevationChangeEntry>=^^?*d{deque<CLElevationChangeEntry, std::__1::allocator<CLElevationChangeEntry> >={__split_buffer<CLElevationChangeEntry *, std::__1::allocator<CLElevationChangeEntry *> >=^^{CLElevationChangeEntry}^^{CLElevationChangeEntry}^^{CLElevationChangeEntry}{__compressed_pair<CLElevationChangeEntry **, std::__1::allocator<CLElevationChangeEntry *> >=^^{CLElevationChangeEntry}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLElevationChangeEntry> >=Q}}dBdddd{CLElevationChangeEntry=ddIIiidi}dddfBdi{vector<float, std::__1::allocator<float> >=^f^f{__compressed_pair<float *, std::__1::allocator<float> >=^f}}{deque<float, std::__1::allocator<float> >={__split_buffer<float *, std::__1::allocator<float *> >=^^f^^f^^f{__compressed_pair<float **, std::__1::allocator<float *> >=^^f}}Q{__compressed_pair<unsigned long, std::__1::allocator<float> >=Q}}{deque<float, std::__1::allocator<float> >={__split_buffer<float *, std::__1::allocator<float *> >=^^f^^f^^f{__compressed_pair<float **, std::__1::allocator<float *> >=^^f}}Q{__compressed_pair<unsigned long, std::__1::allocator<float> >=Q}}{deque<float, std::__1::allocator<float> >={__split_buffer<float *, std::__1::allocator<float *> >=^^f^^f^^f{__compressed_pair<float **, std::__1::allocator<float *> >=^^f}}Q{__compressed_pair<unsigned long, std::__1::allocator<float> >=Q}}BB@{unique_ptr<CLOdometerNotifier_Type::Client, std::__1::default_delete<CLOdometerNotifier_Type::Client> >={__compressed_pair<CLOdometerNotifier_Type::Client *, std::__1::default_delete<CLOdometerNotifier_Type::Client> >=^{Client}}}}{CLNatalieSourceFromNotifier<CLCoarseElevationChangeEntry>=^^?*d{deque<CLCoarseElevationChangeEntry, std::__1::allocator<CLCoarseElevationChangeEntry> >={__split_buffer<CLCoarseElevationChangeEntry *, std::__1::allocator<CLCoarseElevationChangeEntry *> >=^^{CLCoarseElevationChangeEntry}^^{CLCoarseElevationChangeEntry}^^{CLCoarseElevationChangeEntry}{__compressed_pair<CLCoarseElevationChangeEntry **, std::__1::allocator<CLCoarseElevationChangeEntry *> >=^^{CLCoarseElevationChangeEntry}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLCoarseElevationChangeEntry> >=Q}}dBddddBBB@{unique_ptr<CLOdometerNotifier_Type::Client, std::__1::default_delete<CLOdometerNotifier_Type::Client> >={__compressed_pair<CLOdometerNotifier_Type::Client *, std::__1::default_delete<CLOdometerNotifier_Type::Client> >=^{Client}}}}{CLNatalieSourceFromNotifier<CLCatherineData>=^^?*d{deque<CLCatherineData, std::__1::allocator<CLCatherineData> >={__split_buffer<CLCatherineData *, std::__1::allocator<CLCatherineData *> >=^^{CLCatherineData}^^{CLCatherineData}^^{CLCatherineData}{__compressed_pair<CLCatherineData **, std::__1::allocator<CLCatherineData *> >=^^{CLCatherineData}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLCatherineData> >=Q}}dBddddBB@{unique_ptr<CLCatherineNotifier_Type::Client, std::__1::default_delete<CLCatherineNotifier_Type::Client> >={__compressed_pair<CLCatherineNotifier_Type::Client *, std::__1::default_delete<CLCatherineNotifier_Type::Client> >=^{Client}}}}{CLNatalieSourceFromNotifier<CLStepCountEntry>=^^?*d{deque<CLStepCountEntry, std::__1::allocator<CLStepCountEntry> >={__split_buffer<CLStepCountEntry *, std::__1::allocator<CLStepCountEntry *> >=^^{CLStepCountEntry}^^{CLStepCountEntry}^^{CLStepCountEntry}{__compressed_pair<CLStepCountEntry **, std::__1::allocator<CLStepCountEntry *> >=^^{CLStepCountEntry}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLStepCountEntry> >=Q}}dBddddBB@{unique_ptr<CLStepCountNotifier_Type::Client, std::__1::default_delete<CLStepCountNotifier_Type::Client> >={__compressed_pair<CLStepCountNotifier_Type::Client *, std::__1::default_delete<CLStepCountNotifier_Type::Client> >=^{Client}}}}{CLNatalieInput<CLMotionStateMediator_Type::MediatedMotionActivity>=^^?*d{deque<CLMotionStateMediator_Type::MediatedMotionActivity, std::__1::allocator<CLMotionStateMediator_Type::MediatedMotionActivity> >={__split_buffer<CLMotionStateMediator_Type::MediatedMotionActivity *, std::__1::allocator<CLMotionStateMediator_Type::MediatedMotionActivity *> >=^^{MediatedMotionActivity}^^{MediatedMotionActivity}^^{MediatedMotionActivity}{__compressed_pair<CLMotionStateMediator_Type::MediatedMotionActivity **, std::__1::allocator<CLMotionStateMediator_Type::MediatedMotionActivity *> >=^^{MediatedMotionActivity}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLMotionStateMediator_Type::MediatedMotionActivity> >=Q}}dBddddBB}{CLNatalieSourceFromNotifier<CLSwimEntry>=^^?*d{deque<CLSwimEntry, std::__1::allocator<CLSwimEntry> >={__split_buffer<CLSwimEntry *, std::__1::allocator<CLSwimEntry *> >=^^{CLSwimEntry}^^{CLSwimEntry}^^{CLSwimEntry}{__compressed_pair<CLSwimEntry **, std::__1::allocator<CLSwimEntry *> >=^^{CLSwimEntry}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLSwimEntry> >=Q}}dBddddBB@{unique_ptr<CLSwimNotifier_Type::Client, std::__1::default_delete<CLSwimNotifier_Type::Client> >={__compressed_pair<CLSwimNotifier_Type::Client *, std::__1::default_delete<CLSwimNotifier_Type::Client> >=^{Client}}}}{CLNatalieSourceFromNotifier<_CLFitnessMachineData>=^^?*d{deque<_CLFitnessMachineData, std::__1::allocator<_CLFitnessMachineData> >={__split_buffer<_CLFitnessMachineData *, std::__1::allocator<_CLFitnessMachineData *> >=^^{_CLFitnessMachineData}^^{_CLFitnessMachineData}^^{_CLFitnessMachineData}{__compressed_pair<_CLFitnessMachineData **, std::__1::allocator<_CLFitnessMachineData *> >=^^{_CLFitnessMachineData}}}Q{__compressed_pair<unsigned long, std::__1::allocator<_CLFitnessMachineData> >=Q}}dBddddBB@{unique_ptr<CLFitnessMachineNotifier_Type::Client, std::__1::default_delete<CLFitnessMachineNotifier_Type::Client> >={__compressed_pair<CLFitnessMachineNotifier_Type::Client *, std::__1::default_delete<CLFitnessMachineNotifier_Type::Client> >=^{Client}}}}{shared_ptr<CLNatalieModelInput>=^{CLNatalieModelInput}^{__shared_weak_count}}{CLCalorieController={CLNatalieModelChooser={shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}}{shared_ptr<CLNatalieModelInput>=^{CLNatalieModelInput}^{__shared_weak_count}}{deque<double, std::__1::allocator<double> >={__split_buffer<double *, std::__1::allocator<double *> >=^^d^^d^^d{__compressed_pair<double **, std::__1::allocator<double *> >=^^d}}Q{__compressed_pair<unsigned long, std::__1::allocator<double> >=Q}}{CLMedianFilter<double>=^^?I{deque<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long>, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> > >={__split_buffer<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> *, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> *> >=^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long>}^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long>}^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long>}{__compressed_pair<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> **, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> *> >=^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long>}}}Q{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> > >=Q}}{multiset<double, std::__1::less<double>, std::__1::allocator<double> >={__tree<double, std::__1::less<double>, std::__1::allocator<double> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<double, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<double> >=Q}}}}d{deque<std::__1::pair<double, float>, std::__1::allocator<std::__1::pair<double, float> > >={__split_buffer<std::__1::pair<double, float> *, std::__1::allocator<std::__1::pair<double, float> *> >=^^{pair<double, float>}^^{pair<double, float>}^^{pair<double, float>}{__compressed_pair<std::__1::pair<double, float> **, std::__1::allocator<std::__1::pair<double, float> *> >=^^{pair<double, float>}}}Q{__compressed_pair<unsigned long, std::__1::allocator<std::__1::pair<double, float> > >=Q}}{deque<std::__1::pair<double, float>, std::__1::allocator<std::__1::pair<double, float> > >={__split_buffer<std::__1::pair<double, float> *, std::__1::allocator<std::__1::pair<double, float> *> >=^^{pair<double, float>}^^{pair<double, float>}^^{pair<double, float>}{__compressed_pair<std::__1::pair<double, float> **, std::__1::allocator<std::__1::pair<double, float> *> >=^^{pair<double, float>}}}Q{__compressed_pair<unsigned long, std::__1::allocator<std::__1::pair<double, float> > >=Q}}dB{CLExerciseMinuteEstimator=BB{CLCoarseElevationChangeEntry=dIi}dddd{deque<CLExerciseMinuteEstimator::IntensityEpoch, std::__1::allocator<CLExerciseMinuteEstimator::IntensityEpoch> >={__split_buffer<CLExerciseMinuteEstimator::IntensityEpoch *, std::__1::allocator<CLExerciseMinuteEstimator::IntensityEpoch *> >=^^{IntensityEpoch}^^{IntensityEpoch}^^{IntensityEpoch}{__compressed_pair<CLExerciseMinuteEstimator::IntensityEpoch **, std::__1::allocator<CLExerciseMinuteEstimator::IntensityEpoch *> >=^^{IntensityEpoch}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLExerciseMinuteEstimator::IntensityEpoch> >=Q}}dBdddddd{deque<CLExerciseMinuteEstimator::CLPushEpoch, std::__1::allocator<CLExerciseMinuteEstimator::CLPushEpoch> >={__split_buffer<CLExerciseMinuteEstimator::CLPushEpoch *, std::__1::allocator<CLExerciseMinuteEstimator::CLPushEpoch *> >=^^{CLPushEpoch}^^{CLPushEpoch}^^{CLPushEpoch}{__compressed_pair<CLExerciseMinuteEstimator::CLPushEpoch **, std::__1::allocator<CLExerciseMinuteEstimator::CLPushEpoch *> >=^^{CLPushEpoch}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLExerciseMinuteEstimator::CLPushEpoch> >=Q}}{deque<CLExerciseMinuteEstimator::CLPushEpoch, std::__1::allocator<CLExerciseMinuteEstimator::CLPushEpoch> >={__split_buffer<CLExerciseMinuteEstimator::CLPushEpoch *, std::__1::allocator<CLExerciseMinuteEstimator::CLPushEpoch *> >=^^{CLPushEpoch}^^{CLPushEpoch}^^{CLPushEpoch}{__compressed_pair<CLExerciseMinuteEstimator::CLPushEpoch **, std::__1::allocator<CLExerciseMinuteEstimator::CLPushEpoch *> >=^^{CLPushEpoch}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLExerciseMinuteEstimator::CLPushEpoch> >=Q}}}{CLMotionDefaultsWrite<bool>=BB}}id{CLCatherineData=iiddBdddi}dB{CLCaloriePalEstimator=}{CLVO2MaxEstimator=q{CLVO2MaxInputCollector={deque<CLVO2MaxInputCollector::HRSample, std::__1::allocator<CLVO2MaxInputCollector::HRSample> >={__split_buffer<CLVO2MaxInputCollector::HRSample *, std::__1::allocator<CLVO2MaxInputCollector::HRSample *> >=^^{HRSample}^^{HRSample}^^{HRSample}{__compressed_pair<CLVO2MaxInputCollector::HRSample **, std::__1::allocator<CLVO2MaxInputCollector::HRSample *> >=^^{HRSample}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLVO2MaxInputCollector::HRSample> >=Q}}Bd{CLStepCountRecorderDb=^^?{auto_ptr<CLSqliteDatabase>=^{CLSqliteDatabase}}*{BasicMutex=^^?^{MutexInfo}}B{deque<CLStepCountEntry, std::__1::allocator<CLStepCountEntry> >={__split_buffer<CLStepCountEntry *, std::__1::allocator<CLStepCountEntry *> >=^^{CLStepCountEntry}^^{CLStepCountEntry}^^{CLStepCountEntry}{__compressed_pair<CLStepCountEntry **, std::__1::allocator<CLStepCountEntry *> >=^^{CLStepCountEntry}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLStepCountEntry> >=Q}}ifi{CLStepCountEntry=dddIddIIdddi^{__CFString}BB{CLAccelerometerPace=ddd}IIC}i@{NoDataProtectionPolicy=}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}BB@?@IIIdiiidBI}q[16C]B}{CLVO2MaxPreprocessor={CLVO2MaxFHREstimator={CLHRToFHRConverter={Bounds=ff}}{CLBodyMetrics=iffffffffif}ff}ffd{PairStats=iiiiiiiiiiiiiii}}{CLVO2MaxInputStore={CLVO2MaxInputCache=^^?{auto_ptr<CLSqliteDatabase>=^{CLSqliteDatabase}}*{BasicMutex=^^?^{MutexInfo}}B{deque<VO2MaxInput, std::__1::allocator<VO2MaxInput> >={__split_buffer<VO2MaxInput *, std::__1::allocator<VO2MaxInput *> >=^^{VO2MaxInput}^^{VO2MaxInput}^^{VO2MaxInput}{__compressed_pair<VO2MaxInput **, std::__1::allocator<VO2MaxInput *> >=^^{VO2MaxInput}}}Q{__compressed_pair<unsigned long, std::__1::allocator<VO2MaxInput> >=Q}}ifi{VO2MaxInput=Q[16C]fdffidBBiq}i@{NoDataProtectionPolicy=}}B[16C]{deque<VO2MaxInput, std::__1::allocator<VO2MaxInput> >={__split_buffer<VO2MaxInput *, std::__1::allocator<VO2MaxInput *> >=^^{VO2MaxInput}^^{VO2MaxInput}^^{VO2MaxInput}{__compressed_pair<VO2MaxInput **, std::__1::allocator<VO2MaxInput *> >=^^{VO2MaxInput}}}Q{__compressed_pair<unsigned long, std::__1::allocator<VO2MaxInput> >=Q}}}{CLVO2MaxOutputStore={CLVO2MaxOutputRecorderDb=^^?{auto_ptr<CLSqliteDatabase>=^{CLSqliteDatabase}}*{BasicMutex=^^?^{MutexInfo}}B{deque<VO2MaxOutput, std::__1::allocator<VO2MaxOutput> >={__split_buffer<VO2MaxOutput *, std::__1::allocator<VO2MaxOutput *> >=^^{VO2MaxOutput}^^{VO2MaxOutput}^^{VO2MaxOutput}{__compressed_pair<VO2MaxOutput **, std::__1::allocator<VO2MaxOutput *> >=^^{VO2MaxOutput}}}Q{__compressed_pair<unsigned long, std::__1::allocator<VO2MaxOutput> >=Q}}ifi{VO2MaxOutput=Q[16C]ddqddd}i@{NoDataProtectionPolicy=}}}{vector<HRMetPair, std::__1::allocator<HRMetPair> >=^{HRMetPair}^{HRMetPair}{__compressed_pair<HRMetPair *, std::__1::allocator<HRMetPair> >=^{HRMetPair}}}{CLBodyMetrics=iffffffffif}}{unique_ptr<CLMotionStateMediator_Type::Client, std::__1::default_delete<CLMotionStateMediator_Type::Client> >={__compressed_pair<CLMotionStateMediator_Type::Client *, std::__1::default_delete<CLMotionStateMediator_Type::Client> >=^{Client}}}{unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client> >={__compressed_pair<CLDataProtectionManager_Type::Client *, std::__1::default_delete<CLDataProtectionManager_Type::Client> >=^{Client}}}{unique_ptr<CLCatherineNotifier_Type::Client, std::__1::default_delete<CLCatherineNotifier_Type::Client> >={__compressed_pair<CLCatherineNotifier_Type::Client *, std::__1::default_delete<CLCatherineNotifier_Type::Client> >=^{Client}}}}>16@?<v@?>24
B24@0:8@?<v@?^{CLNatalimetryNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{shared_ptr<CLNatalimetryRecorderDb>=^{CLNatalimetryRecorderDb}^{__shared_weak_count}}{CLActivityAggregator<CLNatalieData, CLActivityDB::NoDataProtectionPolicy>={vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}^{CLAggregationRule}{__compressed_pair<CLAggregationRule *, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}}}{shared_ptr<CLActivityRecorderDb<CLNatalieData, CLActivityDB::NoDataProtectionPolicy> >=^{CLActivityRecorderDb<CLNatalieData, CLActivityDB::NoDataProtectionPolicy>}^{__shared_weak_count}}BB}{shared_ptr<CLExerciseMinuteRecorderDb>=^{CLExerciseMinuteRecorderDb}^{__shared_weak_count}}{CLActivityAggregator<CLExerciseMinuteData, CLActivityDB::NoDataProtectionPolicy>={vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}^{CLAggregationRule}{__compressed_pair<CLAggregationRule *, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}}}{shared_ptr<CLActivityRecorderDb<CLExerciseMinuteData, CLActivityDB::NoDataProtectionPolicy> >=^{CLActivityRecorderDb<CLExerciseMinuteData, CLActivityDB::NoDataProtectionPolicy>}^{__shared_weak_count}}BB}{CLMotionDefaultsWrite<bool>=BB}@{unique_ptr<CLPersistentStore, std::__1::default_delete<CLPersistentStore> >={__compressed_pair<CLPersistentStore *, std::__1::default_delete<CLPersistentStore> >=^{CLPersistentStore}}}(NotificationData={CLNatalieData=i^{__CFString}diBBiddfqqddiiddB}B{CLBodyMetrics=iffffffffif}f{CLExerciseMinuteData=id^{__CFString}})BB@B{CLMotionDefaultsWrite<bool>=BB}ii^{Dispatcher}B{CLNatalieSourceFromNotifier<CLOdometerEntry>=^^?*d{deque<CLOdometerEntry, std::__1::allocator<CLOdometerEntry> >={__split_buffer<CLOdometerEntry *, std::__1::allocator<CLOdometerEntry *> >=^^{CLOdometerEntry}^^{CLOdometerEntry}^^{CLOdometerEntry}{__compressed_pair<CLOdometerEntry **, std::__1::allocator<CLOdometerEntry *> >=^^{CLOdometerEntry}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLOdometerEntry> >=Q}}dBddddBB@{unique_ptr<CLOdometerNotifier_Type::Client, std::__1::default_delete<CLOdometerNotifier_Type::Client> >={__compressed_pair<CLOdometerNotifier_Type::Client *, std::__1::default_delete<CLOdometerNotifier_Type::Client> >=^{Client}}}}{CLNatalieSourceFromNotifier<CLElevationChangeEntry>=^^?*d{deque<CLElevationChangeEntry, std::__1::allocator<CLElevationChangeEntry> >={__split_buffer<CLElevationChangeEntry *, std::__1::allocator<CLElevationChangeEntry *> >=^^{CLElevationChangeEntry}^^{CLElevationChangeEntry}^^{CLElevationChangeEntry}{__compressed_pair<CLElevationChangeEntry **, std::__1::allocator<CLElevationChangeEntry *> >=^^{CLElevationChangeEntry}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLElevationChangeEntry> >=Q}}dBdddd{CLElevationChangeEntry=ddIIiidi}dddfBdi{vector<float, std::__1::allocator<float> >=^f^f{__compressed_pair<float *, std::__1::allocator<float> >=^f}}{deque<float, std::__1::allocator<float> >={__split_buffer<float *, std::__1::allocator<float *> >=^^f^^f^^f{__compressed_pair<float **, std::__1::allocator<float *> >=^^f}}Q{__compressed_pair<unsigned long, std::__1::allocator<float> >=Q}}{deque<float, std::__1::allocator<float> >={__split_buffer<float *, std::__1::allocator<float *> >=^^f^^f^^f{__compressed_pair<float **, std::__1::allocator<float *> >=^^f}}Q{__compressed_pair<unsigned long, std::__1::allocator<float> >=Q}}{deque<float, std::__1::allocator<float> >={__split_buffer<float *, std::__1::allocator<float *> >=^^f^^f^^f{__compressed_pair<float **, std::__1::allocator<float *> >=^^f}}Q{__compressed_pair<unsigned long, std::__1::allocator<float> >=Q}}BB@{unique_ptr<CLOdometerNotifier_Type::Client, std::__1::default_delete<CLOdometerNotifier_Type::Client> >={__compressed_pair<CLOdometerNotifier_Type::Client *, std::__1::default_delete<CLOdometerNotifier_Type::Client> >=^{Client}}}}{CLNatalieSourceFromNotifier<CLCoarseElevationChangeEntry>=^^?*d{deque<CLCoarseElevationChangeEntry, std::__1::allocator<CLCoarseElevationChangeEntry> >={__split_buffer<CLCoarseElevationChangeEntry *, std::__1::allocator<CLCoarseElevationChangeEntry *> >=^^{CLCoarseElevationChangeEntry}^^{CLCoarseElevationChangeEntry}^^{CLCoarseElevationChangeEntry}{__compressed_pair<CLCoarseElevationChangeEntry **, std::__1::allocator<CLCoarseElevationChangeEntry *> >=^^{CLCoarseElevationChangeEntry}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLCoarseElevationChangeEntry> >=Q}}dBddddBBB@{unique_ptr<CLOdometerNotifier_Type::Client, std::__1::default_delete<CLOdometerNotifier_Type::Client> >={__compressed_pair<CLOdometerNotifier_Type::Client *, std::__1::default_delete<CLOdometerNotifier_Type::Client> >=^{Client}}}}{CLNatalieSourceFromNotifier<CLCatherineData>=^^?*d{deque<CLCatherineData, std::__1::allocator<CLCatherineData> >={__split_buffer<CLCatherineData *, std::__1::allocator<CLCatherineData *> >=^^{CLCatherineData}^^{CLCatherineData}^^{CLCatherineData}{__compressed_pair<CLCatherineData **, std::__1::allocator<CLCatherineData *> >=^^{CLCatherineData}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLCatherineData> >=Q}}dBddddBB@{unique_ptr<CLCatherineNotifier_Type::Client, std::__1::default_delete<CLCatherineNotifier_Type::Client> >={__compressed_pair<CLCatherineNotifier_Type::Client *, std::__1::default_delete<CLCatherineNotifier_Type::Client> >=^{Client}}}}{CLNatalieSourceFromNotifier<CLStepCountEntry>=^^?*d{deque<CLStepCountEntry, std::__1::allocator<CLStepCountEntry> >={__split_buffer<CLStepCountEntry *, std::__1::allocator<CLStepCountEntry *> >=^^{CLStepCountEntry}^^{CLStepCountEntry}^^{CLStepCountEntry}{__compressed_pair<CLStepCountEntry **, std::__1::allocator<CLStepCountEntry *> >=^^{CLStepCountEntry}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLStepCountEntry> >=Q}}dBddddBB@{unique_ptr<CLStepCountNotifier_Type::Client, std::__1::default_delete<CLStepCountNotifier_Type::Client> >={__compressed_pair<CLStepCountNotifier_Type::Client *, std::__1::default_delete<CLStepCountNotifier_Type::Client> >=^{Client}}}}{CLNatalieInput<CLMotionStateMediator_Type::MediatedMotionActivity>=^^?*d{deque<CLMotionStateMediator_Type::MediatedMotionActivity, std::__1::allocator<CLMotionStateMediator_Type::MediatedMotionActivity> >={__split_buffer<CLMotionStateMediator_Type::MediatedMotionActivity *, std::__1::allocator<CLMotionStateMediator_Type::MediatedMotionActivity *> >=^^{MediatedMotionActivity}^^{MediatedMotionActivity}^^{MediatedMotionActivity}{__compressed_pair<CLMotionStateMediator_Type::MediatedMotionActivity **, std::__1::allocator<CLMotionStateMediator_Type::MediatedMotionActivity *> >=^^{MediatedMotionActivity}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLMotionStateMediator_Type::MediatedMotionActivity> >=Q}}dBddddBB}{CLNatalieSourceFromNotifier<CLSwimEntry>=^^?*d{deque<CLSwimEntry, std::__1::allocator<CLSwimEntry> >={__split_buffer<CLSwimEntry *, std::__1::allocator<CLSwimEntry *> >=^^{CLSwimEntry}^^{CLSwimEntry}^^{CLSwimEntry}{__compressed_pair<CLSwimEntry **, std::__1::allocator<CLSwimEntry *> >=^^{CLSwimEntry}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLSwimEntry> >=Q}}dBddddBB@{unique_ptr<CLSwimNotifier_Type::Client, std::__1::default_delete<CLSwimNotifier_Type::Client> >={__compressed_pair<CLSwimNotifier_Type::Client *, std::__1::default_delete<CLSwimNotifier_Type::Client> >=^{Client}}}}{CLNatalieSourceFromNotifier<_CLFitnessMachineData>=^^?*d{deque<_CLFitnessMachineData, std::__1::allocator<_CLFitnessMachineData> >={__split_buffer<_CLFitnessMachineData *, std::__1::allocator<_CLFitnessMachineData *> >=^^{_CLFitnessMachineData}^^{_CLFitnessMachineData}^^{_CLFitnessMachineData}{__compressed_pair<_CLFitnessMachineData **, std::__1::allocator<_CLFitnessMachineData *> >=^^{_CLFitnessMachineData}}}Q{__compressed_pair<unsigned long, std::__1::allocator<_CLFitnessMachineData> >=Q}}dBddddBB@{unique_ptr<CLFitnessMachineNotifier_Type::Client, std::__1::default_delete<CLFitnessMachineNotifier_Type::Client> >={__compressed_pair<CLFitnessMachineNotifier_Type::Client *, std::__1::default_delete<CLFitnessMachineNotifier_Type::Client> >=^{Client}}}}{shared_ptr<CLNatalieModelInput>=^{CLNatalieModelInput}^{__shared_weak_count}}{CLCalorieController={CLNatalieModelChooser={shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}}{shared_ptr<CLNatalieModelInput>=^{CLNatalieModelInput}^{__shared_weak_count}}{deque<double, std::__1::allocator<double> >={__split_buffer<double *, std::__1::allocator<double *> >=^^d^^d^^d{__compressed_pair<double **, std::__1::allocator<double *> >=^^d}}Q{__compressed_pair<unsigned long, std::__1::allocator<double> >=Q}}{CLMedianFilter<double>=^^?I{deque<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long>, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> > >={__split_buffer<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> *, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> *> >=^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long>}^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long>}^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long>}{__compressed_pair<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> **, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> *> >=^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long>}}}Q{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> > >=Q}}{multiset<double, std::__1::less<double>, std::__1::allocator<double> >={__tree<double, std::__1::less<double>, std::__1::allocator<double> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<double, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<double> >=Q}}}}d{deque<std::__1::pair<double, float>, std::__1::allocator<std::__1::pair<double, float> > >={__split_buffer<std::__1::pair<double, float> *, std::__1::allocator<std::__1::pair<double, float> *> >=^^{pair<double, float>}^^{pair<double, float>}^^{pair<double, float>}{__compressed_pair<std::__1::pair<double, float> **, std::__1::allocator<std::__1::pair<double, float> *> >=^^{pair<double, float>}}}Q{__compressed_pair<unsigned long, std::__1::allocator<std::__1::pair<double, float> > >=Q}}{deque<std::__1::pair<double, float>, std::__1::allocator<std::__1::pair<double, float> > >={__split_buffer<std::__1::pair<double, float> *, std::__1::allocator<std::__1::pair<double, float> *> >=^^{pair<double, float>}^^{pair<double, float>}^^{pair<double, float>}{__compressed_pair<std::__1::pair<double, float> **, std::__1::allocator<std::__1::pair<double, float> *> >=^^{pair<double, float>}}}Q{__compressed_pair<unsigned long, std::__1::allocator<std::__1::pair<double, float> > >=Q}}dB{CLExerciseMinuteEstimator=BB{CLCoarseElevationChangeEntry=dIi}dddd{deque<CLExerciseMinuteEstimator::IntensityEpoch, std::__1::allocator<CLExerciseMinuteEstimator::IntensityEpoch> >={__split_buffer<CLExerciseMinuteEstimator::IntensityEpoch *, std::__1::allocator<CLExerciseMinuteEstimator::IntensityEpoch *> >=^^{IntensityEpoch}^^{IntensityEpoch}^^{IntensityEpoch}{__compressed_pair<CLExerciseMinuteEstimator::IntensityEpoch **, std::__1::allocator<CLExerciseMinuteEstimator::IntensityEpoch *> >=^^{IntensityEpoch}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLExerciseMinuteEstimator::IntensityEpoch> >=Q}}dBdddddd{deque<CLExerciseMinuteEstimator::CLPushEpoch, std::__1::allocator<CLExerciseMinuteEstimator::CLPushEpoch> >={__split_buffer<CLExerciseMinuteEstimator::CLPushEpoch *, std::__1::allocator<CLExerciseMinuteEstimator::CLPushEpoch *> >=^^{CLPushEpoch}^^{CLPushEpoch}^^{CLPushEpoch}{__compressed_pair<CLExerciseMinuteEstimator::CLPushEpoch **, std::__1::allocator<CLExerciseMinuteEstimator::CLPushEpoch *> >=^^{CLPushEpoch}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLExerciseMinuteEstimator::CLPushEpoch> >=Q}}{deque<CLExerciseMinuteEstimator::CLPushEpoch, std::__1::allocator<CLExerciseMinuteEstimator::CLPushEpoch> >={__split_buffer<CLExerciseMinuteEstimator::CLPushEpoch *, std::__1::allocator<CLExerciseMinuteEstimator::CLPushEpoch *> >=^^{CLPushEpoch}^^{CLPushEpoch}^^{CLPushEpoch}{__compressed_pair<CLExerciseMinuteEstimator::CLPushEpoch **, std::__1::allocator<CLExerciseMinuteEstimator::CLPushEpoch *> >=^^{CLPushEpoch}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLExerciseMinuteEstimator::CLPushEpoch> >=Q}}}{CLMotionDefaultsWrite<bool>=BB}}id{CLCatherineData=iiddBdddi}dB{CLCaloriePalEstimator=}{CLVO2MaxEstimator=q{CLVO2MaxInputCollector={deque<CLVO2MaxInputCollector::HRSample, std::__1::allocator<CLVO2MaxInputCollector::HRSample> >={__split_buffer<CLVO2MaxInputCollector::HRSample *, std::__1::allocator<CLVO2MaxInputCollector::HRSample *> >=^^{HRSample}^^{HRSample}^^{HRSample}{__compressed_pair<CLVO2MaxInputCollector::HRSample **, std::__1::allocator<CLVO2MaxInputCollector::HRSample *> >=^^{HRSample}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLVO2MaxInputCollector::HRSample> >=Q}}Bd{CLStepCountRecorderDb=^^?{auto_ptr<CLSqliteDatabase>=^{CLSqliteDatabase}}*{BasicMutex=^^?^{MutexInfo}}B{deque<CLStepCountEntry, std::__1::allocator<CLStepCountEntry> >={__split_buffer<CLStepCountEntry *, std::__1::allocator<CLStepCountEntry *> >=^^{CLStepCountEntry}^^{CLStepCountEntry}^^{CLStepCountEntry}{__compressed_pair<CLStepCountEntry **, std::__1::allocator<CLStepCountEntry *> >=^^{CLStepCountEntry}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLStepCountEntry> >=Q}}ifi{CLStepCountEntry=dddIddIIdddi^{__CFString}BB{CLAccelerometerPace=ddd}IIC}i@{NoDataProtectionPolicy=}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}BB@?@IIIdiiidBI}q[16C]B}{CLVO2MaxPreprocessor={CLVO2MaxFHREstimator={CLHRToFHRConverter={Bounds=ff}}{CLBodyMetrics=iffffffffif}ff}ffd{PairStats=iiiiiiiiiiiiiii}}{CLVO2MaxInputStore={CLVO2MaxInputCache=^^?{auto_ptr<CLSqliteDatabase>=^{CLSqliteDatabase}}*{BasicMutex=^^?^{MutexInfo}}B{deque<VO2MaxInput, std::__1::allocator<VO2MaxInput> >={__split_buffer<VO2MaxInput *, std::__1::allocator<VO2MaxInput *> >=^^{VO2MaxInput}^^{VO2MaxInput}^^{VO2MaxInput}{__compressed_pair<VO2MaxInput **, std::__1::allocator<VO2MaxInput *> >=^^{VO2MaxInput}}}Q{__compressed_pair<unsigned long, std::__1::allocator<VO2MaxInput> >=Q}}ifi{VO2MaxInput=Q[16C]fdffidBBiq}i@{NoDataProtectionPolicy=}}B[16C]{deque<VO2MaxInput, std::__1::allocator<VO2MaxInput> >={__split_buffer<VO2MaxInput *, std::__1::allocator<VO2MaxInput *> >=^^{VO2MaxInput}^^{VO2MaxInput}^^{VO2MaxInput}{__compressed_pair<VO2MaxInput **, std::__1::allocator<VO2MaxInput *> >=^^{VO2MaxInput}}}Q{__compressed_pair<unsigned long, std::__1::allocator<VO2MaxInput> >=Q}}}{CLVO2MaxOutputStore={CLVO2MaxOutputRecorderDb=^^?{auto_ptr<CLSqliteDatabase>=^{CLSqliteDatabase}}*{BasicMutex=^^?^{MutexInfo}}B{deque<VO2MaxOutput, std::__1::allocator<VO2MaxOutput> >={__split_buffer<VO2MaxOutput *, std::__1::allocator<VO2MaxOutput *> >=^^{VO2MaxOutput}^^{VO2MaxOutput}^^{VO2MaxOutput}{__compressed_pair<VO2MaxOutput **, std::__1::allocator<VO2MaxOutput *> >=^^{VO2MaxOutput}}}Q{__compressed_pair<unsigned long, std::__1::allocator<VO2MaxOutput> >=Q}}ifi{VO2MaxOutput=Q[16C]ddqddd}i@{NoDataProtectionPolicy=}}}{vector<HRMetPair, std::__1::allocator<HRMetPair> >=^{HRMetPair}^{HRMetPair}{__compressed_pair<HRMetPair *, std::__1::allocator<HRMetPair> >=^{HRMetPair}}}{CLBodyMetrics=iffffffffif}}{unique_ptr<CLMotionStateMediator_Type::Client, std::__1::default_delete<CLMotionStateMediator_Type::Client> >={__compressed_pair<CLMotionStateMediator_Type::Client *, std::__1::default_delete<CLMotionStateMediator_Type::Client> >=^{Client}}}{unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client> >={__compressed_pair<CLDataProtectionManager_Type::Client *, std::__1::default_delete<CLDataProtectionManager_Type::Client> >=^{Client}}}{unique_ptr<CLCatherineNotifier_Type::Client, std::__1::default_delete<CLCatherineNotifier_Type::Client> >={__compressed_pair<CLCatherineNotifier_Type::Client *, std::__1::default_delete<CLCatherineNotifier_Type::Client> >=^{Client}}}}>16
v28@0:8@"NSDictionary"16B24
^{CLNatalimetryNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{shared_ptr<CLNatalimetryRecorderDb>=^{CLNatalimetryRecorderDb}^{__shared_weak_count}}{CLActivityAggregator<CLNatalieData, CLActivityDB::NoDataProtectionPolicy>={vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}^{CLAggregationRule}{__compressed_pair<CLAggregationRule *, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}}}{shared_ptr<CLActivityRecorderDb<CLNatalieData, CLActivityDB::NoDataProtectionPolicy> >=^{CLActivityRecorderDb<CLNatalieData, CLActivityDB::NoDataProtectionPolicy>}^{__shared_weak_count}}BB}{shared_ptr<CLExerciseMinuteRecorderDb>=^{CLExerciseMinuteRecorderDb}^{__shared_weak_count}}{CLActivityAggregator<CLExerciseMinuteData, CLActivityDB::NoDataProtectionPolicy>={vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}^{CLAggregationRule}{__compressed_pair<CLAggregationRule *, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}}}{shared_ptr<CLActivityRecorderDb<CLExerciseMinuteData, CLActivityDB::NoDataProtectionPolicy> >=^{CLActivityRecorderDb<CLExerciseMinuteData, CLActivityDB::NoDataProtectionPolicy>}^{__shared_weak_count}}BB}{CLMotionDefaultsWrite<bool>=BB}@{unique_ptr<CLPersistentStore, std::__1::default_delete<CLPersistentStore> >={__compressed_pair<CLPersistentStore *, std::__1::default_delete<CLPersistentStore> >=^{CLPersistentStore}}}(NotificationData={CLNatalieData=i^{__CFString}diBBiddfqqddiiddB}B{CLBodyMetrics=iffffffffif}f{CLExerciseMinuteData=id^{__CFString}})BB@B{CLMotionDefaultsWrite<bool>=BB}ii^{Dispatcher}B{CLNatalieSourceFromNotifier<CLOdometerEntry>=^^?*d{deque<CLOdometerEntry, std::__1::allocator<CLOdometerEntry> >={__split_buffer<CLOdometerEntry *, std::__1::allocator<CLOdometerEntry *> >=^^{CLOdometerEntry}^^{CLOdometerEntry}^^{CLOdometerEntry}{__compressed_pair<CLOdometerEntry **, std::__1::allocator<CLOdometerEntry *> >=^^{CLOdometerEntry}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLOdometerEntry> >=Q}}dBddddBB@{unique_ptr<CLOdometerNotifier_Type::Client, std::__1::default_delete<CLOdometerNotifier_Type::Client> >={__compressed_pair<CLOdometerNotifier_Type::Client *, std::__1::default_delete<CLOdometerNotifier_Type::Client> >=^{Client}}}}{CLNatalieSourceFromNotifier<CLElevationChangeEntry>=^^?*d{deque<CLElevationChangeEntry, std::__1::allocator<CLElevationChangeEntry> >={__split_buffer<CLElevationChangeEntry *, std::__1::allocator<CLElevationChangeEntry *> >=^^{CLElevationChangeEntry}^^{CLElevationChangeEntry}^^{CLElevationChangeEntry}{__compressed_pair<CLElevationChangeEntry **, std::__1::allocator<CLElevationChangeEntry *> >=^^{CLElevationChangeEntry}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLElevationChangeEntry> >=Q}}dBdddd{CLElevationChangeEntry=ddIIiidi}dddfBdi{vector<float, std::__1::allocator<float> >=^f^f{__compressed_pair<float *, std::__1::allocator<float> >=^f}}{deque<float, std::__1::allocator<float> >={__split_buffer<float *, std::__1::allocator<float *> >=^^f^^f^^f{__compressed_pair<float **, std::__1::allocator<float *> >=^^f}}Q{__compressed_pair<unsigned long, std::__1::allocator<float> >=Q}}{deque<float, std::__1::allocator<float> >={__split_buffer<float *, std::__1::allocator<float *> >=^^f^^f^^f{__compressed_pair<float **, std::__1::allocator<float *> >=^^f}}Q{__compressed_pair<unsigned long, std::__1::allocator<float> >=Q}}{deque<float, std::__1::allocator<float> >={__split_buffer<float *, std::__1::allocator<float *> >=^^f^^f^^f{__compressed_pair<float **, std::__1::allocator<float *> >=^^f}}Q{__compressed_pair<unsigned long, std::__1::allocator<float> >=Q}}BB@{unique_ptr<CLOdometerNotifier_Type::Client, std::__1::default_delete<CLOdometerNotifier_Type::Client> >={__compressed_pair<CLOdometerNotifier_Type::Client *, std::__1::default_delete<CLOdometerNotifier_Type::Client> >=^{Client}}}}{CLNatalieSourceFromNotifier<CLCoarseElevationChangeEntry>=^^?*d{deque<CLCoarseElevationChangeEntry, std::__1::allocator<CLCoarseElevationChangeEntry> >={__split_buffer<CLCoarseElevationChangeEntry *, std::__1::allocator<CLCoarseElevationChangeEntry *> >=^^{CLCoarseElevationChangeEntry}^^{CLCoarseElevationChangeEntry}^^{CLCoarseElevationChangeEntry}{__compressed_pair<CLCoarseElevationChangeEntry **, std::__1::allocator<CLCoarseElevationChangeEntry *> >=^^{CLCoarseElevationChangeEntry}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLCoarseElevationChangeEntry> >=Q}}dBddddBBB@{unique_ptr<CLOdometerNotifier_Type::Client, std::__1::default_delete<CLOdometerNotifier_Type::Client> >={__compressed_pair<CLOdometerNotifier_Type::Client *, std::__1::default_delete<CLOdometerNotifier_Type::Client> >=^{Client}}}}{CLNatalieSourceFromNotifier<CLCatherineData>=^^?*d{deque<CLCatherineData, std::__1::allocator<CLCatherineData> >={__split_buffer<CLCatherineData *, std::__1::allocator<CLCatherineData *> >=^^{CLCatherineData}^^{CLCatherineData}^^{CLCatherineData}{__compressed_pair<CLCatherineData **, std::__1::allocator<CLCatherineData *> >=^^{CLCatherineData}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLCatherineData> >=Q}}dBddddBB@{unique_ptr<CLCatherineNotifier_Type::Client, std::__1::default_delete<CLCatherineNotifier_Type::Client> >={__compressed_pair<CLCatherineNotifier_Type::Client *, std::__1::default_delete<CLCatherineNotifier_Type::Client> >=^{Client}}}}{CLNatalieSourceFromNotifier<CLStepCountEntry>=^^?*d{deque<CLStepCountEntry, std::__1::allocator<CLStepCountEntry> >={__split_buffer<CLStepCountEntry *, std::__1::allocator<CLStepCountEntry *> >=^^{CLStepCountEntry}^^{CLStepCountEntry}^^{CLStepCountEntry}{__compressed_pair<CLStepCountEntry **, std::__1::allocator<CLStepCountEntry *> >=^^{CLStepCountEntry}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLStepCountEntry> >=Q}}dBddddBB@{unique_ptr<CLStepCountNotifier_Type::Client, std::__1::default_delete<CLStepCountNotifier_Type::Client> >={__compressed_pair<CLStepCountNotifier_Type::Client *, std::__1::default_delete<CLStepCountNotifier_Type::Client> >=^{Client}}}}{CLNatalieInput<CLMotionStateMediator_Type::MediatedMotionActivity>=^^?*d{deque<CLMotionStateMediator_Type::MediatedMotionActivity, std::__1::allocator<CLMotionStateMediator_Type::MediatedMotionActivity> >={__split_buffer<CLMotionStateMediator_Type::MediatedMotionActivity *, std::__1::allocator<CLMotionStateMediator_Type::MediatedMotionActivity *> >=^^{MediatedMotionActivity}^^{MediatedMotionActivity}^^{MediatedMotionActivity}{__compressed_pair<CLMotionStateMediator_Type::MediatedMotionActivity **, std::__1::allocator<CLMotionStateMediator_Type::MediatedMotionActivity *> >=^^{MediatedMotionActivity}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLMotionStateMediator_Type::MediatedMotionActivity> >=Q}}dBddddBB}{CLNatalieSourceFromNotifier<CLSwimEntry>=^^?*d{deque<CLSwimEntry, std::__1::allocator<CLSwimEntry> >={__split_buffer<CLSwimEntry *, std::__1::allocator<CLSwimEntry *> >=^^{CLSwimEntry}^^{CLSwimEntry}^^{CLSwimEntry}{__compressed_pair<CLSwimEntry **, std::__1::allocator<CLSwimEntry *> >=^^{CLSwimEntry}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLSwimEntry> >=Q}}dBddddBB@{unique_ptr<CLSwimNotifier_Type::Client, std::__1::default_delete<CLSwimNotifier_Type::Client> >={__compressed_pair<CLSwimNotifier_Type::Client *, std::__1::default_delete<CLSwimNotifier_Type::Client> >=^{Client}}}}{CLNatalieSourceFromNotifier<_CLFitnessMachineData>=^^?*d{deque<_CLFitnessMachineData, std::__1::allocator<_CLFitnessMachineData> >={__split_buffer<_CLFitnessMachineData *, std::__1::allocator<_CLFitnessMachineData *> >=^^{_CLFitnessMachineData}^^{_CLFitnessMachineData}^^{_CLFitnessMachineData}{__compressed_pair<_CLFitnessMachineData **, std::__1::allocator<_CLFitnessMachineData *> >=^^{_CLFitnessMachineData}}}Q{__compressed_pair<unsigned long, std::__1::allocator<_CLFitnessMachineData> >=Q}}dBddddBB@{unique_ptr<CLFitnessMachineNotifier_Type::Client, std::__1::default_delete<CLFitnessMachineNotifier_Type::Client> >={__compressed_pair<CLFitnessMachineNotifier_Type::Client *, std::__1::default_delete<CLFitnessMachineNotifier_Type::Client> >=^{Client}}}}{shared_ptr<CLNatalieModelInput>=^{CLNatalieModelInput}^{__shared_weak_count}}{CLCalorieController={CLNatalieModelChooser={shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}}{shared_ptr<CLNatalieModelInput>=^{CLNatalieModelInput}^{__shared_weak_count}}{deque<double, std::__1::allocator<double> >={__split_buffer<double *, std::__1::allocator<double *> >=^^d^^d^^d{__compressed_pair<double **, std::__1::allocator<double *> >=^^d}}Q{__compressed_pair<unsigned long, std::__1::allocator<double> >=Q}}{CLMedianFilter<double>=^^?I{deque<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long>, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> > >={__split_buffer<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> *, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> *> >=^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long>}^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long>}^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long>}{__compressed_pair<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> **, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> *> >=^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long>}}}Q{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> > >=Q}}{multiset<double, std::__1::less<double>, std::__1::allocator<double> >={__tree<double, std::__1::less<double>, std::__1::allocator<double> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<double, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<double> >=Q}}}}d{deque<std::__1::pair<double, float>, std::__1::allocator<std::__1::pair<double, float> > >={__split_buffer<std::__1::pair<double, float> *, std::__1::allocator<std::__1::pair<double, float> *> >=^^{pair<double, float>}^^{pair<double, float>}^^{pair<double, float>}{__compressed_pair<std::__1::pair<double, float> **, std::__1::allocator<std::__1::pair<double, float> *> >=^^{pair<double, float>}}}Q{__compressed_pair<unsigned long, std::__1::allocator<std::__1::pair<double, float> > >=Q}}{deque<std::__1::pair<double, float>, std::__1::allocator<std::__1::pair<double, float> > >={__split_buffer<std::__1::pair<double, float> *, std::__1::allocator<std::__1::pair<double, float> *> >=^^{pair<double, float>}^^{pair<double, float>}^^{pair<double, float>}{__compressed_pair<std::__1::pair<double, float> **, std::__1::allocator<std::__1::pair<double, float> *> >=^^{pair<double, float>}}}Q{__compressed_pair<unsigned long, std::__1::allocator<std::__1::pair<double, float> > >=Q}}dB{CLExerciseMinuteEstimator=BB{CLCoarseElevationChangeEntry=dIi}dddd{deque<CLExerciseMinuteEstimator::IntensityEpoch, std::__1::allocator<CLExerciseMinuteEstimator::IntensityEpoch> >={__split_buffer<CLExerciseMinuteEstimator::IntensityEpoch *, std::__1::allocator<CLExerciseMinuteEstimator::IntensityEpoch *> >=^^{IntensityEpoch}^^{IntensityEpoch}^^{IntensityEpoch}{__compressed_pair<CLExerciseMinuteEstimator::IntensityEpoch **, std::__1::allocator<CLExerciseMinuteEstimator::IntensityEpoch *> >=^^{IntensityEpoch}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLExerciseMinuteEstimator::IntensityEpoch> >=Q}}dBdddddd{deque<CLExerciseMinuteEstimator::CLPushEpoch, std::__1::allocator<CLExerciseMinuteEstimator::CLPushEpoch> >={__split_buffer<CLExerciseMinuteEstimator::CLPushEpoch *, std::__1::allocator<CLExerciseMinuteEstimator::CLPushEpoch *> >=^^{CLPushEpoch}^^{CLPushEpoch}^^{CLPushEpoch}{__compressed_pair<CLExerciseMinuteEstimator::CLPushEpoch **, std::__1::allocator<CLExerciseMinuteEstimator::CLPushEpoch *> >=^^{CLPushEpoch}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLExerciseMinuteEstimator::CLPushEpoch> >=Q}}{deque<CLExerciseMinuteEstimator::CLPushEpoch, std::__1::allocator<CLExerciseMinuteEstimator::CLPushEpoch> >={__split_buffer<CLExerciseMinuteEstimator::CLPushEpoch *, std::__1::allocator<CLExerciseMinuteEstimator::CLPushEpoch *> >=^^{CLPushEpoch}^^{CLPushEpoch}^^{CLPushEpoch}{__compressed_pair<CLExerciseMinuteEstimator::CLPushEpoch **, std::__1::allocator<CLExerciseMinuteEstimator::CLPushEpoch *> >=^^{CLPushEpoch}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLExerciseMinuteEstimator::CLPushEpoch> >=Q}}}{CLMotionDefaultsWrite<bool>=BB}}id{CLCatherineData=iiddBdddi}dB{CLCaloriePalEstimator=}{CLVO2MaxEstimator=q{CLVO2MaxInputCollector={deque<CLVO2MaxInputCollector::HRSample, std::__1::allocator<CLVO2MaxInputCollector::HRSample> >={__split_buffer<CLVO2MaxInputCollector::HRSample *, std::__1::allocator<CLVO2MaxInputCollector::HRSample *> >=^^{HRSample}^^{HRSample}^^{HRSample}{__compressed_pair<CLVO2MaxInputCollector::HRSample **, std::__1::allocator<CLVO2MaxInputCollector::HRSample *> >=^^{HRSample}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLVO2MaxInputCollector::HRSample> >=Q}}Bd{CLStepCountRecorderDb=^^?{auto_ptr<CLSqliteDatabase>=^{CLSqliteDatabase}}*{BasicMutex=^^?^{MutexInfo}}B{deque<CLStepCountEntry, std::__1::allocator<CLStepCountEntry> >={__split_buffer<CLStepCountEntry *, std::__1::allocator<CLStepCountEntry *> >=^^{CLStepCountEntry}^^{CLStepCountEntry}^^{CLStepCountEntry}{__compressed_pair<CLStepCountEntry **, std::__1::allocator<CLStepCountEntry *> >=^^{CLStepCountEntry}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLStepCountEntry> >=Q}}ifi{CLStepCountEntry=dddIddIIdddi^{__CFString}BB{CLAccelerometerPace=ddd}IIC}i@{NoDataProtectionPolicy=}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}BB@?@IIIdiiidBI}q[16C]B}{CLVO2MaxPreprocessor={CLVO2MaxFHREstimator={CLHRToFHRConverter={Bounds=ff}}{CLBodyMetrics=iffffffffif}ff}ffd{PairStats=iiiiiiiiiiiiiii}}{CLVO2MaxInputStore={CLVO2MaxInputCache=^^?{auto_ptr<CLSqliteDatabase>=^{CLSqliteDatabase}}*{BasicMutex=^^?^{MutexInfo}}B{deque<VO2MaxInput, std::__1::allocator<VO2MaxInput> >={__split_buffer<VO2MaxInput *, std::__1::allocator<VO2MaxInput *> >=^^{VO2MaxInput}^^{VO2MaxInput}^^{VO2MaxInput}{__compressed_pair<VO2MaxInput **, std::__1::allocator<VO2MaxInput *> >=^^{VO2MaxInput}}}Q{__compressed_pair<unsigned long, std::__1::allocator<VO2MaxInput> >=Q}}ifi{VO2MaxInput=Q[16C]fdffidBBiq}i@{NoDataProtectionPolicy=}}B[16C]{deque<VO2MaxInput, std::__1::allocator<VO2MaxInput> >={__split_buffer<VO2MaxInput *, std::__1::allocator<VO2MaxInput *> >=^^{VO2MaxInput}^^{VO2MaxInput}^^{VO2MaxInput}{__compressed_pair<VO2MaxInput **, std::__1::allocator<VO2MaxInput *> >=^^{VO2MaxInput}}}Q{__compressed_pair<unsigned long, std::__1::allocator<VO2MaxInput> >=Q}}}{CLVO2MaxOutputStore={CLVO2MaxOutputRecorderDb=^^?{auto_ptr<CLSqliteDatabase>=^{CLSqliteDatabase}}*{BasicMutex=^^?^{MutexInfo}}B{deque<VO2MaxOutput, std::__1::allocator<VO2MaxOutput> >={__split_buffer<VO2MaxOutput *, std::__1::allocator<VO2MaxOutput *> >=^^{VO2MaxOutput}^^{VO2MaxOutput}^^{VO2MaxOutput}{__compressed_pair<VO2MaxOutput **, std::__1::allocator<VO2MaxOutput *> >=^^{VO2MaxOutput}}}Q{__compressed_pair<unsigned long, std::__1::allocator<VO2MaxOutput> >=Q}}ifi{VO2MaxOutput=Q[16C]ddqddd}i@{NoDataProtectionPolicy=}}}{vector<HRMetPair, std::__1::allocator<HRMetPair> >=^{HRMetPair}^{HRMetPair}{__compressed_pair<HRMetPair *, std::__1::allocator<HRMetPair> >=^{HRMetPair}}}{CLBodyMetrics=iffffffffif}}{unique_ptr<CLMotionStateMediator_Type::Client, std::__1::default_delete<CLMotionStateMediator_Type::Client> >={__compressed_pair<CLMotionStateMediator_Type::Client *, std::__1::default_delete<CLMotionStateMediator_Type::Client> >=^{Client}}}{unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client> >={__compressed_pair<CLDataProtectionManager_Type::Client *, std::__1::default_delete<CLDataProtectionManager_Type::Client> >=^{Client}}}{unique_ptr<CLCatherineNotifier_Type::Client, std::__1::default_delete<CLCatherineNotifier_Type::Client> >={__compressed_pair<CLCatherineNotifier_Type::Client *, std::__1::default_delete<CLCatherineNotifier_Type::Client> >=^{Client}}}}16@0:8
v24@0:8@?<v@?^{CLSensorRecorderNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{CLSensorRecorderDb=^^?{auto_ptr<CLSqliteDatabase>=^{CLSqliteDatabase}}*{BasicMutex=^^?^{MutexInfo}}B{deque<CLSensorRecorderDataPacket, std::__1::allocator<CLSensorRecorderDataPacket> >={__split_buffer<CLSensorRecorderDataPacket *, std::__1::allocator<CLSensorRecorderDataPacket *> >=^^{CLSensorRecorderDataPacket}^^{CLSensorRecorderDataPacket}^^{CLSensorRecorderDataPacket}{__compressed_pair<CLSensorRecorderDataPacket **, std::__1::allocator<CLSensorRecorderDataPacket *> >=^^{CLSensorRecorderDataPacket}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLSensorRecorderDataPacket> >=Q}}ifi{CLSensorRecorderDataPacket=dQI{shared_ptr<unsigned char>=*^{__shared_weak_count}}}i@{NoDataProtectionPolicy=}i{list<CLSensorRecorderDataPacket, std::__1::allocator<CLSensorRecorderDataPacket> >={__list_node_base<CLSensorRecorderDataPacket, void *>=^{__list_node_base<CLSensorRecorderDataPacket, void *>}^{__list_node_base<CLSensorRecorderDataPacket, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLSensorRecorderDataPacket, void *> > >=Q}}Qi{__list_iterator<CLSensorRecorderDataPacket, void *>=^{__list_node_base<CLSensorRecorderDataPacket, void *>}}i{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}{CLSensorRecorderDb=^^?{auto_ptr<CLSqliteDatabase>=^{CLSqliteDatabase}}*{BasicMutex=^^?^{MutexInfo}}B{deque<CLSensorRecorderDataPacket, std::__1::allocator<CLSensorRecorderDataPacket> >={__split_buffer<CLSensorRecorderDataPacket *, std::__1::allocator<CLSensorRecorderDataPacket *> >=^^{CLSensorRecorderDataPacket}^^{CLSensorRecorderDataPacket}^^{CLSensorRecorderDataPacket}{__compressed_pair<CLSensorRecorderDataPacket **, std::__1::allocator<CLSensorRecorderDataPacket *> >=^^{CLSensorRecorderDataPacket}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLSensorRecorderDataPacket> >=Q}}ifi{CLSensorRecorderDataPacket=dQI{shared_ptr<unsigned char>=*^{__shared_weak_count}}}i@{NoDataProtectionPolicy=}i{list<CLSensorRecorderDataPacket, std::__1::allocator<CLSensorRecorderDataPacket> >={__list_node_base<CLSensorRecorderDataPacket, void *>=^{__list_node_base<CLSensorRecorderDataPacket, void *>}^{__list_node_base<CLSensorRecorderDataPacket, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLSensorRecorderDataPacket, void *> > >=Q}}Qi{__list_iterator<CLSensorRecorderDataPacket, void *>=^{__list_node_base<CLSensorRecorderDataPacket, void *>}}i{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}@@{vector<std::__1::vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> >, std::__1::allocator<std::__1::vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> > > >=^{vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> >}^{vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> >}{__compressed_pair<std::__1::vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> > *, std::__1::allocator<std::__1::vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> > > >=^{vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> >}}}ddddddiIiIBBB{unique_ptr<CLFitnessTrackingNotifier_Type::Client, std::__1::default_delete<CLFitnessTrackingNotifier_Type::Client> >={__compressed_pair<CLFitnessTrackingNotifier_Type::Client *, std::__1::default_delete<CLFitnessTrackingNotifier_Type::Client> >=^{Client}}}B{unique_ptr<CLDarwinNotifier_Type::Client, std::__1::default_delete<CLDarwinNotifier_Type::Client> >={__compressed_pair<CLDarwinNotifier_Type::Client *, std::__1::default_delete<CLDarwinNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLMotionState_Type::Client, std::__1::default_delete<CLMotionState_Type::Client> >={__compressed_pair<CLMotionState_Type::Client *, std::__1::default_delete<CLMotionState_Type::Client> >=^{Client}}}^{CLPersistentTimer}}>16
v32@0:8@?<v@?^{CLSensorRecorderNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{CLSensorRecorderDb=^^?{auto_ptr<CLSqliteDatabase>=^{CLSqliteDatabase}}*{BasicMutex=^^?^{MutexInfo}}B{deque<CLSensorRecorderDataPacket, std::__1::allocator<CLSensorRecorderDataPacket> >={__split_buffer<CLSensorRecorderDataPacket *, std::__1::allocator<CLSensorRecorderDataPacket *> >=^^{CLSensorRecorderDataPacket}^^{CLSensorRecorderDataPacket}^^{CLSensorRecorderDataPacket}{__compressed_pair<CLSensorRecorderDataPacket **, std::__1::allocator<CLSensorRecorderDataPacket *> >=^^{CLSensorRecorderDataPacket}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLSensorRecorderDataPacket> >=Q}}ifi{CLSensorRecorderDataPacket=dQI{shared_ptr<unsigned char>=*^{__shared_weak_count}}}i@{NoDataProtectionPolicy=}i{list<CLSensorRecorderDataPacket, std::__1::allocator<CLSensorRecorderDataPacket> >={__list_node_base<CLSensorRecorderDataPacket, void *>=^{__list_node_base<CLSensorRecorderDataPacket, void *>}^{__list_node_base<CLSensorRecorderDataPacket, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLSensorRecorderDataPacket, void *> > >=Q}}Qi{__list_iterator<CLSensorRecorderDataPacket, void *>=^{__list_node_base<CLSensorRecorderDataPacket, void *>}}i{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}{CLSensorRecorderDb=^^?{auto_ptr<CLSqliteDatabase>=^{CLSqliteDatabase}}*{BasicMutex=^^?^{MutexInfo}}B{deque<CLSensorRecorderDataPacket, std::__1::allocator<CLSensorRecorderDataPacket> >={__split_buffer<CLSensorRecorderDataPacket *, std::__1::allocator<CLSensorRecorderDataPacket *> >=^^{CLSensorRecorderDataPacket}^^{CLSensorRecorderDataPacket}^^{CLSensorRecorderDataPacket}{__compressed_pair<CLSensorRecorderDataPacket **, std::__1::allocator<CLSensorRecorderDataPacket *> >=^^{CLSensorRecorderDataPacket}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLSensorRecorderDataPacket> >=Q}}ifi{CLSensorRecorderDataPacket=dQI{shared_ptr<unsigned char>=*^{__shared_weak_count}}}i@{NoDataProtectionPolicy=}i{list<CLSensorRecorderDataPacket, std::__1::allocator<CLSensorRecorderDataPacket> >={__list_node_base<CLSensorRecorderDataPacket, void *>=^{__list_node_base<CLSensorRecorderDataPacket, void *>}^{__list_node_base<CLSensorRecorderDataPacket, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLSensorRecorderDataPacket, void *> > >=Q}}Qi{__list_iterator<CLSensorRecorderDataPacket, void *>=^{__list_node_base<CLSensorRecorderDataPacket, void *>}}i{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}@@{vector<std::__1::vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> >, std::__1::allocator<std::__1::vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> > > >=^{vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> >}^{vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> >}{__compressed_pair<std::__1::vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> > *, std::__1::allocator<std::__1::vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> > > >=^{vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> >}}}ddddddiIiIBBB{unique_ptr<CLFitnessTrackingNotifier_Type::Client, std::__1::default_delete<CLFitnessTrackingNotifier_Type::Client> >={__compressed_pair<CLFitnessTrackingNotifier_Type::Client *, std::__1::default_delete<CLFitnessTrackingNotifier_Type::Client> >=^{Client}}}B{unique_ptr<CLDarwinNotifier_Type::Client, std::__1::default_delete<CLDarwinNotifier_Type::Client> >={__compressed_pair<CLDarwinNotifier_Type::Client *, std::__1::default_delete<CLDarwinNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLMotionState_Type::Client, std::__1::default_delete<CLMotionState_Type::Client> >={__compressed_pair<CLMotionState_Type::Client *, std::__1::default_delete<CLMotionState_Type::Client> >=^{Client}}}^{CLPersistentTimer}}>16@?<v@?>24
B24@0:8@?<v@?^{CLSensorRecorderNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{CLSensorRecorderDb=^^?{auto_ptr<CLSqliteDatabase>=^{CLSqliteDatabase}}*{BasicMutex=^^?^{MutexInfo}}B{deque<CLSensorRecorderDataPacket, std::__1::allocator<CLSensorRecorderDataPacket> >={__split_buffer<CLSensorRecorderDataPacket *, std::__1::allocator<CLSensorRecorderDataPacket *> >=^^{CLSensorRecorderDataPacket}^^{CLSensorRecorderDataPacket}^^{CLSensorRecorderDataPacket}{__compressed_pair<CLSensorRecorderDataPacket **, std::__1::allocator<CLSensorRecorderDataPacket *> >=^^{CLSensorRecorderDataPacket}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLSensorRecorderDataPacket> >=Q}}ifi{CLSensorRecorderDataPacket=dQI{shared_ptr<unsigned char>=*^{__shared_weak_count}}}i@{NoDataProtectionPolicy=}i{list<CLSensorRecorderDataPacket, std::__1::allocator<CLSensorRecorderDataPacket> >={__list_node_base<CLSensorRecorderDataPacket, void *>=^{__list_node_base<CLSensorRecorderDataPacket, void *>}^{__list_node_base<CLSensorRecorderDataPacket, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLSensorRecorderDataPacket, void *> > >=Q}}Qi{__list_iterator<CLSensorRecorderDataPacket, void *>=^{__list_node_base<CLSensorRecorderDataPacket, void *>}}i{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}{CLSensorRecorderDb=^^?{auto_ptr<CLSqliteDatabase>=^{CLSqliteDatabase}}*{BasicMutex=^^?^{MutexInfo}}B{deque<CLSensorRecorderDataPacket, std::__1::allocator<CLSensorRecorderDataPacket> >={__split_buffer<CLSensorRecorderDataPacket *, std::__1::allocator<CLSensorRecorderDataPacket *> >=^^{CLSensorRecorderDataPacket}^^{CLSensorRecorderDataPacket}^^{CLSensorRecorderDataPacket}{__compressed_pair<CLSensorRecorderDataPacket **, std::__1::allocator<CLSensorRecorderDataPacket *> >=^^{CLSensorRecorderDataPacket}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLSensorRecorderDataPacket> >=Q}}ifi{CLSensorRecorderDataPacket=dQI{shared_ptr<unsigned char>=*^{__shared_weak_count}}}i@{NoDataProtectionPolicy=}i{list<CLSensorRecorderDataPacket, std::__1::allocator<CLSensorRecorderDataPacket> >={__list_node_base<CLSensorRecorderDataPacket, void *>=^{__list_node_base<CLSensorRecorderDataPacket, void *>}^{__list_node_base<CLSensorRecorderDataPacket, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLSensorRecorderDataPacket, void *> > >=Q}}Qi{__list_iterator<CLSensorRecorderDataPacket, void *>=^{__list_node_base<CLSensorRecorderDataPacket, void *>}}i{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}@@{vector<std::__1::vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> >, std::__1::allocator<std::__1::vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> > > >=^{vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> >}^{vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> >}{__compressed_pair<std::__1::vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> > *, std::__1::allocator<std::__1::vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> > > >=^{vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> >}}}ddddddiIiIBBB{unique_ptr<CLFitnessTrackingNotifier_Type::Client, std::__1::default_delete<CLFitnessTrackingNotifier_Type::Client> >={__compressed_pair<CLFitnessTrackingNotifier_Type::Client *, std::__1::default_delete<CLFitnessTrackingNotifier_Type::Client> >=^{Client}}}B{unique_ptr<CLDarwinNotifier_Type::Client, std::__1::default_delete<CLDarwinNotifier_Type::Client> >={__compressed_pair<CLDarwinNotifier_Type::Client *, std::__1::default_delete<CLDarwinNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLMotionState_Type::Client, std::__1::default_delete<CLMotionState_Type::Client> >={__compressed_pair<CLMotionState_Type::Client *, std::__1::default_delete<CLMotionState_Type::Client> >=^{Client}}}^{CLPersistentTimer}}>16
^{CLSensorRecorderNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{CLSensorRecorderDb=^^?{auto_ptr<CLSqliteDatabase>=^{CLSqliteDatabase}}*{BasicMutex=^^?^{MutexInfo}}B{deque<CLSensorRecorderDataPacket, std::__1::allocator<CLSensorRecorderDataPacket> >={__split_buffer<CLSensorRecorderDataPacket *, std::__1::allocator<CLSensorRecorderDataPacket *> >=^^{CLSensorRecorderDataPacket}^^{CLSensorRecorderDataPacket}^^{CLSensorRecorderDataPacket}{__compressed_pair<CLSensorRecorderDataPacket **, std::__1::allocator<CLSensorRecorderDataPacket *> >=^^{CLSensorRecorderDataPacket}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLSensorRecorderDataPacket> >=Q}}ifi{CLSensorRecorderDataPacket=dQI{shared_ptr<unsigned char>=*^{__shared_weak_count}}}i@{NoDataProtectionPolicy=}i{list<CLSensorRecorderDataPacket, std::__1::allocator<CLSensorRecorderDataPacket> >={__list_node_base<CLSensorRecorderDataPacket, void *>=^{__list_node_base<CLSensorRecorderDataPacket, void *>}^{__list_node_base<CLSensorRecorderDataPacket, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLSensorRecorderDataPacket, void *> > >=Q}}Qi{__list_iterator<CLSensorRecorderDataPacket, void *>=^{__list_node_base<CLSensorRecorderDataPacket, void *>}}i{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}{CLSensorRecorderDb=^^?{auto_ptr<CLSqliteDatabase>=^{CLSqliteDatabase}}*{BasicMutex=^^?^{MutexInfo}}B{deque<CLSensorRecorderDataPacket, std::__1::allocator<CLSensorRecorderDataPacket> >={__split_buffer<CLSensorRecorderDataPacket *, std::__1::allocator<CLSensorRecorderDataPacket *> >=^^{CLSensorRecorderDataPacket}^^{CLSensorRecorderDataPacket}^^{CLSensorRecorderDataPacket}{__compressed_pair<CLSensorRecorderDataPacket **, std::__1::allocator<CLSensorRecorderDataPacket *> >=^^{CLSensorRecorderDataPacket}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLSensorRecorderDataPacket> >=Q}}ifi{CLSensorRecorderDataPacket=dQI{shared_ptr<unsigned char>=*^{__shared_weak_count}}}i@{NoDataProtectionPolicy=}i{list<CLSensorRecorderDataPacket, std::__1::allocator<CLSensorRecorderDataPacket> >={__list_node_base<CLSensorRecorderDataPacket, void *>=^{__list_node_base<CLSensorRecorderDataPacket, void *>}^{__list_node_base<CLSensorRecorderDataPacket, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLSensorRecorderDataPacket, void *> > >=Q}}Qi{__list_iterator<CLSensorRecorderDataPacket, void *>=^{__list_node_base<CLSensorRecorderDataPacket, void *>}}i{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}@@{vector<std::__1::vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> >, std::__1::allocator<std::__1::vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> > > >=^{vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> >}^{vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> >}{__compressed_pair<std::__1::vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> > *, std::__1::allocator<std::__1::vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> > > >=^{vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> >}}}ddddddiIiIBBB{unique_ptr<CLFitnessTrackingNotifier_Type::Client, std::__1::default_delete<CLFitnessTrackingNotifier_Type::Client> >={__compressed_pair<CLFitnessTrackingNotifier_Type::Client *, std::__1::default_delete<CLFitnessTrackingNotifier_Type::Client> >=^{Client}}}B{unique_ptr<CLDarwinNotifier_Type::Client, std::__1::default_delete<CLDarwinNotifier_Type::Client> >={__compressed_pair<CLDarwinNotifier_Type::Client *, std::__1::default_delete<CLDarwinNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLMotionState_Type::Client, std::__1::default_delete<CLMotionState_Type::Client> >={__compressed_pair<CLMotionState_Type::Client *, std::__1::default_delete<CLMotionState_Type::Client> >=^{Client}}}^{CLPersistentTimer}}16@0:8
v24@0:8@?<v@?^{CLBTLEBeaconProviderMock=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBB{list<CLBTLEBeaconProvider_Type::ProximityScanEvent, std::__1::allocator<CLBTLEBeaconProvider_Type::ProximityScanEvent> >={__list_node_base<CLBTLEBeaconProvider_Type::ProximityScanEvent, void *>=^{__list_node_base<CLBTLEBeaconProvider_Type::ProximityScanEvent, void *>}^{__list_node_base<CLBTLEBeaconProvider_Type::ProximityScanEvent, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLBTLEBeaconProvider_Type::ProximityScanEvent, void *> > >=Q}}{list<CLBTLEBeaconProvider_Type::ProximityZoneEvent, std::__1::allocator<CLBTLEBeaconProvider_Type::ProximityZoneEvent> >={__list_node_base<CLBTLEBeaconProvider_Type::ProximityZoneEvent, void *>=^{__list_node_base<CLBTLEBeaconProvider_Type::ProximityZoneEvent, void *>}^{__list_node_base<CLBTLEBeaconProvider_Type::ProximityZoneEvent, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLBTLEBeaconProvider_Type::ProximityZoneEvent, void *> > >=Q}}{list<CLBTLEBeaconProviderMock::ScanRequest, std::__1::allocator<CLBTLEBeaconProviderMock::ScanRequest> >={__list_node_base<CLBTLEBeaconProviderMock::ScanRequest, void *>=^{__list_node_base<CLBTLEBeaconProviderMock::ScanRequest, void *>}^{__list_node_base<CLBTLEBeaconProviderMock::ScanRequest, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLBTLEBeaconProviderMock::ScanRequest, void *> > >=Q}}@{map<CLBTLEBeaconProvider_Type::ProximityZone, CLBTLEBeaconProviderMock::ProximityZoneRegistration, std::__1::less<CLBTLEBeaconProvider_Type::ProximityZone>, std::__1::allocator<std::__1::pair<const CLBTLEBeaconProvider_Type::ProximityZone, CLBTLEBeaconProviderMock::ProximityZoneRegistration> > >={__tree<std::__1::__value_type<CLBTLEBeaconProvider_Type::ProximityZone, CLBTLEBeaconProviderMock::ProximityZoneRegistration>, std::__1::__map_value_compare<CLBTLEBeaconProvider_Type::ProximityZone, std::__1::__value_type<CLBTLEBeaconProvider_Type::ProximityZone, CLBTLEBeaconProviderMock::ProximityZoneRegistration>, std::__1::less<CLBTLEBeaconProvider_Type::ProximityZone>, true>, std::__1::allocator<std::__1::__value_type<CLBTLEBeaconProvider_Type::ProximityZone, CLBTLEBeaconProviderMock::ProximityZoneRegistration> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLBTLEBeaconProvider_Type::ProximityZone, CLBTLEBeaconProviderMock::ProximityZoneRegistration>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLBTLEBeaconProvider_Type::ProximityZone, std::__1::__value_type<CLBTLEBeaconProvider_Type::ProximityZone, CLBTLEBeaconProviderMock::ProximityZoneRegistration>, std::__1::less<CLBTLEBeaconProvider_Type::ProximityZone>, true> >=Q}}}^{__CFRunLoopSource}}>16
v32@0:8@?<v@?^{CLBTLEBeaconProviderMock=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBB{list<CLBTLEBeaconProvider_Type::ProximityScanEvent, std::__1::allocator<CLBTLEBeaconProvider_Type::ProximityScanEvent> >={__list_node_base<CLBTLEBeaconProvider_Type::ProximityScanEvent, void *>=^{__list_node_base<CLBTLEBeaconProvider_Type::ProximityScanEvent, void *>}^{__list_node_base<CLBTLEBeaconProvider_Type::ProximityScanEvent, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLBTLEBeaconProvider_Type::ProximityScanEvent, void *> > >=Q}}{list<CLBTLEBeaconProvider_Type::ProximityZoneEvent, std::__1::allocator<CLBTLEBeaconProvider_Type::ProximityZoneEvent> >={__list_node_base<CLBTLEBeaconProvider_Type::ProximityZoneEvent, void *>=^{__list_node_base<CLBTLEBeaconProvider_Type::ProximityZoneEvent, void *>}^{__list_node_base<CLBTLEBeaconProvider_Type::ProximityZoneEvent, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLBTLEBeaconProvider_Type::ProximityZoneEvent, void *> > >=Q}}{list<CLBTLEBeaconProviderMock::ScanRequest, std::__1::allocator<CLBTLEBeaconProviderMock::ScanRequest> >={__list_node_base<CLBTLEBeaconProviderMock::ScanRequest, void *>=^{__list_node_base<CLBTLEBeaconProviderMock::ScanRequest, void *>}^{__list_node_base<CLBTLEBeaconProviderMock::ScanRequest, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLBTLEBeaconProviderMock::ScanRequest, void *> > >=Q}}@{map<CLBTLEBeaconProvider_Type::ProximityZone, CLBTLEBeaconProviderMock::ProximityZoneRegistration, std::__1::less<CLBTLEBeaconProvider_Type::ProximityZone>, std::__1::allocator<std::__1::pair<const CLBTLEBeaconProvider_Type::ProximityZone, CLBTLEBeaconProviderMock::ProximityZoneRegistration> > >={__tree<std::__1::__value_type<CLBTLEBeaconProvider_Type::ProximityZone, CLBTLEBeaconProviderMock::ProximityZoneRegistration>, std::__1::__map_value_compare<CLBTLEBeaconProvider_Type::ProximityZone, std::__1::__value_type<CLBTLEBeaconProvider_Type::ProximityZone, CLBTLEBeaconProviderMock::ProximityZoneRegistration>, std::__1::less<CLBTLEBeaconProvider_Type::ProximityZone>, true>, std::__1::allocator<std::__1::__value_type<CLBTLEBeaconProvider_Type::ProximityZone, CLBTLEBeaconProviderMock::ProximityZoneRegistration> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLBTLEBeaconProvider_Type::ProximityZone, CLBTLEBeaconProviderMock::ProximityZoneRegistration>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLBTLEBeaconProvider_Type::ProximityZone, std::__1::__value_type<CLBTLEBeaconProvider_Type::ProximityZone, CLBTLEBeaconProviderMock::ProximityZoneRegistration>, std::__1::less<CLBTLEBeaconProvider_Type::ProximityZone>, true> >=Q}}}^{__CFRunLoopSource}}>16@?<v@?>24
B24@0:8@?<v@?^{CLBTLEBeaconProviderMock=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBB{list<CLBTLEBeaconProvider_Type::ProximityScanEvent, std::__1::allocator<CLBTLEBeaconProvider_Type::ProximityScanEvent> >={__list_node_base<CLBTLEBeaconProvider_Type::ProximityScanEvent, void *>=^{__list_node_base<CLBTLEBeaconProvider_Type::ProximityScanEvent, void *>}^{__list_node_base<CLBTLEBeaconProvider_Type::ProximityScanEvent, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLBTLEBeaconProvider_Type::ProximityScanEvent, void *> > >=Q}}{list<CLBTLEBeaconProvider_Type::ProximityZoneEvent, std::__1::allocator<CLBTLEBeaconProvider_Type::ProximityZoneEvent> >={__list_node_base<CLBTLEBeaconProvider_Type::ProximityZoneEvent, void *>=^{__list_node_base<CLBTLEBeaconProvider_Type::ProximityZoneEvent, void *>}^{__list_node_base<CLBTLEBeaconProvider_Type::ProximityZoneEvent, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLBTLEBeaconProvider_Type::ProximityZoneEvent, void *> > >=Q}}{list<CLBTLEBeaconProviderMock::ScanRequest, std::__1::allocator<CLBTLEBeaconProviderMock::ScanRequest> >={__list_node_base<CLBTLEBeaconProviderMock::ScanRequest, void *>=^{__list_node_base<CLBTLEBeaconProviderMock::ScanRequest, void *>}^{__list_node_base<CLBTLEBeaconProviderMock::ScanRequest, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLBTLEBeaconProviderMock::ScanRequest, void *> > >=Q}}@{map<CLBTLEBeaconProvider_Type::ProximityZone, CLBTLEBeaconProviderMock::ProximityZoneRegistration, std::__1::less<CLBTLEBeaconProvider_Type::ProximityZone>, std::__1::allocator<std::__1::pair<const CLBTLEBeaconProvider_Type::ProximityZone, CLBTLEBeaconProviderMock::ProximityZoneRegistration> > >={__tree<std::__1::__value_type<CLBTLEBeaconProvider_Type::ProximityZone, CLBTLEBeaconProviderMock::ProximityZoneRegistration>, std::__1::__map_value_compare<CLBTLEBeaconProvider_Type::ProximityZone, std::__1::__value_type<CLBTLEBeaconProvider_Type::ProximityZone, CLBTLEBeaconProviderMock::ProximityZoneRegistration>, std::__1::less<CLBTLEBeaconProvider_Type::ProximityZone>, true>, std::__1::allocator<std::__1::__value_type<CLBTLEBeaconProvider_Type::ProximityZone, CLBTLEBeaconProviderMock::ProximityZoneRegistration> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLBTLEBeaconProvider_Type::ProximityZone, CLBTLEBeaconProviderMock::ProximityZoneRegistration>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLBTLEBeaconProvider_Type::ProximityZone, std::__1::__value_type<CLBTLEBeaconProvider_Type::ProximityZone, CLBTLEBeaconProviderMock::ProximityZoneRegistration>, std::__1::less<CLBTLEBeaconProvider_Type::ProximityZone>, true> >=Q}}}^{__CFRunLoopSource}}>16
v24@0:8@?<{ProximityZoneEvent={ProximityZone={Region=^^?{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}SSi}}ii}@?>16
v24@0:8@?<{ProximityScanEvent={list<CLBTLEBeaconProvider_Type::ProximityDevice, std::__1::allocator<CLBTLEBeaconProvider_Type::ProximityDevice> >={__list_node_base<CLBTLEBeaconProvider_Type::ProximityDevice, void *>=^{__list_node_base<CLBTLEBeaconProvider_Type::ProximityDevice, void *>}^{__list_node_base<CLBTLEBeaconProvider_Type::ProximityDevice, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLBTLEBeaconProvider_Type::ProximityDevice, void *> > >=Q}}}@?>16
^{CLBTLEBeaconProviderMock=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBB{list<CLBTLEBeaconProvider_Type::ProximityScanEvent, std::__1::allocator<CLBTLEBeaconProvider_Type::ProximityScanEvent> >={__list_node_base<CLBTLEBeaconProvider_Type::ProximityScanEvent, void *>=^{__list_node_base<CLBTLEBeaconProvider_Type::ProximityScanEvent, void *>}^{__list_node_base<CLBTLEBeaconProvider_Type::ProximityScanEvent, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLBTLEBeaconProvider_Type::ProximityScanEvent, void *> > >=Q}}{list<CLBTLEBeaconProvider_Type::ProximityZoneEvent, std::__1::allocator<CLBTLEBeaconProvider_Type::ProximityZoneEvent> >={__list_node_base<CLBTLEBeaconProvider_Type::ProximityZoneEvent, void *>=^{__list_node_base<CLBTLEBeaconProvider_Type::ProximityZoneEvent, void *>}^{__list_node_base<CLBTLEBeaconProvider_Type::ProximityZoneEvent, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLBTLEBeaconProvider_Type::ProximityZoneEvent, void *> > >=Q}}{list<CLBTLEBeaconProviderMock::ScanRequest, std::__1::allocator<CLBTLEBeaconProviderMock::ScanRequest> >={__list_node_base<CLBTLEBeaconProviderMock::ScanRequest, void *>=^{__list_node_base<CLBTLEBeaconProviderMock::ScanRequest, void *>}^{__list_node_base<CLBTLEBeaconProviderMock::ScanRequest, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLBTLEBeaconProviderMock::ScanRequest, void *> > >=Q}}@{map<CLBTLEBeaconProvider_Type::ProximityZone, CLBTLEBeaconProviderMock::ProximityZoneRegistration, std::__1::less<CLBTLEBeaconProvider_Type::ProximityZone>, std::__1::allocator<std::__1::pair<const CLBTLEBeaconProvider_Type::ProximityZone, CLBTLEBeaconProviderMock::ProximityZoneRegistration> > >={__tree<std::__1::__value_type<CLBTLEBeaconProvider_Type::ProximityZone, CLBTLEBeaconProviderMock::ProximityZoneRegistration>, std::__1::__map_value_compare<CLBTLEBeaconProvider_Type::ProximityZone, std::__1::__value_type<CLBTLEBeaconProvider_Type::ProximityZone, CLBTLEBeaconProviderMock::ProximityZoneRegistration>, std::__1::less<CLBTLEBeaconProvider_Type::ProximityZone>, true>, std::__1::allocator<std::__1::__value_type<CLBTLEBeaconProvider_Type::ProximityZone, CLBTLEBeaconProviderMock::ProximityZoneRegistration> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLBTLEBeaconProvider_Type::ProximityZone, CLBTLEBeaconProviderMock::ProximityZoneRegistration>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLBTLEBeaconProvider_Type::ProximityZone, std::__1::__value_type<CLBTLEBeaconProvider_Type::ProximityZone, CLBTLEBeaconProviderMock::ProximityZoneRegistration>, std::__1::less<CLBTLEBeaconProvider_Type::ProximityZone>, true> >=Q}}}^{__CFRunLoopSource}}16@0:8
{deque<CLElevationChangeEntry, std::__1::allocator<CLElevationChangeEntry> >="__map_"{__split_buffer<CLElevationChangeEntry *, std::__1::allocator<CLElevationChangeEntry *> >="__first_"^^{CLElevationChangeEntry}"__begin_"^^{CLElevationChangeEntry}"__end_"^^{CLElevationChangeEntry}"__end_cap_"{__compressed_pair<CLElevationChangeEntry **, std::__1::allocator<CLElevationChangeEntry *> >="__first_"^^{CLElevationChangeEntry}}}"__start_"Q"__size_"{__compressed_pair<unsigned long, std::__1::allocator<CLElevationChangeEntry> >="__first_"Q}}
@496@0:8{HarvestData=d{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}iiii{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}BB{CLMotionActivity=iiiiBfdBiddii{?=b1b1b1b1b1}}{CLMotionActivity=iiiiBfdBiddii{?=b1b1b1b1b1}}{CLMotionActivity=iiiiBfdBiddii{?=b1b1b1b1b1}}}16{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}336
v24@0:8@?<v@?@"NSSet">16
v24@0:8@?<{MonitoredRegion=^^?{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}SSi{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}i}@?>16
v24@0:8@?<v@?^{CLBTLEFenceManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB}>16
v32@0:8@?<v@?^{CLBTLEFenceManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB}>16@?<v@?>24
B24@0:8@?<v@?^{CLBTLEFenceManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB}>16
^{CLBTLEFenceManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB}16@0:8
v80@0:8{CLSpringTrackerEntry=Q[16C][16C]dq}16@?72
v24@0:8@?<v@?^{CLSpringTrackingNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB@{shared_ptr<CLSpringTrackerRecorderDb>=^{CLSpringTrackerRecorderDb}^{__shared_weak_count}}{CLActivityAggregator<CLSpringTrackerEntry, CLActivityDB::NoDataProtectionPolicy>={vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}^{CLAggregationRule}{__compressed_pair<CLAggregationRule *, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}}}{shared_ptr<CLActivityRecorderDb<CLSpringTrackerEntry, CLActivityDB::NoDataProtectionPolicy> >=^{CLActivityRecorderDb<CLSpringTrackerEntry, CLActivityDB::NoDataProtectionPolicy>}^{__shared_weak_count}}BB}{CLMotionDefaultsWrite<double>=Bd}@{unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client> >={__compressed_pair<CLDataProtectionManager_Type::Client *, std::__1::default_delete<CLDataProtectionManager_Type::Client> >=^{Client}}}}>16
v32@0:8@?<v@?^{CLSpringTrackingNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB@{shared_ptr<CLSpringTrackerRecorderDb>=^{CLSpringTrackerRecorderDb}^{__shared_weak_count}}{CLActivityAggregator<CLSpringTrackerEntry, CLActivityDB::NoDataProtectionPolicy>={vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}^{CLAggregationRule}{__compressed_pair<CLAggregationRule *, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}}}{shared_ptr<CLActivityRecorderDb<CLSpringTrackerEntry, CLActivityDB::NoDataProtectionPolicy> >=^{CLActivityRecorderDb<CLSpringTrackerEntry, CLActivityDB::NoDataProtectionPolicy>}^{__shared_weak_count}}BB}{CLMotionDefaultsWrite<double>=Bd}@{unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client> >={__compressed_pair<CLDataProtectionManager_Type::Client *, std::__1::default_delete<CLDataProtectionManager_Type::Client> >=^{Client}}}}>16@?<v@?>24
B24@0:8@?<v@?^{CLSpringTrackingNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB@{shared_ptr<CLSpringTrackerRecorderDb>=^{CLSpringTrackerRecorderDb}^{__shared_weak_count}}{CLActivityAggregator<CLSpringTrackerEntry, CLActivityDB::NoDataProtectionPolicy>={vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}^{CLAggregationRule}{__compressed_pair<CLAggregationRule *, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}}}{shared_ptr<CLActivityRecorderDb<CLSpringTrackerEntry, CLActivityDB::NoDataProtectionPolicy> >=^{CLActivityRecorderDb<CLSpringTrackerEntry, CLActivityDB::NoDataProtectionPolicy>}^{__shared_weak_count}}BB}{CLMotionDefaultsWrite<double>=Bd}@{unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client> >={__compressed_pair<CLDataProtectionManager_Type::Client *, std::__1::default_delete<CLDataProtectionManager_Type::Client> >=^{Client}}}}>16
v80@0:8{CLSpringTrackerEntry=Q[16C][16C]dq}16@?<v@?@"NSArray">72
^{CLSpringTrackingNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB@{shared_ptr<CLSpringTrackerRecorderDb>=^{CLSpringTrackerRecorderDb}^{__shared_weak_count}}{CLActivityAggregator<CLSpringTrackerEntry, CLActivityDB::NoDataProtectionPolicy>={vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}^{CLAggregationRule}{__compressed_pair<CLAggregationRule *, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}}}{shared_ptr<CLActivityRecorderDb<CLSpringTrackerEntry, CLActivityDB::NoDataProtectionPolicy> >=^{CLActivityRecorderDb<CLSpringTrackerEntry, CLActivityDB::NoDataProtectionPolicy>}^{__shared_weak_count}}BB}{CLMotionDefaultsWrite<double>=Bd}@{unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client> >={__compressed_pair<CLDataProtectionManager_Type::Client *, std::__1::default_delete<CLDataProtectionManager_Type::Client> >=^{Client}}}}16@0:8
v872@0:8d16{?=ddddiiii[50d][50d]}24
v1648@0:8d16{?=diiii[50{?=dddd}]}24
v104@0:8{DirectionOfTravelAssistance=dddddddddBBBBd}16
v64@0:8{MapMatchedPositionAssistance=dddddd}16
v56@0:8{TunnelBridgeAssistance=ddddBBBB}16
v64@0:8{TunnelEndPositionAssistance=dddddd}16
v24@0:8@?<v@?^{CLGpsAssistant=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{CLTimeOffsetFilter=BBdddddQ{CLRunningBufferStats<double>=^^?Qdd{deque<double, std::__1::allocator<double> >={__split_buffer<double *, std::__1::allocator<double *> >=^^d^^d^^d{__compressed_pair<double **, std::__1::allocator<double *> >=^^d}}Q{__compressed_pair<unsigned long, std::__1::allocator<double> >=Q}}}B{CLMedianFilter<double>=^^?I{deque<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long>, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> > >={__split_buffer<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> *, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> *> >=^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long>}^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long>}^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long>}{__compressed_pair<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> **, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> *> >=^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long>}}}Q{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> > >=Q}}{multiset<double, std::__1::less<double>, std::__1::allocator<double> >={__tree<double, std::__1::less<double>, std::__1::allocator<double> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<double, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<double> >=Q}}}}d}B{CLTimeOffsetFilter=BBdddddQ{CLRunningBufferStats<double>=^^?Qdd{deque<double, std::__1::allocator<double> >={__split_buffer<double *, std::__1::allocator<double *> >=^^d^^d^^d{__compressed_pair<double **, std::__1::allocator<double *> >=^^d}}Q{__compressed_pair<unsigned long, std::__1::allocator<double> >=Q}}}B{CLMedianFilter<double>=^^?I{deque<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long>, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> > >={__split_buffer<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> *, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> *> >=^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long>}^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long>}^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long>}{__compressed_pair<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> **, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> *> >=^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long>}}}Q{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> > >=Q}}{multiset<double, std::__1::less<double>, std::__1::allocator<double> >={__tree<double, std::__1::less<double>, std::__1::allocator<double> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<double, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<double> >=Q}}}}d}{set<CLMapMatchingEngine *, std::__1::less<CLMapMatchingEngine *>, std::__1::allocator<CLMapMatchingEngine *> >={__tree<CLMapMatchingEngine *, std::__1::less<CLMapMatchingEngine *>, std::__1::allocator<CLMapMatchingEngine *> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<CLMapMatchingEngine *, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<CLMapMatchingEngine *> >=Q}}}}>16
v32@0:8@?<v@?^{CLGpsAssistant=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{CLTimeOffsetFilter=BBdddddQ{CLRunningBufferStats<double>=^^?Qdd{deque<double, std::__1::allocator<double> >={__split_buffer<double *, std::__1::allocator<double *> >=^^d^^d^^d{__compressed_pair<double **, std::__1::allocator<double *> >=^^d}}Q{__compressed_pair<unsigned long, std::__1::allocator<double> >=Q}}}B{CLMedianFilter<double>=^^?I{deque<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long>, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> > >={__split_buffer<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> *, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> *> >=^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long>}^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long>}^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long>}{__compressed_pair<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> **, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> *> >=^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long>}}}Q{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> > >=Q}}{multiset<double, std::__1::less<double>, std::__1::allocator<double> >={__tree<double, std::__1::less<double>, std::__1::allocator<double> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<double, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<double> >=Q}}}}d}B{CLTimeOffsetFilter=BBdddddQ{CLRunningBufferStats<double>=^^?Qdd{deque<double, std::__1::allocator<double> >={__split_buffer<double *, std::__1::allocator<double *> >=^^d^^d^^d{__compressed_pair<double **, std::__1::allocator<double *> >=^^d}}Q{__compressed_pair<unsigned long, std::__1::allocator<double> >=Q}}}B{CLMedianFilter<double>=^^?I{deque<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long>, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> > >={__split_buffer<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> *, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> *> >=^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long>}^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long>}^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long>}{__compressed_pair<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> **, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> *> >=^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long>}}}Q{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> > >=Q}}{multiset<double, std::__1::less<double>, std::__1::allocator<double> >={__tree<double, std::__1::less<double>, std::__1::allocator<double> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<double, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<double> >=Q}}}}d}{set<CLMapMatchingEngine *, std::__1::less<CLMapMatchingEngine *>, std::__1::allocator<CLMapMatchingEngine *> >={__tree<CLMapMatchingEngine *, std::__1::less<CLMapMatchingEngine *>, std::__1::allocator<CLMapMatchingEngine *> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<CLMapMatchingEngine *, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<CLMapMatchingEngine *> >=Q}}}}>16@?<v@?>24
B24@0:8@?<v@?^{CLGpsAssistant=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{CLTimeOffsetFilter=BBdddddQ{CLRunningBufferStats<double>=^^?Qdd{deque<double, std::__1::allocator<double> >={__split_buffer<double *, std::__1::allocator<double *> >=^^d^^d^^d{__compressed_pair<double **, std::__1::allocator<double *> >=^^d}}Q{__compressed_pair<unsigned long, std::__1::allocator<double> >=Q}}}B{CLMedianFilter<double>=^^?I{deque<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long>, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> > >={__split_buffer<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> *, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> *> >=^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long>}^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long>}^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long>}{__compressed_pair<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> **, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> *> >=^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long>}}}Q{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> > >=Q}}{multiset<double, std::__1::less<double>, std::__1::allocator<double> >={__tree<double, std::__1::less<double>, std::__1::allocator<double> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<double, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<double> >=Q}}}}d}B{CLTimeOffsetFilter=BBdddddQ{CLRunningBufferStats<double>=^^?Qdd{deque<double, std::__1::allocator<double> >={__split_buffer<double *, std::__1::allocator<double *> >=^^d^^d^^d{__compressed_pair<double **, std::__1::allocator<double *> >=^^d}}Q{__compressed_pair<unsigned long, std::__1::allocator<double> >=Q}}}B{CLMedianFilter<double>=^^?I{deque<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long>, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> > >={__split_buffer<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> *, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> *> >=^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long>}^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long>}^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long>}{__compressed_pair<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> **, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> *> >=^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long>}}}Q{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> > >=Q}}{multiset<double, std::__1::less<double>, std::__1::allocator<double> >={__tree<double, std::__1::less<double>, std::__1::allocator<double> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<double, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<double> >=Q}}}}d}{set<CLMapMatchingEngine *, std::__1::less<CLMapMatchingEngine *>, std::__1::allocator<CLMapMatchingEngine *> >={__tree<CLMapMatchingEngine *, std::__1::less<CLMapMatchingEngine *>, std::__1::allocator<CLMapMatchingEngine *> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<CLMapMatchingEngine *, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<CLMapMatchingEngine *> >=Q}}}}>16
^{CLGpsAssistant=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{CLTimeOffsetFilter=BBdddddQ{CLRunningBufferStats<double>=^^?Qdd{deque<double, std::__1::allocator<double> >={__split_buffer<double *, std::__1::allocator<double *> >=^^d^^d^^d{__compressed_pair<double **, std::__1::allocator<double *> >=^^d}}Q{__compressed_pair<unsigned long, std::__1::allocator<double> >=Q}}}B{CLMedianFilter<double>=^^?I{deque<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long>, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> > >={__split_buffer<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> *, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> *> >=^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long>}^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long>}^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long>}{__compressed_pair<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> **, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> *> >=^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long>}}}Q{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> > >=Q}}{multiset<double, std::__1::less<double>, std::__1::allocator<double> >={__tree<double, std::__1::less<double>, std::__1::allocator<double> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<double, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<double> >=Q}}}}d}B{CLTimeOffsetFilter=BBdddddQ{CLRunningBufferStats<double>=^^?Qdd{deque<double, std::__1::allocator<double> >={__split_buffer<double *, std::__1::allocator<double *> >=^^d^^d^^d{__compressed_pair<double **, std::__1::allocator<double *> >=^^d}}Q{__compressed_pair<unsigned long, std::__1::allocator<double> >=Q}}}B{CLMedianFilter<double>=^^?I{deque<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long>, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> > >={__split_buffer<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> *, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> *> >=^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long>}^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long>}^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long>}{__compressed_pair<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> **, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> *> >=^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long>}}}Q{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> > >=Q}}{multiset<double, std::__1::less<double>, std::__1::allocator<double> >={__tree<double, std::__1::less<double>, std::__1::allocator<double> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<double, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<double> >=Q}}}}d}{set<CLMapMatchingEngine *, std::__1::less<CLMapMatchingEngine *>, std::__1::allocator<CLMapMatchingEngine *> >={__tree<CLMapMatchingEngine *, std::__1::less<CLMapMatchingEngine *>, std::__1::allocator<CLMapMatchingEngine *> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<CLMapMatchingEngine *, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<CLMapMatchingEngine *> >=Q}}}}16@0:8
@32@0:8i16i20d24
{?="mode"b1}
@44@0:8I16d20@28@?36
@52@0:8I16d20@28r^{Name={basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}BBB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}BB}36@?44
@44@0:8I16d20^{__CFRunLoop=}28@?36
^{CLActivityAlarmConcentrator={BasicMutex=^^?^{MutexInfo}}[16{set<CMActivityAlarm *, CLActivityAlarmConcentrator::AlarmCompare, std::__1::allocator<CMActivityAlarm *> >={__tree<CMActivityAlarm *, CLActivityAlarmConcentrator::AlarmCompare, std::__1::allocator<CMActivityAlarm *> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<CMActivityAlarm *, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, CLActivityAlarmConcentrator::AlarmCompare>=Q}}}]}
^{__CFRunLoop=}
B24@0:8r^{ProximityZone={Region=^^?{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}SSi}}16
v24@0:8@?<v@?^{CLBTLEBeaconProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB}>16
v32@0:8@?<v@?^{CLBTLEBeaconProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB}>16@?<v@?>24
B24@0:8@?<v@?^{CLBTLEBeaconProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB}>16
^{CLBTLEBeaconProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB}16@0:8
v24@0:8@?<v@?^{CLDarwinNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBBBBBBBBBB}>16
v32@0:8@?<v@?^{CLDarwinNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBBBBBBBBBB}>16@?<v@?>24
B24@0:8@?<v@?^{CLDarwinNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBBBBBBBBBB}>16
^{CLDarwinNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBBBBBBBBBB}16@0:8
v24@0:8r^{CLFallStatsEntry=ddSQQffffffffffffff}16
@"NSFileHandle"
[4096C]
B24@0:8r^{MonitoredRegion=^^?{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}SSi{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}i}16
B32@0:8^{list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> >={__list_node_base<CLBTLEBeaconRegion_Type::MonitoredRegion, void *>=^{__list_node_base<CLBTLEBeaconRegion_Type::MonitoredRegion, void *>}^{__list_node_base<CLBTLEBeaconRegion_Type::MonitoredRegion, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLBTLEBeaconRegion_Type::MonitoredRegion, void *> > >=Q}}16@24
B40@0:8^{list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> >={__list_node_base<CLBTLEBeaconRegion_Type::MonitoredRegion, void *>=^{__list_node_base<CLBTLEBeaconRegion_Type::MonitoredRegion, void *>}^{__list_node_base<CLBTLEBeaconRegion_Type::MonitoredRegion, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLBTLEBeaconRegion_Type::MonitoredRegion, void *> > >=Q}}16@24@32
v24@0:8@?<v@?^{CLBeaconFenceAuthorizationManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{unique_ptr<CLBTLEBeaconProvider_Type::Client, std::__1::default_delete<CLBTLEBeaconProvider_Type::Client> >={__compressed_pair<CLBTLEBeaconProvider_Type::Client *, std::__1::default_delete<CLBTLEBeaconProvider_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{CLBeaconFenceDatabase={CLSqliteDatabase=^^?^{sqlite3}^{Mutex}{list<sqlite3_stmt *, std::__1::allocator<sqlite3_stmt *> >={__list_node_base<sqlite3_stmt *, void *>=^{__list_node_base<sqlite3_stmt *, void *>}^{__list_node_base<sqlite3_stmt *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<sqlite3_stmt *, void *> > >=Q}}{SqliteProperties=iiBB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}i@}}i@}>16
v32@0:8@?<v@?^{CLBeaconFenceAuthorizationManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{unique_ptr<CLBTLEBeaconProvider_Type::Client, std::__1::default_delete<CLBTLEBeaconProvider_Type::Client> >={__compressed_pair<CLBTLEBeaconProvider_Type::Client *, std::__1::default_delete<CLBTLEBeaconProvider_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{CLBeaconFenceDatabase={CLSqliteDatabase=^^?^{sqlite3}^{Mutex}{list<sqlite3_stmt *, std::__1::allocator<sqlite3_stmt *> >={__list_node_base<sqlite3_stmt *, void *>=^{__list_node_base<sqlite3_stmt *, void *>}^{__list_node_base<sqlite3_stmt *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<sqlite3_stmt *, void *> > >=Q}}{SqliteProperties=iiBB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}i@}}i@}>16@?<v@?>24
B24@0:8@?<v@?^{CLBeaconFenceAuthorizationManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{unique_ptr<CLBTLEBeaconProvider_Type::Client, std::__1::default_delete<CLBTLEBeaconProvider_Type::Client> >={__compressed_pair<CLBTLEBeaconProvider_Type::Client *, std::__1::default_delete<CLBTLEBeaconProvider_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{CLBeaconFenceDatabase={CLSqliteDatabase=^^?^{sqlite3}^{Mutex}{list<sqlite3_stmt *, std::__1::allocator<sqlite3_stmt *> >={__list_node_base<sqlite3_stmt *, void *>=^{__list_node_base<sqlite3_stmt *, void *>}^{__list_node_base<sqlite3_stmt *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<sqlite3_stmt *, void *> > >=Q}}{SqliteProperties=iiBB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}i@}}i@}>16
B32@0:8^{list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> >={__list_node_base<CLBTLEBeaconRegion_Type::MonitoredRegion, void *>=^{__list_node_base<CLBTLEBeaconRegion_Type::MonitoredRegion, void *>}^{__list_node_base<CLBTLEBeaconRegion_Type::MonitoredRegion, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLBTLEBeaconRegion_Type::MonitoredRegion, void *> > >=Q}}16@"NSString"24
B40@0:8^{list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> >={__list_node_base<CLBTLEBeaconRegion_Type::MonitoredRegion, void *>=^{__list_node_base<CLBTLEBeaconRegion_Type::MonitoredRegion, void *>}^{__list_node_base<CLBTLEBeaconRegion_Type::MonitoredRegion, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLBTLEBeaconRegion_Type::MonitoredRegion, void *> > >=Q}}16@"NSString"24@"NSString"32
i32@0:8@"NSString"16@"NSString"24
^{CLBeaconFenceAuthorizationManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{unique_ptr<CLBTLEBeaconProvider_Type::Client, std::__1::default_delete<CLBTLEBeaconProvider_Type::Client> >={__compressed_pair<CLBTLEBeaconProvider_Type::Client *, std::__1::default_delete<CLBTLEBeaconProvider_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{CLBeaconFenceDatabase={CLSqliteDatabase=^^?^{sqlite3}^{Mutex}{list<sqlite3_stmt *, std::__1::allocator<sqlite3_stmt *> >={__list_node_base<sqlite3_stmt *, void *>=^{__list_node_base<sqlite3_stmt *, void *>}^{__list_node_base<sqlite3_stmt *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<sqlite3_stmt *, void *> > >=Q}}{SqliteProperties=iiBB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}i@}}i@}16@0:8
{?="arfcn"b1"psc"b1}
v24@0:8@?<v@?^{CLBTLERangeManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB}>16
v32@0:8@?<v@?^{CLBTLERangeManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB}>16@?<v@?>24
B24@0:8@?<v@?^{CLBTLERangeManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB}>16
^{CLBTLERangeManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB}16@0:8
v24@0:8@?<v@?^{CLTurnState=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB^{Dispatcher}{CLTurnStateCalc=iiII{CLMedianFilter<float>=^^?I{deque<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long>, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long> > >={__split_buffer<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long> *, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long> *> >=^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long>}^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long>}^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long>}{__compressed_pair<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long> **, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long> *> >=^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long>}}}Q{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long> > >=Q}}{multiset<float, std::__1::less<float>, std::__1::allocator<float> >={__tree<float, std::__1::less<float>, std::__1::allocator<float> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<float, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<float> >=Q}}}}{CLMedianFilter<float>=^^?I{deque<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long>, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long> > >={__split_buffer<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long> *, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long> *> >=^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long>}^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long>}^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long>}{__compressed_pair<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long> **, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long> *> >=^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long>}}}Q{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long> > >=Q}}{multiset<float, std::__1::less<float>, std::__1::allocator<float> >={__tree<float, std::__1::less<float>, std::__1::allocator<float> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<float, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<float> >=Q}}}}{CLMedianFilter<float>=^^?I{deque<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long>, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long> > >={__split_buffer<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long> *, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long> *> >=^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long>}^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long>}^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long>}{__compressed_pair<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long> **, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long> *> >=^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long>}}}Q{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long> > >=Q}}{multiset<float, std::__1::less<float>, std::__1::allocator<float> >={__tree<float, std::__1::less<float>, std::__1::allocator<float> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<float, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<float> >=Q}}}}{CLRunningBufferStats<double>=^^?Qdd{deque<double, std::__1::allocator<double> >={__split_buffer<double *, std::__1::allocator<double *> >=^^d^^d^^d{__compressed_pair<double **, std::__1::allocator<double *> >=^^d}}Q{__compressed_pair<unsigned long, std::__1::allocator<double> >=Q}}}{CLRunningBufferStats<double>=^^?Qdd{deque<double, std::__1::allocator<double> >={__split_buffer<double *, std::__1::allocator<double *> >=^^d^^d^^d{__compressed_pair<double **, std::__1::allocator<double *> >=^^d}}Q{__compressed_pair<unsigned long, std::__1::allocator<double> >=Q}}}{CLRunningBufferStats<double>=^^?Qdd{deque<double, std::__1::allocator<double> >={__split_buffer<double *, std::__1::allocator<double *> >=^^d^^d^^d{__compressed_pair<double **, std::__1::allocator<double *> >=^^d}}Q{__compressed_pair<unsigned long, std::__1::allocator<double> >=Q}}}}{Turn=ii}}>16
v32@0:8@?<v@?^{CLTurnState=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB^{Dispatcher}{CLTurnStateCalc=iiII{CLMedianFilter<float>=^^?I{deque<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long>, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long> > >={__split_buffer<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long> *, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long> *> >=^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long>}^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long>}^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long>}{__compressed_pair<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long> **, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long> *> >=^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long>}}}Q{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long> > >=Q}}{multiset<float, std::__1::less<float>, std::__1::allocator<float> >={__tree<float, std::__1::less<float>, std::__1::allocator<float> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<float, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<float> >=Q}}}}{CLMedianFilter<float>=^^?I{deque<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long>, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long> > >={__split_buffer<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long> *, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long> *> >=^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long>}^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long>}^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long>}{__compressed_pair<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long> **, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long> *> >=^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long>}}}Q{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long> > >=Q}}{multiset<float, std::__1::less<float>, std::__1::allocator<float> >={__tree<float, std::__1::less<float>, std::__1::allocator<float> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<float, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<float> >=Q}}}}{CLMedianFilter<float>=^^?I{deque<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long>, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long> > >={__split_buffer<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long> *, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long> *> >=^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long>}^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long>}^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long>}{__compressed_pair<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long> **, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long> *> >=^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long>}}}Q{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long> > >=Q}}{multiset<float, std::__1::less<float>, std::__1::allocator<float> >={__tree<float, std::__1::less<float>, std::__1::allocator<float> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<float, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<float> >=Q}}}}{CLRunningBufferStats<double>=^^?Qdd{deque<double, std::__1::allocator<double> >={__split_buffer<double *, std::__1::allocator<double *> >=^^d^^d^^d{__compressed_pair<double **, std::__1::allocator<double *> >=^^d}}Q{__compressed_pair<unsigned long, std::__1::allocator<double> >=Q}}}{CLRunningBufferStats<double>=^^?Qdd{deque<double, std::__1::allocator<double> >={__split_buffer<double *, std::__1::allocator<double *> >=^^d^^d^^d{__compressed_pair<double **, std::__1::allocator<double *> >=^^d}}Q{__compressed_pair<unsigned long, std::__1::allocator<double> >=Q}}}{CLRunningBufferStats<double>=^^?Qdd{deque<double, std::__1::allocator<double> >={__split_buffer<double *, std::__1::allocator<double *> >=^^d^^d^^d{__compressed_pair<double **, std::__1::allocator<double *> >=^^d}}Q{__compressed_pair<unsigned long, std::__1::allocator<double> >=Q}}}}{Turn=ii}}>16@?<v@?>24
B24@0:8@?<v@?^{CLTurnState=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB^{Dispatcher}{CLTurnStateCalc=iiII{CLMedianFilter<float>=^^?I{deque<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long>, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long> > >={__split_buffer<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long> *, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long> *> >=^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long>}^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long>}^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long>}{__compressed_pair<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long> **, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long> *> >=^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long>}}}Q{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long> > >=Q}}{multiset<float, std::__1::less<float>, std::__1::allocator<float> >={__tree<float, std::__1::less<float>, std::__1::allocator<float> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<float, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<float> >=Q}}}}{CLMedianFilter<float>=^^?I{deque<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long>, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long> > >={__split_buffer<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long> *, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long> *> >=^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long>}^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long>}^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long>}{__compressed_pair<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long> **, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long> *> >=^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long>}}}Q{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long> > >=Q}}{multiset<float, std::__1::less<float>, std::__1::allocator<float> >={__tree<float, std::__1::less<float>, std::__1::allocator<float> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<float, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<float> >=Q}}}}{CLMedianFilter<float>=^^?I{deque<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long>, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long> > >={__split_buffer<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long> *, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long> *> >=^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long>}^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long>}^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long>}{__compressed_pair<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long> **, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long> *> >=^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long>}}}Q{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long> > >=Q}}{multiset<float, std::__1::less<float>, std::__1::allocator<float> >={__tree<float, std::__1::less<float>, std::__1::allocator<float> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<float, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<float> >=Q}}}}{CLRunningBufferStats<double>=^^?Qdd{deque<double, std::__1::allocator<double> >={__split_buffer<double *, std::__1::allocator<double *> >=^^d^^d^^d{__compressed_pair<double **, std::__1::allocator<double *> >=^^d}}Q{__compressed_pair<unsigned long, std::__1::allocator<double> >=Q}}}{CLRunningBufferStats<double>=^^?Qdd{deque<double, std::__1::allocator<double> >={__split_buffer<double *, std::__1::allocator<double *> >=^^d^^d^^d{__compressed_pair<double **, std::__1::allocator<double *> >=^^d}}Q{__compressed_pair<unsigned long, std::__1::allocator<double> >=Q}}}{CLRunningBufferStats<double>=^^?Qdd{deque<double, std::__1::allocator<double> >={__split_buffer<double *, std::__1::allocator<double *> >=^^d^^d^^d{__compressed_pair<double **, std::__1::allocator<double *> >=^^d}}Q{__compressed_pair<unsigned long, std::__1::allocator<double> >=Q}}}}{Turn=ii}}>16
^{CLTurnState=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB^{Dispatcher}{CLTurnStateCalc=iiII{CLMedianFilter<float>=^^?I{deque<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long>, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long> > >={__split_buffer<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long> *, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long> *> >=^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long>}^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long>}^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long>}{__compressed_pair<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long> **, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long> *> >=^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long>}}}Q{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long> > >=Q}}{multiset<float, std::__1::less<float>, std::__1::allocator<float> >={__tree<float, std::__1::less<float>, std::__1::allocator<float> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<float, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<float> >=Q}}}}{CLMedianFilter<float>=^^?I{deque<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long>, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long> > >={__split_buffer<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long> *, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long> *> >=^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long>}^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long>}^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long>}{__compressed_pair<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long> **, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long> *> >=^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long>}}}Q{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long> > >=Q}}{multiset<float, std::__1::less<float>, std::__1::allocator<float> >={__tree<float, std::__1::less<float>, std::__1::allocator<float> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<float, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<float> >=Q}}}}{CLMedianFilter<float>=^^?I{deque<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long>, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long> > >={__split_buffer<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long> *, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long> *> >=^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long>}^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long>}^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long>}{__compressed_pair<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long> **, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long> *> >=^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long>}}}Q{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, long> > >=Q}}{multiset<float, std::__1::less<float>, std::__1::allocator<float> >={__tree<float, std::__1::less<float>, std::__1::allocator<float> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<float, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<float> >=Q}}}}{CLRunningBufferStats<double>=^^?Qdd{deque<double, std::__1::allocator<double> >={__split_buffer<double *, std::__1::allocator<double *> >=^^d^^d^^d{__compressed_pair<double **, std::__1::allocator<double *> >=^^d}}Q{__compressed_pair<unsigned long, std::__1::allocator<double> >=Q}}}{CLRunningBufferStats<double>=^^?Qdd{deque<double, std::__1::allocator<double> >={__split_buffer<double *, std::__1::allocator<double *> >=^^d^^d^^d{__compressed_pair<double **, std::__1::allocator<double *> >=^^d}}Q{__compressed_pair<unsigned long, std::__1::allocator<double> >=Q}}}{CLRunningBufferStats<double>=^^?Qdd{deque<double, std::__1::allocator<double> >={__split_buffer<double *, std::__1::allocator<double *> >=^^d^^d^^d{__compressed_pair<double **, std::__1::allocator<double *> >=^^d}}Q{__compressed_pair<unsigned long, std::__1::allocator<double> >=Q}}}}{Turn=ii}}16@0:8
@24@0:8^{CLHarvestControllerExternal=^^?^^?^^?@@^{CLHarvestController}{unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client> >={__compressed_pair<CLDataProtectionManager_Type::Client *, std::__1::default_delete<CLDataProtectionManager_Type::Client> >=^{Client}}}{set<CLDataProtectionManager_Type::Notification, std::__1::less<CLDataProtectionManager_Type::Notification>, std::__1::allocator<CLDataProtectionManager_Type::Notification> >={__tree<CLDataProtectionManager_Type::Notification, std::__1::less<CLDataProtectionManager_Type::Notification>, std::__1::allocator<CLDataProtectionManager_Type::Notification> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<CLDataProtectionManager_Type::Notification, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<CLDataProtectionManager_Type::Notification> >=Q}}}{unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client> >={__compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> >=^{Client}}}{set<CLLocationProvider_Type::Notification, std::__1::less<CLLocationProvider_Type::Notification>, std::__1::allocator<CLLocationProvider_Type::Notification> >={__tree<CLLocationProvider_Type::Notification, std::__1::less<CLLocationProvider_Type::Notification>, std::__1::allocator<CLLocationProvider_Type::Notification> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<CLLocationProvider_Type::Notification, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<CLLocationProvider_Type::Notification> >=Q}}}{unique_ptr<CLGnssProvider_Type::Client, std::__1::default_delete<CLGnssProvider_Type::Client> >={__compressed_pair<CLGnssProvider_Type::Client *, std::__1::default_delete<CLGnssProvider_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{set<CLClientManager_Type::Notification, std::__1::less<CLClientManager_Type::Notification>, std::__1::allocator<CLClientManager_Type::Notification> >={__tree<CLClientManager_Type::Notification, std::__1::less<CLClientManager_Type::Notification>, std::__1::allocator<CLClientManager_Type::Notification> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<CLClientManager_Type::Notification, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<CLClientManager_Type::Notification> >=Q}}}{unique_ptr<CLMotionState_Type::Client, std::__1::default_delete<CLMotionState_Type::Client> >={__compressed_pair<CLMotionState_Type::Client *, std::__1::default_delete<CLMotionState_Type::Client> >=^{Client}}}{set<CLMotionState_Type::Notification, std::__1::less<CLMotionState_Type::Notification>, std::__1::allocator<CLMotionState_Type::Notification> >={__tree<CLMotionState_Type::Notification, std::__1::less<CLMotionState_Type::Notification>, std::__1::allocator<CLMotionState_Type::Notification> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<CLMotionState_Type::Notification, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<CLMotionState_Type::Notification> >=Q}}}{unique_ptr<CLOperatorSettings_Type::Client, std::__1::default_delete<CLOperatorSettings_Type::Client> >={__compressed_pair<CLOperatorSettings_Type::Client *, std::__1::default_delete<CLOperatorSettings_Type::Client> >=^{Client}}}{set<CLOperatorSettings_Type::Notification, std::__1::less<CLOperatorSettings_Type::Notification>, std::__1::allocator<CLOperatorSettings_Type::Notification> >={__tree<CLOperatorSettings_Type::Notification, std::__1::less<CLOperatorSettings_Type::Notification>, std::__1::allocator<CLOperatorSettings_Type::Notification> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<CLOperatorSettings_Type::Notification, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<CLOperatorSettings_Type::Notification> >=Q}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{set<CLDaemonStatus_Type::Notification, std::__1::less<CLDaemonStatus_Type::Notification>, std::__1::allocator<CLDaemonStatus_Type::Notification> >={__tree<CLDaemonStatus_Type::Notification, std::__1::less<CLDaemonStatus_Type::Notification>, std::__1::allocator<CLDaemonStatus_Type::Notification> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<CLDaemonStatus_Type::Notification, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<CLDaemonStatus_Type::Notification> >=Q}}}{unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client> >={__compressed_pair<CLTelephonyService_Type::Client *, std::__1::default_delete<CLTelephonyService_Type::Client> >=^{Client}}}{set<int, std::__1::less<int>, std::__1::allocator<int> >={__tree<int, std::__1::less<int>, std::__1::allocator<int> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<int, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<int> >=Q}}}{unique_ptr<CLServiceLocationProvider_Type::Client, std::__1::default_delete<CLServiceLocationProvider_Type::Client> >={__compressed_pair<CLServiceLocationProvider_Type::Client *, std::__1::default_delete<CLServiceLocationProvider_Type::Client> >=^{Client}}}{CLServiceLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBBBB^{__CLClient}^{__CLClient}^{__CLClient}^{__CFString}^{__CFString}@B}B{CLHarvestPassKitRegistrar=}{unique_ptr<CLWifiServiceClient, std::__1::default_delete<CLWifiServiceClient> >={__compressed_pair<CLWifiServiceClient *, std::__1::default_delete<CLWifiServiceClient> >=^{CLWifiServiceClient}}}BB@@i}16
^{CLHarvestControllerExternal=^^?^^?^^?@@^{CLHarvestController}{unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client> >={__compressed_pair<CLDataProtectionManager_Type::Client *, std::__1::default_delete<CLDataProtectionManager_Type::Client> >=^{Client}}}{set<CLDataProtectionManager_Type::Notification, std::__1::less<CLDataProtectionManager_Type::Notification>, std::__1::allocator<CLDataProtectionManager_Type::Notification> >={__tree<CLDataProtectionManager_Type::Notification, std::__1::less<CLDataProtectionManager_Type::Notification>, std::__1::allocator<CLDataProtectionManager_Type::Notification> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<CLDataProtectionManager_Type::Notification, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<CLDataProtectionManager_Type::Notification> >=Q}}}{unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client> >={__compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> >=^{Client}}}{set<CLLocationProvider_Type::Notification, std::__1::less<CLLocationProvider_Type::Notification>, std::__1::allocator<CLLocationProvider_Type::Notification> >={__tree<CLLocationProvider_Type::Notification, std::__1::less<CLLocationProvider_Type::Notification>, std::__1::allocator<CLLocationProvider_Type::Notification> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<CLLocationProvider_Type::Notification, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<CLLocationProvider_Type::Notification> >=Q}}}{unique_ptr<CLGnssProvider_Type::Client, std::__1::default_delete<CLGnssProvider_Type::Client> >={__compressed_pair<CLGnssProvider_Type::Client *, std::__1::default_delete<CLGnssProvider_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{set<CLClientManager_Type::Notification, std::__1::less<CLClientManager_Type::Notification>, std::__1::allocator<CLClientManager_Type::Notification> >={__tree<CLClientManager_Type::Notification, std::__1::less<CLClientManager_Type::Notification>, std::__1::allocator<CLClientManager_Type::Notification> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<CLClientManager_Type::Notification, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<CLClientManager_Type::Notification> >=Q}}}{unique_ptr<CLMotionState_Type::Client, std::__1::default_delete<CLMotionState_Type::Client> >={__compressed_pair<CLMotionState_Type::Client *, std::__1::default_delete<CLMotionState_Type::Client> >=^{Client}}}{set<CLMotionState_Type::Notification, std::__1::less<CLMotionState_Type::Notification>, std::__1::allocator<CLMotionState_Type::Notification> >={__tree<CLMotionState_Type::Notification, std::__1::less<CLMotionState_Type::Notification>, std::__1::allocator<CLMotionState_Type::Notification> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<CLMotionState_Type::Notification, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<CLMotionState_Type::Notification> >=Q}}}{unique_ptr<CLOperatorSettings_Type::Client, std::__1::default_delete<CLOperatorSettings_Type::Client> >={__compressed_pair<CLOperatorSettings_Type::Client *, std::__1::default_delete<CLOperatorSettings_Type::Client> >=^{Client}}}{set<CLOperatorSettings_Type::Notification, std::__1::less<CLOperatorSettings_Type::Notification>, std::__1::allocator<CLOperatorSettings_Type::Notification> >={__tree<CLOperatorSettings_Type::Notification, std::__1::less<CLOperatorSettings_Type::Notification>, std::__1::allocator<CLOperatorSettings_Type::Notification> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<CLOperatorSettings_Type::Notification, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<CLOperatorSettings_Type::Notification> >=Q}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{set<CLDaemonStatus_Type::Notification, std::__1::less<CLDaemonStatus_Type::Notification>, std::__1::allocator<CLDaemonStatus_Type::Notification> >={__tree<CLDaemonStatus_Type::Notification, std::__1::less<CLDaemonStatus_Type::Notification>, std::__1::allocator<CLDaemonStatus_Type::Notification> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<CLDaemonStatus_Type::Notification, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<CLDaemonStatus_Type::Notification> >=Q}}}{unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client> >={__compressed_pair<CLTelephonyService_Type::Client *, std::__1::default_delete<CLTelephonyService_Type::Client> >=^{Client}}}{set<int, std::__1::less<int>, std::__1::allocator<int> >={__tree<int, std::__1::less<int>, std::__1::allocator<int> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<int, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<int> >=Q}}}{unique_ptr<CLServiceLocationProvider_Type::Client, std::__1::default_delete<CLServiceLocationProvider_Type::Client> >={__compressed_pair<CLServiceLocationProvider_Type::Client *, std::__1::default_delete<CLServiceLocationProvider_Type::Client> >=^{Client}}}{CLServiceLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iBBBBB^{__CLClient}^{__CLClient}^{__CLClient}^{__CFString}^{__CFString}@B}B{CLHarvestPassKitRegistrar=}{unique_ptr<CLWifiServiceClient, std::__1::default_delete<CLWifiServiceClient> >={__compressed_pair<CLWifiServiceClient *, std::__1::default_delete<CLWifiServiceClient> >=^{CLWifiServiceClient}}}BB@@i}
@"CLTimer"16@0:8
v24@0:8@"CLTimer"16
v32@0:8d16@?24
@"NSOperationQueue"
:16@0:8
@"NSMethodSignature"
{map<SEL *, CLIntersiloInterfaceSelectorInfo *, std::__1::less<SEL *>, std::__1::allocator<std::__1::pair<SEL *const, CLIntersiloInterfaceSelectorInfo *> > >="__tree_"{__tree<std::__1::__value_type<SEL *, CLIntersiloInterfaceSelectorInfo *>, std::__1::__map_value_compare<SEL *, std::__1::__value_type<SEL *, CLIntersiloInterfaceSelectorInfo *>, std::__1::less<SEL *>, true>, std::__1::allocator<std::__1::__value_type<SEL *, CLIntersiloInterfaceSelectorInfo *> > >="__begin_node_"^{__tree_end_node<std::__1::__tree_node_base<void *> *>}"__pair1_"{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<SEL *, CLIntersiloInterfaceSelectorInfo *>, void *> > >="__first_"{__tree_end_node<std::__1::__tree_node_base<void *> *>="__left_"^{__tree_node_base<void *>}}}"__pair3_"{__compressed_pair<unsigned long, std::__1::__map_value_compare<SEL *, std::__1::__value_type<SEL *, CLIntersiloInterfaceSelectorInfo *>, std::__1::less<SEL *>, true> >="__first_"Q}}}
@"Protocol"
@"CLIntersiloProxy"
@"CLIntersiloInterfaceSelectorInfo"
@"<CLIntersiloProxyDelegateProtocol>"
@"CLIntersiloInterface"
v32@0:8@16:24
v24@0:8:16
v32@0:8@"NSMutableDictionary"16:24
v32@0:8@"NSMutableDictionary"16@"NSString"24
@24@0:8#16
@"NSData"
{?="workoutType"b1}
@32@0:8^v16@?24
@24@0:8^{CLNotifierClientBase=^^?}16
^{CLNotifierClientBase=^^?}
v24@0:8^{CLNotifierBase=^^?}16
^{CLNotifierBase=^^?}16@0:8
{map<unsigned long, int, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, int> > >="__tree_"{__tree<std::__1::__value_type<unsigned long, int>, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, int>, std::__1::less<unsigned long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long, int> > >="__begin_node_"^{__tree_end_node<std::__1::__tree_node_base<void *> *>}"__pair1_"{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long, int>, void *> > >="__first_"{__tree_end_node<std::__1::__tree_node_base<void *> *>="__left_"^{__tree_node_base<void *>}}}"__pair3_"{__compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, int>, std::__1::less<unsigned long>, true> >="__first_"Q}}}
^{CLNotifierBase=^^?}
v24@0:8^{value_ostream=B^{ostream}}16
@48@0:8d16q24d32d40
@56@0:8d16q24d32d40q48
@"CLHarvestAppRealtimePolygon"
i32@0:8@16Q24
v36@0:8@16i24Q28
i32@0:8@"NSString"16Q24
v24@0:8@"NSDictionary"16
v36@0:8@"NSString"16i24Q28
v24@0:8@?<v@?>16
{?="powerSource"b1}
v24@0:8f16f20
@24@0:8f16f20
@32@0:8f16d20f28
@64@0:8Q16@24@32@40@48@56
@24@0:8r^{CLSignificantElevation=i[16C]ddII}16
{?="timestampGps"b1"accuracy"b1"distance"b1"gpsAltitude"b1"gpsSpeedAccuracy"b1"quality"b1"rawSpeed"b1"speed"b1}
v32@0:8@"NSArray"16@"NSNumber"24
{CLStepDistance=iddiidi}32@0:8^d16^d24
i168@0:8{CLStepCountEntry=dddIddIIdddi^{__CFString}BB{CLAccelerometerPace=ddd}IIC}16^{vector<CLStepCountEntry, std::__1::allocator<CLStepCountEntry> >=^{CLStepCountEntry}^{CLStepCountEntry}{__compressed_pair<CLStepCountEntry *, std::__1::allocator<CLStepCountEntry> >=^{CLStepCountEntry}}}160
B24@0:8d16
v32@0:8q16@?24
v24@0:8@?<v@?^{CLStepCountNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{shared_ptr<CLStepCountRecorderDb>=^{CLStepCountRecorderDb}^{__shared_weak_count}}{CLActivityAggregator<CLStepCountEntry, CLActivityDB::NoDataProtectionPolicy>={vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}^{CLAggregationRule}{__compressed_pair<CLAggregationRule *, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}}}{shared_ptr<CLActivityRecorderDb<CLStepCountEntry, CLActivityDB::NoDataProtectionPolicy> >=^{CLActivityRecorderDb<CLStepCountEntry, CLActivityDB::NoDataProtectionPolicy>}^{__shared_weak_count}}BB}@@{CLNatalieSourceFromNotifier<CLOdometerEntry>=^^?*d{deque<CLOdometerEntry, std::__1::allocator<CLOdometerEntry> >={__split_buffer<CLOdometerEntry *, std::__1::allocator<CLOdometerEntry *> >=^^{CLOdometerEntry}^^{CLOdometerEntry}^^{CLOdometerEntry}{__compressed_pair<CLOdometerEntry **, std::__1::allocator<CLOdometerEntry *> >=^^{CLOdometerEntry}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLOdometerEntry> >=Q}}dBddddBB@{unique_ptr<CLOdometerNotifier_Type::Client, std::__1::default_delete<CLOdometerNotifier_Type::Client> >={__compressed_pair<CLOdometerNotifier_Type::Client *, std::__1::default_delete<CLOdometerNotifier_Type::Client> >=^{Client}}}}{CLStepDistanceFusion={CLOdometerQuality=^^?{vector<unsigned int, std::__1::allocator<unsigned int> >=^I^I{__compressed_pair<unsigned int *, std::__1::allocator<unsigned int> >=^I}}{deque<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > > >={__split_buffer<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > *, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > *> >=^^{vector<unsigned int, std::__1::allocator<unsigned int> >}^^{vector<unsigned int, std::__1::allocator<unsigned int> >}^^{vector<unsigned int, std::__1::allocator<unsigned int> >}{__compressed_pair<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > **, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > *> >=^^{vector<unsigned int, std::__1::allocator<unsigned int> >}}}Q{__compressed_pair<unsigned long, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > > >=Q}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}i}{MotionOverride=i{CLMotionActivity=iiiiBfdBiddii{?=b1b1b1b1b1}}q{WorkoutSettings=[16C]q(WorkoutAttrib={SwimAttrib=qd})}}{deque<double, std::__1::allocator<double> >={__split_buffer<double *, std::__1::allocator<double *> >=^^d^^d^^d{__compressed_pair<double **, std::__1::allocator<double *> >=^^d}}Q{__compressed_pair<unsigned long, std::__1::allocator<double> >=Q}}{CLNatalieInput<CLExtendedStepCountEntry>=^^?*d{deque<CLExtendedStepCountEntry, std::__1::allocator<CLExtendedStepCountEntry> >={__split_buffer<CLExtendedStepCountEntry *, std::__1::allocator<CLExtendedStepCountEntry *> >=^^{CLExtendedStepCountEntry}^^{CLExtendedStepCountEntry}^^{CLExtendedStepCountEntry}{__compressed_pair<CLExtendedStepCountEntry **, std::__1::allocator<CLExtendedStepCountEntry *> >=^^{CLExtendedStepCountEntry}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLExtendedStepCountEntry> >=Q}}dBddddBB}^{CLNatalieInput<CLOdometerEntry>}i{CLPedometerPaceFusion=^{CLNatalieInput<CLOdometerEntry>}ddddddd{FirstOrderFilter<double>=idd}{FirstOrderFilter<double>=idd}iiB}iQddiiddddB}B@(NotificationData={CLStepCountEntry=dddIddIIdddi^{__CFString}BB{CLAccelerometerPace=ddd}IIC}{CLExtendedStepCountEntry=d{CLStepCountEntry=dddIddIIdddi^{__CFString}BB{CLAccelerometerPace=ddd}IIC}{CLStepCountEntryAddition=ddIddddBd}}{CLPedometerEvent=di})Bq{CLBodyMetrics=iffffffffif}Bi{unique_ptr<CLMotionStateMediator_Type::Client, std::__1::default_delete<CLMotionStateMediator_Type::Client> >={__compressed_pair<CLMotionStateMediator_Type::Client *, std::__1::default_delete<CLMotionStateMediator_Type::Client> >=^{Client}}}{unique_ptr<CLNatalimetryNotifier_Type::Client, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >={__compressed_pair<CLNatalimetryNotifier_Type::Client *, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >=^{Client}}}^{Dispatcher}^{Dispatcher}}>16
v32@0:8@?<v@?^{CLStepCountNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{shared_ptr<CLStepCountRecorderDb>=^{CLStepCountRecorderDb}^{__shared_weak_count}}{CLActivityAggregator<CLStepCountEntry, CLActivityDB::NoDataProtectionPolicy>={vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}^{CLAggregationRule}{__compressed_pair<CLAggregationRule *, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}}}{shared_ptr<CLActivityRecorderDb<CLStepCountEntry, CLActivityDB::NoDataProtectionPolicy> >=^{CLActivityRecorderDb<CLStepCountEntry, CLActivityDB::NoDataProtectionPolicy>}^{__shared_weak_count}}BB}@@{CLNatalieSourceFromNotifier<CLOdometerEntry>=^^?*d{deque<CLOdometerEntry, std::__1::allocator<CLOdometerEntry> >={__split_buffer<CLOdometerEntry *, std::__1::allocator<CLOdometerEntry *> >=^^{CLOdometerEntry}^^{CLOdometerEntry}^^{CLOdometerEntry}{__compressed_pair<CLOdometerEntry **, std::__1::allocator<CLOdometerEntry *> >=^^{CLOdometerEntry}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLOdometerEntry> >=Q}}dBddddBB@{unique_ptr<CLOdometerNotifier_Type::Client, std::__1::default_delete<CLOdometerNotifier_Type::Client> >={__compressed_pair<CLOdometerNotifier_Type::Client *, std::__1::default_delete<CLOdometerNotifier_Type::Client> >=^{Client}}}}{CLStepDistanceFusion={CLOdometerQuality=^^?{vector<unsigned int, std::__1::allocator<unsigned int> >=^I^I{__compressed_pair<unsigned int *, std::__1::allocator<unsigned int> >=^I}}{deque<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > > >={__split_buffer<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > *, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > *> >=^^{vector<unsigned int, std::__1::allocator<unsigned int> >}^^{vector<unsigned int, std::__1::allocator<unsigned int> >}^^{vector<unsigned int, std::__1::allocator<unsigned int> >}{__compressed_pair<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > **, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > *> >=^^{vector<unsigned int, std::__1::allocator<unsigned int> >}}}Q{__compressed_pair<unsigned long, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > > >=Q}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}i}{MotionOverride=i{CLMotionActivity=iiiiBfdBiddii{?=b1b1b1b1b1}}q{WorkoutSettings=[16C]q(WorkoutAttrib={SwimAttrib=qd})}}{deque<double, std::__1::allocator<double> >={__split_buffer<double *, std::__1::allocator<double *> >=^^d^^d^^d{__compressed_pair<double **, std::__1::allocator<double *> >=^^d}}Q{__compressed_pair<unsigned long, std::__1::allocator<double> >=Q}}{CLNatalieInput<CLExtendedStepCountEntry>=^^?*d{deque<CLExtendedStepCountEntry, std::__1::allocator<CLExtendedStepCountEntry> >={__split_buffer<CLExtendedStepCountEntry *, std::__1::allocator<CLExtendedStepCountEntry *> >=^^{CLExtendedStepCountEntry}^^{CLExtendedStepCountEntry}^^{CLExtendedStepCountEntry}{__compressed_pair<CLExtendedStepCountEntry **, std::__1::allocator<CLExtendedStepCountEntry *> >=^^{CLExtendedStepCountEntry}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLExtendedStepCountEntry> >=Q}}dBddddBB}^{CLNatalieInput<CLOdometerEntry>}i{CLPedometerPaceFusion=^{CLNatalieInput<CLOdometerEntry>}ddddddd{FirstOrderFilter<double>=idd}{FirstOrderFilter<double>=idd}iiB}iQddiiddddB}B@(NotificationData={CLStepCountEntry=dddIddIIdddi^{__CFString}BB{CLAccelerometerPace=ddd}IIC}{CLExtendedStepCountEntry=d{CLStepCountEntry=dddIddIIdddi^{__CFString}BB{CLAccelerometerPace=ddd}IIC}{CLStepCountEntryAddition=ddIddddBd}}{CLPedometerEvent=di})Bq{CLBodyMetrics=iffffffffif}Bi{unique_ptr<CLMotionStateMediator_Type::Client, std::__1::default_delete<CLMotionStateMediator_Type::Client> >={__compressed_pair<CLMotionStateMediator_Type::Client *, std::__1::default_delete<CLMotionStateMediator_Type::Client> >=^{Client}}}{unique_ptr<CLNatalimetryNotifier_Type::Client, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >={__compressed_pair<CLNatalimetryNotifier_Type::Client *, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >=^{Client}}}^{Dispatcher}^{Dispatcher}}>16@?<v@?>24
B24@0:8@?<v@?^{CLStepCountNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{shared_ptr<CLStepCountRecorderDb>=^{CLStepCountRecorderDb}^{__shared_weak_count}}{CLActivityAggregator<CLStepCountEntry, CLActivityDB::NoDataProtectionPolicy>={vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}^{CLAggregationRule}{__compressed_pair<CLAggregationRule *, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}}}{shared_ptr<CLActivityRecorderDb<CLStepCountEntry, CLActivityDB::NoDataProtectionPolicy> >=^{CLActivityRecorderDb<CLStepCountEntry, CLActivityDB::NoDataProtectionPolicy>}^{__shared_weak_count}}BB}@@{CLNatalieSourceFromNotifier<CLOdometerEntry>=^^?*d{deque<CLOdometerEntry, std::__1::allocator<CLOdometerEntry> >={__split_buffer<CLOdometerEntry *, std::__1::allocator<CLOdometerEntry *> >=^^{CLOdometerEntry}^^{CLOdometerEntry}^^{CLOdometerEntry}{__compressed_pair<CLOdometerEntry **, std::__1::allocator<CLOdometerEntry *> >=^^{CLOdometerEntry}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLOdometerEntry> >=Q}}dBddddBB@{unique_ptr<CLOdometerNotifier_Type::Client, std::__1::default_delete<CLOdometerNotifier_Type::Client> >={__compressed_pair<CLOdometerNotifier_Type::Client *, std::__1::default_delete<CLOdometerNotifier_Type::Client> >=^{Client}}}}{CLStepDistanceFusion={CLOdometerQuality=^^?{vector<unsigned int, std::__1::allocator<unsigned int> >=^I^I{__compressed_pair<unsigned int *, std::__1::allocator<unsigned int> >=^I}}{deque<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > > >={__split_buffer<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > *, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > *> >=^^{vector<unsigned int, std::__1::allocator<unsigned int> >}^^{vector<unsigned int, std::__1::allocator<unsigned int> >}^^{vector<unsigned int, std::__1::allocator<unsigned int> >}{__compressed_pair<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > **, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > *> >=^^{vector<unsigned int, std::__1::allocator<unsigned int> >}}}Q{__compressed_pair<unsigned long, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > > >=Q}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}i}{MotionOverride=i{CLMotionActivity=iiiiBfdBiddii{?=b1b1b1b1b1}}q{WorkoutSettings=[16C]q(WorkoutAttrib={SwimAttrib=qd})}}{deque<double, std::__1::allocator<double> >={__split_buffer<double *, std::__1::allocator<double *> >=^^d^^d^^d{__compressed_pair<double **, std::__1::allocator<double *> >=^^d}}Q{__compressed_pair<unsigned long, std::__1::allocator<double> >=Q}}{CLNatalieInput<CLExtendedStepCountEntry>=^^?*d{deque<CLExtendedStepCountEntry, std::__1::allocator<CLExtendedStepCountEntry> >={__split_buffer<CLExtendedStepCountEntry *, std::__1::allocator<CLExtendedStepCountEntry *> >=^^{CLExtendedStepCountEntry}^^{CLExtendedStepCountEntry}^^{CLExtendedStepCountEntry}{__compressed_pair<CLExtendedStepCountEntry **, std::__1::allocator<CLExtendedStepCountEntry *> >=^^{CLExtendedStepCountEntry}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLExtendedStepCountEntry> >=Q}}dBddddBB}^{CLNatalieInput<CLOdometerEntry>}i{CLPedometerPaceFusion=^{CLNatalieInput<CLOdometerEntry>}ddddddd{FirstOrderFilter<double>=idd}{FirstOrderFilter<double>=idd}iiB}iQddiiddddB}B@(NotificationData={CLStepCountEntry=dddIddIIdddi^{__CFString}BB{CLAccelerometerPace=ddd}IIC}{CLExtendedStepCountEntry=d{CLStepCountEntry=dddIddIIdddi^{__CFString}BB{CLAccelerometerPace=ddd}IIC}{CLStepCountEntryAddition=ddIddddBd}}{CLPedometerEvent=di})Bq{CLBodyMetrics=iffffffffif}Bi{unique_ptr<CLMotionStateMediator_Type::Client, std::__1::default_delete<CLMotionStateMediator_Type::Client> >={__compressed_pair<CLMotionStateMediator_Type::Client *, std::__1::default_delete<CLMotionStateMediator_Type::Client> >=^{Client}}}{unique_ptr<CLNatalimetryNotifier_Type::Client, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >={__compressed_pair<CLNatalimetryNotifier_Type::Client *, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >=^{Client}}}^{Dispatcher}^{Dispatcher}}>16
@"NSArray"16@0:8
v32@0:8q16@?<v@?@"NSArray">24
v24@0:8@?<v@?@"NSMutableArray"@"NSMutableArray"@"NSMutableArray">16
^{CLStepCountNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{shared_ptr<CLStepCountRecorderDb>=^{CLStepCountRecorderDb}^{__shared_weak_count}}{CLActivityAggregator<CLStepCountEntry, CLActivityDB::NoDataProtectionPolicy>={vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}^{CLAggregationRule}{__compressed_pair<CLAggregationRule *, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}}}{shared_ptr<CLActivityRecorderDb<CLStepCountEntry, CLActivityDB::NoDataProtectionPolicy> >=^{CLActivityRecorderDb<CLStepCountEntry, CLActivityDB::NoDataProtectionPolicy>}^{__shared_weak_count}}BB}@@{CLNatalieSourceFromNotifier<CLOdometerEntry>=^^?*d{deque<CLOdometerEntry, std::__1::allocator<CLOdometerEntry> >={__split_buffer<CLOdometerEntry *, std::__1::allocator<CLOdometerEntry *> >=^^{CLOdometerEntry}^^{CLOdometerEntry}^^{CLOdometerEntry}{__compressed_pair<CLOdometerEntry **, std::__1::allocator<CLOdometerEntry *> >=^^{CLOdometerEntry}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLOdometerEntry> >=Q}}dBddddBB@{unique_ptr<CLOdometerNotifier_Type::Client, std::__1::default_delete<CLOdometerNotifier_Type::Client> >={__compressed_pair<CLOdometerNotifier_Type::Client *, std::__1::default_delete<CLOdometerNotifier_Type::Client> >=^{Client}}}}{CLStepDistanceFusion={CLOdometerQuality=^^?{vector<unsigned int, std::__1::allocator<unsigned int> >=^I^I{__compressed_pair<unsigned int *, std::__1::allocator<unsigned int> >=^I}}{deque<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > > >={__split_buffer<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > *, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > *> >=^^{vector<unsigned int, std::__1::allocator<unsigned int> >}^^{vector<unsigned int, std::__1::allocator<unsigned int> >}^^{vector<unsigned int, std::__1::allocator<unsigned int> >}{__compressed_pair<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > **, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > *> >=^^{vector<unsigned int, std::__1::allocator<unsigned int> >}}}Q{__compressed_pair<unsigned long, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > > >=Q}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}i}{MotionOverride=i{CLMotionActivity=iiiiBfdBiddii{?=b1b1b1b1b1}}q{WorkoutSettings=[16C]q(WorkoutAttrib={SwimAttrib=qd})}}{deque<double, std::__1::allocator<double> >={__split_buffer<double *, std::__1::allocator<double *> >=^^d^^d^^d{__compressed_pair<double **, std::__1::allocator<double *> >=^^d}}Q{__compressed_pair<unsigned long, std::__1::allocator<double> >=Q}}{CLNatalieInput<CLExtendedStepCountEntry>=^^?*d{deque<CLExtendedStepCountEntry, std::__1::allocator<CLExtendedStepCountEntry> >={__split_buffer<CLExtendedStepCountEntry *, std::__1::allocator<CLExtendedStepCountEntry *> >=^^{CLExtendedStepCountEntry}^^{CLExtendedStepCountEntry}^^{CLExtendedStepCountEntry}{__compressed_pair<CLExtendedStepCountEntry **, std::__1::allocator<CLExtendedStepCountEntry *> >=^^{CLExtendedStepCountEntry}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLExtendedStepCountEntry> >=Q}}dBddddBB}^{CLNatalieInput<CLOdometerEntry>}i{CLPedometerPaceFusion=^{CLNatalieInput<CLOdometerEntry>}ddddddd{FirstOrderFilter<double>=idd}{FirstOrderFilter<double>=idd}iiB}iQddiiddddB}B@(NotificationData={CLStepCountEntry=dddIddIIdddi^{__CFString}BB{CLAccelerometerPace=ddd}IIC}{CLExtendedStepCountEntry=d{CLStepCountEntry=dddIddIIdddi^{__CFString}BB{CLAccelerometerPace=ddd}IIC}{CLStepCountEntryAddition=ddIddddBd}}{CLPedometerEvent=di})Bq{CLBodyMetrics=iffffffffif}Bi{unique_ptr<CLMotionStateMediator_Type::Client, std::__1::default_delete<CLMotionStateMediator_Type::Client> >={__compressed_pair<CLMotionStateMediator_Type::Client *, std::__1::default_delete<CLMotionStateMediator_Type::Client> >=^{Client}}}{unique_ptr<CLNatalimetryNotifier_Type::Client, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >={__compressed_pair<CLNatalimetryNotifier_Type::Client *, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >=^{Client}}}^{Dispatcher}^{Dispatcher}}16@0:8
v144@0:8{CLSwimEntry=Q[16C][16C]ddddddiiiifffi}16@?136
v24@0:8@?<v@?^{CLSwimNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{unique_ptr<CLOdometerNotifier_Type::Client, std::__1::default_delete<CLOdometerNotifier_Type::Client> >={__compressed_pair<CLOdometerNotifier_Type::Client *, std::__1::default_delete<CLOdometerNotifier_Type::Client> >=^{Client}}}B{unique_ptr<CLServiceLocationProvider, std::__1::default_delete<CLServiceLocationProvider> >={__compressed_pair<CLServiceLocationProvider *, std::__1::default_delete<CLServiceLocationProvider> >=^{CLServiceLocationProvider}}}{unique_ptr<CLServiceLocationProvider_Type::Client, std::__1::default_delete<CLServiceLocationProvider_Type::Client> >={__compressed_pair<CLServiceLocationProvider_Type::Client *, std::__1::default_delete<CLServiceLocationProvider_Type::Client> >=^{Client}}}@@{unique_ptr<CLSwimAlgController, std::__1::default_delete<CLSwimAlgController> >={__compressed_pair<CLSwimAlgController *, std::__1::default_delete<CLSwimAlgController> >=^{CLSwimAlgController}}}{CLSwimDataStore=^^?{vector<CLSwimStrokesPerTurnDistribution, std::__1::allocator<CLSwimStrokesPerTurnDistribution> >=^{CLSwimStrokesPerTurnDistribution}^{CLSwimStrokesPerTurnDistribution}{__compressed_pair<CLSwimStrokesPerTurnDistribution *, std::__1::allocator<CLSwimStrokesPerTurnDistribution> >=^{CLSwimStrokesPerTurnDistribution}}}{deque<CLSwimDataInterface::StrokeEntry, std::__1::allocator<CLSwimDataInterface::StrokeEntry> >={__split_buffer<CLSwimDataInterface::StrokeEntry *, std::__1::allocator<CLSwimDataInterface::StrokeEntry *> >=^^{StrokeEntry}^^{StrokeEntry}^^{StrokeEntry}{__compressed_pair<CLSwimDataInterface::StrokeEntry **, std::__1::allocator<CLSwimDataInterface::StrokeEntry *> >=^^{StrokeEntry}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLSwimDataInterface::StrokeEntry> >=Q}}{deque<CLSwimDetectedTurn, std::__1::allocator<CLSwimDetectedTurn> >={__split_buffer<CLSwimDetectedTurn *, std::__1::allocator<CLSwimDetectedTurn *> >=^^{CLSwimDetectedTurn}^^{CLSwimDetectedTurn}^^{CLSwimDetectedTurn}{__compressed_pair<CLSwimDetectedTurn **, std::__1::allocator<CLSwimDetectedTurn *> >=^^{CLSwimDetectedTurn}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLSwimDetectedTurn> >=Q}}{deque<CLSwimEntry, std::__1::allocator<CLSwimEntry> >={__split_buffer<CLSwimEntry *, std::__1::allocator<CLSwimEntry *> >=^^{CLSwimEntry}^^{CLSwimEntry}^^{CLSwimEntry}{__compressed_pair<CLSwimEntry **, std::__1::allocator<CLSwimEntry *> >=^^{CLSwimEntry}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLSwimEntry> >=Q}}[6{CLSwimStrokesPerTurnDistribution=[16C][16C]diddiddddd}][6B]{deque<CLSwimDataStore::StyleEntry, std::__1::allocator<CLSwimDataStore::StyleEntry> >={__split_buffer<CLSwimDataStore::StyleEntry *, std::__1::allocator<CLSwimDataStore::StyleEntry *> >=^^{StyleEntry}^^{StyleEntry}^^{StyleEntry}{__compressed_pair<CLSwimDataStore::StyleEntry **, std::__1::allocator<CLSwimDataStore::StyleEntry *> >=^^{StyleEntry}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLSwimDataStore::StyleEntry> >=Q}}ddf[16C][16C]difBBB{CLSwimPersistence=^^?{auto_ptr<CLSqliteDatabase>=^{CLSqliteDatabase}}*{BasicMutex=^^?^{MutexInfo}}B{deque<CLSwimEntry, std::__1::allocator<CLSwimEntry> >={__split_buffer<CLSwimEntry *, std::__1::allocator<CLSwimEntry *> >=^^{CLSwimEntry}^^{CLSwimEntry}^^{CLSwimEntry}{__compressed_pair<CLSwimEntry **, std::__1::allocator<CLSwimEntry *> >=^^{CLSwimEntry}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLSwimEntry> >=Q}}ifi{CLSwimEntry=Q[16C][16C]ddddddiiiifffi}i@{NoDataProtectionPolicy=}}{CLSwimStrokeRateEstimator={CLMedianFilter<double>=^^?I{deque<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long>, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> > >={__split_buffer<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> *, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> *> >=^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long>}^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long>}^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long>}{__compressed_pair<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> **, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> *> >=^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long>}}}Q{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> > >=Q}}{multiset<double, std::__1::less<double>, std::__1::allocator<double> >={__tree<double, std::__1::less<double>, std::__1::allocator<double> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<double, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<double> >=Q}}}}dd}{CLSwimDistanceEstimatorLap=^^?^{CLSwimDataInterface}ii{Estimates=f[6f]}}{CLSwimDistanceEstimatorOpenWater=^^?^{CLSwimDataInterface}{Estimates=f[6f]}iddddd}^{CLSwimDistanceEstimator}q{CLSwimStyleAggregator=[6I]I}{Diagnostics=Id}}{unique_ptr<CLSwimFusion, std::__1::default_delete<CLSwimFusion> >={__compressed_pair<CLSwimFusion *, std::__1::default_delete<CLSwimFusion> >=^{CLSwimFusion}}}^{Dispatcher}^{Dispatcher}^{Dispatcher}{CLGizmoOrientation=ii}{unique_ptr<CLMotionStateMediator_Type::Client, std::__1::default_delete<CLMotionStateMediator_Type::Client> >={__compressed_pair<CLMotionStateMediator_Type::Client *, std::__1::default_delete<CLMotionStateMediator_Type::Client> >=^{Client}}}{unique_ptr<CLWatchOrientationSettingsNotifier_Type::Client, std::__1::default_delete<CLWatchOrientationSettingsNotifier_Type::Client> >={__compressed_pair<CLWatchOrientationSettingsNotifier_Type::Client *, std::__1::default_delete<CLWatchOrientationSettingsNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLNatalimetryNotifier_Type::Client, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >={__compressed_pair<CLNatalimetryNotifier_Type::Client *, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >=^{Client}}}BBBB@@}>16
v32@0:8@?<v@?^{CLSwimNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{unique_ptr<CLOdometerNotifier_Type::Client, std::__1::default_delete<CLOdometerNotifier_Type::Client> >={__compressed_pair<CLOdometerNotifier_Type::Client *, std::__1::default_delete<CLOdometerNotifier_Type::Client> >=^{Client}}}B{unique_ptr<CLServiceLocationProvider, std::__1::default_delete<CLServiceLocationProvider> >={__compressed_pair<CLServiceLocationProvider *, std::__1::default_delete<CLServiceLocationProvider> >=^{CLServiceLocationProvider}}}{unique_ptr<CLServiceLocationProvider_Type::Client, std::__1::default_delete<CLServiceLocationProvider_Type::Client> >={__compressed_pair<CLServiceLocationProvider_Type::Client *, std::__1::default_delete<CLServiceLocationProvider_Type::Client> >=^{Client}}}@@{unique_ptr<CLSwimAlgController, std::__1::default_delete<CLSwimAlgController> >={__compressed_pair<CLSwimAlgController *, std::__1::default_delete<CLSwimAlgController> >=^{CLSwimAlgController}}}{CLSwimDataStore=^^?{vector<CLSwimStrokesPerTurnDistribution, std::__1::allocator<CLSwimStrokesPerTurnDistribution> >=^{CLSwimStrokesPerTurnDistribution}^{CLSwimStrokesPerTurnDistribution}{__compressed_pair<CLSwimStrokesPerTurnDistribution *, std::__1::allocator<CLSwimStrokesPerTurnDistribution> >=^{CLSwimStrokesPerTurnDistribution}}}{deque<CLSwimDataInterface::StrokeEntry, std::__1::allocator<CLSwimDataInterface::StrokeEntry> >={__split_buffer<CLSwimDataInterface::StrokeEntry *, std::__1::allocator<CLSwimDataInterface::StrokeEntry *> >=^^{StrokeEntry}^^{StrokeEntry}^^{StrokeEntry}{__compressed_pair<CLSwimDataInterface::StrokeEntry **, std::__1::allocator<CLSwimDataInterface::StrokeEntry *> >=^^{StrokeEntry}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLSwimDataInterface::StrokeEntry> >=Q}}{deque<CLSwimDetectedTurn, std::__1::allocator<CLSwimDetectedTurn> >={__split_buffer<CLSwimDetectedTurn *, std::__1::allocator<CLSwimDetectedTurn *> >=^^{CLSwimDetectedTurn}^^{CLSwimDetectedTurn}^^{CLSwimDetectedTurn}{__compressed_pair<CLSwimDetectedTurn **, std::__1::allocator<CLSwimDetectedTurn *> >=^^{CLSwimDetectedTurn}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLSwimDetectedTurn> >=Q}}{deque<CLSwimEntry, std::__1::allocator<CLSwimEntry> >={__split_buffer<CLSwimEntry *, std::__1::allocator<CLSwimEntry *> >=^^{CLSwimEntry}^^{CLSwimEntry}^^{CLSwimEntry}{__compressed_pair<CLSwimEntry **, std::__1::allocator<CLSwimEntry *> >=^^{CLSwimEntry}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLSwimEntry> >=Q}}[6{CLSwimStrokesPerTurnDistribution=[16C][16C]diddiddddd}][6B]{deque<CLSwimDataStore::StyleEntry, std::__1::allocator<CLSwimDataStore::StyleEntry> >={__split_buffer<CLSwimDataStore::StyleEntry *, std::__1::allocator<CLSwimDataStore::StyleEntry *> >=^^{StyleEntry}^^{StyleEntry}^^{StyleEntry}{__compressed_pair<CLSwimDataStore::StyleEntry **, std::__1::allocator<CLSwimDataStore::StyleEntry *> >=^^{StyleEntry}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLSwimDataStore::StyleEntry> >=Q}}ddf[16C][16C]difBBB{CLSwimPersistence=^^?{auto_ptr<CLSqliteDatabase>=^{CLSqliteDatabase}}*{BasicMutex=^^?^{MutexInfo}}B{deque<CLSwimEntry, std::__1::allocator<CLSwimEntry> >={__split_buffer<CLSwimEntry *, std::__1::allocator<CLSwimEntry *> >=^^{CLSwimEntry}^^{CLSwimEntry}^^{CLSwimEntry}{__compressed_pair<CLSwimEntry **, std::__1::allocator<CLSwimEntry *> >=^^{CLSwimEntry}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLSwimEntry> >=Q}}ifi{CLSwimEntry=Q[16C][16C]ddddddiiiifffi}i@{NoDataProtectionPolicy=}}{CLSwimStrokeRateEstimator={CLMedianFilter<double>=^^?I{deque<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long>, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> > >={__split_buffer<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> *, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> *> >=^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long>}^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long>}^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long>}{__compressed_pair<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> **, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> *> >=^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long>}}}Q{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> > >=Q}}{multiset<double, std::__1::less<double>, std::__1::allocator<double> >={__tree<double, std::__1::less<double>, std::__1::allocator<double> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<double, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<double> >=Q}}}}dd}{CLSwimDistanceEstimatorLap=^^?^{CLSwimDataInterface}ii{Estimates=f[6f]}}{CLSwimDistanceEstimatorOpenWater=^^?^{CLSwimDataInterface}{Estimates=f[6f]}iddddd}^{CLSwimDistanceEstimator}q{CLSwimStyleAggregator=[6I]I}{Diagnostics=Id}}{unique_ptr<CLSwimFusion, std::__1::default_delete<CLSwimFusion> >={__compressed_pair<CLSwimFusion *, std::__1::default_delete<CLSwimFusion> >=^{CLSwimFusion}}}^{Dispatcher}^{Dispatcher}^{Dispatcher}{CLGizmoOrientation=ii}{unique_ptr<CLMotionStateMediator_Type::Client, std::__1::default_delete<CLMotionStateMediator_Type::Client> >={__compressed_pair<CLMotionStateMediator_Type::Client *, std::__1::default_delete<CLMotionStateMediator_Type::Client> >=^{Client}}}{unique_ptr<CLWatchOrientationSettingsNotifier_Type::Client, std::__1::default_delete<CLWatchOrientationSettingsNotifier_Type::Client> >={__compressed_pair<CLWatchOrientationSettingsNotifier_Type::Client *, std::__1::default_delete<CLWatchOrientationSettingsNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLNatalimetryNotifier_Type::Client, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >={__compressed_pair<CLNatalimetryNotifier_Type::Client *, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >=^{Client}}}BBBB@@}>16@?<v@?>24
B24@0:8@?<v@?^{CLSwimNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{unique_ptr<CLOdometerNotifier_Type::Client, std::__1::default_delete<CLOdometerNotifier_Type::Client> >={__compressed_pair<CLOdometerNotifier_Type::Client *, std::__1::default_delete<CLOdometerNotifier_Type::Client> >=^{Client}}}B{unique_ptr<CLServiceLocationProvider, std::__1::default_delete<CLServiceLocationProvider> >={__compressed_pair<CLServiceLocationProvider *, std::__1::default_delete<CLServiceLocationProvider> >=^{CLServiceLocationProvider}}}{unique_ptr<CLServiceLocationProvider_Type::Client, std::__1::default_delete<CLServiceLocationProvider_Type::Client> >={__compressed_pair<CLServiceLocationProvider_Type::Client *, std::__1::default_delete<CLServiceLocationProvider_Type::Client> >=^{Client}}}@@{unique_ptr<CLSwimAlgController, std::__1::default_delete<CLSwimAlgController> >={__compressed_pair<CLSwimAlgController *, std::__1::default_delete<CLSwimAlgController> >=^{CLSwimAlgController}}}{CLSwimDataStore=^^?{vector<CLSwimStrokesPerTurnDistribution, std::__1::allocator<CLSwimStrokesPerTurnDistribution> >=^{CLSwimStrokesPerTurnDistribution}^{CLSwimStrokesPerTurnDistribution}{__compressed_pair<CLSwimStrokesPerTurnDistribution *, std::__1::allocator<CLSwimStrokesPerTurnDistribution> >=^{CLSwimStrokesPerTurnDistribution}}}{deque<CLSwimDataInterface::StrokeEntry, std::__1::allocator<CLSwimDataInterface::StrokeEntry> >={__split_buffer<CLSwimDataInterface::StrokeEntry *, std::__1::allocator<CLSwimDataInterface::StrokeEntry *> >=^^{StrokeEntry}^^{StrokeEntry}^^{StrokeEntry}{__compressed_pair<CLSwimDataInterface::StrokeEntry **, std::__1::allocator<CLSwimDataInterface::StrokeEntry *> >=^^{StrokeEntry}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLSwimDataInterface::StrokeEntry> >=Q}}{deque<CLSwimDetectedTurn, std::__1::allocator<CLSwimDetectedTurn> >={__split_buffer<CLSwimDetectedTurn *, std::__1::allocator<CLSwimDetectedTurn *> >=^^{CLSwimDetectedTurn}^^{CLSwimDetectedTurn}^^{CLSwimDetectedTurn}{__compressed_pair<CLSwimDetectedTurn **, std::__1::allocator<CLSwimDetectedTurn *> >=^^{CLSwimDetectedTurn}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLSwimDetectedTurn> >=Q}}{deque<CLSwimEntry, std::__1::allocator<CLSwimEntry> >={__split_buffer<CLSwimEntry *, std::__1::allocator<CLSwimEntry *> >=^^{CLSwimEntry}^^{CLSwimEntry}^^{CLSwimEntry}{__compressed_pair<CLSwimEntry **, std::__1::allocator<CLSwimEntry *> >=^^{CLSwimEntry}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLSwimEntry> >=Q}}[6{CLSwimStrokesPerTurnDistribution=[16C][16C]diddiddddd}][6B]{deque<CLSwimDataStore::StyleEntry, std::__1::allocator<CLSwimDataStore::StyleEntry> >={__split_buffer<CLSwimDataStore::StyleEntry *, std::__1::allocator<CLSwimDataStore::StyleEntry *> >=^^{StyleEntry}^^{StyleEntry}^^{StyleEntry}{__compressed_pair<CLSwimDataStore::StyleEntry **, std::__1::allocator<CLSwimDataStore::StyleEntry *> >=^^{StyleEntry}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLSwimDataStore::StyleEntry> >=Q}}ddf[16C][16C]difBBB{CLSwimPersistence=^^?{auto_ptr<CLSqliteDatabase>=^{CLSqliteDatabase}}*{BasicMutex=^^?^{MutexInfo}}B{deque<CLSwimEntry, std::__1::allocator<CLSwimEntry> >={__split_buffer<CLSwimEntry *, std::__1::allocator<CLSwimEntry *> >=^^{CLSwimEntry}^^{CLSwimEntry}^^{CLSwimEntry}{__compressed_pair<CLSwimEntry **, std::__1::allocator<CLSwimEntry *> >=^^{CLSwimEntry}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLSwimEntry> >=Q}}ifi{CLSwimEntry=Q[16C][16C]ddddddiiiifffi}i@{NoDataProtectionPolicy=}}{CLSwimStrokeRateEstimator={CLMedianFilter<double>=^^?I{deque<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long>, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> > >={__split_buffer<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> *, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> *> >=^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long>}^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long>}^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long>}{__compressed_pair<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> **, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> *> >=^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long>}}}Q{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> > >=Q}}{multiset<double, std::__1::less<double>, std::__1::allocator<double> >={__tree<double, std::__1::less<double>, std::__1::allocator<double> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<double, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<double> >=Q}}}}dd}{CLSwimDistanceEstimatorLap=^^?^{CLSwimDataInterface}ii{Estimates=f[6f]}}{CLSwimDistanceEstimatorOpenWater=^^?^{CLSwimDataInterface}{Estimates=f[6f]}iddddd}^{CLSwimDistanceEstimator}q{CLSwimStyleAggregator=[6I]I}{Diagnostics=Id}}{unique_ptr<CLSwimFusion, std::__1::default_delete<CLSwimFusion> >={__compressed_pair<CLSwimFusion *, std::__1::default_delete<CLSwimFusion> >=^{CLSwimFusion}}}^{Dispatcher}^{Dispatcher}^{Dispatcher}{CLGizmoOrientation=ii}{unique_ptr<CLMotionStateMediator_Type::Client, std::__1::default_delete<CLMotionStateMediator_Type::Client> >={__compressed_pair<CLMotionStateMediator_Type::Client *, std::__1::default_delete<CLMotionStateMediator_Type::Client> >=^{Client}}}{unique_ptr<CLWatchOrientationSettingsNotifier_Type::Client, std::__1::default_delete<CLWatchOrientationSettingsNotifier_Type::Client> >={__compressed_pair<CLWatchOrientationSettingsNotifier_Type::Client *, std::__1::default_delete<CLWatchOrientationSettingsNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLNatalimetryNotifier_Type::Client, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >={__compressed_pair<CLNatalimetryNotifier_Type::Client *, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >=^{Client}}}BBBB@@}>16
v144@0:8{CLSwimEntry=Q[16C][16C]ddddddiiiifffi}16@?<v@?@"NSArray">136
^{CLSwimNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}@@@{map<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=Q}}}{map<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=Q}}}iB{unique_ptr<CLOdometerNotifier_Type::Client, std::__1::default_delete<CLOdometerNotifier_Type::Client> >={__compressed_pair<CLOdometerNotifier_Type::Client *, std::__1::default_delete<CLOdometerNotifier_Type::Client> >=^{Client}}}B{unique_ptr<CLServiceLocationProvider, std::__1::default_delete<CLServiceLocationProvider> >={__compressed_pair<CLServiceLocationProvider *, std::__1::default_delete<CLServiceLocationProvider> >=^{CLServiceLocationProvider}}}{unique_ptr<CLServiceLocationProvider_Type::Client, std::__1::default_delete<CLServiceLocationProvider_Type::Client> >={__compressed_pair<CLServiceLocationProvider_Type::Client *, std::__1::default_delete<CLServiceLocationProvider_Type::Client> >=^{Client}}}@@{unique_ptr<CLSwimAlgController, std::__1::default_delete<CLSwimAlgController> >={__compressed_pair<CLSwimAlgController *, std::__1::default_delete<CLSwimAlgController> >=^{CLSwimAlgController}}}{CLSwimDataStore=^^?{vector<CLSwimStrokesPerTurnDistribution, std::__1::allocator<CLSwimStrokesPerTurnDistribution> >=^{CLSwimStrokesPerTurnDistribution}^{CLSwimStrokesPerTurnDistribution}{__compressed_pair<CLSwimStrokesPerTurnDistribution *, std::__1::allocator<CLSwimStrokesPerTurnDistribution> >=^{CLSwimStrokesPerTurnDistribution}}}{deque<CLSwimDataInterface::StrokeEntry, std::__1::allocator<CLSwimDataInterface::StrokeEntry> >={__split_buffer<CLSwimDataInterface::StrokeEntry *, std::__1::allocator<CLSwimDataInterface::StrokeEntry *> >=^^{StrokeEntry}^^{StrokeEntry}^^{StrokeEntry}{__compressed_pair<CLSwimDataInterface::StrokeEntry **, std::__1::allocator<CLSwimDataInterface::StrokeEntry *> >=^^{StrokeEntry}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLSwimDataInterface::StrokeEntry> >=Q}}{deque<CLSwimDetectedTurn, std::__1::allocator<CLSwimDetectedTurn> >={__split_buffer<CLSwimDetectedTurn *, std::__1::allocator<CLSwimDetectedTurn *> >=^^{CLSwimDetectedTurn}^^{CLSwimDetectedTurn}^^{CLSwimDetectedTurn}{__compressed_pair<CLSwimDetectedTurn **, std::__1::allocator<CLSwimDetectedTurn *> >=^^{CLSwimDetectedTurn}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLSwimDetectedTurn> >=Q}}{deque<CLSwimEntry, std::__1::allocator<CLSwimEntry> >={__split_buffer<CLSwimEntry *, std::__1::allocator<CLSwimEntry *> >=^^{CLSwimEntry}^^{CLSwimEntry}^^{CLSwimEntry}{__compressed_pair<CLSwimEntry **, std::__1::allocator<CLSwimEntry *> >=^^{CLSwimEntry}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLSwimEntry> >=Q}}[6{CLSwimStrokesPerTurnDistribution=[16C][16C]diddiddddd}][6B]{deque<CLSwimDataStore::StyleEntry, std::__1::allocator<CLSwimDataStore::StyleEntry> >={__split_buffer<CLSwimDataStore::StyleEntry *, std::__1::allocator<CLSwimDataStore::StyleEntry *> >=^^{StyleEntry}^^{StyleEntry}^^{StyleEntry}{__compressed_pair<CLSwimDataStore::StyleEntry **, std::__1::allocator<CLSwimDataStore::StyleEntry *> >=^^{StyleEntry}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLSwimDataStore::StyleEntry> >=Q}}ddf[16C][16C]difBBB{CLSwimPersistence=^^?{auto_ptr<CLSqliteDatabase>=^{CLSqliteDatabase}}*{BasicMutex=^^?^{MutexInfo}}B{deque<CLSwimEntry, std::__1::allocator<CLSwimEntry> >={__split_buffer<CLSwimEntry *, std::__1::allocator<CLSwimEntry *> >=^^{CLSwimEntry}^^{CLSwimEntry}^^{CLSwimEntry}{__compressed_pair<CLSwimEntry **, std::__1::allocator<CLSwimEntry *> >=^^{CLSwimEntry}}}Q{__compressed_pair<unsigned long, std::__1::allocator<CLSwimEntry> >=Q}}ifi{CLSwimEntry=Q[16C][16C]ddddddiiiifffi}i@{NoDataProtectionPolicy=}}{CLSwimStrokeRateEstimator={CLMedianFilter<double>=^^?I{deque<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long>, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> > >={__split_buffer<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> *, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> *> >=^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long>}^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long>}^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long>}{__compressed_pair<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> **, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> *> >=^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long>}}}Q{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, long> > >=Q}}{multiset<double, std::__1::less<double>, std::__1::allocator<double> >={__tree<double, std::__1::less<double>, std::__1::allocator<double> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<double, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<double> >=Q}}}}dd}{CLSwimDistanceEstimatorLap=^^?^{CLSwimDataInterface}ii{Estimates=f[6f]}}{CLSwimDistanceEstimatorOpenWater=^^?^{CLSwimDataInterface}{Estimates=f[6f]}iddddd}^{CLSwimDistanceEstimator}q{CLSwimStyleAggregator=[6I]I}{Diagnostics=Id}}{unique_ptr<CLSwimFusion, std::__1::default_delete<CLSwimFusion> >={__compressed_pair<CLSwimFusion *, std::__1::default_delete<CLSwimFusion> >=^{CLSwimFusion}}}^{Dispatcher}^{Dispatcher}^{Dispatcher}{CLGizmoOrientation=ii}{unique_ptr<CLMotionStateMediator_Type::Client, std::__1::default_delete<CLMotionStateMediator_Type::Client> >={__compressed_pair<CLMotionStateMediator_Type::Client *, std::__1::default_delete<CLMotionStateMediator_Type::Client> >=^{Client}}}{unique_ptr<CLWatchOrientationSettingsNotifier_Type::Client, std::__1::default_delete<CLWatchOrientationSettingsNotifier_Type::Client> >={__compressed_pair<CLWatchOrientationSettingsNotifier_Type::Client *, std::__1::default_delete<CLWatchOrientationSettingsNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLNatalimetryNotifier_Type::Client, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >={__compressed_pair<CLNatalimetryNotifier_Type::Client *, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >=^{Client}}}BBBB@@}16@0:8
B24@0:8q16
bplist00
 !"#$%!&_
BuildMachineOSBuild_
CFBundleDevelopmentRegion_
CFBundleExecutable_
CFBundleIdentifier_
CFBundleInfoDictionaryVersion_
CFBundlePackageType_
CFBundleSignature_
CFBundleSupportedPlatforms_
CFBundleVersionZDTCompiler_
DTPlatformBuild^DTPlatformName_
DTPlatformVersionZDTSDKBuildYDTSDKNameWDTXcode\DTXcodeBuild_
MinimumOSVersion^UIDeviceFamilyW16B2657WEnglishYlocationd_
com.apple.locationdS6.0TAPPLT????
AppleTVSimulatorT2201_
"com.apple.compilers.llvm.clang.1_0P_
appletvsimulatorT11.0V15J307_
appletvsimulator11.0T0900V9M136i
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>application-identifier</key>
<string>com.apple.locationd</string>
<key>aps-connection-initiate</key>
<true/>
<key>backupd-connection-initiate</key>
<true/>
<key>com.apple.BTServer.appleMfgDataScanner</key>
<true/>
<key>com.apple.CommCenter.fine-grained</key>
<array>
<string>spi</string>
<string>identity</string>
<string>bb-xpc</string>
<string>phone</string>
</array>
<key>com.apple.CoreLocation.PrivateMode</key>
<true/>
<key>com.apple.CoreRoutine.LocationOfInterest</key>
<true/>
<key>com.apple.CoreRoutine.ScenarioTrigger</key>
<true/>
<key>com.apple.CoreRoutine.Visit</key>
<true/>
<key>com.apple.SystemConfiguration.SCPreferences-write-access</key>
<array>
<string>com.apple.AutoWake.xml</string>
</array>
<key>com.apple.accounts.appleaccount.fullaccess</key>
<true/>
<key>com.apple.backboard.client</key>
<true/>
<key>com.apple.backboardd.proximityDetection</key>
<true/>
<key>com.apple.carousel.viewonwakeaccess</key>
<true/>
<key>com.apple.companionappd.connect.allow</key>
<true/>
<key>com.apple.coreduet.context</key>
<true/>
<key>com.apple.coreduetd.allow</key>
<true/>
<key>com.apple.developer.extension-host.widget-extension</key>
<true/>
<key>com.apple.developer.healthkit</key>
<true/>
<key>com.apple.geoservices.navigation_info</key>
<true/>
<key>com.apple.geoservices.traffic_probe</key>
<true/>
<key>com.apple.itunesstored.private</key>
<true/>
<key>com.apple.locationd.activity</key>
<true/>
<key>com.apple.locationd.advertise-beacon</key>
<true/>
<key>com.apple.locationd.authorizeapplications</key>
<true/>
<key>com.apple.locationd.configure</key>
<true/>
<key>com.apple.locationd.effective_bundle</key>
<true/>
<key>com.apple.locationd.integritycheck</key>
<true/>
<key>com.apple.locationd.mock_testing</key>
<true/>
<key>com.apple.locationd.motion_alarms</key>
<true/>
<key>com.apple.locationd.natalimetry</key>
<true/>
<key>com.apple.locationd.on_body_detection</key>
<true/>
<key>com.apple.locationd.private_info</key>
<true/>
<key>com.apple.locationd.prompt_behavior</key>
<true/>
<key>com.apple.locationd.ranging</key>
<true/>
<key>com.apple.locationd.rebuild_gytt</key>
<true/>
<key>com.apple.locationd.route_hint</key>
<true/>
<key>com.apple.locationd.sedentary_timer</key>
<true/>
<key>com.apple.locationd.simulation</key>
<true/>
<key>com.apple.locationd.spectator</key>
<true/>
<key>com.apple.locationd.status</key>
<true/>
<key>com.apple.locationd.time_zone</key>
<true/>
<key>com.apple.locationd.usage_oracle</key>
<true/>
<key>com.apple.locationd.vehicle_data</key>
<true/>
<key>com.apple.managedconfiguration.profiled-access</key>
<true/>
<key>com.apple.multitasking.unlimitedassertions</key>
<true/>
<key>com.apple.nano.nanoregistry</key>
<true/>
<key>com.apple.pairedsync.progressObserver</key>
<true/>
<key>com.apple.pipelined</key>
<array>
<string>positioning</string>
</array>
<key>com.apple.private.carkit.dnd</key>
<true/>
<key>com.apple.private.externalaccessory.showallaccessories</key>
<true/>
<key>com.apple.private.healthkit</key>
<true/>
<key>com.apple.private.healthkit.authorization_bypass</key>
<true/>
<key>com.apple.private.healthkit.local-device-source</key>
<true/>
<key>com.apple.private.hid.client.event-dispatch</key>
<true/>
<key>com.apple.private.hid.client.event-monitor</key>
<true/>
<key>com.apple.private.hid.client.service-protected</key>
<true/>
<key>com.apple.private.ids.messaging</key>
<array>
<string>com.apple.private.alloy.location.motion</string>
<string>com.apple.private.alloy.location.auth</string>
<string>com.apple.private.alloy.location.stream</string>
<string>com.apple.private.alloy.location.usage</string>
<string>com.apple.private.alloy.location.wifitilesync</string>
<string>com.apple.private.alloy.location.motion.livabilityprogram</string>
</array>
<key>com.apple.private.ids.messaging.urgent-priority</key>
<array>
<string>com.apple.private.alloy.location.auth</string>
<string>com.apple.private.alloy.location.stream</string>
<string>com.apple.private.alloy.location.motion</string>
<string>com.apple.private.alloy.location.usage</string>
<string>com.apple.private.alloy.location.motion.livabilityprogram</string>
</array>
<key>com.apple.private.kernel.override-cpumon</key>
<true/>
<key>com.apple.private.tcc.manager</key>
<true/>
<key>com.apple.security.exception.mach-lookup.global-name</key>
<array>
<string>com.apple.coreduetd.knowledge</string>
<string>com.apple.coreduetd</string>
<string>com.apple.coreduetd.context</string>
</array>
<key>com.apple.security.network.client</key>
<true/>
<key>com.apple.security.network.server</key>
<true/>
<key>com.apple.security.system-groups</key>
<array>
<string>systemgroup.com.apple.osanalytics</string>
<string>systemgroup.com.apple.sharedpclogging</string>
</array>
<key>com.apple.springboard.launchapplications</key>
<true/>
<key>com.apple.springboard.launchapplicationswithoptions</key>
<true/>
<key>com.apple.springboard.opensensitiveurl</key>
<true/>
<key>com.apple.springboard.statusbarstyleoverrides</key>
<true/>
<key>com.apple.timed</key>
<true/>
<key>com.apple.wifi.events.private</key>
<true/>
<key>com.apple.wifi.manager-access</key>
<true/>
<key>com.apple.wirelessproxd-location</key>
<true/>
<key>fairplay-client</key>
<string>465671667</string>
<key>keychain-access-groups</key>
<array>
<string>apple</string>
</array>
</dict>
</plist>
?(~:
?@)3
Un=H
?td{YX
?nTV
sue
?P-U37
?\h"
]*y?
Cv?0=
s?<V
2Zq?
Ip?1
Cgac?
CWAq
)!X?
V?x)2
A?4a 
)n@?9z
b'H<?
QQB,?
XE&?
$?Pg+
}!?P
X  ?59
>z,i
>V{@V
