alloc
init
addObject:
isEqual:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
description
debugDescription
newCommandQueue
newCommandQueueWithMaxCommandBufferCount:
heapTextureSizeAndAlignWithDescriptor:
heapBufferSizeAndAlignWithLength:options:
newHeapWithDescriptor:
newBufferWithLength:options:
newBufferWithBytes:length:options:
newBufferWithBytesNoCopy:length:options:deallocator:
newDepthStencilStateWithDescriptor:
newTextureWithDescriptor:
newSamplerStateWithDescriptor:
newDefaultLibrary
newDefaultLibraryWithBundle:error:
newLibraryWithFile:error:
newLibraryWithURL:error:
newLibraryWithData:error:
newLibraryWithSource:options:error:
newLibraryWithSource:options:completionHandler:
newRenderPipelineStateWithDescriptor:error:
newRenderPipelineStateWithDescriptor:options:reflection:error:
newRenderPipelineStateWithDescriptor:completionHandler:
newRenderPipelineStateWithDescriptor:options:completionHandler:
newComputePipelineStateWithFunction:error:
newComputePipelineStateWithFunction:options:reflection:error:
newComputePipelineStateWithFunction:completionHandler:
newComputePipelineStateWithFunction:options:completionHandler:
newComputePipelineStateWithDescriptor:options:reflection:error:
newComputePipelineStateWithDescriptor:options:completionHandler:
newFence
supportsFeatureSet:
supportsTextureSampleCount:
minimumLinearTextureAlignmentForPixelFormat:
minimumTextureBufferAlignmentForPixelFormat:
getDefaultSamplePositions:count:
newArgumentEncoderWithArguments:
newIndirectCommandBufferWithDescriptor:maxCommandCount:options:
newEvent
newSharedEvent
newSharedEventWithHandle:
name
registryID
maxThreadsPerThreadgroup
isLowPower
isHeadless
isRemovable
recommendedMaxWorkingSetSize
isDepth24Stencil8PixelFormatSupported
readWriteTextureSupport
argumentBuffersSupport
areRasterOrderGroupsSupported
currentAllocatedSize
maxThreadgroupMemoryLength
maxArgumentBufferSamplerCount
areProgrammableSamplePositionsSupported
maxBufferLength
vendorName
familyName
productName
compilerPropagatesThreadPriority:
_setDeviceWrapper:
_deviceWrapper
deviceSupportsFeatureSet:
deviceOrFeatureProfileSupportsFeatureSet:
minLinearTextureAlignmentForPixelFormat:
unloadShaderCaches
libraryCacheStats
pipelineCacheStats
supportsSampleCount:
newCommandQueueWithDescriptor:
newIndirectArgumentBufferLayoutWithStructType:
newIndirectArgumentEncoderWithLayout:
newArgumentEncoderWithLayout:
newIndirectCommandBufferWithDescriptor:maxCount:options:
newIndirectRenderCommandEncoderWithBuffer:
newSharedEventWithMachPort:
halfFPConfig
singleFPConfig
doubleFPConfig
metalAssertionsEnabled
setMetalAssertionsEnabled:
featureProfile
limits
maxColorAttachments
maxVertexAttributes
maxVertexBuffers
maxVertexTextures
maxVertexSamplers
maxVertexInlineDataSize
maxInterpolants
maxFragmentBuffers
maxFragmentTextures
maxFragmentSamplers
maxFragmentInlineDataSize
maxComputeBuffers
maxComputeTextures
maxComputeSamplers
maxComputeInlineDataSize
maxComputeLocalMemorySizes
maxTotalComputeThreadsPerThreadgroup
maxComputeThreadgroupMemory
maxLineWidth
maxPointSize
maxVisibilityQueryOffset
minConstantBufferAlignmentBytes
minBufferNoCopyAlignmentBytes
maxTextureWidth1D
maxTextureWidth2D
maxTextureHeight2D
maxTextureWidth3D
maxTextureHeight3D
maxTextureDepth3D
maxTextureDimensionCube
maxTextureLayers
linearTextureAlignmentBytes
iosurfaceTextureAlignmentBytes
iosurfaceReadOnlyTextureAlignmentBytes
deviceLinearTextureAlignmentBytes
deviceLinearReadOnlyTextureAlignmentBytes
maxFunctionConstantIndices
maxComputeThreadgroupMemoryAlignmentBytes
maxInterpolatedComponents
maxTessellationFactor
maxIndirectBuffers
maxIndirectTextures
maxIndirectSamplers
maxIndirectSamplersPerDevice
maxCustomSamplePositions
maxTextureBufferWidth
maxFramebufferStorageBits
supportPriorityBand
sharedMemorySize
dedicatedMemorySize
indirectArgumentBufferCapabilities
registerDevices
indirectArgumentBufferDecodingData
setIndirectArgumentBufferDecodingData:
setupMPSFunctionTable:
resourcePatchingTypeForResourceType:
reserveResourceIndicesForResourceType:indices:indexCount:
mapShaderSampleBufferWithBuffer:capacity:size:
unmapShaderSampleBuffer
newComputePipelineStateWithDescriptor:error:
newComputePipelineStateWithDescriptor:completionHandler:
newFunctionWithGLIR:functionType:
newFunctionWithGLIR:inputsDescription:functionType:
getShaderCacheKeys
newIndirectArgumentEncoderWithArguments:
newComputePipelineStateWithImageFilterFunctionsSPI:imageFilterFunctionInfo:error:
newLibraryWithCIFilters:imageFilterFunctionInfo:error:
newLibraryWithCIFiltersForComputePipeline:imageFilterFunctionInfo:error:
newPipelineLibraryWithFilePath:error:
startCollectingPipelineDescriptors
endCollectingPipelineDescriptors
newTextureWithBytesNoCopy:length:descriptor:deallocator:
newTextureLayoutWithDescriptor:isHeapOrBufferBacked:
shaderDebugInfoCaching
setShaderDebugInfoCaching:
indirectArgumentBuffersSupport
targetDeviceInfo
isQuadDataSharingSupported
initLimits
baseObject
stringWithCString:encoding:
bundleWithPath:
classNamed:
initWithBaseObject:parent:
standardUserDefaults
numberWithInt:
dictionaryWithObjects:forKeys:count:
UTF8String
integerForKey:
doesNotRecognizeSelector:
setRenderPipelineState:
setVertexBuffer:offset:atIndex:
setFragmentBuffer:offset:atIndex:
drawPrimitives:vertexStart:vertexCount:instanceCount:baseInstance:
drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:instanceCount:baseVertex:baseInstance:
reset
getVertexBufferAtIndex:
getFragmentBufferAtIndex:
getCommandType
drawArguments
drawIndexedArguments
drawPatchesArguments
drawIndexedPatchesArguments
getTessellationFactorArguments
getPipelineStateUniqueIdentifier
drawIndexedPatches:patchStart:patchCount:patchIndexBuffer:patchIndexBufferOffset:controlPointIndexBuffer:controlPointIndexBufferOffset:instanceCount:baseInstance:tessellationFactorBuffer:tessellationFactorBufferOffset:tessellationFactorBufferInstanceStride:
drawIndexedPatches:patchStart:patchCount:patchIndexBuffer:patchIndexBufferOffset:controlPointIndexBuffer:controlPointIndexBufferOffset:instanceCount:baseInstance:tessellationFactorBuffer:tessellationFactorBufferOffset:tessellationFactorBufferInstanceStride:tessellationFactorBufferScale:
drawPatches:patchStart:patchCount:patchIndexBuffer:patchIndexBufferOffset:instanceCount:baseInstance:tessellationFactorBuffer:tessellationFactorBufferOffset:tessellationFactorBufferInstanceStride:
drawPatches:patchStart:patchCount:patchIndexBuffer:patchIndexBufferOffset:instanceCount:baseInstance:tessellationFactorBuffer:tessellationFactorBufferOffset:tessellationFactorBufferInstanceStride:tessellationFactorBufferScale:
allocWithZone:
stride
stepFunction
stepRate
copyWithZone:
setStride:
setStepFunction:
setStepRate:
_stride
_stepFunction
_instanceStepRate
objectAtIndexedSubscript:
setObject:atIndexedSubscript:
dealloc
copy
_descriptors
format
offset
bufferIndex
setFormat:
setBufferIndex:
setOffset:
_vertexFormat
_offset
_bufferIndex
stageInputOutputDescriptor
formattedDescription:
stringWithFormat:
vertexAttributes
countByEnumeratingWithState:objects:count:
attributeIndex
isActive
attributeType
vertexDescriptor
layouts
attributes
indexType
setIndexType:
indexBufferIndex
setIndexBufferIndex:
newSerializedDescriptor
validateWithVertexFunction:error:
_vertexBufferArray
_attributeArray
_indexBufferIndex
_indexType
stringByPaddingToLength:withString:startingAtIndex:
arrayWithCapacity:
arrayWithObjects:count:
addObjectsFromArray:
numberWithUnsignedInteger:
componentsJoinedByString:
initWithFormat:arguments:
dictionaryWithObject:forKey:
errorWithDomain:code:userInfo:
commandBuffer
commandBufferWithUnretainedReferences
insertDebugCaptureBoundary
label
setLabel:
device
getAndIncrementNumCommandBuffers
getListIndex
initWithQueue:retainedReferences:synchronousDebugMode:
executeSynchronizationNotifications:
numberWithBool:
enqueueCommandBuffer:
commitCommandBuffer:wake:
commit
submitCommandBuffer:
waitUntilCompleted
present
presentAtTime:
presentAfterMinimumDuration:
addPresentedHandler:
presentedTime
drawableID
error
addScheduledHandler:
addPresentScheduledHandler:
didSchedule:error:
localizedDescription
runPerfCounterCallbackWithBlock:
numberWithUnsignedLongLong:
computeCommandEncoder
initialize
initWithQueue:retainedReferences:
enqueue
commitAndHold
commitAndWaitUntilSubmitted
commitAndReset
presentDrawable:
presentDrawable:atTime:
presentDrawable:afterMinimumDuration:
waitUntilScheduled
addCompletedHandler:
isCommitted
setCommitted:
didScheduleWithStartTime:endTime:error:
userDictionary
didCompleteWithStartTime:endTime:error:
_addRetainedObject:
kernelSubmitTime
skipRender
setCurrentCommandEncoder:
setProfilingEnabled:
isProfilingEnabled
profilingResults
getAndIncrementNumEncoders
kernelStartTime
kernelEndTime
GPUStartTime
GPUEndTime
pushDebugGroup:
popDebugGroup
addSynchronizationNotification:
executeSynchronizationNotifications:scope:resources:count:
computeCommandEncoderWithDispatchType:
retainedReferences
synchronousDebugMode
commandQueue
status
globalTraceObjectID
isStatEnabled
setStatEnabled:
setListIndex:
numThisCommandBuffer
setNumThisCommandBuffer:
numEncoders
setNumEncoders:
ownedByParallelEncoder
setOwnedByParallelEncoder:
_currentCommandEncoder
_queue
_scheduledDispatchList
_scheduledDispatchListTail
_completedDispatchList
_completedDispatchListTail
_syncDispatchList
_syncDispatchListTail
_mutex
_cond
_creationTime
_enqueueTime
_commitTime
_submitToKernelTime
_submitToHardwareTime
_completionInterruptTime
_completionHandlerEnqueueTime
_completionHandlerExecutionTime
_status
_error
_label
_skipRender
_profilingEnabled
_scheduledCallbacksDone
_completedCallbacksDone
_strongObjectReferences
_profilingResults
_retainedReferences
_synchronousDebugMode
_userDictionary
_kernelStartTime
_kernelEndTime
_gpuStartTime
_gpuEndTime
_numEncoders
_numThisCommandBuffer
_listIndex
_ownedByParallelEncoder
_wakeOnCommit
_retainedObjects
_globalTraceObjectID
_labelTraceID
_StatEnabled
_perfSampleHandlerBlock
_hasPresent
isIndirectArgumentBuffer
members
dataType
structType
arrayType
elementType
elementStructType
elementArrayType
virtualAddressForBufferAtIndex:inIndirectArgumentBuffer:atOffset:
uniqueIdentifierForTextureAtIndex:inIndirectArgumentBuffer:atOffset:
uniqueIdentifierForSamplerAtIndex:inIndirectArgumentBuffer:atOffset:
uniqueIdentifierForRenderPipelineAtIndex:inIndirectArgumentBuffer:atOffset:
uniqueIdentifierForComputePipelineAtIndex:inIndirectArgumentBuffer:atOffset:
uniqueIdentifierForIndirectCommandBufferAtIndex:inIndirectArgumentBuffer:atOffset:
bufferLayoutMatchesFrontEndLayout
encodedLength
alignment
hashValue
hashOffset
hashMask
hashSignature
constantOffsetAtIndex:
setIndirectArgumentBuffer:offset:
setArgumentBuffer:offset:
setArgumentBuffer:startOffset:arrayElement:
setBuffer:offset:atIndex:
setBuffers:offsets:withRange:
setTexture:atIndex:
setTextures:withRange:
setSamplerState:atIndex:
setSamplerStates:withRange:
constantDataAtIndex:
setRenderPipelineState:atIndex:
setRenderPipelineStates:withRange:
setIndirectCommandBuffer:atIndex:
setIndirectCommandBuffers:withRange:
newArgumentEncoderForBufferAtIndex:
initWithLayout:device:
setComputePipelineState:atIndex:
setComputePipelineStates:withRange:
setIndirectArgumentBuffer:startOffset:arrayElement:
newIndirectArgumentEncoderForBufferAtIndex:
layout
_device
_layout
type
arrayLength
elementIndirectArgumentType
count
indirectArgumentIndex
indirectArgumentType
indirectConstantDataSize
indirectConstantAlignment
setDataSize:
dataTypeDescription
setAlignment:
bufferStructType
bufferDataType
elementIsArgumentBuffer
elementTypeDescription
contents
offsetForBuffer:
offsetForTexture:
offsetForSampler:
offsetForConstant:
initWithStructType:
_alignment
_bufferIndices
_textureIndices
_samplerIndices
_constantIndices
_constantOffsets
_bufferOffset
_textureOffset
_samplerOffset
_destination
_emulationLayout
initWithData:
bindIndirectArgumentsWithFunctions:
_dataMap
_dataPtr
_dataSize
isConstantBuffer
setAlignment:dataSize:
blitCommandEncoder
renderCommandEncoderWithDescriptor:
encodeWaitForEvent:value:
encodeSignalEvent:value:
parallelRenderCommandEncoderWithDescriptor:
initWithCommandBuffer:
endEncoding
insertDebugSignpost:
filterCounterRangeWithFirstBatch:lastBatch:filterIndex:
getType
memoryBarrierNotificationWithScope:
memoryBarrierNotificationWithResources:count:
dispatchType
setGlobalTraceObjectID:
numThisEncoder
setNumThisEncoder:
_commandBuffer
_numThisEncoder
size
setSize:
cpuCacheMode
setCpuCacheMode:
storageMode
setStorageMode:
descriptorPrivate
validateWithDevice:
_private
newNamedConstantArray
newIndexedConstantArray
data
index
pixelFormat
isBlendingEnabled
sourceRGBBlendFactor
destinationRGBBlendFactor
rgbBlendOperation
sourceAlphaBlendFactor
destinationAlphaBlendFactor
alphaBlendOperation
writeMask
mutability
stringWithUTF8String:
numberWithFloat:
numberWithUnsignedInt:
numberWithShort:
numberWithUnsignedShort:
numberWithChar:
numberWithUnsignedChar:
setObject:forKeyedSubscript:
objectForKeyedSubscript:
array
initWithDevice:maxCommandBufferCount:
setMaxCommandBufferCount:
initWithDevice:descriptor:
maxCommandBufferCount
qosClass
qosRelativePriority
isOpenGLQueue
_submitAvailableCommandBuffers
_incrementCommandQueueCount
_decrementCommandQueueCount
objectAtIndex:
getObjects:range:
replaceObjectsInRange:withObjectsFromArray:range:
removeObjectsInRange:
submitCommandBuffers:count:
completeCommandBuffers:count:
commandBufferDidComplete:startTime:completionTime:error:
removeObject:
requestCounters:
initWithDevice:
setSubmissionQueue:
finish
availableCounters
addPerfSampleHandler:
requestCounters:withIndex:
setSkipRender:
getStatOptions
setStatOptions:
getStatLocations
setStatLocations:
numCommandBuffers
setNumCommandBuffers:
executionEnabled
setExecutionEnabled:
backgroundTrackingPID
setBackgroundTrackingPID:
_dev
_pendingQueue
_submittedQueue
_pendingQueueLock
_submittedQueueLock
_submittedGroup
_commandQueueDispatch
_completionQueueDispatch
_commandQueueEventSource
_commandBufferSemaphore
_backgroundTrackingPID
_StatOptions
_StatLocations
_numCommandBuffers
_maxCommandBufferCount
_qosClass
_qosRelativePriority
_executionEnabled
_openGLQueue
_presentScheduledSemaphore
_forceImmediateSubmissionOnCommitThread
commandQueueDescriptor
numberWithInteger:
setQosClass:
setQosRelativePriority:
setIsOpenGLQueue:
initWithCString:encoding:
initWithFormat:
exceptionWithName:reason:userInfo:
dataUsingEncoding:allowLossyConversion:
bytes
length
kprintfBytes:length:
IOLogBytes:length:
kprintf:
IOLog:
startCaptureWithSettings:from:
startCaptureWithSettings:
startCapture
stopCapture:
stopCapture
getLastStartStopCaptureResult
dumpBuffer:name:
dumpBuffer:
dumpTexture:name:glMode:
dumpTexture:name:
dumpTexture:
postFinishEvent:
postFinishEvent
_descriptorPrivate
setMutability:
_descriptorAtIndex:
initWithDevice:commandQueue:
sharedCaptureManager
newCaptureScopeWithDevice:
newCaptureScopeWithCommandQueue:
startCaptureWithDevice:
startCaptureWithCommandQueue:
startCaptureWithScope:
isCapturing
defaultCaptureScope
setDefaultCaptureScope:
_isCapturing
_defaultCaptureScope
stencilPrivate
stencilCompareFunction
setStencilCompareFunction:
stencilFailureOperation
setStencilFailureOperation:
depthFailureOperation
setDepthFailureOperation:
depthStencilPassOperation
setDepthStencilPassOperation:
readMask
setReadMask:
setWriteMask:
frontFaceStencil
backFaceStencil
depthStencilPrivate
depthCompareFunction
setDepthCompareFunction:
isDepthWriteEnabled
setDepthWriteEnabled:
setFrontFaceStencil:
setBackFaceStencil:
readsDepth
writesDepth
readsStencil
writesStencil
initWithDevice:depthStencilDescriptor:
initWithUTF8String:
initWithValue:type:name:
describe
_name
_dataType
_data
initWithValue:type:index:
_index
setConstantValue:type:atIndex:
setConstantValues:type:withRange:
setConstantValue:type:withName:
functionConstants
required
serializedConstantDataForFunction:dataSize:errorMessage:
constantValueWithFunctionConstant:
_constantStorage
initWithFilePath:readOnly:deviceInfo:
cache
write
writable
disableRunTimeCompilation
setDisableRunTimeCompilation:
_writable
_compilerCache
_disableRunTimeCompilation
stringByStandardizingPath
stringByDeletingLastPathComponent
stringByAppendingPathComponent:
setComputeFunction:
setThreadGroupSizeIsMultipleOfThreadExecutionWidth:
setMaxTotalThreadsPerThreadgroup:
stageInputDescriptor
setStageInputDescriptor:
buffers
newFunctionWithName:constantValues:functionCache:error:
newFunctionWithName:
setVertexFunction:
setFragmentFunction:
setVertexDescriptor:
setRasterSampleCount:
setAlphaToCoverageEnabled:
setAlphaToOneEnabled:
setRasterizationEnabled:
colorAttachments
setDepthAttachmentPixelFormat:
setStencilAttachmentPixelFormat:
setTessellationPartitionMode:
setMaxTessellationFactor:
setTessellationFactorScaleEnabled:
setTessellationFactorFormat:
setTessellationControlPointIndexType:
setTessellationFactorStepFunction:
setTessellationOutputWindingOrder:
vertexBuffers
fragmentBuffers
setPipelineLibrary:
newComputePipelineStateWithName:options:reflection:error:
newRenderPipelineStateWithName:options:reflection:error:
newComputePipelineDescriptorWithName:error:
newRenderPipelineDescriptorWithName:error:
pipelineNames
pipelineCache
functionCache
initWithDevice:pipelineLibraryData:
_pipelineLibraryData
_pipelineNames
fileExistsAtPath:
initWithDomain:code:userInfo:
setPixelFormat:
setBlendingEnabled:
setSourceRGBBlendFactor:
setDestinationRGBBlendFactor:
setRgbBlendOperation:
setSourceAlphaBlendFactor:
setDestinationAlphaBlendFactor:
setAlphaBlendOperation:
_renderCommandEncoderCommon
sampledRenderCommandEncoderWithDescriptor:programInfoBuffer:capacity:
renderCommandEncoder
setColorStoreAction:atIndex:
setDepthStoreAction:
setStencilStoreAction:
setColorStoreActionOptions:atIndex:
setDepthStoreActionOptions:
setStencilStoreActionOptions:
initWithCommandBuffer:renderPassDescriptor:
sampledRenderCommandEncoderWithProgramInfoBuffer:capacity:
isMemorylessRender
_renderPassDescriptor
_lock
_commandBuffersSize
_commandBuffersCount
_commandBuffers
commandTypes
setCommandTypes:
inheritBuffers
setInheritBuffers:
maxVertexBufferBindCount
setMaxVertexBufferBindCount:
maxFragmentBufferBindCount
setMaxFragmentBufferBindCount:
_commandTypes
_inheritPipelineState
_inheritBuffers
_maxVertexBufferBindCount
_maxFragmentBufferBindCount
_maxKernelBufferBindCount
width
height
setPurgeableState:
makeAliasable
isAliasable
heap
allocatedSize
getBytes:bytesPerRow:bytesPerImage:fromRegion:mipmapLevel:slice:
replaceRegion:mipmapLevel:slice:withBytes:bytesPerRow:bytesPerImage:
getBytes:bytesPerRow:fromRegion:mipmapLevel:
replaceRegion:mipmapLevel:withBytes:bytesPerRow:
newTextureViewWithPixelFormat:
newTextureViewWithPixelFormat:textureType:levels:slices:
rootResource
parentTexture
parentRelativeLevel
parentRelativeSlice
buffer
bufferOffset
bufferBytesPerRow
textureType
depth
mipmapLevelCount
sampleCount
usage
isFramebufferOnly
allowGPUOptimizedContents
isPurgeable
isComplete
waitUntilComplete
doesAliasResource:
doesAliasAllResources:count:
doesAliasAnyResources:count:
responsibleProcess
setResponsibleProcess:
sharedAllocationInfo
cachedAllocationInfo
newTextureViewWithPixelFormat:textureType:levels:slices:swizzle:
rotation
swizzle
setSwizzle:
isCompressed
numFaces
isDrawable
getBytes:bytesPerRow:bytesPerImage:fromRegion:mipmapLevel:slice:options:
replaceRegion:mipmapLevel:slice:withBytes:bytesPerRow:bytesPerImage:options:
newCompressedTextureViewWithPixelFormat:textureType:level:slice:
canGenerateMipmapLevels
generateMipmapLevel:slice:
uniqueIdentifier
resourceIndex
attachmentDescriptor
setTexture:
texture
setResolveTexture:
resolveTexture
setLevel:
level
setSlice:
slice
setDepthPlane:
depthPlane
setClearColor:
clearColor
setResolveLevel:
resolveLevel
setResolveSlice:
resolveSlice
setResolveDepthPlane:
resolveDepthPlane
setYInvert:
yInvert
loadAction
setLoadAction:
storeAction
setStoreAction:
storeActionOptions
setStoreActionOptions:
setClearDepth:
clearDepth
depthResolveFilter
setDepthResolveFilter:
setClearStencil:
clearStencil
_color_descriptors
_depth_descriptor
_stencil_descriptor
renderPassDescriptor
setSamplePositions:count:
getSamplePositions:count:
renderTargetArrayLength
setRenderTargetArrayLength:
_renderTargetArrayLength
didModifyRange:
newTextureWithDescriptor:offset:bytesPerRow:
addDebugMarker:range:
removeAllDebugMarkers
setDepthAttachment:
depthAttachment
setStencilAttachment:
stencilAttachment
setVisibilityResultBuffer:
visibilityResultBuffer
setRenderTargetWidth:
renderTargetWidth
setRenderTargetHeight:
renderTargetHeight
setFineGrainedBackgroundVisibilityEnabled:
fineGrainedBackgroundVisibilityEnabled
setDitherEnabled:
isDitherEnabled
setOpenGLModeEnabled:
openGLModeEnabled
validate:width:height:
numberWithDouble:
setPipelineCollection:
lastPathComponent
cacheEntry
defaultManager
libraryData
writeToFile:options:error:
computeFunction
vertexFunction
fragmentFunction
dataWithJSONObject:options:error:
initWithBytesNoCopy:length:
string
appendString:
encodeWithCoder:
initWithCoder:
releaseAllObjectsAndReset
initWithCapacity:
_listPriv
initWithResourceListCapacity:
availableCount
purge
_priv
_resourceListCapacity
lodAverage
setLodAverage:
_lodAverage
minFilter
setMinFilter:
magFilter
setMagFilter:
mipFilter
setMipFilter:
maxAnisotropy
setMaxAnisotropy:
sAddressMode
setSAddressMode:
tAddressMode
setTAddressMode:
rAddressMode
setRAddressMode:
normalizedCoordinates
setNormalizedCoordinates:
lodMinClamp
setLodMinClamp:
lodMaxClamp
setLodMaxClamp:
lodBias
setLodBias:
compareFunction
setCompareFunction:
supportArgumentBuffers
setSupportArgumentBuffers:
forceResourceIndex
setForceResourceIndex:
setResourceIndex:
initWithDevice:samplerDescriptor:
appendFormat:
setTextureType:
setWidth:
setHeight:
setMipmapLevelCount:
setResourceOptions:
setUsage:
texture2DDescriptorWithPixelFormat:width:height:mipmapped:
textureCubeDescriptorWithPixelFormat:size:mipmapped:
textureBufferDescriptorWithPixelFormat:width:resourceOptions:usage:
setDepth:
setSampleCount:
setArrayLength:
setAllowGPUOptimizedContents:
resourceOptions
textureUsage
setTextureUsage:
setRotation:
swizzleRed
setSwizzleRed:
swizzleGreen
setSwizzleGreen:
swizzleBlue
setSwizzleBlue:
swizzleAlpha
setSwizzleAlpha:
getSwizzle
compressionMode
setCompressionMode:
framebufferOnly
setFramebufferOnly:
setIsDrawable:
stringByAppendingFormat:
memberByName:
initWithObjects:count:
setObject:forKey:
objectForKey:
initWithMembers:count:
setIsIndirectArgumentBuffer:
_dictionary
_members
_isIndirectArgumentBuffer
initWithDataType:
initWithElementType:elementTypeDescription:access:alignment:dataSize:elementIsIndirectArgumentBuffer:isConstantBuffer:
elementIsIndirectArgumentBuffer
access
dataSize
_elementType
_elementTypeInfo
_access
_elementIsArgumentBuffer
_isConstantBuffer
initWithDataType:textureType:access:isDepthTexture:
textureDataType
isDepthTexture
_textureDataType
_textureType
_isDepthTexture
initWithArrayLength:elementType:stride:details:
setArgumentIndexStride:
indirectConstantDataType
textureReferenceType
pointerType
initWithName:offset:dataType:indirectArgumentIndex:render_target:raster_order_group:details:
argumentIndex
render_target
raster_order_group
_details
_argumentIndex
_render_target
_raster_order_group
_typeInfo
elementTextureReferenceType
elementPointerType
indirectArgumentIndexStride
setIndirectArgumentIndexStride:
argumentIndexStride
_arrayLength
_argumentIndexStride
initWithName:type:access:index:active:arrayLength:
initWithName:type:access:index:active:arrayLength:typeDescription:
bufferAlignment
bufferDataSize
bufferIndirectArgumentType
bufferPointerType
threadgroupMemoryAlignment
threadgroupMemoryDataSize
_type
_active
initWithAirMDType:dataType:name:offset:
airMDType
_airMDType
initWithDataType:offset:bufferIndex:stride:stepFunction:stepRate:baseInstanceUnused:
baseInstanceUnused
_stepRate
_baseInstanceUnused
bitcodeType
bitCodeFileSize
bitCodeOffset
bitCodeHash
raise:format:
encodeXPCObject:forKey:
encodeObject:forKey:
decodeXPCObjectOfType:forKey:
decodeObjectOfClass:forKey:
supportsSecureCoding
eventPort
labelTraceID
initWithDispatchQueue:
initWithSerializedData:serializedStageInputDescriptor:device:options:flags:
initWithSerializedData:device:options:flags:
performanceStatistics
setPerformanceStatistics:
usageFlags
traceBufferIndex
constantSamplerUniqueIdentifiers
constantSamplerDescriptors
setConstantSamplerUniqueIdentifiers:
setConstantSamplerDescriptorsFromBitmasks:count:
arguments
builtInArguments
_arguments
_builtInArguments
_performanceStatistics
_flags
_traceBufferIndex
_constantSamplerUniqueIdentifiers
_constantSamplerDescriptors
null
newArgumentEncoderWithBufferIndex:
newArgumentEncoderWithBufferIndex:reflection:
functionType
patchType
patchControlPointCount
stageInputAttributes
functionConstantsDictionary
registerComputePipelineDescriptor:
needsFunctionConstantValues
setDriverCompilerOptions:
driverCompilerOptions
pipelineLibrary
threadGroupSizeIsMultipleOfThreadExecutionWidth
maxTotalThreadsPerThreadgroup
newSerializedComputeData
threadExecutionWidth
staticThreadgroupMemoryLength
initWithDevice:pipelineStateDescriptor:
IABEmulationData
setIABEmulationData:
_iabEmulationData
_supportIndirectCommandBuffers
_uniqueIdentifier
indirectArgumentDescriptor
setDataType:
setIndex:
setAccess:
constantBlockAlignment
setConstantBlockAlignment:
argumentDescriptor
stringByExpandingTildeInPath
compiler
fileSystemRepresentation
whitespaceAndNewlineCharacterSet
componentsSeparatedByCharactersInSet:
isEqualToString:
mainBundle
pathForResource:ofType:
dumpPipelineDescriptorsIfRequested
featureProfile:supportsFeatureSet:
fragmentFunctionKeyWithRenderPipelineDescriptor:fragmentKeySize:previousStateVariant:
vertexFunctionKeyWithRenderPipelineDescriptor:vertexKeySize:nextStageVariant:
computeFunctionKeyWithComputePipelineDescriptor:keySize:
_purgeDevice
initWithName:type:access:isActive:locationIndex:arraySize:dataType:isConstantBuffer:dataSize:alignment:
initWithName:access:isActive:locationIndex:arraySize:dataType:textureType:isDepthTexture:
initWithName:type:access:isActive:locationIndex:dataType:dataSize:alignment:
newArgumentEncoderWithArguments:structType:
useNewPrimitiveRestartBehavior
releaseCacheEntry:
registerRenderPipelineDescriptor:
registerCompiler:
fragmentFunctionKeyWithRenderPipelineDescriptor:options:previousStateVariant:fragmentKeySize:
vertexFunctionKeyWithRenderPipelineDescriptor:options:nextStageVariant:vertexKeySize:
freeFragmentFunctionKey:fragmentKeySize:
freeVertexFunctionKey:vertexKeySize:
computeFunctionKeyWithComputePipelineDescriptor:options:keySize:
freeComputeFunctionKey:keySize:
fragmentVariantWithCompilerOutput:
computeVariantWithCompilerOutput:
vertexVariantWithCompilerOutput:
computeVariantWithCompilerOutput:pipelineStatisticsOutput:
fragmentVariantWithCompilerOutput:pipelineStatisticsOutput:
vertexVariantWithCompilerOutput:pipelineStatisticsOutput:
newRenderPipelineWithDescriptor:vertexVariant:fragmentVariant:
newComputePipelineWithDescriptor:variant:
pipelineFlagsWithVertexVariant:fragmentVariant:
pipelineFlagsWithComputeVariant:
pipelinePerformanceStatisticsWithVertexVariant:fragmentVariant:
pipelinePerformanceStatisticsWithComputeVariant:
pipelinePerformanceStatisticsWithVertexVariant:fragmentVariant:vertexCompileTimeOutput:fragmentCompileTimeOutput:
pipelinePerformanceStatisticsWithComputeVariant:compileTimeOutput:
getConstantSamplersBitmasks:uniqueIdentifiers:constantSamplerCount:forVertexVariant:fragmentVariant:
getConstantSamplersBitmasks:uniqueIdentifiers:constantSamplerCount:forComputeVariant:
serialQueue
_limits
_compiler
_serialQueue
_memoryInfo
_commandQueueCount
_libraryBuilder
_pipelineLibraryBuilder
_pipelineDescriptors
_pipelineDescriptorsOutputFile
_librariesOutputDirectory
dictionary
primitiveType
setPrimitiveType:
vertexStart
setVertexStart:
vertexCount
setVertexCount:
instanceCount
setInstanceCount:
baseInstance
setBaseInstance:
_primitiveType
_vertexStart
_vertexCount
_instanceCount
_baseInstance
indexCount
setIndexCount:
indexBufferVirtualAddress
setIndexBufferVirtualAddress:
indexBufferOffset
setIndexBufferOffset:
baseVertex
setBaseVertex:
_indexCount
_indexBufferVirtualAddress
_indexBufferOffset
_baseVertex
numberOfPatchControlPoints
setNumberOfPatchControlPoints:
patchStart
setPatchStart:
patchCount
setPatchCount:
patchIndexBufferVirtualAddress
setPatchIndexBufferVirtualAddress:
patchIndexBufferOffset
setPatchIndexBufferOffset:
_numberOfPatchControlPoints
_patchStart
_patchCount
_patchIndexBufferVirtualAddress
_patchIndexBufferOffset
controlPointIndexBufferVirtualAddress
setControlPointIndexBufferVirtualAddress:
_controlPointIndexBufferVirtualAddress
_controlPointIndexBufferOffset
virtualAddress
setVirtualAddress:
instanceStride
setInstanceStride:
scale
setScale:
_virtualAddress
_instanceStride
_scale
allKeys
allValues
stringByAppendingString:
preprocessorMacros
setPreprocessorMacros:
additionalCompilerArguments
setAdditionalCompilerArguments:
setLanguageVersion:
fastMathEnabled
setFastMathEnabled:
debuggingEnabled
setDebuggingEnabled:
glBufferBindPoints
setGlBufferBindPoints:
languageVersion
tracingEnabled
setTracingEnabled:
compileTimeStatisticsEnabled
setCompileTimeStatisticsEnabled:
_userSetLanguageVersion
_preprocessorMacros
_fastMathEnabled
_glBufferBindPoints
_tracingEnabled
_debuggingEnabled
_languageVersion
_compileTimeStatisticsEnabled
_additionalCompilerArguments
initWithName:attributeIndex:attributeType:flags:
isPatchData
isPatchControlPointData
setAttributeType:
_attributeIndex
_attributeType
initWithName:type:index:required:
_required
initWithArguments:argumentCount:builtInArgumentCount:
initWithDevice:reflectionData:functionType:options:
initWithName:type:libraryData:functionData:device:
sourceArchiveOffset
setSourceArchiveOffset:
setReturnType:
arrayWithArray:
setArguments:
setLineNumber:
setFilePath:
setFunctionConstants:
setVertexAttributes:
filePath
setUnpackedFilePath:
lengthOfBytesUsingEncoding:
getCString:maxLength:encoding:
newFunctionWithNameInternal:
newSpecializedFunctionWithRequestType:llvmTargetVersion:constants:functionCache:error:
newSpecializedFunctionWithRequestType:llvmTargetVersion:constants:functionCache:sync:completionHandler:
newFunctionWithName:constantValues:functionCache:completionHandler:
removeAllObjects
initWithLibraryContainer:device:
stringValue
cStringUsingEncoding:
newFunctionWithName:constantValues:error:
newFunctionWithName:constantValues:completionHandler:
functionNames
newExternFunctionWithName:
newFunctionWithName:constantValues:pipelineLibrary:error:
newFunctionWithName:constantValues:pipelineLibrary:completionHandler:
overrideTriple
setOverrideTriple:
externFunctionNames
functionDictionary
pipelineCollection
_functionNames
_externFunctionNames
_libraryData
_functionDictionary
_cacheEntry
_pipelineCollection
newlineCharacterSet
reflectionWithFunction:options:sync:completionHandler:
reflectionWithOptions:
dataWithLength:
mutableBytes
reflectionWithOptions:completionHandler:
newIndirectArgumentEncoderWithBufferIndex:
newIndirectArgumentEncoderWithBufferIndex:reflection:
bitcodeData
lineNumber
unpackedFilePath
returnType
initWithName:type:libraryData:device:
setVendorPrivate:
newSerializedVertexDataWithVertexDescriptor:
vendorPrivate
_functionType
_vendorPrivate
_vertexAttributes
_functionConstants
_functionConstantDictionary
_returnType
_unpackedFilePath
initializePublicMetadata
initWithObjects:forKeys:count:
initializePrivateMetadata
initializeSourceArchive
programObject
functionData
setStageInputAttributes:
functionInputs
.cxx_construct
_functionData
_publicMetadataInitialized
_privateMetadataInitialized
_sourceArchiveMetadataInitialized
_programObject
_filePath
_lineNumber
initWithCompilerOutput:
inputInfoAndSize:
setInputInfo:size:
outputInfoAndSize:
setOutputInfo:size:
_inputInfo
_inputInfoSize
compileRequest:pipelineCache:completionHandler:
compileRequest:pipelineCache:sync:completionHandler:
compileFunctionInternal:frameworkData:driverKeyData:frameworkLinking:linkDataSize:pipelineCache:options:sync:completionHandler:
compileFunction:serializedPipelineData:stateData:linkDataSize:frameworkLinking:options:sync:completionHandler:
newSerializedVertexDataWithFlags:options:error:
initWithTargetData:cacheUUID:pluginPath:device:compilerFlags:
compileRequest:completionHandler:
compileFunction:frameworkData:driverKeyData:options:pipelineCache:completionHandler:
compileFunction:frameworkData:driverKeyData:options:pipelineCache:sync:completionHandler:
compileFunction:serializedData:stateData:options:completionHandler:
reflectionWithFunction:options:completionHandler:
pluginPath
compilerQueue
compilerConnectionManager
compilerId
compilerFlags
_pluginPath
_compilerQueue
_compilerConnectionManager
_compilerId
_compilerFlags
_shaderCache
setVertexDescriptorBuffer:
isVertexDescriptorBuffer
setStructType:
_vertexDescriptorBuffer
initWithName:type:access:isActive:locationIndex:arraySize:dataType:dataSize:alignment:
threadgroupMemoryDataType
threadgroupMemoryStructType
initWithName:type:access:active:index:dataType:builtInType:
builtInDataType
builtInType
_builtInType
_builtInDataType
initWithVertexData:fragmentData:serializedVertexDescriptor:device:options:flags:
vertexBuiltInArguments
postVertexDumpStride
postVertexDumpOutputs
inferredInputs
vertexArguments
fragmentArguments
_vertexBuiltInArguments
_postVertexDumpStride
_postVertexDumpOutputs
_inferredInputs
_vertexArguments
_fragmentArguments
inputPrimitiveTopology
setInputPrimitiveTopology:
_inputPrimitiveTopology
rasterSampleCount
tessellationPartitionMode
isTessellationFactorScaleEnabled
tessellationFactorFormat
tessellationControlPointIndexType
tessellationFactorStepFunction
tessellationOutputWindingOrder
supportIndirectCommandBuffers
setSupportIndirectCommandBuffers:
postVertexDumpBufferIndex
setPostVertexDumpBufferIndex:
sampleMask
setSampleMask:
sampleCoverage
setSampleCoverage:
isAlphaToCoverageEnabled
isAlphaToOneEnabled
isRasterizationEnabled
isVertexEnabled
setVertexEnabled:
isLogicOperationEnabled
setLogicOperationEnabled:
logicOperation
setLogicOperation:
isAlphaTestEnabled
setAlphaTestEnabled:
alphaTestFunction
setAlphaTestFunction:
setClipDistanceEnableMask:
clipDistanceEnableMask
isPointSmoothEnabled
setPointSmoothEnabled:
isPointCoordLowerLeft
setPointCoordLowerLeft:
isPointSizeOutputVS
setPointSizeOutputVS:
isTwoSideEnabled
setTwoSideEnabled:
vertexDepthCompareClampMask
setVertexDepthCompareClampMask:
fragmentDepthCompareClampMask
setFragmentDepthCompareClampMask:
sampleCoverageInvert
setSampleCoverageInvert:
isDepthStencilWriteDisabled
setDepthStencilWriteDisabled:
fastBlendDescriptorAtIndex:
attachVertexDescriptor:
depthAttachmentPixelFormat
stencilAttachmentPixelFormat
serializeFragmentData
newSerializedVertexDataWithFlags:error:
vertexIABEmulationData
setVertexIABEmulationData:
fragmentIABEmulationData
setFragmentIABEmulationData:
_vertexIABEmulationData
_fragmentIABEmulationData
beginScope
endScope
_commandQueue
MTLAddDevice
_deviceArray != NULL
hash
TQ,R
superclass
T#,R
description
T@"NSString",R,C
debugDescription
name
T@"NSString",R
registryID
maxThreadsPerThreadgroup
T{?=QQQ},R
lowPower
TB,R,GisLowPower
headless
TB,R,GisHeadless
removable
TB,R,GisRemovable
recommendedMaxWorkingSetSize
depth24Stencil8PixelFormatSupported
TB,R,GisDepth24Stencil8PixelFormatSupported
readWriteTextureSupport
argumentBuffersSupport
rasterOrderGroupsSupported
TB,R,GareRasterOrderGroupsSupported
currentAllocatedSize
maxThreadgroupMemoryLength
maxArgumentBufferSamplerCount
programmableSamplePositionsSupported
TB,R,GareProgrammableSamplePositionsSupported
maxBufferLength
shaderDebugInfoCaching
indirectArgumentBuffersSupport
targetDeviceInfo
Tr^{MTLTargetDeviceArch=II*},R
halfFPConfig
singleFPConfig
doubleFPConfig
metalAssertionsEnabled
TB,N
featureProfile
limits
Tr^{?=IIIIIIIIIIIIIIIIIIffIIIIIIIIIIIIIIIIIIIIIIIIIIIIQ},R
maxColorAttachments
maxVertexAttributes
maxVertexBuffers
maxVertexTextures
maxVertexSamplers
maxVertexInlineDataSize
maxInterpolants
maxFragmentBuffers
maxFragmentTextures
maxFragmentSamplers
maxFragmentInlineDataSize
maxComputeBuffers
maxComputeTextures
maxComputeSamplers
maxComputeInlineDataSize
maxComputeLocalMemorySizes
maxTotalComputeThreadsPerThreadgroup
maxComputeThreadgroupMemory
maxLineWidth
Tf,R
maxPointSize
maxVisibilityQueryOffset
minConstantBufferAlignmentBytes
minBufferNoCopyAlignmentBytes
maxTextureWidth1D
maxTextureWidth2D
maxTextureHeight2D
maxTextureWidth3D
maxTextureHeight3D
maxTextureDepth3D
maxTextureDimensionCube
maxTextureLayers
linearTextureAlignmentBytes
iosurfaceTextureAlignmentBytes
iosurfaceReadOnlyTextureAlignmentBytes
deviceLinearTextureAlignmentBytes
deviceLinearReadOnlyTextureAlignmentBytes
maxFunctionConstantIndices
maxComputeThreadgroupMemoryAlignmentBytes
maxInterpolatedComponents
maxTessellationFactor
maxIndirectBuffers
maxIndirectTextures
maxIndirectSamplers
maxIndirectSamplersPerDevice
maxCustomSamplePositions
maxTextureBufferWidth
maxFramebufferStorageBits
supportPriorityBand
TB,R
sharedMemorySize
dedicatedMemorySize
indirectArgumentBufferCapabilities
T{IndirectArgumentBufferCapabilities=b1b1b1b29},R
quadDataSharingSupported
TB,R,GisQuadDataSharingSupported
v8@?0
METAL_DEVICE_WRAPPER_TYPE
stride
TQ,D,N
stepFunction
stepRate
-[MTLBufferLayoutDescriptorInternal setStride:]
stride(%lu) must be 4 byte aligned.
-[MTLBufferLayoutDescriptorArrayInternal objectAtIndexedSubscript:]
bufferIndex(%lu) must be < %lu.
-[MTLBufferLayoutDescriptorArrayInternal setObject:atIndexedSubscript:]
bufferDesc is not a MTLVertexBufferLayoutDescriptor.
format
offset
bufferIndex
-[MTLAttributeDescriptorInternal setBufferIndex:]
buffer index (%lu) must be < %lu.
-[MTLAttributeDescriptorInternal setOffset:]
attribute offset (%lu) must be %lu byte aligned.
-[MTLAttributeDescriptorArrayInternal objectAtIndexedSubscript:]
vertex attribute index (%lu) must be < %lu.
-[MTLAttributeDescriptorArrayInternal setObject:atIndexedSubscript:]
attributeDesc is not a MTLVertexAttributeDescriptor.
layouts
T@"MTLBufferLayoutDescriptorArray",R,D
attributes
T@"MTLAttributeDescriptorArray",R,D
indexType
indexBufferIndex
%@%@
-[MTLStageInputOutputDescriptorInternal newSerializedDescriptor]
None of the attributes set bufferIndex to %d, but %s set buffer layout[%d].stride(%lu).
MTLStageInputOutputDescriptor
Vertex attribute %@(%d) is missing from the vertex descriptor
Vertex attribute %@(%d) of type %s cannot be read using %@
MTLIndexTypeUInt16
MTLIndexTypeUInt32
Unknown
MTLStageInputOutputDescriptorDescription
bufferIndex < MTL_MAX_VERTEX_BUFFERS
Buffer %lu:
stepFunction =
stepRate =
stride =
Attribute %u:
offset =
format =
IndexType: %@
IndexBufferIndex: %lu
validateStepFunction
stepFunction is not a valid MTLStepFunction.
validateVertexAttribute
Attribute at index %d references a buffer at index %lu that has no stride.
Attribute at index %d: the attribute offset (%lu) + attribute size (%lu) must be <= the stride of the buffer (%lu) at buffer index %lu.
validateFunctionStepRate
stepRate(%lu) must be zero if stepFunction is MTLStepFunctionConstant.
stepRate(%lu) cannot be zero if stepFunction is %@.
invalid stepFunction value
CompilerError
MTLStepFunctionConstant
MTLStepFunctionPerVertex
MTLStepFunctionPerInstance
MTLStepFunctionPerPatch
MTLStepFunctionPerPatchControlPoint
MTLStepFunctionThreadPositionInGridX
MTLStepFunctionThreadPositionInGridY
MTLStepFunctionThreadPositionInGridXIndexed
MTLStepFunctionThreadPositionInGridYIndexed
MTLCommandBufferCreationTime
MTLCommandBufferEnqueueTime
MTLCommandBufferCommitTime
MTLCommandBufferSubmitToKernelTime
MTLCommandBufferKernelScheduledTime
MTLCommandBufferSubmitToHWTime
MTLCommandBufferCompletionInterruptTime
MTLCommandBufferKernelCompleteTime
MTLCommandBufferCompletionHandlerEnqueueTime
MTLCommandBufferCompletionHandlerExecutionTime
-[_MTLCommandBuffer initWithQueue:retainedReferences:synchronousDebugMode:]
queue must not be nil.
label
T@"NSString",C
device
T@"<MTLDevice>",R
queue is not a MTLCommandQueue.
label =
<none>
device =
<null>
commandQueue =
retainedReferences =
-[_MTLCommandBuffer enqueue]
enqueue an already enqueued command buffer
-[_MTLCommandBuffer commit]
commit an already committed command buffer
commit command buffer with uncommitted encoder
-[_MTLCommandBuffer commitAndHold]
-[_MTLCommandBuffer commitAndReset]
Command buffer failed
-[_MTLCommandBuffer addScheduledHandler:]
Scheduler handler provided after commit call
-[_MTLCommandBuffer presentDrawable:]
drawable must not be nil.
presentedTime
Td,R,N
drawableID
TQ,R,N
drawable is not a MTLDrawable.
v16@?0@"<MTLCommandBuffer>"8
v16@?0@"<MTLDrawable>"8
-[_MTLCommandBuffer presentDrawable:atTime:]
-[_MTLCommandBuffer presentDrawable:afterMinimumDuration:]
-[_MTLCommandBuffer addCompletedHandler:]
Completed handler provided after commit call
-[_MTLCommandBuffer didScheduleWithStartTime:endTime:error:]
Execution of the command buffer was aborted due to an error during execution. %@
-[_MTLCommandBuffer didCompleteWithStartTime:endTime:error:]
-[_MTLCommandBuffer pushDebugGroup:]
string must not be nil.
string is not a NSString.
retainedReferences
TB,R,V_retainedReferences
synchronousDebugMode
TB,R,V_synchronousDebugMode
commandQueue
T@"<MTLCommandQueue>",R,V_queue
status
TQ,R,V_status
T@"NSString",C,V_label
error
T@"NSError",R
profilingEnabled
TB,GisProfilingEnabled
profilingResults
T@"NSDictionary",R
globalTraceObjectID
TQ,R,V_globalTraceObjectID
kernelStartTime
kernelEndTime
GPUStartTime
GPUEndTime
userDictionary
T@"NSMutableDictionary",R,N
StatEnabled
TB,N,GisStatEnabled,V_StatEnabled
numThisCommandBuffer
TQ,N,V_numThisCommandBuffer
numEncoders
TQ,N,V_numEncoders
listIndex
TQ,N,GgetListIndex,V_listIndex
ownedByParallelEncoder
TB,N,V_ownedByParallelEncoder
bufferLayoutMatchesFrontEndLayout
TB,R,D
encodedLength
TQ,R,D
alignment
hashValue
TI,R
hashOffset
hashMask
hashSignature
-[_MTLIndirectArgumentEncoder setBuffer:offset:atIndex:]
Unreachable code
-[_MTLIndirectArgumentEncoder setBuffers:offsets:withRange:]
-[_MTLIndirectArgumentEncoder setTexture:atIndex:]
-[_MTLIndirectArgumentEncoder setTextures:withRange:]
-[_MTLIndirectArgumentEncoder setSamplerState:atIndex:]
-[_MTLIndirectArgumentEncoder setSamplerStates:withRange:]
-[_MTLIndirectArgumentEncoder setRenderPipelineState:atIndex:]
-[_MTLIndirectArgumentEncoder setRenderPipelineStates:withRange:]
-[_MTLIndirectArgumentEncoder setComputePipelineState:atIndex:]
-[_MTLIndirectArgumentEncoder setComputePipelineStates:withRange:]
-[_MTLIndirectArgumentEncoder constantDataAtIndex:]
T@"<MTLDevice>",R,N
layout
T@"_MTLIndirectArgumentBufferLayout",R,N,V_layout
assignArgumentIndices
Unexpected data type in indirect argument buffer
countArgument
getArgumentSizeAndAlign
assignArgumentOffsets
-[MTLEmulationIndirectArgumentBufferLayout uniqueIdentifierForRenderPipelineAtIndex:inIndirectArgumentBuffer:atOffset:]
Setting a pipeline is not supported on this hardware
-[MTLEmulationIndirectArgumentBufferLayout uniqueIdentifierForComputePipelineAtIndex:inIndirectArgumentBuffer:atOffset:]
-[MTLEmulationIndirectArgumentBufferLayout offsetForBuffer:]
Invalid ID: %lu
-[MTLEmulationIndirectArgumentBufferLayout offsetForTexture:]
-[MTLEmulationIndirectArgumentBufferLayout offsetForSampler:]
-[MTLEmulationIndirectArgumentBufferLayout offsetForConstant:]
TQ,R,N,V_stride
-[MTLEmulationIndirectArgumentEncoder setRenderPipelineState:atIndex:]
Unsupported feature
-[MTLEmulationIndirectArgumentEncoder setRenderPipelineStates:withRange:]
-[MTLEmulationIndirectArgumentEncoder setComputePipelineState:atIndex:]
-[MTLEmulationIndirectArgumentEncoder setComputePipelineStates:withRange:]
T@"_MTLIndirectArgumentBufferLayout",R,N
allocator<T>::allocate(size_t n) 'n' exceeds maximum supported size
-[_MTLCommandEncoder initWithCommandBuffer:]
commandBuffer must not be nil.
T@"<MTLCommandQueue>",R
Td,R
commandBuffer is not a MTLCommandBuffer.
-[_MTLCommandEncoder dealloc]
Command encoder released without endEncoding
-[_MTLCommandEncoder insertDebugSignpost:]
-[_MTLCommandEncoder pushDebugGroup:]
TQ,N,GglobalTraceObjectID,V_globalTraceObjectID
type
TQ,R,N,GgetType
numThisEncoder
TQ,N,V_numThisEncoder
dispatchType
size
storageMode
cpuCacheMode
validateMTLCPUCacheMode
Invalid cpuCacheMode (%@)
Invalid
validateMTLStorageMode
Invalid storageMode (%@)
MTLStorageModeShared
MTLFunction
MTLComputePipelineDescriptor
MTLRenderPipelineDescriptor
MTLLibrary
fileName
library
specialized
baseFunction
contstants
computeFunction
threadGroupSizeIsMultipleOfThreadExecutionWidth
stageInputDescriptor
required featureSets
excluded featureSets
buffers
maxTotalThreadsPerThreadgroup
vertexFunction
fragmentFunction
vertexDescriptor
sampleCount
alphaToCoverageEnabled
alphaToOneEnabled
rasterizationEnabled
colorAttachments
depthAttachmentPixelFormat
stencilAttachmentPixelFormat
inputPrimitiveTopology
tessellationPartitionMode
tessellationFactorScaleEnabled
tessellationFactorFormat
tessellationControlPointIndexType
tessellationFactorStepFunction
tessellationOutputWindingOrder
vertexBuffers
fragmentBuffers
supportIndirectCommandBuffers
index
pixelFormat
blendingEnabled
sourceRGBBlendFactor
destinationRGBBlendFactor
rgbBlendOperation
sourceAlphaBlendFactor
destinationAlphaBlendFactor
alphaBlendOperation
writeMask
value
mutability
-[_MTLCommandQueue initWithDevice:descriptor:]
device must not be nil.
device is not a MTLDevice.
invalid descriptor.maxCommandBufferCount value %u
invalid descriptor.qosClass value %u
invalid descriptor.qosRelativePriority value %d
cannot create command-buffer counting semaphore
com.Metal.CommandQueueDispatch
com.Metal.CompletionQueueDispatch
cannot create presentation semaphore
METAL_FORCE_IMMEDIATE_SUBMISSION
-[_MTLCommandQueue enqueueCommandBuffer:]
commandBuffer is associated with a different device
-[_MTLCommandQueue completeCommandBuffers:count:]
-[_MTLCommandQueue commitCommandBuffer:wake:]
-[_MTLCommandQueue commandBufferDidComplete:startTime:completionTime:error:]
-[_MTLCommandQueue availableCounters]
false
Metal Vendor Statistics not implemented
-[_MTLCommandQueue requestCounters:]
maxCommandBufferCount
TQ,R,V_maxCommandBufferCount
qosClass
TQ,R,V_qosClass
qosRelativePriority
Tq,R,V_qosRelativePriority
isOpenGLQueue
TB,R,V_openGLQueue
backgroundTrackingPID
Ti,V_backgroundTrackingPID
skipRender
TB,V_skipRender
executionEnabled
TB,V_executionEnabled
TB,GisProfilingEnabled,V_profilingEnabled
StatOptions
TQ,N,GgetStatOptions,V_StatOptions
StatLocations
TQ,N,GgetStatLocations,V_StatLocations
numCommandBuffers
TQ,N,V_numCommandBuffers
Tq,D,N
maxCommandBufferCount =
qosClass =
qosRelativePriority =
TB,V_openGLQueue
MTLQosClassUserInteractive
MTLQosClassUserInitiated
MTLQosClassUtility
MTLQosClassBackground
failed assertion %s at line %d in %s. %@
failed assertion %s at line %d in %s
MTLFailureTypeGetErrorModeType
/BuildRoot/Library/Caches/com.apple.xbs/Sources/Metal_Sim/Metal-161.6.2/Framework/MTLDebug.m
failureType < MTLFailureTypeCount
MTLFailureTypeSetErrorModeType
warning
errorCheckExtended
Function Name
Line
%s, line %u: %s '%s'
METAL_ERROR_MODE
METAL_DEBUG_ERROR_MODE
METAL_WARNING_MODE
METAL_ERROR_CHECK_EXTENDED_MODE
MTLMutabilityDefault
MTLMutabilityMutable
MTLMutabilityImmutable
mutability =
Mutability
-[MTLPipelineBufferDescriptorArrayInternal objectAtIndexedSubscript:]
bufferIndex(%lu) must be < %lu
-[MTLPipelineBufferDescriptorArrayInternal setObject:atIndexedSubscript:]
buffer is not a MTLPipelineBufferDescriptor.
validateMTLMutability
%lu is not a valid MTLMutability.
defaultCaptureScope
T@"<MTLCaptureScope>",&,V_defaultCaptureScope
isCapturing
TB,R,V_isCapturing
validateMTLCompareFunction
function is not a valid MTLCompareFunction.
MTLCompareFunctionNever
MTLCompareFunctionLess
MTLCompareFunctionEqual
MTLCompareFunctionLessEqual
MTLCompareFunctionGreater
MTLCompareFunctionNotEqual
MTLCompareFunctionGreaterEqual
MTLCompareFunctionAlways
stencilCompareFunction
stencilFailureOperation
depthFailureOperation
depthStencilPassOperation
readMask
TI,D,N
stencilPrivate
Tr^{MTLStencilDescriptorPrivate=QQQQII},R,D
stencilCompareFunction        =
stencilFailureOperation       =
stencilPassDepthFailOperation =
stencilPassDepthPassOperation =
stencilReadMask               =
0x%x
stencilWriteMask              =
Tr^{MTLStencilDescriptorPrivate=QQQQII},R
depthCompareFunction
depthWriteEnabled
TB,D,N,GisDepthWriteEnabled
frontFaceStencil
T@"MTLStencilDescriptor",C,D,N
backFaceStencil
T@"NSString",C,D,N
depthStencilPrivate
Tr^{MTLDepthStencilDescriptorPrivate=@@QB@},R,D
stencilCompareFunction        = MTLCompareFunctionAlways
stencilFailOperation          = MTLStencilOperationKeep
stencilPassDepthFailOperation = MTLStencilOperationKeep
stencilPassDepthPassOperation = MTLStencilOperationKeep
stencilReadMask               = 0xffffffff
stencilWriteMask              = 0xffffffff
depthCompareFunction =
depthWriteEnabled =
frontFace:
backFace:
-[MTLDepthStencilDescriptorInternal setFrontFaceStencil:]
frontFaceStencil is not a MTLStencilDescriptor.
-[MTLDepthStencilDescriptorInternal setBackFaceStencil:]
backFaceStencil is not a MTLStencilDescriptor.
-[MTLDepthStencilDescriptorInternal setLabel:]
label must not be nil.
label is not a NSString.
Tr^{MTLDepthStencilDescriptorPrivate=@@QB@},R
-[_MTLDepthStencilState initWithDevice:depthStencilDescriptor:]
desc must not be nil.
desc is not a MTLDepthStencilDescriptor.
readsDepth
writesDepth
readsStencil
writesStencil
T@"<MTLDevice>",R,V_device
T@"NSString",R,V_label
MTLStencilOperationKeep
MTLStencilOperationZero
MTLStencilOperationReplace
MTLStencilOperationIncrementClamp
MTLStencilOperationDecrementClamp
MTLStencilOperationInvert
MTLStencilOperationIncrementWrap
MTLStencilOperationDecrementWrap
validateMTLStencilOperation
operation is not a valid MTLStencilOperation.
name: %@; type: %@; value: %@
Name =
Type =
Value =
T@"NSString",R,V_name
dataType
TQ,R,V_dataType
data
T^v,R,V_data
index: %@; type: %@; value: %@
Index =
TQ,R,V_index
Constant %@ (%lu) is of type %@ but value found has type %@
Constant %@ (%lu) value is required by function %@
-[MTLFunctionConstantValuesInternal setConstantValue:type:atIndex:]
Constant index (%lu) must be smaller than %u
-[MTLFunctionConstantValuesInternal setConstantValues:type:withRange:]
Constant index (%lu) must be smaller thank %u
named constants
index constants
writable
TB,R,V_writable
cache
T^{MTLCompilerCache=^^?@ii},R,V_compilerCache
disableRunTimeCompilation
TB,V_disableRunTimeCompilation
pipelineDescriptions queue
initWithFileDescriptor
stringWithUTF8String returned nil!
stringByStandardizingPath returned nil!
stringByDeletingLastPathComponent returned nil!
Library has no fileName property !
stringWithUTF8String return nil !
stringByAppendingPathComponent returned nil !
getLibraryByIndex
Invalid library index in pipeline library file
getLibraryByIndex_block_invoke
Error: %@
initializeDescriptorHash_block_invoke
pipeline descriptor has no name in file
pipeline descriptor %s duplicated
compute pipeline %s not found in pipelineLibrary.
newComputePipelineDescriptor
invalid compute pipeline descriptor %s in pipeline library
deserializeFunction
Function with no name in pipeline library
Specialized function %s not found in pipelineLibrary.
Base function with no name in pipeline library
Specialized Function %s has no 'base function' in pipeline library
Invalid library index in pipeline library for function %s
Function %@ could not be found in library
render pipeline %s not found in pipelineLibrary.
newRenderPipelineDescriptor
invalid render pipeline descriptor %s in pipeline library
pipelineNames
T@"NSArray",R
pipelineCache
T@"<MTLPipelineCache>",R,N
functionCache
T@"NSArray",R,V_pipelineNames
T@"<MTLPipelineCache>",R,D,N
newLibraryWithFile
filePath must not be nil.
filePath is not a NSString.
pipeline library not found
%s/pipelines.desc
file not found: %s
could not open file: %s
%s/pipelines.%s
%s/functions
deserializeFunctionConstants
Unknown property in descriptor
-[_MTLParallelRenderCommandEncoder initWithCommandBuffer:renderPassDescriptor:]
framebuffer must not be nil.
render pass descriptor is not an MTLRenderPassDescriptor.
TQ,R,D,N,GgetType
MTLPixelFormatA8Unorm
MTLPixelFormatR8Unorm
MTLPixelFormatR8Unorm_sRGB
MTLPixelFormatR8Snorm
MTLPixelFormatR8Uint
MTLPixelFormatR8Sint
MTLPixelFormatR16Unorm
MTLPixelFormatR16Snorm
MTLPixelFormatR16Uint
MTLPixelFormatR16Sint
MTLPixelFormatR16Float
MTLPixelFormatRG8Unorm
MTLPixelFormatRG8Unorm_sRGB
MTLPixelFormatRG8Snorm
MTLPixelFormatRG8Uint
MTLPixelFormatRG8Sint
MTLPixelFormatB5G6R5Unorm
MTLPixelFormatA1BGR5Unorm
MTLPixelFormatABGR4Unorm
MTLPixelFormatBGR5A1Unorm
MTLPixelFormatR32Uint
MTLPixelFormatR32Sint
MTLPixelFormatR32Float
MTLPixelFormatRG16Unorm
MTLPixelFormatRG16Snorm
MTLPixelFormatRG16Uint
MTLPixelFormatRG16Sint
MTLPixelFormatRG16Float
MTLPixelFormatRGBA8Unorm
MTLPixelFormatRGBA8Unorm_sRGB
MTLPixelFormatRGBA8Snorm
MTLPixelFormatRGBA8Uint
MTLPixelFormatRGBA8Sint
MTLPixelFormatBGRA8Unorm
MTLPixelFormatBGRA8Unorm_sRGB
MTLPixelFormatRGB10A2Unorm
MTLPixelFormatBGR10A2Unorm
MTLPixelFormatRGB10A2Uint
MTLPixelFormatRG11B10Float
MTLPixelFormatRGB9E5Float
MTLPixelFormatRG32Uint
MTLPixelFormatRG32Sint
MTLPixelFormatRG32Float
MTLPixelFormatRGBA16Unorm
MTLPixelFormatRGBA16Snorm
MTLPixelFormatRGBA16Uint
MTLPixelFormatRGBA16Sint
MTLPixelFormatRGBA16Float
MTLPixelFormatRGBA16Float_XR
MTLPixelFormatRGBA32Uint
MTLPixelFormatRGBA32Sint
MTLPixelFormatRGBA32Float
MTLPixelFormatBGRA4Unorm
MTLPixelFormatRGBX8Unorm
MTLPixelFormatRGBX8Unorm_sRGB
MTLPixelFormatRGBX8Snorm
MTLPixelFormatRGBX8Uint
MTLPixelFormatRGBX8Sint
MTLPixelFormatRGBX16Uint
MTLPixelFormatRGBX16Sint
MTLPixelFormatRGBX16Float
MTLPixelFormatRGBX32Uint
MTLPixelFormatRGBX32Sint
MTLPixelFormatRGBX32Float
MTLPixelFormatPVRTC_RGB_2BPP
MTLPixelFormatPVRTC_RGB_2BPP_sRGB
MTLPixelFormatPVRTC_RGB_4BPP
MTLPixelFormatPVRTC_RGB_4BPP_sRGB
MTLPixelFormatPVRTC_RGBA_2BPP
MTLPixelFormatPVRTC_RGBA_2BPP_sRGB
MTLPixelFormatPVRTC_RGBA_4BPP
MTLPixelFormatPVRTC_RGBA_4BPP_sRGB
MTLPixelFormatEAC_R11Unorm
MTLPixelFormatEAC_R11Snorm
MTLPixelFormatEAC_RG11Unorm
MTLPixelFormatEAC_RG11Snorm
MTLPixelFormatEAC_RGBA8
MTLPixelFormatEAC_RGBA8_sRGB
MTLPixelFormatETC2_RGB8
MTLPixelFormatETC2_RGB8_sRGB
MTLPixelFormatETC2_RGB8A1
MTLPixelFormatETC2_RGB8A1_sRGB
MTLPixelFormatASTC_4x2_sRGB
MTLPixelFormatASTC_4x4_sRGB
MTLPixelFormatASTC_5x4_sRGB
MTLPixelFormatASTC_5x5_sRGB
MTLPixelFormatASTC_6x5_sRGB
MTLPixelFormatASTC_6x6_sRGB
MTLPixelFormatASTC_8x4_sRGB
MTLPixelFormatASTC_8x5_sRGB
MTLPixelFormatASTC_8x6_sRGB
MTLPixelFormatASTC_8x8_sRGB
MTLPixelFormatASTC_10x5_sRGB
MTLPixelFormatASTC_10x6_sRGB
MTLPixelFormatASTC_10x8_sRGB
MTLPixelFormatASTC_10x10_sRGB
MTLPixelFormatASTC_12x10_sRGB
MTLPixelFormatASTC_12x12_sRGB
MTLPixelFormatASTC_4x2_LDR
MTLPixelFormatASTC_4x4_LDR
MTLPixelFormatASTC_5x4_LDR
MTLPixelFormatASTC_5x5_LDR
MTLPixelFormatASTC_6x5_LDR
MTLPixelFormatASTC_6x6_LDR
MTLPixelFormatASTC_8x4_LDR
MTLPixelFormatASTC_8x5_LDR
MTLPixelFormatASTC_8x6_LDR
MTLPixelFormatASTC_8x8_LDR
MTLPixelFormatASTC_10x5_LDR
MTLPixelFormatASTC_10x6_LDR
MTLPixelFormatASTC_10x8_LDR
MTLPixelFormatASTC_10x10_LDR
MTLPixelFormatASTC_12x10_LDR
MTLPixelFormatASTC_12x12_LDR
MTLPixelFormatASTC_4x2_HDR
MTLPixelFormatASTC_4x4_HDR
MTLPixelFormatASTC_5x4_HDR
MTLPixelFormatASTC_5x5_HDR
MTLPixelFormatASTC_6x5_HDR
MTLPixelFormatASTC_6x6_HDR
MTLPixelFormatASTC_8x4_HDR
MTLPixelFormatASTC_8x5_HDR
MTLPixelFormatASTC_8x6_HDR
MTLPixelFormatASTC_8x8_HDR
MTLPixelFormatASTC_10x5_HDR
MTLPixelFormatASTC_10x6_HDR
MTLPixelFormatASTC_10x8_HDR
MTLPixelFormatASTC_10x10_HDR
MTLPixelFormatASTC_12x10_HDR
MTLPixelFormatASTC_12x12_HDR
MTLPixelFormatGBGR422
MTLPixelFormatBGRG422
MTLPixelFormatDepth32Float
MTLPixelFormatStencil8
MTLPixelFormatDepth32Float_Stencil8
MTLPixelFormatX32_Stencil8
MTLPixelFormatYCBCR8_420_2P
MTLPixelFormatYCBCR8_422_1P
MTLPixelFormatYCBCR8_422_2P
MTLPixelFormatYCBCR8_444_2P
MTLPixelFormatYCBCR10_444_1P
MTLPixelFormatYCBCR10_420_2P
MTLPixelFormatYCBCR10_422_2P
MTLPixelFormatYCBCR10_444_2P
MTLPixelFormatYCBCR10_420_2P_PACKED
MTLPixelFormatYCBCR10_422_2P_PACKED
MTLPixelFormatYCBCR10_444_2P_PACKED
MTLPixelFormatYCBCR8_420_2P_sRGB
MTLPixelFormatYCBCR8_422_1P_sRGB
MTLPixelFormatYCBCR8_422_2P_sRGB
MTLPixelFormatYCBCR8_444_2P_sRGB
MTLPixelFormatYCBCR10_444_1P_sRGB
MTLPixelFormatYCBCR10_420_2P_sRGB
MTLPixelFormatYCBCR10_422_2P_sRGB
MTLPixelFormatYCBCR10_444_2P_sRGB
MTLPixelFormatYCBCR10_420_2P_PACKED_sRGB
MTLPixelFormatYCBCR10_422_2P_PACKED_sRGB
MTLPixelFormatYCBCR10_444_2P_PACKED_sRGB
MTLPixelFormatRGB8_420_2P
MTLPixelFormatRGB8_422_2P
MTLPixelFormatRGB8_444_2P
MTLPixelFormatRGB10_420_2P
MTLPixelFormatRGB10_422_2P
MTLPixelFormatRGB10_444_2P
MTLPixelFormatRGB10_420_2P_PACKED
MTLPixelFormatRGB10_422_2P_PACKED
MTLPixelFormatRGB10_444_2P_PACKED
MTLPixelFormatYCBCR8_422_1P_REV
MTLPixelFormatRGB10A8_2P_XR10
MTLPixelFormatRGB10A8_2P_XR10_sRGB
MTLPixelFormatBGRA10_XR
MTLPixelFormatBGRA10_XR_sRGB
MTLPixelFormatBGR10_XR
MTLPixelFormatBGR10_XR_sRGB
MTLPixelFormatR10Unorm_X6
MTLPixelFormatR10Unorm_X6_sRGB
MTLPixelFormatRG10Unorm_X12
MTLPixelFormatRG10Unorm_X12_sRGB
MTLPixelFormatInvalid
Unrecognized Metal Feature Set for this platform
float
half
uint
short
ushort
commandTypes
inheritPipelineState
TB,D,N
inheritBuffers
maxVertexBufferBindCount
maxFragmentBufferBindCount
texture
T@"<MTLTexture>",&,D,N
level
slice
depthPlane
resolveTexture
resolveLevel
resolveSlice
resolveDepthPlane
loadAction
storeAction
storeActionOptions
clearColor
T{?=dddd},D,N
clearDepth
Td,D,N
depthResolveFilter
clearStencil
heap
T@"<MTLHeap>",R
allocatedSize
rootResource
T@"<MTLResource>",R
parentTexture
T@"<MTLTexture>",R
parentRelativeLevel
parentRelativeSlice
buffer
T@"<MTLBuffer>",R
bufferOffset
bufferBytesPerRow
textureType
width
height
depth
mipmapLevelCount
arrayLength
usage
framebufferOnly
TB,R,GisFramebufferOnly
allowGPUOptimizedContents
responsibleProcess
sharedAllocationInfo
T@"MTLResourceAllocationInfo",R
cachedAllocationInfo
rotation
swizzle
isCompressed
uniqueIdentifier
resourceIndex
numFaces
isDrawable
-[MTLRenderPassColorAttachmentDescriptorInternal setTexture:]
texture is not a MTLTextureImplementation.
-[MTLRenderPassColorAttachmentDescriptorInternal setResolveTexture:]
resolveTexture is not a MTLTextureImplementation.
-[MTLRenderPassDepthAttachmentDescriptorInternal setTexture:]
-[MTLRenderPassDepthAttachmentDescriptorInternal setResolveTexture:]
-[MTLRenderPassStencilAttachmentDescriptorInternal setTexture:]
-[MTLRenderPassStencilAttachmentDescriptorInternal setResolveTexture:]
-[MTLRenderPassColorAttachmentDescriptorArrayInternal objectAtIndexedSubscript:]
attachmentIndex(%lu) must be < %lu
-[MTLRenderPassColorAttachmentDescriptorArrayInternal setObject:atIndexedSubscript:]
attachment is not a MTLRenderPassColorAttachmentDescriptor.
T@"MTLRenderPassColorAttachmentDescriptorArray",R,D
depthAttachment
T@"MTLRenderPassDepthAttachmentDescriptor",C,D,N
stencilAttachment
T@"MTLRenderPassStencilAttachmentDescriptor",C,D,N
visibilityResultBuffer
T@"<MTLBuffer>",&,D,N
renderTargetArrayLength
TQ,N,V_renderTargetArrayLength
-[MTLRenderPassDescriptorInternal setDepthAttachment:]
depthAttachment is not a MTLRenderPassDepthAttachmentDescriptor.
-[MTLRenderPassDescriptorInternal setStencilAttachment:]
stencilAttachment is not a MTLRenderPassStencilAttachmentDescriptor.
Color Attachment %u
Depth Attachment:
Stencil Attachment:
visibilityResultBuffer =
length
-[MTLRenderPassDescriptorInternal setVisibilityResultBuffer:]
buffer is not a MTLBuffer.
-[MTLRenderPassDescriptorInternal setSamplePositions:count:]
count (%lu) is not a supported sample count for custom positions.
Non-zero count (%lu) provided with a NULL positions parameter.
Provided sample position x-coodinate (%f) at index %u is not within the range [0,1).
Provided sample position y-coodinate (%f) at index %u is not within the range [0,1).
-[MTLRenderPassDescriptorInternal getSamplePositions:count:]
Non-zero count (%lu) does not match the number of programmed custom sample positions (%lu).
-[MTLRenderPassDescriptorInternal validate:width:height:]
Custom sample positions were specified, but Programmable Sample Positions is not supported on this device.
texture =
level =
slice =
depthPlane =
resolveTexture =
resolveLevel =
resolveSlice =
resolveDepthPlane =
loadAction =
storeAction =
storeActionOptions =
clearColor =
yInvert =
MTLLoadActionDontCare
MTLLoadActionLoad
MTLLoadActionClear
MTLStoreActionDontCare
MTLStoreActionStore
MTLStoreActionMultisampleResolve
MTLStoreActionStoreAndMultisampleResolve
MTLStoreActionUnknown
none
MTLStoreActionOptionCustomSamplePositions
(%g %g %g %g)
validateMTLLoadAction
loadAction is not a valid MTLLoadAction.
validateMTLStoreAction
storeAction is not a valid MTLStoreAction.
validateMTLStoreActionOptions
storeActionOptions contains unrecognized bits (%#x)
resolveFilter =
clearDepth =
MTLMultisampleDepthResolveFilterSample0
MTLMultisampleDepthResolveFilterMin
MTLMultisampleDepthResolveFilterMax
validateDepthAttachmentMTLStoreAction
validateMTLMultisampleDepthResolveFilter
resolveFilter is not a valid MTLMultisampleDepthResolveFilter.
clearStencil =
validateStencilAttachmentMTLStoreActionOptions
storeActionOptions contains unrecognized bits: %#x
Stencil attachment storeActionOptions (%#x) contains options incompatible with this attachment type: %@
Custom Sample Positions:
number of positions = 
sample 
pipelineCollection
addLibrary
collecting libraries compiled from source is unsupported
library%u
%s.metallib
addLibrary_block_invoke
collected two libraries with the same name (%@)
variant%u
getFunctionData
library was not collected for function %@
function %@ was not collected but it is referenced in the descriptor
dumpLibraries_block_invoke
unable to load library data for %@
unable to write library data to %@: %@
writeJSONToFile_block_invoke
writing serialized pipelines to '%@' failed with error: %@
JSONDataNoSync
serialization failed with error: %@
0123456789ABCDEF
MTLCommandBufferErrorDomain
MTLLibraryErrorDomain
MTLPurgeableStateKeepCurrent
MTLPurgeableStateNonVolatile
MTLPurgeableStateVolatile
MTLPurgeableStateEmpty
MTLResourceCPUCacheModeWriteCombined 
MTLResourceCPUCacheModeDefaultCache 
MTLResourceCPUCacheModeInvalid 
MTLResourceStorageModePrivate 
MTLResourceStorageModeShared 
MTLResourceStorageModeMemoryless 
MTLResourceStorageModeInvalid 
MTLResourceHazardTrackingModeUntracked 
memoryPool
T@"NSString",R,D
virtualSize
residentSize
dirtySize
pageoffRequired
purgeable
MTLSamplerMinMagFilterNearest
MTLSamplerMinMagFilterLinear
MTLSamplerMinMagFilterCubic
MTLSamplerMipFilterNotMipmapped
MTLSamplerMipFilterNearest
MTLSamplerMipFilterLinear
MTLSamplerAddressModeClampToEdge
MTLSamplerAddressModeRepeat
MTLSamplerAddressModeMirrorRepeat
MTLSamplerAddressModeClampToZero
forceResourceIndex
minFilter
magFilter
mipFilter
maxAnisotropy
sAddressMode
tAddressMode
rAddressMode
borderColor
normalizedCoordinates
lodMinClamp
Tf,D,N
lodMaxClamp
lodAverage
TB,N,V_lodAverage
compareFunction
supportArgumentBuffers
minFilter =
magFilter =
mipFilter =
maxAnisotropy =
sAddressMode =
tAddressMode =
rAddressMode =
normalizedCoordinates =
lodMinClamp =
lodMaxClamp =
lodAverage =
compareFunction =
-[MTLSamplerDescriptorInternal setLabel:]
-[_MTLSamplerState initWithDevice:samplerDescriptor:]
desc is not a MTLSamplerDescriptor.
_MTLCreateConstantSamplerDescriptorsFromBitmasks
Constant sampler does not have the most significant bit set: 0x%llX
validateMTLSamplerMinMagFilter
filter is not a valid MTLSamplerMinMagFilter.
validateMTLSamplerMipFilter
mipFilter is not a valid MTLSamplerMipFilter.
validateMTLSamplerAddressMode
addressMode is not a valid MTLSamplerAddressMode.
addressModeFromConstantSamplerLiteral
Unexpected MTLSamplerAddressMode from constant sampler reflection: %llu
compareFunctionFromConstantSamplerLiteral
Unexpected MTLCompareFunction from constant sampler reflection: %llu
MTLTextureType1D
MTLTextureType1DArray
MTLTextureType2D
MTLTextureType2DArray
MTLTextureType2DMultisample
MTLTextureTypeCube
MTLTextureType3D
MTLTextureTypeTextureBuffer
MTLCPUCacheModeWriteCombined
MTLCPUCacheModeDefaultCache
MTLStorageModePrivate
MTLStorageModeMemoryless
MTLTextureUsageShaderRead
MTLTextureUsageShaderWrite
MTLTextureUsageRenderTarget
MTLTextureUsagePixelFormatView
MTLTextureUsageUnknown
validateMTLTextureType
type (%lu) is not a valid MTLTextureType.
MTLTextureSwizzleRed
MTLTextureSwizzleGreen
MTLTextureSwizzleBlue
MTLTextureSwizzleAlpha
MTLTextureSwizzleOne
MTLTextureSwizzleZero
resourceOptions
textureType =
pixelFormat =
width =
height =
depth =
mipmapLevelCount =
sampleCount =
arrayLength =
cpuCacheMode =
storageMode =
resourceOptions =
framebufferOnly =
usage =
swizzle =
allowGPUOptimizedContents =
-[MTLTextureDescriptorInternal validateWithDevice:]
MTLTextureDescriptor has invalid pixelFormat (%lu).
MTLTextureDescriptor requests a height of %lu but the texture type %s requires that height is 1
MTLTextureDescriptor requests a mipmapLevelCount of %lu but the texture type %s requires that mipmapLevelCount is 1
MTLTextureDescriptor requests a depth of %lu but the texture type %s requires that depth is 1
MTLTextureDescriptor requests %lu mipmap levels, but the dimensions (%lu, %lu, %lu) can only support a maxiumum of %lu levels
MTLTextureDescriptor has sampleCount set but is using a type that does not allow sampleCount.
MTLTextureDescriptor mipmapLevelCount must equal 1 for multisample textures.
MTLTextureDescriptor pixelFormat (%s) does not support multisample textures.
MTLTextureDescriptor sampleCount must be > 1 for multisample textures.
MTLTextureDescriptor sampleCount (%lu) is not supported by device.
MTLTextureDescriptor width must equal height for cube textures.
MTLTextureDescriptor has an arrayLength of %lu, but %s is not an array texture type
MTLTextureDescriptor arrayLength (%lu) is set to zero or greater than the max allowed size (%lu).
MTLTextureDescriptor has a compressed pixel format set with a sample count greater than one.
ASTC 3D supported on MTLFeatureSet_tvOS_GPUFamily2_v1 and later
MTLTextureDescriptor: compressed pixel formats require texture type of MTLTextureType2D[Array] or MTLTextureTypeCube[Array].
MTLTextureDescriptor has a PVRTC pixel format (%s) set with non-square and/or non-power of two dimensions.
MTLTextureDescriptor has a non-zero rotation set but is not marked as framebufferOnly.
MTLTextureDescriptor requests %lu mipmap levels, but the MTLPixelFormat422 pixel format does not support mipmaps.
MTLTextureDescriptor: MTLPixelFormat422 requires MTLTextureType2D.
MTLTextureDescriptor: MTLPixelFormat422 requires even width.
MTLTextureDescriptor: depth/stencil pixel formats require texture type of MTLTextureType2D[Array] or MTLTextureTypeCube[Array].
validateMTLTextureSwizzle
swizzle is not a valid MTLTextureSwizzle.
validateMTLPixelFormat
pixelFormat (%lu) is not a valid MTLPixelFormat.
invalid cpuCacheMode (%lu)
invalid storageMode (%lu). Must be one of
 %@(%lu)
validateMTLResourceOptions
MTLResourceOptions (0x%lx) contains invalid/unsupported CPUCacheMode.
MTLResourceOptions (0x%lx) contains invalid/unsupported MTLResourceStorageMode bits.
MTLResourceOptions (0x%lx) contains unknown bits.
validateMTLTextureUsage
MTLTextureUsage has unknown bits 0x%lx.
validateMTLTextureRotation
rotation is not a valid MTLTextureRotation.
validateMTLTextureCompressionMode
compressionMode is not a valid MTLTextureCompressionMode.
validateTextureDimensions
MTLTextureDescriptor has width of zero.
MTLTextureDescriptor has width (%lu) greater than the maximum allowed size of %lu.
MTLTextureDescriptor has height of zero.
MTLTextureDescriptor has height (%lu) greater than the maximum allowed size of %lu.
MTLTextureDescriptor has depth of zero.
MTLTextureDescriptor has depth (%lu) greater than the maximum allowed size of %lu.
MTLTextureDescriptor has arrayLength of zero.
MTLTextureDescriptor has arrayLength (%lu) greater than the maximum allowed size of %lu.
validateMTLArgumentAccess
access (%lu) is not a valid MTLArgumentAccess.
members
T@"NSArray",R,D
DataType =
isIndirectArgumentBuffer
TB,V_isIndirectArgumentBuffer
MTLDataTypeNone
MTLDataTypeStruct
MTLDataTypeArray
MTLDataTypeFloat
MTLDataTypeFloat2
MTLDataTypeFloat3
MTLDataTypeFloat4
MTLDataTypeFloat2x2
MTLDataTypeFloat2x3
MTLDataTypeFloat2x4
MTLDataTypeFloat3x2
MTLDataTypeFloat3x3
MTLDataTypeFloat3x4
MTLDataTypeFloat4x2
MTLDataTypeFloat4x3
MTLDataTypeFloat4x4
MTLDataTypeHalf
MTLDataTypeHalf2
MTLDataTypeHalf3
MTLDataTypeHalf4
MTLDataTypeHalf2x2
MTLDataTypeHalf2x3
MTLDataTypeHalf2x4
MTLDataTypeHalf3x2
MTLDataTypeHalf3x3
MTLDataTypeHalf3x4
MTLDataTypeHalf4x2
MTLDataTypeHalf4x3
MTLDataTypeHalf4x4
MTLDataTypeInt
MTLDataTypeInt2
MTLDataTypeInt3
MTLDataTypeInt4
MTLDataTypeUInt
MTLDataTypeUInt2
MTLDataTypeUInt3
MTLDataTypeUInt4
MTLDataTypeShort
MTLDataTypeShort2
MTLDataTypeShort3
MTLDataTypeShort4
MTLDataTypeUShort
MTLDataTypeUShort2
MTLDataTypeUShort3
MTLDataTypeUShort4
MTLDataTypeChar
MTLDataTypeChar2
MTLDataTypeChar3
MTLDataTypeChar4
MTLDataTypeUChar
MTLDataTypeUChar2
MTLDataTypeUChar3
MTLDataTypeUChar4
MTLDataTypeBool
MTLDataTypeBool2
MTLDataTypeBool3
MTLDataTypeBool4
MTLDataTypeTexture
MTLDataTypeSampler
MTLDataTypePointer
MTLArgumentAccessReadOnly
MTLArgumentAccessReadWrite
MTLArgumentAccessWriteOnly
elementType
access
dataSize
elementIsArgumentBuffer
ElementType =
%@ ElementTypeDescription = %@
Access =
Alignment =
DataSize =
textureDataType
isDepthTexture
TextureDataType =
TextureType =
IsDepthTexture =
argumentIndex
Offset =
ArgumentIndex =
TypeInfo =
 nil
render_target
TQ,R,V_render_target
raster_order_group
TQ,R,V_raster_order_group
argumentIndexStride
ArrayLength =
Stride =
ArgumentIndexStride =
ElementTypeInfo = %@
TQ,N,V_argumentIndexStride
indirectArgumentIndexStride
TQ,N
bufferIndirectArgumentType
T@"MTLArgument",R,D
indirectConstantAlignment
indirectConstantDataSize
indirectConstantDataType
active
TB,R,D,GisActive
bufferAlignment
bufferDataSize
bufferDataType
bufferStructType
T@"MTLStructType",R,D
bufferPointerType
T@"MTLPointerType",R,D
threadgroupMemoryAlignment
threadgroupMemoryDataSize
-[MTLArgumentInternal bufferAlignment]
Querying buffer alignment on an argument that is not a buffer
-[MTLArgumentInternal bufferDataSize]
Querying buffer data size on an argument that is not a buffer
-[MTLArgumentInternal bufferDataType]
Querying buffer data type on an argument that is not a buffer
-[MTLArgumentInternal indirectConstantAlignment]
Querying indirect constant alignment on an argument that is not an indirect constant
-[MTLArgumentInternal indirectConstantDataSize]
Querying indirect constant data size on an argument that is not an indirect constant
-[MTLArgumentInternal indirectConstantDataType]
Querying indirect constant data type on an argument that is not an indirect constant
-[MTLArgumentInternal bufferIndirectArgumentType]
Not supported at this point
-[MTLArgumentInternal bufferStructType]
Querying buffer struct type on an argument that is not a buffer
-[MTLArgumentInternal threadgroupMemoryAlignment]
Querying threadgroup memory alignment on an argument that is not a threadgroup memory
-[MTLArgumentInternal threadgroupMemoryDataSize]
Querying threadgroup memory data size on an argument that is not a threadgroup memory
-[MTLArgumentInternal textureType]
Querying texture type on an argument that is not a texture
-[MTLArgumentInternal textureDataType]
Querying texture data type on an argument that is not a texture
LocationIndex =
IsActive =
%@ TypeInfo = %@
airMDType =
dataType =
name =
airMDType
T@"NSString",R,V_airMDType
TQ,R,V_offset
bufferIndex =
baseInstanceUnused =
TQ,R,V_bufferIndex
TQ,R,V_stride
TQ,R,V_stepFunction
TQ,R,V_stepRate
baseInstanceUnused
TB,R,V_baseInstanceUnused
MTLArgumentTypeBuffer
MTLArgumentTypeThreadgroupMemory
MTLArgumentTypeTexture
MTLArgumentTypeSampler
serializedRequest
Corrupted library
compiler request queue
compiler reply queue
com.apple.MTLCompilerService
v16@?0@"NSObject<OS_xpc_object>"8
requestType
targetData
pluginPath
client_name
reply
errorMessage
Compiler encountered an internal error
compiler service could not be reached
CompilerConnectionSerialQueue
v36@?0I8r^v12Q20r*28
This object may only be encoded by an NSXPCCoder.
Port
Label
This object may only be decoded by an NSXPCCoder.
supportsSecureCoding
dispatchQueue
T@"NSObject<OS_dispatch_queue>",R,D
arguments
Compute Arguments =
Argument %u:
T@"<MTLFunction>",&,D,N
T@"MTLStageInputOutputDescriptor",C,D,N
T@"MTLPipelineBufferDescriptorArray",R,D
computeFunction =
threadGroupSizeIsMultipleOfThreadExecutionWidth =
maxTotalThreadsPerThreadgroup =
stageInputDescriptor =
pipelineLibrary =
buffers = 
forceResourceIndex =
resourceIndex =
-[MTLComputePipelineDescriptorInternal setLabel:]
-[MTLComputePipelineDescriptorInternal setComputeFunction:]
computeFunction must not be nil.
functionType
patchType
patchControlPointCount
Tq,R
vertexAttributes
stageInputAttributes
functionConstantsDictionary
computeFunction is not a MTLFunction.
computeFunction functionType is not a MTLFunctionTypeKernel.
-[MTLComputePipelineDescriptorInternal setStageInputDescriptor:]
stageInputDescriptor is not a MTLStageInputOutputDescriptor.
-[MTLComputePipelineDescriptorInternal setMaxTotalThreadsPerThreadgroup:]
max total threads must be less than or equal to %d.
-[MTLComputePipelineDescriptorInternal validateWithDevice:]
computeFunction is associated with a different device
function %s cannot be used to build a pipeline state. Use newFunctionWithName:constantValues:... to get the specialized function
-[_MTLComputePipelineState initWithDevice:pipelineStateDescriptor:]
desc is not a MTLComputePipelineDescriptor.
threadExecutionWidth
staticThreadgroupMemoryLength
IABEmulationData
T@"MTLIndirectArgumentBufferEmulationData",&,N,V_iabEmulationData
com.apple.metal.gl
constantBlockAlignment
Device serial queue
MTL_DUMP_PIPELINES_TO_JSON_FILE
MTL_DUMP_LIBRARIES_TO_DIRECTORY
-[_MTLDevice newLibraryWithURL:error:]
url must not be nil.
Invalid file url
Apple
default
metallib
no default library was found
v24@?0@"<MTLLibrary>"8@"NSError"16
-[_MTLDevice endCollectingPipelineDescriptors]
startCollectingPipelineDescriptors was not called
v24@?0@"<MTLComputePipelineState>"8@"NSError"16
v32@?0@"<MTLComputePipelineState>"8@"MTLComputePipelineReflection"16@"NSError"24
ciKernelMain
-[_MTLDevice initLimits]
_limits.maxColorAttachments > 0
_limits.maxIndirectBuffers > 0
_limits.maxIndirectTextures > 0
_limits.maxIndirectSamplers > 0
_limits.maxIndirectSamplersPerDevice > 0
-[_MTLDevice minimumLinearTextureAlignmentForPixelFormat:]
Linear textures do not support compressed pixel formats
Linear textures do not support depth/stencil pixel formats
-[_MTLDevice getDefaultSamplePositions:count:]
count (%lu) is not supported on this device.
Null provided for positions array.
-[_MTLDevice newArgumentEncoderWithArguments:structType:]
count must be greater than zero
dataType (%@) is not a valid data type
Constant block alignment can only be set the first constant in a constant block
Invalid argument type at index %lu
serialQueue
T@"NSObject<OS_dispatch_queue>",R,V_serialQueue
compiler
T@"MTLCompiler",R,V_compiler
T{IndirectArgumentBufferCapabilities=b1b1b1b29},R,D
MTLFeatureSet_tvOS_GPUFamily1_v1
MTLFeatureSet_tvOS_GPUFamily1_v2
MTLFeatureSet_tvOS_GPUFamily1_v3
MTLFeatureSet_tvOS_GPUFamily2_v1
MTLFeatureSet_tvOS_GPUFamily1_v4
MTLFeatureSet_tvOS_GPUFamily2_v2
Libraries From Source
Pipelines
Render Pipelines
Compute Pipelines
index =
access =
constantBlockAlignment =
libraryBuilder
char
uchar
bool
float2
half2
int2
uint2
short2
ushort2
char2
uchar2
bool2
float3
half3
int3
uint3
short3
ushort3
char3
uchar3
bool3
float4
half4
int4
uint4
short4
ushort4
char4
uchar4
bool4
validateMTLDataType
type (%lu) is not a valid MTLDataType.
primitiveType
TQ,N,V_primitiveType
vertexStart
TQ,N,V_vertexStart
vertexCount
TQ,N,V_vertexCount
instanceCount
TQ,N,V_instanceCount
baseInstance
TQ,N,V_baseInstance
indexCount
TQ,N,V_indexCount
TQ,N,V_indexType
indexBufferVirtualAddress
T^v,N,V_indexBufferVirtualAddress
indexBufferOffset
TQ,N,V_indexBufferOffset
baseVertex
TQ,N,V_baseVertex
numberOfPatchControlPoints
TQ,N,V_numberOfPatchControlPoints
patchStart
TQ,N,V_patchStart
patchCount
TQ,N,V_patchCount
patchIndexBufferVirtualAddress
T^v,N,V_patchIndexBufferVirtualAddress
patchIndexBufferOffset
TQ,N,V_patchIndexBufferOffset
controlPointIndexBufferVirtualAddress
T^v,N,V_controlPointIndexBufferVirtualAddress
virtualAddress
T^v,N,V_virtualAddress
instanceStride
TQ,N,V_instanceStride
scale
Tf,N,V_scale
Frontend total time for library from source in ns
Frontend total time for function specialization in ns
Frontend total time for CoreImage SPI in ns
Functions in library
Library was cached
tracingEnabled
glBufferBindPoints
debuggingEnabled
compileTimeStatisticsEnabled
additionalCompilerArguments
T@"NSString",D,N
preprocessorMacros
T@"NSDictionary",C,D,N
fastMathEnabled
languageVersion
preprocessorMacros:
fastMathEnabled =
languageVersion =
%u:%u
attributeIndex
attributeType
patchData
TB,R,D,GisPatchData
patchControlPointData
TB,R,D,GisPatchControlPointData
attributeIndex =
attributeType =
active =
isPatchData =
isPatchControlPointData =
required
type =
required =
#main
Invalid library file (unexpected end of file)
Invalid library file
This library format is not supported on this platform (or was built with an old version of the tools)
This version of metallib is too old and not supported any longer.
This version of metallib is too recent and not supported.
Invalid library file (missing token data)
readFunctionPublicOrPrivateMetadata
Invalid library file/data (unexpected end of file)
Invalid library file/data (bad VATY token)
readFunctionSourceArchiveMetadata
filepath must not be nil.
filepath is not a NSString.
library not found
error while opening the library
metal library file %s failed to open with error: %s
^{MTLLibraryData=^^?i@@}16@?0^@8
newLibraryWithData
data should not be null
-[_MTLLibrary newFunctionWithNameInternal:]
functionName must not be nil.
functionName is not a NSString.
-[_MTLLibrary newExternFunctionWithName:]
Function %@ has type %@, expected MTLFunctionTypeExtern.
-[_MTLLibrary newFunctionWithName:]
Function %@ was not found in the library
MTLLibraryData queue
Compilation succeeded with: 
Compiler found unsupported library with both qualified functions and extern functions
Compiler returned an empty reply
compiler error log is invalid
Compilation failed: 
Compilation failed: 
 compiler response is invalid
initLibraryContainerWithRequestData
requestData must not be nil.
requestSize must not be 0.
v32@?0Q8@"NSObject<OS_dispatch_data>"16r*24
newLibraryWithSource
source must not be nil.
source is not a NSString.
options is not a MTLCompileOptions.
-std=ios-metal%u.%u 
-debug-info-kind=line-tables-only 
METAL_DISABLE_OPT
functionNames:
functionNames
overrideTriple
externFunctionNames
functionDictionary
T@"NSMutableDictionary",R,&,N,V_functionDictionary
T@"NSArray",R,&,V_functionNames
T@"NSArray",R,&,V_externFunctionNames
libraryData
T^{MTLLibraryData=^^?i@@},R,V_libraryData
cacheEntry
T^{MTLLibraryContainer=i{?=[32C]}^{MTLLibraryData}@@@@@},R,V_cacheEntry
T@"NSString",C,D
T^{MTLPipelineCollection={unordered_map<_MTLLibrary *, MTLPipelineLibrarySerializer::LibraryDescriptor *, std::__1::hash<_MTLLibrary *>, std::__1::equal_to<_MTLLibrary *>, std::__1::allocator<std::__1::pair<_MTLLibrary *const, MTLPipelineLibrarySerializer::LibraryDescriptor *> > >={__hash_table<std::__1::__hash_value_type<_MTLLibrary *, MTLPipelineLibrarySerializer::LibraryDescriptor *>, std::__1::__unordered_map_hasher<_MTLLibrary *, std::__1::__hash_value_type<_MTLLibrary *, MTLPipelineLibrarySerializer::LibraryDescriptor *>, std::__1::hash<_MTLLibrary *>, true>, std::__1::__unordered_map_equal<_MTLLibrary *, std::__1::__hash_value_type<_MTLLibrary *, MTLPipelineLibrarySerializer::LibraryDescriptor *>, std::__1::equal_to<_MTLLibrary *>, true>, std::__1::allocator<std::__1::__hash_value_type<_MTLLibrary *, MTLPipelineLibrarySerializer::LibraryDescriptor *> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, MTLPipelineLibrarySerializer::LibraryDescriptor *>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, MTLPipelineLibrarySerializer::LibraryDescriptor *>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, MTLPipelineLibrarySerializer::LibraryDescriptor *>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, MTLPipelineLibrarySerializer::LibraryDescriptor *>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, MTLPipelineLibrarySerializer::LibraryDescriptor *>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, MTLPipelineLibrarySerializer::LibraryDescriptor *>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, MTLPipelineLibrarySerializer::LibraryDescriptor *>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, MTLPipelineLibrarySerializer::LibraryDescriptor *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, MTLPipelineLibrarySerializer::LibraryDescriptor *>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, MTLPipelineLibrarySerializer::LibraryDescriptor *>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, MTLPipelineLibrarySerializer::LibraryDescriptor *>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<_MTLLibrary *, std::__1::__hash_value_type<_MTLLibrary *, MTLPipelineLibrarySerializer::LibraryDescriptor *>, std::__1::hash<_MTLLibrary *>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<_MTLLibrary *, std::__1::__hash_value_type<_MTLLibrary *, MTLPipelineLibrarySerializer::LibraryDescriptor *>, std::__1::equal_to<_MTLLibrary *>, true> >=f}}}{unordered_map<_MTLFunction *, MTLPipelineLibrarySerializer::FunctionDescriptor *, std::__1::hash<_MTLFunction *>, std::__1::equal_to<_MTLFunction *>, std::__1::allocator<std::__1::pair<_MTLFunction *const, MTLPipelineLibrarySerializer::FunctionDescriptor *> > >={__hash_table<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::FunctionDescriptor *>, std::__1::__unordered_map_hasher<_MTLFunction *, std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::FunctionDescriptor *>, std::__1::hash<_MTLFunction *>, true>, std::__1::__unordered_map_equal<_MTLFunction *, std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::FunctionDescriptor *>, std::__1::equal_to<_MTLFunction *>, true>, std::__1::allocator<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::FunctionDescriptor *> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::FunctionDescriptor *>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::FunctionDescriptor *>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::FunctionDescriptor *>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::FunctionDescriptor *>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::FunctionDescriptor *>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::FunctionDescriptor *>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::FunctionDescriptor *>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::FunctionDescriptor *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::FunctionDescriptor *>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::FunctionDescriptor *>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::FunctionDescriptor *>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<_MTLFunction *, std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::FunctionDescriptor *>, std::__1::hash<_MTLFunction *>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<_MTLFunction *, std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::FunctionDescriptor *>, std::__1::equal_to<_MTLFunction *>, true> >=f}}}{unordered_map<_MTLFunction *, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *, std::__1::hash<_MTLFunction *>, std::__1::equal_to<_MTLFunction *>, std::__1::allocator<std::__1::pair<_MTLFunction *const, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *> > >={__hash_table<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>, std::__1::__unordered_map_hasher<_MTLFunction *, std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>, std::__1::hash<_MTLFunction *>, true>, std::__1::__unordered_map_equal<_MTLFunction *, std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>, std::__1::equal_to<_MTLFunction *>, true>, std::__1::allocator<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<_MTLFunction *, std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>, std::__1::hash<_MTLFunction *>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<_MTLFunction *, std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>, std::__1::equal_to<_MTLFunction *>, true> >=f}}}{unordered_map<_MTLLibrary *, unsigned long, std::__1::hash<_MTLLibrary *>, std::__1::equal_to<_MTLLibrary *>, std::__1::allocator<std::__1::pair<_MTLLibrary *const, unsigned long> > >={__hash_table<std::__1::__hash_value_type<_MTLLibrary *, unsigned long>, std::__1::__unordered_map_hasher<_MTLLibrary *, std::__1::__hash_value_type<_MTLLibrary *, unsigned long>, std::__1::hash<_MTLLibrary *>, true>, std::__1::__unordered_map_equal<_MTLLibrary *, std::__1::__hash_value_type<_MTLLibrary *, unsigned long>, std::__1::equal_to<_MTLLibrary *>, true>, std::__1::allocator<std::__1::__hash_value_type<_MTLLibrary *, unsigned long> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, unsigned long>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, unsigned long>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, unsigned long>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, unsigned long>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, unsigned long>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, unsigned long>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, unsigned long>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, unsigned long>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, unsigned long>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, unsigned long>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, unsigned long>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<_MTLLibrary *, std::__1::__hash_value_type<_MTLLibrary *, unsigned long>, std::__1::hash<_MTLLibrary *>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<_MTLLibrary *, std::__1::__hash_value_type<_MTLLibrary *, unsigned long>, std::__1::equal_to<_MTLLibrary *>, true> >=f}}}{unordered_set<std::__1::basic_string<char>, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > >={__hash_table<std::__1::basic_string<char>, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::basic_string<char>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<std::__1::basic_string<char> > >=Q}{__compressed_pair<float, std::__1::equal_to<std::__1::basic_string<char> > >=f}}}{vector<MTLRenderPipelineDescriptor *, std::__1::allocator<MTLRenderPipelineDescriptor *> >=^@^@{__compressed_pair<MTLRenderPipelineDescriptor **, std::__1::allocator<MTLRenderPipelineDescriptor *> >=^@}}{vector<MTLComputePipelineDescriptor *, std::__1::allocator<MTLComputePipelineDescriptor *> >=^@^@{__compressed_pair<MTLComputePipelineDescriptor **, std::__1::allocator<MTLComputePipelineDescriptor *> >=^@}}@},V_pipelineCollection
-[_MTLFunction initWithName:type:libraryData:device:]
name must not be nil.
name is not a NSString.
-[_MTLFunction bitCodeHash]
-[_MTLFunction bitCodeFileSize]
-[_MTLFunction functionConstantsDictionary]
functionType =
attributes:
v32@?0Q8@"NSObject<OS_dispatch_data>"16@"NSString"24
filePath
lineNumber
unpackedFilePath
returnType
T@"MTLType",R
TQ,R,V_functionType
Tq,D
T@"NSString",C,V_unpackedFilePath
bitcodeType
TC,R,D
vendorPrivate
T@,R,V_vendorPrivate
bitCodeOffset
T@"NSArray",D
T@"MTLType",D
functionConstants
functionInputs
T@"NSObject<OS_dispatch_data>",R,D
needsFunctionConstantValues
Tq,R,D
v24@?0@"<MTLFunction>"8@"NSError"16
-[MTLCompiler initWithTargetData:cacheUUID:pluginPath:device:compilerFlags:]
pluginPath must not be nil.
pluginPath is not a NSString.
Jan 30 2019
21:49:18
compiler queue
functions
Failed to find precompiled data in pipeline library
v16@?0r^{MTLCompiledRequestReply=Q@^{?}@}8
function is nil
Function %@ is using language version %u.%u which is incompatible with this OS.
Function %@ has a deployment target which is incompatible with this OS.
reflection
Failed to find reflection in pipeline library
pipelineStatistics
Failed to find pipeline statistics in pipeline library
Failed to find precompiled function '%@' in pipeline library
v16@?0r^{MTLCompiledFunctionReply=Q@^{?}@^{?}@^{?}@^{?}@@@}8
T@"NSString",R,C,V_pluginPath
compilerQueue
T@"NSObject<OS_dispatch_queue>",R,V_compilerQueue
compilerConnectionManager
T^{MTLCompilerConnectionManager=^^?},R,V_compilerConnectionManager
compilerId
TI,R,V_compilerId
compilerFlags
TQ,R,V_compilerFlags
libmetal_timestamp.dylib
getMetalTimeStamp
Jan 30 2019 21:49:18
%s, %s
libraryCache
libraries
Invalid key
MTLFunctionTypeVertex
MTLFunctionTypeFragment
MTLFunctionTypeKernel
validateMTLFunctionType
type is not a valid MTLFunctionType.
programObject Queue
-[MTLBufferArgument bufferIndirectArgumentType]
%s.%u
stageInBuffer
vertexBuffer
Vertex Shader
Fragment Shader
Instruction count
Temporary register count
Compilation time in milliseconds
Uniform register count
ALU instruction count
Threadgroup atomic instruction count
Threadgroup load instruction count
Threadgroup store instruction count
Device atomic instruction count
Device load instruction count
Device store instruction count
Branch instruction count
Loop instruction count
Texture reads instruction count
Texture writes instruction count
Spilled bytes
Wait instruction count
Threadgroup memory
FP16 instruction count
FP32 instruction count
INT16 instruction count
INT32 instruction count
Max temporary registers
Max uniform registers
Max threadgroup memory
Max theoretical occupancy
Remarks
Compile Performance
Function was cached
Total time for synchronous pipeline creation in ns
Total time for synchronous compile service in ns
Total compile time in ns
Framework total compile time in ns
Backend compiler build request total time in ns
Driver total compile time in ns
Compiler total time in ns
Compiler translator pass time in ns
Compiler optimization pass time in ns
Compiler backend pass time in ns
TB,D,N,GisBlendingEnabled
Pixel Format
Blending Enabled
Source RGB Blend Factor
Destination RGB Blend Factor
Source Alpha Blend Factor
Destination Alpha Blend Factor
RGB Blend Operation
Alpha Blend Operation
Write Mask
vertexArguments
fragmentArguments
Vertex Arguments:
argumentsCount =
Fragment Arguments:
-[MTLRenderPipelineColorAttachmentDescriptorArrayInternal objectAtIndexedSubscript:]
-[MTLRenderPipelineColorAttachmentDescriptorArrayInternal setObject:atIndexedSubscript:]
attachment is not a MTLRenderPipelineColorAttachmentDescriptor.
T@"MTLVertexDescriptor",C,D,N
rasterSampleCount
TB,D,N,GisAlphaToCoverageEnabled
TB,D,N,GisAlphaToOneEnabled
TB,D,N,GisRasterizationEnabled
T@"MTLRenderPipelineColorAttachmentDescriptorArray",R,D
TQ,N,V_inputPrimitiveTopology
TB,D,N,GisTessellationFactorScaleEnabled
Alpha to Coverage =
Alpha to One =
Rasterization Enabled =
Sample Coverage =
Sample Mask =
0x%lx
Raster Sample Count =
Depth Attachment Format =
Stencil Attachment Format =
tessellationPartitionMode =
maxTessellationFactor =
tessellationFactorScaleEnabled =
tessellationFactorFormat =
tessellationControlPointIndexType =
tessellationFactorStepFunction =
tessellationOutputWindingOrder =
Vertex Function =
Fragment Function =
Vertex Array:
Vertex Enabled =
supportIndirectCommandBuffers =
Vertex   Depth Compare Clamp Mask =
Fragment Depth Compare Clamp Mask =
Color Attachments:
Color Attachment %u:
Pipeline Library:
Vertex Buffer %u:
Fragment Buffer %u:
-[MTLRenderPipelineDescriptorInternal fastBlendDescriptorAtIndex:]
index must be < %lu.
-[MTLRenderPipelineDescriptorInternal setLabel:]
-[MTLRenderPipelineDescriptorInternal setVertexFunction:]
vertexFunction is not a MTLFunction.
vertexFunction functionType is not a MTLFunctionTypeVertex.
-[MTLRenderPipelineDescriptorInternal setFragmentFunction:]
fragmentFunction is not a MTLFunction.
fragmentFunction functionType is not a MTLFunctionTypeFragment.
-[MTLRenderPipelineDescriptorInternal attachVertexDescriptor:]
vertexDescriptor is not a MTLVertexDescriptor.
-[MTLRenderPipelineDescriptorInternal setVertexDescriptor:]
-[MTLRenderPipelineDescriptorInternal validateWithDevice:]
vertexFunction must not be nil.
vertexFunction is associated with a different device
fragmentFunction must not be nil when vertexEnabled is false.
fragmentFunction is associated with a different device
tessellation is only supported on MTLFeatureSet_tvOS_GPUFamily2_v1 and later
maxTessellationFactor(%lu) must be <= %lu.
maxTessellationFactor(%lu) must be a power of 2 when using MTLTessellationPartitionModePow2.
maxTessellationFactor(%lu) must be even when using MTLTessellationPartitionModeFractionalOdd or MTLTessellationPartitionModeFractionalEven.
rasterSampleCount (%lu) is not supported by device.
Blending is enabled for render target %lu; however, the pixelformat %s for this render target is not blendable.
writeMask(0x%lx) is not MTLColorWriteMaskAll or MTLColorWriteMaskNone for render target %lu; however, the pixelformat %s for this render target requires MTLColorWriteMaskAll or MTLColorWriteMaskNone.
MTLRenderPipelineDescriptor color render target(%lu) exceeds platform max(%lu).
pixelFormat, for color render target(%lu), is not a valid MTLPixelFormat.
pixelFormat, for color render target(%lu), %s is not color renderable.
Dual source blending is used in combination with multiple render targets
MTLRenderPipelineDescriptor with alphaToCoverageEnabled requires a float/unorm pixel format, but colorAttachments[0].pixelFormat(%s) is not blendable
MTLRenderPipelineDescriptor with alphaToOneEnabled requires a float/unorm pixel format, but colorAttachments[0].pixelFormat(%s) is not blendable
This set of render targets requires %lu bytes of pixel storage. This device supports %lu bytes.
depthAttachmentPixelFormat is not a valid MTLPixelFormat.
depthAttachmentPixelFormat %s is not depth renderable.
stencilAttachmentPixelFormat is not a valid MTLPixelFormat.
stencilAttachmentPixelFormat %s is not stencil renderable.
No valid pixelFormats set.
depthAttachmentPixelFormat (%s) and stencilAttachmentPixelFormat (%s) must match.
postVertexDumpBufferIndex
-[_MTLRenderPipelineState initWithDevice:pipelineStateDescriptor:]
desc is not a MTLRenderPipelineDescriptor.
pipelines with tessellationFactorScaleEnabled = YES are not compatible with indirect command buffers
vertexIABEmulationData
T@"MTLIndirectArgumentBufferEmulationData",&,N,V_vertexIABEmulationData
fragmentIABEmulationData
T@"MTLIndirectArgumentBufferEmulationData",&,N,V_fragmentIABEmulationData
MTLBlendFactorZero
MTLBlendFactorOne
MTLBlendFactorSourceColor
MTLBlendFactorOneMinusSourceColor
MTLBlendFactorSourceAlpha
MTLBlendFactorOneMinusSourceAlpha
MTLBlendFactorDestinationColor
MTLBlendFactorOneMinusDestinationColor
MTLBlendFactorDestinationAlpha
MTLBlendFactorOneMinusDestinationAlpha
MTLBlendFactorSourceAlphaSaturated
MTLBlendFactorBlendColor
MTLBlendFactorOneMinusBlendColor
MTLBlendFactorBlendAlpha
MTLBlendFactorOneMinusBlendAlpha
MTLBlendFactorSource1Color
MTLBlendFactorOneMinusSource1Color
MTLBlendFactorSource1Alpha
MTLBlendFactorOneMinusSource1Alpha
MTLBlendOperationAdd
MTLBlendOperationSubtract
MTLBlendOperationReverseSubtract
MTLBlendOperationMin
MTLBlendOperationMax
None
blending =
Source blend factors:
RGB   =
Alpha =
Destination blend factors:
Blend operations:
writeMask =
validateMTLBlendFactor
factor is not a valid MTLBlendFactor.
validateMTLBlendOperation
func is not a valid MTLBlendOperation.
validateMTLColorWriteMask
MTLColorWriteMask mask has unknown bits 0x%lx.
pixelFormat is not a valid MTLPixelFormat.
MTLTessellationPartitionModePow2
MTLTessellationPartitionModeInteger
MTLTessellationPartitionModeFractionalOdd
MTLTessellationPartitionModeFractionalEven
MTLTessellationFactorFormatHalf
MTLTessellationControlPointIndexTypeNone
MTLTessellationControlPointIndexTypeUInt16
MTLTessellationControlPointIndexTypeUInt32
MTLTessellationFactorStepFunctionConstant
MTLTessellationFactorStepFunctionPerPatch
MTLTessellationFactorStepFunctionPerInstance
MTLTessellationFactorStepFunctionPerPatchAndPerInstance
MTLWindingClockwise
MTLWindingCounterClockwise
blending = NO
validateMTLTessellationPartitionMode
tessellationPartitionMode is not a valid MTLTessellationPartitionMode.
validateMaxTessellationFactor
maxTessellationFactor must be >= 1 and <= 64
validateMTLTessellationFactorFormat
tessellationFactorFormat is not a valid MTLTessellationFactorFormat.
validateMTLTessellationControlPointIndexType
tessellationControlPointIndexType is not a valid MTLTessellationControlPointIndexType.
validateMTLTessellationFactorStepFunction
tessellationFactorStepFunction is not a valid MTLTessellationFactorStepFunction.
validateMTLWinding
tessellationOutputWindingOrder is not a valid MTLWinding.
validateMTLLogicOp
logicOperation is not a valid MTLLogicOperation.
blendFactorSource
Invalid blend factor
validateBlendFactorNotDualSourced
MTLRenderPipelineDescriptor color render target(%lu) is using a blend factor (%@)which is can only be used for render target 0
T@"<MTLCommandQueue>",R,N
T@"<MTLDevice>",R,N,V_device
T@"<MTLCommandQueue>",R,N,V_commandQueue
validateMTLAttributeFormat
vertexFormat is not a valid MTLAttributeFormat / MTLAttributeFormat.
MTLAttributeFormatAlignment
MTLAttributeFormatSize
MTLAttributeFormatUChar2
MTLAttributeFormatUChar3
MTLAttributeFormatUChar4
MTLAttributeFormatChar2
MTLAttributeFormatChar3
MTLAttributeFormatChar4
MTLAttributeFormatUChar2Normalized
MTLAttributeFormatUChar3Normalized
MTLAttributeFormatUChar4Normalized
MTLAttributeFormatChar2Normalized
MTLAttributeFormatChar3Normalized
MTLAttributeFormatChar4Normalized
MTLAttributeFormatUShort2
MTLAttributeFormatUShort3
MTLAttributeFormatUShort4
MTLAttributeFormatShort2
MTLAttributeFormatShort3
MTLAttributeFormatShort4
MTLAttributeFormatUShort2Normalized
MTLAttributeFormatUShort3Normalized
MTLAttributeFormatUShort4Normalized
MTLAttributeFormatShort2Normalized
MTLAttributeFormatShort3Normalized
MTLAttributeFormatShort4Normalized
MTLAttributeFormatHalf2
MTLAttributeFormatHalf3
MTLAttributeFormatHalf4
MTLAttributeFormatFloat
MTLAttributeFormatFloat2
MTLAttributeFormatFloat3
MTLAttributeFormatFloat4
MTLAttributeFormatInt
MTLAttributeFormatInt2
MTLAttributeFormatInt3
MTLAttributeFormatInt4
MTLAttributeFormatUInt
MTLAttributeFormatUInt2
MTLAttributeFormatUInt3
MTLAttributeFormatUInt4
MTLAttributeFormatInt1010102Normalized
MTLAttributeFormatUInt1010102Normalized
MTLAttributeFormatUChar4Normalized_BGRA
MTLAttributeFormatUInt_VertexID
MTLAttributeFormatUInt_InstanceID
MTLAttributeFormatInvalid
MTLAttributeFormatUChar
MTLAttributeFormatChar
MTLAttributeFormatUCharNormalized
MTLAttributeFormatCharNormalized
MTLAttributeFormatUShort
MTLAttributeFormatShort
MTLAttributeFormatUShortNormalized
MTLAttributeFormatShortNormalized
MTLAttributeFormatHalf
-[MTLVertexBufferLayoutDescriptorInternal setStride:]
-[MTLVertexBufferLayoutDescriptorArrayInternal objectAtIndexedSubscript:]
-[MTLVertexBufferLayoutDescriptorArrayInternal setObject:atIndexedSubscript:]
-[MTLVertexAttributeDescriptorInternal setBufferIndex:]
-[MTLVertexAttributeDescriptorInternal setOffset:]
-[MTLVertexAttributeDescriptorArrayInternal objectAtIndexedSubscript:]
-[MTLVertexAttributeDescriptorArrayInternal setObject:atIndexedSubscript:]
T@"MTLVertexBufferLayoutDescriptorArray",R,D
T@"MTLVertexAttributeDescriptorArray",R,D
-[MTLVertexDescriptorInternal newSerializedDescriptor]
MTLVertexDescriptor
MTLVertexDescriptorDescription
stepFunction is not a valid MTLVertexStepFunction.
MTLVertexStepFunctionPerVertex not allowed with postTessellationVertexFunction.
stepRate(%lu) must be one if stepFunction is MTLVertexStepFunctionPerVertex.
stepRate(%lu) cannot be zero if stepFunction is MTLVertexStepFunctionPerInstance.
stepRate(%lu) must be zero if stepFunction is MTLVertexStepFunctionConstant.
MTLVertexStepFunctionPerPatch requires postTessellationVertexFunction.
stepRate(%lu) must be one if stepFunction is MTLVertexStepFunctionPerPatch.
MTLVertexStepFunctionPerPatchControlPoint requires postTessellationVertexFunction.
stepRate(%lu) must be one if stepFunction is MTLVertexStepFunctionPerPatchAndPerInstance.
MTLVertexStepFunctionConstant
MTLVertexStepFunctionPerVertex
MTLVertexStepFunctionPerInstance
MTLVertexStepFunctionPerPatch
MTLVertexStepFunctionPerPatchControlPoint
FS_CACHE_REUSE_ON_REBOOT
/com.apple.metal
FS_CACHE_SIZE
%s/%s
%s/%s%u
pipelineCache Queue
%s.tmp
Failed to open: %s
Failed to write to: %s
MTLDevice
NSObject
MTLDeviceSPI
_MTLIndirectRenderCommand
MTLIndirectRenderCommandSPI
MTLIndirectRenderCommand
MTLBufferLayoutDescriptor
NSCopying
MTLBufferLayoutDescriptorInternal
MTLBufferLayoutDescriptorArray
MTLBufferLayoutDescriptorArrayInternal
MTLAttributeDescriptor
MTLAttributeDescriptorInternal
MTLAttributeDescriptorArray
MTLAttributeDescriptorArrayInternal
MTLStageInputOutputDescriptor
MTLStageInputOutputDescriptorInternal
MTLCommandQueue
MTLDrawable
_MTLCommandBuffer
_MTLIndirectArgumentBufferLayout
_MTLIndirectArgumentEncoder
MTLArgumentEncoder
MTLEmulationIndirectArgumentBufferLayout
MTLEmulationIndirectArgumentEncoder
MTLIndirectArgumentEncoderSPI
MTLIndirectArgumentEncoder
MTLIndirectArgumentBufferEmulationData
MTLCommandBuffer
_MTLCommandEncoder
MTLHeapDescriptor
MTLHeapDescriptorInternal
_MTLCommandQueue
MTLCommandQueueDescriptor
MTLCommandQueueDescriptorInternal
_MTLDebugCommandEncoder
MTLDebugCommandEncoder
MTLCommandEncoder
MTLPipelineBufferDescriptor
MTLPipelineBufferDescriptorInternal
MTLPipelineBufferDescriptorArray
MTLPipelineBufferDescriptorArrayInternal
MTLCaptureManager
MTLStencilDescriptor
Driver
MTLStencilDescriptorInternal
MTLDepthStencilDescriptor
MTLDepthStencilDescriptorInternal
_MTLDepthStencilState
MTLDepthStencilStateSPI
MTLDepthStencilState
MTLNamedConstantValue
MTLIndexedConstantValue
MTLFunctionConstantValues
MTLFunctionConstantValuesInternal
MTLFunctionConstantSPI
_MTLPipelineCache
MTLPipelineCache
_MTLPipelineLibrary
MTLPipelineLibrarySPI
MTLPipelineLibrary
_MTLParallelRenderCommandEncoder
MTLParallelRenderCommandEncoder
MTLIndirectCommandBufferDescriptor
MTLIndirectCommandBufferDescriptorInternal
MTLRenderPassAttachmentDescriptor
MTLRenderPassColorAttachmentDescriptor
MTLRenderPassDepthAttachmentDescriptor
MTLRenderPassStencilAttachmentDescriptor
MTLTextureImplementation
MTLTextureSPI
MTLTexture
MTLResource
MTLResourceSPI
MTLRenderPassColorAttachmentDescriptorInternal
MTLRenderPassDepthAttachmentDescriptorInternal
MTLRenderPassStencilAttachmentDescriptorInternal
MTLRenderPassColorAttachmentDescriptorArray
MTLRenderPassColorAttachmentDescriptorArrayInternal
MTLRenderPassDescriptor
MTLBuffer
MTLRenderPassDescriptorInternal
MTLResourceAllocationInfo
NSCoding
MTLResourceList
MTLResourceListPool
MTLSamplerDescriptor
MTLSamplerDescriptorInternal
_MTLSamplerState
MTLSamplerStateSPI
MTLSamplerState
MTLTextureDescriptor
MTLTextureDescriptorInternal
MTLStructType
MTLStructTypeInternal
MTLType
MTLTypeInternal
MTLPointerType
MTLPointerTypeInternal
MTLTextureReferenceType
MTLTextureReferenceTypeInternal
MTLStructMember
MTLStructMemberInternal
MTLArrayType
MTLArrayTypeInternal
MTLArgument
MTLArgumentInternal
MTLPostVertexDumpOutput
MTLInferredInput
MTLSharedEventHandle
NSSecureCoding
MTLSharedEventListener
MTLSharedEventListenerInternal
MTLComputePipelineReflection
MTLComputePipelineReflectionInternal
MTLComputePipelineDescriptor
MTLFunction
MTLComputePipelineDescriptorInternal
_MTLComputePipelineState
MTLComputePipelineState
MTLIndirectArgumentDescriptorInternal
MTLIndirectArgumentDescriptor
MTLArgumentDescriptorInternal
MTLArgumentDescriptor
_MTLDevice
_MTLIndirectDrawArguments
_MTLIndirectDrawIndexedArguments
_MTLIndirectDrawPatchesArguments
_MTLIndirectDrawIndexedPatchesArguments
_MTLIndirectTessellationFactorArguments
MTLCompileOptions
MTLCompileOptionsInternal
MTLVertexAttribute
MTLVertexAttributeInternal
MTLAttribute
MTLAttributeInternal
MTLFunctionConstant
MTLFunctionConstantInternal
MTLFunctionReflection
MTLFunctionReflectionInternal
_MTLLibrary
MTLLibrarySPI
MTLLibrary
_MTLFunction
MTLFunctionSPI
_MTLFunctionInternal
MTLFunctionVariant
MTLCompiler
MTLBufferArgument
MTLIndirectConstantArgument
MTLThreadgroupMemoryArgument
MTLTextureArgument
MTLBuiltInArgument
MTLRenderPipelineColorAttachmentDescriptor
MTLRenderPipelineColorAttachmentDescriptorInternal
MTLRenderPipelineReflection
MTLRenderPipelineReflectionInternal
MTLRenderPipelineColorAttachmentDescriptorArray
MTLRenderPipelineColorAttachmentDescriptorArrayInternal
MTLRenderPipelineDescriptor
MTLRenderPipelineDescriptorInternal
_MTLRenderPipelineState
MTLRenderPipelineState
MTLCaptureScope
MTLVertexBufferLayoutDescriptor
MTLVertexBufferLayoutDescriptorInternal
MTLVertexBufferLayoutDescriptorArray
MTLVertexBufferLayoutDescriptorArrayInternal
MTLVertexAttributeDescriptor
MTLVertexAttributeDescriptorInternal
MTLVertexAttributeDescriptorArray
MTLVertexAttributeDescriptorArrayInternal
MTLVertexDescriptor
MTLVertexDescriptorInternal
B24@0:8@16
#16@0:8
@16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B16@0:8
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
@24@0:8Q16
{?=QQ}24@0:8@16
{?=QQ}32@0:8Q16Q24
@24@0:8@16
@32@0:8Q16Q24
@40@0:8r^v16Q24Q32
@48@0:8^v16Q24Q32@?40
@32@0:8@16^@24
@40@0:8@16@24^@32
v40@0:8@16@24@?32
@48@0:8@16Q24^@32^@40
v32@0:8@16@?24
v40@0:8@16Q24@?32
B24@0:8Q16
Q24@0:8Q16
v32@0:8^{?=ff}16Q24
@40@0:8@16Q24Q32
{?=QQQ}16@0:8
@"<MTLCommandQueue>"16@0:8
@"<MTLCommandQueue>"24@0:8Q16
{?=QQ}24@0:8@"MTLTextureDescriptor"16
@"<MTLHeap>"24@0:8@"MTLHeapDescriptor"16
@"<MTLBuffer>"32@0:8Q16Q24
@"<MTLBuffer>"40@0:8r^v16Q24Q32
@"<MTLBuffer>"48@0:8^v16Q24Q32@?<v@?^vQ>40
@"<MTLDepthStencilState>"24@0:8@"MTLDepthStencilDescriptor"16
@"<MTLTexture>"24@0:8@"MTLTextureDescriptor"16
@"<MTLSamplerState>"24@0:8@"MTLSamplerDescriptor"16
@"<MTLLibrary>"16@0:8
@"<MTLLibrary>"32@0:8@"NSBundle"16^@24
@"<MTLLibrary>"32@0:8@"NSString"16^@24
@"<MTLLibrary>"32@0:8@"NSURL"16^@24
@"<MTLLibrary>"32@0:8@"NSObject<OS_dispatch_data>"16^@24
@"<MTLLibrary>"40@0:8@"NSString"16@"MTLCompileOptions"24^@32
v40@0:8@"NSString"16@"MTLCompileOptions"24@?<v@?@"<MTLLibrary>"@"NSError">32
@"<MTLRenderPipelineState>"32@0:8@"MTLRenderPipelineDescriptor"16^@24
@"<MTLRenderPipelineState>"48@0:8@"MTLRenderPipelineDescriptor"16Q24^@32^@40
v32@0:8@"MTLRenderPipelineDescriptor"16@?<v@?@"<MTLRenderPipelineState>"@"NSError">24
v40@0:8@"MTLRenderPipelineDescriptor"16Q24@?<v@?@"<MTLRenderPipelineState>"@"MTLRenderPipelineReflection"@"NSError">32
@"<MTLComputePipelineState>"32@0:8@"<MTLFunction>"16^@24
@"<MTLComputePipelineState>"48@0:8@"<MTLFunction>"16Q24^@32^@40
v32@0:8@"<MTLFunction>"16@?<v@?@"<MTLComputePipelineState>"@"NSError">24
v40@0:8@"<MTLFunction>"16Q24@?<v@?@"<MTLComputePipelineState>"@"MTLComputePipelineReflection"@"NSError">32
@"<MTLComputePipelineState>"48@0:8@"MTLComputePipelineDescriptor"16Q24^@32^@40
v40@0:8@"MTLComputePipelineDescriptor"16Q24@?<v@?@"<MTLComputePipelineState>"@"MTLComputePipelineReflection"@"NSError">32
@"<MTLFence>"16@0:8
@"<MTLArgumentEncoder>"24@0:8@"NSArray"16
@"<MTLIndirectCommandBuffer>"40@0:8@"MTLIndirectCommandBufferDescriptor"16Q24Q32
@"<MTLEvent>"16@0:8
@"<MTLSharedEvent>"16@0:8
@"<MTLSharedEvent>"24@0:8@"MTLSharedEventHandle"16
v20@0:8B16
v24@0:8@16
v16@0:8
{?=II}16@0:8
@20@0:8I16
r^{?=IIIIIIIIIIIIIIIIIIffIIIIIIIIIIIIIIIIIIIIIIIIIIIIQ}16@0:8
f16@0:8
{IndirectArgumentBufferCapabilities=b1b1b1b29}16@0:8
v24@0:8^{MPSFunctionTable=}16
v40@0:8Q16^Q24Q32
B40@0:8^{?=III}16Q24Q32
@32@0:8^v16Q24
@40@0:8^v16@24Q32
^v16@0:8
@40@0:8@16r^{?=BQ^{?}}24^@32
@48@0:8^v16Q24@32@?40
@28@0:8@16B24
r^{MTLTargetDeviceArch=II*}16@0:8
v24@0:8@"<MTLDeviceSPI>"16
@"<MTLDevice>"16@0:8
@"<MTLCommandQueue>"24@0:8@"MTLCommandQueueDescriptor"16
@"_MTLIndirectArgumentBufferLayout"24@0:8@"MTLStructType"16
@"<MTLIndirectArgumentEncoder>"24@0:8@"_MTLIndirectArgumentBufferLayout"16
@"<MTLArgumentEncoder>"24@0:8@"_MTLIndirectArgumentBufferLayout"16
@"<MTLBuffer>"40@0:8@"MTLIndirectCommandBufferDescriptor"16Q24Q32
@"<MTLIndirectRenderCommandEncoder>"24@0:8@"<MTLBuffer>"16
@"<MTLSharedEvent>"20@0:8I16
@"NSObject<OS_dispatch_data>"16@0:8
v24@0:8@"NSObject<OS_dispatch_data>"16
@"<MTLComputePipelineState>"32@0:8@"MTLComputePipelineDescriptor"16^@24
v32@0:8@"MTLComputePipelineDescriptor"16@?<v@?@"<MTLComputePipelineState>"@"NSError">24
@"<MTLFunction>"32@0:8^v16Q24
@"<MTLFunction>"40@0:8^v16@"NSObject<OS_dispatch_data>"24Q32
@"<MTLIndirectArgumentEncoder>"24@0:8@"NSArray"16
@"<MTLComputePipelineState>"40@0:8@"NSArray"16r^{?=BQ^{?}}24^@32
@"<MTLLibrary>"40@0:8@"NSArray"16r^{?=BQ^{?}}24^@32
@"<MTLPipelineLibrarySPI>"32@0:8@"NSString"16^@24
@"NSData"16@0:8
@"<MTLTexture>"48@0:8^v16Q24@"MTLTextureDescriptor"32@?<v@?^vQ>40
@"<MTLTextureLayout>"28@0:8@"MTLTextureDescriptor"16B24
v40@0:8@16Q24Q32
v56@0:8Q16Q24Q32Q40Q48
v80@0:8Q16Q24Q32@40Q48Q56q64Q72
v24@0:8@"<MTLRenderPipelineState>"16
v40@0:8@"<MTLBuffer>"16Q24Q32
v80@0:8Q16Q24Q32@"<MTLBuffer>"40Q48Q56q64Q72
^v24@0:8Q16
@"_MTLIndirectDrawArguments"16@0:8
@"_MTLIndirectDrawIndexedArguments"16@0:8
@"_MTLIndirectDrawPatchesArguments"16@0:8
@"_MTLIndirectDrawIndexedPatchesArguments"16@0:8
@"_MTLIndirectTessellationFactorArguments"16@0:8
v112@0:8Q16Q24Q32@40Q48@56Q64Q72Q80@88Q96Q104
v116@0:8Q16Q24Q32@40Q48@56Q64Q72Q80@88Q96Q104f112
v96@0:8Q16Q24Q32@40Q48Q56Q64@72Q80Q88
v100@0:8Q16Q24Q32@40Q48Q56Q64@72Q80Q88f96
@24@0:8^{_NSZone=}16
v24@0:8Q16
v32@0:8@16Q24
[31@"MTLBufferLayoutDescriptorInternal"]
[31@"MTLAttributeDescriptorInternal"]
B32@0:8@16^@24
@"MTLBufferLayoutDescriptorArrayInternal"
@"MTLAttributeDescriptorArrayInternal"
@"<MTLCommandBuffer>"16@0:8
v24@0:8@"NSString"16
v24@0:8d16
v24@0:8@?16
d16@0:8
v24@0:8@?<v@?@"<MTLDrawable>">16
@32@0:8@16B24B28
v32@0:8@16d24
v32@0:8Q16@24
v40@0:8Q16Q24@32
v20@0:8i16
v44@0:8i16Q20r^@28Q36
@"<MTLCommandEncoder>"
@"_MTLCommandQueue<MTLCommandQueue>"
^{MTLDispatch=^{MTLDispatch}@?}
^{MTLSyncDispatch=^{MTLSyncDispatch}@?}
{_opaque_pthread_mutex_t="__sig"q"__opaque"[56c]}
{_opaque_pthread_cond_t="__sig"q"__opaque"[40c]}
@"NSError"
@"NSString"
@"NSDictionary"
@"NSMutableDictionary"
@"NSMutableArray"
^v40@0:8Q16@24Q32
Q40@0:8Q16@24Q32
I16@0:8
v48@0:8r^@16r^Q24{_NSRange=QQ}32
v40@0:8r^@16{_NSRange=QQ}24
v32@0:8@"<MTLBuffer>"16Q24
v32@0:8@"<MTLTexture>"16Q24
v32@0:8@"<MTLSamplerState>"16Q24
v32@0:8@"<MTLRenderPipelineState>"16Q24
v32@0:8@"<MTLIndirectCommandBuffer>"16Q24
@"<MTLArgumentEncoder>"24@0:8Q16
@32@0:8@16@24
@"<MTLDevice>"
@"_MTLIndirectArgumentBufferLayout"
@"_MTLIndirectArgumentBufferLayout"16@0:8
@"MTLEmulationIndirectArgumentBufferLayout"
v48@0:8{?=@?@?@?@?}16
@"NSObject<OS_dispatch_data>"
v24@0:8@?<v@?@"<MTLCommandBuffer>">16
v24@0:8@"<MTLDrawable>"16
v32@0:8@"<MTLDrawable>"16d24
@"<MTLBlitCommandEncoder>"16@0:8
@"<MTLRenderCommandEncoder>"24@0:8@"MTLRenderPassDescriptor"16
@"<MTLComputeCommandEncoder>"16@0:8
@"<MTLComputeCommandEncoder>"24@0:8Q16
v32@0:8@"<MTLEvent>"16Q24
@"<MTLParallelRenderCommandEncoder>"24@0:8@"MTLRenderPassDescriptor"16
@"NSError"16@0:8
v28@0:8I16I20I24
v32@0:8r^@16Q24
@"_MTLCommandBuffer<MTLCommandBuffer>"
r^{MTLHeapDescriptorPrivate=QQQ}16@0:8
^{MTLHeapDescriptorPrivate=QQQ}
@32@0:8@16Q24
v32@0:8^@16Q24
v28@0:8@16B24
v48@0:8@16Q24Q32@40
i24@0:8@16
i32@0:8@16Q24
q16@0:8
i16@0:8
@"_MTLDevice"
@"NSObject<OS_dispatch_group>"
@"NSObject<OS_dispatch_queue>"
@"NSObject<OS_dispatch_source>"
@"NSObject<OS_dispatch_semaphore>"
v24@0:8q16
v32@0:8r*16Q24
v32@0:8r*16r*24
v24@0:8r*16
v32@0:8@16r*24
v36@0:8@16r*24B32
v32@0:8@"<MTLBuffer>"16r*24
v24@0:8@"<MTLBuffer>"16
v36@0:8@"<MTLTexture>"16r*24B32
v32@0:8@"<MTLTexture>"16r*24
v24@0:8@"<MTLTexture>"16
r^{MTLPipelineBufferDescriptorPrivate=(?={?=b2}{?=Q})}16@0:8
{MTLPipelineBufferDescriptorPrivate=""(?=""{?="mutability"b2}""{?="bits"Q})}
[31@"MTLPipelineBufferDescriptorInternal"]
@"<MTLCaptureScope>"
r^{MTLStencilDescriptorPrivate=QQQQII}16@0:8
v20@0:8I16
{MTLStencilDescriptorPrivate="stencilCompareFunction"Q"stencilFailureOperation"Q"depthFailureOperation"Q"depthStencilPassOperation"Q"readMask"I"writeMask"I}
r^{MTLDepthStencilDescriptorPrivate=@@QB@}16@0:8
{MTLDepthStencilDescriptorPrivate="frontFaceStencil"@"MTLStencilDescriptorInternal""backFaceStencil"@"MTLStencilDescriptorInternal""depthCompareFunction"Q"depthWriteEnabled"B"label"@"NSString"}
@40@0:8r^v16Q24@32
v40@0:8r^v16Q24Q32
v48@0:8r^v16Q24{_NSRange=QQ}32
v40@0:8r^v16Q24@32
@"NSArray"16@0:8
^v40@0:8@16^Q24^@32
r^v24@0:8@16
^{MTLConstantStorage={map<std::__1::basic_string<char>, MTLConstantStorage::ConstantData, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, MTLConstantStorage::ConstantData> > >={__tree<std::__1::__value_type<std::__1::basic_string<char>, MTLConstantStorage::ConstantData>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, MTLConstantStorage::ConstantData>, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, MTLConstantStorage::ConstantData> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, MTLConstantStorage::ConstantData>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, MTLConstantStorage::ConstantData>, std::__1::less<std::__1::basic_string<char> >, true> >=Q}}}{map<unsigned short, MTLConstantStorage::ConstantData, std::__1::less<unsigned short>, std::__1::allocator<std::__1::pair<const unsigned short, MTLConstantStorage::ConstantData> > >={__tree<std::__1::__value_type<unsigned short, MTLConstantStorage::ConstantData>, std::__1::__map_value_compare<unsigned short, std::__1::__value_type<unsigned short, MTLConstantStorage::ConstantData>, std::__1::less<unsigned short>, true>, std::__1::allocator<std::__1::__value_type<unsigned short, MTLConstantStorage::ConstantData> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned short, MTLConstantStorage::ConstantData>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned short, std::__1::__value_type<unsigned short, MTLConstantStorage::ConstantData>, std::__1::less<unsigned short>, true> >=Q}}}}
@36@0:8@16B24r^{MTLTargetDeviceArch=II*}28
^{MTLCompilerCache=^^?@ii}16@0:8
^{MTLCompilerCache=^^?@ii}
@"<MTLComputePipelineState>"48@0:8@"NSString"16Q24^@32^@40
@"<MTLRenderPipelineState>"48@0:8@"NSString"16Q24^@32^@40
@"MTLComputePipelineDescriptor"32@0:8@"NSString"16^@24
@"MTLRenderPipelineDescriptor"32@0:8@"NSString"16^@24
@"<MTLPipelineCache>"16@0:8
@32@0:8@16^{PipelineLibraryData={shared_ptr<MTLPipelineDescriptions>=^{MTLPipelineDescriptions}^{__shared_weak_count}}@@}24
^{PipelineLibraryData={shared_ptr<MTLPipelineDescriptions>=^{MTLPipelineDescriptions}^{__shared_weak_count}}@@}
@"NSArray"
v32@0:8Q16Q24
@"<MTLRenderCommandEncoder>"16@0:8
@32@0:8^{?=b8b24IQQ}16Q24
@"<MTLCommandQueue>"
@"MTLRenderPassDescriptor"
@"<MTLHeap>"16@0:8
v104@0:8^v16Q24Q32{?={?=QQQ}{?=QQQ}}40Q88Q96
v104@0:8{?={?=QQQ}{?=QQQ}}16Q64Q72r^v80Q88Q96
v88@0:8^v16Q24{?={?=QQQ}{?=QQQ}}32Q80
v88@0:8{?={?=QQQ}{?=QQQ}}16Q64r^v72Q80
@64@0:8Q16Q24{_NSRange=QQ}32{_NSRange=QQ}48
@"<MTLTexture>"24@0:8Q16
@"<MTLTexture>"64@0:8Q16Q24{_NSRange=QQ}32{_NSRange=QQ}48
@"<MTLResource>"16@0:8
@"<MTLTexture>"16@0:8
@"<MTLBuffer>"16@0:8
B32@0:8r^@16Q24
B24@0:8@"<MTLResource>"16
@"MTLResourceAllocationInfo"16@0:8
@72@0:8Q16Q24{_NSRange=QQ}32{_NSRange=QQ}48Q64
v112@0:8^v16Q24Q32{?={?=QQQ}{?=QQQ}}40Q88Q96Q104
v112@0:8{?={?=QQQ}{?=QQQ}}16Q64Q72r^v80Q88Q96Q104
@48@0:8Q16Q24Q32Q40
@"<MTLTexture>"72@0:8Q16Q24{_NSRange=QQ}32{_NSRange=QQ}48Q64
@"<MTLTexture>"48@0:8Q16Q24Q32Q40
@"NSString"24@0:8Q16
v48@0:8{?=dddd}16
{?=dddd}16@0:8
r^{MTLRenderPassAttachmentDescriptorPrivate=@QQQQQQ{?=dddd}dI@QQQQQQB}16@0:8
{MTLRenderPassAttachmentDescriptorPrivate="texture"@"<MTLTextureImplementation>""level"Q"slice"Q"depthPlane"Q"loadAction"Q"storeAction"Q"storeActionOptions"Q"clearColor"{?="red"d"green"d"blue"d"alpha"d}"clearDepth"d"clearStencil"I"resolveTexture"@"<MTLTextureImplementation>""resolveLevel"Q"resolveSlice"Q"resolveDepthPlane"Q"resolveFilter"Q"width"Q"height"Q"yInvert"B}
[8@"MTLRenderPassColorAttachmentDescriptorInternal"]
@"MTLRenderPassDepthAttachmentDescriptorInternal"
@"MTLRenderPassStencilAttachmentDescriptorInternal"
v32@0:8r^{?=ff}16Q24
Q32@0:8^{?=ff}16Q24
v32@0:8{_NSRange=QQ}16
v40@0:8@16{_NSRange=QQ}24
@"<MTLTexture>"40@0:8@"MTLTextureDescriptor"16Q24Q32
v40@0:8@"NSString"16{_NSRange=QQ}24
B40@0:8@16^Q24^Q32
r^{MTLRenderPassDescriptorPrivate=@@QQBBB[4{?=ff}]Q}16@0:8
{MTLRenderPassDescriptorPrivate="attachments"@"MTLRenderPassColorAttachmentDescriptorArrayInternal""visibilityResultBuffer"@"<MTLBuffer>""renderTargetWidth"Q"renderTargetHeight"Q"fineGrainedBackgroundVisibilityEnabled"B"ditherEnabled"B"openGLModeEnabled"B"customSamplePositions"[4{?="x"f"y"f}]"numCustomSamplePositions"Q}
v24@0:8@"NSCoder"16
@24@0:8@"NSCoder"16
@20@0:8i16
{?="buckets"[64S]"numEntries"I"capacity"I"entries"^{MTLResourceListEntry}"pool"@"MTLResourceListPool""entry"{?="tqe_next"@"MTLResourceList""tqe_prev"^@}"time_added"Q}
{_MTLResourceListPoolPrivate="queue"{resourceListQueue="tqh_first"@"MTLResourceList""tqh_last"^@}"lock"{os_unfair_lock_s="_os_unfair_lock_opaque"I}"count"i}
v20@0:8f16
r^{MTLSamplerDescriptorPrivate=(?={?=b2b2b2b3b3b3b1b1b3b1b1}I)(?=If)(?=If)(?=If)Q@I}16@0:8
{MTLSamplerDescriptorPrivate=""(?=""{?="minFilter"b2"magFilter"b2"mipFilter"b2"sAddressMode"b3"tAddressMode"b3"rAddressMode"b3"normalizedCoords"b1"lodAverage"b1"compareFunction"b3"supportArgumentBuffers"b1"forceResourceIndex"b1}"miscHash"I)""(?="lodMinClampHash"I"lodMinClamp"f)""(?="lodMaxClampHash"I"lodMaxClamp"f)""(?="lodBiasHash"I"lodBias"f)"maxAnisotropy"Q"label"@"NSString""resourceIndex"I}
@44@0:8Q16Q24Q32B40
@36@0:8Q16Q24B32
r^{MTLTextureDescriptorPrivate=QQQQQQQQBQBBQQ(?=QQ)QBBIQQQ}16@0:8
{MTLTextureDescriptorPrivate="textureType"Q"pixelFormat"Q"width"Q"height"Q"depth"Q"mipmapLevelCount"Q"sampleCount"Q"arrayLength"Q"zeroFill"B"rotation"Q"framebufferOnly"B"isDrawable"B"swizzle"Q"compressionMode"Q""(?="textureUsage"Q"usage"Q)"resourceOptions"Q"allowGPUOptimizedContents"B"forceResourceIndex"B"resourceIndex"I"resolvedUsage"Q"cpuCacheMode"Q"storageMode"Q}
@32@0:8^@16Q24
@64@0:8Q16@24Q32Q40Q48B56B60
@"MTLType"
@72@0:8@16Q24Q32Q40Q48Q56@64
@48@0:8Q16Q24Q32@40
@60@0:8@16Q24Q32Q40B48Q52
@68@0:8@16Q24Q32Q40B48Q52@60
@48@0:8@16Q24@32Q40
@68@0:8Q16Q24Q32Q40Q48Q56B64
^{MTLSharedEventHandlePrivate=I@Q}
@56@0:8@16@24@32Q40{?=b1b1b1b1b60}48
@48@0:8@16@24Q32{?=b1b1b1b1b60}40
{?=b1b1b1b1b60}16@0:8
v32@0:8^Q16Q24
{?="kernelRegisterSpill"b1"threadgroupBarrier"b1"deviceMemoryAtomics"b1"threadgroupMemoryAtomics"b1"reserved"b60}
@32@0:8Q16^@24
@"<MTLArgumentEncoder>"32@0:8Q16^@24
@"NSDictionary"16@0:8
r^{MTLComputePipelineDescriptorPrivate=@@BS@@@@BI}16@0:8
{MTLComputePipelineDescriptorPrivate="label"@"NSString""computeFunction"@"<MTLFunction>""threadGroupSizeIsMultipleOfThreadExecutionWidth"B"maxTotalThreadsPerThreadgroup"S"stageInputDescriptor"@"MTLStageInputOutputDescriptor""driverCompilerOptions"@"NSDictionary""buffers"@"MTLPipelineBufferDescriptorArrayInternal""pipelineLibrary"@"<MTLPipelineLibrary>""forceResourceIndex"B"resourceIndex"I}
@"MTLIndirectArgumentBufferEmulationData"
{MTLArgumentDescriptorPrivate="dataType"Q"index"Q"arrayLength"Q"access"Q"textureType"Q"constantBlockAlignment"Q}
B32@0:8Q16Q24
v24@0:8^{MTLLibraryContainer=i{?=[32C]}^{MTLLibraryData}@@@@@}16
^v40@0:8@16^Q24@32
^v48@0:8@16Q24@32^Q40
v32@0:8^v16Q24
^v32@0:8@16^Q24
^v40@0:8@16Q24^Q32
^{NSObject=#}24@0:8@16
^{NSObject=#}32@0:8@16@24
@40@0:8@16@24@32
@32@0:8@16^{NSObject=#}24
{?=b1b1b1b1b1b1b1b1b1b55}32@0:8@16@24
{?=b1b1b1b1b60}24@0:8^{NSObject=#}16
@24@0:8^{NSObject=#}16
@48@0:8@16@24@32@40
@32@0:8^{NSObject=#}16@24
v56@0:8^^Q16^^Q24^Q32@40@48
v48@0:8^^Q16^^Q24^Q32^{NSObject=#}40
{?="maxColorAttachments"I"maxVertexAttributes"I"maxVertexBuffers"I"maxVertexTextures"I"maxVertexSamplers"I"maxVertexInlineDataSize"I"maxInterpolants"I"maxFragmentBuffers"I"maxFragmentTextures"I"maxFragmentSamplers"I"maxFragmentInlineDataSize"I"maxComputeBuffers"I"maxComputeTextures"I"maxComputeSamplers"I"maxComputeInlineDataSize"I"maxComputeLocalMemorySizes"I"maxTotalComputeThreadsPerThreadgroup"I"maxComputeThreadgroupMemory"I"maxLineWidth"f"maxPointSize"f"maxVisibilityQueryOffset"I"padmaxBufferLength"I"minConstantBufferAlignmentBytes"I"minBufferNoCopyAlignmentBytes"I"maxTextureWidth1D"I"maxTextureWidth2D"I"maxTextureHeight2D"I"maxTextureWidth3D"I"maxTextureHeight3D"I"maxTextureDepth3D"I"maxTextureDimensionCube"I"maxTextureLayers"I"linearTextureAlignmentBytes"I"iosurfaceTextureAlignmentBytes"I"iosurfaceReadOnlyTextureAlignmentBytes"I"deviceLinearTextureAlignmentBytes"I"deviceLinearReadOnlyTextureAlignmentBytes"I"maxFunctionConstantIndices"I"maxComputeThreadgroupMemoryAlignmentBytes"I"maxInterpolatedComponents"I"maxTessellationFactor"I"maxIndirectBuffers"I"maxIndirectTextures"I"maxIndirectSamplers"I"maxIndirectSamplersPerDevice"I"maxCustomSamplePositions"I"maxTextureBufferWidth"I"maxFramebufferStorageBits"I"maxBufferLength"Q}
@"MTLCompiler"
@"MTLIOMemoryInfo"
^{MTLLibraryBuilder=@{map<MTLLibraryIdentifier, MTLLibraryContainer *, std::__1::less<MTLLibraryIdentifier>, std::__1::allocator<std::__1::pair<const MTLLibraryIdentifier, MTLLibraryContainer *> > >={__tree<std::__1::__value_type<MTLLibraryIdentifier, MTLLibraryContainer *>, std::__1::__map_value_compare<MTLLibraryIdentifier, std::__1::__value_type<MTLLibraryIdentifier, MTLLibraryContainer *>, std::__1::less<MTLLibraryIdentifier>, true>, std::__1::allocator<std::__1::__value_type<MTLLibraryIdentifier, MTLLibraryContainer *> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MTLLibraryIdentifier, MTLLibraryContainer *>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MTLLibraryIdentifier, std::__1::__value_type<MTLLibraryIdentifier, MTLLibraryContainer *>, std::__1::less<MTLLibraryIdentifier>, true> >=Q}}}@^{MTLPipelineCollection}}
^{MTLPipelineLibraryBuilder=@@}
^{MTLPipelineCollection={unordered_map<_MTLLibrary *, MTLPipelineLibrarySerializer::LibraryDescriptor *, std::__1::hash<_MTLLibrary *>, std::__1::equal_to<_MTLLibrary *>, std::__1::allocator<std::__1::pair<_MTLLibrary *const, MTLPipelineLibrarySerializer::LibraryDescriptor *> > >={__hash_table<std::__1::__hash_value_type<_MTLLibrary *, MTLPipelineLibrarySerializer::LibraryDescriptor *>, std::__1::__unordered_map_hasher<_MTLLibrary *, std::__1::__hash_value_type<_MTLLibrary *, MTLPipelineLibrarySerializer::LibraryDescriptor *>, std::__1::hash<_MTLLibrary *>, true>, std::__1::__unordered_map_equal<_MTLLibrary *, std::__1::__hash_value_type<_MTLLibrary *, MTLPipelineLibrarySerializer::LibraryDescriptor *>, std::__1::equal_to<_MTLLibrary *>, true>, std::__1::allocator<std::__1::__hash_value_type<_MTLLibrary *, MTLPipelineLibrarySerializer::LibraryDescriptor *> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, MTLPipelineLibrarySerializer::LibraryDescriptor *>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, MTLPipelineLibrarySerializer::LibraryDescriptor *>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, MTLPipelineLibrarySerializer::LibraryDescriptor *>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, MTLPipelineLibrarySerializer::LibraryDescriptor *>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, MTLPipelineLibrarySerializer::LibraryDescriptor *>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, MTLPipelineLibrarySerializer::LibraryDescriptor *>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, MTLPipelineLibrarySerializer::LibraryDescriptor *>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, MTLPipelineLibrarySerializer::LibraryDescriptor *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, MTLPipelineLibrarySerializer::LibraryDescriptor *>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, MTLPipelineLibrarySerializer::LibraryDescriptor *>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, MTLPipelineLibrarySerializer::LibraryDescriptor *>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<_MTLLibrary *, std::__1::__hash_value_type<_MTLLibrary *, MTLPipelineLibrarySerializer::LibraryDescriptor *>, std::__1::hash<_MTLLibrary *>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<_MTLLibrary *, std::__1::__hash_value_type<_MTLLibrary *, MTLPipelineLibrarySerializer::LibraryDescriptor *>, std::__1::equal_to<_MTLLibrary *>, true> >=f}}}{unordered_map<_MTLFunction *, MTLPipelineLibrarySerializer::FunctionDescriptor *, std::__1::hash<_MTLFunction *>, std::__1::equal_to<_MTLFunction *>, std::__1::allocator<std::__1::pair<_MTLFunction *const, MTLPipelineLibrarySerializer::FunctionDescriptor *> > >={__hash_table<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::FunctionDescriptor *>, std::__1::__unordered_map_hasher<_MTLFunction *, std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::FunctionDescriptor *>, std::__1::hash<_MTLFunction *>, true>, std::__1::__unordered_map_equal<_MTLFunction *, std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::FunctionDescriptor *>, std::__1::equal_to<_MTLFunction *>, true>, std::__1::allocator<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::FunctionDescriptor *> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::FunctionDescriptor *>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::FunctionDescriptor *>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::FunctionDescriptor *>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::FunctionDescriptor *>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::FunctionDescriptor *>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::FunctionDescriptor *>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::FunctionDescriptor *>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::FunctionDescriptor *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::FunctionDescriptor *>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::FunctionDescriptor *>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::FunctionDescriptor *>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<_MTLFunction *, std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::FunctionDescriptor *>, std::__1::hash<_MTLFunction *>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<_MTLFunction *, std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::FunctionDescriptor *>, std::__1::equal_to<_MTLFunction *>, true> >=f}}}{unordered_map<_MTLFunction *, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *, std::__1::hash<_MTLFunction *>, std::__1::equal_to<_MTLFunction *>, std::__1::allocator<std::__1::pair<_MTLFunction *const, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *> > >={__hash_table<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>, std::__1::__unordered_map_hasher<_MTLFunction *, std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>, std::__1::hash<_MTLFunction *>, true>, std::__1::__unordered_map_equal<_MTLFunction *, std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>, std::__1::equal_to<_MTLFunction *>, true>, std::__1::allocator<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<_MTLFunction *, std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>, std::__1::hash<_MTLFunction *>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<_MTLFunction *, std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>, std::__1::equal_to<_MTLFunction *>, true> >=f}}}{unordered_map<_MTLLibrary *, unsigned long, std::__1::hash<_MTLLibrary *>, std::__1::equal_to<_MTLLibrary *>, std::__1::allocator<std::__1::pair<_MTLLibrary *const, unsigned long> > >={__hash_table<std::__1::__hash_value_type<_MTLLibrary *, unsigned long>, std::__1::__unordered_map_hasher<_MTLLibrary *, std::__1::__hash_value_type<_MTLLibrary *, unsigned long>, std::__1::hash<_MTLLibrary *>, true>, std::__1::__unordered_map_equal<_MTLLibrary *, std::__1::__hash_value_type<_MTLLibrary *, unsigned long>, std::__1::equal_to<_MTLLibrary *>, true>, std::__1::allocator<std::__1::__hash_value_type<_MTLLibrary *, unsigned long> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, unsigned long>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, unsigned long>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, unsigned long>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, unsigned long>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, unsigned long>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, unsigned long>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, unsigned long>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, unsigned long>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, unsigned long>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, unsigned long>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, unsigned long>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<_MTLLibrary *, std::__1::__hash_value_type<_MTLLibrary *, unsigned long>, std::__1::hash<_MTLLibrary *>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<_MTLLibrary *, std::__1::__hash_value_type<_MTLLibrary *, unsigned long>, std::__1::equal_to<_MTLLibrary *>, true> >=f}}}{unordered_set<std::__1::basic_string<char>, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > >={__hash_table<std::__1::basic_string<char>, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::basic_string<char>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<std::__1::basic_string<char> > >=Q}{__compressed_pair<float, std::__1::equal_to<std::__1::basic_string<char> > >=f}}}{vector<MTLRenderPipelineDescriptor *, std::__1::allocator<MTLRenderPipelineDescriptor *> >=^@^@{__compressed_pair<MTLRenderPipelineDescriptor **, std::__1::allocator<MTLRenderPipelineDescriptor *> >=^@}}{vector<MTLComputePipelineDescriptor *, std::__1::allocator<MTLComputePipelineDescriptor *> >=^@^@{__compressed_pair<MTLComputePipelineDescriptor **, std::__1::allocator<MTLComputePipelineDescriptor *> >=^@}}@}
@"<MTLDeviceSPI>"
v24@0:8^v16
@41@0:8@16Q24Q32{MTLAttributeFlags=(?={?=b1b1b1b5}C)}40
@44@0:8@16Q24Q32B40
@32@0:8^@16I24I28
@48@0:8@16@24Q32Q40
@"<MTLFunction>"24@0:8@"NSString"16
@"<MTLFunction>"40@0:8@"NSString"16@"MTLFunctionConstantValues"24^@32
v40@0:8@"NSString"16@"MTLFunctionConstantValues"24@?<v@?@"<MTLFunction>"@"NSError">32
@48@0:8@16@24@32^@40
v48@0:8@16@24@32@?40
@"<MTLFunction>"48@0:8@"NSString"16@"MTLFunctionConstantValues"24@"<MTLPipelineLibrary>"32^@40
v48@0:8@"NSString"16@"MTLFunctionConstantValues"24@"<MTLPipelineLibrary>"32@?<v@?@"<MTLFunction>"@"NSError">40
@32@0:8^{MTLLibraryContainer=i{?=[32C]}^{MTLLibraryData}@@@@@}16@24
^{MTLLibraryData=^^?i@@}16@0:8
^{MTLPipelineCollection={unordered_map<_MTLLibrary *, MTLPipelineLibrarySerializer::LibraryDescriptor *, std::__1::hash<_MTLLibrary *>, std::__1::equal_to<_MTLLibrary *>, std::__1::allocator<std::__1::pair<_MTLLibrary *const, MTLPipelineLibrarySerializer::LibraryDescriptor *> > >={__hash_table<std::__1::__hash_value_type<_MTLLibrary *, MTLPipelineLibrarySerializer::LibraryDescriptor *>, std::__1::__unordered_map_hasher<_MTLLibrary *, std::__1::__hash_value_type<_MTLLibrary *, MTLPipelineLibrarySerializer::LibraryDescriptor *>, std::__1::hash<_MTLLibrary *>, true>, std::__1::__unordered_map_equal<_MTLLibrary *, std::__1::__hash_value_type<_MTLLibrary *, MTLPipelineLibrarySerializer::LibraryDescriptor *>, std::__1::equal_to<_MTLLibrary *>, true>, std::__1::allocator<std::__1::__hash_value_type<_MTLLibrary *, MTLPipelineLibrarySerializer::LibraryDescriptor *> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, MTLPipelineLibrarySerializer::LibraryDescriptor *>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, MTLPipelineLibrarySerializer::LibraryDescriptor *>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, MTLPipelineLibrarySerializer::LibraryDescriptor *>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, MTLPipelineLibrarySerializer::LibraryDescriptor *>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, MTLPipelineLibrarySerializer::LibraryDescriptor *>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, MTLPipelineLibrarySerializer::LibraryDescriptor *>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, MTLPipelineLibrarySerializer::LibraryDescriptor *>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, MTLPipelineLibrarySerializer::LibraryDescriptor *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, MTLPipelineLibrarySerializer::LibraryDescriptor *>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, MTLPipelineLibrarySerializer::LibraryDescriptor *>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, MTLPipelineLibrarySerializer::LibraryDescriptor *>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<_MTLLibrary *, std::__1::__hash_value_type<_MTLLibrary *, MTLPipelineLibrarySerializer::LibraryDescriptor *>, std::__1::hash<_MTLLibrary *>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<_MTLLibrary *, std::__1::__hash_value_type<_MTLLibrary *, MTLPipelineLibrarySerializer::LibraryDescriptor *>, std::__1::equal_to<_MTLLibrary *>, true> >=f}}}{unordered_map<_MTLFunction *, MTLPipelineLibrarySerializer::FunctionDescriptor *, std::__1::hash<_MTLFunction *>, std::__1::equal_to<_MTLFunction *>, std::__1::allocator<std::__1::pair<_MTLFunction *const, MTLPipelineLibrarySerializer::FunctionDescriptor *> > >={__hash_table<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::FunctionDescriptor *>, std::__1::__unordered_map_hasher<_MTLFunction *, std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::FunctionDescriptor *>, std::__1::hash<_MTLFunction *>, true>, std::__1::__unordered_map_equal<_MTLFunction *, std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::FunctionDescriptor *>, std::__1::equal_to<_MTLFunction *>, true>, std::__1::allocator<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::FunctionDescriptor *> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::FunctionDescriptor *>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::FunctionDescriptor *>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::FunctionDescriptor *>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::FunctionDescriptor *>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::FunctionDescriptor *>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::FunctionDescriptor *>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::FunctionDescriptor *>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::FunctionDescriptor *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::FunctionDescriptor *>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::FunctionDescriptor *>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::FunctionDescriptor *>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<_MTLFunction *, std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::FunctionDescriptor *>, std::__1::hash<_MTLFunction *>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<_MTLFunction *, std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::FunctionDescriptor *>, std::__1::equal_to<_MTLFunction *>, true> >=f}}}{unordered_map<_MTLFunction *, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *, std::__1::hash<_MTLFunction *>, std::__1::equal_to<_MTLFunction *>, std::__1::allocator<std::__1::pair<_MTLFunction *const, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *> > >={__hash_table<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>, std::__1::__unordered_map_hasher<_MTLFunction *, std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>, std::__1::hash<_MTLFunction *>, true>, std::__1::__unordered_map_equal<_MTLFunction *, std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>, std::__1::equal_to<_MTLFunction *>, true>, std::__1::allocator<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<_MTLFunction *, std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>, std::__1::hash<_MTLFunction *>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<_MTLFunction *, std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>, std::__1::equal_to<_MTLFunction *>, true> >=f}}}{unordered_map<_MTLLibrary *, unsigned long, std::__1::hash<_MTLLibrary *>, std::__1::equal_to<_MTLLibrary *>, std::__1::allocator<std::__1::pair<_MTLLibrary *const, unsigned long> > >={__hash_table<std::__1::__hash_value_type<_MTLLibrary *, unsigned long>, std::__1::__unordered_map_hasher<_MTLLibrary *, std::__1::__hash_value_type<_MTLLibrary *, unsigned long>, std::__1::hash<_MTLLibrary *>, true>, std::__1::__unordered_map_equal<_MTLLibrary *, std::__1::__hash_value_type<_MTLLibrary *, unsigned long>, std::__1::equal_to<_MTLLibrary *>, true>, std::__1::allocator<std::__1::__hash_value_type<_MTLLibrary *, unsigned long> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, unsigned long>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, unsigned long>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, unsigned long>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, unsigned long>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, unsigned long>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, unsigned long>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, unsigned long>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, unsigned long>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, unsigned long>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, unsigned long>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, unsigned long>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<_MTLLibrary *, std::__1::__hash_value_type<_MTLLibrary *, unsigned long>, std::__1::hash<_MTLLibrary *>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<_MTLLibrary *, std::__1::__hash_value_type<_MTLLibrary *, unsigned long>, std::__1::equal_to<_MTLLibrary *>, true> >=f}}}{unordered_set<std::__1::basic_string<char>, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > >={__hash_table<std::__1::basic_string<char>, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::basic_string<char>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<std::__1::basic_string<char> > >=Q}{__compressed_pair<float, std::__1::equal_to<std::__1::basic_string<char> > >=f}}}{vector<MTLRenderPipelineDescriptor *, std::__1::allocator<MTLRenderPipelineDescriptor *> >=^@^@{__compressed_pair<MTLRenderPipelineDescriptor **, std::__1::allocator<MTLRenderPipelineDescriptor *> >=^@}}{vector<MTLComputePipelineDescriptor *, std::__1::allocator<MTLComputePipelineDescriptor *> >=^@^@{__compressed_pair<MTLComputePipelineDescriptor **, std::__1::allocator<MTLComputePipelineDescriptor *> >=^@}}@}16@0:8
v24@0:8^{MTLPipelineCollection={unordered_map<_MTLLibrary *, MTLPipelineLibrarySerializer::LibraryDescriptor *, std::__1::hash<_MTLLibrary *>, std::__1::equal_to<_MTLLibrary *>, std::__1::allocator<std::__1::pair<_MTLLibrary *const, MTLPipelineLibrarySerializer::LibraryDescriptor *> > >={__hash_table<std::__1::__hash_value_type<_MTLLibrary *, MTLPipelineLibrarySerializer::LibraryDescriptor *>, std::__1::__unordered_map_hasher<_MTLLibrary *, std::__1::__hash_value_type<_MTLLibrary *, MTLPipelineLibrarySerializer::LibraryDescriptor *>, std::__1::hash<_MTLLibrary *>, true>, std::__1::__unordered_map_equal<_MTLLibrary *, std::__1::__hash_value_type<_MTLLibrary *, MTLPipelineLibrarySerializer::LibraryDescriptor *>, std::__1::equal_to<_MTLLibrary *>, true>, std::__1::allocator<std::__1::__hash_value_type<_MTLLibrary *, MTLPipelineLibrarySerializer::LibraryDescriptor *> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, MTLPipelineLibrarySerializer::LibraryDescriptor *>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, MTLPipelineLibrarySerializer::LibraryDescriptor *>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, MTLPipelineLibrarySerializer::LibraryDescriptor *>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, MTLPipelineLibrarySerializer::LibraryDescriptor *>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, MTLPipelineLibrarySerializer::LibraryDescriptor *>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, MTLPipelineLibrarySerializer::LibraryDescriptor *>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, MTLPipelineLibrarySerializer::LibraryDescriptor *>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, MTLPipelineLibrarySerializer::LibraryDescriptor *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, MTLPipelineLibrarySerializer::LibraryDescriptor *>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, MTLPipelineLibrarySerializer::LibraryDescriptor *>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, MTLPipelineLibrarySerializer::LibraryDescriptor *>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<_MTLLibrary *, std::__1::__hash_value_type<_MTLLibrary *, MTLPipelineLibrarySerializer::LibraryDescriptor *>, std::__1::hash<_MTLLibrary *>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<_MTLLibrary *, std::__1::__hash_value_type<_MTLLibrary *, MTLPipelineLibrarySerializer::LibraryDescriptor *>, std::__1::equal_to<_MTLLibrary *>, true> >=f}}}{unordered_map<_MTLFunction *, MTLPipelineLibrarySerializer::FunctionDescriptor *, std::__1::hash<_MTLFunction *>, std::__1::equal_to<_MTLFunction *>, std::__1::allocator<std::__1::pair<_MTLFunction *const, MTLPipelineLibrarySerializer::FunctionDescriptor *> > >={__hash_table<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::FunctionDescriptor *>, std::__1::__unordered_map_hasher<_MTLFunction *, std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::FunctionDescriptor *>, std::__1::hash<_MTLFunction *>, true>, std::__1::__unordered_map_equal<_MTLFunction *, std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::FunctionDescriptor *>, std::__1::equal_to<_MTLFunction *>, true>, std::__1::allocator<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::FunctionDescriptor *> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::FunctionDescriptor *>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::FunctionDescriptor *>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::FunctionDescriptor *>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::FunctionDescriptor *>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::FunctionDescriptor *>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::FunctionDescriptor *>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::FunctionDescriptor *>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::FunctionDescriptor *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::FunctionDescriptor *>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::FunctionDescriptor *>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::FunctionDescriptor *>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<_MTLFunction *, std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::FunctionDescriptor *>, std::__1::hash<_MTLFunction *>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<_MTLFunction *, std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::FunctionDescriptor *>, std::__1::equal_to<_MTLFunction *>, true> >=f}}}{unordered_map<_MTLFunction *, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *, std::__1::hash<_MTLFunction *>, std::__1::equal_to<_MTLFunction *>, std::__1::allocator<std::__1::pair<_MTLFunction *const, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *> > >={__hash_table<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>, std::__1::__unordered_map_hasher<_MTLFunction *, std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>, std::__1::hash<_MTLFunction *>, true>, std::__1::__unordered_map_equal<_MTLFunction *, std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>, std::__1::equal_to<_MTLFunction *>, true>, std::__1::allocator<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<_MTLFunction *, std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>, std::__1::hash<_MTLFunction *>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<_MTLFunction *, std::__1::__hash_value_type<_MTLFunction *, MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>, std::__1::equal_to<_MTLFunction *>, true> >=f}}}{unordered_map<_MTLLibrary *, unsigned long, std::__1::hash<_MTLLibrary *>, std::__1::equal_to<_MTLLibrary *>, std::__1::allocator<std::__1::pair<_MTLLibrary *const, unsigned long> > >={__hash_table<std::__1::__hash_value_type<_MTLLibrary *, unsigned long>, std::__1::__unordered_map_hasher<_MTLLibrary *, std::__1::__hash_value_type<_MTLLibrary *, unsigned long>, std::__1::hash<_MTLLibrary *>, true>, std::__1::__unordered_map_equal<_MTLLibrary *, std::__1::__hash_value_type<_MTLLibrary *, unsigned long>, std::__1::equal_to<_MTLLibrary *>, true>, std::__1::allocator<std::__1::__hash_value_type<_MTLLibrary *, unsigned long> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, unsigned long>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, unsigned long>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, unsigned long>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, unsigned long>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, unsigned long>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, unsigned long>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, unsigned long>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, unsigned long>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, unsigned long>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, unsigned long>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_MTLLibrary *, unsigned long>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<_MTLLibrary *, std::__1::__hash_value_type<_MTLLibrary *, unsigned long>, std::__1::hash<_MTLLibrary *>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<_MTLLibrary *, std::__1::__hash_value_type<_MTLLibrary *, unsigned long>, std::__1::equal_to<_MTLLibrary *>, true> >=f}}}{unordered_set<std::__1::basic_string<char>, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > >={__hash_table<std::__1::basic_string<char>, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::basic_string<char>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<std::__1::basic_string<char> > >=Q}{__compressed_pair<float, std::__1::equal_to<std::__1::basic_string<char> > >=f}}}{vector<MTLRenderPipelineDescriptor *, std::__1::allocator<MTLRenderPipelineDescriptor *> >=^@^@{__compressed_pair<MTLRenderPipelineDescriptor **, std::__1::allocator<MTLRenderPipelineDescriptor *> >=^@}}{vector<MTLComputePipelineDescriptor *, std::__1::allocator<MTLComputePipelineDescriptor *> >=^@^@{__compressed_pair<MTLComputePipelineDescriptor **, std::__1::allocator<MTLComputePipelineDescriptor *> >=^@}}@}16
^{MTLLibraryContainer=i{?=[32C]}^{MTLLibraryData}@@@@@}16@0:8
^{MTLLibraryData=^^?i@@}
^{MTLLibraryContainer=i{?=[32C]}^{MTLLibraryData}@@@@@}
v32@0:8Q16@?24
r^{?=[32C]}16@0:8
@"MTLFunctionReflection"24@0:8Q16
v32@0:8Q16@?<v@?@"MTLFunctionReflection">24
@"<MTLIndirectArgumentEncoder>"24@0:8Q16
@"<MTLIndirectArgumentEncoder>"32@0:8Q16^@24
@"MTLType"16@0:8
@48@0:8@16Q24^{MTLLibraryData=^^?i@@}32@40
@56@0:8@16Q24^{MTLLibraryData=^^?i@@}32^{MTLFunctionData=QQQQQSSSS{?=[32C]}Cb2b6@}40@48
^{MTLProgramObject={VariantList<4>={Chunk=[4{VariantEntry=*QQQ@@Q@}]^{Chunk}}^{Chunk}I{VariantEntry=*QQQ@@Q@}}@@@@}16@0:8
r^{MTLFunctionData=QQQQQSSSS{?=[32C]}Cb2b6@}16@0:8
C16@0:8
v52@0:8i16I20@24@32B40@?44
@48@0:8i16I20@24@32^@40
{MTLFunctionData="bitCodeOffset"Q"bitCodeFileSize"Q"publicArgumentsOffset"Q"privateArgumentsOffset"Q"sourceArchiveOffset"Q"airMajorVersion"S"airMinorVersion"S"languageMajorVersion"S"languageMinorVersion"S"bitcodeHash"{?="key"[32C]}"bitcodeType"C"patchType"b2"controlPointCount"b6"functionInputs"@"NSObject<OS_dispatch_data>"}
^{MTLProgramObject={VariantList<4>={Chunk=[4{VariantEntry=*QQQ@@Q@}]^{Chunk}}^{Chunk}I{VariantEntry=*QQQ@@Q@}}@@@@}
r^v24@0:8^Q16
v32@0:8r^v16Q24
@56@0:8@16^{?=[32C]}24@32@40Q48
v44@0:8@16@24B32@?36
v76@0:8@16@24@32B40Q44@52I60B64@?68
v68@0:8@16@24@32Q40B48I52B56@?60
v64@0:8@16@24@32Q40@48@?56
v68@0:8@16@24@32Q40@48B56@?60
v56@0:8@16@24@32Q40@?48
v44@0:8@16Q24B32@?36
^{MTLCompilerConnectionManager=^^?}16@0:8
^{MTLCompilerConnectionManager=^^?}
@88@0:8@16Q24Q32B40Q44Q52Q60B68Q72Q80
@76@0:8@16Q24Q32B40Q44Q52Q60Q68
@84@0:8@16Q24Q32B40Q44Q52Q60Q68Q76
@72@0:8@16Q24B32Q36Q44Q52Q60B68
@68@0:8@16Q24Q32B40Q44Q52Q60
r^{MTLRenderPipelineAttachmentDescriptorPrivate=(?={?=b1b3b3b5b5b5b5b4b1b4b28}{?=Q})}16@0:8
{MTLRenderPipelineAttachmentDescriptorPrivate=""(?=""{?="blendingEnabled"b1"rgbBlendOperation"b3"alphaBlendOperation"b3"sourceRGBBlendFactor"b5"sourceAlphaBlendFactor"b5"destinationRGBBlendFactor"b5"destinationAlphaBlendFactor"b5"writeMask"b4"logicOpEnabled"b1"logicOp"b4"pixelFormat"b28}""{?="bits"Q})}
@64@0:8@16@24@32@40Q48{?=b1b1b1b1b1b1b1b1b1b55}56
{?=b1b1b1b1b1b1b1b1b1b55}16@0:8
{?="fragmentUsesDiscard"b1"fragmentWritesSampleMask"b1"fragmentWritesDepth"b1"vertexRegisterSpill"b1"fragmentRegisterSpill"b1"fragmentReadsFramebufferValues"b1"fragmentPunchThrough"b1"vertexWritesPointSize"b1"private2"b1"reserved"b55}
[8@"MTLRenderPipelineColorAttachmentDescriptorInternal"]
v20@0:8C16
r^{MTLRenderPipelineDescriptorPrivate=@[8Q]QQQQBQQQQQB(?=QQ)Q(?=If)(?=I{?=b1b1b1b2b1b1b1b1b1b1b1b1b1b1b8b3b1b4b1b1})III@@@@@@@@}16@0:8
@40@0:8Q16Q24^@32
{MTLRenderPipelineDescriptorPrivate="attachments"@"MTLRenderPipelineColorAttachmentDescriptorArrayInternal""rtBlendDescHash"[8Q]"depthAttachmentPixelFormat"Q"stencilAttachmentPixelFormat"Q"tessellationPartitionMode"Q"maxTessellationFactor"Q"tessellationFactorScaleEnabled"B"tessellationFactorFormat"Q"tessellationControlPointIndexType"Q"tessellationFactorStepFunction"Q"tessellationOutputWindingOrder"Q"postVertexDumpBufferIndex"Q"supportIndirectCommandBuffers"B""(?="sampleCount"Q"rasterSampleCount"Q)"sampleMask"Q""(?="sampleCoverageHash"I"sampleCoverage"f)""(?="miscHash"I""{?="alphaToCoverageEnabled"b1"alphaToOneEnabled"b1"rasterizationEnabled"b1"inputPrimitiveTopology"b2"vertexEnabled"b1"depthStencilWriteDisabled"b1"openGLMode"b1"sampleCoverageInvert"b1"private4"b1"private5"b1"twoSideEnabled"b1"pointSizeOutputVS"b1"pointCoordLowerLeft"b1"pointSmoothEnabled"b1"clipDistanceEnableMask"b8"alphaTestFunc"b3"alphaTestEnabled"b1"logicOp"b4"logicOpEnabled"b1"forceResourceIndex"b1})"vertexDepthCompareClampMask"I"fragmentDepthCompareClampMask"I"resourceIndex"I"label"@"NSString""vertexFunction"@"<MTLFunction>""fragmentFunction"@"<MTLFunction>""vertexDescriptor"@"MTLVertexDescriptorInternal""vertexBuffers"@"MTLPipelineBufferDescriptorArrayInternal""fragmentBuffers"@"MTLPipelineBufferDescriptorArrayInternal""driverCompilerOptions"@"NSDictionary""pipelineLibrary"@"<MTLPipelineLibrary>"}
[31@"MTLVertexBufferLayoutDescriptorInternal"]
[31@"MTLVertexAttributeDescriptorInternal"]
@"MTLVertexBufferLayoutDescriptorArrayInternal"
@"MTLVertexAttributeDescriptorArrayInternal"
N28MTLPipelineLibrarySerializer25PipelineLibrarySerializerE
N28MTLPipelineLibrarySerializer25NamedObjectJSONSerializerE
N28MTLPipelineLibrarySerializer21NamedObjectSerializerE
N28MTLPipelineLibrarySerializer16ObjectSerializerE
N28MTLPipelineLibrarySerializer24JSONSerializationContextE
N28MTLPipelineLibrarySerializer20SerializationContextE
N28MTLPipelineLibrarySerializer29PipelineLibraryJSONSerializerE
NSt3__120__shared_ptr_emplaceI23MTLPipelineDescriptionsNS_9allocatorIS1_EEEE
26MTLCompilerFunctionRequest
18MTLCompilerRequest
18CompilerConnection
21XPCCompilerConnection
35MTLCompilerConnectionManagerPrivate
28MTLCompilerConnectionManager
25MTLLibraryDataWithArchive
20MTLCachedLibraryData
14MTLLibraryData
24MTLLibraryDataWithSource
22MTLLibraryDataWithGLIR
27MTLFragmentReflectionReader
15LibraryWithFile
15LibraryWithData
29MTLInputStageReflectionReader
21MTLArgumentListReader
25MTLVertexReflectionReader
26MTLComputeReflectionReader
16MTLCompilerCache
18MTLCompilerFSCache
20MTLPipelineDataCache
@(#)PROGRAM:Metal  PROJECT:Metal-1
Execution of the command buffer was aborted due to an error during execution. %s
%s, line %u: %s '%s'
MTLCompiler: failed to ping the compiler service %u times over %f ms
compiling shader
MTLCompiler: Compilation failed with XPC_ERROR_CONNECTION_INTERRUPTED on %d try
MTLCompiler: Creating a new compiler connection
Compiler failed to build request
Compiler failed with XPC_ERROR_CONNECTION_INTERRUPTED
Compiler failed with XPC_ERROR_CONNECTION_INVALID
Compiler failed with XPC_ERROR_TERMINATION_IMMINENT
Compiler failed with unknown XPC error
failed to open metal library with error: %s
Failed to get Metal shader cache main folder: shader cache main folder was overriden and the path is too long (max length %zu)
Failed to get Metal shader cache main folder: search path for cache directory had path count of 0
Failed to get Metal shader cache main folder: caches directory path was nil
Failed to get Metal shader cache main folder: path for application cache was not found (errno = %u)
Failed to get Metal shader cache main folder: mkdir failed to create compiler cache path (errno = %u)
Failed to get Metal shader cache main folder: insufficient permissions to Metal compiler cache path (errno = %u)
fscache_open returned a NULL pointer but no error.
