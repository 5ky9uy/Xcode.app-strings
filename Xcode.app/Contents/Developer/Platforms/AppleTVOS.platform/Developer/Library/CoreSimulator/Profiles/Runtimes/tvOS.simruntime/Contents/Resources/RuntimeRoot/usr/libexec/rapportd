RPDaemon
com.apple.rapport
--version
version
Rapport daemon version %s
110.5
warning: unknown option '%s'
?.*:level=chatty,.*:flags=public
int main(int, const char **)
Started
-- Daemon XPC connections --
%#{pid}
    Assertion: %@ (%d total)
-[RPDaemon activate]
Activate
com.apple.notifyd.matching
com.apple.rapport.prefsChanged
-[RPDaemon activate]_block_invoke
### Unexpected XPC event: %s
v16@?0@"NSObject<OS_xpc_object>"8
^{os_state_data_s=I(?=b32I){os_state_data_decoder_s=[64c][64c]}[64c][0C]}16@?0^{os_state_hints_s=I*II}8
-[RPDaemon invalidate]
Invalidate
Invalidated
v8@?0
-[RPDaemon listener:shouldAcceptNewConnection:]
XPC connection started from %#{pid}
-[RPDaemon _prefsChanged]
Prefs changed
-[RPDaemon _stateDump]
State dump requested
RPDaemon State End
RPDaemon State
hash
TQ,R
superclass
T#,R
description
T@"NSString",R,C
debugDescription
-[RPDaemonXPCConnection connectionInvalidated]
XPC connection invalidated from %#{pid}
-[RPDaemonXPCConnection _entitled:state:label:logErrors:]
### %#{pid} lacks %''@ entitlement to use %@
com.apple.rapport.Client
ActivateAssertion
-[RPDaemonXPCConnection activateAssertionWithIdentifier:]
Ignoring duplicate assertion '%@'
Activate assertion '%@': %d -> %d
com.apple.rapport.KeepAlive
Ignoring add unknown assertion '%@'
-[RPDaemonXPCConnection _invalidateAssertions]
Invalidate assertion '%@': %d -> %d
Ignoring remove unknown assertion '%@'
DiagnosticLogControl
### Error: %#m
DiagnosticShow
dispatchQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_dispatchQueue
alloc
init
activate
currentRunLoop
invalidate
countByEnumeratingWithState:objects:count:
processIdentifier
count
countForObject:
setDispatchQueue:
_prefsChanged
initWithMachServiceName:
setDelegate:
_setQueue:
resume
_stateDump
removeAllObjects
initWithDaemon:xpcConnection:
addObject:
activateAssertionWithIdentifier:
diagnosticLogControl:completion:
diagnosticShow:completion:
interfaceWithProtocol:
setExportedInterface:
setExportedObject:
_xpcConnectionInvalidated:
setInvalidationHandler:
setRemoteObjectInterface:
prefsChanged
detailedDescription
dataWithPropertyList:format:options:error:
length
bytes
connectionInvalidated
removeObject:
isEqual:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
description
debugDescription
listener:shouldAcceptNewConnection:
.cxx_destruct
_assertions
_companionLinkDaemon
_dispatchQueue
_stateHandle
_xpcConnections
_xpcEventsRegistered
_xpcListener
_invalidateAssertions
valueForEntitlement:
numberWithBool:
_entitled:state:label:logErrors:
containsObject:
UTF8String
stringWithUTF8String:
dispatchQueue
_daemon
_entitledClient
_xpcCnx
descriptionWithLevel:
RPDaemonXPCServerInterface
RPDaemonXPCClientInterface
RPDaemon
NSXPCListenerDelegate
NSObject
RPDaemonXPCConnection
v24@0:8@16
v32@0:8@16@?24
v24@0:8@"NSString"16
v32@0:8@"NSString"16@?<v@?@"NSString">24
B24@0:8@16
#16@0:8
@16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B16@0:8
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
B32@0:8@16@24
B32@0:8@"NSXPCListener"16@"NSXPCConnection"24
v16@0:8
^{os_state_data_s=I(?=b32I){os_state_data_decoder_s=[64c][64c]}[64c][0C]}16@0:8
@"NSCountedSet"
@"RPCompanionLinkDaemon"
@"NSObject<OS_dispatch_queue>"
^{NSMutableSet=#}
@"NSXPCListener"
@32@0:8@16@24
i44@0:8@16^B24@32B40
@"NSMutableSet"
@"RPDaemon"
@"NSXPCConnection"
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>com.apple.PairingManager.HomeKit</key>
<true/>
<key>com.apple.PairingManager.Read</key>
<true/>
<key>com.apple.PairingManager.Write</key>
<true/>
<key>com.apple.ahp</key>
<true/>
<key>com.apple.bluetooth.internal</key>
<true/>
<key>com.apple.private.MobileGestalt.AllowedProtectedKeys</key>
<array>
<string>EthernetMacAddress</string>
<string>UniqueDeviceID</string>
<string>WifiAddressData</string>
<string>WifiAddress</string>
</array>
<key>com.apple.sharing.DeviceDiscovery</key>
<true/>
<key>com.apple.sharing.Session</key>
<true/>
<key>com.apple.wifi.manager-access</key>
<true/>
<key>keychain-access-groups</key>
<array>
<string>apple</string>
<string>com.apple.airplay.pairing</string>
<string>com.apple.hap.pairing</string>
<string>com.apple.pairing</string>
</array>
</dict>
</plist>
