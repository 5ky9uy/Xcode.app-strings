newComputePipelineStateWithImageFilterFunctionsSPI:imageFilterFunctionInfo:error:
count
iosurface
replaceRegion:mipmapLevel:slice:withBytes:bytesPerRow:bytesPerImage:
setDevice:
alloc
initWithDebugFunctionPlayer:
device
initWithDevice:
initWithCaptureStore:
shouldIgnoreCaptureFile
mainExecutionMode
executeFunctions:count:
playbackMode
executeGraphicsFunction
targetFunctionIndex
removeAllObjects
prepareWireframeTextureWithCommandBufferId:commandEncoderId:parallelEncoderId:pipelineId:renderPassDescriptor:
createWireframeRenderCommandEncoder:
wireframeTexture
setObject:forKey:
_executeGraphicsFunction
shouldExecuteGraphicsFunction
_trackObjects
executedDrawCallCount
setExecutedDrawCallCount:
executePlatformFunction
_superExecutePlatformFunction
layerForID:
nextDrawable
texture
descriptor
copy
setFramebufferOnly:
setIsDrawable:
newTextureWithDescriptor:
prepareForCaptureExecution
objectForKey:
class
isKindOfClass:
colorAttachments
objectAtIndexedSubscript:
storeAction
setColorStoreAction:atIndex:
respondsToSelector:
numberWithUnsignedInteger:
numberWithInt:
performSelector:withObject:withObject:
depthAttachment
setDepthStoreAction:
performSelector:withObject:
stencilAttachment
setStencilStoreAction:
endEncoding
_endEncodingForAllRemainingEncoders:
commit
finish
setTextureType:
pixelFormat
setPixelFormat:
width
setWidth:
height
setHeight:
setResourceOptions:
textureType
renderPassDescriptor
setTexture:
setLevel:
setSlice:
setDepthPlane:
setResolveTexture:
setLoadAction:
setStoreAction:
renderCommandEncoderWithDescriptor:
blitCommandEncoder
copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:
_attachmentInfoForCommandEncoderID:
createLayerWithID:contentRect:contentsScale:properties:isCoreAnimationSurface:
updateLayer:contentRect:contentsScale:properties:
prepareLayerForPresent:
currentTopLayer
deleteLayer:
setTransform:forLayerID:withScreenToLayerScale:
setPosition:forLayerID:
setAnchorPoint:forLayerID:
isEqual:
self
performSelector:
isProxy
isMemberOfClass:
conformsToProtocol:
retain
release
autorelease
retainCount
zone
hash
superclass
description
debugDescription
superlayer
bounds
contentsScale
shrinkSourceSize:toDestSize:
setBounds:
setPosition:
setAnchorPoint:
setDrawableSize:
commandBuffer
setClearColor:
_texture2DFromTexture:level:slice:depthPlane:commandBuffer:
renderTexture:withEncoder:enableBlending:layerIndex:
enableWireframePresent
wireframeLineColor
setBlendColorRed:green:blue:alpha:
waitUntilCompleted
layerManager
present
processArguments
objectMap
_modifyDescriptorForStore:
parallelRenderCommandEncoderWithDescriptor:
_isFunctionCommandEncoderCreation
_isReceiverTypeCommandEncoderRelated
_addRenderPassDescriptorToEncoderMapFromArgumentPointer:forEncoder:
_forceAttachmentStoreActionToStore:
setObject:atIndexedSubscript:
_updateMemorylessTextures:
setDepthAttachment:
setStencilAttachment:
availableCounters
countByEnumeratingWithState:objects:count:
isEqualToString:
removeObject:
requestCounters:
commandQueue
setStatEnabled:
setStatLocations:
setStatOptions:
_setupCounterConfigurationForCommandQueue:
getRequestedCounters
addCounters:
counterInfo
objectForKeyedSubscript:
addObject:
bytes
unsignedIntegerValue
addCommandBufferFrameProfile:
addPerfSampleHandler:
getListIndex
requestCounters:withIndex:
isStatEnabled
arrayWithObjects:
_isMandatoryCounter:
subdivideCounterList:
mutableCopy
setObject:forKeyedSubscript:
getStatLocations
setIsInVertexMode:
reqCountersFragment
setReqCounters:
reqCounters
harvestableTexture:
encoderMap
commitEncodersAndCommandBuffers
waitForCommmandBuffersCompletion
presentDrawable
didSetupFrameProfilingNeedMultiplePasses
enableStatsSampling:
setupAllStatLocations
setupProfilingForCounterLists
setupProfilingForListAtIndex:
counterInfo:
sampleEncoderCounters
requestFragmentCounters
stopFrameProfiling
.cxx_destruct
.cxx_construct
wireframeRenderMode
setShouldIgnoreCaptureFile:
currentEncoderIndex
setCurrentEncoderIndex:
counterTypes
setCounterTypes:
counterListsPerPass
setCounterListsPerPass:
statVertices
setStatVertices:
statPixels
setStatPixels:
frameCounters
setFrameCounters:
reqCountersVertex
setReqCountersVertex:
setReqCountersFragment:
isInVertexMode
requiresMultiplePasses
setRequiresMultiplePasses:
_drawableIdToLayerIdMap
_textureToDrawableMap
_commandEncoderDescriptorMap
_counterInfos
_baseCounterIndexForList
_commandBufferMap
_encoderMap
_parallelEncoderMap
_encoderToParallelEncoderMap
_lastEncoderID
_disableWireframe
_commandQueueSet
_wireframeRenderer
_wireframeRenderMode
_textureRenderer
_commandBufferIndex
_encoderIndex
_drawIndex
_targetCommandEncoderId
_layer
_shouldIgnoreCaptureFile
_isInVertexMode
_requiresMultiplePasses
_currentEncoderIndex
_counterTypes
_counterListsPerPass
_statVertices
_statPixels
_frameCounters
_reqCountersVertex
_reqCountersFragment
_reqCounters
animationTimingFunction
animationDuration
disableActions
completionBlock
setDisableActions:
flush
setAnimationTimingFunction:
setAnimationDuration:
setCompletionBlock:
init
newLibraryWithSource:options:error:
newFunctionWithName:
texture2DDescriptorWithPixelFormat:width:height:mipmapped:
usage
setUsage:
setArrayLength:
isRasterizationEnabled
_createWireframeTexture:andRenderPassDescriptor:
vertexDescriptor
setVertexDescriptor:
vertexFunction
setVertexFunction:
setFragmentFunction:
inputPrimitiveTopology
setInputPrimitiveTopology:
tessellationFactorFormat
setTessellationFactorFormat:
tessellationPartitionMode
setTessellationPartitionMode:
tessellationOutputWindingOrder
setTessellationOutputWindingOrder:
isTessellationFactorScaleEnabled
setTessellationFactorScaleEnabled:
tessellationFactorStepFunction
setTessellationFactorStepFunction:
maxTessellationFactor
setMaxTessellationFactor:
valueForKey:
setValue:forKey:
newRenderPipelineStateWithDescriptor:error:
_saveEncoderState:
reflection
vertexArguments
access
type
fragmentArguments
index
array
enumerateFragmentBuffersUsingBlock:
enumerateFragmentTexturesUsingBlock:
containsObject:
enumerateVertexBuffersUsingBlock:
enumerateVertexTexturesUsingBlock:
engine
wireframeLineWidth
function
tessellationWireframeLineWidth
setRenderTargetArrayLength:
_loadEncoderState:
newDepthStencilStateWithDescriptor:
setDepthStencilState:
setRenderPipelineState:
setTriangleFillMode:
originalObject
setLineWidth:
_prepareWireframeTextureWithEncoder:andCommandBuffer:andPipelineState:andParallelEncoder:andRenderPassDescriptor:
viewport
frontFacingWinding
cullMode
floatValue
getValue:
enumerateVertexSamplersUsingBlock:
setViewport:
setFrontFacingWinding:
setCullMode:
setTessellationFactorBuffer:offset:instanceStride:
setTessellationFactorScale:
vertexBytesKeyAtIndex:
unsignedLongLongValue
setVertexBytes:length:atIndex:
setVertexBuffer:offset:atIndex:
setVertexTexture:atIndex:
setVertexSamplerState:atIndex:
_player
_wireframeLibrary
_wireframeCreationFragmentFunction
_wireframeTextureDescriptor
_wireframeTexture
_wireframeRenderPassColorAttachmentDescriptor
_wireframeRenderPassDescriptor
_wireframeRenderPipelineState
_encoder_viewport
_encoder_frontFacingWinding
_encoder_cullMode
_encoder_tessellationFactorBuffer
_encoder_tessellationFactorScale
_encoder_tessellationFactorBufferInstanceStride
_encoder_vertexBufferArgs
_encoder_vertexTextureArgs
_encoder_vertexSamplerArgs
_originalCommandEncoderId
_originalCommandBuffer
_originalEncoder
_originalParallelEncoder
_supports_tessellation
dataWithBytes:length:
dataWithBytesNoCopy:length:freeWhenDone:
unarchiveObjectWithData:
strongLayerManager
numberWithUnsignedLongLong:
numberWithLongLong:
dictionaryWithObjectsAndKeys:
updateLayer:contentRect:contentsScale:properties:windowRect:
stringWithUTF8String:
deviceForID:withDeviceName:
setPresentsWithTransaction:
presentAtTime:
removeObjectForKey:
isFrameBoundary
setLayerManager:
_drawableMap
_layerManager
dealloc
componentsSeparatedByString:
name
hasPrefix:
enumerateObjectsUsingBlock:
_getDeviceWithName:
contents
newBufferWithLength:options:
copyFromBuffer:sourceOffset:toBuffer:destinationOffset:size:
newBufferWithBytes:length:options:
didModifyRange:
_createPrivateBufferForFunctionWithDevice:bytes:length:resourceOptions:
storageMode
copyFromBuffer:sourceOffset:sourceBytesPerRow:sourceBytesPerImage:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:options:
fragmentBytesKeyAtIndex:
newCommandQueue
_saveBytes
_objectMap
_device
setLabel:
synchronizeResource:
synchronizeTexture:slice:level:
copyFromBuffer:sourceOffset:sourceBytesPerRow:sourceBytesPerImage:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:
copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toBuffer:destinationOffset:destinationBytesPerRow:destinationBytesPerImage:
copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toBuffer:destinationOffset:destinationBytesPerRow:destinationBytesPerImage:options:
generateMipmapsForTexture:
fillBuffer:range:value:
insertDebugSignpost:
pushDebugGroup:
popDebugGroup
newTextureWithDescriptor:offset:bytesPerRow:
addDebugMarker:range:
removeAllDebugMarkers
newTiledTextureWithDescriptor:offset:bytesPerRow:
setPurgeableState:
setProfilingEnabled:
enqueue
addScheduledHandler:
presentDrawable:
presentDrawable:atTime:
waitUntilScheduled
addCompletedHandler:
computeCommandEncoder
debugCommandEncoder
commitAndHold
setSkipRender:
setExecutionEnabled:
insertDebugCaptureBoundary
setComputePipelineState:
setBytes:length:atIndex:
setBuffer:offset:atIndex:
setBufferOffset:atIndex:
setTexture:atIndex:
setSamplerState:atIndex:
setSamplerState:lodMinClamp:lodMaxClamp:atIndex:
setThreadgroupMemoryLength:atIndex:
setStageInRegion:
dispatchThreadgroups:threadsPerThreadgroup:
dispatchThreadgroupsWithIndirectBuffer:indirectBufferOffset:threadsPerThreadgroup:
setMetalAssertionsEnabled:
newCommandQueueWithMaxCommandBufferCount:
newTextureWithDescriptor:iosurface:plane:
newSamplerStateWithDescriptor:
newDefaultLibrary
newLibraryWithFile:error:
newLibraryWithData:error:
newComputePipelineStateWithFunction:error:
newComputePipelineStateWithDescriptor:error:
unmapShaderSampleBuffer
newCommandQueueWithDescriptor:
newFunctionWithName:constantValues:error:
renderCommandEncoder
setVertexBufferOffset:atIndex:
setVertexSamplerState:lodMinClamp:lodMaxClamp:atIndex:
setDepthClipMode:
setDepthBias:slopeScale:clamp:
setScissorRect:
setFragmentBytes:length:atIndex:
setFragmentBuffer:offset:atIndex:
setFragmentBufferOffset:atIndex:
setFragmentTexture:atIndex:
setFragmentSamplerState:atIndex:
setFragmentSamplerState:lodMinClamp:lodMaxClamp:atIndex:
setStencilReferenceValue:
setStencilFrontReferenceValue:backReferenceValue:
setVisibilityResultMode:offset:
drawPrimitives:vertexStart:vertexCount:instanceCount:
drawPrimitives:vertexStart:vertexCount:
drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:instanceCount:
drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:
drawPrimitives:vertexStart:vertexCount:instanceCount:baseInstance:
drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:instanceCount:baseVertex:baseInstance:
drawPrimitives:indirectBuffer:indirectBufferOffset:
drawIndexedPrimitives:indexType:indexBuffer:indexBufferOffset:indirectBuffer:indirectBufferOffset:
textureBarrier
drawPatches:patchStart:patchCount:patchIndexBuffer:patchIndexBufferOffset:instanceCount:baseInstance:
drawPatches:patchIndexBuffer:patchIndexBufferOffset:indirectBuffer:indirectBufferOffset:
drawIndexedPatches:patchStart:patchCount:patchIndexBuffer:patchIndexBufferOffset:controlPointIndexBuffer:controlPointIndexBufferOffset:instanceCount:baseInstance:
drawIndexedPatches:patchIndexBuffer:patchIndexBufferOffset:controlPointIndexBuffer:controlPointIndexBufferOffset:indirectBuffer:indirectBufferOffset:
getBytes:bytesPerRow:bytesPerImage:fromRegion:mipmapLevel:slice:
getBytes:bytesPerRow:fromRegion:mipmapLevel:
replaceRegion:mipmapLevel:withBytes:bytesPerRow:
newTextureViewWithPixelFormat:
newTextureViewWithPixelFormat:textureType:levels:slices:
setBlendingEnabled:
setSourceRGBBlendFactor:
setDestinationRGBBlendFactor:
setRgbBlendOperation:
setSourceAlphaBlendFactor:
setDestinationAlphaBlendFactor:
setAlphaBlendOperation:
setMinFilter:
setMagFilter:
setMipFilter:
setMaxAnisotropy:
setSAddressMode:
setTAddressMode:
setRAddressMode:
setNormalizedCoordinates:
setLodMinClamp:
setLodMaxClamp:
_renderPassPixelFormatFromDescriptor:
fragmentFunction
_library
_vertexFunction
_opaqueFragmentFunction
_blendingFragmentFunction
_blendingFragmentFunction_2dArray
_renderPipelineDescriptor
_depthStencilDescriptor
_positionBuffer
_texCoordBuffer
_uniformData
_uniformDataBuffer
_samplerState
strongObjectsPointerArray
preprocessorMacros
fastMathEnabled
debuggingEnabled
denormsEnabled
nativeDoubleEnabled
cubemapArrayEnabled
languageVersion
UTF8String
required
constantValueWithFunctionConstant:
enumerateKeysAndObjectsUsingBlock:
depth
mipmapLevelCount
sampleCount
arrayLength
framebufferOnly
isDrawable
cpuCacheMode
level
slice
depthPlane
resolveTexture
resolveLevel
resolveSlice
resolveDepthPlane
loadAction
visibilityResultBuffer
clearColor
clearDepth
clearStencil
renderTargetArrayLength
stencilCompareFunction
stencilFailureOperation
depthFailureOperation
depthStencilPassOperation
readMask
writeMask
depthCompareFunction
isDepthWriteEnabled
label
frontFaceStencil
backFaceStencil
minFilter
magFilter
mipFilter
maxAnisotropy
sAddressMode
tAddressMode
rAddressMode
normalizedCoordinates
lodMinClamp
lodMaxClamp
compareFunction
borderColor
maxThreadsPerThreadgroup
isDepth24Stencil8PixelFormatSupported
vendorName
familyName
productName
isLowPower
isHeadless
unsignedLongValue
isBlendingEnabled
sourceRGBBlendFactor
destinationRGBBlendFactor
rgbBlendOperation
sourceAlphaBlendFactor
destinationAlphaBlendFactor
alphaBlendOperation
layouts
stride
stepRate
stepFunction
attributes
format
offset
bufferIndex
sampleMask
sampleCoverage
isAlphaToCoverageEnabled
isAlphaToOneEnabled
depthAttachmentPixelFormat
stencilAttachmentPixelFormat
computeFunction
threadGroupSizeIsMultipleOfThreadExecutionWidth
stageInputDescriptor
indexType
indexBufferIndex
maxCommandBufferCount
qosClass
qosRelativePriority
dataWithContentsOfFile:
length
functionType
lineNumber
vertexAttributes
attributeIndex
attributeType
isActive
stageInputAttributes
patchType
patchControlPointCount
textureDataType
isVertexDescriptorBuffer
bufferStructType
bufferAlignment
bufferDataSize
bufferDataType
threadgroupMemoryAlignment
threadgroupMemoryDataSize
members
lastObject
structType
arrayType
dataType
elementStructType
elementArrayType
elementType
archivedDataWithRootObject:
performanceStatistics
vertexBuiltInArguments
builtInArguments
arguments
maxTotalThreadsPerThreadgroup
threadExecutionWidth
addPointer:
loopCount
setLoopCount:
standardUserDefaults
integerForKey:
setLoopTimeLimit:
playbackToFunction:
waitUntilResolved
_computeAverageForFrameProfile:forProfile:
numberWithUnsignedLong:
_setupPState
player
setPlaybackMode:
_processProfileInfosWithPayload:
_clearData
dictionaryWithObject:forKey:
_profileFrameWithCounterListsForProfileInfo:
initWithObjectsAndKeys:
dictionary
initWithPlaybackEngine:
profileFrameWithPayload:
profileEncoders
profileFrameWithCounterListsForProfileInfo:
_commandBufferFrameProfilesInfo
_commandBufferFrameProfilesDrawCallInfo
_commandBufferFrameProfiles
_frameProfiling
_engine
_needsMultiplePasses
decodeObjectForKey:
encodeObject:forKey:
supportedFeatureSets
supportsFeatureSet:
stringWithFormat:
stringByAppendingString:
supportsCapabilitiesOfGraphicsAPI:
encodeWithCoder:
initWithCoder:
copyWithZone:
_supportedFeatureSets
_name
_isInternalQueueWhitelisted:
decodeInt64ForKey:
containsValueForKey:
decodeBoolForKey:
encodeInt64:forKey:
encodeBool:forKey:
initWithCommandQueue:
displayName
isInternalQueue
deviceAddress
queueAddress
canBeCaptured
setCanBeCaptured:
isOpenGLQueue
setIsOpenGLQueue:
_isInternalQueue
_canBeCaptured
_isOpenGLQueue
_displayName
_deviceAddress
_queueAddress
_label
graphicsSemaphore
setPreprocessorMacros:
setFastMathEnabled:
setDebuggingEnabled:
setDenormsEnabled:
setNativeDoubleEnabled:
setCubemapArrayEnabled:
setLanguageVersion:
setConstantValue:type:atIndex:
setDepth:
setMipmapLevelCount:
setSampleCount:
setStorageMode:
setCpuCacheMode:
setVisibilityResultBuffer:
setDepthCompareFunction:
setDepthWriteEnabled:
setFrontFaceStencil:
setBackFaceStencil:
setCompareFunction:
setBorderColor:
setStride:
setStepRate:
setStepFunction:
setFormat:
setOffset:
setBufferIndex:
setIndexType:
setIndexBufferIndex:
setTextures:withRange:
setFragmentTextures:withRange:
setVertexTextures:withRange:
setBuffers:offsets:withRange:
setFragmentBuffers:offsets:withRange:
setVertexBuffers:offsets:withRange:
setSamplerStates:withRange:
setVertexSamplerStates:withRange:
setFragmentSamplerStates:withRange:
setSamplerStates:lodMinClamps:lodMaxClamps:withRange:
setVertexSamplerStates:lodMinClamps:lodMaxClamps:withRange:
setFragmentSamplerStates:lodMinClamps:lodMaxClamps:withRange:
setSampleMask:
setSampleCoverage:
setAlphaToCoverageEnabled:
setAlphaToOneEnabled:
setRasterizationEnabled:
setDepthAttachmentPixelFormat:
setStencilAttachmentPixelFormat:
setComputeFunction:
setThreadGroupSizeIsMultipleOfThreadExecutionWidth:
setStageInputDescriptor:
setMaxCommandBufferCount:
setQosClass:
setQosRelativePriority:
setResolveLevel:
setResolveSlice:
setResolveDepthPlane:
setClearDepth:
setClearStencil:
setStencilCompareFunction:
setStencilFailureOperation:
setDepthFailureOperation:
setDepthStencilPassOperation:
setReadMask:
setWriteMask:
MTLStatCommandBufferIndex
MTLStatEncoderIndex
MTLStatCommandIndex
v8@?0
hash
TQ,R
superclass
T#,R
description
T@"NSString",R,C
debugDescription
v32@?0^{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}Q}8I16I20^B24
type
v32@?0@"<MTLCommandBuffer>"8@"NSData"16Q24
currentEncoderIndex
TI,N,V_currentEncoderIndex
counterTypes
T@"NSMutableArray",&,N,V_counterTypes
counterListsPerPass
T@"NSMutableArray",&,N,V_counterListsPerPass
statVertices
T@"NSString",&,N,V_statVertices
statPixels
T@"NSString",&,N,V_statPixels
frameCounters
T@"NSMutableArray",&,N,V_frameCounters
reqCountersVertex
T@"NSMutableArray",&,N,V_reqCountersVertex
reqCountersFragment
T@"NSMutableArray",&,N,V_reqCountersFragment
reqCounters
T@"NSMutableArray",&,N,V_reqCounters
isInVertexMode
TB,N,V_isInVertexMode
requiresMultiplePasses
TB,N,V_requiresMultiplePasses
shouldIgnoreCaptureFile
Tc,N,V_shouldIgnoreCaptureFile
wireframeRenderMode
Tq,R,N,V_wireframeRenderMode
#include <metal_graphics>
#include <metal_texture>
using namespace metal;
fragment vec<float, 4> wireframeCreationFragment()
  return vec<float, 4>(1.0, 1.0, 1.0, 1.0);
-[DYMTLDebugWireframeRenderer initWithDebugFunctionPlayer:]
_wireframeLibrary != nil
wireframeCreationFragment
_wireframeCreationFragmentFunction != nil
tessellationControlPointIndexType
v32@?0^{?=ccQ@QQQQcff}8Q16^c24
tessellationFactorScale
tessellationFactorBufferInstanceStride
tessellationFactorBufferArgument
wireframeTexture
T@"<MTLTexture>",R,N,V_wireframeTexture
Unknown
CAMetalDrawable
CAMetalLayer
MTLBlitCommandEncoder
MTLBuffer
MTLCommandBuffer
MTLCommandQueue
MTLComputeCommandEncoder
MTLComputePipelineState
MTLDepthStencilState
MTLDevice
MTLFence
MTLFragmentRenderCommandEncoder
MTLFunction
MTLHeap
MTLLibrary
MTLParallelRenderCommandEncoder
MTLRenderCommandEncoder
MTLRenderPipelineState
MTLSamplerState
MTLTexture
MTLTextureLayout
[%@ setLabel:%@]
[%@ dealloc]
[%@ copyFromTexture:%@ sourceSlice:%@ sourceLevel:%@ sourceOrigin:%@ sourceSize:%@ toTexture:%@ destinationSlice:%@ destinationLevel:%@ destinationOrigin:%@]
[%@ copyFromBuffer:%@ sourceOffset:%@ sourceBytesPerRow:%@ sourceBytesPerImage:%@ sourceSize:%@ toTexture:%@ destinationSlice:%@ destinationLevel:%@ destinationOrigin:%@]
[%@ copyFromTexture:%@ sourceSlice:%@ sourceLevel:%@ sourceOrigin:%@ sourceSize:%@ toBuffer:%@ destinationOffset:%@ destinationBytesPerRow:%@ destinationBytesPerImage:%@]
[%@ generateMipmapsForTexture:%@]
[%@ fillBuffer:%@ range:%@ value:%@]
[%@ copyFromBuffer:%@ sourceOffset:%@ toBuffer:%@ destinationOffset:%@ size:%@]
[%@ endEncoding]
[%@ insertDebugSignpost:%@]
[%@ pushDebugGroup:%@]
[%@ popDebugGroup]
[%@ setResponsibleProcess:%@]
[%@ contents]
[%@ newTextureWithDescriptor:%@ offset:%@ bytesPerRow:%@]
[%@ setPurgeableState:%@]
[%@ isPurgeable]
[%@ setProfilingEnabled:%@]
[%@ enqueue]
[%@ commit]
[%@ addScheduledHandler:%@]
[%@ presentDrawable:%@]
[%@ presentDrawable:%@ atTime:%@]
[%@ waitUntilScheduled]
[%@ addCompletedHandler:%@]
[%@ waitUntilCompleted]
[%@ blitCommandEncoder]
[%@ renderCommandEncoderWithDescriptor:%@]
[%@ computeCommandEncoder]
[%@ parallelRenderCommandEncoderWithDescriptor:%@]
[%@ debugCommandEncoder]
[%@ setBackgroundTrackingPID:%@]
[%@ setSkipRender:%@]
[%@ setExecutionEnabled:%@]
[%@ commandBuffer]
[%@ commandBufferWithUnretainedReferences]
[%@ insertDebugCaptureBoundary]
[%@ finish]
[%@ setComputePipelineState:%@]
[%@ setBuffer:%@ offset:%@ atIndex:%@]
[%@ setBuffers:%@ offsets:%@ withRange:%@]
[%@ setTexture:%@ atIndex:%@]
[%@ setTextures:%@ withRange:%@]
[%@ setSamplerState:%@ atIndex:%@]
[%@ setSamplerStates:%@ withRange:%@]
[%@ setSamplerState:%@ lodMinClamp:%@ lodMaxClamp:%@ atIndex:%@]
[%@ setSamplerStates:%@ lodMinClamps:%@ lodMaxClamps:%@ withRange:%@]
[%@ setThreadgroupMemoryLength:%@ atIndex:%@]
[%@ dispatchThreadgroups:%@ threadsPerThreadgroup:%@]
[%@ executeBarrier]
[%@ setShaderDebugInfoCaching:%@]
[%@ setMetalAssertionsEnabled:%@]
[%@ newCommandQueue]
[%@ newCommandQueueWithMaxCommandBufferCount:%@]
[%@ newBufferWithLength:%@ options:%@]
[%@ newBufferWithBytes:%@ length:%@ options:%@]
[%@ newBufferWithBytesNoCopy:%@ length:%@ options:%@ deallocator:%@]
[%@ newDepthStencilStateWithDescriptor:%@]
[%@ newTextureWithDescriptor:%@]
[%@ newSamplerStateWithDescriptor:%@]
[%@ newDefaultLibrary]
[%@ newLibraryWithFile:%@ error:%@]
[%@ newLibraryWithData:%@ error:%@]
[%@ newLibraryWithSource:%@ options:%@ error:%@]
[%@ newLibraryWithSource:%@ options:%@ completionHandler:%@]
[%@ newRenderPipelineStateWithDescriptor:%@ error:%@]
[%@ newRenderPipelineStateWithDescriptor:%@ options:%@ reflection:%@ error:%@]
[%@ newRenderPipelineStateWithDescriptor:%@ completionHandler:%@]
[%@ newRenderPipelineStateWithDescriptor:%@ options:%@ completionHandler:%@]
[%@ newComputePipelineStateWithFunction:%@ error:%@]
[%@ newComputePipelineStateWithFunction:%@ options:%@ reflection:%@ error:%@]
[%@ newComputePipelineStateWithFunction:%@ completionHandler:%@]
[%@ newComputePipelineStateWithFunction:%@ options:%@ completionHandler:%@]
[%@ unmapShaderSampleBuffer]
[%@ newTextureWithDescriptor:%@ iosurface:%@ plane:%@]
[%@ newFunctionWithName:%@]
[%@ setSeparateCommits:%@]
[%@ renderCommandEncoder]
[%@ setRenderPipelineState:%@]
[%@ setVertexBuffer:%@ offset:%@ atIndex:%@]
[%@ setVertexBuffers:%@ offsets:%@ withRange:%@]
[%@ setVertexTexture:%@ atIndex:%@]
[%@ setVertexTextures:%@ withRange:%@]
[%@ setVertexSamplerState:%@ atIndex:%@]
[%@ setVertexSamplerStates:%@ withRange:%@]
[%@ setVertexSamplerState:%@ lodMinClamp:%@ lodMaxClamp:%@ atIndex:%@]
[%@ setVertexSamplerStates:%@ lodMinClamps:%@ lodMaxClamps:%@ withRange:%@]
[%@ setViewport:%@]
[%@ setFrontFacingWinding:%@]
[%@ setCullMode:%@]
[%@ setDepthClipMode:%@]
[%@ setDepthBias:%@ slopeScale:%@ clamp:%@]
[%@ setScissorRect:%@]
[%@ setTriangleFillMode:%@]
[%@ setFragmentBuffer:%@ offset:%@ atIndex:%@]
[%@ setFragmentBuffers:%@ offsets:%@ withRange:%@]
[%@ setFragmentTexture:%@ atIndex:%@]
[%@ setFragmentTextures:%@ withRange:%@]
[%@ setFragmentSamplerState:%@ atIndex:%@]
[%@ setFragmentSamplerStates:%@ withRange:%@]
[%@ setFragmentSamplerState:%@ lodMinClamp:%@ lodMaxClamp:%@ atIndex:%@]
[%@ setFragmentSamplerStates:%@ lodMinClamps:%@ lodMaxClamps:%@ withRange:%@]
[%@ setBlendColorRed:%@ green:%@ blue:%@ alpha:%@]
[%@ setDepthStencilState:%@]
[%@ setStencilReferenceValue:%@]
[%@ setVisibilityResultMode:%@ offset:%@]
[%@ drawPrimitives:%@ vertexStart:%@ vertexCount:%@ instanceCount:%@]
[%@ drawPrimitives:%@ vertexStart:%@ vertexCount:%@]
[%@ drawIndexedPrimitives:%@ indexCount:%@ indexType:%@ indexBuffer:%@ indexBufferOffset:%@ instanceCount:%@]
[%@ drawIndexedPrimitives:%@ indexCount:%@ indexType:%@ indexBuffer:%@ indexBufferOffset:%@]
[%@ setLineWidth:%@]
[%@ getBytes:%@ bytesPerRow:%@ bytesPerImage:%@ fromRegion:%@ mipmapLevel:%@ slice:%@]
[%@ replaceRegion:%@ mipmapLevel:%@ slice:%@ withBytes:%@ bytesPerRow:%@ bytesPerImage:%@]
[%@ getBytes:%@ bytesPerRow:%@ fromRegion:%@ mipmapLevel:%@]
[%@ replaceRegion:%@ mipmapLevel:%@ withBytes:%@ bytesPerRow:%@]
[%@ newTextureViewWithPixelFormat:%@]
[%@ flushResource:%@]
[%@ flushTexture:%@ slice:%@ mipmapLevel:%@]
[%@ invalidateRange:%@]
[%@ setBytes:%@ length:%@ atIndex:%@]
[%@ setBufferOffset:%@ atIndex:%@]
[%@ setVertexBytes:%@ length:%@ atIndex:%@]
[%@ setVertexBufferOffset:%@ atIndex:%@]
[%@ setFragmentBytes:%@ length:%@ atIndex:%@]
[%@ setFragmentBufferOffset:%@ atIndex:%@]
[%@ invalidateRegion:%@]
[%@ dispatchThreadgroupsWithIndirectBuffer:%@ indirectBufferOffset:%@ threadsPerThreadgroup:%@]
[%@ setStencilFrontReferenceValue:%@ backReferenceValue:%@]
[%@ drawPrimitives:%@ vertexStart:%@ vertexCount:%@ instanceCount:%@ baseInstance:%@]
[%@ drawIndexedPrimitives:%@ indexCount:%@ indexType:%@ indexBuffer:%@ indexBufferOffset:%@ instanceCount:%@ baseVertex:%@ baseInstance:%@]
[%@ drawPrimitives:%@ indirectBuffer:%@ indirectBufferOffset:%@]
[%@ drawIndexedPrimitives:%@ indexType:%@ indexBuffer:%@ indexBufferOffset:%@ indirectBuffer:%@ indirectBufferOffset:%@]
[%@ setFragmentTexture:%@ atTextureIndex:%@ samplerState:%@ atSamplerIndex:%@]
[%@ synchronizeResource:%@]
[%@ synchronizeTexture:%@ slice:%@ level:%@]
[%@ copyFromTexture:%@ sourceSlice:%@ sourceLevel:%@ sourceOrigin:%@ sourceSize:%@ toTexture:%@ destinationSlice:%@ destinationLevel:%@ destinationOrigin:%@ options:%@]
[%@ copyFromBuffer:%@ sourceOffset:%@ sourceBytesPerRow:%@ sourceBytesPerImage:%@ sourceSize:%@ toTexture:%@ destinationSlice:%@ destinationLevel:%@ destinationOrigin:%@ options:%@]
[%@ copyFromTexture:%@ sourceSlice:%@ sourceLevel:%@ sourceOrigin:%@ sourceSize:%@ toBuffer:%@ destinationOffset:%@ destinationBytesPerRow:%@ destinationBytesPerImage:%@ options:%@]
[%@ didModifyRange:%@]
[%@ setTexture:%@ baseLevel:%@ atIndex:%@]
[%@ supportsFeatureSet:%@]
[%@ supportsSampleCount:%@]
[%@ setVertexTexture:%@ baseLevel:%@ atIndex:%@]
[%@ setFragmentTexture:%@ baseLevel:%@ atIndex:%@]
[%@ commitAndHold]
[%@ textureBarrier]
[%@ newComputePipelineStateWithDescriptor:%@ error:%@]
[%@ newComputePipelineStateWithDescriptor:%@ options:%@ reflection:%@ error:%@]
[%@ newComputePipelineStateWithDescriptor:%@ completionHandler:%@]
[%@ newComputePipelineStateWithDescriptor:%@ options:%@ completionHandler:%@]
[%@ newTextureViewWithPixelFormat:%@ textureType:%@ levels:%@ slices:%@]
[%@ fragmentRenderCommandEncoderWithDescriptor:%@]
[%@ drawTrianglesWithPositions:%@ vertexCount:%@ triangleIndices:%@ triangleCount:%@]
[%@ drawTrianglesWithPositions:%@ vertexCount:%@ vertexVaryings:%@ varyingCountPerVertex:%@ triangleIndices:%@ triangleCount:%@]
[%@ drawTrianglesWithPositions:%@ vertexCount:%@ vertexVaryings:%@ varyingCountPerVertex:%@]
[%@ supportsTextureSampleCount:%@]
[%@ newCommandQueueWithDescriptor:%@]
[%@ setListIndex:%@]
[%@ newBufferWithIOSurface:%@]
[%@ setColorStoreAction:%@ atIndex:%@]
[%@ setDepthStoreAction:%@]
[%@ setStencilStoreAction:%@]
[%@ setColorResolveTexture:%@ slice:%@ depthPlane:%@ level:%@ atIndex:%@]
[%@ setDepthResolveTexture:%@ slice:%@ depthPlane:%@ level:%@]
[%@ computeCommandEncoderWithParallelExecution]
[%@ dispatchBarrier]
[%@ setImageBlockWidth:%@ height:%@ sampleCount:%@]
[%@ setTessellationFactorBuffer:%@ offset:%@ instanceStride:%@]
[%@ drawPatches:%@ patchStart:%@ patchCount:%@ patchIndexBuffer:%@ patchIndexBufferOffset:%@ instanceCount:%@ baseInstance:%@]
[%@ drawPatches:%@ patchIndexBuffer:%@ patchIndexBufferOffset:%@ indirectBuffer:%@ indirectBufferOffset:%@]
[%@ drawIndexedPatches:%@ patchStart:%@ patchCount:%@ patchIndexBuffer:%@ patchIndexBufferOffset:%@ controlPointIndexBuffer:%@ controlPointIndexBufferOffset:%@ instanceCount:%@ baseInstance:%@]
[%@ drawIndexedPatches:%@ patchIndexBuffer:%@ patchIndexBufferOffset:%@ controlPointIndexBuffer:%@ controlPointIndexBufferOffset:%@ indirectBuffer:%@ indirectBufferOffset:%@]
[%@ setTileBytes:%@ length:%@ atIndex:%@]
[%@ setTileBuffer:%@ offset:%@ atIndex:%@]
[%@ setTileBufferOffset:%@ atIndex:%@]
[%@ setTileTexture:%@ atIndex:%@]
[%@ setTileSamplerState:%@ atIndex:%@]
[%@ setTileSamplerState:%@ lodMinClamp:%@ lodMaxClamp:%@ atIndex:%@]
[%@ dispatchThreadsPerTile:%@]
[%@ functionConstantIndexByName:%@ type:%@]
[%@ setIsOpenGLQueue:%@]
[%@ presentDrawable:%@ afterMinimumDuration:%@]
[%@ setTessellationFactorScale:%@]
[%@ waitForFence:%@]
[%@ updateFence:%@]
[%@ newFence]
[%@ updateFence:%@ afterStages:%@]
[%@ waitForFence:%@ beforeStages:%@]
[%@ setLabel:%@ error:%@]
[%@ makeAliasable]
[%@ heapTextureSizeWithDescriptor:%@]
[%@ newHeapWithDescriptor:%@]
[%@ isAliasable]
[%@ heapTextureSizeAndAlignWithDescriptor:%@]
[%@ heapBufferSizeAndAlignWithLength:%@ options:%@]
[%@ newFunctionWithName:%@ constantValues:%@ error:%@]
[%@ newFunctionWithName:%@ constantValues:%@ completionHandler:%@]
[%@ maxAvailableSizeWithAlignment:%@]
[%@ newTiledTextureWithDescriptor:%@ offset:%@ bytesPerRow:%@]
[%@ addDebugMarker:%@ range:%@]
[%@ removeAllDebugMarkers]
[%@ newComputePipelineStateWithImageFilterFunctionsSPI:%@ imageFilterFunctionInfo:%@ error:%@]
[%@ setStageInRegion:%@]
[%@ newTextureLayoutWithDescriptor:%@ isHeapOrBufferBacked:%@]
[%@ newLinearTextureWithDescriptor:%@ offset:%@ bytesPerRow:%@ bytesPerImage:%@]
[%@ newTextureWithBytesNoCopy:%@ length:%@ descriptor:%@ deallocator:%@]
[%@ newDefaultLibraryWithBundle:%@ error:%@]
RestoreMTLBufferContents
DeviceReference
%@ harvestedReplaceRegion:%@ mipmapLevel:%@ slice:%@ withBytes:%@ bytesPerRow:%@ bytesPerImage:%@
%@ harvestedNewBufferWithBytes:%@ length:%@ options:%@
%@ harvestedReplaceRegion:%@ mipmapLevel:%@ slice:%@ withBytes:%@ bytesPerRow:%@ bytesPerImage:%@ totalBytes:%@
BufferResourceUsage
TextureResourceUsage
SetCapturingCommandQueueAddress
RestoreMTLTextureIOSurfaceDataForPlane
TextureMipmapInfo
[%@ setPresentsWithTransaction:%@]
[%@ texture]
[%@ nextDrawable]
[%@ setPixelFormat:%@]
[%@ setDrawableSize:%@]
[%@ setDevice:%@]
[%@ setBounds:%@ contentsScale:%@]
[%@ setFramebufferOnly:%@]
[%@ setBounds:%@ contentsScale:%@ windowBounds:%@)
[%@ present]
[%@ presentAtTime:%@]
[%@ presentAfterMinimumDuration:%@]
styleMask
windowLevel
strongLayerManager
T@"<DYLayerManager>",R,N
layerManager
T@"<DYLayerManager>",W,N,V_layerManager
v32@?0@"<MTLDevice>"8Q16^c24
+[DYMTLFunctionPlayer vertexBytesKeyAtIndex:]
/Library/Caches/com.apple.xbs/Sources/GPUTools_DevTools/GPUTools_DevTools-21514/Metal/MTLToolsDeviceSupport/DYMTLFunctionPlayer.mm
index < MTL_MAX_VERTEX_BUFFERS_INTERNAL
+[DYMTLFunctionPlayer fragmentBytesKeyAtIndex:]
index < MTL_MAX_FRAGMENT_BUFFERS
device
T@"<MTLDevice>",&,N,V_device
v16@?0@"<MTLCommandBuffer>"8
Failed to dispatch: 0x%x
DYGuestAppClient *DYGetMTLGuestAppClient()
_guestAppClientMTL != nil
failed to dlopen interpose dylib: %s
gDYMTLObjectRemappingBlock
void init_interpose_api(void *)
g_interpose_api.gDYMTLObjectRemappingBlock != nullptr
#include <metal_graphics>
#include <metal_texture>
using namespace metal;
struct VertexOutput
  vec<float, 4> pos [[position]];
  vec<float, 2> uv;
struct UniformData
  vec<float, 4> blendColor;
  uint selectedLayer;
vertex VertexOutput vertexFunction(device const vec<float,4> *pos_data [[ buffer(0) ]],
                                   device const vec<float,2> *uv_data [[ buffer(1) ]], 
                                   uint vid [[ vertex_id ]])
  VertexOutput out;
  out.pos = pos_data[vid];
  out.uv = uv_data[vid];
  return out;
fragment vec<float, 4> opaqueFragmentFunction(VertexOutput in [[stage_in]],
                                              texture2d<float> tex [[ texture(0) ]],
                                              sampler sam [[ sampler(0) ]] )
  vec<float, 4> tex_color = tex.sample(sam, in.uv);
  return tex_color;
fragment vec<float, 4> blendingFragmentFunction(VertexOutput in [[stage_in]],
                                                texture2d<float> tex [[ texture(0) ]],
                                                sampler sam [[ sampler(0) ]],
                                                constant UniformData &uniformData [[ buffer(0) ]]){
  vec<float, 4> tex_color = tex.sample(sam, in.uv);
  return tex_color.r * uniformData.blendColor;
fragment vec<float, 4> blendingFragmentFunction_2dArray(VertexOutput in [[stage_in]],
                                                        texture2d_array<float> tex [[ texture(0) ]],
                                                        sampler sam [[ sampler(0) ]],
                                                        constant UniformData &uniformData [[ buffer(0) ]]){
  vec<float, 4> tex_color = tex.sample(sam, in.uv, uniformData.selectedLayer);
  return tex_color.r * uniformData.blendColor;
-[DYMTLTextureRenderer initWithDevice:]
_library != nil
vertexFunction
opaqueFragmentFunction
blendingFragmentFunction
blendingFragmentFunction_2dArray
_depthStencilDescriptor != nil
_positionBuffer != nil
_texCoordBuffer != nil
_uniformDataBuffer != nil
v32@?0@"NSString"8@"MTLFunctionConstant"16^c24
sharedMemorySize
dedicatedMemorySize
CiulSl
CiSululb
patchType
Ciuli
CiSululuiululul
CiSululuiululululbb
CiSululuiul
CiSulbb
Ciululbb
CiUul
v32@?0@"MTLArgument"8Q16^c24
Ciulul
CiuiSSS
MTLStat_nSec
MTLStatCounter_PBUsed
GPUFrameProfilingPowerStateWarmupTime
perEncoderIndexDrawCallCount
frame counters
frame profile data
AverageSamples
encoder time data
tilerParamBufBytesUsedArray
vertex fetch shader key
vertex fetch shader info
vertex shader key
vertex shader info
fragment shader key
fragment shader info
compute kernel key
compute kernel info
name
supportedFeatureSets
-[DYMTLDeviceProfile supportsCapabilitiesOfGraphicsAPI:]
graphicsAPIInfo
v32@?0@8Q16^c24
%@ name=%@ featureProfile=
%lx 
T@"NSArray",R,N,V_supportedFeatureSets
T@"NSString",R,N,V_name
com.apple
Command Queue <0x%llx>
com.apple.SceneKit
com.apple.SpriteKit
deviceAddress
queueAddress
label
canBeCaptured
isOpenGLQueue
device:0x%llx, queue:0x%llx, label:%@, canBeCaptured:%@, isOpenGL:%@, isInternal:%@
TQ,R,N,V_deviceAddress
TQ,R,N,V_queueAddress
T@"NSString",R,N,V_label
displayName
T@"NSString",R,N,V_displayName
Tc,N,V_canBeCaptured
Tc,N,V_isOpenGLQueue
MTLCommandBufferScheduled
MTLFunctionInfo
MTLRenderBuiltinVertexArgument
MTLRenderVertexArgument
MTLRenderFragmentArgument
MTLComputeBuiltinArgument
MTLComputeArgument
MTLComputePipelineProperties
MTLDefaultLibrary
command-buffer
command-buffers
command-queue
command-queues
parallel-render-pass
parallel-render-passes
blit-encoder
blit-encoders
compute-encoder
compute-encoders
render-encoder
render-encoders
render-pipeline-state
render-pipeline-states
depth-stencil-state
depth-stencil-states
library
libraries
function
functions
compute-pipeline-state
compute-pipeline-states
texture-views
@76@0:8Q16{CGRect={CGPoint=dd}{CGSize=dd}}24d56@64B72
@"CALayer"76@0:8Q16{CGRect={CGPoint=dd}{CGSize=dd}}24d56@"NSDictionary"64B72
v72@0:8@16{CGRect={CGPoint=dd}{CGSize=dd}}24d56@64
v72@0:8@"CALayer"16{CGRect={CGPoint=dd}{CGSize=dd}}24d56@"NSDictionary"64
v24@0:8@16
v24@0:8@"CALayer"16
@24@0:8Q16
@"CALayer"24@0:8Q16
@16@0:8
@"CALayer"16@0:8
v24@0:8Q16
v40@0:8r^{Argument=^vIIISS}16Q24r^{pair<double, double>=}32
v32@0:8r^{Argument=^vIIISS}16Q24
c24@0:8@16
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
c16@0:8
c24@0:8#16
c24@0:8@"Protocol"16
c24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
@"NSString"16@0:8
@24@0:8@16
^{unordered_map<unsigned long long, EncoderInfo, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, EncoderInfo> > >={__hash_table<std::__1::__hash_value_type<unsigned long long, EncoderInfo>, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, EncoderInfo>, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, EncoderInfo>, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, EncoderInfo> > >={unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, EncoderInfo>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, EncoderInfo>, void *> *> > >={__compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, EncoderInfo>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, EncoderInfo>, void *> *> > >=^^{__hash_node<std::__1::__hash_value_type<unsigned long long, EncoderInfo>, void *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, EncoderInfo>, void *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, EncoderInfo>, void *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, EncoderInfo>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, EncoderInfo>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, EncoderInfo>, void *> *>=^{__hash_node<std::__1::__hash_value_type<unsigned long long, EncoderInfo>, void *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, EncoderInfo>, std::__1::hash<unsigned long long>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, EncoderInfo>, std::__1::equal_to<unsigned long long>, true> >=f}}}16@0:8
v32@0:8^{CoreFunction=IISS(?=QQ){Argument=^vIIISS}[16{Argument=^vIIISS}]II^v^v}16Q24
v16@0:8
v24@0:8^{unordered_map<unsigned long long, EncoderInfo, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, EncoderInfo> > >={__hash_table<std::__1::__hash_value_type<unsigned long long, EncoderInfo>, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, EncoderInfo>, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, EncoderInfo>, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, EncoderInfo> > >={unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, EncoderInfo>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, EncoderInfo>, void *> *> > >={__compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, EncoderInfo>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, EncoderInfo>, void *> *> > >=^^{__hash_node<std::__1::__hash_value_type<unsigned long long, EncoderInfo>, void *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, EncoderInfo>, void *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, EncoderInfo>, void *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, EncoderInfo>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, EncoderInfo>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, EncoderInfo>, void *> *>=^{__hash_node<std::__1::__hash_value_type<unsigned long long, EncoderInfo>, void *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, EncoderInfo>, std::__1::hash<unsigned long long>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, EncoderInfo>, std::__1::equal_to<unsigned long long>, true> >=f}}}16
@56@0:8@16Q24Q32Q40@48
{AttachmentInfo=QQQQ}24@0:8Q16
v32@0:8^v16Q24
B24@0:8@16
B16@0:8
v20@0:8c16
B24@0:8Q16
q16@0:8
I16@0:8
v20@0:8I16
v20@0:8B16
{unordered_map<unsigned long long, unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, unsigned long long> > >="__table_"{__hash_table<std::__1::__hash_value_type<unsigned long long, unsigned long long>, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, unsigned long long>, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, unsigned long long>, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, unsigned long long> > >="__bucket_list_"{unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, unsigned long long>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, unsigned long long>, void *> *> > >="__ptr_"{__compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, unsigned long long>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, unsigned long long>, void *> *> > >="__first_"^^{__hash_node<std::__1::__hash_value_type<unsigned long long, unsigned long long>, void *>}"__second_"{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, unsigned long long>, void *> *> >="__data_"{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, unsigned long long>, void *> *> >="__first_"Q}}}}"__p1_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, unsigned long long>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, unsigned long long>, void *> > >="__first_"{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, unsigned long long>, void *> *>="__next_"^{__hash_node<std::__1::__hash_value_type<unsigned long long, unsigned long long>, void *>}}}"__p2_"{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, unsigned long long>, std::__1::hash<unsigned long long>, true> >="__first_"Q}"__p3_"{__compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, unsigned long long>, std::__1::equal_to<unsigned long long>, true> >="__first_"f}}}
{unordered_map<unsigned long long, DrawableInfo, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, DrawableInfo> > >="__table_"{__hash_table<std::__1::__hash_value_type<unsigned long long, DrawableInfo>, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, DrawableInfo>, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, DrawableInfo>, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, DrawableInfo> > >="__bucket_list_"{unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, DrawableInfo>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, DrawableInfo>, void *> *> > >="__ptr_"{__compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, DrawableInfo>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, DrawableInfo>, void *> *> > >="__first_"^^{__hash_node<std::__1::__hash_value_type<unsigned long long, DrawableInfo>, void *>}"__second_"{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, DrawableInfo>, void *> *> >="__data_"{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, DrawableInfo>, void *> *> >="__first_"Q}}}}"__p1_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, DrawableInfo>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, DrawableInfo>, void *> > >="__first_"{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, DrawableInfo>, void *> *>="__next_"^{__hash_node<std::__1::__hash_value_type<unsigned long long, DrawableInfo>, void *>}}}"__p2_"{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, DrawableInfo>, std::__1::hash<unsigned long long>, true> >="__first_"Q}"__p3_"{__compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, DrawableInfo>, std::__1::equal_to<unsigned long long>, true> >="__first_"f}}}
{unordered_map<unsigned long long, GPUTools::MTL::Utils::DYMTLRenderPassDescriptor, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, GPUTools::MTL::Utils::DYMTLRenderPassDescriptor> > >="__table_"{__hash_table<std::__1::__hash_value_type<unsigned long long, GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, GPUTools::MTL::Utils::DYMTLRenderPassDescriptor> > >="__bucket_list_"{unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>, void *> *> > >="__ptr_"{__compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>, void *> *> > >="__first_"^^{__hash_node<std::__1::__hash_value_type<unsigned long long, GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>, void *>}"__second_"{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>, void *> *> >="__data_"{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>, void *> *> >="__first_"Q}}}}"__p1_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>, void *> > >="__first_"{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>, void *> *>="__next_"^{__hash_node<std::__1::__hash_value_type<unsigned long long, GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>, void *>}}}"__p2_"{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>, std::__1::hash<unsigned long long>, true> >="__first_"Q}"__p3_"{__compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>, std::__1::equal_to<unsigned long long>, true> >="__first_"f}}}
@"NSDictionary"
{vector<unsigned long, std::__1::allocator<unsigned long> >="__begin_"^Q"__end_"^Q"__end_cap_"{__compressed_pair<unsigned long *, std::__1::allocator<unsigned long> >="__first_"^Q}}
{unordered_map<unsigned long long, CommandBufferInfo, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, CommandBufferInfo> > >="__table_"{__hash_table<std::__1::__hash_value_type<unsigned long long, CommandBufferInfo>, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, CommandBufferInfo>, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, CommandBufferInfo>, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, CommandBufferInfo> > >="__bucket_list_"{unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, CommandBufferInfo>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, CommandBufferInfo>, void *> *> > >="__ptr_"{__compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, CommandBufferInfo>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, CommandBufferInfo>, void *> *> > >="__first_"^^{__hash_node<std::__1::__hash_value_type<unsigned long long, CommandBufferInfo>, void *>}"__second_"{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, CommandBufferInfo>, void *> *> >="__data_"{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, CommandBufferInfo>, void *> *> >="__first_"Q}}}}"__p1_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, CommandBufferInfo>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, CommandBufferInfo>, void *> > >="__first_"{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, CommandBufferInfo>, void *> *>="__next_"^{__hash_node<std::__1::__hash_value_type<unsigned long long, CommandBufferInfo>, void *>}}}"__p2_"{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, CommandBufferInfo>, std::__1::hash<unsigned long long>, true> >="__first_"Q}"__p3_"{__compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, CommandBufferInfo>, std::__1::equal_to<unsigned long long>, true> >="__first_"f}}}
{unordered_map<unsigned long long, EncoderInfo, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, EncoderInfo> > >="__table_"{__hash_table<std::__1::__hash_value_type<unsigned long long, EncoderInfo>, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, EncoderInfo>, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, EncoderInfo>, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, EncoderInfo> > >="__bucket_list_"{unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, EncoderInfo>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, EncoderInfo>, void *> *> > >="__ptr_"{__compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, EncoderInfo>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, EncoderInfo>, void *> *> > >="__first_"^^{__hash_node<std::__1::__hash_value_type<unsigned long long, EncoderInfo>, void *>}"__second_"{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, EncoderInfo>, void *> *> >="__data_"{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, EncoderInfo>, void *> *> >="__first_"Q}}}}"__p1_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, EncoderInfo>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, EncoderInfo>, void *> > >="__first_"{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, EncoderInfo>, void *> *>="__next_"^{__hash_node<std::__1::__hash_value_type<unsigned long long, EncoderInfo>, void *>}}}"__p2_"{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, EncoderInfo>, std::__1::hash<unsigned long long>, true> >="__first_"Q}"__p3_"{__compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, EncoderInfo>, std::__1::equal_to<unsigned long long>, true> >="__first_"f}}}
{unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >="__table_"{__hash_table<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >="__bucket_list_"{unique_ptr<std::__1::__hash_node<unsigned long long, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > >="__ptr_"{__compressed_pair<std::__1::__hash_node<unsigned long long, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > >="__first_"^^{__hash_node<unsigned long long, void *>}"__second_"{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> >="__data_"{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> >="__first_"Q}}}}"__p1_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> > >="__first_"{__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>="__next_"^{__hash_node<unsigned long long, void *>}}}"__p2_"{__compressed_pair<unsigned long, std::__1::hash<unsigned long long> >="__first_"Q}"__p3_"{__compressed_pair<float, std::__1::equal_to<unsigned long long> >="__first_"f}}}
@"DYMTLDebugWireframeRenderer"
@"DYMTLTextureRenderer"
@"CAMetalLayer"
@"NSMutableArray"
@"NSString"
@32@0:8@16^{DYMTLRenderPassDescriptor=QQ[8{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}Q}]{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}Q}{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}Q}}24
q56@0:8@16@24@32@40^{DYMTLRenderPassDescriptor=QQ[8{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}Q}]{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}Q}{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}Q}}48
c24@0:8^{DYMTLRenderPassDescriptor=QQ[8{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}Q}]{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}Q}{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}Q}}16
q56@0:8Q16Q24Q32Q40^{DYMTLRenderPassDescriptor=QQ[8{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}Q}]{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}Q}{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}Q}}48
@"DYMTLCommonDebugFunctionPlayer"
@"<MTLLibrary>"
@"<MTLFunction>"
@"MTLTextureDescriptor"
@"<MTLTexture>"
@"MTLRenderPassColorAttachmentDescriptor"
@"MTLRenderPassDescriptor"
@"<MTLRenderPipelineState>"
{?="originX"d"originY"d"width"d"height"d"znear"d"zfar"d}
{?="isValid"c"hasBeenUsed"c"type"Q"object"@"baseLevel"Q"bufferLength"Q"bufferOffset"Q"threadgroupMemoryLength"Q"hasLodClamp"c"lodMinClamp"f"lodMaxClamp"f}
{vector<std::__1::pair<unsigned long long, MTLDebugFunctionArgument>, std::__1::allocator<std::__1::pair<unsigned long long, MTLDebugFunctionArgument> > >="__begin_"^{pair<unsigned long long, MTLDebugFunctionArgument>}"__end_"^{pair<unsigned long long, MTLDebugFunctionArgument>}"__end_cap_"{__compressed_pair<std::__1::pair<unsigned long long, MTLDebugFunctionArgument> *, std::__1::allocator<std::__1::pair<unsigned long long, MTLDebugFunctionArgument> > >="__first_"^{pair<unsigned long long, MTLDebugFunctionArgument>}}}
@"<MTLCommandBufferSPI>"
@"MTLDebugRenderCommandEncoder"
@"MTLDebugParallelRenderCommandEncoder"
{unordered_map<unsigned long long, id<CAMetalDrawable>, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, id<CAMetalDrawable> > > >="__table_"{__hash_table<std::__1::__hash_value_type<unsigned long long, id<CAMetalDrawable> >, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, id<CAMetalDrawable> >, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, id<CAMetalDrawable> >, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, id<CAMetalDrawable> > > >="__bucket_list_"{unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, id<CAMetalDrawable> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, id<CAMetalDrawable> >, void *> *> > >="__ptr_"{__compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, id<CAMetalDrawable> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, id<CAMetalDrawable> >, void *> *> > >="__first_"^^{__hash_node<std::__1::__hash_value_type<unsigned long long, id<CAMetalDrawable> >, void *>}"__second_"{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, id<CAMetalDrawable> >, void *> *> >="__data_"{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, id<CAMetalDrawable> >, void *> *> >="__first_"Q}}}}"__p1_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, id<CAMetalDrawable> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, id<CAMetalDrawable> >, void *> > >="__first_"{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, id<CAMetalDrawable> >, void *> *>="__next_"^{__hash_node<std::__1::__hash_value_type<unsigned long long, id<CAMetalDrawable> >, void *>}}}"__p2_"{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, id<CAMetalDrawable> >, std::__1::hash<unsigned long long>, true> >="__first_"Q}"__p3_"{__compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, id<CAMetalDrawable> >, std::__1::equal_to<unsigned long long>, true> >="__first_"f}}}
@"<DYLayerManager>"
^v24@0:8Q16
@32@0:8Q16@24
v32@0:8@16Q24
^{unordered_map<unsigned long long, id, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, id> > >={__hash_table<std::__1::__hash_value_type<unsigned long long, id>, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, id>, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, id>, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, id> > >={unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, id>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, id>, void *> *> > >={__compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, id>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, id>, void *> *> > >=^^{__hash_node<std::__1::__hash_value_type<unsigned long long, id>, void *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, id>, void *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, id>, void *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, id>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, id>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, id>, void *> *>=^{__hash_node<std::__1::__hash_value_type<unsigned long long, id>, void *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, id>, std::__1::hash<unsigned long long>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, id>, std::__1::equal_to<unsigned long long>, true> >=f}}}16@0:8
@48@0:8@16*24Q32Q40
{unordered_map<unsigned long long, id, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, id> > >="__table_"{__hash_table<std::__1::__hash_value_type<unsigned long long, id>, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, id>, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, id>, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, id> > >="__bucket_list_"{unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, id>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, id>, void *> *> > >="__ptr_"{__compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, id>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, id>, void *> *> > >="__first_"^^{__hash_node<std::__1::__hash_value_type<unsigned long long, id>, void *>}"__second_"{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, id>, void *> *> >="__data_"{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, id>, void *> *> >="__first_"Q}}}}"__p1_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, id>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, id>, void *> > >="__first_"{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, id>, void *> *>="__next_"^{__hash_node<std::__1::__hash_value_type<unsigned long long, id>, void *>}}}"__p2_"{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, id>, std::__1::hash<unsigned long long>, true> >="__first_"Q}"__p3_"{__compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, id>, std::__1::equal_to<unsigned long long>, true> >="__first_"f}}}
{set<id, std::__1::less<id>, std::__1::allocator<id> >="__tree_"{__tree<id, std::__1::less<id>, std::__1::allocator<id> >="__begin_node_"^{__tree_node<id, void *>}"__pair1_"{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<id, void *> > >="__first_"{__tree_end_node<std::__1::__tree_node_base<void *> *>="__left_"^{__tree_node_base<void *>}}}"__pair3_"{__compressed_pair<unsigned long, std::__1::less<id> >="__first_"Q}}}
@"<MTLDevice>"
v40@0:8@16@24c32I36
Q24@0:8@16
v32@0:8f16f20f24f28
@"MTLRenderPipelineDescriptor"
@"MTLDepthStencilDescriptor"
@"<MTLBuffer>"
{UniformData="blendColor"[4f]"layerIndex"I"padding"[3I]}
@"<MTLSamplerState>"
v32@0:8^{vector<std::__1::tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long>, std::__1::allocator<std::__1::tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long> > >=^{tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long>}^{tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long>}{__compressed_pair<std::__1::tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long> *, std::__1::allocator<std::__1::tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long> > >=^{tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long>}}}16r^{vector<std::__1::tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long>, std::__1::allocator<std::__1::tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long> > >=^{tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long>}^{tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long>}{__compressed_pair<std::__1::tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long> *, std::__1::allocator<std::__1::tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long> > >=^{tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long>}}}24
v24@0:8r^{vector<std::__1::tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long>, std::__1::allocator<std::__1::tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long> > >=^{tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long>}^{tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long>}{__compressed_pair<std::__1::tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long> *, std::__1::allocator<std::__1::tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long> > >=^{tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long>}}}16
^{NSDictionary=#}16@0:8
{vector<std::__1::tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long>, std::__1::allocator<std::__1::tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long> > >="__begin_"^{tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long>}"__end_"^{tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long>}"__end_cap_"{__compressed_pair<std::__1::tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long> *, std::__1::allocator<std::__1::tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long> > >="__first_"^{tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long>}}}
{vector<unsigned long long, std::__1::allocator<unsigned long long> >="__begin_"^Q"__end_"^Q"__end_cap_"{__compressed_pair<unsigned long long *, std::__1::allocator<unsigned long long> >="__first_"^Q}}
@"NSMutableDictionary"
@"DYPlaybackEngine"
c24@0:8@"<DYGraphicsAPIInfo>"16
v24@0:8@"NSCoder"16
@24@0:8@"NSCoder"16
@24@0:8^{_NSZone=}16
@"NSArray"
c24@0:8r*16
DYLayerManager
NSObject
DYMTLCommonDebugFunctionPlayer
DYMTLDebugWireframeRenderer
DYMTLCommonFunctionPlayer
DYMTLFunctionPlayer
DYMTLTextureRenderer
DYMTLDebugPlaybackEngineCounterSupport
DYMTLDeviceProfile
DYGraphicsAPIInfo
NSCoding
NSCopying
DYMTLCommandQueueInfo
