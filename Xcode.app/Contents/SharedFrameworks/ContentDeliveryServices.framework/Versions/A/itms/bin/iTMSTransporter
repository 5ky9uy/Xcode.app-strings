#!/bin/bash
# uncomment the following to debug the script
#set -x
export PATH
PATH=/usr/xpg4/bin:${PATH}:/bin:/usr/bin
# if the user has run the script via symlink (xcrun)
#    then resolve the symlink
# else if the user has the run script in their PATH
#    then we can get the path to the script from 'which'.
# otherwise, we have to get the path from $0
if [ -L "$0" ] && [ -f "$0" ]; then
    ACTUAL_PATH="$(readlink -n "$0")"
    SCRIPT_NAME="$(basename -- "${ACTUAL_PATH}")"
    if [[ $ACTUAL_PATH =~ \.\.* ]] ; then
        # relative link if it starts with ..
        ACTUAL_DIR="$(dirname -- "${ACTUAL_PATH}")"
        CMD_DIR="$(dirname -- "$0")"
        SCRIPT_DIR="$(cd -P -- "${CMD_DIR}/${ACTUAL_DIR}" && pwd -P)"
    else
        SCRIPT_DIR="$(dirname -- "${ACTUAL_PATH}")"
    fi 
    SCRIPT_PATH="${SCRIPT_DIR}/${SCRIPT_NAME}"
elif [ "$0" = "iTMSTransporter" ]; then
    SCRIPT_PATH=$(which iTMSTransporter)
    SCRIPT_NAME="$(basename -- "${SCRIPT_PATH}")"
    SCRIPT_DIR=$(dirname -- "${SCRIPT_PATH}")
else
    SCRIPT_NAME="$(basename -- "$0")"
    SCRIPT_DIR="$(cd -P -- "$(dirname -- "$0")" && pwd -P)"
    SCRIPT_PATH="${SCRIPT_DIR}/${SCRIPT_NAME}"
# Declare variables.
export APPLICATION_CLASS
export COMMAND_LINE_ARGS
export CURRDIR
export DEFAULT_JVM_OPTIONS
export JAVA_EXECUTABLE
export JAVA_EXECUTABLE_ARGS
export JVM_EXECUTABLE
export JVM_OPTIONS
export LC_CTYPE
export LD_LIBRARY_PATH
export PLATFORM_DESCRIPTOR
export PLATFORM_NAME
export PLATFORM_TYPE
export RELATIVE_WOADIR
export SCRIPT_NAME
export WOA_TOP_LEVEL
export RELATIVE_JVM_HOME
export RELATIVE_JVM_BIN
export RELATIVE_JVM
# Initialize variables.
# the actual working directory
CURRDIR="$(pwd)"
# Our working directory is the top-level directory of the bundle, so cd to
# there.
RELATIVE_WOADIR=$(dirname "${SCRIPT_DIR}")
WOA_TOP_LEVEL=$(cd "${RELATIVE_WOADIR}" || exit; pwd -P)
# Configure the RELATIVE_JVM_HOME, based on platform, and architecture
PLATFORM_NAME="$(uname -s)"
# Adjust the JVM to use Rosetta2 if on a machine that supports it
# default to no rosetta
USE_ROSETTA=0
ROSETTA_AVAILABLE_PROP="-Dmacos.rosetta.available=false"
# default arch specific options to nothing initially
JVM_ARCH_FLAGS=""
JVM_ARCH_PROPS=""
MACOS_ARCH_PROP=""
if [ "${PLATFORM_NAME}" = "Darwin" ]; then
    PLATFORM_ARCH=$(/usr/bin/uname -m)
    MACOS_ARCH_PROP="-Dmacos.arch=${PLATFORM_ARCH}"
    if [[ ${PLATFORM_ARCH} =~ ^arm64.* ]]; then
        if /usr/bin/arch -x86_64 /usr/bin/true 2> /dev/null ; then
            USE_ROSETTA=1
            ROSETTA_AVAILABLE_PROP="-Dmacos.rosetta.available=true"
        fi
        if [ "${TURN_ROSETTA_OFF}" = "1" ]; then
            USE_ROSETTA=0
        fi
        if [ ${USE_ROSETTA} -eq 0 ]; then
            # going to run without rosetta (arm64 native)
            # overide the arch, because arm64 version is called aarch64
            JVM_ARCH_FLAGS="-XX:+UseSerialGC"
            JVM_ARCH_PROPS="-Dos.arch=${PLATFORM_ARCH} -DHTTP.transport.useVBTX=true"
        fi
    fi
RELATIVE_JVM_HOME="${WOA_TOP_LEVEL}/java"
RELATIVE_JVM_BIN="${RELATIVE_JVM_HOME}/bin"
RELATIVE_JVM="${RELATIVE_JVM_BIN}/java"
RELATIVE_JVM_LIB="${RELATIVE_JVM_HOME}/lib"
RELATIVE_JVM_LIB_EXT="${RELATIVE_JVM_LIB}/ext"
# We need to be in the .woa when we invoke the JVM (so that the "user.dir"
# Java system property is equal to the path to the .woa).
cd "${WOA_TOP_LEVEL}" || exit
# Configure the launch environment based on the platform information.
# Expected uname values:
#   Darwin
#   Mac OS
#   *Windows* (this prints out an error message)
#   *winnt*   (ditto)
# Everything else is treated as "UNIX", the default.
if [ "${PLATFORM_NAME}" = "" ]; then
    echo "${SCRIPT_NAME}: Unable to access \"uname\" executable!  Terminating." 1>&2
    echo "If running on Windows, use \"$0.cmd\" to launch your application!" 1>&2
    exit 1
case "${PLATFORM_NAME}" in
    "Darwin")   PLATFORM_DESCRIPTOR=MacOS
                PLATFORM_TYPE=Darwin
                ;;
    "Mac OS")   PLATFORM_DESCRIPTOR=MacOS
                PLATFORM_TYPE=Darwin
                ;;
    *Windows*)  echo "Use \"$0.cmd\" to launch your application!  Terminating." 1>&2
                exit 1
                ;;
    *winnt*)    echo "Use \"$0.cmd\" to launch your application!  Terminating." 1>&2
                exit 1
                ;;
    *)          PLATFORM_DESCRIPTOR=UNIX
                PLATFORM_TYPE=Other
                ;;
esac
# Define some arguments that we always want to pass to the JVM.  These can be
# overridden on the command line.
APPLICATION_CLASS=com.apple.transporter.launcher.Application
DEFAULT_JVM_OPTIONS="${CONTAINER_JAVA_TOOL_OPTIONS} -DWORootDirectory=\"${WOROOT}\" -DWOLocalRootDirectory=\"${LOCALROOT}\" -DWOUserDirectory=\"${CURRDIR}\" -DWOEnvClassPath=\"${CLASSPATH}\" -DWOApplicationClass=${APPLICATION_CLASS} -DWOPlatform=${PLATFORM_DESCRIPTOR} -Dcom.webobjects.pid=$$"
JVM_OPTIONS="${JVM_ARCH_FLAGS} -Xmx2048m -Xms1024m -Djava.awt.headless=true -Dsun.net.http.retryPost=false -Dhttps.protocols=TLSv1.3,TLSv1.2,TLSv1.1 -Djava.net.preferIPv4Stack=true"
JVM_EXECUTABLE=java
JAVA_MODULES=""
if [ "${PLATFORM_NAME}" = "Linux" ]; then
    JVM_EXECUTABLE="${RELATIVE_JVM}"
    JAVA_EXT_OVERRIDE="${RELATIVE_JVM_LIB_EXT}"
if [ "${PLATFORM_DESCRIPTOR}" = "MacOS" ]; then
    JVM_EXECUTABLE="${RELATIVE_JVM}"
    JVM_LIB_PATH="-Djava.library.path=${WOA_TOP_LEVEL}/macOS/lib:${HOME}/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:."
    JAVA_SECURITY_URL="-Djava.security.properties=file://${WOA_TOP_LEVEL}/macOS/conf/java.security"
    # use UTF-8 locale
    [ "${LC_CTYPE}" ] || [ "$(locale 2> /dev/null | grep ^LC_CTYPE 2> /dev/null | sed -e 's/.*\(UTF-8\).*//' )" = "UTF-8" ] || LC_CTYPE="UTF-8"
    [ "${LC_CTYPE}" = "*UTF-8" ] || [ "$(locale 2> /dev/null | grep ^LC_CTYPE 2> /dev/null | sed -e 's/.*\(UTF-8\).*//' )" = "UTF-8" ]  || LC_CTYPE="UTF-8"
    # Initial heap size is 32M
    DEFAULT_JVM_OPTIONS="-Xms32m${DEFAULT_JVM_OPTIONS:+ $DEFAULT_JVM_OPTIONS}"
    # Default size of new generation is 2M
    DEFAULT_JVM_OPTIONS="-XX:NewSize=2m${DEFAULT_JVM_OPTIONS:+ $DEFAULT_JVM_OPTIONS}"
    JAVA_EXT_OVERRIDE="${RELATIVE_JVM_LIB_EXT}"
    if [ -e "${JAVA_EXT_OVERRIDE}" ]; then
        # Override the ext directory
        DEFAULT_JVM_OPTIONS="-Djava.ext.dirs=\"${JAVA_EXT_OVERRIDE}\"${DEFAULT_JVM_OPTIONS:+ $DEFAULT_JVM_OPTIONS}"
    fi
JAVA_EXECUTABLE=${JVM_EXECUTABLE}
JAVA_EXECUTABLE_ARGS="${DEFAULT_JVM_OPTIONS:+$DEFAULT_JVM_OPTIONS }${JVM_OPTIONS:+$JVM_OPTIONS }"
# We need to make sure they are running the correct version of java
# get the version
if [ ${USE_ROSETTA} -eq 1 ]; then
    /usr/bin/arch -x86_64 "${JAVA_EXECUTABLE}" ${JVM_ARCH_FLAGS} ${MACOS_ARCH_PROP} ${ROSETTA_AVAILABLE_PROP} ${JVM_ARCH_PROPS} -jar ./lib/itmstransporter-launcher.jar java-version > /dev/null 2>&1
else
    "${JAVA_EXECUTABLE}" ${JVM_ARCH_FLAGS} ${MACOS_ARCH_PROP} ${ROSETTA_AVAILABLE_PROP} ${JVM_ARCH_PROPS} -jar ./lib/itmstransporter-launcher.jar java-version > /dev/null 2>&1
JAVA_VERSION_MAJOR="${?}"
if [ "${JAVA_VERSION_MAJOR}" -ge 11 ]; then
    # user is running on JDK 11+ (NO J2EE Packages), so add in activation, and JAXB
    JAVA_MODULES="${JAVA_MODULES} --illegal-access=deny"
    JAVA_MODULES="${JAVA_MODULES} -p \"${WOA_TOP_LEVEL}/modules\""
    JAVA_MODULES="${JAVA_MODULES} --add-modules=java.activation,java.net.http,java.sql,java.xml,java.xml.bind"
    JAVA_MODULES="${JAVA_MODULES} --add-exports=java.base/sun.security.provider.certpath=ALL-UNNAMED"
    JAVA_MODULES="${JAVA_MODULES} --add-opens=java.xml/com.sun.org.apache.xalan.internal.xsltc.trax=ALL-UNNAMED"
elif [ "${JAVA_VERSION_MAJOR}" -ge 9 ]; then
    # user is running JDK 9 or later
    JAVA_MODULES="--add-modules=java.sql,java.xml,java.xml.bind"
elif [ "${JAVA_VERSION_MAJOR}" -lt 8 ]; then
    echo "Java 1.8 or higher is required. Currently, java ${JAVA_VERSION_MAJOR} is the default java version. Please upgrade." 1>&2
    exit 1
# All -D flags need to be passed to the JVM before the application class is
# specified on the command line, so process $@ to copy such arguments to
# JAVA_EXECUTABLE_ARGS.  -X flags are moved into JAVA_EXECUTABLE_ARGS.
# Quote some args, too, to preserve tokenization of arguments.
# COMMAND_LINE_ARGS is given the value of all args the user passes in on the
# command line (with the exception -X flags).  This will result in duplication
# of arguments starting with "-D" used in the JVM launch invocation below, but
# this is done to avoid possible errors.
COMMAND_LINE_ARGS=
for arg in "$@"
    case ${arg} in
        [\"]-D*=*[\"] | [\']-D*=*[\'] | -D*=[\"]*[\"] | -D*=[\']*[\'])
                  # These args are already quoted.
                  JAVA_EXECUTABLE_ARGS="${JAVA_EXECUTABLE_ARGS:+$JAVA_EXECUTABLE_ARGS }${arg}"
                  COMMAND_LINE_ARGS="${COMMAND_LINE_ARGS:+$COMMAND_LINE_ARGS }${arg}"
                  ;;
        -D*=*)
                  # All args need to be quoted properly.
                  if echo "${arg}" | grep -e '"' >/dev/null
                  then
                      JAVA_EXECUTABLE_ARGS="${JAVA_EXECUTABLE_ARGS:+$JAVA_EXECUTABLE_ARGS }"$(echo "${arg}" | sed -e "s/=\(.*\)$/=\'\1\'/")
                      COMMAND_LINE_ARGS="${COMMAND_LINE_ARGS:+$COMMAND_LINE_ARGS }"$(echo "${arg}" | sed -e "s/=\(.*\)$/=\'\1\'/")
                  else
                      JAVA_EXECUTABLE_ARGS="${JAVA_EXECUTABLE_ARGS:+$JAVA_EXECUTABLE_ARGS }"$(echo "${arg}" | sed -e "s/=\(.*\)$/=\"\1\"/")
                      COMMAND_LINE_ARGS="${COMMAND_LINE_ARGS:+$COMMAND_LINE_ARGS }"$(echo "${arg}" | sed -e "s/=\(.*\)$/=\"\1\"/")
                  fi
                  ;;
        -XX:*PrintVMOptions)
                  # Always give this argument precedence.
                  JAVA_EXECUTABLE_ARGS="${arg}${JAVA_EXECUTABLE_ARGS:+ $JAVA_EXECUTABLE_ARGS}"
                  ;;
        [\"]-X*[\"] | [\']-X*[\'])
                  # These args are already quoted, add to the JVM arg list.
                  JAVA_EXECUTABLE_ARGS="${JAVA_EXECUTABLE_ARGS:+$JAVA_EXECUTABLE_ARGS }${arg}"
                  ;;
        -X*)      # All args need to be quoted properly.
                  if echo "${arg}" | grep -e '"' >/dev/null
                  then
                      JAVA_EXECUTABLE_ARGS="${JAVA_EXECUTABLE_ARGS:+$JAVA_EXECUTABLE_ARGS }"$(echo "${arg}" | sed -e "s/^\(.*\)$/\'\1\'/")
                  else
                      JAVA_EXECUTABLE_ARGS="${JAVA_EXECUTABLE_ARGS:+$JAVA_EXECUTABLE_ARGS }"$(echo "${arg}" | sed -e "s/^\(.*\)$/\"\1\"/")
                  fi
                  ;;
        [\"]*[\"] | [\']*[\'])
                  # These args are already quoted.
                  COMMAND_LINE_ARGS="${COMMAND_LINE_ARGS:+$COMMAND_LINE_ARGS }${arg}"
                  ;;
        *)
                  # All args need to be quoted properly.
                  if echo "${arg}" | grep -e '"' >/dev/null
                  then
                      COMMAND_LINE_ARGS="${COMMAND_LINE_ARGS:+$COMMAND_LINE_ARGS }"\'${arg}\'
                  else
                      COMMAND_LINE_ARGS="${COMMAND_LINE_ARGS:+$COMMAND_LINE_ARGS }"\"${arg}\"
                  fi
                  ;;
    esac
done
# Launch the application.
COMMAND="\"${JAVA_EXECUTABLE}\" ${JAVA_EXECUTABLE_ARGS} ${JVM_LIB_PATH} ${JAVA_SECURITY_URL} ${MACOS_ARCH_PROP} ${ROSETTA_AVAILABLE_PROP} ${JVM_ARCH_PROPS} ${JAVA_MODULES} -jar ./lib/itmstransporter-launcher.jar ${COMMAND_LINE_ARGS}"
if [ ${USE_ROSETTA} -eq 1 ]; then
    COMMAND="/usr/bin/arch -x86_64 ${COMMAND}"
if [ "${ECHO_CMD}" = "1" ]; then
    echo "${COMMAND}"
eval exec ${COMMAND}
