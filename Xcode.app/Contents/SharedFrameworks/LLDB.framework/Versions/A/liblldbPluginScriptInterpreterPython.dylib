Python Obj: 0x
NULL
__builtin__
__main__
im_self
__call__
mode
An error occurred while retrieving the backtrace: 
traceback
StringIO
print_tb
getvalue
LLDB.framework
Resources
Python
python
site-packages
script-python
Embedded Python interpreter
/Library/Caches/com.apple.xbs/Sources/lldb/lldb-1100.0.25.3/lldb/source/Plugins/ScriptInterpreter/Python/ScriptInterpreterPython.cpp
DoAcquireLock
Ensured PyGILState. Previous state = {0}locked
DoFreeLock
Releasing PyGILState. Returning to state = {0}locked
_dict
%s = dict()
run_one_line (%s, 'import copy, keyword, os, re, sys, uuid, lldb')
run_one_line (%s, 'from six.moves import reload_module')
run_one_line (%s, 'import lldb.formatters, lldb.formatters.cpp, pydoc')
run_one_line (%s, 'import lldb.embedded_interpreter; from lldb.embedded_interpreter import run_python_interpreter; from lldb.embedded_interpreter import run_one_line')
run_one_line (%s, 'lldb.debugger_unique_id = %llu; pydoc.pager = pydoc.plainpager')
Enter your Python command(s). Type 'DONE' to end.
def function (frame, bp_loc, internal_dict):
    """frame: the lldb.SBFrame for the location at which you stopped
       bp_loc: an lldb.SBBreakpointLocation for the breakpoint location information
       internal_dict: an LLDB support object not to be used"""
Enter your Python command(s). Type 'DONE' to end.
Warning: No command attached to breakpoint.
ScriptInterpreterPythonImpl::LeaveSession()
stdin
stdout
stderr
ScriptInterpreterPythonImpl::EnterSession(on_entry_flags=0x%hx) session is already active, returning without doing anything
ScriptInterpreterPythonImpl::EnterSession(on_entry_flags=0x%hx)
run_one_line (%s, 'lldb.debugger_unique_id = %llu
; lldb.debugger = lldb.SBDebugger.FindDebuggerWithID (%llu)
; lldb.target = lldb.debugger.GetSelectedTarget()
; lldb.process = lldb.target.GetProcess()
; lldb.thread = lldb.process.GetSelectedThread ()
; lldb.frame = lldb.thread.GetSelectedFrame ()
lldb.embedded_interpreter
run_one_line
g_run_one_line_str
lldb.ScriptInterpreterPythonImpl.ExecuteOneLine.comm
(Os)
python failed attempting to evaluate '%s'
empty command passed to python
virtual void lldb_private::ScriptInterpreterPythonImpl::ExecuteInterpreterLoop()
ScriptInterpreterPythonImpl::Interrupt() sending PyExc_KeyboardInterrupt (tid = %li, num_threads = %i)...
ScriptInterpreterPythonImpl::Interrupt() python code not running, can't interrupt
temp.py
    
(frame, bp_loc, internal_dict)
No input data.
No output function name.
     global_dict = globals()
     new_keys = internal_dict.keys()
     old_keys = global_dict.keys()
     global_dict.update (internal_dict)
     if True:
       %s
     for key in new_keys:
         internal_dict[key] = global_dict[key]
         if key not in old_keys:
             del global_dict[key]
lldb_autogen_python_type_print_func
def %s (valobj, internal_dict):
lldb_autogen_python_cmd_alias_func
def %s (debugger, args, result, internal_dict):
lldb_autogen_python_type_synth_class
class %s:
     %s
explains_stop
should_stop
is_stale
should_step
__callback__
__get_depth__
no such file
lldb_autogen_python_bp_callback_func_
def %s (frame, bp_loc, internal_dict):
lldb_autogen_python_wp_callback_func_
def %s (frame, wp, internal_dict):
virtual bool lldb_private::ScriptInterpreterPythonImpl::GetScriptedSummary(const char *, lldb::ValueObjectSP, StructuredData::ObjectSP &, const lldb_private::TypeSummaryOptions &, std::string &)
<no object>
LLDBSwigPythonCallTypeScript
<no function name>
lldb.debugger = None; lldb.target = None; lldb.process = None; lldb.thread = None; lldb.frame = None
no process
no function to execute
python script evaluation failed
no thread
no frame
no value
invalid pathname
invalid directory name
if not (sys.path.__contains__('%s')):
    sys.path.insert(1,'%s');
Python sys.path handling failed
no known way to import this module specification
sys.modules.__contains__('%s')
sys.getrefcount(%s)
module already imported
import %s ; reload_module(%s)
reload_module(%s)
import %s
calling __lldb_init_module failed
keyword.iskeyword('%s')
invalid Debugger pointer
unable to execute script function
.__doc__
Function %s was not found. Containing module might be missing.
static void lldb_private::ScriptInterpreterPythonImpl::InitializePrivate()
import sys
sys.dont_write_bytecode = 1; import lldb.embedded_interpreter; from lldb.embedded_interpreter import run_python_interpreter; from lldb.embedded_interpreter import run_one_line
sys.path.insert(0,"
sys.path.append("
run_python_interpreter (%s)
quit()
%s_%d
%s_%p
false && "object not found in shared cluster when expected"
GetSharedPointer
/Library/Caches/com.apple.xbs/Sources/lldb/lldb-1100.0.25.3/lldb/include/lldb/Utility/SharedCluster.h
_lldb
InitializeThreadsPrivate
Ensured PyGILState. Previous state = {0}locked
~InitializePythonRAII
Return value was neither false nor true for call to %s.
Wrong return value type for call to %s.
num_children
get_child_at_index
get_child_index
get_dynamic_setting
.__lldb_init_module
INT32_MAX
UINT32_MAX
UINT64_MAX
LLDB_GENERIC_ERROR
LLDB_INVALID_BREAK_ID
LLDB_DEFAULT_BREAK_SIZE
LLDB_INVALID_WATCH_ID
LLDB_WATCH_TYPE_READ
LLDB_WATCH_TYPE_WRITE
LLDB_REGNUM_GENERIC_PC
LLDB_REGNUM_GENERIC_SP
LLDB_REGNUM_GENERIC_FP
LLDB_REGNUM_GENERIC_RA
LLDB_REGNUM_GENERIC_FLAGS
LLDB_REGNUM_GENERIC_ARG1
LLDB_REGNUM_GENERIC_ARG2
LLDB_REGNUM_GENERIC_ARG3
LLDB_REGNUM_GENERIC_ARG4
LLDB_REGNUM_GENERIC_ARG5
LLDB_REGNUM_GENERIC_ARG6
LLDB_REGNUM_GENERIC_ARG7
LLDB_REGNUM_GENERIC_ARG8
LLDB_INVALID_ADDRESS
LLDB_INVALID_INDEX32
LLDB_INVALID_IVAR_OFFSET
LLDB_INVALID_IMAGE_TOKEN
LLDB_INVALID_MODULE_VERSION
LLDB_INVALID_REGNUM
LLDB_INVALID_UID
LLDB_INVALID_PROCESS_ID
LLDB_INVALID_THREAD_ID
LLDB_INVALID_FRAME_ID
LLDB_INVALID_SIGNAL_NUMBER
LLDB_INVALID_OFFSET
LLDB_INVALID_LINE_NUMBER
LLDB_INVALID_QUEUE_ID
LLDB_ARCH_DEFAULT
systemArch
LLDB_ARCH_DEFAULT_32BIT
systemArch32
LLDB_ARCH_DEFAULT_64BIT
systemArch64
LLDB_INVALID_CPUTYPE
LLDB_MAX_NUM_OPTION_SETS
LLDB_OPT_SET_ALL
LLDB_OPT_SET_1
LLDB_OPT_SET_2
LLDB_OPT_SET_3
LLDB_OPT_SET_4
LLDB_OPT_SET_5
LLDB_OPT_SET_6
LLDB_OPT_SET_7
LLDB_OPT_SET_8
LLDB_OPT_SET_9
LLDB_OPT_SET_10
LLDB_OPT_SET_11
eStateInvalid
eStateUnloaded
eStateConnected
eStateAttaching
eStateLaunching
eStateStopped
eStateRunning
eStateStepping
eStateCrashed
eStateDetached
eStateExited
eStateSuspended
kLastStateType
eLaunchFlagNone
eLaunchFlagExec
eLaunchFlagDebug
eLaunchFlagStopAtEntry
eLaunchFlagDisableASLR
eLaunchFlagDisableSTDIO
eLaunchFlagLaunchInTTY
eLaunchFlagLaunchInShell
eLaunchFlagLaunchInSeparateProcessGroup
eLaunchFlagDontSetExitStatus
eLaunchFlagDetachOnError
eLaunchFlagShellExpandArguments
eLaunchFlagCloseTTYOnExit
eOnlyThisThread
eAllThreads
eOnlyDuringStepping
eByteOrderInvalid
eByteOrderBig
eByteOrderPDP
eByteOrderLittle
eEncodingInvalid
eEncodingUint
eEncodingSint
eEncodingIEEE754
eEncodingVector
eFormatDefault
eFormatInvalid
eFormatBoolean
eFormatBinary
eFormatBytes
eFormatBytesWithASCII
eFormatChar
eFormatCharPrintable
eFormatComplex
eFormatComplexFloat
eFormatCString
eFormatDecimal
eFormatEnum
eFormatHex
eFormatHexUppercase
eFormatFloat
eFormatOctal
eFormatOSType
eFormatUnicode16
eFormatUnicode32
eFormatUnsigned
eFormatPointer
eFormatVectorOfChar
eFormatVectorOfSInt8
eFormatVectorOfUInt8
eFormatVectorOfSInt16
eFormatVectorOfUInt16
eFormatVectorOfSInt32
eFormatVectorOfUInt32
eFormatVectorOfSInt64
eFormatVectorOfUInt64
eFormatVectorOfFloat16
eFormatVectorOfFloat32
eFormatVectorOfFloat64
eFormatVectorOfUInt128
eFormatComplexInteger
eFormatCharArray
eFormatAddressInfo
eFormatHexFloat
eFormatInstruction
eFormatVoid
kNumFormats
eDescriptionLevelBrief
eDescriptionLevelFull
eDescriptionLevelVerbose
eDescriptionLevelInitial
kNumDescriptionLevels
eScriptLanguageNone
eScriptLanguagePython
eScriptLanguageDefault
eScriptLanguageUnknown
eRegisterKindEHFrame
eRegisterKindDWARF
eRegisterKindGeneric
eRegisterKindProcessPlugin
eRegisterKindLLDB
kNumRegisterKinds
eStopReasonInvalid
eStopReasonNone
eStopReasonTrace
eStopReasonBreakpoint
eStopReasonWatchpoint
eStopReasonSignal
eStopReasonException
eStopReasonExec
eStopReasonPlanComplete
eStopReasonThreadExiting
eStopReasonInstrumentation
eReturnStatusInvalid
eReturnStatusSuccessFinishNoResult
eReturnStatusSuccessFinishResult
eReturnStatusSuccessContinuingNoResult
eReturnStatusSuccessContinuingResult
eReturnStatusStarted
eReturnStatusFailed
eReturnStatusQuit
eExpressionCompleted
eExpressionSetupError
eExpressionParseError
eExpressionDiscarded
eExpressionInterrupted
eExpressionHitBreakpoint
eExpressionTimedOut
eExpressionResultUnavailable
eExpressionStoppedForDebug
eSearchDepthInvalid
eSearchDepthTarget
eSearchDepthModule
eSearchDepthCompUnit
eSearchDepthFunction
eSearchDepthBlock
eSearchDepthAddress
kLastSearchDepthKind
eConnectionStatusSuccess
eConnectionStatusEndOfFile
eConnectionStatusError
eConnectionStatusTimedOut
eConnectionStatusNoConnection
eConnectionStatusLostConnection
eConnectionStatusInterrupted
eErrorTypeInvalid
eErrorTypeGeneric
eErrorTypeMachKernel
eErrorTypePOSIX
eErrorTypeExpression
eErrorTypeWin32
eValueTypeInvalid
eValueTypeVariableGlobal
eValueTypeVariableStatic
eValueTypeVariableArgument
eValueTypeVariableLocal
eValueTypeRegister
eValueTypeRegisterSet
eValueTypeConstResult
eValueTypeVariableThreadLocal
eInputReaderGranularityInvalid
eInputReaderGranularityByte
eInputReaderGranularityWord
eInputReaderGranularityLine
eInputReaderGranularityAll
eSymbolContextTarget
eSymbolContextModule
eSymbolContextCompUnit
eSymbolContextFunction
eSymbolContextBlock
eSymbolContextLineEntry
eSymbolContextSymbol
eSymbolContextEverything
eSymbolContextVariable
ePermissionsWritable
ePermissionsReadable
ePermissionsExecutable
eInputReaderActivate
eInputReaderAsynchronousOutputWritten
eInputReaderReactivate
eInputReaderDeactivate
eInputReaderGotToken
eInputReaderInterrupt
eInputReaderEndOfFile
eInputReaderDone
eBreakpointEventTypeInvalidType
eBreakpointEventTypeAdded
eBreakpointEventTypeRemoved
eBreakpointEventTypeLocationsAdded
eBreakpointEventTypeLocationsRemoved
eBreakpointEventTypeLocationsResolved
eBreakpointEventTypeEnabled
eBreakpointEventTypeDisabled
eBreakpointEventTypeCommandChanged
eBreakpointEventTypeConditionChanged
eBreakpointEventTypeIgnoreChanged
eBreakpointEventTypeThreadChanged
eBreakpointEventTypeAutoContinueChanged
eWatchpointEventTypeInvalidType
eWatchpointEventTypeAdded
eWatchpointEventTypeRemoved
eWatchpointEventTypeEnabled
eWatchpointEventTypeDisabled
eWatchpointEventTypeCommandChanged
eWatchpointEventTypeConditionChanged
eWatchpointEventTypeIgnoreChanged
eWatchpointEventTypeThreadChanged
eWatchpointEventTypeTypeChanged
eLanguageTypeUnknown
eLanguageTypeC89
eLanguageTypeC
eLanguageTypeAda83
eLanguageTypeC_plus_plus
eLanguageTypeCobol74
eLanguageTypeCobol85
eLanguageTypeFortran77
eLanguageTypeFortran90
eLanguageTypePascal83
eLanguageTypeModula2
eLanguageTypeJava
eLanguageTypeC99
eLanguageTypeAda95
eLanguageTypeFortran95
eLanguageTypePLI
eLanguageTypeObjC
eLanguageTypeObjC_plus_plus
eLanguageTypeUPC
eLanguageTypeD
eLanguageTypePython
eLanguageTypeOpenCL
eLanguageTypeGo
eLanguageTypeModula3
eLanguageTypeHaskell
eLanguageTypeC_plus_plus_03
eLanguageTypeC_plus_plus_11
eLanguageTypeOCaml
eLanguageTypeRust
eLanguageTypeC11
eLanguageTypeSwift
eLanguageTypeJulia
eLanguageTypeDylan
eLanguageTypeC_plus_plus_14
eLanguageTypeFortran03
eLanguageTypeFortran08
eLanguageTypeMipsAssembler
eLanguageTypeExtRenderScript
eNumLanguageTypes
eInstrumentationRuntimeTypeAddressSanitizer
eInstrumentationRuntimeTypeThreadSanitizer
eInstrumentationRuntimeTypeUndefinedBehaviorSanitizer
eInstrumentationRuntimeTypeMainThreadChecker
eInstrumentationRuntimeTypeSwiftRuntimeReporting
eNumInstrumentationRuntimeTypes
eNoDynamicValues
eDynamicCanRunTarget
eDynamicDontRunTarget
eStopShowColumnAnsiOrCaret
eStopShowColumnAnsi
eStopShowColumnCaret
eStopShowColumnNone
eAccessNone
eAccessPublic
eAccessPrivate
eAccessProtected
eAccessPackage
eArgTypeAddress
eArgTypeAddressOrExpression
eArgTypeAliasName
eArgTypeAliasOptions
eArgTypeArchitecture
eArgTypeBoolean
eArgTypeBreakpointID
eArgTypeBreakpointIDRange
eArgTypeBreakpointName
eArgTypeByteSize
eArgTypeClassName
eArgTypeCommandName
eArgTypeCount
eArgTypeDescriptionVerbosity
eArgTypeDirectoryName
eArgTypeDisassemblyFlavor
eArgTypeEndAddress
eArgTypeExpression
eArgTypeExpressionPath
eArgTypeExprFormat
eArgTypeFilename
eArgTypeFormat
eArgTypeFrameIndex
eArgTypeFullName
eArgTypeFunctionName
eArgTypeFunctionOrSymbol
eArgTypeGDBFormat
eArgTypeHelpText
eArgTypeIndex
eArgTypeLanguage
eArgTypeLineNum
eArgTypeLogCategory
eArgTypeLogChannel
eArgTypeMethod
eArgTypeName
eArgTypeNewPathPrefix
eArgTypeNumLines
eArgTypeNumberPerLine
eArgTypeOffset
eArgTypeOldPathPrefix
eArgTypeOneLiner
eArgTypePath
eArgTypePermissionsNumber
eArgTypePermissionsString
eArgTypePid
eArgTypePlugin
eArgTypeProcessName
eArgTypePythonClass
eArgTypePythonFunction
eArgTypePythonScript
eArgTypeQueueName
eArgTypeRegisterName
eArgTypeRegularExpression
eArgTypeRunArgs
eArgTypeRunMode
eArgTypeScriptedCommandSynchronicity
eArgTypeScriptLang
eArgTypeSearchWord
eArgTypeSelector
eArgTypeSettingIndex
eArgTypeSettingKey
eArgTypeSettingPrefix
eArgTypeSettingVariableName
eArgTypeShlibName
eArgTypeSourceFile
eArgTypeSortOrder
eArgTypeStartAddress
eArgTypeSummaryString
eArgTypeSymbol
eArgTypeThreadID
eArgTypeThreadIndex
eArgTypeThreadName
eArgTypeTypeName
eArgTypeUnsignedInteger
eArgTypeUnixSignal
eArgTypeVarName
eArgTypeValue
eArgTypeWidth
eArgTypeNone
eArgTypePlatform
eArgTypeWatchpointID
eArgTypeWatchpointIDRange
eArgTypeWatchType
eArgRawInput
eArgTypeCommand
eArgTypeLastArg
eSymbolTypeAny
eSymbolTypeInvalid
eSymbolTypeAbsolute
eSymbolTypeCode
eSymbolTypeResolver
eSymbolTypeData
eSymbolTypeTrampoline
eSymbolTypeRuntime
eSymbolTypeException
eSymbolTypeSourceFile
eSymbolTypeHeaderFile
eSymbolTypeObjectFile
eSymbolTypeCommonBlock
eSymbolTypeBlock
eSymbolTypeLocal
eSymbolTypeParam
eSymbolTypeVariable
eSymbolTypeVariableType
eSymbolTypeLineEntry
eSymbolTypeLineHeader
eSymbolTypeScopeBegin
eSymbolTypeScopeEnd
eSymbolTypeAdditional
eSymbolTypeCompiler
eSymbolTypeInstrumentation
eSymbolTypeUndefined
eSymbolTypeObjCClass
eSymbolTypeObjCMetaClass
eSymbolTypeObjCIVar
eSymbolTypeIVarOffset
eSymbolTypeReExported
eSymbolTypeASTFile
eSectionTypeInvalid
eSectionTypeCode
eSectionTypeContainer
eSectionTypeData
eSectionTypeDataCString
eSectionTypeDataCStringPointers
eSectionTypeDataSymbolAddress
eSectionTypeData4
eSectionTypeData8
eSectionTypeData16
eSectionTypeDataPointers
eSectionTypeDebug
eSectionTypeZeroFill
eSectionTypeDataObjCMessageRefs
eSectionTypeDataObjCCFStrings
eSectionTypeDWARFDebugAbbrev
eSectionTypeDWARFDebugAddr
eSectionTypeDWARFDebugAranges
eSectionTypeDWARFDebugCuIndex
eSectionTypeDWARFDebugFrame
eSectionTypeDWARFDebugInfo
eSectionTypeDWARFDebugLine
eSectionTypeDWARFDebugLoc
eSectionTypeDWARFDebugMacInfo
eSectionTypeDWARFDebugMacro
eSectionTypeDWARFDebugPubNames
eSectionTypeDWARFDebugPubTypes
eSectionTypeDWARFDebugRanges
eSectionTypeDWARFDebugStr
eSectionTypeDWARFDebugStrOffsets
eSectionTypeDWARFAppleNames
eSectionTypeDWARFAppleTypes
eSectionTypeDWARFAppleExternalTypes
eSectionTypeDWARFAppleNamespaces
eSectionTypeDWARFAppleObjC
eSectionTypeELFSymbolTable
eSectionTypeELFDynamicSymbols
eSectionTypeELFRelocationEntries
eSectionTypeELFDynamicLinkInfo
eSectionTypeEHFrame
eSectionTypeSwiftModules
eSectionTypeARMexidx
eSectionTypeARMextab
eSectionTypeCompactUnwind
eSectionTypeGoSymtab
eSectionTypeAbsoluteAddress
eSectionTypeDWARFGNUDebugAltLink
eSectionTypeDWARFDebugTypes
eSectionTypeDWARFDebugNames
eSectionTypeOther
eSectionTypeDWARFDebugLineStr
eSectionTypeDWARFDebugRngLists
eSectionTypeDWARFDebugLocLists
eSectionTypeDWARFDebugAbbrevDwo
eSectionTypeDWARFDebugInfoDwo
eSectionTypeDWARFDebugStrDwo
eSectionTypeDWARFDebugStrOffsetsDwo
eEmulateInstructionOptionNone
eEmulateInstructionOptionAutoAdvancePC
eEmulateInstructionOptionIgnoreConditions
eFunctionNameTypeNone
eFunctionNameTypeAuto
eFunctionNameTypeFull
eFunctionNameTypeBase
eFunctionNameTypeMethod
eFunctionNameTypeSelector
eFunctionNameTypeAny
eBasicTypeInvalid
eBasicTypeVoid
eBasicTypeChar
eBasicTypeSignedChar
eBasicTypeUnsignedChar
eBasicTypeWChar
eBasicTypeSignedWChar
eBasicTypeUnsignedWChar
eBasicTypeChar16
eBasicTypeChar32
eBasicTypeShort
eBasicTypeUnsignedShort
eBasicTypeInt
eBasicTypeUnsignedInt
eBasicTypeLong
eBasicTypeUnsignedLong
eBasicTypeLongLong
eBasicTypeUnsignedLongLong
eBasicTypeInt128
eBasicTypeUnsignedInt128
eBasicTypeBool
eBasicTypeHalf
eBasicTypeFloat
eBasicTypeDouble
eBasicTypeLongDouble
eBasicTypeFloatComplex
eBasicTypeDoubleComplex
eBasicTypeLongDoubleComplex
eBasicTypeObjCID
eBasicTypeObjCClass
eBasicTypeObjCSel
eBasicTypeNullPtr
eBasicTypeOther
eTraceTypeNone
eTraceTypeProcessorTrace
eStructuredDataTypeInvalid
eStructuredDataTypeNull
eStructuredDataTypeGeneric
eStructuredDataTypeArray
eStructuredDataTypeInteger
eStructuredDataTypeFloat
eStructuredDataTypeBoolean
eStructuredDataTypeString
eStructuredDataTypeDictionary
eTypeClassInvalid
eTypeClassArray
eTypeClassBlockPointer
eTypeClassBuiltin
eTypeClassClass
eTypeClassComplexFloat
eTypeClassComplexInteger
eTypeClassEnumeration
eTypeClassFunction
eTypeClassMemberPointer
eTypeClassObjCObject
eTypeClassObjCInterface
eTypeClassObjCObjectPointer
eTypeClassPointer
eTypeClassReference
eTypeClassStruct
eTypeClassTypedef
eTypeClassUnion
eTypeClassVector
eTypeClassOther
eTypeClassAny
eTemplateArgumentKindNull
eTemplateArgumentKindType
eTemplateArgumentKindDeclaration
eTemplateArgumentKindIntegral
eTemplateArgumentKindTemplate
eTemplateArgumentKindTemplateExpansion
eTemplateArgumentKindExpression
eTemplateArgumentKindPack
eTemplateArgumentKindNullPtr
eNullGenericKindType
eBoundGenericKindType
eUnboundGenericKindType
eTypeOptionNone
eTypeOptionCascade
eTypeOptionSkipPointers
eTypeOptionSkipReferences
eTypeOptionHideChildren
eTypeOptionHideValue
eTypeOptionShowOneLiner
eTypeOptionHideNames
eTypeOptionNonCacheable
eTypeOptionHideEmptyAggregates
eTypeOptionFrontEndWantsDereference
eFrameCompareInvalid
eFrameCompareUnknown
eFrameCompareEqual
eFrameCompareSameParent
eFrameCompareYounger
eFrameCompareOlder
eFilePermissionsUserRead
eFilePermissionsUserWrite
eFilePermissionsUserExecute
eFilePermissionsGroupRead
eFilePermissionsGroupWrite
eFilePermissionsGroupExecute
eFilePermissionsWorldRead
eFilePermissionsWorldWrite
eFilePermissionsWorldExecute
eFilePermissionsUserRW
eFileFilePermissionsUserRX
eFilePermissionsUserRWX
eFilePermissionsGroupRW
eFilePermissionsGroupRX
eFilePermissionsGroupRWX
eFilePermissionsWorldRW
eFilePermissionsWorldRX
eFilePermissionsWorldRWX
eFilePermissionsEveryoneR
eFilePermissionsEveryoneW
eFilePermissionsEveryoneX
eFilePermissionsEveryoneRW
eFilePermissionsEveryoneRX
eFilePermissionsEveryoneRWX
eFilePermissionsFileDefault
eFilePermissionsDirectoryDefault
eQueueItemKindUnknown
eQueueItemKindFunction
eQueueItemKindBlock
eQueueKindUnknown
eQueueKindSerial
eQueueKindConcurrent
eExpressionEvaluationParse
eExpressionEvaluationIRGen
eExpressionEvaluationExecution
eExpressionEvaluationComplete
eWatchpointKindWrite
eWatchpointKindRead
eGdbSignalBadAccess
eGdbSignalBadInstruction
eGdbSignalArithmetic
eGdbSignalEmulation
eGdbSignalSoftware
eGdbSignalBreakpoint
ePathTypeLLDBShlibDir
ePathTypeSupportExecutableDir
ePathTypeSupportFileDir
ePathTypeHeaderDir
ePathTypePythonDir
ePathTypeLLDBSystemPlugins
ePathTypeLLDBUserPlugins
ePathTypeLLDBTempSystemDir
ePathTypeGlobalLLDBTempSystemDir
ePathTypeClangDir
ePathTypeSwiftDir
eMemberFunctionKindUnknown
eMemberFunctionKindConstructor
eMemberFunctionKindDestructor
eMemberFunctionKindInstanceMethod
eMemberFunctionKindStaticMethod
eMatchTypeNormal
eMatchTypeRegex
eMatchTypeStartsWith
eTypeHasChildren
eTypeHasValue
eTypeIsArray
eTypeIsBlock
eTypeIsBuiltIn
eTypeIsClass
eTypeIsCPlusPlus
eTypeIsEnumeration
eTypeIsFuncPrototype
eTypeIsMember
eTypeIsObjC
eTypeIsPointer
eTypeIsReference
eTypeIsStructUnion
eTypeIsTemplate
eTypeIsTypedef
eTypeIsVector
eTypeIsScalar
eTypeIsInteger
eTypeIsFloat
eTypeIsComplex
eTypeIsSigned
eTypeInstanceIsPointer
eTypeIsSwift
eTypeIsGenericTypeParam
eTypeIsProtocol
eTypeIsTuple
eTypeIsMetatype
eTypeIsGeneric
eTypeIsBound
eCommandRequiresTarget
eCommandRequiresProcess
eCommandRequiresThread
eCommandRequiresFrame
eCommandRequiresRegContext
eCommandTryTargetAPILock
eCommandProcessMustBeLaunched
eCommandProcessMustBePaused
eTypeSummaryCapped
eTypeSummaryUncapped
SBCommandInterpreter_eBroadcastBitThreadShouldExit
SBCommandInterpreter_eBroadcastBitResetPrompt
SBCommandInterpreter_eBroadcastBitQuitCommandReceived
SBCommandInterpreter_eBroadcastBitAsynchronousOutputData
SBCommandInterpreter_eBroadcastBitAsynchronousErrorData
SBCommunication_eBroadcastBitDisconnected
SBCommunication_eBroadcastBitReadThreadGotBytes
SBCommunication_eBroadcastBitReadThreadDidExit
SBCommunication_eBroadcastBitReadThreadShouldExit
SBCommunication_eBroadcastBitPacketAvailable
SBCommunication_eAllEventBits
SBProcess_eBroadcastBitStateChanged
SBProcess_eBroadcastBitInterrupt
SBProcess_eBroadcastBitSTDOUT
SBProcess_eBroadcastBitSTDERR
SBProcess_eBroadcastBitProfileData
SBProcess_eBroadcastBitStructuredData
SBTarget_eBroadcastBitBreakpointChanged
SBTarget_eBroadcastBitModulesLoaded
SBTarget_eBroadcastBitModulesUnloaded
SBTarget_eBroadcastBitWatchpointChanged
SBTarget_eBroadcastBitSymbolsLoaded
SBThread_eBroadcastBitStackChanged
SBThread_eBroadcastBitThreadSuspended
SBThread_eBroadcastBitThreadResumed
SBThread_eBroadcastBitSelectedFrameChanged
SBThread_eBroadcastBitThreadSelected
SwigPyObject
swig/python detected a memory leak of type '%s', no destructor found.
unknown
<Swig Object of type '%s' at %p>
disown
releases ownership of the pointer
acquire
acquires ownership of the pointer
returns/sets ownership of the pointer
append
appends another 'this' object
next
returns the next 'this' object
__repr__
returns object representation
Attempt to append a non SwigPyObject
this
swig_ptr: 
SWIG_PyInstanceMethod_New
new_SBAddress
SBAddress()
SBAddress(SBAddress rhs)
SBAddress(SBSection section, lldb::addr_t offset)
new_SBAddress(lldb::addr_t load_addr, SBTarget target) -> SBAddress
delete_SBAddress
delete_SBAddress(SBAddress self)
SBAddress_IsValid
SBAddress_IsValid(SBAddress self) -> bool
SBAddress___nonzero__
SBAddress___nonzero__(SBAddress self) -> bool
SBAddress_Clear
SBAddress_Clear(SBAddress self)
SBAddress_GetFileAddress
SBAddress_GetFileAddress(SBAddress self) -> lldb::addr_t
SBAddress_GetLoadAddress
SBAddress_GetLoadAddress(SBAddress self, SBTarget target) -> lldb::addr_t
SBAddress_SetLoadAddress
SBAddress_SetLoadAddress(SBAddress self, lldb::addr_t load_addr, SBTarget target)
SBAddress_OffsetAddress
SBAddress_OffsetAddress(SBAddress self, lldb::addr_t offset) -> bool
SBAddress_GetDescription
SBAddress_GetDescription(SBAddress self, SBStream description) -> bool
SBAddress_GetSection
SBAddress_GetSection(SBAddress self) -> SBSection
SBAddress_GetOffset
SBAddress_GetOffset(SBAddress self) -> lldb::addr_t
SBAddress_SetAddress
SBAddress_SetAddress(SBAddress self, SBSection section, lldb::addr_t offset)
SBAddress_GetSymbolContext
SBAddress_GetSymbolContext(SBAddress self, uint32_t resolve_scope) -> SBSymbolContext
//------------------------------------------------------------------
/// GetSymbolContext() and the following can lookup symbol information for a given address.
/// An address might refer to code or data from an existing module, or it
/// might refer to something on the stack or heap. The following functions
/// will only return valid values if the address has been resolved to a code
/// or data address using 'void SBAddress::SetLoadAddress(...)' or 
/// 'lldb::SBAddress SBTarget::ResolveLoadAddress (...)'. 
//------------------------------------------------------------------
SBAddress_GetModule
SBAddress_GetModule(SBAddress self) -> SBModule
//------------------------------------------------------------------
/// GetModule() and the following grab individual objects for a given address and
/// are less efficient if you want more than one symbol related objects. 
/// Use one of the following when you want multiple debug symbol related 
/// objects for an address:
///    lldb::SBSymbolContext SBAddress::GetSymbolContext (uint32_t resolve_scope);
///    lldb::SBSymbolContext SBTarget::ResolveSymbolContextForAddress (const SBAddress &addr, uint32_t resolve_scope);
/// One or more bits from the SymbolContextItem enumerations can be logically
/// OR'ed together to more efficiently retrieve multiple symbol objects.
//------------------------------------------------------------------
SBAddress_GetCompileUnit
SBAddress_GetCompileUnit(SBAddress self) -> SBCompileUnit
SBAddress_GetFunction
SBAddress_GetFunction(SBAddress self) -> SBFunction
SBAddress_GetBlock
SBAddress_GetBlock(SBAddress self) -> SBBlock
SBAddress_GetSymbol
SBAddress_GetSymbol(SBAddress self) -> SBSymbol
SBAddress_GetLineEntry
SBAddress_GetLineEntry(SBAddress self) -> SBLineEntry
SBAddress___str__
SBAddress___str__(SBAddress self) -> PyObject *
SBAddress_swigregister
new_SBAttachInfo
SBAttachInfo()
SBAttachInfo(lldb::pid_t pid)
SBAttachInfo(char const * path, bool wait_for)
SBAttachInfo(char const * path, bool wait_for, bool async)
new_SBAttachInfo(SBAttachInfo rhs) -> SBAttachInfo
SBAttachInfo_GetProcessID
SBAttachInfo_GetProcessID(SBAttachInfo self) -> lldb::pid_t
SBAttachInfo_SetProcessID
SBAttachInfo_SetProcessID(SBAttachInfo self, lldb::pid_t pid)
SBAttachInfo_SetExecutable
SetExecutable(char const * path)
SBAttachInfo_SetExecutable(SBAttachInfo self, SBFileSpec exe_file)
SBAttachInfo_GetWaitForLaunch
SBAttachInfo_GetWaitForLaunch(SBAttachInfo self) -> bool
SBAttachInfo_SetWaitForLaunch
SetWaitForLaunch(bool b)
SBAttachInfo_SetWaitForLaunch(SBAttachInfo self, bool b, bool async)
SBAttachInfo_GetIgnoreExisting
SBAttachInfo_GetIgnoreExisting(SBAttachInfo self) -> bool
SBAttachInfo_SetIgnoreExisting
SBAttachInfo_SetIgnoreExisting(SBAttachInfo self, bool b)
SBAttachInfo_GetResumeCount
SBAttachInfo_GetResumeCount(SBAttachInfo self) -> uint32_t
SBAttachInfo_SetResumeCount
SBAttachInfo_SetResumeCount(SBAttachInfo self, uint32_t c)
SBAttachInfo_GetProcessPluginName
SBAttachInfo_GetProcessPluginName(SBAttachInfo self) -> char const *
SBAttachInfo_SetProcessPluginName
SBAttachInfo_SetProcessPluginName(SBAttachInfo self, char const * plugin_name)
SBAttachInfo_GetUserID
SBAttachInfo_GetUserID(SBAttachInfo self) -> uint32_t
SBAttachInfo_GetGroupID
SBAttachInfo_GetGroupID(SBAttachInfo self) -> uint32_t
SBAttachInfo_UserIDIsValid
SBAttachInfo_UserIDIsValid(SBAttachInfo self) -> bool
SBAttachInfo_GroupIDIsValid
SBAttachInfo_GroupIDIsValid(SBAttachInfo self) -> bool
SBAttachInfo_SetUserID
SBAttachInfo_SetUserID(SBAttachInfo self, uint32_t uid)
SBAttachInfo_SetGroupID
SBAttachInfo_SetGroupID(SBAttachInfo self, uint32_t gid)
SBAttachInfo_GetEffectiveUserID
SBAttachInfo_GetEffectiveUserID(SBAttachInfo self) -> uint32_t
SBAttachInfo_GetEffectiveGroupID
SBAttachInfo_GetEffectiveGroupID(SBAttachInfo self) -> uint32_t
SBAttachInfo_EffectiveUserIDIsValid
SBAttachInfo_EffectiveUserIDIsValid(SBAttachInfo self) -> bool
SBAttachInfo_EffectiveGroupIDIsValid
SBAttachInfo_EffectiveGroupIDIsValid(SBAttachInfo self) -> bool
SBAttachInfo_SetEffectiveUserID
SBAttachInfo_SetEffectiveUserID(SBAttachInfo self, uint32_t uid)
SBAttachInfo_SetEffectiveGroupID
SBAttachInfo_SetEffectiveGroupID(SBAttachInfo self, uint32_t gid)
SBAttachInfo_GetParentProcessID
SBAttachInfo_GetParentProcessID(SBAttachInfo self) -> lldb::pid_t
SBAttachInfo_SetParentProcessID
SBAttachInfo_SetParentProcessID(SBAttachInfo self, lldb::pid_t pid)
SBAttachInfo_ParentProcessIDIsValid
SBAttachInfo_ParentProcessIDIsValid(SBAttachInfo self) -> bool
SBAttachInfo_GetListener
SBAttachInfo_GetListener(SBAttachInfo self) -> SBListener
SBAttachInfo_SetListener
SBAttachInfo_SetListener(SBAttachInfo self, SBListener listener)
delete_SBAttachInfo
delete_SBAttachInfo(SBAttachInfo self)
SBAttachInfo_swigregister
new_SBBlock
SBBlock()
new_SBBlock(SBBlock rhs) -> SBBlock
delete_SBBlock
delete_SBBlock(SBBlock self)
SBBlock_IsInlined
SBBlock_IsInlined(SBBlock self) -> bool
Does this block represent an inlined function?
SBBlock_IsValid
SBBlock_IsValid(SBBlock self) -> bool
SBBlock___nonzero__
SBBlock___nonzero__(SBBlock self) -> bool
SBBlock_GetInlinedName
SBBlock_GetInlinedName(SBBlock self) -> char const *
Get the function name if this block represents an inlined function;
otherwise, return None.
SBBlock_GetInlinedCallSiteFile
SBBlock_GetInlinedCallSiteFile(SBBlock self) -> SBFileSpec
Get the call site file if this block represents an inlined function;
otherwise, return an invalid file spec.
SBBlock_GetInlinedCallSiteLine
SBBlock_GetInlinedCallSiteLine(SBBlock self) -> uint32_t
Get the call site line if this block represents an inlined function;
otherwise, return 0.
SBBlock_GetInlinedCallSiteColumn
SBBlock_GetInlinedCallSiteColumn(SBBlock self) -> uint32_t
Get the call site column if this block represents an inlined function;
otherwise, return 0.
SBBlock_GetParent
SBBlock_GetParent(SBBlock self) -> SBBlock
Get the parent block.
SBBlock_GetContainingInlinedBlock
SBBlock_GetContainingInlinedBlock(SBBlock self) -> SBBlock
Get the inlined block that is or contains this block.
SBBlock_GetSibling
SBBlock_GetSibling(SBBlock self) -> SBBlock
Get the sibling block for this block.
SBBlock_GetFirstChild
SBBlock_GetFirstChild(SBBlock self) -> SBBlock
Get the first child block.
SBBlock_GetNumRanges
SBBlock_GetNumRanges(SBBlock self) -> uint32_t
SBBlock_GetRangeStartAddress
SBBlock_GetRangeStartAddress(SBBlock self, uint32_t idx) -> SBAddress
SBBlock_GetRangeEndAddress
SBBlock_GetRangeEndAddress(SBBlock self, uint32_t idx) -> SBAddress
SBBlock_GetRangeIndexForBlockAddress
SBBlock_GetRangeIndexForBlockAddress(SBBlock self, SBAddress block_addr) -> uint32_t
SBBlock_GetDescription
SBBlock_GetDescription(SBBlock self, SBStream description) -> bool
SBBlock_GetVariables
GetVariables(SBFrame frame, bool arguments, bool locals, bool statics, lldb::DynamicValueType use_dynamic) -> SBValueList
SBBlock_GetVariables(SBBlock self, SBTarget target, bool arguments, bool locals, bool statics) -> SBValueList
SBBlock___str__
SBBlock___str__(SBBlock self) -> PyObject *
SBBlock_swigregister
new_SBBreakpoint
SBBreakpoint()
new_SBBreakpoint(SBBreakpoint rhs) -> SBBreakpoint
delete_SBBreakpoint
delete_SBBreakpoint(SBBreakpoint self)
SBBreakpoint_GetID
SBBreakpoint_GetID(SBBreakpoint self) -> lldb::break_id_t
SBBreakpoint_IsValid
SBBreakpoint_IsValid(SBBreakpoint self) -> bool
SBBreakpoint___nonzero__
SBBreakpoint___nonzero__(SBBreakpoint self) -> bool
SBBreakpoint_ClearAllBreakpointSites
SBBreakpoint_ClearAllBreakpointSites(SBBreakpoint self)
SBBreakpoint_FindLocationByAddress
SBBreakpoint_FindLocationByAddress(SBBreakpoint self, lldb::addr_t vm_addr) -> SBBreakpointLocation
SBBreakpoint_FindLocationIDByAddress
SBBreakpoint_FindLocationIDByAddress(SBBreakpoint self, lldb::addr_t vm_addr) -> lldb::break_id_t
SBBreakpoint_FindLocationByID
SBBreakpoint_FindLocationByID(SBBreakpoint self, lldb::break_id_t bp_loc_id) -> SBBreakpointLocation
SBBreakpoint_GetLocationAtIndex
SBBreakpoint_GetLocationAtIndex(SBBreakpoint self, uint32_t index) -> SBBreakpointLocation
SBBreakpoint_SetEnabled
SBBreakpoint_SetEnabled(SBBreakpoint self, bool enable)
SBBreakpoint_IsEnabled
SBBreakpoint_IsEnabled(SBBreakpoint self) -> bool
SBBreakpoint_SetOneShot
SBBreakpoint_SetOneShot(SBBreakpoint self, bool one_shot)
SBBreakpoint_IsOneShot
SBBreakpoint_IsOneShot(SBBreakpoint self) -> bool
SBBreakpoint_IsInternal
SBBreakpoint_IsInternal(SBBreakpoint self) -> bool
SBBreakpoint_GetHitCount
SBBreakpoint_GetHitCount(SBBreakpoint self) -> uint32_t
SBBreakpoint_SetIgnoreCount
SBBreakpoint_SetIgnoreCount(SBBreakpoint self, uint32_t count)
SBBreakpoint_GetIgnoreCount
SBBreakpoint_GetIgnoreCount(SBBreakpoint self) -> uint32_t
SBBreakpoint_SetCondition
SBBreakpoint_SetCondition(SBBreakpoint self, char const * condition)
//--------------------------------------------------------------------------
/// The breakpoint stops only if the condition expression evaluates to true.
//--------------------------------------------------------------------------
SBBreakpoint_GetCondition
SBBreakpoint_GetCondition(SBBreakpoint self) -> char const *
//------------------------------------------------------------------
/// Get the condition expression for the breakpoint.
//------------------------------------------------------------------
SBBreakpoint_SetAutoContinue
SBBreakpoint_SetAutoContinue(SBBreakpoint self, bool auto_continue)
SBBreakpoint_GetAutoContinue
SBBreakpoint_GetAutoContinue(SBBreakpoint self) -> bool
SBBreakpoint_SetThreadID
SBBreakpoint_SetThreadID(SBBreakpoint self, lldb::tid_t sb_thread_id)
SBBreakpoint_GetThreadID
SBBreakpoint_GetThreadID(SBBreakpoint self) -> lldb::tid_t
SBBreakpoint_SetThreadIndex
SBBreakpoint_SetThreadIndex(SBBreakpoint self, uint32_t index)
SBBreakpoint_GetThreadIndex
SBBreakpoint_GetThreadIndex(SBBreakpoint self) -> uint32_t
SBBreakpoint_SetThreadName
SBBreakpoint_SetThreadName(SBBreakpoint self, char const * thread_name)
SBBreakpoint_GetThreadName
SBBreakpoint_GetThreadName(SBBreakpoint self) -> char const *
SBBreakpoint_SetQueueName
SBBreakpoint_SetQueueName(SBBreakpoint self, char const * queue_name)
SBBreakpoint_GetQueueName
SBBreakpoint_GetQueueName(SBBreakpoint self) -> char const *
SBBreakpoint_SetScriptCallbackFunction
SBBreakpoint_SetScriptCallbackFunction(SBBreakpoint self, char const * callback_function_name)
//------------------------------------------------------------------
/// Set the name of the script function to be called when the breakpoint is hit.
//------------------------------------------------------------------
SBBreakpoint_SetScriptCallbackBody
SBBreakpoint_SetScriptCallbackBody(SBBreakpoint self, char const * script_body_text) -> SBError
//------------------------------------------------------------------
/// Provide the body for the script function to be called when the breakpoint is hit.
/// The body will be wrapped in a function, which be passed two arguments:
/// 'frame' - which holds the bottom-most SBFrame of the thread that hit the breakpoint
/// 'bpno'  - which is the SBBreakpointLocation to which the callback was attached.
/// The error parameter is currently ignored, but will at some point hold the Python
/// compilation diagnostics.
/// Returns true if the body compiles successfully, false if not.
//------------------------------------------------------------------
SBBreakpoint_SetCommandLineCommands
SBBreakpoint_SetCommandLineCommands(SBBreakpoint self, SBStringList commands)
SBBreakpoint_GetCommandLineCommands
SBBreakpoint_GetCommandLineCommands(SBBreakpoint self, SBStringList commands) -> bool
SBBreakpoint_AddName
SBBreakpoint_AddName(SBBreakpoint self, char const * new_name) -> bool
SBBreakpoint_RemoveName
SBBreakpoint_RemoveName(SBBreakpoint self, char const * name_to_remove)
SBBreakpoint_MatchesName
SBBreakpoint_MatchesName(SBBreakpoint self, char const * name) -> bool
SBBreakpoint_GetNames
SBBreakpoint_GetNames(SBBreakpoint self, SBStringList names)
SBBreakpoint_GetNumResolvedLocations
SBBreakpoint_GetNumResolvedLocations(SBBreakpoint self) -> size_t
SBBreakpoint_GetNumLocations
SBBreakpoint_GetNumLocations(SBBreakpoint self) -> size_t
SBBreakpoint_GetDescription
GetDescription(SBStream description) -> bool
SBBreakpoint_GetDescription(SBBreakpoint self, SBStream description, bool include_locations) -> bool
SBBreakpoint_AddLocation
SBBreakpoint_AddLocation(SBBreakpoint self, SBAddress address) -> SBError
SBBreakpoint___eq__
SBBreakpoint___eq__(SBBreakpoint self, SBBreakpoint rhs) -> bool
SBBreakpoint___ne__
SBBreakpoint___ne__(SBBreakpoint self, SBBreakpoint rhs) -> bool
SBBreakpoint_EventIsBreakpointEvent
SBBreakpoint_EventIsBreakpointEvent(SBEvent event) -> bool
SBBreakpoint_GetBreakpointEventTypeFromEvent
SBBreakpoint_GetBreakpointEventTypeFromEvent(SBEvent event) -> lldb::BreakpointEventType
SBBreakpoint_GetBreakpointFromEvent
SBBreakpoint_GetBreakpointFromEvent(SBEvent event) -> SBBreakpoint
SBBreakpoint_GetBreakpointLocationAtIndexFromEvent
SBBreakpoint_GetBreakpointLocationAtIndexFromEvent(SBEvent event, uint32_t loc_idx) -> SBBreakpointLocation
SBBreakpoint_GetNumBreakpointLocationsFromEvent
SBBreakpoint_GetNumBreakpointLocationsFromEvent(SBEvent event_sp) -> uint32_t
SBBreakpoint_IsHardware
SBBreakpoint_IsHardware(SBBreakpoint self) -> bool
SBBreakpoint___str__
SBBreakpoint___str__(SBBreakpoint self) -> PyObject *
SBBreakpoint_swigregister
new_SBBreakpointList
new_SBBreakpointList(SBTarget target) -> SBBreakpointList
delete_SBBreakpointList
delete_SBBreakpointList(SBBreakpointList self)
SBBreakpointList_GetSize
SBBreakpointList_GetSize(SBBreakpointList self) -> size_t
SBBreakpointList_GetBreakpointAtIndex
SBBreakpointList_GetBreakpointAtIndex(SBBreakpointList self, size_t idx) -> SBBreakpoint
SBBreakpointList_FindBreakpointByID
SBBreakpointList_FindBreakpointByID(SBBreakpointList self, lldb::break_id_t arg3) -> SBBreakpoint
SBBreakpointList_Append
SBBreakpointList_Append(SBBreakpointList self, SBBreakpoint sb_bkpt)
SBBreakpointList_AppendIfUnique
SBBreakpointList_AppendIfUnique(SBBreakpointList self, SBBreakpoint sb_bkpt) -> bool
SBBreakpointList_AppendByID
SBBreakpointList_AppendByID(SBBreakpointList self, lldb::break_id_t id)
SBBreakpointList_Clear
SBBreakpointList_Clear(SBBreakpointList self)
SBBreakpointList_swigregister
new_SBBreakpointLocation
SBBreakpointLocation()
new_SBBreakpointLocation(SBBreakpointLocation rhs) -> SBBreakpointLocation
delete_SBBreakpointLocation
delete_SBBreakpointLocation(SBBreakpointLocation self)
SBBreakpointLocation_GetID
SBBreakpointLocation_GetID(SBBreakpointLocation self) -> lldb::break_id_t
SBBreakpointLocation_IsValid
SBBreakpointLocation_IsValid(SBBreakpointLocation self) -> bool
SBBreakpointLocation___nonzero__
SBBreakpointLocation___nonzero__(SBBreakpointLocation self) -> bool
SBBreakpointLocation_GetAddress
SBBreakpointLocation_GetAddress(SBBreakpointLocation self) -> SBAddress
SBBreakpointLocation_GetLoadAddress
SBBreakpointLocation_GetLoadAddress(SBBreakpointLocation self) -> lldb::addr_t
SBBreakpointLocation_SetEnabled
SBBreakpointLocation_SetEnabled(SBBreakpointLocation self, bool enabled)
SBBreakpointLocation_IsEnabled
SBBreakpointLocation_IsEnabled(SBBreakpointLocation self) -> bool
SBBreakpointLocation_GetHitCount
SBBreakpointLocation_GetHitCount(SBBreakpointLocation self) -> uint32_t
SBBreakpointLocation_GetIgnoreCount
SBBreakpointLocation_GetIgnoreCount(SBBreakpointLocation self) -> uint32_t
SBBreakpointLocation_SetIgnoreCount
SBBreakpointLocation_SetIgnoreCount(SBBreakpointLocation self, uint32_t n)
SBBreakpointLocation_SetCondition
SBBreakpointLocation_SetCondition(SBBreakpointLocation self, char const * condition)
//--------------------------------------------------------------------------
/// The breakpoint location stops only if the condition expression evaluates
/// to true.
//--------------------------------------------------------------------------
SBBreakpointLocation_GetCondition
SBBreakpointLocation_GetCondition(SBBreakpointLocation self) -> char const *
//------------------------------------------------------------------
/// Get the condition expression for the breakpoint location.
//------------------------------------------------------------------
SBBreakpointLocation_GetAutoContinue
SBBreakpointLocation_GetAutoContinue(SBBreakpointLocation self) -> bool
SBBreakpointLocation_SetAutoContinue
SBBreakpointLocation_SetAutoContinue(SBBreakpointLocation self, bool auto_continue)
SBBreakpointLocation_SetScriptCallbackFunction
SBBreakpointLocation_SetScriptCallbackFunction(SBBreakpointLocation self, char const * callback_function_name)
//------------------------------------------------------------------
/// Set the callback to the given Python function name.
//------------------------------------------------------------------
SBBreakpointLocation_SetScriptCallbackBody
SBBreakpointLocation_SetScriptCallbackBody(SBBreakpointLocation self, char const * script_body_text) -> SBError
//------------------------------------------------------------------
/// Provide the body for the script function to be called when the breakpoint location is hit.
/// The body will be wrapped in a function, which be passed two arguments:
/// 'frame' - which holds the bottom-most SBFrame of the thread that hit the breakpoint
/// 'bpno'  - which is the SBBreakpointLocation to which the callback was attached.
/// The error parameter is currently ignored, but will at some point hold the Python
/// compilation diagnostics.
/// Returns true if the body compiles successfully, false if not.
//------------------------------------------------------------------
SBBreakpointLocation_SetCommandLineCommands
SBBreakpointLocation_SetCommandLineCommands(SBBreakpointLocation self, SBStringList commands)
SBBreakpointLocation_GetCommandLineCommands
SBBreakpointLocation_GetCommandLineCommands(SBBreakpointLocation self, SBStringList commands) -> bool
SBBreakpointLocation_SetThreadID
SBBreakpointLocation_SetThreadID(SBBreakpointLocation self, lldb::tid_t sb_thread_id)
SBBreakpointLocation_GetThreadID
SBBreakpointLocation_GetThreadID(SBBreakpointLocation self) -> lldb::tid_t
SBBreakpointLocation_SetThreadIndex
SBBreakpointLocation_SetThreadIndex(SBBreakpointLocation self, uint32_t index)
SBBreakpointLocation_GetThreadIndex
SBBreakpointLocation_GetThreadIndex(SBBreakpointLocation self) -> uint32_t
SBBreakpointLocation_SetThreadName
SBBreakpointLocation_SetThreadName(SBBreakpointLocation self, char const * thread_name)
SBBreakpointLocation_GetThreadName
SBBreakpointLocation_GetThreadName(SBBreakpointLocation self) -> char const *
SBBreakpointLocation_SetQueueName
SBBreakpointLocation_SetQueueName(SBBreakpointLocation self, char const * queue_name)
SBBreakpointLocation_GetQueueName
SBBreakpointLocation_GetQueueName(SBBreakpointLocation self) -> char const *
SBBreakpointLocation_IsResolved
SBBreakpointLocation_IsResolved(SBBreakpointLocation self) -> bool
SBBreakpointLocation_GetDescription
SBBreakpointLocation_GetDescription(SBBreakpointLocation self, SBStream description, lldb::DescriptionLevel level) -> bool
SBBreakpointLocation_GetBreakpoint
SBBreakpointLocation_GetBreakpoint(SBBreakpointLocation self) -> SBBreakpoint
SBBreakpointLocation___str__
SBBreakpointLocation___str__(SBBreakpointLocation self) -> PyObject *
SBBreakpointLocation_swigregister
new_SBBreakpointName
SBBreakpointName()
SBBreakpointName(SBTarget target, char const * name)
SBBreakpointName(SBBreakpoint bkpt, char const * name)
new_SBBreakpointName(SBBreakpointName rhs) -> SBBreakpointName
delete_SBBreakpointName
delete_SBBreakpointName(SBBreakpointName self)
SBBreakpointName___eq__
SBBreakpointName___eq__(SBBreakpointName self, SBBreakpointName rhs) -> bool
SBBreakpointName___ne__
SBBreakpointName___ne__(SBBreakpointName self, SBBreakpointName rhs) -> bool
SBBreakpointName___nonzero__
SBBreakpointName___nonzero__(SBBreakpointName self) -> bool
SBBreakpointName_IsValid
SBBreakpointName_IsValid(SBBreakpointName self) -> bool
SBBreakpointName_GetName
SBBreakpointName_GetName(SBBreakpointName self) -> char const *
SBBreakpointName_SetEnabled
SBBreakpointName_SetEnabled(SBBreakpointName self, bool enable)
SBBreakpointName_IsEnabled
SBBreakpointName_IsEnabled(SBBreakpointName self) -> bool
SBBreakpointName_SetOneShot
SBBreakpointName_SetOneShot(SBBreakpointName self, bool one_shot)
SBBreakpointName_IsOneShot
SBBreakpointName_IsOneShot(SBBreakpointName self) -> bool
SBBreakpointName_SetIgnoreCount
SBBreakpointName_SetIgnoreCount(SBBreakpointName self, uint32_t count)
SBBreakpointName_GetIgnoreCount
SBBreakpointName_GetIgnoreCount(SBBreakpointName self) -> uint32_t
SBBreakpointName_SetCondition
SBBreakpointName_SetCondition(SBBreakpointName self, char const * condition)
SBBreakpointName_GetCondition
SBBreakpointName_GetCondition(SBBreakpointName self) -> char const *
SBBreakpointName_SetAutoContinue
SBBreakpointName_SetAutoContinue(SBBreakpointName self, bool auto_continue)
SBBreakpointName_GetAutoContinue
SBBreakpointName_GetAutoContinue(SBBreakpointName self) -> bool
SBBreakpointName_SetThreadID
SBBreakpointName_SetThreadID(SBBreakpointName self, lldb::tid_t sb_thread_id)
SBBreakpointName_GetThreadID
SBBreakpointName_GetThreadID(SBBreakpointName self) -> lldb::tid_t
SBBreakpointName_SetThreadIndex
SBBreakpointName_SetThreadIndex(SBBreakpointName self, uint32_t index)
SBBreakpointName_GetThreadIndex
SBBreakpointName_GetThreadIndex(SBBreakpointName self) -> uint32_t
SBBreakpointName_SetThreadName
SBBreakpointName_SetThreadName(SBBreakpointName self, char const * thread_name)
SBBreakpointName_GetThreadName
SBBreakpointName_GetThreadName(SBBreakpointName self) -> char const *
SBBreakpointName_SetQueueName
SBBreakpointName_SetQueueName(SBBreakpointName self, char const * queue_name)
SBBreakpointName_GetQueueName
SBBreakpointName_GetQueueName(SBBreakpointName self) -> char const *
SBBreakpointName_SetScriptCallbackFunction
SBBreakpointName_SetScriptCallbackFunction(SBBreakpointName self, char const * callback_function_name)
SBBreakpointName_SetCommandLineCommands
SBBreakpointName_SetCommandLineCommands(SBBreakpointName self, SBStringList commands)
SBBreakpointName_GetCommandLineCommands
SBBreakpointName_GetCommandLineCommands(SBBreakpointName self, SBStringList commands) -> bool
SBBreakpointName_SetScriptCallbackBody
SBBreakpointName_SetScriptCallbackBody(SBBreakpointName self, char const * script_body_text) -> SBError
SBBreakpointName_GetHelpString
SBBreakpointName_GetHelpString(SBBreakpointName self) -> char const *
SBBreakpointName_SetHelpString
SBBreakpointName_SetHelpString(SBBreakpointName self, char const * help_string)
SBBreakpointName_GetAllowList
SBBreakpointName_GetAllowList(SBBreakpointName self) -> bool
SBBreakpointName_SetAllowList
SBBreakpointName_SetAllowList(SBBreakpointName self, bool value)
SBBreakpointName_GetAllowDelete
SBBreakpointName_GetAllowDelete(SBBreakpointName self) -> bool
SBBreakpointName_SetAllowDelete
SBBreakpointName_SetAllowDelete(SBBreakpointName self, bool value)
SBBreakpointName_GetAllowDisable
SBBreakpointName_GetAllowDisable(SBBreakpointName self) -> bool
SBBreakpointName_SetAllowDisable
SBBreakpointName_SetAllowDisable(SBBreakpointName self, bool value)
SBBreakpointName_GetDescription
SBBreakpointName_GetDescription(SBBreakpointName self, SBStream description) -> bool
SBBreakpointName___str__
SBBreakpointName___str__(SBBreakpointName self) -> PyObject *
SBBreakpointName_swigregister
new_SBBroadcaster
SBBroadcaster()
SBBroadcaster(char const * name)
new_SBBroadcaster(SBBroadcaster rhs) -> SBBroadcaster
delete_SBBroadcaster
delete_SBBroadcaster(SBBroadcaster self)
SBBroadcaster_IsValid
SBBroadcaster_IsValid(SBBroadcaster self) -> bool
SBBroadcaster___nonzero__
SBBroadcaster___nonzero__(SBBroadcaster self) -> bool
SBBroadcaster_Clear
SBBroadcaster_Clear(SBBroadcaster self)
SBBroadcaster_BroadcastEventByType
BroadcastEventByType(uint32_t event_type, bool unique=False)
SBBroadcaster_BroadcastEventByType(SBBroadcaster self, uint32_t event_type)
SBBroadcaster_BroadcastEvent
BroadcastEvent(SBEvent event, bool unique=False)
SBBroadcaster_BroadcastEvent(SBBroadcaster self, SBEvent event)
SBBroadcaster_AddInitialEventsToListener
SBBroadcaster_AddInitialEventsToListener(SBBroadcaster self, SBListener listener, uint32_t requested_events)
SBBroadcaster_AddListener
SBBroadcaster_AddListener(SBBroadcaster self, SBListener listener, uint32_t event_mask) -> uint32_t
SBBroadcaster_GetName
SBBroadcaster_GetName(SBBroadcaster self) -> char const *
SBBroadcaster_EventTypeHasListeners
SBBroadcaster_EventTypeHasListeners(SBBroadcaster self, uint32_t event_type) -> bool
SBBroadcaster_RemoveListener
RemoveListener(SBListener listener, uint32_t event_mask=4294967295) -> bool
SBBroadcaster_RemoveListener(SBBroadcaster self, SBListener listener) -> bool
SBBroadcaster___eq__
SBBroadcaster___eq__(SBBroadcaster self, SBBroadcaster rhs) -> bool
SBBroadcaster___ne__
SBBroadcaster___ne__(SBBroadcaster self, SBBroadcaster rhs) -> bool
SBBroadcaster_swigregister
new_SBCommandInterpreterRunOptions
new_SBCommandInterpreterRunOptions() -> SBCommandInterpreterRunOptions
delete_SBCommandInterpreterRunOptions
delete_SBCommandInterpreterRunOptions(SBCommandInterpreterRunOptions self)
SBCommandInterpreterRunOptions_GetStopOnContinue
SBCommandInterpreterRunOptions_GetStopOnContinue(SBCommandInterpreterRunOptions self) -> bool
SBCommandInterpreterRunOptions_SetStopOnContinue
SBCommandInterpreterRunOptions_SetStopOnContinue(SBCommandInterpreterRunOptions self, bool arg3)
SBCommandInterpreterRunOptions_GetStopOnError
SBCommandInterpreterRunOptions_GetStopOnError(SBCommandInterpreterRunOptions self) -> bool
SBCommandInterpreterRunOptions_SetStopOnError
SBCommandInterpreterRunOptions_SetStopOnError(SBCommandInterpreterRunOptions self, bool arg3)
SBCommandInterpreterRunOptions_GetStopOnCrash
SBCommandInterpreterRunOptions_GetStopOnCrash(SBCommandInterpreterRunOptions self) -> bool
SBCommandInterpreterRunOptions_SetStopOnCrash
SBCommandInterpreterRunOptions_SetStopOnCrash(SBCommandInterpreterRunOptions self, bool arg3)
SBCommandInterpreterRunOptions_GetEchoCommands
SBCommandInterpreterRunOptions_GetEchoCommands(SBCommandInterpreterRunOptions self) -> bool
SBCommandInterpreterRunOptions_SetEchoCommands
SBCommandInterpreterRunOptions_SetEchoCommands(SBCommandInterpreterRunOptions self, bool arg3)
SBCommandInterpreterRunOptions_GetPrintResults
SBCommandInterpreterRunOptions_GetPrintResults(SBCommandInterpreterRunOptions self) -> bool
SBCommandInterpreterRunOptions_SetPrintResults
SBCommandInterpreterRunOptions_SetPrintResults(SBCommandInterpreterRunOptions self, bool arg3)
SBCommandInterpreterRunOptions_GetAddToHistory
SBCommandInterpreterRunOptions_GetAddToHistory(SBCommandInterpreterRunOptions self) -> bool
SBCommandInterpreterRunOptions_SetAddToHistory
SBCommandInterpreterRunOptions_SetAddToHistory(SBCommandInterpreterRunOptions self, bool arg3)
SBCommandInterpreterRunOptions_swigregister
new_SBCommandInterpreter
new_SBCommandInterpreter(SBCommandInterpreter rhs) -> SBCommandInterpreter
delete_SBCommandInterpreter
delete_SBCommandInterpreter(SBCommandInterpreter self)
SBCommandInterpreter_GetArgumentTypeAsCString
SBCommandInterpreter_GetArgumentTypeAsCString(lldb::CommandArgumentType const arg_type) -> char const *
SBCommandInterpreter_GetArgumentDescriptionAsCString
SBCommandInterpreter_GetArgumentDescriptionAsCString(lldb::CommandArgumentType const arg_type) -> char const *
SBCommandInterpreter_EventIsCommandInterpreterEvent
SBCommandInterpreter_EventIsCommandInterpreterEvent(SBEvent event) -> bool
SBCommandInterpreter_IsValid
SBCommandInterpreter_IsValid(SBCommandInterpreter self) -> bool
SBCommandInterpreter___nonzero__
SBCommandInterpreter___nonzero__(SBCommandInterpreter self) -> bool
SBCommandInterpreter_GetIOHandlerControlSequence
SBCommandInterpreter_GetIOHandlerControlSequence(SBCommandInterpreter self, char ch) -> char const *
SBCommandInterpreter_GetPromptOnQuit
SBCommandInterpreter_GetPromptOnQuit(SBCommandInterpreter self) -> bool
SBCommandInterpreter_SetPromptOnQuit
SBCommandInterpreter_SetPromptOnQuit(SBCommandInterpreter self, bool b)
SBCommandInterpreter_AllowExitCodeOnQuit
SBCommandInterpreter_AllowExitCodeOnQuit(SBCommandInterpreter self, bool b)
SBCommandInterpreter_HasCustomQuitExitCode
SBCommandInterpreter_HasCustomQuitExitCode(SBCommandInterpreter self) -> bool
SBCommandInterpreter_GetQuitStatus
SBCommandInterpreter_GetQuitStatus(SBCommandInterpreter self) -> int
SBCommandInterpreter_ResolveCommand
SBCommandInterpreter_ResolveCommand(SBCommandInterpreter self, char const * command_line, SBCommandReturnObject result)
SBCommandInterpreter_CommandExists
SBCommandInterpreter_CommandExists(SBCommandInterpreter self, char const * cmd) -> bool
SBCommandInterpreter_AliasExists
SBCommandInterpreter_AliasExists(SBCommandInterpreter self, char const * cmd) -> bool
SBCommandInterpreter_GetBroadcaster
SBCommandInterpreter_GetBroadcaster(SBCommandInterpreter self) -> SBBroadcaster
SBCommandInterpreter_GetBroadcasterClass
SBCommandInterpreter_GetBroadcasterClass() -> char const *
SBCommandInterpreter_HasCommands
SBCommandInterpreter_HasCommands(SBCommandInterpreter self) -> bool
SBCommandInterpreter_HasAliases
SBCommandInterpreter_HasAliases(SBCommandInterpreter self) -> bool
SBCommandInterpreter_HasAliasOptions
SBCommandInterpreter_HasAliasOptions(SBCommandInterpreter self) -> bool
SBCommandInterpreter_GetProcess
SBCommandInterpreter_GetProcess(SBCommandInterpreter self) -> SBProcess
SBCommandInterpreter_GetDebugger
SBCommandInterpreter_GetDebugger(SBCommandInterpreter self) -> SBDebugger
SBCommandInterpreter_SourceInitFileInHomeDirectory
SBCommandInterpreter_SourceInitFileInHomeDirectory(SBCommandInterpreter self, SBCommandReturnObject result)
SBCommandInterpreter_SourceInitFileInCurrentWorkingDirectory
SBCommandInterpreter_SourceInitFileInCurrentWorkingDirectory(SBCommandInterpreter self, SBCommandReturnObject result)
SBCommandInterpreter_HandleCommand
HandleCommand(char const * command_line, SBCommandReturnObject result, bool add_to_history=False) -> lldb::ReturnStatus
HandleCommand(char const * command_line, SBCommandReturnObject result) -> lldb::ReturnStatus
HandleCommand(char const * command_line, SBExecutionContext exe_ctx, SBCommandReturnObject result, bool add_to_history=False) -> lldb::ReturnStatus
SBCommandInterpreter_HandleCommand(SBCommandInterpreter self, char const * command_line, SBExecutionContext exe_ctx, SBCommandReturnObject result) -> lldb::ReturnStatus
SBCommandInterpreter_HandleCommandsFromFile
SBCommandInterpreter_HandleCommandsFromFile(SBCommandInterpreter self, SBFileSpec file, SBExecutionContext override_context, SBCommandInterpreterRunOptions options, SBCommandReturnObject result)
SBCommandInterpreter_HandleCompletion
SBCommandInterpreter_HandleCompletion(SBCommandInterpreter self, char const * current_line, uint32_t cursor_pos, int match_start_point, int max_return_elements, SBStringList matches) -> int
SBCommandInterpreter_HandleCompletionWithDescriptions
SBCommandInterpreter_HandleCompletionWithDescriptions(SBCommandInterpreter self, char const * current_line, uint32_t cursor_pos, int match_start_point, int max_return_elements, SBStringList matches, SBStringList descriptions) -> int
SBCommandInterpreter_IsActive
SBCommandInterpreter_IsActive(SBCommandInterpreter self) -> bool
SBCommandInterpreter_WasInterrupted
SBCommandInterpreter_WasInterrupted(SBCommandInterpreter self) -> bool
SBCommandInterpreter_swigregister
new_SBCommandReturnObject
SBCommandReturnObject()
new_SBCommandReturnObject(SBCommandReturnObject rhs) -> SBCommandReturnObject
delete_SBCommandReturnObject
delete_SBCommandReturnObject(SBCommandReturnObject self)
SBCommandReturnObject_IsValid
SBCommandReturnObject_IsValid(SBCommandReturnObject self) -> bool
SBCommandReturnObject___nonzero__
SBCommandReturnObject___nonzero__(SBCommandReturnObject self) -> bool
SBCommandReturnObject_GetOutputSize
SBCommandReturnObject_GetOutputSize(SBCommandReturnObject self) -> size_t
SBCommandReturnObject_GetErrorSize
SBCommandReturnObject_GetErrorSize(SBCommandReturnObject self) -> size_t
SBCommandReturnObject_GetOutput
GetOutput() -> char const
SBCommandReturnObject_GetOutput(SBCommandReturnObject self, bool only_if_no_immediate) -> char const *
SBCommandReturnObject_GetError
GetError() -> char const
SBCommandReturnObject_GetError(SBCommandReturnObject self, bool if_no_immediate) -> char const *
SBCommandReturnObject_PutOutput
SBCommandReturnObject_PutOutput(SBCommandReturnObject self, FILE * fh) -> size_t
SBCommandReturnObject_PutError
SBCommandReturnObject_PutError(SBCommandReturnObject self, FILE * fh) -> size_t
SBCommandReturnObject_Clear
SBCommandReturnObject_Clear(SBCommandReturnObject self)
SBCommandReturnObject_SetStatus
SBCommandReturnObject_SetStatus(SBCommandReturnObject self, lldb::ReturnStatus status)
SBCommandReturnObject_SetError
SetError(SBError error, char const * fallback_error_cstr=None)
SetError(SBError error)
SBCommandReturnObject_SetError(SBCommandReturnObject self, char const * error_cstr)
SBCommandReturnObject_GetStatus
SBCommandReturnObject_GetStatus(SBCommandReturnObject self) -> lldb::ReturnStatus
SBCommandReturnObject_Succeeded
SBCommandReturnObject_Succeeded(SBCommandReturnObject self) -> bool
SBCommandReturnObject_HasResult
SBCommandReturnObject_HasResult(SBCommandReturnObject self) -> bool
SBCommandReturnObject_AppendMessage
SBCommandReturnObject_AppendMessage(SBCommandReturnObject self, char const * message)
SBCommandReturnObject_AppendWarning
SBCommandReturnObject_AppendWarning(SBCommandReturnObject self, char const * message)
SBCommandReturnObject_GetDescription
SBCommandReturnObject_GetDescription(SBCommandReturnObject self, SBStream description) -> bool
SBCommandReturnObject_SetImmediateOutputFile
SBCommandReturnObject_SetImmediateOutputFile(SBCommandReturnObject self, FILE * fh)
SBCommandReturnObject_SetImmediateErrorFile
SBCommandReturnObject_SetImmediateErrorFile(SBCommandReturnObject self, FILE * fh)
SBCommandReturnObject_PutCString
SBCommandReturnObject_PutCString(SBCommandReturnObject self, char const * string)
SBCommandReturnObject_Print
SBCommandReturnObject_Print(SBCommandReturnObject self, char const * str)
SBCommandReturnObject___str__
SBCommandReturnObject___str__(SBCommandReturnObject self) -> PyObject *
SBCommandReturnObject_write
SBCommandReturnObject_write(SBCommandReturnObject self, char const * str)
SBCommandReturnObject_flush
SBCommandReturnObject_flush(SBCommandReturnObject self)
SBCommandReturnObject_swigregister
new_SBCommunication
SBCommunication()
new_SBCommunication(char const * broadcaster_name) -> SBCommunication
delete_SBCommunication
delete_SBCommunication(SBCommunication self)
SBCommunication_IsValid
SBCommunication_IsValid(SBCommunication self) -> bool
SBCommunication___nonzero__
SBCommunication___nonzero__(SBCommunication self) -> bool
SBCommunication_GetBroadcaster
SBCommunication_GetBroadcaster(SBCommunication self) -> SBBroadcaster
SBCommunication_GetBroadcasterClass
SBCommunication_GetBroadcasterClass() -> char const *
SBCommunication_AdoptFileDesriptor
SBCommunication_AdoptFileDesriptor(SBCommunication self, int fd, bool owns_fd) -> lldb::ConnectionStatus
SBCommunication_Connect
SBCommunication_Connect(SBCommunication self, char const * url) -> lldb::ConnectionStatus
SBCommunication_Disconnect
SBCommunication_Disconnect(SBCommunication self) -> lldb::ConnectionStatus
SBCommunication_IsConnected
SBCommunication_IsConnected(SBCommunication self) -> bool
SBCommunication_GetCloseOnEOF
SBCommunication_GetCloseOnEOF(SBCommunication self) -> bool
SBCommunication_SetCloseOnEOF
SBCommunication_SetCloseOnEOF(SBCommunication self, bool b)
SBCommunication_Read
SBCommunication_Read(SBCommunication self, void * dst, size_t dst_len, uint32_t timeout_usec, lldb::ConnectionStatus & status) -> size_t
SBCommunication_Write
SBCommunication_Write(SBCommunication self, void const * src, size_t src_len, lldb::ConnectionStatus & status) -> size_t
SBCommunication_ReadThreadStart
SBCommunication_ReadThreadStart(SBCommunication self) -> bool
SBCommunication_ReadThreadStop
SBCommunication_ReadThreadStop(SBCommunication self) -> bool
SBCommunication_ReadThreadIsRunning
SBCommunication_ReadThreadIsRunning(SBCommunication self) -> bool
SBCommunication_SetReadThreadBytesReceivedCallback
SBCommunication_SetReadThreadBytesReceivedCallback(SBCommunication self, lldb::SBCommunication::ReadThreadBytesReceived callback, void * callback_baton) -> bool
SBCommunication_swigregister
new_SBCompileUnit
SBCompileUnit()
new_SBCompileUnit(SBCompileUnit rhs) -> SBCompileUnit
delete_SBCompileUnit
delete_SBCompileUnit(SBCompileUnit self)
SBCompileUnit_IsValid
SBCompileUnit_IsValid(SBCompileUnit self) -> bool
SBCompileUnit___nonzero__
SBCompileUnit___nonzero__(SBCompileUnit self) -> bool
SBCompileUnit_GetFileSpec
SBCompileUnit_GetFileSpec(SBCompileUnit self) -> SBFileSpec
SBCompileUnit_GetNumLineEntries
SBCompileUnit_GetNumLineEntries(SBCompileUnit self) -> uint32_t
SBCompileUnit_GetLineEntryAtIndex
SBCompileUnit_GetLineEntryAtIndex(SBCompileUnit self, uint32_t idx) -> SBLineEntry
SBCompileUnit_FindLineEntryIndex
FindLineEntryIndex(uint32_t start_idx, uint32_t line, SBFileSpec inline_file_spec) -> uint32_t
SBCompileUnit_FindLineEntryIndex(SBCompileUnit self, uint32_t start_idx, uint32_t line, SBFileSpec inline_file_spec, bool exact) -> uint32_t
SBCompileUnit_GetSupportFileAtIndex
SBCompileUnit_GetSupportFileAtIndex(SBCompileUnit self, uint32_t idx) -> SBFileSpec
SBCompileUnit_GetNumSupportFiles
SBCompileUnit_GetNumSupportFiles(SBCompileUnit self) -> uint32_t
SBCompileUnit_FindSupportFileIndex
SBCompileUnit_FindSupportFileIndex(SBCompileUnit self, uint32_t start_idx, SBFileSpec sb_file, bool full) -> uint32_t
SBCompileUnit_GetTypes
GetTypes(uint32_t type_mask) -> SBTypeList
SBCompileUnit_GetTypes(SBCompileUnit self) -> SBTypeList
//------------------------------------------------------------------
/// Get all types matching 
 type_mask from debug info in this
/// compile unit.
/// @param[in] type_mask
///    A bitfield that consists of one or more bits logically OR'ed
///    together from the lldb::TypeClass enumeration. This allows
///    you to request only structure types, or only class, struct
///    and union types. Passing in lldb::eTypeClassAny will return
///    all types found in the debug information for this compile
///    unit.
/// @return
///    A list of types in this compile unit that match 
 type_mask
//------------------------------------------------------------------
SBCompileUnit_GetLanguage
SBCompileUnit_GetLanguage(SBCompileUnit self) -> lldb::LanguageType
SBCompileUnit_GetDescription
SBCompileUnit_GetDescription(SBCompileUnit self, SBStream description) -> bool
SBCompileUnit___eq__
SBCompileUnit___eq__(SBCompileUnit self, SBCompileUnit rhs) -> bool
SBCompileUnit___ne__
SBCompileUnit___ne__(SBCompileUnit self, SBCompileUnit rhs) -> bool
SBCompileUnit___str__
SBCompileUnit___str__(SBCompileUnit self) -> PyObject *
SBCompileUnit_swigregister
new_SBData
SBData()
new_SBData(SBData rhs) -> SBData
delete_SBData
delete_SBData(SBData self)
SBData_GetAddressByteSize
SBData_GetAddressByteSize(SBData self) -> uint8_t
SBData_SetAddressByteSize
SBData_SetAddressByteSize(SBData self, uint8_t addr_byte_size)
SBData_Clear
SBData_Clear(SBData self)
SBData_IsValid
SBData_IsValid(SBData self) -> bool
SBData___nonzero__
SBData___nonzero__(SBData self) -> bool
SBData_GetByteSize
SBData_GetByteSize(SBData self) -> size_t
SBData_GetByteOrder
SBData_GetByteOrder(SBData self) -> lldb::ByteOrder
SBData_SetByteOrder
SBData_SetByteOrder(SBData self, lldb::ByteOrder endian)
SBData_GetFloat
SBData_GetFloat(SBData self, SBError error, lldb::offset_t offset) -> float
SBData_GetDouble
SBData_GetDouble(SBData self, SBError error, lldb::offset_t offset) -> double
SBData_GetLongDouble
SBData_GetLongDouble(SBData self, SBError error, lldb::offset_t offset) -> long double
SBData_GetAddress
SBData_GetAddress(SBData self, SBError error, lldb::offset_t offset) -> lldb::addr_t
SBData_GetUnsignedInt8
SBData_GetUnsignedInt8(SBData self, SBError error, lldb::offset_t offset) -> uint8_t
SBData_GetUnsignedInt16
SBData_GetUnsignedInt16(SBData self, SBError error, lldb::offset_t offset) -> uint16_t
SBData_GetUnsignedInt32
SBData_GetUnsignedInt32(SBData self, SBError error, lldb::offset_t offset) -> uint32_t
SBData_GetUnsignedInt64
SBData_GetUnsignedInt64(SBData self, SBError error, lldb::offset_t offset) -> uint64_t
SBData_GetSignedInt8
SBData_GetSignedInt8(SBData self, SBError error, lldb::offset_t offset) -> int8_t
SBData_GetSignedInt16
SBData_GetSignedInt16(SBData self, SBError error, lldb::offset_t offset) -> int16_t
SBData_GetSignedInt32
SBData_GetSignedInt32(SBData self, SBError error, lldb::offset_t offset) -> int32_t
SBData_GetSignedInt64
SBData_GetSignedInt64(SBData self, SBError error, lldb::offset_t offset) -> int64_t
SBData_GetString
SBData_GetString(SBData self, SBError error, lldb::offset_t offset) -> char const *
SBData_GetDescription
SBData_GetDescription(SBData self, SBStream description, lldb::addr_t base_addr) -> bool
SBData_ReadRawData
SBData_ReadRawData(SBData self, SBError error, lldb::offset_t offset, void * buf) -> size_t
SBData_SetData
SBData_SetData(SBData self, SBError error, void const * buf, lldb::ByteOrder endian, uint8_t addr_size)
SBData_Append
SBData_Append(SBData self, SBData rhs) -> bool
SBData_CreateDataFromCString
SBData_CreateDataFromCString(lldb::ByteOrder endian, uint32_t addr_byte_size, char const * data) -> SBData
SBData_CreateDataFromUInt64Array
SBData_CreateDataFromUInt64Array(lldb::ByteOrder endian, uint32_t addr_byte_size, uint64_t * array) -> SBData
SBData_CreateDataFromUInt32Array
SBData_CreateDataFromUInt32Array(lldb::ByteOrder endian, uint32_t addr_byte_size, uint32_t * array) -> SBData
SBData_CreateDataFromSInt64Array
SBData_CreateDataFromSInt64Array(lldb::ByteOrder endian, uint32_t addr_byte_size, int64_t * array) -> SBData
SBData_CreateDataFromSInt32Array
SBData_CreateDataFromSInt32Array(lldb::ByteOrder endian, uint32_t addr_byte_size, int32_t * array) -> SBData
SBData_CreateDataFromDoubleArray
SBData_CreateDataFromDoubleArray(lldb::ByteOrder endian, uint32_t addr_byte_size, double * array) -> SBData
SBData_SetDataFromCString
SBData_SetDataFromCString(SBData self, char const * data) -> bool
SBData_SetDataFromUInt64Array
SBData_SetDataFromUInt64Array(SBData self, uint64_t * array) -> bool
SBData_SetDataFromUInt32Array
SBData_SetDataFromUInt32Array(SBData self, uint32_t * array) -> bool
SBData_SetDataFromSInt64Array
SBData_SetDataFromSInt64Array(SBData self, int64_t * array) -> bool
SBData_SetDataFromSInt32Array
SBData_SetDataFromSInt32Array(SBData self, int32_t * array) -> bool
SBData_SetDataFromDoubleArray
SBData_SetDataFromDoubleArray(SBData self, double * array) -> bool
SBData___str__
SBData___str__(SBData self) -> PyObject *
SBData_swigregister
SBDebugger_Initialize
SBDebugger_Initialize()
SBDebugger_InitializeWithErrorHandling
SBDebugger_InitializeWithErrorHandling() -> SBError
SBDebugger_Terminate
SBDebugger_Terminate()
SBDebugger_Create
Create() -> SBDebugger
Create(bool source_init_files) -> SBDebugger
SBDebugger_Create(bool source_init_files, lldb::LogOutputCallback log_callback) -> SBDebugger
SBDebugger_Destroy
SBDebugger_Destroy(SBDebugger debugger)
SBDebugger_MemoryPressureDetected
SBDebugger_MemoryPressureDetected()
new_SBDebugger
SBDebugger()
new_SBDebugger(SBDebugger rhs) -> SBDebugger
delete_SBDebugger
delete_SBDebugger(SBDebugger self)
SBDebugger_IsValid
SBDebugger_IsValid(SBDebugger self) -> bool
SBDebugger___nonzero__
SBDebugger___nonzero__(SBDebugger self) -> bool
SBDebugger_Clear
SBDebugger_Clear(SBDebugger self)
SBDebugger_SetAsync
SBDebugger_SetAsync(SBDebugger self, bool b)
SBDebugger_GetAsync
SBDebugger_GetAsync(SBDebugger self) -> bool
SBDebugger_SkipLLDBInitFiles
SBDebugger_SkipLLDBInitFiles(SBDebugger self, bool b)
SBDebugger_SetInputFileHandle
SBDebugger_SetInputFileHandle(SBDebugger self, FILE * f, bool transfer_ownership)
SBDebugger_SetOutputFileHandle
SBDebugger_SetOutputFileHandle(SBDebugger self, FILE * f, bool transfer_ownership)
SBDebugger_SetErrorFileHandle
SBDebugger_SetErrorFileHandle(SBDebugger self, FILE * f, bool transfer_ownership)
SBDebugger_GetInputFileHandle
SBDebugger_GetInputFileHandle(SBDebugger self) -> FILE *
SBDebugger_GetOutputFileHandle
SBDebugger_GetOutputFileHandle(SBDebugger self) -> FILE *
SBDebugger_GetErrorFileHandle
SBDebugger_GetErrorFileHandle(SBDebugger self) -> FILE *
SBDebugger_GetCommandInterpreter
SBDebugger_GetCommandInterpreter(SBDebugger self) -> SBCommandInterpreter
SBDebugger_HandleCommand
SBDebugger_HandleCommand(SBDebugger self, char const * command)
SBDebugger_GetListener
SBDebugger_GetListener(SBDebugger self) -> SBListener
SBDebugger_HandleProcessEvent
SBDebugger_HandleProcessEvent(SBDebugger self, SBProcess process, SBEvent event, FILE * out, FILE * err)
SBDebugger_CreateTargetWithFileAndTargetTriple
SBDebugger_CreateTargetWithFileAndTargetTriple(SBDebugger self, char const * filename, char const * target_triple) -> SBTarget
SBDebugger_CreateTargetWithFileAndArch
SBDebugger_CreateTargetWithFileAndArch(SBDebugger self, char const * filename, char const * archname) -> SBTarget
SBDebugger_CreateTarget
CreateTarget(char const * filename, char const * target_triple, char const * platform_name, bool add_dependent_modules, SBError sb_error) -> SBTarget
SBDebugger_CreateTarget(SBDebugger self, char const * filename) -> SBTarget
SBDebugger_GetDummyTarget
SBDebugger_GetDummyTarget(SBDebugger self) -> SBTarget
The dummy target holds breakpoints and breakpoint names that will prime newly created targets.
SBDebugger_DeleteTarget
SBDebugger_DeleteTarget(SBDebugger self, SBTarget target) -> bool
Return true if target is deleted from the target list of the debugger.
SBDebugger_GetTargetAtIndex
SBDebugger_GetTargetAtIndex(SBDebugger self, uint32_t idx) -> SBTarget
SBDebugger_GetIndexOfTarget
SBDebugger_GetIndexOfTarget(SBDebugger self, SBTarget target) -> uint32_t
SBDebugger_FindTargetWithProcessID
SBDebugger_FindTargetWithProcessID(SBDebugger self, lldb::pid_t pid) -> SBTarget
SBDebugger_FindTargetWithFileAndArch
SBDebugger_FindTargetWithFileAndArch(SBDebugger self, char const * filename, char const * arch) -> SBTarget
SBDebugger_GetNumTargets
SBDebugger_GetNumTargets(SBDebugger self) -> uint32_t
SBDebugger_GetSelectedTarget
SBDebugger_GetSelectedTarget(SBDebugger self) -> SBTarget
SBDebugger_SetSelectedTarget
SBDebugger_SetSelectedTarget(SBDebugger self, SBTarget target)
SBDebugger_GetSelectedPlatform
SBDebugger_GetSelectedPlatform(SBDebugger self) -> SBPlatform
SBDebugger_SetSelectedPlatform
SBDebugger_SetSelectedPlatform(SBDebugger self, SBPlatform platform)
SBDebugger_GetNumPlatforms
SBDebugger_GetNumPlatforms(SBDebugger self) -> uint32_t
Get the number of currently active platforms.
SBDebugger_GetPlatformAtIndex
SBDebugger_GetPlatformAtIndex(SBDebugger self, uint32_t idx) -> SBPlatform
Get one of the currently active platforms.
SBDebugger_GetNumAvailablePlatforms
SBDebugger_GetNumAvailablePlatforms(SBDebugger self) -> uint32_t
Get the number of available platforms.
SBDebugger_GetAvailablePlatformInfoAtIndex
SBDebugger_GetAvailablePlatformInfoAtIndex(SBDebugger self, uint32_t idx) -> SBStructuredData
Get the name and description of one of the available platforms.
@param idx Zero-based index of the platform for which info should be
           retrieved, must be less than the value returned by
           GetNumAvailablePlatforms().
SBDebugger_GetSourceManager
SBDebugger_GetSourceManager(SBDebugger self) -> SBSourceManager
SBDebugger_SetCurrentPlatform
SBDebugger_SetCurrentPlatform(SBDebugger self, char const * platform_name) -> SBError
SBDebugger_SetCurrentPlatformSDKRoot
SBDebugger_SetCurrentPlatformSDKRoot(SBDebugger self, char const * sysroot) -> bool
SBDebugger_SetUseExternalEditor
SBDebugger_SetUseExternalEditor(SBDebugger self, bool input) -> bool
SBDebugger_GetUseExternalEditor
SBDebugger_GetUseExternalEditor(SBDebugger self) -> bool
SBDebugger_SetUseColor
SBDebugger_SetUseColor(SBDebugger self, bool use_color) -> bool
SBDebugger_GetUseColor
SBDebugger_GetUseColor(SBDebugger self) -> bool
SBDebugger_GetDefaultArchitecture
SBDebugger_GetDefaultArchitecture(char * arch_name, size_t arch_name_len) -> bool
SBDebugger_SetDefaultArchitecture
SBDebugger_SetDefaultArchitecture(char const * arch_name) -> bool
SBDebugger_GetScriptingLanguage
SBDebugger_GetScriptingLanguage(SBDebugger self, char const * script_language_name) -> lldb::ScriptLanguage
SBDebugger_GetVersionString
SBDebugger_GetVersionString() -> char const *
SBDebugger_StateAsCString
SBDebugger_StateAsCString(lldb::StateType state) -> char const *
SBDebugger_GetBuildConfiguration
SBDebugger_GetBuildConfiguration() -> SBStructuredData
SBDebugger_StateIsRunningState
SBDebugger_StateIsRunningState(lldb::StateType state) -> bool
SBDebugger_StateIsStoppedState
SBDebugger_StateIsStoppedState(lldb::StateType state) -> bool
SBDebugger_EnableLog
SBDebugger_EnableLog(SBDebugger self, char const * channel, char const ** types) -> bool
SBDebugger_SetLoggingCallback
SBDebugger_SetLoggingCallback(SBDebugger self, lldb::LogOutputCallback log_callback)
SBDebugger_DispatchInput
SBDebugger_DispatchInput(SBDebugger self, void const * data)
SBDebugger_DispatchInputInterrupt
SBDebugger_DispatchInputInterrupt(SBDebugger self)
SBDebugger_DispatchInputEndOfFile
SBDebugger_DispatchInputEndOfFile(SBDebugger self)
SBDebugger_GetInstanceName
SBDebugger_GetInstanceName(SBDebugger self) -> char const *
SBDebugger_FindDebuggerWithID
SBDebugger_FindDebuggerWithID(int id) -> SBDebugger
SBDebugger_SetInternalVariable
SBDebugger_SetInternalVariable(char const * var_name, char const * value, char const * debugger_instance_name) -> SBError
SBDebugger_GetInternalVariableValue
SBDebugger_GetInternalVariableValue(char const * var_name, char const * debugger_instance_name) -> SBStringList
SBDebugger_GetDescription
SBDebugger_GetDescription(SBDebugger self, SBStream description) -> bool
SBDebugger_GetTerminalWidth
SBDebugger_GetTerminalWidth(SBDebugger self) -> uint32_t
SBDebugger_SetTerminalWidth
SBDebugger_SetTerminalWidth(SBDebugger self, uint32_t term_width)
SBDebugger_GetID
SBDebugger_GetID(SBDebugger self) -> lldb::user_id_t
SBDebugger_GetPrompt
SBDebugger_GetPrompt(SBDebugger self) -> char const *
SBDebugger_SetPrompt
SBDebugger_SetPrompt(SBDebugger self, char const * prompt)
SBDebugger_GetReproducerPath
SBDebugger_GetReproducerPath(SBDebugger self) -> char const *
SBDebugger_GetScriptLanguage
SBDebugger_GetScriptLanguage(SBDebugger self) -> lldb::ScriptLanguage
SBDebugger_SetScriptLanguage
SBDebugger_SetScriptLanguage(SBDebugger self, lldb::ScriptLanguage script_lang)
SBDebugger_GetCloseInputOnEOF
SBDebugger_GetCloseInputOnEOF(SBDebugger self) -> bool
SBDebugger_SetCloseInputOnEOF
SBDebugger_SetCloseInputOnEOF(SBDebugger self, bool b)
SBDebugger_GetCategory
GetCategory(char const * category_name) -> SBTypeCategory
SBDebugger_GetCategory(SBDebugger self, lldb::LanguageType lang_type) -> SBTypeCategory
SBDebugger_CreateCategory
SBDebugger_CreateCategory(SBDebugger self, char const * category_name) -> SBTypeCategory
SBDebugger_DeleteCategory
SBDebugger_DeleteCategory(SBDebugger self, char const * category_name) -> bool
SBDebugger_GetNumCategories
SBDebugger_GetNumCategories(SBDebugger self) -> uint32_t
SBDebugger_GetCategoryAtIndex
SBDebugger_GetCategoryAtIndex(SBDebugger self, uint32_t arg3) -> SBTypeCategory
SBDebugger_GetDefaultCategory
SBDebugger_GetDefaultCategory(SBDebugger self) -> SBTypeCategory
SBDebugger_GetFormatForType
SBDebugger_GetFormatForType(SBDebugger self, SBTypeNameSpecifier arg3) -> SBTypeFormat
SBDebugger_GetSummaryForType
SBDebugger_GetSummaryForType(SBDebugger self, SBTypeNameSpecifier arg3) -> SBTypeSummary
SBDebugger_GetFilterForType
SBDebugger_GetFilterForType(SBDebugger self, SBTypeNameSpecifier arg3) -> SBTypeFilter
SBDebugger_GetSyntheticForType
SBDebugger_GetSyntheticForType(SBDebugger self, SBTypeNameSpecifier arg3) -> SBTypeSynthetic
SBDebugger_RunCommandInterpreter
SBDebugger_RunCommandInterpreter(SBDebugger self, bool auto_handle_events, bool spawn_thread, SBCommandInterpreterRunOptions options, int & num_errors, bool & quit_requested, bool & stopped_for_crash)
SBDebugger_RunREPL
SBDebugger_RunREPL(SBDebugger self, lldb::LanguageType language, char const * repl_options) -> SBError
SBDebugger___str__
SBDebugger___str__(SBDebugger self) -> PyObject *
SBDebugger_swigregister
new_SBDeclaration
SBDeclaration()
new_SBDeclaration(SBDeclaration rhs) -> SBDeclaration
delete_SBDeclaration
delete_SBDeclaration(SBDeclaration self)
SBDeclaration_IsValid
SBDeclaration_IsValid(SBDeclaration self) -> bool
SBDeclaration___nonzero__
SBDeclaration___nonzero__(SBDeclaration self) -> bool
SBDeclaration_GetFileSpec
SBDeclaration_GetFileSpec(SBDeclaration self) -> SBFileSpec
SBDeclaration_GetLine
SBDeclaration_GetLine(SBDeclaration self) -> uint32_t
SBDeclaration_GetColumn
SBDeclaration_GetColumn(SBDeclaration self) -> uint32_t
SBDeclaration_GetDescription
SBDeclaration_GetDescription(SBDeclaration self, SBStream description) -> bool
SBDeclaration_SetFileSpec
SBDeclaration_SetFileSpec(SBDeclaration self, SBFileSpec filespec)
SBDeclaration_SetLine
SBDeclaration_SetLine(SBDeclaration self, uint32_t line)
SBDeclaration_SetColumn
SBDeclaration_SetColumn(SBDeclaration self, uint32_t column)
SBDeclaration___eq__
SBDeclaration___eq__(SBDeclaration self, SBDeclaration rhs) -> bool
SBDeclaration___ne__
SBDeclaration___ne__(SBDeclaration self, SBDeclaration rhs) -> bool
SBDeclaration___str__
SBDeclaration___str__(SBDeclaration self) -> PyObject *
SBDeclaration_swigregister
new_SBError
SBError()
new_SBError(SBError rhs) -> SBError
delete_SBError
delete_SBError(SBError self)
SBError_GetCString
SBError_GetCString(SBError self) -> char const *
SBError_Clear
SBError_Clear(SBError self)
SBError_Fail
SBError_Fail(SBError self) -> bool
SBError_Success
SBError_Success(SBError self) -> bool
SBError_GetError
SBError_GetError(SBError self) -> uint32_t
SBError_GetType
SBError_GetType(SBError self) -> lldb::ErrorType
SBError_SetError
SBError_SetError(SBError self, uint32_t err, lldb::ErrorType type)
SBError_SetErrorToErrno
SBError_SetErrorToErrno(SBError self)
SBError_SetErrorToGenericError
SBError_SetErrorToGenericError(SBError self)
SBError_SetErrorString
SBError_SetErrorString(SBError self, char const * err_str)
SBError_SetErrorStringWithFormat
SetErrorStringWithFormat(char const * format, char * str1=None, char * str2=None, char * str3=None) -> int
SetErrorStringWithFormat(char const * format, char * str1=None, char * str2=None) -> int
SetErrorStringWithFormat(char const * format, char * str1=None) -> int
SBError_SetErrorStringWithFormat(SBError self, char const * format) -> int
SBError_IsValid
SBError_IsValid(SBError self) -> bool
SBError___nonzero__
SBError___nonzero__(SBError self) -> bool
SBError_GetDescription
SBError_GetDescription(SBError self, SBStream description) -> bool
SBError___str__
SBError___str__(SBError self) -> PyObject *
SBError_swigregister
new_SBEvent
SBEvent()
SBEvent(SBEvent rhs)
__init__(self, int type, str data) -> SBEvent (make an event that contains a C string)
delete_SBEvent
delete_SBEvent(SBEvent self)
SBEvent_IsValid
SBEvent_IsValid(SBEvent self) -> bool
SBEvent___nonzero__
SBEvent___nonzero__(SBEvent self) -> bool
SBEvent_GetDataFlavor
SBEvent_GetDataFlavor(SBEvent self) -> char const *
SBEvent_GetType
SBEvent_GetType(SBEvent self) -> uint32_t
SBEvent_GetBroadcaster
SBEvent_GetBroadcaster(SBEvent self) -> SBBroadcaster
SBEvent_GetBroadcasterClass
SBEvent_GetBroadcasterClass(SBEvent self) -> char const *
SBEvent_BroadcasterMatchesRef
SBEvent_BroadcasterMatchesRef(SBEvent self, SBBroadcaster broadcaster) -> bool
SBEvent_Clear
SBEvent_Clear(SBEvent self)
SBEvent_GetCStringFromEvent
SBEvent_GetCStringFromEvent(SBEvent event) -> char const *
SBEvent_GetDescription
SBEvent_GetDescription(SBEvent self, SBStream description) -> bool
SBEvent_swigregister
new_SBExecutionContext
SBExecutionContext()
SBExecutionContext(SBExecutionContext rhs)
SBExecutionContext(SBTarget target)
SBExecutionContext(SBProcess process)
SBExecutionContext(SBThread thread)
new_SBExecutionContext(SBFrame frame) -> SBExecutionContext
delete_SBExecutionContext
delete_SBExecutionContext(SBExecutionContext self)
SBExecutionContext_GetTarget
SBExecutionContext_GetTarget(SBExecutionContext self) -> SBTarget
SBExecutionContext_GetProcess
SBExecutionContext_GetProcess(SBExecutionContext self) -> SBProcess
SBExecutionContext_GetThread
SBExecutionContext_GetThread(SBExecutionContext self) -> SBThread
SBExecutionContext_GetFrame
SBExecutionContext_GetFrame(SBExecutionContext self) -> SBFrame
SBExecutionContext_swigregister
new_SBExpressionOptions
SBExpressionOptions()
new_SBExpressionOptions(SBExpressionOptions rhs) -> SBExpressionOptions
delete_SBExpressionOptions
delete_SBExpressionOptions(SBExpressionOptions self)
SBExpressionOptions_GetCoerceResultToId
SBExpressionOptions_GetCoerceResultToId(SBExpressionOptions self) -> bool
SBExpressionOptions_SetCoerceResultToId
SetCoerceResultToId(bool coerce=True)
SBExpressionOptions_SetCoerceResultToId(SBExpressionOptions self)
Sets whether to coerce the expression result to ObjC id type after evaluation.
SBExpressionOptions_GetUnwindOnError
SBExpressionOptions_GetUnwindOnError(SBExpressionOptions self) -> bool
SBExpressionOptions_SetUnwindOnError
SetUnwindOnError(bool unwind=True)
SBExpressionOptions_SetUnwindOnError(SBExpressionOptions self)
Sets whether to unwind the expression stack on error.
SBExpressionOptions_GetIgnoreBreakpoints
SBExpressionOptions_GetIgnoreBreakpoints(SBExpressionOptions self) -> bool
SBExpressionOptions_SetIgnoreBreakpoints
SetIgnoreBreakpoints(bool ignore=True)
SBExpressionOptions_SetIgnoreBreakpoints(SBExpressionOptions self)
SBExpressionOptions_GetFetchDynamicValue
SBExpressionOptions_GetFetchDynamicValue(SBExpressionOptions self) -> lldb::DynamicValueType
SBExpressionOptions_SetFetchDynamicValue
SetFetchDynamicValue(lldb::DynamicValueType dynamic)
SBExpressionOptions_SetFetchDynamicValue(SBExpressionOptions self)
Sets whether to cast the expression result to its dynamic type.
SBExpressionOptions_GetTimeoutInMicroSeconds
SBExpressionOptions_GetTimeoutInMicroSeconds(SBExpressionOptions self) -> uint32_t
SBExpressionOptions_SetTimeoutInMicroSeconds
SetTimeoutInMicroSeconds(uint32_t timeout=0)
SBExpressionOptions_SetTimeoutInMicroSeconds(SBExpressionOptions self)
Sets the timeout in microseconds to run the expression for. If try all threads is set to true and the expression doesn't complete within the specified timeout, all threads will be resumed for the same timeout to see if the expresson will finish.
SBExpressionOptions_GetOneThreadTimeoutInMicroSeconds
SBExpressionOptions_GetOneThreadTimeoutInMicroSeconds(SBExpressionOptions self) -> uint32_t
SBExpressionOptions_SetOneThreadTimeoutInMicroSeconds
SetOneThreadTimeoutInMicroSeconds(uint32_t timeout=0)
SBExpressionOptions_SetOneThreadTimeoutInMicroSeconds(SBExpressionOptions self)
SBExpressionOptions_GetTryAllThreads
SBExpressionOptions_GetTryAllThreads(SBExpressionOptions self) -> bool
SBExpressionOptions_SetTryAllThreads
SetTryAllThreads(bool run_others=True)
SBExpressionOptions_SetTryAllThreads(SBExpressionOptions self)
Sets whether to run all threads if the expression does not complete on one thread.
SBExpressionOptions_GetStopOthers
SBExpressionOptions_GetStopOthers(SBExpressionOptions self) -> bool
SBExpressionOptions_SetStopOthers
SetStopOthers(bool stop_others=True)
SBExpressionOptions_SetStopOthers(SBExpressionOptions self)
SBExpressionOptions_GetTrapExceptions
SBExpressionOptions_GetTrapExceptions(SBExpressionOptions self) -> bool
SBExpressionOptions_SetTrapExceptions
SetTrapExceptions(bool trap_exceptions=True)
SBExpressionOptions_SetTrapExceptions(SBExpressionOptions self)
SBExpressionOptions_GetPlaygroundTransformEnabled
SBExpressionOptions_GetPlaygroundTransformEnabled(SBExpressionOptions self) -> bool
SBExpressionOptions_SetPlaygroundTransformEnabled
SetPlaygroundTransformEnabled(bool enable_playground_transform=True)
SBExpressionOptions_SetPlaygroundTransformEnabled(SBExpressionOptions self)
SBExpressionOptions_GetREPLMode
SBExpressionOptions_GetREPLMode(SBExpressionOptions self) -> bool
SBExpressionOptions_SetREPLMode
SetREPLMode(bool enable_repl=True)
SBExpressionOptions_SetREPLMode(SBExpressionOptions self)
SBExpressionOptions_SetLanguage
SBExpressionOptions_SetLanguage(SBExpressionOptions self, lldb::LanguageType language)
Sets the language that LLDB should assume the expression is written in
SBExpressionOptions_GetGenerateDebugInfo
SBExpressionOptions_GetGenerateDebugInfo(SBExpressionOptions self) -> bool
SBExpressionOptions_SetGenerateDebugInfo
SetGenerateDebugInfo(bool b=True)
SBExpressionOptions_SetGenerateDebugInfo(SBExpressionOptions self)
Sets whether to generate debug information for the expression and also controls if a SBModule is generated.
SBExpressionOptions_GetSuppressPersistentResult
SBExpressionOptions_GetSuppressPersistentResult(SBExpressionOptions self) -> bool
SBExpressionOptions_SetSuppressPersistentResult
SetSuppressPersistentResult(bool b=False)
SBExpressionOptions_SetSuppressPersistentResult(SBExpressionOptions self)
Sets whether to produce a persistent result that can be used in future expressions.
SBExpressionOptions_GetPrefix
SBExpressionOptions_GetPrefix(SBExpressionOptions self) -> char const *
Gets the prefix to use for this expression.
SBExpressionOptions_SetPrefix
SBExpressionOptions_SetPrefix(SBExpressionOptions self, char const * prefix)
Sets the prefix to use for this expression. This prefix gets inserted after the 'target.expr-prefix' prefix contents, but before the wrapped expression function body.
SBExpressionOptions_SetAutoApplyFixIts
SetAutoApplyFixIts(bool b=True)
SBExpressionOptions_SetAutoApplyFixIts(SBExpressionOptions self)
Sets whether to auto-apply fix-it hints to the expression being evaluated.
SBExpressionOptions_GetAutoApplyFixIts
SBExpressionOptions_GetAutoApplyFixIts(SBExpressionOptions self) -> bool
Gets whether to auto-apply fix-it hints to an expression.
SBExpressionOptions_GetTopLevel
SBExpressionOptions_GetTopLevel(SBExpressionOptions self) -> bool
SBExpressionOptions_SetTopLevel
SetTopLevel(bool b=True)
SBExpressionOptions_SetTopLevel(SBExpressionOptions self)
SBExpressionOptions_GetAllowJIT
SBExpressionOptions_GetAllowJIT(SBExpressionOptions self) -> bool
Gets whether to JIT an expression if it cannot be interpreted.
SBExpressionOptions_SetAllowJIT
SBExpressionOptions_SetAllowJIT(SBExpressionOptions self, bool allow)
Sets whether to JIT an expression if it cannot be interpreted.
SBExpressionOptions_swigregister
new_SBFileSpec
SBFileSpec()
SBFileSpec(SBFileSpec rhs)
SBFileSpec(char const * path)
new_SBFileSpec(char const * path, bool resolve) -> SBFileSpec
delete_SBFileSpec
delete_SBFileSpec(SBFileSpec self)
SBFileSpec_IsValid
SBFileSpec_IsValid(SBFileSpec self) -> bool
SBFileSpec___nonzero__
SBFileSpec___nonzero__(SBFileSpec self) -> bool
SBFileSpec_Exists
SBFileSpec_Exists(SBFileSpec self) -> bool
SBFileSpec_ResolveExecutableLocation
SBFileSpec_ResolveExecutableLocation(SBFileSpec self) -> bool
SBFileSpec_GetFilename
SBFileSpec_GetFilename(SBFileSpec self) -> char const *
SBFileSpec_GetDirectory
SBFileSpec_GetDirectory(SBFileSpec self) -> char const *
SBFileSpec_SetFilename
SBFileSpec_SetFilename(SBFileSpec self, char const * filename)
SBFileSpec_SetDirectory
SBFileSpec_SetDirectory(SBFileSpec self, char const * directory)
SBFileSpec_GetPath
SBFileSpec_GetPath(SBFileSpec self, char * dst_path, size_t dst_len) -> uint32_t
SBFileSpec_ResolvePath
SBFileSpec_ResolvePath(char const * src_path, char * dst_path, size_t dst_len) -> int
SBFileSpec_GetDescription
SBFileSpec_GetDescription(SBFileSpec self, SBStream description) -> bool
SBFileSpec_AppendPathComponent
SBFileSpec_AppendPathComponent(SBFileSpec self, char const * file_or_directory)
SBFileSpec___str__
SBFileSpec___str__(SBFileSpec self) -> PyObject *
SBFileSpec_swigregister
new_SBFileSpecList
SBFileSpecList()
new_SBFileSpecList(SBFileSpecList rhs) -> SBFileSpecList
delete_SBFileSpecList
delete_SBFileSpecList(SBFileSpecList self)
SBFileSpecList_GetSize
SBFileSpecList_GetSize(SBFileSpecList self) -> uint32_t
SBFileSpecList_GetDescription
SBFileSpecList_GetDescription(SBFileSpecList self, SBStream description) -> bool
SBFileSpecList_Append
SBFileSpecList_Append(SBFileSpecList self, SBFileSpec sb_file)
SBFileSpecList_AppendIfUnique
SBFileSpecList_AppendIfUnique(SBFileSpecList self, SBFileSpec sb_file) -> bool
SBFileSpecList_Clear
SBFileSpecList_Clear(SBFileSpecList self)
SBFileSpecList_FindFileIndex
SBFileSpecList_FindFileIndex(SBFileSpecList self, uint32_t idx, SBFileSpec sb_file, bool full) -> uint32_t
SBFileSpecList_GetFileSpecAtIndex
SBFileSpecList_GetFileSpecAtIndex(SBFileSpecList self, uint32_t idx) -> SBFileSpec
SBFileSpecList_swigregister
new_SBFrame
SBFrame()
new_SBFrame(SBFrame rhs) -> SBFrame
delete_SBFrame
delete_SBFrame(SBFrame self)
SBFrame_IsEqual
SBFrame_IsEqual(SBFrame self, SBFrame rhs) -> bool
SBFrame_IsValid
SBFrame_IsValid(SBFrame self) -> bool
SBFrame___nonzero__
SBFrame___nonzero__(SBFrame self) -> bool
SBFrame_GetFrameID
SBFrame_GetFrameID(SBFrame self) -> uint32_t
SBFrame_GetCFA
SBFrame_GetCFA(SBFrame self) -> lldb::addr_t
Get the Canonical Frame Address for this stack frame.
This is the DWARF standard's definition of a CFA, a stack address
that remains constant throughout the lifetime of the function.
Returns an lldb::addr_t stack address, or LLDB_INVALID_ADDRESS if
the CFA cannot be determined.
SBFrame_GetPC
SBFrame_GetPC(SBFrame self) -> lldb::addr_t
SBFrame_SetPC
SBFrame_SetPC(SBFrame self, lldb::addr_t new_pc) -> bool
SBFrame_GetSP
SBFrame_GetSP(SBFrame self) -> lldb::addr_t
SBFrame_GetFP
SBFrame_GetFP(SBFrame self) -> lldb::addr_t
SBFrame_GetPCAddress
SBFrame_GetPCAddress(SBFrame self) -> SBAddress
SBFrame_GetSymbolContext
SBFrame_GetSymbolContext(SBFrame self, uint32_t resolve_scope) -> SBSymbolContext
SBFrame_GetModule
SBFrame_GetModule(SBFrame self) -> SBModule
SBFrame_GetCompileUnit
SBFrame_GetCompileUnit(SBFrame self) -> SBCompileUnit
SBFrame_GetFunction
SBFrame_GetFunction(SBFrame self) -> SBFunction
SBFrame_GetSymbol
SBFrame_GetSymbol(SBFrame self) -> SBSymbol
SBFrame_GetBlock
SBFrame_GetBlock(SBFrame self) -> SBBlock
/// Gets the deepest block that contains the frame PC.
/// See also GetFrameBlock().
SBFrame_GetDisplayFunctionName
SBFrame_GetDisplayFunctionName(SBFrame self) -> char const *
SBFrame_GetFunctionName
GetFunctionName() -> char const
SBFrame_GetFunctionName(SBFrame self) -> char const *
/// Get the appropriate function name for this frame. Inlined functions in
/// LLDB are represented by Blocks that have inlined function information, so
/// just looking at the SBFunction or SBSymbol for a frame isn't enough.
/// This function will return the appropriate function, symbol or inlined
/// function name for the frame.
/// This function returns:
/// - the name of the inlined function (if there is one)
/// - the name of the concrete function (if there is one)
/// - the name of the symbol (if there is one)
/// - NULL
/// See also IsInlined().
SBFrame_GuessLanguage
SBFrame_GuessLanguage(SBFrame self) -> lldb::LanguageType
/// Returns the language of the frame's SBFunction, or if there.
/// is no SBFunction, guess the language from the mangled name.
/// .
SBFrame_IsSwiftThunk
SBFrame_IsSwiftThunk(SBFrame self) -> bool
SBFrame_IsInlined
IsInlined() -> bool
SBFrame_IsInlined(SBFrame self) -> bool
/// Return true if this frame represents an inlined function.
/// See also GetFunctionName().
SBFrame_IsArtificial
IsArtificial() -> bool
SBFrame_IsArtificial(SBFrame self) -> bool
/// Return true if this frame is artificial (e.g a frame synthesized to
/// capture a tail call). Local variables may not be available in an artificial
/// frame.
SBFrame_EvaluateExpression
EvaluateExpression(char const * expr) -> SBValue
EvaluateExpression(char const * expr, lldb::DynamicValueType use_dynamic) -> SBValue
EvaluateExpression(char const * expr, lldb::DynamicValueType use_dynamic, bool unwind_on_error) -> SBValue
SBFrame_EvaluateExpression(SBFrame self, char const * expr, SBExpressionOptions options) -> SBValue
/// The version that doesn't supply a 'use_dynamic' value will use the
/// target's default.
SBFrame_GetFrameBlock
SBFrame_GetFrameBlock(SBFrame self) -> SBBlock
/// Gets the lexical block that defines the stack frame. Another way to think
/// of this is it will return the block that contains all of the variables
/// for a stack frame. Inlined functions are represented as SBBlock objects
/// that have inlined function information: the name of the inlined function,
/// where it was called from. The block that is returned will be the first 
/// block at or above the block for the PC (SBFrame::GetBlock()) that defines
/// the scope of the frame. When a function contains no inlined functions,
/// this will be the top most lexical block that defines the function. 
/// When a function has inlined functions and the PC is currently
/// in one of those inlined functions, this method will return the inlined
/// block that defines this frame. If the PC isn't currently in an inlined
/// function, the lexical block that defines the function is returned.
SBFrame_GetLineEntry
SBFrame_GetLineEntry(SBFrame self) -> SBLineEntry
SBFrame_GetThread
SBFrame_GetThread(SBFrame self) -> SBThread
SBFrame_Disassemble
SBFrame_Disassemble(SBFrame self) -> char const *
SBFrame_Clear
SBFrame_Clear(SBFrame self)
SBFrame_GetVariables
GetVariables(bool arguments, bool locals, bool statics, bool in_scope_only) -> SBValueList
GetVariables(bool arguments, bool locals, bool statics, bool in_scope_only, lldb::DynamicValueType use_dynamic) -> SBValueList
SBFrame_GetVariables(SBFrame self, SBVariablesOptions options) -> SBValueList
/// The version that doesn't supply a 'use_dynamic' value will use the
/// target's default.
SBFrame_GetRegisters
SBFrame_GetRegisters(SBFrame self) -> SBValueList
SBFrame_FindVariable
FindVariable(char const * var_name) -> SBValue
SBFrame_FindVariable(SBFrame self, char const * var_name, lldb::DynamicValueType use_dynamic) -> SBValue
/// The version that doesn't supply a 'use_dynamic' value will use the
/// target's default.
SBFrame_FindRegister
SBFrame_FindRegister(SBFrame self, char const * name) -> SBValue
SBFrame_GetValueForVariablePath
GetValueForVariablePath(char const * var_path) -> SBValue
SBFrame_GetValueForVariablePath(SBFrame self, char const * var_path, lldb::DynamicValueType use_dynamic) -> SBValue
/// Get a lldb.SBValue for a variable path. 
/// Variable paths can include access to pointer or instance members:
///     rect_ptr->origin.y
///     pt.x
/// Pointer dereferences:
///     *this->foo_ptr
///     **argv
/// Address of:
///     &pt
///     &my_array[3].x
/// Array accesses and treating pointers as arrays:
///     int_array[1]
///     pt_ptr[22].x
/// Unlike EvaluateExpression() which returns lldb.SBValue objects
/// with constant copies of the values at the time of evaluation,
/// the result of this function is a value that will continue to
/// track the current value of the value as execution progresses
/// in the current frame.
SBFrame_FindValue
FindValue(char const * name, lldb::ValueType value_type) -> SBValue
SBFrame_FindValue(SBFrame self, char const * name, lldb::ValueType value_type, lldb::DynamicValueType use_dynamic) -> SBValue
/// Find variables, register sets, registers, or persistent variables using
/// the frame as the scope.
/// The version that doesn't supply a 'use_dynamic' value will use the
/// target's default.
SBFrame_GetDescription
SBFrame_GetDescription(SBFrame self, SBStream description) -> bool
SBFrame___str__
SBFrame___str__(SBFrame self) -> PyObject *
SBFrame_swigregister
new_SBFunction
SBFunction()
new_SBFunction(SBFunction rhs) -> SBFunction
delete_SBFunction
delete_SBFunction(SBFunction self)
SBFunction_IsValid
SBFunction_IsValid(SBFunction self) -> bool
SBFunction___nonzero__
SBFunction___nonzero__(SBFunction self) -> bool
SBFunction_GetName
SBFunction_GetName(SBFunction self) -> char const *
SBFunction_GetDisplayName
SBFunction_GetDisplayName(SBFunction self) -> char const *
SBFunction_GetMangledName
SBFunction_GetMangledName(SBFunction self) -> char const *
SBFunction_GetInstructions
GetInstructions(SBTarget target) -> SBInstructionList
SBFunction_GetInstructions(SBFunction self, SBTarget target, char const * flavor) -> SBInstructionList
SBFunction_GetStartAddress
SBFunction_GetStartAddress(SBFunction self) -> SBAddress
SBFunction_GetEndAddress
SBFunction_GetEndAddress(SBFunction self) -> SBAddress
SBFunction_GetArgumentName
SBFunction_GetArgumentName(SBFunction self, uint32_t arg_idx) -> char const *
SBFunction_GetPrologueByteSize
SBFunction_GetPrologueByteSize(SBFunction self) -> uint32_t
SBFunction_GetType
SBFunction_GetType(SBFunction self) -> SBType
SBFunction_GetBlock
SBFunction_GetBlock(SBFunction self) -> SBBlock
SBFunction_GetLanguage
SBFunction_GetLanguage(SBFunction self) -> lldb::LanguageType
SBFunction_GetIsOptimized
SBFunction_GetIsOptimized(SBFunction self) -> bool
Returns true if the function was compiled with optimization.
Optimization, in this case, is meant to indicate that the debugger
experience may be confusing for the user -- variables optimized away,
stepping jumping between source lines -- and the driver may want to 
provide some guidance to the user about this.
Returns false if unoptimized, or unknown.
SBFunction_GetCanThrow
SBFunction_GetCanThrow(SBFunction self) -> bool
SBFunction_GetDescription
SBFunction_GetDescription(SBFunction self, SBStream description) -> bool
SBFunction___eq__
SBFunction___eq__(SBFunction self, SBFunction rhs) -> bool
SBFunction___ne__
SBFunction___ne__(SBFunction self, SBFunction rhs) -> bool
SBFunction___str__
SBFunction___str__(SBFunction self) -> PyObject *
SBFunction_swigregister
SBHostOS_GetProgramFileSpec
SBHostOS_GetProgramFileSpec() -> SBFileSpec
SBHostOS_GetLLDBPythonPath
SBHostOS_GetLLDBPythonPath() -> SBFileSpec
SBHostOS_GetLLDBPath
SBHostOS_GetLLDBPath(lldb::PathType path_type) -> SBFileSpec
SBHostOS_GetUserHomeDirectory
SBHostOS_GetUserHomeDirectory() -> SBFileSpec
SBHostOS_ThreadCreated
SBHostOS_ThreadCreated(char const * name)
SBHostOS_ThreadCreate
SBHostOS_ThreadCreate(char const * name, lldb::thread_func_t arg3, void * thread_arg, SBError err) -> lldb::thread_t
SBHostOS_ThreadCancel
SBHostOS_ThreadCancel(lldb::thread_t thread, SBError err) -> bool
SBHostOS_ThreadDetach
SBHostOS_ThreadDetach(lldb::thread_t thread, SBError err) -> bool
SBHostOS_ThreadJoin
SBHostOS_ThreadJoin(lldb::thread_t thread, lldb::thread_result_t * result, SBError err) -> bool
new_SBHostOS
new_SBHostOS() -> SBHostOS
delete_SBHostOS
delete_SBHostOS(SBHostOS self)
SBHostOS_swigregister
new_SBInstruction
SBInstruction()
new_SBInstruction(SBInstruction rhs) -> SBInstruction
delete_SBInstruction
delete_SBInstruction(SBInstruction self)
SBInstruction_IsValid
SBInstruction_IsValid(SBInstruction self) -> bool
SBInstruction___nonzero__
SBInstruction___nonzero__(SBInstruction self) -> bool
SBInstruction_GetAddress
SBInstruction_GetAddress(SBInstruction self) -> SBAddress
SBInstruction_GetMnemonic
SBInstruction_GetMnemonic(SBInstruction self, SBTarget target) -> char const *
SBInstruction_GetOperands
SBInstruction_GetOperands(SBInstruction self, SBTarget target) -> char const *
SBInstruction_GetComment
SBInstruction_GetComment(SBInstruction self, SBTarget target) -> char const *
SBInstruction_GetData
SBInstruction_GetData(SBInstruction self, SBTarget target) -> SBData
SBInstruction_GetByteSize
SBInstruction_GetByteSize(SBInstruction self) -> size_t
SBInstruction_DoesBranch
SBInstruction_DoesBranch(SBInstruction self) -> bool
SBInstruction_HasDelaySlot
SBInstruction_HasDelaySlot(SBInstruction self) -> bool
SBInstruction_CanSetBreakpoint
SBInstruction_CanSetBreakpoint(SBInstruction self) -> bool
SBInstruction_Print
SBInstruction_Print(SBInstruction self, FILE * out)
SBInstruction_GetDescription
SBInstruction_GetDescription(SBInstruction self, SBStream description) -> bool
SBInstruction_EmulateWithFrame
SBInstruction_EmulateWithFrame(SBInstruction self, SBFrame frame, uint32_t evaluate_options) -> bool
SBInstruction_DumpEmulation
SBInstruction_DumpEmulation(SBInstruction self, char const * triple) -> bool
SBInstruction_TestEmulation
SBInstruction_TestEmulation(SBInstruction self, SBStream output_stream, char const * test_file) -> bool
SBInstruction___str__
SBInstruction___str__(SBInstruction self) -> PyObject *
SBInstruction_swigregister
new_SBInstructionList
SBInstructionList()
new_SBInstructionList(SBInstructionList rhs) -> SBInstructionList
delete_SBInstructionList
delete_SBInstructionList(SBInstructionList self)
SBInstructionList_IsValid
SBInstructionList_IsValid(SBInstructionList self) -> bool
SBInstructionList___nonzero__
SBInstructionList___nonzero__(SBInstructionList self) -> bool
SBInstructionList_GetSize
SBInstructionList_GetSize(SBInstructionList self) -> size_t
SBInstructionList_GetInstructionAtIndex
SBInstructionList_GetInstructionAtIndex(SBInstructionList self, uint32_t idx) -> SBInstruction
SBInstructionList_GetInstructionsCount
SBInstructionList_GetInstructionsCount(SBInstructionList self, SBAddress start, SBAddress end, bool canSetBreakpoint) -> size_t
SBInstructionList_Clear
SBInstructionList_Clear(SBInstructionList self)
SBInstructionList_AppendInstruction
SBInstructionList_AppendInstruction(SBInstructionList self, SBInstruction inst)
SBInstructionList_Print
SBInstructionList_Print(SBInstructionList self, FILE * out)
SBInstructionList_GetDescription
SBInstructionList_GetDescription(SBInstructionList self, SBStream description) -> bool
SBInstructionList_DumpEmulationForAllInstructions
SBInstructionList_DumpEmulationForAllInstructions(SBInstructionList self, char const * triple) -> bool
SBInstructionList___str__
SBInstructionList___str__(SBInstructionList self) -> PyObject *
SBInstructionList_swigregister
SBLanguageRuntime_GetLanguageTypeFromString
SBLanguageRuntime_GetLanguageTypeFromString(char const * string) -> lldb::LanguageType
SBLanguageRuntime_GetNameForLanguageType
SBLanguageRuntime_GetNameForLanguageType(lldb::LanguageType language) -> char const *
new_SBLanguageRuntime
new_SBLanguageRuntime() -> SBLanguageRuntime
delete_SBLanguageRuntime
delete_SBLanguageRuntime(SBLanguageRuntime self)
SBLanguageRuntime_swigregister
new_SBLaunchInfo
new_SBLaunchInfo(char const ** argv) -> SBLaunchInfo
SBLaunchInfo_GetProcessID
SBLaunchInfo_GetProcessID(SBLaunchInfo self) -> lldb::pid_t
SBLaunchInfo_GetUserID
SBLaunchInfo_GetUserID(SBLaunchInfo self) -> uint32_t
SBLaunchInfo_GetGroupID
SBLaunchInfo_GetGroupID(SBLaunchInfo self) -> uint32_t
SBLaunchInfo_UserIDIsValid
SBLaunchInfo_UserIDIsValid(SBLaunchInfo self) -> bool
SBLaunchInfo_GroupIDIsValid
SBLaunchInfo_GroupIDIsValid(SBLaunchInfo self) -> bool
SBLaunchInfo_SetUserID
SBLaunchInfo_SetUserID(SBLaunchInfo self, uint32_t uid)
SBLaunchInfo_SetGroupID
SBLaunchInfo_SetGroupID(SBLaunchInfo self, uint32_t gid)
SBLaunchInfo_GetExecutableFile
SBLaunchInfo_GetExecutableFile(SBLaunchInfo self) -> SBFileSpec
SBLaunchInfo_SetExecutableFile
SBLaunchInfo_SetExecutableFile(SBLaunchInfo self, SBFileSpec exe_file, bool add_as_first_arg)
SBLaunchInfo_GetListener
SBLaunchInfo_GetListener(SBLaunchInfo self) -> SBListener
SBLaunchInfo_SetListener
SBLaunchInfo_SetListener(SBLaunchInfo self, SBListener listener)
SBLaunchInfo_GetNumArguments
SBLaunchInfo_GetNumArguments(SBLaunchInfo self) -> uint32_t
SBLaunchInfo_GetArgumentAtIndex
SBLaunchInfo_GetArgumentAtIndex(SBLaunchInfo self, uint32_t idx) -> char const *
SBLaunchInfo_SetArguments
SBLaunchInfo_SetArguments(SBLaunchInfo self, char const ** argv, bool append)
SBLaunchInfo_GetNumEnvironmentEntries
SBLaunchInfo_GetNumEnvironmentEntries(SBLaunchInfo self) -> uint32_t
SBLaunchInfo_GetEnvironmentEntryAtIndex
SBLaunchInfo_GetEnvironmentEntryAtIndex(SBLaunchInfo self, uint32_t idx) -> char const *
SBLaunchInfo_SetEnvironmentEntries
SBLaunchInfo_SetEnvironmentEntries(SBLaunchInfo self, char const ** envp, bool append)
SBLaunchInfo_Clear
SBLaunchInfo_Clear(SBLaunchInfo self)
SBLaunchInfo_GetWorkingDirectory
SBLaunchInfo_GetWorkingDirectory(SBLaunchInfo self) -> char const *
SBLaunchInfo_SetWorkingDirectory
SBLaunchInfo_SetWorkingDirectory(SBLaunchInfo self, char const * working_dir)
SBLaunchInfo_GetLaunchFlags
SBLaunchInfo_GetLaunchFlags(SBLaunchInfo self) -> uint32_t
SBLaunchInfo_SetLaunchFlags
SBLaunchInfo_SetLaunchFlags(SBLaunchInfo self, uint32_t flags)
SBLaunchInfo_GetProcessPluginName
SBLaunchInfo_GetProcessPluginName(SBLaunchInfo self) -> char const *
SBLaunchInfo_SetProcessPluginName
SBLaunchInfo_SetProcessPluginName(SBLaunchInfo self, char const * plugin_name)
SBLaunchInfo_GetShell
SBLaunchInfo_GetShell(SBLaunchInfo self) -> char const *
SBLaunchInfo_SetShell
SBLaunchInfo_SetShell(SBLaunchInfo self, char const * path)
SBLaunchInfo_GetShellExpandArguments
SBLaunchInfo_GetShellExpandArguments(SBLaunchInfo self) -> bool
SBLaunchInfo_SetShellExpandArguments
SBLaunchInfo_SetShellExpandArguments(SBLaunchInfo self, bool expand)
SBLaunchInfo_GetResumeCount
SBLaunchInfo_GetResumeCount(SBLaunchInfo self) -> uint32_t
SBLaunchInfo_SetResumeCount
SBLaunchInfo_SetResumeCount(SBLaunchInfo self, uint32_t c)
SBLaunchInfo_AddCloseFileAction
SBLaunchInfo_AddCloseFileAction(SBLaunchInfo self, int fd) -> bool
SBLaunchInfo_AddDuplicateFileAction
SBLaunchInfo_AddDuplicateFileAction(SBLaunchInfo self, int fd, int dup_fd) -> bool
SBLaunchInfo_AddOpenFileAction
SBLaunchInfo_AddOpenFileAction(SBLaunchInfo self, int fd, char const * path, bool read, bool write) -> bool
SBLaunchInfo_AddSuppressFileAction
SBLaunchInfo_AddSuppressFileAction(SBLaunchInfo self, int fd, bool read, bool write) -> bool
SBLaunchInfo_SetLaunchEventData
SBLaunchInfo_SetLaunchEventData(SBLaunchInfo self, char const * data)
SBLaunchInfo_GetLaunchEventData
SBLaunchInfo_GetLaunchEventData(SBLaunchInfo self) -> char const *
SBLaunchInfo_GetDetachOnError
SBLaunchInfo_GetDetachOnError(SBLaunchInfo self) -> bool
SBLaunchInfo_SetDetachOnError
SBLaunchInfo_SetDetachOnError(SBLaunchInfo self, bool enable)
delete_SBLaunchInfo
delete_SBLaunchInfo(SBLaunchInfo self)
SBLaunchInfo_swigregister
new_SBLineEntry
SBLineEntry()
new_SBLineEntry(SBLineEntry rhs) -> SBLineEntry
delete_SBLineEntry
delete_SBLineEntry(SBLineEntry self)
SBLineEntry_GetStartAddress
SBLineEntry_GetStartAddress(SBLineEntry self) -> SBAddress
SBLineEntry_GetEndAddress
SBLineEntry_GetEndAddress(SBLineEntry self) -> SBAddress
SBLineEntry_IsValid
SBLineEntry_IsValid(SBLineEntry self) -> bool
SBLineEntry___nonzero__
SBLineEntry___nonzero__(SBLineEntry self) -> bool
SBLineEntry_GetFileSpec
SBLineEntry_GetFileSpec(SBLineEntry self) -> SBFileSpec
SBLineEntry_GetLine
SBLineEntry_GetLine(SBLineEntry self) -> uint32_t
SBLineEntry_GetColumn
SBLineEntry_GetColumn(SBLineEntry self) -> uint32_t
SBLineEntry_GetDescription
SBLineEntry_GetDescription(SBLineEntry self, SBStream description) -> bool
SBLineEntry_SetFileSpec
SBLineEntry_SetFileSpec(SBLineEntry self, SBFileSpec filespec)
SBLineEntry_SetLine
SBLineEntry_SetLine(SBLineEntry self, uint32_t line)
SBLineEntry_SetColumn
SBLineEntry_SetColumn(SBLineEntry self, uint32_t column)
SBLineEntry___eq__
SBLineEntry___eq__(SBLineEntry self, SBLineEntry rhs) -> bool
SBLineEntry___ne__
SBLineEntry___ne__(SBLineEntry self, SBLineEntry rhs) -> bool
SBLineEntry___str__
SBLineEntry___str__(SBLineEntry self) -> PyObject *
SBLineEntry_swigregister
new_SBListener
SBListener()
SBListener(char const * name)
new_SBListener(SBListener rhs) -> SBListener
delete_SBListener
delete_SBListener(SBListener self)
SBListener_AddEvent
SBListener_AddEvent(SBListener self, SBEvent event)
SBListener_Clear
SBListener_Clear(SBListener self)
SBListener_IsValid
SBListener_IsValid(SBListener self) -> bool
SBListener___nonzero__
SBListener___nonzero__(SBListener self) -> bool
SBListener_StartListeningForEventClass
SBListener_StartListeningForEventClass(SBListener self, SBDebugger debugger, char const * broadcaster_class, uint32_t event_mask) -> uint32_t
SBListener_StopListeningForEventClass
SBListener_StopListeningForEventClass(SBListener self, SBDebugger debugger, char const * broadcaster_class, uint32_t event_mask) -> uint32_t
SBListener_StartListeningForEvents
SBListener_StartListeningForEvents(SBListener self, SBBroadcaster broadcaster, uint32_t event_mask) -> uint32_t
SBListener_StopListeningForEvents
SBListener_StopListeningForEvents(SBListener self, SBBroadcaster broadcaster, uint32_t event_mask) -> bool
SBListener_WaitForEvent
SBListener_WaitForEvent(SBListener self, uint32_t num_seconds, SBEvent event) -> bool
SBListener_WaitForEventForBroadcaster
SBListener_WaitForEventForBroadcaster(SBListener self, uint32_t num_seconds, SBBroadcaster broadcaster, SBEvent sb_event) -> bool
SBListener_WaitForEventForBroadcasterWithType
SBListener_WaitForEventForBroadcasterWithType(SBListener self, uint32_t num_seconds, SBBroadcaster broadcaster, uint32_t event_type_mask, SBEvent sb_event) -> bool
SBListener_PeekAtNextEvent
SBListener_PeekAtNextEvent(SBListener self, SBEvent sb_event) -> bool
SBListener_PeekAtNextEventForBroadcaster
SBListener_PeekAtNextEventForBroadcaster(SBListener self, SBBroadcaster broadcaster, SBEvent sb_event) -> bool
SBListener_PeekAtNextEventForBroadcasterWithType
SBListener_PeekAtNextEventForBroadcasterWithType(SBListener self, SBBroadcaster broadcaster, uint32_t event_type_mask, SBEvent sb_event) -> bool
SBListener_GetNextEvent
SBListener_GetNextEvent(SBListener self, SBEvent sb_event) -> bool
SBListener_GetNextEventForBroadcaster
SBListener_GetNextEventForBroadcaster(SBListener self, SBBroadcaster broadcaster, SBEvent sb_event) -> bool
SBListener_GetNextEventForBroadcasterWithType
SBListener_GetNextEventForBroadcasterWithType(SBListener self, SBBroadcaster broadcaster, uint32_t event_type_mask, SBEvent sb_event) -> bool
SBListener_HandleBroadcastEvent
SBListener_HandleBroadcastEvent(SBListener self, SBEvent event) -> bool
SBListener_swigregister
new_SBMemoryRegionInfo
SBMemoryRegionInfo()
new_SBMemoryRegionInfo(SBMemoryRegionInfo rhs) -> SBMemoryRegionInfo
delete_SBMemoryRegionInfo
delete_SBMemoryRegionInfo(SBMemoryRegionInfo self)
SBMemoryRegionInfo_Clear
SBMemoryRegionInfo_Clear(SBMemoryRegionInfo self)
SBMemoryRegionInfo_GetRegionBase
SBMemoryRegionInfo_GetRegionBase(SBMemoryRegionInfo self) -> lldb::addr_t
SBMemoryRegionInfo_GetRegionEnd
SBMemoryRegionInfo_GetRegionEnd(SBMemoryRegionInfo self) -> lldb::addr_t
SBMemoryRegionInfo_IsReadable
SBMemoryRegionInfo_IsReadable(SBMemoryRegionInfo self) -> bool
SBMemoryRegionInfo_IsWritable
SBMemoryRegionInfo_IsWritable(SBMemoryRegionInfo self) -> bool
SBMemoryRegionInfo_IsExecutable
SBMemoryRegionInfo_IsExecutable(SBMemoryRegionInfo self) -> bool
SBMemoryRegionInfo_IsMapped
SBMemoryRegionInfo_IsMapped(SBMemoryRegionInfo self) -> bool
SBMemoryRegionInfo_GetName
SBMemoryRegionInfo_GetName(SBMemoryRegionInfo self) -> char const *
SBMemoryRegionInfo___eq__
SBMemoryRegionInfo___eq__(SBMemoryRegionInfo self, SBMemoryRegionInfo rhs) -> bool
SBMemoryRegionInfo___ne__
SBMemoryRegionInfo___ne__(SBMemoryRegionInfo self, SBMemoryRegionInfo rhs) -> bool
SBMemoryRegionInfo_GetDescription
SBMemoryRegionInfo_GetDescription(SBMemoryRegionInfo self, SBStream description) -> bool
SBMemoryRegionInfo___str__
SBMemoryRegionInfo___str__(SBMemoryRegionInfo self) -> PyObject *
SBMemoryRegionInfo_swigregister
new_SBMemoryRegionInfoList
SBMemoryRegionInfoList()
new_SBMemoryRegionInfoList(SBMemoryRegionInfoList rhs) -> SBMemoryRegionInfoList
delete_SBMemoryRegionInfoList
delete_SBMemoryRegionInfoList(SBMemoryRegionInfoList self)
SBMemoryRegionInfoList_GetSize
SBMemoryRegionInfoList_GetSize(SBMemoryRegionInfoList self) -> uint32_t
SBMemoryRegionInfoList_GetMemoryRegionAtIndex
SBMemoryRegionInfoList_GetMemoryRegionAtIndex(SBMemoryRegionInfoList self, uint32_t idx, SBMemoryRegionInfo region_info) -> bool
SBMemoryRegionInfoList_Append
Append(SBMemoryRegionInfo region)
SBMemoryRegionInfoList_Append(SBMemoryRegionInfoList self, SBMemoryRegionInfoList region_list)
SBMemoryRegionInfoList_Clear
SBMemoryRegionInfoList_Clear(SBMemoryRegionInfoList self)
SBMemoryRegionInfoList_swigregister
new_SBModule
SBModule()
SBModule(SBModule rhs)
SBModule(SBModuleSpec module_spec)
new_SBModule(SBProcess process, lldb::addr_t header_addr) -> SBModule
delete_SBModule
delete_SBModule(SBModule self)
SBModule_IsValid
SBModule_IsValid(SBModule self) -> bool
SBModule___nonzero__
SBModule___nonzero__(SBModule self) -> bool
SBModule_Clear
SBModule_Clear(SBModule self)
SBModule_GetFileSpec
SBModule_GetFileSpec(SBModule self) -> SBFileSpec
//------------------------------------------------------------------
/// Get const accessor for the module file specification.
/// This function returns the file for the module on the host system
/// that is running LLDB. This can differ from the path on the 
/// platform since we might be doing remote debugging.
/// @return
///     A const reference to the file specification object.
//------------------------------------------------------------------
SBModule_GetPlatformFileSpec
SBModule_GetPlatformFileSpec(SBModule self) -> SBFileSpec
//------------------------------------------------------------------
/// Get accessor for the module platform file specification.
/// Platform file refers to the path of the module as it is known on
/// the remote system on which it is being debugged. For local 
/// debugging this is always the same as Module::GetFileSpec(). But
/// remote debugging might mention a file '/usr/lib/liba.dylib'
/// which might be locally downloaded and cached. In this case the
/// platform file could be something like:
/// '/tmp/lldb/platform-cache/remote.host.computer/usr/lib/liba.dylib'
/// The file could also be cached in a local developer kit directory.
/// @return
///     A const reference to the file specification object.
//------------------------------------------------------------------
SBModule_SetPlatformFileSpec
SBModule_SetPlatformFileSpec(SBModule self, SBFileSpec platform_file) -> bool
SBModule_GetRemoteInstallFileSpec
SBModule_GetRemoteInstallFileSpec(SBModule self) -> SBFileSpec
SBModule_SetRemoteInstallFileSpec
SBModule_SetRemoteInstallFileSpec(SBModule self, SBFileSpec file) -> bool
SBModule_GetUUIDString
SBModule_GetUUIDString(SBModule self) -> char const *
Returns the UUID of the module as a Python string.
SBModule_FindSection
SBModule_FindSection(SBModule self, char const * sect_name) -> SBSection
SBModule_ResolveFileAddress
SBModule_ResolveFileAddress(SBModule self, lldb::addr_t vm_addr) -> SBAddress
SBModule_ResolveSymbolContextForAddress
SBModule_ResolveSymbolContextForAddress(SBModule self, SBAddress addr, uint32_t resolve_scope) -> SBSymbolContext
SBModule_GetDescription
SBModule_GetDescription(SBModule self, SBStream description) -> bool
SBModule_GetNumCompileUnits
SBModule_GetNumCompileUnits(SBModule self) -> uint32_t
SBModule_GetCompileUnitAtIndex
SBModule_GetCompileUnitAtIndex(SBModule self, uint32_t arg3) -> SBCompileUnit
SBModule_FindCompileUnits
SBModule_FindCompileUnits(SBModule self, SBFileSpec sb_file_spec) -> SBSymbolContextList
//------------------------------------------------------------------
/// Find compile units related to *this module and passed source
/// file.
/// @param[in] sb_file_spec
///     A lldb::SBFileSpec object that contains source file
///     specification.
/// @return
///     A lldb::SBSymbolContextList that gets filled in with all of
///     the symbol contexts for all the matches.
//------------------------------------------------------------------
SBModule_GetNumSymbols
SBModule_GetNumSymbols(SBModule self) -> size_t
SBModule_GetSymbolAtIndex
SBModule_GetSymbolAtIndex(SBModule self, size_t idx) -> SBSymbol
SBModule_FindSymbol
FindSymbol(char const * name, lldb::SymbolType type) -> SBSymbol
SBModule_FindSymbol(SBModule self, char const * name) -> SBSymbol
SBModule_FindSymbols
FindSymbols(char const * name, lldb::SymbolType type) -> SBSymbolContextList
SBModule_FindSymbols(SBModule self, char const * name) -> SBSymbolContextList
SBModule_GetNumSections
SBModule_GetNumSections(SBModule self) -> size_t
SBModule_GetSectionAtIndex
SBModule_GetSectionAtIndex(SBModule self, size_t idx) -> SBSection
SBModule_FindFunctions
FindFunctions(char const * name, uint32_t name_type_mask) -> SBSymbolContextList
SBModule_FindFunctions(SBModule self, char const * name) -> SBSymbolContextList
//------------------------------------------------------------------
/// Find functions by name.
/// @param[in] name
///     The name of the function we are looking for.
/// @param[in] name_type_mask
///     A logical OR of one or more FunctionNameType enum bits that
///     indicate what kind of names should be used when doing the
///     lookup. Bits include fully qualified names, base names,
///     C++ methods, or ObjC selectors. 
///     See FunctionNameType for more details.
/// @return
///     A symbol context list that gets filled in with all of the
///     matches.
//------------------------------------------------------------------
SBModule_FindFirstType
SBModule_FindFirstType(SBModule self, char const * name) -> SBType
SBModule_FindTypes
SBModule_FindTypes(SBModule self, char const * type) -> SBTypeList
SBModule_GetTypeByID
SBModule_GetTypeByID(SBModule self, lldb::user_id_t uid) -> SBType
SBModule_GetBasicType
SBModule_GetBasicType(SBModule self, lldb::BasicType type) -> SBType
SBModule_GetTypes
GetTypes(uint32_t type_mask) -> SBTypeList
SBModule_GetTypes(SBModule self) -> SBTypeList
//------------------------------------------------------------------
/// Get all types matching 
 type_mask from debug info in this
/// module.
/// @param[in] type_mask
///     A bitfield that consists of one or more bits logically OR'ed
///     together from the lldb::TypeClass enumeration. This allows
///     you to request only structure types, or only class, struct
///     and union types. Passing in lldb::eTypeClassAny will return
///     all types found in the debug information for this module.
/// @return
///     A list of types in this module that match 
 type_mask
//------------------------------------------------------------------
SBModule_FindGlobalVariables
SBModule_FindGlobalVariables(SBModule self, SBTarget target, char const * name, uint32_t max_matches) -> SBValueList
//------------------------------------------------------------------
/// Find global and static variables by name.
/// @param[in] target
///     A valid SBTarget instance representing the debuggee.
/// @param[in] name
///     The name of the global or static variable we are looking
///     for.
/// @param[in] max_matches
///     Allow the number of matches to be limited to 
 max_matches.
/// @return
///     A list of matched variables in an SBValueList.
//------------------------------------------------------------------
SBModule_FindFirstGlobalVariable
SBModule_FindFirstGlobalVariable(SBModule self, SBTarget target, char const * name) -> SBValue
//------------------------------------------------------------------
/// Find the first global (or static) variable by name.
/// @param[in] target
///     A valid SBTarget instance representing the debuggee.
/// @param[in] name
///     The name of the global or static variable we are looking
///     for.
/// @return
///     An SBValue that gets filled in with the found variable (if any).
//------------------------------------------------------------------
SBModule_GetByteOrder
SBModule_GetByteOrder(SBModule self) -> lldb::ByteOrder
SBModule_GetAddressByteSize
SBModule_GetAddressByteSize(SBModule self) -> uint32_t
SBModule_GetTriple
SBModule_GetTriple(SBModule self) -> char const *
SBModule_GetVersion
SBModule_GetVersion(SBModule self) -> uint32_t
SBModule_GetSymbolFileSpec
SBModule_GetSymbolFileSpec(SBModule self) -> SBFileSpec
SBModule_GetObjectFileHeaderAddress
SBModule_GetObjectFileHeaderAddress(SBModule self) -> SBAddress
SBModule_IsTypeSystemCompatible
SBModule_IsTypeSystemCompatible(SBModule self, lldb::LanguageType language) -> SBError
SBModule_GetObjectFileEntryPointAddress
SBModule_GetObjectFileEntryPointAddress(SBModule self) -> SBAddress
SBModule___eq__
SBModule___eq__(SBModule self, SBModule rhs) -> bool
SBModule___ne__
SBModule___ne__(SBModule self, SBModule rhs) -> bool
SBModule___str__
SBModule___str__(SBModule self) -> PyObject *
SBModule_swigregister
new_SBModuleSpec
SBModuleSpec()
new_SBModuleSpec(SBModuleSpec rhs) -> SBModuleSpec
delete_SBModuleSpec
delete_SBModuleSpec(SBModuleSpec self)
SBModuleSpec_IsValid
SBModuleSpec_IsValid(SBModuleSpec self) -> bool
SBModuleSpec___nonzero__
SBModuleSpec___nonzero__(SBModuleSpec self) -> bool
SBModuleSpec_Clear
SBModuleSpec_Clear(SBModuleSpec self)
SBModuleSpec_GetFileSpec
SBModuleSpec_GetFileSpec(SBModuleSpec self) -> SBFileSpec
SBModuleSpec_SetFileSpec
SBModuleSpec_SetFileSpec(SBModuleSpec self, SBFileSpec fspec)
SBModuleSpec_GetPlatformFileSpec
SBModuleSpec_GetPlatformFileSpec(SBModuleSpec self) -> SBFileSpec
SBModuleSpec_SetPlatformFileSpec
SBModuleSpec_SetPlatformFileSpec(SBModuleSpec self, SBFileSpec fspec)
SBModuleSpec_GetSymbolFileSpec
SBModuleSpec_GetSymbolFileSpec(SBModuleSpec self) -> SBFileSpec
SBModuleSpec_SetSymbolFileSpec
SBModuleSpec_SetSymbolFileSpec(SBModuleSpec self, SBFileSpec fspec)
SBModuleSpec_GetObjectName
SBModuleSpec_GetObjectName(SBModuleSpec self) -> char const *
SBModuleSpec_SetObjectName
SBModuleSpec_SetObjectName(SBModuleSpec self, char const * name)
SBModuleSpec_GetTriple
SBModuleSpec_GetTriple(SBModuleSpec self) -> char const *
SBModuleSpec_SetTriple
SBModuleSpec_SetTriple(SBModuleSpec self, char const * triple)
SBModuleSpec_GetUUIDBytes
SBModuleSpec_GetUUIDBytes(SBModuleSpec self) -> uint8_t const *
SBModuleSpec_GetUUIDLength
SBModuleSpec_GetUUIDLength(SBModuleSpec self) -> size_t
SBModuleSpec_SetUUIDBytes
SBModuleSpec_SetUUIDBytes(SBModuleSpec self, uint8_t const * uuid, size_t uuid_len) -> bool
SBModuleSpec_GetDescription
SBModuleSpec_GetDescription(SBModuleSpec self, SBStream description) -> bool
SBModuleSpec___str__
SBModuleSpec___str__(SBModuleSpec self) -> PyObject *
SBModuleSpec_swigregister
new_SBModuleSpecList
SBModuleSpecList()
new_SBModuleSpecList(SBModuleSpecList rhs) -> SBModuleSpecList
delete_SBModuleSpecList
delete_SBModuleSpecList(SBModuleSpecList self)
SBModuleSpecList_GetModuleSpecifications
SBModuleSpecList_GetModuleSpecifications(char const * path) -> SBModuleSpecList
SBModuleSpecList_Append
Append(SBModuleSpec spec)
SBModuleSpecList_Append(SBModuleSpecList self, SBModuleSpecList spec_list)
SBModuleSpecList_FindFirstMatchingSpec
SBModuleSpecList_FindFirstMatchingSpec(SBModuleSpecList self, SBModuleSpec match_spec) -> SBModuleSpec
SBModuleSpecList_FindMatchingSpecs
SBModuleSpecList_FindMatchingSpecs(SBModuleSpecList self, SBModuleSpec match_spec) -> SBModuleSpecList
SBModuleSpecList_GetSize
SBModuleSpecList_GetSize(SBModuleSpecList self) -> size_t
SBModuleSpecList_GetSpecAtIndex
SBModuleSpecList_GetSpecAtIndex(SBModuleSpecList self, size_t i) -> SBModuleSpec
SBModuleSpecList_GetDescription
SBModuleSpecList_GetDescription(SBModuleSpecList self, SBStream description) -> bool
SBModuleSpecList___str__
SBModuleSpecList___str__(SBModuleSpecList self) -> PyObject *
SBModuleSpecList_swigregister
new_SBPlatformConnectOptions
SBPlatformConnectOptions(char const * url)
new_SBPlatformConnectOptions(SBPlatformConnectOptions rhs) -> SBPlatformConnectOptions
delete_SBPlatformConnectOptions
delete_SBPlatformConnectOptions(SBPlatformConnectOptions self)
SBPlatformConnectOptions_GetURL
SBPlatformConnectOptions_GetURL(SBPlatformConnectOptions self) -> char const *
SBPlatformConnectOptions_SetURL
SBPlatformConnectOptions_SetURL(SBPlatformConnectOptions self, char const * url)
SBPlatformConnectOptions_GetRsyncEnabled
SBPlatformConnectOptions_GetRsyncEnabled(SBPlatformConnectOptions self) -> bool
SBPlatformConnectOptions_EnableRsync
SBPlatformConnectOptions_EnableRsync(SBPlatformConnectOptions self, char const * options, char const * remote_path_prefix, bool omit_remote_hostname)
SBPlatformConnectOptions_DisableRsync
SBPlatformConnectOptions_DisableRsync(SBPlatformConnectOptions self)
SBPlatformConnectOptions_GetLocalCacheDirectory
SBPlatformConnectOptions_GetLocalCacheDirectory(SBPlatformConnectOptions self) -> char const *
SBPlatformConnectOptions_SetLocalCacheDirectory
SBPlatformConnectOptions_SetLocalCacheDirectory(SBPlatformConnectOptions self, char const * path)
SBPlatformConnectOptions_swigregister
new_SBPlatformShellCommand
SBPlatformShellCommand(char const * shell_command)
new_SBPlatformShellCommand(SBPlatformShellCommand rhs) -> SBPlatformShellCommand
delete_SBPlatformShellCommand
delete_SBPlatformShellCommand(SBPlatformShellCommand self)
SBPlatformShellCommand_Clear
SBPlatformShellCommand_Clear(SBPlatformShellCommand self)
SBPlatformShellCommand_GetCommand
SBPlatformShellCommand_GetCommand(SBPlatformShellCommand self) -> char const *
SBPlatformShellCommand_SetCommand
SBPlatformShellCommand_SetCommand(SBPlatformShellCommand self, char const * shell_command)
SBPlatformShellCommand_GetWorkingDirectory
SBPlatformShellCommand_GetWorkingDirectory(SBPlatformShellCommand self) -> char const *
SBPlatformShellCommand_SetWorkingDirectory
SBPlatformShellCommand_SetWorkingDirectory(SBPlatformShellCommand self, char const * path)
SBPlatformShellCommand_GetTimeoutSeconds
SBPlatformShellCommand_GetTimeoutSeconds(SBPlatformShellCommand self) -> uint32_t
SBPlatformShellCommand_SetTimeoutSeconds
SBPlatformShellCommand_SetTimeoutSeconds(SBPlatformShellCommand self, uint32_t sec)
SBPlatformShellCommand_GetSignal
SBPlatformShellCommand_GetSignal(SBPlatformShellCommand self) -> int
SBPlatformShellCommand_GetStatus
SBPlatformShellCommand_GetStatus(SBPlatformShellCommand self) -> int
SBPlatformShellCommand_GetOutput
SBPlatformShellCommand_GetOutput(SBPlatformShellCommand self) -> char const *
SBPlatformShellCommand_swigregister
new_SBPlatform
SBPlatform()
new_SBPlatform(char const * arg2) -> SBPlatform
delete_SBPlatform
delete_SBPlatform(SBPlatform self)
SBPlatform_IsValid
SBPlatform_IsValid(SBPlatform self) -> bool
SBPlatform___nonzero__
SBPlatform___nonzero__(SBPlatform self) -> bool
SBPlatform_Clear
SBPlatform_Clear(SBPlatform self)
SBPlatform_GetWorkingDirectory
SBPlatform_GetWorkingDirectory(SBPlatform self) -> char const *
SBPlatform_SetWorkingDirectory
SBPlatform_SetWorkingDirectory(SBPlatform self, char const * arg3) -> bool
SBPlatform_GetName
SBPlatform_GetName(SBPlatform self) -> char const *
SBPlatform_ConnectRemote
SBPlatform_ConnectRemote(SBPlatform self, SBPlatformConnectOptions connect_options) -> SBError
SBPlatform_DisconnectRemote
SBPlatform_DisconnectRemote(SBPlatform self)
SBPlatform_IsConnected
SBPlatform_IsConnected(SBPlatform self) -> bool
SBPlatform_GetTriple
SBPlatform_GetTriple(SBPlatform self) -> char const *
SBPlatform_GetHostname
SBPlatform_GetHostname(SBPlatform self) -> char const *
SBPlatform_GetOSBuild
SBPlatform_GetOSBuild(SBPlatform self) -> char const *
SBPlatform_GetOSDescription
SBPlatform_GetOSDescription(SBPlatform self) -> char const *
SBPlatform_GetOSMajorVersion
SBPlatform_GetOSMajorVersion(SBPlatform self) -> uint32_t
SBPlatform_GetOSMinorVersion
SBPlatform_GetOSMinorVersion(SBPlatform self) -> uint32_t
SBPlatform_GetOSUpdateVersion
SBPlatform_GetOSUpdateVersion(SBPlatform self) -> uint32_t
SBPlatform_Get
SBPlatform_Get(SBPlatform self, SBFileSpec src, SBFileSpec dst) -> SBError
SBPlatform_Put
SBPlatform_Put(SBPlatform self, SBFileSpec src, SBFileSpec dst) -> SBError
SBPlatform_Install
SBPlatform_Install(SBPlatform self, SBFileSpec src, SBFileSpec dst) -> SBError
SBPlatform_Run
SBPlatform_Run(SBPlatform self, SBPlatformShellCommand shell_command) -> SBError
SBPlatform_Launch
SBPlatform_Launch(SBPlatform self, SBLaunchInfo launch_info) -> SBError
SBPlatform_Kill
SBPlatform_Kill(SBPlatform self, lldb::pid_t const pid) -> SBError
SBPlatform_MakeDirectory
MakeDirectory(char const * path, uint32_t file_permissions) -> SBError
SBPlatform_MakeDirectory(SBPlatform self, char const * path) -> SBError
SBPlatform_GetFilePermissions
SBPlatform_GetFilePermissions(SBPlatform self, char const * path) -> uint32_t
SBPlatform_SetFilePermissions
SBPlatform_SetFilePermissions(SBPlatform self, char const * path, uint32_t file_permissions) -> SBError
SBPlatform_GetUnixSignals
SBPlatform_GetUnixSignals(SBPlatform self) -> SBUnixSignals
SBPlatform_swigregister
new_SBProcess
SBProcess()
new_SBProcess(SBProcess rhs) -> SBProcess
delete_SBProcess
delete_SBProcess(SBProcess self)
SBProcess_GetBroadcasterClassName
SBProcess_GetBroadcasterClassName() -> char const *
SBProcess_GetPluginName
SBProcess_GetPluginName(SBProcess self) -> char const *
SBProcess_GetShortPluginName
SBProcess_GetShortPluginName(SBProcess self) -> char const *
SBProcess_Clear
SBProcess_Clear(SBProcess self)
SBProcess_IsValid
SBProcess_IsValid(SBProcess self) -> bool
SBProcess___nonzero__
SBProcess___nonzero__(SBProcess self) -> bool
SBProcess_GetTarget
SBProcess_GetTarget(SBProcess self) -> SBTarget
SBProcess_GetByteOrder
SBProcess_GetByteOrder(SBProcess self) -> lldb::ByteOrder
SBProcess_PutSTDIN
Writes data into the current process's stdin. API client specifies a Python
string as the only argument.
SBProcess_GetSTDOUT
Reads data from the current process's stdout stream. API client specifies
the size of the buffer to read data into. It returns the byte buffer in a
Python string.
SBProcess_GetSTDERR
Reads data from the current process's stderr stream. API client specifies
the size of the buffer to read data into. It returns the byte buffer in a
Python string.
SBProcess_GetAsyncProfileData
SBProcess_GetAsyncProfileData(SBProcess self, char * dst) -> size_t
SBProcess_ReportEventState
SBProcess_ReportEventState(SBProcess self, SBEvent event, FILE * out)
SBProcess_AppendEventStateReport
SBProcess_AppendEventStateReport(SBProcess self, SBEvent event, SBCommandReturnObject result)
SBProcess_RemoteAttachToProcessWithID
SBProcess_RemoteAttachToProcessWithID(SBProcess self, lldb::pid_t pid, SBError error) -> bool
//------------------------------------------------------------------
/// Remote connection related functions. These will fail if the
/// process is not in eStateConnected. They are intended for use
/// when connecting to an externally managed debugserver instance.
//------------------------------------------------------------------
SBProcess_RemoteLaunch
SBProcess_RemoteLaunch(SBProcess self, char const ** argv, char const ** envp, char const * stdin_path, char const * stdout_path, char const * stderr_path, char const * working_directory, uint32_t launch_flags, bool stop_at_entry, SBError error) -> bool
See SBTarget.Launch for argument description and usage.
SBProcess_GetNumThreads
SBProcess_GetNumThreads(SBProcess self) -> uint32_t
SBProcess_GetThreadAtIndex
Returns the INDEX'th thread from the list of current threads.  The index
of a thread is only valid for the current stop.  For a persistent thread
identifier use either the thread ID or the IndexID.  See help on SBThread
for more details.
SBProcess_GetThreadByID
Returns the thread with the given thread ID.
SBProcess_GetThreadByIndexID
Returns the thread with the given thread IndexID.
SBProcess_GetSelectedThread
Returns the currently selected thread.
SBProcess_CreateOSPluginThread
Lazily create a thread on demand through the current OperatingSystem plug-in, if the current OperatingSystem plug-in supports it.
SBProcess_SetSelectedThread
SBProcess_SetSelectedThread(SBProcess self, SBThread thread) -> bool
SBProcess_SetSelectedThreadByID
SBProcess_SetSelectedThreadByID(SBProcess self, lldb::tid_t tid) -> bool
SBProcess_SetSelectedThreadByIndexID
SBProcess_SetSelectedThreadByIndexID(SBProcess self, uint32_t index_id) -> bool
SBProcess_GetNumQueues
SBProcess_GetNumQueues(SBProcess self) -> uint32_t
SBProcess_GetQueueAtIndex
SBProcess_GetQueueAtIndex(SBProcess self, uint32_t index) -> SBQueue
SBProcess_GetState
SBProcess_GetState(SBProcess self) -> lldb::StateType
SBProcess_GetExitStatus
SBProcess_GetExitStatus(SBProcess self) -> int
SBProcess_GetExitDescription
SBProcess_GetExitDescription(SBProcess self) -> char const *
SBProcess_GetProcessID
Returns the process ID of the process.
SBProcess_GetUniqueID
Returns an integer ID that is guaranteed to be unique across all process instances. This is not the process ID, just a unique integer for comparison and caching purposes.
SBProcess_GetAddressByteSize
SBProcess_GetAddressByteSize(SBProcess self) -> uint32_t
SBProcess_Destroy
SBProcess_Destroy(SBProcess self) -> SBError
Kills the process and shuts down all threads that were spawned to
track and monitor process.
SBProcess_Continue
SBProcess_Continue(SBProcess self) -> SBError
SBProcess_Stop
SBProcess_Stop(SBProcess self) -> SBError
SBProcess_Kill
SBProcess_Kill(SBProcess self) -> SBError
SBProcess_Detach
SBProcess_Detach(SBProcess self) -> SBError
SBProcess_Signal
SBProcess_Signal(SBProcess self, int signal) -> SBError
Sends the process a unix signal.
SBProcess_GetUnixSignals
SBProcess_GetUnixSignals(SBProcess self) -> SBUnixSignals
SBProcess_GetStopID
GetStopID(bool include_expression_stops=False) -> uint32_t
SBProcess_GetStopID(SBProcess self) -> uint32_t
Returns a stop id that will increase every time the process executes.  If
include_expression_stops is true, then stops caused by expression evaluation
will cause the returned value to increase, otherwise the counter returned will
only increase when execution is continued explicitly by the user.  Note, the value
will always increase, but may increase by more than one per stop.
SBProcess_SendAsyncInterrupt
SBProcess_SendAsyncInterrupt(SBProcess self)
SBProcess_ReadMemory
Reads memory from the current process's address space and removes any
traps that may have been inserted into the memory. It returns the byte
buffer in a Python string. Example:
# Read 4 bytes from address 'addr' and assume error.Success() is True.
content = process.ReadMemory(addr, 4, error)
new_bytes = bytearray(content)
SBProcess_WriteMemory
Writes memory to the current process's address space and maintains any
traps that might be present due to software breakpoints. Example:
# Create a Python string from the byte array.
new_value = str(bytes)
result = process.WriteMemory(addr, new_value, error)
if not error.Success() or result != len(bytes):
    print('SBProcess.WriteMemory() failed!')
SBProcess_ReadCStringFromMemory
Reads a NULL terminated C string from the current process's address space.
It returns a python string of the exact length, or truncates the string if
the maximum character limit is reached. Example:
# Read a C string of at most 256 bytes from address '0x1000' 
error = lldb.SBError()
cstring = process.ReadCStringFromMemory(0x1000, 256, error)
if error.Success():
    print('cstring: ', cstring)
else
    print('error: ', error)
SBProcess_ReadUnsignedFromMemory
Reads an unsigned integer from memory given a byte size and an address. 
Returns the unsigned integer that was read. Example:
# Read a 4 byte unsigned integer from address 0x1000
error = lldb.SBError()
uint = ReadUnsignedFromMemory(0x1000, 4, error)
if error.Success():
    print('integer: %u' % uint)
else
    print('error: ', error)
SBProcess_ReadPointerFromMemory
Reads a pointer from memory from an address and returns the value. Example:
# Read a pointer from address 0x1000
error = lldb.SBError()
ptr = ReadPointerFromMemory(0x1000, error)
if error.Success():
    print('pointer: 0x%x' % ptr)
else
    print('error: ', error)
SBProcess_GetStateFromEvent
SBProcess_GetStateFromEvent(SBEvent event) -> lldb::StateType
SBProcess_GetRestartedFromEvent
SBProcess_GetRestartedFromEvent(SBEvent event) -> bool
SBProcess_GetNumRestartedReasonsFromEvent
SBProcess_GetNumRestartedReasonsFromEvent(SBEvent event) -> size_t
SBProcess_GetRestartedReasonAtIndexFromEvent
SBProcess_GetRestartedReasonAtIndexFromEvent(SBEvent event, size_t idx) -> char const *
SBProcess_GetProcessFromEvent
SBProcess_GetProcessFromEvent(SBEvent event) -> SBProcess
SBProcess_GetInterruptedFromEvent
SBProcess_GetInterruptedFromEvent(SBEvent event) -> bool
SBProcess_GetStructuredDataFromEvent
SBProcess_GetStructuredDataFromEvent(SBEvent event) -> SBStructuredData
SBProcess_EventIsProcessEvent
SBProcess_EventIsProcessEvent(SBEvent event) -> bool
SBProcess_EventIsStructuredDataEvent
SBProcess_EventIsStructuredDataEvent(SBEvent event) -> bool
SBProcess_GetBroadcaster
SBProcess_GetBroadcaster(SBProcess self) -> SBBroadcaster
SBProcess_GetDescription
SBProcess_GetDescription(SBProcess self, SBStream description) -> bool
SBProcess_GetNumSupportedHardwareWatchpoints
SBProcess_GetNumSupportedHardwareWatchpoints(SBProcess self, SBError error) -> uint32_t
SBProcess_LoadImage
SBProcess_LoadImage(SBProcess self, SBFileSpec image_spec, SBError error) -> uint32_t
SBProcess_LoadImageUsingPaths
Load the library whose filename is given by image_spec looking in all the
paths supplied in the paths argument.  If successful, return a token that
can be passed to UnloadImage and fill loaded_path with the path that was
successfully loaded.  On failure, return 
lldb.LLDB_INVALID_IMAGE_TOKEN.
SBProcess_UnloadImage
SBProcess_UnloadImage(SBProcess self, uint32_t image_token) -> SBError
SBProcess_SendEventData
SBProcess_SendEventData(SBProcess self, char const * event_data) -> SBError
SBProcess_GetNumExtendedBacktraceTypes
Return the number of different thread-origin extended backtraces
this process can support as a uint32_t.
When the process is stopped and you have an SBThread, lldb may be
able to show a backtrace of when that thread was originally created,
or the work item was enqueued to it (in the case of a libdispatch 
queue).
SBProcess_GetExtendedBacktraceTypeAtIndex
Takes an index argument, returns the name of one of the thread-origin 
extended backtrace methods as a str.
SBProcess_GetHistoryThreads
SBProcess_GetHistoryThreads(SBProcess self, lldb::addr_t addr) -> SBThreadCollection
SBProcess_IsInstrumentationRuntimePresent
SBProcess_IsInstrumentationRuntimePresent(SBProcess self, lldb::InstrumentationRuntimeType type) -> bool
SBProcess_SaveCore
SBProcess_SaveCore(SBProcess self, char const * file_name) -> SBError
SBProcess_StartTrace
SBProcess_StartTrace(SBProcess self, SBTraceOptions options, SBError error) -> SBTrace
SBProcess_GetMemoryRegionInfo
SBProcess_GetMemoryRegionInfo(SBProcess self, lldb::addr_t load_addr, SBMemoryRegionInfo region_info) -> SBError
SBProcess_GetMemoryRegions
SBProcess_GetMemoryRegions(SBProcess self) -> SBMemoryRegionInfoList
SBProcess_GetProcessInfo
Get information about the process.
Valid process info will only be returned when the process is alive,
use IsValid() to check if the info returned is valid.
process_info = process.GetProcessInfo()
if process_info.IsValid():
    process_info.GetProcessID()
SBProcess___str__
SBProcess___str__(SBProcess self) -> PyObject *
SBProcess_swigregister
new_SBProcessInfo
SBProcessInfo()
new_SBProcessInfo(SBProcessInfo rhs) -> SBProcessInfo
delete_SBProcessInfo
delete_SBProcessInfo(SBProcessInfo self)
SBProcessInfo_IsValid
SBProcessInfo_IsValid(SBProcessInfo self) -> bool
SBProcessInfo___nonzero__
SBProcessInfo___nonzero__(SBProcessInfo self) -> bool
SBProcessInfo_GetName
SBProcessInfo_GetName(SBProcessInfo self) -> char const *
SBProcessInfo_GetExecutableFile
SBProcessInfo_GetExecutableFile(SBProcessInfo self) -> SBFileSpec
SBProcessInfo_GetProcessID
SBProcessInfo_GetProcessID(SBProcessInfo self) -> lldb::pid_t
SBProcessInfo_GetUserID
SBProcessInfo_GetUserID(SBProcessInfo self) -> uint32_t
SBProcessInfo_GetGroupID
SBProcessInfo_GetGroupID(SBProcessInfo self) -> uint32_t
SBProcessInfo_UserIDIsValid
SBProcessInfo_UserIDIsValid(SBProcessInfo self) -> bool
SBProcessInfo_GroupIDIsValid
SBProcessInfo_GroupIDIsValid(SBProcessInfo self) -> bool
SBProcessInfo_GetEffectiveUserID
SBProcessInfo_GetEffectiveUserID(SBProcessInfo self) -> uint32_t
SBProcessInfo_GetEffectiveGroupID
SBProcessInfo_GetEffectiveGroupID(SBProcessInfo self) -> uint32_t
SBProcessInfo_EffectiveUserIDIsValid
SBProcessInfo_EffectiveUserIDIsValid(SBProcessInfo self) -> bool
SBProcessInfo_EffectiveGroupIDIsValid
SBProcessInfo_EffectiveGroupIDIsValid(SBProcessInfo self) -> bool
SBProcessInfo_GetParentProcessID
SBProcessInfo_GetParentProcessID(SBProcessInfo self) -> lldb::pid_t
SBProcessInfo_swigregister
new_SBQueue
SBQueue()
new_SBQueue(lldb::QueueSP const & queue_sp) -> SBQueue
delete_SBQueue
delete_SBQueue(SBQueue self)
SBQueue_IsValid
SBQueue_IsValid(SBQueue self) -> bool
SBQueue___nonzero__
SBQueue___nonzero__(SBQueue self) -> bool
SBQueue_Clear
SBQueue_Clear(SBQueue self)
SBQueue_GetProcess
SBQueue_GetProcess(SBQueue self) -> SBProcess
SBQueue_GetQueueID
Returns an lldb::queue_id_t type unique identifier number for this
queue that will not be used by any other queue during this process'
execution.  These ID numbers often start at 1 with the first
system-created queues and increment from there.
SBQueue_GetName
SBQueue_GetName(SBQueue self) -> char const *
SBQueue_GetKind
Returns an lldb::QueueKind enumerated value (e.g. eQueueKindUnknown, 
eQueueKindSerial, eQueueKindConcurrent) describing the type of this
queue.
SBQueue_GetIndexID
SBQueue_GetIndexID(SBQueue self) -> uint32_t
SBQueue_GetNumThreads
SBQueue_GetNumThreads(SBQueue self) -> uint32_t
SBQueue_GetThreadAtIndex
SBQueue_GetThreadAtIndex(SBQueue self, uint32_t arg3) -> SBThread
SBQueue_GetNumPendingItems
SBQueue_GetNumPendingItems(SBQueue self) -> uint32_t
SBQueue_GetPendingItemAtIndex
SBQueue_GetPendingItemAtIndex(SBQueue self, uint32_t arg3) -> SBQueueItem
SBQueue_GetNumRunningItems
SBQueue_GetNumRunningItems(SBQueue self) -> uint32_t
SBQueue_swigregister
new_SBQueueItem
SBQueueItem()
new_SBQueueItem(lldb::QueueItemSP const & queue_item_sp) -> SBQueueItem
delete_SBQueueItem
delete_SBQueueItem(SBQueueItem self)
SBQueueItem_IsValid
SBQueueItem_IsValid(SBQueueItem self) -> bool
SBQueueItem___nonzero__
SBQueueItem___nonzero__(SBQueueItem self) -> bool
SBQueueItem_Clear
SBQueueItem_Clear(SBQueueItem self)
SBQueueItem_GetKind
SBQueueItem_GetKind(SBQueueItem self) -> lldb::QueueItemKind
SBQueueItem_SetKind
SBQueueItem_SetKind(SBQueueItem self, lldb::QueueItemKind kind)
SBQueueItem_GetAddress
SBQueueItem_GetAddress(SBQueueItem self) -> SBAddress
SBQueueItem_SetAddress
SBQueueItem_SetAddress(SBQueueItem self, SBAddress addr)
SBQueueItem_SetQueueItem
SBQueueItem_SetQueueItem(SBQueueItem self, lldb::QueueItemSP const & queue_item_sp)
SBQueueItem_GetExtendedBacktraceThread
SBQueueItem_GetExtendedBacktraceThread(SBQueueItem self, char const * type) -> SBThread
SBQueueItem_swigregister
new_SBSection
SBSection()
new_SBSection(SBSection rhs) -> SBSection
delete_SBSection
delete_SBSection(SBSection self)
SBSection_IsValid
SBSection_IsValid(SBSection self) -> bool
SBSection___nonzero__
SBSection___nonzero__(SBSection self) -> bool
SBSection_GetName
SBSection_GetName(SBSection self) -> char const *
SBSection_GetParent
SBSection_GetParent(SBSection self) -> SBSection
SBSection_FindSubSection
SBSection_FindSubSection(SBSection self, char const * sect_name) -> SBSection
SBSection_GetNumSubSections
SBSection_GetNumSubSections(SBSection self) -> size_t
SBSection_GetSubSectionAtIndex
SBSection_GetSubSectionAtIndex(SBSection self, size_t idx) -> SBSection
SBSection_GetFileAddress
SBSection_GetFileAddress(SBSection self) -> lldb::addr_t
SBSection_GetLoadAddress
SBSection_GetLoadAddress(SBSection self, SBTarget target) -> lldb::addr_t
SBSection_GetByteSize
SBSection_GetByteSize(SBSection self) -> lldb::addr_t
SBSection_GetFileOffset
SBSection_GetFileOffset(SBSection self) -> uint64_t
SBSection_GetFileByteSize
SBSection_GetFileByteSize(SBSection self) -> uint64_t
SBSection_GetSectionData
GetSectionData() -> SBData
SBSection_GetSectionData(SBSection self, uint64_t offset, uint64_t size) -> SBData
SBSection_GetSectionType
SBSection_GetSectionType(SBSection self) -> lldb::SectionType
SBSection_GetPermissions
SBSection_GetPermissions(SBSection self) -> uint32_t
SBSection_GetTargetByteSize
SBSection_GetTargetByteSize(SBSection self) -> uint32_t
//------------------------------------------------------------------
/// Return the size of a target's byte represented by this section
/// in numbers of host bytes. Note that certain architectures have
/// varying minimum addressable unit (i.e. byte) size for their 
/// CODE or DATA buses.
/// @return
///     The number of host (8-bit) bytes needed to hold a target byte
//------------------------------------------------------------------
SBSection_GetDescription
SBSection_GetDescription(SBSection self, SBStream description) -> bool
SBSection___eq__
SBSection___eq__(SBSection self, SBSection rhs) -> bool
SBSection___ne__
SBSection___ne__(SBSection self, SBSection rhs) -> bool
SBSection___str__
SBSection___str__(SBSection self) -> PyObject *
SBSection_swigregister
new_SBSourceManager
new_SBSourceManager(SBSourceManager rhs) -> SBSourceManager
delete_SBSourceManager
delete_SBSourceManager(SBSourceManager self)
SBSourceManager_DisplaySourceLinesWithLineNumbers
SBSourceManager_DisplaySourceLinesWithLineNumbers(SBSourceManager self, SBFileSpec file, uint32_t line, uint32_t context_before, uint32_t context_after, char const * current_line_cstr, SBStream s) -> size_t
SBSourceManager_DisplaySourceLinesWithLineNumbersAndColumn
SBSourceManager_DisplaySourceLinesWithLineNumbersAndColumn(SBSourceManager self, SBFileSpec file, uint32_t line, uint32_t column, uint32_t context_before, uint32_t context_after, char const * current_line_cstr, SBStream s) -> size_t
SBSourceManager_swigregister
new_SBStream
new_SBStream() -> SBStream
delete_SBStream
delete_SBStream(SBStream self)
SBStream_IsValid
SBStream_IsValid(SBStream self) -> bool
SBStream___nonzero__
SBStream___nonzero__(SBStream self) -> bool
SBStream_GetData
SBStream_GetData(SBStream self) -> char const *
//--------------------------------------------------------------------------
/// If this stream is not redirected to a file, it will maintain a local
/// cache for the stream data which can be accessed using this accessor.
//--------------------------------------------------------------------------
SBStream_GetSize
SBStream_GetSize(SBStream self) -> size_t
//--------------------------------------------------------------------------
/// If this stream is not redirected to a file, it will maintain a local
/// cache for the stream output whose length can be accessed using this 
/// accessor.
//--------------------------------------------------------------------------
SBStream_Print
SBStream_Print(SBStream self, char const * str)
SBStream_RedirectToFile
SBStream_RedirectToFile(SBStream self, char const * path, bool append)
SBStream_RedirectToFileHandle
SBStream_RedirectToFileHandle(SBStream self, FILE * fh, bool transfer_fh_ownership)
SBStream_RedirectToFileDescriptor
SBStream_RedirectToFileDescriptor(SBStream self, int fd, bool transfer_fh_ownership)
SBStream_Clear
SBStream_Clear(SBStream self)
//--------------------------------------------------------------------------
/// If the stream is redirected to a file, forget about the file and if
/// ownership of the file was transferred to this object, close the file.
/// If the stream is backed by a local cache, clear this cache.
//--------------------------------------------------------------------------
SBStream_write
SBStream_write(SBStream self, char const * str)
SBStream_flush
SBStream_flush(SBStream self)
SBStream_swigregister
new_SBStringList
SBStringList()
new_SBStringList(SBStringList rhs) -> SBStringList
delete_SBStringList
delete_SBStringList(SBStringList self)
SBStringList_IsValid
SBStringList_IsValid(SBStringList self) -> bool
SBStringList___nonzero__
SBStringList___nonzero__(SBStringList self) -> bool
SBStringList_AppendString
SBStringList_AppendString(SBStringList self, char const * str)
SBStringList_AppendList
AppendList(char const ** strv, int strc)
SBStringList_AppendList(SBStringList self, SBStringList strings)
SBStringList_GetSize
SBStringList_GetSize(SBStringList self) -> uint32_t
SBStringList_GetStringAtIndex
SBStringList_GetStringAtIndex(SBStringList self, size_t idx) -> char const *
SBStringList_Clear
SBStringList_Clear(SBStringList self)
SBStringList_swigregister
new_SBStructuredData
SBStructuredData()
SBStructuredData(SBStructuredData rhs)
new_SBStructuredData(lldb::EventSP const & event_sp) -> SBStructuredData
delete_SBStructuredData
delete_SBStructuredData(SBStructuredData self)
SBStructuredData_IsValid
SBStructuredData_IsValid(SBStructuredData self) -> bool
SBStructuredData___nonzero__
SBStructuredData___nonzero__(SBStructuredData self) -> bool
SBStructuredData_Clear
SBStructuredData_Clear(SBStructuredData self)
SBStructuredData_GetType
SBStructuredData_GetType(SBStructuredData self) -> lldb::StructuredDataType
SBStructuredData_GetSize
SBStructuredData_GetSize(SBStructuredData self) -> size_t
SBStructuredData_GetKeys
SBStructuredData_GetKeys(SBStructuredData self, SBStringList keys) -> bool
SBStructuredData_GetValueForKey
SBStructuredData_GetValueForKey(SBStructuredData self, char const * key) -> SBStructuredData
SBStructuredData_GetItemAtIndex
SBStructuredData_GetItemAtIndex(SBStructuredData self, size_t idx) -> SBStructuredData
SBStructuredData_GetIntegerValue
GetIntegerValue(uint64_t fail_value=0) -> uint64_t
SBStructuredData_GetIntegerValue(SBStructuredData self) -> uint64_t
SBStructuredData_GetFloatValue
GetFloatValue(double fail_value=0.0) -> double
SBStructuredData_GetFloatValue(SBStructuredData self) -> double
SBStructuredData_GetBooleanValue
GetBooleanValue(bool fail_value=False) -> bool
SBStructuredData_GetBooleanValue(SBStructuredData self) -> bool
SBStructuredData_GetStringValue
SBStructuredData_GetStringValue(SBStructuredData self, char * dst) -> size_t
SBStructuredData_GetAsJSON
SBStructuredData_GetAsJSON(SBStructuredData self, SBStream stream) -> SBError
SBStructuredData_GetDescription
SBStructuredData_GetDescription(SBStructuredData self, SBStream stream) -> SBError
SBStructuredData_SetFromJSON
SBStructuredData_SetFromJSON(SBStructuredData self, SBStream stream) -> SBError
SBStructuredData_swigregister
delete_SBSymbol
delete_SBSymbol(SBSymbol self)
new_SBSymbol
SBSymbol()
new_SBSymbol(SBSymbol rhs) -> SBSymbol
SBSymbol_IsValid
SBSymbol_IsValid(SBSymbol self) -> bool
SBSymbol___nonzero__
SBSymbol___nonzero__(SBSymbol self) -> bool
SBSymbol_GetName
SBSymbol_GetName(SBSymbol self) -> char const *
SBSymbol_GetDisplayName
SBSymbol_GetDisplayName(SBSymbol self) -> char const *
SBSymbol_GetMangledName
SBSymbol_GetMangledName(SBSymbol self) -> char const *
SBSymbol_GetInstructions
GetInstructions(SBTarget target) -> SBInstructionList
SBSymbol_GetInstructions(SBSymbol self, SBTarget target, char const * flavor_string) -> SBInstructionList
SBSymbol_GetStartAddress
SBSymbol_GetStartAddress(SBSymbol self) -> SBAddress
SBSymbol_GetEndAddress
SBSymbol_GetEndAddress(SBSymbol self) -> SBAddress
SBSymbol_GetPrologueByteSize
SBSymbol_GetPrologueByteSize(SBSymbol self) -> uint32_t
SBSymbol_GetType
SBSymbol_GetType(SBSymbol self) -> lldb::SymbolType
SBSymbol_GetDescription
SBSymbol_GetDescription(SBSymbol self, SBStream description) -> bool
SBSymbol_IsExternal
SBSymbol_IsExternal(SBSymbol self) -> bool
SBSymbol_IsSynthetic
SBSymbol_IsSynthetic(SBSymbol self) -> bool
SBSymbol___eq__
SBSymbol___eq__(SBSymbol self, SBSymbol rhs) -> bool
SBSymbol___ne__
SBSymbol___ne__(SBSymbol self, SBSymbol rhs) -> bool
SBSymbol___str__
SBSymbol___str__(SBSymbol self) -> PyObject *
SBSymbol_swigregister
new_SBSymbolContext
SBSymbolContext()
new_SBSymbolContext(SBSymbolContext rhs) -> SBSymbolContext
delete_SBSymbolContext
delete_SBSymbolContext(SBSymbolContext self)
SBSymbolContext_IsValid
SBSymbolContext_IsValid(SBSymbolContext self) -> bool
SBSymbolContext___nonzero__
SBSymbolContext___nonzero__(SBSymbolContext self) -> bool
SBSymbolContext_GetModule
SBSymbolContext_GetModule(SBSymbolContext self) -> SBModule
SBSymbolContext_GetCompileUnit
SBSymbolContext_GetCompileUnit(SBSymbolContext self) -> SBCompileUnit
SBSymbolContext_GetFunction
SBSymbolContext_GetFunction(SBSymbolContext self) -> SBFunction
SBSymbolContext_GetBlock
SBSymbolContext_GetBlock(SBSymbolContext self) -> SBBlock
SBSymbolContext_GetLineEntry
SBSymbolContext_GetLineEntry(SBSymbolContext self) -> SBLineEntry
SBSymbolContext_GetSymbol
SBSymbolContext_GetSymbol(SBSymbolContext self) -> SBSymbol
SBSymbolContext_SetModule
SBSymbolContext_SetModule(SBSymbolContext self, SBModule module)
SBSymbolContext_SetCompileUnit
SBSymbolContext_SetCompileUnit(SBSymbolContext self, SBCompileUnit compile_unit)
SBSymbolContext_SetFunction
SBSymbolContext_SetFunction(SBSymbolContext self, SBFunction function)
SBSymbolContext_SetBlock
SBSymbolContext_SetBlock(SBSymbolContext self, SBBlock block)
SBSymbolContext_SetLineEntry
SBSymbolContext_SetLineEntry(SBSymbolContext self, SBLineEntry line_entry)
SBSymbolContext_SetSymbol
SBSymbolContext_SetSymbol(SBSymbolContext self, SBSymbol symbol)
SBSymbolContext_GetParentOfInlinedScope
SBSymbolContext_GetParentOfInlinedScope(SBSymbolContext self, SBAddress curr_frame_pc, SBAddress parent_frame_addr) -> SBSymbolContext
SBSymbolContext_GetDescription
SBSymbolContext_GetDescription(SBSymbolContext self, SBStream description) -> bool
SBSymbolContext___str__
SBSymbolContext___str__(SBSymbolContext self) -> PyObject *
SBSymbolContext_swigregister
new_SBSymbolContextList
SBSymbolContextList()
new_SBSymbolContextList(SBSymbolContextList rhs) -> SBSymbolContextList
delete_SBSymbolContextList
delete_SBSymbolContextList(SBSymbolContextList self)
SBSymbolContextList_IsValid
SBSymbolContextList_IsValid(SBSymbolContextList self) -> bool
SBSymbolContextList___nonzero__
SBSymbolContextList___nonzero__(SBSymbolContextList self) -> bool
SBSymbolContextList_GetSize
SBSymbolContextList_GetSize(SBSymbolContextList self) -> uint32_t
SBSymbolContextList_GetContextAtIndex
SBSymbolContextList_GetContextAtIndex(SBSymbolContextList self, uint32_t idx) -> SBSymbolContext
SBSymbolContextList_Append
Append(SBSymbolContext sc)
SBSymbolContextList_Append(SBSymbolContextList self, SBSymbolContextList sc_list)
SBSymbolContextList_GetDescription
SBSymbolContextList_GetDescription(SBSymbolContextList self, SBStream description) -> bool
SBSymbolContextList_Clear
SBSymbolContextList_Clear(SBSymbolContextList self)
SBSymbolContextList___str__
SBSymbolContextList___str__(SBSymbolContextList self) -> PyObject *
SBSymbolContextList_swigregister
new_SBTarget
SBTarget()
new_SBTarget(SBTarget rhs) -> SBTarget
delete_SBTarget
delete_SBTarget(SBTarget self)
SBTarget_GetBroadcasterClassName
SBTarget_GetBroadcasterClassName() -> char const *
SBTarget_IsValid
SBTarget_IsValid(SBTarget self) -> bool
SBTarget___nonzero__
SBTarget___nonzero__(SBTarget self) -> bool
SBTarget_EventIsTargetEvent
SBTarget_EventIsTargetEvent(SBEvent event) -> bool
SBTarget_GetTargetFromEvent
SBTarget_GetTargetFromEvent(SBEvent event) -> SBTarget
SBTarget_GetNumModulesFromEvent
SBTarget_GetNumModulesFromEvent(SBEvent event) -> uint32_t
SBTarget_GetModuleAtIndexFromEvent
SBTarget_GetModuleAtIndexFromEvent(uint32_t const idx, SBEvent event) -> SBModule
SBTarget_GetProcess
SBTarget_GetProcess(SBTarget self) -> SBProcess
SBTarget_GetPlatform
SBTarget_GetPlatform(SBTarget self) -> SBPlatform
//------------------------------------------------------------------
/// Return the platform object associated with the target.
/// After return, the platform object should be checked for
/// validity.
/// @return
///     A platform object.
//------------------------------------------------------------------
SBTarget_Install
SBTarget_Install(SBTarget self) -> SBError
//------------------------------------------------------------------
/// Install any binaries that need to be installed.
/// This function does nothing when debugging on the host system.
/// When connected to remote platforms, the target's main executable
/// and any modules that have their install path set will be
/// installed on the remote platform. If the main executable doesn't
/// have an install location set, it will be installed in the remote
/// platform's working directory.
/// @return
///     An error describing anything that went wrong during
///     installation.
//------------------------------------------------------------------
SBTarget_LaunchSimple
SBTarget_LaunchSimple(SBTarget self, char const ** argv, char const ** envp, char const * working_directory) -> SBProcess
//------------------------------------------------------------------
/// Launch a new process with sensible defaults.
/// @param[in] argv
///     The argument array.
/// @param[in] envp
///     The environment array.
/// @param[in] working_directory
///     The working directory to have the child process run in
/// Default: listener
///     Set to the target's debugger (SBTarget::GetDebugger())
/// Default: launch_flags
///     Empty launch flags
/// Default: stdin_path
/// Default: stdout_path
/// Default: stderr_path
///     A pseudo terminal will be used.
/// @return
///      A process object for the newly created process.
//------------------------------------------------------------------
For example,
    process = target.LaunchSimple(['X', 'Y', 'Z'], None, os.getcwd())
launches a new process by passing 'X', 'Y', 'Z' as the args to the
executable.
SBTarget_Launch
Launch(SBListener listener, char const ** argv, char const ** envp, char const * stdin_path, char const * stdout_path, char const * stderr_path, char const * working_directory, uint32_t launch_flags, bool stop_at_entry, SBError error) -> SBProcess
SBTarget_Launch(SBTarget self, SBLaunchInfo launch_info, SBError error) -> SBProcess
//------------------------------------------------------------------
/// Launch a new process.
/// Launch a new process by spawning a new process using the
/// target object's executable module's file as the file to launch.
/// Arguments are given in 
 argv, and the environment variables
/// are in 
 envp. Standard input and output files can be
/// optionally re-directed to 
 stdin_path, 
 stdout_path, and
/// 
 stderr_path.
/// @param[in] listener
///     An optional listener that will receive all process events.
///     If 
 listener is valid then 
 listener will listen to all
///     process events. If not valid, then this target's debugger
///     (SBTarget::GetDebugger()) will listen to all process events.
/// @param[in] argv
///     The argument array.
/// @param[in] envp
///     The environment array.
/// @param[in] launch_flags
///     Flags to modify the launch (@see lldb::LaunchFlags)
/// @param[in] stdin_path
///     The path to use when re-directing the STDIN of the new
///     process. If all stdXX_path arguments are NULL, a pseudo
///     terminal will be used.
/// @param[in] stdout_path
///     The path to use when re-directing the STDOUT of the new
///     process. If all stdXX_path arguments are NULL, a pseudo
///     terminal will be used.
/// @param[in] stderr_path
///     The path to use when re-directing the STDERR of the new
///     process. If all stdXX_path arguments are NULL, a pseudo
///     terminal will be used.
/// @param[in] working_directory
///     The working directory to have the child process run in
/// @param[in] launch_flags
///     Some launch options specified by logical OR'ing
///     lldb::LaunchFlags enumeration values together.
/// @param[in] stop_at_entry
///     If false do not stop the inferior at the entry point.
/// @param[out]
///     An error object. Contains the reason if there is some failure.
/// @return
///      A process object for the newly created process.
//------------------------------------------------------------------
For example,
    process = target.Launch(self.dbg.GetListener(), None, None,
                            None, '/tmp/stdout.txt', None,
                            None, 0, False, error)
launches a new process by passing nothing for both the args and the envs
and redirect the standard output of the inferior to the /tmp/stdout.txt
file. It does not specify a working directory so that the debug server
will use its idea of what the current working directory is for the
inferior. Also, we ask the debugger not to stop the inferior at the
entry point. If no breakpoint is specified for the inferior, it should
run to completion if no user interaction is required.
SBTarget_LoadCore
LoadCore(char const * core_file) -> SBProcess
SBTarget_LoadCore(SBTarget self, char const * core_file, SBError error) -> SBProcess
//------------------------------------------------------------------
/// Load a core file
/// @param[in] core_file
///     File path of the core dump.
/// @param[out] error
///     An error explaining what went wrong if the operation fails.
///     (Optional)
/// @return
///      A process object for the newly created core file.
//------------------------------------------------------------------
For example,
    process = target.LoadCore('./a.out.core')
loads a new core file and returns the process object.
SBTarget_Attach
SBTarget_Attach(SBTarget self, SBAttachInfo attach_info, SBError error) -> SBProcess
SBTarget_AttachToProcessWithID
SBTarget_AttachToProcessWithID(SBTarget self, SBListener listener, lldb::pid_t pid, SBError error) -> SBProcess
//------------------------------------------------------------------
/// Attach to process with pid.
/// @param[in] listener
///     An optional listener that will receive all process events.
///     If 
 listener is valid then 
 listener will listen to all
///     process events. If not valid, then this target's debugger
///     (SBTarget::GetDebugger()) will listen to all process events.
/// @param[in] pid
///     The process ID to attach to.
/// @param[out]
///     An error explaining what went wrong if attach fails.
/// @return
///      A process object for the attached process.
//------------------------------------------------------------------
SBTarget_AttachToProcessWithName
SBTarget_AttachToProcessWithName(SBTarget self, SBListener listener, char const * name, bool wait_for, SBError error) -> SBProcess
//------------------------------------------------------------------
/// Attach to process with name.
/// @param[in] listener
///     An optional listener that will receive all process events.
///     If 
 listener is valid then 
 listener will listen to all
///     process events. If not valid, then this target's debugger
///     (SBTarget::GetDebugger()) will listen to all process events.
/// @param[in] name
///     Basename of process to attach to.
/// @param[in] wait_for
///     If true wait for a new instance of 'name' to be launched.
/// @param[out]
///     An error explaining what went wrong if attach fails.
/// @return
///      A process object for the attached process.
//------------------------------------------------------------------
SBTarget_ConnectRemote
SBTarget_ConnectRemote(SBTarget self, SBListener listener, char const * url, char const * plugin_name, SBError error) -> SBProcess
//------------------------------------------------------------------
/// Connect to a remote debug server with url.
/// @param[in] listener
///     An optional listener that will receive all process events.
///     If 
 listener is valid then 
 listener will listen to all
///     process events. If not valid, then this target's debugger
///     (SBTarget::GetDebugger()) will listen to all process events.
/// @param[in] url
///     The url to connect to, e.g., 'connect://localhost:12345'.
/// @param[in] plugin_name
///     The plugin name to be used; can be NULL.
/// @param[out]
///     An error explaining what went wrong if the connect fails.
/// @return
///      A process object for the connected process.
//------------------------------------------------------------------
SBTarget_GetExecutable
SBTarget_GetExecutable(SBTarget self) -> SBFileSpec
SBTarget_AppendImageSearchPath
SBTarget_AppendImageSearchPath(SBTarget self, char const * arg3, char const * to, SBError error)
/// Append the path mapping (from -> to) to the target's paths mapping list.
SBTarget_AddModule
AddModule(SBModule module) -> bool
AddModule(char const * path, char const * triple, char const * uuid) -> SBModule
AddModule(char const * path, char const * triple, char const * uuid_cstr, char const * symfile) -> SBModule
SBTarget_AddModule(SBTarget self, SBModuleSpec module_spec) -> SBModule
SBTarget_GetNumModules
SBTarget_GetNumModules(SBTarget self) -> uint32_t
SBTarget_GetModuleAtIndex
SBTarget_GetModuleAtIndex(SBTarget self, uint32_t idx) -> SBModule
SBTarget_RemoveModule
SBTarget_RemoveModule(SBTarget self, SBModule module) -> bool
SBTarget_GetDebugger
SBTarget_GetDebugger(SBTarget self) -> SBDebugger
SBTarget_FindModule
SBTarget_FindModule(SBTarget self, SBFileSpec file_spec) -> SBModule
SBTarget_FindCompileUnits
SBTarget_FindCompileUnits(SBTarget self, SBFileSpec sb_file_spec) -> SBSymbolContextList
//------------------------------------------------------------------
/// Find compile units related to *this target and passed source
/// file.
/// @param[in] sb_file_spec
///     A lldb::SBFileSpec object that contains source file
///     specification.
/// @return
///     A lldb::SBSymbolContextList that gets filled in with all of
///     the symbol contexts for all the matches.
//------------------------------------------------------------------
SBTarget_GetByteOrder
SBTarget_GetByteOrder(SBTarget self) -> lldb::ByteOrder
SBTarget_GetAddressByteSize
SBTarget_GetAddressByteSize(SBTarget self) -> uint32_t
SBTarget_GetTriple
SBTarget_GetTriple(SBTarget self) -> char const *
SBTarget_GetDataByteSize
SBTarget_GetDataByteSize(SBTarget self) -> uint32_t
//------------------------------------------------------------------
/// Architecture data byte width accessor
/// @return
/// The size in 8-bit (host) bytes of a minimum addressable
/// unit from the Architecture's data bus
//------------------------------------------------------------------
SBTarget_GetCodeByteSize
SBTarget_GetCodeByteSize(SBTarget self) -> uint32_t
//------------------------------------------------------------------
/// Architecture code byte width accessor
/// @return
/// The size in 8-bit (host) bytes of a minimum addressable
/// unit from the Architecture's code bus
//------------------------------------------------------------------
SBTarget_SetSectionLoadAddress
SBTarget_SetSectionLoadAddress(SBTarget self, SBSection section, lldb::addr_t section_base_addr) -> SBError
SBTarget_ClearSectionLoadAddress
SBTarget_ClearSectionLoadAddress(SBTarget self, SBSection section) -> SBError
SBTarget_SetModuleLoadAddress
SBTarget_SetModuleLoadAddress(SBTarget self, SBModule module, int64_t sections_offset) -> SBError
SBTarget_ClearModuleLoadAddress
SBTarget_ClearModuleLoadAddress(SBTarget self, SBModule module) -> SBError
SBTarget_FindFunctions
FindFunctions(char const * name, uint32_t name_type_mask) -> SBSymbolContextList
SBTarget_FindFunctions(SBTarget self, char const * name) -> SBSymbolContextList
//------------------------------------------------------------------
/// Find functions by name.
/// @param[in] name
///     The name of the function we are looking for.
/// @param[in] name_type_mask
///     A logical OR of one or more FunctionNameType enum bits that
///     indicate what kind of names should be used when doing the
///     lookup. Bits include fully qualified names, base names,
///     C++ methods, or ObjC selectors.
///     See FunctionNameType for more details.
/// @return
///     A lldb::SBSymbolContextList that gets filled in with all of
///     the symbol contexts for all the matches.
//------------------------------------------------------------------
SBTarget_FindFirstType
SBTarget_FindFirstType(SBTarget self, char const * type) -> SBType
SBTarget_FindTypes
SBTarget_FindTypes(SBTarget self, char const * type) -> SBTypeList
SBTarget_GetBasicType
SBTarget_GetBasicType(SBTarget self, lldb::BasicType type) -> SBType
SBTarget_GetSourceManager
SBTarget_GetSourceManager(SBTarget self) -> SBSourceManager
SBTarget_FindFirstGlobalVariable
SBTarget_FindFirstGlobalVariable(SBTarget self, char const * name) -> SBValue
//------------------------------------------------------------------
/// Find the first global (or static) variable by name.
/// @param[in] name
///     The name of the global or static variable we are looking
///     for.
/// @return
///     An SBValue that gets filled in with the found variable (if any).
//------------------------------------------------------------------
SBTarget_FindGlobalVariables
FindGlobalVariables(char const * name, uint32_t max_matches) -> SBValueList
SBTarget_FindGlobalVariables(SBTarget self, char const * name, uint32_t max_matches, lldb::MatchType matchtype) -> SBValueList
//------------------------------------------------------------------
/// Find global and static variables by name.
/// @param[in] name
///     The name of the global or static variable we are looking
///     for.
/// @param[in] max_matches
///     Allow the number of matches to be limited to 
 max_matches.
/// @return
///     A list of matched variables in an SBValueList.
//------------------------------------------------------------------
SBTarget_FindGlobalFunctions
SBTarget_FindGlobalFunctions(SBTarget self, char const * name, uint32_t max_matches, lldb::MatchType matchtype) -> SBSymbolContextList
SBTarget_Clear
SBTarget_Clear(SBTarget self)
SBTarget_ResolveFileAddress
SBTarget_ResolveFileAddress(SBTarget self, lldb::addr_t file_addr) -> SBAddress
//------------------------------------------------------------------
/// Resolve a current file address into a section offset address.
/// @param[in] file_addr
/// @return
///     An SBAddress which will be valid if...
//------------------------------------------------------------------
SBTarget_ResolveLoadAddress
SBTarget_ResolveLoadAddress(SBTarget self, lldb::addr_t vm_addr) -> SBAddress
SBTarget_ResolvePastLoadAddress
SBTarget_ResolvePastLoadAddress(SBTarget self, uint32_t stop_id, lldb::addr_t vm_addr) -> SBAddress
SBTarget_ResolveSymbolContextForAddress
SBTarget_ResolveSymbolContextForAddress(SBTarget self, SBAddress addr, uint32_t resolve_scope) -> SBSymbolContext
SBTarget_ReadMemory
SBTarget_ReadMemory(SBTarget self, SBAddress addr, void * buf, SBError error) -> size_t
//------------------------------------------------------------------
/// Read target memory. If a target process is running then memory
/// is read from here. Otherwise the memory is read from the object
/// files. For a target whose bytes are sized as a multiple of host
/// bytes, the data read back will preserve the target's byte order.
/// @param[in] addr
///     A target address to read from.
/// @param[out] buf
///     The buffer to read memory into.
/// @param[in] size
///     The maximum number of host bytes to read in the buffer passed
///     into this call
/// @param[out] error
///     Error information is written here if the memory read fails.
/// @return
///     The amount of data read in host bytes.
//------------------------------------------------------------------
SBTarget_BreakpointCreateByLocation
BreakpointCreateByLocation(char const * file, uint32_t line) -> SBBreakpoint
BreakpointCreateByLocation(SBFileSpec file_spec, uint32_t line) -> SBBreakpoint
BreakpointCreateByLocation(SBFileSpec file_spec, uint32_t line, lldb::addr_t offset) -> SBBreakpoint
BreakpointCreateByLocation(SBFileSpec file_spec, uint32_t line, lldb::addr_t offset, SBFileSpecList module_list) -> SBBreakpoint
SBTarget_BreakpointCreateByLocation(SBTarget self, SBFileSpec file_spec, uint32_t line, uint32_t column, lldb::addr_t offset, SBFileSpecList module_list) -> SBBreakpoint
SBTarget_BreakpointCreateByName
BreakpointCreateByName(char const * symbol_name, char const * module_name=None) -> SBBreakpoint
BreakpointCreateByName(char const * symbol_name) -> SBBreakpoint
BreakpointCreateByName(char const * symbol_name, uint32_t func_name_type, SBFileSpecList module_list, SBFileSpecList comp_unit_list) -> SBBreakpoint
SBTarget_BreakpointCreateByName(SBTarget self, char const * symbol_name, uint32_t func_name_type, lldb::LanguageType symbol_language, SBFileSpecList module_list, SBFileSpecList comp_unit_list) -> SBBreakpoint
SBTarget_BreakpointCreateByNames
BreakpointCreateByNames(char const ** symbol_name, uint32_t name_type_mask, SBFileSpecList module_list, SBFileSpecList comp_unit_list) -> SBBreakpoint
BreakpointCreateByNames(char const ** symbol_name, uint32_t name_type_mask, lldb::LanguageType symbol_language, SBFileSpecList module_list, SBFileSpecList comp_unit_list) -> SBBreakpoint
SBTarget_BreakpointCreateByNames(SBTarget self, char const ** symbol_name, uint32_t name_type_mask, lldb::LanguageType symbol_language, lldb::addr_t offset, SBFileSpecList module_list, SBFileSpecList comp_unit_list) -> SBBreakpoint
SBTarget_BreakpointCreateByRegex
BreakpointCreateByRegex(char const * symbol_name_regex, char const * module_name=None) -> SBBreakpoint
BreakpointCreateByRegex(char const * symbol_name_regex) -> SBBreakpoint
SBTarget_BreakpointCreateByRegex(SBTarget self, char const * symbol_name_regex, lldb::LanguageType symbol_language, SBFileSpecList module_list, SBFileSpecList comp_unit_list) -> SBBreakpoint
SBTarget_BreakpointCreateBySourceRegex
BreakpointCreateBySourceRegex(char const * source_regex, SBFileSpec source_file, char const * module_name=None) -> SBBreakpoint
BreakpointCreateBySourceRegex(char const * source_regex, SBFileSpec source_file) -> SBBreakpoint
BreakpointCreateBySourceRegex(char const * source_regex, SBFileSpecList module_list, SBFileSpecList file_list) -> SBBreakpoint
SBTarget_BreakpointCreateBySourceRegex(SBTarget self, char const * source_regex, SBFileSpecList module_list, SBFileSpecList source_file, SBStringList func_names) -> SBBreakpoint
SBTarget_BreakpointCreateForException
BreakpointCreateForException(lldb::LanguageType language, bool catch_bp, bool throw_bp) -> SBBreakpoint
SBTarget_BreakpointCreateForException(SBTarget self, lldb::LanguageType language, bool catch_bp, bool throw_bp, SBStringList extra_args) -> SBBreakpoint
SBTarget_BreakpointCreateByAddress
SBTarget_BreakpointCreateByAddress(SBTarget self, lldb::addr_t address) -> SBBreakpoint
SBTarget_BreakpointCreateBySBAddress
SBTarget_BreakpointCreateBySBAddress(SBTarget self, SBAddress sb_address) -> SBBreakpoint
SBTarget_BreakpointCreateFromScript
BreakpointCreateFromScript(char const * class_name, SBStructuredData extra_args, SBFileSpecList module_list, SBFileSpecList file_list, bool request_hardware=False) -> SBBreakpoint
SBTarget_BreakpointCreateFromScript(SBTarget self, char const * class_name, SBStructuredData extra_args, SBFileSpecList module_list, SBFileSpecList file_list) -> SBBreakpoint
//------------------------------------------------------------------
/// Create a breakpoint using a scripted resolver.
/// @param[in] class_name
///    This is the name of the class that implements a scripted resolver.
///    The class should have the following signature:
///    class Resolver:
///        def __init__(self, bkpt, extra_args):
///            # bkpt - the breakpoint for which this is the resolver.  When
///            # the resolver finds an interesting address, call AddLocation
///            # on this breakpoint to add it.
///            #
///            # extra_args - an SBStructuredData that can be used to 
///            # parametrize this instance.  Same as the extra_args passed
///            # to BreakpointCreateFromScript.
///        def __get_depth__ (self):
///            # This is optional, but if defined, you should return the
///            # depth at which you want the callback to be called.  The
///            # available options are:
///            #    lldb.eSearchDepthModule
///            #    lldb.eSearchDepthCompUnit
///            # The default if you don't implement this method is
///            # eSearchDepthModule.
///            
///        def __callback__(self, sym_ctx):
///            # sym_ctx - an SBSymbolContext that is the cursor in the 
///            # search through the program to resolve breakpoints.  
///            # The sym_ctx will be filled out to the depth requested in
///            # __get_depth__.
///            # Look in this sym_ctx for new breakpoint locations,
///            # and if found use bkpt.AddLocation to add them.
///            # Note, you will only get called for modules/compile_units that
///            # pass the SearchFilter provided by the module_list & file_list
///            # passed into BreakpointCreateFromScript.
///        def get_short_help(self):
///            # Optional, but if implemented return a short string that will
///            # be printed at the beginning of the break list output for the
///            # breakpoint.
/// @param[in] extra_args
///    This is an SBStructuredData object that will get passed to the
///    constructor of the class in class_name.  You can use this to 
///    reuse the same class, parametrizing it with entries from this 
///    dictionary.
/// @param module_list
///    If this is non-empty, this will be used as the module filter in the 
///    SearchFilter created for this breakpoint.
/// @param file_list
///    If this is non-empty, this will be used as the comp unit filter in the 
///    SearchFilter created for this breakpoint.
/// @return
///     An SBBreakpoint that will set locations based on the logic in the
///     resolver's search callback.
//------------------------------------------------------------------
SBTarget_GetNumBreakpoints
SBTarget_GetNumBreakpoints(SBTarget self) -> uint32_t
SBTarget_GetBreakpointAtIndex
SBTarget_GetBreakpointAtIndex(SBTarget self, uint32_t idx) -> SBBreakpoint
SBTarget_BreakpointDelete
SBTarget_BreakpointDelete(SBTarget self, lldb::break_id_t break_id) -> bool
SBTarget_FindBreakpointByID
SBTarget_FindBreakpointByID(SBTarget self, lldb::break_id_t break_id) -> SBBreakpoint
SBTarget_FindBreakpointsByName
SBTarget_FindBreakpointsByName(SBTarget self, char const * name, SBBreakpointList bkpt_list) -> bool
SBTarget_DeleteBreakpointName
SBTarget_DeleteBreakpointName(SBTarget self, char const * name)
SBTarget_GetBreakpointNames
SBTarget_GetBreakpointNames(SBTarget self, SBStringList names)
SBTarget_EnableAllBreakpoints
SBTarget_EnableAllBreakpoints(SBTarget self) -> bool
SBTarget_DisableAllBreakpoints
SBTarget_DisableAllBreakpoints(SBTarget self) -> bool
SBTarget_DeleteAllBreakpoints
SBTarget_DeleteAllBreakpoints(SBTarget self) -> bool
SBTarget_BreakpointsCreateFromFile
BreakpointsCreateFromFile(SBFileSpec source_file, SBBreakpointList bkpt_list) -> SBError
SBTarget_BreakpointsCreateFromFile(SBTarget self, SBFileSpec source_file, SBStringList matching_names, SBBreakpointList new_bps) -> SBError
//------------------------------------------------------------------
/// Read breakpoints from source_file and return the newly created
/// breakpoints in bkpt_list.
/// @param[in] source_file
///    The file from which to read the breakpoints
/// @param[out] bkpt_list
///    A list of the newly created breakpoints.
/// @return
///     An SBError detailing any errors in reading in the breakpoints.
//------------------------------------------------------------------
SBTarget_BreakpointsWriteToFile
BreakpointsWriteToFile(SBFileSpec dest_file) -> SBError
BreakpointsWriteToFile(SBFileSpec dest_file, SBBreakpointList bkpt_list, bool append=False) -> SBError
SBTarget_BreakpointsWriteToFile(SBTarget self, SBFileSpec dest_file, SBBreakpointList bkpt_list) -> SBError
SBTarget_GetNumWatchpoints
SBTarget_GetNumWatchpoints(SBTarget self) -> uint32_t
SBTarget_GetWatchpointAtIndex
SBTarget_GetWatchpointAtIndex(SBTarget self, uint32_t idx) -> SBWatchpoint
SBTarget_DeleteWatchpoint
SBTarget_DeleteWatchpoint(SBTarget self, lldb::watch_id_t watch_id) -> bool
SBTarget_FindWatchpointByID
SBTarget_FindWatchpointByID(SBTarget self, lldb::watch_id_t watch_id) -> SBWatchpoint
SBTarget_EnableAllWatchpoints
SBTarget_EnableAllWatchpoints(SBTarget self) -> bool
SBTarget_DisableAllWatchpoints
SBTarget_DisableAllWatchpoints(SBTarget self) -> bool
SBTarget_DeleteAllWatchpoints
SBTarget_DeleteAllWatchpoints(SBTarget self) -> bool
SBTarget_WatchAddress
SBTarget_WatchAddress(SBTarget self, lldb::addr_t addr, size_t size, bool read, bool write, SBError error) -> SBWatchpoint
SBTarget_GetBroadcaster
SBTarget_GetBroadcaster(SBTarget self) -> SBBroadcaster
SBTarget_CreateValueFromAddress
SBTarget_CreateValueFromAddress(SBTarget self, char const * name, SBAddress addr, SBType type) -> SBValue
//------------------------------------------------------------------
/// Create an SBValue with the given name by treating the memory starting at addr as an entity of type.
/// @param[in] name
///     The name of the resultant SBValue
/// @param[in] addr
///     The address of the start of the memory region to be used.
/// @param[in] type
///     The type to use to interpret the memory starting at addr.
/// @return
///     An SBValue of the given type, may be invalid if there was an error reading
///     the underlying memory.
//------------------------------------------------------------------
SBTarget_CreateValueFromData
SBTarget_CreateValueFromData(SBTarget self, char const * name, SBData data, SBType type) -> SBValue
SBTarget_CreateValueFromExpression
SBTarget_CreateValueFromExpression(SBTarget self, char const * name, char const * expr) -> SBValue
SBTarget_ReadInstructions
ReadInstructions(SBAddress base_addr, uint32_t count) -> SBInstructionList
SBTarget_ReadInstructions(SBTarget self, SBAddress base_addr, uint32_t count, char const * flavor_string) -> SBInstructionList
Disassemble a specified number of instructions starting at an address.
Parameters:
   base_addr       -- the address to start disassembly from
   count           -- the number of instructions to disassemble
   flavor_string   -- may be 'intel' or 'att' on x86 targets to specify that style of disassembly
Returns an SBInstructionList.
SBTarget_GetInstructions
SBTarget_GetInstructions(SBTarget self, SBAddress base_addr, void const * buf) -> SBInstructionList
Disassemble the bytes in a buffer and return them in an SBInstructionList.
Parameters:
   base_addr -- used for symbolicating the offsets in the byte stream when disassembling
   buf       -- bytes to be disassembled
   size      -- (C++) size of the buffer
Returns an SBInstructionList.
SBTarget_GetInstructionsWithFlavor
SBTarget_GetInstructionsWithFlavor(SBTarget self, SBAddress base_addr, char const * flavor_string, void const * buf) -> SBInstructionList
Disassemble the bytes in a buffer and return them in an SBInstructionList, with a supplied flavor.
Parameters:
   base_addr -- used for symbolicating the offsets in the byte stream when disassembling
   flavor    -- may be 'intel' or 'att' on x86 targets to specify that style of disassembly
   buf       -- bytes to be disassembled
   size      -- (C++) size of the buffer
Returns an SBInstructionList.
SBTarget_FindSymbols
FindSymbols(char const * name, lldb::SymbolType type) -> SBSymbolContextList
SBTarget_FindSymbols(SBTarget self, char const * name) -> SBSymbolContextList
SBTarget_GetDescription
SBTarget_GetDescription(SBTarget self, SBStream description, lldb::DescriptionLevel description_level) -> bool
SBTarget_GetStackRedZoneSize
SBTarget_GetStackRedZoneSize(SBTarget self) -> lldb::addr_t
SBTarget_GetLaunchInfo
SBTarget_GetLaunchInfo(SBTarget self) -> SBLaunchInfo
SBTarget_SetLaunchInfo
SBTarget_SetLaunchInfo(SBTarget self, SBLaunchInfo launch_info)
SBTarget_SetCollectingStats
SBTarget_SetCollectingStats(SBTarget self, bool v)
SBTarget_GetCollectingStats
SBTarget_GetCollectingStats(SBTarget self) -> bool
SBTarget_GetStatistics
SBTarget_GetStatistics(SBTarget self) -> SBStructuredData
SBTarget___eq__
SBTarget___eq__(SBTarget self, SBTarget rhs) -> bool
SBTarget___ne__
SBTarget___ne__(SBTarget self, SBTarget rhs) -> bool
SBTarget_EvaluateExpression
EvaluateExpression(char const * expr) -> SBValue
SBTarget_EvaluateExpression(SBTarget self, char const * expr, SBExpressionOptions options) -> SBValue
SBTarget___str__
SBTarget___str__(SBTarget self) -> PyObject *
SBTarget_swigregister
new_SBThread
SBThread()
new_SBThread(SBThread thread) -> SBThread
delete_SBThread
delete_SBThread(SBThread self)
SBThread_GetBroadcasterClassName
SBThread_GetBroadcasterClassName() -> char const *
SBThread_EventIsThreadEvent
SBThread_EventIsThreadEvent(SBEvent event) -> bool
SBThread_GetStackFrameFromEvent
SBThread_GetStackFrameFromEvent(SBEvent event) -> SBFrame
SBThread_GetThreadFromEvent
SBThread_GetThreadFromEvent(SBEvent event) -> SBThread
SBThread_IsValid
SBThread_IsValid(SBThread self) -> bool
SBThread___nonzero__
SBThread___nonzero__(SBThread self) -> bool
SBThread_Clear
SBThread_Clear(SBThread self)
SBThread_GetStopReason
SBThread_GetStopReason(SBThread self) -> lldb::StopReason
SBThread_GetStopReasonDataCount
SBThread_GetStopReasonDataCount(SBThread self) -> size_t
/// Get the number of words associated with the stop reason.
/// See also GetStopReasonDataAtIndex().
SBThread_GetStopReasonDataAtIndex
SBThread_GetStopReasonDataAtIndex(SBThread self, uint32_t idx) -> uint64_t
//--------------------------------------------------------------------------
/// Get information associated with a stop reason.
/// Breakpoint stop reasons will have data that consists of pairs of 
/// breakpoint IDs followed by the breakpoint location IDs (they always come
/// in pairs).
/// Stop Reason              Count Data Type
/// ======================== ===== =========================================
/// eStopReasonNone          0
/// eStopReasonTrace         0
/// eStopReasonBreakpoint    N     duple: {breakpoint id, location id}
/// eStopReasonWatchpoint    1     watchpoint id
/// eStopReasonSignal        1     unix signal number
/// eStopReasonException     N     exception data
/// eStopReasonExec          0
/// eStopReasonPlanComplete  0
//--------------------------------------------------------------------------
SBThread_GetStopReasonExtendedInfoAsJSON
Collects a thread's stop reason extended information dictionary and prints it
into the SBStream in a JSON format. The format of this JSON dictionary depends
on the stop reason and is currently used only for instrumentation plugins.
SBThread_GetStopReasonExtendedBacktraces
Returns a collection of historical stack traces that are significant to the
current stop reason. Used by ThreadSanitizer, where we provide various stack
traces that were involved in a data race or other type of detected issue.
SBThread_GetStopDescription
Pass only an (int)length and expect to get a Python string describing the
stop reason.
SBThread_GetStopReturnValue
If the last stop on this thread was a thread plan that gathered a return value from the stop,
this function will fetch that stop result.  At present only the "step-out" thread plan gathers
stop return values.
SBThread_GetStopErrorValue
If the last stop on this thread was a thread plan that gathered an error value from the stop,
this function will fetch that stop result.  At present only the "step-out" thread plan gathers
stop error values, and that only for stepping out of Swift functions.
SBThread_GetThreadID
Returns a unique thread identifier (type lldb::tid_t, typically a 64-bit type)
for the current SBThread that will remain constant throughout the thread's
lifetime in this process and will not be reused by another thread during this
process lifetime.  On Mac OS X systems, this is a system-wide unique thread
identifier; this identifier is also used by other tools like sample which helps
to associate data from those tools with lldb.  See related GetIndexID.
SBThread_GetIndexID
Return the index number for this SBThread.  The index number is the same thing
that a user gives as an argument to 'thread select' in the command line lldb.
These numbers start at 1 (for the first thread lldb sees in a debug session)
and increments up throughout the process lifetime.  An index number will not be
reused for a different thread later in a process - thread 1 will always be
associated with the same thread.  See related GetThreadID.
This method returns a uint32_t index number, takes no arguments.
SBThread_GetName
SBThread_GetName(SBThread self) -> char const *
SBThread_GetQueueName
Return the queue name associated with this thread, if any, as a str.
For example, with a libdispatch (aka Grand Central Dispatch) queue.
SBThread_GetQueueID
Return the dispatch_queue_id for this thread, if any, as a lldb::queue_id_t.
For example, with a libdispatch (aka Grand Central Dispatch) queue.
SBThread_GetInfoItemByPathAsString
SBThread_GetInfoItemByPathAsString(SBThread self, char const * path, SBStream strm) -> bool
//--------------------------------------------------------------------------
/// Takes a path string and a SBStream reference as parameters, returns a bool.  
/// Collects the thread's 'info' dictionary from the remote system, uses the path
/// argument to descend into the dictionary to an item of interest, and prints
/// it into the SBStream in a natural format.  Return bool is to indicate if
/// anything was printed into the stream (true) or not (false).
//--------------------------------------------------------------------------
SBThread_GetQueue
Return the SBQueue for this thread.  If this thread is not currently associated
with a libdispatch queue, the SBQueue object's IsValid() method will return false.
If this SBThread is actually a HistoryThread, we may be able to provide QueueID
and QueueName, but not provide an SBQueue.  Those individual attributes may have
been saved for the HistoryThread without enough information to reconstitute the
entire SBQueue at that time.
This method takes no arguments, returns an SBQueue.
SBThread_StepOver
StepOver(lldb::RunMode stop_other_threads)
StepOver()
Do a source level single step over in the currently selected thread.
SBThread_StepInto
StepInto(lldb::RunMode stop_other_threads)
StepInto()
StepInto(char const * target_name, lldb::RunMode stop_other_threads)
StepInto(char const * target_name)
    Step the current thread from the current source line to the line given by end_line, stopping if
    the thread steps into the function given by target_name.  If target_name is None, then stepping will stop
    in any of the places we would normally stop.
    Step the current thread from the current source line to the line given by end_line, stopping if
    the thread steps into the function given by target_name.  If target_name is None, then stepping will stop
    in any of the places we would normally stop.
SBThread_StepOut
StepOut()
Step out of the currently selected thread.
SBThread_StepOutOfFrame
StepOutOfFrame(SBFrame frame)
Step out of the specified frame.
SBThread_StepInstruction
StepInstruction(bool step_over)
Do an instruction level single step in the currently selected thread.
SBThread_StepOverUntil
SBThread_StepOverUntil(SBThread self, SBFrame frame, SBFileSpec file_spec, uint32_t line) -> SBError
SBThread_StepUsingScriptedThreadPlan
StepUsingScriptedThreadPlan(char const * script_class_name) -> SBError
SBThread_StepUsingScriptedThreadPlan(SBThread self, char const * script_class_name, bool resume_immediately) -> SBError
SBThread_JumpToLine
SBThread_JumpToLine(SBThread self, SBFileSpec file_spec, uint32_t line) -> SBError
SBThread_RunToAddress
RunToAddress(lldb::addr_t addr)
SBThread_RunToAddress(SBThread self, lldb::addr_t addr, SBError error)
SBThread_ReturnFromFrame
Force a return from the frame passed in (and any frames younger than it)
without executing any more code in those frames.  If return_value contains
a valid SBValue, that will be set as the return value from frame.  Note, at
present only scalar return values are supported.
SBThread_UnwindInnermostExpression
Unwind the stack frames from the innermost expression evaluation.
This API is equivalent to 'thread return -x'.
SBThread_Suspend
Suspend() -> bool
SBThread_Suspend(SBThread self, SBError error) -> bool
//--------------------------------------------------------------------------
/// LLDB currently supports process centric debugging which means when any
/// thread in a process stops, all other threads are stopped. The Suspend()
/// call here tells our process to suspend a thread and not let it run when
/// the other threads in a process are allowed to run. So when 
/// SBProcess::Continue() is called, any threads that aren't suspended will
/// be allowed to run. If any of the SBThread functions for stepping are 
/// called (StepOver, StepInto, StepOut, StepInstruction, RunToAddres), the
/// thread will now be allowed to run and these functions will simply return.
/// Eventually we plan to add support for thread centric debugging where
/// each thread is controlled individually and each thread would broadcast
/// its state, but we haven't implemented this yet.
/// 
/// Likewise the SBThread::Resume() call will again allow the thread to run
/// when the process is continued.
/// Suspend() and Resume() functions are not currently reference counted, if
/// anyone has the need for them to be reference counted, please let us
/// know.
//--------------------------------------------------------------------------
SBThread_Resume
Resume() -> bool
SBThread_Resume(SBThread self, SBError error) -> bool
SBThread_IsSuspended
SBThread_IsSuspended(SBThread self) -> bool
SBThread_IsStopped
SBThread_IsStopped(SBThread self) -> bool
SBThread_GetNumFrames
SBThread_GetNumFrames(SBThread self) -> uint32_t
SBThread_GetFrameAtIndex
SBThread_GetFrameAtIndex(SBThread self, uint32_t idx) -> SBFrame
SBThread_GetSelectedFrame
SBThread_GetSelectedFrame(SBThread self) -> SBFrame
SBThread_SetSelectedFrame
SBThread_SetSelectedFrame(SBThread self, uint32_t frame_idx) -> SBFrame
SBThread_GetProcess
SBThread_GetProcess(SBThread self) -> SBProcess
SBThread_GetDescription
GetDescription(SBStream description) -> bool
SBThread_GetDescription(SBThread self, SBStream description, bool stop_format) -> bool
SBThread_GetStatus
SBThread_GetStatus(SBThread self, SBStream status) -> bool
SBThread___eq__
SBThread___eq__(SBThread self, SBThread rhs) -> bool
SBThread___ne__
SBThread___ne__(SBThread self, SBThread rhs) -> bool
SBThread_GetExtendedBacktraceThread
Given an argument of str to specify the type of thread-origin extended
backtrace to retrieve, query whether the origin of this thread is 
available.  An SBThread is retured; SBThread.IsValid will return true
if an extended backtrace was available.  The returned SBThread is not
a part of the SBProcess' thread list and it cannot be manipulated like
normal threads -- you cannot step or resume it, for instance -- it is
intended to used primarily for generating a backtrace.  You may request
the returned thread's own thread origin in turn.
SBThread_GetExtendedBacktraceOriginatingIndexID
Takes no arguments, returns a uint32_t.
If this SBThread is an ExtendedBacktrace thread, get the IndexID of the
original thread that this ExtendedBacktrace thread represents, if 
available.  The thread that was running this backtrace in the past may
not have been registered with lldb's thread index (if it was created,
did its work, and was destroyed without lldb ever stopping execution).
In that case, this ExtendedBacktrace thread's IndexID will be returned.
SBThread_GetCurrentException
Returns an SBValue object represeting the current exception for the thread,
if there is any. Currently, this works for Obj-C code and returns an SBValue
representing the NSException object at the throw site or that's currently
being processes.
SBThread_GetCurrentExceptionBacktrace
Returns a historical (fake) SBThread representing the stack trace of an
exception, if there is one for the thread. Currently, this works for Obj-C
code, and can retrieve the throw-site backtrace of an NSException object
even when the program is no longer at the throw site.
SBThread_SafeToCallFunctions
Takes no arguments, returns a bool.
lldb may be able to detect that function calls should not be executed
on a given thread at a particular point in time.  It is recommended that
this is checked before performing an inferior function call on a given
thread.
SBThread___str__
SBThread___str__(SBThread self) -> PyObject *
SBThread_swigregister
new_SBThreadCollection
SBThreadCollection()
new_SBThreadCollection(SBThreadCollection rhs) -> SBThreadCollection
delete_SBThreadCollection
delete_SBThreadCollection(SBThreadCollection self)
SBThreadCollection_IsValid
SBThreadCollection_IsValid(SBThreadCollection self) -> bool
SBThreadCollection___nonzero__
SBThreadCollection___nonzero__(SBThreadCollection self) -> bool
SBThreadCollection_GetSize
SBThreadCollection_GetSize(SBThreadCollection self) -> size_t
SBThreadCollection_GetThreadAtIndex
SBThreadCollection_GetThreadAtIndex(SBThreadCollection self, size_t idx) -> SBThread
SBThreadCollection_swigregister
new_SBThreadPlan
SBThreadPlan()
SBThreadPlan(SBThreadPlan threadPlan)
SBThreadPlan(lldb::ThreadPlanSP const & lldb_object_sp)
new_SBThreadPlan(SBThread thread, char const * class_name) -> SBThreadPlan
delete_SBThreadPlan
delete_SBThreadPlan(SBThreadPlan self)
SBThreadPlan___nonzero__
SBThreadPlan___nonzero__(SBThreadPlan self) -> bool
SBThreadPlan_Clear
SBThreadPlan_Clear(SBThreadPlan self)
SBThreadPlan_GetStopReason
SBThreadPlan_GetStopReason(SBThreadPlan self) -> lldb::StopReason
SBThreadPlan_GetStopReasonDataCount
SBThreadPlan_GetStopReasonDataCount(SBThreadPlan self) -> size_t
SBThreadPlan_GetStopReasonDataAtIndex
SBThreadPlan_GetStopReasonDataAtIndex(SBThreadPlan self, uint32_t idx) -> uint64_t
SBThreadPlan_GetThread
SBThreadPlan_GetThread(SBThreadPlan self) -> SBThread
SBThreadPlan_GetDescription
SBThreadPlan_GetDescription(SBThreadPlan self, SBStream description) -> bool
SBThreadPlan_SetPlanComplete
SBThreadPlan_SetPlanComplete(SBThreadPlan self, bool success)
SBThreadPlan_IsPlanComplete
SBThreadPlan_IsPlanComplete(SBThreadPlan self) -> bool
SBThreadPlan_IsPlanStale
SBThreadPlan_IsPlanStale(SBThreadPlan self) -> bool
SBThreadPlan_IsValid
IsValid() -> bool
SBThreadPlan_IsValid(SBThreadPlan self) -> bool
SBThreadPlan_QueueThreadPlanForStepOverRange
SBThreadPlan_QueueThreadPlanForStepOverRange(SBThreadPlan self, SBAddress start_address, lldb::addr_t range_size) -> SBThreadPlan
SBThreadPlan_QueueThreadPlanForStepInRange
SBThreadPlan_QueueThreadPlanForStepInRange(SBThreadPlan self, SBAddress start_address, lldb::addr_t range_size) -> SBThreadPlan
SBThreadPlan_QueueThreadPlanForStepOut
QueueThreadPlanForStepOut(uint32_t frame_idx_to_step_to, bool first_insn=False) -> SBThreadPlan
SBThreadPlan_QueueThreadPlanForStepOut(SBThreadPlan self, uint32_t frame_idx_to_step_to) -> SBThreadPlan
SBThreadPlan_QueueThreadPlanForRunToAddress
SBThreadPlan_QueueThreadPlanForRunToAddress(SBThreadPlan self, SBAddress address) -> SBThreadPlan
SBThreadPlan_QueueThreadPlanForStepScripted
SBThreadPlan_QueueThreadPlanForStepScripted(SBThreadPlan self, char const * script_class_name) -> SBThreadPlan
SBThreadPlan_swigregister
new_SBTrace
new_SBTrace() -> SBTrace
SBTrace_GetTraceData
SBTrace_GetTraceData(SBTrace self, SBError error, void * buf, size_t offset, lldb::tid_t thread_id) -> size_t
SBTrace_GetMetaData
SBTrace_GetMetaData(SBTrace self, SBError error, void * buf, size_t offset, lldb::tid_t thread_id) -> size_t
SBTrace_StopTrace
SBTrace_StopTrace(SBTrace self, SBError error, lldb::tid_t thread_id)
SBTrace_GetTraceConfig
SBTrace_GetTraceConfig(SBTrace self, SBTraceOptions options, SBError error)
SBTrace_GetTraceUID
SBTrace_GetTraceUID(SBTrace self) -> lldb::user_id_t
SBTrace___nonzero__
SBTrace___nonzero__(SBTrace self) -> bool
SBTrace_IsValid
SBTrace_IsValid(SBTrace self) -> bool
delete_SBTrace
delete_SBTrace(SBTrace self)
SBTrace_swigregister
new_SBTraceOptions
new_SBTraceOptions() -> SBTraceOptions
SBTraceOptions_getType
SBTraceOptions_getType(SBTraceOptions self) -> lldb::TraceType
SBTraceOptions_getTraceBufferSize
SBTraceOptions_getTraceBufferSize(SBTraceOptions self) -> uint64_t
SBTraceOptions_getTraceParams
SBTraceOptions_getTraceParams(SBTraceOptions self, SBError error) -> SBStructuredData
SBTraceOptions_getMetaDataBufferSize
SBTraceOptions_getMetaDataBufferSize(SBTraceOptions self) -> uint64_t
SBTraceOptions_setTraceParams
SBTraceOptions_setTraceParams(SBTraceOptions self, SBStructuredData params)
SBTraceOptions_setType
SBTraceOptions_setType(SBTraceOptions self, lldb::TraceType type)
SBTraceOptions_setTraceBufferSize
SBTraceOptions_setTraceBufferSize(SBTraceOptions self, uint64_t size)
SBTraceOptions_setMetaDataBufferSize
SBTraceOptions_setMetaDataBufferSize(SBTraceOptions self, uint64_t size)
SBTraceOptions_setThreadID
SBTraceOptions_setThreadID(SBTraceOptions self, lldb::tid_t thread_id)
SBTraceOptions_getThreadID
SBTraceOptions_getThreadID(SBTraceOptions self) -> lldb::tid_t
SBTraceOptions___nonzero__
SBTraceOptions___nonzero__(SBTraceOptions self) -> bool
SBTraceOptions_IsValid
SBTraceOptions_IsValid(SBTraceOptions self) -> bool
delete_SBTraceOptions
delete_SBTraceOptions(SBTraceOptions self)
SBTraceOptions_swigregister
new_SBTypeMember
SBTypeMember()
new_SBTypeMember(SBTypeMember rhs) -> SBTypeMember
delete_SBTypeMember
delete_SBTypeMember(SBTypeMember self)
SBTypeMember_IsValid
SBTypeMember_IsValid(SBTypeMember self) -> bool
SBTypeMember___nonzero__
SBTypeMember___nonzero__(SBTypeMember self) -> bool
SBTypeMember_GetName
SBTypeMember_GetName(SBTypeMember self) -> char const *
SBTypeMember_GetType
SBTypeMember_GetType(SBTypeMember self) -> SBType
SBTypeMember_GetOffsetInBytes
SBTypeMember_GetOffsetInBytes(SBTypeMember self) -> uint64_t
SBTypeMember_GetOffsetInBits
SBTypeMember_GetOffsetInBits(SBTypeMember self) -> uint64_t
SBTypeMember_IsBitfield
SBTypeMember_IsBitfield(SBTypeMember self) -> bool
SBTypeMember_GetBitfieldSizeInBits
SBTypeMember_GetBitfieldSizeInBits(SBTypeMember self) -> uint32_t
SBTypeMember___str__
SBTypeMember___str__(SBTypeMember self) -> PyObject *
SBTypeMember_swigregister
new_SBTypeMemberFunction
SBTypeMemberFunction()
new_SBTypeMemberFunction(SBTypeMemberFunction rhs) -> SBTypeMemberFunction
delete_SBTypeMemberFunction
delete_SBTypeMemberFunction(SBTypeMemberFunction self)
SBTypeMemberFunction_IsValid
SBTypeMemberFunction_IsValid(SBTypeMemberFunction self) -> bool
SBTypeMemberFunction___nonzero__
SBTypeMemberFunction___nonzero__(SBTypeMemberFunction self) -> bool
SBTypeMemberFunction_GetName
SBTypeMemberFunction_GetName(SBTypeMemberFunction self) -> char const *
SBTypeMemberFunction_GetDemangledName
SBTypeMemberFunction_GetDemangledName(SBTypeMemberFunction self) -> char const *
SBTypeMemberFunction_GetMangledName
SBTypeMemberFunction_GetMangledName(SBTypeMemberFunction self) -> char const *
SBTypeMemberFunction_GetType
SBTypeMemberFunction_GetType(SBTypeMemberFunction self) -> SBType
SBTypeMemberFunction_GetReturnType
SBTypeMemberFunction_GetReturnType(SBTypeMemberFunction self) -> SBType
SBTypeMemberFunction_GetNumberOfArguments
SBTypeMemberFunction_GetNumberOfArguments(SBTypeMemberFunction self) -> uint32_t
SBTypeMemberFunction_GetArgumentTypeAtIndex
SBTypeMemberFunction_GetArgumentTypeAtIndex(SBTypeMemberFunction self, uint32_t arg3) -> SBType
SBTypeMemberFunction_GetKind
SBTypeMemberFunction_GetKind(SBTypeMemberFunction self) -> lldb::MemberFunctionKind
SBTypeMemberFunction_GetDescription
SBTypeMemberFunction_GetDescription(SBTypeMemberFunction self, SBStream description, lldb::DescriptionLevel description_level) -> bool
SBTypeMemberFunction___str__
SBTypeMemberFunction___str__(SBTypeMemberFunction self) -> PyObject *
SBTypeMemberFunction_swigregister
new_SBType
SBType()
new_SBType(SBType rhs) -> SBType
delete_SBType
delete_SBType(SBType self)
SBType_IsValid
SBType_IsValid(SBType self) -> bool
SBType___nonzero__
SBType___nonzero__(SBType self) -> bool
SBType_GetByteSize
SBType_GetByteSize(SBType self) -> uint64_t
SBType_IsPointerType
SBType_IsPointerType(SBType self) -> bool
SBType_IsReferenceType
SBType_IsReferenceType(SBType self) -> bool
SBType_IsFunctionType
SBType_IsFunctionType(SBType self) -> bool
SBType_IsPolymorphicClass
SBType_IsPolymorphicClass(SBType self) -> bool
SBType_IsArrayType
SBType_IsArrayType(SBType self) -> bool
SBType_IsVectorType
SBType_IsVectorType(SBType self) -> bool
SBType_IsTypedefType
SBType_IsTypedefType(SBType self) -> bool
SBType_IsAnonymousType
SBType_IsAnonymousType(SBType self) -> bool
SBType_GetPointerType
SBType_GetPointerType(SBType self) -> SBType
SBType_GetPointeeType
SBType_GetPointeeType(SBType self) -> SBType
SBType_GetReferenceType
SBType_GetReferenceType(SBType self) -> SBType
SBType_GetTypedefedType
SBType_GetTypedefedType(SBType self) -> SBType
SBType_GetDereferencedType
SBType_GetDereferencedType(SBType self) -> SBType
SBType_GetUnqualifiedType
SBType_GetUnqualifiedType(SBType self) -> SBType
SBType_GetCanonicalType
SBType_GetCanonicalType(SBType self) -> SBType
SBType_GetArrayElementType
SBType_GetArrayElementType(SBType self) -> SBType
SBType_GetArrayType
SBType_GetArrayType(SBType self, uint64_t size) -> SBType
SBType_GetVectorElementType
SBType_GetVectorElementType(SBType self) -> SBType
SBType_GetBasicType
GetBasicType() -> lldb::BasicType
SBType_GetBasicType(SBType self, lldb::BasicType type) -> SBType
SBType_GetNumberOfFields
SBType_GetNumberOfFields(SBType self) -> uint32_t
SBType_GetNumberOfDirectBaseClasses
SBType_GetNumberOfDirectBaseClasses(SBType self) -> uint32_t
SBType_GetNumberOfVirtualBaseClasses
SBType_GetNumberOfVirtualBaseClasses(SBType self) -> uint32_t
SBType_GetFieldAtIndex
SBType_GetFieldAtIndex(SBType self, uint32_t idx) -> SBTypeMember
SBType_GetDirectBaseClassAtIndex
SBType_GetDirectBaseClassAtIndex(SBType self, uint32_t idx) -> SBTypeMember
SBType_GetVirtualBaseClassAtIndex
SBType_GetVirtualBaseClassAtIndex(SBType self, uint32_t idx) -> SBTypeMember
SBType_GetEnumMembers
SBType_GetEnumMembers(SBType self) -> SBTypeEnumMemberList
SBType_GetName
SBType_GetName(SBType self) -> char const *
SBType_GetDisplayTypeName
SBType_GetDisplayTypeName(SBType self) -> char const *
SBType_GetTypeClass
SBType_GetTypeClass(SBType self) -> lldb::TypeClass
SBType_GetNumberOfTemplateArguments
SBType_GetNumberOfTemplateArguments(SBType self) -> uint32_t
SBType_GetTemplateArgumentType
SBType_GetTemplateArgumentType(SBType self, uint32_t idx) -> SBType
SBType_GetTemplateArgumentKind
SBType_GetTemplateArgumentKind(SBType self, uint32_t idx) -> lldb::TemplateArgumentKind
SBType_GetFunctionReturnType
SBType_GetFunctionReturnType(SBType self) -> SBType
SBType_GetFunctionArgumentTypes
SBType_GetFunctionArgumentTypes(SBType self) -> SBTypeList
SBType_GetNumberOfMemberFunctions
SBType_GetNumberOfMemberFunctions(SBType self) -> uint32_t
SBType_GetMemberFunctionAtIndex
SBType_GetMemberFunctionAtIndex(SBType self, uint32_t idx) -> SBTypeMemberFunction
SBType_IsTypeComplete
SBType_IsTypeComplete(SBType self) -> bool
SBType_GetTypeFlags
SBType_GetTypeFlags(SBType self) -> uint32_t
SBType___str__
SBType___str__(SBType self) -> PyObject *
SBType_swigregister
new_SBTypeList
new_SBTypeList() -> SBTypeList
SBTypeList_IsValid
SBTypeList_IsValid(SBTypeList self) -> bool
SBTypeList___nonzero__
SBTypeList___nonzero__(SBTypeList self) -> bool
SBTypeList_Append
SBTypeList_Append(SBTypeList self, SBType type)
SBTypeList_GetTypeAtIndex
SBTypeList_GetTypeAtIndex(SBTypeList self, uint32_t index) -> SBType
SBTypeList_GetSize
SBTypeList_GetSize(SBTypeList self) -> uint32_t
delete_SBTypeList
delete_SBTypeList(SBTypeList self)
SBTypeList_swigregister
new_SBTypeCategory
SBTypeCategory()
new_SBTypeCategory(SBTypeCategory rhs) -> SBTypeCategory
delete_SBTypeCategory
delete_SBTypeCategory(SBTypeCategory self)
SBTypeCategory_IsValid
SBTypeCategory_IsValid(SBTypeCategory self) -> bool
SBTypeCategory___nonzero__
SBTypeCategory___nonzero__(SBTypeCategory self) -> bool
SBTypeCategory_GetEnabled
SBTypeCategory_GetEnabled(SBTypeCategory self) -> bool
SBTypeCategory_SetEnabled
SBTypeCategory_SetEnabled(SBTypeCategory self, bool arg3)
SBTypeCategory_GetName
SBTypeCategory_GetName(SBTypeCategory self) -> char const *
SBTypeCategory_GetLanguageAtIndex
SBTypeCategory_GetLanguageAtIndex(SBTypeCategory self, uint32_t idx) -> lldb::LanguageType
SBTypeCategory_GetNumLanguages
SBTypeCategory_GetNumLanguages(SBTypeCategory self) -> uint32_t
SBTypeCategory_AddLanguage
SBTypeCategory_AddLanguage(SBTypeCategory self, lldb::LanguageType language)
SBTypeCategory_GetDescription
SBTypeCategory_GetDescription(SBTypeCategory self, SBStream description, lldb::DescriptionLevel description_level) -> bool
SBTypeCategory_GetNumFormats
SBTypeCategory_GetNumFormats(SBTypeCategory self) -> uint32_t
SBTypeCategory_GetNumSummaries
SBTypeCategory_GetNumSummaries(SBTypeCategory self) -> uint32_t
SBTypeCategory_GetNumFilters
SBTypeCategory_GetNumFilters(SBTypeCategory self) -> uint32_t
SBTypeCategory_GetNumSynthetics
SBTypeCategory_GetNumSynthetics(SBTypeCategory self) -> uint32_t
SBTypeCategory_GetTypeNameSpecifierForFilterAtIndex
SBTypeCategory_GetTypeNameSpecifierForFilterAtIndex(SBTypeCategory self, uint32_t arg3) -> SBTypeNameSpecifier
SBTypeCategory_GetTypeNameSpecifierForFormatAtIndex
SBTypeCategory_GetTypeNameSpecifierForFormatAtIndex(SBTypeCategory self, uint32_t arg3) -> SBTypeNameSpecifier
SBTypeCategory_GetTypeNameSpecifierForSummaryAtIndex
SBTypeCategory_GetTypeNameSpecifierForSummaryAtIndex(SBTypeCategory self, uint32_t arg3) -> SBTypeNameSpecifier
SBTypeCategory_GetTypeNameSpecifierForSyntheticAtIndex
SBTypeCategory_GetTypeNameSpecifierForSyntheticAtIndex(SBTypeCategory self, uint32_t arg3) -> SBTypeNameSpecifier
SBTypeCategory_GetFilterForType
SBTypeCategory_GetFilterForType(SBTypeCategory self, SBTypeNameSpecifier arg3) -> SBTypeFilter
SBTypeCategory_GetFormatForType
SBTypeCategory_GetFormatForType(SBTypeCategory self, SBTypeNameSpecifier arg3) -> SBTypeFormat
SBTypeCategory_GetSummaryForType
SBTypeCategory_GetSummaryForType(SBTypeCategory self, SBTypeNameSpecifier arg3) -> SBTypeSummary
SBTypeCategory_GetSyntheticForType
SBTypeCategory_GetSyntheticForType(SBTypeCategory self, SBTypeNameSpecifier arg3) -> SBTypeSynthetic
SBTypeCategory_GetFilterAtIndex
SBTypeCategory_GetFilterAtIndex(SBTypeCategory self, uint32_t arg3) -> SBTypeFilter
SBTypeCategory_GetFormatAtIndex
SBTypeCategory_GetFormatAtIndex(SBTypeCategory self, uint32_t arg3) -> SBTypeFormat
SBTypeCategory_GetSummaryAtIndex
SBTypeCategory_GetSummaryAtIndex(SBTypeCategory self, uint32_t arg3) -> SBTypeSummary
SBTypeCategory_GetSyntheticAtIndex
SBTypeCategory_GetSyntheticAtIndex(SBTypeCategory self, uint32_t arg3) -> SBTypeSynthetic
SBTypeCategory_AddTypeFormat
SBTypeCategory_AddTypeFormat(SBTypeCategory self, SBTypeNameSpecifier arg3, SBTypeFormat arg4) -> bool
SBTypeCategory_DeleteTypeFormat
SBTypeCategory_DeleteTypeFormat(SBTypeCategory self, SBTypeNameSpecifier arg3) -> bool
SBTypeCategory_AddTypeSummary
SBTypeCategory_AddTypeSummary(SBTypeCategory self, SBTypeNameSpecifier arg3, SBTypeSummary arg4) -> bool
SBTypeCategory_DeleteTypeSummary
SBTypeCategory_DeleteTypeSummary(SBTypeCategory self, SBTypeNameSpecifier arg3) -> bool
SBTypeCategory_AddTypeFilter
SBTypeCategory_AddTypeFilter(SBTypeCategory self, SBTypeNameSpecifier arg3, SBTypeFilter arg4) -> bool
SBTypeCategory_DeleteTypeFilter
SBTypeCategory_DeleteTypeFilter(SBTypeCategory self, SBTypeNameSpecifier arg3) -> bool
SBTypeCategory_AddTypeSynthetic
SBTypeCategory_AddTypeSynthetic(SBTypeCategory self, SBTypeNameSpecifier arg3, SBTypeSynthetic arg4) -> bool
SBTypeCategory_DeleteTypeSynthetic
SBTypeCategory_DeleteTypeSynthetic(SBTypeCategory self, SBTypeNameSpecifier arg3) -> bool
SBTypeCategory___str__
SBTypeCategory___str__(SBTypeCategory self) -> PyObject *
SBTypeCategory_swigregister
new_SBTypeEnumMember
SBTypeEnumMember()
new_SBTypeEnumMember(SBTypeEnumMember rhs) -> SBTypeEnumMember
delete_SBTypeEnumMember
delete_SBTypeEnumMember(SBTypeEnumMember self)
SBTypeEnumMember_IsValid
SBTypeEnumMember_IsValid(SBTypeEnumMember self) -> bool
SBTypeEnumMember___nonzero__
SBTypeEnumMember___nonzero__(SBTypeEnumMember self) -> bool
SBTypeEnumMember_GetValueAsSigned
SBTypeEnumMember_GetValueAsSigned(SBTypeEnumMember self) -> int64_t
SBTypeEnumMember_GetValueAsUnsigned
SBTypeEnumMember_GetValueAsUnsigned(SBTypeEnumMember self) -> uint64_t
SBTypeEnumMember_GetName
SBTypeEnumMember_GetName(SBTypeEnumMember self) -> char const *
SBTypeEnumMember_GetType
SBTypeEnumMember_GetType(SBTypeEnumMember self) -> SBType
SBTypeEnumMember_GetDescription
SBTypeEnumMember_GetDescription(SBTypeEnumMember self, SBStream description, lldb::DescriptionLevel description_level) -> bool
SBTypeEnumMember___str__
SBTypeEnumMember___str__(SBTypeEnumMember self) -> PyObject *
SBTypeEnumMember_swigregister
new_SBTypeEnumMemberList
SBTypeEnumMemberList()
new_SBTypeEnumMemberList(SBTypeEnumMemberList rhs) -> SBTypeEnumMemberList
delete_SBTypeEnumMemberList
delete_SBTypeEnumMemberList(SBTypeEnumMemberList self)
SBTypeEnumMemberList_IsValid
SBTypeEnumMemberList_IsValid(SBTypeEnumMemberList self) -> bool
SBTypeEnumMemberList___nonzero__
SBTypeEnumMemberList___nonzero__(SBTypeEnumMemberList self) -> bool
SBTypeEnumMemberList_Append
SBTypeEnumMemberList_Append(SBTypeEnumMemberList self, SBTypeEnumMember entry)
SBTypeEnumMemberList_GetTypeEnumMemberAtIndex
SBTypeEnumMemberList_GetTypeEnumMemberAtIndex(SBTypeEnumMemberList self, uint32_t index) -> SBTypeEnumMember
SBTypeEnumMemberList_GetSize
SBTypeEnumMemberList_GetSize(SBTypeEnumMemberList self) -> uint32_t
SBTypeEnumMemberList_swigregister
new_SBTypeFilter
SBTypeFilter()
SBTypeFilter(uint32_t options)
new_SBTypeFilter(SBTypeFilter rhs) -> SBTypeFilter
delete_SBTypeFilter
delete_SBTypeFilter(SBTypeFilter self)
SBTypeFilter_IsValid
SBTypeFilter_IsValid(SBTypeFilter self) -> bool
SBTypeFilter___nonzero__
SBTypeFilter___nonzero__(SBTypeFilter self) -> bool
SBTypeFilter_IsEqualTo
SBTypeFilter_IsEqualTo(SBTypeFilter self, SBTypeFilter rhs) -> bool
SBTypeFilter_GetNumberOfExpressionPaths
SBTypeFilter_GetNumberOfExpressionPaths(SBTypeFilter self) -> uint32_t
SBTypeFilter_GetExpressionPathAtIndex
SBTypeFilter_GetExpressionPathAtIndex(SBTypeFilter self, uint32_t i) -> char const *
SBTypeFilter_ReplaceExpressionPathAtIndex
SBTypeFilter_ReplaceExpressionPathAtIndex(SBTypeFilter self, uint32_t i, char const * item) -> bool
SBTypeFilter_AppendExpressionPath
SBTypeFilter_AppendExpressionPath(SBTypeFilter self, char const * item)
SBTypeFilter_Clear
SBTypeFilter_Clear(SBTypeFilter self)
SBTypeFilter_GetOptions
SBTypeFilter_GetOptions(SBTypeFilter self) -> uint32_t
SBTypeFilter_SetOptions
SBTypeFilter_SetOptions(SBTypeFilter self, uint32_t arg3)
SBTypeFilter_GetDescription
SBTypeFilter_GetDescription(SBTypeFilter self, SBStream description, lldb::DescriptionLevel description_level) -> bool
SBTypeFilter___eq__
SBTypeFilter___eq__(SBTypeFilter self, SBTypeFilter rhs) -> bool
SBTypeFilter___ne__
SBTypeFilter___ne__(SBTypeFilter self, SBTypeFilter rhs) -> bool
SBTypeFilter___str__
SBTypeFilter___str__(SBTypeFilter self) -> PyObject *
SBTypeFilter_swigregister
new_SBTypeFormat
SBTypeFormat()
SBTypeFormat(lldb::Format format, uint32_t options=0)
SBTypeFormat(lldb::Format format)
SBTypeFormat(char const * type, uint32_t options=0)
SBTypeFormat(char const * type)
new_SBTypeFormat(SBTypeFormat rhs) -> SBTypeFormat
delete_SBTypeFormat
delete_SBTypeFormat(SBTypeFormat self)
SBTypeFormat_IsValid
SBTypeFormat_IsValid(SBTypeFormat self) -> bool
SBTypeFormat___nonzero__
SBTypeFormat___nonzero__(SBTypeFormat self) -> bool
SBTypeFormat_IsEqualTo
SBTypeFormat_IsEqualTo(SBTypeFormat self, SBTypeFormat rhs) -> bool
SBTypeFormat_GetFormat
SBTypeFormat_GetFormat(SBTypeFormat self) -> lldb::Format
SBTypeFormat_GetTypeName
SBTypeFormat_GetTypeName(SBTypeFormat self) -> char const *
SBTypeFormat_GetOptions
SBTypeFormat_GetOptions(SBTypeFormat self) -> uint32_t
SBTypeFormat_SetFormat
SBTypeFormat_SetFormat(SBTypeFormat self, lldb::Format arg3)
SBTypeFormat_SetTypeName
SBTypeFormat_SetTypeName(SBTypeFormat self, char const * arg3)
SBTypeFormat_SetOptions
SBTypeFormat_SetOptions(SBTypeFormat self, uint32_t arg3)
SBTypeFormat_GetDescription
SBTypeFormat_GetDescription(SBTypeFormat self, SBStream description, lldb::DescriptionLevel description_level) -> bool
SBTypeFormat___eq__
SBTypeFormat___eq__(SBTypeFormat self, SBTypeFormat rhs) -> bool
SBTypeFormat___ne__
SBTypeFormat___ne__(SBTypeFormat self, SBTypeFormat rhs) -> bool
SBTypeFormat___str__
SBTypeFormat___str__(SBTypeFormat self) -> PyObject *
SBTypeFormat_swigregister
new_SBTypeNameSpecifier
SBTypeNameSpecifier()
SBTypeNameSpecifier(char const * name, bool is_regex=False)
SBTypeNameSpecifier(char const * name)
SBTypeNameSpecifier(SBType type)
new_SBTypeNameSpecifier(SBTypeNameSpecifier rhs) -> SBTypeNameSpecifier
delete_SBTypeNameSpecifier
delete_SBTypeNameSpecifier(SBTypeNameSpecifier self)
SBTypeNameSpecifier_IsValid
SBTypeNameSpecifier_IsValid(SBTypeNameSpecifier self) -> bool
SBTypeNameSpecifier___nonzero__
SBTypeNameSpecifier___nonzero__(SBTypeNameSpecifier self) -> bool
SBTypeNameSpecifier_IsEqualTo
SBTypeNameSpecifier_IsEqualTo(SBTypeNameSpecifier self, SBTypeNameSpecifier rhs) -> bool
SBTypeNameSpecifier_GetName
SBTypeNameSpecifier_GetName(SBTypeNameSpecifier self) -> char const *
SBTypeNameSpecifier_GetType
SBTypeNameSpecifier_GetType(SBTypeNameSpecifier self) -> SBType
SBTypeNameSpecifier_IsRegex
SBTypeNameSpecifier_IsRegex(SBTypeNameSpecifier self) -> bool
SBTypeNameSpecifier_GetDescription
SBTypeNameSpecifier_GetDescription(SBTypeNameSpecifier self, SBStream description, lldb::DescriptionLevel description_level) -> bool
SBTypeNameSpecifier___eq__
SBTypeNameSpecifier___eq__(SBTypeNameSpecifier self, SBTypeNameSpecifier rhs) -> bool
SBTypeNameSpecifier___ne__
SBTypeNameSpecifier___ne__(SBTypeNameSpecifier self, SBTypeNameSpecifier rhs) -> bool
SBTypeNameSpecifier___str__
SBTypeNameSpecifier___str__(SBTypeNameSpecifier self) -> PyObject *
SBTypeNameSpecifier_swigregister
new_SBTypeSummaryOptions
SBTypeSummaryOptions()
new_SBTypeSummaryOptions(SBTypeSummaryOptions rhs) -> SBTypeSummaryOptions
delete_SBTypeSummaryOptions
delete_SBTypeSummaryOptions(SBTypeSummaryOptions self)
SBTypeSummaryOptions_IsValid
SBTypeSummaryOptions_IsValid(SBTypeSummaryOptions self) -> bool
SBTypeSummaryOptions___nonzero__
SBTypeSummaryOptions___nonzero__(SBTypeSummaryOptions self) -> bool
SBTypeSummaryOptions_GetLanguage
SBTypeSummaryOptions_GetLanguage(SBTypeSummaryOptions self) -> lldb::LanguageType
SBTypeSummaryOptions_GetCapping
SBTypeSummaryOptions_GetCapping(SBTypeSummaryOptions self) -> lldb::TypeSummaryCapping
SBTypeSummaryOptions_SetLanguage
SBTypeSummaryOptions_SetLanguage(SBTypeSummaryOptions self, lldb::LanguageType arg3)
SBTypeSummaryOptions_SetCapping
SBTypeSummaryOptions_SetCapping(SBTypeSummaryOptions self, lldb::TypeSummaryCapping arg3)
SBTypeSummaryOptions_swigregister
SBTypeSummary_CreateWithSummaryString
CreateWithSummaryString(char const * data, uint32_t options=0) -> SBTypeSummary
SBTypeSummary_CreateWithSummaryString(char const * data) -> SBTypeSummary
SBTypeSummary_CreateWithFunctionName
CreateWithFunctionName(char const * data, uint32_t options=0) -> SBTypeSummary
SBTypeSummary_CreateWithFunctionName(char const * data) -> SBTypeSummary
SBTypeSummary_CreateWithScriptCode
CreateWithScriptCode(char const * data, uint32_t options=0) -> SBTypeSummary
SBTypeSummary_CreateWithScriptCode(char const * data) -> SBTypeSummary
new_SBTypeSummary
SBTypeSummary()
new_SBTypeSummary(SBTypeSummary rhs) -> SBTypeSummary
delete_SBTypeSummary
delete_SBTypeSummary(SBTypeSummary self)
SBTypeSummary_IsValid
SBTypeSummary_IsValid(SBTypeSummary self) -> bool
SBTypeSummary___nonzero__
SBTypeSummary___nonzero__(SBTypeSummary self) -> bool
SBTypeSummary_IsEqualTo
SBTypeSummary_IsEqualTo(SBTypeSummary self, SBTypeSummary rhs) -> bool
SBTypeSummary_IsFunctionCode
SBTypeSummary_IsFunctionCode(SBTypeSummary self) -> bool
SBTypeSummary_IsFunctionName
SBTypeSummary_IsFunctionName(SBTypeSummary self) -> bool
SBTypeSummary_IsSummaryString
SBTypeSummary_IsSummaryString(SBTypeSummary self) -> bool
SBTypeSummary_GetData
SBTypeSummary_GetData(SBTypeSummary self) -> char const *
SBTypeSummary_SetSummaryString
SBTypeSummary_SetSummaryString(SBTypeSummary self, char const * data)
SBTypeSummary_SetFunctionName
SBTypeSummary_SetFunctionName(SBTypeSummary self, char const * data)
SBTypeSummary_SetFunctionCode
SBTypeSummary_SetFunctionCode(SBTypeSummary self, char const * data)
SBTypeSummary_GetOptions
SBTypeSummary_GetOptions(SBTypeSummary self) -> uint32_t
SBTypeSummary_SetOptions
SBTypeSummary_SetOptions(SBTypeSummary self, uint32_t arg3)
SBTypeSummary_GetDescription
SBTypeSummary_GetDescription(SBTypeSummary self, SBStream description, lldb::DescriptionLevel description_level) -> bool
SBTypeSummary___eq__
SBTypeSummary___eq__(SBTypeSummary self, SBTypeSummary rhs) -> bool
SBTypeSummary___ne__
SBTypeSummary___ne__(SBTypeSummary self, SBTypeSummary rhs) -> bool
SBTypeSummary___str__
SBTypeSummary___str__(SBTypeSummary self) -> PyObject *
SBTypeSummary_swigregister
SBTypeSynthetic_CreateWithClassName
CreateWithClassName(char const * data, uint32_t options=0) -> SBTypeSynthetic
SBTypeSynthetic_CreateWithClassName(char const * data) -> SBTypeSynthetic
SBTypeSynthetic_CreateWithScriptCode
CreateWithScriptCode(char const * data, uint32_t options=0) -> SBTypeSynthetic
SBTypeSynthetic_CreateWithScriptCode(char const * data) -> SBTypeSynthetic
new_SBTypeSynthetic
SBTypeSynthetic()
new_SBTypeSynthetic(SBTypeSynthetic rhs) -> SBTypeSynthetic
delete_SBTypeSynthetic
delete_SBTypeSynthetic(SBTypeSynthetic self)
SBTypeSynthetic_IsValid
SBTypeSynthetic_IsValid(SBTypeSynthetic self) -> bool
SBTypeSynthetic___nonzero__
SBTypeSynthetic___nonzero__(SBTypeSynthetic self) -> bool
SBTypeSynthetic_IsEqualTo
SBTypeSynthetic_IsEqualTo(SBTypeSynthetic self, SBTypeSynthetic rhs) -> bool
SBTypeSynthetic_IsClassCode
SBTypeSynthetic_IsClassCode(SBTypeSynthetic self) -> bool
SBTypeSynthetic_GetData
SBTypeSynthetic_GetData(SBTypeSynthetic self) -> char const *
SBTypeSynthetic_SetClassName
SBTypeSynthetic_SetClassName(SBTypeSynthetic self, char const * data)
SBTypeSynthetic_SetClassCode
SBTypeSynthetic_SetClassCode(SBTypeSynthetic self, char const * data)
SBTypeSynthetic_GetOptions
SBTypeSynthetic_GetOptions(SBTypeSynthetic self) -> uint32_t
SBTypeSynthetic_SetOptions
SBTypeSynthetic_SetOptions(SBTypeSynthetic self, uint32_t arg3)
SBTypeSynthetic_GetDescription
SBTypeSynthetic_GetDescription(SBTypeSynthetic self, SBStream description, lldb::DescriptionLevel description_level) -> bool
SBTypeSynthetic___eq__
SBTypeSynthetic___eq__(SBTypeSynthetic self, SBTypeSynthetic rhs) -> bool
SBTypeSynthetic___ne__
SBTypeSynthetic___ne__(SBTypeSynthetic self, SBTypeSynthetic rhs) -> bool
SBTypeSynthetic___str__
SBTypeSynthetic___str__(SBTypeSynthetic self) -> PyObject *
SBTypeSynthetic_swigregister
new_SBValue
SBValue()
new_SBValue(SBValue rhs) -> SBValue
delete_SBValue
delete_SBValue(SBValue self)
SBValue_IsValid
SBValue_IsValid(SBValue self) -> bool
SBValue___nonzero__
SBValue___nonzero__(SBValue self) -> bool
SBValue_Clear
SBValue_Clear(SBValue self)
SBValue_GetError
SBValue_GetError(SBValue self) -> SBError
SBValue_GetID
SBValue_GetID(SBValue self) -> lldb::user_id_t
SBValue_GetName
SBValue_GetName(SBValue self) -> char const *
SBValue_GetTypeName
SBValue_GetTypeName(SBValue self) -> char const *
SBValue_GetDisplayTypeName
SBValue_GetDisplayTypeName(SBValue self) -> char const *
SBValue_GetByteSize
SBValue_GetByteSize(SBValue self) -> size_t
SBValue_IsInScope
SBValue_IsInScope(SBValue self) -> bool
SBValue_GetFormat
SBValue_GetFormat(SBValue self) -> lldb::Format
SBValue_SetFormat
SBValue_SetFormat(SBValue self, lldb::Format format)
SBValue_GetValue
SBValue_GetValue(SBValue self) -> char const *
SBValue_GetValueAsSigned
GetValueAsSigned(SBError error, int64_t fail_value=0) -> int64_t
GetValueAsSigned(SBError error) -> int64_t
GetValueAsSigned(int64_t fail_value=0) -> int64_t
SBValue_GetValueAsSigned(SBValue self) -> int64_t
SBValue_GetValueAsUnsigned
GetValueAsUnsigned(SBError error, uint64_t fail_value=0) -> uint64_t
GetValueAsUnsigned(SBError error) -> uint64_t
GetValueAsUnsigned(uint64_t fail_value=0) -> uint64_t
SBValue_GetValueAsUnsigned(SBValue self) -> uint64_t
SBValue_GetValueAsAddress
SBValue_GetValueAsAddress(SBValue self) -> lldb::addr_t
// Return the value as an address.  On failure,
// LLDB_INVALID_ADDRESS will be returned.
// On architectures like the ARMv8.3 ISA, where the
// top (unaddressable) bits can be used for authentication,
// this method will return the value with the auth bits
// stripped.  GetValueAsUnsigned will return the value
// as-is, with any the authentication bits.  Calling this on 
// a random value which is not a pointer is an error.  
// Call GetType().IsPointerType() if in doubt.  An example of
// a tricky situation is a register SBValue without any type -
// the value may be an address with auth bits, or it may be a
// data field.  In these cases, looking up the GetValueAsAddress
// address to see if it points to a symbol in the process and
// that may indicate the presence of authentication bits.
// Users may want to see both the value with auth bits (GetValueAsUnsigned)
// and value with auth bits cleared (GetValueAsAddress) - it is 
// up to script writers to decide what is best in your own case.
SBValue_GetValueType
SBValue_GetValueType(SBValue self) -> lldb::ValueType
SBValue_GetValueDidChange
SBValue_GetValueDidChange(SBValue self) -> bool
SBValue_GetSummary
GetSummary() -> char const
SBValue_GetSummary(SBValue self, SBStream stream, SBTypeSummaryOptions options) -> char const *
SBValue_GetObjectDescription
SBValue_GetObjectDescription(SBValue self) -> char const *
SBValue_GetTypeValidatorResult
SBValue_GetTypeValidatorResult(SBValue self) -> char const *
SBValue_GetDynamicValue
SBValue_GetDynamicValue(SBValue self, lldb::DynamicValueType use_dynamic) -> SBValue
SBValue_GetStaticValue
SBValue_GetStaticValue(SBValue self) -> SBValue
SBValue_GetNonSyntheticValue
SBValue_GetNonSyntheticValue(SBValue self) -> SBValue
SBValue_GetPreferDynamicValue
SBValue_GetPreferDynamicValue(SBValue self) -> lldb::DynamicValueType
SBValue_SetPreferDynamicValue
SBValue_SetPreferDynamicValue(SBValue self, lldb::DynamicValueType use_dynamic)
SBValue_GetPreferSyntheticValue
SBValue_GetPreferSyntheticValue(SBValue self) -> bool
SBValue_SetPreferSyntheticValue
SBValue_SetPreferSyntheticValue(SBValue self, bool use_synthetic)
SBValue_IsDynamic
SBValue_IsDynamic(SBValue self) -> bool
SBValue_IsSynthetic
SBValue_IsSynthetic(SBValue self) -> bool
SBValue_IsSyntheticChildrenGenerated
SBValue_IsSyntheticChildrenGenerated(SBValue self) -> bool
SBValue_SetSyntheticChildrenGenerated
SBValue_SetSyntheticChildrenGenerated(SBValue self, bool arg3)
SBValue_GetLocation
SBValue_GetLocation(SBValue self) -> char const *
SBValue_SetValueFromCString
SetValueFromCString(char const * value_str) -> bool
SBValue_SetValueFromCString(SBValue self, char const * value_str, SBError error) -> bool
SBValue_GetTypeFormat
SBValue_GetTypeFormat(SBValue self) -> SBTypeFormat
SBValue_GetTypeSummary
SBValue_GetTypeSummary(SBValue self) -> SBTypeSummary
SBValue_GetTypeFilter
SBValue_GetTypeFilter(SBValue self) -> SBTypeFilter
SBValue_GetTypeSynthetic
SBValue_GetTypeSynthetic(SBValue self) -> SBTypeSynthetic
SBValue_GetChildAtIndex
GetChildAtIndex(uint32_t idx) -> SBValue
SBValue_GetChildAtIndex(SBValue self, uint32_t idx, lldb::DynamicValueType use_dynamic, bool can_create_synthetic) -> SBValue
SBValue_CreateChildAtOffset
SBValue_CreateChildAtOffset(SBValue self, char const * name, uint32_t offset, SBType type) -> SBValue
SBValue_Cast
SBValue_Cast(SBValue self, SBType type) -> SBValue
SBValue_CreateValueFromExpression
CreateValueFromExpression(char const * name, char const * expression) -> SBValue
SBValue_CreateValueFromExpression(SBValue self, char const * name, char const * expression, SBExpressionOptions options) -> SBValue
SBValue_CreateValueFromAddress
SBValue_CreateValueFromAddress(SBValue self, char const * name, lldb::addr_t address, SBType type) -> SBValue
SBValue_CreateValueFromData
SBValue_CreateValueFromData(SBValue self, char const * name, SBData data, SBType type) -> SBValue
SBValue_GetType
SBValue_GetType(SBValue self) -> SBType
SBValue_GetIndexOfChildWithName
SBValue_GetIndexOfChildWithName(SBValue self, char const * name) -> uint32_t
//------------------------------------------------------------------
/// Returns the child member index.
/// Matches children of this object only and will match base classes and
/// member names if this is a clang typed object.
/// @param[in] name
///     The name of the child value to get
/// @return
///     An index to the child member value.
//------------------------------------------------------------------
SBValue_GetChildMemberWithName
GetChildMemberWithName(char const * name) -> SBValue
SBValue_GetChildMemberWithName(SBValue self, char const * name, lldb::DynamicValueType use_dynamic) -> SBValue
SBValue_GetValueForExpressionPath
SBValue_GetValueForExpressionPath(SBValue self, char const * expr_path) -> SBValue
Expands nested expressions like .a->b[0].c[1]->d.
SBValue_GetDeclaration
SBValue_GetDeclaration(SBValue self) -> SBDeclaration
SBValue_MightHaveChildren
SBValue_MightHaveChildren(SBValue self) -> bool
SBValue_IsRuntimeSupportValue
SBValue_IsRuntimeSupportValue(SBValue self) -> bool
SBValue_GetNumChildren
GetNumChildren() -> uint32_t
SBValue_GetNumChildren(SBValue self, uint32_t max) -> uint32_t
SBValue_GetOpaqueType
SBValue_GetOpaqueType(SBValue self) -> void *
SBValue_Dereference
SBValue_Dereference(SBValue self) -> SBValue
SBValue_AddressOf
SBValue_AddressOf(SBValue self) -> SBValue
SBValue_TypeIsPointerType
SBValue_TypeIsPointerType(SBValue self) -> bool
SBValue_GetTarget
SBValue_GetTarget(SBValue self) -> SBTarget
SBValue_GetProcess
SBValue_GetProcess(SBValue self) -> SBProcess
SBValue_GetThread
SBValue_GetThread(SBValue self) -> SBThread
SBValue_GetFrame
SBValue_GetFrame(SBValue self) -> SBFrame
SBValue_Watch
SBValue_Watch(SBValue self, bool resolve_location, bool read, bool write, SBError error) -> SBWatchpoint
/// Find and watch a variable.
/// It returns an SBWatchpoint, which may be invalid.
SBValue_WatchPointee
SBValue_WatchPointee(SBValue self, bool resolve_location, bool read, bool write, SBError error) -> SBWatchpoint
/// Find and watch the location pointed to by a variable.
/// It returns an SBWatchpoint, which may be invalid.
SBValue_GetDescription
SBValue_GetDescription(SBValue self, SBStream description) -> bool
SBValue_GetPointeeData
GetPointeeData(uint32_t item_idx=0, uint32_t item_count=1) -> SBData
GetPointeeData(uint32_t item_idx=0) -> SBData
SBValue_GetPointeeData(SBValue self) -> SBData
//------------------------------------------------------------------
  /// Get an SBData wrapping what this SBValue points to.
  ///
  /// This method will dereference the current SBValue, if its
  /// data type is a T* or T[], and extract item_count elements
  /// of type T from it, copying their contents in an SBData. 
  ///
  /// @param[in] item_idx
  ///     The index of the first item to retrieve. For an array
  ///     this is equivalent to array[item_idx], for a pointer
  ///     to *(pointer + item_idx). In either case, the measurement
  ///     unit for item_idx is the sizeof(T) rather than the byte
  ///
  /// @param[in] item_count
  ///     How many items should be copied into the output. By default
  ///     only one item is copied, but more can be asked for.
  ///
  /// @return
  ///     An SBData with the contents of the copied items, on success.
  ///     An empty SBData otherwise.
  //------------------------------------------------------------------
SBValue_GetData
SBValue_GetData(SBValue self) -> SBData
//------------------------------------------------------------------
  /// Get an SBData wrapping the contents of this SBValue.
  ///
  /// This method will read the contents of this object in memory
  /// and copy them into an SBData for future use. 
  ///
  /// @return
  ///     An SBData with the contents of this SBValue, on success.
  ///     An empty SBData otherwise.
  //------------------------------------------------------------------
SBValue_SetData
SBValue_SetData(SBValue self, SBData data, SBError error) -> bool
SBValue_GetLoadAddress
SBValue_GetLoadAddress(SBValue self) -> lldb::addr_t
SBValue_GetAddress
SBValue_GetAddress(SBValue self) -> SBAddress
SBValue_Persist
SBValue_Persist(SBValue self) -> SBValue
SBValue_GetExpressionPath
GetExpressionPath(SBStream description) -> bool
SBValue_GetExpressionPath(SBValue self, SBStream description, bool qualify_cxx_base_classes) -> bool
SBValue___str__
SBValue___str__(SBValue self) -> PyObject *
SBValue_swigregister
new_SBValueList
SBValueList()
new_SBValueList(SBValueList rhs) -> SBValueList
delete_SBValueList
delete_SBValueList(SBValueList self)
SBValueList_IsValid
SBValueList_IsValid(SBValueList self) -> bool
SBValueList___nonzero__
SBValueList___nonzero__(SBValueList self) -> bool
SBValueList_Clear
SBValueList_Clear(SBValueList self)
SBValueList_Append
Append(SBValue val_obj)
SBValueList_Append(SBValueList self, SBValueList value_list)
SBValueList_GetSize
SBValueList_GetSize(SBValueList self) -> uint32_t
SBValueList_GetValueAtIndex
SBValueList_GetValueAtIndex(SBValueList self, uint32_t idx) -> SBValue
SBValueList_FindValueObjectByUID
SBValueList_FindValueObjectByUID(SBValueList self, lldb::user_id_t uid) -> SBValue
SBValueList_GetFirstValueByName
SBValueList_GetFirstValueByName(SBValueList self, char const * name) -> SBValue
SBValueList___str__
SBValueList___str__(SBValueList self) -> PyObject *
SBValueList_swigregister
new_SBVariablesOptions
SBVariablesOptions()
new_SBVariablesOptions(SBVariablesOptions options) -> SBVariablesOptions
delete_SBVariablesOptions
delete_SBVariablesOptions(SBVariablesOptions self)
SBVariablesOptions_IsValid
SBVariablesOptions_IsValid(SBVariablesOptions self) -> bool
SBVariablesOptions___nonzero__
SBVariablesOptions___nonzero__(SBVariablesOptions self) -> bool
SBVariablesOptions_GetIncludeArguments
SBVariablesOptions_GetIncludeArguments(SBVariablesOptions self) -> bool
SBVariablesOptions_SetIncludeArguments
SBVariablesOptions_SetIncludeArguments(SBVariablesOptions self, bool arg3)
SBVariablesOptions_GetIncludeRecognizedArguments
SBVariablesOptions_GetIncludeRecognizedArguments(SBVariablesOptions self, SBTarget arg3) -> bool
SBVariablesOptions_SetIncludeRecognizedArguments
SBVariablesOptions_SetIncludeRecognizedArguments(SBVariablesOptions self, bool arg3)
SBVariablesOptions_GetIncludeLocals
SBVariablesOptions_GetIncludeLocals(SBVariablesOptions self) -> bool
SBVariablesOptions_SetIncludeLocals
SBVariablesOptions_SetIncludeLocals(SBVariablesOptions self, bool arg3)
SBVariablesOptions_GetIncludeStatics
SBVariablesOptions_GetIncludeStatics(SBVariablesOptions self) -> bool
SBVariablesOptions_SetIncludeStatics
SBVariablesOptions_SetIncludeStatics(SBVariablesOptions self, bool arg3)
SBVariablesOptions_GetInScopeOnly
SBVariablesOptions_GetInScopeOnly(SBVariablesOptions self) -> bool
SBVariablesOptions_SetInScopeOnly
SBVariablesOptions_SetInScopeOnly(SBVariablesOptions self, bool arg3)
SBVariablesOptions_GetIncludeRuntimeSupportValues
SBVariablesOptions_GetIncludeRuntimeSupportValues(SBVariablesOptions self) -> bool
SBVariablesOptions_SetIncludeRuntimeSupportValues
SBVariablesOptions_SetIncludeRuntimeSupportValues(SBVariablesOptions self, bool arg3)
SBVariablesOptions_GetUseDynamic
SBVariablesOptions_GetUseDynamic(SBVariablesOptions self) -> lldb::DynamicValueType
SBVariablesOptions_SetUseDynamic
SBVariablesOptions_SetUseDynamic(SBVariablesOptions self, lldb::DynamicValueType arg3)
SBVariablesOptions_swigregister
new_SBWatchpoint
SBWatchpoint()
new_SBWatchpoint(SBWatchpoint rhs) -> SBWatchpoint
delete_SBWatchpoint
delete_SBWatchpoint(SBWatchpoint self)
SBWatchpoint_IsValid
SBWatchpoint_IsValid(SBWatchpoint self) -> bool
SBWatchpoint___nonzero__
SBWatchpoint___nonzero__(SBWatchpoint self) -> bool
SBWatchpoint_GetError
SBWatchpoint_GetError(SBWatchpoint self) -> SBError
SBWatchpoint_GetID
SBWatchpoint_GetID(SBWatchpoint self) -> lldb::watch_id_t
SBWatchpoint_GetHardwareIndex
SBWatchpoint_GetHardwareIndex(SBWatchpoint self) -> int32_t
//------------------------------------------------------------------
/// With -1 representing an invalid hardware index.
//------------------------------------------------------------------
SBWatchpoint_GetWatchAddress
SBWatchpoint_GetWatchAddress(SBWatchpoint self) -> lldb::addr_t
SBWatchpoint_GetWatchSize
SBWatchpoint_GetWatchSize(SBWatchpoint self) -> size_t
SBWatchpoint_SetEnabled
SBWatchpoint_SetEnabled(SBWatchpoint self, bool enabled)
SBWatchpoint_IsEnabled
SBWatchpoint_IsEnabled(SBWatchpoint self) -> bool
SBWatchpoint_GetHitCount
SBWatchpoint_GetHitCount(SBWatchpoint self) -> uint32_t
SBWatchpoint_GetIgnoreCount
SBWatchpoint_GetIgnoreCount(SBWatchpoint self) -> uint32_t
SBWatchpoint_SetIgnoreCount
SBWatchpoint_SetIgnoreCount(SBWatchpoint self, uint32_t n)
SBWatchpoint_GetCondition
SBWatchpoint_GetCondition(SBWatchpoint self) -> char const *
//------------------------------------------------------------------
/// Get the condition expression for the watchpoint.
//------------------------------------------------------------------
SBWatchpoint_SetCondition
SBWatchpoint_SetCondition(SBWatchpoint self, char const * condition)
//--------------------------------------------------------------------------
/// The watchpoint stops only if the condition expression evaluates to true.
//--------------------------------------------------------------------------
SBWatchpoint_GetDescription
SBWatchpoint_GetDescription(SBWatchpoint self, SBStream description, lldb::DescriptionLevel level) -> bool
SBWatchpoint_EventIsWatchpointEvent
SBWatchpoint_EventIsWatchpointEvent(SBEvent event) -> bool
SBWatchpoint_GetWatchpointEventTypeFromEvent
SBWatchpoint_GetWatchpointEventTypeFromEvent(SBEvent event) -> lldb::WatchpointEventType
SBWatchpoint_GetWatchpointFromEvent
SBWatchpoint_GetWatchpointFromEvent(SBEvent event) -> SBWatchpoint
SBWatchpoint___str__
SBWatchpoint___str__(SBWatchpoint self) -> PyObject *
SBWatchpoint_swigregister
new_SBUnixSignals
SBUnixSignals()
new_SBUnixSignals(SBUnixSignals rhs) -> SBUnixSignals
delete_SBUnixSignals
delete_SBUnixSignals(SBUnixSignals self)
SBUnixSignals_Clear
SBUnixSignals_Clear(SBUnixSignals self)
SBUnixSignals_IsValid
SBUnixSignals_IsValid(SBUnixSignals self) -> bool
SBUnixSignals___nonzero__
SBUnixSignals___nonzero__(SBUnixSignals self) -> bool
SBUnixSignals_GetSignalAsCString
SBUnixSignals_GetSignalAsCString(SBUnixSignals self, int32_t signo) -> char const *
SBUnixSignals_GetSignalNumberFromName
SBUnixSignals_GetSignalNumberFromName(SBUnixSignals self, char const * name) -> int32_t
SBUnixSignals_GetShouldSuppress
SBUnixSignals_GetShouldSuppress(SBUnixSignals self, int32_t signo) -> bool
SBUnixSignals_SetShouldSuppress
SBUnixSignals_SetShouldSuppress(SBUnixSignals self, int32_t signo, bool value) -> bool
SBUnixSignals_GetShouldStop
SBUnixSignals_GetShouldStop(SBUnixSignals self, int32_t signo) -> bool
SBUnixSignals_SetShouldStop
SBUnixSignals_SetShouldStop(SBUnixSignals self, int32_t signo, bool value) -> bool
SBUnixSignals_GetShouldNotify
SBUnixSignals_GetShouldNotify(SBUnixSignals self, int32_t signo) -> bool
SBUnixSignals_SetShouldNotify
SBUnixSignals_SetShouldNotify(SBUnixSignals self, int32_t signo, bool value) -> bool
SBUnixSignals_GetNumSignals
SBUnixSignals_GetNumSignals(SBUnixSignals self) -> int32_t
SBUnixSignals_GetSignalAtIndex
SBUnixSignals_GetSignalAtIndex(SBUnixSignals self, int32_t index) -> int32_t
SBUnixSignals_swigregister
Wrong number or type of arguments for overloaded function 'new_SBAddress'.
  Possible C/C++ prototypes are:
    lldb::SBAddress::SBAddress()
    lldb::SBAddress::SBAddress(lldb::SBAddress const &)
    lldb::SBAddress::SBAddress(lldb::SBSection,lldb::addr_t)
    lldb::SBAddress::SBAddress(lldb::addr_t,lldb::SBTarget &)
:new_SBAddress
O:new_SBAddress
in method 'new_SBAddress', argument 1 of type 'lldb::SBAddress const &'
invalid null reference in method 'new_SBAddress', argument 1 of type 'lldb::SBAddress const &'
OO:new_SBAddress
in method 'new_SBAddress', argument 1 of type 'lldb::SBSection'
invalid null reference in method 'new_SBAddress', argument 1 of type 'lldb::SBSection'
in method 'new_SBAddress', argument 2 of type 'lldb::addr_t'
in method 'new_SBAddress', argument 1 of type 'lldb::addr_t'
in method 'new_SBAddress', argument 2 of type 'lldb::SBTarget &'
invalid null reference in method 'new_SBAddress', argument 2 of type 'lldb::SBTarget &'
O:delete_SBAddress
in method 'delete_SBAddress', argument 1 of type 'lldb::SBAddress *'
O:SBAddress_IsValid
in method 'SBAddress_IsValid', argument 1 of type 'lldb::SBAddress const *'
O:SBAddress___nonzero__
in method 'SBAddress___nonzero__', argument 1 of type 'lldb::SBAddress const *'
O:SBAddress_Clear
in method 'SBAddress_Clear', argument 1 of type 'lldb::SBAddress *'
O:SBAddress_GetFileAddress
in method 'SBAddress_GetFileAddress', argument 1 of type 'lldb::SBAddress const *'
OO:SBAddress_GetLoadAddress
in method 'SBAddress_GetLoadAddress', argument 1 of type 'lldb::SBAddress const *'
in method 'SBAddress_GetLoadAddress', argument 2 of type 'lldb::SBTarget const &'
invalid null reference in method 'SBAddress_GetLoadAddress', argument 2 of type 'lldb::SBTarget const &'
OOO:SBAddress_SetLoadAddress
in method 'SBAddress_SetLoadAddress', argument 1 of type 'lldb::SBAddress *'
in method 'SBAddress_SetLoadAddress', argument 2 of type 'lldb::addr_t'
in method 'SBAddress_SetLoadAddress', argument 3 of type 'lldb::SBTarget &'
invalid null reference in method 'SBAddress_SetLoadAddress', argument 3 of type 'lldb::SBTarget &'
OO:SBAddress_OffsetAddress
in method 'SBAddress_OffsetAddress', argument 1 of type 'lldb::SBAddress *'
in method 'SBAddress_OffsetAddress', argument 2 of type 'lldb::addr_t'
OO:SBAddress_GetDescription
in method 'SBAddress_GetDescription', argument 1 of type 'lldb::SBAddress *'
in method 'SBAddress_GetDescription', argument 2 of type 'lldb::SBStream &'
invalid null reference in method 'SBAddress_GetDescription', argument 2 of type 'lldb::SBStream &'
O:SBAddress_GetSection
in method 'SBAddress_GetSection', argument 1 of type 'lldb::SBAddress *'
O:SBAddress_GetOffset
in method 'SBAddress_GetOffset', argument 1 of type 'lldb::SBAddress *'
OOO:SBAddress_SetAddress
in method 'SBAddress_SetAddress', argument 1 of type 'lldb::SBAddress *'
in method 'SBAddress_SetAddress', argument 2 of type 'lldb::SBSection'
invalid null reference in method 'SBAddress_SetAddress', argument 2 of type 'lldb::SBSection'
in method 'SBAddress_SetAddress', argument 3 of type 'lldb::addr_t'
OO:SBAddress_GetSymbolContext
in method 'SBAddress_GetSymbolContext', argument 1 of type 'lldb::SBAddress *'
in method 'SBAddress_GetSymbolContext', argument 2 of type 'uint32_t'
O:SBAddress_GetModule
in method 'SBAddress_GetModule', argument 1 of type 'lldb::SBAddress *'
O:SBAddress_GetCompileUnit
in method 'SBAddress_GetCompileUnit', argument 1 of type 'lldb::SBAddress *'
O:SBAddress_GetFunction
in method 'SBAddress_GetFunction', argument 1 of type 'lldb::SBAddress *'
O:SBAddress_GetBlock
in method 'SBAddress_GetBlock', argument 1 of type 'lldb::SBAddress *'
O:SBAddress_GetSymbol
in method 'SBAddress_GetSymbol', argument 1 of type 'lldb::SBAddress *'
O:SBAddress_GetLineEntry
in method 'SBAddress_GetLineEntry', argument 1 of type 'lldb::SBAddress *'
O:SBAddress___str__
in method 'SBAddress___str__', argument 1 of type 'lldb::SBAddress *'
O:swigregister
__new__
__swig_destroy__
Wrong number or type of arguments for overloaded function 'new_SBAttachInfo'.
  Possible C/C++ prototypes are:
    lldb::SBAttachInfo::SBAttachInfo()
    lldb::SBAttachInfo::SBAttachInfo(lldb::pid_t)
    lldb::SBAttachInfo::SBAttachInfo(char const *,bool)
    lldb::SBAttachInfo::SBAttachInfo(char const *,bool,bool)
    lldb::SBAttachInfo::SBAttachInfo(lldb::SBAttachInfo const &)
:new_SBAttachInfo
O:new_SBAttachInfo
in method 'new_SBAttachInfo', argument 1 of type 'lldb::SBAttachInfo const &'
invalid null reference in method 'new_SBAttachInfo', argument 1 of type 'lldb::SBAttachInfo const &'
in method 'new_SBAttachInfo', argument 1 of type 'lldb::pid_t'
_p_char
OO:new_SBAttachInfo
in method 'new_SBAttachInfo', argument 1 of type 'char const *'
in method 'new_SBAttachInfo', argument 2 of type 'bool'
OOO:new_SBAttachInfo
in method 'new_SBAttachInfo', argument 3 of type 'bool'
O:SBAttachInfo_GetProcessID
in method 'SBAttachInfo_GetProcessID', argument 1 of type 'lldb::SBAttachInfo *'
OO:SBAttachInfo_SetProcessID
in method 'SBAttachInfo_SetProcessID', argument 1 of type 'lldb::SBAttachInfo *'
in method 'SBAttachInfo_SetProcessID', argument 2 of type 'lldb::pid_t'
Wrong number or type of arguments for overloaded function 'SBAttachInfo_SetExecutable'.
  Possible C/C++ prototypes are:
    lldb::SBAttachInfo::SetExecutable(char const *)
    lldb::SBAttachInfo::SetExecutable(lldb::SBFileSpec)
OO:SBAttachInfo_SetExecutable
in method 'SBAttachInfo_SetExecutable', argument 1 of type 'lldb::SBAttachInfo *'
in method 'SBAttachInfo_SetExecutable', argument 2 of type 'lldb::SBFileSpec'
invalid null reference in method 'SBAttachInfo_SetExecutable', argument 2 of type 'lldb::SBFileSpec'
in method 'SBAttachInfo_SetExecutable', argument 2 of type 'char const *'
O:SBAttachInfo_GetWaitForLaunch
in method 'SBAttachInfo_GetWaitForLaunch', argument 1 of type 'lldb::SBAttachInfo *'
Wrong number or type of arguments for overloaded function 'SBAttachInfo_SetWaitForLaunch'.
  Possible C/C++ prototypes are:
    lldb::SBAttachInfo::SetWaitForLaunch(bool)
    lldb::SBAttachInfo::SetWaitForLaunch(bool,bool)
OO:SBAttachInfo_SetWaitForLaunch
in method 'SBAttachInfo_SetWaitForLaunch', argument 1 of type 'lldb::SBAttachInfo *'
in method 'SBAttachInfo_SetWaitForLaunch', argument 2 of type 'bool'
OOO:SBAttachInfo_SetWaitForLaunch
in method 'SBAttachInfo_SetWaitForLaunch', argument 3 of type 'bool'
O:SBAttachInfo_GetIgnoreExisting
in method 'SBAttachInfo_GetIgnoreExisting', argument 1 of type 'lldb::SBAttachInfo *'
OO:SBAttachInfo_SetIgnoreExisting
in method 'SBAttachInfo_SetIgnoreExisting', argument 1 of type 'lldb::SBAttachInfo *'
in method 'SBAttachInfo_SetIgnoreExisting', argument 2 of type 'bool'
O:SBAttachInfo_GetResumeCount
in method 'SBAttachInfo_GetResumeCount', argument 1 of type 'lldb::SBAttachInfo *'
OO:SBAttachInfo_SetResumeCount
in method 'SBAttachInfo_SetResumeCount', argument 1 of type 'lldb::SBAttachInfo *'
in method 'SBAttachInfo_SetResumeCount', argument 2 of type 'uint32_t'
O:SBAttachInfo_GetProcessPluginName
in method 'SBAttachInfo_GetProcessPluginName', argument 1 of type 'lldb::SBAttachInfo *'
OO:SBAttachInfo_SetProcessPluginName
in method 'SBAttachInfo_SetProcessPluginName', argument 1 of type 'lldb::SBAttachInfo *'
in method 'SBAttachInfo_SetProcessPluginName', argument 2 of type 'char const *'
O:SBAttachInfo_GetUserID
in method 'SBAttachInfo_GetUserID', argument 1 of type 'lldb::SBAttachInfo *'
O:SBAttachInfo_GetGroupID
in method 'SBAttachInfo_GetGroupID', argument 1 of type 'lldb::SBAttachInfo *'
O:SBAttachInfo_UserIDIsValid
in method 'SBAttachInfo_UserIDIsValid', argument 1 of type 'lldb::SBAttachInfo *'
O:SBAttachInfo_GroupIDIsValid
in method 'SBAttachInfo_GroupIDIsValid', argument 1 of type 'lldb::SBAttachInfo *'
OO:SBAttachInfo_SetUserID
in method 'SBAttachInfo_SetUserID', argument 1 of type 'lldb::SBAttachInfo *'
in method 'SBAttachInfo_SetUserID', argument 2 of type 'uint32_t'
OO:SBAttachInfo_SetGroupID
in method 'SBAttachInfo_SetGroupID', argument 1 of type 'lldb::SBAttachInfo *'
in method 'SBAttachInfo_SetGroupID', argument 2 of type 'uint32_t'
O:SBAttachInfo_GetEffectiveUserID
in method 'SBAttachInfo_GetEffectiveUserID', argument 1 of type 'lldb::SBAttachInfo *'
O:SBAttachInfo_GetEffectiveGroupID
in method 'SBAttachInfo_GetEffectiveGroupID', argument 1 of type 'lldb::SBAttachInfo *'
O:SBAttachInfo_EffectiveUserIDIsValid
in method 'SBAttachInfo_EffectiveUserIDIsValid', argument 1 of type 'lldb::SBAttachInfo *'
O:SBAttachInfo_EffectiveGroupIDIsValid
in method 'SBAttachInfo_EffectiveGroupIDIsValid', argument 1 of type 'lldb::SBAttachInfo *'
OO:SBAttachInfo_SetEffectiveUserID
in method 'SBAttachInfo_SetEffectiveUserID', argument 1 of type 'lldb::SBAttachInfo *'
in method 'SBAttachInfo_SetEffectiveUserID', argument 2 of type 'uint32_t'
OO:SBAttachInfo_SetEffectiveGroupID
in method 'SBAttachInfo_SetEffectiveGroupID', argument 1 of type 'lldb::SBAttachInfo *'
in method 'SBAttachInfo_SetEffectiveGroupID', argument 2 of type 'uint32_t'
O:SBAttachInfo_GetParentProcessID
in method 'SBAttachInfo_GetParentProcessID', argument 1 of type 'lldb::SBAttachInfo *'
OO:SBAttachInfo_SetParentProcessID
in method 'SBAttachInfo_SetParentProcessID', argument 1 of type 'lldb::SBAttachInfo *'
in method 'SBAttachInfo_SetParentProcessID', argument 2 of type 'lldb::pid_t'
O:SBAttachInfo_ParentProcessIDIsValid
in method 'SBAttachInfo_ParentProcessIDIsValid', argument 1 of type 'lldb::SBAttachInfo *'
O:SBAttachInfo_GetListener
in method 'SBAttachInfo_GetListener', argument 1 of type 'lldb::SBAttachInfo *'
OO:SBAttachInfo_SetListener
in method 'SBAttachInfo_SetListener', argument 1 of type 'lldb::SBAttachInfo *'
in method 'SBAttachInfo_SetListener', argument 2 of type 'lldb::SBListener &'
invalid null reference in method 'SBAttachInfo_SetListener', argument 2 of type 'lldb::SBListener &'
O:delete_SBAttachInfo
in method 'delete_SBAttachInfo', argument 1 of type 'lldb::SBAttachInfo *'
Wrong number or type of arguments for overloaded function 'new_SBBlock'.
  Possible C/C++ prototypes are:
    lldb::SBBlock::SBBlock()
    lldb::SBBlock::SBBlock(lldb::SBBlock const &)
:new_SBBlock
O:new_SBBlock
in method 'new_SBBlock', argument 1 of type 'lldb::SBBlock const &'
invalid null reference in method 'new_SBBlock', argument 1 of type 'lldb::SBBlock const &'
O:delete_SBBlock
in method 'delete_SBBlock', argument 1 of type 'lldb::SBBlock *'
O:SBBlock_IsInlined
in method 'SBBlock_IsInlined', argument 1 of type 'lldb::SBBlock const *'
O:SBBlock_IsValid
in method 'SBBlock_IsValid', argument 1 of type 'lldb::SBBlock const *'
O:SBBlock___nonzero__
in method 'SBBlock___nonzero__', argument 1 of type 'lldb::SBBlock const *'
O:SBBlock_GetInlinedName
in method 'SBBlock_GetInlinedName', argument 1 of type 'lldb::SBBlock const *'
O:SBBlock_GetInlinedCallSiteFile
in method 'SBBlock_GetInlinedCallSiteFile', argument 1 of type 'lldb::SBBlock const *'
O:SBBlock_GetInlinedCallSiteLine
in method 'SBBlock_GetInlinedCallSiteLine', argument 1 of type 'lldb::SBBlock const *'
O:SBBlock_GetInlinedCallSiteColumn
in method 'SBBlock_GetInlinedCallSiteColumn', argument 1 of type 'lldb::SBBlock const *'
O:SBBlock_GetParent
in method 'SBBlock_GetParent', argument 1 of type 'lldb::SBBlock *'
O:SBBlock_GetContainingInlinedBlock
in method 'SBBlock_GetContainingInlinedBlock', argument 1 of type 'lldb::SBBlock *'
O:SBBlock_GetSibling
in method 'SBBlock_GetSibling', argument 1 of type 'lldb::SBBlock *'
O:SBBlock_GetFirstChild
in method 'SBBlock_GetFirstChild', argument 1 of type 'lldb::SBBlock *'
O:SBBlock_GetNumRanges
in method 'SBBlock_GetNumRanges', argument 1 of type 'lldb::SBBlock *'
OO:SBBlock_GetRangeStartAddress
in method 'SBBlock_GetRangeStartAddress', argument 1 of type 'lldb::SBBlock *'
in method 'SBBlock_GetRangeStartAddress', argument 2 of type 'uint32_t'
OO:SBBlock_GetRangeEndAddress
in method 'SBBlock_GetRangeEndAddress', argument 1 of type 'lldb::SBBlock *'
in method 'SBBlock_GetRangeEndAddress', argument 2 of type 'uint32_t'
OO:SBBlock_GetRangeIndexForBlockAddress
in method 'SBBlock_GetRangeIndexForBlockAddress', argument 1 of type 'lldb::SBBlock *'
in method 'SBBlock_GetRangeIndexForBlockAddress', argument 2 of type 'lldb::SBAddress'
invalid null reference in method 'SBBlock_GetRangeIndexForBlockAddress', argument 2 of type 'lldb::SBAddress'
OO:SBBlock_GetDescription
in method 'SBBlock_GetDescription', argument 1 of type 'lldb::SBBlock *'
in method 'SBBlock_GetDescription', argument 2 of type 'lldb::SBStream &'
invalid null reference in method 'SBBlock_GetDescription', argument 2 of type 'lldb::SBStream &'
Wrong number or type of arguments for overloaded function 'SBBlock_GetVariables'.
  Possible C/C++ prototypes are:
    lldb::SBBlock::GetVariables(lldb::SBFrame &,bool,bool,bool,lldb::DynamicValueType)
    lldb::SBBlock::GetVariables(lldb::SBTarget &,bool,bool,bool)
OOOOO:SBBlock_GetVariables
in method 'SBBlock_GetVariables', argument 1 of type 'lldb::SBBlock *'
in method 'SBBlock_GetVariables', argument 2 of type 'lldb::SBTarget &'
invalid null reference in method 'SBBlock_GetVariables', argument 2 of type 'lldb::SBTarget &'
in method 'SBBlock_GetVariables', argument 3 of type 'bool'
in method 'SBBlock_GetVariables', argument 4 of type 'bool'
in method 'SBBlock_GetVariables', argument 5 of type 'bool'
OOOOOO:SBBlock_GetVariables
in method 'SBBlock_GetVariables', argument 2 of type 'lldb::SBFrame &'
invalid null reference in method 'SBBlock_GetVariables', argument 2 of type 'lldb::SBFrame &'
in method 'SBBlock_GetVariables', argument 6 of type 'lldb::DynamicValueType'
O:SBBlock___str__
in method 'SBBlock___str__', argument 1 of type 'lldb::SBBlock *'
Wrong number or type of arguments for overloaded function 'new_SBBreakpoint'.
  Possible C/C++ prototypes are:
    lldb::SBBreakpoint::SBBreakpoint()
    lldb::SBBreakpoint::SBBreakpoint(lldb::SBBreakpoint const &)
:new_SBBreakpoint
O:new_SBBreakpoint
in method 'new_SBBreakpoint', argument 1 of type 'lldb::SBBreakpoint const &'
invalid null reference in method 'new_SBBreakpoint', argument 1 of type 'lldb::SBBreakpoint const &'
O:delete_SBBreakpoint
in method 'delete_SBBreakpoint', argument 1 of type 'lldb::SBBreakpoint *'
O:SBBreakpoint_GetID
in method 'SBBreakpoint_GetID', argument 1 of type 'lldb::SBBreakpoint const *'
O:SBBreakpoint_IsValid
in method 'SBBreakpoint_IsValid', argument 1 of type 'lldb::SBBreakpoint const *'
O:SBBreakpoint___nonzero__
in method 'SBBreakpoint___nonzero__', argument 1 of type 'lldb::SBBreakpoint const *'
O:SBBreakpoint_ClearAllBreakpointSites
in method 'SBBreakpoint_ClearAllBreakpointSites', argument 1 of type 'lldb::SBBreakpoint *'
OO:SBBreakpoint_FindLocationByAddress
in method 'SBBreakpoint_FindLocationByAddress', argument 1 of type 'lldb::SBBreakpoint *'
in method 'SBBreakpoint_FindLocationByAddress', argument 2 of type 'lldb::addr_t'
OO:SBBreakpoint_FindLocationIDByAddress
in method 'SBBreakpoint_FindLocationIDByAddress', argument 1 of type 'lldb::SBBreakpoint *'
in method 'SBBreakpoint_FindLocationIDByAddress', argument 2 of type 'lldb::addr_t'
OO:SBBreakpoint_FindLocationByID
in method 'SBBreakpoint_FindLocationByID', argument 1 of type 'lldb::SBBreakpoint *'
in method 'SBBreakpoint_FindLocationByID', argument 2 of type 'lldb::break_id_t'
OO:SBBreakpoint_GetLocationAtIndex
in method 'SBBreakpoint_GetLocationAtIndex', argument 1 of type 'lldb::SBBreakpoint *'
in method 'SBBreakpoint_GetLocationAtIndex', argument 2 of type 'uint32_t'
OO:SBBreakpoint_SetEnabled
in method 'SBBreakpoint_SetEnabled', argument 1 of type 'lldb::SBBreakpoint *'
in method 'SBBreakpoint_SetEnabled', argument 2 of type 'bool'
O:SBBreakpoint_IsEnabled
in method 'SBBreakpoint_IsEnabled', argument 1 of type 'lldb::SBBreakpoint *'
OO:SBBreakpoint_SetOneShot
in method 'SBBreakpoint_SetOneShot', argument 1 of type 'lldb::SBBreakpoint *'
in method 'SBBreakpoint_SetOneShot', argument 2 of type 'bool'
O:SBBreakpoint_IsOneShot
in method 'SBBreakpoint_IsOneShot', argument 1 of type 'lldb::SBBreakpoint *'
O:SBBreakpoint_IsInternal
in method 'SBBreakpoint_IsInternal', argument 1 of type 'lldb::SBBreakpoint *'
O:SBBreakpoint_GetHitCount
in method 'SBBreakpoint_GetHitCount', argument 1 of type 'lldb::SBBreakpoint const *'
OO:SBBreakpoint_SetIgnoreCount
in method 'SBBreakpoint_SetIgnoreCount', argument 1 of type 'lldb::SBBreakpoint *'
in method 'SBBreakpoint_SetIgnoreCount', argument 2 of type 'uint32_t'
O:SBBreakpoint_GetIgnoreCount
in method 'SBBreakpoint_GetIgnoreCount', argument 1 of type 'lldb::SBBreakpoint const *'
OO:SBBreakpoint_SetCondition
in method 'SBBreakpoint_SetCondition', argument 1 of type 'lldb::SBBreakpoint *'
in method 'SBBreakpoint_SetCondition', argument 2 of type 'char const *'
O:SBBreakpoint_GetCondition
in method 'SBBreakpoint_GetCondition', argument 1 of type 'lldb::SBBreakpoint *'
OO:SBBreakpoint_SetAutoContinue
in method 'SBBreakpoint_SetAutoContinue', argument 1 of type 'lldb::SBBreakpoint *'
in method 'SBBreakpoint_SetAutoContinue', argument 2 of type 'bool'
O:SBBreakpoint_GetAutoContinue
in method 'SBBreakpoint_GetAutoContinue', argument 1 of type 'lldb::SBBreakpoint *'
OO:SBBreakpoint_SetThreadID
in method 'SBBreakpoint_SetThreadID', argument 1 of type 'lldb::SBBreakpoint *'
Expecting an integer
O:SBBreakpoint_GetThreadID
in method 'SBBreakpoint_GetThreadID', argument 1 of type 'lldb::SBBreakpoint *'
OO:SBBreakpoint_SetThreadIndex
in method 'SBBreakpoint_SetThreadIndex', argument 1 of type 'lldb::SBBreakpoint *'
in method 'SBBreakpoint_SetThreadIndex', argument 2 of type 'uint32_t'
O:SBBreakpoint_GetThreadIndex
in method 'SBBreakpoint_GetThreadIndex', argument 1 of type 'lldb::SBBreakpoint const *'
OO:SBBreakpoint_SetThreadName
in method 'SBBreakpoint_SetThreadName', argument 1 of type 'lldb::SBBreakpoint *'
in method 'SBBreakpoint_SetThreadName', argument 2 of type 'char const *'
O:SBBreakpoint_GetThreadName
in method 'SBBreakpoint_GetThreadName', argument 1 of type 'lldb::SBBreakpoint const *'
OO:SBBreakpoint_SetQueueName
in method 'SBBreakpoint_SetQueueName', argument 1 of type 'lldb::SBBreakpoint *'
in method 'SBBreakpoint_SetQueueName', argument 2 of type 'char const *'
O:SBBreakpoint_GetQueueName
in method 'SBBreakpoint_GetQueueName', argument 1 of type 'lldb::SBBreakpoint const *'
OO:SBBreakpoint_SetScriptCallbackFunction
in method 'SBBreakpoint_SetScriptCallbackFunction', argument 1 of type 'lldb::SBBreakpoint *'
in method 'SBBreakpoint_SetScriptCallbackFunction', argument 2 of type 'char const *'
OO:SBBreakpoint_SetScriptCallbackBody
in method 'SBBreakpoint_SetScriptCallbackBody', argument 1 of type 'lldb::SBBreakpoint *'
in method 'SBBreakpoint_SetScriptCallbackBody', argument 2 of type 'char const *'
OO:SBBreakpoint_SetCommandLineCommands
in method 'SBBreakpoint_SetCommandLineCommands', argument 1 of type 'lldb::SBBreakpoint *'
in method 'SBBreakpoint_SetCommandLineCommands', argument 2 of type 'lldb::SBStringList &'
invalid null reference in method 'SBBreakpoint_SetCommandLineCommands', argument 2 of type 'lldb::SBStringList &'
OO:SBBreakpoint_GetCommandLineCommands
in method 'SBBreakpoint_GetCommandLineCommands', argument 1 of type 'lldb::SBBreakpoint *'
in method 'SBBreakpoint_GetCommandLineCommands', argument 2 of type 'lldb::SBStringList &'
invalid null reference in method 'SBBreakpoint_GetCommandLineCommands', argument 2 of type 'lldb::SBStringList &'
OO:SBBreakpoint_AddName
in method 'SBBreakpoint_AddName', argument 1 of type 'lldb::SBBreakpoint *'
in method 'SBBreakpoint_AddName', argument 2 of type 'char const *'
OO:SBBreakpoint_RemoveName
in method 'SBBreakpoint_RemoveName', argument 1 of type 'lldb::SBBreakpoint *'
in method 'SBBreakpoint_RemoveName', argument 2 of type 'char const *'
OO:SBBreakpoint_MatchesName
in method 'SBBreakpoint_MatchesName', argument 1 of type 'lldb::SBBreakpoint *'
in method 'SBBreakpoint_MatchesName', argument 2 of type 'char const *'
OO:SBBreakpoint_GetNames
in method 'SBBreakpoint_GetNames', argument 1 of type 'lldb::SBBreakpoint *'
in method 'SBBreakpoint_GetNames', argument 2 of type 'lldb::SBStringList &'
invalid null reference in method 'SBBreakpoint_GetNames', argument 2 of type 'lldb::SBStringList &'
O:SBBreakpoint_GetNumResolvedLocations
in method 'SBBreakpoint_GetNumResolvedLocations', argument 1 of type 'lldb::SBBreakpoint const *'
O:SBBreakpoint_GetNumLocations
in method 'SBBreakpoint_GetNumLocations', argument 1 of type 'lldb::SBBreakpoint const *'
Wrong number or type of arguments for overloaded function 'SBBreakpoint_GetDescription'.
  Possible C/C++ prototypes are:
    lldb::SBBreakpoint::GetDescription(lldb::SBStream &)
    lldb::SBBreakpoint::GetDescription(lldb::SBStream &,bool)
OO:SBBreakpoint_GetDescription
in method 'SBBreakpoint_GetDescription', argument 1 of type 'lldb::SBBreakpoint *'
in method 'SBBreakpoint_GetDescription', argument 2 of type 'lldb::SBStream &'
invalid null reference in method 'SBBreakpoint_GetDescription', argument 2 of type 'lldb::SBStream &'
OOO:SBBreakpoint_GetDescription
in method 'SBBreakpoint_GetDescription', argument 3 of type 'bool'
OO:SBBreakpoint_AddLocation
in method 'SBBreakpoint_AddLocation', argument 1 of type 'lldb::SBBreakpoint *'
in method 'SBBreakpoint_AddLocation', argument 2 of type 'lldb::SBAddress &'
invalid null reference in method 'SBBreakpoint_AddLocation', argument 2 of type 'lldb::SBAddress &'
OO:SBBreakpoint___eq__
in method 'SBBreakpoint___eq__', argument 1 of type 'lldb::SBBreakpoint *'
in method 'SBBreakpoint___eq__', argument 2 of type 'lldb::SBBreakpoint const &'
invalid null reference in method 'SBBreakpoint___eq__', argument 2 of type 'lldb::SBBreakpoint const &'
OO:SBBreakpoint___ne__
in method 'SBBreakpoint___ne__', argument 1 of type 'lldb::SBBreakpoint *'
in method 'SBBreakpoint___ne__', argument 2 of type 'lldb::SBBreakpoint const &'
invalid null reference in method 'SBBreakpoint___ne__', argument 2 of type 'lldb::SBBreakpoint const &'
O:SBBreakpoint_EventIsBreakpointEvent
in method 'SBBreakpoint_EventIsBreakpointEvent', argument 1 of type 'lldb::SBEvent const &'
invalid null reference in method 'SBBreakpoint_EventIsBreakpointEvent', argument 1 of type 'lldb::SBEvent const &'
O:SBBreakpoint_GetBreakpointEventTypeFromEvent
in method 'SBBreakpoint_GetBreakpointEventTypeFromEvent', argument 1 of type 'lldb::SBEvent const &'
invalid null reference in method 'SBBreakpoint_GetBreakpointEventTypeFromEvent', argument 1 of type 'lldb::SBEvent const &'
O:SBBreakpoint_GetBreakpointFromEvent
in method 'SBBreakpoint_GetBreakpointFromEvent', argument 1 of type 'lldb::SBEvent const &'
invalid null reference in method 'SBBreakpoint_GetBreakpointFromEvent', argument 1 of type 'lldb::SBEvent const &'
OO:SBBreakpoint_GetBreakpointLocationAtIndexFromEvent
in method 'SBBreakpoint_GetBreakpointLocationAtIndexFromEvent', argument 1 of type 'lldb::SBEvent const &'
invalid null reference in method 'SBBreakpoint_GetBreakpointLocationAtIndexFromEvent', argument 1 of type 'lldb::SBEvent const &'
in method 'SBBreakpoint_GetBreakpointLocationAtIndexFromEvent', argument 2 of type 'uint32_t'
O:SBBreakpoint_GetNumBreakpointLocationsFromEvent
in method 'SBBreakpoint_GetNumBreakpointLocationsFromEvent', argument 1 of type 'lldb::SBEvent const &'
invalid null reference in method 'SBBreakpoint_GetNumBreakpointLocationsFromEvent', argument 1 of type 'lldb::SBEvent const &'
O:SBBreakpoint_IsHardware
in method 'SBBreakpoint_IsHardware', argument 1 of type 'lldb::SBBreakpoint *'
O:SBBreakpoint___str__
in method 'SBBreakpoint___str__', argument 1 of type 'lldb::SBBreakpoint *'
O:new_SBBreakpointList
in method 'new_SBBreakpointList', argument 1 of type 'lldb::SBTarget &'
invalid null reference in method 'new_SBBreakpointList', argument 1 of type 'lldb::SBTarget &'
O:delete_SBBreakpointList
in method 'delete_SBBreakpointList', argument 1 of type 'lldb::SBBreakpointList *'
O:SBBreakpointList_GetSize
in method 'SBBreakpointList_GetSize', argument 1 of type 'lldb::SBBreakpointList const *'
OO:SBBreakpointList_GetBreakpointAtIndex
in method 'SBBreakpointList_GetBreakpointAtIndex', argument 1 of type 'lldb::SBBreakpointList *'
in method 'SBBreakpointList_GetBreakpointAtIndex', argument 2 of type 'size_t'
OO:SBBreakpointList_FindBreakpointByID
in method 'SBBreakpointList_FindBreakpointByID', argument 1 of type 'lldb::SBBreakpointList *'
in method 'SBBreakpointList_FindBreakpointByID', argument 2 of type 'lldb::break_id_t'
OO:SBBreakpointList_Append
in method 'SBBreakpointList_Append', argument 1 of type 'lldb::SBBreakpointList *'
in method 'SBBreakpointList_Append', argument 2 of type 'lldb::SBBreakpoint const &'
invalid null reference in method 'SBBreakpointList_Append', argument 2 of type 'lldb::SBBreakpoint const &'
OO:SBBreakpointList_AppendIfUnique
in method 'SBBreakpointList_AppendIfUnique', argument 1 of type 'lldb::SBBreakpointList *'
in method 'SBBreakpointList_AppendIfUnique', argument 2 of type 'lldb::SBBreakpoint const &'
invalid null reference in method 'SBBreakpointList_AppendIfUnique', argument 2 of type 'lldb::SBBreakpoint const &'
OO:SBBreakpointList_AppendByID
in method 'SBBreakpointList_AppendByID', argument 1 of type 'lldb::SBBreakpointList *'
in method 'SBBreakpointList_AppendByID', argument 2 of type 'lldb::break_id_t'
O:SBBreakpointList_Clear
in method 'SBBreakpointList_Clear', argument 1 of type 'lldb::SBBreakpointList *'
Wrong number or type of arguments for overloaded function 'new_SBBreakpointLocation'.
  Possible C/C++ prototypes are:
    lldb::SBBreakpointLocation::SBBreakpointLocation()
    lldb::SBBreakpointLocation::SBBreakpointLocation(lldb::SBBreakpointLocation const &)
:new_SBBreakpointLocation
O:new_SBBreakpointLocation
in method 'new_SBBreakpointLocation', argument 1 of type 'lldb::SBBreakpointLocation const &'
invalid null reference in method 'new_SBBreakpointLocation', argument 1 of type 'lldb::SBBreakpointLocation const &'
O:delete_SBBreakpointLocation
in method 'delete_SBBreakpointLocation', argument 1 of type 'lldb::SBBreakpointLocation *'
O:SBBreakpointLocation_GetID
in method 'SBBreakpointLocation_GetID', argument 1 of type 'lldb::SBBreakpointLocation *'
O:SBBreakpointLocation_IsValid
in method 'SBBreakpointLocation_IsValid', argument 1 of type 'lldb::SBBreakpointLocation const *'
O:SBBreakpointLocation___nonzero__
in method 'SBBreakpointLocation___nonzero__', argument 1 of type 'lldb::SBBreakpointLocation const *'
O:SBBreakpointLocation_GetAddress
in method 'SBBreakpointLocation_GetAddress', argument 1 of type 'lldb::SBBreakpointLocation *'
O:SBBreakpointLocation_GetLoadAddress
in method 'SBBreakpointLocation_GetLoadAddress', argument 1 of type 'lldb::SBBreakpointLocation *'
OO:SBBreakpointLocation_SetEnabled
in method 'SBBreakpointLocation_SetEnabled', argument 1 of type 'lldb::SBBreakpointLocation *'
in method 'SBBreakpointLocation_SetEnabled', argument 2 of type 'bool'
O:SBBreakpointLocation_IsEnabled
in method 'SBBreakpointLocation_IsEnabled', argument 1 of type 'lldb::SBBreakpointLocation *'
O:SBBreakpointLocation_GetHitCount
in method 'SBBreakpointLocation_GetHitCount', argument 1 of type 'lldb::SBBreakpointLocation *'
O:SBBreakpointLocation_GetIgnoreCount
in method 'SBBreakpointLocation_GetIgnoreCount', argument 1 of type 'lldb::SBBreakpointLocation *'
OO:SBBreakpointLocation_SetIgnoreCount
in method 'SBBreakpointLocation_SetIgnoreCount', argument 1 of type 'lldb::SBBreakpointLocation *'
in method 'SBBreakpointLocation_SetIgnoreCount', argument 2 of type 'uint32_t'
OO:SBBreakpointLocation_SetCondition
in method 'SBBreakpointLocation_SetCondition', argument 1 of type 'lldb::SBBreakpointLocation *'
in method 'SBBreakpointLocation_SetCondition', argument 2 of type 'char const *'
O:SBBreakpointLocation_GetCondition
in method 'SBBreakpointLocation_GetCondition', argument 1 of type 'lldb::SBBreakpointLocation *'
O:SBBreakpointLocation_GetAutoContinue
in method 'SBBreakpointLocation_GetAutoContinue', argument 1 of type 'lldb::SBBreakpointLocation *'
OO:SBBreakpointLocation_SetAutoContinue
in method 'SBBreakpointLocation_SetAutoContinue', argument 1 of type 'lldb::SBBreakpointLocation *'
in method 'SBBreakpointLocation_SetAutoContinue', argument 2 of type 'bool'
OO:SBBreakpointLocation_SetScriptCallbackFunction
in method 'SBBreakpointLocation_SetScriptCallbackFunction', argument 1 of type 'lldb::SBBreakpointLocation *'
in method 'SBBreakpointLocation_SetScriptCallbackFunction', argument 2 of type 'char const *'
OO:SBBreakpointLocation_SetScriptCallbackBody
in method 'SBBreakpointLocation_SetScriptCallbackBody', argument 1 of type 'lldb::SBBreakpointLocation *'
in method 'SBBreakpointLocation_SetScriptCallbackBody', argument 2 of type 'char const *'
OO:SBBreakpointLocation_SetCommandLineCommands
in method 'SBBreakpointLocation_SetCommandLineCommands', argument 1 of type 'lldb::SBBreakpointLocation *'
in method 'SBBreakpointLocation_SetCommandLineCommands', argument 2 of type 'lldb::SBStringList &'
invalid null reference in method 'SBBreakpointLocation_SetCommandLineCommands', argument 2 of type 'lldb::SBStringList &'
OO:SBBreakpointLocation_GetCommandLineCommands
in method 'SBBreakpointLocation_GetCommandLineCommands', argument 1 of type 'lldb::SBBreakpointLocation *'
in method 'SBBreakpointLocation_GetCommandLineCommands', argument 2 of type 'lldb::SBStringList &'
invalid null reference in method 'SBBreakpointLocation_GetCommandLineCommands', argument 2 of type 'lldb::SBStringList &'
OO:SBBreakpointLocation_SetThreadID
in method 'SBBreakpointLocation_SetThreadID', argument 1 of type 'lldb::SBBreakpointLocation *'
O:SBBreakpointLocation_GetThreadID
in method 'SBBreakpointLocation_GetThreadID', argument 1 of type 'lldb::SBBreakpointLocation *'
OO:SBBreakpointLocation_SetThreadIndex
in method 'SBBreakpointLocation_SetThreadIndex', argument 1 of type 'lldb::SBBreakpointLocation *'
in method 'SBBreakpointLocation_SetThreadIndex', argument 2 of type 'uint32_t'
O:SBBreakpointLocation_GetThreadIndex
in method 'SBBreakpointLocation_GetThreadIndex', argument 1 of type 'lldb::SBBreakpointLocation const *'
OO:SBBreakpointLocation_SetThreadName
in method 'SBBreakpointLocation_SetThreadName', argument 1 of type 'lldb::SBBreakpointLocation *'
in method 'SBBreakpointLocation_SetThreadName', argument 2 of type 'char const *'
O:SBBreakpointLocation_GetThreadName
in method 'SBBreakpointLocation_GetThreadName', argument 1 of type 'lldb::SBBreakpointLocation const *'
OO:SBBreakpointLocation_SetQueueName
in method 'SBBreakpointLocation_SetQueueName', argument 1 of type 'lldb::SBBreakpointLocation *'
in method 'SBBreakpointLocation_SetQueueName', argument 2 of type 'char const *'
O:SBBreakpointLocation_GetQueueName
in method 'SBBreakpointLocation_GetQueueName', argument 1 of type 'lldb::SBBreakpointLocation const *'
O:SBBreakpointLocation_IsResolved
in method 'SBBreakpointLocation_IsResolved', argument 1 of type 'lldb::SBBreakpointLocation *'
OOO:SBBreakpointLocation_GetDescription
in method 'SBBreakpointLocation_GetDescription', argument 1 of type 'lldb::SBBreakpointLocation *'
in method 'SBBreakpointLocation_GetDescription', argument 2 of type 'lldb::SBStream &'
invalid null reference in method 'SBBreakpointLocation_GetDescription', argument 2 of type 'lldb::SBStream &'
in method 'SBBreakpointLocation_GetDescription', argument 3 of type 'lldb::DescriptionLevel'
O:SBBreakpointLocation_GetBreakpoint
in method 'SBBreakpointLocation_GetBreakpoint', argument 1 of type 'lldb::SBBreakpointLocation *'
O:SBBreakpointLocation___str__
in method 'SBBreakpointLocation___str__', argument 1 of type 'lldb::SBBreakpointLocation *'
Wrong number or type of arguments for overloaded function 'new_SBBreakpointName'.
  Possible C/C++ prototypes are:
    lldb::SBBreakpointName::SBBreakpointName()
    lldb::SBBreakpointName::SBBreakpointName(lldb::SBTarget &,char const *)
    lldb::SBBreakpointName::SBBreakpointName(lldb::SBBreakpoint &,char const *)
    lldb::SBBreakpointName::SBBreakpointName(lldb::SBBreakpointName const &)
:new_SBBreakpointName
O:new_SBBreakpointName
in method 'new_SBBreakpointName', argument 1 of type 'lldb::SBBreakpointName const &'
invalid null reference in method 'new_SBBreakpointName', argument 1 of type 'lldb::SBBreakpointName const &'
OO:new_SBBreakpointName
in method 'new_SBBreakpointName', argument 1 of type 'lldb::SBBreakpoint &'
invalid null reference in method 'new_SBBreakpointName', argument 1 of type 'lldb::SBBreakpoint &'
in method 'new_SBBreakpointName', argument 2 of type 'char const *'
in method 'new_SBBreakpointName', argument 1 of type 'lldb::SBTarget &'
invalid null reference in method 'new_SBBreakpointName', argument 1 of type 'lldb::SBTarget &'
O:delete_SBBreakpointName
in method 'delete_SBBreakpointName', argument 1 of type 'lldb::SBBreakpointName *'
OO:SBBreakpointName___eq__
in method 'SBBreakpointName___eq__', argument 1 of type 'lldb::SBBreakpointName *'
in method 'SBBreakpointName___eq__', argument 2 of type 'lldb::SBBreakpointName const &'
invalid null reference in method 'SBBreakpointName___eq__', argument 2 of type 'lldb::SBBreakpointName const &'
OO:SBBreakpointName___ne__
in method 'SBBreakpointName___ne__', argument 1 of type 'lldb::SBBreakpointName *'
in method 'SBBreakpointName___ne__', argument 2 of type 'lldb::SBBreakpointName const &'
invalid null reference in method 'SBBreakpointName___ne__', argument 2 of type 'lldb::SBBreakpointName const &'
O:SBBreakpointName___nonzero__
in method 'SBBreakpointName___nonzero__', argument 1 of type 'lldb::SBBreakpointName const *'
O:SBBreakpointName_IsValid
in method 'SBBreakpointName_IsValid', argument 1 of type 'lldb::SBBreakpointName const *'
O:SBBreakpointName_GetName
in method 'SBBreakpointName_GetName', argument 1 of type 'lldb::SBBreakpointName const *'
OO:SBBreakpointName_SetEnabled
in method 'SBBreakpointName_SetEnabled', argument 1 of type 'lldb::SBBreakpointName *'
in method 'SBBreakpointName_SetEnabled', argument 2 of type 'bool'
O:SBBreakpointName_IsEnabled
in method 'SBBreakpointName_IsEnabled', argument 1 of type 'lldb::SBBreakpointName *'
OO:SBBreakpointName_SetOneShot
in method 'SBBreakpointName_SetOneShot', argument 1 of type 'lldb::SBBreakpointName *'
in method 'SBBreakpointName_SetOneShot', argument 2 of type 'bool'
O:SBBreakpointName_IsOneShot
in method 'SBBreakpointName_IsOneShot', argument 1 of type 'lldb::SBBreakpointName const *'
OO:SBBreakpointName_SetIgnoreCount
in method 'SBBreakpointName_SetIgnoreCount', argument 1 of type 'lldb::SBBreakpointName *'
in method 'SBBreakpointName_SetIgnoreCount', argument 2 of type 'uint32_t'
O:SBBreakpointName_GetIgnoreCount
in method 'SBBreakpointName_GetIgnoreCount', argument 1 of type 'lldb::SBBreakpointName const *'
OO:SBBreakpointName_SetCondition
in method 'SBBreakpointName_SetCondition', argument 1 of type 'lldb::SBBreakpointName *'
in method 'SBBreakpointName_SetCondition', argument 2 of type 'char const *'
O:SBBreakpointName_GetCondition
in method 'SBBreakpointName_GetCondition', argument 1 of type 'lldb::SBBreakpointName *'
OO:SBBreakpointName_SetAutoContinue
in method 'SBBreakpointName_SetAutoContinue', argument 1 of type 'lldb::SBBreakpointName *'
in method 'SBBreakpointName_SetAutoContinue', argument 2 of type 'bool'
O:SBBreakpointName_GetAutoContinue
in method 'SBBreakpointName_GetAutoContinue', argument 1 of type 'lldb::SBBreakpointName *'
OO:SBBreakpointName_SetThreadID
in method 'SBBreakpointName_SetThreadID', argument 1 of type 'lldb::SBBreakpointName *'
O:SBBreakpointName_GetThreadID
in method 'SBBreakpointName_GetThreadID', argument 1 of type 'lldb::SBBreakpointName *'
OO:SBBreakpointName_SetThreadIndex
in method 'SBBreakpointName_SetThreadIndex', argument 1 of type 'lldb::SBBreakpointName *'
in method 'SBBreakpointName_SetThreadIndex', argument 2 of type 'uint32_t'
O:SBBreakpointName_GetThreadIndex
in method 'SBBreakpointName_GetThreadIndex', argument 1 of type 'lldb::SBBreakpointName const *'
OO:SBBreakpointName_SetThreadName
in method 'SBBreakpointName_SetThreadName', argument 1 of type 'lldb::SBBreakpointName *'
in method 'SBBreakpointName_SetThreadName', argument 2 of type 'char const *'
O:SBBreakpointName_GetThreadName
in method 'SBBreakpointName_GetThreadName', argument 1 of type 'lldb::SBBreakpointName const *'
OO:SBBreakpointName_SetQueueName
in method 'SBBreakpointName_SetQueueName', argument 1 of type 'lldb::SBBreakpointName *'
in method 'SBBreakpointName_SetQueueName', argument 2 of type 'char const *'
O:SBBreakpointName_GetQueueName
in method 'SBBreakpointName_GetQueueName', argument 1 of type 'lldb::SBBreakpointName const *'
OO:SBBreakpointName_SetScriptCallbackFunction
in method 'SBBreakpointName_SetScriptCallbackFunction', argument 1 of type 'lldb::SBBreakpointName *'
in method 'SBBreakpointName_SetScriptCallbackFunction', argument 2 of type 'char const *'
OO:SBBreakpointName_SetCommandLineCommands
in method 'SBBreakpointName_SetCommandLineCommands', argument 1 of type 'lldb::SBBreakpointName *'
in method 'SBBreakpointName_SetCommandLineCommands', argument 2 of type 'lldb::SBStringList &'
invalid null reference in method 'SBBreakpointName_SetCommandLineCommands', argument 2 of type 'lldb::SBStringList &'
OO:SBBreakpointName_GetCommandLineCommands
in method 'SBBreakpointName_GetCommandLineCommands', argument 1 of type 'lldb::SBBreakpointName *'
in method 'SBBreakpointName_GetCommandLineCommands', argument 2 of type 'lldb::SBStringList &'
invalid null reference in method 'SBBreakpointName_GetCommandLineCommands', argument 2 of type 'lldb::SBStringList &'
OO:SBBreakpointName_SetScriptCallbackBody
in method 'SBBreakpointName_SetScriptCallbackBody', argument 1 of type 'lldb::SBBreakpointName *'
in method 'SBBreakpointName_SetScriptCallbackBody', argument 2 of type 'char const *'
O:SBBreakpointName_GetHelpString
in method 'SBBreakpointName_GetHelpString', argument 1 of type 'lldb::SBBreakpointName const *'
OO:SBBreakpointName_SetHelpString
in method 'SBBreakpointName_SetHelpString', argument 1 of type 'lldb::SBBreakpointName *'
in method 'SBBreakpointName_SetHelpString', argument 2 of type 'char const *'
O:SBBreakpointName_GetAllowList
in method 'SBBreakpointName_GetAllowList', argument 1 of type 'lldb::SBBreakpointName const *'
OO:SBBreakpointName_SetAllowList
in method 'SBBreakpointName_SetAllowList', argument 1 of type 'lldb::SBBreakpointName *'
in method 'SBBreakpointName_SetAllowList', argument 2 of type 'bool'
O:SBBreakpointName_GetAllowDelete
in method 'SBBreakpointName_GetAllowDelete', argument 1 of type 'lldb::SBBreakpointName *'
OO:SBBreakpointName_SetAllowDelete
in method 'SBBreakpointName_SetAllowDelete', argument 1 of type 'lldb::SBBreakpointName *'
in method 'SBBreakpointName_SetAllowDelete', argument 2 of type 'bool'
O:SBBreakpointName_GetAllowDisable
in method 'SBBreakpointName_GetAllowDisable', argument 1 of type 'lldb::SBBreakpointName *'
OO:SBBreakpointName_SetAllowDisable
in method 'SBBreakpointName_SetAllowDisable', argument 1 of type 'lldb::SBBreakpointName *'
in method 'SBBreakpointName_SetAllowDisable', argument 2 of type 'bool'
OO:SBBreakpointName_GetDescription
in method 'SBBreakpointName_GetDescription', argument 1 of type 'lldb::SBBreakpointName *'
in method 'SBBreakpointName_GetDescription', argument 2 of type 'lldb::SBStream &'
invalid null reference in method 'SBBreakpointName_GetDescription', argument 2 of type 'lldb::SBStream &'
O:SBBreakpointName___str__
in method 'SBBreakpointName___str__', argument 1 of type 'lldb::SBBreakpointName *'
Wrong number or type of arguments for overloaded function 'new_SBBroadcaster'.
  Possible C/C++ prototypes are:
    lldb::SBBroadcaster::SBBroadcaster()
    lldb::SBBroadcaster::SBBroadcaster(char const *)
    lldb::SBBroadcaster::SBBroadcaster(lldb::SBBroadcaster const &)
:new_SBBroadcaster
O:new_SBBroadcaster
in method 'new_SBBroadcaster', argument 1 of type 'lldb::SBBroadcaster const &'
invalid null reference in method 'new_SBBroadcaster', argument 1 of type 'lldb::SBBroadcaster const &'
in method 'new_SBBroadcaster', argument 1 of type 'char const *'
O:delete_SBBroadcaster
in method 'delete_SBBroadcaster', argument 1 of type 'lldb::SBBroadcaster *'
O:SBBroadcaster_IsValid
in method 'SBBroadcaster_IsValid', argument 1 of type 'lldb::SBBroadcaster const *'
O:SBBroadcaster___nonzero__
in method 'SBBroadcaster___nonzero__', argument 1 of type 'lldb::SBBroadcaster const *'
O:SBBroadcaster_Clear
in method 'SBBroadcaster_Clear', argument 1 of type 'lldb::SBBroadcaster *'
Wrong number or type of arguments for overloaded function 'SBBroadcaster_BroadcastEventByType'.
  Possible C/C++ prototypes are:
    lldb::SBBroadcaster::BroadcastEventByType(uint32_t,bool)
    lldb::SBBroadcaster::BroadcastEventByType(uint32_t)
OO:SBBroadcaster_BroadcastEventByType
in method 'SBBroadcaster_BroadcastEventByType', argument 1 of type 'lldb::SBBroadcaster *'
in method 'SBBroadcaster_BroadcastEventByType', argument 2 of type 'uint32_t'
OOO:SBBroadcaster_BroadcastEventByType
in method 'SBBroadcaster_BroadcastEventByType', argument 3 of type 'bool'
Wrong number or type of arguments for overloaded function 'SBBroadcaster_BroadcastEvent'.
  Possible C/C++ prototypes are:
    lldb::SBBroadcaster::BroadcastEvent(lldb::SBEvent const &,bool)
    lldb::SBBroadcaster::BroadcastEvent(lldb::SBEvent const &)
OO:SBBroadcaster_BroadcastEvent
in method 'SBBroadcaster_BroadcastEvent', argument 1 of type 'lldb::SBBroadcaster *'
in method 'SBBroadcaster_BroadcastEvent', argument 2 of type 'lldb::SBEvent const &'
invalid null reference in method 'SBBroadcaster_BroadcastEvent', argument 2 of type 'lldb::SBEvent const &'
OOO:SBBroadcaster_BroadcastEvent
in method 'SBBroadcaster_BroadcastEvent', argument 3 of type 'bool'
OOO:SBBroadcaster_AddInitialEventsToListener
in method 'SBBroadcaster_AddInitialEventsToListener', argument 1 of type 'lldb::SBBroadcaster *'
in method 'SBBroadcaster_AddInitialEventsToListener', argument 2 of type 'lldb::SBListener const &'
invalid null reference in method 'SBBroadcaster_AddInitialEventsToListener', argument 2 of type 'lldb::SBListener const &'
in method 'SBBroadcaster_AddInitialEventsToListener', argument 3 of type 'uint32_t'
OOO:SBBroadcaster_AddListener
in method 'SBBroadcaster_AddListener', argument 1 of type 'lldb::SBBroadcaster *'
in method 'SBBroadcaster_AddListener', argument 2 of type 'lldb::SBListener const &'
invalid null reference in method 'SBBroadcaster_AddListener', argument 2 of type 'lldb::SBListener const &'
in method 'SBBroadcaster_AddListener', argument 3 of type 'uint32_t'
O:SBBroadcaster_GetName
in method 'SBBroadcaster_GetName', argument 1 of type 'lldb::SBBroadcaster const *'
OO:SBBroadcaster_EventTypeHasListeners
in method 'SBBroadcaster_EventTypeHasListeners', argument 1 of type 'lldb::SBBroadcaster *'
in method 'SBBroadcaster_EventTypeHasListeners', argument 2 of type 'uint32_t'
Wrong number or type of arguments for overloaded function 'SBBroadcaster_RemoveListener'.
  Possible C/C++ prototypes are:
    lldb::SBBroadcaster::RemoveListener(lldb::SBListener const &,uint32_t)
    lldb::SBBroadcaster::RemoveListener(lldb::SBListener const &)
OO:SBBroadcaster_RemoveListener
in method 'SBBroadcaster_RemoveListener', argument 1 of type 'lldb::SBBroadcaster *'
in method 'SBBroadcaster_RemoveListener', argument 2 of type 'lldb::SBListener const &'
invalid null reference in method 'SBBroadcaster_RemoveListener', argument 2 of type 'lldb::SBListener const &'
OOO:SBBroadcaster_RemoveListener
in method 'SBBroadcaster_RemoveListener', argument 3 of type 'uint32_t'
OO:SBBroadcaster___eq__
in method 'SBBroadcaster___eq__', argument 1 of type 'lldb::SBBroadcaster const *'
in method 'SBBroadcaster___eq__', argument 2 of type 'lldb::SBBroadcaster const &'
invalid null reference in method 'SBBroadcaster___eq__', argument 2 of type 'lldb::SBBroadcaster const &'
OO:SBBroadcaster___ne__
in method 'SBBroadcaster___ne__', argument 1 of type 'lldb::SBBroadcaster const *'
in method 'SBBroadcaster___ne__', argument 2 of type 'lldb::SBBroadcaster const &'
invalid null reference in method 'SBBroadcaster___ne__', argument 2 of type 'lldb::SBBroadcaster const &'
:new_SBCommandInterpreterRunOptions
O:delete_SBCommandInterpreterRunOptions
in method 'delete_SBCommandInterpreterRunOptions', argument 1 of type 'lldb::SBCommandInterpreterRunOptions *'
O:SBCommandInterpreterRunOptions_GetStopOnContinue
in method 'SBCommandInterpreterRunOptions_GetStopOnContinue', argument 1 of type 'lldb::SBCommandInterpreterRunOptions const *'
OO:SBCommandInterpreterRunOptions_SetStopOnContinue
in method 'SBCommandInterpreterRunOptions_SetStopOnContinue', argument 1 of type 'lldb::SBCommandInterpreterRunOptions *'
in method 'SBCommandInterpreterRunOptions_SetStopOnContinue', argument 2 of type 'bool'
O:SBCommandInterpreterRunOptions_GetStopOnError
in method 'SBCommandInterpreterRunOptions_GetStopOnError', argument 1 of type 'lldb::SBCommandInterpreterRunOptions const *'
OO:SBCommandInterpreterRunOptions_SetStopOnError
in method 'SBCommandInterpreterRunOptions_SetStopOnError', argument 1 of type 'lldb::SBCommandInterpreterRunOptions *'
in method 'SBCommandInterpreterRunOptions_SetStopOnError', argument 2 of type 'bool'
O:SBCommandInterpreterRunOptions_GetStopOnCrash
in method 'SBCommandInterpreterRunOptions_GetStopOnCrash', argument 1 of type 'lldb::SBCommandInterpreterRunOptions const *'
OO:SBCommandInterpreterRunOptions_SetStopOnCrash
in method 'SBCommandInterpreterRunOptions_SetStopOnCrash', argument 1 of type 'lldb::SBCommandInterpreterRunOptions *'
in method 'SBCommandInterpreterRunOptions_SetStopOnCrash', argument 2 of type 'bool'
O:SBCommandInterpreterRunOptions_GetEchoCommands
in method 'SBCommandInterpreterRunOptions_GetEchoCommands', argument 1 of type 'lldb::SBCommandInterpreterRunOptions const *'
OO:SBCommandInterpreterRunOptions_SetEchoCommands
in method 'SBCommandInterpreterRunOptions_SetEchoCommands', argument 1 of type 'lldb::SBCommandInterpreterRunOptions *'
in method 'SBCommandInterpreterRunOptions_SetEchoCommands', argument 2 of type 'bool'
O:SBCommandInterpreterRunOptions_GetPrintResults
in method 'SBCommandInterpreterRunOptions_GetPrintResults', argument 1 of type 'lldb::SBCommandInterpreterRunOptions const *'
OO:SBCommandInterpreterRunOptions_SetPrintResults
in method 'SBCommandInterpreterRunOptions_SetPrintResults', argument 1 of type 'lldb::SBCommandInterpreterRunOptions *'
in method 'SBCommandInterpreterRunOptions_SetPrintResults', argument 2 of type 'bool'
O:SBCommandInterpreterRunOptions_GetAddToHistory
in method 'SBCommandInterpreterRunOptions_GetAddToHistory', argument 1 of type 'lldb::SBCommandInterpreterRunOptions const *'
OO:SBCommandInterpreterRunOptions_SetAddToHistory
in method 'SBCommandInterpreterRunOptions_SetAddToHistory', argument 1 of type 'lldb::SBCommandInterpreterRunOptions *'
in method 'SBCommandInterpreterRunOptions_SetAddToHistory', argument 2 of type 'bool'
O:new_SBCommandInterpreter
in method 'new_SBCommandInterpreter', argument 1 of type 'lldb::SBCommandInterpreter const &'
invalid null reference in method 'new_SBCommandInterpreter', argument 1 of type 'lldb::SBCommandInterpreter const &'
O:delete_SBCommandInterpreter
in method 'delete_SBCommandInterpreter', argument 1 of type 'lldb::SBCommandInterpreter *'
O:SBCommandInterpreter_GetArgumentTypeAsCString
in method 'SBCommandInterpreter_GetArgumentTypeAsCString', argument 1 of type 'lldb::CommandArgumentType'
O:SBCommandInterpreter_GetArgumentDescriptionAsCString
in method 'SBCommandInterpreter_GetArgumentDescriptionAsCString', argument 1 of type 'lldb::CommandArgumentType'
O:SBCommandInterpreter_EventIsCommandInterpreterEvent
in method 'SBCommandInterpreter_EventIsCommandInterpreterEvent', argument 1 of type 'lldb::SBEvent const &'
invalid null reference in method 'SBCommandInterpreter_EventIsCommandInterpreterEvent', argument 1 of type 'lldb::SBEvent const &'
O:SBCommandInterpreter_IsValid
in method 'SBCommandInterpreter_IsValid', argument 1 of type 'lldb::SBCommandInterpreter const *'
O:SBCommandInterpreter___nonzero__
in method 'SBCommandInterpreter___nonzero__', argument 1 of type 'lldb::SBCommandInterpreter const *'
OO:SBCommandInterpreter_GetIOHandlerControlSequence
in method 'SBCommandInterpreter_GetIOHandlerControlSequence', argument 1 of type 'lldb::SBCommandInterpreter *'
in method 'SBCommandInterpreter_GetIOHandlerControlSequence', argument 2 of type 'char'
O:SBCommandInterpreter_GetPromptOnQuit
in method 'SBCommandInterpreter_GetPromptOnQuit', argument 1 of type 'lldb::SBCommandInterpreter *'
OO:SBCommandInterpreter_SetPromptOnQuit
in method 'SBCommandInterpreter_SetPromptOnQuit', argument 1 of type 'lldb::SBCommandInterpreter *'
in method 'SBCommandInterpreter_SetPromptOnQuit', argument 2 of type 'bool'
OO:SBCommandInterpreter_AllowExitCodeOnQuit
in method 'SBCommandInterpreter_AllowExitCodeOnQuit', argument 1 of type 'lldb::SBCommandInterpreter *'
in method 'SBCommandInterpreter_AllowExitCodeOnQuit', argument 2 of type 'bool'
O:SBCommandInterpreter_HasCustomQuitExitCode
in method 'SBCommandInterpreter_HasCustomQuitExitCode', argument 1 of type 'lldb::SBCommandInterpreter *'
O:SBCommandInterpreter_GetQuitStatus
in method 'SBCommandInterpreter_GetQuitStatus', argument 1 of type 'lldb::SBCommandInterpreter *'
OOO:SBCommandInterpreter_ResolveCommand
in method 'SBCommandInterpreter_ResolveCommand', argument 1 of type 'lldb::SBCommandInterpreter *'
in method 'SBCommandInterpreter_ResolveCommand', argument 2 of type 'char const *'
in method 'SBCommandInterpreter_ResolveCommand', argument 3 of type 'lldb::SBCommandReturnObject &'
invalid null reference in method 'SBCommandInterpreter_ResolveCommand', argument 3 of type 'lldb::SBCommandReturnObject &'
OO:SBCommandInterpreter_CommandExists
in method 'SBCommandInterpreter_CommandExists', argument 1 of type 'lldb::SBCommandInterpreter *'
in method 'SBCommandInterpreter_CommandExists', argument 2 of type 'char const *'
OO:SBCommandInterpreter_AliasExists
in method 'SBCommandInterpreter_AliasExists', argument 1 of type 'lldb::SBCommandInterpreter *'
in method 'SBCommandInterpreter_AliasExists', argument 2 of type 'char const *'
O:SBCommandInterpreter_GetBroadcaster
in method 'SBCommandInterpreter_GetBroadcaster', argument 1 of type 'lldb::SBCommandInterpreter *'
:SBCommandInterpreter_GetBroadcasterClass
O:SBCommandInterpreter_HasCommands
in method 'SBCommandInterpreter_HasCommands', argument 1 of type 'lldb::SBCommandInterpreter *'
O:SBCommandInterpreter_HasAliases
in method 'SBCommandInterpreter_HasAliases', argument 1 of type 'lldb::SBCommandInterpreter *'
O:SBCommandInterpreter_HasAliasOptions
in method 'SBCommandInterpreter_HasAliasOptions', argument 1 of type 'lldb::SBCommandInterpreter *'
O:SBCommandInterpreter_GetProcess
in method 'SBCommandInterpreter_GetProcess', argument 1 of type 'lldb::SBCommandInterpreter *'
O:SBCommandInterpreter_GetDebugger
in method 'SBCommandInterpreter_GetDebugger', argument 1 of type 'lldb::SBCommandInterpreter *'
OO:SBCommandInterpreter_SourceInitFileInHomeDirectory
in method 'SBCommandInterpreter_SourceInitFileInHomeDirectory', argument 1 of type 'lldb::SBCommandInterpreter *'
in method 'SBCommandInterpreter_SourceInitFileInHomeDirectory', argument 2 of type 'lldb::SBCommandReturnObject &'
invalid null reference in method 'SBCommandInterpreter_SourceInitFileInHomeDirectory', argument 2 of type 'lldb::SBCommandReturnObject &'
OO:SBCommandInterpreter_SourceInitFileInCurrentWorkingDirectory
in method 'SBCommandInterpreter_SourceInitFileInCurrentWorkingDirectory', argument 1 of type 'lldb::SBCommandInterpreter *'
in method 'SBCommandInterpreter_SourceInitFileInCurrentWorkingDirectory', argument 2 of type 'lldb::SBCommandReturnObject &'
invalid null reference in method 'SBCommandInterpreter_SourceInitFileInCurrentWorkingDirectory', argument 2 of type 'lldb::SBCommandReturnObject &'
Wrong number or type of arguments for overloaded function 'SBCommandInterpreter_HandleCommand'.
  Possible C/C++ prototypes are:
    lldb::SBCommandInterpreter::HandleCommand(char const *,lldb::SBCommandReturnObject &,bool)
    lldb::SBCommandInterpreter::HandleCommand(char const *,lldb::SBCommandReturnObject &)
    lldb::SBCommandInterpreter::HandleCommand(char const *,lldb::SBExecutionContext &,lldb::SBCommandReturnObject &,bool)
    lldb::SBCommandInterpreter::HandleCommand(char const *,lldb::SBExecutionContext &,lldb::SBCommandReturnObject &)
OOO:SBCommandInterpreter_HandleCommand
in method 'SBCommandInterpreter_HandleCommand', argument 1 of type 'lldb::SBCommandInterpreter *'
in method 'SBCommandInterpreter_HandleCommand', argument 2 of type 'char const *'
in method 'SBCommandInterpreter_HandleCommand', argument 3 of type 'lldb::SBCommandReturnObject &'
invalid null reference in method 'SBCommandInterpreter_HandleCommand', argument 3 of type 'lldb::SBCommandReturnObject &'
OOOO:SBCommandInterpreter_HandleCommand
in method 'SBCommandInterpreter_HandleCommand', argument 4 of type 'bool'
in method 'SBCommandInterpreter_HandleCommand', argument 3 of type 'lldb::SBExecutionContext &'
invalid null reference in method 'SBCommandInterpreter_HandleCommand', argument 3 of type 'lldb::SBExecutionContext &'
in method 'SBCommandInterpreter_HandleCommand', argument 4 of type 'lldb::SBCommandReturnObject &'
invalid null reference in method 'SBCommandInterpreter_HandleCommand', argument 4 of type 'lldb::SBCommandReturnObject &'
OOOOO:SBCommandInterpreter_HandleCommand
in method 'SBCommandInterpreter_HandleCommand', argument 5 of type 'bool'
OOOOO:SBCommandInterpreter_HandleCommandsFromFile
in method 'SBCommandInterpreter_HandleCommandsFromFile', argument 1 of type 'lldb::SBCommandInterpreter *'
in method 'SBCommandInterpreter_HandleCommandsFromFile', argument 2 of type 'lldb::SBFileSpec &'
invalid null reference in method 'SBCommandInterpreter_HandleCommandsFromFile', argument 2 of type 'lldb::SBFileSpec &'
in method 'SBCommandInterpreter_HandleCommandsFromFile', argument 3 of type 'lldb::SBExecutionContext &'
invalid null reference in method 'SBCommandInterpreter_HandleCommandsFromFile', argument 3 of type 'lldb::SBExecutionContext &'
in method 'SBCommandInterpreter_HandleCommandsFromFile', argument 4 of type 'lldb::SBCommandInterpreterRunOptions &'
invalid null reference in method 'SBCommandInterpreter_HandleCommandsFromFile', argument 4 of type 'lldb::SBCommandInterpreterRunOptions &'
in method 'SBCommandInterpreter_HandleCommandsFromFile', argument 5 of type 'lldb::SBCommandReturnObject'
invalid null reference in method 'SBCommandInterpreter_HandleCommandsFromFile', argument 5 of type 'lldb::SBCommandReturnObject'
OOOOOO:SBCommandInterpreter_HandleCompletion
in method 'SBCommandInterpreter_HandleCompletion', argument 1 of type 'lldb::SBCommandInterpreter *'
in method 'SBCommandInterpreter_HandleCompletion', argument 2 of type 'char const *'
in method 'SBCommandInterpreter_HandleCompletion', argument 3 of type 'uint32_t'
in method 'SBCommandInterpreter_HandleCompletion', argument 4 of type 'int'
in method 'SBCommandInterpreter_HandleCompletion', argument 5 of type 'int'
in method 'SBCommandInterpreter_HandleCompletion', argument 6 of type 'lldb::SBStringList &'
invalid null reference in method 'SBCommandInterpreter_HandleCompletion', argument 6 of type 'lldb::SBStringList &'
OOOOOOO:SBCommandInterpreter_HandleCompletionWithDescriptions
in method 'SBCommandInterpreter_HandleCompletionWithDescriptions', argument 1 of type 'lldb::SBCommandInterpreter *'
in method 'SBCommandInterpreter_HandleCompletionWithDescriptions', argument 2 of type 'char const *'
in method 'SBCommandInterpreter_HandleCompletionWithDescriptions', argument 3 of type 'uint32_t'
in method 'SBCommandInterpreter_HandleCompletionWithDescriptions', argument 4 of type 'int'
in method 'SBCommandInterpreter_HandleCompletionWithDescriptions', argument 5 of type 'int'
in method 'SBCommandInterpreter_HandleCompletionWithDescriptions', argument 6 of type 'lldb::SBStringList &'
invalid null reference in method 'SBCommandInterpreter_HandleCompletionWithDescriptions', argument 6 of type 'lldb::SBStringList &'
in method 'SBCommandInterpreter_HandleCompletionWithDescriptions', argument 7 of type 'lldb::SBStringList &'
invalid null reference in method 'SBCommandInterpreter_HandleCompletionWithDescriptions', argument 7 of type 'lldb::SBStringList &'
O:SBCommandInterpreter_IsActive
in method 'SBCommandInterpreter_IsActive', argument 1 of type 'lldb::SBCommandInterpreter *'
O:SBCommandInterpreter_WasInterrupted
in method 'SBCommandInterpreter_WasInterrupted', argument 1 of type 'lldb::SBCommandInterpreter const *'
Wrong number or type of arguments for overloaded function 'new_SBCommandReturnObject'.
  Possible C/C++ prototypes are:
    lldb::SBCommandReturnObject::SBCommandReturnObject()
    lldb::SBCommandReturnObject::SBCommandReturnObject(lldb::SBCommandReturnObject const &)
:new_SBCommandReturnObject
O:new_SBCommandReturnObject
in method 'new_SBCommandReturnObject', argument 1 of type 'lldb::SBCommandReturnObject const &'
invalid null reference in method 'new_SBCommandReturnObject', argument 1 of type 'lldb::SBCommandReturnObject const &'
O:delete_SBCommandReturnObject
in method 'delete_SBCommandReturnObject', argument 1 of type 'lldb::SBCommandReturnObject *'
O:SBCommandReturnObject_IsValid
in method 'SBCommandReturnObject_IsValid', argument 1 of type 'lldb::SBCommandReturnObject const *'
O:SBCommandReturnObject___nonzero__
in method 'SBCommandReturnObject___nonzero__', argument 1 of type 'lldb::SBCommandReturnObject const *'
O:SBCommandReturnObject_GetOutputSize
in method 'SBCommandReturnObject_GetOutputSize', argument 1 of type 'lldb::SBCommandReturnObject *'
O:SBCommandReturnObject_GetErrorSize
in method 'SBCommandReturnObject_GetErrorSize', argument 1 of type 'lldb::SBCommandReturnObject *'
Wrong number or type of arguments for overloaded function 'SBCommandReturnObject_GetOutput'.
  Possible C/C++ prototypes are:
    lldb::SBCommandReturnObject::GetOutput()
    lldb::SBCommandReturnObject::GetOutput(bool)
O:SBCommandReturnObject_GetOutput
in method 'SBCommandReturnObject_GetOutput', argument 1 of type 'lldb::SBCommandReturnObject *'
OO:SBCommandReturnObject_GetOutput
in method 'SBCommandReturnObject_GetOutput', argument 2 of type 'bool'
Wrong number or type of arguments for overloaded function 'SBCommandReturnObject_GetError'.
  Possible C/C++ prototypes are:
    lldb::SBCommandReturnObject::GetError()
    lldb::SBCommandReturnObject::GetError(bool)
O:SBCommandReturnObject_GetError
in method 'SBCommandReturnObject_GetError', argument 1 of type 'lldb::SBCommandReturnObject *'
OO:SBCommandReturnObject_GetError
in method 'SBCommandReturnObject_GetError', argument 2 of type 'bool'
OO:SBCommandReturnObject_PutOutput
in method 'SBCommandReturnObject_PutOutput', argument 1 of type 'lldb::SBCommandReturnObject *'
not a file-like object
OO:SBCommandReturnObject_PutError
in method 'SBCommandReturnObject_PutError', argument 1 of type 'lldb::SBCommandReturnObject *'
O:SBCommandReturnObject_Clear
in method 'SBCommandReturnObject_Clear', argument 1 of type 'lldb::SBCommandReturnObject *'
OO:SBCommandReturnObject_SetStatus
in method 'SBCommandReturnObject_SetStatus', argument 1 of type 'lldb::SBCommandReturnObject *'
in method 'SBCommandReturnObject_SetStatus', argument 2 of type 'lldb::ReturnStatus'
Wrong number or type of arguments for overloaded function 'SBCommandReturnObject_SetError'.
  Possible C/C++ prototypes are:
    lldb::SBCommandReturnObject::SetError(lldb::SBError &,char const *)
    lldb::SBCommandReturnObject::SetError(lldb::SBError &)
    lldb::SBCommandReturnObject::SetError(char const *)
OO:SBCommandReturnObject_SetError
in method 'SBCommandReturnObject_SetError', argument 1 of type 'lldb::SBCommandReturnObject *'
in method 'SBCommandReturnObject_SetError', argument 2 of type 'lldb::SBError &'
invalid null reference in method 'SBCommandReturnObject_SetError', argument 2 of type 'lldb::SBError &'
in method 'SBCommandReturnObject_SetError', argument 2 of type 'char const *'
OOO:SBCommandReturnObject_SetError
in method 'SBCommandReturnObject_SetError', argument 3 of type 'char const *'
O:SBCommandReturnObject_GetStatus
in method 'SBCommandReturnObject_GetStatus', argument 1 of type 'lldb::SBCommandReturnObject *'
O:SBCommandReturnObject_Succeeded
in method 'SBCommandReturnObject_Succeeded', argument 1 of type 'lldb::SBCommandReturnObject *'
O:SBCommandReturnObject_HasResult
in method 'SBCommandReturnObject_HasResult', argument 1 of type 'lldb::SBCommandReturnObject *'
OO:SBCommandReturnObject_AppendMessage
in method 'SBCommandReturnObject_AppendMessage', argument 1 of type 'lldb::SBCommandReturnObject *'
in method 'SBCommandReturnObject_AppendMessage', argument 2 of type 'char const *'
OO:SBCommandReturnObject_AppendWarning
in method 'SBCommandReturnObject_AppendWarning', argument 1 of type 'lldb::SBCommandReturnObject *'
in method 'SBCommandReturnObject_AppendWarning', argument 2 of type 'char const *'
OO:SBCommandReturnObject_GetDescription
in method 'SBCommandReturnObject_GetDescription', argument 1 of type 'lldb::SBCommandReturnObject *'
in method 'SBCommandReturnObject_GetDescription', argument 2 of type 'lldb::SBStream &'
invalid null reference in method 'SBCommandReturnObject_GetDescription', argument 2 of type 'lldb::SBStream &'
OO:SBCommandReturnObject_SetImmediateOutputFile
in method 'SBCommandReturnObject_SetImmediateOutputFile', argument 1 of type 'lldb::SBCommandReturnObject *'
OO:SBCommandReturnObject_SetImmediateErrorFile
in method 'SBCommandReturnObject_SetImmediateErrorFile', argument 1 of type 'lldb::SBCommandReturnObject *'
OO:SBCommandReturnObject_PutCString
in method 'SBCommandReturnObject_PutCString', argument 1 of type 'lldb::SBCommandReturnObject *'
not a string-like object
OO:SBCommandReturnObject_Print
in method 'SBCommandReturnObject_Print', argument 1 of type 'lldb::SBCommandReturnObject *'
in method 'SBCommandReturnObject_Print', argument 2 of type 'char const *'
O:SBCommandReturnObject___str__
in method 'SBCommandReturnObject___str__', argument 1 of type 'lldb::SBCommandReturnObject *'
OO:SBCommandReturnObject_write
in method 'SBCommandReturnObject_write', argument 1 of type 'lldb::SBCommandReturnObject *'
in method 'SBCommandReturnObject_write', argument 2 of type 'char const *'
O:SBCommandReturnObject_flush
in method 'SBCommandReturnObject_flush', argument 1 of type 'lldb::SBCommandReturnObject *'
Wrong number or type of arguments for overloaded function 'new_SBCommunication'.
  Possible C/C++ prototypes are:
    lldb::SBCommunication::SBCommunication()
    lldb::SBCommunication::SBCommunication(char const *)
:new_SBCommunication
O:new_SBCommunication
in method 'new_SBCommunication', argument 1 of type 'char const *'
O:delete_SBCommunication
in method 'delete_SBCommunication', argument 1 of type 'lldb::SBCommunication *'
O:SBCommunication_IsValid
in method 'SBCommunication_IsValid', argument 1 of type 'lldb::SBCommunication const *'
O:SBCommunication___nonzero__
in method 'SBCommunication___nonzero__', argument 1 of type 'lldb::SBCommunication const *'
O:SBCommunication_GetBroadcaster
in method 'SBCommunication_GetBroadcaster', argument 1 of type 'lldb::SBCommunication *'
:SBCommunication_GetBroadcasterClass
OOO:SBCommunication_AdoptFileDesriptor
in method 'SBCommunication_AdoptFileDesriptor', argument 1 of type 'lldb::SBCommunication *'
in method 'SBCommunication_AdoptFileDesriptor', argument 2 of type 'int'
in method 'SBCommunication_AdoptFileDesriptor', argument 3 of type 'bool'
OO:SBCommunication_Connect
in method 'SBCommunication_Connect', argument 1 of type 'lldb::SBCommunication *'
in method 'SBCommunication_Connect', argument 2 of type 'char const *'
O:SBCommunication_Disconnect
in method 'SBCommunication_Disconnect', argument 1 of type 'lldb::SBCommunication *'
O:SBCommunication_IsConnected
in method 'SBCommunication_IsConnected', argument 1 of type 'lldb::SBCommunication const *'
O:SBCommunication_GetCloseOnEOF
in method 'SBCommunication_GetCloseOnEOF', argument 1 of type 'lldb::SBCommunication *'
OO:SBCommunication_SetCloseOnEOF
in method 'SBCommunication_SetCloseOnEOF', argument 1 of type 'lldb::SBCommunication *'
in method 'SBCommunication_SetCloseOnEOF', argument 2 of type 'bool'
OOOOO:SBCommunication_Read
in method 'SBCommunication_Read', argument 1 of type 'lldb::SBCommunication *'
in method 'SBCommunication_Read', argument 2 of type 'void *'
in method 'SBCommunication_Read', argument 3 of type 'size_t'
in method 'SBCommunication_Read', argument 4 of type 'uint32_t'
in method 'SBCommunication_Read', argument 5 of type 'lldb::ConnectionStatus &'
invalid null reference in method 'SBCommunication_Read', argument 5 of type 'lldb::ConnectionStatus &'
OOOO:SBCommunication_Write
in method 'SBCommunication_Write', argument 1 of type 'lldb::SBCommunication *'
in method 'SBCommunication_Write', argument 2 of type 'void const *'
in method 'SBCommunication_Write', argument 3 of type 'size_t'
in method 'SBCommunication_Write', argument 4 of type 'lldb::ConnectionStatus &'
invalid null reference in method 'SBCommunication_Write', argument 4 of type 'lldb::ConnectionStatus &'
O:SBCommunication_ReadThreadStart
in method 'SBCommunication_ReadThreadStart', argument 1 of type 'lldb::SBCommunication *'
O:SBCommunication_ReadThreadStop
in method 'SBCommunication_ReadThreadStop', argument 1 of type 'lldb::SBCommunication *'
O:SBCommunication_ReadThreadIsRunning
in method 'SBCommunication_ReadThreadIsRunning', argument 1 of type 'lldb::SBCommunication *'
OOO:SBCommunication_SetReadThreadBytesReceivedCallback
in method 'SBCommunication_SetReadThreadBytesReceivedCallback', argument 1 of type 'lldb::SBCommunication *'
in method 'SBCommunication_SetReadThreadBytesReceivedCallback', argument 2 of type 'lldb::SBCommunication::ReadThreadBytesReceived'
in method 'SBCommunication_SetReadThreadBytesReceivedCallback', argument 3 of type 'void *'
Wrong number or type of arguments for overloaded function 'new_SBCompileUnit'.
  Possible C/C++ prototypes are:
    lldb::SBCompileUnit::SBCompileUnit()
    lldb::SBCompileUnit::SBCompileUnit(lldb::SBCompileUnit const &)
:new_SBCompileUnit
O:new_SBCompileUnit
in method 'new_SBCompileUnit', argument 1 of type 'lldb::SBCompileUnit const &'
invalid null reference in method 'new_SBCompileUnit', argument 1 of type 'lldb::SBCompileUnit const &'
O:delete_SBCompileUnit
in method 'delete_SBCompileUnit', argument 1 of type 'lldb::SBCompileUnit *'
O:SBCompileUnit_IsValid
in method 'SBCompileUnit_IsValid', argument 1 of type 'lldb::SBCompileUnit const *'
O:SBCompileUnit___nonzero__
in method 'SBCompileUnit___nonzero__', argument 1 of type 'lldb::SBCompileUnit const *'
O:SBCompileUnit_GetFileSpec
in method 'SBCompileUnit_GetFileSpec', argument 1 of type 'lldb::SBCompileUnit const *'
O:SBCompileUnit_GetNumLineEntries
in method 'SBCompileUnit_GetNumLineEntries', argument 1 of type 'lldb::SBCompileUnit const *'
OO:SBCompileUnit_GetLineEntryAtIndex
in method 'SBCompileUnit_GetLineEntryAtIndex', argument 1 of type 'lldb::SBCompileUnit const *'
in method 'SBCompileUnit_GetLineEntryAtIndex', argument 2 of type 'uint32_t'
Wrong number or type of arguments for overloaded function 'SBCompileUnit_FindLineEntryIndex'.
  Possible C/C++ prototypes are:
    lldb::SBCompileUnit::FindLineEntryIndex(uint32_t,uint32_t,lldb::SBFileSpec *) const
    lldb::SBCompileUnit::FindLineEntryIndex(uint32_t,uint32_t,lldb::SBFileSpec *,bool) const
OOOO:SBCompileUnit_FindLineEntryIndex
in method 'SBCompileUnit_FindLineEntryIndex', argument 1 of type 'lldb::SBCompileUnit const *'
in method 'SBCompileUnit_FindLineEntryIndex', argument 2 of type 'uint32_t'
in method 'SBCompileUnit_FindLineEntryIndex', argument 3 of type 'uint32_t'
in method 'SBCompileUnit_FindLineEntryIndex', argument 4 of type 'lldb::SBFileSpec *'
OOOOO:SBCompileUnit_FindLineEntryIndex
in method 'SBCompileUnit_FindLineEntryIndex', argument 5 of type 'bool'
OO:SBCompileUnit_GetSupportFileAtIndex
in method 'SBCompileUnit_GetSupportFileAtIndex', argument 1 of type 'lldb::SBCompileUnit const *'
in method 'SBCompileUnit_GetSupportFileAtIndex', argument 2 of type 'uint32_t'
O:SBCompileUnit_GetNumSupportFiles
in method 'SBCompileUnit_GetNumSupportFiles', argument 1 of type 'lldb::SBCompileUnit const *'
OOOO:SBCompileUnit_FindSupportFileIndex
in method 'SBCompileUnit_FindSupportFileIndex', argument 1 of type 'lldb::SBCompileUnit *'
in method 'SBCompileUnit_FindSupportFileIndex', argument 2 of type 'uint32_t'
in method 'SBCompileUnit_FindSupportFileIndex', argument 3 of type 'lldb::SBFileSpec const &'
invalid null reference in method 'SBCompileUnit_FindSupportFileIndex', argument 3 of type 'lldb::SBFileSpec const &'
in method 'SBCompileUnit_FindSupportFileIndex', argument 4 of type 'bool'
Wrong number or type of arguments for overloaded function 'SBCompileUnit_GetTypes'.
  Possible C/C++ prototypes are:
    lldb::SBCompileUnit::GetTypes(uint32_t)
    lldb::SBCompileUnit::GetTypes()
O:SBCompileUnit_GetTypes
in method 'SBCompileUnit_GetTypes', argument 1 of type 'lldb::SBCompileUnit *'
OO:SBCompileUnit_GetTypes
in method 'SBCompileUnit_GetTypes', argument 2 of type 'uint32_t'
O:SBCompileUnit_GetLanguage
in method 'SBCompileUnit_GetLanguage', argument 1 of type 'lldb::SBCompileUnit *'
OO:SBCompileUnit_GetDescription
in method 'SBCompileUnit_GetDescription', argument 1 of type 'lldb::SBCompileUnit *'
in method 'SBCompileUnit_GetDescription', argument 2 of type 'lldb::SBStream &'
invalid null reference in method 'SBCompileUnit_GetDescription', argument 2 of type 'lldb::SBStream &'
OO:SBCompileUnit___eq__
in method 'SBCompileUnit___eq__', argument 1 of type 'lldb::SBCompileUnit const *'
in method 'SBCompileUnit___eq__', argument 2 of type 'lldb::SBCompileUnit const &'
invalid null reference in method 'SBCompileUnit___eq__', argument 2 of type 'lldb::SBCompileUnit const &'
OO:SBCompileUnit___ne__
in method 'SBCompileUnit___ne__', argument 1 of type 'lldb::SBCompileUnit const *'
in method 'SBCompileUnit___ne__', argument 2 of type 'lldb::SBCompileUnit const &'
invalid null reference in method 'SBCompileUnit___ne__', argument 2 of type 'lldb::SBCompileUnit const &'
O:SBCompileUnit___str__
in method 'SBCompileUnit___str__', argument 1 of type 'lldb::SBCompileUnit *'
Wrong number or type of arguments for overloaded function 'new_SBData'.
  Possible C/C++ prototypes are:
    lldb::SBData::SBData()
    lldb::SBData::SBData(lldb::SBData const &)
:new_SBData
O:new_SBData
in method 'new_SBData', argument 1 of type 'lldb::SBData const &'
invalid null reference in method 'new_SBData', argument 1 of type 'lldb::SBData const &'
O:delete_SBData
in method 'delete_SBData', argument 1 of type 'lldb::SBData *'
O:SBData_GetAddressByteSize
in method 'SBData_GetAddressByteSize', argument 1 of type 'lldb::SBData *'
OO:SBData_SetAddressByteSize
in method 'SBData_SetAddressByteSize', argument 1 of type 'lldb::SBData *'
in method 'SBData_SetAddressByteSize', argument 2 of type 'uint8_t'
O:SBData_Clear
in method 'SBData_Clear', argument 1 of type 'lldb::SBData *'
O:SBData_IsValid
in method 'SBData_IsValid', argument 1 of type 'lldb::SBData *'
O:SBData___nonzero__
in method 'SBData___nonzero__', argument 1 of type 'lldb::SBData const *'
O:SBData_GetByteSize
in method 'SBData_GetByteSize', argument 1 of type 'lldb::SBData *'
O:SBData_GetByteOrder
in method 'SBData_GetByteOrder', argument 1 of type 'lldb::SBData *'
OO:SBData_SetByteOrder
in method 'SBData_SetByteOrder', argument 1 of type 'lldb::SBData *'
in method 'SBData_SetByteOrder', argument 2 of type 'lldb::ByteOrder'
OOO:SBData_GetFloat
in method 'SBData_GetFloat', argument 1 of type 'lldb::SBData *'
in method 'SBData_GetFloat', argument 2 of type 'lldb::SBError &'
invalid null reference in method 'SBData_GetFloat', argument 2 of type 'lldb::SBError &'
in method 'SBData_GetFloat', argument 3 of type 'lldb::offset_t'
OOO:SBData_GetDouble
in method 'SBData_GetDouble', argument 1 of type 'lldb::SBData *'
in method 'SBData_GetDouble', argument 2 of type 'lldb::SBError &'
invalid null reference in method 'SBData_GetDouble', argument 2 of type 'lldb::SBError &'
in method 'SBData_GetDouble', argument 3 of type 'lldb::offset_t'
OOO:SBData_GetLongDouble
in method 'SBData_GetLongDouble', argument 1 of type 'lldb::SBData *'
in method 'SBData_GetLongDouble', argument 2 of type 'lldb::SBError &'
invalid null reference in method 'SBData_GetLongDouble', argument 2 of type 'lldb::SBError &'
in method 'SBData_GetLongDouble', argument 3 of type 'lldb::offset_t'
OOO:SBData_GetAddress
in method 'SBData_GetAddress', argument 1 of type 'lldb::SBData *'
in method 'SBData_GetAddress', argument 2 of type 'lldb::SBError &'
invalid null reference in method 'SBData_GetAddress', argument 2 of type 'lldb::SBError &'
in method 'SBData_GetAddress', argument 3 of type 'lldb::offset_t'
OOO:SBData_GetUnsignedInt8
in method 'SBData_GetUnsignedInt8', argument 1 of type 'lldb::SBData *'
in method 'SBData_GetUnsignedInt8', argument 2 of type 'lldb::SBError &'
invalid null reference in method 'SBData_GetUnsignedInt8', argument 2 of type 'lldb::SBError &'
in method 'SBData_GetUnsignedInt8', argument 3 of type 'lldb::offset_t'
OOO:SBData_GetUnsignedInt16
in method 'SBData_GetUnsignedInt16', argument 1 of type 'lldb::SBData *'
in method 'SBData_GetUnsignedInt16', argument 2 of type 'lldb::SBError &'
invalid null reference in method 'SBData_GetUnsignedInt16', argument 2 of type 'lldb::SBError &'
in method 'SBData_GetUnsignedInt16', argument 3 of type 'lldb::offset_t'
OOO:SBData_GetUnsignedInt32
in method 'SBData_GetUnsignedInt32', argument 1 of type 'lldb::SBData *'
in method 'SBData_GetUnsignedInt32', argument 2 of type 'lldb::SBError &'
invalid null reference in method 'SBData_GetUnsignedInt32', argument 2 of type 'lldb::SBError &'
in method 'SBData_GetUnsignedInt32', argument 3 of type 'lldb::offset_t'
OOO:SBData_GetUnsignedInt64
in method 'SBData_GetUnsignedInt64', argument 1 of type 'lldb::SBData *'
in method 'SBData_GetUnsignedInt64', argument 2 of type 'lldb::SBError &'
invalid null reference in method 'SBData_GetUnsignedInt64', argument 2 of type 'lldb::SBError &'
in method 'SBData_GetUnsignedInt64', argument 3 of type 'lldb::offset_t'
OOO:SBData_GetSignedInt8
in method 'SBData_GetSignedInt8', argument 1 of type 'lldb::SBData *'
in method 'SBData_GetSignedInt8', argument 2 of type 'lldb::SBError &'
invalid null reference in method 'SBData_GetSignedInt8', argument 2 of type 'lldb::SBError &'
in method 'SBData_GetSignedInt8', argument 3 of type 'lldb::offset_t'
OOO:SBData_GetSignedInt16
in method 'SBData_GetSignedInt16', argument 1 of type 'lldb::SBData *'
in method 'SBData_GetSignedInt16', argument 2 of type 'lldb::SBError &'
invalid null reference in method 'SBData_GetSignedInt16', argument 2 of type 'lldb::SBError &'
in method 'SBData_GetSignedInt16', argument 3 of type 'lldb::offset_t'
OOO:SBData_GetSignedInt32
in method 'SBData_GetSignedInt32', argument 1 of type 'lldb::SBData *'
in method 'SBData_GetSignedInt32', argument 2 of type 'lldb::SBError &'
invalid null reference in method 'SBData_GetSignedInt32', argument 2 of type 'lldb::SBError &'
in method 'SBData_GetSignedInt32', argument 3 of type 'lldb::offset_t'
OOO:SBData_GetSignedInt64
in method 'SBData_GetSignedInt64', argument 1 of type 'lldb::SBData *'
in method 'SBData_GetSignedInt64', argument 2 of type 'lldb::SBError &'
invalid null reference in method 'SBData_GetSignedInt64', argument 2 of type 'lldb::SBError &'
in method 'SBData_GetSignedInt64', argument 3 of type 'lldb::offset_t'
OOO:SBData_GetString
in method 'SBData_GetString', argument 1 of type 'lldb::SBData *'
in method 'SBData_GetString', argument 2 of type 'lldb::SBError &'
invalid null reference in method 'SBData_GetString', argument 2 of type 'lldb::SBError &'
in method 'SBData_GetString', argument 3 of type 'lldb::offset_t'
OOO:SBData_GetDescription
in method 'SBData_GetDescription', argument 1 of type 'lldb::SBData *'
in method 'SBData_GetDescription', argument 2 of type 'lldb::SBStream &'
invalid null reference in method 'SBData_GetDescription', argument 2 of type 'lldb::SBStream &'
in method 'SBData_GetDescription', argument 3 of type 'lldb::addr_t'
OOOO:SBData_ReadRawData
in method 'SBData_ReadRawData', argument 1 of type 'lldb::SBData *'
in method 'SBData_ReadRawData', argument 2 of type 'lldb::SBError &'
invalid null reference in method 'SBData_ReadRawData', argument 2 of type 'lldb::SBError &'
in method 'SBData_ReadRawData', argument 3 of type 'lldb::offset_t'
Expecting an integer or long object
Positive integer expected
OOOOO:SBData_SetData
in method 'SBData_SetData', argument 1 of type 'lldb::SBData *'
in method 'SBData_SetData', argument 2 of type 'lldb::SBError &'
invalid null reference in method 'SBData_SetData', argument 2 of type 'lldb::SBError &'
Expecting a buffer
in method 'SBData_SetData', argument 5 of type 'lldb::ByteOrder'
in method 'SBData_SetData', argument 6 of type 'uint8_t'
OO:SBData_Append
in method 'SBData_Append', argument 1 of type 'lldb::SBData *'
in method 'SBData_Append', argument 2 of type 'lldb::SBData const &'
invalid null reference in method 'SBData_Append', argument 2 of type 'lldb::SBData const &'
OOO:SBData_CreateDataFromCString
in method 'SBData_CreateDataFromCString', argument 1 of type 'lldb::ByteOrder'
in method 'SBData_CreateDataFromCString', argument 2 of type 'uint32_t'
in method 'SBData_CreateDataFromCString', argument 3 of type 'char const *'
OOO:SBData_CreateDataFromUInt64Array
in method 'SBData_CreateDataFromUInt64Array', argument 1 of type 'lldb::ByteOrder'
in method 'SBData_CreateDataFromUInt64Array', argument 2 of type 'uint32_t'
list must contain numbers
not a list
OOO:SBData_CreateDataFromUInt32Array
in method 'SBData_CreateDataFromUInt32Array', argument 1 of type 'lldb::ByteOrder'
in method 'SBData_CreateDataFromUInt32Array', argument 2 of type 'uint32_t'
OOO:SBData_CreateDataFromSInt64Array
in method 'SBData_CreateDataFromSInt64Array', argument 1 of type 'lldb::ByteOrder'
in method 'SBData_CreateDataFromSInt64Array', argument 2 of type 'uint32_t'
OOO:SBData_CreateDataFromSInt32Array
in method 'SBData_CreateDataFromSInt32Array', argument 1 of type 'lldb::ByteOrder'
in method 'SBData_CreateDataFromSInt32Array', argument 2 of type 'uint32_t'
OOO:SBData_CreateDataFromDoubleArray
in method 'SBData_CreateDataFromDoubleArray', argument 1 of type 'lldb::ByteOrder'
in method 'SBData_CreateDataFromDoubleArray', argument 2 of type 'uint32_t'
OO:SBData_SetDataFromCString
in method 'SBData_SetDataFromCString', argument 1 of type 'lldb::SBData *'
in method 'SBData_SetDataFromCString', argument 2 of type 'char const *'
OO:SBData_SetDataFromUInt64Array
in method 'SBData_SetDataFromUInt64Array', argument 1 of type 'lldb::SBData *'
OO:SBData_SetDataFromUInt32Array
in method 'SBData_SetDataFromUInt32Array', argument 1 of type 'lldb::SBData *'
OO:SBData_SetDataFromSInt64Array
in method 'SBData_SetDataFromSInt64Array', argument 1 of type 'lldb::SBData *'
OO:SBData_SetDataFromSInt32Array
in method 'SBData_SetDataFromSInt32Array', argument 1 of type 'lldb::SBData *'
OO:SBData_SetDataFromDoubleArray
in method 'SBData_SetDataFromDoubleArray', argument 1 of type 'lldb::SBData *'
O:SBData___str__
in method 'SBData___str__', argument 1 of type 'lldb::SBData *'
:SBDebugger_Initialize
:SBDebugger_InitializeWithErrorHandling
:SBDebugger_Terminate
Wrong number or type of arguments for overloaded function 'SBDebugger_Create'.
  Possible C/C++ prototypes are:
    lldb::SBDebugger::Create()
    lldb::SBDebugger::Create(bool)
    lldb::SBDebugger::Create(bool,lldb::LogOutputCallback,void *)
:SBDebugger_Create
O:SBDebugger_Create
in method 'SBDebugger_Create', argument 1 of type 'bool'
OO:SBDebugger_Create
Need a callable object or None!
O:SBDebugger_Destroy
in method 'SBDebugger_Destroy', argument 1 of type 'lldb::SBDebugger &'
invalid null reference in method 'SBDebugger_Destroy', argument 1 of type 'lldb::SBDebugger &'
:SBDebugger_MemoryPressureDetected
Wrong number or type of arguments for overloaded function 'new_SBDebugger'.
  Possible C/C++ prototypes are:
    lldb::SBDebugger::SBDebugger()
    lldb::SBDebugger::SBDebugger(lldb::SBDebugger const &)
:new_SBDebugger
O:new_SBDebugger
in method 'new_SBDebugger', argument 1 of type 'lldb::SBDebugger const &'
invalid null reference in method 'new_SBDebugger', argument 1 of type 'lldb::SBDebugger const &'
O:delete_SBDebugger
in method 'delete_SBDebugger', argument 1 of type 'lldb::SBDebugger *'
O:SBDebugger_IsValid
in method 'SBDebugger_IsValid', argument 1 of type 'lldb::SBDebugger const *'
O:SBDebugger___nonzero__
in method 'SBDebugger___nonzero__', argument 1 of type 'lldb::SBDebugger const *'
O:SBDebugger_Clear
in method 'SBDebugger_Clear', argument 1 of type 'lldb::SBDebugger *'
OO:SBDebugger_SetAsync
in method 'SBDebugger_SetAsync', argument 1 of type 'lldb::SBDebugger *'
in method 'SBDebugger_SetAsync', argument 2 of type 'bool'
O:SBDebugger_GetAsync
in method 'SBDebugger_GetAsync', argument 1 of type 'lldb::SBDebugger *'
OO:SBDebugger_SkipLLDBInitFiles
in method 'SBDebugger_SkipLLDBInitFiles', argument 1 of type 'lldb::SBDebugger *'
in method 'SBDebugger_SkipLLDBInitFiles', argument 2 of type 'bool'
OOO:SBDebugger_SetInputFileHandle
in method 'SBDebugger_SetInputFileHandle', argument 1 of type 'lldb::SBDebugger *'
in method 'SBDebugger_SetInputFileHandle', argument 3 of type 'bool'
OOO:SBDebugger_SetOutputFileHandle
in method 'SBDebugger_SetOutputFileHandle', argument 1 of type 'lldb::SBDebugger *'
in method 'SBDebugger_SetOutputFileHandle', argument 3 of type 'bool'
OOO:SBDebugger_SetErrorFileHandle
in method 'SBDebugger_SetErrorFileHandle', argument 1 of type 'lldb::SBDebugger *'
in method 'SBDebugger_SetErrorFileHandle', argument 3 of type 'bool'
O:SBDebugger_GetInputFileHandle
in method 'SBDebugger_GetInputFileHandle', argument 1 of type 'lldb::SBDebugger *'
O:SBDebugger_GetOutputFileHandle
in method 'SBDebugger_GetOutputFileHandle', argument 1 of type 'lldb::SBDebugger *'
O:SBDebugger_GetErrorFileHandle
in method 'SBDebugger_GetErrorFileHandle', argument 1 of type 'lldb::SBDebugger *'
O:SBDebugger_GetCommandInterpreter
in method 'SBDebugger_GetCommandInterpreter', argument 1 of type 'lldb::SBDebugger *'
OO:SBDebugger_HandleCommand
in method 'SBDebugger_HandleCommand', argument 1 of type 'lldb::SBDebugger *'
in method 'SBDebugger_HandleCommand', argument 2 of type 'char const *'
O:SBDebugger_GetListener
in method 'SBDebugger_GetListener', argument 1 of type 'lldb::SBDebugger *'
OOOOO:SBDebugger_HandleProcessEvent
in method 'SBDebugger_HandleProcessEvent', argument 1 of type 'lldb::SBDebugger *'
in method 'SBDebugger_HandleProcessEvent', argument 2 of type 'lldb::SBProcess const &'
invalid null reference in method 'SBDebugger_HandleProcessEvent', argument 2 of type 'lldb::SBProcess const &'
in method 'SBDebugger_HandleProcessEvent', argument 3 of type 'lldb::SBEvent const &'
invalid null reference in method 'SBDebugger_HandleProcessEvent', argument 3 of type 'lldb::SBEvent const &'
OOO:SBDebugger_CreateTargetWithFileAndTargetTriple
in method 'SBDebugger_CreateTargetWithFileAndTargetTriple', argument 1 of type 'lldb::SBDebugger *'
in method 'SBDebugger_CreateTargetWithFileAndTargetTriple', argument 2 of type 'char const *'
in method 'SBDebugger_CreateTargetWithFileAndTargetTriple', argument 3 of type 'char const *'
OOO:SBDebugger_CreateTargetWithFileAndArch
in method 'SBDebugger_CreateTargetWithFileAndArch', argument 1 of type 'lldb::SBDebugger *'
in method 'SBDebugger_CreateTargetWithFileAndArch', argument 2 of type 'char const *'
in method 'SBDebugger_CreateTargetWithFileAndArch', argument 3 of type 'char const *'
Wrong number or type of arguments for overloaded function 'SBDebugger_CreateTarget'.
  Possible C/C++ prototypes are:
    lldb::SBDebugger::CreateTarget(char const *,char const *,char const *,bool,lldb::SBError &)
    lldb::SBDebugger::CreateTarget(char const *)
OO:SBDebugger_CreateTarget
in method 'SBDebugger_CreateTarget', argument 1 of type 'lldb::SBDebugger *'
in method 'SBDebugger_CreateTarget', argument 2 of type 'char const *'
OOOOOO:SBDebugger_CreateTarget
in method 'SBDebugger_CreateTarget', argument 3 of type 'char const *'
in method 'SBDebugger_CreateTarget', argument 4 of type 'char const *'
in method 'SBDebugger_CreateTarget', argument 5 of type 'bool'
in method 'SBDebugger_CreateTarget', argument 6 of type 'lldb::SBError &'
invalid null reference in method 'SBDebugger_CreateTarget', argument 6 of type 'lldb::SBError &'
O:SBDebugger_GetDummyTarget
in method 'SBDebugger_GetDummyTarget', argument 1 of type 'lldb::SBDebugger *'
OO:SBDebugger_DeleteTarget
in method 'SBDebugger_DeleteTarget', argument 1 of type 'lldb::SBDebugger *'
in method 'SBDebugger_DeleteTarget', argument 2 of type 'lldb::SBTarget &'
invalid null reference in method 'SBDebugger_DeleteTarget', argument 2 of type 'lldb::SBTarget &'
OO:SBDebugger_GetTargetAtIndex
in method 'SBDebugger_GetTargetAtIndex', argument 1 of type 'lldb::SBDebugger *'
in method 'SBDebugger_GetTargetAtIndex', argument 2 of type 'uint32_t'
OO:SBDebugger_GetIndexOfTarget
in method 'SBDebugger_GetIndexOfTarget', argument 1 of type 'lldb::SBDebugger *'
in method 'SBDebugger_GetIndexOfTarget', argument 2 of type 'lldb::SBTarget'
invalid null reference in method 'SBDebugger_GetIndexOfTarget', argument 2 of type 'lldb::SBTarget'
OO:SBDebugger_FindTargetWithProcessID
in method 'SBDebugger_FindTargetWithProcessID', argument 1 of type 'lldb::SBDebugger *'
in method 'SBDebugger_FindTargetWithProcessID', argument 2 of type 'lldb::pid_t'
OOO:SBDebugger_FindTargetWithFileAndArch
in method 'SBDebugger_FindTargetWithFileAndArch', argument 1 of type 'lldb::SBDebugger *'
in method 'SBDebugger_FindTargetWithFileAndArch', argument 2 of type 'char const *'
in method 'SBDebugger_FindTargetWithFileAndArch', argument 3 of type 'char const *'
O:SBDebugger_GetNumTargets
in method 'SBDebugger_GetNumTargets', argument 1 of type 'lldb::SBDebugger *'
O:SBDebugger_GetSelectedTarget
in method 'SBDebugger_GetSelectedTarget', argument 1 of type 'lldb::SBDebugger *'
OO:SBDebugger_SetSelectedTarget
in method 'SBDebugger_SetSelectedTarget', argument 1 of type 'lldb::SBDebugger *'
in method 'SBDebugger_SetSelectedTarget', argument 2 of type 'lldb::SBTarget &'
invalid null reference in method 'SBDebugger_SetSelectedTarget', argument 2 of type 'lldb::SBTarget &'
O:SBDebugger_GetSelectedPlatform
in method 'SBDebugger_GetSelectedPlatform', argument 1 of type 'lldb::SBDebugger *'
OO:SBDebugger_SetSelectedPlatform
in method 'SBDebugger_SetSelectedPlatform', argument 1 of type 'lldb::SBDebugger *'
in method 'SBDebugger_SetSelectedPlatform', argument 2 of type 'lldb::SBPlatform &'
invalid null reference in method 'SBDebugger_SetSelectedPlatform', argument 2 of type 'lldb::SBPlatform &'
O:SBDebugger_GetNumPlatforms
in method 'SBDebugger_GetNumPlatforms', argument 1 of type 'lldb::SBDebugger *'
OO:SBDebugger_GetPlatformAtIndex
in method 'SBDebugger_GetPlatformAtIndex', argument 1 of type 'lldb::SBDebugger *'
in method 'SBDebugger_GetPlatformAtIndex', argument 2 of type 'uint32_t'
O:SBDebugger_GetNumAvailablePlatforms
in method 'SBDebugger_GetNumAvailablePlatforms', argument 1 of type 'lldb::SBDebugger *'
OO:SBDebugger_GetAvailablePlatformInfoAtIndex
in method 'SBDebugger_GetAvailablePlatformInfoAtIndex', argument 1 of type 'lldb::SBDebugger *'
in method 'SBDebugger_GetAvailablePlatformInfoAtIndex', argument 2 of type 'uint32_t'
O:SBDebugger_GetSourceManager
in method 'SBDebugger_GetSourceManager', argument 1 of type 'lldb::SBDebugger *'
OO:SBDebugger_SetCurrentPlatform
in method 'SBDebugger_SetCurrentPlatform', argument 1 of type 'lldb::SBDebugger *'
in method 'SBDebugger_SetCurrentPlatform', argument 2 of type 'char const *'
OO:SBDebugger_SetCurrentPlatformSDKRoot
in method 'SBDebugger_SetCurrentPlatformSDKRoot', argument 1 of type 'lldb::SBDebugger *'
in method 'SBDebugger_SetCurrentPlatformSDKRoot', argument 2 of type 'char const *'
OO:SBDebugger_SetUseExternalEditor
in method 'SBDebugger_SetUseExternalEditor', argument 1 of type 'lldb::SBDebugger *'
in method 'SBDebugger_SetUseExternalEditor', argument 2 of type 'bool'
O:SBDebugger_GetUseExternalEditor
in method 'SBDebugger_GetUseExternalEditor', argument 1 of type 'lldb::SBDebugger *'
OO:SBDebugger_SetUseColor
in method 'SBDebugger_SetUseColor', argument 1 of type 'lldb::SBDebugger *'
in method 'SBDebugger_SetUseColor', argument 2 of type 'bool'
O:SBDebugger_GetUseColor
in method 'SBDebugger_GetUseColor', argument 1 of type 'lldb::SBDebugger const *'
OO:SBDebugger_GetDefaultArchitecture
in method 'SBDebugger_GetDefaultArchitecture', argument 1 of type 'char *'
in method 'SBDebugger_GetDefaultArchitecture', argument 2 of type 'size_t'
O:SBDebugger_SetDefaultArchitecture
in method 'SBDebugger_SetDefaultArchitecture', argument 1 of type 'char const *'
OO:SBDebugger_GetScriptingLanguage
in method 'SBDebugger_GetScriptingLanguage', argument 1 of type 'lldb::SBDebugger *'
in method 'SBDebugger_GetScriptingLanguage', argument 2 of type 'char const *'
:SBDebugger_GetVersionString
O:SBDebugger_StateAsCString
Not a valid StateType value
:SBDebugger_GetBuildConfiguration
O:SBDebugger_StateIsRunningState
O:SBDebugger_StateIsStoppedState
OOO:SBDebugger_EnableLog
in method 'SBDebugger_EnableLog', argument 1 of type 'lldb::SBDebugger *'
in method 'SBDebugger_EnableLog', argument 2 of type 'char const *'
list must contain strings
OO:SBDebugger_SetLoggingCallback
in method 'SBDebugger_SetLoggingCallback', argument 1 of type 'lldb::SBDebugger *'
OO:SBDebugger_DispatchInput
in method 'SBDebugger_DispatchInput', argument 1 of type 'lldb::SBDebugger *'
O:SBDebugger_DispatchInputInterrupt
in method 'SBDebugger_DispatchInputInterrupt', argument 1 of type 'lldb::SBDebugger *'
O:SBDebugger_DispatchInputEndOfFile
in method 'SBDebugger_DispatchInputEndOfFile', argument 1 of type 'lldb::SBDebugger *'
O:SBDebugger_GetInstanceName
in method 'SBDebugger_GetInstanceName', argument 1 of type 'lldb::SBDebugger *'
O:SBDebugger_FindDebuggerWithID
in method 'SBDebugger_FindDebuggerWithID', argument 1 of type 'int'
OOO:SBDebugger_SetInternalVariable
in method 'SBDebugger_SetInternalVariable', argument 1 of type 'char const *'
in method 'SBDebugger_SetInternalVariable', argument 2 of type 'char const *'
in method 'SBDebugger_SetInternalVariable', argument 3 of type 'char const *'
OO:SBDebugger_GetInternalVariableValue
in method 'SBDebugger_GetInternalVariableValue', argument 1 of type 'char const *'
in method 'SBDebugger_GetInternalVariableValue', argument 2 of type 'char const *'
OO:SBDebugger_GetDescription
in method 'SBDebugger_GetDescription', argument 1 of type 'lldb::SBDebugger *'
in method 'SBDebugger_GetDescription', argument 2 of type 'lldb::SBStream &'
invalid null reference in method 'SBDebugger_GetDescription', argument 2 of type 'lldb::SBStream &'
O:SBDebugger_GetTerminalWidth
in method 'SBDebugger_GetTerminalWidth', argument 1 of type 'lldb::SBDebugger const *'
OO:SBDebugger_SetTerminalWidth
in method 'SBDebugger_SetTerminalWidth', argument 1 of type 'lldb::SBDebugger *'
in method 'SBDebugger_SetTerminalWidth', argument 2 of type 'uint32_t'
O:SBDebugger_GetID
in method 'SBDebugger_GetID', argument 1 of type 'lldb::SBDebugger *'
O:SBDebugger_GetPrompt
in method 'SBDebugger_GetPrompt', argument 1 of type 'lldb::SBDebugger const *'
OO:SBDebugger_SetPrompt
in method 'SBDebugger_SetPrompt', argument 1 of type 'lldb::SBDebugger *'
in method 'SBDebugger_SetPrompt', argument 2 of type 'char const *'
O:SBDebugger_GetReproducerPath
in method 'SBDebugger_GetReproducerPath', argument 1 of type 'lldb::SBDebugger const *'
O:SBDebugger_GetScriptLanguage
in method 'SBDebugger_GetScriptLanguage', argument 1 of type 'lldb::SBDebugger const *'
OO:SBDebugger_SetScriptLanguage
in method 'SBDebugger_SetScriptLanguage', argument 1 of type 'lldb::SBDebugger *'
in method 'SBDebugger_SetScriptLanguage', argument 2 of type 'lldb::ScriptLanguage'
O:SBDebugger_GetCloseInputOnEOF
in method 'SBDebugger_GetCloseInputOnEOF', argument 1 of type 'lldb::SBDebugger const *'
OO:SBDebugger_SetCloseInputOnEOF
in method 'SBDebugger_SetCloseInputOnEOF', argument 1 of type 'lldb::SBDebugger *'
in method 'SBDebugger_SetCloseInputOnEOF', argument 2 of type 'bool'
Wrong number or type of arguments for overloaded function 'SBDebugger_GetCategory'.
  Possible C/C++ prototypes are:
    lldb::SBDebugger::GetCategory(char const *)
    lldb::SBDebugger::GetCategory(lldb::LanguageType)
OO:SBDebugger_GetCategory
in method 'SBDebugger_GetCategory', argument 1 of type 'lldb::SBDebugger *'
in method 'SBDebugger_GetCategory', argument 2 of type 'lldb::LanguageType'
in method 'SBDebugger_GetCategory', argument 2 of type 'char const *'
OO:SBDebugger_CreateCategory
in method 'SBDebugger_CreateCategory', argument 1 of type 'lldb::SBDebugger *'
in method 'SBDebugger_CreateCategory', argument 2 of type 'char const *'
OO:SBDebugger_DeleteCategory
in method 'SBDebugger_DeleteCategory', argument 1 of type 'lldb::SBDebugger *'
in method 'SBDebugger_DeleteCategory', argument 2 of type 'char const *'
O:SBDebugger_GetNumCategories
in method 'SBDebugger_GetNumCategories', argument 1 of type 'lldb::SBDebugger *'
OO:SBDebugger_GetCategoryAtIndex
in method 'SBDebugger_GetCategoryAtIndex', argument 1 of type 'lldb::SBDebugger *'
in method 'SBDebugger_GetCategoryAtIndex', argument 2 of type 'uint32_t'
O:SBDebugger_GetDefaultCategory
in method 'SBDebugger_GetDefaultCategory', argument 1 of type 'lldb::SBDebugger *'
OO:SBDebugger_GetFormatForType
in method 'SBDebugger_GetFormatForType', argument 1 of type 'lldb::SBDebugger *'
in method 'SBDebugger_GetFormatForType', argument 2 of type 'lldb::SBTypeNameSpecifier'
invalid null reference in method 'SBDebugger_GetFormatForType', argument 2 of type 'lldb::SBTypeNameSpecifier'
OO:SBDebugger_GetSummaryForType
in method 'SBDebugger_GetSummaryForType', argument 1 of type 'lldb::SBDebugger *'
in method 'SBDebugger_GetSummaryForType', argument 2 of type 'lldb::SBTypeNameSpecifier'
invalid null reference in method 'SBDebugger_GetSummaryForType', argument 2 of type 'lldb::SBTypeNameSpecifier'
OO:SBDebugger_GetFilterForType
in method 'SBDebugger_GetFilterForType', argument 1 of type 'lldb::SBDebugger *'
in method 'SBDebugger_GetFilterForType', argument 2 of type 'lldb::SBTypeNameSpecifier'
invalid null reference in method 'SBDebugger_GetFilterForType', argument 2 of type 'lldb::SBTypeNameSpecifier'
OO:SBDebugger_GetSyntheticForType
in method 'SBDebugger_GetSyntheticForType', argument 1 of type 'lldb::SBDebugger *'
in method 'SBDebugger_GetSyntheticForType', argument 2 of type 'lldb::SBTypeNameSpecifier'
invalid null reference in method 'SBDebugger_GetSyntheticForType', argument 2 of type 'lldb::SBTypeNameSpecifier'
OOOOOOO:SBDebugger_RunCommandInterpreter
in method 'SBDebugger_RunCommandInterpreter', argument 1 of type 'lldb::SBDebugger *'
in method 'SBDebugger_RunCommandInterpreter', argument 2 of type 'bool'
in method 'SBDebugger_RunCommandInterpreter', argument 3 of type 'bool'
in method 'SBDebugger_RunCommandInterpreter', argument 4 of type 'lldb::SBCommandInterpreterRunOptions &'
invalid null reference in method 'SBDebugger_RunCommandInterpreter', argument 4 of type 'lldb::SBCommandInterpreterRunOptions &'
in method 'SBDebugger_RunCommandInterpreter', argument 5 of type 'int &'
invalid null reference in method 'SBDebugger_RunCommandInterpreter', argument 5 of type 'int &'
in method 'SBDebugger_RunCommandInterpreter', argument 6 of type 'bool &'
invalid null reference in method 'SBDebugger_RunCommandInterpreter', argument 6 of type 'bool &'
in method 'SBDebugger_RunCommandInterpreter', argument 7 of type 'bool &'
invalid null reference in method 'SBDebugger_RunCommandInterpreter', argument 7 of type 'bool &'
OOO:SBDebugger_RunREPL
in method 'SBDebugger_RunREPL', argument 1 of type 'lldb::SBDebugger *'
in method 'SBDebugger_RunREPL', argument 2 of type 'lldb::LanguageType'
in method 'SBDebugger_RunREPL', argument 3 of type 'char const *'
O:SBDebugger___str__
in method 'SBDebugger___str__', argument 1 of type 'lldb::SBDebugger *'
Wrong number or type of arguments for overloaded function 'new_SBDeclaration'.
  Possible C/C++ prototypes are:
    lldb::SBDeclaration::SBDeclaration()
    lldb::SBDeclaration::SBDeclaration(lldb::SBDeclaration const &)
:new_SBDeclaration
O:new_SBDeclaration
in method 'new_SBDeclaration', argument 1 of type 'lldb::SBDeclaration const &'
invalid null reference in method 'new_SBDeclaration', argument 1 of type 'lldb::SBDeclaration const &'
O:delete_SBDeclaration
in method 'delete_SBDeclaration', argument 1 of type 'lldb::SBDeclaration *'
O:SBDeclaration_IsValid
in method 'SBDeclaration_IsValid', argument 1 of type 'lldb::SBDeclaration const *'
O:SBDeclaration___nonzero__
in method 'SBDeclaration___nonzero__', argument 1 of type 'lldb::SBDeclaration const *'
O:SBDeclaration_GetFileSpec
in method 'SBDeclaration_GetFileSpec', argument 1 of type 'lldb::SBDeclaration const *'
O:SBDeclaration_GetLine
in method 'SBDeclaration_GetLine', argument 1 of type 'lldb::SBDeclaration const *'
O:SBDeclaration_GetColumn
in method 'SBDeclaration_GetColumn', argument 1 of type 'lldb::SBDeclaration const *'
OO:SBDeclaration_GetDescription
in method 'SBDeclaration_GetDescription', argument 1 of type 'lldb::SBDeclaration *'
in method 'SBDeclaration_GetDescription', argument 2 of type 'lldb::SBStream &'
invalid null reference in method 'SBDeclaration_GetDescription', argument 2 of type 'lldb::SBStream &'
OO:SBDeclaration_SetFileSpec
in method 'SBDeclaration_SetFileSpec', argument 1 of type 'lldb::SBDeclaration *'
in method 'SBDeclaration_SetFileSpec', argument 2 of type 'lldb::SBFileSpec'
invalid null reference in method 'SBDeclaration_SetFileSpec', argument 2 of type 'lldb::SBFileSpec'
OO:SBDeclaration_SetLine
in method 'SBDeclaration_SetLine', argument 1 of type 'lldb::SBDeclaration *'
in method 'SBDeclaration_SetLine', argument 2 of type 'uint32_t'
OO:SBDeclaration_SetColumn
in method 'SBDeclaration_SetColumn', argument 1 of type 'lldb::SBDeclaration *'
in method 'SBDeclaration_SetColumn', argument 2 of type 'uint32_t'
OO:SBDeclaration___eq__
in method 'SBDeclaration___eq__', argument 1 of type 'lldb::SBDeclaration const *'
in method 'SBDeclaration___eq__', argument 2 of type 'lldb::SBDeclaration const &'
invalid null reference in method 'SBDeclaration___eq__', argument 2 of type 'lldb::SBDeclaration const &'
OO:SBDeclaration___ne__
in method 'SBDeclaration___ne__', argument 1 of type 'lldb::SBDeclaration const *'
in method 'SBDeclaration___ne__', argument 2 of type 'lldb::SBDeclaration const &'
invalid null reference in method 'SBDeclaration___ne__', argument 2 of type 'lldb::SBDeclaration const &'
O:SBDeclaration___str__
in method 'SBDeclaration___str__', argument 1 of type 'lldb::SBDeclaration *'
Wrong number or type of arguments for overloaded function 'new_SBError'.
  Possible C/C++ prototypes are:
    lldb::SBError::SBError()
    lldb::SBError::SBError(lldb::SBError const &)
:new_SBError
O:new_SBError
in method 'new_SBError', argument 1 of type 'lldb::SBError const &'
invalid null reference in method 'new_SBError', argument 1 of type 'lldb::SBError const &'
O:delete_SBError
in method 'delete_SBError', argument 1 of type 'lldb::SBError *'
O:SBError_GetCString
in method 'SBError_GetCString', argument 1 of type 'lldb::SBError const *'
O:SBError_Clear
in method 'SBError_Clear', argument 1 of type 'lldb::SBError *'
O:SBError_Fail
in method 'SBError_Fail', argument 1 of type 'lldb::SBError const *'
O:SBError_Success
in method 'SBError_Success', argument 1 of type 'lldb::SBError const *'
O:SBError_GetError
in method 'SBError_GetError', argument 1 of type 'lldb::SBError const *'
O:SBError_GetType
in method 'SBError_GetType', argument 1 of type 'lldb::SBError const *'
OOO:SBError_SetError
in method 'SBError_SetError', argument 1 of type 'lldb::SBError *'
in method 'SBError_SetError', argument 2 of type 'uint32_t'
in method 'SBError_SetError', argument 3 of type 'lldb::ErrorType'
O:SBError_SetErrorToErrno
in method 'SBError_SetErrorToErrno', argument 1 of type 'lldb::SBError *'
O:SBError_SetErrorToGenericError
in method 'SBError_SetErrorToGenericError', argument 1 of type 'lldb::SBError *'
OO:SBError_SetErrorString
in method 'SBError_SetErrorString', argument 1 of type 'lldb::SBError *'
in method 'SBError_SetErrorString', argument 2 of type 'char const *'
Wrong number or type of arguments for overloaded function 'SBError_SetErrorStringWithFormat'.
  Possible C/C++ prototypes are:
    lldb::SBError::SetErrorStringWithFormat(char const *,char *,char *,char *)
    lldb::SBError::SetErrorStringWithFormat(char const *,char *,char *)
    lldb::SBError::SetErrorStringWithFormat(char const *,char *)
    lldb::SBError::SetErrorStringWithFormat(char const *)
OO:SBError_SetErrorStringWithFormat
in method 'SBError_SetErrorStringWithFormat', argument 1 of type 'lldb::SBError *'
in method 'SBError_SetErrorStringWithFormat', argument 2 of type 'char const *'
OOO:SBError_SetErrorStringWithFormat
in method 'SBError_SetErrorStringWithFormat', argument 3 of type 'char *'
OOOO:SBError_SetErrorStringWithFormat
in method 'SBError_SetErrorStringWithFormat', argument 4 of type 'char *'
OOOOO:SBError_SetErrorStringWithFormat
in method 'SBError_SetErrorStringWithFormat', argument 5 of type 'char *'
O:SBError_IsValid
in method 'SBError_IsValid', argument 1 of type 'lldb::SBError const *'
O:SBError___nonzero__
in method 'SBError___nonzero__', argument 1 of type 'lldb::SBError const *'
OO:SBError_GetDescription
in method 'SBError_GetDescription', argument 1 of type 'lldb::SBError *'
in method 'SBError_GetDescription', argument 2 of type 'lldb::SBStream &'
invalid null reference in method 'SBError_GetDescription', argument 2 of type 'lldb::SBStream &'
O:SBError___str__
in method 'SBError___str__', argument 1 of type 'lldb::SBError *'
Wrong number or type of arguments for overloaded function 'new_SBEvent'.
  Possible C/C++ prototypes are:
    lldb::SBEvent::SBEvent()
    lldb::SBEvent::SBEvent(lldb::SBEvent const &)
    lldb::SBEvent::SBEvent(uint32_t,char const *,uint32_t)
:new_SBEvent
O:new_SBEvent
in method 'new_SBEvent', argument 1 of type 'lldb::SBEvent const &'
invalid null reference in method 'new_SBEvent', argument 1 of type 'lldb::SBEvent const &'
OO:new_SBEvent
in method 'new_SBEvent', argument 1 of type 'uint32_t'
Expecting a string
O:delete_SBEvent
in method 'delete_SBEvent', argument 1 of type 'lldb::SBEvent *'
O:SBEvent_IsValid
in method 'SBEvent_IsValid', argument 1 of type 'lldb::SBEvent const *'
O:SBEvent___nonzero__
in method 'SBEvent___nonzero__', argument 1 of type 'lldb::SBEvent const *'
O:SBEvent_GetDataFlavor
in method 'SBEvent_GetDataFlavor', argument 1 of type 'lldb::SBEvent *'
O:SBEvent_GetType
in method 'SBEvent_GetType', argument 1 of type 'lldb::SBEvent const *'
O:SBEvent_GetBroadcaster
in method 'SBEvent_GetBroadcaster', argument 1 of type 'lldb::SBEvent const *'
O:SBEvent_GetBroadcasterClass
in method 'SBEvent_GetBroadcasterClass', argument 1 of type 'lldb::SBEvent const *'
OO:SBEvent_BroadcasterMatchesRef
in method 'SBEvent_BroadcasterMatchesRef', argument 1 of type 'lldb::SBEvent *'
in method 'SBEvent_BroadcasterMatchesRef', argument 2 of type 'lldb::SBBroadcaster const &'
invalid null reference in method 'SBEvent_BroadcasterMatchesRef', argument 2 of type 'lldb::SBBroadcaster const &'
O:SBEvent_Clear
in method 'SBEvent_Clear', argument 1 of type 'lldb::SBEvent *'
O:SBEvent_GetCStringFromEvent
in method 'SBEvent_GetCStringFromEvent', argument 1 of type 'lldb::SBEvent const &'
invalid null reference in method 'SBEvent_GetCStringFromEvent', argument 1 of type 'lldb::SBEvent const &'
OO:SBEvent_GetDescription
in method 'SBEvent_GetDescription', argument 1 of type 'lldb::SBEvent const *'
in method 'SBEvent_GetDescription', argument 2 of type 'lldb::SBStream &'
invalid null reference in method 'SBEvent_GetDescription', argument 2 of type 'lldb::SBStream &'
Wrong number or type of arguments for overloaded function 'new_SBExecutionContext'.
  Possible C/C++ prototypes are:
    lldb::SBExecutionContext::SBExecutionContext()
    lldb::SBExecutionContext::SBExecutionContext(lldb::SBExecutionContext const &)
    lldb::SBExecutionContext::SBExecutionContext(lldb::SBTarget const &)
    lldb::SBExecutionContext::SBExecutionContext(lldb::SBProcess const &)
    lldb::SBExecutionContext::SBExecutionContext(lldb::SBThread)
    lldb::SBExecutionContext::SBExecutionContext(lldb::SBFrame const &)
:new_SBExecutionContext
O:new_SBExecutionContext
in method 'new_SBExecutionContext', argument 1 of type 'lldb::SBExecutionContext const &'
invalid null reference in method 'new_SBExecutionContext', argument 1 of type 'lldb::SBExecutionContext const &'
in method 'new_SBExecutionContext', argument 1 of type 'lldb::SBTarget const &'
invalid null reference in method 'new_SBExecutionContext', argument 1 of type 'lldb::SBTarget const &'
in method 'new_SBExecutionContext', argument 1 of type 'lldb::SBProcess const &'
invalid null reference in method 'new_SBExecutionContext', argument 1 of type 'lldb::SBProcess const &'
in method 'new_SBExecutionContext', argument 1 of type 'lldb::SBThread'
invalid null reference in method 'new_SBExecutionContext', argument 1 of type 'lldb::SBThread'
in method 'new_SBExecutionContext', argument 1 of type 'lldb::SBFrame const &'
invalid null reference in method 'new_SBExecutionContext', argument 1 of type 'lldb::SBFrame const &'
O:delete_SBExecutionContext
in method 'delete_SBExecutionContext', argument 1 of type 'lldb::SBExecutionContext *'
O:SBExecutionContext_GetTarget
in method 'SBExecutionContext_GetTarget', argument 1 of type 'lldb::SBExecutionContext const *'
O:SBExecutionContext_GetProcess
in method 'SBExecutionContext_GetProcess', argument 1 of type 'lldb::SBExecutionContext const *'
O:SBExecutionContext_GetThread
in method 'SBExecutionContext_GetThread', argument 1 of type 'lldb::SBExecutionContext const *'
O:SBExecutionContext_GetFrame
in method 'SBExecutionContext_GetFrame', argument 1 of type 'lldb::SBExecutionContext const *'
Wrong number or type of arguments for overloaded function 'new_SBExpressionOptions'.
  Possible C/C++ prototypes are:
    lldb::SBExpressionOptions::SBExpressionOptions()
    lldb::SBExpressionOptions::SBExpressionOptions(lldb::SBExpressionOptions const &)
:new_SBExpressionOptions
O:new_SBExpressionOptions
in method 'new_SBExpressionOptions', argument 1 of type 'lldb::SBExpressionOptions const &'
invalid null reference in method 'new_SBExpressionOptions', argument 1 of type 'lldb::SBExpressionOptions const &'
O:delete_SBExpressionOptions
in method 'delete_SBExpressionOptions', argument 1 of type 'lldb::SBExpressionOptions *'
O:SBExpressionOptions_GetCoerceResultToId
in method 'SBExpressionOptions_GetCoerceResultToId', argument 1 of type 'lldb::SBExpressionOptions const *'
Wrong number or type of arguments for overloaded function 'SBExpressionOptions_SetCoerceResultToId'.
  Possible C/C++ prototypes are:
    lldb::SBExpressionOptions::SetCoerceResultToId(bool)
    lldb::SBExpressionOptions::SetCoerceResultToId()
O:SBExpressionOptions_SetCoerceResultToId
in method 'SBExpressionOptions_SetCoerceResultToId', argument 1 of type 'lldb::SBExpressionOptions *'
OO:SBExpressionOptions_SetCoerceResultToId
in method 'SBExpressionOptions_SetCoerceResultToId', argument 2 of type 'bool'
O:SBExpressionOptions_GetUnwindOnError
in method 'SBExpressionOptions_GetUnwindOnError', argument 1 of type 'lldb::SBExpressionOptions const *'
Wrong number or type of arguments for overloaded function 'SBExpressionOptions_SetUnwindOnError'.
  Possible C/C++ prototypes are:
    lldb::SBExpressionOptions::SetUnwindOnError(bool)
    lldb::SBExpressionOptions::SetUnwindOnError()
O:SBExpressionOptions_SetUnwindOnError
in method 'SBExpressionOptions_SetUnwindOnError', argument 1 of type 'lldb::SBExpressionOptions *'
OO:SBExpressionOptions_SetUnwindOnError
in method 'SBExpressionOptions_SetUnwindOnError', argument 2 of type 'bool'
O:SBExpressionOptions_GetIgnoreBreakpoints
in method 'SBExpressionOptions_GetIgnoreBreakpoints', argument 1 of type 'lldb::SBExpressionOptions const *'
Wrong number or type of arguments for overloaded function 'SBExpressionOptions_SetIgnoreBreakpoints'.
  Possible C/C++ prototypes are:
    lldb::SBExpressionOptions::SetIgnoreBreakpoints(bool)
    lldb::SBExpressionOptions::SetIgnoreBreakpoints()
O:SBExpressionOptions_SetIgnoreBreakpoints
in method 'SBExpressionOptions_SetIgnoreBreakpoints', argument 1 of type 'lldb::SBExpressionOptions *'
OO:SBExpressionOptions_SetIgnoreBreakpoints
in method 'SBExpressionOptions_SetIgnoreBreakpoints', argument 2 of type 'bool'
O:SBExpressionOptions_GetFetchDynamicValue
in method 'SBExpressionOptions_GetFetchDynamicValue', argument 1 of type 'lldb::SBExpressionOptions const *'
Wrong number or type of arguments for overloaded function 'SBExpressionOptions_SetFetchDynamicValue'.
  Possible C/C++ prototypes are:
    lldb::SBExpressionOptions::SetFetchDynamicValue(lldb::DynamicValueType)
    lldb::SBExpressionOptions::SetFetchDynamicValue()
O:SBExpressionOptions_SetFetchDynamicValue
in method 'SBExpressionOptions_SetFetchDynamicValue', argument 1 of type 'lldb::SBExpressionOptions *'
OO:SBExpressionOptions_SetFetchDynamicValue
in method 'SBExpressionOptions_SetFetchDynamicValue', argument 2 of type 'lldb::DynamicValueType'
O:SBExpressionOptions_GetTimeoutInMicroSeconds
in method 'SBExpressionOptions_GetTimeoutInMicroSeconds', argument 1 of type 'lldb::SBExpressionOptions const *'
Wrong number or type of arguments for overloaded function 'SBExpressionOptions_SetTimeoutInMicroSeconds'.
  Possible C/C++ prototypes are:
    lldb::SBExpressionOptions::SetTimeoutInMicroSeconds(uint32_t)
    lldb::SBExpressionOptions::SetTimeoutInMicroSeconds()
O:SBExpressionOptions_SetTimeoutInMicroSeconds
in method 'SBExpressionOptions_SetTimeoutInMicroSeconds', argument 1 of type 'lldb::SBExpressionOptions *'
OO:SBExpressionOptions_SetTimeoutInMicroSeconds
in method 'SBExpressionOptions_SetTimeoutInMicroSeconds', argument 2 of type 'uint32_t'
O:SBExpressionOptions_GetOneThreadTimeoutInMicroSeconds
in method 'SBExpressionOptions_GetOneThreadTimeoutInMicroSeconds', argument 1 of type 'lldb::SBExpressionOptions const *'
Wrong number or type of arguments for overloaded function 'SBExpressionOptions_SetOneThreadTimeoutInMicroSeconds'.
  Possible C/C++ prototypes are:
    lldb::SBExpressionOptions::SetOneThreadTimeoutInMicroSeconds(uint32_t)
    lldb::SBExpressionOptions::SetOneThreadTimeoutInMicroSeconds()
O:SBExpressionOptions_SetOneThreadTimeoutInMicroSeconds
in method 'SBExpressionOptions_SetOneThreadTimeoutInMicroSeconds', argument 1 of type 'lldb::SBExpressionOptions *'
OO:SBExpressionOptions_SetOneThreadTimeoutInMicroSeconds
in method 'SBExpressionOptions_SetOneThreadTimeoutInMicroSeconds', argument 2 of type 'uint32_t'
O:SBExpressionOptions_GetTryAllThreads
in method 'SBExpressionOptions_GetTryAllThreads', argument 1 of type 'lldb::SBExpressionOptions const *'
Wrong number or type of arguments for overloaded function 'SBExpressionOptions_SetTryAllThreads'.
  Possible C/C++ prototypes are:
    lldb::SBExpressionOptions::SetTryAllThreads(bool)
    lldb::SBExpressionOptions::SetTryAllThreads()
O:SBExpressionOptions_SetTryAllThreads
in method 'SBExpressionOptions_SetTryAllThreads', argument 1 of type 'lldb::SBExpressionOptions *'
OO:SBExpressionOptions_SetTryAllThreads
in method 'SBExpressionOptions_SetTryAllThreads', argument 2 of type 'bool'
O:SBExpressionOptions_GetStopOthers
in method 'SBExpressionOptions_GetStopOthers', argument 1 of type 'lldb::SBExpressionOptions const *'
Wrong number or type of arguments for overloaded function 'SBExpressionOptions_SetStopOthers'.
  Possible C/C++ prototypes are:
    lldb::SBExpressionOptions::SetStopOthers(bool)
    lldb::SBExpressionOptions::SetStopOthers()
O:SBExpressionOptions_SetStopOthers
in method 'SBExpressionOptions_SetStopOthers', argument 1 of type 'lldb::SBExpressionOptions *'
OO:SBExpressionOptions_SetStopOthers
in method 'SBExpressionOptions_SetStopOthers', argument 2 of type 'bool'
O:SBExpressionOptions_GetTrapExceptions
in method 'SBExpressionOptions_GetTrapExceptions', argument 1 of type 'lldb::SBExpressionOptions const *'
Wrong number or type of arguments for overloaded function 'SBExpressionOptions_SetTrapExceptions'.
  Possible C/C++ prototypes are:
    lldb::SBExpressionOptions::SetTrapExceptions(bool)
    lldb::SBExpressionOptions::SetTrapExceptions()
O:SBExpressionOptions_SetTrapExceptions
in method 'SBExpressionOptions_SetTrapExceptions', argument 1 of type 'lldb::SBExpressionOptions *'
OO:SBExpressionOptions_SetTrapExceptions
in method 'SBExpressionOptions_SetTrapExceptions', argument 2 of type 'bool'
O:SBExpressionOptions_GetPlaygroundTransformEnabled
in method 'SBExpressionOptions_GetPlaygroundTransformEnabled', argument 1 of type 'lldb::SBExpressionOptions const *'
Wrong number or type of arguments for overloaded function 'SBExpressionOptions_SetPlaygroundTransformEnabled'.
  Possible C/C++ prototypes are:
    lldb::SBExpressionOptions::SetPlaygroundTransformEnabled(bool)
    lldb::SBExpressionOptions::SetPlaygroundTransformEnabled()
O:SBExpressionOptions_SetPlaygroundTransformEnabled
in method 'SBExpressionOptions_SetPlaygroundTransformEnabled', argument 1 of type 'lldb::SBExpressionOptions *'
OO:SBExpressionOptions_SetPlaygroundTransformEnabled
in method 'SBExpressionOptions_SetPlaygroundTransformEnabled', argument 2 of type 'bool'
O:SBExpressionOptions_GetREPLMode
in method 'SBExpressionOptions_GetREPLMode', argument 1 of type 'lldb::SBExpressionOptions const *'
Wrong number or type of arguments for overloaded function 'SBExpressionOptions_SetREPLMode'.
  Possible C/C++ prototypes are:
    lldb::SBExpressionOptions::SetREPLMode(bool)
    lldb::SBExpressionOptions::SetREPLMode()
O:SBExpressionOptions_SetREPLMode
in method 'SBExpressionOptions_SetREPLMode', argument 1 of type 'lldb::SBExpressionOptions *'
OO:SBExpressionOptions_SetREPLMode
in method 'SBExpressionOptions_SetREPLMode', argument 2 of type 'bool'
OO:SBExpressionOptions_SetLanguage
in method 'SBExpressionOptions_SetLanguage', argument 1 of type 'lldb::SBExpressionOptions *'
in method 'SBExpressionOptions_SetLanguage', argument 2 of type 'lldb::LanguageType'
O:SBExpressionOptions_GetGenerateDebugInfo
in method 'SBExpressionOptions_GetGenerateDebugInfo', argument 1 of type 'lldb::SBExpressionOptions *'
Wrong number or type of arguments for overloaded function 'SBExpressionOptions_SetGenerateDebugInfo'.
  Possible C/C++ prototypes are:
    lldb::SBExpressionOptions::SetGenerateDebugInfo(bool)
    lldb::SBExpressionOptions::SetGenerateDebugInfo()
O:SBExpressionOptions_SetGenerateDebugInfo
in method 'SBExpressionOptions_SetGenerateDebugInfo', argument 1 of type 'lldb::SBExpressionOptions *'
OO:SBExpressionOptions_SetGenerateDebugInfo
in method 'SBExpressionOptions_SetGenerateDebugInfo', argument 2 of type 'bool'
O:SBExpressionOptions_GetSuppressPersistentResult
in method 'SBExpressionOptions_GetSuppressPersistentResult', argument 1 of type 'lldb::SBExpressionOptions *'
Wrong number or type of arguments for overloaded function 'SBExpressionOptions_SetSuppressPersistentResult'.
  Possible C/C++ prototypes are:
    lldb::SBExpressionOptions::SetSuppressPersistentResult(bool)
    lldb::SBExpressionOptions::SetSuppressPersistentResult()
O:SBExpressionOptions_SetSuppressPersistentResult
in method 'SBExpressionOptions_SetSuppressPersistentResult', argument 1 of type 'lldb::SBExpressionOptions *'
OO:SBExpressionOptions_SetSuppressPersistentResult
in method 'SBExpressionOptions_SetSuppressPersistentResult', argument 2 of type 'bool'
O:SBExpressionOptions_GetPrefix
in method 'SBExpressionOptions_GetPrefix', argument 1 of type 'lldb::SBExpressionOptions const *'
OO:SBExpressionOptions_SetPrefix
in method 'SBExpressionOptions_SetPrefix', argument 1 of type 'lldb::SBExpressionOptions *'
in method 'SBExpressionOptions_SetPrefix', argument 2 of type 'char const *'
Wrong number or type of arguments for overloaded function 'SBExpressionOptions_SetAutoApplyFixIts'.
  Possible C/C++ prototypes are:
    lldb::SBExpressionOptions::SetAutoApplyFixIts(bool)
    lldb::SBExpressionOptions::SetAutoApplyFixIts()
O:SBExpressionOptions_SetAutoApplyFixIts
in method 'SBExpressionOptions_SetAutoApplyFixIts', argument 1 of type 'lldb::SBExpressionOptions *'
OO:SBExpressionOptions_SetAutoApplyFixIts
in method 'SBExpressionOptions_SetAutoApplyFixIts', argument 2 of type 'bool'
O:SBExpressionOptions_GetAutoApplyFixIts
in method 'SBExpressionOptions_GetAutoApplyFixIts', argument 1 of type 'lldb::SBExpressionOptions *'
O:SBExpressionOptions_GetTopLevel
in method 'SBExpressionOptions_GetTopLevel', argument 1 of type 'lldb::SBExpressionOptions *'
Wrong number or type of arguments for overloaded function 'SBExpressionOptions_SetTopLevel'.
  Possible C/C++ prototypes are:
    lldb::SBExpressionOptions::SetTopLevel(bool)
    lldb::SBExpressionOptions::SetTopLevel()
O:SBExpressionOptions_SetTopLevel
in method 'SBExpressionOptions_SetTopLevel', argument 1 of type 'lldb::SBExpressionOptions *'
OO:SBExpressionOptions_SetTopLevel
in method 'SBExpressionOptions_SetTopLevel', argument 2 of type 'bool'
O:SBExpressionOptions_GetAllowJIT
in method 'SBExpressionOptions_GetAllowJIT', argument 1 of type 'lldb::SBExpressionOptions *'
OO:SBExpressionOptions_SetAllowJIT
in method 'SBExpressionOptions_SetAllowJIT', argument 1 of type 'lldb::SBExpressionOptions *'
in method 'SBExpressionOptions_SetAllowJIT', argument 2 of type 'bool'
Wrong number or type of arguments for overloaded function 'new_SBFileSpec'.
  Possible C/C++ prototypes are:
    lldb::SBFileSpec::SBFileSpec()
    lldb::SBFileSpec::SBFileSpec(lldb::SBFileSpec const &)
    lldb::SBFileSpec::SBFileSpec(char const *)
    lldb::SBFileSpec::SBFileSpec(char const *,bool)
:new_SBFileSpec
O:new_SBFileSpec
in method 'new_SBFileSpec', argument 1 of type 'lldb::SBFileSpec const &'
invalid null reference in method 'new_SBFileSpec', argument 1 of type 'lldb::SBFileSpec const &'
in method 'new_SBFileSpec', argument 1 of type 'char const *'
OO:new_SBFileSpec
in method 'new_SBFileSpec', argument 2 of type 'bool'
O:delete_SBFileSpec
in method 'delete_SBFileSpec', argument 1 of type 'lldb::SBFileSpec *'
O:SBFileSpec_IsValid
in method 'SBFileSpec_IsValid', argument 1 of type 'lldb::SBFileSpec const *'
O:SBFileSpec___nonzero__
in method 'SBFileSpec___nonzero__', argument 1 of type 'lldb::SBFileSpec const *'
O:SBFileSpec_Exists
in method 'SBFileSpec_Exists', argument 1 of type 'lldb::SBFileSpec const *'
O:SBFileSpec_ResolveExecutableLocation
in method 'SBFileSpec_ResolveExecutableLocation', argument 1 of type 'lldb::SBFileSpec *'
O:SBFileSpec_GetFilename
in method 'SBFileSpec_GetFilename', argument 1 of type 'lldb::SBFileSpec const *'
O:SBFileSpec_GetDirectory
in method 'SBFileSpec_GetDirectory', argument 1 of type 'lldb::SBFileSpec const *'
OO:SBFileSpec_SetFilename
in method 'SBFileSpec_SetFilename', argument 1 of type 'lldb::SBFileSpec *'
in method 'SBFileSpec_SetFilename', argument 2 of type 'char const *'
OO:SBFileSpec_SetDirectory
in method 'SBFileSpec_SetDirectory', argument 1 of type 'lldb::SBFileSpec *'
in method 'SBFileSpec_SetDirectory', argument 2 of type 'char const *'
OOO:SBFileSpec_GetPath
in method 'SBFileSpec_GetPath', argument 1 of type 'lldb::SBFileSpec const *'
in method 'SBFileSpec_GetPath', argument 2 of type 'char *'
in method 'SBFileSpec_GetPath', argument 3 of type 'size_t'
OOO:SBFileSpec_ResolvePath
in method 'SBFileSpec_ResolvePath', argument 1 of type 'char const *'
in method 'SBFileSpec_ResolvePath', argument 2 of type 'char *'
in method 'SBFileSpec_ResolvePath', argument 3 of type 'size_t'
OO:SBFileSpec_GetDescription
in method 'SBFileSpec_GetDescription', argument 1 of type 'lldb::SBFileSpec const *'
in method 'SBFileSpec_GetDescription', argument 2 of type 'lldb::SBStream &'
invalid null reference in method 'SBFileSpec_GetDescription', argument 2 of type 'lldb::SBStream &'
OO:SBFileSpec_AppendPathComponent
in method 'SBFileSpec_AppendPathComponent', argument 1 of type 'lldb::SBFileSpec *'
in method 'SBFileSpec_AppendPathComponent', argument 2 of type 'char const *'
O:SBFileSpec___str__
in method 'SBFileSpec___str__', argument 1 of type 'lldb::SBFileSpec *'
Wrong number or type of arguments for overloaded function 'new_SBFileSpecList'.
  Possible C/C++ prototypes are:
    lldb::SBFileSpecList::SBFileSpecList()
    lldb::SBFileSpecList::SBFileSpecList(lldb::SBFileSpecList const &)
:new_SBFileSpecList
O:new_SBFileSpecList
in method 'new_SBFileSpecList', argument 1 of type 'lldb::SBFileSpecList const &'
invalid null reference in method 'new_SBFileSpecList', argument 1 of type 'lldb::SBFileSpecList const &'
O:delete_SBFileSpecList
in method 'delete_SBFileSpecList', argument 1 of type 'lldb::SBFileSpecList *'
O:SBFileSpecList_GetSize
in method 'SBFileSpecList_GetSize', argument 1 of type 'lldb::SBFileSpecList const *'
OO:SBFileSpecList_GetDescription
in method 'SBFileSpecList_GetDescription', argument 1 of type 'lldb::SBFileSpecList const *'
in method 'SBFileSpecList_GetDescription', argument 2 of type 'lldb::SBStream &'
invalid null reference in method 'SBFileSpecList_GetDescription', argument 2 of type 'lldb::SBStream &'
OO:SBFileSpecList_Append
in method 'SBFileSpecList_Append', argument 1 of type 'lldb::SBFileSpecList *'
in method 'SBFileSpecList_Append', argument 2 of type 'lldb::SBFileSpec const &'
invalid null reference in method 'SBFileSpecList_Append', argument 2 of type 'lldb::SBFileSpec const &'
OO:SBFileSpecList_AppendIfUnique
in method 'SBFileSpecList_AppendIfUnique', argument 1 of type 'lldb::SBFileSpecList *'
in method 'SBFileSpecList_AppendIfUnique', argument 2 of type 'lldb::SBFileSpec const &'
invalid null reference in method 'SBFileSpecList_AppendIfUnique', argument 2 of type 'lldb::SBFileSpec const &'
O:SBFileSpecList_Clear
in method 'SBFileSpecList_Clear', argument 1 of type 'lldb::SBFileSpecList *'
OOOO:SBFileSpecList_FindFileIndex
in method 'SBFileSpecList_FindFileIndex', argument 1 of type 'lldb::SBFileSpecList *'
in method 'SBFileSpecList_FindFileIndex', argument 2 of type 'uint32_t'
in method 'SBFileSpecList_FindFileIndex', argument 3 of type 'lldb::SBFileSpec const &'
invalid null reference in method 'SBFileSpecList_FindFileIndex', argument 3 of type 'lldb::SBFileSpec const &'
in method 'SBFileSpecList_FindFileIndex', argument 4 of type 'bool'
OO:SBFileSpecList_GetFileSpecAtIndex
in method 'SBFileSpecList_GetFileSpecAtIndex', argument 1 of type 'lldb::SBFileSpecList const *'
in method 'SBFileSpecList_GetFileSpecAtIndex', argument 2 of type 'uint32_t'
Wrong number or type of arguments for overloaded function 'new_SBFrame'.
  Possible C/C++ prototypes are:
    lldb::SBFrame::SBFrame()
    lldb::SBFrame::SBFrame(lldb::SBFrame const &)
:new_SBFrame
O:new_SBFrame
in method 'new_SBFrame', argument 1 of type 'lldb::SBFrame const &'
invalid null reference in method 'new_SBFrame', argument 1 of type 'lldb::SBFrame const &'
O:delete_SBFrame
in method 'delete_SBFrame', argument 1 of type 'lldb::SBFrame *'
OO:SBFrame_IsEqual
in method 'SBFrame_IsEqual', argument 1 of type 'lldb::SBFrame const *'
in method 'SBFrame_IsEqual', argument 2 of type 'lldb::SBFrame const &'
invalid null reference in method 'SBFrame_IsEqual', argument 2 of type 'lldb::SBFrame const &'
O:SBFrame_IsValid
in method 'SBFrame_IsValid', argument 1 of type 'lldb::SBFrame const *'
O:SBFrame___nonzero__
in method 'SBFrame___nonzero__', argument 1 of type 'lldb::SBFrame const *'
O:SBFrame_GetFrameID
in method 'SBFrame_GetFrameID', argument 1 of type 'lldb::SBFrame const *'
O:SBFrame_GetCFA
in method 'SBFrame_GetCFA', argument 1 of type 'lldb::SBFrame const *'
O:SBFrame_GetPC
in method 'SBFrame_GetPC', argument 1 of type 'lldb::SBFrame const *'
OO:SBFrame_SetPC
in method 'SBFrame_SetPC', argument 1 of type 'lldb::SBFrame *'
in method 'SBFrame_SetPC', argument 2 of type 'lldb::addr_t'
O:SBFrame_GetSP
in method 'SBFrame_GetSP', argument 1 of type 'lldb::SBFrame const *'
O:SBFrame_GetFP
in method 'SBFrame_GetFP', argument 1 of type 'lldb::SBFrame const *'
O:SBFrame_GetPCAddress
in method 'SBFrame_GetPCAddress', argument 1 of type 'lldb::SBFrame const *'
OO:SBFrame_GetSymbolContext
in method 'SBFrame_GetSymbolContext', argument 1 of type 'lldb::SBFrame const *'
in method 'SBFrame_GetSymbolContext', argument 2 of type 'uint32_t'
O:SBFrame_GetModule
in method 'SBFrame_GetModule', argument 1 of type 'lldb::SBFrame const *'
O:SBFrame_GetCompileUnit
in method 'SBFrame_GetCompileUnit', argument 1 of type 'lldb::SBFrame const *'
O:SBFrame_GetFunction
in method 'SBFrame_GetFunction', argument 1 of type 'lldb::SBFrame const *'
O:SBFrame_GetSymbol
in method 'SBFrame_GetSymbol', argument 1 of type 'lldb::SBFrame const *'
O:SBFrame_GetBlock
in method 'SBFrame_GetBlock', argument 1 of type 'lldb::SBFrame const *'
O:SBFrame_GetDisplayFunctionName
in method 'SBFrame_GetDisplayFunctionName', argument 1 of type 'lldb::SBFrame *'
Wrong number or type of arguments for overloaded function 'SBFrame_GetFunctionName'.
  Possible C/C++ prototypes are:
    lldb::SBFrame::GetFunctionName()
    lldb::SBFrame::GetFunctionName() const
O:SBFrame_GetFunctionName
in method 'SBFrame_GetFunctionName', argument 1 of type 'lldb::SBFrame *'
in method 'SBFrame_GetFunctionName', argument 1 of type 'lldb::SBFrame const *'
O:SBFrame_GuessLanguage
in method 'SBFrame_GuessLanguage', argument 1 of type 'lldb::SBFrame const *'
O:SBFrame_IsSwiftThunk
in method 'SBFrame_IsSwiftThunk', argument 1 of type 'lldb::SBFrame const *'
Wrong number or type of arguments for overloaded function 'SBFrame_IsInlined'.
  Possible C/C++ prototypes are:
    lldb::SBFrame::IsInlined()
    lldb::SBFrame::IsInlined() const
O:SBFrame_IsInlined
in method 'SBFrame_IsInlined', argument 1 of type 'lldb::SBFrame *'
in method 'SBFrame_IsInlined', argument 1 of type 'lldb::SBFrame const *'
Wrong number or type of arguments for overloaded function 'SBFrame_IsArtificial'.
  Possible C/C++ prototypes are:
    lldb::SBFrame::IsArtificial()
    lldb::SBFrame::IsArtificial() const
O:SBFrame_IsArtificial
in method 'SBFrame_IsArtificial', argument 1 of type 'lldb::SBFrame *'
in method 'SBFrame_IsArtificial', argument 1 of type 'lldb::SBFrame const *'
Wrong number or type of arguments for overloaded function 'SBFrame_EvaluateExpression'.
  Possible C/C++ prototypes are:
    lldb::SBFrame::EvaluateExpression(char const *)
    lldb::SBFrame::EvaluateExpression(char const *,lldb::DynamicValueType)
    lldb::SBFrame::EvaluateExpression(char const *,lldb::DynamicValueType,bool)
    lldb::SBFrame::EvaluateExpression(char const *,lldb::SBExpressionOptions &)
OO:SBFrame_EvaluateExpression
in method 'SBFrame_EvaluateExpression', argument 1 of type 'lldb::SBFrame *'
in method 'SBFrame_EvaluateExpression', argument 2 of type 'char const *'
OOO:SBFrame_EvaluateExpression
in method 'SBFrame_EvaluateExpression', argument 3 of type 'lldb::SBExpressionOptions &'
invalid null reference in method 'SBFrame_EvaluateExpression', argument 3 of type 'lldb::SBExpressionOptions &'
in method 'SBFrame_EvaluateExpression', argument 3 of type 'lldb::DynamicValueType'
OOOO:SBFrame_EvaluateExpression
in method 'SBFrame_EvaluateExpression', argument 4 of type 'bool'
O:SBFrame_GetFrameBlock
in method 'SBFrame_GetFrameBlock', argument 1 of type 'lldb::SBFrame const *'
O:SBFrame_GetLineEntry
in method 'SBFrame_GetLineEntry', argument 1 of type 'lldb::SBFrame const *'
O:SBFrame_GetThread
in method 'SBFrame_GetThread', argument 1 of type 'lldb::SBFrame const *'
O:SBFrame_Disassemble
in method 'SBFrame_Disassemble', argument 1 of type 'lldb::SBFrame const *'
O:SBFrame_Clear
in method 'SBFrame_Clear', argument 1 of type 'lldb::SBFrame *'
Wrong number or type of arguments for overloaded function 'SBFrame_GetVariables'.
  Possible C/C++ prototypes are:
    lldb::SBFrame::GetVariables(bool,bool,bool,bool)
    lldb::SBFrame::GetVariables(bool,bool,bool,bool,lldb::DynamicValueType)
    lldb::SBFrame::GetVariables(lldb::SBVariablesOptions const &)
OO:SBFrame_GetVariables
in method 'SBFrame_GetVariables', argument 1 of type 'lldb::SBFrame *'
in method 'SBFrame_GetVariables', argument 2 of type 'lldb::SBVariablesOptions const &'
invalid null reference in method 'SBFrame_GetVariables', argument 2 of type 'lldb::SBVariablesOptions const &'
OOOOO:SBFrame_GetVariables
in method 'SBFrame_GetVariables', argument 2 of type 'bool'
in method 'SBFrame_GetVariables', argument 3 of type 'bool'
in method 'SBFrame_GetVariables', argument 4 of type 'bool'
in method 'SBFrame_GetVariables', argument 5 of type 'bool'
OOOOOO:SBFrame_GetVariables
in method 'SBFrame_GetVariables', argument 6 of type 'lldb::DynamicValueType'
O:SBFrame_GetRegisters
in method 'SBFrame_GetRegisters', argument 1 of type 'lldb::SBFrame *'
Wrong number or type of arguments for overloaded function 'SBFrame_FindVariable'.
  Possible C/C++ prototypes are:
    lldb::SBFrame::FindVariable(char const *)
    lldb::SBFrame::FindVariable(char const *,lldb::DynamicValueType)
OO:SBFrame_FindVariable
in method 'SBFrame_FindVariable', argument 1 of type 'lldb::SBFrame *'
in method 'SBFrame_FindVariable', argument 2 of type 'char const *'
OOO:SBFrame_FindVariable
in method 'SBFrame_FindVariable', argument 3 of type 'lldb::DynamicValueType'
OO:SBFrame_FindRegister
in method 'SBFrame_FindRegister', argument 1 of type 'lldb::SBFrame *'
in method 'SBFrame_FindRegister', argument 2 of type 'char const *'
Wrong number or type of arguments for overloaded function 'SBFrame_GetValueForVariablePath'.
  Possible C/C++ prototypes are:
    lldb::SBFrame::GetValueForVariablePath(char const *)
    lldb::SBFrame::GetValueForVariablePath(char const *,lldb::DynamicValueType)
OO:SBFrame_GetValueForVariablePath
in method 'SBFrame_GetValueForVariablePath', argument 1 of type 'lldb::SBFrame *'
in method 'SBFrame_GetValueForVariablePath', argument 2 of type 'char const *'
OOO:SBFrame_GetValueForVariablePath
in method 'SBFrame_GetValueForVariablePath', argument 3 of type 'lldb::DynamicValueType'
Wrong number or type of arguments for overloaded function 'SBFrame_FindValue'.
  Possible C/C++ prototypes are:
    lldb::SBFrame::FindValue(char const *,lldb::ValueType)
    lldb::SBFrame::FindValue(char const *,lldb::ValueType,lldb::DynamicValueType)
OOO:SBFrame_FindValue
in method 'SBFrame_FindValue', argument 1 of type 'lldb::SBFrame *'
in method 'SBFrame_FindValue', argument 2 of type 'char const *'
in method 'SBFrame_FindValue', argument 3 of type 'lldb::ValueType'
OOOO:SBFrame_FindValue
in method 'SBFrame_FindValue', argument 4 of type 'lldb::DynamicValueType'
OO:SBFrame_GetDescription
in method 'SBFrame_GetDescription', argument 1 of type 'lldb::SBFrame *'
in method 'SBFrame_GetDescription', argument 2 of type 'lldb::SBStream &'
invalid null reference in method 'SBFrame_GetDescription', argument 2 of type 'lldb::SBStream &'
O:SBFrame___str__
in method 'SBFrame___str__', argument 1 of type 'lldb::SBFrame *'
Wrong number or type of arguments for overloaded function 'new_SBFunction'.
  Possible C/C++ prototypes are:
    lldb::SBFunction::SBFunction()
    lldb::SBFunction::SBFunction(lldb::SBFunction const &)
:new_SBFunction
O:new_SBFunction
in method 'new_SBFunction', argument 1 of type 'lldb::SBFunction const &'
invalid null reference in method 'new_SBFunction', argument 1 of type 'lldb::SBFunction const &'
O:delete_SBFunction
in method 'delete_SBFunction', argument 1 of type 'lldb::SBFunction *'
O:SBFunction_IsValid
in method 'SBFunction_IsValid', argument 1 of type 'lldb::SBFunction const *'
O:SBFunction___nonzero__
in method 'SBFunction___nonzero__', argument 1 of type 'lldb::SBFunction const *'
O:SBFunction_GetName
in method 'SBFunction_GetName', argument 1 of type 'lldb::SBFunction const *'
O:SBFunction_GetDisplayName
in method 'SBFunction_GetDisplayName', argument 1 of type 'lldb::SBFunction const *'
O:SBFunction_GetMangledName
in method 'SBFunction_GetMangledName', argument 1 of type 'lldb::SBFunction const *'
Wrong number or type of arguments for overloaded function 'SBFunction_GetInstructions'.
  Possible C/C++ prototypes are:
    lldb::SBFunction::GetInstructions(lldb::SBTarget)
    lldb::SBFunction::GetInstructions(lldb::SBTarget,char const *)
OO:SBFunction_GetInstructions
in method 'SBFunction_GetInstructions', argument 1 of type 'lldb::SBFunction *'
in method 'SBFunction_GetInstructions', argument 2 of type 'lldb::SBTarget'
invalid null reference in method 'SBFunction_GetInstructions', argument 2 of type 'lldb::SBTarget'
OOO:SBFunction_GetInstructions
in method 'SBFunction_GetInstructions', argument 3 of type 'char const *'
O:SBFunction_GetStartAddress
in method 'SBFunction_GetStartAddress', argument 1 of type 'lldb::SBFunction *'
O:SBFunction_GetEndAddress
in method 'SBFunction_GetEndAddress', argument 1 of type 'lldb::SBFunction *'
OO:SBFunction_GetArgumentName
in method 'SBFunction_GetArgumentName', argument 1 of type 'lldb::SBFunction *'
in method 'SBFunction_GetArgumentName', argument 2 of type 'uint32_t'
O:SBFunction_GetPrologueByteSize
in method 'SBFunction_GetPrologueByteSize', argument 1 of type 'lldb::SBFunction *'
O:SBFunction_GetType
in method 'SBFunction_GetType', argument 1 of type 'lldb::SBFunction *'
O:SBFunction_GetBlock
in method 'SBFunction_GetBlock', argument 1 of type 'lldb::SBFunction *'
O:SBFunction_GetLanguage
in method 'SBFunction_GetLanguage', argument 1 of type 'lldb::SBFunction *'
O:SBFunction_GetIsOptimized
in method 'SBFunction_GetIsOptimized', argument 1 of type 'lldb::SBFunction *'
O:SBFunction_GetCanThrow
in method 'SBFunction_GetCanThrow', argument 1 of type 'lldb::SBFunction *'
OO:SBFunction_GetDescription
in method 'SBFunction_GetDescription', argument 1 of type 'lldb::SBFunction *'
in method 'SBFunction_GetDescription', argument 2 of type 'lldb::SBStream &'
invalid null reference in method 'SBFunction_GetDescription', argument 2 of type 'lldb::SBStream &'
OO:SBFunction___eq__
in method 'SBFunction___eq__', argument 1 of type 'lldb::SBFunction const *'
in method 'SBFunction___eq__', argument 2 of type 'lldb::SBFunction const &'
invalid null reference in method 'SBFunction___eq__', argument 2 of type 'lldb::SBFunction const &'
OO:SBFunction___ne__
in method 'SBFunction___ne__', argument 1 of type 'lldb::SBFunction const *'
in method 'SBFunction___ne__', argument 2 of type 'lldb::SBFunction const &'
invalid null reference in method 'SBFunction___ne__', argument 2 of type 'lldb::SBFunction const &'
O:SBFunction___str__
in method 'SBFunction___str__', argument 1 of type 'lldb::SBFunction *'
:SBHostOS_GetProgramFileSpec
:SBHostOS_GetLLDBPythonPath
O:SBHostOS_GetLLDBPath
in method 'SBHostOS_GetLLDBPath', argument 1 of type 'lldb::PathType'
:SBHostOS_GetUserHomeDirectory
O:SBHostOS_ThreadCreated
in method 'SBHostOS_ThreadCreated', argument 1 of type 'char const *'
OOOO:SBHostOS_ThreadCreate
in method 'SBHostOS_ThreadCreate', argument 1 of type 'char const *'
in method 'SBHostOS_ThreadCreate', argument 2 of type 'lldb::thread_func_t'
in method 'SBHostOS_ThreadCreate', argument 3 of type 'void *'
in method 'SBHostOS_ThreadCreate', argument 4 of type 'lldb::SBError *'
OO:SBHostOS_ThreadCancel
in method 'SBHostOS_ThreadCancel', argument 1 of type 'lldb::thread_t'
invalid null reference in method 'SBHostOS_ThreadCancel', argument 1 of type 'lldb::thread_t'
in method 'SBHostOS_ThreadCancel', argument 2 of type 'lldb::SBError *'
OO:SBHostOS_ThreadDetach
in method 'SBHostOS_ThreadDetach', argument 1 of type 'lldb::thread_t'
invalid null reference in method 'SBHostOS_ThreadDetach', argument 1 of type 'lldb::thread_t'
in method 'SBHostOS_ThreadDetach', argument 2 of type 'lldb::SBError *'
OOO:SBHostOS_ThreadJoin
in method 'SBHostOS_ThreadJoin', argument 1 of type 'lldb::thread_t'
invalid null reference in method 'SBHostOS_ThreadJoin', argument 1 of type 'lldb::thread_t'
in method 'SBHostOS_ThreadJoin', argument 2 of type 'lldb::thread_result_t *'
in method 'SBHostOS_ThreadJoin', argument 3 of type 'lldb::SBError *'
:new_SBHostOS
O:delete_SBHostOS
in method 'delete_SBHostOS', argument 1 of type 'lldb::SBHostOS *'
Wrong number or type of arguments for overloaded function 'new_SBInstruction'.
  Possible C/C++ prototypes are:
    lldb::SBInstruction::SBInstruction()
    lldb::SBInstruction::SBInstruction(lldb::SBInstruction const &)
:new_SBInstruction
O:new_SBInstruction
in method 'new_SBInstruction', argument 1 of type 'lldb::SBInstruction const &'
invalid null reference in method 'new_SBInstruction', argument 1 of type 'lldb::SBInstruction const &'
O:delete_SBInstruction
in method 'delete_SBInstruction', argument 1 of type 'lldb::SBInstruction *'
O:SBInstruction_IsValid
in method 'SBInstruction_IsValid', argument 1 of type 'lldb::SBInstruction *'
O:SBInstruction___nonzero__
in method 'SBInstruction___nonzero__', argument 1 of type 'lldb::SBInstruction const *'
O:SBInstruction_GetAddress
in method 'SBInstruction_GetAddress', argument 1 of type 'lldb::SBInstruction *'
OO:SBInstruction_GetMnemonic
in method 'SBInstruction_GetMnemonic', argument 1 of type 'lldb::SBInstruction *'
in method 'SBInstruction_GetMnemonic', argument 2 of type 'lldb::SBTarget'
invalid null reference in method 'SBInstruction_GetMnemonic', argument 2 of type 'lldb::SBTarget'
OO:SBInstruction_GetOperands
in method 'SBInstruction_GetOperands', argument 1 of type 'lldb::SBInstruction *'
in method 'SBInstruction_GetOperands', argument 2 of type 'lldb::SBTarget'
invalid null reference in method 'SBInstruction_GetOperands', argument 2 of type 'lldb::SBTarget'
OO:SBInstruction_GetComment
in method 'SBInstruction_GetComment', argument 1 of type 'lldb::SBInstruction *'
in method 'SBInstruction_GetComment', argument 2 of type 'lldb::SBTarget'
invalid null reference in method 'SBInstruction_GetComment', argument 2 of type 'lldb::SBTarget'
OO:SBInstruction_GetData
in method 'SBInstruction_GetData', argument 1 of type 'lldb::SBInstruction *'
in method 'SBInstruction_GetData', argument 2 of type 'lldb::SBTarget'
invalid null reference in method 'SBInstruction_GetData', argument 2 of type 'lldb::SBTarget'
O:SBInstruction_GetByteSize
in method 'SBInstruction_GetByteSize', argument 1 of type 'lldb::SBInstruction *'
O:SBInstruction_DoesBranch
in method 'SBInstruction_DoesBranch', argument 1 of type 'lldb::SBInstruction *'
O:SBInstruction_HasDelaySlot
in method 'SBInstruction_HasDelaySlot', argument 1 of type 'lldb::SBInstruction *'
O:SBInstruction_CanSetBreakpoint
in method 'SBInstruction_CanSetBreakpoint', argument 1 of type 'lldb::SBInstruction *'
OO:SBInstruction_Print
in method 'SBInstruction_Print', argument 1 of type 'lldb::SBInstruction *'
OO:SBInstruction_GetDescription
in method 'SBInstruction_GetDescription', argument 1 of type 'lldb::SBInstruction *'
in method 'SBInstruction_GetDescription', argument 2 of type 'lldb::SBStream &'
invalid null reference in method 'SBInstruction_GetDescription', argument 2 of type 'lldb::SBStream &'
OOO:SBInstruction_EmulateWithFrame
in method 'SBInstruction_EmulateWithFrame', argument 1 of type 'lldb::SBInstruction *'
in method 'SBInstruction_EmulateWithFrame', argument 2 of type 'lldb::SBFrame &'
invalid null reference in method 'SBInstruction_EmulateWithFrame', argument 2 of type 'lldb::SBFrame &'
in method 'SBInstruction_EmulateWithFrame', argument 3 of type 'uint32_t'
OO:SBInstruction_DumpEmulation
in method 'SBInstruction_DumpEmulation', argument 1 of type 'lldb::SBInstruction *'
in method 'SBInstruction_DumpEmulation', argument 2 of type 'char const *'
OOO:SBInstruction_TestEmulation
in method 'SBInstruction_TestEmulation', argument 1 of type 'lldb::SBInstruction *'
in method 'SBInstruction_TestEmulation', argument 2 of type 'lldb::SBStream &'
invalid null reference in method 'SBInstruction_TestEmulation', argument 2 of type 'lldb::SBStream &'
in method 'SBInstruction_TestEmulation', argument 3 of type 'char const *'
O:SBInstruction___str__
in method 'SBInstruction___str__', argument 1 of type 'lldb::SBInstruction *'
Wrong number or type of arguments for overloaded function 'new_SBInstructionList'.
  Possible C/C++ prototypes are:
    lldb::SBInstructionList::SBInstructionList()
    lldb::SBInstructionList::SBInstructionList(lldb::SBInstructionList const &)
:new_SBInstructionList
O:new_SBInstructionList
in method 'new_SBInstructionList', argument 1 of type 'lldb::SBInstructionList const &'
invalid null reference in method 'new_SBInstructionList', argument 1 of type 'lldb::SBInstructionList const &'
O:delete_SBInstructionList
in method 'delete_SBInstructionList', argument 1 of type 'lldb::SBInstructionList *'
O:SBInstructionList_IsValid
in method 'SBInstructionList_IsValid', argument 1 of type 'lldb::SBInstructionList const *'
O:SBInstructionList___nonzero__
in method 'SBInstructionList___nonzero__', argument 1 of type 'lldb::SBInstructionList const *'
O:SBInstructionList_GetSize
in method 'SBInstructionList_GetSize', argument 1 of type 'lldb::SBInstructionList *'
OO:SBInstructionList_GetInstructionAtIndex
in method 'SBInstructionList_GetInstructionAtIndex', argument 1 of type 'lldb::SBInstructionList *'
in method 'SBInstructionList_GetInstructionAtIndex', argument 2 of type 'uint32_t'
OOOO:SBInstructionList_GetInstructionsCount
in method 'SBInstructionList_GetInstructionsCount', argument 1 of type 'lldb::SBInstructionList *'
in method 'SBInstructionList_GetInstructionsCount', argument 2 of type 'lldb::SBAddress const &'
invalid null reference in method 'SBInstructionList_GetInstructionsCount', argument 2 of type 'lldb::SBAddress const &'
in method 'SBInstructionList_GetInstructionsCount', argument 3 of type 'lldb::SBAddress const &'
invalid null reference in method 'SBInstructionList_GetInstructionsCount', argument 3 of type 'lldb::SBAddress const &'
in method 'SBInstructionList_GetInstructionsCount', argument 4 of type 'bool'
O:SBInstructionList_Clear
in method 'SBInstructionList_Clear', argument 1 of type 'lldb::SBInstructionList *'
OO:SBInstructionList_AppendInstruction
in method 'SBInstructionList_AppendInstruction', argument 1 of type 'lldb::SBInstructionList *'
in method 'SBInstructionList_AppendInstruction', argument 2 of type 'lldb::SBInstruction'
invalid null reference in method 'SBInstructionList_AppendInstruction', argument 2 of type 'lldb::SBInstruction'
OO:SBInstructionList_Print
in method 'SBInstructionList_Print', argument 1 of type 'lldb::SBInstructionList *'
OO:SBInstructionList_GetDescription
in method 'SBInstructionList_GetDescription', argument 1 of type 'lldb::SBInstructionList *'
in method 'SBInstructionList_GetDescription', argument 2 of type 'lldb::SBStream &'
invalid null reference in method 'SBInstructionList_GetDescription', argument 2 of type 'lldb::SBStream &'
OO:SBInstructionList_DumpEmulationForAllInstructions
in method 'SBInstructionList_DumpEmulationForAllInstructions', argument 1 of type 'lldb::SBInstructionList *'
in method 'SBInstructionList_DumpEmulationForAllInstructions', argument 2 of type 'char const *'
O:SBInstructionList___str__
in method 'SBInstructionList___str__', argument 1 of type 'lldb::SBInstructionList *'
O:SBLanguageRuntime_GetLanguageTypeFromString
in method 'SBLanguageRuntime_GetLanguageTypeFromString', argument 1 of type 'char const *'
O:SBLanguageRuntime_GetNameForLanguageType
in method 'SBLanguageRuntime_GetNameForLanguageType', argument 1 of type 'lldb::LanguageType'
:new_SBLanguageRuntime
O:delete_SBLanguageRuntime
in method 'delete_SBLanguageRuntime', argument 1 of type 'lldb::SBLanguageRuntime *'
O:new_SBLaunchInfo
O:SBLaunchInfo_GetProcessID
in method 'SBLaunchInfo_GetProcessID', argument 1 of type 'lldb::SBLaunchInfo *'
O:SBLaunchInfo_GetUserID
in method 'SBLaunchInfo_GetUserID', argument 1 of type 'lldb::SBLaunchInfo *'
O:SBLaunchInfo_GetGroupID
in method 'SBLaunchInfo_GetGroupID', argument 1 of type 'lldb::SBLaunchInfo *'
O:SBLaunchInfo_UserIDIsValid
in method 'SBLaunchInfo_UserIDIsValid', argument 1 of type 'lldb::SBLaunchInfo *'
O:SBLaunchInfo_GroupIDIsValid
in method 'SBLaunchInfo_GroupIDIsValid', argument 1 of type 'lldb::SBLaunchInfo *'
OO:SBLaunchInfo_SetUserID
in method 'SBLaunchInfo_SetUserID', argument 1 of type 'lldb::SBLaunchInfo *'
in method 'SBLaunchInfo_SetUserID', argument 2 of type 'uint32_t'
OO:SBLaunchInfo_SetGroupID
in method 'SBLaunchInfo_SetGroupID', argument 1 of type 'lldb::SBLaunchInfo *'
in method 'SBLaunchInfo_SetGroupID', argument 2 of type 'uint32_t'
O:SBLaunchInfo_GetExecutableFile
in method 'SBLaunchInfo_GetExecutableFile', argument 1 of type 'lldb::SBLaunchInfo *'
OOO:SBLaunchInfo_SetExecutableFile
in method 'SBLaunchInfo_SetExecutableFile', argument 1 of type 'lldb::SBLaunchInfo *'
in method 'SBLaunchInfo_SetExecutableFile', argument 2 of type 'lldb::SBFileSpec'
invalid null reference in method 'SBLaunchInfo_SetExecutableFile', argument 2 of type 'lldb::SBFileSpec'
in method 'SBLaunchInfo_SetExecutableFile', argument 3 of type 'bool'
O:SBLaunchInfo_GetListener
in method 'SBLaunchInfo_GetListener', argument 1 of type 'lldb::SBLaunchInfo *'
OO:SBLaunchInfo_SetListener
in method 'SBLaunchInfo_SetListener', argument 1 of type 'lldb::SBLaunchInfo *'
in method 'SBLaunchInfo_SetListener', argument 2 of type 'lldb::SBListener &'
invalid null reference in method 'SBLaunchInfo_SetListener', argument 2 of type 'lldb::SBListener &'
O:SBLaunchInfo_GetNumArguments
in method 'SBLaunchInfo_GetNumArguments', argument 1 of type 'lldb::SBLaunchInfo *'
OO:SBLaunchInfo_GetArgumentAtIndex
in method 'SBLaunchInfo_GetArgumentAtIndex', argument 1 of type 'lldb::SBLaunchInfo *'
in method 'SBLaunchInfo_GetArgumentAtIndex', argument 2 of type 'uint32_t'
OOO:SBLaunchInfo_SetArguments
in method 'SBLaunchInfo_SetArguments', argument 1 of type 'lldb::SBLaunchInfo *'
in method 'SBLaunchInfo_SetArguments', argument 3 of type 'bool'
O:SBLaunchInfo_GetNumEnvironmentEntries
in method 'SBLaunchInfo_GetNumEnvironmentEntries', argument 1 of type 'lldb::SBLaunchInfo *'
OO:SBLaunchInfo_GetEnvironmentEntryAtIndex
in method 'SBLaunchInfo_GetEnvironmentEntryAtIndex', argument 1 of type 'lldb::SBLaunchInfo *'
in method 'SBLaunchInfo_GetEnvironmentEntryAtIndex', argument 2 of type 'uint32_t'
OOO:SBLaunchInfo_SetEnvironmentEntries
in method 'SBLaunchInfo_SetEnvironmentEntries', argument 1 of type 'lldb::SBLaunchInfo *'
in method 'SBLaunchInfo_SetEnvironmentEntries', argument 3 of type 'bool'
O:SBLaunchInfo_Clear
in method 'SBLaunchInfo_Clear', argument 1 of type 'lldb::SBLaunchInfo *'
O:SBLaunchInfo_GetWorkingDirectory
in method 'SBLaunchInfo_GetWorkingDirectory', argument 1 of type 'lldb::SBLaunchInfo const *'
OO:SBLaunchInfo_SetWorkingDirectory
in method 'SBLaunchInfo_SetWorkingDirectory', argument 1 of type 'lldb::SBLaunchInfo *'
in method 'SBLaunchInfo_SetWorkingDirectory', argument 2 of type 'char const *'
O:SBLaunchInfo_GetLaunchFlags
in method 'SBLaunchInfo_GetLaunchFlags', argument 1 of type 'lldb::SBLaunchInfo *'
OO:SBLaunchInfo_SetLaunchFlags
in method 'SBLaunchInfo_SetLaunchFlags', argument 1 of type 'lldb::SBLaunchInfo *'
in method 'SBLaunchInfo_SetLaunchFlags', argument 2 of type 'uint32_t'
O:SBLaunchInfo_GetProcessPluginName
in method 'SBLaunchInfo_GetProcessPluginName', argument 1 of type 'lldb::SBLaunchInfo *'
OO:SBLaunchInfo_SetProcessPluginName
in method 'SBLaunchInfo_SetProcessPluginName', argument 1 of type 'lldb::SBLaunchInfo *'
in method 'SBLaunchInfo_SetProcessPluginName', argument 2 of type 'char const *'
O:SBLaunchInfo_GetShell
in method 'SBLaunchInfo_GetShell', argument 1 of type 'lldb::SBLaunchInfo *'
OO:SBLaunchInfo_SetShell
in method 'SBLaunchInfo_SetShell', argument 1 of type 'lldb::SBLaunchInfo *'
in method 'SBLaunchInfo_SetShell', argument 2 of type 'char const *'
O:SBLaunchInfo_GetShellExpandArguments
in method 'SBLaunchInfo_GetShellExpandArguments', argument 1 of type 'lldb::SBLaunchInfo *'
OO:SBLaunchInfo_SetShellExpandArguments
in method 'SBLaunchInfo_SetShellExpandArguments', argument 1 of type 'lldb::SBLaunchInfo *'
in method 'SBLaunchInfo_SetShellExpandArguments', argument 2 of type 'bool'
O:SBLaunchInfo_GetResumeCount
in method 'SBLaunchInfo_GetResumeCount', argument 1 of type 'lldb::SBLaunchInfo *'
OO:SBLaunchInfo_SetResumeCount
in method 'SBLaunchInfo_SetResumeCount', argument 1 of type 'lldb::SBLaunchInfo *'
in method 'SBLaunchInfo_SetResumeCount', argument 2 of type 'uint32_t'
OO:SBLaunchInfo_AddCloseFileAction
in method 'SBLaunchInfo_AddCloseFileAction', argument 1 of type 'lldb::SBLaunchInfo *'
in method 'SBLaunchInfo_AddCloseFileAction', argument 2 of type 'int'
OOO:SBLaunchInfo_AddDuplicateFileAction
in method 'SBLaunchInfo_AddDuplicateFileAction', argument 1 of type 'lldb::SBLaunchInfo *'
in method 'SBLaunchInfo_AddDuplicateFileAction', argument 2 of type 'int'
in method 'SBLaunchInfo_AddDuplicateFileAction', argument 3 of type 'int'
OOOOO:SBLaunchInfo_AddOpenFileAction
in method 'SBLaunchInfo_AddOpenFileAction', argument 1 of type 'lldb::SBLaunchInfo *'
in method 'SBLaunchInfo_AddOpenFileAction', argument 2 of type 'int'
in method 'SBLaunchInfo_AddOpenFileAction', argument 3 of type 'char const *'
in method 'SBLaunchInfo_AddOpenFileAction', argument 4 of type 'bool'
in method 'SBLaunchInfo_AddOpenFileAction', argument 5 of type 'bool'
OOOO:SBLaunchInfo_AddSuppressFileAction
in method 'SBLaunchInfo_AddSuppressFileAction', argument 1 of type 'lldb::SBLaunchInfo *'
in method 'SBLaunchInfo_AddSuppressFileAction', argument 2 of type 'int'
in method 'SBLaunchInfo_AddSuppressFileAction', argument 3 of type 'bool'
in method 'SBLaunchInfo_AddSuppressFileAction', argument 4 of type 'bool'
OO:SBLaunchInfo_SetLaunchEventData
in method 'SBLaunchInfo_SetLaunchEventData', argument 1 of type 'lldb::SBLaunchInfo *'
in method 'SBLaunchInfo_SetLaunchEventData', argument 2 of type 'char const *'
O:SBLaunchInfo_GetLaunchEventData
in method 'SBLaunchInfo_GetLaunchEventData', argument 1 of type 'lldb::SBLaunchInfo const *'
O:SBLaunchInfo_GetDetachOnError
in method 'SBLaunchInfo_GetDetachOnError', argument 1 of type 'lldb::SBLaunchInfo const *'
OO:SBLaunchInfo_SetDetachOnError
in method 'SBLaunchInfo_SetDetachOnError', argument 1 of type 'lldb::SBLaunchInfo *'
in method 'SBLaunchInfo_SetDetachOnError', argument 2 of type 'bool'
O:delete_SBLaunchInfo
in method 'delete_SBLaunchInfo', argument 1 of type 'lldb::SBLaunchInfo *'
Wrong number or type of arguments for overloaded function 'new_SBLineEntry'.
  Possible C/C++ prototypes are:
    lldb::SBLineEntry::SBLineEntry()
    lldb::SBLineEntry::SBLineEntry(lldb::SBLineEntry const &)
:new_SBLineEntry
O:new_SBLineEntry
in method 'new_SBLineEntry', argument 1 of type 'lldb::SBLineEntry const &'
invalid null reference in method 'new_SBLineEntry', argument 1 of type 'lldb::SBLineEntry const &'
O:delete_SBLineEntry
in method 'delete_SBLineEntry', argument 1 of type 'lldb::SBLineEntry *'
O:SBLineEntry_GetStartAddress
in method 'SBLineEntry_GetStartAddress', argument 1 of type 'lldb::SBLineEntry const *'
O:SBLineEntry_GetEndAddress
in method 'SBLineEntry_GetEndAddress', argument 1 of type 'lldb::SBLineEntry const *'
O:SBLineEntry_IsValid
in method 'SBLineEntry_IsValid', argument 1 of type 'lldb::SBLineEntry const *'
O:SBLineEntry___nonzero__
in method 'SBLineEntry___nonzero__', argument 1 of type 'lldb::SBLineEntry const *'
O:SBLineEntry_GetFileSpec
in method 'SBLineEntry_GetFileSpec', argument 1 of type 'lldb::SBLineEntry const *'
O:SBLineEntry_GetLine
in method 'SBLineEntry_GetLine', argument 1 of type 'lldb::SBLineEntry const *'
O:SBLineEntry_GetColumn
in method 'SBLineEntry_GetColumn', argument 1 of type 'lldb::SBLineEntry const *'
OO:SBLineEntry_GetDescription
in method 'SBLineEntry_GetDescription', argument 1 of type 'lldb::SBLineEntry *'
in method 'SBLineEntry_GetDescription', argument 2 of type 'lldb::SBStream &'
invalid null reference in method 'SBLineEntry_GetDescription', argument 2 of type 'lldb::SBStream &'
OO:SBLineEntry_SetFileSpec
in method 'SBLineEntry_SetFileSpec', argument 1 of type 'lldb::SBLineEntry *'
in method 'SBLineEntry_SetFileSpec', argument 2 of type 'lldb::SBFileSpec'
invalid null reference in method 'SBLineEntry_SetFileSpec', argument 2 of type 'lldb::SBFileSpec'
OO:SBLineEntry_SetLine
in method 'SBLineEntry_SetLine', argument 1 of type 'lldb::SBLineEntry *'
in method 'SBLineEntry_SetLine', argument 2 of type 'uint32_t'
OO:SBLineEntry_SetColumn
in method 'SBLineEntry_SetColumn', argument 1 of type 'lldb::SBLineEntry *'
in method 'SBLineEntry_SetColumn', argument 2 of type 'uint32_t'
OO:SBLineEntry___eq__
in method 'SBLineEntry___eq__', argument 1 of type 'lldb::SBLineEntry const *'
in method 'SBLineEntry___eq__', argument 2 of type 'lldb::SBLineEntry const &'
invalid null reference in method 'SBLineEntry___eq__', argument 2 of type 'lldb::SBLineEntry const &'
OO:SBLineEntry___ne__
in method 'SBLineEntry___ne__', argument 1 of type 'lldb::SBLineEntry const *'
in method 'SBLineEntry___ne__', argument 2 of type 'lldb::SBLineEntry const &'
invalid null reference in method 'SBLineEntry___ne__', argument 2 of type 'lldb::SBLineEntry const &'
O:SBLineEntry___str__
in method 'SBLineEntry___str__', argument 1 of type 'lldb::SBLineEntry *'
Wrong number or type of arguments for overloaded function 'new_SBListener'.
  Possible C/C++ prototypes are:
    lldb::SBListener::SBListener()
    lldb::SBListener::SBListener(char const *)
    lldb::SBListener::SBListener(lldb::SBListener const &)
:new_SBListener
O:new_SBListener
in method 'new_SBListener', argument 1 of type 'lldb::SBListener const &'
invalid null reference in method 'new_SBListener', argument 1 of type 'lldb::SBListener const &'
in method 'new_SBListener', argument 1 of type 'char const *'
O:delete_SBListener
in method 'delete_SBListener', argument 1 of type 'lldb::SBListener *'
OO:SBListener_AddEvent
in method 'SBListener_AddEvent', argument 1 of type 'lldb::SBListener *'
in method 'SBListener_AddEvent', argument 2 of type 'lldb::SBEvent const &'
invalid null reference in method 'SBListener_AddEvent', argument 2 of type 'lldb::SBEvent const &'
O:SBListener_Clear
in method 'SBListener_Clear', argument 1 of type 'lldb::SBListener *'
O:SBListener_IsValid
in method 'SBListener_IsValid', argument 1 of type 'lldb::SBListener const *'
O:SBListener___nonzero__
in method 'SBListener___nonzero__', argument 1 of type 'lldb::SBListener const *'
OOOO:SBListener_StartListeningForEventClass
in method 'SBListener_StartListeningForEventClass', argument 1 of type 'lldb::SBListener *'
in method 'SBListener_StartListeningForEventClass', argument 2 of type 'lldb::SBDebugger &'
invalid null reference in method 'SBListener_StartListeningForEventClass', argument 2 of type 'lldb::SBDebugger &'
in method 'SBListener_StartListeningForEventClass', argument 3 of type 'char const *'
in method 'SBListener_StartListeningForEventClass', argument 4 of type 'uint32_t'
OOOO:SBListener_StopListeningForEventClass
in method 'SBListener_StopListeningForEventClass', argument 1 of type 'lldb::SBListener *'
in method 'SBListener_StopListeningForEventClass', argument 2 of type 'lldb::SBDebugger &'
invalid null reference in method 'SBListener_StopListeningForEventClass', argument 2 of type 'lldb::SBDebugger &'
in method 'SBListener_StopListeningForEventClass', argument 3 of type 'char const *'
in method 'SBListener_StopListeningForEventClass', argument 4 of type 'uint32_t'
OOO:SBListener_StartListeningForEvents
in method 'SBListener_StartListeningForEvents', argument 1 of type 'lldb::SBListener *'
in method 'SBListener_StartListeningForEvents', argument 2 of type 'lldb::SBBroadcaster const &'
invalid null reference in method 'SBListener_StartListeningForEvents', argument 2 of type 'lldb::SBBroadcaster const &'
in method 'SBListener_StartListeningForEvents', argument 3 of type 'uint32_t'
OOO:SBListener_StopListeningForEvents
in method 'SBListener_StopListeningForEvents', argument 1 of type 'lldb::SBListener *'
in method 'SBListener_StopListeningForEvents', argument 2 of type 'lldb::SBBroadcaster const &'
invalid null reference in method 'SBListener_StopListeningForEvents', argument 2 of type 'lldb::SBBroadcaster const &'
in method 'SBListener_StopListeningForEvents', argument 3 of type 'uint32_t'
OOO:SBListener_WaitForEvent
in method 'SBListener_WaitForEvent', argument 1 of type 'lldb::SBListener *'
in method 'SBListener_WaitForEvent', argument 2 of type 'uint32_t'
in method 'SBListener_WaitForEvent', argument 3 of type 'lldb::SBEvent &'
invalid null reference in method 'SBListener_WaitForEvent', argument 3 of type 'lldb::SBEvent &'
OOOO:SBListener_WaitForEventForBroadcaster
in method 'SBListener_WaitForEventForBroadcaster', argument 1 of type 'lldb::SBListener *'
in method 'SBListener_WaitForEventForBroadcaster', argument 2 of type 'uint32_t'
in method 'SBListener_WaitForEventForBroadcaster', argument 3 of type 'lldb::SBBroadcaster const &'
invalid null reference in method 'SBListener_WaitForEventForBroadcaster', argument 3 of type 'lldb::SBBroadcaster const &'
in method 'SBListener_WaitForEventForBroadcaster', argument 4 of type 'lldb::SBEvent &'
invalid null reference in method 'SBListener_WaitForEventForBroadcaster', argument 4 of type 'lldb::SBEvent &'
OOOOO:SBListener_WaitForEventForBroadcasterWithType
in method 'SBListener_WaitForEventForBroadcasterWithType', argument 1 of type 'lldb::SBListener *'
in method 'SBListener_WaitForEventForBroadcasterWithType', argument 2 of type 'uint32_t'
in method 'SBListener_WaitForEventForBroadcasterWithType', argument 3 of type 'lldb::SBBroadcaster const &'
invalid null reference in method 'SBListener_WaitForEventForBroadcasterWithType', argument 3 of type 'lldb::SBBroadcaster const &'
in method 'SBListener_WaitForEventForBroadcasterWithType', argument 4 of type 'uint32_t'
in method 'SBListener_WaitForEventForBroadcasterWithType', argument 5 of type 'lldb::SBEvent &'
invalid null reference in method 'SBListener_WaitForEventForBroadcasterWithType', argument 5 of type 'lldb::SBEvent &'
OO:SBListener_PeekAtNextEvent
in method 'SBListener_PeekAtNextEvent', argument 1 of type 'lldb::SBListener *'
in method 'SBListener_PeekAtNextEvent', argument 2 of type 'lldb::SBEvent &'
invalid null reference in method 'SBListener_PeekAtNextEvent', argument 2 of type 'lldb::SBEvent &'
OOO:SBListener_PeekAtNextEventForBroadcaster
in method 'SBListener_PeekAtNextEventForBroadcaster', argument 1 of type 'lldb::SBListener *'
in method 'SBListener_PeekAtNextEventForBroadcaster', argument 2 of type 'lldb::SBBroadcaster const &'
invalid null reference in method 'SBListener_PeekAtNextEventForBroadcaster', argument 2 of type 'lldb::SBBroadcaster const &'
in method 'SBListener_PeekAtNextEventForBroadcaster', argument 3 of type 'lldb::SBEvent &'
invalid null reference in method 'SBListener_PeekAtNextEventForBroadcaster', argument 3 of type 'lldb::SBEvent &'
OOOO:SBListener_PeekAtNextEventForBroadcasterWithType
in method 'SBListener_PeekAtNextEventForBroadcasterWithType', argument 1 of type 'lldb::SBListener *'
in method 'SBListener_PeekAtNextEventForBroadcasterWithType', argument 2 of type 'lldb::SBBroadcaster const &'
invalid null reference in method 'SBListener_PeekAtNextEventForBroadcasterWithType', argument 2 of type 'lldb::SBBroadcaster const &'
in method 'SBListener_PeekAtNextEventForBroadcasterWithType', argument 3 of type 'uint32_t'
in method 'SBListener_PeekAtNextEventForBroadcasterWithType', argument 4 of type 'lldb::SBEvent &'
invalid null reference in method 'SBListener_PeekAtNextEventForBroadcasterWithType', argument 4 of type 'lldb::SBEvent &'
OO:SBListener_GetNextEvent
in method 'SBListener_GetNextEvent', argument 1 of type 'lldb::SBListener *'
in method 'SBListener_GetNextEvent', argument 2 of type 'lldb::SBEvent &'
invalid null reference in method 'SBListener_GetNextEvent', argument 2 of type 'lldb::SBEvent &'
OOO:SBListener_GetNextEventForBroadcaster
in method 'SBListener_GetNextEventForBroadcaster', argument 1 of type 'lldb::SBListener *'
in method 'SBListener_GetNextEventForBroadcaster', argument 2 of type 'lldb::SBBroadcaster const &'
invalid null reference in method 'SBListener_GetNextEventForBroadcaster', argument 2 of type 'lldb::SBBroadcaster const &'
in method 'SBListener_GetNextEventForBroadcaster', argument 3 of type 'lldb::SBEvent &'
invalid null reference in method 'SBListener_GetNextEventForBroadcaster', argument 3 of type 'lldb::SBEvent &'
OOOO:SBListener_GetNextEventForBroadcasterWithType
in method 'SBListener_GetNextEventForBroadcasterWithType', argument 1 of type 'lldb::SBListener *'
in method 'SBListener_GetNextEventForBroadcasterWithType', argument 2 of type 'lldb::SBBroadcaster const &'
invalid null reference in method 'SBListener_GetNextEventForBroadcasterWithType', argument 2 of type 'lldb::SBBroadcaster const &'
in method 'SBListener_GetNextEventForBroadcasterWithType', argument 3 of type 'uint32_t'
in method 'SBListener_GetNextEventForBroadcasterWithType', argument 4 of type 'lldb::SBEvent &'
invalid null reference in method 'SBListener_GetNextEventForBroadcasterWithType', argument 4 of type 'lldb::SBEvent &'
OO:SBListener_HandleBroadcastEvent
in method 'SBListener_HandleBroadcastEvent', argument 1 of type 'lldb::SBListener *'
in method 'SBListener_HandleBroadcastEvent', argument 2 of type 'lldb::SBEvent const &'
invalid null reference in method 'SBListener_HandleBroadcastEvent', argument 2 of type 'lldb::SBEvent const &'
Wrong number or type of arguments for overloaded function 'new_SBMemoryRegionInfo'.
  Possible C/C++ prototypes are:
    lldb::SBMemoryRegionInfo::SBMemoryRegionInfo()
    lldb::SBMemoryRegionInfo::SBMemoryRegionInfo(lldb::SBMemoryRegionInfo const &)
:new_SBMemoryRegionInfo
O:new_SBMemoryRegionInfo
in method 'new_SBMemoryRegionInfo', argument 1 of type 'lldb::SBMemoryRegionInfo const &'
invalid null reference in method 'new_SBMemoryRegionInfo', argument 1 of type 'lldb::SBMemoryRegionInfo const &'
O:delete_SBMemoryRegionInfo
in method 'delete_SBMemoryRegionInfo', argument 1 of type 'lldb::SBMemoryRegionInfo *'
O:SBMemoryRegionInfo_Clear
in method 'SBMemoryRegionInfo_Clear', argument 1 of type 'lldb::SBMemoryRegionInfo *'
O:SBMemoryRegionInfo_GetRegionBase
in method 'SBMemoryRegionInfo_GetRegionBase', argument 1 of type 'lldb::SBMemoryRegionInfo *'
O:SBMemoryRegionInfo_GetRegionEnd
in method 'SBMemoryRegionInfo_GetRegionEnd', argument 1 of type 'lldb::SBMemoryRegionInfo *'
O:SBMemoryRegionInfo_IsReadable
in method 'SBMemoryRegionInfo_IsReadable', argument 1 of type 'lldb::SBMemoryRegionInfo *'
O:SBMemoryRegionInfo_IsWritable
in method 'SBMemoryRegionInfo_IsWritable', argument 1 of type 'lldb::SBMemoryRegionInfo *'
O:SBMemoryRegionInfo_IsExecutable
in method 'SBMemoryRegionInfo_IsExecutable', argument 1 of type 'lldb::SBMemoryRegionInfo *'
O:SBMemoryRegionInfo_IsMapped
in method 'SBMemoryRegionInfo_IsMapped', argument 1 of type 'lldb::SBMemoryRegionInfo *'
O:SBMemoryRegionInfo_GetName
in method 'SBMemoryRegionInfo_GetName', argument 1 of type 'lldb::SBMemoryRegionInfo *'
OO:SBMemoryRegionInfo___eq__
in method 'SBMemoryRegionInfo___eq__', argument 1 of type 'lldb::SBMemoryRegionInfo const *'
in method 'SBMemoryRegionInfo___eq__', argument 2 of type 'lldb::SBMemoryRegionInfo const &'
invalid null reference in method 'SBMemoryRegionInfo___eq__', argument 2 of type 'lldb::SBMemoryRegionInfo const &'
OO:SBMemoryRegionInfo___ne__
in method 'SBMemoryRegionInfo___ne__', argument 1 of type 'lldb::SBMemoryRegionInfo const *'
in method 'SBMemoryRegionInfo___ne__', argument 2 of type 'lldb::SBMemoryRegionInfo const &'
invalid null reference in method 'SBMemoryRegionInfo___ne__', argument 2 of type 'lldb::SBMemoryRegionInfo const &'
OO:SBMemoryRegionInfo_GetDescription
in method 'SBMemoryRegionInfo_GetDescription', argument 1 of type 'lldb::SBMemoryRegionInfo *'
in method 'SBMemoryRegionInfo_GetDescription', argument 2 of type 'lldb::SBStream &'
invalid null reference in method 'SBMemoryRegionInfo_GetDescription', argument 2 of type 'lldb::SBStream &'
O:SBMemoryRegionInfo___str__
in method 'SBMemoryRegionInfo___str__', argument 1 of type 'lldb::SBMemoryRegionInfo *'
Wrong number or type of arguments for overloaded function 'new_SBMemoryRegionInfoList'.
  Possible C/C++ prototypes are:
    lldb::SBMemoryRegionInfoList::SBMemoryRegionInfoList()
    lldb::SBMemoryRegionInfoList::SBMemoryRegionInfoList(lldb::SBMemoryRegionInfoList const &)
:new_SBMemoryRegionInfoList
O:new_SBMemoryRegionInfoList
in method 'new_SBMemoryRegionInfoList', argument 1 of type 'lldb::SBMemoryRegionInfoList const &'
invalid null reference in method 'new_SBMemoryRegionInfoList', argument 1 of type 'lldb::SBMemoryRegionInfoList const &'
O:delete_SBMemoryRegionInfoList
in method 'delete_SBMemoryRegionInfoList', argument 1 of type 'lldb::SBMemoryRegionInfoList *'
O:SBMemoryRegionInfoList_GetSize
in method 'SBMemoryRegionInfoList_GetSize', argument 1 of type 'lldb::SBMemoryRegionInfoList const *'
OOO:SBMemoryRegionInfoList_GetMemoryRegionAtIndex
in method 'SBMemoryRegionInfoList_GetMemoryRegionAtIndex', argument 1 of type 'lldb::SBMemoryRegionInfoList *'
in method 'SBMemoryRegionInfoList_GetMemoryRegionAtIndex', argument 2 of type 'uint32_t'
in method 'SBMemoryRegionInfoList_GetMemoryRegionAtIndex', argument 3 of type 'lldb::SBMemoryRegionInfo &'
invalid null reference in method 'SBMemoryRegionInfoList_GetMemoryRegionAtIndex', argument 3 of type 'lldb::SBMemoryRegionInfo &'
Wrong number or type of arguments for overloaded function 'SBMemoryRegionInfoList_Append'.
  Possible C/C++ prototypes are:
    lldb::SBMemoryRegionInfoList::Append(lldb::SBMemoryRegionInfo &)
    lldb::SBMemoryRegionInfoList::Append(lldb::SBMemoryRegionInfoList &)
OO:SBMemoryRegionInfoList_Append
in method 'SBMemoryRegionInfoList_Append', argument 1 of type 'lldb::SBMemoryRegionInfoList *'
in method 'SBMemoryRegionInfoList_Append', argument 2 of type 'lldb::SBMemoryRegionInfo &'
invalid null reference in method 'SBMemoryRegionInfoList_Append', argument 2 of type 'lldb::SBMemoryRegionInfo &'
in method 'SBMemoryRegionInfoList_Append', argument 2 of type 'lldb::SBMemoryRegionInfoList &'
invalid null reference in method 'SBMemoryRegionInfoList_Append', argument 2 of type 'lldb::SBMemoryRegionInfoList &'
O:SBMemoryRegionInfoList_Clear
in method 'SBMemoryRegionInfoList_Clear', argument 1 of type 'lldb::SBMemoryRegionInfoList *'
Wrong number or type of arguments for overloaded function 'new_SBModule'.
  Possible C/C++ prototypes are:
    lldb::SBModule::SBModule()
    lldb::SBModule::SBModule(lldb::SBModule const &)
    lldb::SBModule::SBModule(lldb::SBModuleSpec const &)
    lldb::SBModule::SBModule(lldb::SBProcess &,lldb::addr_t)
:new_SBModule
O:new_SBModule
in method 'new_SBModule', argument 1 of type 'lldb::SBModule const &'
invalid null reference in method 'new_SBModule', argument 1 of type 'lldb::SBModule const &'
in method 'new_SBModule', argument 1 of type 'lldb::SBModuleSpec const &'
invalid null reference in method 'new_SBModule', argument 1 of type 'lldb::SBModuleSpec const &'
OO:new_SBModule
in method 'new_SBModule', argument 1 of type 'lldb::SBProcess &'
invalid null reference in method 'new_SBModule', argument 1 of type 'lldb::SBProcess &'
in method 'new_SBModule', argument 2 of type 'lldb::addr_t'
O:delete_SBModule
in method 'delete_SBModule', argument 1 of type 'lldb::SBModule *'
O:SBModule_IsValid
in method 'SBModule_IsValid', argument 1 of type 'lldb::SBModule const *'
O:SBModule___nonzero__
in method 'SBModule___nonzero__', argument 1 of type 'lldb::SBModule const *'
O:SBModule_Clear
in method 'SBModule_Clear', argument 1 of type 'lldb::SBModule *'
O:SBModule_GetFileSpec
in method 'SBModule_GetFileSpec', argument 1 of type 'lldb::SBModule const *'
O:SBModule_GetPlatformFileSpec
in method 'SBModule_GetPlatformFileSpec', argument 1 of type 'lldb::SBModule const *'
OO:SBModule_SetPlatformFileSpec
in method 'SBModule_SetPlatformFileSpec', argument 1 of type 'lldb::SBModule *'
in method 'SBModule_SetPlatformFileSpec', argument 2 of type 'lldb::SBFileSpec const &'
invalid null reference in method 'SBModule_SetPlatformFileSpec', argument 2 of type 'lldb::SBFileSpec const &'
O:SBModule_GetRemoteInstallFileSpec
in method 'SBModule_GetRemoteInstallFileSpec', argument 1 of type 'lldb::SBModule *'
OO:SBModule_SetRemoteInstallFileSpec
in method 'SBModule_SetRemoteInstallFileSpec', argument 1 of type 'lldb::SBModule *'
in method 'SBModule_SetRemoteInstallFileSpec', argument 2 of type 'lldb::SBFileSpec &'
invalid null reference in method 'SBModule_SetRemoteInstallFileSpec', argument 2 of type 'lldb::SBFileSpec &'
O:SBModule_GetUUIDString
in method 'SBModule_GetUUIDString', argument 1 of type 'lldb::SBModule const *'
OO:SBModule_FindSection
in method 'SBModule_FindSection', argument 1 of type 'lldb::SBModule *'
in method 'SBModule_FindSection', argument 2 of type 'char const *'
OO:SBModule_ResolveFileAddress
in method 'SBModule_ResolveFileAddress', argument 1 of type 'lldb::SBModule *'
in method 'SBModule_ResolveFileAddress', argument 2 of type 'lldb::addr_t'
OOO:SBModule_ResolveSymbolContextForAddress
in method 'SBModule_ResolveSymbolContextForAddress', argument 1 of type 'lldb::SBModule *'
in method 'SBModule_ResolveSymbolContextForAddress', argument 2 of type 'lldb::SBAddress const &'
invalid null reference in method 'SBModule_ResolveSymbolContextForAddress', argument 2 of type 'lldb::SBAddress const &'
in method 'SBModule_ResolveSymbolContextForAddress', argument 3 of type 'uint32_t'
OO:SBModule_GetDescription
in method 'SBModule_GetDescription', argument 1 of type 'lldb::SBModule *'
in method 'SBModule_GetDescription', argument 2 of type 'lldb::SBStream &'
invalid null reference in method 'SBModule_GetDescription', argument 2 of type 'lldb::SBStream &'
O:SBModule_GetNumCompileUnits
in method 'SBModule_GetNumCompileUnits', argument 1 of type 'lldb::SBModule *'
OO:SBModule_GetCompileUnitAtIndex
in method 'SBModule_GetCompileUnitAtIndex', argument 1 of type 'lldb::SBModule *'
in method 'SBModule_GetCompileUnitAtIndex', argument 2 of type 'uint32_t'
OO:SBModule_FindCompileUnits
in method 'SBModule_FindCompileUnits', argument 1 of type 'lldb::SBModule *'
in method 'SBModule_FindCompileUnits', argument 2 of type 'lldb::SBFileSpec const &'
invalid null reference in method 'SBModule_FindCompileUnits', argument 2 of type 'lldb::SBFileSpec const &'
O:SBModule_GetNumSymbols
in method 'SBModule_GetNumSymbols', argument 1 of type 'lldb::SBModule *'
OO:SBModule_GetSymbolAtIndex
in method 'SBModule_GetSymbolAtIndex', argument 1 of type 'lldb::SBModule *'
in method 'SBModule_GetSymbolAtIndex', argument 2 of type 'size_t'
Wrong number or type of arguments for overloaded function 'SBModule_FindSymbol'.
  Possible C/C++ prototypes are:
    lldb::SBModule::FindSymbol(char const *,lldb::SymbolType)
    lldb::SBModule::FindSymbol(char const *)
OO:SBModule_FindSymbol
in method 'SBModule_FindSymbol', argument 1 of type 'lldb::SBModule *'
in method 'SBModule_FindSymbol', argument 2 of type 'char const *'
OOO:SBModule_FindSymbol
in method 'SBModule_FindSymbol', argument 3 of type 'lldb::SymbolType'
Wrong number or type of arguments for overloaded function 'SBModule_FindSymbols'.
  Possible C/C++ prototypes are:
    lldb::SBModule::FindSymbols(char const *,lldb::SymbolType)
    lldb::SBModule::FindSymbols(char const *)
OO:SBModule_FindSymbols
in method 'SBModule_FindSymbols', argument 1 of type 'lldb::SBModule *'
in method 'SBModule_FindSymbols', argument 2 of type 'char const *'
OOO:SBModule_FindSymbols
in method 'SBModule_FindSymbols', argument 3 of type 'lldb::SymbolType'
O:SBModule_GetNumSections
in method 'SBModule_GetNumSections', argument 1 of type 'lldb::SBModule *'
OO:SBModule_GetSectionAtIndex
in method 'SBModule_GetSectionAtIndex', argument 1 of type 'lldb::SBModule *'
in method 'SBModule_GetSectionAtIndex', argument 2 of type 'size_t'
Wrong number or type of arguments for overloaded function 'SBModule_FindFunctions'.
  Possible C/C++ prototypes are:
    lldb::SBModule::FindFunctions(char const *,uint32_t)
    lldb::SBModule::FindFunctions(char const *)
OO:SBModule_FindFunctions
in method 'SBModule_FindFunctions', argument 1 of type 'lldb::SBModule *'
in method 'SBModule_FindFunctions', argument 2 of type 'char const *'
OOO:SBModule_FindFunctions
in method 'SBModule_FindFunctions', argument 3 of type 'uint32_t'
OO:SBModule_FindFirstType
in method 'SBModule_FindFirstType', argument 1 of type 'lldb::SBModule *'
in method 'SBModule_FindFirstType', argument 2 of type 'char const *'
OO:SBModule_FindTypes
in method 'SBModule_FindTypes', argument 1 of type 'lldb::SBModule *'
in method 'SBModule_FindTypes', argument 2 of type 'char const *'
OO:SBModule_GetTypeByID
in method 'SBModule_GetTypeByID', argument 1 of type 'lldb::SBModule *'
in method 'SBModule_GetTypeByID', argument 2 of type 'lldb::user_id_t'
OO:SBModule_GetBasicType
in method 'SBModule_GetBasicType', argument 1 of type 'lldb::SBModule *'
in method 'SBModule_GetBasicType', argument 2 of type 'lldb::BasicType'
Wrong number or type of arguments for overloaded function 'SBModule_GetTypes'.
  Possible C/C++ prototypes are:
    lldb::SBModule::GetTypes(uint32_t)
    lldb::SBModule::GetTypes()
O:SBModule_GetTypes
in method 'SBModule_GetTypes', argument 1 of type 'lldb::SBModule *'
OO:SBModule_GetTypes
in method 'SBModule_GetTypes', argument 2 of type 'uint32_t'
OOOO:SBModule_FindGlobalVariables
in method 'SBModule_FindGlobalVariables', argument 1 of type 'lldb::SBModule *'
in method 'SBModule_FindGlobalVariables', argument 2 of type 'lldb::SBTarget &'
invalid null reference in method 'SBModule_FindGlobalVariables', argument 2 of type 'lldb::SBTarget &'
in method 'SBModule_FindGlobalVariables', argument 3 of type 'char const *'
in method 'SBModule_FindGlobalVariables', argument 4 of type 'uint32_t'
OOO:SBModule_FindFirstGlobalVariable
in method 'SBModule_FindFirstGlobalVariable', argument 1 of type 'lldb::SBModule *'
in method 'SBModule_FindFirstGlobalVariable', argument 2 of type 'lldb::SBTarget &'
invalid null reference in method 'SBModule_FindFirstGlobalVariable', argument 2 of type 'lldb::SBTarget &'
in method 'SBModule_FindFirstGlobalVariable', argument 3 of type 'char const *'
O:SBModule_GetByteOrder
in method 'SBModule_GetByteOrder', argument 1 of type 'lldb::SBModule *'
O:SBModule_GetAddressByteSize
in method 'SBModule_GetAddressByteSize', argument 1 of type 'lldb::SBModule *'
O:SBModule_GetTriple
in method 'SBModule_GetTriple', argument 1 of type 'lldb::SBModule *'
O:SBModule_GetVersion
in method 'SBModule_GetVersion', argument 1 of type 'lldb::SBModule *'
O:SBModule_GetSymbolFileSpec
in method 'SBModule_GetSymbolFileSpec', argument 1 of type 'lldb::SBModule const *'
O:SBModule_GetObjectFileHeaderAddress
in method 'SBModule_GetObjectFileHeaderAddress', argument 1 of type 'lldb::SBModule const *'
OO:SBModule_IsTypeSystemCompatible
in method 'SBModule_IsTypeSystemCompatible', argument 1 of type 'lldb::SBModule *'
in method 'SBModule_IsTypeSystemCompatible', argument 2 of type 'lldb::LanguageType'
O:SBModule_GetObjectFileEntryPointAddress
in method 'SBModule_GetObjectFileEntryPointAddress', argument 1 of type 'lldb::SBModule const *'
OO:SBModule___eq__
in method 'SBModule___eq__', argument 1 of type 'lldb::SBModule const *'
in method 'SBModule___eq__', argument 2 of type 'lldb::SBModule const &'
invalid null reference in method 'SBModule___eq__', argument 2 of type 'lldb::SBModule const &'
OO:SBModule___ne__
in method 'SBModule___ne__', argument 1 of type 'lldb::SBModule const *'
in method 'SBModule___ne__', argument 2 of type 'lldb::SBModule const &'
invalid null reference in method 'SBModule___ne__', argument 2 of type 'lldb::SBModule const &'
O:SBModule___str__
in method 'SBModule___str__', argument 1 of type 'lldb::SBModule *'
Wrong number or type of arguments for overloaded function 'new_SBModuleSpec'.
  Possible C/C++ prototypes are:
    lldb::SBModuleSpec::SBModuleSpec()
    lldb::SBModuleSpec::SBModuleSpec(lldb::SBModuleSpec const &)
:new_SBModuleSpec
O:new_SBModuleSpec
in method 'new_SBModuleSpec', argument 1 of type 'lldb::SBModuleSpec const &'
invalid null reference in method 'new_SBModuleSpec', argument 1 of type 'lldb::SBModuleSpec const &'
O:delete_SBModuleSpec
in method 'delete_SBModuleSpec', argument 1 of type 'lldb::SBModuleSpec *'
O:SBModuleSpec_IsValid
in method 'SBModuleSpec_IsValid', argument 1 of type 'lldb::SBModuleSpec const *'
O:SBModuleSpec___nonzero__
in method 'SBModuleSpec___nonzero__', argument 1 of type 'lldb::SBModuleSpec const *'
O:SBModuleSpec_Clear
in method 'SBModuleSpec_Clear', argument 1 of type 'lldb::SBModuleSpec *'
O:SBModuleSpec_GetFileSpec
in method 'SBModuleSpec_GetFileSpec', argument 1 of type 'lldb::SBModuleSpec *'
OO:SBModuleSpec_SetFileSpec
in method 'SBModuleSpec_SetFileSpec', argument 1 of type 'lldb::SBModuleSpec *'
in method 'SBModuleSpec_SetFileSpec', argument 2 of type 'lldb::SBFileSpec const &'
invalid null reference in method 'SBModuleSpec_SetFileSpec', argument 2 of type 'lldb::SBFileSpec const &'
O:SBModuleSpec_GetPlatformFileSpec
in method 'SBModuleSpec_GetPlatformFileSpec', argument 1 of type 'lldb::SBModuleSpec *'
OO:SBModuleSpec_SetPlatformFileSpec
in method 'SBModuleSpec_SetPlatformFileSpec', argument 1 of type 'lldb::SBModuleSpec *'
in method 'SBModuleSpec_SetPlatformFileSpec', argument 2 of type 'lldb::SBFileSpec const &'
invalid null reference in method 'SBModuleSpec_SetPlatformFileSpec', argument 2 of type 'lldb::SBFileSpec const &'
O:SBModuleSpec_GetSymbolFileSpec
in method 'SBModuleSpec_GetSymbolFileSpec', argument 1 of type 'lldb::SBModuleSpec *'
OO:SBModuleSpec_SetSymbolFileSpec
in method 'SBModuleSpec_SetSymbolFileSpec', argument 1 of type 'lldb::SBModuleSpec *'
in method 'SBModuleSpec_SetSymbolFileSpec', argument 2 of type 'lldb::SBFileSpec const &'
invalid null reference in method 'SBModuleSpec_SetSymbolFileSpec', argument 2 of type 'lldb::SBFileSpec const &'
O:SBModuleSpec_GetObjectName
in method 'SBModuleSpec_GetObjectName', argument 1 of type 'lldb::SBModuleSpec *'
OO:SBModuleSpec_SetObjectName
in method 'SBModuleSpec_SetObjectName', argument 1 of type 'lldb::SBModuleSpec *'
in method 'SBModuleSpec_SetObjectName', argument 2 of type 'char const *'
O:SBModuleSpec_GetTriple
in method 'SBModuleSpec_GetTriple', argument 1 of type 'lldb::SBModuleSpec *'
OO:SBModuleSpec_SetTriple
in method 'SBModuleSpec_SetTriple', argument 1 of type 'lldb::SBModuleSpec *'
in method 'SBModuleSpec_SetTriple', argument 2 of type 'char const *'
O:SBModuleSpec_GetUUIDBytes
in method 'SBModuleSpec_GetUUIDBytes', argument 1 of type 'lldb::SBModuleSpec *'
O:SBModuleSpec_GetUUIDLength
in method 'SBModuleSpec_GetUUIDLength', argument 1 of type 'lldb::SBModuleSpec *'
OOO:SBModuleSpec_SetUUIDBytes
in method 'SBModuleSpec_SetUUIDBytes', argument 1 of type 'lldb::SBModuleSpec *'
in method 'SBModuleSpec_SetUUIDBytes', argument 2 of type 'uint8_t const *'
in method 'SBModuleSpec_SetUUIDBytes', argument 3 of type 'size_t'
OO:SBModuleSpec_GetDescription
in method 'SBModuleSpec_GetDescription', argument 1 of type 'lldb::SBModuleSpec *'
in method 'SBModuleSpec_GetDescription', argument 2 of type 'lldb::SBStream &'
invalid null reference in method 'SBModuleSpec_GetDescription', argument 2 of type 'lldb::SBStream &'
O:SBModuleSpec___str__
in method 'SBModuleSpec___str__', argument 1 of type 'lldb::SBModuleSpec *'
Wrong number or type of arguments for overloaded function 'new_SBModuleSpecList'.
  Possible C/C++ prototypes are:
    lldb::SBModuleSpecList::SBModuleSpecList()
    lldb::SBModuleSpecList::SBModuleSpecList(lldb::SBModuleSpecList const &)
:new_SBModuleSpecList
O:new_SBModuleSpecList
in method 'new_SBModuleSpecList', argument 1 of type 'lldb::SBModuleSpecList const &'
invalid null reference in method 'new_SBModuleSpecList', argument 1 of type 'lldb::SBModuleSpecList const &'
O:delete_SBModuleSpecList
in method 'delete_SBModuleSpecList', argument 1 of type 'lldb::SBModuleSpecList *'
O:SBModuleSpecList_GetModuleSpecifications
in method 'SBModuleSpecList_GetModuleSpecifications', argument 1 of type 'char const *'
Wrong number or type of arguments for overloaded function 'SBModuleSpecList_Append'.
  Possible C/C++ prototypes are:
    lldb::SBModuleSpecList::Append(lldb::SBModuleSpec const &)
    lldb::SBModuleSpecList::Append(lldb::SBModuleSpecList const &)
OO:SBModuleSpecList_Append
in method 'SBModuleSpecList_Append', argument 1 of type 'lldb::SBModuleSpecList *'
in method 'SBModuleSpecList_Append', argument 2 of type 'lldb::SBModuleSpec const &'
invalid null reference in method 'SBModuleSpecList_Append', argument 2 of type 'lldb::SBModuleSpec const &'
in method 'SBModuleSpecList_Append', argument 2 of type 'lldb::SBModuleSpecList const &'
invalid null reference in method 'SBModuleSpecList_Append', argument 2 of type 'lldb::SBModuleSpecList const &'
OO:SBModuleSpecList_FindFirstMatchingSpec
in method 'SBModuleSpecList_FindFirstMatchingSpec', argument 1 of type 'lldb::SBModuleSpecList *'
in method 'SBModuleSpecList_FindFirstMatchingSpec', argument 2 of type 'lldb::SBModuleSpec const &'
invalid null reference in method 'SBModuleSpecList_FindFirstMatchingSpec', argument 2 of type 'lldb::SBModuleSpec const &'
OO:SBModuleSpecList_FindMatchingSpecs
in method 'SBModuleSpecList_FindMatchingSpecs', argument 1 of type 'lldb::SBModuleSpecList *'
in method 'SBModuleSpecList_FindMatchingSpecs', argument 2 of type 'lldb::SBModuleSpec const &'
invalid null reference in method 'SBModuleSpecList_FindMatchingSpecs', argument 2 of type 'lldb::SBModuleSpec const &'
O:SBModuleSpecList_GetSize
in method 'SBModuleSpecList_GetSize', argument 1 of type 'lldb::SBModuleSpecList *'
OO:SBModuleSpecList_GetSpecAtIndex
in method 'SBModuleSpecList_GetSpecAtIndex', argument 1 of type 'lldb::SBModuleSpecList *'
in method 'SBModuleSpecList_GetSpecAtIndex', argument 2 of type 'size_t'
OO:SBModuleSpecList_GetDescription
in method 'SBModuleSpecList_GetDescription', argument 1 of type 'lldb::SBModuleSpecList *'
in method 'SBModuleSpecList_GetDescription', argument 2 of type 'lldb::SBStream &'
invalid null reference in method 'SBModuleSpecList_GetDescription', argument 2 of type 'lldb::SBStream &'
O:SBModuleSpecList___str__
in method 'SBModuleSpecList___str__', argument 1 of type 'lldb::SBModuleSpecList *'
Wrong number or type of arguments for overloaded function 'new_SBPlatformConnectOptions'.
  Possible C/C++ prototypes are:
    lldb::SBPlatformConnectOptions::SBPlatformConnectOptions(char const *)
    lldb::SBPlatformConnectOptions::SBPlatformConnectOptions(lldb::SBPlatformConnectOptions const &)
O:new_SBPlatformConnectOptions
in method 'new_SBPlatformConnectOptions', argument 1 of type 'lldb::SBPlatformConnectOptions const &'
invalid null reference in method 'new_SBPlatformConnectOptions', argument 1 of type 'lldb::SBPlatformConnectOptions const &'
in method 'new_SBPlatformConnectOptions', argument 1 of type 'char const *'
O:delete_SBPlatformConnectOptions
in method 'delete_SBPlatformConnectOptions', argument 1 of type 'lldb::SBPlatformConnectOptions *'
O:SBPlatformConnectOptions_GetURL
in method 'SBPlatformConnectOptions_GetURL', argument 1 of type 'lldb::SBPlatformConnectOptions *'
OO:SBPlatformConnectOptions_SetURL
in method 'SBPlatformConnectOptions_SetURL', argument 1 of type 'lldb::SBPlatformConnectOptions *'
in method 'SBPlatformConnectOptions_SetURL', argument 2 of type 'char const *'
O:SBPlatformConnectOptions_GetRsyncEnabled
in method 'SBPlatformConnectOptions_GetRsyncEnabled', argument 1 of type 'lldb::SBPlatformConnectOptions *'
OOOO:SBPlatformConnectOptions_EnableRsync
in method 'SBPlatformConnectOptions_EnableRsync', argument 1 of type 'lldb::SBPlatformConnectOptions *'
in method 'SBPlatformConnectOptions_EnableRsync', argument 2 of type 'char const *'
in method 'SBPlatformConnectOptions_EnableRsync', argument 3 of type 'char const *'
in method 'SBPlatformConnectOptions_EnableRsync', argument 4 of type 'bool'
O:SBPlatformConnectOptions_DisableRsync
in method 'SBPlatformConnectOptions_DisableRsync', argument 1 of type 'lldb::SBPlatformConnectOptions *'
O:SBPlatformConnectOptions_GetLocalCacheDirectory
in method 'SBPlatformConnectOptions_GetLocalCacheDirectory', argument 1 of type 'lldb::SBPlatformConnectOptions *'
OO:SBPlatformConnectOptions_SetLocalCacheDirectory
in method 'SBPlatformConnectOptions_SetLocalCacheDirectory', argument 1 of type 'lldb::SBPlatformConnectOptions *'
in method 'SBPlatformConnectOptions_SetLocalCacheDirectory', argument 2 of type 'char const *'
Wrong number or type of arguments for overloaded function 'new_SBPlatformShellCommand'.
  Possible C/C++ prototypes are:
    lldb::SBPlatformShellCommand::SBPlatformShellCommand(char const *)
    lldb::SBPlatformShellCommand::SBPlatformShellCommand(lldb::SBPlatformShellCommand const &)
O:new_SBPlatformShellCommand
in method 'new_SBPlatformShellCommand', argument 1 of type 'lldb::SBPlatformShellCommand const &'
invalid null reference in method 'new_SBPlatformShellCommand', argument 1 of type 'lldb::SBPlatformShellCommand const &'
in method 'new_SBPlatformShellCommand', argument 1 of type 'char const *'
O:delete_SBPlatformShellCommand
in method 'delete_SBPlatformShellCommand', argument 1 of type 'lldb::SBPlatformShellCommand *'
O:SBPlatformShellCommand_Clear
in method 'SBPlatformShellCommand_Clear', argument 1 of type 'lldb::SBPlatformShellCommand *'
O:SBPlatformShellCommand_GetCommand
in method 'SBPlatformShellCommand_GetCommand', argument 1 of type 'lldb::SBPlatformShellCommand *'
OO:SBPlatformShellCommand_SetCommand
in method 'SBPlatformShellCommand_SetCommand', argument 1 of type 'lldb::SBPlatformShellCommand *'
in method 'SBPlatformShellCommand_SetCommand', argument 2 of type 'char const *'
O:SBPlatformShellCommand_GetWorkingDirectory
in method 'SBPlatformShellCommand_GetWorkingDirectory', argument 1 of type 'lldb::SBPlatformShellCommand *'
OO:SBPlatformShellCommand_SetWorkingDirectory
in method 'SBPlatformShellCommand_SetWorkingDirectory', argument 1 of type 'lldb::SBPlatformShellCommand *'
in method 'SBPlatformShellCommand_SetWorkingDirectory', argument 2 of type 'char const *'
O:SBPlatformShellCommand_GetTimeoutSeconds
in method 'SBPlatformShellCommand_GetTimeoutSeconds', argument 1 of type 'lldb::SBPlatformShellCommand *'
OO:SBPlatformShellCommand_SetTimeoutSeconds
in method 'SBPlatformShellCommand_SetTimeoutSeconds', argument 1 of type 'lldb::SBPlatformShellCommand *'
in method 'SBPlatformShellCommand_SetTimeoutSeconds', argument 2 of type 'uint32_t'
O:SBPlatformShellCommand_GetSignal
in method 'SBPlatformShellCommand_GetSignal', argument 1 of type 'lldb::SBPlatformShellCommand *'
O:SBPlatformShellCommand_GetStatus
in method 'SBPlatformShellCommand_GetStatus', argument 1 of type 'lldb::SBPlatformShellCommand *'
O:SBPlatformShellCommand_GetOutput
in method 'SBPlatformShellCommand_GetOutput', argument 1 of type 'lldb::SBPlatformShellCommand *'
Wrong number or type of arguments for overloaded function 'new_SBPlatform'.
  Possible C/C++ prototypes are:
    lldb::SBPlatform::SBPlatform()
    lldb::SBPlatform::SBPlatform(char const *)
:new_SBPlatform
O:new_SBPlatform
in method 'new_SBPlatform', argument 1 of type 'char const *'
O:delete_SBPlatform
in method 'delete_SBPlatform', argument 1 of type 'lldb::SBPlatform *'
O:SBPlatform_IsValid
in method 'SBPlatform_IsValid', argument 1 of type 'lldb::SBPlatform const *'
O:SBPlatform___nonzero__
in method 'SBPlatform___nonzero__', argument 1 of type 'lldb::SBPlatform const *'
O:SBPlatform_Clear
in method 'SBPlatform_Clear', argument 1 of type 'lldb::SBPlatform *'
O:SBPlatform_GetWorkingDirectory
in method 'SBPlatform_GetWorkingDirectory', argument 1 of type 'lldb::SBPlatform *'
OO:SBPlatform_SetWorkingDirectory
in method 'SBPlatform_SetWorkingDirectory', argument 1 of type 'lldb::SBPlatform *'
in method 'SBPlatform_SetWorkingDirectory', argument 2 of type 'char const *'
O:SBPlatform_GetName
in method 'SBPlatform_GetName', argument 1 of type 'lldb::SBPlatform *'
OO:SBPlatform_ConnectRemote
in method 'SBPlatform_ConnectRemote', argument 1 of type 'lldb::SBPlatform *'
in method 'SBPlatform_ConnectRemote', argument 2 of type 'lldb::SBPlatformConnectOptions &'
invalid null reference in method 'SBPlatform_ConnectRemote', argument 2 of type 'lldb::SBPlatformConnectOptions &'
O:SBPlatform_DisconnectRemote
in method 'SBPlatform_DisconnectRemote', argument 1 of type 'lldb::SBPlatform *'
O:SBPlatform_IsConnected
in method 'SBPlatform_IsConnected', argument 1 of type 'lldb::SBPlatform *'
O:SBPlatform_GetTriple
in method 'SBPlatform_GetTriple', argument 1 of type 'lldb::SBPlatform *'
O:SBPlatform_GetHostname
in method 'SBPlatform_GetHostname', argument 1 of type 'lldb::SBPlatform *'
O:SBPlatform_GetOSBuild
in method 'SBPlatform_GetOSBuild', argument 1 of type 'lldb::SBPlatform *'
O:SBPlatform_GetOSDescription
in method 'SBPlatform_GetOSDescription', argument 1 of type 'lldb::SBPlatform *'
O:SBPlatform_GetOSMajorVersion
in method 'SBPlatform_GetOSMajorVersion', argument 1 of type 'lldb::SBPlatform *'
O:SBPlatform_GetOSMinorVersion
in method 'SBPlatform_GetOSMinorVersion', argument 1 of type 'lldb::SBPlatform *'
O:SBPlatform_GetOSUpdateVersion
in method 'SBPlatform_GetOSUpdateVersion', argument 1 of type 'lldb::SBPlatform *'
OOO:SBPlatform_Get
in method 'SBPlatform_Get', argument 1 of type 'lldb::SBPlatform *'
in method 'SBPlatform_Get', argument 2 of type 'lldb::SBFileSpec &'
invalid null reference in method 'SBPlatform_Get', argument 2 of type 'lldb::SBFileSpec &'
in method 'SBPlatform_Get', argument 3 of type 'lldb::SBFileSpec &'
invalid null reference in method 'SBPlatform_Get', argument 3 of type 'lldb::SBFileSpec &'
OOO:SBPlatform_Put
in method 'SBPlatform_Put', argument 1 of type 'lldb::SBPlatform *'
in method 'SBPlatform_Put', argument 2 of type 'lldb::SBFileSpec &'
invalid null reference in method 'SBPlatform_Put', argument 2 of type 'lldb::SBFileSpec &'
in method 'SBPlatform_Put', argument 3 of type 'lldb::SBFileSpec &'
invalid null reference in method 'SBPlatform_Put', argument 3 of type 'lldb::SBFileSpec &'
OOO:SBPlatform_Install
in method 'SBPlatform_Install', argument 1 of type 'lldb::SBPlatform *'
in method 'SBPlatform_Install', argument 2 of type 'lldb::SBFileSpec &'
invalid null reference in method 'SBPlatform_Install', argument 2 of type 'lldb::SBFileSpec &'
in method 'SBPlatform_Install', argument 3 of type 'lldb::SBFileSpec &'
invalid null reference in method 'SBPlatform_Install', argument 3 of type 'lldb::SBFileSpec &'
OO:SBPlatform_Run
in method 'SBPlatform_Run', argument 1 of type 'lldb::SBPlatform *'
in method 'SBPlatform_Run', argument 2 of type 'lldb::SBPlatformShellCommand &'
invalid null reference in method 'SBPlatform_Run', argument 2 of type 'lldb::SBPlatformShellCommand &'
OO:SBPlatform_Launch
in method 'SBPlatform_Launch', argument 1 of type 'lldb::SBPlatform *'
in method 'SBPlatform_Launch', argument 2 of type 'lldb::SBLaunchInfo &'
invalid null reference in method 'SBPlatform_Launch', argument 2 of type 'lldb::SBLaunchInfo &'
OO:SBPlatform_Kill
in method 'SBPlatform_Kill', argument 1 of type 'lldb::SBPlatform *'
in method 'SBPlatform_Kill', argument 2 of type 'lldb::pid_t'
Wrong number or type of arguments for overloaded function 'SBPlatform_MakeDirectory'.
  Possible C/C++ prototypes are:
    lldb::SBPlatform::MakeDirectory(char const *,uint32_t)
    lldb::SBPlatform::MakeDirectory(char const *)
OO:SBPlatform_MakeDirectory
in method 'SBPlatform_MakeDirectory', argument 1 of type 'lldb::SBPlatform *'
in method 'SBPlatform_MakeDirectory', argument 2 of type 'char const *'
OOO:SBPlatform_MakeDirectory
in method 'SBPlatform_MakeDirectory', argument 3 of type 'uint32_t'
OO:SBPlatform_GetFilePermissions
in method 'SBPlatform_GetFilePermissions', argument 1 of type 'lldb::SBPlatform *'
in method 'SBPlatform_GetFilePermissions', argument 2 of type 'char const *'
OOO:SBPlatform_SetFilePermissions
in method 'SBPlatform_SetFilePermissions', argument 1 of type 'lldb::SBPlatform *'
in method 'SBPlatform_SetFilePermissions', argument 2 of type 'char const *'
in method 'SBPlatform_SetFilePermissions', argument 3 of type 'uint32_t'
O:SBPlatform_GetUnixSignals
in method 'SBPlatform_GetUnixSignals', argument 1 of type 'lldb::SBPlatform *'
Wrong number or type of arguments for overloaded function 'new_SBProcess'.
  Possible C/C++ prototypes are:
    lldb::SBProcess::SBProcess()
    lldb::SBProcess::SBProcess(lldb::SBProcess const &)
:new_SBProcess
O:new_SBProcess
in method 'new_SBProcess', argument 1 of type 'lldb::SBProcess const &'
invalid null reference in method 'new_SBProcess', argument 1 of type 'lldb::SBProcess const &'
O:delete_SBProcess
in method 'delete_SBProcess', argument 1 of type 'lldb::SBProcess *'
:SBProcess_GetBroadcasterClassName
O:SBProcess_GetPluginName
in method 'SBProcess_GetPluginName', argument 1 of type 'lldb::SBProcess *'
O:SBProcess_GetShortPluginName
in method 'SBProcess_GetShortPluginName', argument 1 of type 'lldb::SBProcess *'
O:SBProcess_Clear
in method 'SBProcess_Clear', argument 1 of type 'lldb::SBProcess *'
O:SBProcess_IsValid
in method 'SBProcess_IsValid', argument 1 of type 'lldb::SBProcess const *'
O:SBProcess___nonzero__
in method 'SBProcess___nonzero__', argument 1 of type 'lldb::SBProcess const *'
O:SBProcess_GetTarget
in method 'SBProcess_GetTarget', argument 1 of type 'lldb::SBProcess const *'
O:SBProcess_GetByteOrder
in method 'SBProcess_GetByteOrder', argument 1 of type 'lldb::SBProcess const *'
OO:SBProcess_PutSTDIN
in method 'SBProcess_PutSTDIN', argument 1 of type 'lldb::SBProcess *'
OO:SBProcess_GetSTDOUT
in method 'SBProcess_GetSTDOUT', argument 1 of type 'lldb::SBProcess const *'
OO:SBProcess_GetSTDERR
in method 'SBProcess_GetSTDERR', argument 1 of type 'lldb::SBProcess const *'
OO:SBProcess_GetAsyncProfileData
in method 'SBProcess_GetAsyncProfileData', argument 1 of type 'lldb::SBProcess const *'
OOO:SBProcess_ReportEventState
in method 'SBProcess_ReportEventState', argument 1 of type 'lldb::SBProcess const *'
in method 'SBProcess_ReportEventState', argument 2 of type 'lldb::SBEvent const &'
invalid null reference in method 'SBProcess_ReportEventState', argument 2 of type 'lldb::SBEvent const &'
OOO:SBProcess_AppendEventStateReport
in method 'SBProcess_AppendEventStateReport', argument 1 of type 'lldb::SBProcess *'
in method 'SBProcess_AppendEventStateReport', argument 2 of type 'lldb::SBEvent const &'
invalid null reference in method 'SBProcess_AppendEventStateReport', argument 2 of type 'lldb::SBEvent const &'
in method 'SBProcess_AppendEventStateReport', argument 3 of type 'lldb::SBCommandReturnObject &'
invalid null reference in method 'SBProcess_AppendEventStateReport', argument 3 of type 'lldb::SBCommandReturnObject &'
OOO:SBProcess_RemoteAttachToProcessWithID
in method 'SBProcess_RemoteAttachToProcessWithID', argument 1 of type 'lldb::SBProcess *'
in method 'SBProcess_RemoteAttachToProcessWithID', argument 2 of type 'lldb::pid_t'
in method 'SBProcess_RemoteAttachToProcessWithID', argument 3 of type 'lldb::SBError &'
invalid null reference in method 'SBProcess_RemoteAttachToProcessWithID', argument 3 of type 'lldb::SBError &'
OOOOOOOOOO:SBProcess_RemoteLaunch
in method 'SBProcess_RemoteLaunch', argument 1 of type 'lldb::SBProcess *'
in method 'SBProcess_RemoteLaunch', argument 4 of type 'char const *'
in method 'SBProcess_RemoteLaunch', argument 5 of type 'char const *'
in method 'SBProcess_RemoteLaunch', argument 6 of type 'char const *'
in method 'SBProcess_RemoteLaunch', argument 7 of type 'char const *'
in method 'SBProcess_RemoteLaunch', argument 8 of type 'uint32_t'
in method 'SBProcess_RemoteLaunch', argument 9 of type 'bool'
in method 'SBProcess_RemoteLaunch', argument 10 of type 'lldb::SBError &'
invalid null reference in method 'SBProcess_RemoteLaunch', argument 10 of type 'lldb::SBError &'
O:SBProcess_GetNumThreads
in method 'SBProcess_GetNumThreads', argument 1 of type 'lldb::SBProcess *'
OO:SBProcess_GetThreadAtIndex
in method 'SBProcess_GetThreadAtIndex', argument 1 of type 'lldb::SBProcess *'
in method 'SBProcess_GetThreadAtIndex', argument 2 of type 'size_t'
OO:SBProcess_GetThreadByID
in method 'SBProcess_GetThreadByID', argument 1 of type 'lldb::SBProcess *'
OO:SBProcess_GetThreadByIndexID
in method 'SBProcess_GetThreadByIndexID', argument 1 of type 'lldb::SBProcess *'
in method 'SBProcess_GetThreadByIndexID', argument 2 of type 'uint32_t'
O:SBProcess_GetSelectedThread
in method 'SBProcess_GetSelectedThread', argument 1 of type 'lldb::SBProcess const *'
OOO:SBProcess_CreateOSPluginThread
in method 'SBProcess_CreateOSPluginThread', argument 1 of type 'lldb::SBProcess *'
in method 'SBProcess_CreateOSPluginThread', argument 3 of type 'lldb::addr_t'
OO:SBProcess_SetSelectedThread
in method 'SBProcess_SetSelectedThread', argument 1 of type 'lldb::SBProcess *'
in method 'SBProcess_SetSelectedThread', argument 2 of type 'lldb::SBThread const &'
invalid null reference in method 'SBProcess_SetSelectedThread', argument 2 of type 'lldb::SBThread const &'
OO:SBProcess_SetSelectedThreadByID
in method 'SBProcess_SetSelectedThreadByID', argument 1 of type 'lldb::SBProcess *'
OO:SBProcess_SetSelectedThreadByIndexID
in method 'SBProcess_SetSelectedThreadByIndexID', argument 1 of type 'lldb::SBProcess *'
in method 'SBProcess_SetSelectedThreadByIndexID', argument 2 of type 'uint32_t'
O:SBProcess_GetNumQueues
in method 'SBProcess_GetNumQueues', argument 1 of type 'lldb::SBProcess *'
OO:SBProcess_GetQueueAtIndex
in method 'SBProcess_GetQueueAtIndex', argument 1 of type 'lldb::SBProcess *'
in method 'SBProcess_GetQueueAtIndex', argument 2 of type 'uint32_t'
O:SBProcess_GetState
in method 'SBProcess_GetState', argument 1 of type 'lldb::SBProcess *'
O:SBProcess_GetExitStatus
in method 'SBProcess_GetExitStatus', argument 1 of type 'lldb::SBProcess *'
O:SBProcess_GetExitDescription
in method 'SBProcess_GetExitDescription', argument 1 of type 'lldb::SBProcess *'
O:SBProcess_GetProcessID
in method 'SBProcess_GetProcessID', argument 1 of type 'lldb::SBProcess *'
O:SBProcess_GetUniqueID
in method 'SBProcess_GetUniqueID', argument 1 of type 'lldb::SBProcess *'
O:SBProcess_GetAddressByteSize
in method 'SBProcess_GetAddressByteSize', argument 1 of type 'lldb::SBProcess const *'
O:SBProcess_Destroy
in method 'SBProcess_Destroy', argument 1 of type 'lldb::SBProcess *'
O:SBProcess_Continue
in method 'SBProcess_Continue', argument 1 of type 'lldb::SBProcess *'
O:SBProcess_Stop
in method 'SBProcess_Stop', argument 1 of type 'lldb::SBProcess *'
O:SBProcess_Kill
in method 'SBProcess_Kill', argument 1 of type 'lldb::SBProcess *'
O:SBProcess_Detach
in method 'SBProcess_Detach', argument 1 of type 'lldb::SBProcess *'
OO:SBProcess_Signal
in method 'SBProcess_Signal', argument 1 of type 'lldb::SBProcess *'
in method 'SBProcess_Signal', argument 2 of type 'int'
O:SBProcess_GetUnixSignals
in method 'SBProcess_GetUnixSignals', argument 1 of type 'lldb::SBProcess *'
Wrong number or type of arguments for overloaded function 'SBProcess_GetStopID'.
  Possible C/C++ prototypes are:
    lldb::SBProcess::GetStopID(bool)
    lldb::SBProcess::GetStopID()
O:SBProcess_GetStopID
in method 'SBProcess_GetStopID', argument 1 of type 'lldb::SBProcess *'
OO:SBProcess_GetStopID
in method 'SBProcess_GetStopID', argument 2 of type 'bool'
O:SBProcess_SendAsyncInterrupt
in method 'SBProcess_SendAsyncInterrupt', argument 1 of type 'lldb::SBProcess *'
OOOO:SBProcess_ReadMemory
in method 'SBProcess_ReadMemory', argument 1 of type 'lldb::SBProcess *'
in method 'SBProcess_ReadMemory', argument 2 of type 'lldb::addr_t'
in method 'SBProcess_ReadMemory', argument 5 of type 'lldb::SBError &'
invalid null reference in method 'SBProcess_ReadMemory', argument 5 of type 'lldb::SBError &'
OOOO:SBProcess_WriteMemory
in method 'SBProcess_WriteMemory', argument 1 of type 'lldb::SBProcess *'
in method 'SBProcess_WriteMemory', argument 2 of type 'lldb::addr_t'
in method 'SBProcess_WriteMemory', argument 5 of type 'lldb::SBError &'
invalid null reference in method 'SBProcess_WriteMemory', argument 5 of type 'lldb::SBError &'
OOOO:SBProcess_ReadCStringFromMemory
in method 'SBProcess_ReadCStringFromMemory', argument 1 of type 'lldb::SBProcess *'
in method 'SBProcess_ReadCStringFromMemory', argument 2 of type 'lldb::addr_t'
in method 'SBProcess_ReadCStringFromMemory', argument 5 of type 'lldb::SBError &'
invalid null reference in method 'SBProcess_ReadCStringFromMemory', argument 5 of type 'lldb::SBError &'
OOOO:SBProcess_ReadUnsignedFromMemory
in method 'SBProcess_ReadUnsignedFromMemory', argument 1 of type 'lldb::SBProcess *'
in method 'SBProcess_ReadUnsignedFromMemory', argument 2 of type 'lldb::addr_t'
in method 'SBProcess_ReadUnsignedFromMemory', argument 3 of type 'uint32_t'
in method 'SBProcess_ReadUnsignedFromMemory', argument 4 of type 'lldb::SBError &'
invalid null reference in method 'SBProcess_ReadUnsignedFromMemory', argument 4 of type 'lldb::SBError &'
OOO:SBProcess_ReadPointerFromMemory
in method 'SBProcess_ReadPointerFromMemory', argument 1 of type 'lldb::SBProcess *'
in method 'SBProcess_ReadPointerFromMemory', argument 2 of type 'lldb::addr_t'
in method 'SBProcess_ReadPointerFromMemory', argument 3 of type 'lldb::SBError &'
invalid null reference in method 'SBProcess_ReadPointerFromMemory', argument 3 of type 'lldb::SBError &'
O:SBProcess_GetStateFromEvent
in method 'SBProcess_GetStateFromEvent', argument 1 of type 'lldb::SBEvent const &'
invalid null reference in method 'SBProcess_GetStateFromEvent', argument 1 of type 'lldb::SBEvent const &'
O:SBProcess_GetRestartedFromEvent
in method 'SBProcess_GetRestartedFromEvent', argument 1 of type 'lldb::SBEvent const &'
invalid null reference in method 'SBProcess_GetRestartedFromEvent', argument 1 of type 'lldb::SBEvent const &'
O:SBProcess_GetNumRestartedReasonsFromEvent
in method 'SBProcess_GetNumRestartedReasonsFromEvent', argument 1 of type 'lldb::SBEvent const &'
invalid null reference in method 'SBProcess_GetNumRestartedReasonsFromEvent', argument 1 of type 'lldb::SBEvent const &'
OO:SBProcess_GetRestartedReasonAtIndexFromEvent
in method 'SBProcess_GetRestartedReasonAtIndexFromEvent', argument 1 of type 'lldb::SBEvent const &'
invalid null reference in method 'SBProcess_GetRestartedReasonAtIndexFromEvent', argument 1 of type 'lldb::SBEvent const &'
in method 'SBProcess_GetRestartedReasonAtIndexFromEvent', argument 2 of type 'size_t'
O:SBProcess_GetProcessFromEvent
in method 'SBProcess_GetProcessFromEvent', argument 1 of type 'lldb::SBEvent const &'
invalid null reference in method 'SBProcess_GetProcessFromEvent', argument 1 of type 'lldb::SBEvent const &'
O:SBProcess_GetInterruptedFromEvent
in method 'SBProcess_GetInterruptedFromEvent', argument 1 of type 'lldb::SBEvent const &'
invalid null reference in method 'SBProcess_GetInterruptedFromEvent', argument 1 of type 'lldb::SBEvent const &'
O:SBProcess_GetStructuredDataFromEvent
in method 'SBProcess_GetStructuredDataFromEvent', argument 1 of type 'lldb::SBEvent const &'
invalid null reference in method 'SBProcess_GetStructuredDataFromEvent', argument 1 of type 'lldb::SBEvent const &'
O:SBProcess_EventIsProcessEvent
in method 'SBProcess_EventIsProcessEvent', argument 1 of type 'lldb::SBEvent const &'
invalid null reference in method 'SBProcess_EventIsProcessEvent', argument 1 of type 'lldb::SBEvent const &'
O:SBProcess_EventIsStructuredDataEvent
in method 'SBProcess_EventIsStructuredDataEvent', argument 1 of type 'lldb::SBEvent const &'
invalid null reference in method 'SBProcess_EventIsStructuredDataEvent', argument 1 of type 'lldb::SBEvent const &'
O:SBProcess_GetBroadcaster
in method 'SBProcess_GetBroadcaster', argument 1 of type 'lldb::SBProcess const *'
OO:SBProcess_GetDescription
in method 'SBProcess_GetDescription', argument 1 of type 'lldb::SBProcess *'
in method 'SBProcess_GetDescription', argument 2 of type 'lldb::SBStream &'
invalid null reference in method 'SBProcess_GetDescription', argument 2 of type 'lldb::SBStream &'
OO:SBProcess_GetNumSupportedHardwareWatchpoints
in method 'SBProcess_GetNumSupportedHardwareWatchpoints', argument 1 of type 'lldb::SBProcess const *'
in method 'SBProcess_GetNumSupportedHardwareWatchpoints', argument 2 of type 'lldb::SBError &'
invalid null reference in method 'SBProcess_GetNumSupportedHardwareWatchpoints', argument 2 of type 'lldb::SBError &'
OOO:SBProcess_LoadImage
in method 'SBProcess_LoadImage', argument 1 of type 'lldb::SBProcess *'
in method 'SBProcess_LoadImage', argument 2 of type 'lldb::SBFileSpec &'
invalid null reference in method 'SBProcess_LoadImage', argument 2 of type 'lldb::SBFileSpec &'
in method 'SBProcess_LoadImage', argument 3 of type 'lldb::SBError &'
invalid null reference in method 'SBProcess_LoadImage', argument 3 of type 'lldb::SBError &'
OOOOO:SBProcess_LoadImageUsingPaths
in method 'SBProcess_LoadImageUsingPaths', argument 1 of type 'lldb::SBProcess *'
in method 'SBProcess_LoadImageUsingPaths', argument 2 of type 'lldb::SBFileSpec const &'
invalid null reference in method 'SBProcess_LoadImageUsingPaths', argument 2 of type 'lldb::SBFileSpec const &'
in method 'SBProcess_LoadImageUsingPaths', argument 3 of type 'lldb::SBStringList &'
invalid null reference in method 'SBProcess_LoadImageUsingPaths', argument 3 of type 'lldb::SBStringList &'
in method 'SBProcess_LoadImageUsingPaths', argument 4 of type 'lldb::SBFileSpec &'
invalid null reference in method 'SBProcess_LoadImageUsingPaths', argument 4 of type 'lldb::SBFileSpec &'
in method 'SBProcess_LoadImageUsingPaths', argument 5 of type 'lldb::SBError &'
invalid null reference in method 'SBProcess_LoadImageUsingPaths', argument 5 of type 'lldb::SBError &'
OO:SBProcess_UnloadImage
in method 'SBProcess_UnloadImage', argument 1 of type 'lldb::SBProcess *'
in method 'SBProcess_UnloadImage', argument 2 of type 'uint32_t'
OO:SBProcess_SendEventData
in method 'SBProcess_SendEventData', argument 1 of type 'lldb::SBProcess *'
in method 'SBProcess_SendEventData', argument 2 of type 'char const *'
O:SBProcess_GetNumExtendedBacktraceTypes
in method 'SBProcess_GetNumExtendedBacktraceTypes', argument 1 of type 'lldb::SBProcess *'
OO:SBProcess_GetExtendedBacktraceTypeAtIndex
in method 'SBProcess_GetExtendedBacktraceTypeAtIndex', argument 1 of type 'lldb::SBProcess *'
in method 'SBProcess_GetExtendedBacktraceTypeAtIndex', argument 2 of type 'uint32_t'
OO:SBProcess_GetHistoryThreads
in method 'SBProcess_GetHistoryThreads', argument 1 of type 'lldb::SBProcess *'
in method 'SBProcess_GetHistoryThreads', argument 2 of type 'lldb::addr_t'
OO:SBProcess_IsInstrumentationRuntimePresent
in method 'SBProcess_IsInstrumentationRuntimePresent', argument 1 of type 'lldb::SBProcess *'
in method 'SBProcess_IsInstrumentationRuntimePresent', argument 2 of type 'lldb::InstrumentationRuntimeType'
OO:SBProcess_SaveCore
in method 'SBProcess_SaveCore', argument 1 of type 'lldb::SBProcess *'
in method 'SBProcess_SaveCore', argument 2 of type 'char const *'
OOO:SBProcess_StartTrace
in method 'SBProcess_StartTrace', argument 1 of type 'lldb::SBProcess *'
in method 'SBProcess_StartTrace', argument 2 of type 'lldb::SBTraceOptions &'
invalid null reference in method 'SBProcess_StartTrace', argument 2 of type 'lldb::SBTraceOptions &'
in method 'SBProcess_StartTrace', argument 3 of type 'lldb::SBError &'
invalid null reference in method 'SBProcess_StartTrace', argument 3 of type 'lldb::SBError &'
OOO:SBProcess_GetMemoryRegionInfo
in method 'SBProcess_GetMemoryRegionInfo', argument 1 of type 'lldb::SBProcess *'
in method 'SBProcess_GetMemoryRegionInfo', argument 2 of type 'lldb::addr_t'
in method 'SBProcess_GetMemoryRegionInfo', argument 3 of type 'lldb::SBMemoryRegionInfo &'
invalid null reference in method 'SBProcess_GetMemoryRegionInfo', argument 3 of type 'lldb::SBMemoryRegionInfo &'
O:SBProcess_GetMemoryRegions
in method 'SBProcess_GetMemoryRegions', argument 1 of type 'lldb::SBProcess *'
O:SBProcess_GetProcessInfo
in method 'SBProcess_GetProcessInfo', argument 1 of type 'lldb::SBProcess *'
O:SBProcess___str__
in method 'SBProcess___str__', argument 1 of type 'lldb::SBProcess *'
Wrong number or type of arguments for overloaded function 'new_SBProcessInfo'.
  Possible C/C++ prototypes are:
    lldb::SBProcessInfo::SBProcessInfo()
    lldb::SBProcessInfo::SBProcessInfo(lldb::SBProcessInfo const &)
:new_SBProcessInfo
O:new_SBProcessInfo
in method 'new_SBProcessInfo', argument 1 of type 'lldb::SBProcessInfo const &'
invalid null reference in method 'new_SBProcessInfo', argument 1 of type 'lldb::SBProcessInfo const &'
O:delete_SBProcessInfo
in method 'delete_SBProcessInfo', argument 1 of type 'lldb::SBProcessInfo *'
O:SBProcessInfo_IsValid
in method 'SBProcessInfo_IsValid', argument 1 of type 'lldb::SBProcessInfo *'
O:SBProcessInfo___nonzero__
in method 'SBProcessInfo___nonzero__', argument 1 of type 'lldb::SBProcessInfo const *'
O:SBProcessInfo_GetName
in method 'SBProcessInfo_GetName', argument 1 of type 'lldb::SBProcessInfo *'
O:SBProcessInfo_GetExecutableFile
in method 'SBProcessInfo_GetExecutableFile', argument 1 of type 'lldb::SBProcessInfo *'
O:SBProcessInfo_GetProcessID
in method 'SBProcessInfo_GetProcessID', argument 1 of type 'lldb::SBProcessInfo *'
O:SBProcessInfo_GetUserID
in method 'SBProcessInfo_GetUserID', argument 1 of type 'lldb::SBProcessInfo *'
O:SBProcessInfo_GetGroupID
in method 'SBProcessInfo_GetGroupID', argument 1 of type 'lldb::SBProcessInfo *'
O:SBProcessInfo_UserIDIsValid
in method 'SBProcessInfo_UserIDIsValid', argument 1 of type 'lldb::SBProcessInfo *'
O:SBProcessInfo_GroupIDIsValid
in method 'SBProcessInfo_GroupIDIsValid', argument 1 of type 'lldb::SBProcessInfo *'
O:SBProcessInfo_GetEffectiveUserID
in method 'SBProcessInfo_GetEffectiveUserID', argument 1 of type 'lldb::SBProcessInfo *'
O:SBProcessInfo_GetEffectiveGroupID
in method 'SBProcessInfo_GetEffectiveGroupID', argument 1 of type 'lldb::SBProcessInfo *'
O:SBProcessInfo_EffectiveUserIDIsValid
in method 'SBProcessInfo_EffectiveUserIDIsValid', argument 1 of type 'lldb::SBProcessInfo *'
O:SBProcessInfo_EffectiveGroupIDIsValid
in method 'SBProcessInfo_EffectiveGroupIDIsValid', argument 1 of type 'lldb::SBProcessInfo *'
O:SBProcessInfo_GetParentProcessID
in method 'SBProcessInfo_GetParentProcessID', argument 1 of type 'lldb::SBProcessInfo *'
Wrong number or type of arguments for overloaded function 'new_SBQueue'.
  Possible C/C++ prototypes are:
    lldb::SBQueue::SBQueue()
    lldb::SBQueue::SBQueue(lldb::QueueSP const &)
:new_SBQueue
O:new_SBQueue
in method 'new_SBQueue', argument 1 of type 'lldb::QueueSP const &'
invalid null reference in method 'new_SBQueue', argument 1 of type 'lldb::QueueSP const &'
O:delete_SBQueue
in method 'delete_SBQueue', argument 1 of type 'lldb::SBQueue *'
O:SBQueue_IsValid
in method 'SBQueue_IsValid', argument 1 of type 'lldb::SBQueue const *'
O:SBQueue___nonzero__
in method 'SBQueue___nonzero__', argument 1 of type 'lldb::SBQueue const *'
O:SBQueue_Clear
in method 'SBQueue_Clear', argument 1 of type 'lldb::SBQueue *'
O:SBQueue_GetProcess
in method 'SBQueue_GetProcess', argument 1 of type 'lldb::SBQueue *'
O:SBQueue_GetQueueID
in method 'SBQueue_GetQueueID', argument 1 of type 'lldb::SBQueue const *'
O:SBQueue_GetName
in method 'SBQueue_GetName', argument 1 of type 'lldb::SBQueue const *'
O:SBQueue_GetKind
in method 'SBQueue_GetKind', argument 1 of type 'lldb::SBQueue *'
O:SBQueue_GetIndexID
in method 'SBQueue_GetIndexID', argument 1 of type 'lldb::SBQueue const *'
O:SBQueue_GetNumThreads
in method 'SBQueue_GetNumThreads', argument 1 of type 'lldb::SBQueue *'
OO:SBQueue_GetThreadAtIndex
in method 'SBQueue_GetThreadAtIndex', argument 1 of type 'lldb::SBQueue *'
in method 'SBQueue_GetThreadAtIndex', argument 2 of type 'uint32_t'
O:SBQueue_GetNumPendingItems
in method 'SBQueue_GetNumPendingItems', argument 1 of type 'lldb::SBQueue *'
OO:SBQueue_GetPendingItemAtIndex
in method 'SBQueue_GetPendingItemAtIndex', argument 1 of type 'lldb::SBQueue *'
in method 'SBQueue_GetPendingItemAtIndex', argument 2 of type 'uint32_t'
O:SBQueue_GetNumRunningItems
in method 'SBQueue_GetNumRunningItems', argument 1 of type 'lldb::SBQueue *'
Wrong number or type of arguments for overloaded function 'new_SBQueueItem'.
  Possible C/C++ prototypes are:
    lldb::SBQueueItem::SBQueueItem()
    lldb::SBQueueItem::SBQueueItem(lldb::QueueItemSP const &)
:new_SBQueueItem
O:new_SBQueueItem
in method 'new_SBQueueItem', argument 1 of type 'lldb::QueueItemSP const &'
invalid null reference in method 'new_SBQueueItem', argument 1 of type 'lldb::QueueItemSP const &'
O:delete_SBQueueItem
in method 'delete_SBQueueItem', argument 1 of type 'lldb::SBQueueItem *'
O:SBQueueItem_IsValid
in method 'SBQueueItem_IsValid', argument 1 of type 'lldb::SBQueueItem const *'
O:SBQueueItem___nonzero__
in method 'SBQueueItem___nonzero__', argument 1 of type 'lldb::SBQueueItem const *'
O:SBQueueItem_Clear
in method 'SBQueueItem_Clear', argument 1 of type 'lldb::SBQueueItem *'
O:SBQueueItem_GetKind
in method 'SBQueueItem_GetKind', argument 1 of type 'lldb::SBQueueItem const *'
OO:SBQueueItem_SetKind
in method 'SBQueueItem_SetKind', argument 1 of type 'lldb::SBQueueItem *'
in method 'SBQueueItem_SetKind', argument 2 of type 'lldb::QueueItemKind'
O:SBQueueItem_GetAddress
in method 'SBQueueItem_GetAddress', argument 1 of type 'lldb::SBQueueItem const *'
OO:SBQueueItem_SetAddress
in method 'SBQueueItem_SetAddress', argument 1 of type 'lldb::SBQueueItem *'
in method 'SBQueueItem_SetAddress', argument 2 of type 'lldb::SBAddress'
invalid null reference in method 'SBQueueItem_SetAddress', argument 2 of type 'lldb::SBAddress'
OO:SBQueueItem_SetQueueItem
in method 'SBQueueItem_SetQueueItem', argument 1 of type 'lldb::SBQueueItem *'
in method 'SBQueueItem_SetQueueItem', argument 2 of type 'lldb::QueueItemSP const &'
invalid null reference in method 'SBQueueItem_SetQueueItem', argument 2 of type 'lldb::QueueItemSP const &'
OO:SBQueueItem_GetExtendedBacktraceThread
in method 'SBQueueItem_GetExtendedBacktraceThread', argument 1 of type 'lldb::SBQueueItem *'
in method 'SBQueueItem_GetExtendedBacktraceThread', argument 2 of type 'char const *'
Wrong number or type of arguments for overloaded function 'new_SBSection'.
  Possible C/C++ prototypes are:
    lldb::SBSection::SBSection()
    lldb::SBSection::SBSection(lldb::SBSection const &)
:new_SBSection
O:new_SBSection
in method 'new_SBSection', argument 1 of type 'lldb::SBSection const &'
invalid null reference in method 'new_SBSection', argument 1 of type 'lldb::SBSection const &'
O:delete_SBSection
in method 'delete_SBSection', argument 1 of type 'lldb::SBSection *'
O:SBSection_IsValid
in method 'SBSection_IsValid', argument 1 of type 'lldb::SBSection const *'
O:SBSection___nonzero__
in method 'SBSection___nonzero__', argument 1 of type 'lldb::SBSection const *'
O:SBSection_GetName
in method 'SBSection_GetName', argument 1 of type 'lldb::SBSection *'
O:SBSection_GetParent
in method 'SBSection_GetParent', argument 1 of type 'lldb::SBSection *'
OO:SBSection_FindSubSection
in method 'SBSection_FindSubSection', argument 1 of type 'lldb::SBSection *'
in method 'SBSection_FindSubSection', argument 2 of type 'char const *'
O:SBSection_GetNumSubSections
in method 'SBSection_GetNumSubSections', argument 1 of type 'lldb::SBSection *'
OO:SBSection_GetSubSectionAtIndex
in method 'SBSection_GetSubSectionAtIndex', argument 1 of type 'lldb::SBSection *'
in method 'SBSection_GetSubSectionAtIndex', argument 2 of type 'size_t'
O:SBSection_GetFileAddress
in method 'SBSection_GetFileAddress', argument 1 of type 'lldb::SBSection *'
OO:SBSection_GetLoadAddress
in method 'SBSection_GetLoadAddress', argument 1 of type 'lldb::SBSection *'
in method 'SBSection_GetLoadAddress', argument 2 of type 'lldb::SBTarget &'
invalid null reference in method 'SBSection_GetLoadAddress', argument 2 of type 'lldb::SBTarget &'
O:SBSection_GetByteSize
in method 'SBSection_GetByteSize', argument 1 of type 'lldb::SBSection *'
O:SBSection_GetFileOffset
in method 'SBSection_GetFileOffset', argument 1 of type 'lldb::SBSection *'
O:SBSection_GetFileByteSize
in method 'SBSection_GetFileByteSize', argument 1 of type 'lldb::SBSection *'
Wrong number or type of arguments for overloaded function 'SBSection_GetSectionData'.
  Possible C/C++ prototypes are:
    lldb::SBSection::GetSectionData()
    lldb::SBSection::GetSectionData(uint64_t,uint64_t)
O:SBSection_GetSectionData
in method 'SBSection_GetSectionData', argument 1 of type 'lldb::SBSection *'
OOO:SBSection_GetSectionData
in method 'SBSection_GetSectionData', argument 2 of type 'uint64_t'
in method 'SBSection_GetSectionData', argument 3 of type 'uint64_t'
O:SBSection_GetSectionType
in method 'SBSection_GetSectionType', argument 1 of type 'lldb::SBSection *'
O:SBSection_GetPermissions
in method 'SBSection_GetPermissions', argument 1 of type 'lldb::SBSection const *'
O:SBSection_GetTargetByteSize
in method 'SBSection_GetTargetByteSize', argument 1 of type 'lldb::SBSection *'
OO:SBSection_GetDescription
in method 'SBSection_GetDescription', argument 1 of type 'lldb::SBSection *'
in method 'SBSection_GetDescription', argument 2 of type 'lldb::SBStream &'
invalid null reference in method 'SBSection_GetDescription', argument 2 of type 'lldb::SBStream &'
OO:SBSection___eq__
in method 'SBSection___eq__', argument 1 of type 'lldb::SBSection *'
in method 'SBSection___eq__', argument 2 of type 'lldb::SBSection const &'
invalid null reference in method 'SBSection___eq__', argument 2 of type 'lldb::SBSection const &'
OO:SBSection___ne__
in method 'SBSection___ne__', argument 1 of type 'lldb::SBSection *'
in method 'SBSection___ne__', argument 2 of type 'lldb::SBSection const &'
invalid null reference in method 'SBSection___ne__', argument 2 of type 'lldb::SBSection const &'
O:SBSection___str__
in method 'SBSection___str__', argument 1 of type 'lldb::SBSection *'
O:new_SBSourceManager
in method 'new_SBSourceManager', argument 1 of type 'lldb::SBSourceManager const &'
invalid null reference in method 'new_SBSourceManager', argument 1 of type 'lldb::SBSourceManager const &'
O:delete_SBSourceManager
in method 'delete_SBSourceManager', argument 1 of type 'lldb::SBSourceManager *'
OOOOOOO:SBSourceManager_DisplaySourceLinesWithLineNumbers
in method 'SBSourceManager_DisplaySourceLinesWithLineNumbers', argument 1 of type 'lldb::SBSourceManager *'
in method 'SBSourceManager_DisplaySourceLinesWithLineNumbers', argument 2 of type 'lldb::SBFileSpec const &'
invalid null reference in method 'SBSourceManager_DisplaySourceLinesWithLineNumbers', argument 2 of type 'lldb::SBFileSpec const &'
in method 'SBSourceManager_DisplaySourceLinesWithLineNumbers', argument 3 of type 'uint32_t'
in method 'SBSourceManager_DisplaySourceLinesWithLineNumbers', argument 4 of type 'uint32_t'
in method 'SBSourceManager_DisplaySourceLinesWithLineNumbers', argument 5 of type 'uint32_t'
in method 'SBSourceManager_DisplaySourceLinesWithLineNumbers', argument 6 of type 'char const *'
in method 'SBSourceManager_DisplaySourceLinesWithLineNumbers', argument 7 of type 'lldb::SBStream &'
invalid null reference in method 'SBSourceManager_DisplaySourceLinesWithLineNumbers', argument 7 of type 'lldb::SBStream &'
OOOOOOOO:SBSourceManager_DisplaySourceLinesWithLineNumbersAndColumn
in method 'SBSourceManager_DisplaySourceLinesWithLineNumbersAndColumn', argument 1 of type 'lldb::SBSourceManager *'
in method 'SBSourceManager_DisplaySourceLinesWithLineNumbersAndColumn', argument 2 of type 'lldb::SBFileSpec const &'
invalid null reference in method 'SBSourceManager_DisplaySourceLinesWithLineNumbersAndColumn', argument 2 of type 'lldb::SBFileSpec const &'
in method 'SBSourceManager_DisplaySourceLinesWithLineNumbersAndColumn', argument 3 of type 'uint32_t'
in method 'SBSourceManager_DisplaySourceLinesWithLineNumbersAndColumn', argument 4 of type 'uint32_t'
in method 'SBSourceManager_DisplaySourceLinesWithLineNumbersAndColumn', argument 5 of type 'uint32_t'
in method 'SBSourceManager_DisplaySourceLinesWithLineNumbersAndColumn', argument 6 of type 'uint32_t'
in method 'SBSourceManager_DisplaySourceLinesWithLineNumbersAndColumn', argument 7 of type 'char const *'
in method 'SBSourceManager_DisplaySourceLinesWithLineNumbersAndColumn', argument 8 of type 'lldb::SBStream &'
invalid null reference in method 'SBSourceManager_DisplaySourceLinesWithLineNumbersAndColumn', argument 8 of type 'lldb::SBStream &'
:new_SBStream
O:delete_SBStream
in method 'delete_SBStream', argument 1 of type 'lldb::SBStream *'
O:SBStream_IsValid
in method 'SBStream_IsValid', argument 1 of type 'lldb::SBStream const *'
O:SBStream___nonzero__
in method 'SBStream___nonzero__', argument 1 of type 'lldb::SBStream const *'
O:SBStream_GetData
in method 'SBStream_GetData', argument 1 of type 'lldb::SBStream *'
O:SBStream_GetSize
in method 'SBStream_GetSize', argument 1 of type 'lldb::SBStream *'
OO:SBStream_Print
in method 'SBStream_Print', argument 1 of type 'lldb::SBStream *'
in method 'SBStream_Print', argument 2 of type 'char const *'
OOO:SBStream_RedirectToFile
in method 'SBStream_RedirectToFile', argument 1 of type 'lldb::SBStream *'
in method 'SBStream_RedirectToFile', argument 2 of type 'char const *'
in method 'SBStream_RedirectToFile', argument 3 of type 'bool'
OOO:SBStream_RedirectToFileHandle
in method 'SBStream_RedirectToFileHandle', argument 1 of type 'lldb::SBStream *'
in method 'SBStream_RedirectToFileHandle', argument 3 of type 'bool'
OOO:SBStream_RedirectToFileDescriptor
in method 'SBStream_RedirectToFileDescriptor', argument 1 of type 'lldb::SBStream *'
in method 'SBStream_RedirectToFileDescriptor', argument 2 of type 'int'
in method 'SBStream_RedirectToFileDescriptor', argument 3 of type 'bool'
O:SBStream_Clear
in method 'SBStream_Clear', argument 1 of type 'lldb::SBStream *'
OO:SBStream_write
in method 'SBStream_write', argument 1 of type 'lldb::SBStream *'
in method 'SBStream_write', argument 2 of type 'char const *'
O:SBStream_flush
in method 'SBStream_flush', argument 1 of type 'lldb::SBStream *'
Wrong number or type of arguments for overloaded function 'new_SBStringList'.
  Possible C/C++ prototypes are:
    lldb::SBStringList::SBStringList()
    lldb::SBStringList::SBStringList(lldb::SBStringList const &)
:new_SBStringList
O:new_SBStringList
in method 'new_SBStringList', argument 1 of type 'lldb::SBStringList const &'
invalid null reference in method 'new_SBStringList', argument 1 of type 'lldb::SBStringList const &'
O:delete_SBStringList
in method 'delete_SBStringList', argument 1 of type 'lldb::SBStringList *'
O:SBStringList_IsValid
in method 'SBStringList_IsValid', argument 1 of type 'lldb::SBStringList const *'
O:SBStringList___nonzero__
in method 'SBStringList___nonzero__', argument 1 of type 'lldb::SBStringList const *'
OO:SBStringList_AppendString
in method 'SBStringList_AppendString', argument 1 of type 'lldb::SBStringList *'
in method 'SBStringList_AppendString', argument 2 of type 'char const *'
Wrong number or type of arguments for overloaded function 'SBStringList_AppendList'.
  Possible C/C++ prototypes are:
    lldb::SBStringList::AppendList(char const **,int)
    lldb::SBStringList::AppendList(lldb::SBStringList const &)
OO:SBStringList_AppendList
in method 'SBStringList_AppendList', argument 1 of type 'lldb::SBStringList *'
in method 'SBStringList_AppendList', argument 2 of type 'lldb::SBStringList const &'
invalid null reference in method 'SBStringList_AppendList', argument 2 of type 'lldb::SBStringList const &'
OOO:SBStringList_AppendList
in method 'SBStringList_AppendList', argument 3 of type 'int'
O:SBStringList_GetSize
in method 'SBStringList_GetSize', argument 1 of type 'lldb::SBStringList const *'
OO:SBStringList_GetStringAtIndex
in method 'SBStringList_GetStringAtIndex', argument 1 of type 'lldb::SBStringList *'
in method 'SBStringList_GetStringAtIndex', argument 2 of type 'size_t'
O:SBStringList_Clear
in method 'SBStringList_Clear', argument 1 of type 'lldb::SBStringList *'
Wrong number or type of arguments for overloaded function 'new_SBStructuredData'.
  Possible C/C++ prototypes are:
    lldb::SBStructuredData::SBStructuredData()
    lldb::SBStructuredData::SBStructuredData(lldb::SBStructuredData const &)
    lldb::SBStructuredData::SBStructuredData(lldb::EventSP const &)
:new_SBStructuredData
O:new_SBStructuredData
in method 'new_SBStructuredData', argument 1 of type 'lldb::SBStructuredData const &'
invalid null reference in method 'new_SBStructuredData', argument 1 of type 'lldb::SBStructuredData const &'
in method 'new_SBStructuredData', argument 1 of type 'lldb::EventSP const &'
invalid null reference in method 'new_SBStructuredData', argument 1 of type 'lldb::EventSP const &'
O:delete_SBStructuredData
in method 'delete_SBStructuredData', argument 1 of type 'lldb::SBStructuredData *'
O:SBStructuredData_IsValid
in method 'SBStructuredData_IsValid', argument 1 of type 'lldb::SBStructuredData const *'
O:SBStructuredData___nonzero__
in method 'SBStructuredData___nonzero__', argument 1 of type 'lldb::SBStructuredData const *'
O:SBStructuredData_Clear
in method 'SBStructuredData_Clear', argument 1 of type 'lldb::SBStructuredData *'
O:SBStructuredData_GetType
in method 'SBStructuredData_GetType', argument 1 of type 'lldb::SBStructuredData const *'
O:SBStructuredData_GetSize
in method 'SBStructuredData_GetSize', argument 1 of type 'lldb::SBStructuredData const *'
OO:SBStructuredData_GetKeys
in method 'SBStructuredData_GetKeys', argument 1 of type 'lldb::SBStructuredData const *'
in method 'SBStructuredData_GetKeys', argument 2 of type 'lldb::SBStringList &'
invalid null reference in method 'SBStructuredData_GetKeys', argument 2 of type 'lldb::SBStringList &'
OO:SBStructuredData_GetValueForKey
in method 'SBStructuredData_GetValueForKey', argument 1 of type 'lldb::SBStructuredData const *'
in method 'SBStructuredData_GetValueForKey', argument 2 of type 'char const *'
OO:SBStructuredData_GetItemAtIndex
in method 'SBStructuredData_GetItemAtIndex', argument 1 of type 'lldb::SBStructuredData const *'
in method 'SBStructuredData_GetItemAtIndex', argument 2 of type 'size_t'
Wrong number or type of arguments for overloaded function 'SBStructuredData_GetIntegerValue'.
  Possible C/C++ prototypes are:
    lldb::SBStructuredData::GetIntegerValue(uint64_t) const
    lldb::SBStructuredData::GetIntegerValue() const
O:SBStructuredData_GetIntegerValue
in method 'SBStructuredData_GetIntegerValue', argument 1 of type 'lldb::SBStructuredData const *'
OO:SBStructuredData_GetIntegerValue
in method 'SBStructuredData_GetIntegerValue', argument 2 of type 'uint64_t'
Wrong number or type of arguments for overloaded function 'SBStructuredData_GetFloatValue'.
  Possible C/C++ prototypes are:
    lldb::SBStructuredData::GetFloatValue(double) const
    lldb::SBStructuredData::GetFloatValue() const
O:SBStructuredData_GetFloatValue
in method 'SBStructuredData_GetFloatValue', argument 1 of type 'lldb::SBStructuredData const *'
OO:SBStructuredData_GetFloatValue
in method 'SBStructuredData_GetFloatValue', argument 2 of type 'double'
Wrong number or type of arguments for overloaded function 'SBStructuredData_GetBooleanValue'.
  Possible C/C++ prototypes are:
    lldb::SBStructuredData::GetBooleanValue(bool) const
    lldb::SBStructuredData::GetBooleanValue() const
O:SBStructuredData_GetBooleanValue
in method 'SBStructuredData_GetBooleanValue', argument 1 of type 'lldb::SBStructuredData const *'
OO:SBStructuredData_GetBooleanValue
in method 'SBStructuredData_GetBooleanValue', argument 2 of type 'bool'
OO:SBStructuredData_GetStringValue
in method 'SBStructuredData_GetStringValue', argument 1 of type 'lldb::SBStructuredData const *'
OO:SBStructuredData_GetAsJSON
in method 'SBStructuredData_GetAsJSON', argument 1 of type 'lldb::SBStructuredData const *'
in method 'SBStructuredData_GetAsJSON', argument 2 of type 'lldb::SBStream &'
invalid null reference in method 'SBStructuredData_GetAsJSON', argument 2 of type 'lldb::SBStream &'
OO:SBStructuredData_GetDescription
in method 'SBStructuredData_GetDescription', argument 1 of type 'lldb::SBStructuredData const *'
in method 'SBStructuredData_GetDescription', argument 2 of type 'lldb::SBStream &'
invalid null reference in method 'SBStructuredData_GetDescription', argument 2 of type 'lldb::SBStream &'
OO:SBStructuredData_SetFromJSON
in method 'SBStructuredData_SetFromJSON', argument 1 of type 'lldb::SBStructuredData *'
in method 'SBStructuredData_SetFromJSON', argument 2 of type 'lldb::SBStream &'
invalid null reference in method 'SBStructuredData_SetFromJSON', argument 2 of type 'lldb::SBStream &'
O:delete_SBSymbol
in method 'delete_SBSymbol', argument 1 of type 'lldb::SBSymbol *'
Wrong number or type of arguments for overloaded function 'new_SBSymbol'.
  Possible C/C++ prototypes are:
    lldb::SBSymbol::SBSymbol()
    lldb::SBSymbol::SBSymbol(lldb::SBSymbol const &)
:new_SBSymbol
O:new_SBSymbol
in method 'new_SBSymbol', argument 1 of type 'lldb::SBSymbol const &'
invalid null reference in method 'new_SBSymbol', argument 1 of type 'lldb::SBSymbol const &'
O:SBSymbol_IsValid
in method 'SBSymbol_IsValid', argument 1 of type 'lldb::SBSymbol const *'
O:SBSymbol___nonzero__
in method 'SBSymbol___nonzero__', argument 1 of type 'lldb::SBSymbol const *'
O:SBSymbol_GetName
in method 'SBSymbol_GetName', argument 1 of type 'lldb::SBSymbol const *'
O:SBSymbol_GetDisplayName
in method 'SBSymbol_GetDisplayName', argument 1 of type 'lldb::SBSymbol const *'
O:SBSymbol_GetMangledName
in method 'SBSymbol_GetMangledName', argument 1 of type 'lldb::SBSymbol const *'
Wrong number or type of arguments for overloaded function 'SBSymbol_GetInstructions'.
  Possible C/C++ prototypes are:
    lldb::SBSymbol::GetInstructions(lldb::SBTarget)
    lldb::SBSymbol::GetInstructions(lldb::SBTarget,char const *)
OO:SBSymbol_GetInstructions
in method 'SBSymbol_GetInstructions', argument 1 of type 'lldb::SBSymbol *'
in method 'SBSymbol_GetInstructions', argument 2 of type 'lldb::SBTarget'
invalid null reference in method 'SBSymbol_GetInstructions', argument 2 of type 'lldb::SBTarget'
OOO:SBSymbol_GetInstructions
in method 'SBSymbol_GetInstructions', argument 3 of type 'char const *'
O:SBSymbol_GetStartAddress
in method 'SBSymbol_GetStartAddress', argument 1 of type 'lldb::SBSymbol *'
O:SBSymbol_GetEndAddress
in method 'SBSymbol_GetEndAddress', argument 1 of type 'lldb::SBSymbol *'
O:SBSymbol_GetPrologueByteSize
in method 'SBSymbol_GetPrologueByteSize', argument 1 of type 'lldb::SBSymbol *'
O:SBSymbol_GetType
in method 'SBSymbol_GetType', argument 1 of type 'lldb::SBSymbol *'
OO:SBSymbol_GetDescription
in method 'SBSymbol_GetDescription', argument 1 of type 'lldb::SBSymbol *'
in method 'SBSymbol_GetDescription', argument 2 of type 'lldb::SBStream &'
invalid null reference in method 'SBSymbol_GetDescription', argument 2 of type 'lldb::SBStream &'
O:SBSymbol_IsExternal
in method 'SBSymbol_IsExternal', argument 1 of type 'lldb::SBSymbol *'
O:SBSymbol_IsSynthetic
in method 'SBSymbol_IsSynthetic', argument 1 of type 'lldb::SBSymbol *'
OO:SBSymbol___eq__
in method 'SBSymbol___eq__', argument 1 of type 'lldb::SBSymbol const *'
in method 'SBSymbol___eq__', argument 2 of type 'lldb::SBSymbol const &'
invalid null reference in method 'SBSymbol___eq__', argument 2 of type 'lldb::SBSymbol const &'
OO:SBSymbol___ne__
in method 'SBSymbol___ne__', argument 1 of type 'lldb::SBSymbol const *'
in method 'SBSymbol___ne__', argument 2 of type 'lldb::SBSymbol const &'
invalid null reference in method 'SBSymbol___ne__', argument 2 of type 'lldb::SBSymbol const &'
O:SBSymbol___str__
in method 'SBSymbol___str__', argument 1 of type 'lldb::SBSymbol *'
Wrong number or type of arguments for overloaded function 'new_SBSymbolContext'.
  Possible C/C++ prototypes are:
    lldb::SBSymbolContext::SBSymbolContext()
    lldb::SBSymbolContext::SBSymbolContext(lldb::SBSymbolContext const &)
:new_SBSymbolContext
O:new_SBSymbolContext
in method 'new_SBSymbolContext', argument 1 of type 'lldb::SBSymbolContext const &'
invalid null reference in method 'new_SBSymbolContext', argument 1 of type 'lldb::SBSymbolContext const &'
O:delete_SBSymbolContext
in method 'delete_SBSymbolContext', argument 1 of type 'lldb::SBSymbolContext *'
O:SBSymbolContext_IsValid
in method 'SBSymbolContext_IsValid', argument 1 of type 'lldb::SBSymbolContext const *'
O:SBSymbolContext___nonzero__
in method 'SBSymbolContext___nonzero__', argument 1 of type 'lldb::SBSymbolContext const *'
O:SBSymbolContext_GetModule
in method 'SBSymbolContext_GetModule', argument 1 of type 'lldb::SBSymbolContext *'
O:SBSymbolContext_GetCompileUnit
in method 'SBSymbolContext_GetCompileUnit', argument 1 of type 'lldb::SBSymbolContext *'
O:SBSymbolContext_GetFunction
in method 'SBSymbolContext_GetFunction', argument 1 of type 'lldb::SBSymbolContext *'
O:SBSymbolContext_GetBlock
in method 'SBSymbolContext_GetBlock', argument 1 of type 'lldb::SBSymbolContext *'
O:SBSymbolContext_GetLineEntry
in method 'SBSymbolContext_GetLineEntry', argument 1 of type 'lldb::SBSymbolContext *'
O:SBSymbolContext_GetSymbol
in method 'SBSymbolContext_GetSymbol', argument 1 of type 'lldb::SBSymbolContext *'
OO:SBSymbolContext_SetModule
in method 'SBSymbolContext_SetModule', argument 1 of type 'lldb::SBSymbolContext *'
in method 'SBSymbolContext_SetModule', argument 2 of type 'lldb::SBModule'
invalid null reference in method 'SBSymbolContext_SetModule', argument 2 of type 'lldb::SBModule'
OO:SBSymbolContext_SetCompileUnit
in method 'SBSymbolContext_SetCompileUnit', argument 1 of type 'lldb::SBSymbolContext *'
in method 'SBSymbolContext_SetCompileUnit', argument 2 of type 'lldb::SBCompileUnit'
invalid null reference in method 'SBSymbolContext_SetCompileUnit', argument 2 of type 'lldb::SBCompileUnit'
OO:SBSymbolContext_SetFunction
in method 'SBSymbolContext_SetFunction', argument 1 of type 'lldb::SBSymbolContext *'
in method 'SBSymbolContext_SetFunction', argument 2 of type 'lldb::SBFunction'
invalid null reference in method 'SBSymbolContext_SetFunction', argument 2 of type 'lldb::SBFunction'
OO:SBSymbolContext_SetBlock
in method 'SBSymbolContext_SetBlock', argument 1 of type 'lldb::SBSymbolContext *'
in method 'SBSymbolContext_SetBlock', argument 2 of type 'lldb::SBBlock'
invalid null reference in method 'SBSymbolContext_SetBlock', argument 2 of type 'lldb::SBBlock'
OO:SBSymbolContext_SetLineEntry
in method 'SBSymbolContext_SetLineEntry', argument 1 of type 'lldb::SBSymbolContext *'
in method 'SBSymbolContext_SetLineEntry', argument 2 of type 'lldb::SBLineEntry'
invalid null reference in method 'SBSymbolContext_SetLineEntry', argument 2 of type 'lldb::SBLineEntry'
OO:SBSymbolContext_SetSymbol
in method 'SBSymbolContext_SetSymbol', argument 1 of type 'lldb::SBSymbolContext *'
in method 'SBSymbolContext_SetSymbol', argument 2 of type 'lldb::SBSymbol'
invalid null reference in method 'SBSymbolContext_SetSymbol', argument 2 of type 'lldb::SBSymbol'
OOO:SBSymbolContext_GetParentOfInlinedScope
in method 'SBSymbolContext_GetParentOfInlinedScope', argument 1 of type 'lldb::SBSymbolContext const *'
in method 'SBSymbolContext_GetParentOfInlinedScope', argument 2 of type 'lldb::SBAddress const &'
invalid null reference in method 'SBSymbolContext_GetParentOfInlinedScope', argument 2 of type 'lldb::SBAddress const &'
in method 'SBSymbolContext_GetParentOfInlinedScope', argument 3 of type 'lldb::SBAddress &'
invalid null reference in method 'SBSymbolContext_GetParentOfInlinedScope', argument 3 of type 'lldb::SBAddress &'
OO:SBSymbolContext_GetDescription
in method 'SBSymbolContext_GetDescription', argument 1 of type 'lldb::SBSymbolContext *'
in method 'SBSymbolContext_GetDescription', argument 2 of type 'lldb::SBStream &'
invalid null reference in method 'SBSymbolContext_GetDescription', argument 2 of type 'lldb::SBStream &'
O:SBSymbolContext___str__
in method 'SBSymbolContext___str__', argument 1 of type 'lldb::SBSymbolContext *'
Wrong number or type of arguments for overloaded function 'new_SBSymbolContextList'.
  Possible C/C++ prototypes are:
    lldb::SBSymbolContextList::SBSymbolContextList()
    lldb::SBSymbolContextList::SBSymbolContextList(lldb::SBSymbolContextList const &)
:new_SBSymbolContextList
O:new_SBSymbolContextList
in method 'new_SBSymbolContextList', argument 1 of type 'lldb::SBSymbolContextList const &'
invalid null reference in method 'new_SBSymbolContextList', argument 1 of type 'lldb::SBSymbolContextList const &'
O:delete_SBSymbolContextList
in method 'delete_SBSymbolContextList', argument 1 of type 'lldb::SBSymbolContextList *'
O:SBSymbolContextList_IsValid
in method 'SBSymbolContextList_IsValid', argument 1 of type 'lldb::SBSymbolContextList const *'
O:SBSymbolContextList___nonzero__
in method 'SBSymbolContextList___nonzero__', argument 1 of type 'lldb::SBSymbolContextList const *'
O:SBSymbolContextList_GetSize
in method 'SBSymbolContextList_GetSize', argument 1 of type 'lldb::SBSymbolContextList const *'
OO:SBSymbolContextList_GetContextAtIndex
in method 'SBSymbolContextList_GetContextAtIndex', argument 1 of type 'lldb::SBSymbolContextList *'
in method 'SBSymbolContextList_GetContextAtIndex', argument 2 of type 'uint32_t'
Wrong number or type of arguments for overloaded function 'SBSymbolContextList_Append'.
  Possible C/C++ prototypes are:
    lldb::SBSymbolContextList::Append(lldb::SBSymbolContext &)
    lldb::SBSymbolContextList::Append(lldb::SBSymbolContextList &)
OO:SBSymbolContextList_Append
in method 'SBSymbolContextList_Append', argument 1 of type 'lldb::SBSymbolContextList *'
in method 'SBSymbolContextList_Append', argument 2 of type 'lldb::SBSymbolContext &'
invalid null reference in method 'SBSymbolContextList_Append', argument 2 of type 'lldb::SBSymbolContext &'
in method 'SBSymbolContextList_Append', argument 2 of type 'lldb::SBSymbolContextList &'
invalid null reference in method 'SBSymbolContextList_Append', argument 2 of type 'lldb::SBSymbolContextList &'
OO:SBSymbolContextList_GetDescription
in method 'SBSymbolContextList_GetDescription', argument 1 of type 'lldb::SBSymbolContextList *'
in method 'SBSymbolContextList_GetDescription', argument 2 of type 'lldb::SBStream &'
invalid null reference in method 'SBSymbolContextList_GetDescription', argument 2 of type 'lldb::SBStream &'
O:SBSymbolContextList_Clear
in method 'SBSymbolContextList_Clear', argument 1 of type 'lldb::SBSymbolContextList *'
O:SBSymbolContextList___str__
in method 'SBSymbolContextList___str__', argument 1 of type 'lldb::SBSymbolContextList *'
Wrong number or type of arguments for overloaded function 'new_SBTarget'.
  Possible C/C++ prototypes are:
    lldb::SBTarget::SBTarget()
    lldb::SBTarget::SBTarget(lldb::SBTarget const &)
:new_SBTarget
O:new_SBTarget
in method 'new_SBTarget', argument 1 of type 'lldb::SBTarget const &'
invalid null reference in method 'new_SBTarget', argument 1 of type 'lldb::SBTarget const &'
O:delete_SBTarget
in method 'delete_SBTarget', argument 1 of type 'lldb::SBTarget *'
:SBTarget_GetBroadcasterClassName
O:SBTarget_IsValid
in method 'SBTarget_IsValid', argument 1 of type 'lldb::SBTarget const *'
O:SBTarget___nonzero__
in method 'SBTarget___nonzero__', argument 1 of type 'lldb::SBTarget const *'
O:SBTarget_EventIsTargetEvent
in method 'SBTarget_EventIsTargetEvent', argument 1 of type 'lldb::SBEvent const &'
invalid null reference in method 'SBTarget_EventIsTargetEvent', argument 1 of type 'lldb::SBEvent const &'
O:SBTarget_GetTargetFromEvent
in method 'SBTarget_GetTargetFromEvent', argument 1 of type 'lldb::SBEvent const &'
invalid null reference in method 'SBTarget_GetTargetFromEvent', argument 1 of type 'lldb::SBEvent const &'
O:SBTarget_GetNumModulesFromEvent
in method 'SBTarget_GetNumModulesFromEvent', argument 1 of type 'lldb::SBEvent const &'
invalid null reference in method 'SBTarget_GetNumModulesFromEvent', argument 1 of type 'lldb::SBEvent const &'
OO:SBTarget_GetModuleAtIndexFromEvent
in method 'SBTarget_GetModuleAtIndexFromEvent', argument 1 of type 'uint32_t'
in method 'SBTarget_GetModuleAtIndexFromEvent', argument 2 of type 'lldb::SBEvent const &'
invalid null reference in method 'SBTarget_GetModuleAtIndexFromEvent', argument 2 of type 'lldb::SBEvent const &'
O:SBTarget_GetProcess
in method 'SBTarget_GetProcess', argument 1 of type 'lldb::SBTarget *'
O:SBTarget_GetPlatform
in method 'SBTarget_GetPlatform', argument 1 of type 'lldb::SBTarget *'
O:SBTarget_Install
in method 'SBTarget_Install', argument 1 of type 'lldb::SBTarget *'
OOOO:SBTarget_LaunchSimple
in method 'SBTarget_LaunchSimple', argument 1 of type 'lldb::SBTarget *'
in method 'SBTarget_LaunchSimple', argument 4 of type 'char const *'
Wrong number or type of arguments for overloaded function 'SBTarget_Launch'.
  Possible C/C++ prototypes are:
    lldb::SBTarget::Launch(lldb::SBListener &,char const **,char const **,char const *,char const *,char const *,char const *,uint32_t,bool,lldb::SBError &)
    lldb::SBTarget::Launch(lldb::SBLaunchInfo &,lldb::SBError &)
OOO:SBTarget_Launch
in method 'SBTarget_Launch', argument 1 of type 'lldb::SBTarget *'
in method 'SBTarget_Launch', argument 2 of type 'lldb::SBLaunchInfo &'
invalid null reference in method 'SBTarget_Launch', argument 2 of type 'lldb::SBLaunchInfo &'
in method 'SBTarget_Launch', argument 3 of type 'lldb::SBError &'
invalid null reference in method 'SBTarget_Launch', argument 3 of type 'lldb::SBError &'
OOOOOOOOOOO:SBTarget_Launch
in method 'SBTarget_Launch', argument 2 of type 'lldb::SBListener &'
invalid null reference in method 'SBTarget_Launch', argument 2 of type 'lldb::SBListener &'
in method 'SBTarget_Launch', argument 5 of type 'char const *'
in method 'SBTarget_Launch', argument 6 of type 'char const *'
in method 'SBTarget_Launch', argument 7 of type 'char const *'
in method 'SBTarget_Launch', argument 8 of type 'char const *'
in method 'SBTarget_Launch', argument 9 of type 'uint32_t'
in method 'SBTarget_Launch', argument 10 of type 'bool'
in method 'SBTarget_Launch', argument 11 of type 'lldb::SBError &'
invalid null reference in method 'SBTarget_Launch', argument 11 of type 'lldb::SBError &'
Wrong number or type of arguments for overloaded function 'SBTarget_LoadCore'.
  Possible C/C++ prototypes are:
    lldb::SBTarget::LoadCore(char const *)
    lldb::SBTarget::LoadCore(char const *,lldb::SBError &)
OO:SBTarget_LoadCore
in method 'SBTarget_LoadCore', argument 1 of type 'lldb::SBTarget *'
in method 'SBTarget_LoadCore', argument 2 of type 'char const *'
OOO:SBTarget_LoadCore
in method 'SBTarget_LoadCore', argument 3 of type 'lldb::SBError &'
invalid null reference in method 'SBTarget_LoadCore', argument 3 of type 'lldb::SBError &'
OOO:SBTarget_Attach
in method 'SBTarget_Attach', argument 1 of type 'lldb::SBTarget *'
in method 'SBTarget_Attach', argument 2 of type 'lldb::SBAttachInfo &'
invalid null reference in method 'SBTarget_Attach', argument 2 of type 'lldb::SBAttachInfo &'
in method 'SBTarget_Attach', argument 3 of type 'lldb::SBError &'
invalid null reference in method 'SBTarget_Attach', argument 3 of type 'lldb::SBError &'
OOOO:SBTarget_AttachToProcessWithID
in method 'SBTarget_AttachToProcessWithID', argument 1 of type 'lldb::SBTarget *'
in method 'SBTarget_AttachToProcessWithID', argument 2 of type 'lldb::SBListener &'
invalid null reference in method 'SBTarget_AttachToProcessWithID', argument 2 of type 'lldb::SBListener &'
in method 'SBTarget_AttachToProcessWithID', argument 3 of type 'lldb::pid_t'
in method 'SBTarget_AttachToProcessWithID', argument 4 of type 'lldb::SBError &'
invalid null reference in method 'SBTarget_AttachToProcessWithID', argument 4 of type 'lldb::SBError &'
OOOOO:SBTarget_AttachToProcessWithName
in method 'SBTarget_AttachToProcessWithName', argument 1 of type 'lldb::SBTarget *'
in method 'SBTarget_AttachToProcessWithName', argument 2 of type 'lldb::SBListener &'
invalid null reference in method 'SBTarget_AttachToProcessWithName', argument 2 of type 'lldb::SBListener &'
in method 'SBTarget_AttachToProcessWithName', argument 3 of type 'char const *'
in method 'SBTarget_AttachToProcessWithName', argument 4 of type 'bool'
in method 'SBTarget_AttachToProcessWithName', argument 5 of type 'lldb::SBError &'
invalid null reference in method 'SBTarget_AttachToProcessWithName', argument 5 of type 'lldb::SBError &'
OOOOO:SBTarget_ConnectRemote
in method 'SBTarget_ConnectRemote', argument 1 of type 'lldb::SBTarget *'
in method 'SBTarget_ConnectRemote', argument 2 of type 'lldb::SBListener &'
invalid null reference in method 'SBTarget_ConnectRemote', argument 2 of type 'lldb::SBListener &'
in method 'SBTarget_ConnectRemote', argument 3 of type 'char const *'
in method 'SBTarget_ConnectRemote', argument 4 of type 'char const *'
in method 'SBTarget_ConnectRemote', argument 5 of type 'lldb::SBError &'
invalid null reference in method 'SBTarget_ConnectRemote', argument 5 of type 'lldb::SBError &'
O:SBTarget_GetExecutable
in method 'SBTarget_GetExecutable', argument 1 of type 'lldb::SBTarget *'
OOOO:SBTarget_AppendImageSearchPath
in method 'SBTarget_AppendImageSearchPath', argument 1 of type 'lldb::SBTarget *'
in method 'SBTarget_AppendImageSearchPath', argument 2 of type 'char const *'
in method 'SBTarget_AppendImageSearchPath', argument 3 of type 'char const *'
in method 'SBTarget_AppendImageSearchPath', argument 4 of type 'lldb::SBError &'
invalid null reference in method 'SBTarget_AppendImageSearchPath', argument 4 of type 'lldb::SBError &'
Wrong number or type of arguments for overloaded function 'SBTarget_AddModule'.
  Possible C/C++ prototypes are:
    lldb::SBTarget::AddModule(lldb::SBModule &)
    lldb::SBTarget::AddModule(char const *,char const *,char const *)
    lldb::SBTarget::AddModule(char const *,char const *,char const *,char const *)
    lldb::SBTarget::AddModule(lldb::SBModuleSpec const &)
OO:SBTarget_AddModule
in method 'SBTarget_AddModule', argument 1 of type 'lldb::SBTarget *'
in method 'SBTarget_AddModule', argument 2 of type 'lldb::SBModule &'
invalid null reference in method 'SBTarget_AddModule', argument 2 of type 'lldb::SBModule &'
in method 'SBTarget_AddModule', argument 2 of type 'lldb::SBModuleSpec const &'
invalid null reference in method 'SBTarget_AddModule', argument 2 of type 'lldb::SBModuleSpec const &'
OOOO:SBTarget_AddModule
in method 'SBTarget_AddModule', argument 2 of type 'char const *'
in method 'SBTarget_AddModule', argument 3 of type 'char const *'
in method 'SBTarget_AddModule', argument 4 of type 'char const *'
OOOOO:SBTarget_AddModule
in method 'SBTarget_AddModule', argument 5 of type 'char const *'
O:SBTarget_GetNumModules
in method 'SBTarget_GetNumModules', argument 1 of type 'lldb::SBTarget const *'
OO:SBTarget_GetModuleAtIndex
in method 'SBTarget_GetModuleAtIndex', argument 1 of type 'lldb::SBTarget *'
in method 'SBTarget_GetModuleAtIndex', argument 2 of type 'uint32_t'
OO:SBTarget_RemoveModule
in method 'SBTarget_RemoveModule', argument 1 of type 'lldb::SBTarget *'
in method 'SBTarget_RemoveModule', argument 2 of type 'lldb::SBModule'
invalid null reference in method 'SBTarget_RemoveModule', argument 2 of type 'lldb::SBModule'
O:SBTarget_GetDebugger
in method 'SBTarget_GetDebugger', argument 1 of type 'lldb::SBTarget const *'
OO:SBTarget_FindModule
in method 'SBTarget_FindModule', argument 1 of type 'lldb::SBTarget *'
in method 'SBTarget_FindModule', argument 2 of type 'lldb::SBFileSpec const &'
invalid null reference in method 'SBTarget_FindModule', argument 2 of type 'lldb::SBFileSpec const &'
OO:SBTarget_FindCompileUnits
in method 'SBTarget_FindCompileUnits', argument 1 of type 'lldb::SBTarget *'
in method 'SBTarget_FindCompileUnits', argument 2 of type 'lldb::SBFileSpec const &'
invalid null reference in method 'SBTarget_FindCompileUnits', argument 2 of type 'lldb::SBFileSpec const &'
O:SBTarget_GetByteOrder
in method 'SBTarget_GetByteOrder', argument 1 of type 'lldb::SBTarget *'
O:SBTarget_GetAddressByteSize
in method 'SBTarget_GetAddressByteSize', argument 1 of type 'lldb::SBTarget *'
O:SBTarget_GetTriple
in method 'SBTarget_GetTriple', argument 1 of type 'lldb::SBTarget *'
O:SBTarget_GetDataByteSize
in method 'SBTarget_GetDataByteSize', argument 1 of type 'lldb::SBTarget *'
O:SBTarget_GetCodeByteSize
in method 'SBTarget_GetCodeByteSize', argument 1 of type 'lldb::SBTarget *'
OOO:SBTarget_SetSectionLoadAddress
in method 'SBTarget_SetSectionLoadAddress', argument 1 of type 'lldb::SBTarget *'
in method 'SBTarget_SetSectionLoadAddress', argument 2 of type 'lldb::SBSection'
invalid null reference in method 'SBTarget_SetSectionLoadAddress', argument 2 of type 'lldb::SBSection'
in method 'SBTarget_SetSectionLoadAddress', argument 3 of type 'lldb::addr_t'
OO:SBTarget_ClearSectionLoadAddress
in method 'SBTarget_ClearSectionLoadAddress', argument 1 of type 'lldb::SBTarget *'
in method 'SBTarget_ClearSectionLoadAddress', argument 2 of type 'lldb::SBSection'
invalid null reference in method 'SBTarget_ClearSectionLoadAddress', argument 2 of type 'lldb::SBSection'
OOO:SBTarget_SetModuleLoadAddress
in method 'SBTarget_SetModuleLoadAddress', argument 1 of type 'lldb::SBTarget *'
in method 'SBTarget_SetModuleLoadAddress', argument 2 of type 'lldb::SBModule'
invalid null reference in method 'SBTarget_SetModuleLoadAddress', argument 2 of type 'lldb::SBModule'
in method 'SBTarget_SetModuleLoadAddress', argument 3 of type 'int64_t'
OO:SBTarget_ClearModuleLoadAddress
in method 'SBTarget_ClearModuleLoadAddress', argument 1 of type 'lldb::SBTarget *'
in method 'SBTarget_ClearModuleLoadAddress', argument 2 of type 'lldb::SBModule'
invalid null reference in method 'SBTarget_ClearModuleLoadAddress', argument 2 of type 'lldb::SBModule'
Wrong number or type of arguments for overloaded function 'SBTarget_FindFunctions'.
  Possible C/C++ prototypes are:
    lldb::SBTarget::FindFunctions(char const *,uint32_t)
    lldb::SBTarget::FindFunctions(char const *)
OO:SBTarget_FindFunctions
in method 'SBTarget_FindFunctions', argument 1 of type 'lldb::SBTarget *'
in method 'SBTarget_FindFunctions', argument 2 of type 'char const *'
OOO:SBTarget_FindFunctions
in method 'SBTarget_FindFunctions', argument 3 of type 'uint32_t'
OO:SBTarget_FindFirstType
in method 'SBTarget_FindFirstType', argument 1 of type 'lldb::SBTarget *'
in method 'SBTarget_FindFirstType', argument 2 of type 'char const *'
OO:SBTarget_FindTypes
in method 'SBTarget_FindTypes', argument 1 of type 'lldb::SBTarget *'
in method 'SBTarget_FindTypes', argument 2 of type 'char const *'
OO:SBTarget_GetBasicType
in method 'SBTarget_GetBasicType', argument 1 of type 'lldb::SBTarget *'
in method 'SBTarget_GetBasicType', argument 2 of type 'lldb::BasicType'
O:SBTarget_GetSourceManager
in method 'SBTarget_GetSourceManager', argument 1 of type 'lldb::SBTarget *'
OO:SBTarget_FindFirstGlobalVariable
in method 'SBTarget_FindFirstGlobalVariable', argument 1 of type 'lldb::SBTarget *'
in method 'SBTarget_FindFirstGlobalVariable', argument 2 of type 'char const *'
Wrong number or type of arguments for overloaded function 'SBTarget_FindGlobalVariables'.
  Possible C/C++ prototypes are:
    lldb::SBTarget::FindGlobalVariables(char const *,uint32_t)
    lldb::SBTarget::FindGlobalVariables(char const *,uint32_t,lldb::MatchType)
OOO:SBTarget_FindGlobalVariables
in method 'SBTarget_FindGlobalVariables', argument 1 of type 'lldb::SBTarget *'
in method 'SBTarget_FindGlobalVariables', argument 2 of type 'char const *'
in method 'SBTarget_FindGlobalVariables', argument 3 of type 'uint32_t'
OOOO:SBTarget_FindGlobalVariables
in method 'SBTarget_FindGlobalVariables', argument 4 of type 'lldb::MatchType'
OOOO:SBTarget_FindGlobalFunctions
in method 'SBTarget_FindGlobalFunctions', argument 1 of type 'lldb::SBTarget *'
in method 'SBTarget_FindGlobalFunctions', argument 2 of type 'char const *'
in method 'SBTarget_FindGlobalFunctions', argument 3 of type 'uint32_t'
in method 'SBTarget_FindGlobalFunctions', argument 4 of type 'lldb::MatchType'
O:SBTarget_Clear
in method 'SBTarget_Clear', argument 1 of type 'lldb::SBTarget *'
OO:SBTarget_ResolveFileAddress
in method 'SBTarget_ResolveFileAddress', argument 1 of type 'lldb::SBTarget *'
in method 'SBTarget_ResolveFileAddress', argument 2 of type 'lldb::addr_t'
OO:SBTarget_ResolveLoadAddress
in method 'SBTarget_ResolveLoadAddress', argument 1 of type 'lldb::SBTarget *'
in method 'SBTarget_ResolveLoadAddress', argument 2 of type 'lldb::addr_t'
OOO:SBTarget_ResolvePastLoadAddress
in method 'SBTarget_ResolvePastLoadAddress', argument 1 of type 'lldb::SBTarget *'
in method 'SBTarget_ResolvePastLoadAddress', argument 2 of type 'uint32_t'
in method 'SBTarget_ResolvePastLoadAddress', argument 3 of type 'lldb::addr_t'
OOO:SBTarget_ResolveSymbolContextForAddress
in method 'SBTarget_ResolveSymbolContextForAddress', argument 1 of type 'lldb::SBTarget *'
in method 'SBTarget_ResolveSymbolContextForAddress', argument 2 of type 'lldb::SBAddress const &'
invalid null reference in method 'SBTarget_ResolveSymbolContextForAddress', argument 2 of type 'lldb::SBAddress const &'
in method 'SBTarget_ResolveSymbolContextForAddress', argument 3 of type 'uint32_t'
OOOO:SBTarget_ReadMemory
in method 'SBTarget_ReadMemory', argument 1 of type 'lldb::SBTarget *'
in method 'SBTarget_ReadMemory', argument 2 of type 'lldb::SBAddress const'
invalid null reference in method 'SBTarget_ReadMemory', argument 2 of type 'lldb::SBAddress const'
in method 'SBTarget_ReadMemory', argument 5 of type 'lldb::SBError &'
invalid null reference in method 'SBTarget_ReadMemory', argument 5 of type 'lldb::SBError &'
Wrong number or type of arguments for overloaded function 'SBTarget_BreakpointCreateByLocation'.
  Possible C/C++ prototypes are:
    lldb::SBTarget::BreakpointCreateByLocation(char const *,uint32_t)
    lldb::SBTarget::BreakpointCreateByLocation(lldb::SBFileSpec const &,uint32_t)
    lldb::SBTarget::BreakpointCreateByLocation(lldb::SBFileSpec const &,uint32_t,lldb::addr_t)
    lldb::SBTarget::BreakpointCreateByLocation(lldb::SBFileSpec const &,uint32_t,lldb::addr_t,lldb::SBFileSpecList &)
    lldb::SBTarget::BreakpointCreateByLocation(lldb::SBFileSpec const &,uint32_t,uint32_t,lldb::addr_t,lldb::SBFileSpecList &)
OOO:SBTarget_BreakpointCreateByLocation
in method 'SBTarget_BreakpointCreateByLocation', argument 1 of type 'lldb::SBTarget *'
in method 'SBTarget_BreakpointCreateByLocation', argument 2 of type 'lldb::SBFileSpec const &'
invalid null reference in method 'SBTarget_BreakpointCreateByLocation', argument 2 of type 'lldb::SBFileSpec const &'
in method 'SBTarget_BreakpointCreateByLocation', argument 3 of type 'uint32_t'
in method 'SBTarget_BreakpointCreateByLocation', argument 2 of type 'char const *'
OOOO:SBTarget_BreakpointCreateByLocation
in method 'SBTarget_BreakpointCreateByLocation', argument 4 of type 'lldb::addr_t'
OOOOO:SBTarget_BreakpointCreateByLocation
in method 'SBTarget_BreakpointCreateByLocation', argument 5 of type 'lldb::SBFileSpecList &'
invalid null reference in method 'SBTarget_BreakpointCreateByLocation', argument 5 of type 'lldb::SBFileSpecList &'
OOOOOO:SBTarget_BreakpointCreateByLocation
in method 'SBTarget_BreakpointCreateByLocation', argument 4 of type 'uint32_t'
in method 'SBTarget_BreakpointCreateByLocation', argument 5 of type 'lldb::addr_t'
in method 'SBTarget_BreakpointCreateByLocation', argument 6 of type 'lldb::SBFileSpecList &'
invalid null reference in method 'SBTarget_BreakpointCreateByLocation', argument 6 of type 'lldb::SBFileSpecList &'
Wrong number or type of arguments for overloaded function 'SBTarget_BreakpointCreateByName'.
  Possible C/C++ prototypes are:
    lldb::SBTarget::BreakpointCreateByName(char const *,char const *)
    lldb::SBTarget::BreakpointCreateByName(char const *)
    lldb::SBTarget::BreakpointCreateByName(char const *,uint32_t,lldb::SBFileSpecList const &,lldb::SBFileSpecList const &)
    lldb::SBTarget::BreakpointCreateByName(char const *,uint32_t,lldb::LanguageType,lldb::SBFileSpecList const &,lldb::SBFileSpecList const &)
OO:SBTarget_BreakpointCreateByName
in method 'SBTarget_BreakpointCreateByName', argument 1 of type 'lldb::SBTarget *'
in method 'SBTarget_BreakpointCreateByName', argument 2 of type 'char const *'
OOO:SBTarget_BreakpointCreateByName
in method 'SBTarget_BreakpointCreateByName', argument 3 of type 'char const *'
OOOOO:SBTarget_BreakpointCreateByName
in method 'SBTarget_BreakpointCreateByName', argument 3 of type 'uint32_t'
in method 'SBTarget_BreakpointCreateByName', argument 4 of type 'lldb::SBFileSpecList const &'
invalid null reference in method 'SBTarget_BreakpointCreateByName', argument 4 of type 'lldb::SBFileSpecList const &'
in method 'SBTarget_BreakpointCreateByName', argument 5 of type 'lldb::SBFileSpecList const &'
invalid null reference in method 'SBTarget_BreakpointCreateByName', argument 5 of type 'lldb::SBFileSpecList const &'
OOOOOO:SBTarget_BreakpointCreateByName
in method 'SBTarget_BreakpointCreateByName', argument 4 of type 'lldb::LanguageType'
in method 'SBTarget_BreakpointCreateByName', argument 6 of type 'lldb::SBFileSpecList const &'
invalid null reference in method 'SBTarget_BreakpointCreateByName', argument 6 of type 'lldb::SBFileSpecList const &'
Wrong number or type of arguments for overloaded function 'SBTarget_BreakpointCreateByNames'.
  Possible C/C++ prototypes are:
    lldb::SBTarget::BreakpointCreateByNames(char const **,uint32_t,uint32_t,lldb::SBFileSpecList const &,lldb::SBFileSpecList const &)
    lldb::SBTarget::BreakpointCreateByNames(char const **,uint32_t,uint32_t,lldb::LanguageType,lldb::SBFileSpecList const &,lldb::SBFileSpecList const &)
    lldb::SBTarget::BreakpointCreateByNames(char const **,uint32_t,uint32_t,lldb::LanguageType,lldb::addr_t,lldb::SBFileSpecList const &,lldb::SBFileSpecList const &)
OOOOO:SBTarget_BreakpointCreateByNames
in method 'SBTarget_BreakpointCreateByNames', argument 1 of type 'lldb::SBTarget *'
list must contain strings and blubby
in method 'SBTarget_BreakpointCreateByNames', argument 4 of type 'uint32_t'
in method 'SBTarget_BreakpointCreateByNames', argument 5 of type 'lldb::SBFileSpecList const &'
invalid null reference in method 'SBTarget_BreakpointCreateByNames', argument 5 of type 'lldb::SBFileSpecList const &'
in method 'SBTarget_BreakpointCreateByNames', argument 6 of type 'lldb::SBFileSpecList const &'
invalid null reference in method 'SBTarget_BreakpointCreateByNames', argument 6 of type 'lldb::SBFileSpecList const &'
OOOOOO:SBTarget_BreakpointCreateByNames
in method 'SBTarget_BreakpointCreateByNames', argument 5 of type 'lldb::LanguageType'
in method 'SBTarget_BreakpointCreateByNames', argument 7 of type 'lldb::SBFileSpecList const &'
invalid null reference in method 'SBTarget_BreakpointCreateByNames', argument 7 of type 'lldb::SBFileSpecList const &'
OOOOOOO:SBTarget_BreakpointCreateByNames
in method 'SBTarget_BreakpointCreateByNames', argument 6 of type 'lldb::addr_t'
in method 'SBTarget_BreakpointCreateByNames', argument 8 of type 'lldb::SBFileSpecList const &'
invalid null reference in method 'SBTarget_BreakpointCreateByNames', argument 8 of type 'lldb::SBFileSpecList const &'
Wrong number or type of arguments for overloaded function 'SBTarget_BreakpointCreateByRegex'.
  Possible C/C++ prototypes are:
    lldb::SBTarget::BreakpointCreateByRegex(char const *,char const *)
    lldb::SBTarget::BreakpointCreateByRegex(char const *)
    lldb::SBTarget::BreakpointCreateByRegex(char const *,lldb::LanguageType,lldb::SBFileSpecList const &,lldb::SBFileSpecList const &)
OO:SBTarget_BreakpointCreateByRegex
in method 'SBTarget_BreakpointCreateByRegex', argument 1 of type 'lldb::SBTarget *'
in method 'SBTarget_BreakpointCreateByRegex', argument 2 of type 'char const *'
OOO:SBTarget_BreakpointCreateByRegex
in method 'SBTarget_BreakpointCreateByRegex', argument 3 of type 'char const *'
OOOOO:SBTarget_BreakpointCreateByRegex
in method 'SBTarget_BreakpointCreateByRegex', argument 3 of type 'lldb::LanguageType'
in method 'SBTarget_BreakpointCreateByRegex', argument 4 of type 'lldb::SBFileSpecList const &'
invalid null reference in method 'SBTarget_BreakpointCreateByRegex', argument 4 of type 'lldb::SBFileSpecList const &'
in method 'SBTarget_BreakpointCreateByRegex', argument 5 of type 'lldb::SBFileSpecList const &'
invalid null reference in method 'SBTarget_BreakpointCreateByRegex', argument 5 of type 'lldb::SBFileSpecList const &'
Wrong number or type of arguments for overloaded function 'SBTarget_BreakpointCreateBySourceRegex'.
  Possible C/C++ prototypes are:
    lldb::SBTarget::BreakpointCreateBySourceRegex(char const *,lldb::SBFileSpec const &,char const *)
    lldb::SBTarget::BreakpointCreateBySourceRegex(char const *,lldb::SBFileSpec const &)
    lldb::SBTarget::BreakpointCreateBySourceRegex(char const *,lldb::SBFileSpecList const &,lldb::SBFileSpecList const &)
    lldb::SBTarget::BreakpointCreateBySourceRegex(char const *,lldb::SBFileSpecList const &,lldb::SBFileSpecList const &,lldb::SBStringList const &)
OOO:SBTarget_BreakpointCreateBySourceRegex
in method 'SBTarget_BreakpointCreateBySourceRegex', argument 1 of type 'lldb::SBTarget *'
in method 'SBTarget_BreakpointCreateBySourceRegex', argument 2 of type 'char const *'
in method 'SBTarget_BreakpointCreateBySourceRegex', argument 3 of type 'lldb::SBFileSpec const &'
invalid null reference in method 'SBTarget_BreakpointCreateBySourceRegex', argument 3 of type 'lldb::SBFileSpec const &'
OOOO:SBTarget_BreakpointCreateBySourceRegex
in method 'SBTarget_BreakpointCreateBySourceRegex', argument 4 of type 'char const *'
in method 'SBTarget_BreakpointCreateBySourceRegex', argument 3 of type 'lldb::SBFileSpecList const &'
invalid null reference in method 'SBTarget_BreakpointCreateBySourceRegex', argument 3 of type 'lldb::SBFileSpecList const &'
in method 'SBTarget_BreakpointCreateBySourceRegex', argument 4 of type 'lldb::SBFileSpecList const &'
invalid null reference in method 'SBTarget_BreakpointCreateBySourceRegex', argument 4 of type 'lldb::SBFileSpecList const &'
OOOOO:SBTarget_BreakpointCreateBySourceRegex
in method 'SBTarget_BreakpointCreateBySourceRegex', argument 5 of type 'lldb::SBStringList const &'
invalid null reference in method 'SBTarget_BreakpointCreateBySourceRegex', argument 5 of type 'lldb::SBStringList const &'
Wrong number or type of arguments for overloaded function 'SBTarget_BreakpointCreateForException'.
  Possible C/C++ prototypes are:
    lldb::SBTarget::BreakpointCreateForException(lldb::LanguageType,bool,bool)
    lldb::SBTarget::BreakpointCreateForException(lldb::LanguageType,bool,bool,lldb::SBStringList &)
OOOO:SBTarget_BreakpointCreateForException
in method 'SBTarget_BreakpointCreateForException', argument 1 of type 'lldb::SBTarget *'
in method 'SBTarget_BreakpointCreateForException', argument 2 of type 'lldb::LanguageType'
in method 'SBTarget_BreakpointCreateForException', argument 3 of type 'bool'
in method 'SBTarget_BreakpointCreateForException', argument 4 of type 'bool'
OOOOO:SBTarget_BreakpointCreateForException
in method 'SBTarget_BreakpointCreateForException', argument 5 of type 'lldb::SBStringList &'
invalid null reference in method 'SBTarget_BreakpointCreateForException', argument 5 of type 'lldb::SBStringList &'
OO:SBTarget_BreakpointCreateByAddress
in method 'SBTarget_BreakpointCreateByAddress', argument 1 of type 'lldb::SBTarget *'
in method 'SBTarget_BreakpointCreateByAddress', argument 2 of type 'lldb::addr_t'
OO:SBTarget_BreakpointCreateBySBAddress
in method 'SBTarget_BreakpointCreateBySBAddress', argument 1 of type 'lldb::SBTarget *'
in method 'SBTarget_BreakpointCreateBySBAddress', argument 2 of type 'lldb::SBAddress &'
invalid null reference in method 'SBTarget_BreakpointCreateBySBAddress', argument 2 of type 'lldb::SBAddress &'
Wrong number or type of arguments for overloaded function 'SBTarget_BreakpointCreateFromScript'.
  Possible C/C++ prototypes are:
    lldb::SBTarget::BreakpointCreateFromScript(char const *,lldb::SBStructuredData &,lldb::SBFileSpecList const &,lldb::SBFileSpecList const &,bool)
    lldb::SBTarget::BreakpointCreateFromScript(char const *,lldb::SBStructuredData &,lldb::SBFileSpecList const &,lldb::SBFileSpecList const &)
OOOOO:SBTarget_BreakpointCreateFromScript
in method 'SBTarget_BreakpointCreateFromScript', argument 1 of type 'lldb::SBTarget *'
in method 'SBTarget_BreakpointCreateFromScript', argument 2 of type 'char const *'
in method 'SBTarget_BreakpointCreateFromScript', argument 3 of type 'lldb::SBStructuredData &'
invalid null reference in method 'SBTarget_BreakpointCreateFromScript', argument 3 of type 'lldb::SBStructuredData &'
in method 'SBTarget_BreakpointCreateFromScript', argument 4 of type 'lldb::SBFileSpecList const &'
invalid null reference in method 'SBTarget_BreakpointCreateFromScript', argument 4 of type 'lldb::SBFileSpecList const &'
in method 'SBTarget_BreakpointCreateFromScript', argument 5 of type 'lldb::SBFileSpecList const &'
invalid null reference in method 'SBTarget_BreakpointCreateFromScript', argument 5 of type 'lldb::SBFileSpecList const &'
OOOOOO:SBTarget_BreakpointCreateFromScript
in method 'SBTarget_BreakpointCreateFromScript', argument 6 of type 'bool'
O:SBTarget_GetNumBreakpoints
in method 'SBTarget_GetNumBreakpoints', argument 1 of type 'lldb::SBTarget const *'
OO:SBTarget_GetBreakpointAtIndex
in method 'SBTarget_GetBreakpointAtIndex', argument 1 of type 'lldb::SBTarget const *'
in method 'SBTarget_GetBreakpointAtIndex', argument 2 of type 'uint32_t'
OO:SBTarget_BreakpointDelete
in method 'SBTarget_BreakpointDelete', argument 1 of type 'lldb::SBTarget *'
in method 'SBTarget_BreakpointDelete', argument 2 of type 'lldb::break_id_t'
OO:SBTarget_FindBreakpointByID
in method 'SBTarget_FindBreakpointByID', argument 1 of type 'lldb::SBTarget *'
in method 'SBTarget_FindBreakpointByID', argument 2 of type 'lldb::break_id_t'
OOO:SBTarget_FindBreakpointsByName
in method 'SBTarget_FindBreakpointsByName', argument 1 of type 'lldb::SBTarget *'
in method 'SBTarget_FindBreakpointsByName', argument 2 of type 'char const *'
in method 'SBTarget_FindBreakpointsByName', argument 3 of type 'lldb::SBBreakpointList &'
invalid null reference in method 'SBTarget_FindBreakpointsByName', argument 3 of type 'lldb::SBBreakpointList &'
OO:SBTarget_DeleteBreakpointName
in method 'SBTarget_DeleteBreakpointName', argument 1 of type 'lldb::SBTarget *'
in method 'SBTarget_DeleteBreakpointName', argument 2 of type 'char const *'
OO:SBTarget_GetBreakpointNames
in method 'SBTarget_GetBreakpointNames', argument 1 of type 'lldb::SBTarget *'
in method 'SBTarget_GetBreakpointNames', argument 2 of type 'lldb::SBStringList &'
invalid null reference in method 'SBTarget_GetBreakpointNames', argument 2 of type 'lldb::SBStringList &'
O:SBTarget_EnableAllBreakpoints
in method 'SBTarget_EnableAllBreakpoints', argument 1 of type 'lldb::SBTarget *'
O:SBTarget_DisableAllBreakpoints
in method 'SBTarget_DisableAllBreakpoints', argument 1 of type 'lldb::SBTarget *'
O:SBTarget_DeleteAllBreakpoints
in method 'SBTarget_DeleteAllBreakpoints', argument 1 of type 'lldb::SBTarget *'
Wrong number or type of arguments for overloaded function 'SBTarget_BreakpointsCreateFromFile'.
  Possible C/C++ prototypes are:
    lldb::SBTarget::BreakpointsCreateFromFile(lldb::SBFileSpec &,lldb::SBBreakpointList &)
    lldb::SBTarget::BreakpointsCreateFromFile(lldb::SBFileSpec &,lldb::SBStringList &,lldb::SBBreakpointList &)
OOO:SBTarget_BreakpointsCreateFromFile
in method 'SBTarget_BreakpointsCreateFromFile', argument 1 of type 'lldb::SBTarget *'
in method 'SBTarget_BreakpointsCreateFromFile', argument 2 of type 'lldb::SBFileSpec &'
invalid null reference in method 'SBTarget_BreakpointsCreateFromFile', argument 2 of type 'lldb::SBFileSpec &'
in method 'SBTarget_BreakpointsCreateFromFile', argument 3 of type 'lldb::SBBreakpointList &'
invalid null reference in method 'SBTarget_BreakpointsCreateFromFile', argument 3 of type 'lldb::SBBreakpointList &'
OOOO:SBTarget_BreakpointsCreateFromFile
in method 'SBTarget_BreakpointsCreateFromFile', argument 3 of type 'lldb::SBStringList &'
invalid null reference in method 'SBTarget_BreakpointsCreateFromFile', argument 3 of type 'lldb::SBStringList &'
in method 'SBTarget_BreakpointsCreateFromFile', argument 4 of type 'lldb::SBBreakpointList &'
invalid null reference in method 'SBTarget_BreakpointsCreateFromFile', argument 4 of type 'lldb::SBBreakpointList &'
Wrong number or type of arguments for overloaded function 'SBTarget_BreakpointsWriteToFile'.
  Possible C/C++ prototypes are:
    lldb::SBTarget::BreakpointsWriteToFile(lldb::SBFileSpec &)
    lldb::SBTarget::BreakpointsWriteToFile(lldb::SBFileSpec &,lldb::SBBreakpointList &,bool)
    lldb::SBTarget::BreakpointsWriteToFile(lldb::SBFileSpec &,lldb::SBBreakpointList &)
OO:SBTarget_BreakpointsWriteToFile
in method 'SBTarget_BreakpointsWriteToFile', argument 1 of type 'lldb::SBTarget *'
in method 'SBTarget_BreakpointsWriteToFile', argument 2 of type 'lldb::SBFileSpec &'
invalid null reference in method 'SBTarget_BreakpointsWriteToFile', argument 2 of type 'lldb::SBFileSpec &'
OOO:SBTarget_BreakpointsWriteToFile
in method 'SBTarget_BreakpointsWriteToFile', argument 3 of type 'lldb::SBBreakpointList &'
invalid null reference in method 'SBTarget_BreakpointsWriteToFile', argument 3 of type 'lldb::SBBreakpointList &'
OOOO:SBTarget_BreakpointsWriteToFile
in method 'SBTarget_BreakpointsWriteToFile', argument 4 of type 'bool'
O:SBTarget_GetNumWatchpoints
in method 'SBTarget_GetNumWatchpoints', argument 1 of type 'lldb::SBTarget const *'
OO:SBTarget_GetWatchpointAtIndex
in method 'SBTarget_GetWatchpointAtIndex', argument 1 of type 'lldb::SBTarget const *'
in method 'SBTarget_GetWatchpointAtIndex', argument 2 of type 'uint32_t'
OO:SBTarget_DeleteWatchpoint
in method 'SBTarget_DeleteWatchpoint', argument 1 of type 'lldb::SBTarget *'
in method 'SBTarget_DeleteWatchpoint', argument 2 of type 'lldb::watch_id_t'
OO:SBTarget_FindWatchpointByID
in method 'SBTarget_FindWatchpointByID', argument 1 of type 'lldb::SBTarget *'
in method 'SBTarget_FindWatchpointByID', argument 2 of type 'lldb::watch_id_t'
O:SBTarget_EnableAllWatchpoints
in method 'SBTarget_EnableAllWatchpoints', argument 1 of type 'lldb::SBTarget *'
O:SBTarget_DisableAllWatchpoints
in method 'SBTarget_DisableAllWatchpoints', argument 1 of type 'lldb::SBTarget *'
O:SBTarget_DeleteAllWatchpoints
in method 'SBTarget_DeleteAllWatchpoints', argument 1 of type 'lldb::SBTarget *'
OOOOOO:SBTarget_WatchAddress
in method 'SBTarget_WatchAddress', argument 1 of type 'lldb::SBTarget *'
in method 'SBTarget_WatchAddress', argument 2 of type 'lldb::addr_t'
in method 'SBTarget_WatchAddress', argument 3 of type 'size_t'
in method 'SBTarget_WatchAddress', argument 4 of type 'bool'
in method 'SBTarget_WatchAddress', argument 5 of type 'bool'
in method 'SBTarget_WatchAddress', argument 6 of type 'lldb::SBError &'
invalid null reference in method 'SBTarget_WatchAddress', argument 6 of type 'lldb::SBError &'
O:SBTarget_GetBroadcaster
in method 'SBTarget_GetBroadcaster', argument 1 of type 'lldb::SBTarget const *'
OOOO:SBTarget_CreateValueFromAddress
in method 'SBTarget_CreateValueFromAddress', argument 1 of type 'lldb::SBTarget *'
in method 'SBTarget_CreateValueFromAddress', argument 2 of type 'char const *'
in method 'SBTarget_CreateValueFromAddress', argument 3 of type 'lldb::SBAddress'
invalid null reference in method 'SBTarget_CreateValueFromAddress', argument 3 of type 'lldb::SBAddress'
in method 'SBTarget_CreateValueFromAddress', argument 4 of type 'lldb::SBType'
invalid null reference in method 'SBTarget_CreateValueFromAddress', argument 4 of type 'lldb::SBType'
OOOO:SBTarget_CreateValueFromData
in method 'SBTarget_CreateValueFromData', argument 1 of type 'lldb::SBTarget *'
in method 'SBTarget_CreateValueFromData', argument 2 of type 'char const *'
in method 'SBTarget_CreateValueFromData', argument 3 of type 'lldb::SBData'
invalid null reference in method 'SBTarget_CreateValueFromData', argument 3 of type 'lldb::SBData'
in method 'SBTarget_CreateValueFromData', argument 4 of type 'lldb::SBType'
invalid null reference in method 'SBTarget_CreateValueFromData', argument 4 of type 'lldb::SBType'
OOO:SBTarget_CreateValueFromExpression
in method 'SBTarget_CreateValueFromExpression', argument 1 of type 'lldb::SBTarget *'
in method 'SBTarget_CreateValueFromExpression', argument 2 of type 'char const *'
in method 'SBTarget_CreateValueFromExpression', argument 3 of type 'char const *'
Wrong number or type of arguments for overloaded function 'SBTarget_ReadInstructions'.
  Possible C/C++ prototypes are:
    lldb::SBTarget::ReadInstructions(lldb::SBAddress,uint32_t)
    lldb::SBTarget::ReadInstructions(lldb::SBAddress,uint32_t,char const *)
OOO:SBTarget_ReadInstructions
in method 'SBTarget_ReadInstructions', argument 1 of type 'lldb::SBTarget *'
in method 'SBTarget_ReadInstructions', argument 2 of type 'lldb::SBAddress'
invalid null reference in method 'SBTarget_ReadInstructions', argument 2 of type 'lldb::SBAddress'
in method 'SBTarget_ReadInstructions', argument 3 of type 'uint32_t'
OOOO:SBTarget_ReadInstructions
in method 'SBTarget_ReadInstructions', argument 4 of type 'char const *'
OOO:SBTarget_GetInstructions
in method 'SBTarget_GetInstructions', argument 1 of type 'lldb::SBTarget *'
in method 'SBTarget_GetInstructions', argument 2 of type 'lldb::SBAddress'
invalid null reference in method 'SBTarget_GetInstructions', argument 2 of type 'lldb::SBAddress'
OOOO:SBTarget_GetInstructionsWithFlavor
in method 'SBTarget_GetInstructionsWithFlavor', argument 1 of type 'lldb::SBTarget *'
in method 'SBTarget_GetInstructionsWithFlavor', argument 2 of type 'lldb::SBAddress'
invalid null reference in method 'SBTarget_GetInstructionsWithFlavor', argument 2 of type 'lldb::SBAddress'
in method 'SBTarget_GetInstructionsWithFlavor', argument 3 of type 'char const *'
Wrong number or type of arguments for overloaded function 'SBTarget_FindSymbols'.
  Possible C/C++ prototypes are:
    lldb::SBTarget::FindSymbols(char const *,lldb::SymbolType)
    lldb::SBTarget::FindSymbols(char const *)
OO:SBTarget_FindSymbols
in method 'SBTarget_FindSymbols', argument 1 of type 'lldb::SBTarget *'
in method 'SBTarget_FindSymbols', argument 2 of type 'char const *'
OOO:SBTarget_FindSymbols
in method 'SBTarget_FindSymbols', argument 3 of type 'lldb::SymbolType'
OOO:SBTarget_GetDescription
in method 'SBTarget_GetDescription', argument 1 of type 'lldb::SBTarget *'
in method 'SBTarget_GetDescription', argument 2 of type 'lldb::SBStream &'
invalid null reference in method 'SBTarget_GetDescription', argument 2 of type 'lldb::SBStream &'
in method 'SBTarget_GetDescription', argument 3 of type 'lldb::DescriptionLevel'
O:SBTarget_GetStackRedZoneSize
in method 'SBTarget_GetStackRedZoneSize', argument 1 of type 'lldb::SBTarget *'
O:SBTarget_GetLaunchInfo
in method 'SBTarget_GetLaunchInfo', argument 1 of type 'lldb::SBTarget const *'
OO:SBTarget_SetLaunchInfo
in method 'SBTarget_SetLaunchInfo', argument 1 of type 'lldb::SBTarget *'
in method 'SBTarget_SetLaunchInfo', argument 2 of type 'lldb::SBLaunchInfo const &'
invalid null reference in method 'SBTarget_SetLaunchInfo', argument 2 of type 'lldb::SBLaunchInfo const &'
OO:SBTarget_SetCollectingStats
in method 'SBTarget_SetCollectingStats', argument 1 of type 'lldb::SBTarget *'
in method 'SBTarget_SetCollectingStats', argument 2 of type 'bool'
O:SBTarget_GetCollectingStats
in method 'SBTarget_GetCollectingStats', argument 1 of type 'lldb::SBTarget *'
O:SBTarget_GetStatistics
in method 'SBTarget_GetStatistics', argument 1 of type 'lldb::SBTarget *'
OO:SBTarget___eq__
in method 'SBTarget___eq__', argument 1 of type 'lldb::SBTarget const *'
in method 'SBTarget___eq__', argument 2 of type 'lldb::SBTarget const &'
invalid null reference in method 'SBTarget___eq__', argument 2 of type 'lldb::SBTarget const &'
OO:SBTarget___ne__
in method 'SBTarget___ne__', argument 1 of type 'lldb::SBTarget const *'
in method 'SBTarget___ne__', argument 2 of type 'lldb::SBTarget const &'
invalid null reference in method 'SBTarget___ne__', argument 2 of type 'lldb::SBTarget const &'
Wrong number or type of arguments for overloaded function 'SBTarget_EvaluateExpression'.
  Possible C/C++ prototypes are:
    lldb::SBTarget::EvaluateExpression(char const *)
    lldb::SBTarget::EvaluateExpression(char const *,lldb::SBExpressionOptions const &)
OO:SBTarget_EvaluateExpression
in method 'SBTarget_EvaluateExpression', argument 1 of type 'lldb::SBTarget *'
in method 'SBTarget_EvaluateExpression', argument 2 of type 'char const *'
OOO:SBTarget_EvaluateExpression
in method 'SBTarget_EvaluateExpression', argument 3 of type 'lldb::SBExpressionOptions const &'
invalid null reference in method 'SBTarget_EvaluateExpression', argument 3 of type 'lldb::SBExpressionOptions const &'
O:SBTarget___str__
in method 'SBTarget___str__', argument 1 of type 'lldb::SBTarget *'
Wrong number or type of arguments for overloaded function 'new_SBThread'.
  Possible C/C++ prototypes are:
    lldb::SBThread::SBThread()
    lldb::SBThread::SBThread(lldb::SBThread const &)
:new_SBThread
O:new_SBThread
in method 'new_SBThread', argument 1 of type 'lldb::SBThread const &'
invalid null reference in method 'new_SBThread', argument 1 of type 'lldb::SBThread const &'
O:delete_SBThread
in method 'delete_SBThread', argument 1 of type 'lldb::SBThread *'
:SBThread_GetBroadcasterClassName
O:SBThread_EventIsThreadEvent
in method 'SBThread_EventIsThreadEvent', argument 1 of type 'lldb::SBEvent const &'
invalid null reference in method 'SBThread_EventIsThreadEvent', argument 1 of type 'lldb::SBEvent const &'
O:SBThread_GetStackFrameFromEvent
in method 'SBThread_GetStackFrameFromEvent', argument 1 of type 'lldb::SBEvent const &'
invalid null reference in method 'SBThread_GetStackFrameFromEvent', argument 1 of type 'lldb::SBEvent const &'
O:SBThread_GetThreadFromEvent
in method 'SBThread_GetThreadFromEvent', argument 1 of type 'lldb::SBEvent const &'
invalid null reference in method 'SBThread_GetThreadFromEvent', argument 1 of type 'lldb::SBEvent const &'
O:SBThread_IsValid
in method 'SBThread_IsValid', argument 1 of type 'lldb::SBThread const *'
O:SBThread___nonzero__
in method 'SBThread___nonzero__', argument 1 of type 'lldb::SBThread const *'
O:SBThread_Clear
in method 'SBThread_Clear', argument 1 of type 'lldb::SBThread *'
O:SBThread_GetStopReason
in method 'SBThread_GetStopReason', argument 1 of type 'lldb::SBThread *'
O:SBThread_GetStopReasonDataCount
in method 'SBThread_GetStopReasonDataCount', argument 1 of type 'lldb::SBThread *'
OO:SBThread_GetStopReasonDataAtIndex
in method 'SBThread_GetStopReasonDataAtIndex', argument 1 of type 'lldb::SBThread *'
in method 'SBThread_GetStopReasonDataAtIndex', argument 2 of type 'uint32_t'
OO:SBThread_GetStopReasonExtendedInfoAsJSON
in method 'SBThread_GetStopReasonExtendedInfoAsJSON', argument 1 of type 'lldb::SBThread *'
in method 'SBThread_GetStopReasonExtendedInfoAsJSON', argument 2 of type 'lldb::SBStream &'
invalid null reference in method 'SBThread_GetStopReasonExtendedInfoAsJSON', argument 2 of type 'lldb::SBStream &'
OO:SBThread_GetStopReasonExtendedBacktraces
in method 'SBThread_GetStopReasonExtendedBacktraces', argument 1 of type 'lldb::SBThread *'
in method 'SBThread_GetStopReasonExtendedBacktraces', argument 2 of type 'lldb::InstrumentationRuntimeType'
OO:SBThread_GetStopDescription
in method 'SBThread_GetStopDescription', argument 1 of type 'lldb::SBThread *'
O:SBThread_GetStopReturnValue
in method 'SBThread_GetStopReturnValue', argument 1 of type 'lldb::SBThread *'
O:SBThread_GetStopErrorValue
in method 'SBThread_GetStopErrorValue', argument 1 of type 'lldb::SBThread *'
O:SBThread_GetThreadID
in method 'SBThread_GetThreadID', argument 1 of type 'lldb::SBThread const *'
O:SBThread_GetIndexID
in method 'SBThread_GetIndexID', argument 1 of type 'lldb::SBThread const *'
O:SBThread_GetName
in method 'SBThread_GetName', argument 1 of type 'lldb::SBThread const *'
O:SBThread_GetQueueName
in method 'SBThread_GetQueueName', argument 1 of type 'lldb::SBThread const *'
O:SBThread_GetQueueID
in method 'SBThread_GetQueueID', argument 1 of type 'lldb::SBThread const *'
OOO:SBThread_GetInfoItemByPathAsString
in method 'SBThread_GetInfoItemByPathAsString', argument 1 of type 'lldb::SBThread *'
in method 'SBThread_GetInfoItemByPathAsString', argument 2 of type 'char const *'
in method 'SBThread_GetInfoItemByPathAsString', argument 3 of type 'lldb::SBStream &'
invalid null reference in method 'SBThread_GetInfoItemByPathAsString', argument 3 of type 'lldb::SBStream &'
O:SBThread_GetQueue
in method 'SBThread_GetQueue', argument 1 of type 'lldb::SBThread const *'
Wrong number or type of arguments for overloaded function 'SBThread_StepOver'.
  Possible C/C++ prototypes are:
    lldb::SBThread::StepOver(lldb::RunMode)
    lldb::SBThread::StepOver()
    lldb::SBThread::StepOver(lldb::RunMode,lldb::SBError &)
O:SBThread_StepOver
in method 'SBThread_StepOver', argument 1 of type 'lldb::SBThread *'
OO:SBThread_StepOver
in method 'SBThread_StepOver', argument 2 of type 'lldb::RunMode'
OOO:SBThread_StepOver
in method 'SBThread_StepOver', argument 3 of type 'lldb::SBError &'
invalid null reference in method 'SBThread_StepOver', argument 3 of type 'lldb::SBError &'
Wrong number or type of arguments for overloaded function 'SBThread_StepInto'.
  Possible C/C++ prototypes are:
    lldb::SBThread::StepInto(lldb::RunMode)
    lldb::SBThread::StepInto()
    lldb::SBThread::StepInto(char const *,lldb::RunMode)
    lldb::SBThread::StepInto(char const *)
    lldb::SBThread::StepInto(char const *,uint32_t,lldb::SBError &,lldb::RunMode)
    lldb::SBThread::StepInto(char const *,uint32_t,lldb::SBError &)
O:SBThread_StepInto
in method 'SBThread_StepInto', argument 1 of type 'lldb::SBThread *'
OO:SBThread_StepInto
in method 'SBThread_StepInto', argument 2 of type 'lldb::RunMode'
in method 'SBThread_StepInto', argument 2 of type 'char const *'
OOO:SBThread_StepInto
in method 'SBThread_StepInto', argument 3 of type 'lldb::RunMode'
OOOO:SBThread_StepInto
in method 'SBThread_StepInto', argument 3 of type 'uint32_t'
in method 'SBThread_StepInto', argument 4 of type 'lldb::SBError &'
invalid null reference in method 'SBThread_StepInto', argument 4 of type 'lldb::SBError &'
OOOOO:SBThread_StepInto
in method 'SBThread_StepInto', argument 5 of type 'lldb::RunMode'
Wrong number or type of arguments for overloaded function 'SBThread_StepOut'.
  Possible C/C++ prototypes are:
    lldb::SBThread::StepOut()
    lldb::SBThread::StepOut(lldb::SBError &)
O:SBThread_StepOut
in method 'SBThread_StepOut', argument 1 of type 'lldb::SBThread *'
OO:SBThread_StepOut
in method 'SBThread_StepOut', argument 2 of type 'lldb::SBError &'
invalid null reference in method 'SBThread_StepOut', argument 2 of type 'lldb::SBError &'
Wrong number or type of arguments for overloaded function 'SBThread_StepOutOfFrame'.
  Possible C/C++ prototypes are:
    lldb::SBThread::StepOutOfFrame(lldb::SBFrame &)
    lldb::SBThread::StepOutOfFrame(lldb::SBFrame &,lldb::SBError &)
OO:SBThread_StepOutOfFrame
in method 'SBThread_StepOutOfFrame', argument 1 of type 'lldb::SBThread *'
in method 'SBThread_StepOutOfFrame', argument 2 of type 'lldb::SBFrame &'
invalid null reference in method 'SBThread_StepOutOfFrame', argument 2 of type 'lldb::SBFrame &'
OOO:SBThread_StepOutOfFrame
in method 'SBThread_StepOutOfFrame', argument 3 of type 'lldb::SBError &'
invalid null reference in method 'SBThread_StepOutOfFrame', argument 3 of type 'lldb::SBError &'
Wrong number or type of arguments for overloaded function 'SBThread_StepInstruction'.
  Possible C/C++ prototypes are:
    lldb::SBThread::StepInstruction(bool)
    lldb::SBThread::StepInstruction(bool,lldb::SBError &)
OO:SBThread_StepInstruction
in method 'SBThread_StepInstruction', argument 1 of type 'lldb::SBThread *'
in method 'SBThread_StepInstruction', argument 2 of type 'bool'
OOO:SBThread_StepInstruction
in method 'SBThread_StepInstruction', argument 3 of type 'lldb::SBError &'
invalid null reference in method 'SBThread_StepInstruction', argument 3 of type 'lldb::SBError &'
OOOO:SBThread_StepOverUntil
in method 'SBThread_StepOverUntil', argument 1 of type 'lldb::SBThread *'
in method 'SBThread_StepOverUntil', argument 2 of type 'lldb::SBFrame &'
invalid null reference in method 'SBThread_StepOverUntil', argument 2 of type 'lldb::SBFrame &'
in method 'SBThread_StepOverUntil', argument 3 of type 'lldb::SBFileSpec &'
invalid null reference in method 'SBThread_StepOverUntil', argument 3 of type 'lldb::SBFileSpec &'
in method 'SBThread_StepOverUntil', argument 4 of type 'uint32_t'
Wrong number or type of arguments for overloaded function 'SBThread_StepUsingScriptedThreadPlan'.
  Possible C/C++ prototypes are:
    lldb::SBThread::StepUsingScriptedThreadPlan(char const *)
    lldb::SBThread::StepUsingScriptedThreadPlan(char const *,bool)
OO:SBThread_StepUsingScriptedThreadPlan
in method 'SBThread_StepUsingScriptedThreadPlan', argument 1 of type 'lldb::SBThread *'
in method 'SBThread_StepUsingScriptedThreadPlan', argument 2 of type 'char const *'
OOO:SBThread_StepUsingScriptedThreadPlan
in method 'SBThread_StepUsingScriptedThreadPlan', argument 3 of type 'bool'
OOO:SBThread_JumpToLine
in method 'SBThread_JumpToLine', argument 1 of type 'lldb::SBThread *'
in method 'SBThread_JumpToLine', argument 2 of type 'lldb::SBFileSpec &'
invalid null reference in method 'SBThread_JumpToLine', argument 2 of type 'lldb::SBFileSpec &'
in method 'SBThread_JumpToLine', argument 3 of type 'uint32_t'
Wrong number or type of arguments for overloaded function 'SBThread_RunToAddress'.
  Possible C/C++ prototypes are:
    lldb::SBThread::RunToAddress(lldb::addr_t)
    lldb::SBThread::RunToAddress(lldb::addr_t,lldb::SBError &)
OO:SBThread_RunToAddress
in method 'SBThread_RunToAddress', argument 1 of type 'lldb::SBThread *'
in method 'SBThread_RunToAddress', argument 2 of type 'lldb::addr_t'
OOO:SBThread_RunToAddress
in method 'SBThread_RunToAddress', argument 3 of type 'lldb::SBError &'
invalid null reference in method 'SBThread_RunToAddress', argument 3 of type 'lldb::SBError &'
OOO:SBThread_ReturnFromFrame
in method 'SBThread_ReturnFromFrame', argument 1 of type 'lldb::SBThread *'
in method 'SBThread_ReturnFromFrame', argument 2 of type 'lldb::SBFrame &'
invalid null reference in method 'SBThread_ReturnFromFrame', argument 2 of type 'lldb::SBFrame &'
in method 'SBThread_ReturnFromFrame', argument 3 of type 'lldb::SBValue &'
invalid null reference in method 'SBThread_ReturnFromFrame', argument 3 of type 'lldb::SBValue &'
O:SBThread_UnwindInnermostExpression
in method 'SBThread_UnwindInnermostExpression', argument 1 of type 'lldb::SBThread *'
Wrong number or type of arguments for overloaded function 'SBThread_Suspend'.
  Possible C/C++ prototypes are:
    lldb::SBThread::Suspend()
    lldb::SBThread::Suspend(lldb::SBError &)
O:SBThread_Suspend
in method 'SBThread_Suspend', argument 1 of type 'lldb::SBThread *'
OO:SBThread_Suspend
in method 'SBThread_Suspend', argument 2 of type 'lldb::SBError &'
invalid null reference in method 'SBThread_Suspend', argument 2 of type 'lldb::SBError &'
Wrong number or type of arguments for overloaded function 'SBThread_Resume'.
  Possible C/C++ prototypes are:
    lldb::SBThread::Resume()
    lldb::SBThread::Resume(lldb::SBError &)
O:SBThread_Resume
in method 'SBThread_Resume', argument 1 of type 'lldb::SBThread *'
OO:SBThread_Resume
in method 'SBThread_Resume', argument 2 of type 'lldb::SBError &'
invalid null reference in method 'SBThread_Resume', argument 2 of type 'lldb::SBError &'
O:SBThread_IsSuspended
in method 'SBThread_IsSuspended', argument 1 of type 'lldb::SBThread *'
O:SBThread_IsStopped
in method 'SBThread_IsStopped', argument 1 of type 'lldb::SBThread *'
O:SBThread_GetNumFrames
in method 'SBThread_GetNumFrames', argument 1 of type 'lldb::SBThread *'
OO:SBThread_GetFrameAtIndex
in method 'SBThread_GetFrameAtIndex', argument 1 of type 'lldb::SBThread *'
in method 'SBThread_GetFrameAtIndex', argument 2 of type 'uint32_t'
O:SBThread_GetSelectedFrame
in method 'SBThread_GetSelectedFrame', argument 1 of type 'lldb::SBThread *'
OO:SBThread_SetSelectedFrame
in method 'SBThread_SetSelectedFrame', argument 1 of type 'lldb::SBThread *'
in method 'SBThread_SetSelectedFrame', argument 2 of type 'uint32_t'
O:SBThread_GetProcess
in method 'SBThread_GetProcess', argument 1 of type 'lldb::SBThread *'
Wrong number or type of arguments for overloaded function 'SBThread_GetDescription'.
  Possible C/C++ prototypes are:
    lldb::SBThread::GetDescription(lldb::SBStream &) const
    lldb::SBThread::GetDescription(lldb::SBStream &,bool) const
OO:SBThread_GetDescription
in method 'SBThread_GetDescription', argument 1 of type 'lldb::SBThread const *'
in method 'SBThread_GetDescription', argument 2 of type 'lldb::SBStream &'
invalid null reference in method 'SBThread_GetDescription', argument 2 of type 'lldb::SBStream &'
OOO:SBThread_GetDescription
in method 'SBThread_GetDescription', argument 3 of type 'bool'
OO:SBThread_GetStatus
in method 'SBThread_GetStatus', argument 1 of type 'lldb::SBThread const *'
in method 'SBThread_GetStatus', argument 2 of type 'lldb::SBStream &'
invalid null reference in method 'SBThread_GetStatus', argument 2 of type 'lldb::SBStream &'
OO:SBThread___eq__
in method 'SBThread___eq__', argument 1 of type 'lldb::SBThread const *'
in method 'SBThread___eq__', argument 2 of type 'lldb::SBThread const &'
invalid null reference in method 'SBThread___eq__', argument 2 of type 'lldb::SBThread const &'
OO:SBThread___ne__
in method 'SBThread___ne__', argument 1 of type 'lldb::SBThread const *'
in method 'SBThread___ne__', argument 2 of type 'lldb::SBThread const &'
invalid null reference in method 'SBThread___ne__', argument 2 of type 'lldb::SBThread const &'
OO:SBThread_GetExtendedBacktraceThread
in method 'SBThread_GetExtendedBacktraceThread', argument 1 of type 'lldb::SBThread *'
in method 'SBThread_GetExtendedBacktraceThread', argument 2 of type 'char const *'
O:SBThread_GetExtendedBacktraceOriginatingIndexID
in method 'SBThread_GetExtendedBacktraceOriginatingIndexID', argument 1 of type 'lldb::SBThread *'
O:SBThread_GetCurrentException
in method 'SBThread_GetCurrentException', argument 1 of type 'lldb::SBThread *'
O:SBThread_GetCurrentExceptionBacktrace
in method 'SBThread_GetCurrentExceptionBacktrace', argument 1 of type 'lldb::SBThread *'
O:SBThread_SafeToCallFunctions
in method 'SBThread_SafeToCallFunctions', argument 1 of type 'lldb::SBThread *'
O:SBThread___str__
in method 'SBThread___str__', argument 1 of type 'lldb::SBThread *'
Wrong number or type of arguments for overloaded function 'new_SBThreadCollection'.
  Possible C/C++ prototypes are:
    lldb::SBThreadCollection::SBThreadCollection()
    lldb::SBThreadCollection::SBThreadCollection(lldb::SBThreadCollection const &)
:new_SBThreadCollection
O:new_SBThreadCollection
in method 'new_SBThreadCollection', argument 1 of type 'lldb::SBThreadCollection const &'
invalid null reference in method 'new_SBThreadCollection', argument 1 of type 'lldb::SBThreadCollection const &'
O:delete_SBThreadCollection
in method 'delete_SBThreadCollection', argument 1 of type 'lldb::SBThreadCollection *'
O:SBThreadCollection_IsValid
in method 'SBThreadCollection_IsValid', argument 1 of type 'lldb::SBThreadCollection const *'
O:SBThreadCollection___nonzero__
in method 'SBThreadCollection___nonzero__', argument 1 of type 'lldb::SBThreadCollection const *'
O:SBThreadCollection_GetSize
in method 'SBThreadCollection_GetSize', argument 1 of type 'lldb::SBThreadCollection *'
OO:SBThreadCollection_GetThreadAtIndex
in method 'SBThreadCollection_GetThreadAtIndex', argument 1 of type 'lldb::SBThreadCollection *'
in method 'SBThreadCollection_GetThreadAtIndex', argument 2 of type 'size_t'
Wrong number or type of arguments for overloaded function 'new_SBThreadPlan'.
  Possible C/C++ prototypes are:
    lldb::SBThreadPlan::SBThreadPlan()
    lldb::SBThreadPlan::SBThreadPlan(lldb::SBThreadPlan const &)
    lldb::SBThreadPlan::SBThreadPlan(lldb::ThreadPlanSP const &)
    lldb::SBThreadPlan::SBThreadPlan(lldb::SBThread &,char const *)
:new_SBThreadPlan
O:new_SBThreadPlan
in method 'new_SBThreadPlan', argument 1 of type 'lldb::SBThreadPlan const &'
invalid null reference in method 'new_SBThreadPlan', argument 1 of type 'lldb::SBThreadPlan const &'
in method 'new_SBThreadPlan', argument 1 of type 'lldb::ThreadPlanSP const &'
invalid null reference in method 'new_SBThreadPlan', argument 1 of type 'lldb::ThreadPlanSP const &'
OO:new_SBThreadPlan
in method 'new_SBThreadPlan', argument 1 of type 'lldb::SBThread &'
invalid null reference in method 'new_SBThreadPlan', argument 1 of type 'lldb::SBThread &'
in method 'new_SBThreadPlan', argument 2 of type 'char const *'
O:delete_SBThreadPlan
in method 'delete_SBThreadPlan', argument 1 of type 'lldb::SBThreadPlan *'
O:SBThreadPlan___nonzero__
in method 'SBThreadPlan___nonzero__', argument 1 of type 'lldb::SBThreadPlan const *'
O:SBThreadPlan_Clear
in method 'SBThreadPlan_Clear', argument 1 of type 'lldb::SBThreadPlan *'
O:SBThreadPlan_GetStopReason
in method 'SBThreadPlan_GetStopReason', argument 1 of type 'lldb::SBThreadPlan *'
O:SBThreadPlan_GetStopReasonDataCount
in method 'SBThreadPlan_GetStopReasonDataCount', argument 1 of type 'lldb::SBThreadPlan *'
OO:SBThreadPlan_GetStopReasonDataAtIndex
in method 'SBThreadPlan_GetStopReasonDataAtIndex', argument 1 of type 'lldb::SBThreadPlan *'
in method 'SBThreadPlan_GetStopReasonDataAtIndex', argument 2 of type 'uint32_t'
O:SBThreadPlan_GetThread
in method 'SBThreadPlan_GetThread', argument 1 of type 'lldb::SBThreadPlan const *'
OO:SBThreadPlan_GetDescription
in method 'SBThreadPlan_GetDescription', argument 1 of type 'lldb::SBThreadPlan const *'
in method 'SBThreadPlan_GetDescription', argument 2 of type 'lldb::SBStream &'
invalid null reference in method 'SBThreadPlan_GetDescription', argument 2 of type 'lldb::SBStream &'
OO:SBThreadPlan_SetPlanComplete
in method 'SBThreadPlan_SetPlanComplete', argument 1 of type 'lldb::SBThreadPlan *'
in method 'SBThreadPlan_SetPlanComplete', argument 2 of type 'bool'
O:SBThreadPlan_IsPlanComplete
in method 'SBThreadPlan_IsPlanComplete', argument 1 of type 'lldb::SBThreadPlan *'
O:SBThreadPlan_IsPlanStale
in method 'SBThreadPlan_IsPlanStale', argument 1 of type 'lldb::SBThreadPlan *'
Wrong number or type of arguments for overloaded function 'SBThreadPlan_IsValid'.
  Possible C/C++ prototypes are:
    lldb::SBThreadPlan::IsValid() const
    lldb::SBThreadPlan::IsValid()
O:SBThreadPlan_IsValid
in method 'SBThreadPlan_IsValid', argument 1 of type 'lldb::SBThreadPlan *'
in method 'SBThreadPlan_IsValid', argument 1 of type 'lldb::SBThreadPlan const *'
OOO:SBThreadPlan_QueueThreadPlanForStepOverRange
in method 'SBThreadPlan_QueueThreadPlanForStepOverRange', argument 1 of type 'lldb::SBThreadPlan *'
in method 'SBThreadPlan_QueueThreadPlanForStepOverRange', argument 2 of type 'lldb::SBAddress &'
invalid null reference in method 'SBThreadPlan_QueueThreadPlanForStepOverRange', argument 2 of type 'lldb::SBAddress &'
in method 'SBThreadPlan_QueueThreadPlanForStepOverRange', argument 3 of type 'lldb::addr_t'
OOO:SBThreadPlan_QueueThreadPlanForStepInRange
in method 'SBThreadPlan_QueueThreadPlanForStepInRange', argument 1 of type 'lldb::SBThreadPlan *'
in method 'SBThreadPlan_QueueThreadPlanForStepInRange', argument 2 of type 'lldb::SBAddress &'
invalid null reference in method 'SBThreadPlan_QueueThreadPlanForStepInRange', argument 2 of type 'lldb::SBAddress &'
in method 'SBThreadPlan_QueueThreadPlanForStepInRange', argument 3 of type 'lldb::addr_t'
Wrong number or type of arguments for overloaded function 'SBThreadPlan_QueueThreadPlanForStepOut'.
  Possible C/C++ prototypes are:
    lldb::SBThreadPlan::QueueThreadPlanForStepOut(uint32_t,bool)
    lldb::SBThreadPlan::QueueThreadPlanForStepOut(uint32_t)
OO:SBThreadPlan_QueueThreadPlanForStepOut
in method 'SBThreadPlan_QueueThreadPlanForStepOut', argument 1 of type 'lldb::SBThreadPlan *'
in method 'SBThreadPlan_QueueThreadPlanForStepOut', argument 2 of type 'uint32_t'
OOO:SBThreadPlan_QueueThreadPlanForStepOut
in method 'SBThreadPlan_QueueThreadPlanForStepOut', argument 3 of type 'bool'
OO:SBThreadPlan_QueueThreadPlanForRunToAddress
in method 'SBThreadPlan_QueueThreadPlanForRunToAddress', argument 1 of type 'lldb::SBThreadPlan *'
in method 'SBThreadPlan_QueueThreadPlanForRunToAddress', argument 2 of type 'lldb::SBAddress'
invalid null reference in method 'SBThreadPlan_QueueThreadPlanForRunToAddress', argument 2 of type 'lldb::SBAddress'
OO:SBThreadPlan_QueueThreadPlanForStepScripted
in method 'SBThreadPlan_QueueThreadPlanForStepScripted', argument 1 of type 'lldb::SBThreadPlan *'
in method 'SBThreadPlan_QueueThreadPlanForStepScripted', argument 2 of type 'char const *'
:new_SBTrace
OOOOO:SBTrace_GetTraceData
in method 'SBTrace_GetTraceData', argument 1 of type 'lldb::SBTrace *'
in method 'SBTrace_GetTraceData', argument 2 of type 'lldb::SBError &'
invalid null reference in method 'SBTrace_GetTraceData', argument 2 of type 'lldb::SBError &'
in method 'SBTrace_GetTraceData', argument 5 of type 'size_t'
OOOOO:SBTrace_GetMetaData
in method 'SBTrace_GetMetaData', argument 1 of type 'lldb::SBTrace *'
in method 'SBTrace_GetMetaData', argument 2 of type 'lldb::SBError &'
invalid null reference in method 'SBTrace_GetMetaData', argument 2 of type 'lldb::SBError &'
in method 'SBTrace_GetMetaData', argument 5 of type 'size_t'
OOO:SBTrace_StopTrace
in method 'SBTrace_StopTrace', argument 1 of type 'lldb::SBTrace *'
in method 'SBTrace_StopTrace', argument 2 of type 'lldb::SBError &'
invalid null reference in method 'SBTrace_StopTrace', argument 2 of type 'lldb::SBError &'
OOO:SBTrace_GetTraceConfig
in method 'SBTrace_GetTraceConfig', argument 1 of type 'lldb::SBTrace *'
in method 'SBTrace_GetTraceConfig', argument 2 of type 'lldb::SBTraceOptions &'
invalid null reference in method 'SBTrace_GetTraceConfig', argument 2 of type 'lldb::SBTraceOptions &'
in method 'SBTrace_GetTraceConfig', argument 3 of type 'lldb::SBError &'
invalid null reference in method 'SBTrace_GetTraceConfig', argument 3 of type 'lldb::SBError &'
O:SBTrace_GetTraceUID
in method 'SBTrace_GetTraceUID', argument 1 of type 'lldb::SBTrace *'
O:SBTrace___nonzero__
in method 'SBTrace___nonzero__', argument 1 of type 'lldb::SBTrace const *'
O:SBTrace_IsValid
in method 'SBTrace_IsValid', argument 1 of type 'lldb::SBTrace *'
O:delete_SBTrace
in method 'delete_SBTrace', argument 1 of type 'lldb::SBTrace *'
:new_SBTraceOptions
O:SBTraceOptions_getType
in method 'SBTraceOptions_getType', argument 1 of type 'lldb::SBTraceOptions const *'
O:SBTraceOptions_getTraceBufferSize
in method 'SBTraceOptions_getTraceBufferSize', argument 1 of type 'lldb::SBTraceOptions const *'
OO:SBTraceOptions_getTraceParams
in method 'SBTraceOptions_getTraceParams', argument 1 of type 'lldb::SBTraceOptions *'
in method 'SBTraceOptions_getTraceParams', argument 2 of type 'lldb::SBError &'
invalid null reference in method 'SBTraceOptions_getTraceParams', argument 2 of type 'lldb::SBError &'
O:SBTraceOptions_getMetaDataBufferSize
in method 'SBTraceOptions_getMetaDataBufferSize', argument 1 of type 'lldb::SBTraceOptions const *'
OO:SBTraceOptions_setTraceParams
in method 'SBTraceOptions_setTraceParams', argument 1 of type 'lldb::SBTraceOptions *'
in method 'SBTraceOptions_setTraceParams', argument 2 of type 'lldb::SBStructuredData &'
invalid null reference in method 'SBTraceOptions_setTraceParams', argument 2 of type 'lldb::SBStructuredData &'
OO:SBTraceOptions_setType
in method 'SBTraceOptions_setType', argument 1 of type 'lldb::SBTraceOptions *'
in method 'SBTraceOptions_setType', argument 2 of type 'lldb::TraceType'
OO:SBTraceOptions_setTraceBufferSize
in method 'SBTraceOptions_setTraceBufferSize', argument 1 of type 'lldb::SBTraceOptions *'
in method 'SBTraceOptions_setTraceBufferSize', argument 2 of type 'uint64_t'
OO:SBTraceOptions_setMetaDataBufferSize
in method 'SBTraceOptions_setMetaDataBufferSize', argument 1 of type 'lldb::SBTraceOptions *'
in method 'SBTraceOptions_setMetaDataBufferSize', argument 2 of type 'uint64_t'
OO:SBTraceOptions_setThreadID
in method 'SBTraceOptions_setThreadID', argument 1 of type 'lldb::SBTraceOptions *'
O:SBTraceOptions_getThreadID
in method 'SBTraceOptions_getThreadID', argument 1 of type 'lldb::SBTraceOptions *'
O:SBTraceOptions___nonzero__
in method 'SBTraceOptions___nonzero__', argument 1 of type 'lldb::SBTraceOptions const *'
O:SBTraceOptions_IsValid
in method 'SBTraceOptions_IsValid', argument 1 of type 'lldb::SBTraceOptions *'
O:delete_SBTraceOptions
in method 'delete_SBTraceOptions', argument 1 of type 'lldb::SBTraceOptions *'
Wrong number or type of arguments for overloaded function 'new_SBTypeMember'.
  Possible C/C++ prototypes are:
    lldb::SBTypeMember::SBTypeMember()
    lldb::SBTypeMember::SBTypeMember(lldb::SBTypeMember const &)
:new_SBTypeMember
O:new_SBTypeMember
in method 'new_SBTypeMember', argument 1 of type 'lldb::SBTypeMember const &'
invalid null reference in method 'new_SBTypeMember', argument 1 of type 'lldb::SBTypeMember const &'
O:delete_SBTypeMember
in method 'delete_SBTypeMember', argument 1 of type 'lldb::SBTypeMember *'
O:SBTypeMember_IsValid
in method 'SBTypeMember_IsValid', argument 1 of type 'lldb::SBTypeMember const *'
O:SBTypeMember___nonzero__
in method 'SBTypeMember___nonzero__', argument 1 of type 'lldb::SBTypeMember const *'
O:SBTypeMember_GetName
in method 'SBTypeMember_GetName', argument 1 of type 'lldb::SBTypeMember *'
O:SBTypeMember_GetType
in method 'SBTypeMember_GetType', argument 1 of type 'lldb::SBTypeMember *'
O:SBTypeMember_GetOffsetInBytes
in method 'SBTypeMember_GetOffsetInBytes', argument 1 of type 'lldb::SBTypeMember *'
O:SBTypeMember_GetOffsetInBits
in method 'SBTypeMember_GetOffsetInBits', argument 1 of type 'lldb::SBTypeMember *'
O:SBTypeMember_IsBitfield
in method 'SBTypeMember_IsBitfield', argument 1 of type 'lldb::SBTypeMember *'
O:SBTypeMember_GetBitfieldSizeInBits
in method 'SBTypeMember_GetBitfieldSizeInBits', argument 1 of type 'lldb::SBTypeMember *'
O:SBTypeMember___str__
in method 'SBTypeMember___str__', argument 1 of type 'lldb::SBTypeMember *'
Wrong number or type of arguments for overloaded function 'new_SBTypeMemberFunction'.
  Possible C/C++ prototypes are:
    lldb::SBTypeMemberFunction::SBTypeMemberFunction()
    lldb::SBTypeMemberFunction::SBTypeMemberFunction(lldb::SBTypeMemberFunction const &)
:new_SBTypeMemberFunction
O:new_SBTypeMemberFunction
in method 'new_SBTypeMemberFunction', argument 1 of type 'lldb::SBTypeMemberFunction const &'
invalid null reference in method 'new_SBTypeMemberFunction', argument 1 of type 'lldb::SBTypeMemberFunction const &'
O:delete_SBTypeMemberFunction
in method 'delete_SBTypeMemberFunction', argument 1 of type 'lldb::SBTypeMemberFunction *'
O:SBTypeMemberFunction_IsValid
in method 'SBTypeMemberFunction_IsValid', argument 1 of type 'lldb::SBTypeMemberFunction const *'
O:SBTypeMemberFunction___nonzero__
in method 'SBTypeMemberFunction___nonzero__', argument 1 of type 'lldb::SBTypeMemberFunction const *'
O:SBTypeMemberFunction_GetName
in method 'SBTypeMemberFunction_GetName', argument 1 of type 'lldb::SBTypeMemberFunction *'
O:SBTypeMemberFunction_GetDemangledName
in method 'SBTypeMemberFunction_GetDemangledName', argument 1 of type 'lldb::SBTypeMemberFunction *'
O:SBTypeMemberFunction_GetMangledName
in method 'SBTypeMemberFunction_GetMangledName', argument 1 of type 'lldb::SBTypeMemberFunction *'
O:SBTypeMemberFunction_GetType
in method 'SBTypeMemberFunction_GetType', argument 1 of type 'lldb::SBTypeMemberFunction *'
O:SBTypeMemberFunction_GetReturnType
in method 'SBTypeMemberFunction_GetReturnType', argument 1 of type 'lldb::SBTypeMemberFunction *'
O:SBTypeMemberFunction_GetNumberOfArguments
in method 'SBTypeMemberFunction_GetNumberOfArguments', argument 1 of type 'lldb::SBTypeMemberFunction *'
OO:SBTypeMemberFunction_GetArgumentTypeAtIndex
in method 'SBTypeMemberFunction_GetArgumentTypeAtIndex', argument 1 of type 'lldb::SBTypeMemberFunction *'
in method 'SBTypeMemberFunction_GetArgumentTypeAtIndex', argument 2 of type 'uint32_t'
O:SBTypeMemberFunction_GetKind
in method 'SBTypeMemberFunction_GetKind', argument 1 of type 'lldb::SBTypeMemberFunction *'
OOO:SBTypeMemberFunction_GetDescription
in method 'SBTypeMemberFunction_GetDescription', argument 1 of type 'lldb::SBTypeMemberFunction *'
in method 'SBTypeMemberFunction_GetDescription', argument 2 of type 'lldb::SBStream &'
invalid null reference in method 'SBTypeMemberFunction_GetDescription', argument 2 of type 'lldb::SBStream &'
in method 'SBTypeMemberFunction_GetDescription', argument 3 of type 'lldb::DescriptionLevel'
O:SBTypeMemberFunction___str__
in method 'SBTypeMemberFunction___str__', argument 1 of type 'lldb::SBTypeMemberFunction *'
Wrong number or type of arguments for overloaded function 'new_SBType'.
  Possible C/C++ prototypes are:
    lldb::SBType::SBType()
    lldb::SBType::SBType(lldb::SBType const &)
:new_SBType
O:new_SBType
in method 'new_SBType', argument 1 of type 'lldb::SBType const &'
invalid null reference in method 'new_SBType', argument 1 of type 'lldb::SBType const &'
O:delete_SBType
in method 'delete_SBType', argument 1 of type 'lldb::SBType *'
O:SBType_IsValid
in method 'SBType_IsValid', argument 1 of type 'lldb::SBType *'
O:SBType___nonzero__
in method 'SBType___nonzero__', argument 1 of type 'lldb::SBType const *'
O:SBType_GetByteSize
in method 'SBType_GetByteSize', argument 1 of type 'lldb::SBType *'
O:SBType_IsPointerType
in method 'SBType_IsPointerType', argument 1 of type 'lldb::SBType *'
O:SBType_IsReferenceType
in method 'SBType_IsReferenceType', argument 1 of type 'lldb::SBType *'
O:SBType_IsFunctionType
in method 'SBType_IsFunctionType', argument 1 of type 'lldb::SBType *'
O:SBType_IsPolymorphicClass
in method 'SBType_IsPolymorphicClass', argument 1 of type 'lldb::SBType *'
O:SBType_IsArrayType
in method 'SBType_IsArrayType', argument 1 of type 'lldb::SBType *'
O:SBType_IsVectorType
in method 'SBType_IsVectorType', argument 1 of type 'lldb::SBType *'
O:SBType_IsTypedefType
in method 'SBType_IsTypedefType', argument 1 of type 'lldb::SBType *'
O:SBType_IsAnonymousType
in method 'SBType_IsAnonymousType', argument 1 of type 'lldb::SBType *'
O:SBType_GetPointerType
in method 'SBType_GetPointerType', argument 1 of type 'lldb::SBType *'
O:SBType_GetPointeeType
in method 'SBType_GetPointeeType', argument 1 of type 'lldb::SBType *'
O:SBType_GetReferenceType
in method 'SBType_GetReferenceType', argument 1 of type 'lldb::SBType *'
O:SBType_GetTypedefedType
in method 'SBType_GetTypedefedType', argument 1 of type 'lldb::SBType *'
O:SBType_GetDereferencedType
in method 'SBType_GetDereferencedType', argument 1 of type 'lldb::SBType *'
O:SBType_GetUnqualifiedType
in method 'SBType_GetUnqualifiedType', argument 1 of type 'lldb::SBType *'
O:SBType_GetCanonicalType
in method 'SBType_GetCanonicalType', argument 1 of type 'lldb::SBType *'
O:SBType_GetArrayElementType
in method 'SBType_GetArrayElementType', argument 1 of type 'lldb::SBType *'
OO:SBType_GetArrayType
in method 'SBType_GetArrayType', argument 1 of type 'lldb::SBType *'
in method 'SBType_GetArrayType', argument 2 of type 'uint64_t'
O:SBType_GetVectorElementType
in method 'SBType_GetVectorElementType', argument 1 of type 'lldb::SBType *'
Wrong number or type of arguments for overloaded function 'SBType_GetBasicType'.
  Possible C/C++ prototypes are:
    lldb::SBType::GetBasicType()
    lldb::SBType::GetBasicType(lldb::BasicType)
O:SBType_GetBasicType
in method 'SBType_GetBasicType', argument 1 of type 'lldb::SBType *'
OO:SBType_GetBasicType
in method 'SBType_GetBasicType', argument 2 of type 'lldb::BasicType'
O:SBType_GetNumberOfFields
in method 'SBType_GetNumberOfFields', argument 1 of type 'lldb::SBType *'
O:SBType_GetNumberOfDirectBaseClasses
in method 'SBType_GetNumberOfDirectBaseClasses', argument 1 of type 'lldb::SBType *'
O:SBType_GetNumberOfVirtualBaseClasses
in method 'SBType_GetNumberOfVirtualBaseClasses', argument 1 of type 'lldb::SBType *'
OO:SBType_GetFieldAtIndex
in method 'SBType_GetFieldAtIndex', argument 1 of type 'lldb::SBType *'
in method 'SBType_GetFieldAtIndex', argument 2 of type 'uint32_t'
OO:SBType_GetDirectBaseClassAtIndex
in method 'SBType_GetDirectBaseClassAtIndex', argument 1 of type 'lldb::SBType *'
in method 'SBType_GetDirectBaseClassAtIndex', argument 2 of type 'uint32_t'
OO:SBType_GetVirtualBaseClassAtIndex
in method 'SBType_GetVirtualBaseClassAtIndex', argument 1 of type 'lldb::SBType *'
in method 'SBType_GetVirtualBaseClassAtIndex', argument 2 of type 'uint32_t'
O:SBType_GetEnumMembers
in method 'SBType_GetEnumMembers', argument 1 of type 'lldb::SBType *'
O:SBType_GetName
in method 'SBType_GetName', argument 1 of type 'lldb::SBType *'
O:SBType_GetDisplayTypeName
in method 'SBType_GetDisplayTypeName', argument 1 of type 'lldb::SBType *'
O:SBType_GetTypeClass
in method 'SBType_GetTypeClass', argument 1 of type 'lldb::SBType *'
O:SBType_GetNumberOfTemplateArguments
in method 'SBType_GetNumberOfTemplateArguments', argument 1 of type 'lldb::SBType *'
OO:SBType_GetTemplateArgumentType
in method 'SBType_GetTemplateArgumentType', argument 1 of type 'lldb::SBType *'
in method 'SBType_GetTemplateArgumentType', argument 2 of type 'uint32_t'
OO:SBType_GetTemplateArgumentKind
in method 'SBType_GetTemplateArgumentKind', argument 1 of type 'lldb::SBType *'
in method 'SBType_GetTemplateArgumentKind', argument 2 of type 'uint32_t'
O:SBType_GetFunctionReturnType
in method 'SBType_GetFunctionReturnType', argument 1 of type 'lldb::SBType *'
O:SBType_GetFunctionArgumentTypes
in method 'SBType_GetFunctionArgumentTypes', argument 1 of type 'lldb::SBType *'
O:SBType_GetNumberOfMemberFunctions
in method 'SBType_GetNumberOfMemberFunctions', argument 1 of type 'lldb::SBType *'
OO:SBType_GetMemberFunctionAtIndex
in method 'SBType_GetMemberFunctionAtIndex', argument 1 of type 'lldb::SBType *'
in method 'SBType_GetMemberFunctionAtIndex', argument 2 of type 'uint32_t'
O:SBType_IsTypeComplete
in method 'SBType_IsTypeComplete', argument 1 of type 'lldb::SBType *'
O:SBType_GetTypeFlags
in method 'SBType_GetTypeFlags', argument 1 of type 'lldb::SBType *'
O:SBType___str__
in method 'SBType___str__', argument 1 of type 'lldb::SBType *'
:new_SBTypeList
O:SBTypeList_IsValid
in method 'SBTypeList_IsValid', argument 1 of type 'lldb::SBTypeList *'
O:SBTypeList___nonzero__
in method 'SBTypeList___nonzero__', argument 1 of type 'lldb::SBTypeList const *'
OO:SBTypeList_Append
in method 'SBTypeList_Append', argument 1 of type 'lldb::SBTypeList *'
in method 'SBTypeList_Append', argument 2 of type 'lldb::SBType'
invalid null reference in method 'SBTypeList_Append', argument 2 of type 'lldb::SBType'
OO:SBTypeList_GetTypeAtIndex
in method 'SBTypeList_GetTypeAtIndex', argument 1 of type 'lldb::SBTypeList *'
in method 'SBTypeList_GetTypeAtIndex', argument 2 of type 'uint32_t'
O:SBTypeList_GetSize
in method 'SBTypeList_GetSize', argument 1 of type 'lldb::SBTypeList *'
O:delete_SBTypeList
in method 'delete_SBTypeList', argument 1 of type 'lldb::SBTypeList *'
Wrong number or type of arguments for overloaded function 'new_SBTypeCategory'.
  Possible C/C++ prototypes are:
    lldb::SBTypeCategory::SBTypeCategory()
    lldb::SBTypeCategory::SBTypeCategory(lldb::SBTypeCategory const &)
:new_SBTypeCategory
O:new_SBTypeCategory
in method 'new_SBTypeCategory', argument 1 of type 'lldb::SBTypeCategory const &'
invalid null reference in method 'new_SBTypeCategory', argument 1 of type 'lldb::SBTypeCategory const &'
O:delete_SBTypeCategory
in method 'delete_SBTypeCategory', argument 1 of type 'lldb::SBTypeCategory *'
O:SBTypeCategory_IsValid
in method 'SBTypeCategory_IsValid', argument 1 of type 'lldb::SBTypeCategory const *'
O:SBTypeCategory___nonzero__
in method 'SBTypeCategory___nonzero__', argument 1 of type 'lldb::SBTypeCategory const *'
O:SBTypeCategory_GetEnabled
in method 'SBTypeCategory_GetEnabled', argument 1 of type 'lldb::SBTypeCategory *'
OO:SBTypeCategory_SetEnabled
in method 'SBTypeCategory_SetEnabled', argument 1 of type 'lldb::SBTypeCategory *'
in method 'SBTypeCategory_SetEnabled', argument 2 of type 'bool'
O:SBTypeCategory_GetName
in method 'SBTypeCategory_GetName', argument 1 of type 'lldb::SBTypeCategory *'
OO:SBTypeCategory_GetLanguageAtIndex
in method 'SBTypeCategory_GetLanguageAtIndex', argument 1 of type 'lldb::SBTypeCategory *'
in method 'SBTypeCategory_GetLanguageAtIndex', argument 2 of type 'uint32_t'
O:SBTypeCategory_GetNumLanguages
in method 'SBTypeCategory_GetNumLanguages', argument 1 of type 'lldb::SBTypeCategory *'
OO:SBTypeCategory_AddLanguage
in method 'SBTypeCategory_AddLanguage', argument 1 of type 'lldb::SBTypeCategory *'
in method 'SBTypeCategory_AddLanguage', argument 2 of type 'lldb::LanguageType'
OOO:SBTypeCategory_GetDescription
in method 'SBTypeCategory_GetDescription', argument 1 of type 'lldb::SBTypeCategory *'
in method 'SBTypeCategory_GetDescription', argument 2 of type 'lldb::SBStream &'
invalid null reference in method 'SBTypeCategory_GetDescription', argument 2 of type 'lldb::SBStream &'
in method 'SBTypeCategory_GetDescription', argument 3 of type 'lldb::DescriptionLevel'
O:SBTypeCategory_GetNumFormats
in method 'SBTypeCategory_GetNumFormats', argument 1 of type 'lldb::SBTypeCategory *'
O:SBTypeCategory_GetNumSummaries
in method 'SBTypeCategory_GetNumSummaries', argument 1 of type 'lldb::SBTypeCategory *'
O:SBTypeCategory_GetNumFilters
in method 'SBTypeCategory_GetNumFilters', argument 1 of type 'lldb::SBTypeCategory *'
O:SBTypeCategory_GetNumSynthetics
in method 'SBTypeCategory_GetNumSynthetics', argument 1 of type 'lldb::SBTypeCategory *'
OO:SBTypeCategory_GetTypeNameSpecifierForFilterAtIndex
in method 'SBTypeCategory_GetTypeNameSpecifierForFilterAtIndex', argument 1 of type 'lldb::SBTypeCategory *'
in method 'SBTypeCategory_GetTypeNameSpecifierForFilterAtIndex', argument 2 of type 'uint32_t'
OO:SBTypeCategory_GetTypeNameSpecifierForFormatAtIndex
in method 'SBTypeCategory_GetTypeNameSpecifierForFormatAtIndex', argument 1 of type 'lldb::SBTypeCategory *'
in method 'SBTypeCategory_GetTypeNameSpecifierForFormatAtIndex', argument 2 of type 'uint32_t'
OO:SBTypeCategory_GetTypeNameSpecifierForSummaryAtIndex
in method 'SBTypeCategory_GetTypeNameSpecifierForSummaryAtIndex', argument 1 of type 'lldb::SBTypeCategory *'
in method 'SBTypeCategory_GetTypeNameSpecifierForSummaryAtIndex', argument 2 of type 'uint32_t'
OO:SBTypeCategory_GetTypeNameSpecifierForSyntheticAtIndex
in method 'SBTypeCategory_GetTypeNameSpecifierForSyntheticAtIndex', argument 1 of type 'lldb::SBTypeCategory *'
in method 'SBTypeCategory_GetTypeNameSpecifierForSyntheticAtIndex', argument 2 of type 'uint32_t'
OO:SBTypeCategory_GetFilterForType
in method 'SBTypeCategory_GetFilterForType', argument 1 of type 'lldb::SBTypeCategory *'
in method 'SBTypeCategory_GetFilterForType', argument 2 of type 'lldb::SBTypeNameSpecifier'
invalid null reference in method 'SBTypeCategory_GetFilterForType', argument 2 of type 'lldb::SBTypeNameSpecifier'
OO:SBTypeCategory_GetFormatForType
in method 'SBTypeCategory_GetFormatForType', argument 1 of type 'lldb::SBTypeCategory *'
in method 'SBTypeCategory_GetFormatForType', argument 2 of type 'lldb::SBTypeNameSpecifier'
invalid null reference in method 'SBTypeCategory_GetFormatForType', argument 2 of type 'lldb::SBTypeNameSpecifier'
OO:SBTypeCategory_GetSummaryForType
in method 'SBTypeCategory_GetSummaryForType', argument 1 of type 'lldb::SBTypeCategory *'
in method 'SBTypeCategory_GetSummaryForType', argument 2 of type 'lldb::SBTypeNameSpecifier'
invalid null reference in method 'SBTypeCategory_GetSummaryForType', argument 2 of type 'lldb::SBTypeNameSpecifier'
OO:SBTypeCategory_GetSyntheticForType
in method 'SBTypeCategory_GetSyntheticForType', argument 1 of type 'lldb::SBTypeCategory *'
in method 'SBTypeCategory_GetSyntheticForType', argument 2 of type 'lldb::SBTypeNameSpecifier'
invalid null reference in method 'SBTypeCategory_GetSyntheticForType', argument 2 of type 'lldb::SBTypeNameSpecifier'
OO:SBTypeCategory_GetFilterAtIndex
in method 'SBTypeCategory_GetFilterAtIndex', argument 1 of type 'lldb::SBTypeCategory *'
in method 'SBTypeCategory_GetFilterAtIndex', argument 2 of type 'uint32_t'
OO:SBTypeCategory_GetFormatAtIndex
in method 'SBTypeCategory_GetFormatAtIndex', argument 1 of type 'lldb::SBTypeCategory *'
in method 'SBTypeCategory_GetFormatAtIndex', argument 2 of type 'uint32_t'
OO:SBTypeCategory_GetSummaryAtIndex
in method 'SBTypeCategory_GetSummaryAtIndex', argument 1 of type 'lldb::SBTypeCategory *'
in method 'SBTypeCategory_GetSummaryAtIndex', argument 2 of type 'uint32_t'
OO:SBTypeCategory_GetSyntheticAtIndex
in method 'SBTypeCategory_GetSyntheticAtIndex', argument 1 of type 'lldb::SBTypeCategory *'
in method 'SBTypeCategory_GetSyntheticAtIndex', argument 2 of type 'uint32_t'
OOO:SBTypeCategory_AddTypeFormat
in method 'SBTypeCategory_AddTypeFormat', argument 1 of type 'lldb::SBTypeCategory *'
in method 'SBTypeCategory_AddTypeFormat', argument 2 of type 'lldb::SBTypeNameSpecifier'
invalid null reference in method 'SBTypeCategory_AddTypeFormat', argument 2 of type 'lldb::SBTypeNameSpecifier'
in method 'SBTypeCategory_AddTypeFormat', argument 3 of type 'lldb::SBTypeFormat'
invalid null reference in method 'SBTypeCategory_AddTypeFormat', argument 3 of type 'lldb::SBTypeFormat'
OO:SBTypeCategory_DeleteTypeFormat
in method 'SBTypeCategory_DeleteTypeFormat', argument 1 of type 'lldb::SBTypeCategory *'
in method 'SBTypeCategory_DeleteTypeFormat', argument 2 of type 'lldb::SBTypeNameSpecifier'
invalid null reference in method 'SBTypeCategory_DeleteTypeFormat', argument 2 of type 'lldb::SBTypeNameSpecifier'
OOO:SBTypeCategory_AddTypeSummary
in method 'SBTypeCategory_AddTypeSummary', argument 1 of type 'lldb::SBTypeCategory *'
in method 'SBTypeCategory_AddTypeSummary', argument 2 of type 'lldb::SBTypeNameSpecifier'
invalid null reference in method 'SBTypeCategory_AddTypeSummary', argument 2 of type 'lldb::SBTypeNameSpecifier'
in method 'SBTypeCategory_AddTypeSummary', argument 3 of type 'lldb::SBTypeSummary'
invalid null reference in method 'SBTypeCategory_AddTypeSummary', argument 3 of type 'lldb::SBTypeSummary'
OO:SBTypeCategory_DeleteTypeSummary
in method 'SBTypeCategory_DeleteTypeSummary', argument 1 of type 'lldb::SBTypeCategory *'
in method 'SBTypeCategory_DeleteTypeSummary', argument 2 of type 'lldb::SBTypeNameSpecifier'
invalid null reference in method 'SBTypeCategory_DeleteTypeSummary', argument 2 of type 'lldb::SBTypeNameSpecifier'
OOO:SBTypeCategory_AddTypeFilter
in method 'SBTypeCategory_AddTypeFilter', argument 1 of type 'lldb::SBTypeCategory *'
in method 'SBTypeCategory_AddTypeFilter', argument 2 of type 'lldb::SBTypeNameSpecifier'
invalid null reference in method 'SBTypeCategory_AddTypeFilter', argument 2 of type 'lldb::SBTypeNameSpecifier'
in method 'SBTypeCategory_AddTypeFilter', argument 3 of type 'lldb::SBTypeFilter'
invalid null reference in method 'SBTypeCategory_AddTypeFilter', argument 3 of type 'lldb::SBTypeFilter'
OO:SBTypeCategory_DeleteTypeFilter
in method 'SBTypeCategory_DeleteTypeFilter', argument 1 of type 'lldb::SBTypeCategory *'
in method 'SBTypeCategory_DeleteTypeFilter', argument 2 of type 'lldb::SBTypeNameSpecifier'
invalid null reference in method 'SBTypeCategory_DeleteTypeFilter', argument 2 of type 'lldb::SBTypeNameSpecifier'
OOO:SBTypeCategory_AddTypeSynthetic
in method 'SBTypeCategory_AddTypeSynthetic', argument 1 of type 'lldb::SBTypeCategory *'
in method 'SBTypeCategory_AddTypeSynthetic', argument 2 of type 'lldb::SBTypeNameSpecifier'
invalid null reference in method 'SBTypeCategory_AddTypeSynthetic', argument 2 of type 'lldb::SBTypeNameSpecifier'
in method 'SBTypeCategory_AddTypeSynthetic', argument 3 of type 'lldb::SBTypeSynthetic'
invalid null reference in method 'SBTypeCategory_AddTypeSynthetic', argument 3 of type 'lldb::SBTypeSynthetic'
OO:SBTypeCategory_DeleteTypeSynthetic
in method 'SBTypeCategory_DeleteTypeSynthetic', argument 1 of type 'lldb::SBTypeCategory *'
in method 'SBTypeCategory_DeleteTypeSynthetic', argument 2 of type 'lldb::SBTypeNameSpecifier'
invalid null reference in method 'SBTypeCategory_DeleteTypeSynthetic', argument 2 of type 'lldb::SBTypeNameSpecifier'
O:SBTypeCategory___str__
in method 'SBTypeCategory___str__', argument 1 of type 'lldb::SBTypeCategory *'
Wrong number or type of arguments for overloaded function 'new_SBTypeEnumMember'.
  Possible C/C++ prototypes are:
    lldb::SBTypeEnumMember::SBTypeEnumMember()
    lldb::SBTypeEnumMember::SBTypeEnumMember(lldb::SBTypeEnumMember const &)
:new_SBTypeEnumMember
O:new_SBTypeEnumMember
in method 'new_SBTypeEnumMember', argument 1 of type 'lldb::SBTypeEnumMember const &'
invalid null reference in method 'new_SBTypeEnumMember', argument 1 of type 'lldb::SBTypeEnumMember const &'
O:delete_SBTypeEnumMember
in method 'delete_SBTypeEnumMember', argument 1 of type 'lldb::SBTypeEnumMember *'
O:SBTypeEnumMember_IsValid
in method 'SBTypeEnumMember_IsValid', argument 1 of type 'lldb::SBTypeEnumMember const *'
O:SBTypeEnumMember___nonzero__
in method 'SBTypeEnumMember___nonzero__', argument 1 of type 'lldb::SBTypeEnumMember const *'
O:SBTypeEnumMember_GetValueAsSigned
in method 'SBTypeEnumMember_GetValueAsSigned', argument 1 of type 'lldb::SBTypeEnumMember *'
O:SBTypeEnumMember_GetValueAsUnsigned
in method 'SBTypeEnumMember_GetValueAsUnsigned', argument 1 of type 'lldb::SBTypeEnumMember *'
O:SBTypeEnumMember_GetName
in method 'SBTypeEnumMember_GetName', argument 1 of type 'lldb::SBTypeEnumMember *'
O:SBTypeEnumMember_GetType
in method 'SBTypeEnumMember_GetType', argument 1 of type 'lldb::SBTypeEnumMember *'
OOO:SBTypeEnumMember_GetDescription
in method 'SBTypeEnumMember_GetDescription', argument 1 of type 'lldb::SBTypeEnumMember *'
in method 'SBTypeEnumMember_GetDescription', argument 2 of type 'lldb::SBStream &'
invalid null reference in method 'SBTypeEnumMember_GetDescription', argument 2 of type 'lldb::SBStream &'
in method 'SBTypeEnumMember_GetDescription', argument 3 of type 'lldb::DescriptionLevel'
O:SBTypeEnumMember___str__
in method 'SBTypeEnumMember___str__', argument 1 of type 'lldb::SBTypeEnumMember *'
Wrong number or type of arguments for overloaded function 'new_SBTypeEnumMemberList'.
  Possible C/C++ prototypes are:
    lldb::SBTypeEnumMemberList::SBTypeEnumMemberList()
    lldb::SBTypeEnumMemberList::SBTypeEnumMemberList(lldb::SBTypeEnumMemberList const &)
:new_SBTypeEnumMemberList
O:new_SBTypeEnumMemberList
in method 'new_SBTypeEnumMemberList', argument 1 of type 'lldb::SBTypeEnumMemberList const &'
invalid null reference in method 'new_SBTypeEnumMemberList', argument 1 of type 'lldb::SBTypeEnumMemberList const &'
O:delete_SBTypeEnumMemberList
in method 'delete_SBTypeEnumMemberList', argument 1 of type 'lldb::SBTypeEnumMemberList *'
O:SBTypeEnumMemberList_IsValid
in method 'SBTypeEnumMemberList_IsValid', argument 1 of type 'lldb::SBTypeEnumMemberList *'
O:SBTypeEnumMemberList___nonzero__
in method 'SBTypeEnumMemberList___nonzero__', argument 1 of type 'lldb::SBTypeEnumMemberList const *'
OO:SBTypeEnumMemberList_Append
in method 'SBTypeEnumMemberList_Append', argument 1 of type 'lldb::SBTypeEnumMemberList *'
in method 'SBTypeEnumMemberList_Append', argument 2 of type 'lldb::SBTypeEnumMember'
invalid null reference in method 'SBTypeEnumMemberList_Append', argument 2 of type 'lldb::SBTypeEnumMember'
OO:SBTypeEnumMemberList_GetTypeEnumMemberAtIndex
in method 'SBTypeEnumMemberList_GetTypeEnumMemberAtIndex', argument 1 of type 'lldb::SBTypeEnumMemberList *'
in method 'SBTypeEnumMemberList_GetTypeEnumMemberAtIndex', argument 2 of type 'uint32_t'
O:SBTypeEnumMemberList_GetSize
in method 'SBTypeEnumMemberList_GetSize', argument 1 of type 'lldb::SBTypeEnumMemberList *'
Wrong number or type of arguments for overloaded function 'new_SBTypeFilter'.
  Possible C/C++ prototypes are:
    lldb::SBTypeFilter::SBTypeFilter()
    lldb::SBTypeFilter::SBTypeFilter(uint32_t)
    lldb::SBTypeFilter::SBTypeFilter(lldb::SBTypeFilter const &)
:new_SBTypeFilter
O:new_SBTypeFilter
in method 'new_SBTypeFilter', argument 1 of type 'lldb::SBTypeFilter const &'
invalid null reference in method 'new_SBTypeFilter', argument 1 of type 'lldb::SBTypeFilter const &'
in method 'new_SBTypeFilter', argument 1 of type 'uint32_t'
O:delete_SBTypeFilter
in method 'delete_SBTypeFilter', argument 1 of type 'lldb::SBTypeFilter *'
O:SBTypeFilter_IsValid
in method 'SBTypeFilter_IsValid', argument 1 of type 'lldb::SBTypeFilter const *'
O:SBTypeFilter___nonzero__
in method 'SBTypeFilter___nonzero__', argument 1 of type 'lldb::SBTypeFilter const *'
OO:SBTypeFilter_IsEqualTo
in method 'SBTypeFilter_IsEqualTo', argument 1 of type 'lldb::SBTypeFilter *'
in method 'SBTypeFilter_IsEqualTo', argument 2 of type 'lldb::SBTypeFilter &'
invalid null reference in method 'SBTypeFilter_IsEqualTo', argument 2 of type 'lldb::SBTypeFilter &'
O:SBTypeFilter_GetNumberOfExpressionPaths
in method 'SBTypeFilter_GetNumberOfExpressionPaths', argument 1 of type 'lldb::SBTypeFilter *'
OO:SBTypeFilter_GetExpressionPathAtIndex
in method 'SBTypeFilter_GetExpressionPathAtIndex', argument 1 of type 'lldb::SBTypeFilter *'
in method 'SBTypeFilter_GetExpressionPathAtIndex', argument 2 of type 'uint32_t'
OOO:SBTypeFilter_ReplaceExpressionPathAtIndex
in method 'SBTypeFilter_ReplaceExpressionPathAtIndex', argument 1 of type 'lldb::SBTypeFilter *'
in method 'SBTypeFilter_ReplaceExpressionPathAtIndex', argument 2 of type 'uint32_t'
in method 'SBTypeFilter_ReplaceExpressionPathAtIndex', argument 3 of type 'char const *'
OO:SBTypeFilter_AppendExpressionPath
in method 'SBTypeFilter_AppendExpressionPath', argument 1 of type 'lldb::SBTypeFilter *'
in method 'SBTypeFilter_AppendExpressionPath', argument 2 of type 'char const *'
O:SBTypeFilter_Clear
in method 'SBTypeFilter_Clear', argument 1 of type 'lldb::SBTypeFilter *'
O:SBTypeFilter_GetOptions
in method 'SBTypeFilter_GetOptions', argument 1 of type 'lldb::SBTypeFilter *'
OO:SBTypeFilter_SetOptions
in method 'SBTypeFilter_SetOptions', argument 1 of type 'lldb::SBTypeFilter *'
in method 'SBTypeFilter_SetOptions', argument 2 of type 'uint32_t'
OOO:SBTypeFilter_GetDescription
in method 'SBTypeFilter_GetDescription', argument 1 of type 'lldb::SBTypeFilter *'
in method 'SBTypeFilter_GetDescription', argument 2 of type 'lldb::SBStream &'
invalid null reference in method 'SBTypeFilter_GetDescription', argument 2 of type 'lldb::SBStream &'
in method 'SBTypeFilter_GetDescription', argument 3 of type 'lldb::DescriptionLevel'
OO:SBTypeFilter___eq__
in method 'SBTypeFilter___eq__', argument 1 of type 'lldb::SBTypeFilter *'
in method 'SBTypeFilter___eq__', argument 2 of type 'lldb::SBTypeFilter &'
invalid null reference in method 'SBTypeFilter___eq__', argument 2 of type 'lldb::SBTypeFilter &'
OO:SBTypeFilter___ne__
in method 'SBTypeFilter___ne__', argument 1 of type 'lldb::SBTypeFilter *'
in method 'SBTypeFilter___ne__', argument 2 of type 'lldb::SBTypeFilter &'
invalid null reference in method 'SBTypeFilter___ne__', argument 2 of type 'lldb::SBTypeFilter &'
O:SBTypeFilter___str__
in method 'SBTypeFilter___str__', argument 1 of type 'lldb::SBTypeFilter *'
Wrong number or type of arguments for overloaded function 'new_SBTypeFormat'.
  Possible C/C++ prototypes are:
    lldb::SBTypeFormat::SBTypeFormat()
    lldb::SBTypeFormat::SBTypeFormat(lldb::Format,uint32_t)
    lldb::SBTypeFormat::SBTypeFormat(lldb::Format)
    lldb::SBTypeFormat::SBTypeFormat(char const *,uint32_t)
    lldb::SBTypeFormat::SBTypeFormat(char const *)
    lldb::SBTypeFormat::SBTypeFormat(lldb::SBTypeFormat const &)
:new_SBTypeFormat
O:new_SBTypeFormat
in method 'new_SBTypeFormat', argument 1 of type 'lldb::SBTypeFormat const &'
invalid null reference in method 'new_SBTypeFormat', argument 1 of type 'lldb::SBTypeFormat const &'
in method 'new_SBTypeFormat', argument 1 of type 'lldb::Format'
in method 'new_SBTypeFormat', argument 1 of type 'char const *'
OO:new_SBTypeFormat
in method 'new_SBTypeFormat', argument 2 of type 'uint32_t'
O:delete_SBTypeFormat
in method 'delete_SBTypeFormat', argument 1 of type 'lldb::SBTypeFormat *'
O:SBTypeFormat_IsValid
in method 'SBTypeFormat_IsValid', argument 1 of type 'lldb::SBTypeFormat const *'
O:SBTypeFormat___nonzero__
in method 'SBTypeFormat___nonzero__', argument 1 of type 'lldb::SBTypeFormat const *'
OO:SBTypeFormat_IsEqualTo
in method 'SBTypeFormat_IsEqualTo', argument 1 of type 'lldb::SBTypeFormat *'
in method 'SBTypeFormat_IsEqualTo', argument 2 of type 'lldb::SBTypeFormat &'
invalid null reference in method 'SBTypeFormat_IsEqualTo', argument 2 of type 'lldb::SBTypeFormat &'
O:SBTypeFormat_GetFormat
in method 'SBTypeFormat_GetFormat', argument 1 of type 'lldb::SBTypeFormat *'
O:SBTypeFormat_GetTypeName
in method 'SBTypeFormat_GetTypeName', argument 1 of type 'lldb::SBTypeFormat *'
O:SBTypeFormat_GetOptions
in method 'SBTypeFormat_GetOptions', argument 1 of type 'lldb::SBTypeFormat *'
OO:SBTypeFormat_SetFormat
in method 'SBTypeFormat_SetFormat', argument 1 of type 'lldb::SBTypeFormat *'
in method 'SBTypeFormat_SetFormat', argument 2 of type 'lldb::Format'
OO:SBTypeFormat_SetTypeName
in method 'SBTypeFormat_SetTypeName', argument 1 of type 'lldb::SBTypeFormat *'
in method 'SBTypeFormat_SetTypeName', argument 2 of type 'char const *'
OO:SBTypeFormat_SetOptions
in method 'SBTypeFormat_SetOptions', argument 1 of type 'lldb::SBTypeFormat *'
in method 'SBTypeFormat_SetOptions', argument 2 of type 'uint32_t'
OOO:SBTypeFormat_GetDescription
in method 'SBTypeFormat_GetDescription', argument 1 of type 'lldb::SBTypeFormat *'
in method 'SBTypeFormat_GetDescription', argument 2 of type 'lldb::SBStream &'
invalid null reference in method 'SBTypeFormat_GetDescription', argument 2 of type 'lldb::SBStream &'
in method 'SBTypeFormat_GetDescription', argument 3 of type 'lldb::DescriptionLevel'
OO:SBTypeFormat___eq__
in method 'SBTypeFormat___eq__', argument 1 of type 'lldb::SBTypeFormat *'
in method 'SBTypeFormat___eq__', argument 2 of type 'lldb::SBTypeFormat &'
invalid null reference in method 'SBTypeFormat___eq__', argument 2 of type 'lldb::SBTypeFormat &'
OO:SBTypeFormat___ne__
in method 'SBTypeFormat___ne__', argument 1 of type 'lldb::SBTypeFormat *'
in method 'SBTypeFormat___ne__', argument 2 of type 'lldb::SBTypeFormat &'
invalid null reference in method 'SBTypeFormat___ne__', argument 2 of type 'lldb::SBTypeFormat &'
O:SBTypeFormat___str__
in method 'SBTypeFormat___str__', argument 1 of type 'lldb::SBTypeFormat *'
Wrong number or type of arguments for overloaded function 'new_SBTypeNameSpecifier'.
  Possible C/C++ prototypes are:
    lldb::SBTypeNameSpecifier::SBTypeNameSpecifier()
    lldb::SBTypeNameSpecifier::SBTypeNameSpecifier(char const *,bool)
    lldb::SBTypeNameSpecifier::SBTypeNameSpecifier(char const *)
    lldb::SBTypeNameSpecifier::SBTypeNameSpecifier(lldb::SBType)
    lldb::SBTypeNameSpecifier::SBTypeNameSpecifier(lldb::SBTypeNameSpecifier const &)
:new_SBTypeNameSpecifier
O:new_SBTypeNameSpecifier
in method 'new_SBTypeNameSpecifier', argument 1 of type 'lldb::SBType'
invalid null reference in method 'new_SBTypeNameSpecifier', argument 1 of type 'lldb::SBType'
in method 'new_SBTypeNameSpecifier', argument 1 of type 'lldb::SBTypeNameSpecifier const &'
invalid null reference in method 'new_SBTypeNameSpecifier', argument 1 of type 'lldb::SBTypeNameSpecifier const &'
in method 'new_SBTypeNameSpecifier', argument 1 of type 'char const *'
OO:new_SBTypeNameSpecifier
in method 'new_SBTypeNameSpecifier', argument 2 of type 'bool'
O:delete_SBTypeNameSpecifier
in method 'delete_SBTypeNameSpecifier', argument 1 of type 'lldb::SBTypeNameSpecifier *'
O:SBTypeNameSpecifier_IsValid
in method 'SBTypeNameSpecifier_IsValid', argument 1 of type 'lldb::SBTypeNameSpecifier const *'
O:SBTypeNameSpecifier___nonzero__
in method 'SBTypeNameSpecifier___nonzero__', argument 1 of type 'lldb::SBTypeNameSpecifier const *'
OO:SBTypeNameSpecifier_IsEqualTo
in method 'SBTypeNameSpecifier_IsEqualTo', argument 1 of type 'lldb::SBTypeNameSpecifier *'
in method 'SBTypeNameSpecifier_IsEqualTo', argument 2 of type 'lldb::SBTypeNameSpecifier &'
invalid null reference in method 'SBTypeNameSpecifier_IsEqualTo', argument 2 of type 'lldb::SBTypeNameSpecifier &'
O:SBTypeNameSpecifier_GetName
in method 'SBTypeNameSpecifier_GetName', argument 1 of type 'lldb::SBTypeNameSpecifier *'
O:SBTypeNameSpecifier_GetType
in method 'SBTypeNameSpecifier_GetType', argument 1 of type 'lldb::SBTypeNameSpecifier *'
O:SBTypeNameSpecifier_IsRegex
in method 'SBTypeNameSpecifier_IsRegex', argument 1 of type 'lldb::SBTypeNameSpecifier *'
OOO:SBTypeNameSpecifier_GetDescription
in method 'SBTypeNameSpecifier_GetDescription', argument 1 of type 'lldb::SBTypeNameSpecifier *'
in method 'SBTypeNameSpecifier_GetDescription', argument 2 of type 'lldb::SBStream &'
invalid null reference in method 'SBTypeNameSpecifier_GetDescription', argument 2 of type 'lldb::SBStream &'
in method 'SBTypeNameSpecifier_GetDescription', argument 3 of type 'lldb::DescriptionLevel'
OO:SBTypeNameSpecifier___eq__
in method 'SBTypeNameSpecifier___eq__', argument 1 of type 'lldb::SBTypeNameSpecifier *'
in method 'SBTypeNameSpecifier___eq__', argument 2 of type 'lldb::SBTypeNameSpecifier &'
invalid null reference in method 'SBTypeNameSpecifier___eq__', argument 2 of type 'lldb::SBTypeNameSpecifier &'
OO:SBTypeNameSpecifier___ne__
in method 'SBTypeNameSpecifier___ne__', argument 1 of type 'lldb::SBTypeNameSpecifier *'
in method 'SBTypeNameSpecifier___ne__', argument 2 of type 'lldb::SBTypeNameSpecifier &'
invalid null reference in method 'SBTypeNameSpecifier___ne__', argument 2 of type 'lldb::SBTypeNameSpecifier &'
O:SBTypeNameSpecifier___str__
in method 'SBTypeNameSpecifier___str__', argument 1 of type 'lldb::SBTypeNameSpecifier *'
Wrong number or type of arguments for overloaded function 'new_SBTypeSummaryOptions'.
  Possible C/C++ prototypes are:
    lldb::SBTypeSummaryOptions::SBTypeSummaryOptions()
    lldb::SBTypeSummaryOptions::SBTypeSummaryOptions(lldb::SBTypeSummaryOptions const &)
:new_SBTypeSummaryOptions
O:new_SBTypeSummaryOptions
in method 'new_SBTypeSummaryOptions', argument 1 of type 'lldb::SBTypeSummaryOptions const &'
invalid null reference in method 'new_SBTypeSummaryOptions', argument 1 of type 'lldb::SBTypeSummaryOptions const &'
O:delete_SBTypeSummaryOptions
in method 'delete_SBTypeSummaryOptions', argument 1 of type 'lldb::SBTypeSummaryOptions *'
O:SBTypeSummaryOptions_IsValid
in method 'SBTypeSummaryOptions_IsValid', argument 1 of type 'lldb::SBTypeSummaryOptions *'
O:SBTypeSummaryOptions___nonzero__
in method 'SBTypeSummaryOptions___nonzero__', argument 1 of type 'lldb::SBTypeSummaryOptions const *'
O:SBTypeSummaryOptions_GetLanguage
in method 'SBTypeSummaryOptions_GetLanguage', argument 1 of type 'lldb::SBTypeSummaryOptions *'
O:SBTypeSummaryOptions_GetCapping
in method 'SBTypeSummaryOptions_GetCapping', argument 1 of type 'lldb::SBTypeSummaryOptions *'
OO:SBTypeSummaryOptions_SetLanguage
in method 'SBTypeSummaryOptions_SetLanguage', argument 1 of type 'lldb::SBTypeSummaryOptions *'
in method 'SBTypeSummaryOptions_SetLanguage', argument 2 of type 'lldb::LanguageType'
OO:SBTypeSummaryOptions_SetCapping
in method 'SBTypeSummaryOptions_SetCapping', argument 1 of type 'lldb::SBTypeSummaryOptions *'
in method 'SBTypeSummaryOptions_SetCapping', argument 2 of type 'lldb::TypeSummaryCapping'
Wrong number or type of arguments for overloaded function 'SBTypeSummary_CreateWithSummaryString'.
  Possible C/C++ prototypes are:
    lldb::SBTypeSummary::CreateWithSummaryString(char const *,uint32_t)
    lldb::SBTypeSummary::CreateWithSummaryString(char const *)
O:SBTypeSummary_CreateWithSummaryString
in method 'SBTypeSummary_CreateWithSummaryString', argument 1 of type 'char const *'
OO:SBTypeSummary_CreateWithSummaryString
in method 'SBTypeSummary_CreateWithSummaryString', argument 2 of type 'uint32_t'
Wrong number or type of arguments for overloaded function 'SBTypeSummary_CreateWithFunctionName'.
  Possible C/C++ prototypes are:
    lldb::SBTypeSummary::CreateWithFunctionName(char const *,uint32_t)
    lldb::SBTypeSummary::CreateWithFunctionName(char const *)
O:SBTypeSummary_CreateWithFunctionName
in method 'SBTypeSummary_CreateWithFunctionName', argument 1 of type 'char const *'
OO:SBTypeSummary_CreateWithFunctionName
in method 'SBTypeSummary_CreateWithFunctionName', argument 2 of type 'uint32_t'
Wrong number or type of arguments for overloaded function 'SBTypeSummary_CreateWithScriptCode'.
  Possible C/C++ prototypes are:
    lldb::SBTypeSummary::CreateWithScriptCode(char const *,uint32_t)
    lldb::SBTypeSummary::CreateWithScriptCode(char const *)
O:SBTypeSummary_CreateWithScriptCode
in method 'SBTypeSummary_CreateWithScriptCode', argument 1 of type 'char const *'
OO:SBTypeSummary_CreateWithScriptCode
in method 'SBTypeSummary_CreateWithScriptCode', argument 2 of type 'uint32_t'
Wrong number or type of arguments for overloaded function 'new_SBTypeSummary'.
  Possible C/C++ prototypes are:
    lldb::SBTypeSummary::SBTypeSummary()
    lldb::SBTypeSummary::SBTypeSummary(lldb::SBTypeSummary const &)
:new_SBTypeSummary
O:new_SBTypeSummary
in method 'new_SBTypeSummary', argument 1 of type 'lldb::SBTypeSummary const &'
invalid null reference in method 'new_SBTypeSummary', argument 1 of type 'lldb::SBTypeSummary const &'
O:delete_SBTypeSummary
in method 'delete_SBTypeSummary', argument 1 of type 'lldb::SBTypeSummary *'
O:SBTypeSummary_IsValid
in method 'SBTypeSummary_IsValid', argument 1 of type 'lldb::SBTypeSummary const *'
O:SBTypeSummary___nonzero__
in method 'SBTypeSummary___nonzero__', argument 1 of type 'lldb::SBTypeSummary const *'
OO:SBTypeSummary_IsEqualTo
in method 'SBTypeSummary_IsEqualTo', argument 1 of type 'lldb::SBTypeSummary *'
in method 'SBTypeSummary_IsEqualTo', argument 2 of type 'lldb::SBTypeSummary &'
invalid null reference in method 'SBTypeSummary_IsEqualTo', argument 2 of type 'lldb::SBTypeSummary &'
O:SBTypeSummary_IsFunctionCode
in method 'SBTypeSummary_IsFunctionCode', argument 1 of type 'lldb::SBTypeSummary *'
O:SBTypeSummary_IsFunctionName
in method 'SBTypeSummary_IsFunctionName', argument 1 of type 'lldb::SBTypeSummary *'
O:SBTypeSummary_IsSummaryString
in method 'SBTypeSummary_IsSummaryString', argument 1 of type 'lldb::SBTypeSummary *'
O:SBTypeSummary_GetData
in method 'SBTypeSummary_GetData', argument 1 of type 'lldb::SBTypeSummary *'
OO:SBTypeSummary_SetSummaryString
in method 'SBTypeSummary_SetSummaryString', argument 1 of type 'lldb::SBTypeSummary *'
in method 'SBTypeSummary_SetSummaryString', argument 2 of type 'char const *'
OO:SBTypeSummary_SetFunctionName
in method 'SBTypeSummary_SetFunctionName', argument 1 of type 'lldb::SBTypeSummary *'
in method 'SBTypeSummary_SetFunctionName', argument 2 of type 'char const *'
OO:SBTypeSummary_SetFunctionCode
in method 'SBTypeSummary_SetFunctionCode', argument 1 of type 'lldb::SBTypeSummary *'
in method 'SBTypeSummary_SetFunctionCode', argument 2 of type 'char const *'
O:SBTypeSummary_GetOptions
in method 'SBTypeSummary_GetOptions', argument 1 of type 'lldb::SBTypeSummary *'
OO:SBTypeSummary_SetOptions
in method 'SBTypeSummary_SetOptions', argument 1 of type 'lldb::SBTypeSummary *'
in method 'SBTypeSummary_SetOptions', argument 2 of type 'uint32_t'
OOO:SBTypeSummary_GetDescription
in method 'SBTypeSummary_GetDescription', argument 1 of type 'lldb::SBTypeSummary *'
in method 'SBTypeSummary_GetDescription', argument 2 of type 'lldb::SBStream &'
invalid null reference in method 'SBTypeSummary_GetDescription', argument 2 of type 'lldb::SBStream &'
in method 'SBTypeSummary_GetDescription', argument 3 of type 'lldb::DescriptionLevel'
OO:SBTypeSummary___eq__
in method 'SBTypeSummary___eq__', argument 1 of type 'lldb::SBTypeSummary *'
in method 'SBTypeSummary___eq__', argument 2 of type 'lldb::SBTypeSummary &'
invalid null reference in method 'SBTypeSummary___eq__', argument 2 of type 'lldb::SBTypeSummary &'
OO:SBTypeSummary___ne__
in method 'SBTypeSummary___ne__', argument 1 of type 'lldb::SBTypeSummary *'
in method 'SBTypeSummary___ne__', argument 2 of type 'lldb::SBTypeSummary &'
invalid null reference in method 'SBTypeSummary___ne__', argument 2 of type 'lldb::SBTypeSummary &'
O:SBTypeSummary___str__
in method 'SBTypeSummary___str__', argument 1 of type 'lldb::SBTypeSummary *'
Wrong number or type of arguments for overloaded function 'SBTypeSynthetic_CreateWithClassName'.
  Possible C/C++ prototypes are:
    lldb::SBTypeSynthetic::CreateWithClassName(char const *,uint32_t)
    lldb::SBTypeSynthetic::CreateWithClassName(char const *)
O:SBTypeSynthetic_CreateWithClassName
in method 'SBTypeSynthetic_CreateWithClassName', argument 1 of type 'char const *'
OO:SBTypeSynthetic_CreateWithClassName
in method 'SBTypeSynthetic_CreateWithClassName', argument 2 of type 'uint32_t'
Wrong number or type of arguments for overloaded function 'SBTypeSynthetic_CreateWithScriptCode'.
  Possible C/C++ prototypes are:
    lldb::SBTypeSynthetic::CreateWithScriptCode(char const *,uint32_t)
    lldb::SBTypeSynthetic::CreateWithScriptCode(char const *)
O:SBTypeSynthetic_CreateWithScriptCode
in method 'SBTypeSynthetic_CreateWithScriptCode', argument 1 of type 'char const *'
OO:SBTypeSynthetic_CreateWithScriptCode
in method 'SBTypeSynthetic_CreateWithScriptCode', argument 2 of type 'uint32_t'
Wrong number or type of arguments for overloaded function 'new_SBTypeSynthetic'.
  Possible C/C++ prototypes are:
    lldb::SBTypeSynthetic::SBTypeSynthetic()
    lldb::SBTypeSynthetic::SBTypeSynthetic(lldb::SBTypeSynthetic const &)
:new_SBTypeSynthetic
O:new_SBTypeSynthetic
in method 'new_SBTypeSynthetic', argument 1 of type 'lldb::SBTypeSynthetic const &'
invalid null reference in method 'new_SBTypeSynthetic', argument 1 of type 'lldb::SBTypeSynthetic const &'
O:delete_SBTypeSynthetic
in method 'delete_SBTypeSynthetic', argument 1 of type 'lldb::SBTypeSynthetic *'
O:SBTypeSynthetic_IsValid
in method 'SBTypeSynthetic_IsValid', argument 1 of type 'lldb::SBTypeSynthetic const *'
O:SBTypeSynthetic___nonzero__
in method 'SBTypeSynthetic___nonzero__', argument 1 of type 'lldb::SBTypeSynthetic const *'
OO:SBTypeSynthetic_IsEqualTo
in method 'SBTypeSynthetic_IsEqualTo', argument 1 of type 'lldb::SBTypeSynthetic *'
in method 'SBTypeSynthetic_IsEqualTo', argument 2 of type 'lldb::SBTypeSynthetic &'
invalid null reference in method 'SBTypeSynthetic_IsEqualTo', argument 2 of type 'lldb::SBTypeSynthetic &'
O:SBTypeSynthetic_IsClassCode
in method 'SBTypeSynthetic_IsClassCode', argument 1 of type 'lldb::SBTypeSynthetic *'
O:SBTypeSynthetic_GetData
in method 'SBTypeSynthetic_GetData', argument 1 of type 'lldb::SBTypeSynthetic *'
OO:SBTypeSynthetic_SetClassName
in method 'SBTypeSynthetic_SetClassName', argument 1 of type 'lldb::SBTypeSynthetic *'
in method 'SBTypeSynthetic_SetClassName', argument 2 of type 'char const *'
OO:SBTypeSynthetic_SetClassCode
in method 'SBTypeSynthetic_SetClassCode', argument 1 of type 'lldb::SBTypeSynthetic *'
in method 'SBTypeSynthetic_SetClassCode', argument 2 of type 'char const *'
O:SBTypeSynthetic_GetOptions
in method 'SBTypeSynthetic_GetOptions', argument 1 of type 'lldb::SBTypeSynthetic *'
OO:SBTypeSynthetic_SetOptions
in method 'SBTypeSynthetic_SetOptions', argument 1 of type 'lldb::SBTypeSynthetic *'
in method 'SBTypeSynthetic_SetOptions', argument 2 of type 'uint32_t'
OOO:SBTypeSynthetic_GetDescription
in method 'SBTypeSynthetic_GetDescription', argument 1 of type 'lldb::SBTypeSynthetic *'
in method 'SBTypeSynthetic_GetDescription', argument 2 of type 'lldb::SBStream &'
invalid null reference in method 'SBTypeSynthetic_GetDescription', argument 2 of type 'lldb::SBStream &'
in method 'SBTypeSynthetic_GetDescription', argument 3 of type 'lldb::DescriptionLevel'
OO:SBTypeSynthetic___eq__
in method 'SBTypeSynthetic___eq__', argument 1 of type 'lldb::SBTypeSynthetic *'
in method 'SBTypeSynthetic___eq__', argument 2 of type 'lldb::SBTypeSynthetic &'
invalid null reference in method 'SBTypeSynthetic___eq__', argument 2 of type 'lldb::SBTypeSynthetic &'
OO:SBTypeSynthetic___ne__
in method 'SBTypeSynthetic___ne__', argument 1 of type 'lldb::SBTypeSynthetic *'
in method 'SBTypeSynthetic___ne__', argument 2 of type 'lldb::SBTypeSynthetic &'
invalid null reference in method 'SBTypeSynthetic___ne__', argument 2 of type 'lldb::SBTypeSynthetic &'
O:SBTypeSynthetic___str__
in method 'SBTypeSynthetic___str__', argument 1 of type 'lldb::SBTypeSynthetic *'
Wrong number or type of arguments for overloaded function 'new_SBValue'.
  Possible C/C++ prototypes are:
    lldb::SBValue::SBValue()
    lldb::SBValue::SBValue(lldb::SBValue const &)
:new_SBValue
O:new_SBValue
in method 'new_SBValue', argument 1 of type 'lldb::SBValue const &'
invalid null reference in method 'new_SBValue', argument 1 of type 'lldb::SBValue const &'
O:delete_SBValue
in method 'delete_SBValue', argument 1 of type 'lldb::SBValue *'
O:SBValue_IsValid
in method 'SBValue_IsValid', argument 1 of type 'lldb::SBValue *'
O:SBValue___nonzero__
in method 'SBValue___nonzero__', argument 1 of type 'lldb::SBValue const *'
O:SBValue_Clear
in method 'SBValue_Clear', argument 1 of type 'lldb::SBValue *'
O:SBValue_GetError
in method 'SBValue_GetError', argument 1 of type 'lldb::SBValue *'
O:SBValue_GetID
in method 'SBValue_GetID', argument 1 of type 'lldb::SBValue *'
O:SBValue_GetName
in method 'SBValue_GetName', argument 1 of type 'lldb::SBValue *'
O:SBValue_GetTypeName
in method 'SBValue_GetTypeName', argument 1 of type 'lldb::SBValue *'
O:SBValue_GetDisplayTypeName
in method 'SBValue_GetDisplayTypeName', argument 1 of type 'lldb::SBValue *'
O:SBValue_GetByteSize
in method 'SBValue_GetByteSize', argument 1 of type 'lldb::SBValue *'
O:SBValue_IsInScope
in method 'SBValue_IsInScope', argument 1 of type 'lldb::SBValue *'
O:SBValue_GetFormat
in method 'SBValue_GetFormat', argument 1 of type 'lldb::SBValue *'
OO:SBValue_SetFormat
in method 'SBValue_SetFormat', argument 1 of type 'lldb::SBValue *'
in method 'SBValue_SetFormat', argument 2 of type 'lldb::Format'
O:SBValue_GetValue
in method 'SBValue_GetValue', argument 1 of type 'lldb::SBValue *'
Wrong number or type of arguments for overloaded function 'SBValue_GetValueAsSigned'.
  Possible C/C++ prototypes are:
    lldb::SBValue::GetValueAsSigned(lldb::SBError &,int64_t)
    lldb::SBValue::GetValueAsSigned(lldb::SBError &)
    lldb::SBValue::GetValueAsSigned(int64_t)
    lldb::SBValue::GetValueAsSigned()
O:SBValue_GetValueAsSigned
in method 'SBValue_GetValueAsSigned', argument 1 of type 'lldb::SBValue *'
OO:SBValue_GetValueAsSigned
in method 'SBValue_GetValueAsSigned', argument 2 of type 'lldb::SBError &'
invalid null reference in method 'SBValue_GetValueAsSigned', argument 2 of type 'lldb::SBError &'
in method 'SBValue_GetValueAsSigned', argument 2 of type 'int64_t'
OOO:SBValue_GetValueAsSigned
in method 'SBValue_GetValueAsSigned', argument 3 of type 'int64_t'
Wrong number or type of arguments for overloaded function 'SBValue_GetValueAsUnsigned'.
  Possible C/C++ prototypes are:
    lldb::SBValue::GetValueAsUnsigned(lldb::SBError &,uint64_t)
    lldb::SBValue::GetValueAsUnsigned(lldb::SBError &)
    lldb::SBValue::GetValueAsUnsigned(uint64_t)
    lldb::SBValue::GetValueAsUnsigned()
O:SBValue_GetValueAsUnsigned
in method 'SBValue_GetValueAsUnsigned', argument 1 of type 'lldb::SBValue *'
OO:SBValue_GetValueAsUnsigned
in method 'SBValue_GetValueAsUnsigned', argument 2 of type 'lldb::SBError &'
invalid null reference in method 'SBValue_GetValueAsUnsigned', argument 2 of type 'lldb::SBError &'
in method 'SBValue_GetValueAsUnsigned', argument 2 of type 'uint64_t'
OOO:SBValue_GetValueAsUnsigned
in method 'SBValue_GetValueAsUnsigned', argument 3 of type 'uint64_t'
O:SBValue_GetValueAsAddress
in method 'SBValue_GetValueAsAddress', argument 1 of type 'lldb::SBValue *'
O:SBValue_GetValueType
in method 'SBValue_GetValueType', argument 1 of type 'lldb::SBValue *'
O:SBValue_GetValueDidChange
in method 'SBValue_GetValueDidChange', argument 1 of type 'lldb::SBValue *'
Wrong number or type of arguments for overloaded function 'SBValue_GetSummary'.
  Possible C/C++ prototypes are:
    lldb::SBValue::GetSummary()
    lldb::SBValue::GetSummary(lldb::SBStream &,lldb::SBTypeSummaryOptions &)
O:SBValue_GetSummary
in method 'SBValue_GetSummary', argument 1 of type 'lldb::SBValue *'
OOO:SBValue_GetSummary
in method 'SBValue_GetSummary', argument 2 of type 'lldb::SBStream &'
invalid null reference in method 'SBValue_GetSummary', argument 2 of type 'lldb::SBStream &'
in method 'SBValue_GetSummary', argument 3 of type 'lldb::SBTypeSummaryOptions &'
invalid null reference in method 'SBValue_GetSummary', argument 3 of type 'lldb::SBTypeSummaryOptions &'
O:SBValue_GetObjectDescription
in method 'SBValue_GetObjectDescription', argument 1 of type 'lldb::SBValue *'
O:SBValue_GetTypeValidatorResult
in method 'SBValue_GetTypeValidatorResult', argument 1 of type 'lldb::SBValue *'
OO:SBValue_GetDynamicValue
in method 'SBValue_GetDynamicValue', argument 1 of type 'lldb::SBValue *'
in method 'SBValue_GetDynamicValue', argument 2 of type 'lldb::DynamicValueType'
O:SBValue_GetStaticValue
in method 'SBValue_GetStaticValue', argument 1 of type 'lldb::SBValue *'
O:SBValue_GetNonSyntheticValue
in method 'SBValue_GetNonSyntheticValue', argument 1 of type 'lldb::SBValue *'
O:SBValue_GetPreferDynamicValue
in method 'SBValue_GetPreferDynamicValue', argument 1 of type 'lldb::SBValue *'
OO:SBValue_SetPreferDynamicValue
in method 'SBValue_SetPreferDynamicValue', argument 1 of type 'lldb::SBValue *'
in method 'SBValue_SetPreferDynamicValue', argument 2 of type 'lldb::DynamicValueType'
O:SBValue_GetPreferSyntheticValue
in method 'SBValue_GetPreferSyntheticValue', argument 1 of type 'lldb::SBValue *'
OO:SBValue_SetPreferSyntheticValue
in method 'SBValue_SetPreferSyntheticValue', argument 1 of type 'lldb::SBValue *'
in method 'SBValue_SetPreferSyntheticValue', argument 2 of type 'bool'
O:SBValue_IsDynamic
in method 'SBValue_IsDynamic', argument 1 of type 'lldb::SBValue *'
O:SBValue_IsSynthetic
in method 'SBValue_IsSynthetic', argument 1 of type 'lldb::SBValue *'
O:SBValue_IsSyntheticChildrenGenerated
in method 'SBValue_IsSyntheticChildrenGenerated', argument 1 of type 'lldb::SBValue *'
OO:SBValue_SetSyntheticChildrenGenerated
in method 'SBValue_SetSyntheticChildrenGenerated', argument 1 of type 'lldb::SBValue *'
in method 'SBValue_SetSyntheticChildrenGenerated', argument 2 of type 'bool'
O:SBValue_GetLocation
in method 'SBValue_GetLocation', argument 1 of type 'lldb::SBValue *'
Wrong number or type of arguments for overloaded function 'SBValue_SetValueFromCString'.
  Possible C/C++ prototypes are:
    lldb::SBValue::SetValueFromCString(char const *)
    lldb::SBValue::SetValueFromCString(char const *,lldb::SBError &)
OO:SBValue_SetValueFromCString
in method 'SBValue_SetValueFromCString', argument 1 of type 'lldb::SBValue *'
in method 'SBValue_SetValueFromCString', argument 2 of type 'char const *'
OOO:SBValue_SetValueFromCString
in method 'SBValue_SetValueFromCString', argument 3 of type 'lldb::SBError &'
invalid null reference in method 'SBValue_SetValueFromCString', argument 3 of type 'lldb::SBError &'
O:SBValue_GetTypeFormat
in method 'SBValue_GetTypeFormat', argument 1 of type 'lldb::SBValue *'
O:SBValue_GetTypeSummary
in method 'SBValue_GetTypeSummary', argument 1 of type 'lldb::SBValue *'
O:SBValue_GetTypeFilter
in method 'SBValue_GetTypeFilter', argument 1 of type 'lldb::SBValue *'
O:SBValue_GetTypeSynthetic
in method 'SBValue_GetTypeSynthetic', argument 1 of type 'lldb::SBValue *'
Wrong number or type of arguments for overloaded function 'SBValue_GetChildAtIndex'.
  Possible C/C++ prototypes are:
    lldb::SBValue::GetChildAtIndex(uint32_t)
    lldb::SBValue::GetChildAtIndex(uint32_t,lldb::DynamicValueType,bool)
OO:SBValue_GetChildAtIndex
in method 'SBValue_GetChildAtIndex', argument 1 of type 'lldb::SBValue *'
in method 'SBValue_GetChildAtIndex', argument 2 of type 'uint32_t'
OOOO:SBValue_GetChildAtIndex
in method 'SBValue_GetChildAtIndex', argument 3 of type 'lldb::DynamicValueType'
in method 'SBValue_GetChildAtIndex', argument 4 of type 'bool'
OOOO:SBValue_CreateChildAtOffset
in method 'SBValue_CreateChildAtOffset', argument 1 of type 'lldb::SBValue *'
in method 'SBValue_CreateChildAtOffset', argument 2 of type 'char const *'
in method 'SBValue_CreateChildAtOffset', argument 3 of type 'uint32_t'
in method 'SBValue_CreateChildAtOffset', argument 4 of type 'lldb::SBType'
invalid null reference in method 'SBValue_CreateChildAtOffset', argument 4 of type 'lldb::SBType'
OO:SBValue_Cast
in method 'SBValue_Cast', argument 1 of type 'lldb::SBValue *'
in method 'SBValue_Cast', argument 2 of type 'lldb::SBType'
invalid null reference in method 'SBValue_Cast', argument 2 of type 'lldb::SBType'
Wrong number or type of arguments for overloaded function 'SBValue_CreateValueFromExpression'.
  Possible C/C++ prototypes are:
    lldb::SBValue::CreateValueFromExpression(char const *,char const *)
    lldb::SBValue::CreateValueFromExpression(char const *,char const *,lldb::SBExpressionOptions &)
OOO:SBValue_CreateValueFromExpression
in method 'SBValue_CreateValueFromExpression', argument 1 of type 'lldb::SBValue *'
in method 'SBValue_CreateValueFromExpression', argument 2 of type 'char const *'
in method 'SBValue_CreateValueFromExpression', argument 3 of type 'char const *'
OOOO:SBValue_CreateValueFromExpression
in method 'SBValue_CreateValueFromExpression', argument 4 of type 'lldb::SBExpressionOptions &'
invalid null reference in method 'SBValue_CreateValueFromExpression', argument 4 of type 'lldb::SBExpressionOptions &'
OOOO:SBValue_CreateValueFromAddress
in method 'SBValue_CreateValueFromAddress', argument 1 of type 'lldb::SBValue *'
in method 'SBValue_CreateValueFromAddress', argument 2 of type 'char const *'
in method 'SBValue_CreateValueFromAddress', argument 3 of type 'lldb::addr_t'
in method 'SBValue_CreateValueFromAddress', argument 4 of type 'lldb::SBType'
invalid null reference in method 'SBValue_CreateValueFromAddress', argument 4 of type 'lldb::SBType'
OOOO:SBValue_CreateValueFromData
in method 'SBValue_CreateValueFromData', argument 1 of type 'lldb::SBValue *'
in method 'SBValue_CreateValueFromData', argument 2 of type 'char const *'
in method 'SBValue_CreateValueFromData', argument 3 of type 'lldb::SBData'
invalid null reference in method 'SBValue_CreateValueFromData', argument 3 of type 'lldb::SBData'
in method 'SBValue_CreateValueFromData', argument 4 of type 'lldb::SBType'
invalid null reference in method 'SBValue_CreateValueFromData', argument 4 of type 'lldb::SBType'
O:SBValue_GetType
in method 'SBValue_GetType', argument 1 of type 'lldb::SBValue *'
OO:SBValue_GetIndexOfChildWithName
in method 'SBValue_GetIndexOfChildWithName', argument 1 of type 'lldb::SBValue *'
in method 'SBValue_GetIndexOfChildWithName', argument 2 of type 'char const *'
Wrong number or type of arguments for overloaded function 'SBValue_GetChildMemberWithName'.
  Possible C/C++ prototypes are:
    lldb::SBValue::GetChildMemberWithName(char const *)
    lldb::SBValue::GetChildMemberWithName(char const *,lldb::DynamicValueType)
OO:SBValue_GetChildMemberWithName
in method 'SBValue_GetChildMemberWithName', argument 1 of type 'lldb::SBValue *'
in method 'SBValue_GetChildMemberWithName', argument 2 of type 'char const *'
OOO:SBValue_GetChildMemberWithName
in method 'SBValue_GetChildMemberWithName', argument 3 of type 'lldb::DynamicValueType'
OO:SBValue_GetValueForExpressionPath
in method 'SBValue_GetValueForExpressionPath', argument 1 of type 'lldb::SBValue *'
in method 'SBValue_GetValueForExpressionPath', argument 2 of type 'char const *'
O:SBValue_GetDeclaration
in method 'SBValue_GetDeclaration', argument 1 of type 'lldb::SBValue *'
O:SBValue_MightHaveChildren
in method 'SBValue_MightHaveChildren', argument 1 of type 'lldb::SBValue *'
O:SBValue_IsRuntimeSupportValue
in method 'SBValue_IsRuntimeSupportValue', argument 1 of type 'lldb::SBValue *'
Wrong number or type of arguments for overloaded function 'SBValue_GetNumChildren'.
  Possible C/C++ prototypes are:
    lldb::SBValue::GetNumChildren()
    lldb::SBValue::GetNumChildren(uint32_t)
O:SBValue_GetNumChildren
in method 'SBValue_GetNumChildren', argument 1 of type 'lldb::SBValue *'
OO:SBValue_GetNumChildren
in method 'SBValue_GetNumChildren', argument 2 of type 'uint32_t'
O:SBValue_GetOpaqueType
in method 'SBValue_GetOpaqueType', argument 1 of type 'lldb::SBValue *'
O:SBValue_Dereference
in method 'SBValue_Dereference', argument 1 of type 'lldb::SBValue *'
O:SBValue_AddressOf
in method 'SBValue_AddressOf', argument 1 of type 'lldb::SBValue *'
O:SBValue_TypeIsPointerType
in method 'SBValue_TypeIsPointerType', argument 1 of type 'lldb::SBValue *'
O:SBValue_GetTarget
in method 'SBValue_GetTarget', argument 1 of type 'lldb::SBValue *'
O:SBValue_GetProcess
in method 'SBValue_GetProcess', argument 1 of type 'lldb::SBValue *'
O:SBValue_GetThread
in method 'SBValue_GetThread', argument 1 of type 'lldb::SBValue *'
O:SBValue_GetFrame
in method 'SBValue_GetFrame', argument 1 of type 'lldb::SBValue *'
OOOOO:SBValue_Watch
in method 'SBValue_Watch', argument 1 of type 'lldb::SBValue *'
in method 'SBValue_Watch', argument 2 of type 'bool'
in method 'SBValue_Watch', argument 3 of type 'bool'
in method 'SBValue_Watch', argument 4 of type 'bool'
in method 'SBValue_Watch', argument 5 of type 'lldb::SBError &'
invalid null reference in method 'SBValue_Watch', argument 5 of type 'lldb::SBError &'
OOOOO:SBValue_WatchPointee
in method 'SBValue_WatchPointee', argument 1 of type 'lldb::SBValue *'
in method 'SBValue_WatchPointee', argument 2 of type 'bool'
in method 'SBValue_WatchPointee', argument 3 of type 'bool'
in method 'SBValue_WatchPointee', argument 4 of type 'bool'
in method 'SBValue_WatchPointee', argument 5 of type 'lldb::SBError &'
invalid null reference in method 'SBValue_WatchPointee', argument 5 of type 'lldb::SBError &'
OO:SBValue_GetDescription
in method 'SBValue_GetDescription', argument 1 of type 'lldb::SBValue *'
in method 'SBValue_GetDescription', argument 2 of type 'lldb::SBStream &'
invalid null reference in method 'SBValue_GetDescription', argument 2 of type 'lldb::SBStream &'
Wrong number or type of arguments for overloaded function 'SBValue_GetPointeeData'.
  Possible C/C++ prototypes are:
    lldb::SBValue::GetPointeeData(uint32_t,uint32_t)
    lldb::SBValue::GetPointeeData(uint32_t)
    lldb::SBValue::GetPointeeData()
O:SBValue_GetPointeeData
in method 'SBValue_GetPointeeData', argument 1 of type 'lldb::SBValue *'
OO:SBValue_GetPointeeData
in method 'SBValue_GetPointeeData', argument 2 of type 'uint32_t'
OOO:SBValue_GetPointeeData
in method 'SBValue_GetPointeeData', argument 3 of type 'uint32_t'
O:SBValue_GetData
in method 'SBValue_GetData', argument 1 of type 'lldb::SBValue *'
OOO:SBValue_SetData
in method 'SBValue_SetData', argument 1 of type 'lldb::SBValue *'
in method 'SBValue_SetData', argument 2 of type 'lldb::SBData &'
invalid null reference in method 'SBValue_SetData', argument 2 of type 'lldb::SBData &'
in method 'SBValue_SetData', argument 3 of type 'lldb::SBError &'
invalid null reference in method 'SBValue_SetData', argument 3 of type 'lldb::SBError &'
O:SBValue_GetLoadAddress
in method 'SBValue_GetLoadAddress', argument 1 of type 'lldb::SBValue *'
O:SBValue_GetAddress
in method 'SBValue_GetAddress', argument 1 of type 'lldb::SBValue *'
O:SBValue_Persist
in method 'SBValue_Persist', argument 1 of type 'lldb::SBValue *'
Wrong number or type of arguments for overloaded function 'SBValue_GetExpressionPath'.
  Possible C/C++ prototypes are:
    lldb::SBValue::GetExpressionPath(lldb::SBStream &)
    lldb::SBValue::GetExpressionPath(lldb::SBStream &,bool)
OO:SBValue_GetExpressionPath
in method 'SBValue_GetExpressionPath', argument 1 of type 'lldb::SBValue *'
in method 'SBValue_GetExpressionPath', argument 2 of type 'lldb::SBStream &'
invalid null reference in method 'SBValue_GetExpressionPath', argument 2 of type 'lldb::SBStream &'
OOO:SBValue_GetExpressionPath
in method 'SBValue_GetExpressionPath', argument 3 of type 'bool'
O:SBValue___str__
in method 'SBValue___str__', argument 1 of type 'lldb::SBValue *'
Wrong number or type of arguments for overloaded function 'new_SBValueList'.
  Possible C/C++ prototypes are:
    lldb::SBValueList::SBValueList()
    lldb::SBValueList::SBValueList(lldb::SBValueList const &)
:new_SBValueList
O:new_SBValueList
in method 'new_SBValueList', argument 1 of type 'lldb::SBValueList const &'
invalid null reference in method 'new_SBValueList', argument 1 of type 'lldb::SBValueList const &'
O:delete_SBValueList
in method 'delete_SBValueList', argument 1 of type 'lldb::SBValueList *'
O:SBValueList_IsValid
in method 'SBValueList_IsValid', argument 1 of type 'lldb::SBValueList const *'
O:SBValueList___nonzero__
in method 'SBValueList___nonzero__', argument 1 of type 'lldb::SBValueList const *'
O:SBValueList_Clear
in method 'SBValueList_Clear', argument 1 of type 'lldb::SBValueList *'
Wrong number or type of arguments for overloaded function 'SBValueList_Append'.
  Possible C/C++ prototypes are:
    lldb::SBValueList::Append(lldb::SBValue const &)
    lldb::SBValueList::Append(lldb::SBValueList const &)
OO:SBValueList_Append
in method 'SBValueList_Append', argument 1 of type 'lldb::SBValueList *'
in method 'SBValueList_Append', argument 2 of type 'lldb::SBValue const &'
invalid null reference in method 'SBValueList_Append', argument 2 of type 'lldb::SBValue const &'
in method 'SBValueList_Append', argument 2 of type 'lldb::SBValueList const &'
invalid null reference in method 'SBValueList_Append', argument 2 of type 'lldb::SBValueList const &'
O:SBValueList_GetSize
in method 'SBValueList_GetSize', argument 1 of type 'lldb::SBValueList const *'
OO:SBValueList_GetValueAtIndex
in method 'SBValueList_GetValueAtIndex', argument 1 of type 'lldb::SBValueList const *'
in method 'SBValueList_GetValueAtIndex', argument 2 of type 'uint32_t'
OO:SBValueList_FindValueObjectByUID
in method 'SBValueList_FindValueObjectByUID', argument 1 of type 'lldb::SBValueList *'
in method 'SBValueList_FindValueObjectByUID', argument 2 of type 'lldb::user_id_t'
OO:SBValueList_GetFirstValueByName
in method 'SBValueList_GetFirstValueByName', argument 1 of type 'lldb::SBValueList const *'
in method 'SBValueList_GetFirstValueByName', argument 2 of type 'char const *'
O:SBValueList___str__
in method 'SBValueList___str__', argument 1 of type 'lldb::SBValueList *'
<empty> lldb.SBValueList()
Wrong number or type of arguments for overloaded function 'new_SBVariablesOptions'.
  Possible C/C++ prototypes are:
    lldb::SBVariablesOptions::SBVariablesOptions()
    lldb::SBVariablesOptions::SBVariablesOptions(lldb::SBVariablesOptions const &)
:new_SBVariablesOptions
O:new_SBVariablesOptions
in method 'new_SBVariablesOptions', argument 1 of type 'lldb::SBVariablesOptions const &'
invalid null reference in method 'new_SBVariablesOptions', argument 1 of type 'lldb::SBVariablesOptions const &'
O:delete_SBVariablesOptions
in method 'delete_SBVariablesOptions', argument 1 of type 'lldb::SBVariablesOptions *'
O:SBVariablesOptions_IsValid
in method 'SBVariablesOptions_IsValid', argument 1 of type 'lldb::SBVariablesOptions const *'
O:SBVariablesOptions___nonzero__
in method 'SBVariablesOptions___nonzero__', argument 1 of type 'lldb::SBVariablesOptions const *'
O:SBVariablesOptions_GetIncludeArguments
in method 'SBVariablesOptions_GetIncludeArguments', argument 1 of type 'lldb::SBVariablesOptions const *'
OO:SBVariablesOptions_SetIncludeArguments
in method 'SBVariablesOptions_SetIncludeArguments', argument 1 of type 'lldb::SBVariablesOptions *'
in method 'SBVariablesOptions_SetIncludeArguments', argument 2 of type 'bool'
OO:SBVariablesOptions_GetIncludeRecognizedArguments
in method 'SBVariablesOptions_GetIncludeRecognizedArguments', argument 1 of type 'lldb::SBVariablesOptions const *'
in method 'SBVariablesOptions_GetIncludeRecognizedArguments', argument 2 of type 'lldb::SBTarget const &'
invalid null reference in method 'SBVariablesOptions_GetIncludeRecognizedArguments', argument 2 of type 'lldb::SBTarget const &'
OO:SBVariablesOptions_SetIncludeRecognizedArguments
in method 'SBVariablesOptions_SetIncludeRecognizedArguments', argument 1 of type 'lldb::SBVariablesOptions *'
in method 'SBVariablesOptions_SetIncludeRecognizedArguments', argument 2 of type 'bool'
O:SBVariablesOptions_GetIncludeLocals
in method 'SBVariablesOptions_GetIncludeLocals', argument 1 of type 'lldb::SBVariablesOptions const *'
OO:SBVariablesOptions_SetIncludeLocals
in method 'SBVariablesOptions_SetIncludeLocals', argument 1 of type 'lldb::SBVariablesOptions *'
in method 'SBVariablesOptions_SetIncludeLocals', argument 2 of type 'bool'
O:SBVariablesOptions_GetIncludeStatics
in method 'SBVariablesOptions_GetIncludeStatics', argument 1 of type 'lldb::SBVariablesOptions const *'
OO:SBVariablesOptions_SetIncludeStatics
in method 'SBVariablesOptions_SetIncludeStatics', argument 1 of type 'lldb::SBVariablesOptions *'
in method 'SBVariablesOptions_SetIncludeStatics', argument 2 of type 'bool'
O:SBVariablesOptions_GetInScopeOnly
in method 'SBVariablesOptions_GetInScopeOnly', argument 1 of type 'lldb::SBVariablesOptions const *'
OO:SBVariablesOptions_SetInScopeOnly
in method 'SBVariablesOptions_SetInScopeOnly', argument 1 of type 'lldb::SBVariablesOptions *'
in method 'SBVariablesOptions_SetInScopeOnly', argument 2 of type 'bool'
O:SBVariablesOptions_GetIncludeRuntimeSupportValues
in method 'SBVariablesOptions_GetIncludeRuntimeSupportValues', argument 1 of type 'lldb::SBVariablesOptions const *'
OO:SBVariablesOptions_SetIncludeRuntimeSupportValues
in method 'SBVariablesOptions_SetIncludeRuntimeSupportValues', argument 1 of type 'lldb::SBVariablesOptions *'
in method 'SBVariablesOptions_SetIncludeRuntimeSupportValues', argument 2 of type 'bool'
O:SBVariablesOptions_GetUseDynamic
in method 'SBVariablesOptions_GetUseDynamic', argument 1 of type 'lldb::SBVariablesOptions const *'
OO:SBVariablesOptions_SetUseDynamic
in method 'SBVariablesOptions_SetUseDynamic', argument 1 of type 'lldb::SBVariablesOptions *'
in method 'SBVariablesOptions_SetUseDynamic', argument 2 of type 'lldb::DynamicValueType'
Wrong number or type of arguments for overloaded function 'new_SBWatchpoint'.
  Possible C/C++ prototypes are:
    lldb::SBWatchpoint::SBWatchpoint()
    lldb::SBWatchpoint::SBWatchpoint(lldb::SBWatchpoint const &)
:new_SBWatchpoint
O:new_SBWatchpoint
in method 'new_SBWatchpoint', argument 1 of type 'lldb::SBWatchpoint const &'
invalid null reference in method 'new_SBWatchpoint', argument 1 of type 'lldb::SBWatchpoint const &'
O:delete_SBWatchpoint
in method 'delete_SBWatchpoint', argument 1 of type 'lldb::SBWatchpoint *'
O:SBWatchpoint_IsValid
in method 'SBWatchpoint_IsValid', argument 1 of type 'lldb::SBWatchpoint *'
O:SBWatchpoint___nonzero__
in method 'SBWatchpoint___nonzero__', argument 1 of type 'lldb::SBWatchpoint const *'
O:SBWatchpoint_GetError
in method 'SBWatchpoint_GetError', argument 1 of type 'lldb::SBWatchpoint *'
O:SBWatchpoint_GetID
in method 'SBWatchpoint_GetID', argument 1 of type 'lldb::SBWatchpoint *'
O:SBWatchpoint_GetHardwareIndex
in method 'SBWatchpoint_GetHardwareIndex', argument 1 of type 'lldb::SBWatchpoint *'
O:SBWatchpoint_GetWatchAddress
in method 'SBWatchpoint_GetWatchAddress', argument 1 of type 'lldb::SBWatchpoint *'
O:SBWatchpoint_GetWatchSize
in method 'SBWatchpoint_GetWatchSize', argument 1 of type 'lldb::SBWatchpoint *'
OO:SBWatchpoint_SetEnabled
in method 'SBWatchpoint_SetEnabled', argument 1 of type 'lldb::SBWatchpoint *'
in method 'SBWatchpoint_SetEnabled', argument 2 of type 'bool'
O:SBWatchpoint_IsEnabled
in method 'SBWatchpoint_IsEnabled', argument 1 of type 'lldb::SBWatchpoint *'
O:SBWatchpoint_GetHitCount
in method 'SBWatchpoint_GetHitCount', argument 1 of type 'lldb::SBWatchpoint *'
O:SBWatchpoint_GetIgnoreCount
in method 'SBWatchpoint_GetIgnoreCount', argument 1 of type 'lldb::SBWatchpoint *'
OO:SBWatchpoint_SetIgnoreCount
in method 'SBWatchpoint_SetIgnoreCount', argument 1 of type 'lldb::SBWatchpoint *'
in method 'SBWatchpoint_SetIgnoreCount', argument 2 of type 'uint32_t'
O:SBWatchpoint_GetCondition
in method 'SBWatchpoint_GetCondition', argument 1 of type 'lldb::SBWatchpoint *'
OO:SBWatchpoint_SetCondition
in method 'SBWatchpoint_SetCondition', argument 1 of type 'lldb::SBWatchpoint *'
in method 'SBWatchpoint_SetCondition', argument 2 of type 'char const *'
OOO:SBWatchpoint_GetDescription
in method 'SBWatchpoint_GetDescription', argument 1 of type 'lldb::SBWatchpoint *'
in method 'SBWatchpoint_GetDescription', argument 2 of type 'lldb::SBStream &'
invalid null reference in method 'SBWatchpoint_GetDescription', argument 2 of type 'lldb::SBStream &'
in method 'SBWatchpoint_GetDescription', argument 3 of type 'lldb::DescriptionLevel'
O:SBWatchpoint_EventIsWatchpointEvent
in method 'SBWatchpoint_EventIsWatchpointEvent', argument 1 of type 'lldb::SBEvent const &'
invalid null reference in method 'SBWatchpoint_EventIsWatchpointEvent', argument 1 of type 'lldb::SBEvent const &'
O:SBWatchpoint_GetWatchpointEventTypeFromEvent
in method 'SBWatchpoint_GetWatchpointEventTypeFromEvent', argument 1 of type 'lldb::SBEvent const &'
invalid null reference in method 'SBWatchpoint_GetWatchpointEventTypeFromEvent', argument 1 of type 'lldb::SBEvent const &'
O:SBWatchpoint_GetWatchpointFromEvent
in method 'SBWatchpoint_GetWatchpointFromEvent', argument 1 of type 'lldb::SBEvent const &'
invalid null reference in method 'SBWatchpoint_GetWatchpointFromEvent', argument 1 of type 'lldb::SBEvent const &'
O:SBWatchpoint___str__
in method 'SBWatchpoint___str__', argument 1 of type 'lldb::SBWatchpoint *'
Wrong number or type of arguments for overloaded function 'new_SBUnixSignals'.
  Possible C/C++ prototypes are:
    lldb::SBUnixSignals::SBUnixSignals()
    lldb::SBUnixSignals::SBUnixSignals(lldb::SBUnixSignals const &)
:new_SBUnixSignals
O:new_SBUnixSignals
in method 'new_SBUnixSignals', argument 1 of type 'lldb::SBUnixSignals const &'
invalid null reference in method 'new_SBUnixSignals', argument 1 of type 'lldb::SBUnixSignals const &'
O:delete_SBUnixSignals
in method 'delete_SBUnixSignals', argument 1 of type 'lldb::SBUnixSignals *'
O:SBUnixSignals_Clear
in method 'SBUnixSignals_Clear', argument 1 of type 'lldb::SBUnixSignals *'
O:SBUnixSignals_IsValid
in method 'SBUnixSignals_IsValid', argument 1 of type 'lldb::SBUnixSignals const *'
O:SBUnixSignals___nonzero__
in method 'SBUnixSignals___nonzero__', argument 1 of type 'lldb::SBUnixSignals const *'
OO:SBUnixSignals_GetSignalAsCString
in method 'SBUnixSignals_GetSignalAsCString', argument 1 of type 'lldb::SBUnixSignals const *'
in method 'SBUnixSignals_GetSignalAsCString', argument 2 of type 'int32_t'
OO:SBUnixSignals_GetSignalNumberFromName
in method 'SBUnixSignals_GetSignalNumberFromName', argument 1 of type 'lldb::SBUnixSignals const *'
in method 'SBUnixSignals_GetSignalNumberFromName', argument 2 of type 'char const *'
OO:SBUnixSignals_GetShouldSuppress
in method 'SBUnixSignals_GetShouldSuppress', argument 1 of type 'lldb::SBUnixSignals const *'
in method 'SBUnixSignals_GetShouldSuppress', argument 2 of type 'int32_t'
OOO:SBUnixSignals_SetShouldSuppress
in method 'SBUnixSignals_SetShouldSuppress', argument 1 of type 'lldb::SBUnixSignals *'
in method 'SBUnixSignals_SetShouldSuppress', argument 2 of type 'int32_t'
in method 'SBUnixSignals_SetShouldSuppress', argument 3 of type 'bool'
OO:SBUnixSignals_GetShouldStop
in method 'SBUnixSignals_GetShouldStop', argument 1 of type 'lldb::SBUnixSignals const *'
in method 'SBUnixSignals_GetShouldStop', argument 2 of type 'int32_t'
OOO:SBUnixSignals_SetShouldStop
in method 'SBUnixSignals_SetShouldStop', argument 1 of type 'lldb::SBUnixSignals *'
in method 'SBUnixSignals_SetShouldStop', argument 2 of type 'int32_t'
in method 'SBUnixSignals_SetShouldStop', argument 3 of type 'bool'
OO:SBUnixSignals_GetShouldNotify
in method 'SBUnixSignals_GetShouldNotify', argument 1 of type 'lldb::SBUnixSignals const *'
in method 'SBUnixSignals_GetShouldNotify', argument 2 of type 'int32_t'
OOO:SBUnixSignals_SetShouldNotify
in method 'SBUnixSignals_SetShouldNotify', argument 1 of type 'lldb::SBUnixSignals *'
in method 'SBUnixSignals_SetShouldNotify', argument 2 of type 'int32_t'
in method 'SBUnixSignals_SetShouldNotify', argument 3 of type 'bool'
O:SBUnixSignals_GetNumSignals
in method 'SBUnixSignals_GetNumSignals', argument 1 of type 'lldb::SBUnixSignals const *'
OO:SBUnixSignals_GetSignalAtIndex
in method 'SBUnixSignals_GetSignalAtIndex', argument 1 of type 'lldb::SBUnixSignals const *'
in method 'SBUnixSignals_GetSignalAtIndex', argument 2 of type 'int32_t'
_p_FILE
FILE *
_p_bool
bool *
char *
_p_double
double *
_p_f_p_void__p_void
lldb::thread_func_t|void *(*)(void *)
_p_f_p_void_p_q_const__void_size_t__void
void (*)(void *,void const *,size_t)|lldb::SBCommunication::ReadThreadBytesReceived
_p_int
intptr_t *|int *|lldb::file_t *|int_least32_t *|int_fast32_t *|int32_t *|lldb::pipe_t *|lldb::watch_id_t *|lldb::socket_t *|lldb::break_id_t *|int_fast16_t *
_p_lldb__ConnectionStatus
enum lldb::ConnectionStatus *|lldb::ConnectionStatus *
_p_lldb__SBAddress
lldb::SBAddress *
_p_lldb__SBAttachInfo
lldb::SBAttachInfo *
_p_lldb__SBBlock
lldb::SBBlock *
_p_lldb__SBBreakpoint
lldb::SBBreakpoint *
_p_lldb__SBBreakpointList
lldb::SBBreakpointList *
_p_lldb__SBBreakpointLocation
lldb::SBBreakpointLocation *
_p_lldb__SBBreakpointName
lldb::SBBreakpointName *
_p_lldb__SBBroadcaster
lldb::SBBroadcaster *
_p_lldb__SBCommandInterpreter
lldb::SBCommandInterpreter *
_p_lldb__SBCommandInterpreterRunOptions
lldb::SBCommandInterpreterRunOptions *
_p_lldb__SBCommandReturnObject
lldb::SBCommandReturnObject *
_p_lldb__SBCommunication
lldb::SBCommunication *
_p_lldb__SBCompileUnit
lldb::SBCompileUnit *
_p_lldb__SBData
lldb::SBData *
_p_lldb__SBDebugger
lldb::SBDebugger *
_p_lldb__SBDeclaration
lldb::SBDeclaration *
_p_lldb__SBError
lldb::SBError *
_p_lldb__SBEvent
lldb::SBEvent *
_p_lldb__SBExecutionContext
lldb::SBExecutionContext *
_p_lldb__SBExpressionOptions
lldb::SBExpressionOptions *
_p_lldb__SBFileSpec
lldb::SBFileSpec *
_p_lldb__SBFileSpecList
lldb::SBFileSpecList *
_p_lldb__SBFrame
lldb::SBFrame *
_p_lldb__SBFunction
lldb::SBFunction *
_p_lldb__SBHostOS
lldb::SBHostOS *
_p_lldb__SBInstruction
lldb::SBInstruction *
_p_lldb__SBInstructionList
lldb::SBInstructionList *
_p_lldb__SBLanguageRuntime
lldb::SBLanguageRuntime *
_p_lldb__SBLaunchInfo
lldb::SBLaunchInfo *
_p_lldb__SBLineEntry
lldb::SBLineEntry *
_p_lldb__SBListener
lldb::SBListener *
_p_lldb__SBMemoryRegionInfo
lldb::SBMemoryRegionInfo *
_p_lldb__SBMemoryRegionInfoList
lldb::SBMemoryRegionInfoList *
_p_lldb__SBModule
lldb::SBModule *
_p_lldb__SBModuleSpec
lldb::SBModuleSpec *
_p_lldb__SBModuleSpecList
lldb::SBModuleSpecList *
_p_lldb__SBPlatform
lldb::SBPlatform *
_p_lldb__SBPlatformConnectOptions
lldb::SBPlatformConnectOptions *
_p_lldb__SBPlatformShellCommand
lldb::SBPlatformShellCommand *
_p_lldb__SBProcess
lldb::SBProcess *
_p_lldb__SBProcessInfo
lldb::SBProcessInfo *
_p_lldb__SBQueue
lldb::SBQueue *
_p_lldb__SBQueueItem
lldb::SBQueueItem *
_p_lldb__SBSection
lldb::SBSection *
_p_lldb__SBSourceManager
lldb::SBSourceManager *
_p_lldb__SBStream
lldb::SBStream *
_p_lldb__SBStringList
lldb::SBStringList *
_p_lldb__SBStructuredData
lldb::SBStructuredData *
_p_lldb__SBSymbol
lldb::SBSymbol *
_p_lldb__SBSymbolContext
lldb::SBSymbolContext *
_p_lldb__SBSymbolContextList
lldb::SBSymbolContextList *
_p_lldb__SBTarget
lldb::SBTarget *
_p_lldb__SBThread
lldb::SBThread *
_p_lldb__SBThreadCollection
lldb::SBThreadCollection *
_p_lldb__SBThreadPlan
lldb::SBThreadPlan *
_p_lldb__SBTrace
lldb::SBTrace *
_p_lldb__SBTraceOptions
lldb::SBTraceOptions *
_p_lldb__SBType
lldb::SBType *
_p_lldb__SBTypeCategory
lldb::SBTypeCategory *
_p_lldb__SBTypeEnumMember
lldb::SBTypeEnumMember *
_p_lldb__SBTypeEnumMemberList
lldb::SBTypeEnumMemberList *
_p_lldb__SBTypeFilter
lldb::SBTypeFilter *
_p_lldb__SBTypeFormat
lldb::SBTypeFormat *
_p_lldb__SBTypeList
lldb::SBTypeList *
_p_lldb__SBTypeMember
lldb::SBTypeMember *
_p_lldb__SBTypeMemberFunction
lldb::SBTypeMemberFunction *
_p_lldb__SBTypeNameSpecifier
lldb::SBTypeNameSpecifier *
_p_lldb__SBTypeSummary
lldb::SBTypeSummary *
_p_lldb__SBTypeSummaryOptions
lldb::SBTypeSummaryOptions *
_p_lldb__SBTypeSynthetic
lldb::SBTypeSynthetic *
_p_lldb__SBUnixSignals
lldb::SBUnixSignals *
_p_lldb__SBValue
lldb::SBValue *
_p_lldb__SBValueList
lldb::SBValueList *
_p_lldb__SBVariablesOptions
lldb::SBVariablesOptions *
_p_lldb__SBWatchpoint
lldb::SBWatchpoint *
_p_lldb_private__SharingPtrT_lldb_private__ValueObject_t
lldb::ValueObjectSP *|lldb_private::SharingPtr< lldb_private::ValueObject > *
_p_long_double
long double *
_p_long_long
int_least64_t *|int_fast64_t *|int64_t *|long long *|intmax_t *
_p_p_void
lldb::thread_result_t *|void **
_p_pthread_rwlock_t
pthread_rwlock_t *|lldb::rwlock_t *
_p_pthread_t
pthread_t *|lldb::thread_t *
_p_short
short *|int_least16_t *|int16_t *
_p_signed_char
signed char *|int_least8_t *|int_fast8_t *|int8_t *
_p_std__shared_ptrT_lldb_private__ABI_t
std::shared_ptr< lldb_private::ABI > *|lldb::ABISP *
_p_std__shared_ptrT_lldb_private__Baton_t
lldb::BatonSP *|std::shared_ptr< lldb_private::Baton > *
_p_std__shared_ptrT_lldb_private__Block_t
lldb::BlockSP *|std::shared_ptr< lldb_private::Block > *
_p_std__shared_ptrT_lldb_private__BreakpointLocation_t
lldb::BreakpointLocationSP *|std::shared_ptr< lldb_private::BreakpointLocation > *
_p_std__shared_ptrT_lldb_private__BreakpointResolver_t
std::shared_ptr< lldb_private::BreakpointResolver > *|lldb::BreakpointResolverSP *
_p_std__shared_ptrT_lldb_private__BreakpointSite_t
std::shared_ptr< lldb_private::BreakpointSite > *|lldb::BreakpointSiteSP *
_p_std__shared_ptrT_lldb_private__Breakpoint_t
lldb::BreakpointSP *|std::shared_ptr< lldb_private::Breakpoint > *
_p_std__shared_ptrT_lldb_private__BroadcasterManager_t
lldb::BroadcasterManagerSP *|std::shared_ptr< lldb_private::BroadcasterManager > *
_p_std__shared_ptrT_lldb_private__Broadcaster_t
std::shared_ptr< lldb_private::Broadcaster > *|lldb::BroadcasterSP *
_p_std__shared_ptrT_lldb_private__ClangASTImporter_t
std::shared_ptr< lldb_private::ClangASTImporter > *|lldb::ClangASTImporterSP *
_p_std__shared_ptrT_lldb_private__CommandObject_t
lldb::CommandObjectSP *|std::shared_ptr< lldb_private::CommandObject > *
_p_std__shared_ptrT_lldb_private__Communication_t
lldb::CommunicationSP *|std::shared_ptr< lldb_private::Communication > *
_p_std__shared_ptrT_lldb_private__CompileUnit_t
lldb::CompUnitSP *|std::shared_ptr< lldb_private::CompileUnit > *
_p_std__shared_ptrT_lldb_private__Connection_t
lldb::ConnectionSP *|std::shared_ptr< lldb_private::Connection > *
_p_std__shared_ptrT_lldb_private__DataBuffer_t
std::shared_ptr< lldb_private::DataBuffer > *|lldb::DataBufferSP *
_p_std__shared_ptrT_lldb_private__DataExtractor_t
std::shared_ptr< lldb_private::DataExtractor > *|lldb::DataExtractorSP *
_p_std__shared_ptrT_lldb_private__Debugger_t
std::shared_ptr< lldb_private::Debugger > *|lldb::DebuggerSP *
_p_std__shared_ptrT_lldb_private__Disassembler_t
std::shared_ptr< lldb_private::Disassembler > *|lldb::DisassemblerSP *
_p_std__shared_ptrT_lldb_private__DynamicLoader_t
std::shared_ptr< lldb_private::DynamicLoader > *|lldb::DynamicLoaderSP *
_p_std__shared_ptrT_lldb_private__EventDataStructuredData_t
lldb::EventDataStructuredDataSP *|std::shared_ptr< lldb_private::EventDataStructuredData > *
_p_std__shared_ptrT_lldb_private__EventData_t
lldb::EventDataSP *|std::shared_ptr< lldb_private::EventData > *
_p_std__shared_ptrT_lldb_private__Event_t
lldb::EventSP *|std::shared_ptr< lldb_private::Event > *
_p_std__shared_ptrT_lldb_private__ExecutionContextRef_t
std::shared_ptr< lldb_private::ExecutionContextRef > *|lldb::ExecutionContextRefSP *
_p_std__shared_ptrT_lldb_private__ExpressionVariable_t
std::shared_ptr< lldb_private::ExpressionVariable > *|lldb::ExpressionVariableSP *
_p_std__shared_ptrT_lldb_private__File_t
lldb::FileSP *|std::shared_ptr< lldb_private::File > *
_p_std__shared_ptrT_lldb_private__FuncUnwinders_t
std::shared_ptr< lldb_private::FuncUnwinders > *|lldb::FuncUnwindersSP *
_p_std__shared_ptrT_lldb_private__FunctionCaller_t
std::shared_ptr< lldb_private::FunctionCaller > *|lldb::FunctionCallerSP *
_p_std__shared_ptrT_lldb_private__Function_t
lldb::FunctionSP *|std::shared_ptr< lldb_private::Function > *
_p_std__shared_ptrT_lldb_private__IOHandler_t
std::shared_ptr< lldb_private::IOHandler > *|lldb::IOHandlerSP *
_p_std__shared_ptrT_lldb_private__IOObject_t
lldb::IOObjectSP *|std::shared_ptr< lldb_private::IOObject > *
_p_std__shared_ptrT_lldb_private__IRExecutionUnit_t
lldb::IRExecutionUnitSP *|std::shared_ptr< lldb_private::IRExecutionUnit > *
_p_std__shared_ptrT_lldb_private__InlineFunctionInfo_t
lldb::InlineFunctionInfoSP *|std::shared_ptr< lldb_private::InlineFunctionInfo > *
_p_std__shared_ptrT_lldb_private__Instruction_t
lldb::InstructionSP *|std::shared_ptr< lldb_private::Instruction > *
_p_std__shared_ptrT_lldb_private__InstrumentationRuntime_t
lldb::InstrumentationRuntimeSP *|std::shared_ptr< lldb_private::InstrumentationRuntime > *
_p_std__shared_ptrT_lldb_private__JITLoader_t
std::shared_ptr< lldb_private::JITLoader > *|lldb::JITLoaderSP *
_p_std__shared_ptrT_lldb_private__LanguageRuntime_t
std::shared_ptr< lldb_private::LanguageRuntime > *|lldb::LanguageRuntimeSP *
_p_std__shared_ptrT_lldb_private__LineTable_t
lldb::LineTableSP *|std::shared_ptr< lldb_private::LineTable > *
_p_std__shared_ptrT_lldb_private__Listener_t
std::shared_ptr< lldb_private::Listener > *|lldb::ListenerSP *
_p_std__shared_ptrT_lldb_private__MemoryHistory_t
lldb::MemoryHistorySP *|std::shared_ptr< lldb_private::MemoryHistory > *
_p_std__shared_ptrT_lldb_private__Module_t
lldb::ModuleSP *|std::shared_ptr< lldb_private::Module > *
_p_std__shared_ptrT_lldb_private__ObjectFileJITDelegate_t
lldb::ObjectFileJITDelegateSP *|std::shared_ptr< lldb_private::ObjectFileJITDelegate > *
_p_std__shared_ptrT_lldb_private__ObjectFile_t
lldb::ObjectFileSP *|std::shared_ptr< lldb_private::ObjectFile > *
_p_std__shared_ptrT_lldb_private__OptionValueArch_t
std::shared_ptr< lldb_private::OptionValueArch > *|lldb::OptionValueArchSP *
_p_std__shared_ptrT_lldb_private__OptionValueArgs_t
std::shared_ptr< lldb_private::OptionValueArgs > *|lldb::OptionValueArgsSP *
_p_std__shared_ptrT_lldb_private__OptionValueArray_t
std::shared_ptr< lldb_private::OptionValueArray > *|lldb::OptionValueArraySP *
_p_std__shared_ptrT_lldb_private__OptionValueBoolean_t
lldb::OptionValueBooleanSP *|std::shared_ptr< lldb_private::OptionValueBoolean > *
_p_std__shared_ptrT_lldb_private__OptionValueDictionary_t
lldb::OptionValueDictionarySP *|std::shared_ptr< lldb_private::OptionValueDictionary > *
_p_std__shared_ptrT_lldb_private__OptionValueFileSpecList_t
lldb::OptionValueFileSpecListSP *|std::shared_ptr< lldb_private::OptionValueFileSpecList > *
_p_std__shared_ptrT_lldb_private__OptionValueFileSpec_t
lldb::OptionValueFileSpecSP *|std::shared_ptr< lldb_private::OptionValueFileSpec > *
_p_std__shared_ptrT_lldb_private__OptionValueFormat_t
std::shared_ptr< lldb_private::OptionValueFormat > *|lldb::OptionValueFormatSP *
_p_std__shared_ptrT_lldb_private__OptionValuePathMappings_t
std::shared_ptr< lldb_private::OptionValuePathMappings > *|lldb::OptionValuePathMappingsSP *
_p_std__shared_ptrT_lldb_private__OptionValueProperties_t
lldb::OptionValuePropertiesSP *|std::shared_ptr< lldb_private::OptionValueProperties > *
_p_std__shared_ptrT_lldb_private__OptionValueRegex_t
std::shared_ptr< lldb_private::OptionValueRegex > *|lldb::OptionValueRegexSP *
_p_std__shared_ptrT_lldb_private__OptionValueSInt64_t
std::shared_ptr< lldb_private::OptionValueSInt64 > *|lldb::OptionValueSInt64SP *
_p_std__shared_ptrT_lldb_private__OptionValueString_t
std::shared_ptr< lldb_private::OptionValueString > *|lldb::OptionValueStringSP *
_p_std__shared_ptrT_lldb_private__OptionValueUInt64_t
std::shared_ptr< lldb_private::OptionValueUInt64 > *|lldb::OptionValueUInt64SP *
_p_std__shared_ptrT_lldb_private__OptionValueUUID_t
std::shared_ptr< lldb_private::OptionValueUUID > *|lldb::OptionValueUUIDSP *
_p_std__shared_ptrT_lldb_private__OptionValue_t
std::shared_ptr< lldb_private::OptionValue > *|lldb::OptionValueSP *
_p_std__shared_ptrT_lldb_private__Platform_t
std::shared_ptr< lldb_private::Platform > *|lldb::PlatformSP *
_p_std__shared_ptrT_lldb_private__ProcessAttachInfo_t
lldb::ProcessAttachInfoSP *|std::shared_ptr< lldb_private::ProcessAttachInfo > *
_p_std__shared_ptrT_lldb_private__ProcessLaunchInfo_t
lldb::ProcessLaunchInfoSP *|std::shared_ptr< lldb_private::ProcessLaunchInfo > *
_p_std__shared_ptrT_lldb_private__Process_t
lldb::ProcessSP *|std::shared_ptr< lldb_private::Process > *
_p_std__shared_ptrT_lldb_private__Property_t
lldb::PropertySP *|std::shared_ptr< lldb_private::Property > *
_p_std__shared_ptrT_lldb_private__QueueItem_t
std::shared_ptr< lldb_private::QueueItem > *|lldb::QueueItemSP *
_p_std__shared_ptrT_lldb_private__Queue_t
std::shared_ptr< lldb_private::Queue > *|lldb::QueueSP *
_p_std__shared_ptrT_lldb_private__REPL_t
lldb::REPLSP *|std::shared_ptr< lldb_private::REPL > *
_p_std__shared_ptrT_lldb_private__RecognizedStackFrame_t
lldb::RecognizedStackFrameSP *|std::shared_ptr< lldb_private::RecognizedStackFrame > *
_p_std__shared_ptrT_lldb_private__RegisterCheckpoint_t
std::shared_ptr< lldb_private::RegisterCheckpoint > *|lldb::RegisterCheckpointSP *
_p_std__shared_ptrT_lldb_private__RegisterContext_t
lldb::RegisterContextSP *|std::shared_ptr< lldb_private::RegisterContext > *
_p_std__shared_ptrT_lldb_private__RegularExpression_t
lldb::RegularExpressionSP *|std::shared_ptr< lldb_private::RegularExpression > *
_p_std__shared_ptrT_lldb_private__ScriptInterpreter_t
std::shared_ptr< lldb_private::ScriptInterpreter > *|lldb::ScriptInterpreterSP *
_p_std__shared_ptrT_lldb_private__ScriptSummaryFormat_t
lldb::ScriptSummaryFormatSP *|std::shared_ptr< lldb_private::ScriptSummaryFormat > *
_p_std__shared_ptrT_lldb_private__ScriptedSyntheticChildren_t
std::shared_ptr< lldb_private::ScriptedSyntheticChildren > *|lldb::ScriptedSyntheticChildrenSP *
_p_std__shared_ptrT_lldb_private__SearchFilter_t
std::shared_ptr< lldb_private::SearchFilter > *|lldb::SearchFilterSP *
_p_std__shared_ptrT_lldb_private__SectionLoadList_t
std::shared_ptr< lldb_private::SectionLoadList > *|lldb::SectionLoadListSP *
_p_std__shared_ptrT_lldb_private__Section_t
lldb::SectionSP *|std::shared_ptr< lldb_private::Section > *
_p_std__shared_ptrT_lldb_private__Settings_t
std::shared_ptr< lldb_private::Settings > *|lldb::SettingsSP *
_p_std__shared_ptrT_lldb_private__StackFrameList_t
std::shared_ptr< lldb_private::StackFrameList > *|lldb::StackFrameListSP *
_p_std__shared_ptrT_lldb_private__StackFrameRecognizer_t
std::shared_ptr< lldb_private::StackFrameRecognizer > *|lldb::StackFrameRecognizerSP *
_p_std__shared_ptrT_lldb_private__StackFrame_t
std::shared_ptr< lldb_private::StackFrame > *|lldb::StackFrameSP *
_p_std__shared_ptrT_lldb_private__StopInfo_t
lldb::StopInfoSP *|std::shared_ptr< lldb_private::StopInfo > *
_p_std__shared_ptrT_lldb_private__StoppointLocation_t
std::shared_ptr< lldb_private::StoppointLocation > *|lldb::StoppointLocationSP *
_p_std__shared_ptrT_lldb_private__StreamFile_t
lldb::StreamFileSP *|std::shared_ptr< lldb_private::StreamFile > *
_p_std__shared_ptrT_lldb_private__Stream_t
std::shared_ptr< lldb_private::Stream > *|lldb::StreamSP *
_p_std__shared_ptrT_lldb_private__StringSummaryFormat_t
lldb::StringTypeSummaryImplSP *|std::shared_ptr< lldb_private::StringSummaryFormat > *
_p_std__shared_ptrT_lldb_private__StructuredDataPlugin_t
lldb::StructuredDataPluginSP *|std::shared_ptr< lldb_private::StructuredDataPlugin > *
_p_std__shared_ptrT_lldb_private__SwiftASTContext_t
lldb::SwiftASTContextSP *|std::shared_ptr< lldb_private::SwiftASTContext > *
_p_std__shared_ptrT_lldb_private__SymbolContextSpecifier_t
lldb::SymbolContextSpecifierSP *|std::shared_ptr< lldb_private::SymbolContextSpecifier > *
_p_std__shared_ptrT_lldb_private__SymbolFileType_t
lldb::SymbolFileTypeSP *|std::shared_ptr< lldb_private::SymbolFileType > *
_p_std__shared_ptrT_lldb_private__SymbolFile_t
lldb::SymbolFileSP *|std::shared_ptr< lldb_private::SymbolFile > *
_p_std__shared_ptrT_lldb_private__SyntheticChildrenFrontEnd_t
lldb::SyntheticChildrenFrontEndSP *|std::shared_ptr< lldb_private::SyntheticChildrenFrontEnd > *
_p_std__shared_ptrT_lldb_private__SyntheticChildren_t
std::shared_ptr< lldb_private::SyntheticChildren > *|lldb::SyntheticChildrenSP *
_p_std__shared_ptrT_lldb_private__SystemRuntime_t
std::shared_ptr< lldb_private::SystemRuntime > *|lldb::SystemRuntimeSP *
_p_std__shared_ptrT_lldb_private__TargetProperties_t
std::shared_ptr< lldb_private::TargetProperties > *|lldb::TargetPropertiesSP *
_p_std__shared_ptrT_lldb_private__Target_t
std::shared_ptr< lldb_private::Target > *|lldb::TargetSP *
_p_std__shared_ptrT_lldb_private__ThreadCollection_t
std::shared_ptr< lldb_private::ThreadCollection > *|lldb::ThreadCollectionSP *
_p_std__shared_ptrT_lldb_private__ThreadPlanTracer_t
std::shared_ptr< lldb_private::ThreadPlanTracer > *|lldb::ThreadPlanTracerSP *
_p_std__shared_ptrT_lldb_private__ThreadPlan_t
lldb::ThreadPlanSP *|std::shared_ptr< lldb_private::ThreadPlan > *
_p_std__shared_ptrT_lldb_private__Thread_t
std::shared_ptr< lldb_private::Thread > *|lldb::ThreadSP *
_p_std__shared_ptrT_lldb_private__TraceOptions_t
std::shared_ptr< lldb_private::TraceOptions > *|lldb::TraceOptionsSP *
_p_std__shared_ptrT_lldb_private__TypeCategoryImpl_t
std::shared_ptr< lldb_private::TypeCategoryImpl > *|lldb::TypeCategoryImplSP *
_p_std__shared_ptrT_lldb_private__TypeEnumMemberImpl_t
lldb::TypeEnumMemberImplSP *|std::shared_ptr< lldb_private::TypeEnumMemberImpl > *
_p_std__shared_ptrT_lldb_private__TypeFilterImpl_t
lldb::TypeFilterImplSP *|std::shared_ptr< lldb_private::TypeFilterImpl > *
_p_std__shared_ptrT_lldb_private__TypeFormatImpl_t
lldb::TypeFormatImplSP *|std::shared_ptr< lldb_private::TypeFormatImpl > *
_p_std__shared_ptrT_lldb_private__TypeImpl_t
lldb::TypeImplSP *|std::shared_ptr< lldb_private::TypeImpl > *
_p_std__shared_ptrT_lldb_private__TypeMemberFunctionImpl_t
std::shared_ptr< lldb_private::TypeMemberFunctionImpl > *|lldb::TypeMemberFunctionImplSP *
_p_std__shared_ptrT_lldb_private__TypeNameSpecifierImpl_t
std::shared_ptr< lldb_private::TypeNameSpecifierImpl > *|lldb::TypeNameSpecifierImplSP *
_p_std__shared_ptrT_lldb_private__TypeSummaryImpl_t
lldb::TypeSummaryImplSP *|std::shared_ptr< lldb_private::TypeSummaryImpl > *
_p_std__shared_ptrT_lldb_private__TypeSummaryOptions_t
std::shared_ptr< lldb_private::TypeSummaryOptions > *|lldb::TypeSummaryOptionsSP *
_p_std__shared_ptrT_lldb_private__TypeSystem_t
std::shared_ptr< lldb_private::TypeSystem > *|lldb::TypeSystemSP *
_p_std__shared_ptrT_lldb_private__TypeValidatorImpl_t
lldb::TypeValidatorImplSP *|std::shared_ptr< lldb_private::TypeValidatorImpl > *
_p_std__shared_ptrT_lldb_private__Type_t
lldb::TypeSP *|std::shared_ptr< lldb_private::Type > *
_p_std__shared_ptrT_lldb_private__UnixSignals_t
lldb::UnixSignalsSP *|std::shared_ptr< lldb_private::UnixSignals > *
_p_std__shared_ptrT_lldb_private__UnwindAssembly_t
std::shared_ptr< lldb_private::UnwindAssembly > *|lldb::UnwindAssemblySP *
_p_std__shared_ptrT_lldb_private__UnwindPlan_t
lldb::UnwindPlanSP *|std::shared_ptr< lldb_private::UnwindPlan > *
_p_std__shared_ptrT_lldb_private__UserExpression_t
lldb::UserExpressionSP *|std::shared_ptr< lldb_private::UserExpression > *
_p_std__shared_ptrT_lldb_private__UtilityFunction_t
lldb::UtilityFunctionSP *|std::shared_ptr< lldb_private::UtilityFunction > *
_p_std__shared_ptrT_lldb_private__ValueList_t
std::shared_ptr< lldb_private::ValueList > *|lldb::ValueListSP *
_p_std__shared_ptrT_lldb_private__ValueObjectList_t
std::shared_ptr< lldb_private::ValueObjectList > *|lldb::ValueObjectListSP *
_p_std__shared_ptrT_lldb_private__Value_t
std::shared_ptr< lldb_private::Value > *|lldb::ValueSP *
_p_std__shared_ptrT_lldb_private__VariableList_t
std::shared_ptr< lldb_private::VariableList > *|lldb::VariableListSP *
_p_std__shared_ptrT_lldb_private__Variable_t
lldb::VariableSP *|std::shared_ptr< lldb_private::Variable > *
_p_std__shared_ptrT_lldb_private__Watchpoint_t
lldb::WatchpointSP *|std::shared_ptr< lldb_private::Watchpoint > *
_p_std__unique_ptrT_lldb_private__ClangASTContext_t
lldb::ClangASTContextUP *|std::unique_ptr< lldb_private::ClangASTContext > *
_p_std__unique_ptrT_lldb_private__ClangModulesDeclVendor_t
std::unique_ptr< lldb_private::ClangModulesDeclVendor > *|lldb::ClangModulesDeclVendorUP *
_p_std__unique_ptrT_lldb_private__ClangPersistentVariables_t
std::unique_ptr< lldb_private::ClangPersistentVariables > *|lldb::ClangPersistentVariablesUP *
_p_std__unique_ptrT_lldb_private__DynamicCheckerFunctions_t
lldb::DynamicCheckerFunctionsUP *|std::unique_ptr< lldb_private::DynamicCheckerFunctions > *
_p_std__unique_ptrT_lldb_private__DynamicLoader_t
lldb::DynamicLoaderUP *|std::unique_ptr< lldb_private::DynamicLoader > *
_p_std__unique_ptrT_lldb_private__JITLoaderList_t
lldb::JITLoaderListUP *|std::unique_ptr< lldb_private::JITLoaderList > *
_p_std__unique_ptrT_lldb_private__MemoryRegionInfo_t
std::unique_ptr< lldb_private::MemoryRegionInfo > *|lldb::MemoryRegionInfoUP *
_p_std__unique_ptrT_lldb_private__OperatingSystem_t
lldb::OperatingSystemUP *|std::unique_ptr< lldb_private::OperatingSystem > *
_p_std__unique_ptrT_lldb_private__ScriptInterpreter_t
std::unique_ptr< lldb_private::ScriptInterpreter > *|lldb::ScriptInterpreterUP *
_p_std__unique_ptrT_lldb_private__SectionList_t
lldb::SectionListUP *|std::unique_ptr< lldb_private::SectionList > *
_p_std__unique_ptrT_lldb_private__SourceManager_t
std::unique_ptr< lldb_private::SourceManager > *|lldb::SourceManagerUP *
_p_std__unique_ptrT_lldb_private__StackFrame_t
std::unique_ptr< lldb_private::StackFrame > *|lldb::StackFrameUP *
_p_std__unique_ptrT_lldb_private__StructuredDataImpl_t
std::unique_ptr< lldb_private::StructuredDataImpl > *|lldb::StructuredDataImplUP *
_p_std__unique_ptrT_lldb_private__SymbolVendor_t
std::unique_ptr< lldb_private::SymbolVendor > *|lldb::SymbolVendorUP *
_p_std__unique_ptrT_lldb_private__SystemRuntime_t
std::unique_ptr< lldb_private::SystemRuntime > *|lldb::SystemRuntimeUP *
_p_std__weak_ptrT_lldb_private__BreakpointLocation_t
std::weak_ptr< lldb_private::BreakpointLocation > *|lldb::BreakpointLocationWP *
_p_std__weak_ptrT_lldb_private__BreakpointSite_t
std::weak_ptr< lldb_private::BreakpointSite > *|lldb::BreakpointSiteWP *
_p_std__weak_ptrT_lldb_private__Breakpoint_t
std::weak_ptr< lldb_private::Breakpoint > *|lldb::BreakpointWP *
_p_std__weak_ptrT_lldb_private__BroadcasterManager_t
std::weak_ptr< lldb_private::BroadcasterManager > *|lldb::BroadcasterManagerWP *
_p_std__weak_ptrT_lldb_private__Debugger_t
std::weak_ptr< lldb_private::Debugger > *|lldb::DebuggerWP *
_p_std__weak_ptrT_lldb_private__Listener_t
std::weak_ptr< lldb_private::Listener > *|lldb::ListenerWP *
_p_std__weak_ptrT_lldb_private__Module_t
std::weak_ptr< lldb_private::Module > *|lldb::ModuleWP *
_p_std__weak_ptrT_lldb_private__ObjectFileJITDelegate_t
lldb::ObjectFileJITDelegateWP *|std::weak_ptr< lldb_private::ObjectFileJITDelegate > *
_p_std__weak_ptrT_lldb_private__ObjectFile_t
std::weak_ptr< lldb_private::ObjectFile > *|lldb::ObjectFileWP *
_p_std__weak_ptrT_lldb_private__OptionValue_t
std::weak_ptr< lldb_private::OptionValue > *|lldb::OptionValueWP *
_p_std__weak_ptrT_lldb_private__Process_t
std::weak_ptr< lldb_private::Process > *|lldb::ProcessWP *
_p_std__weak_ptrT_lldb_private__Queue_t
std::weak_ptr< lldb_private::Queue > *|lldb::QueueWP *
_p_std__weak_ptrT_lldb_private__Section_t
std::weak_ptr< lldb_private::Section > *|lldb::SectionWP *
_p_std__weak_ptrT_lldb_private__StackFrame_t
std::weak_ptr< lldb_private::StackFrame > *|lldb::StackFrameWP *
_p_std__weak_ptrT_lldb_private__Stream_t
std::weak_ptr< lldb_private::Stream > *|lldb::StreamWP *
_p_std__weak_ptrT_lldb_private__StructuredDataPlugin_t
lldb::StructuredDataPluginWP *|std::weak_ptr< lldb_private::StructuredDataPlugin > *
_p_std__weak_ptrT_lldb_private__SymbolFileType_t
std::weak_ptr< lldb_private::SymbolFileType > *|lldb::SymbolFileTypeWP *
_p_std__weak_ptrT_lldb_private__Target_t
std::weak_ptr< lldb_private::Target > *|lldb::TargetWP *
_p_std__weak_ptrT_lldb_private__Thread_t
std::weak_ptr< lldb_private::Thread > *|lldb::ThreadWP *
_p_std__weak_ptrT_lldb_private__Type_t
std::weak_ptr< lldb_private::Type > *|lldb::TypeWP *
_p_std__weak_ptrT_lldb_private__UnixSignals_t
std::weak_ptr< lldb_private::UnixSignals > *|lldb::UnixSignalsWP *
_p_unsigned_char
unsigned char *|uint_least8_t *|uint_fast8_t *|uint8_t *
_p_unsigned_int
uintptr_t *|uint_least32_t *|uint_fast32_t *|uint32_t *|unsigned int *|uint_fast16_t *
_p_unsigned_long_long
uint_least64_t *|uint_fast64_t *|uint64_t *|lldb::process_t *|unsigned long long *|lldb::addr_t *|lldb::offset_t *|lldb::queue_id_t *|lldb::user_id_t *|lldb::pid_t *|uintmax_t *|lldb::tid_t *
_p_unsigned_short
unsigned short *|uint_least16_t *|uint16_t *
_p_void
void *
swig_runtime_data4.type_pointer_capsule
swig_runtime_data4
type_pointer_capsule
\\\\\\\\\\\\\\\\s#
get_register_info
get_thread_info
get_register_data
create_thread
get_type_name
get_short_help
get_flags
get_long_help
/System/Library/Frameworks/Python.framework/Versions/2.7
update
has_children
get_value
get_recognized_arguments
Swig object carries a C/C++ instance pointer
