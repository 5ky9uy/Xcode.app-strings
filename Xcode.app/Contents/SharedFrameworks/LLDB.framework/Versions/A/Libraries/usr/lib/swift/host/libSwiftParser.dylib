DeclarationAttributeWithSpecialSyntax
AttributeArgumentMode
DifferentiabilityKind
SpecializeParameter
ExpectedTokenKind
AccessLevelModifier
 #$%&'(+,
;=PRZq
AvailabilityArgumentKind
DeclAttributes
LayoutConstraint
AccessorIntroducer
LabelText
ExpectedTokenKind
ImportKind
IfConfigContinuationClauseStartKeyword
ExprFlavor
PatternContext
CollectionKind
ExpectedTokenKind
Lookahead
BracketedTokens
SkippingState
CompilerSwiftParser
LoopProgressCondition
AccessLevelModifier
DeclNameOptions
CompilerSwiftParser
NominalTypeDeclarationTrait
PrimaryOrGenerics
CompilerSwiftParser
RawParameterTrait
RawParameterListTrait
ParameterSyntax
RawParameterClauseTrait
ParameterList
ParameterNames
CompilerSwiftParser
Parser
PatternStartTokens
ExpectedTokens
CompilerSwiftParser
PrepareForKeywordMatch
TokenSpec
CompilerSwiftParser
TokenSpecSet
AccessorKind
AccessorModifier
CanBeStatementStart
ContextualDeclKeyword
DeclarationStart
Operator
OperatorLike
PoundDeclarationStart
SwitchCaseStart
TypeSpecifier
ExpressionModifierKeyword
IfOrSwitch
ExpressionPrefixOperator
MatchingPatternStart
ParameterModifier
PrimaryExpressionStart
ExpressionStart
/8ISUamnvx
CompilerSwiftParser
RecoveryConsumptionHandle
CompilerSwiftParser
AsyncEffectSpecifier
ThrowsEffectSpecifier
EffectSpecifier
RawEffectSpecifiersTrait
MisspelledAsyncSpecifiers CorrectAsyncTokenKinds MisspelledThrowsTokenKinds CorrectThrowsTokenKinds
MisspelledAsyncSpecifiers
CorrectAsyncTokenKinds
MisspelledThrowsTokenKinds
CorrectThrowsTokenKinds
StatementLabel
BindingKind
NotReturnExprStart
CompilerSwiftParser
StringLiteralExpressionIndentationChecker
CompilerSwiftParser
UnexpectedNodesCombinable
CompilerSwiftParser
TokenConsumer
Token
TokenConsumptionHandle
CompilerSwiftParser
TokenPrecedence
CompilerSwiftParser
TriviaParser
ExtraneousSpecifier
CompilerSwiftParser
DeclarationModifier
CompilerSwiftParser
SyntaxParseable
TypeAttribute
CompilerSwiftParser
StringLiteralKind
State
StateStack
LexingDiagnostic
Cursor
Position
StateTransition
Result
CharacterByte
NewlinePresence
TriviaLexingMode
TriviaResult
CharacterLex
EscapedCharacterLex
UnknownCharactersClassification
ConflictMarker
Lexeme
Flags
LexemeSequence
CompilerSwiftParser
Lexer
CompilerSwiftParser
RegexLiteralLexemes
Element
Kind
Builder
RegexLiteralLexer
$ss12CaseIterableP
8operator_AASg3rhstSg
_AASgt
8operator_AASg3rhst
_AAtSg
_AAt
3key_
Sg21unexpectedBeforeColon
5colonAA5valuet
$s19CompilerSwiftParser13TokenConsumerP
5start_t
_AAt
$ss9OptionSetP
$sSY
$ss10SetAlgebraP
$ss25ExpressibleByArrayLiteralP
$s19CompilerSwiftParser27NominalTypeDeclarationTraitP
$s19CompilerSwiftParser21RawParameterListTraitP
$s19CompilerSwiftParser23RawParameterClauseTraitP
$s19CompilerSwiftParser17RawParameterTraitP
15ParameterSyntax
13ParameterList
Sg_ABt
$s19CompilerSwiftParser12TokenSpecSetP
$s19CompilerSwiftParser24RawEffectSpecifiersTraitP
22CorrectAsyncTokenKinds
23CorrectThrowsTokenKinds
25MisspelledAsyncSpecifiers
26MisspelledThrowsTokenKinds
Sg_ABt
G25unexpectedBeforeOpenQuote_AA04openD0Say
G8segmentsAB0ab5CloseD0AA05closeD0t
Si6offset_
7elementt
Si6offset_
7elementtSg
$s19CompilerSwiftParser25UnexpectedNodesCombinableP
16closingDelimiter_t
$s19CompilerSwiftParser15SyntaxParseableP
5index_
7lexemest
$ss33ExpressibleByUnicodeScalarLiteralP
$ss27ExpressibleByIntegerLiteralP
Si15delimiterLength_t
4kind_Si15delimiterLengtht
Sb11isRawString_t
17stringLiteralKind_t
17stringLiteralKind_Si10parenCountt
5index_SPy
G7lexemest
8newState_t
5error_t
SaySSG
ySSG
$sSt
$sST
$sSk
$sSK
$sSl
SiSg
8slashEnd_Si9numPoundstSg
5IndexSlQzz_x_SlRz
7ElementSTRtzlXX
visibility
metadata
AnyObject
/AppleInternal/Library/BuildRoots/a06d5d33-8fa4-11ee-bc94-daeed27c156b/Library/Caches/com.apple.xbs/Sources/lldb/swift-syntax/Sources/SwiftParser/Expressions.swift
elements must have a even number of elements
Couldn't be a trailing closure
SwiftParser/Expressions.swift
Postfix #if should only have one element
/AppleInternal/Library/BuildRoots/a06d5d33-8fa4-11ee-bc94-daeed27c156b/Library/Caches/com.apple.xbs/Sources/lldb/swift-syntax/Sources/SwiftParser/Lookahead.swift
not checking a brace?
/AppleInternal/Library/BuildRoots/a06d5d33-8fa4-11ee-bc94-daeed27c156b/Library/Caches/com.apple.xbs/Sources/lldb/swift-syntax/Sources/SwiftParser/Names.swift
/AppleInternal/Library/BuildRoots/a06d5d33-8fa4-11ee-bc94-daeed27c156b/Library/Caches/com.apple.xbs/Sources/lldb/swift-syntax/Sources/SwiftParser/Parser.swift
/AppleInternal/Library/BuildRoots/a06d5d33-8fa4-11ee-bc94-daeed27c156b/Library/Caches/com.apple.xbs/Sources/lldb/swift-syntax/Sources/SwiftParser/TokenSpec.swift
To create a TokenSpec for a keyword use the initializer that takes a keyword
match handle 
/AppleInternal/Library/BuildRoots/a06d5d33-8fa4-11ee-bc94-daeed27c156b/Library/Caches/com.apple.xbs/Sources/lldb/swift-syntax/Sources/SwiftParser/Recovery.swift
SpecSet must have at least one case
/AppleInternal/Library/BuildRoots/a06d5d33-8fa4-11ee-bc94-daeed27c156b/Library/Caches/com.apple.xbs/Sources/lldb/swift-syntax/Sources/SwiftParser/Statements.swift
_TtC19CompilerSwiftParserP33_78149DB072C20084E7D780D86E26C3AF41StringLiteralExpressionIndentationChecker
expectedIndentation
arena
/AppleInternal/Library/BuildRoots/a06d5d33-8fa4-11ee-bc94-daeed27c156b/Library/Caches/com.apple.xbs/Sources/lldb/swift-syntax/Sources/SwiftParser/StringLiterals.swift
String segment produced by the lexer should not have unexpected text or trivia because we would drop it during post-processing
The lexer should only add trailing trivia to a string segment if the newline is escaped by a backslash
/AppleInternal/Library/BuildRoots/a06d5d33-8fa4-11ee-bc94-daeed27c156b/Library/Caches/com.apple.xbs/Sources/lldb/swift-syntax/Sources/SwiftParser/StringLiteralRepresentedLiteralValue.swift
appendUnescapedLiteralValue relies on properly parsed literals
/AppleInternal/Library/BuildRoots/a06d5d33-8fa4-11ee-bc94-daeed27c156b/Library/Caches/com.apple.xbs/Sources/lldb/swift-syntax/Sources/SwiftParser/TokenConsumer.swift
/AppleInternal/Library/BuildRoots/a06d5d33-8fa4-11ee-bc94-daeed27c156b/Library/Caches/com.apple.xbs/Sources/lldb/swift-syntax/Sources/SwiftParser/TriviaParser.swift
/AppleInternal/Library/BuildRoots/a06d5d33-8fa4-11ee-bc94-daeed27c156b/Library/Caches/com.apple.xbs/Sources/lldb/swift-syntax/Sources/SwiftParser/Types.swift
attached
/AppleInternal/Library/BuildRoots/a06d5d33-8fa4-11ee-bc94-daeed27c156b/Library/Caches/com.apple.xbs/Sources/lldb/swift-syntax/Sources/SwiftParser/generated/Parser+Entry.swift
/AppleInternal/Library/BuildRoots/a06d5d33-8fa4-11ee-bc94-daeed27c156b/Library/Caches/com.apple.xbs/Sources/lldb/swift-syntax/Sources/SwiftParser/Lexer/Cursor.swift
Use Result.keyword instead
sourceLocation
else
elseif
endif
available
unavailable
unexpected operator start
Unexpected start of escaped identifier
Unexpected start
not a hex literal
not at a hex float exponent?!
Caller must handle newlines in non-multiline
/AppleInternal/Library/BuildRoots/a06d5d33-8fa4-11ee-bc94-daeed27c156b/Library/Caches/com.apple.xbs/Sources/lldb/swift-syntax/Sources/SwiftParser/Lexer/LexemeSequence.swift
/AppleInternal/Library/BuildRoots/a06d5d33-8fa4-11ee-bc94-daeed27c156b/Library/Caches/com.apple.xbs/Sources/lldb/swift-syntax/Sources/SwiftParser/Lexer/RegexLiteralLexer.swift
Fatal error
lexing before the operator?
Should have lexed this?
AllCases
_alignment
_backDeploy
_cdecl
_documentation
_dynamicReplacement
_effects
_expose
_implements
_nonSendable
_objcImplementation
_objcRuntimeName
_optimize
_originallyDefinedIn
_private
_projectedValueProperty
_semantics
_silgen_name
_specialize
_spi
_spi_available
_swift_native_objc_runtime_base
_typeEraser
_unavailableFromAsync
rethrows
available
backDeployed
derivative
differentiable
exclusivity
inline
objc
transpose
required
customAttribute
optional
reverse
_linear
_forward
target
availability
exported
kind
spiModule
private
fileprivate
internal
public
open
identifier
integerLiteral
self
AllCases
message
renamed
introduced
deprecated
obsoleted
unavailable
noasync
star
identifier
AllCases
attributes
modifiers
_Trivial
_TrivialAtMost
_UnknownLayout
_RefCountedObjectLayout
_NativeRefCountedObjectLayout
_Class
_NativeClass
modifier
kind
unexpectedBeforeToken
token
typealias
struct
class
enum
protocol
func
inout
colon
binaryOperator
postfixOperator
prefixOperator
associativity
assignment
higherThan
lowerThan
poundElseifKeyword
poundElseKeyword
AllCases
basic
trailingClosure
none
matching
bindingIntroducer
dictionary
array
binaryOperator
infixQuestionMark
equal
async
arrow
throws
AllCases
Token
lexemes
currentToken
tokensConsumed
skipSinglePost
skipUntil
skipSingle
leftParen
leftBrace
leftSquareBracket
poundIfKeyword
poundElseKeyword
poundElseifKeyword
AllCases
currentToken
private
fileprivate
internal
public
AllCases
Element
RawValue
ArrayLiteralElement
rawValue
PrimaryOrGenerics
ParameterSyntax
ParameterList
unexpectedBeforeFirstName
firstName
unexpectedBeforeSecondName
secondName
Token
arena
lexemes
currentToken
nestingLevel
maximumNestingLevel
leftParen
wildcard
identifier
dollarIdentifier
inout
AllCases
rawTokenKind
keyword
isAtStartOfLine
remapping
recoveryPrecedence
allowAtStartOfLine
AllCases
didSet
willSet
init
unsafeAddress
addressWithOwner
addressWithNativeOwner
unsafeMutableAddress
mutableAddressWithOwner
mutableAddressWithNativeOwner
_read
_modify
__consuming
consuming
borrowing
mutating
nonmutating
_forget
break
continue
defer
fallthrough
discard
guard
repeat
return
switch
throw
while
yield
_compilerInitialized
_const
_local
actor
async
convenience
distributed
dynamic
final
indirect
infix
isolated
lazy
nonisolated
package
open
optional
override
postfix
prefix
required
unowned
weak
associatedtype
case
class
deinit
enum
extension
func
import
macro
operator
precedencegroup
protocol
struct
subscript
typealias
inout
pound
binaryOperator
postfixOperator
prefixOperator
exclamationMark
infixQuestionMark
postfixQuestionMark
equal
arrow
poundIfKeyword
default
owned
shared
await
_move
_borrow
consume
copy
each
backslash
prefixAmpersand
Self
dollarIdentifier
false
floatingLiteral
identifier
integerLiteral
leftBrace
leftParen
leftSquareBracket
period
poundAvailableKeyword
poundUnavailableKeyword
regexSlash
extendedRegexDelimiter
self
super
true
wildcard
rawStringDelimiter
stringQuote
multilineStringQuote
singleQuote
awaitTryMove
expressionPrefixOperator
primaryExpressionStart
ifOrSwitch
unexpectedTokens
tokenConsumptionHandle
AllCases
MisspelledAsyncSpecifiers
CorrectAsyncTokenKinds
MisspelledThrowsTokenKinds
CorrectThrowsTokenKinds
async
await
reasync
rethrows
throw
throws
asyncSpecifier
throwsSpecifier
label
colon
pattern
optional
rightBrace
case
default
semicolon
poundIfKeyword
poundEndifKeyword
poundElseKeyword
poundElseifKeyword
AllCases
expectedIndentation
arena
spec
tokenIsMissing
weakBracketed
openingBrace
unknownToken
identifierLike
exprKeyword
weakPunctuator
weakBracketClose
stmtKeyword
strongPunctuator
closingBrace
declKeyword
openingPoundIf
closingPoundIf
inout
__shared
__owned
isolated
_const
consuming
borrowing
AllCases
AllCases
static
class
final
required
optional
lazy
dynamic
infix
prefix
postfix
__consuming
mutating
nonmutating
convenience
override
private
fileprivate
internal
public
package
open
__setter_access
weak
unowned
rethrows
indirect
isolated
async
reasync
nonisolated
distributed
_const
_local
consuming
borrowing
AllCases
autoclosure
convention
noescape
escaping
differentiable
noDerivative
async
Sendable
unchecked
_local
_noMetadata
_opaqueReturnTypeOf
UnicodeScalarLiteralType
IntegerLiteralType
singleLine
multiLine
singleQuote
afterRawStringDelimiter
inStringLiteral
afterStringLiteral
inStringInterpolationStart
inStringInterpolation
inRegexLiteral
normal
preferRegexOverBinaryOperator
afterClosingStringQuote
topState
stateStack
kind
position
previousTokenKind
previousLexemeTrailingNewlinePresence
previousKeyword
input
previous
push
pushRegexLexemes
replace
tokenKind
flags
error
stateTransition
trailingTriviaLexingMode
keywordKind
trailingNewlinePresence
value
absent
present
noNewlines
escapedNewlineInMultiLineStringLiteral
newlinePresence
success
validatedEscapeSequence
endOfString
trivia
lexemeContents
perforce
Element
RawValue
ArrayLiteralElement
rawTokenKind
flags
diagnostic
start
leadingTriviaByteLength
textByteLength
trailingTriviaByteLength
cursor
rawValue
Element
Iterator
sourceBufferStart
cursor
nextToken
lexerStateAllocator
RawValue
Element
Index
SubSequence
Indices
Iterator
builder
kind
error
openingPounds
openingSlash
pattern
closingSlash
closingPounds
numOpenPounds
patternByteLength
numClosePounds
_startInput
_patternErrorOffset
_patternErrorKind
_startPrevious
lexemeCount
cursor
mustBeRegex
firstNewline
groupDepth
customCharacterClassDepth
lastUnespacedSpaceOrTab
lastNewlineEnd
candidateCloseSlashEnd
DeclarationAttributeWithSpecialSyntax
AttributeArgumentMode
DifferentiabilityKind
SpecializeParameter
ExpectedTokenKind
AccessLevelModifier
 #$%&'(+,
;=PRZq
AvailabilityArgumentKind
"ppppppppppppppppp,ppppppppppN
DeclAttributes
LayoutConstraint
AccessorIntroducer
LabelText
ExpectedTokenKind
ImportKind
IfConfigContinuationClauseStartKeyword
ExprFlavor
PatternContext
CollectionKind
ExpectedTokenKind
Lookahead
BracketedTokens
SkippingState
CompilerSwiftParser
LoopProgressCondition
AccessLevelModifier
DeclNameOptions
CompilerSwiftParser
NominalTypeDeclarationTrait
PrimaryOrGenerics
CompilerSwiftParser
RawParameterTrait
RawParameterListTrait
ParameterSyntax
RawParameterClauseTrait
ParameterList
ParameterNames
CompilerSwiftParser
Parser
PatternStartTokens
ExpectedTokens
CompilerSwiftParser
PrepareForKeywordMatch
TokenSpec
 #&),/25
"%*-0369<AJ
CompilerSwiftParser
TokenSpecSet
AccessorKind
AccessorModifier
CanBeStatementStart
ContextualDeclKeyword
DeclarationStart
Operator
OperatorLike
PoundDeclarationStart
SwitchCaseStart
TypeSpecifier
ExpressionModifierKeyword
IfOrSwitch
ExpressionPrefixOperator
MatchingPatternStart
ParameterModifier
PrimaryExpressionStart
ExpressionStart
/8ISUamnvx
CompilerSwiftParser
RecoveryConsumptionHandle

CompilerSwiftParser
AsyncEffectSpecifier
ThrowsEffectSpecifier
EffectSpecifier
RawEffectSpecifiersTrait
MisspelledAsyncSpecifiers CorrectAsyncTokenKinds MisspelledThrowsTokenKinds CorrectThrowsTokenKinds
MisspelledAsyncSpecifiers
CorrectAsyncTokenKinds
MisspelledThrowsTokenKinds
CorrectThrowsTokenKinds
StatementLabel
BindingKind
NotReturnExprStart
CompilerSwiftParser
StringLiteralExpressionIndentationChecker
CompilerSwiftParser
UnexpectedNodesCombinable
CompilerSwiftParser
TokenConsumer
Token
TokenConsumptionHandle
CompilerSwiftParser
TokenPrecedence
CompilerSwiftParser
TriviaParser
ExtraneousSpecifier
CompilerSwiftParser
DeclarationModifier
CompilerSwiftParser
SyntaxParseable
TypeAttribute
CompilerSwiftParser
StringLiteralKind
State
StateStack
LexingDiagnostic
Cursor
Position
StateTransition
Result
CharacterByte
NewlinePresence
TriviaLexingMode
TriviaResult
CharacterLex
EscapedCharacterLex
UnknownCharactersClassification
ConflictMarker
Lexeme
Flags
LexemeSequence
CompilerSwiftParser
Lexer
CompilerSwiftParser
RegexLiteralLexemes
Element
Kind
Builder
RegexLiteralLexer
222222222222
222222222222222222222222222222
22222222222222222222222222222
$ss12CaseIterableP
8operator_AASg3rhstSg
_AASgt
8operator_AASg3rhst
_AAtSg
_AAt
3key_
Sg21unexpectedBeforeColon
5colonAA5valuet
$s19CompilerSwiftParser13TokenConsumerP
5start_t
_AAt
$ss9OptionSetP
$sSY
$ss10SetAlgebraP
$ss25ExpressibleByArrayLiteralP
$s19CompilerSwiftParser27NominalTypeDeclarationTraitP
$s19CompilerSwiftParser21RawParameterListTraitP
$s19CompilerSwiftParser23RawParameterClauseTraitP
$s19CompilerSwiftParser17RawParameterTraitP
15ParameterSyntax
13ParameterList
Sg_ABt
$s19CompilerSwiftParser12TokenSpecSetP
$s19CompilerSwiftParser24RawEffectSpecifiersTraitP
22CorrectAsyncTokenKinds
23CorrectThrowsTokenKinds
25MisspelledAsyncSpecifiers
26MisspelledThrowsTokenKinds
Sg_ABt
G25unexpectedBeforeOpenQuote_AA04openD0Say
G8segmentsAB0ab5CloseD0AA05closeD0t
Si6offset_
7elementt
Si6offset_
7elementtSg
$s19CompilerSwiftParser25UnexpectedNodesCombinableP
16closingDelimiter_t
$s19CompilerSwiftParser15SyntaxParseableP
5index_
7lexemest
$ss33ExpressibleByUnicodeScalarLiteralP
$ss27ExpressibleByIntegerLiteralP
Si15delimiterLength_t
4kind_Si15delimiterLengtht
Sb11isRawString_t
17stringLiteralKind_t
17stringLiteralKind_Si10parenCountt
5index_SPy
G7lexemest
8newState_t
5error_t
SaySSG
ySSG
$sSt
$sST
$sSk
$sSK
$sSl
SiSg
8slashEnd_Si9numPoundstSg
5IndexSlQzz_x_SlRz
7ElementSTRtzlXX
visibility
metadata
AnyObject
/AppleInternal/Library/BuildRoots/a06d5d33-8fa4-11ee-bc94-daeed27c156b/Library/Caches/com.apple.xbs/Sources/lldb/swift-syntax/Sources/SwiftParser/Expressions.swift
elements must have a even number of elements
Couldn't be a trailing closure
SwiftParser/Expressions.swift
Postfix #if should only have one element
/AppleInternal/Library/BuildRoots/a06d5d33-8fa4-11ee-bc94-daeed27c156b/Library/Caches/com.apple.xbs/Sources/lldb/swift-syntax/Sources/SwiftParser/Lookahead.swift
not checking a brace?
/AppleInternal/Library/BuildRoots/a06d5d33-8fa4-11ee-bc94-daeed27c156b/Library/Caches/com.apple.xbs/Sources/lldb/swift-syntax/Sources/SwiftParser/Names.swift
/AppleInternal/Library/BuildRoots/a06d5d33-8fa4-11ee-bc94-daeed27c156b/Library/Caches/com.apple.xbs/Sources/lldb/swift-syntax/Sources/SwiftParser/Parser.swift
/AppleInternal/Library/BuildRoots/a06d5d33-8fa4-11ee-bc94-daeed27c156b/Library/Caches/com.apple.xbs/Sources/lldb/swift-syntax/Sources/SwiftParser/TokenSpec.swift
To create a TokenSpec for a keyword use the initializer that takes a keyword
match handle 
/AppleInternal/Library/BuildRoots/a06d5d33-8fa4-11ee-bc94-daeed27c156b/Library/Caches/com.apple.xbs/Sources/lldb/swift-syntax/Sources/SwiftParser/Recovery.swift
SpecSet must have at least one case
/AppleInternal/Library/BuildRoots/a06d5d33-8fa4-11ee-bc94-daeed27c156b/Library/Caches/com.apple.xbs/Sources/lldb/swift-syntax/Sources/SwiftParser/Statements.swift
_TtC19CompilerSwiftParserP33_78149DB072C20084E7D780D86E26C3AF41StringLiteralExpressionIndentationChecker
expectedIndentation
arena
/AppleInternal/Library/BuildRoots/a06d5d33-8fa4-11ee-bc94-daeed27c156b/Library/Caches/com.apple.xbs/Sources/lldb/swift-syntax/Sources/SwiftParser/StringLiterals.swift
String segment produced by the lexer should not have unexpected text or trivia because we would drop it during post-processing
The lexer should only add trailing trivia to a string segment if the newline is escaped by a backslash
/AppleInternal/Library/BuildRoots/a06d5d33-8fa4-11ee-bc94-daeed27c156b/Library/Caches/com.apple.xbs/Sources/lldb/swift-syntax/Sources/SwiftParser/StringLiteralRepresentedLiteralValue.swift
appendUnescapedLiteralValue relies on properly parsed literals
/AppleInternal/Library/BuildRoots/a06d5d33-8fa4-11ee-bc94-daeed27c156b/Library/Caches/com.apple.xbs/Sources/lldb/swift-syntax/Sources/SwiftParser/TokenConsumer.swift
/AppleInternal/Library/BuildRoots/a06d5d33-8fa4-11ee-bc94-daeed27c156b/Library/Caches/com.apple.xbs/Sources/lldb/swift-syntax/Sources/SwiftParser/TriviaParser.swift
/AppleInternal/Library/BuildRoots/a06d5d33-8fa4-11ee-bc94-daeed27c156b/Library/Caches/com.apple.xbs/Sources/lldb/swift-syntax/Sources/SwiftParser/Types.swift
attached
/AppleInternal/Library/BuildRoots/a06d5d33-8fa4-11ee-bc94-daeed27c156b/Library/Caches/com.apple.xbs/Sources/lldb/swift-syntax/Sources/SwiftParser/generated/Parser+Entry.swift
/AppleInternal/Library/BuildRoots/a06d5d33-8fa4-11ee-bc94-daeed27c156b/Library/Caches/com.apple.xbs/Sources/lldb/swift-syntax/Sources/SwiftParser/Lexer/Cursor.swift
Use Result.keyword instead
sourceLocation
else
elseif
endif
available
unavailable
unexpected operator start
Unexpected start of escaped identifier
Unexpected start
not a hex literal
not at a hex float exponent?!
Caller must handle newlines in non-multiline
/AppleInternal/Library/BuildRoots/a06d5d33-8fa4-11ee-bc94-daeed27c156b/Library/Caches/com.apple.xbs/Sources/lldb/swift-syntax/Sources/SwiftParser/Lexer/LexemeSequence.swift
/AppleInternal/Library/BuildRoots/a06d5d33-8fa4-11ee-bc94-daeed27c156b/Library/Caches/com.apple.xbs/Sources/lldb/swift-syntax/Sources/SwiftParser/Lexer/RegexLiteralLexer.swift
Fatal error
lexing before the operator?
Should have lexed this?
AllCases
_alignment
_backDeploy
_cdecl
_documentation
_dynamicReplacement
_effects
_expose
_implements
_nonSendable
_objcImplementation
_objcRuntimeName
_optimize
_originallyDefinedIn
_private
_projectedValueProperty
_semantics
_silgen_name
_specialize
_spi
_spi_available
_swift_native_objc_runtime_base
_typeEraser
_unavailableFromAsync
rethrows
available
backDeployed
derivative
differentiable
exclusivity
inline
objc
transpose
required
customAttribute
optional
reverse
_linear
_forward
target
availability
exported
kind
spiModule
private
fileprivate
internal
public
open
identifier
integerLiteral
self
AllCases
message
renamed
introduced
deprecated
obsoleted
unavailable
noasync
star
identifier
AllCases
attributes
modifiers
_Trivial
_TrivialAtMost
_UnknownLayout
_RefCountedObjectLayout
_NativeRefCountedObjectLayout
_Class
_NativeClass
modifier
kind
unexpectedBeforeToken
token
typealias
struct
class
enum
protocol
func
inout
colon
binaryOperator
postfixOperator
prefixOperator
associativity
assignment
higherThan
lowerThan
poundElseifKeyword
poundElseKeyword
AllCases
basic
trailingClosure
none
matching
bindingIntroducer
dictionary
array
binaryOperator
infixQuestionMark
equal
async
arrow
throws
AllCases
Token
lexemes
currentToken
tokensConsumed
skipSinglePost
skipUntil
skipSingle
leftParen
leftBrace
leftSquareBracket
poundIfKeyword
poundElseKeyword
poundElseifKeyword
AllCases
currentToken
private
fileprivate
internal
public
AllCases
Element
RawValue
ArrayLiteralElement
rawValue
PrimaryOrGenerics
ParameterSyntax
ParameterList
unexpectedBeforeFirstName
firstName
unexpectedBeforeSecondName
secondName
Token
arena
lexemes
currentToken
nestingLevel
maximumNestingLevel
leftParen
wildcard
identifier
dollarIdentifier
inout
AllCases
rawTokenKind
keyword
isAtStartOfLine
remapping
recoveryPrecedence
allowAtStartOfLine
AllCases
didSet
willSet
init
unsafeAddress
addressWithOwner
addressWithNativeOwner
unsafeMutableAddress
mutableAddressWithOwner
mutableAddressWithNativeOwner
_read
_modify
__consuming
consuming
borrowing
mutating
nonmutating
_forget
break
continue
defer
fallthrough
discard
guard
repeat
return
switch
throw
while
yield
_compilerInitialized
_const
_local
actor
async
convenience
distributed
dynamic
final
indirect
infix
isolated
lazy
nonisolated
package
open
optional
override
postfix
prefix
required
unowned
weak
associatedtype
case
class
deinit
enum
extension
func
import
macro
operator
precedencegroup
protocol
struct
subscript
typealias
inout
pound
binaryOperator
postfixOperator
prefixOperator
exclamationMark
infixQuestionMark
postfixQuestionMark
equal
arrow
poundIfKeyword
default
owned
shared
await
_move
_borrow
consume
copy
each
backslash
prefixAmpersand
Self
dollarIdentifier
false
floatingLiteral
identifier
integerLiteral
leftBrace
leftParen
leftSquareBracket
period
poundAvailableKeyword
poundUnavailableKeyword
regexSlash
extendedRegexDelimiter
self
super
true
wildcard
rawStringDelimiter
stringQuote
multilineStringQuote
singleQuote
awaitTryMove
expressionPrefixOperator
primaryExpressionStart
ifOrSwitch
unexpectedTokens
tokenConsumptionHandle
AllCases
MisspelledAsyncSpecifiers
CorrectAsyncTokenKinds
MisspelledThrowsTokenKinds
CorrectThrowsTokenKinds
async
await
reasync
rethrows
throw
throws
asyncSpecifier
throwsSpecifier
label
colon
pattern
optional
rightBrace
case
default
semicolon
poundIfKeyword
poundEndifKeyword
poundElseKeyword
poundElseifKeyword
AllCases
expectedIndentation
arena
spec
tokenIsMissing
weakBracketed
openingBrace
unknownToken
identifierLike
exprKeyword
weakPunctuator
weakBracketClose
stmtKeyword
strongPunctuator
closingBrace
declKeyword
openingPoundIf
closingPoundIf
inout
__shared
__owned
isolated
_const
consuming
borrowing
AllCases
AllCases
static
class
final
required
optional
lazy
dynamic
infix
prefix
postfix
__consuming
mutating
nonmutating
convenience
override
private
fileprivate
internal
public
package
open
__setter_access
weak
unowned
rethrows
indirect
isolated
async
reasync
nonisolated
distributed
_const
_local
consuming
borrowing
AllCases
autoclosure
convention
noescape
escaping
differentiable
noDerivative
async
Sendable
unchecked
_local
_noMetadata
_opaqueReturnTypeOf
UnicodeScalarLiteralType
IntegerLiteralType
singleLine
multiLine
singleQuote
afterRawStringDelimiter
inStringLiteral
afterStringLiteral
inStringInterpolationStart
inStringInterpolation
inRegexLiteral
normal
preferRegexOverBinaryOperator
afterClosingStringQuote
topState
stateStack
kind
position
previousTokenKind
previousLexemeTrailingNewlinePresence
previousKeyword
input
previous
push
pushRegexLexemes
replace
tokenKind
flags
error
stateTransition
trailingTriviaLexingMode
keywordKind
trailingNewlinePresence
value
absent
present
noNewlines
escapedNewlineInMultiLineStringLiteral
newlinePresence
success
validatedEscapeSequence
endOfString
trivia
lexemeContents
perforce
Element
RawValue
ArrayLiteralElement
rawTokenKind
flags
diagnostic
start
leadingTriviaByteLength
textByteLength
trailingTriviaByteLength
cursor
rawValue
Element
Iterator
sourceBufferStart
cursor
nextToken
lexerStateAllocator
RawValue
Element
Index
SubSequence
Indices
Iterator
builder
kind
error
openingPounds
openingSlash
pattern
closingSlash
closingPounds
numOpenPounds
patternByteLength
numClosePounds
_startInput
_patternErrorOffset
_patternErrorKind
_startPrevious
lexemeCount
cursor
mustBeRegex
firstNewline
groupDepth
customCharacterClassDepth
lastUnespacedSpaceOrTab
lastNewlineEnd
candidateCloseSlashEnd
