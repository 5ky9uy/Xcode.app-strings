::posix_spawnattr_init (&attr) error: 
::posix_spawnattr_setflags (&attr, flags) error: 
posix_spawnattr_setbinpref_np () error: 
posix_spawn() error: 
a:deE:hsu:?
i386
x86_64
x86_64h
error: unsupported cpu type '%s'
warning: working directory doesn't exist: '%s'
error: socket (AF_UNIX, SOCK_STREAM, 0)
error: connect (socket, &saddr_un, saddr_un_len)
error: send (s, pid_str, pid_str_len, 0)
clear
Launching: '%s'
Working directory: '%s'
%i arguments:
argv[%u] = '%s'
%s%s
arch
disable-aslr
no-env
help
setsid
unix-socket
working-dir
NAME
    darwin-debug -- posix spawn a process that is stopped at the entry point
                    for debugging.
SYNOPSIS
    darwin-debug --unix-socket=<SOCKET> [--arch=<ARCH>] [--working-dir=<PATH>] [--disable-aslr] [--no-env] [--setsid] [--help] -- <PROGRAM> [<PROGRAM-ARG> <PROGRAM-ARG> ....]
DESCRIPTION
    darwin-debug will exec itself into a child process <PROGRAM> that is
    halted for debugging. It does this by using posix_spawn() along with
    darwin specific posix_spawn flags that allows exec only (no fork), and
    stop at the program entry point. Any program arguments <PROGRAM-ARG> are
    passed on to the exec as the arguments for the new process. The current
    environment will be passed to the new process unless the "--no-env"
    option is used. A unix socket must be supplied using the
    --unix-socket=<SOCKET> option so the calling program can handshake with
    this process and get its process id.
EXAMPLE
   darwin-debug --arch=i386 -- /bin/ls -al /tmp
# Create an LC_SEGMENT with the special name ExecExtraSuspend which
# debugserver can detect - it tells debugserver that it will exec a
# process and that process will start suspended, so debugserver will
# need to double-resume it to make it run.  A random file is copied
# into the segment.
set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl,-sectcreate,ExecExtraSuspend,ExecExtraSuspend,${CMAKE_CURRENT_SOURCE_DIR}/CMakeLists.txt")
add_lldb_tool(darwin-debug ADD_TO_FRAMEWORK
  darwin-debug.cpp
